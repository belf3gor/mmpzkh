&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
		
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016Кв1";
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.Тип20_10             = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 10));
	
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы3     = "П0000300010";
	СтруктураРеквизитовФормы.мИдГруппы4     = "П0000400010";
	СтруктураРеквизитовФормы.мИдГруппы5     = "П0000500010";
	СтруктураРеквизитовФормы.мИдГруппы6     = "П1003100000";
	СтруктураРеквизитовФормы.мИдГруппы7     = "П1005100000";
	СтруктураРеквизитовФормы.мИдГруппы8     = "П1007100000";
	СтруктураРеквизитовФормы.мИдГруппы9     = "П1009100000";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы3     = 1; //(16)
	КолИсхСтрокИдГруппы4     = 1; //(16)
	КолИсхСтрокИдГруппы5     = 1; //(16)
	КолИсхСтрокИдГруппы6     = 1; //(16)
	КолИсхСтрокИдГруппы7     = 1; //(16)
	КолИсхСтрокИдГруппы8     = 1; //(16)
	КолИсхСтрокИдГруппы9     = 1; //(16)
	
	КолКолонокИдГруппы3     = 25;
	КолКолонокИдГруппы4     = 8;
	КолКолонокИдГруппы5     = 25;
	КолКолонокИдГруппы6     = 1;
	КолКолонокИдГруппы7     = 1;
	КолКолонокИдГруппы8     = 1;
	КолКолонокИдГруппы9     = 1;
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
				
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     СтруктураРеквизитовФормы.мИдГруппы3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     СтруктураРеквизитовФормы.мИдГруппы7);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     СтруктураРеквизитовФормы.мИдГруппы8);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     СтруктураРеквизитовФормы.мИдГруппы9);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Расчет",      "ТаблицаСтраницыРасчет");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3",     "ТаблицаСтраницыРаздела3");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел3_1",   "ТаблицаСтраницыРаздела3_1");
	
	ИнициализироватьМногоуровневыеРазделы();

	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,    КолИсхСтрокИдГруппы3);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,    КолИсхСтрокИдГруппы4);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,    КолИсхСтрокИдГруппы5);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,    КолИсхСтрокИдГруппы6);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,    КолИсхСтрокИдГруппы7);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,    КолИсхСтрокИдГруппы8);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,    КолИсхСтрокИдГруппы9);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы3,     КолКолонокИдГруппы3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,     КолКолонокИдГруппы4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5,     КолКолонокИдГруппы5);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6,     КолКолонокИдГруппы6);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7,     КолКолонокИдГруппы7);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы8,     КолКолонокИдГруппы8);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы9,     КолКолонокИдГруппы9);
		
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);     // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);     // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "22/02/2017";
		
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета = 1110012;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы8");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы9");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("Тип20_10");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДатаПодписиДоИзменения");
	
КонецПроцедуры

&НаСервере
Функция ПустоеОписаниеРаздела()
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("ИмяОбласти");
	Результат.Вставить("ИмяОбластиДобСтр");
	Результат.Вставить("ИмяОбластиУдСтр");
	Результат.Вставить("Подчиненные", Новый Массив);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПолучитьВерхНизМногоуровневойЧасти(НаимРаздела, Верх, Низ)
	ОписаниеСтруктуры = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	МакетСтраницы = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Верх = 9999;
	Низ = 0;
	Для Каждого Стр Из ОписаниеСтруктуры Цикл 
		Обл = МакетСтраницы.Область(Стр.ИмяОбласти);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		Обл = МакетСтраницы.Область(Стр.ИмяОбластиДобСтр);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		
		ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, Стр.Подчиненные, Верх, Низ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, ОписаниеСтруктуры, Верх, Низ)
	Для Каждого Стр Из ОписаниеСтруктуры Цикл 
		Обл = МакетСтраницы.Область(Стр.ИмяОбласти);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		Обл = МакетСтраницы.Область(Стр.ИмяОбластиДобСтр);
		Верх = ?(Верх > Обл.Верх, Обл.Верх, Верх);
		Низ = ?(Низ < Обл.Низ, Обл.Низ, Низ);
		
		ПолучитьВерхНизМногоуровневойЧастиРек(МакетСтраницы, Стр.Подчиненные, Верх, Низ);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_0");
	мСтруктураМногоуровневыхРазделов["Раздел1_0"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_0"].Добавить(ПустоеОписаниеРаздела());
	мСтруктураМногоуровневыхРазделов["Раздел1_0"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_0 = мСтруктураМногоуровневыхРазделов["Раздел1_0"][0];
	Раздел1_0["Имя"] = "П10000";
	Раздел1_0["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_0["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_0["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_0["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_0["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	Раздел1_0 = мСтруктураМногоуровневыхРазделов["Раздел1_0"][1];
	Раздел1_0["Имя"] = "П20000";
	Раздел1_0["ИмяОбласти"] = "МногострочнаяЧастьП20000";
	Раздел1_0["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП20000";
	Раздел1_0["ИмяОбластиУдСтр"] = "УдалитьСтрокуП20000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_1");
	мСтруктураМногоуровневыхРазделов["Раздел1_1"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_1"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_1 = мСтруктураМногоуровневыхРазделов["Раздел1_1"][0];
	Раздел1_1["Имя"] = "П10000";
	Раздел1_1["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_1["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_1["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_1["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_1["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1_2");
	мСтруктураМногоуровневыхРазделов["Раздел1_2"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел1_2"].Добавить(ПустоеОписаниеРаздела());
	Раздел1_2 = мСтруктураМногоуровневыхРазделов["Раздел1_2"][0];
	Раздел1_2["Имя"] = "П10000";
	Раздел1_2["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел1_2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел1_2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел1_2["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел1_2["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2");
	мСтруктураМногоуровневыхРазделов["Раздел2"] = Новый Массив;
	мСтруктураМногоуровневыхРазделов["Раздел2"].Добавить(ПустоеОписаниеРаздела());
	мСтруктураМногоуровневыхРазделов["Раздел2"].Добавить(ПустоеОписаниеРаздела());
	Раздел2 = мСтруктураМногоуровневыхРазделов["Раздел2"][0];
	Раздел2["Имя"] = "П10000";
	Раздел2["ИмяОбласти"] = "МногострочнаяЧастьП10000";
	Раздел2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП10000";
	Раздел2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП10000";
	Раздел2["Подчиненные"].Добавить(ПустоеОписаниеРаздела());
	
	Подч = Раздел2["Подчиненные"][0];
	Подч["Имя"] = "П11000";
	Подч["ИмяОбласти"] = "МногострочнаяЧастьП11000";
	Подч["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП11000";
	Подч["ИмяОбластиУдСтр"] = "УдалитьСтрокуП11000";
	
	Раздел2 = мСтруктураМногоуровневыхРазделов["Раздел2"][1];
	Раздел2["Имя"] = "П20000";
	Раздел2["ИмяОбласти"] = "МногострочнаяЧастьП20000";
	Раздел2["ИмяОбластиДобСтр"] = "ДобавлениеСтрокиП20000";
	Раздел2["ИмяОбластиУдСтр"] = "УдалитьСтрокуП20000";
КонецПроцедуры

&НаСервере
Функция ПолучитьПустуюСтруктуруДанных(НаимРаздела)
	Прототип = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Результат = Новый Структура;
	Для Каждого Элт Из Прототип Цикл 
		Результат.Вставить(Элт.Имя, Новый СписокЗначений);
		ЗаполнитьПустуюСтруктуруДанныхРек(Элт, Результат[Элт.Имя], Макет);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьПустуюФиксированнуюСтруктуруДанных(НаимРаздела)
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + НаимРаздела);
	
	Результат = Новый Структура;
	Верх = Неопределено;
	Низ = Неопределено;
	ПолучитьВерхНизМногоуровневойЧасти(НаимРаздела, Верх, Низ);
	
	Для Каждого Обл Из Макет.Области Цикл 
		Если Обл.Низ < Верх И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
			И Обл.СодержитЗначение Тогда 
		
			Результат.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьПустуюСтруктуруДанныхРек(Элт, СписокЗначений, Макет)
	Значение = Новый Структура("Данные, ДопСтроки", Новый Структура, Новый Структура);
	Область = Макет.ПолучитьОбласть(Элт.ИмяОбласти);
	Для Каждого Обл Из Область.Области Цикл 
		Если СтрНачинаетсяС(Обл.Имя, Элт.Имя) И Обл.СодержитЗначение = Истина Тогда 
			Значение.Данные.Вставить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Подч Из Элт.Подчиненные Цикл 
		Значение.ДопСтроки.Вставить(Подч.Имя, Новый СписокЗначений);
		ЗаполнитьПустуюСтруктуруДанныхРек(Подч, Значение.ДопСтроки[Подч.Имя], Макет);
	КонецЦикла;
	
	СписокЗначений.Добавить(Значение);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Элт, СписокЗначений, ПустаяСтруктура, Путь)
	КоличествоСтрок = 0;
	Для Каждого КЗ Из ПустаяСтруктура.Данные Цикл
		Пока Истина Цикл
			Если ТабличныйДокумент.Области.Найти(КЗ.Ключ + Путь + "_" + Формат(КоличествоСтрок + 1, "ЧГ=")) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		Прервать;
	КонецЦикла;
	
	Для Инд = 1 По КоличествоСтрок Цикл 
		Значение = Новый Структура("Данные, ДопСтроки", Новый Структура, Новый Структура);
		Постфикс = Путь + "_" + Формат(Инд, "ЧГ=");
		Для Каждого КЗ Из ПустаяСтруктура.Данные Цикл
			Значение.Данные.Вставить(КЗ.Ключ, ТабличныйДокумент.Области[КЗ.Ключ + Постфикс].Значение);
		КонецЦикла;
		
		Для Каждого Подч Из Элт.Подчиненные Цикл 
			Значение.ДопСтроки.Вставить(Подч.Имя, Новый СписокЗначений);
			ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Подч, Значение.ДопСтроки[Подч.Имя], ПустаяСтруктура.ДопСтроки[Подч.Имя][0].Значение, Постфикс)
		КонецЦикла;
		
		СписокЗначений.Добавить(Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаполненнуюСтруктуруДанных(НаимРаздела)
	Прототип = мСтруктураМногоуровневыхРазделов[НаимРаздела];
	ПустаяСтруктура = ПолучитьПустуюСтруктуруДанных(НаимРаздела);
	
	Результат = Новый Структура;
	Для Каждого Элт Из Прототип Цикл 
		Результат.Вставить(Элт.Имя, Новый СписокЗначений);
		ЗаполнитьЗаполненнуюСтруктуруДанныхРек(Элт, Результат[Элт.Имя], ПустаяСтруктура[Элт.Имя][0].Значение, "");
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СобратьДанныеМногоуровневогоРаздела(НаимРаздела, Приемник)
	Приемник.Данные = ПолучитьЗаполненнуюСтруктуруДанных(НаимРаздела);
	Для Каждого КЗ Из Приемник.ФиксированныеДанные Цикл 
		Приемник.ФиксированныеДанные[КЗ.Ключ] = ТабличныйДокумент.Области[КЗ.Ключ].Значение;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРасчет.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздела3_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_0.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел1_2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекущейСтраницыПанели) Тогда 
		СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
		Таблица = ЭтаФорма["ТаблицаСтраницы"+ИмяТекущейСтраницыПанели];
		НовСтр = Таблица.Добавить();
		Для Каждого Стр Из Таблица Цикл 
			Стр.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		Прототип = мСтруктураМногоуровневыхРазделов[ИмяТекущейСтраницыПанели];
		НовСтр.Данные = ПолучитьПустуюСтруктуруДанных(ИмяТекущейСтраницыПанели);
		НовСтр.ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(ИмяТекущейСтраницыПанели);
		РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекущейСтраницыПанели);

	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Обл = ТабличныйДокумент.Области.Найти("UID_файла");
	Если Обл <> Неопределено Тогда 
		Обл.Значение = Неопределено;
		ВывестиМакетПрисоединенныеФайлыРазделов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт

	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Расчет
	СтрокаУровня1.ИмяСтраницы                          = "Расчет";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть6";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть7";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы8;
	НовСтр.Область = "МногострочнаяЧасть8";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы9;
	НовСтр.Область = "МногострочнаяЧасть9";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Ложь;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы3;
	НовСтр.Область = "МногострочнаяЧасть1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела3
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3_1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "_нет";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки         = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Приложения";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз                         = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_0";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_1";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1_2";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",     СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",     СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",     СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",     СтруктураРеквизитовФормы.мИдГруппы9);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",     СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",     СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",     СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",     СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",     СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",     СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",     СтруктураРеквизитовФормы.мИдГруппы9);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы3 Или ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Раздел3";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы6 Или ИдГруппы = ИдГрупп.мИдГруппы7 Или ИдГруппы = ИдГрупп.мИдГруппы8 Или ИдГруппы = ИдГрупп.мИдГруппы9 Тогда
		ТекТабличноеПоле = "Расчет";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел3_1";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",    СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",    СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",    СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",    СтруктураРеквизитовФормы.мИдГруппы9);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы3",    СтруктураРеквизитовФормы.мИдГруппы3);
	ИдГрупп.Вставить("мИдГруппы4",    СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы5",    СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6",    СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7",    СтруктураРеквизитовФормы.мИдГруппы7);
	ИдГрупп.Вставить("мИдГруппы8",    СтруктураРеквизитовФормы.мИдГруппы8);
	ИдГрупп.Вставить("мИдГруппы9",    СтруктураРеквизитовФормы.мИдГруппы9);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Если ИмяСтраницы = "Расчет" Тогда
	//	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ИзмененияПроизошли = Ложь;

	Возврат ИзмененияПроизошли;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()

	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");
	ПолеТабличногоДокументаТитульный.Области.ГодОтчета.Значение   = НомерГода;

	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	СтрокаСведений = "";

	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		СтрокаСведений = "НаимЮЛПол, ТелОрганизации, АдрЮР, ";
	КонецЕсли;

	СтрокаСведений = СтрокаСведений + "ФИОРук, ФИОБух, ТипНП";

	Результат = РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСведенияОбОрганизацииНаСервере(ЭтаФорма, СтрокаСведений);

	ИННКПП = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ");

	ТабличныйДокумент.Области.ИНН1.Значение = ИННКПП.ИННЮЛ;
	ТабличныйДокумент.Области.КПП1.Значение = ИННКПП.КППЮЛ;

	Если (НЕ ВПрограммеИзмененаДатаПодписи) И (Результат <> Неопределено) Тогда

		Если (НЕ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация) И (НЕ СтруктураРеквизитовФормы.мДокументВосстановлен) Тогда
						
			Если ДатаПодписи >= '20120101' Тогда	
				КБК = "";
			Иначе
				КБК = "04811201000010000120";
			КонецЕсли;
			
			ТаблицаРасчет = ЭтаФорма[мСтруктураМногостраничныхРазделов["Расчет"]];
			АктСтраницыРасчет = ТаблицаРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			Если АктСтраницыРасчет.Количество() > 0 Тогда
				Данные = АктСтраницыРасчет[0].Данные[0].Значение;
			Иначе
				Данные = ТаблицаРасчет[0].Данные[0].Значение;
			КонецЕсли;
			Если ТипЗнч(Данные) = Тип("Структура") Тогда
				Данные.Вставить("КБК1", КБК);
			КонецЕсли; 

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрЗаменить(Результат.АдрЮР, ",","")) Тогда
			ТабличныйДокумент.Области.АдрЮР.Значение = "";
		Иначе
			ТабличныйДокумент.Области.АдрЮР.Значение = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Результат.АдрЮР);
		КонецЕсли;

		Если Результат.ТипНП = 2 Тогда
			
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтаФорма);
			
		КонецЕсли;

	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		Если Результат.ТипНП = 2 Тогда
			ТабличныйДокумент.Области.ОргДиректорОбособ.Значение = ТабличныйДокумент.Области.ОргДиректор.Значение;
			ТабличныйДокумент.Области.ОргДиректор.Значение = "";
			ТабличныйДокумент.Области.ОргБухгалтер.Значение = "";
			
			ЗаполнитьДатуВЯчейках(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	ФормаНастройкиОтчета.Элементы.СвойстваРазделов.Видимость = Ложь;
	ФормаНастройкиОтчета.Элементы.Дерево.Видимость = Ложь;
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ПерекраситьМногоуровневыйРаздел(ИмяСтраницы)
	СохранитьДанныеРаздела(ИмяСтраницы, Истина);
	Таблица = ЭтаФорма["ТаблицаСтраницы" + ИмяСтраницы];
	СтрТаблицыСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицыСтраницы[0]);
	ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ИндексТекСтраницыРаздела+1);
	Расчет(ЭтаФорма, ИмяСтраницы);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли
		
		ИмяСтраницы = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		Если ЗначениеЗаполнено(ИмяСтраницы) И мСтруктураМногоуровневыхРазделов.Свойство(ИмяСтраницы) Тогда 
			ПерекраситьМногоуровневыйРаздел(ИмяСтраницы);
		КонецЕсли;
		
		Расчет(ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					// устанавливаем порядковый номер строки
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы3 Тогда 
		ИмяМнгЧ = "МногострочнаяЧасть1";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы5 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть2";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы6 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть6";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы7 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть7";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы8 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть8";
	ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы9 Тогда
		ИмяМнгЧ = "МногострочнаяЧасть9";
	Иначе
		ИмяМнгЧ = "МногострочнаяЧасть";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть(ИмяМнгЧ);
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области[ИмяМнгЧ].Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области[ИмяМнгЧ].Верх, , ТекТабличноеПоле.Области[ИмяМнгЧ].Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = ИмяМнгЧ;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	Расчет(ЭтотОбъект, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВывод(Обл, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
	Если Не нСтр.ПроверитьВывод(Обл) Тогда 
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблЗаголовокТаблицы);
	КонецЕсли;
	нСтр.Вывести(Обл);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбластьДанными(Данные, Область)
	Для Каждого Обл Из Область.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
			Данные.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СтрокаВКвадраты(Строка, ИмяПараметра, Область)
	ИмяПараметраИтог = ИмяПараметра + "_";
	Для Инд = 1 По СтрДлина(Строка) Цикл 
		Обл = Область.Области.Найти(ИмяПараметраИтог + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Обл.Значение = Сред(Строка, Инд, 1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЧислоВКвадраты(Число, ИмяПараметра, Область)
	Если Число = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяПараметраИтог = ИмяПараметра + "_";
	Для ИндДл = 1 По 20 Цикл 
		Обл = Область.Области.Найти(ИмяПараметраИтог + Формат(ИндДл, "ЧГ="));
		Если Обл = Неопределено Тогда 
			ИндДл = ИндДл - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИндДл = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ЧислоСтр = Прав("                             " + Формат(Число, "ЧДЦ=2; ЧН=0,00; ЧГ="), ИндДл);
	Для Инд = 1 По ИндДл Цикл 
		Область.Области.Найти(ИмяПараметраИтог + Формат(Инд, "ЧГ=")).Значение = Сред(ЧислоСтр, Инд, 1);
	КонецЦикла
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьСтруктурыСтроками(Стр)
	Для Каждого КЗ Из Стр Цикл 
		Если ТипЗнч(КЗ.Значение) = Тип("Строка") И ЗначениеЗаполнено(КЗ.Значение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ПечатьНаСервере_Раздел3(МассивДляПроверки, ДП)
	Лист1 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_Раздел3ч1");
	Лист2 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_Раздел3ч2");
	ОблШапка1 = Лист1.ПолучитьОбласть("Шапка");
	ОблШапка2 = Лист2.ПолучитьОбласть("Шапка");
	ОблНумератор1 = Лист1.ПолучитьОбласть("ОбластьНумератор");
	ОблНумератор2 = Лист2.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы1 = Лист1.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблЗаголовокТаблицы2 = Лист2.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблСтрока1_1 = Лист1.ПолучитьОбласть("Строка1");
	ОблСтрока2_1 = Лист2.ПолучитьОбласть("Строка1");
	ОблСтрока1_2 = Лист1.ПолучитьОбласть("Строка2");
	ОблСтрока2_2 = Лист2.ПолучитьОбласть("Строка2");
	ОблПодвал1 = Лист1.ПолучитьОбласть("Подвал");
	ОблПодвал2 = Лист2.ПолучитьОбласть("Подвал");
	ОблИтог1 = Лист1.ПолучитьОбласть("Итоги");
	ОблИтог2 = Лист2.ПолучитьОбласть("Итоги");
	
	МассивДляПроверки.Очистить();
	МассивДляПроверки.Вставить(0, ОблПодвал1);
	МассивДляПроверки.Вставить(1, ОблИтог1);
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал1.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
		ОблПодвал2.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл 
		Данные = Стр.Данные[0].Значение;
		Данные = Стр.Данные[0].Значение;
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Данные) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДопСтроки = Стр.ДанныеДопСтрок[0].Значение;
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Данные, ОблШапка1);
		ЗаполнитьОбластьДанными(Данные, ОблИтог2);
		нСтр.Вывести(ОблНумератор1);
		нСтр.Вывести(ОблШапка1);
		нСтр.Вывести(ОблЗаголовокТаблицы1);
		
		нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
		нСтр2.Вывести(ОблНумератор2);
		нСтр2.Вывести(ОблШапка2);
		нСтр2.Вывести(ОблЗаголовокТаблицы2);
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы3] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1_1);
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока2_1);
			ОблСтрока1_1.Области["П000030001001"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 2 Тогда 
				МассивДляПроверки[2] = ОблСтрока1_1;
			Иначе 
				МассивДляПроверки.Вставить(2, ОблСтрока1_1);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор1);
				нСтр.Вывести(ОблЗаголовокТаблицы1);
				нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр2.Вывести(ОблНумератор2);
				нСтр2.Вывести(ОблЗаголовокТаблицы2);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1_1);
			нСтр2.Вывести(ОблСтрока2_1);
		КонецЦикла;
		
		нСтр.Вывести(ОблИтог1);
		нСтр2.Вывести(ОблИтог2);
		МассивДляПроверки.Удалить(1);
		Если Не нСтр.ПроверитьВывод(ОблИтог1) Тогда
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор1);
			нСтр.Вывести(ОблЗаголовокТаблицы1);
			нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр2.Вывести(ОблНумератор2);
			нСтр2.Вывести(ОблЗаголовокТаблицы2);
		КонецЕсли;
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки[СтруктураРеквизитовФормы.мИдГруппы5] Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1_2);
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока2_2);
			ОблСтрока1_2.Области["П000050001001"].Значение = Формат(НомДопСтр, "ЧГ=");
			Если МассивДляПроверки.ВГраница() = 1 Тогда 
				МассивДляПроверки[1] = ОблСтрока1_2;
			Иначе 
				МассивДляПроверки.Вставить(1, ОблСтрока1_2);
			КонецЕсли;
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.Вывести(ОблНумератор1);
				нСтр.Вывести(ОблЗаголовокТаблицы1);
				нСтр2 = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр2.Вывести(ОблНумератор2);
				нСтр2.Вывести(ОблЗаголовокТаблицы2);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1_2);
			нСтр2.Вывести(ОблСтрока2_2);
		КонецЦикла;
		
		нСтр.Вывести(ОблПодвал1);
		нСтр2.Вывести(ОблПодвал2);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр2, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел3_1(МассивДляПроверки, ДП)
	Лист1 = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_Раздел3_1");
	ОблШапка1 = Лист1.ПолучитьОбласть("Шапка");
	ОблНумератор = Лист1.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы1 = Лист1.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблСтрока1 = Лист1.ПолучитьОбласть("Строка");
	ОблПодвал1 = Лист1.ПолучитьОбласть("Подвал");
	ОблИтог1 = Лист1.ПолучитьОбласть("Итоги");
	
	МассивДляПроверки.Очистить();
	МассивДляПроверки.Вставить(0, ОблПодвал1);
	МассивДляПроверки.Вставить(1, ОблИтог1);
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал1.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл 
		Данные = Стр.Данные[0].Значение;
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Данные) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДопСтроки = Стр.ДанныеДопСтрок[0].Значение;
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
		ЗаполнитьОбластьДанными(Данные, ОблШапка1);
		ЗаполнитьОбластьДанными(Данные, ОблИтог1);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка1);
		нСтр.Вывести(ОблЗаголовокТаблицы1);
		
		НомДопСтр = 0;
		Для Каждого СтрМнг Из ДопСтроки Цикл
			НомДопСтр = НомДопСтр + 1;
			ЗаполнитьОбластьДанными(СтрМнг, ОблСтрока1);
			ОблСтрока1.Области["П000040001001"].Значение = Формат(НомДопСтр, "ЧГ=");
			МассивДляПроверки.Вставить(2, ОблСтрока1);
			
			Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда
				СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
				нСтр = РегламентированнаяОтчетность.НоваяСтраница();
				нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
				нСтр.Вывести(ОблНумератор);
				нСтр.Вывести(ОблЗаголовокТаблицы1);
			КонецЕсли;
			
			нСтр.Вывести(ОблСтрока1);
		КонецЦикла;
		
		нСтр.Вывести(ОблИтог1);
		нСтр.Вывести(ОблПодвал1);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, ИмяРаздела)
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_" + ИмяРаздела);
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблНумератор = Макет.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблУровень1Заголовок = Макет.ПолучитьОбласть("Уровень1Заголовок");
	ОблУровень1Строка = Макет.ПолучитьОбласть("Уровень1Строка");
	ОблУровень1Итоги = Макет.ПолучитьОбласть("Уровень1Итоги");
	ОблУровень0Итоги = Макет.ПолучитьОбласть("Уровень0Итоги");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	МассивДляПроверки.Вставить(0, ОблПодвал);
	
	Для Каждого Стр Из ЭтотОбъект["ТаблицаСтраницы" + ИмяРаздела] Цикл 
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Стр.ФиксированныеДанные) Тогда 
			Продолжить;
		КонецЕсли;
		
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблШапка);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка);
		нСтр.Вывести(ОблЗаголовокТаблицы);
		
		Для Каждого КЗНаСтр Из Стр.Данные Цикл
			НомЭлт1 = 0;
			Для Каждого Элт1 Из КЗНаСтр.Значение Цикл 
				НомЭлт1 = НомЭлт1 + 1;
				Данные = Элт1.Значение.Данные;
				ЗаполнитьОбластьДанными(Данные, ОблУровень1Заголовок);
				ПроверитьВывод(ОблУровень1Заголовок, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
				
				Для Каждого ДопСтр2 Из Элт1.Значение.ДопСтроки Цикл 
					НомДопСтр = 0;
					Для Каждого ДопСтр2Стр Из ДопСтр2.Значение Цикл 
						НомДопСтр = НомДопСтр + 1;
						Данные = ДопСтр2Стр.Значение.Данные;
						ЗаполнитьОбластьДанными(Данные, ОблУровень1Строка);
						ОблНумераторСтрок = ОблУровень1Строка.Области.Найти("П1100001");
						Если ОблНумераторСтрок <> Неопределено Тогда 
							ОблНумераторСтрок.Значение = Формат(НомДопСтр, "ЧГ=");
						КонецЕсли;
						ПроверитьВывод(ОблУровень1Строка, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
					КонецЦикла;
				КонецЦикла;
				
				Данные = Элт1.Значение.Данные;
				ЗаполнитьОбластьДанными(Данные, ОблУровень1Итоги);
				ПроверитьВывод(ОблУровень1Итоги, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
			КонецЦикла;
		КонецЦикла;
		
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблУровень0Итоги);
		МассивДляПроверки.Вставить(1, ОблУровень0Итоги);
		Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор);
			нСтр.Вывести(ОблЗаголовокТаблицы);
		КонецЕсли;
		
		нСтр.Вывести(ОблУровень0Итоги);
		нСтр.Вывести(ОблПодвал);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, ИмяРаздела)
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_" + ИмяРаздела);
	ОблШапка = Макет.ПолучитьОбласть("Шапка");
	ОблНумератор = Макет.ПолучитьОбласть("ОбластьНумератор");
	ОблЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	ОблУровень1Заголовок = Макет.ПолучитьОбласть("Уровень1Заголовок");
	ОблУровень1Строка = Макет.ПолучитьОбласть("Уровень1Строка");
	ОблУровень1Итоги = Макет.ПолучитьОбласть("Уровень1Итоги");
	ОблУровень0Итоги = Макет.ПолучитьОбласть("Уровень0Итоги");
	ОблРасшифровка = Макет.ПолучитьОбласть("Расшифровка");
	
	Для Инд = 1 По 8 Цикл 
		ОблПодвал.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
	КонецЦикла;
	МассивДляПроверки.Вставить(0, ОблПодвал);
	
	Для Каждого Стр Из ЭтотОбъект["ТаблицаСтраницы" + ИмяРаздела] Цикл
		Если Не ПроверитьЗаполненностьСтруктурыСтроками(Стр.ФиксированныеДанные) Тогда 
			Продолжить;
		КонецЕсли;
		
		нСтр = РегламентированнаяОтчетность.НоваяСтраница();
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблШапка);
		нСтр.Вывести(ОблНумератор);
		нСтр.Вывести(ОблШапка);
		нСтр.Вывести(ОблЗаголовокТаблицы);
		
		НомЭлт1 = 0;
		Для Каждого Элт1 Из Стр.Данные.П10000 Цикл 
			НомЭлт1 = НомЭлт1 + 1;
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблУровень1Заголовок);
			ПроверитьВывод(ОблУровень1Заголовок, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
			
			Для Каждого ДопСтр2 Из Элт1.Значение.ДопСтроки Цикл 
				НомДопСтр = 0;
				Для Каждого ДопСтр2Стр Из ДопСтр2.Значение Цикл 
					НомДопСтр = НомДопСтр + 1;
					Данные = ДопСтр2Стр.Значение.Данные;
					ЗаполнитьОбластьДанными(Данные, ОблУровень1Строка);
					ОблНумераторСтрок = ОблУровень1Строка.Области.Найти("П1100001");
					Если ОблНумераторСтрок <> Неопределено Тогда 
						ОблНумераторСтрок.Значение = Формат(НомДопСтр, "ЧГ=");
					КонецЕсли;
					ПроверитьВывод(ОблУровень1Строка, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
				КонецЦикла;
			КонецЦикла;
			
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблУровень1Итоги);
			ПроверитьВывод(ОблУровень1Итоги, ОблЗаголовокТаблицы, ОблНумератор, нСтр)
		КонецЦикла;
		
		ЗаполнитьОбластьДанными(Стр.ФиксированныеДанные, ОблУровень0Итоги);
		МассивДляПроверки.Вставить(1, ОблУровень0Итоги);
		Если Не нСтр.ПроверитьВывод(МассивДляПроверки) Тогда 
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.Вывести(ОблНумератор);
			нСтр.Вывести(ОблЗаголовокТаблицы);
		КонецЕсли;
		
		нСтр.Вывести(ОблУровень0Итоги);
		
		НомЭлт1 = 0;
		Для Каждого Элт1 Из Стр.Данные.П20000 Цикл 
			НомЭлт1 = НомЭлт1 + 1;
			Данные = Элт1.Значение.Данные;
			ЗаполнитьОбластьДанными(Данные, ОблРасшифровка);
			ОблНумераторСтрок = ОблРасшифровка.Области.Найти("П2000001");
			Если ОблНумераторСтрок <> Неопределено Тогда 
				ОблНумераторСтрок.Значение = Формат(НомЭлт1, "ЧГ=");
			КонецЕсли;
			ПроверитьВывод(ОблРасшифровка, ОблЗаголовокТаблицы, ОблНумератор, нСтр);
		КонецЦикла;
		
		нСтр.Вывести(ОблПодвал);
		СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Расчет(ДП)
	Лист = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_Расчет");
	ОблНомСтр = Лист.ПолучитьОбласть("ОблНомСтр");
	
	Для Каждого Стр Из ТаблицаСтраницыРасчет Цикл
		КолСтр1 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6].Количество();
		КолСтр2 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7].Количество();
		КолСтраницВсего = ?(КолСтр1 < КолСтр2, КолСтр2 + КолСтр2%2, КолСтр1 + КолСтр1%2) / 2;
		Данные = Стр.Данные[0].Значение;
		
		Для Инд = 1 По КолСтраницВсего Цикл
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр1");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если Инд = 1 И ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					Если ЗначениеЗаполнено(КЗ.Значение) Тогда 
						ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
					КонецЕсли;
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			
			ИндСтр1 = 2*(Инд-1);
			ИндСтр2 = ИндСтр1 + 1;
			Если ИндСтр1 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6][ИндСтр1].П100310000001, "ОКТМО311", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы6][ИндСтр2].П100310000001, "ОКТМО312", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр1 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7][ИндСтр1].П100510000001, "ОКТМО511", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы7][ИндСтр2].П100510000001, "ОКТМО512", ОблОблСтр1);
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
		
		КолСтр1 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8].Количество();
		КолСтр2 = Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9].Количество();
		КолСтраницВсего = ?(КолСтр1 < КолСтр2, КолСтр2 + КолСтр2%2, КолСтр1 + КолСтр1%2) / 2;
		Для Инд = 1 По КолСтраницВсего Цикл
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр2");
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если Инд = 1 И ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			
			ИндСтр1 = 2*(Инд-1);
			ИндСтр2 = ИндСтр1 + 1;
			Если ИндСтр1 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8][ИндСтр1].П100710000001, "ОКТМО711", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр1 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы8][ИндСтр2].П100710000001, "ОКТМО712", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр1 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр1].П100910000001, "ОКТМО911", ОблОблСтр1);
			КонецЕсли;
			Если ИндСтр2 < КолСтр2 Тогда
				СтрокаВКвадраты(Стр.ДанныеДопСтрок[0].Значение[СтруктураРеквизитовФормы.мИдГруппы9][ИндСтр2].П100910000001, "ОКТМО912", ОблОблСтр1);
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
		
		Для Ном = 3 По 4 Цикл 
			нСтр = РегламентированнаяОтчетность.НоваяСтраница();
			нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
			ОблОблСтр1 = Лист.ПолучитьОбласть("ОблСтр" + Ном);
			нСтр.Вывести(ОблНомСтр);
			
			Для Каждого КЗ Из Данные Цикл 
				Если ТипЗнч(КЗ.Значение) = Тип("Число") Тогда
					ЧислоВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				ИначеЕсли ТипЗнч(КЗ.Значение) = Тип("Строка") Тогда
					СтрокаВКвадраты(КЗ.Значение, КЗ.Ключ, ОблОблСтр1);
				КонецЕсли;
			КонецЦикла;
			Если Ном = 4 Тогда 
				Для Инд = 1 По 8 Цикл 
					ОблОблСтр1.Области["Дата"+Инд].Значение = Сред(ДП, Инд, 1);
				КонецЦикла;
			КонецЕсли;
			
			нСтр.Вывести(ОблОблСтр1);
			СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПечатьНаСервере_Титульный(ДП)
	Лист = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФормаОтчета2016Кв1_Титульный");
	ОблОсновнаяЧасть = Лист.ПолучитьОбласть("ОсновнаяЧасть");
	
	Для Каждого Обл Из ОблОсновнаяЧасть.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда 
			СтруктураДанныхТитульный.Свойство(Обл.Имя, Обл.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаВКвадраты(СтруктураДанныхТитульный.ИНН1, "ИНН1", ОблОсновнаяЧасть);
	СтрокаВКвадраты(СтруктураДанныхТитульный.КПП1, "КПП1", ОблОсновнаяЧасть);
	СтрокаВКвадраты(ДП, "ДП", ОблОсновнаяЧасть);
	СтрокаВКвадраты(СтруктураДанныхТитульный.Прил, "Прил", ОблОсновнаяЧасть);
	
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргДиректор) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргДиректор", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргДиректорОбособ) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргДиректорОбособ", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.Исполнитель) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиИсполнитель", ОблОсновнаяЧасть);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураДанныхТитульный.ОргБухгалтер) Тогда 
		СтрокаВКвадраты(ДП, "ДатаПодписиОргБухгалтер", ОблОсновнаяЧасть);
	КонецЕсли;
	
	нСтр = РегламентированнаяОтчетность.НоваяСтраница();
	нСтр.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	нСтр.Вывести(ОблОсновнаяЧасть);
	СтруктураРеквизитовФормы.мПечатныеФормы.Добавить(нСтр, "Декларация");
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	НомСтр = 0;
	ДП = Формат(ДатаПодписи, "ДФ=ddММyyyy; ДП=--------");
	МассивДляПроверки = Новый Массив;
	
	ПечатьНаСервере_Титульный(ДП);
	ПечатьНаСервере_Расчет(ДП);
	ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, "Раздел1_0");
	ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, "Раздел1_1");
	ПечатьНаСервере_Раздел1_12(МассивДляПроверки, ДП, "Раздел1_2");
	ПечатьНаСервере_Раздел12(МассивДляПроверки, ДП, "Раздел2");
	ПечатьНаСервере_Раздел3(МассивДляПроверки, ДП);
	ПечатьНаСервере_Раздел3_1(МассивДляПроверки, ДП);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	НомСтр = 0;
	Для Каждого Элт Из СтруктураРеквизитовФормы.СписокПечатаемыхЛистов Цикл 
		НомСтр = НомСтр + 1;
		ТД = ПолучитьИзВременногоХранилища(Элт.Значение[0]);
		Если ТД.Области.Найти("СквознойНумераторСтраниц") <> Неопределено Тогда 
			ТД.Области.Найти("СквознойНумераторСтраниц").Значение = Формат(НомСтр, "ЧГ=");
		КонецЕсли;
		Элт.Значение[0] = ПоместитьВоВременноеХранилище(ТД, Элт.Значение[0]);
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение=Неопределено) Экспорт
	
	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("НомКоррект", ТабличныйДокумент.Области.НомКоррект.Значение);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтруктураДанныхТитульный.НомКоррект)) Тогда
		ЗначениеКорректировки = 0;
	Иначе
		ЗначениеКорректировки = Число(СтруктураДанныхТитульный.НомКоррект);
	КонецЕсли;
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * ЗначениеКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для Каждого КЗ Из мСтруктураМногоуровневыхРазделов Цикл
		Ключ = "ТаблицаСтраницы" + КЗ.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Ключ, РеквизитФормыВЗначение(Ключ));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
							
						Если ТипЗнч(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение) = Тип("Структура") Тогда 
							СтрокаТаблЗнач.ДанныеДопСтрок = Новый Структура;
							Для Каждого КЗ Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл 
								СтрокаТаблЗнач.ДанныеДопСтрок.Вставить(КЗ.Ключ, ДанныеФормыВЗначение(КЗ.Значение, Тип("ТаблицаЗначений")));
							КонецЦикла;
						Иначе 
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						КонецЕсли;
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
							
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	СписокСохранения.Вставить("ДанныеФайлов", ПолучитьИзВременногоХранилища(ДанныеФайлов));
	СписокСохранения.Вставить("ДанныеФайловРазделов", ПолучитьИзВременногоХранилища(ДанныеФайловРазделов));
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Продолжить;
		КонецЕсли;
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Если Не ЗначениеЗаполнено(ДанныеФайлов) Тогда 
				ДанныеФайлов = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
			КонецЕсли;
			Продолжить;
		ИначеЕсли мСтруктураМногоуровневыхРазделов.Свойство(Раздел.ИмяСтраницы) Тогда
			СтрТаблицыСтраниц = ЭтаФорма["ТаблицаСтраницы" + Раздел.ИмяСтраницы][0];
			Прототип = мСтруктураМногоуровневыхРазделов[Раздел.ИмяСтраницы];
			Если СтрТаблицыСтраниц.Данные = Неопределено Тогда 
				СтрТаблицыСтраниц.Данные = ПолучитьПустуюСтруктуруДанных(Раздел.ИмяСтраницы);
				СтрТаблицыСтраниц.ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(Раздел.ИмяСтраницы);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ДанныеФайловВрем;
	Перем ДанныеМногоуровневыхРазделов;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Иначе
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	Если ДеревоНастройкиСтраниц.Строки.Найти("Приложения") = Неопределено Тогда 
		СтрокаУровня1 = ДеревоНастройкиСтраниц.Строки.Добавить();
		СтрокаУровня1.ИмяСтраницы              = "Приложения";
		СтрокаУровня1.Представление            = "Приложения";
		СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
		СтрокаУровня1.ВыводНаПечать            = 0;
		СтрокаУровня1.ПоказатьСтраницу         = 1;
		СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
		// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;

	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого КЗ Из ДанныеМногоуровневыхРазделов Цикл
			ЗначениеВРеквизитФормы(КЗ.Значение, КЗ.Ключ)
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
							Если Не СохранятьМногострКакТЗ Тогда 
								НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							КонецЕсли;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								Если СохранятьМногострКакТЗ Тогда 
									ТаблЗнач = ЭлСтруктуры.Значение;
									ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								Иначе
									СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
									НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЕсли;
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ДанныеФайлов", ДанныеФайловВрем);
	Если ТипЗнч(ДанныеФайловВрем) = Тип("Массив") Тогда 
		ДанныеФайлов = ПоместитьВоВременноеХранилище(ДанныеФайловВрем, УникальныйИдентификатор);
	Иначе
		ДанныеФайлов = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	КонецЕсли;
	
	СписокСохранения.Свойство("ДанныеФайловРазделов", ДанныеФайловВрем);
	Если ТипЗнч(ДанныеФайловВрем) = Тип("Соответствие") Тогда 
		ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(ДанныеФайловВрем, УникальныйИдентификатор);
	Иначе
		ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если Раздел.ИмяСтраницы = "Приложения" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	
	ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	Если Не ТаблицаСтраницыРаздел2[0].ФиксированныеДанные.Свойство("П10000014") Тогда 
		Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл 
			Стр.ФиксированныеДанные.Вставить("П10000013");
			Стр.ФиксированныеДанные.Вставить("П10000014", 1);
		КонецЦикла;
	КонецЕсли;
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН1");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН1 = СокрЛП(СтруктураДанныхТитульный.ИНН1) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН1, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН1 = Сред(СтруктураДанныхТитульный.ИНН1, 3);
			КонецЕсли;
			СтруктураДанныхТитульный.ИНН1 = СтрЗаменить(СтруктураДанныхТитульный.ИНН1, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП1");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП1 = СокрЛП(СтруктураДанныхТитульный.КПП1) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияРазделовИзЛистовСтарогоОбразца()
	
	НужноОбновлятьТаблицуВариантовЗаполнения = Ложь;
	
	Для Каждого ЭлТаблицаРаздела Из мСтруктураМногостраничныхРазделов Цикл
		
		Для Каждого СтраницаРаздела Из ЭтаФорма[ЭлТаблицаРаздела.Значение] Цикл
			
			СтраницаРаздела.АктивнаяСтраница = Ложь;
			
			ПоказателиТаблПоле = СтраницаРаздела.Данные[0].Значение;
			СтруктураДанных    = СтраницаРаздела.Данные[0].Значение;

			Для Каждого Показатель Из ПоказателиТаблПоле Цикл
				
				ИмяПоказателя = Показатель.Ключ;
				
				Если ЭлТаблицаРаздела.Ключ = "Расчет" Тогда
					
					Если ИмяПоказателя = "КБК1_1" Тогда
						СтруктураДанных.Вставить("КБК1");
						Для Ном = 1 По 20 Цикл
							СтруктураДанных.КБК1 = СокрЛП(СтруктураДанных.КБК1) + ПоказателиТаблПоле["КБК1_" + Ном];
							СтруктураДанных.Удалить("КБК1_" + Ном);
						КонецЦикла;
					ИначеЕсли ИмяПоказателя = "ОКАТО1_1" Тогда
						СтруктураДанных.Вставить("ОКАТО1");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО1 = СокрЛП(СтруктураДанных.ОКАТО1) + ПоказателиТаблПоле["ОКАТО1_" + Ном];
							СтруктураДанных.Удалить("ОКАТО1_" + Ном);
						КонецЦикла;
						
					ИначеЕсли ИмяПоказателя = "СуммаБезЛьгот1_1" Тогда
						СтруктураДанных.Вставить("СуммаБезЛьгот1");
						СтрСуммаБезЛьгот1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаБезЛьгот1 = СокрЛП(СтрСуммаБезЛьгот1) + ПоказателиТаблПоле["СуммаБезЛьгот1_" + Ном];
							СтруктураДанных.Удалить("СуммаБезЛьгот1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаБезЛьгот1 = ?(ПустаяСтрока(СтрСуммаБезЛьгот1), 0, Число(СтрСуммаБезЛьгот1));
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "Сумма031_1" Тогда
						Для НомПок = 1 По 9 Цикл
							СтруктураДанных.Вставить("Сумма03" + НомПок);
							СтрСумма = "";
							Для Ном = 1 По 12 Цикл
								СтрСумма = СокрЛП(СтрСумма) + ПоказателиТаблПоле["Сумма03" + НомПок + "_" + Ном];
								СтруктураДанных.Удалить("Сумма03" + НомПок + "_" + Ном);
							КонецЦикла;
							СтруктураДанных["Сумма03" + НомПок] = ?(ПустаяСтрока(СтрСумма), 0, Число(СтрСумма));
						КонецЦикла;
						
						НужноОбновлятьТаблицуВариантовЗаполнения = Истина;
						
					ИначеЕсли ИмяПоказателя = "СуммаЗачет1_1" Тогда
						СтруктураДанных.Вставить("СуммаЗачет1");
						СтрСуммаЗачет1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЗачет1 = СокрЛП(СтрСуммаЗачет1) + ПоказателиТаблПоле["СуммаЗачет1_" + Ном];
							СтруктураДанных.Удалить("СуммаЗачет1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЗачет1 = ?(ПустаяСтрока(СтрСуммаЗачет1), 0, Число(СтрСуммаЗачет1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОргСоц1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОргСоц1");
						СтрСуммаЛьготОргСоц1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОргСоц1 = СокрЛП(СтрСуммаЛьготОргСоц1) + ПоказателиТаблПоле["СуммаЛьготОргСоц1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОргСоц1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОргСоц1 = ?(ПустаяСтрока(СтрСуммаЛьготОргСоц1), 0, Число(СтрСуммаЛьготОргСоц1));
					ИначеЕсли ИмяПоказателя = "СуммаЛьготОрг1_1" Тогда
						СтруктураДанных.Вставить("СуммаЛьготОрг1");
						СтрСуммаЛьготОрг1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаЛьготОрг1 = СокрЛП(СтрСуммаЛьготОрг1) + ПоказателиТаблПоле["СуммаЛьготОрг1_" + Ном];
							СтруктураДанных.Удалить("СуммаЛьготОрг1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаЛьготОрг1 = ?(ПустаяСтрока(СтрСуммаЛьготОрг1), 0, Число(СтрСуммаЛьготОрг1));
					ИначеЕсли ИмяПоказателя = "СуммаПлат1_1" Тогда
						СтруктураДанных.Вставить("СуммаПлат1");
						СтрСуммаПлат1 = "";
						Для Ном = 1 По 12 Цикл
							СтрСуммаПлат1 = СокрЛП(СтрСуммаПлат1) + ПоказателиТаблПоле["СуммаПлат1_" + Ном];
							СтруктураДанных.Удалить("СуммаПлат1_" + Ном);
						КонецЦикла;
						СтруктураДанных.СуммаПлат1 = ?(ПустаяСтрока(СтрСуммаПлат1), 0, Число(СтрСуммаПлат1));
					КонецЕсли;
						
				Иначе
					
					Если ИмяПоказателя = "ОКАТО1" Тогда
						СтруктураДанных.Вставить("ОКАТО");
						Для Ном = 1 По 11 Цикл
							СтруктураДанных.ОКАТО = СокрЛП(СтруктураДанных.ОКАТО) + ПоказателиТаблПоле["ОКАТО" + Ном];
							СтруктураДанных.Удалить("ОКАТО" + Ном);
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НужноОбновлятьТаблицуВариантовЗаполнения Тогда
	
		ОбновитьВариантыЗаполнения();
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц
	
	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.
		
		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.
				
				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					// КопироватьДанныеФормы(ЭлементМассива,ТаблДляЦикла);
					
					МассивДляУдаления = Новый Массив;
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если  СтрокаВЭлементеМассива.Количество() > 0 Тогда
								СтрокаВЭлементеМассива = СтрокаВЭлементеМассива[0];
								МассивДляУдаления.Добавить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаВЭлементе Из МассивДляУдаления Цикл
						ЭлементМассива.Удалить(СтрокаВЭлементе);
					КонецЦикла; 
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	мСтруктураПеременных = Новый Структура;

	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();

	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();

	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если НЕ БезОткрытияФормы Тогда
		
		ЗагрузитьПоказателиИзМакета("КодыКБК2005");
		ЗагрузитьПоказателиИзМакета("КБК_2012Кв1");
		ЗагрузитьПоказателиИзМакета("КБК_2013_05_21");
		ЗагрузитьПоказателиИзМакета("РасположениеОбъекта");
		ЗагрузитьПоказателиИзМакета("ДополнительныйКоэф12");
		ЗагрузитьПоказателиИзМакета("КЭЗ_ВодныеОбъекты");
		ЗагрузитьПоказателиИзМакета("КлассыОпасности");
		ЗагрузитьПоказателиИзМакета("ДопКоэфТЗ");
		ЗагрузитьПоказателиИзМакета("ОрганыРПН");
		ЗагрузитьПоказателиИзМакета("Гр10_Разд11_10");
		ЗагрузитьПоказателиИзМакета("Гр11_Разд11_10");
		ЗагрузитьПоказателиИзМакета("Гр12_Разд11_10");
		ЗагрузитьПоказателиИзМакета("Гр13_Разд11_10");
		ЗагрузитьПоказателиИзМакета("Гр7_Разд12");
		ЗагрузитьПоказателиИзМакета("Гр10_Разд2");
		ЗагрузитьПоказателиИзМакета("Гр17_Разд3");
		ЗагрузитьПоказателиИзМакета("Гр21_Разд3");
		ЗагрузитьПоказателиИзМакета("Гр4_Разд3");
		ЗагрузитьПоказателиИзМакета("ФККО");
		ЗагрузитьПоказателиИзМакета("ВВРаздел1");
		
	КонецЕсли;
	
	СоздатьПустуюТаблицуДанныхФайловРазделов();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда

		НачальныеОперацииСМногострочнымиБлоками();

		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			// Это новый документ.
			// Установим реквизиты формы по умолчанию
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;

	Иначе
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
	
	КонецЕсли;

	ЗаполнитьПустыеСтруктурыДанных();

	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		
		ЗаполнитьСведенияОбОрганизации();
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ТабличныйДокумент.Области.ДатаПодписи.Значение;
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "РПН");
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = Строка(НомерКорректировки);
	Если НомерКорректировки = 0 Тогда 
		ТабличныйДокумент.Области.ВидДок.Значение = "V";
		ТабличныйДокумент.Области.Корректировка.Значение = "";
	Иначе
		ТабличныйДокумент.Области.ВидДок.Значение = "";
		ТабличныйДокумент.Области.Корректировка.Значение = "V";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета(Знач РазделВМакете)	
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2016Кв1");
	
	ГодОтчета = Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда	
	
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе
					
				Если РазделВМакете = "КБК_2013_05_21" Тогда
					НовСтрока = мКодыБюджетнойКлассификации2013_05_21.Добавить();	
				ИначеЕсли РазделВМакете = "РасположениеОбъекта" Тогда
					НовСтрока = мРасположениеОбъекта.Добавить();
				ИначеЕсли РазделВМакете = "ДополнительныйКоэф12" Тогда
					НовСтрока = мДополнительныйКоэф12.Добавить();
				ИначеЕсли РазделВМакете = "КЭЗ_ВодныеОбъекты" Тогда
					НовСтрока = мКЭЗ_ВодныеОбъекты.Добавить();
				ИначеЕсли РазделВМакете = "КлассыОпасности" Тогда
					НовСтрока = мКлассыОпасности.Добавить();
				ИначеЕсли РазделВМакете = "ДопКоэфТЗ" Тогда
					НовСтрока = мДопКоэфТЗ.Добавить();
				ИначеЕсли РазделВМакете = "ОрганыРПН" Тогда
					НовСтрока = мОрганыРПН.Добавить();
					ДиапазонОКАТО = СокрП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
					НовСтрока.ДиапазонОКАТО = ДиапазонОКАТО;
				ИначеЕсли РазделВМакете = "Гр10_Разд11_10" Тогда
					НовСтрока = мГр10_Разд11_10.Добавить();
				ИначеЕсли РазделВМакете = "Гр10_Разд2" Тогда
					НовСтрока = мГр10_Разд2.Добавить();
				ИначеЕсли РазделВМакете = "Гр11_Разд11_10" Тогда
					НовСтрока = мГр11_Разд11_10.Добавить();
				ИначеЕсли РазделВМакете = "Гр12_Разд11_10" Тогда
					НовСтрока = мГр12_Разд11_10.Добавить();
				ИначеЕсли РазделВМакете = "Гр13_Разд11_10" Тогда
					НовСтрока = мГр13_Разд11_10.Добавить();
				ИначеЕсли РазделВМакете = "Гр7_Разд12" Тогда
					НовСтрока = мГр7_Разд12.Добавить();
				ИначеЕсли РазделВМакете = "Гр17_Разд3" Тогда
					НовСтрока = мГр17_Разд3.Добавить();
				ИначеЕсли РазделВМакете = "Гр21_Разд3" Тогда
					НовСтрока = мГр21_Разд3.Добавить();
				ИначеЕсли РазделВМакете = "Гр4_Разд3" Тогда
					НовСтрока = мГр4_Разд3.Добавить();
				ИначеЕсли РазделВМакете = "ФККО" Тогда
					НовСтрока = мГр1_Разд3.Добавить();
				ИначеЕсли РазделВМакете = "ВВРаздел1" Тогда
					НовСтрока = мВВРаздел1.Добавить();
				КонецЕсли;

				НовСтрока.Код      = КодПоказателя;
				НовСтрока.Название = Название;

			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Расчет";
	СтрокаУровня1.Представление            = "Расчет суммы" + Символы.ПС + "платежа";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_0";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_1";
	СтрокаУровня1.Представление            = "Раздел 1.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1_2";
	СтрокаУровня1.Представление            = "Раздел 1.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3_1";
	СтрокаУровня1.Представление            = "Раздел 3.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложения";
	СтрокаУровня1.Представление            = "Приложения";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
			
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
			
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
			
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			// имеются автоматически заполняемые ячейки
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
				
		Конецесли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли Форма["мСтруктураМногоуровневыхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим) Тогда
				НайденноеЗначение = Форма["ТаблицаСтраницы" + ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим];
				
				ЭлементРазделовОтчета.ИндексКартинки        = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
					
					СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
					СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
					СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
					СтраницаРазделаОтчета.ИндексКартинки                    = 1;
					СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
		КонецЕсли;
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
		КонецЕсли;
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность                                   = Истина;
	Иначе
		Элементы.Обновить.Доступность                                   = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Расчет"
		Или Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложения" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	Если  НаимРаздела = "Приложения" Тогда
		Возврат;
	ИначеЕсли мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		ТаблицаСтраницРаздела = ЭтаФорма["ТаблицаСтраницы" + НаимРаздела];
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			СобратьДанныеМногоуровневогоРаздела(НаимРаздела, СтрТаблицаСтраницы);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Многостраничные и многострочные разделы.
	//
	Если  НаимРаздела = "Раздел3" Или НаимРаздела = "Расчет" Тогда
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
	ИначеЕсли НаимРаздела <> "Титульный" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
				
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
				
			Для каждого СтрТаблица Из СтрТаблицыСтраниц Цикл
				СтрТаблица.АктивнаяСтраница = Ложь;
			КонецЦикла;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "-" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
				
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетПрисоединенныеФайлы()
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложения"));
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_Приложения");
	
	МассивДД = ПолучитьИзВременногоХранилища(ДанныеФайлов);
	Если ТипЗнч(МассивДД) = Тип("Массив") И МассивДД.Количество() > 0 Тогда
		Если МассивДД.Количество() > 1 Тогда 
			ОблДанныеФайла = Макет.Область("ДанныеФайла");
			ТабличныйДокумент.ВставитьОбласть(ОблДанныеФайла, Макет.Область(3,,2*МассивДД.Количество()), ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Обл = ТабличныйДокумент.Область("УдалитьФайл_1"); Обл.Имя = Неопределено;
			Обл = ТабличныйДокумент.Область("Файл_1"); Обл.Имя = Неопределено;
			
			Для Инд = 0 По МассивДД.Количество() - 1 Цикл
				Обл = ТабличныйДокумент.Область(Инд*2 + 1, 2, Инд*2 + 1, 2); Обл.Имя = "УдалитьФайл_" + Формат((Инд + 1), "ЧГ=");
				Обл = ТабличныйДокумент.Область(Инд*2 + 1, 3, Инд*2 + 1, 3); Обл.Имя = "Файл_" + Формат((Инд + 1), "ЧГ=");
			КонецЦикла;
		КонецЕсли;
		
		Для Инд = 0 По МассивДД.Количество() - 1 Цикл
			Обл = ТабличныйДокумент.Область("Файл_" + Формат((Инд + 1), "ЧГ="));
			Обл.Значение = МассивДД[Инд].Имя;
		КонецЦикла;
	Иначе
		ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область("ДанныеФайла"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьПустуюСтруктуруДанныхФайлаРазделов() Экспорт 
	Возврат Новый Структура("Имя, ДД, ДДАрх");
КонецФункции

&НаСервере
Процедура СоздатьПустуюТаблицуДанныхФайловРазделов()
	ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетПрисоединенныеФайлыРазделов()
	ОбластьДоб1 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопиюЗначок");
	ОбластьДоб2 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопию");
	ОбластьДоб3 = ТабличныйДокумент.Области.Найти("UID_файла");
	Если (Не ЗначениеЗаполнено(ОбластьДоб1))
		Или (Не ЗначениеЗаполнено(ОбластьДоб2))
		Или (Не ЗначениеЗаполнено(ОбластьДоб3)) Тогда 
		
		Возврат;
	КонецЕсли;
	
	ДанныеФайловРазделовТаблица = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
	КЗ = ДанныеФайловРазделовТаблица[ОбластьДоб3.Значение];
	
	Если КЗ = Неопределено Тогда 
		ОбластьДоб1.Текст = "+";
		ОбластьДоб1.ЦветТекста = ЦветаСтиля.РезультатУспехЦвет;
		ОбластьДоб2.Текст = "Добавить скан-копию документа";
		ОбластьДоб3.Значение = Неопределено;
	Иначе
		ОбластьДоб1.Текст = "х";
		ОбластьДоб1.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		ОбластьДоб2.Текст = КЗ.Имя;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМногоуровневуюЧасть(СписокДанных, Макет, Путь, ОписаниеРаздела, ТД)
	Для Каждого Элт Из ОписаниеРаздела Цикл 
		Данные = СписокДанных[Элт.Имя];
		Инд = 0;
		ВыводитьЗначкиУдаленияСтрок = (СписокДанных[Элт.Имя].Количество() > 1);
		
		ТД.Очистить();
		ОблРазделитель = Макет.Области.Найти("РазделительДо" + Элт.Имя);
		Если ОблРазделитель <> Неопределено Тогда 
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РазделительДо" + Элт.Имя));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТД);
		
		Для Каждого Стр Из СписокДанных[Элт.Имя] Цикл 
			Инд = Инд + 1;
			Постфикс = Путь + "_" + Формат(Инд, "ЧГ=");
			
			ТД.Очистить();
			ТД.Вывести(Макет.ПолучитьОбласть(Элт.ИмяОбласти));
			Для Каждого Обл Из ТД.Области Цикл 
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
					Если Обл.СодержитЗначение = Истина Тогда 
						Обл.Значение = Стр.Значение.Данные[Обл.Имя];
						Обл.Имя = Обл.Имя + Постфикс;
					ИначеЕсли СтрНачинаетсяС(Обл.Имя, Элт.ИмяОбластиУдСтр) Тогда 
						Если ВыводитьЗначкиУдаленияСтрок Тогда 
							Обл.Имя = Обл.Имя + Постфикс;
						Иначе
							Обл.Имя = Обл.Имя + Постфикс;
							Обл.Гиперссылка = Ложь;
							Обл.Текст = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТабличныйДокумент.Вывести(ТД);
			
			ВывестиМногоуровневуюЧасть(Стр.Значение.ДопСтроки, Макет, Путь + Постфикс, Элт.Подчиненные, ТД);
		КонецЦикла;
		
		ТД.Очистить();
		ТД.Вывести(Макет.ПолучитьОбласть(Элт.ИмяОбластиДобСтр));
		Для Каждого Обл Из ТД.Области Цикл
			Обл.Имя = Обл.Имя + Путь;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ТД);
		
		ТД.Очистить();
		ОблРазделитель = Макет.Области.Найти("РазделительПосле" + Элт.Имя);
		Если ОблРазделитель <> Неопределено Тогда 
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("РазделительПосле" + Элт.Имя));
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТД);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьУдалениеСтраниц(НаимТаблицыСтраницы)
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СделатьЛистПолностьюДоступным()
	Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Для Каждого Обл Из ТабличныйДокумент.Области Цикл 
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник 
				И Обл.СодержитЗначение = Истина
				И Обл.Защита = Истина
				И Обл.ЦветФона = СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика Тогда 
				
				Обл.ЦветФона = мСтруктураЦветовРаскраски["_0"];
				Обл.Защита = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	Если ИмяТекРаздела = "Приложения" Тогда
		ВывестиМакетПрисоединенныеФайлы();
		Возврат;
	ИначеЕсли мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		СписокДанных = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела][НомерСтраницыРазделаОтчета - 1].Данные;
		ФиксированныеДанные = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела][НомерСтраницыРазделаОтчета - 1].ФиксированныеДанные; 
		Верх = Неопределено;
		Низ = Неопределено;
		ПолучитьВерхНизМногоуровневойЧасти(ИмяТекРаздела, Верх, Низ);
		
		ТабличныйДокумент.Очистить();
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела);
		ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ОсновнаяЧасть"));
		
		ТД = Новый ТабличныйДокумент;
		ВывестиМногоуровневуюЧасть(СписокДанных, Макет, "", мСтруктураМногоуровневыхРазделов[ИмяТекРаздела], ТД);
		Таблица = ЭтаФорма["ТаблицаСтраницы" + ИмяТекРаздела];
		Для Каждого Стр Из Таблица Цикл 
			Стр.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		Для Каждого КЗ Из ФиксированныеДанные Цикл 
			ТабличныйДокумент.Области[КЗ.Ключ].Значение = ФиксированныеДанные[КЗ.Ключ];
		КонецЦикла;
		Таблица[НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		ОтрисоватьУдалениеСтраниц("ТаблицаСтраницы" + ИмяТекРаздела);
		ВывестиМакетПрисоединенныеФайлыРазделов();
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		СделатьЛистПолностьюДоступным();
		Расчет(ЭтаФорма, ИмяТекРаздела);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "Раздел3" Или ИмяТекРаздела = "Расчет" Тогда
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		ИмяТаблицы = ?(ИмяТекРаздела = "Расчет", "ТаблицаСтраницыРасчет", "ТаблицаСтраницыРаздела3");
		ОтрисоватьУдалениеСтраниц(ИмяТаблицы);
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел3_1" Тогда
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Попытка
				
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтрисоватьУдалениеСтраниц(НаимТаблицыСтраницы);
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "-" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
	// Обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Приложения" Тогда
		ВывестиМакетПрисоединенныеФайлы();
		Возврат;
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		ВывестиМакетПрисоединенныеФайлыРазделов();
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьЗначениеПоказателяВСтруктуре(Форма, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя)
	
	МногостраничностьВРазделе = Истина;
	КолМногострочныхЧастей = 0;
	СохранятьМногострКакТЗ = Истина;
	ИмяГруппы = "";
	Если ИмяРаздела = "Титульный" Тогда
		МногостраничностьВРазделе = Ложь;
	ИначеЕсли ИмяРаздела = "Расчет" Тогда
		МногостраничностьВРазделе = Истина;
	ИначеЕсли ИмяРаздела = "Раздел3" Тогда
		МногостраничностьВРазделе = Истина;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	Иначе
		МногостраничностьВРазделе = Истина;
		КолМногострочныхЧастей = 1;
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяРаздела);
	КонецЕсли; 
	
	ДанныеРаздела = Неопределено;
	ДанныеМногострочногоРаздела = Неопределено;
	СтруктураГруппы = Неопределено;

	Если ИмяРаздела <> "" Тогда
		
		Если МногостраничностьВРазделе Тогда  //Для многостраничных разделов
			
			ИмяТаблицыСтраницы = Неопределено;
			Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ИмяТаблицыСтраницы) Тогда
				
				ТаблицаСтраницы = Форма[ИмяТаблицыСтраницы];
				АктивныеСтраницы = ТаблицаСтраницы.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
				
				Если АктивныеСтраницы.Количество() > 0 Тогда
					
					ДанныеРазделаСписок = АктивныеСтраницы[0].Данные;
					Если ДанныеРазделаСписок.Количество() > 0 Тогда
						
						ДанныеРаздела = ДанныеРазделаСписок[0].Значение;
						ДанныеРазделаСписок[0].Пометка = Ложь; //Регистрируем для передачи на сервер (при редактировании таблицы значения не передаются)
						
					КонецЕсли;
					
					Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
						
						ДанныеДопСтрокРазделаСписок = АктивныеСтраницы[0].ДанныеДопСтрок;
						Если ДанныеДопСтрокРазделаСписок.Количество() > 0 Тогда
							
							ДанныеДопСтрокРаздела = ДанныеДопСтрокРазделаСписок[0].Значение;
							ДанныеРазделаСписок[0].Пометка = Ложь;
							
							СтруктураГруппы = Неопределено;
							Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
							СтруктураГруппы = Форма[СтруктураГруппы];
							
							Если СохранятьМногострКакТЗ Тогда
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела;
							Иначе
								ДанныеМногострочногоРаздела = ДанныеДопСтрокРаздела[ИмяГруппы];
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли; 
				
			КонецЕсли;
			
		Иначе  //Для обычных разделов
			
			ДанныеРаздела = Форма["СтруктураДанных" + ИмяРаздела];
			
			Если КолМногострочныхЧастей > 0 Тогда  // И многострочных разделов
				
				СтруктураГруппы = Неопределено;
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				ДанныеМногострочногоРаздела = Форма[СтруктураГруппы];
				
			КонецЕсли;
			
		КонецЕсли; 
		
		Если ДанныеМногострочногоРаздела = Неопределено Тогда
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначениеПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли
			КонецЕсли; 
		Иначе
			ЗначПоказателя = ЗначениеПоказателя;
			Если ИмяГруппы = Лев(ИмяПоказателя, 11) Тогда //Показатель входит в многострочную часть
				ИмяПок = Лев(ИмяПоказателя, 13);
				СтрИнд = Сред(ИмяПоказателя, 14);
				Если Лев(СтрИнд, 1)="_" Тогда
					СтрИнд = Сред(СтрИнд, 2);
				КонецЕсли;
				Инд = Число(СтрИнд);
				Если (Инд > 0) И ДанныеМногострочногоРаздела.Количество() >= Инд Тогда
					ДанныеМногострочногоРаздела[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
				Если (Инд > 0) И СтруктураГруппы.Количество() >= Инд Тогда
					СтруктураГруппы[Инд-1][ИмяПок] = ЗначПоказателя;
				КонецЕсли; 
			КонецЕсли;
			Если ДанныеРаздела <> Неопределено Тогда
				Если ДанныеРаздела.Свойство(ИмяПоказателя) Тогда
					ДанныеРаздела[ИмяПоказателя] = ЗначПоказателя;
				Иначе
					ДанныеРаздела.Вставить(ИмяПоказателя, ЗначПоказателя);
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	ТаблицаГруппы = Неопределено;
	ИмяКолонкиТаблицы = "";
	
	Если ТаблицаГруппы <> Неопределено Тогда
		Для каждого СтрокаТаблицы Из ТаблицаГруппы Цикл
			ИмяПоказателя = ИмяКолонкиТаблицы + "_" + Формат(ТаблицаГруппы.Индекс(СтрокаТаблицы) + 1, "ЧГ=");
			ТекОбласть = ТабличныйДокумент.Области.Найти(ИмяПоказателя);
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФайлы()
	ДанныеФайлов = ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьФайлыРазделов()
	Обл = ТабличныйДокумент.Области.Найти("UID_файла");
	Если Обл <> Неопределено Тогда 
		Разделы = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
		Если Разделы[Обл.Значение] <> Неопределено Тогда 
			Разделы.Удалить(Обл.Значение);
			Обл.Значение = Неопределено;
			ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(Разделы, ДанныеФайловРазделов);
			ВывестиМакетПрисоединенныеФайлыРазделов();
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			НомерКорректировки = 0;
			СтруктураРеквизитовФормы.ВидДокумента = 0;
			ДатаПодписи = Неопределено;
			ТабличныйДокумент.Области.НомКоррект.Значение = "0";
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
			ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложения" Тогда
			ОчиститьФайлы();
		Иначе
			ОчиститьФайлыРазделов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_0(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;

	Тот14=0;
	Тот15=0;
	Тот16=0;
	Тот17=0;
	
	СтрокаУровня1 = 1;
	Пока Области.Найти("П1000001_" + Формат(СтрокаУровня1, "ЧГ=")) <> Неопределено Цикл 
		Лок14=0;
		Лок15=0;
		Лок16=0;
		Лок17=0;
		
		СтрСтрокаУровня1 = "_" + Формат(СтрокаУровня1, "ЧГ=");
		СтрокаУровня2 = 1;
		
		Пока Области.Найти("П1100001" + СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=")) <> Неопределено Цикл 
			СтрСтрокаУровня2 = СтрСтрокаУровня1 + "_" + Формат(СтрокаУровня2, "ЧГ=");
			
			Области["П1100005" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																+ Области["П1100007" + СтрСтрокаУровня2].Значение
																+ Области["П1100008" + СтрСтрокаУровня2].Значение;
																
			Области["П1100014" + СтрСтрокаУровня2].Значение = Области["П1100006" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100010" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение;
			
			Области["П1100015" + СтрСтрокаУровня2].Значение = Области["П1100007" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100011" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение;
			
			Области["П1100016" + СтрСтрокаУровня2].Значение = Области["П1100008" + СтрСтрокаУровня2].Значение
																* Области["П1100009" + СтрСтрокаУровня2].Значение
																* Области["П1100012" + СтрСтрокаУровня2].Значение
																* Области["П1100013" + СтрСтрокаУровня2].Значение;
																
			Области["П1100017" + СтрСтрокаУровня2].Значение = Области["П1100014" + СтрСтрокаУровня2].Значение
																+ Области["П1100015" + СтрСтрокаУровня2].Значение
																+ Области["П1100016" + СтрСтрокаУровня2].Значение;
																
			Тот14 = Тот14 + Области["П1100014" + СтрСтрокаУровня2].Значение;
			Тот15 = Тот15 + Области["П1100015" + СтрСтрокаУровня2].Значение;
			Тот16 = Тот16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Тот17 = Тот17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			Лок14 = Лок14 + Области["П1100014" + СтрСтрокаУровня2].Значение;
			Лок15 = Лок15 + Области["П1100015" + СтрСтрокаУровня2].Значение;
			Лок16 = Лок16 + Области["П1100016" + СтрСтрокаУровня2].Значение;
			Лок17 = Лок17 + Области["П1100017" + СтрСтрокаУровня2].Значение;
			СтрокаУровня2 = СтрокаУровня2 + 1;
		КонецЦикла;
		
		Области["П1000014" + СтрСтрокаУровня1].Значение = Лок14;
		Области["П1000015" + СтрСтрокаУровня1].Значение = Лок15;
		Области["П1000016" + СтрСтрокаУровня1].Значение = Лок16;
		Области["П1000017" + СтрСтрокаУровня1].Значение = Лок17;
		
		СтрокаУровня1 = СтрокаУровня1 + 1;
	КонецЦикла;

	Области["П0000014"].Значение = Тот14;
	Области["П0000015"].Значение = Тот15;
	Области["П0000016"].Значение = Тот16;
	Области["П0000017"].Значение = Тот17;
	
	Если ИмяТекущейСтраницы = "Раздел1_0" Тогда 
		Тот14=0;
		Тот15=0;
		Тот16=0;
		Тот17=0;
		
		СтрокаУровня1 = 1;
		Пока Области.Найти("П2000001_" + Формат(СтрокаУровня1, "ЧГ=")) <> Неопределено Цикл 
			СуффСтр = Формат(СтрокаУровня1, "ЧГ=");
			Области["П2000005_" + СуффСтр].Значение = Области["П2000006_" + СуффСтр].Значение 
														+ Области["П2000007_" + СуффСтр].Значение
														+ Области["П2000008_" + СуффСтр].Значение;
														
			Области["П2000014_" + СуффСтр].Значение = Области["П2000006_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000010_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение;
														
			Области["П2000015_" + СуффСтр].Значение = Области["П2000007_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000011_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение;
														
			Области["П2000016_" + СуффСтр].Значение = Области["П2000008_" + СуффСтр].Значение
														* Области["П2000009_" + СуффСтр].Значение
														* Области["П2000012_" + СуффСтр].Значение
														* Области["П2000013_" + СуффСтр].Значение;
														
			Области["П2000017_" + СуффСтр].Значение = Области["П2000014_" + СуффСтр].Значение 
														+ Области["П2000015_" + СуффСтр].Значение
														+ Области["П2000016_" + СуффСтр].Значение;
			
			Тот14 = Тот14 + Области["П2000014_" + СуффСтр].Значение;
			Тот15 = Тот15 + Области["П2000015_" + СуффСтр].Значение;
			Тот16 = Тот16 + Области["П2000016_" + СуффСтр].Значение;
			Тот17 = Тот17 + Области["П2000017_" + СуффСтр].Значение;
			СтрокаУровня1 = СтрокаУровня1 + 1;
		КонецЦикла;
		
		Области["П3000014"].Значение = Тот14;
		Области["П3000015"].Значение = Тот15;
		Области["П3000016"].Значение = Тот16;
		Области["П3000017"].Значение = Тот17;
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел1_2(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	
	Тот8=0;
	Тот12=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П1000008_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Лок8=0;
		Лок12=0;
		
		Инд2 = 0;
		Пока Истина Цикл 
			Инд2 = Инд2 + 1;
			Инд2Стр = Формат(Инд2, "ЧГ=");
			Если Области.Найти("П1100008_" + Инд1Стр + "_" + Инд2Стр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			СтрВрем = Инд1Стр + "_" + Инд2Стр;
			
			Области["П1100008_" + СтрВрем].Значение = Области["П1100003_" + СтрВрем].Значение
													* Области["П1100004_" + СтрВрем].Значение
													* Области["П1100005_" + СтрВрем].Значение
													* Области["П1100006_" + СтрВрем].Значение
													* Области["П1100007_" + СтрВрем].Значение;
			
			Лок8 = Лок8 + Области["П1100008_" + СтрВрем].Значение;
			Области["П1100012_" + СтрВрем].Значение = Области["П1100008_" + СтрВрем].Значение
													* Области["П1100011_" + СтрВрем].Значение;
			Лок12 = Лок12 + Области["П1100012_" + СтрВрем].Значение;
		КонецЦикла;
		
		Тот8 = Тот8 + Лок8;
		Тот12 = Тот12 + Лок12;
		Области["П1000008_" + Инд1Стр].Значение = Лок8;
		Области["П1000012_" + Инд1Стр].Значение = Лок12;
	КонецЦикла;
	Области["П0000008"].Значение = Тот8;
	Области["П0000012"].Значение = Тот12;
		
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел2(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	
	Тот15=0;
	Тот16=0;
	Тот17=0;
	Тот18=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П1000015_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Лок15=0;
		Лок16=0;
		Лок17=0;
		Лок18=0;
		
		Инд2 = 0;
		Пока Истина Цикл 
			Инд2 = Инд2 + 1;
			Инд2Стр = Формат(Инд2, "ЧГ=");
			Если Области.Найти("П1100015_" + Инд1Стр + "_" + Инд2Стр) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			СтрВрем = Инд1Стр + "_" + Инд2Стр;
			Области["П1100005_" + СтрВрем].Значение = Области["П1100006_" + СтрВрем].Значение
													+ Области["П1100007_" + СтрВрем].Значение
													+ Области["П1100008_" + СтрВрем].Значение;
			Области["П1100015_" + СтрВрем].Значение = Области["П1100006_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100010_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение;
			Области["П1100016_" + СтрВрем].Значение = Области["П1100007_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100011_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение;
			Области["П1100017_" + СтрВрем].Значение = Области["П1100008_" + СтрВрем].Значение
													* Области["П1100009_" + СтрВрем].Значение
													* Области["П1100012_" + СтрВрем].Значение
													* Области["П1100013_" + СтрВрем].Значение
													* Области["П1100014_" + СтрВрем].Значение;
			Области["П1100018_" + СтрВрем].Значение = Области["П1100015_" + СтрВрем].Значение
													+ Области["П1100016_" + СтрВрем].Значение
													+ Области["П1100017_" + СтрВрем].Значение;
			
			Лок15 = Лок15 + Области["П1100015_" + СтрВрем].Значение;
			Лок16 = Лок16 + Области["П1100016_" + СтрВрем].Значение;
			Лок17 = Лок17 + Области["П1100017_" + СтрВрем].Значение;
			Лок18 = Лок18 + Области["П1100018_" + СтрВрем].Значение;
		КонецЦикла;
		
		Тот15 = Тот15 + Лок15;
		Тот16 = Тот16 + Лок16;
		Тот17 = Тот17 + Лок17;
		Тот18 = Тот18 + Лок18;
		Области["П1000015_" + Инд1Стр].Значение = Лок15;
		Области["П1000016_" + Инд1Стр].Значение = Лок16;
		Области["П1000017_" + Инд1Стр].Значение = Лок17;
		Области["П1000018_" + Инд1Стр].Значение = Лок18;
	КонецЦикла;
	Области["П0000015"].Значение = Тот15;
	Области["П0000016"].Значение = Тот16;
	Области["П0000017"].Значение = Тот17;
	Области["П0000018"].Значение = Тот18;
	
	Тот15=0;
	Тот16=0;
	Тот17=0;
	Тот18=0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П2000015_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П2000005_" + Инд1Стр].Значение = Области["П2000006_" + Инд1Стр].Значение
												+ Области["П2000007_" + Инд1Стр].Значение
												+ Области["П2000008_" + Инд1Стр].Значение;
		Области["П2000015_" + Инд1Стр].Значение = Области["П2000006_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000010_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение;
		Области["П2000016_" + Инд1Стр].Значение = Области["П2000007_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000011_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение;
		Области["П2000017_" + Инд1Стр].Значение = Области["П2000008_" + Инд1Стр].Значение
												* Области["П2000009_" + Инд1Стр].Значение
												* Области["П2000012_" + Инд1Стр].Значение
												* Области["П2000013_" + Инд1Стр].Значение
												* Области["П2000014_" + Инд1Стр].Значение;
		Области["П2000018_" + Инд1Стр].Значение = Области["П2000015_" + Инд1Стр].Значение
												+ Области["П2000016_" + Инд1Стр].Значение
												+ Области["П2000017_" + Инд1Стр].Значение;
		
		Тот15 = Тот15 + Области["П2000015_" + Инд1Стр].Значение;
		Тот16 = Тот16 + Области["П2000016_" + Инд1Стр].Значение;
		Тот17 = Тот17 + Области["П2000017_" + Инд1Стр].Значение;
		Тот18 = Тот18 + Области["П2000018_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П3000015"].Значение = Тот15;
	Области["П3000016"].Значение = Тот16;
	Области["П3000017"].Значение = Тот17;
	Области["П3000018"].Значение = Тот18;
	
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРасчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	Области["П040"].Значение = Области["П041"].Значение + Области["П042"].Значение + Области["П043"].Значение;
	Области["П060"].Значение = Области["П061"].Значение + Области["П062"].Значение + Области["П063"].Значение;
	Области["П080"].Значение = Области["П081"].Значение + Области["П082"].Значение + Области["П083"].Значение;
	Области["П100"].Значение = Области["П101"].Значение + Области["П102"].Значение;
	Области["П110"].Значение = Области["П111"].Значение + Области["П112"].Значение + Области["П113"].Значение + Области["П114"].Значение;
	Области["П120"].Значение = Области["П121"].Значение + Области["П122"].Значение + Области["П123"].Значение + Области["П124"].Значение;
	Области["П130"].Значение = Области["П131"].Значение + Области["П132"].Значение + Области["П133"].Значение + Области["П134"].Значение;
	Области["П150"].Значение = Области["П151"].Значение + Области["П152"].Значение + Области["П153"].Значение + Области["П154"].Значение;
	Области["П160"].Значение = Области["П161"].Значение + Области["П162"].Значение + Области["П163"].Значение + Области["П164"].Значение;
	Области["П021"].Значение = Области["П040"].Значение;
	Области["П022"].Значение = Области["П060"].Значение;
	Области["П023"].Значение = Области["П080"].Значение;
	Области["П024"].Значение = Области["П100"].Значение;
	Области["П020"].Значение = Области["П021"].Значение + Области["П022"].Значение + Области["П023"].Значение + Области["П024"].Значение;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел3_1(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	Тот8 = 0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П000040001008_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П000040001008_" + Инд1Стр].Значение = Области["П000040001005_" + Инд1Стр].Значение
													* Области["П000040001006_" + Инд1Стр].Значение
													* Области["П000040001007_" + Инд1Стр].Значение;
		Тот8 = Тот8 + Области["П000040001008_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П000040002008"].Значение = Тот8;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетРаздел3(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "")
	Области = Форма.ТабличныйДокумент.Области;
	Тот23 = 0;
	Тот24 = 0;
	Тот25 = 0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П000030001001_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П000030001012_" + Инд1Стр].Значение = Области["П000030001013_" + Инд1Стр].Значение
													+ Области["П000030001014_" + Инд1Стр].Значение;
													
		Области["П000030001023_" + Инд1Стр].Значение = Области["П000030001013_" + Инд1Стр].Значение
													* Области["П000030001015_" + Инд1Стр].Значение
													* Области["П000030001017_" + Инд1Стр].Значение
													* Области["П000030001019_" + Инд1Стр].Значение
													* Области["П000030001020_" + Инд1Стр].Значение
													* Области["П000030001021_" + Инд1Стр].Значение
													* Области["П000030001022_" + Инд1Стр].Значение;
													
		Области["П000030001024_" + Инд1Стр].Значение = Области["П000030001014_" + Инд1Стр].Значение
													* Области["П000030001015_" + Инд1Стр].Значение
													* Области["П000030001018_" + Инд1Стр].Значение
													* Области["П000030001019_" + Инд1Стр].Значение
													* Области["П000030001021_" + Инд1Стр].Значение
													* Области["П000030001022_" + Инд1Стр].Значение;
		
		Области["П000030001025_" + Инд1Стр].Значение = Области["П000030001024_" + Инд1Стр].Значение
													+ Области["П000030001023_" + Инд1Стр].Значение;
													
		Тот23 = Тот23 + Области["П000030001023_" + Инд1Стр].Значение;
		Тот24 = Тот24 + Области["П000030001024_" + Инд1Стр].Значение;
		Тот25 = Тот25 + Области["П000030001025_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П000030002023"].Значение = Тот23;
	Области["П000030002024"].Значение = Тот24;
	Области["П000030002025"].Значение = Тот25;
	
	Тот23 = 0;
	Тот24 = 0;
	Тот25 = 0;
	
	Инд1 = 0;
	Пока Истина Цикл 
		Инд1 = Инд1 + 1;
		Инд1Стр = Формат(Инд1, "ЧГ=");
		Если Области.Найти("П000050001001_" + Инд1Стр) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Области["П000050001012_" + Инд1Стр].Значение = Области["П000050001013_" + Инд1Стр].Значение
													+ Области["П000050001014_" + Инд1Стр].Значение;
													
		Области["П000050001023_" + Инд1Стр].Значение = Области["П000050001013_" + Инд1Стр].Значение
													* Области["П000050001015_" + Инд1Стр].Значение
													* Области["П000050001017_" + Инд1Стр].Значение
													* Области["П000050001019_" + Инд1Стр].Значение
													* Области["П000050001020_" + Инд1Стр].Значение
													* Области["П000050001021_" + Инд1Стр].Значение
													* Области["П000050001022_" + Инд1Стр].Значение;
													
		Области["П000050001024_" + Инд1Стр].Значение = Области["П000050001014_" + Инд1Стр].Значение
													* Области["П000050001015_" + Инд1Стр].Значение
													* Области["П000050001018_" + Инд1Стр].Значение
													* Области["П000050001019_" + Инд1Стр].Значение
													* Области["П000050001021_" + Инд1Стр].Значение
													* Области["П000050001022_" + Инд1Стр].Значение;
		
		Области["П000050001025_" + Инд1Стр].Значение = Области["П000050001024_" + Инд1Стр].Значение
													+ Области["П000050001023_" + Инд1Стр].Значение;
													
		Тот23 = Тот23 + Области["П000050001023_" + Инд1Стр].Значение;
		Тот24 = Тот24 + Области["П000050001024_" + Инд1Стр].Значение;
		Тот25 = Тот25 + Области["П000050001025_" + Инд1Стр].Значение;
	КонецЦикла;
	
	Области["П000050002023"].Значение = Тот23;
	Области["П000050002024"].Значение = Тот24;
	Области["П000050002025"].Значение = Тот25;
	Форма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницы = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаСтраниц;
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Области = Форма.ТабличныйДокумент.Области;
	Если ИмяТекущейСтраницы = "Раздел1_0" Или ИмяТекущейСтраницы = "Раздел1_1" Тогда
		РасчетРаздел1_0(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел1_2" Тогда
		РасчетРаздел1_2(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел2" Тогда
		РасчетРаздел2(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3_1" Тогда
		РасчетРаздел3_1(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3" Тогда
		РасчетРаздел3(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Возврат;
	ИначеЕсли ИмяТекущейСтраницы = "Расчет" Тогда
		РасчетРасчет(Форма, ИмяТекущейСтраницы, ОбластьИмя);
		Форма.Модифицированность = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИмяТекущейСтраницы = "" Тогда
		
		Расчет(Форма, "Расчет");
		
	ИначеЕсли НЕ Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраниц) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтраниц = Форма[ТаблицаСтраниц];
	СтрТаблицаСтраницы = ТаблицаСтраниц.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АктивнаяСтраница = СтрТаблицаСтраницы[0];
	Данные = АктивнаяСтраница.Данные[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраниц;
	
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	Если ОбластьUID <> Неопределено Тогда 
		UID = ОбластьUID.Значение;
		ДанныеФайловРазделовСоответствие = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
		ДанныеФайловРазделовСоответствие[UID] = Неопределено;
		ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(ДанныеФайловРазделовСоответствие, ДанныеФайловРазделов);
	КонецЕсли;
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекущейСтраницыПанели) Тогда 
		Таблица = ЭтаФорма["ТаблицаСтраницы" + ИмяТекущейСтраницыПанели];
		СтрТаблицаСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицаСтраницы[0]);
		Таблица.Удалить(СтрТаблицаСтраницы[0]);
		Возврат;
	КонецЕсли;
	
	мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраниц);
	СтрТаблицаСтраницы = ЭтаФорма[ТаблицаСтраниц].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	
	ИндексТекСтраницыРаздела = ЭтаФорма[ТаблицаСтраниц].Индекс(СтрТаблицаСтраницы[0]);

	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;

	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	Если ИмяТекущейСтраницыПанели = "Раздел3" Или ИмяТекущейСтраницыПанели = "Раздел3_1" Тогда
		ВывестиМакетПрисоединенныеФайлыРазделов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуИзДереваСтраницНаСервере(НаимРаздела, ИндексСтраницы)
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = НаимРаздела Тогда
			Для каждого НайденнаяСтраница Из НайденныйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = ИндексСтраницы + 1 Тогда
					
					НайденныйРаздел.ПолучитьЭлементы().Удалить(НайденнаяСтраница);
					
					НомерСтраницы = 1;
					Для Каждого СтраницаРаздела Из НайденныйРаздел.ПолучитьЭлементы() Цикл
						СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						НомерСтраницы = НомерСтраницы + 1;
					КонецЦикла;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если Обл <> Неопределено Тогда 
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ТабличныйДокумент.ТекущаяОбласть.Имя);
КонецПроцедуры

&НаСервере
Функция НайтиПутьДляДобавления(Путь, Данные, ИмяОблДоб)
	Для Каждого Элт Из Данные Цикл 
		Если Элт.ИмяОбластиДобСтр = ИмяОблДоб Тогда 
			Возврат Путь + ?(ЗначениеЗаполнено(Путь), ";", "") + Элт.Имя;
		КонецЕсли;
		
		Рез = НайтиПутьДляДобавления(Элт.Имя, Элт.Подчиненные, ИмяОблДоб);
		Если ЗначениеЗаполнено(Рез) Тогда 
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВМногоуровневыйРаздел(КолонкаРазделыОтчетаСокрНаим, ОблИмя)
	ОблИмяИтог = СтрЗаменить(СтрЗаменить(ОблИмя, "Значок", ""), "ДобавитьСтроку", "ДобавлениеСтроки");
	ИндПодч = СтрНайти(ОблИмяИтог, "_");
	Если ИндПодч > 0 Тогда 
		ОблИмяИтог = Лев(ОблИмяИтог, ИндПодч - 1);
	КонецЕсли;
	
	Прототип = мСтруктураМногоуровневыхРазделов[КолонкаРазделыОтчетаСокрНаим];
	Путь = НайтиПутьДляДобавления("", Прототип, ОблИмяИтог);
	
	М1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОблИмя, "_");
	М2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, ";");
	Постфикс = "";
	Для Инд = 1 По М1.ВГраница() Цикл 
		Постфикс = Постфикс + "_" + М1[Инд];
	КонецЦикла;
	
	Данные = ЭтаФорма["ТаблицаСтраницы" + КолонкаРазделыОтчетаСокрНаим].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0].Данные[М2[0]];
	ОТЧ = Новый ОписаниеТипов("Число");
	Для Инд = 1 По М2.ВГраница() Цикл 
		Данные = Данные[ОТЧ.ПривестиЗначение(М1[Инд]) - 1].Значение.ДопСтроки[М2[Инд]];
	КонецЦикла;
	КДобавлению = Постфикс + "_" + Формат(Данные.Количество() + 1, "ЧГ=");
	
	ВерхОбласти = ТабличныйДокумент.Область(ОблИмя).Верх - 1;
	ПрототипДобавляемойСтроки = Прототип;
	Для Каждого Элт Из М2 Цикл
		Для Каждого Элт2 Из ПрототипДобавляемойСтроки Цикл 
			Если Элт = Элт2.Имя Тогда 
				ДобСтр = Элт2;
				ПрототипДобавляемойСтроки = Элт2.Подчиненные;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТД = Новый ТабличныйДокумент;
	Макет = ОбъектОтчета(ИмяФормы).ПолучитьМакет(Сред(ИмяФормы, СтрНайти(ИмяФормы, "ФормаОтчета")) + "_" + КолонкаРазделыОтчетаСокрНаим);
	ДобавитьСтрокуВМногоуровневуюЧасть(Макет, КДобавлению, ДобСтр, ТД, 0);
	ВставляемаяОбласть = ТД.Область(1, , ТД.ВысотаТаблицы);
	ВставляемаяПреемник = ТабличныйДокумент.Область(ВерхОбласти + 1, , ВерхОбласти + ТД.ВысотаТаблицы);
	
	ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ВставляемаяПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
	Для Каждого Обл Из ТД.Области Цикл 
		ОблПриемник = ТабличныйДокумент.Область(ВерхОбласти + Обл.Верх, Обл.Лево, ВерхОбласти + Обл.Низ, Обл.Право);
		ОблПриемник.Имя = Обл.Имя;
	КонецЦикла;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТабличныйДокумент.Области.Найти(ДобСтр.ИмяОбластиУдСтр + Постфикс + "_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	СделатьЛистПолностьюДоступным();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВМногоуровневуюЧасть(Макет, Постфикс, ОписаниеРаздела, ТД, Уровень)
	ОблДляВывода = Макет.ПолучитьОбласть(ОписаниеРаздела.ИмяОбласти);
	ТД.Вывести(ОблДляВывода);
	Для Каждого Обл Из ОблДляВывода.Области Цикл 
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда 
			ТД.Области[Обл.Имя].Имя = Обл.Имя + Постфикс;
		Иначе
			ТД.Области[Обл.Имя].Имя = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Подч Из ОписаниеРаздела.Подчиненные Цикл 
		ДобавитьСтрокуВМногоуровневуюЧасть(Макет, Постфикс + "_1", Подч, ТД, Уровень + 1);
	КонецЦикла;
	
	Если Уровень > 0 Тогда
		ОблДобСтр = Макет.ПолучитьОбласть(ОписаниеРаздела.ИмяОбластиДобСтр);
		Для Каждого Обл Из ОблДобСтр.Области Цикл
			Обл.Имя = Обл.Имя + Лев(Постфикс, СтрДлина(Постфикс) - 2);
		КонецЦикла;
		ТД.Вывести(ОблДобСтр);
		ТД.Области[ОписаниеРаздела.ИмяОбластиУдСтр + Постфикс].Гиперссылка = Ложь;
		ТД.Области[ОписаниеРаздела.ИмяОбластиУдСтр + Постфикс].Текст = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим, Область = Неопределено)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(КолонкаРазделыОтчетаСокрНаим) Тогда 
		ДобавитьСтрокуВМногоуровневыйРаздел(КолонкаРазделыОтчетаСокрНаим, Область);
	Иначе 
		ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим, Область);
	КонецЕсли;
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(КолонкаРазделыОтчетаСокрНаим) Тогда 
		Расчет(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ТабличныйДокумент.ТекущаяОбласть.Имя);
КонецПроцедуры

&НаСервере
Функция НайтиПутьДляУдаления(Путь, Данные, ИмяОблДоб)
	Для Каждого Элт Из Данные Цикл 
		Если Элт.ИмяОбластиУдСтр = ИмяОблДоб Тогда 
			Возврат Путь + ?(ЗначениеЗаполнено(Путь), ";", "") + Элт.Имя;
		КонецЕсли;
		
		Рез = НайтиПутьДляУдаления(Элт.Имя, Элт.Подчиненные, ИмяОблДоб);
		Если ЗначениеЗаполнено(Рез) Тогда 
			Возврат Рез;
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура ПереименоватьЯчейкиПослеУдаления(М1)
	ОТЧ = Новый ОписаниеТипов("Число");
	ТекущаяПозиция = ОТЧ.ПривестиЗначение(М1[М1.ВГраница()]);
	ЧастьИмени = "_";
	Для Инд = 1 По М1.ВГраница() - 1 Цикл 
		ЧастьИмени = ЧастьИмени + Формат(М1[Инд], "ЧГ=") + "_";
	КонецЦикла;
	
	Переименовано = Истина;
	Пока Переименовано Цикл 
		Переименовано = Ложь;
		ПредПозицияСтр = Формат(ТекущаяПозиция, "ЧГ=");
		ЧастьИмениПред = ЧастьИмени + ПредПозицияСтр;
		ТекущаяПозиция = ТекущаяПозиция + 1;
		ТекущаяПозицияСтр = Формат(ТекущаяПозиция, "ЧГ=");
		ЧастьИмениТек = ЧастьИмени + ТекущаяПозицияСтр;
		ЧастьИмениДлина = СтрДлина(ЧастьИмениТек);
		
		Для Каждого Обл Из ТабличныйДокумент.Области Цикл
			ОблИмя = Обл.Имя;
			ИндПодч = СтрНайти(ОблИмя, "_");
			Если ИндПодч = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Сред(ОблИмя, ИндПодч, ЧастьИмениДлина) = ЧастьИмениТек Тогда 
				СледСимвол = Сред(ОблИмя, ИндПодч + ЧастьИмениДлина, 1);
				Если СледСимвол = "" Или СледСимвол = "_" Тогда 
					ОблИмяНов = Лев(ОблИмя, ИндПодч - 1) + ЧастьИмениПред + Сред(ОблИмя, ИндПодч + ЧастьИмениДлина);
					Обл.Имя = ОблИмяНов;
					Переименовано = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция НайтиИмяОбластиДобавленияСтроки(Прототип, М2)
	Прт = Прототип;
	Для Инд = 0 По М2.ВГраница() Цикл
		ПртПодч = Неопределено;
		Для Каждого Элт Из Прт Цикл 
			Если Элт.Имя = М2[Инд] Тогда 
				ПртПодч = Элт.Подчиненные;
				Если Инд = М2.ВГраница() Тогда 
					Возврат Элт.ИмяОбластиДобСтр;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Прт = ПртПодч;
	КонецЦикла;
КонецФункции

&НаСервере
Процедура УдалитьОбласть(ОблИмя, Данные, М1, М2, Прототип, КУдалению)
	ВерхОбласти = ТабличныйДокумент.Области[ОблИмя].Верх;
	
	Если Данные.Количество() = 2 Тогда
		ЛевОблИмя = Лев(ОблИмя, СтрДлина(ОблИмя) - 1);
		Для Инд = 1 По 2 Цикл 
			Обл = ТабличныйДокумент.Области[ЛевОблИмя + Инд];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЦикла;
	КонецЕсли;
	
	Если Данные.Количество() = КУдалению + 1 Тогда 
		
		НовОблИмя = НайтиИмяОбластиДобавленияСтроки(Прототип, М2);
		Для Инд = 1 По М1.ВГраница()-1 Цикл 
			НовОблИмя = НовОблИмя + "_" + М1[Инд];
		КонецЦикла;
		
		НизОбласти = ТабличныйДокумент.Области[НовОблИмя].Верх - 1;
	Иначе
		НовОблИмя = "";
		Для Инд = 0 По М1.ВГраница()-1 Цикл 
			НовОблИмя = НовОблИмя + М1[Инд] + "_";
		КонецЦикла;
		
		НовОблИмя = НовОблИмя + Формат(КУдалению + 2, "ЧГ=");
		НизОбласти = ТабличныйДокумент.Области[НовОблИмя].Верх - 1;
	КонецЕсли;
	
	ТабличныйДокумент.УдалитьОбласть(ТабличныйДокумент.Область(ВерхОбласти,0,НизОбласти,0), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Данные.Удалить(КУдалению);
	
	Если Данные.Количество() > КУдалению Тогда 
		ПереименоватьЯчейкиПослеУдаления(М1);
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуИзМногоуровневогоРаздела(КолонкаРазделыОтчетаСокрНаим, ОблИмя)
	ОблИмяИтог = Лев(ОблИмя, СтрНайти(ОблИмя, "_") - 1);
	
	Прототип = мСтруктураМногоуровневыхРазделов[КолонкаРазделыОтчетаСокрНаим];
	Путь = НайтиПутьДляУдаления("", Прототип, ОблИмяИтог);
	
	М1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОблИмя, "_");
	М2 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Путь, ";");
	Постфикс = "";
	Для Инд = 1 По М1.ВГраница() Цикл 
		Постфикс = Постфикс + "_" + М1[Инд];
	КонецЦикла;
	
	Данные = ЭтаФорма["ТаблицаСтраницы" + КолонкаРазделыОтчетаСокрНаим].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина))[0].Данные[М2[0]];
	ОТЧ = Новый ОписаниеТипов("Число");
	Для Инд = 1 По М2.ВГраница() Цикл 
		Данные = Данные[ОТЧ.ПривестиЗначение(М1[Инд]) - 1].Значение.ДопСтроки[М2[Инд]];
	КонецЦикла;
	
	Если Данные.Количество() = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	КУдалению = ОТЧ.ПривестиЗначение(М1[М1.ВГраница()]) - 1;
	УдалитьОбласть(ОблИмя, Данные, М1, М2, Прототип, КУдалению);
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница, ОбластьИмя)
	
	Если мСтруктураМногоуровневыхРазделов.Свойство(ТекущаяСтраница) Тогда 
		УдалитьСтрокуИзМногоуровневогоРаздела(ТекущаяСтраница, ОбластьИмя);
	Иначе 
		УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница, ОбластьИмя);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Истина;
	
	ЗаполнитьСведенияОбОрганизации();
	
	СтруктураРеквизитовФормы.мВпрограммеИзмененаОрганизация = Ложь;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		// установим цвет ячейки
		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Строка(Инд);
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершениеПослеСохраненияЗавершение", ЭтотОбъект, Новый Структура("КомандаИмя", ДополнительныеПараметры.Команда.Имя));
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершениеПослеСохраненияЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	Печать(ДополнительныеПараметры.КомандаИмя);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	#Если ВебКлиент Тогда
		УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		УстановитьФорматВыводаНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматВыводаНаКлиенте(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;
		
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
				
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") ИЛИ ПустаяСтрока(КодПоказателя) Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);
		
		Если (ТипДанныхПоказателя = "E" ИЛИ ТипДанныхПоказателя = "Е") И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.ТипЗначения = Форма.СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ;
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Заголовок = СтрЗаменить(Заголовок, " (сводная форма)", "");
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница, Область)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	
	Если Область = "ДобавитьСтрокуЗначок3" Или Область = "ДобавитьСтроку3" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок5" Или Область = "ДобавитьСтроку5" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок6" Или Область = "ДобавитьСтроку6" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы6;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок7" Или Область = "ДобавитьСтроку7" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок8" Или Область = "ДобавитьСтроку8" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы8;
	ИначеЕсли Область = "ДобавитьСтрокуЗначок" Или Область = "ДобавитьСтроку9" Тогда 
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы9;
	Иначе
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
		#КонецЕсли
	КонецЕсли;
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Раздел3_1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел3" Тогда
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница, ОбластьИмя) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	СредОбластьИмя = Сред(ОбластьИмя, 14, 11);
	ИмяГруппы = "";
	Для Каждого КЗ Из Форма.СтруктураРеквизитовФормы Цикл 
		Если СредОбластьИмя = КЗ.Значение Тогда 
			ИмяГруппы = СредОбластьИмя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяГруппы = "" Тогда 
		#Если НаКлиенте Тогда
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
		#Иначе
			ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
		#КонецЕсли
	КонецЕсли;
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + НомУдаляемойСтроки;
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
	
	Расчет(Форма, ТекущаяСтраница);
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложения" Тогда
			ОчиститьФайлы();
		Иначе
			ОчиститьФайлыРазделов();
		КонецЕсли;
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Приложения" Тогда
			ОчиститьФайлы();
		Иначе
			ОчиститьФайлыРазделов();
		КонецЕсли;
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяСтраницы) Тогда 
			Таблица = ЭтаФорма["ТаблицаСтраницы" + ИмяСтраницы];
			СтрТаблицыСтраницы = Таблица.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
			СтрТаблицыСтраницы[0].Данные = ПолучитьПустуюСтруктуруДанных(ИмяСтраницы);
			СтрТаблицыСтраницы[0].ФиксированныеДанные = ПолучитьПустуюФиксированнуюСтруктуруДанных(ИмяСтраницы);
			ИндексТекСтраницыРаздела = Таблица.Индекс(СтрТаблицыСтраницы[0]);
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ИндексТекСтраницыРаздела+1);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяСтраницы);
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл()
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	Если НЕ (ВРег(Прав(ВыбИмяФайла, 4)) = ".JPEG"
		 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".PDF"
		 ИЛИ ВРег(Прав(ВыбИмяФайла, 4)) = ".JPG") Тогда
		
		ТекстПредупреждения = НСтр(
			"ru='Файл приложения должен иметь одно из допустимых расширений: JPEG, PDF, JPG!'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ВыбИмяФайла, Каталог);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ПолноеИмяФайла, Каталог)
	ИмяФайла     = СтрЗаменить(ПолноеИмяФайла, Каталог, "");
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлыДД = ПолучитьИзВременногоХранилища(ДанныеФайлов);
	ДанныеФайла = Новый Структура("Имя, ДД, ДДАрх", ИмяФайла, ФайлЗагрузкиДвоичныеДанные);
	ФайлыДД.Добавить(ДанныеФайла);
	ДанныеФайлов = ПоместитьВоВременноеХранилище(ФайлыДД, ДанныеФайлов);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура УдалитьФайл(ИмяОбласти)
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ИндФайла = ОписаниеТипа.ПривестиЗначение(СтрЗаменить(ИмяОбласти, "УдалитьФайл_", "")) - 1;
	ФайлыДД = ПолучитьИзВременногоХранилища(ДанныеФайлов);
	ФайлыДД.Удалить(ИндФайла);
	ДанныеФайлов = ПоместитьВоВременноеХранилище(ФайлыДД, ДанныеФайлов);
	ВывестиМакетПрисоединенныеФайлы();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрисоединенныхФайлов(Элемент, Область, СтандартнаяОбработка)
	Если Область.Имя = "ДобавитьФайл" Или Область.Имя = "ДобавитьФайлЗначок" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьФайл();
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьФайл_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьФайл(Область.Имя);
		Возврат;
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "Файл_") > 0 Тогда
		СтандартнаяОбработка = Ложь;
		СохранитьНаДискФайл(Область.Имя);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФайла(ИмяОбласти)
	ОписаниеТипа = Новый ОписаниеТипов("Число");
	ИндФайла = ОписаниеТипа.ПривестиЗначение(СтрЗаменить(ИмяОбласти, "Файл_", "")) - 1;
	ФайлыДД = ПолучитьИзВременногоХранилища(ДанныеФайлов);
	ДанныеФайла = Новый Структура("ИмяФайла,ХранилищеФайла", ФайлыДД[ИндФайла].Имя, ПоместитьВоВременноеХранилище(ФайлыДД[ИндФайла].ДД));
	Возврат ДанныеФайла;
КонецФункции

&НаКлиенте
Процедура СохранитьНаДискФайл(ИмяОбласти)
	СтруктураХранения = ПолучитьСтруктуруФайла(ИмяОбласти);
	Попытка
		Если Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла) Тогда 
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УдалитьФайлРаздела()
	ОбластьUID = ТабличныйДокумент.Области.Найти("UID_файла");
	СоответствиеФайлов = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
	Если СоответствиеФайлов[ОбластьUID.Значение] <> Неопределено Тогда 
		СоответствиеФайлов.Удалить(ОбластьUID.Значение);
	КонецЕсли;
	ОбластьUID.Значение = Неопределено;
	ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(СоответствиеФайлов, ДанныеФайловРазделов);
	ВывестиМакетПрисоединенныеФайлыРазделов();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлРаздела()
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершениеРаздела", ЭтотОбъект);
	
	Попытка
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершениеРаздела(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		РегламентированнаяОтчетностьВызовСервера.ЗаполнитьСтруктуруДанныхФайлаРаздела(ТабличныйДокумент, ДанныеФайловРазделов, АдресФайла, ВыбИмяФайла, Каталог);
		ВывестиМакетПрисоединенныеФайлыРазделов();
		Модифицированность = Истина;
	Исключение
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФайлаРаздела()
	ФайлыРазделов = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
	UID = ТабличныйДокумент.Области.UID_файла.Значение;
	
	Если ФайлыРазделов[UID] <> Неопределено Тогда 
		ДанныеФайла = Новый Структура("ИмяФайла,ХранилищеФайла", ФайлыРазделов[UID].Имя, ПоместитьВоВременноеХранилище(ФайлыРазделов[UID].ДД));
		Возврат ДанныеФайла;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СохранитьНаДискФайлРаздела()
	СтруктураХранения = ПолучитьСтруктуруФайлаРаздела();
	Попытка
		Если (Не ЗначениеЗаполнено(СтруктураХранения))
			Или (Не ЗначениеЗаполнено(СтруктураХранения.ИмяФайла)) Тогда 
			Возврат;
		КонецЕсли;
		
		ПолучитьФайл(СтруктураХранения.ХранилищеФайла, СтруктураХранения.ИмяФайла, Истина);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При выгрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПрисоединенныхФайловРазделов(Элемент, Область, СтандартнаяОбработка)
	ОбластьДоб1 = ТабличныйДокумент.Области.Найти("ДобавитьСканКопиюЗначок");
	Если ОбластьДоб1.Текст = "+" Тогда
		ДобавитьФайлРаздела();
	ИначеЕсли ОбластьДоб1.Текст = "х" Тогда
		Если Область.Имя = "ДобавитьСканКопиюЗначок" Тогда
			УдалитьФайлРаздела();
		ИначеЕсли Область.Имя = "ДобавитьСканКопию" Тогда
			СохранитьНаДискФайлРаздела();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "СобратьДанные") > 0 И Область.Текст <> "" Тогда
		Заполнить("");
	КонецЕсли;
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьФайл") > 0 
		Или СтрЧислоВхождений(Область.Имя, "Файл_") > 0 Тогда
		ОбработкаВыбораПрисоединенныхФайлов(Элемент, Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ДобавитьСканКопиюЗначок" Или Область.Имя = "ДобавитьСканКопию" Тогда
		ОбработкаВыбораПрисоединенныхФайловРазделов(Элемент, Область, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "ЗаполнитьПоОКТМО" Тогда 
		ОКТМО = СокрЛП(ТабличныйДокумент.Области.П010.Значение);
		Если ПустаяСтрока(ОКТМО) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для заполнения данных необходимо заполнить код ОКТМО (строка 010)");
		Иначе
			ЗаполнитьПоОКТМО(ОКТМО);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "IND_ZONE"
		Или Область.Имя = "IND_SPEC" Тогда 
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	// Титульный
	Если СтрНайти(Область.Имя,"ПредставляетсяВ") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", "Выбор органа Росприроднадзора");
		
		ПараметрыФормы.Вставить("ТаблицаЗначений", мОрганыРПН);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Область.Значение));
		ПараметрыФормы.Вставить("ОтключитьВидимостьКолонкиКод", Истина);
		
		ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумОрганыРПНЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Область.Имя = "ПоПроизТерр" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоХозСуб.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "ПоХозСуб" Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		
		Если Область.Значение = "V" Тогда
			Область.Значение = "";
		Иначе
			Область.Значение = "V";
			ТабличныйДокумент.Области.ПоПроизТерр.Значение = "";
		КонецЕсли;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	ИначеЕсли Область.Имя = "ПР0301" Или Область.Имя = "ПР0302" Или Область.Имя = "ПР0303" Тогда
		Область.Значение = ?(ЗначениеЗаполнено(Область.Значение), "", "V");
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "Флаг1" Или Область.Имя = "Флаг2" Тогда
		НовЗнач = ?(ЗначениеЗаполнено(Область.Значение), "", "Х");
		ТабличныйДокумент.Области.Флаг1.Значение = "";
		ТабличныйДокумент.Области.Флаг2.Значение = "";
		Область.Значение = НовЗнач;
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	ИначеЕсли (СтрНайти(Область.Имя, "РазмерОрганизации") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Список = Новый СписокЗначений;
		Список.Добавить(0, "Пустое значение");
		Список.Добавить(3, "3 - МКП (микро предприятие)");
		Список.Добавить(4, "4 - МП (малое предприятие)");
		Список.Добавить(5, "5 - СП (среднее предприятие)");
		Список.Добавить(6, "6 - КП (крупное предприятие)");
		
		НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Область", Область);
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ОписаниеОповещения = новый ОписаниеОповещения("ВыбратьИзСпискаРазмерОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		// выдаем стандартный диалог
		Если НайденнаяСтрока = Неопределено Тогда
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
		Иначе
			ПоказатьВыборИзСписка(ОписаниеОповещения, Список,, НайденнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли; 
		
	// Строка 010. КБК.  Расчет
	ИначеЕсли СтрНайти(Область.Имя,"КБК1") > 0 Тогда
		
		Если НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
			
			СтандартнаяОбработка = Ложь;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок", "Выбор КБК");
			
			ПараметрыФормы.Вставить("ТаблицаЗначений", мКодыБюджетнойКлассификации2013_05_21);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
			
			
			ДополнительныеПараметры = Новый Структура("Область, Элемент", Область, Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормумКодыБюджетнойКлассификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	// Раздел 1, 1.1
	ИначеЕсли (СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_1" Или СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_0")
		И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		ИмяПроцедуры = "ВводКоэффициентаЗавершение";
		ОбластьИмя = Область.Имя;
		Если СтрНачинаетсяС(ОбластьИмя, "П1100010_") Или СтрНачинаетсяС(ОбластьИмя, "П2000010_") Тогда 
			Таб = мГр10_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100011_") Или СтрНачинаетсяС(ОбластьИмя, "П2000011_") Тогда 
			Таб = мГр11_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100012_") Или СтрНачинаетсяС(ОбластьИмя, "П2000012_") Тогда 
			Таб = мГр12_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100013_") Или СтрНачинаетсяС(ОбластьИмя, "П2000013_") Тогда 
			Таб = мГр13_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100002_") Или СтрНачинаетсяС(ОбластьИмя, "П2000002_") Тогда 
			ИмяПроцедуры = "ВводНазванияЗавершение";
			Таб = мВВРаздел1;
		Иначе
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		НомерСтроки = Сред(Область.Имя, 15);
		ПервоначальноеЗначение = Область.Значение;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
		ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1_2" И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		ИмяПроцедуры = "ВводКоэффициентаЗавершение";
		ОбластьИмя = Область.Имя;
		Если СтрНачинаетсяС(ОбластьИмя, "П1100006_") Тогда 
			Таб = мГр13_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100005_") Тогда 
			Таб = мГр12_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100007_") Тогда 
			Таб = мГр7_Разд12;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100002_") Тогда
			ИмяПроцедуры = "ВводНазванияЗавершение";
			Таб = мВВРаздел1;
		Иначе
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗначение = Область.Значение;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
		ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(ИмяПроцедуры, ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
		
		ОбластьИмя = Область.Имя;
		Если СтрНачинаетсяС(ОбластьИмя, "П1100011_") Или СтрНачинаетсяС(ОбластьИмя, "П2000011_") Тогда 
			Таб = мГр11_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100012_") Или СтрНачинаетсяС(ОбластьИмя, "П2000012_") Тогда 
			Таб = мГр12_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100014_") Или СтрНачинаетсяС(ОбластьИмя, "П2000014_") Тогда 
			Таб = мГр13_Разд11_10;
		ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П1100010_") Или СтрНачинаетсяС(ОбластьИмя, "П2000010_") Тогда 
			Таб = мГр10_Разд2;
		Иначе
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПервоначальноеЗначение = Область.Значение;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
		ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
		ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
		ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводКоэффициентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3_1" Тогда 
		Если (СтрНачинаетсяС(Область.Имя, "П000040001002_") Или СтрНачинаетсяС(Область.Имя, "П000040001003_")) Тогда 
			
			Таб = мГр1_Разд3;
			СтандартнаяОбработка = Ложь;
			ПервоначальноеЗначение = Область.Значение;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
			ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВводИзФККОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбластьИмя = Область.Имя;
			Если СтрНачинаетсяС(ОбластьИмя, "П000040001007_") Тогда 
				Таб = мГр13_Разд11_10;
			ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П000040001004_") Тогда 
				Таб = мГр4_Разд3;
			Иначе
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			ПервоначальноеЗначение = Область.Значение;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
			ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВводКоэффициентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	ИначеЕсли (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) И СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда 
		
		Если (СтрНачинаетсяС(Область.Имя, "П000030001002_") Или СтрНачинаетсяС(Область.Имя, "П000030001003_"))
			Или (СтрНачинаетсяС(Область.Имя, "П000050001002_") Или СтрНачинаетсяС(Область.Имя, "П000050001003_")) Тогда 
			
			Таб = мГр1_Разд3;
			СтандартнаяОбработка = Ложь;
			ПервоначальноеЗначение = Область.Значение;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
			ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВводИзФККОЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ОбластьИмя = Область.Имя;
			Если СтрНачинаетсяС(ОбластьИмя, "П000030001004_") Или СтрНачинаетсяС(ОбластьИмя, "П000050001004_") Тогда 
				Таб = мГр4_Разд3;
			ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П000030001020_") Или СтрНачинаетсяС(ОбластьИмя, "П000050001020_") Тогда
				Таб = мГр17_Разд3;
			ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П000030001021_") Или СтрНачинаетсяС(ОбластьИмя, "П000050001021_") Тогда
				Таб = мГр21_Разд3;
			ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П000030001022_") Или СтрНачинаетсяС(ОбластьИмя, "П000050001022_") Тогда
				Таб = мГр13_Разд11_10;
			ИначеЕсли СтрНачинаетсяС(ОбластьИмя, "П000030001018_") Или СтрНачинаетсяС(ОбластьИмя, "П000050001018_") Тогда
				Таб = мГр11_Разд11_10;
			Иначе
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			
			ПервоначальноеЗначение = Область.Значение;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор коэффициента");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    Таб);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Название", Неопределено));
			ДополнительныеПараметры = Новый Структура("Элемент, Область", Элемент, Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВводКоэффициентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуОКТМО(ОКТМО, ИмяГруппы, ИндексТекСтраницыРаздела)
	ТекСтр = ТаблицаСтраницыРасчет[ИндексТекСтраницыРаздела];
	СтруктураГруппы = ТекСтр.ДанныеДопСтрок[0].Значение[ИмяГруппы];
	ИсхКоличествоСтрок = СтруктураГруппы.Количество();
	СтруктураГруппы.Очистить();
	Для Каждого Элт Из ОКТМО Цикл 
		НовСтр = СтруктураГруппы.Добавить();
		НовСтр[ИмяГруппы + "01"] = Элт.Ключ;
	КонецЦикла;
	Если СтруктураГруппы.Количество() = 0 Тогда 
		СтруктураГруппы.Добавить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОКТМО(ОКТМО)
	СтрТаблицыСтраницы = ТаблицаСтраницыРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
	ИндексТекСтраницыРаздела = ТаблицаСтраницыРасчет.Индекс(СтрТаблицыСтраницы[0]);
	Данные = СобратьДанныеПоОКТМО(ОКТМО);
	
	ТабличныйДокумент.Области.П041.Значение = Данные.Раздел1_0.П0000014;
	ТабличныйДокумент.Области.П042.Значение = Данные.Раздел1_0.П0000015;
	ТабличныйДокумент.Области.П043.Значение = Данные.Раздел1_0.П0000016;
	
	ТабличныйДокумент.Области.П061.Значение = Данные.Раздел1_1.П0000014;
	ТабличныйДокумент.Области.П062.Значение = Данные.Раздел1_1.П0000015;
	ТабличныйДокумент.Области.П063.Значение = Данные.Раздел1_1.П0000016;
	
	ТабличныйДокумент.Области.П081.Значение = Данные.Раздел2.П0000015;
	ТабличныйДокумент.Области.П082.Значение = Данные.Раздел2.П0000016;
	ТабличныйДокумент.Области.П083.Значение = Данные.Раздел2.П0000017;
	
	ТабличныйДокумент.Области.П101.Значение = Данные.Разделы3.П000030002023;
	ТабличныйДокумент.Области.П102.Значение = Данные.Разделы3.П000030002024;
	
	ТабличныйДокумент.Области.П121.Значение = Данные.Раздел1_0.П3000017;
	ТабличныйДокумент.Области.П123.Значение = Данные.Раздел2.П3000018;
	ТабличныйДокумент.Области.П124.Значение = Данные.Разделы3.П000050002025;
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	ЗаполнитьГруппуОКТМО(Данные.Раздел1_0.ОКТМО, "П1003100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Раздел1_1.ОКТМО, "П1005100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Раздел2.ОКТМО, "П1007100000", ИндексТекСтраницыРаздела);
	ЗаполнитьГруппуОКТМО(Данные.Разделы3.ОКТМО, "П1009100000", ИндексТекСтраницыРаздела);
	
	ВывестиМакетВТаблДокНаСервере("Расчет", ИндексТекСтраницыРаздела + 1, Ложь);
	РасчетРасчет(ЭтотОбъект);
	ТабличныйДокумент.Области.П122.Значение = ТабличныйДокумент.Области.П022.Значение;
КонецПроцедуры

&НаСервере
Функция СобратьДанныеПоОКТМО(ОКТМО)
	ОТЧ = Новый ОписаниеТипов("Число");
	
	СводныеДанные = Новый Структура;
	СводныеДанные.Вставить("Раздел1_0", Новый Структура("П0000014, П0000015, П0000016, П0000017, П3000017"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел1_0 Цикл 
				СводныеДанные.Раздел1_0[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел1_0[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел1_0.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел1_0.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Раздел1_1", Новый Структура("П0000014, П0000015, П0000016, П0000017"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел1_1 Цикл 
				СводныеДанные.Раздел1_1[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел1_1[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел1_1.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел1_1.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Раздел2", Новый Структура("П0000015, П0000016, П0000017, П3000018"));
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Раздел2 Цикл 
				СводныеДанные.Раздел2[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Раздел2[КЗ.Ключ]) + Стр.ФиксированныеДанные[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Раздел2.Вставить("ОКТМО", Новый Соответствие);
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл
		Если СокрЛП(Стр.ФиксированныеДанные.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого Элт Из Стр.Данные.П10000 Цикл 
				Если ЗначениеЗаполнено(Элт.Значение.Данные.П1000004) Тогда 
					СводныеДанные.Раздел2.ОКТМО.Вставить(Элт.Значение.Данные.П1000004);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Вставить("Разделы3", Новый Структура("П000030002023, П000030002024, П000050002025"));
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл
		Если СокрЛП(Стр.Данные[0].Значение.ОКТМОГруппировочный) = ОКТМО Тогда
			Для Каждого КЗ Из СводныеДанные.Разделы3 Цикл 
				СводныеДанные.Разделы3[КЗ.Ключ] = ОТЧ.ПривестиЗначение(СводныеДанные.Разделы3[КЗ.Ключ]) + Стр.Данные[0].Значение[КЗ.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	СводныеДанные.Разделы3.Вставить("ОКТМО", Новый Соответствие);
	
	Возврат СводныеДанные;
КонецФункции

&НаКлиенте
Процедура ВводКлассаОпасностиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Код) Тогда 
		Результат.Название = "";
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	СмежнаяОбл = ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000030001004_", "П000030001018_")];
	Если Результат.Код = "I" Тогда 
		СмежнаяОбл.Значение = 0.5;
	ИначеЕсли Результат.Код = "II" Тогда 
		СмежнаяОбл.Значение = 0.5;
	ИначеЕсли Результат.Код = "III" Тогда 
		СмежнаяОбл.Значение = 0.67;
	ИначеЕсли Результат.Код = "IV" Тогда 
		СмежнаяОбл.Значение = 0.49;
	ИначеЕсли Результат.Код = "V" Тогда 
		СмежнаяОбл.Значение = 0.33;
	Иначе
		СмежнаяОбл.Значение = 0;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
КонецПроцедуры

&НаКлиенте
Процедура ВводИзФККОЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Код) Тогда 
		Результат.Название = "";
	КонецЕсли;
	
	Если СтрНачинаетсяС(Область.Имя, "П00003") Тогда 
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000030001002_", "П000030001003_")].Значение = Результат.Код;
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000030001003_", "П000030001002_")].Значение = Результат.Название;
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00005") Тогда
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000050001002_", "П000050001003_")].Значение = Результат.Код;
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000050001003_", "П000050001002_")].Значение = Результат.Название;
	ИначеЕсли СтрНачинаетсяС(Область.Имя, "П00004") Тогда
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000040001002_", "П000040001003_")].Значение = Результат.Код;
		ТабличныйДокумент.Области[СтрЗаменить(Область.Имя, "П000040001003_", "П000040001002_")].Значение = Результат.Название;
	Иначе 
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКоэффициентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНазванияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.Код) Тогда 
		Область.Значение = Результат.Название;
	Иначе 
		Область.Значение = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумОрганыРПНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), "", Результат.Название);
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаРазмерОрганизацииЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
		
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаТоннаЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если СписокЭлемент <> Неопределено  Тогда
		
		Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
		
		ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумКодыБюджетнойКлассификацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = Результат.Код;
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормумДопКоэфТЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Область.Значение = ?(ПустаяСтрока(Результат.Код), 0, Число(Результат.Код));
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если Область.Имя = "НомКоррект" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Если НомерКорректировки = 0 Тогда 
			ТабличныйДокумент.Области.ВидДок.Значение = "V";
			ТабличныйДокумент.Области.Корректировка.Значение = "";
		Иначе
			ТабличныйДокумент.Области.ВидДок.Значение = "";
			ТабличныйДокумент.Области.Корректировка.Значение = "V";
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли Область.Имя = "ДатаПодписи" Тогда
		
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизации(Истина);
		ЗаполнитьДатуВЯчейкахНаКлиенте();
		
		СтруктураРеквизитовФормы.ДатаПодписиДоИзменения = ДатаПодписи;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКАТО") > 0
	   И ЗначениеЗаполнено(ЗначПоказателя)
	   И НЕ СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2014-01-01' Тогда
		
		ДлинаЗначения = СтрДлина(СокрЛП(ЗначПоказателя));
		
		Для Инд = ДлинаЗначения + 1 По 11 Цикл
			
			ЗначПоказателя = СокрЛП(ЗначПоказателя) + "0";
			
			Область.Значение = ЗначПоказателя;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	СохранитьЗначениеПоказателяВСтруктуре(ЭтаФорма, ИмяРаздела, ИмяПоказателя, Область.Значение);
	
	Если ИмяРаздела = "Раздел1_0" 
		Или ИмяРаздела = "Раздел1_1" 
		Или ИмяРаздела = "Раздел1_2" 
		Или ИмяРаздела = "Раздел2" Тогда
		РасчетНаКлиенте(ИмяРаздела, Область.Имя);
	ИначеЕсли ИмяРаздела <> "Титульный" Тогда 
		
		ИмяОбласти = Область.Имя;
		
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
			
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
			
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРасчет.Очистить();
	ТаблицаСтраницыРаздела3.Очистить();
	ТаблицаСтраницыРаздела3_1.Очистить();
	ТаблицаСтраницыРаздел1_0.Очистить();
	ТаблицаСтраницыРаздел1_1.Очистить();
	ТаблицаСтраницыРаздел1_2.Очистить();
	ТаблицаСтраницыРаздел2.Очистить();
	ДанныеФайлов = ПоместитьВоВременноеХранилище(Новый Массив, ДанныеФайлов);
	ДанныеФайловРазделов = ПоместитьВоВременноеХранилище(Новый Соответствие, ДанныеФайловРазделов);
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьАвто();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвто()
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	ТаблДанных= Новый ТаблицаЗначений;
	ТаблДанных.Колонки.Добавить("КодОКАТО");
	ТаблДанных.Колонки.Добавить("СуммаПДВ");
	ТаблДанных.Колонки.Добавить("СуммаВСВ");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимВыброс");
	ТаблДанных.Колонки.Добавить("СуммаПлатыОтПередвижногоОбъекта");
	ТаблДанных.Колонки.Добавить("СуммаПДС");
	ТаблДанных.Колонки.Добавить("СуммаВСС");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимСброс");
	ТаблДанных.Колонки.Добавить("СуммаУстанЛимит");
	ТаблДанных.Колонки.Добавить("СуммаСверхЛимит");
	
	ТаблДанных.Свернуть("КодОКАТО", "СуммаПДВ, СуммаВСВ, СуммаСверхЛимВыброс, СуммаПлатыОтПередвижногоОбъекта, СуммаПДС, СуммаВСС, СуммаСверхЛимСброс, СуммаУстанЛимит, СуммаСверхЛимит");
		
	ТаблРасчет = ЭтаФорма.ТаблицаСтраницыРасчет;
	ИндексСтраницы = 0;
	Пока НЕ (ИндексСтраницы > (ТаблРасчет.Количество()-1)) Цикл
		СтрокаТаблицы = ТаблРасчет[ИндексСтраницы];
		Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
			ТаблРасчет.Удалить(СтрокаТаблицы);
			ИзменитьТаблицуПараметровАвтозаполнения(-1, "Расчет"); // Удалим варианты заполнения.
			УдалитьСтраницуИзДереваСтраницНаСервере("Расчет", ИндексСтраницы);
			Продолжить;
		КонецЕсли;
		ИндексСтраницы = ИндексСтраницы + 1;
	КонецЦикла;
	
	ОчиститьТабличноеПолеНаСервере("Расчет");
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	Если ДатаПодписи >= '20120101' Тогда	
		КБК = "";
	Иначе
		КБК = "04811201000010000120";
	КонецЕсли;
	
	ЭтоПервыйЛистРаздела = Истина;
	
	Для Каждого Зап Из ТаблДанных Цикл
		
		Если НЕ ЗначениеЗаполнено(Зап.КодОКАТО) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоПервыйЛистРаздела Тогда
			ЭтоПервыйЛистРаздела = Ложь;
		Иначе
			ВставитьДополнительнуюСтраницуНаСервере("Расчет");
		КонецЕсли;
				
		РезультатПоиска = ТаблРасчет.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
					
		Данные = РезультатПоиска[0].Данные[0].Значение;
		
		Данные.КБК1 = КБК;
		ТабличныйДокумент.Области.КБК1.Значение = КБК;
		
		Данные.ОКАТО1 = Зап.КодОКАТО;
		ТабличныйДокумент.Области.ОКАТО1.Значение = Зап.КодОКАТО;
		
		Если ЧислоУмещается(Зап.СуммаПДВ, 12) Тогда
			Данные.Сумма031 = Зап.СуммаПДВ;
			ТабличныйДокумент.Области.Сумма031.Значение = Зап.СуммаПДВ;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаВСВ, 12) Тогда
			Данные.Сумма032 = Зап.СуммаВСВ;
			ТабличныйДокумент.Области.Сумма032.Значение = Зап.СуммаВСВ;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимВыброс, 12) Тогда
			Данные.Сумма033 = Зап.СуммаСверхЛимВыброс;
			ТабличныйДокумент.Области.Сумма033.Значение = Зап.СуммаСверхЛимВыброс;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаПлатыОтПередвижногоОбъекта, 12) Тогда
			Данные.Сумма034 = Зап.СуммаПлатыОтПередвижногоОбъекта;
			ТабличныйДокумент.Области.Сумма034.Значение = Зап.СуммаПлатыОтПередвижногоОбъекта;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаПДС, 12) Тогда
			Данные.Сумма035 = Зап.СуммаПДС;
			ТабличныйДокумент.Области.Сумма035.Значение = Зап.СуммаПДС;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаВСС, 12) Тогда
			Данные.Сумма036 = Зап.СуммаВСС;
			ТабличныйДокумент.Области.Сумма036.Значение = Зап.СуммаВСС;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимСброс, 12) Тогда
			Данные.Сумма037 = Зап.СуммаСверхЛимСброс;
			ТабличныйДокумент.Области.Сумма037.Значение = Зап.СуммаСверхЛимСброс;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаУстанЛимит, 12) Тогда
			Данные.Сумма038 = Зап.СуммаУстанЛимит;
			ТабличныйДокумент.Области.Сумма038.Значение = Зап.СуммаУстанЛимит;
		КонецЕсли;
		
		Если ЧислоУмещается(Зап.СуммаСверхЛимит, 12) Тогда
			Данные.Сумма039 = Зап.СуммаСверхЛимит;
			ТабличныйДокумент.Области.Сумма039.Значение = Зап.СуммаСверхЛимит;
		КонецЕсли;
		
		РасчетНаСервере("Расчет");
		
	КонецЦикла;
	
	Если ТаблРасчет.Количество() = 0 Тогда
			
		ВставитьДополнительнуюСтраницуНаСервере("Расчет");
			
	КонецЕсли;
	
	СохранитьДанныеРаздела("Расчет", Ложь, Ложь);
	
	РасчетНаСервере("Расчет");;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ЧислоУмещается(Знач ЧисловоеЗначение, Знач КритическоеКолвоСимволов)

	ПервоначальноеЗначениеСтр = Формат(ЧисловоеЗначение, СтруктураРеквизитовФормы.мСтрокаФормата + ";ЧГ=0");
	Если СтрДлина(ПервоначальноеЗначениеСтр) > КритическоеКолвоСимволов Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыПослеСохраненияЗавершение", ЭтотОбъект);
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыПослеСохраненияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыгрузки = Неопределено;
	ТекстВыгрузки = Неопределено;
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		ТекстВопроса = НСтр("ru='В ходе выгрузки были найдены ошибки.'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да, "Продолжить выгрузку");
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Нет, "Показать ошибки");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьИзФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, КнопкиВопроса, , КодВозвратаДиалога.Нет);
	Иначе
		ВыгрузитьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьИзФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыгрузитьОтчет(Истина);
	Иначе
		СпДокОсн = Новый СписокЗначений;
		СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(СпДокОсн, ОшибкиОтчета);
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиОтчета);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет(ВыгружатьСОшибками = Ложь) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ВыгружатьСОшибками", ВыгружатьСОшибками);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн,,,,,,,,,ДополнительныеПараметры.ВыгружатьСОшибками);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, ФормироватьПараметры = Истина) Экспорт
	
	СформироватьСтруктуруПоказателей();
	Если ФормироватьПараметры Тогда 
		ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	КонецЕсли;
	ДеревоВыгрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтаФорма.ИмяФормы, "СхемаВыгрузкиXML2016Кв1");
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(ЭтаФорма, ДеревоВыгрузки) Тогда
		КоллекцияСписковВыбора = "";
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	КоллекцияСписковВыбора = "";
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина, ИмяФайлаВыгрузки = "", ВыгружатьСОшибками = Ложь) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		
		Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
			ТекстЗаголовка = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
		Иначе
			ТекстЗаголовка = Заголовок;
		КонецЕсли;
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
		Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ВыгружатьСОшибками И НЕ УниверсальнаяВыгрузкаXMLПроверкаВозможностиВыгрузкиНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLПроверкаДанныхНаСервере(ТекстВыгрузки, ПараметрыВыгрузки, Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаВыгрузки = ПараметрыВыгрузки.ИмяФайла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ИмяПоляТаблДокумента = "ТабличныйДокумент";
	
	// проверка показателей раздела
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПредставляетсяВ) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан территориальный орган Росприроднадзора!", ИмяПоляТаблДокумента, "ПредставляетсяВ");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКПО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКПО организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код вида деятельности по ОКВЭД организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ОКАТО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задан код ОКАТО/ОКТМО организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыВыгрузки.ПолнНаименованиеОрг) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, "Не задано полное наименование организации!", ИмяПоляТаблДокумента, "");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	СтрПоляТаблДокумента = "ПолеТабличногоДокументаРасчет";
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция НовыйУзелИзПрототипа(ПрототипУзла);
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если Стр.Код = КодЭлемента Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Процедура ДополнитьДанныеОтчета()
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными(ДеревоВыгрузки)
	Узел = ПолучитьПодчиненныйЭлемент(ДеревоВыгрузки, "DATA_PACKET_NI");
	Узел = ПолучитьПодчиненныйЭлемент(Узел, "ORG_INFO");
	УзелРазрешениеНаВыброс = ПолучитьПодчиненныйЭлемент(Узел, "EMISSION_DOC");
	ЗаполнитьДополнительнымиДанными_РазрешениеНаВыбросВАтмосферу(УзелРазрешениеНаВыброс);
	УзелРазрешениеНаСброс = ПолучитьПодчиненныйЭлемент(Узел, "WATER_DOC");
	ЗаполнитьДополнительнымиДанными_РазрешениеНаСбросыВВоду(УзелРазрешениеНаСброс);
	УзелЛимиты = ПолучитьПодчиненныйЭлемент(Узел, "WASTE_DOC");
	ЗаполнитьДополнительнымиДанными_Лимиты(УзелЛимиты);
	
	УзелРасчет = ПолучитьПодчиненныйЭлемент(Узел, "CALC_PAYMENT");
	УзелРасчет = ПолучитьПодчиненныйЭлемент(УзелРасчет, "TOTAL_CALC");
	Для Каждого Стр Из ТаблицаСтраницыРасчет Цикл
		ОКАТОФильтр = СокрЛП(Стр.Данные[0].Значение.П010);
		Если Не ЗначениеЗаполнено(ОКАТОФильтр) Тогда 
			Продолжить;
		КонецЕсли;
		
		УзелРасчетТек = НовыйУзелИзПрототипа(УзелРасчет);
		ЗаполнитьДополнительнымиДаннымиИтогиПоОКАТО(УзелРасчетТек, Стр.Данные[0].Значение);
		Узел1_0 = ПолучитьПодчиненныйЭлемент(УзелРасчетТек, "STATOBJ_EMISS");
		ЗаполнитьДополнительнымиДанными_Раздел1_0(Узел1_0, ОКАТОФильтр);
		ЗаполнитьДополнительнымиДанными_Раздел1_2(Узел1_0, ОКАТОФильтр);
		Узел2 = ПолучитьПодчиненныйЭлемент(УзелРасчетТек, "WATER_PAYMENT");
		ЗаполнитьДополнительнымиДанными_Раздел2(Узел2, ОКАТОФильтр);
		
		Узел3 = ПолучитьПодчиненныйЭлемент(УзелРасчетТек, "WASTE_PAYMENT");
		Узел3_1 = НовыйУзелИзПрототипа(Узел3);
		ЗаполнитьДополнительнымиДанными_Раздел3(Узел3, ОКАТОФильтр);
		ЗаполнитьДополнительнымиДанными_Раздел3_1(Узел3_1, ОКАТОФильтр);
	КонецЦикла;
	РегламентированнаяОтчетность.УдалитьУзел(УзелРасчет);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДаннымиИтогиПоОКАТО(УзелРасчет, ДанныеСтраницы)
	УстановитьЗначениеЭлемента(УзелРасчет, "OKATO", ДанныеСтраницы.П010);
	УстановитьЗначениеЭлемента(УзелРасчет, "CF_ES_WS", 1);
	УстановитьЗначениеЭлемента(УзелРасчет, "CF_ES_EM", 1);
	УстановитьЗначениеЭлемента(УзелРасчет, "KBK", "04811201000010000120");
	УстановитьЗначениеЭлемента(УзелРасчет, "S_NOPRIV", ДанныеСтраницы.П020);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_PAY", ДанныеСтраницы.П130);
	
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRPDV", ДанныеСтраницы.П041);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRVSV", ДанныеСтраницы.П042);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRLIM", ДанныеСтраницы.П043);
	
	УстановитьЗначениеЭлемента(УзелРасчет, "S_WTPDS", ДанныеСтраницы.П081);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_WTVSS", ДанныеСтраницы.П082);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_WTLIM", ДанныеСтраницы.П083);
	
	УстановитьЗначениеЭлемента(УзелРасчет, "S_WSINLIM", ДанныеСтраницы.П101);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_WSNOLIM", ДанныеСтраницы.П102);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_ACTION", ДанныеСтраницы.П110);
	
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRPDV_APG", ДанныеСтраницы.П061);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRVSV_APG", ДанныеСтраницы.П062);
	УстановитьЗначениеЭлемента(УзелРасчет, "S_AIRLIM_APG", ДанныеСтраницы.П063);
	
	УзелОКАТО = ПолучитьПодчиненныйЭлемент(УзелРасчет, "CP_OKATO_SUM");
	СКБК = Новый Соответствие;
	СКБК["04811201010016000120"] = "П121,П131,П151,П161";
	СКБК["04811201070016000120"] = "П122,П132,П152,П162";
	СКБК["04811201030016000120"] = "П123,П133,П153,П163";
	СКБК["04811201040016000120"] = "П124,П134,П154,П164";
	
	Для Каждого КЗ Из СКБК Цикл 
		Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КЗ.Значение, ",");
		Для Инд = 1 По 4 Цикл 
			УзелОКАТОТек = НовыйУзелИзПрототипа(УзелОКАТО);
			УстановитьЗначениеЭлемента(УзелОКАТОТек, "SUM_TYPE", Строка(Инд));
			УстановитьЗначениеЭлемента(УзелОКАТОТек, "KBK", КЗ.Ключ);
			УстановитьЗначениеЭлемента(УзелОКАТОТек, "SUM_TOTAL", ДанныеСтраницы[Поля[Инд-1]]);
		КонецЦикла;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(УзелОКАТО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Раздел3(Узел3, ОКАТОФильтр)
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл 
		Данные = Стр.Данные[0].Значение;
		
		Если ЗначениеЗаполнено(Данные.П000030002025)
				И ОКАТОФильтр = Данные.ОКТМОГруппировочный Тогда 
			НовУзел = НовыйУзелИзПрототипа(Узел3);
			
			УстановитьЗначениеЭлемента(НовУзел, "ID_EO", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			УстановитьЗначениеЭлемента(НовУзел, "CF_PA", 1);
			Для Каждого СтрПодч1 Из Стр.ДанныеДопСтрок[0].Значение.П0000300010 Цикл 
				Если ЗначениеЗаполнено(СтрПодч1.П000030001022)
					И СтрПодч1.П000030001022 <> 1 Тогда 
					
					УстановитьЗначениеЭлемента(НовУзел, "CF_PA", СтрПодч1.П000030001022);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьЗначениеЭлемента(НовУзел, "NAME_WSO", Данные.П000010000008);
			УстановитьЗначениеЭлемента(НовУзел, "ADDR_WSO", Данные.П000010000010);
			УстановитьЗначениеЭлемента(НовУзел, "REGNUM_WSO", Данные.П000010000009);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CATEGORY", Данные.П000010000001);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CODE", Данные.П000010000003);
			
			Если Данные.Свойство("П10000012") Тогда 
				УстановитьЗначениеЭлемента(НовУзел, "CF_WF", Данные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел, "FROF", Данные.П10000013);
				
				УстановитьЗначениеЭлемента(НовУзел, "IND_ZONE", ?(ЗначениеЗаполнено(Данные.IND_ZONE), "true", "false"));
				УстановитьЗначениеЭлемента(НовУзел, "IND_SPEC", ?(ЗначениеЗаполнено(Данные.IND_SPEC), "true", "false"));
			Иначе
				УстановитьЗначениеЭлемента(НовУзел, "CF_WF", 1);
				УстановитьЗначениеЭлемента(НовУзел, "FROF", "0");
				
				УстановитьЗначениеЭлемента(НовУзел, "IND_ZONE", "false");
				УстановитьЗначениеЭлемента(НовУзел, "IND_SPEC", "false");
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(НовУзел, "IN_GRORO", ?(ЗначениеЗаполнено(Данные.ПР0301), "true", "false"));
			УстановитьЗначениеЭлемента(НовУзел, "NO_EFFECT", ?(ЗначениеЗаполнено(Данные.ПР0303), "true", "false"));
			УстановитьЗначениеЭлемента(НовУзел, "RES_NO_EFFECT", Данные.П10000011);
			
			УстановитьЗначениеЭлемента(НовУзел, "TOTALLCOST_LIM", Данные.П000030002023);
			УстановитьЗначениеЭлемента(НовУзел, "TOTALLCOST_SVLIM", Данные.П000030002024);
			УстановитьЗначениеЭлемента(НовУзел, "S_WASTE", Данные.П000030002025);
			УстановитьЗначениеЭлемента(НовУзел, "WSP_TKO", "0");
			
			УзелСтроки = ПолучитьПодчиненныйЭлемент(НовУзел, "WASTE_FACT");
			Для Каждого СтрПодч1 Из Стр.ДанныеДопСтрок[0].Значение.П0000300010 Цикл
				НовУзелСтроки = НовыйУзелИзПрототипа(УзелСтроки);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "NONE_FKKO", СтрПодч1.П000030001002);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "ID_WASTE", СтрЗаменить(СтрПодч1.П000030001003, " ", ""));
				УстановитьЗначениеЭлемента(НовУзелСтроки, "WTYPE", СтрПодч1.П000030001004);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "EI", "Т");
				УстановитьЗначениеЭлемента(НовУзелСтроки, "TOTALLCOST_LIM", СтрПодч1.П000030001023);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "TOTALLCOST_SVLIM", СтрПодч1.П000030001024);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "S_WASTE", СтрПодч1.П000030001025);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "CF_FB", 1);
				//необязательное
				УстановитьЗначениеЭлемента(НовУзелСтроки, "NPLATA_LIMIT", СтрПодч1.П000030001015);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "WTYPE", СтрПодч1.П000030001004);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "LIMIT", СтрПодч1.П000030001005);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "RAZM", СтрПодч1.П000030001012);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "RAZM_LIMIT", СтрПодч1.П000030001013);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "RAZM_SVLIMIT", СтрПодч1.П000030001014);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "ARRIVAL", СтрПодч1.П000030001006);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "ISPOTX", СтрПодч1.П000030001007);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "SOTX", СтрПодч1.П000030001008);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "ACCUM_WASTE_11", СтрПодч1.П000030001009);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "DRPRED_TKO", СтрПодч1.П000030001011);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "CF_SP", СтрПодч1.П000030001017);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(УзелСтроки);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел3);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Раздел3_1(Узел3_1, ОКАТОФильтр)
	Для Каждого Стр Из ТаблицаСтраницыРаздела3_1 Цикл 
		Данные = Стр.Данные[0].Значение;
		
		Если ЗначениеЗаполнено(Данные.П000040002008)
				И ОКАТОФильтр = Данные.ОКТМОГруппировочный Тогда 
			НовУзел = НовыйУзелИзПрототипа(Узел3_1);
			
			УстановитьЗначениеЭлемента(НовУзел, "ID_EO", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			УстановитьЗначениеЭлемента(НовУзел, "CF_PA", 1);
			Для Каждого СтрПодч1 Из Стр.ДанныеДопСтрок[0].Значение Цикл 
				Если ЗначениеЗаполнено(СтрПодч1.П000040001007)
					И СтрПодч1.П000040001007 <> 1 Тогда 
					
					УстановитьЗначениеЭлемента(НовУзел, "CF_PA", СтрПодч1.П000040001007);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			УстановитьЗначениеЭлемента(НовУзел, "NAME_WSO", Данные.П000010000008);
			УстановитьЗначениеЭлемента(НовУзел, "ADDR_WSO", Данные.П000010000010);
			УстановитьЗначениеЭлемента(НовУзел, "REGNUM_WSO", Данные.П000010000009);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CATEGORY", Данные.П000010000001);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CODE", Данные.П000010000003);
			Если Данные.Свойство("П10000012") Тогда 
				УстановитьЗначениеЭлемента(НовУзел, "CF_WF", Данные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел, "FROF", Данные.П10000013);
			Иначе
				УстановитьЗначениеЭлемента(НовУзел, "CF_WF", 1);
				УстановитьЗначениеЭлемента(НовУзел, "FROF", "0");
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(НовУзел, "NO_EFFECT", ?(ЗначениеЗаполнено(Данные.ПР0303), "true", "false"));
			УстановитьЗначениеЭлемента(НовУзел, "RES_NO_EFFECT", Данные.П000010000010);
			УстановитьЗначениеЭлемента(НовУзел, "S_WASTE", Данные.П000040002008);
			УстановитьЗначениеЭлемента(НовУзел, "WSP_TKO", "0");
			
			УзелСтроки = ПолучитьПодчиненныйЭлемент(НовУзел, "WASTE_FACT");
			Для Каждого СтрПодч1 Из Стр.ДанныеДопСтрок[0].Значение Цикл
				НовУзелСтроки = НовыйУзелИзПрототипа(УзелСтроки);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "NONE_FKKO", СтрПодч1.П000040001002);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "ID_WASTE", СтрЗаменить(СтрПодч1.П000040001003, " ", ""));
				УстановитьЗначениеЭлемента(НовУзелСтроки, "EI", "Т");
				УстановитьЗначениеЭлемента(НовУзелСтроки, "WTYPE", СтрПодч1.П000040001004);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "S_WASTE", СтрПодч1.П000040001008);
				УстановитьЗначениеЭлемента(НовУзелСтроки, "CF_FB", 1);
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(УзелСтроки);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел3_1);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Раздел2(Узел2, ОКАТОФильтр)
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл 
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П0000018) 
				И ОКАТОФильтр = Данные.ОКТМОГруппировочный Тогда 
			НовУзел = НовыйУзелИзПрототипа(Узел2);
			
			УстановитьЗначениеЭлемента(НовУзел, "ID_WO", СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", ""));
			УстановитьЗначениеЭлемента(НовУзел, "S_WATER", Данные.П0000018);
			Если ЗначениеЗаполнено(Данные.П10000014) Тогда 
				УстановитьЗначениеЭлемента(НовУзел, "CF_ES_WT", Данные.П10000014);
			Иначе
				УстановитьЗначениеЭлемента(НовУзел, "CF_ES_WT", 1);
			КонецЕсли;
			Если ЗначениеЗаполнено(Данные.П10000013) Тогда 
				УстановитьЗначениеЭлемента(НовУзел, "CF_PI", Данные.П10000013);
			Иначе
				УстановитьЗначениеЭлемента(НовУзел, "CF_PI", 0.25);
			КонецЕсли;
			
			УстановитьЗначениеЭлемента(НовУзел, "CF_PA", 1);
			Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
				Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл 
					Если ЗначениеЗаполнено(СтрПодч2.Значение.Данные.П1100014)
						И СтрПодч2.Значение.Данные.П1100014 <> 1 Тогда 
						
						УстановитьЗначениеЭлемента(НовУзел, "CF_PA", СтрПодч2.Значение.Данные.П1100006);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			УзелСтроки = ПолучитьПодчиненныйЭлемент(НовУзел, "WATER_FACT");
			Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
				Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл
					НовУзел = НовыйУзелИзПрототипа(УзелСтроки);
					ДанныеСтроки = СтрПодч2.Значение.Данные;
					УстановитьЗначениеЭлемента(НовУзел, "KZW_REFNAME", ДанныеСтроки.П1100002);
					УстановитьЗначениеЭлемента(НовУзел, "CF_FB", 1);
					УстановитьЗначениеЭлемента(НовУзел, "S_WATER", ДанныеСтроки.П1100012);
				КонецЦикла;
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(УзелСтроки);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел2);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Раздел1_2(Узел1_2, ОКАТОФильтр)
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_2 Цикл 
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П0000012) 
				И ОКАТОФильтр = Данные.ОКТМОГруппировочный Тогда 
			НовУзел = НовыйУзелИзПрототипа(Узел1_2);
			
			УстановитьЗначениеЭлемента(НовУзел, "APG_EMISS", 2);
			УстановитьЗначениеЭлемента(НовУзел, "S_EMISS", Данные.П0000012);
			УстановитьЗначениеЭлемента(НовУзел, "EO_OBJ_NAME", Данные.П10000011);
			УстановитьЗначениеЭлемента(НовУзел, "EO_LOC_ADDR", Данные.П000010000004);
			УстановитьЗначениеЭлемента(НовУзел, "ADDR_EO", Данные.П000010000004);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CODE", Данные.П10000012);
			УстановитьЗначениеЭлемента(НовУзел, "OBJ_CATEGORY", Данные.П10000010);
			УстановитьЗначениеЭлемента(НовУзел, "CF_UA", 1);
			УстановитьЗначениеЭлемента(НовУзел, "CF_PA", 1);
			Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
				Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл 
					Если ЗначениеЗаполнено(СтрПодч2.Значение.Данные.П1100006)
						И СтрПодч2.Значение.Данные.П1100006 <> 1 Тогда 
						
						УстановитьЗначениеЭлемента(НовУзел, "CF_PA", СтрПодч2.Значение.Данные.П1100006);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			УзелСтроки = ПолучитьПодчиненныйЭлемент(НовУзел, "STATOBJ_EMISS_FACT");
			Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
				Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл
					НовУзел = НовыйУзелИзПрототипа(УзелСтроки);
					ДанныеСтроки = СтрПодч2.Значение.Данные;
					
					КодВВ = мВВРаздел1.НайтиСтроки(Новый Структура("Название", ДанныеСтроки.П1100002));
					Если КодВВ.Количество() > 0 Тогда 
						УстановитьЗначениеЭлемента(НовУзел, "KDZV", КодВВ[0].Код);
						УстановитьЗначениеЭлемента(НовУзел, "KDZV_REFNAME", ДанныеСтроки.П1100002);
					Иначе
						УстановитьЗначениеЭлемента(НовУзел, "KDZV_REFNAME", ДанныеСтроки.П1100002);
					КонецЕсли;
					
					УстановитьЗначениеЭлемента(НовУзел, "EI", "Т");
					УстановитьЗначениеЭлемента(НовУзел, "CF_FB", 1);
					УстановитьЗначениеЭлемента(НовУзел, "S_EMISS", ДанныеСтроки.П1100012);
				КонецЦикла;
			КонецЦикла;
			РегламентированнаяОтчетность.УдалитьУзел(УзелСтроки);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(Узел1_2);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Раздел1_0(Узел1_0, ОКАТОФильтр)
	Если мВВРаздел1.Количество() = 0 Тогда 
		ЗагрузитьПоказателиИзМакета("ВВРаздел1");
	КонецЕсли;
	
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц[ТаблицаСтраницыРаздел1_0] = "0";
	СоответствиеТаблиц[ТаблицаСтраницыРаздел1_1] = "1";
	
	Для Каждого КЗ Из СоответствиеТаблиц Цикл 
		Для Каждого Стр Из КЗ.Ключ Цикл 
			Данные = Стр.ФиксированныеДанные;
			Если ЗначениеЗаполнено(Данные.П0000017) 
				И ОКАТОФильтр = Данные.ОКТМОГруппировочный Тогда 
				НовУзел = НовыйУзелИзПрототипа(Узел1_0);
				
				УстановитьЗначениеЭлемента(НовУзел, "APG_EMISS", КЗ.Значение);
				УстановитьЗначениеЭлемента(НовУзел, "SUMRSG1", Данные.П0000014);
				УстановитьЗначениеЭлемента(НовУзел, "SUMRSG2", Данные.П0000015);
				УстановитьЗначениеЭлемента(НовУзел, "SUMLIMG", Данные.П0000016);
				УстановитьЗначениеЭлемента(НовУзел, "S_EMISS", Данные.П0000017);
				УстановитьЗначениеЭлемента(НовУзел, "EO_OBJ_NAME", Данные.П10000011);
				УстановитьЗначениеЭлемента(НовУзел, "EO_LOC_ADDR", Данные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел, "ADDR_EO", Данные.П000010000004);
				УстановитьЗначениеЭлемента(НовУзел, "OBJ_CODE", Данные.П10000012);
				УстановитьЗначениеЭлемента(НовУзел, "OBJ_CATEGORY", Данные.П10000010);
				УстановитьЗначениеЭлемента(НовУзел, "CF_UA", 1);
				УстановитьЗначениеЭлемента(НовУзел, "CF_PA", 1);
				Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
					Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл 
						Если ЗначениеЗаполнено(СтрПодч2.Значение.Данные.П1100013)
							И СтрПодч2.Значение.Данные.П1100013 <> 1 Тогда 
							
							УстановитьЗначениеЭлемента(НовУзел, "CF_PA", СтрПодч2.Значение.Данные.П1100013);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				УзелСтроки = ПолучитьПодчиненныйЭлемент(НовУзел, "STATOBJ_EMISS_FACT");
				Для Каждого СтрПодч1 Из Стр.Данные.П10000 Цикл 
					Для Каждого СтрПодч2 Из СтрПодч1.Значение.ДопСтроки.П11000 Цикл
						НовУзел = НовыйУзелИзПрототипа(УзелСтроки);
						ДанныеСтроки = СтрПодч2.Значение.Данные;
						
						КодВВ = мВВРаздел1.НайтиСтроки(Новый Структура("Название", ДанныеСтроки.П1100002));
						Если КодВВ.Количество() > 0 Тогда 
							УстановитьЗначениеЭлемента(НовУзел, "KDZV", КодВВ[0].Код);
							УстановитьЗначениеЭлемента(НовУзел, "KDZV_REFNAME", ДанныеСтроки.П1100002);
						Иначе
							УстановитьЗначениеЭлемента(НовУзел, "KDZV_REFNAME", ДанныеСтроки.П1100002);
						КонецЕсли;
						
						УстановитьЗначениеЭлемента(НовУзел, "EI", "Т");
						УстановитьЗначениеЭлемента(НовУзел, "PDV", ДанныеСтроки.П1100003);
						УстановитьЗначениеЭлемента(НовУзел, "VSV", ДанныеСтроки.П1100004);
						УстановитьЗначениеЭлемента(НовУзел, "MOG", ДанныеСтроки.П1100005);
						УстановитьЗначениеЭлемента(НовУзел, "RSG1", ДанныеСтроки.П1100006);
						УстановитьЗначениеЭлемента(НовУзел, "RSG2", ДанныеСтроки.П1100007);
						УстановитьЗначениеЭлемента(НовУзел, "LIMG", ДанныеСтроки.П1100008);
						УстановитьЗначениеЭлемента(НовУзел, "NPLATA_PDV", ДанныеСтроки.П1100009);
						УстановитьЗначениеЭлемента(НовУзел, "NPLATA_VSV", ДанныеСтроки.П1100009 * ДанныеСтроки.П1100011);
						УстановитьЗначениеЭлемента(НовУзел, "CF_SR", ДанныеСтроки.П1100010);
						УстановитьЗначениеЭлемента(НовУзел, "CF_FB", 1);
						УстановитьЗначениеЭлемента(НовУзел, "SUMRSG1", ДанныеСтроки.П1100014);
						УстановитьЗначениеЭлемента(НовУзел, "SUMRSG2", ДанныеСтроки.П1100015);
						УстановитьЗначениеЭлемента(НовУзел, "SUMLIMG", ДанныеСтроки.П1100016);
						УстановитьЗначениеЭлемента(НовУзел, "S_EMISS", ДанныеСтроки.П1100017);
					КонецЦикла;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(УзелСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя) 
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеЭлемента(УзелРодитель, ИмяЭлемента, ЗначениеЭлемента)
	
	ПодчиненныйЭлемент = ПолучитьПодчиненныйЭлемент(УзелРодитель, ИмяЭлемента);
	ВывестиПоказательВXML(ПодчиненныйЭлемент, ЗначениеЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_РазрешениеНаВыбросВАтмосферу(УзелРазрешениеНаВыброс)
	НомСтр = 0;
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_0 Цикл 
		НомСтр = НомСтр + 1;
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П000010000001) Или ЗначениеЗаполнено(Данные.П000010000002) Или ЗначениеЗаполнено(Данные.П000010000003) Тогда 
			НовУзел = НовыйУзелИзПрототипа(УзелРазрешениеНаВыброс);
			УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			УстановитьЗначениеЭлемента(НовУзел, "ID_ED", Лев("10" + Формат(НомСтр, "ЧЦ=3; ЧВН=") + УИД, 32));
			УстановитьЗначениеЭлемента(НовУзел, "NUM_DOC", Данные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел, "DATE_DOC", Формат(Данные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел, "DATE_END", Формат(Данные.П000010000003, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_1 Цикл 
		НомСтр = НомСтр + 1;
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П000010000001) Или ЗначениеЗаполнено(Данные.П000010000002) Или ЗначениеЗаполнено(Данные.П000010000003) Тогда 
			НовУзел = НовыйУзелИзПрототипа(УзелРазрешениеНаВыброс);
			УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			УстановитьЗначениеЭлемента(НовУзел, "ID_ED", Лев("11" + Формат(НомСтр, "ЧЦ=3; ЧВН=") + УИД, 32));
			УстановитьЗначениеЭлемента(НовУзел, "NUM_DOC", Данные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел, "DATE_DOC", Формат(Данные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел, "DATE_END", Формат(Данные.П000010000003, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
	КонецЦикла;
	
	НомСтр = 0;
	Для Каждого Стр Из ТаблицаСтраницыРаздел1_2 Цикл 
		НомСтр = НомСтр + 1;
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П000010000001) Или ЗначениеЗаполнено(Данные.П000010000002) Или ЗначениеЗаполнено(Данные.П000010000003) Тогда 
			НовУзел = НовыйУзелИзПрототипа(УзелРазрешениеНаВыброс);
			УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			УстановитьЗначениеЭлемента(НовУзел, "ID_ED", Лев("12" + Формат(НомСтр, "ЧЦ=3; ЧВН=") + УИД, 32));
			УстановитьЗначениеЭлемента(НовУзел, "NUM_DOC", Данные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел, "DATE_DOC", Формат(Данные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел, "DATE_END", Формат(Данные.П000010000003, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(УзелРазрешениеНаВыброс);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_РазрешениеНаСбросыВВоду(УзелРазрешениеНаСброс)
	НомСтр = 0;
	Для Каждого Стр Из ТаблицаСтраницыРаздел2 Цикл 
		НомСтр = НомСтр + 1;
		Данные = Стр.ФиксированныеДанные;
		Если ЗначениеЗаполнено(Данные.П000010000001) Или ЗначениеЗаполнено(Данные.П000010000002) Или ЗначениеЗаполнено(Данные.П000010000003) Тогда 
			НовУзел = НовыйУзелИзПрототипа(УзелРазрешениеНаСброс);
			УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			УстановитьЗначениеЭлемента(НовУзел, "ID_WD", Лев("30" + Формат(НомСтр, "ЧЦ=3; ЧВН=") + УИД, 32));
			УстановитьЗначениеЭлемента(НовУзел, "NUM_DOC", Данные.П000010000002);
			УстановитьЗначениеЭлемента(НовУзел, "DATE_DOC", Формат(Данные.П000010000001, "ДФ=yyyy-MM-dd"));
			УстановитьЗначениеЭлемента(НовУзел, "DOC_STOP_DATE", Формат(Данные.П000010000003, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(УзелРазрешениеНаСброс);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительнымиДанными_Лимиты(УзелЛимиты)
	НомСтр = 0;
	Для Каждого Стр Из ТаблицаСтраницыРаздела3 Цикл 
		НомСтр = НомСтр + 1;
		Данные = Стр.Данные[0].Значение;
		Если ЗначениеЗаполнено(Данные.П000010000015) Или ЗначениеЗаполнено(Данные.П000010000016) Тогда 
			НовУзел = НовыйУзелИзПрототипа(УзелЛимиты);
			УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
			УстановитьЗначениеЭлемента(НовУзел, "ID_WSD", Лев("30" + Формат(НомСтр, "ЧЦ=3; ЧВН=") + УИД, 32));
			УстановитьЗначениеЭлемента(НовУзел, "NUM_DOC", Данные.П000010000016);
			УстановитьЗначениеЭлемента(НовУзел, "DATE_DOC", Формат(Данные.П000010000015, "ДФ=yyyy-MM-dd"));
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетность.УдалитьУзел(УзелЛимиты);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ДополнитьДанныеОтчета();
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);       // заполняем дерево данными
	ЗаполнитьДополнительнымиДанными(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Функция ИмеютсяАналогичныеСоседниеУзлы(Стр)
	
	Возврат (Стр.Родитель.Строки.НайтиСтроки(Новый Структура("Ключ, Раздел", Стр.Ключ, Стр.Раздел), Ложь).Количество() > 1);
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Тип, "A") <> 0 ИЛИ СтрНайти(Узел.Тип, "А") <> 0) // Необязательные атрибуты пропускаем (они удаляются только вместе с узлом)
			И (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) Тогда // учтем оба варианта: кириллицу и латиницу
			Возврат;
		КонецЕсли;
		
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И РегламентированнаяОтчетность.УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
			И РегламентированнаяОтчетность.УзелПуст(Узел)
			И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, ИмеютсяАналогичныеСоседниеУзлы(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		
		Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			Иначе
				Стр.Значение = "";
			КонецЕсли;
		ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
			РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
		Иначе
			Стр.Значение = Стр.ЗначениеПоУмолчанию;
			Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
				ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
				ЗначениеПоказателя = Неопределено;
				Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
					ФорматПредставленияНуля = Неопределено;
					Если ПараметрыВыгрузки.Свойство("ЧН" + ПолныйКодПоказателя, ФорматПредставленияНуля) Тогда
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя, ФорматПредставленияНуля);
					Иначе
						РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, ЗначениеПоказателя);
					КонецЕсли;
				Иначе
					РегламентированнаяОтчетность.ВывестиПоказательСтатистикиВXML(Стр, "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ЛистыМногостраничногоРаздела = Неопределено;
				Если Не ПустаяСтрока(Стр.Раздел) И мДанныеОтчета.Свойство(Стр.Раздел, ЛистыМногостраничногоРаздела) Тогда
					Для Каждого Лист Из ЛистыМногостраничногоРаздела Цикл
						ДанныеЛиста = Лист.Данные[0].Значение;
						ДанныеЛиста.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти","");
						Если ДанныеЛиста.Свойство("ОКАТО") И ТипЗнч(ДанныеЛиста.ОКАТО) = Тип("Строка") Тогда 
							ДанныеЛиста.ОКАТО = СокрЛП(ДанныеЛиста.ОКАТО);
						КонецЕсли;
						
						Если Стр.Многострочность Тогда
							НомСтр = 1;
							ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
							КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
							Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ДанныеЛиста, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
								УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
								ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелСоответствующийСтроке, НомСтр);
								НомСтр = НомСтр + 1;
							КонецЦикла;
						Иначе
							УзелМногостраничногоРаздела = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
							ЗаполнитьДаннымиУзел(ДанныеЛиста, УзелМногостраничногоРаздела);
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр);
				КонецЕсли;
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = РегламентированнаяОтчетность.ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = РегламентированнаяОтчетность.СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныйФайл(ДанныеЛиста) Экспорт 
	UID_файла = Неопределено;
	ДанныеЛиста.Свойство("UID_файла", UID_файла);
	Если ЗначениеЗаполнено(UID_файла) Тогда
		ПрисоединенныеФайлыСоответствие = ПолучитьИзВременногоХранилища(ДанныеФайловРазделов);
		Если ТипЗнч(ПрисоединенныеФайлыСоответствие) <> Тип("Соответствие") 
			Или ПрисоединенныеФайлыСоответствие.Получить(UID_файла) = Неопределено Тогда 
			
			ДанныеЛиста.Вставить("ATTACH", "");
		Иначе
						
			КаталогВремФайлов = "";
			ИмяФайла = ПрисоединенныеФайлыСоответствие[UID_файла].Имя;
			ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(
																			КаталогВремФайлов, ИмяФайла, Истина);
	
	        ПрисоединенныеФайлыСоответствие[UID_файла].ДД.Записать(ИмяПрисоединенногоФайла);
			
			НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
			НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Копирование);
			НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
			НовыйАрхив.Записать();
			
			МассивДляУдаления = Новый Массив;
			МассивДляУдаления.Добавить(ИмяПрисоединенногоФайла);
			
		
			ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
			Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
			
			МассивДляУдаления.Добавить(НовыйАрхивИмя);
			Для Каждого ФайлДляУдаления Из МассивДляУдаления Цикл 
				УдалитьФайлы(ФайлДляУдаления);
			КонецЦикла;
			УдалитьФайлы(КаталогВремФайлов);
				
			ДанныеЛиста.Вставить("ATTACH", Base64СтрокаДанныеАрхива);
			
		КонецЕсли;
	Иначе 
		ДанныеЛиста.Вставить("ATTACH", "");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML(); // создаем новый поток для записи
	РегламентированнаяОтчетность.ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйПотокXML() Экспорт
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.Отступ = Истина;
	ПотокXML.УстановитьСтроку("utf-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	Возврат ПотокXML;
	
КонецФункции

&НаСервере
Функция СформироватьИмяФайла(ПараметрыВыгрузки)
	
	Перем ПолученноеЗначение;
	
	ИмяФайлаXML = ?(ПустаяСтрока(ПараметрыВыгрузки.ДиапазонОКАТО), "", ПараметрыВыгрузки.ДиапазонОКАТО + "_") + "рсч_"
				+ Лев(ПараметрыВыгрузки.НаименованиеОрг, 25) + "_"
				+ ПараметрыВыгрузки.ОтчетныйГод + "_год_"
				+ ?(ПараметрыВыгрузки.ВидРасчета = "1", "", "кор_")
				+ СтрЗаменить(СтрЗаменить(СтрЗаменить(ПараметрыВыгрузки.ДатаФормирования, " ", "_"), ".", "-"), ":", "-")
				+ ".xml";
	
	Возврат ИмяФайлаXML;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ, РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ЭлементСтруктуры.Ключ, "СохранятьМногострКакТЗ");
							Если Не СохранятьМногострКакТЗ Тогда 
								НЗ = НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(Новый Структура, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							КонецЕсли;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								Если СохранятьМногострКакТЗ Тогда 
									ТаблЗнач = ЭлСтруктуры.Значение;
									ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
									ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
									НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								Иначе
									СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
									ЗначениеВДанныеФормы(ЭлСтруктуры.Значение, СтрокаТаблЗначДанныеДопСтрок);
									НЗ.Значение.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЦикла;
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить("ПолеТабличногоДокумента" + Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
	мДанныеОтчета.Вставить("ОКАТОФильтр", "");
	
КонецФункции

&НаСервере
Функция СформироватьПредставлениеПрисоединенныеФайлы()
	ПрисоединенныеФайлыМассив = ПолучитьИзВременногоХранилища(ДанныеФайлов);
	Если ТипЗнч(ПрисоединенныеФайлыМассив) <> Тип("Массив") 
		Или ПрисоединенныеФайлыМассив.Количество() = 0 Тогда 
		Возврат "";
	КонецЕсли;
	
	
	КаталогВремФайлов = "";
	
	НовыйАрхивИмя = ПолучитьИмяВременногоФайла();
	НовыйАрхив = Новый ЗаписьZIPФайла(НовыйАрхивИмя,,,МетодСжатияZIP.Копирование);
	
	МассивДляУдаления = Новый Массив;
	Для Каждого ПрисоединенныйФайл Из ПрисоединенныеФайлыМассив Цикл
		
		ИмяФайла = ПрисоединенныйФайл.Имя;
		ИмяПрисоединенногоФайла = РегламентированнаяОтчетностьКлиентСервер.ПолучитьПолноеИмяВременногоФайла(
																		КаталогВремФайлов, ИмяФайла, Истина);
		ПрисоединенныйФайл.ДД.Записать(ИмяПрисоединенногоФайла);
		
		НовыйАрхив.Добавить(ИмяПрисоединенногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
		
		МассивДляУдаления.Добавить(ИмяПрисоединенногоФайла);
		
	КонецЦикла;
	НовыйАрхив.Записать();
	
	ДанныеАрхива = Новый ДвоичныеДанные(НовыйАрхивИмя);
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64Строка(ДанныеАрхива), Символы.ПС, "");
	Base64СтрокаДанныеАрхива = СтрЗаменить(Base64СтрокаДанныеАрхива, Символы.ВК, "");
	
	МассивДляУдаления.Добавить(НовыйАрхивИмя);
	Для Каждого ФайлДляУдаления Из МассивДляУдаления Цикл 
		УдалитьФайлы(ФайлДляУдаления);
	КонецЦикла;
	УдалитьФайлы(КаталогВремФайлов);
	
	Возврат Base64СтрокаДанныеАрхива;
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Перем ПолученноеЗначение;
	
	ТабДокументТитульный = мДанныеОтчета.ПолеТабличногоДокументаТитульный;
	
	ЗагрузитьПоказателиИзМакета("ОрганыРПН");
	
	СтрокаСведений = "ОКВЭД, ОКАТО, ОКТМО, ОКПО, ОГРН, ТипНП, ДатаРегистрации, ИННЮЛ, КППЮЛ, НаимЮЛПол, АдрЮР, АдрФакт, АдрПочт, ";
	СтрокаСведений = СтрокаСведений + "ОргИндекс, ОргСубъект, ОргРайон, ОргГород, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ";
	СтрокаСведений = СтрокаСведений + "БанкСчетНомер, БанкСчетНаимБанка, БанкСчетКоррСчетБанка, БанкСчетБИКБанка, ";
	СтрокаСведений = СтрокаСведений + "ТелОрганизации, ФаксОрганизации, ЭлектроннаяПочта, ФИОРук, ТелРук, ФИОБух, ТелБух";
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, СтрокаСведений);
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоКорректирующийРасчет = НЕ ПустаяСтрока(ТабДокументТитульный.Корректировка);
	
	Если ЭтоКорректирующийРасчет Тогда
		ПараметрыВыгрузки.Вставить("ВидРасчета",       "2");
		ПараметрыВыгрузки.Вставить("НомКорректировки", СокрЛП(ТабДокументТитульный.НомКоррект));
	Иначе
		ПараметрыВыгрузки.Вставить("ВидРасчета",       "1");
		ПараметрыВыгрузки.Вставить("НомКорректировки", "");
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПредставляетсяВ", ТабДокументТитульный.ПредставляетсяВ);
	
	РезультатПоиска = мОрганыРПН.НайтиСтроки(Новый Структура("Название", Формат(ТабДокументТитульный.ПредставляетсяВ)));
	Если РезультатПоиска.Количество() = 0 Тогда
		ПараметрыВыгрузки.Вставить("КодПредставляетсяВ", "");
		ПараметрыВыгрузки.Вставить("ДиапазонОКАТО", "");
	Иначе
		ПараметрыВыгрузки.Вставить("КодПредставляетсяВ", Формат(РезультатПоиска[0].Код));
		ПараметрыВыгрузки.Вставить("ДиапазонОКАТО", Формат(РезультатПоиска[0].ДиапазонОКАТО));
	КонецЕсли;
	ПараметрыВыгрузки.Вставить("ДатаФормирования", Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-ddTHH:mm:ssZ"));
	ПараметрыВыгрузки.Вставить("ОтчетныйГод",      СокрЛП(ТабДокументТитульный.ГодОтчета));
	ПараметрыВыгрузки.Вставить("ИдентификаторДок", СтрЗаменить(СтруктураРеквизитовФормы.мСохраненныйДок.УникальныйИдентификатор(), "-", "0"));
	ПараметрыВыгрузки.Вставить("ИдентификаторОрг", СтрЗаменить(СтруктураРеквизитовФормы.Организация.УникальныйИдентификатор(), "-", "0"));
	НаименованиеОрг = "";
	Для Ном = 1 По СтрДлина(СтруктураРеквизитовФормы.Организация.Наименование) Цикл
		Сим = Сред(СтруктураРеквизитовФормы.Организация.Наименование, Ном, 1);
		Если СтрНайти("[/?\:*""><|]';", Сим) = 0 Тогда
			НаименованиеОрг = НаименованиеОрг + Сим;
		КонецЕсли;
	КонецЦикла;
	ПараметрыВыгрузки.Вставить("НаименованиеОрг", СокрЛП(НаименованиеОрг));
	ПараметрыВыгрузки.Вставить("ПолнНаименованиеОрг", СокрЛП(СведенияОбОрганизации.НаимЮЛПол));
	
	ПараметрыВыгрузки.Вставить("ПризнакИЛ", ?(СведенияОбОрганизации.ТипНП = 5, "true", "false"));
	ПараметрыВыгрузки.Вставить("ПризнакОП", ?(СведенияОбОрганизации.ТипНП = 2, "true", "false"));
	ПараметрыВыгрузки.Вставить("КодВП", "");
	ПараметрыВыгрузки.Вставить("ДатаРегистрации", Формат(СведенияОбОрганизации.ДатаРегистрации, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ДатаПодписиДок",  Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи, "ДФ=yyyy-MM-dd"));
	ПараметрыВыгрузки.Вставить("ОГРН",         СокрЛП(СведенияОбОрганизации.ОГРН));
	ПараметрыВыгрузки.Вставить("ОргДиректор",  СокрЛП(?(СведенияОбОрганизации.ТипНП <> 2, ТабДокументТитульный.ОргДиректор, ТабДокументТитульный.ОргДиректорОбособ)));
	ПараметрыВыгрузки.Вставить("ОргБухгалтер", СокрЛП(ТабДокументТитульный.ОргБухгалтер));
	ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(СведенияОбОрганизации.ОКТМО));
	
	ПараметрыВыгрузки.Вставить("ИННЮЛ", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
	ПараметрыВыгрузки.Вставить("КППЮЛ", СокрЛП(СведенияОбОрганизации.КППЮЛ));
	ПараметрыВыгрузки.Вставить("ОКПО",  СокрЛП(СведенияОбОрганизации.ОКПО));
	
	ПараметрыВыгрузки.Вставить("ФИОРук", СокрЛП(СведенияОбОрганизации.ФИОРук));
	ПараметрыВыгрузки.Вставить("ТелРук", СокрЛП(СведенияОбОрганизации.ТелРук));
	ПараметрыВыгрузки.Вставить("ФИОБух", СокрЛП(СведенияОбОрганизации.ФИОБух));
	ПараметрыВыгрузки.Вставить("ТелБух", СокрЛП(СведенияОбОрганизации.ТелБух));
	
	ПараметрыВыгрузки.Вставить("АдрЮРИндекс", СокрЛП(СведенияОбОрганизации.ОргИндекс));
	
	АдрЮРНасПункт = СокрЛП(СведенияОбОрганизации.ОргСубъект);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргРайон), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргРайон);
	АдрЮРНасПункт = АдрЮРНасПункт + ?(ПустаяСтрока(АдрЮРНасПункт) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргГород), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргГород);
	ПараметрыВыгрузки.Вставить("АдрЮРНасПункт", АдрЮРНасПункт);
	
	АдрЮРУлицаДом = СокрЛП(СведенияОбОрганизации.ОргУлица);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргДом), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргДом);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКорпус), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКорпус);
	АдрЮРУлицаДом = АдрЮРУлицаДом + ?(ПустаяСтрока(АдрЮРУлицаДом) ИЛИ ПустаяСтрока(СведенияОбОрганизации.ОргКвартира), "", ", ") + СокрЛП(СведенияОбОрганизации.ОргКвартира);
	ПараметрыВыгрузки.Вставить("АдрЮРУлицаДом", АдрЮРУлицаДом);
	
	ПараметрыВыгрузки.Вставить("АдрЮР2",  ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрЮР, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрЮР),   ""));
	ПараметрыВыгрузки.Вставить("АдрФакт", ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрФакт, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрФакт), ""));
	ПараметрыВыгрузки.Вставить("АдрПочт", ?(ЗначениеЗаполнено(СтрЗаменить(СведенияОбОрганизации.АдрПочт, ",","")),
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(СведенияОбОрганизации.АдрПочт), ""));
		
	ПараметрыВыгрузки.Вставить("ТелОрганизации2",       СокрЛП(СведенияОбОрганизации.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("ФаксОрганизации",       СокрЛП(СведенияОбОрганизации.ФаксОрганизации));
	ПараметрыВыгрузки.Вставить("ЭлектроннаяПочта",      СокрЛП(СведенияОбОрганизации.ЭлектроннаяПочта));
	ПараметрыВыгрузки.Вставить("БанкСчетНомер",         СокрЛП(СведенияОбОрганизации.БанкСчетНомер));
	ПараметрыВыгрузки.Вставить("БанкСчетНаимБанка",     СокрЛП(СведенияОбОрганизации.БанкСчетНаимБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетКоррСчетБанка", СокрЛП(СведенияОбОрганизации.БанкСчетКоррСчетБанка));
	ПараметрыВыгрузки.Вставить("БанкСчетБИКБанка",      СокрЛП(СведенияОбОрганизации.БанкСчетБИКБанка));
		
	ПараметрыВыгрузки.Вставить("ОКВЭД", СокрЛП(СведенияОбОрганизации.ОКВЭД));
	ПараметрыВыгрузки.Вставить("ИмяФайла", СформироватьИмяФайла(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "ID_ORG");
	ПараметрыВыгрузки.Вставить("ATTACH", СформироватьПредставлениеПрисоединенныеФайлы());
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьПакет(Команда)
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохранения", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(, ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохранения(Результат, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекстаЭДО", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЭДО(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ДополнительныеПараметры = Новый Структура("КонтекстЭДОКлиент", КонтекстЭДОКлиент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеВыгрузкиПакета", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстЭДОКлиент.ВыгрузитьПакетДляОтправкиВРПН(ЭтаФорма, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеВыгрузкиПакета(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОТПРАВКА ОТЧЕТА В РПН

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "РПН");
	
КонецПроцедуры

//
////////////////////////////////////////////////////////////////////////////////

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "РПН");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.РПН"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "РПН");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ТекущаяСтраница = "")

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	
	Если ЗначениеЗаполнено(ТекущаяСтраница) 
		И Форма.мСтруктураМногоуровневыхРазделов.Свойство(ТекущаяСтраница)
		И СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда 
		
		Возврат ТекущаяСтраница;
	КонецЕсли;
	
	Если ИмяТекущейОбласти = "ДобавитьСтроку3" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы3;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку5" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы5;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку6" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы6;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку7" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы7;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку8" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы8;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку9" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы9;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяСтраницы) Экспорт
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел3" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы3);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы5);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы3, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел3 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы3].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел3);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы3, ТаблицаДопСтрокРаздел3);
		
		ПромежуточнаяТаблица = Неопределено;
		мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы5, ПромежуточнаяТаблица);
		ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
		ТаблицаДопСтрокРаздел5 = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы.мИдГруппы5].Добавить().Таблица;
		КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел5);
		СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, ТаблицаДопСтрокРаздел5);
	ИначеЕсли ИмяСтраницы = "Расчет" Тогда
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы6);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы7);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы8);
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, СтруктураРеквизитовФормы.мИдГруппы9);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		Для Инд = 6 По 9 Цикл 
			ПромежуточнаяТаблица = Неопределено;
			мСтруктураМногострочныхРазделов.Свойство(СтруктураРеквизитовФормы["мИдГруппы" + Инд], ПромежуточнаяТаблица);
			ПромежуточнаяТаблица = ЭтаФорма[ПромежуточнаяТаблица];
			ТаблицаДопСтрокРаздел = ЭтаФорма["Хранилище" + СтруктураРеквизитовФормы["мИдГруппы" + Инд]].Добавить().Таблица;
			КопироватьДанныеФормы(ПромежуточнаяТаблица, ТаблицаДопСтрокРаздел);
			СтруктураДанныхДопСтрокРаздела.Вставить(СтруктураРеквизитовФормы["мИдГруппы" + Инд], ТаблицаДопСтрокРаздел);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя1 = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		ТестовоеИмя2 = ИмяГруппы + "15_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			(ТабличныйДокумент.Области.Найти(ТестовоеИмя1) <> Неопределено Или ТабличныйДокумент.Области.Найти(ТестовоеИмя2) <> Неопределено) Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции