
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле организации обязательно для заполнения!");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.Проживающий.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Поле получателя справки обязательно для заполнения!");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОтчета.НачалоПериода > ПараметрыОтчета.КонецПериода Тогда 
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Начало периода не может быть позже окончания периода.");
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.КВП_СправкаНаСубсидию.ПолучитьМакет("Макет");
	
	ТабличныйДокумент.Очистить();
	
	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаЗаголовок.Параметры.НомерСправки = ПараметрыОтчета.Номер;
	ОбластьМакетаЗаголовок.Параметры.ФИО          = ПараметрыОтчета.Проживающий.Наименование;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Проживающий,
	|	ЕстьNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, Ложь) КАК Проживает,
	|	ЕстьNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, Ложь) КАК Зарегистрирован
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&Дата, Жилец = &Проживающий) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, Жилец = &Проживающий) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(ПараметрыОтчета.Дата));
	Запрос.УстановитьПараметр("Проживающий", ПараметрыОтчета.Проживающий);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ОбластьМакетаЗаголовок.Параметры.СостояниеПоАдресу = "по адресу:";
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Проживает Тогда
			ОбластьМакетаЗаголовок.Параметры.СостояниеПоАдресу = "проживающему(ей) по адресу:";
		ИначеЕсли ВыборкаДетальныеЗаписи.Зарегистрирован Тогда
			ОбластьМакетаЗаголовок.Параметры.СостояниеПоАдресу = "зарегистрированному(ой) по адресу:";
		КонецЕсли;
		
	КонецЦикла;
	
	ОбластьМакетаЗаголовок.Параметры.Адрес       = ПолучитьАдресПомещения(ПараметрыОтчета.Проживающий.Владелец.Адрес.Владелец.Наименование, ПараметрыОтчета.Проживающий.Владелец.Адрес);
	ОбластьМакетаЗаголовок.Параметры.Организация = ПараметрыОтчета.Организация;
	ОбластьМакетаЗаголовок.Параметры.Комнат      = ПараметрыОтчета.Проживающий.Владелец.Адрес.КоличествоКомнат;
	
	ТЗПлощадиПомещения = РегистрыСведений.КВП_ПлощадьПомещения.СрезПоследних(ПараметрыОтчета.Дата,
																			 Новый Структура("Объект,ВидПлощади",
																			 				 ПараметрыОтчета.Проживающий.Владелец.Адрес,
																							 Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь));
	Если ТЗПлощадиПомещения.Количество() > 0 Тогда
		ОбщаяПлощадь = ТЗПлощадиПомещения[0].Площадь;
	Иначе
		ОбщаяПлощадь = 0;
	КонецЕсли;
	ОбластьМакетаЗаголовок.Параметры.Площадь = ОбщаяПлощадь;
	ОбластьМакетаЗаголовок.Параметры.Чел     = ПолучитьКоличествоЗарегистрированных(ПараметрыОтчета.Проживающий.Владелец, ПараметрыОтчета.Дата);
	
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
	
	ОбластьМакетаСтрока        = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаСтрокаПериода = Макет.ПолучитьОбласть("СтрокаМесяцНачисления");
	
	ДатаНачала    = НачалоДня(ПараметрыОтчета.НачалоПериода);
	ДатаОкончания = КонецДня(ПараметрыОтчета.КонецПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА 0
	|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПени,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК ИтогПоУслуге
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.РазделУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготыОбороты.Услуга.ВидУслуги КАК ВидУслуги,
	|	КВП_НачисленныеЛьготыОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаЛьгот,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК ИтогПоУслугеЛьгота,
	|	КВП_НачисленныеЛьготыОбороты.Период КАК Период
	|ПОМЕСТИТЬ втЛьготы
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация
	|				И (НЕ &УчитыватьПроживающего
	|					ИЛИ &УчитыватьПроживающего
	|						И Проживающий = &Проживающий)) КАК КВП_НачисленныеЛьготыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втЛьготы.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачисления.Услуга, втЛьготы.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втНачисления.ВидУслуги, втЛьготы.ВидУслуги) КАК ВидУслуги,
	|	ЕСТЬNULL(втНачисления.ЕдИзм, втЛьготы.ЕдИзм) КАК ЕдИзм,
	|	ЕСТЬNULL(втНачисления.Период, втЛьготы.Период) КАК Период,
	|	ЕСТЬNULL(втЛьготы.СуммаЛьгот, 0) КАК СуммаЛьгот,
	|	СУММА(ЕСТЬNULL(втНачисления.ИтогПоУслуге, 0)) КАК ИтогПоУслуге,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисления, 0)) КАК СуммаНачисления,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаПени, 0)) КАК СуммаПени
	|ПОМЕСТИТЬ втОсновныеСтрокиНачислений
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛьготы КАК втЛьготы
	|		ПО втНачисления.ЛицевойСчет = втЛьготы.ЛицевойСчет
	|			И втНачисления.Услуга = втЛьготы.Услуга
	|			И втНачисления.Период = втЛьготы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втЛьготы.ЛицевойСчет),
	|	ЕСТЬNULL(втНачисления.Услуга, втЛьготы.Услуга),
	|	ЕСТЬNULL(втНачисления.ВидУслуги, втЛьготы.ВидУслуги),
	|	ЕСТЬNULL(втНачисления.ЕдИзм, втЛьготы.ЕдИзм),
	|	ЕСТЬNULL(втНачисления.Период, втЛьготы.Период),
	|	ЕСТЬNULL(втЛьготы.СуммаЛьгот, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втНачисления.ВидУслуги,
	|	втНачисления.ЕдИзм,
	|	втНачисления.Период,
	|	ВЫБОР
	|		КОГДА втНачисления.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|		ИНАЧЕ втНачисления.ВидТарифа
	|	КОНЕЦ КАК ВидТарифа,
	|	втНачисления.Тариф,
	|	СУММА(втНачисления.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисления.СуммаПени) КАК СуммаПени,
	|	СУММА(втНачисления.ИтогПоУслуге) КАК ИтогПоУслуге
	|ПОМЕСТИТЬ втНачисленияВРазрезеТарифов
	|ИЗ
	|	втНачисления КАК втНачисления
	|ГДЕ
	|	НЕ втНачисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|	И НЕ втНачисления.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втНачисления.ВидУслуги,
	|	втНачисления.ЕдИзм,
	|	втНачисления.Период,
	|	ВЫБОР
	|		КОГДА втНачисления.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|		ИНАЧЕ втНачисления.ВидТарифа
	|	КОНЕЦ,
	|	втНачисления.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияВРазрезеТарифов.ЛицевойСчет,
	|	втНачисленияВРазрезеТарифов.Услуга,
	|	втНачисленияВРазрезеТарифов.Период,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияВРазрезеТарифов.ВидТарифа) КАК КоличествоВидовТарифов
	|ПОМЕСТИТЬ втКоличествоВидовТарифовПоУслугамИПериодам
	|ИЗ
	|	втНачисленияВРазрезеТарифов КАК втНачисленияВРазрезеТарифов
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияВРазрезеТарифов.ЛицевойСчет,
	|	втНачисленияВРазрезеТарифов.Услуга,
	|	втНачисленияВРазрезеТарифов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияВРазрезеТарифов.ЛицевойСчет,
	|	втНачисленияВРазрезеТарифов.Услуга,
	|	втНачисленияВРазрезеТарифов.Период,
	|	втНачисленияВРазрезеТарифов.ВидТарифа,
	|	СУММА(втНачисленияВРазрезеТарифов.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияВРазрезеТарифов.СуммаПени) КАК СуммаПени,
	|	СУММА(втНачисленияВРазрезеТарифов.ИтогПоУслуге) КАК ИтогПоУслуге,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНачисленияВРазрезеТарифов.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА 2
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втНачисленияВРазрезеТарифов.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|						ТОГДА 3
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ПорядокТарифа
	|ИЗ
	|	втКоличествоВидовТарифовПоУслугамИПериодам КАК втКоличествоВидовТарифовПоУслугамИПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияВРазрезеТарифов КАК втНачисленияВРазрезеТарифов
	|		ПО втКоличествоВидовТарифовПоУслугамИПериодам.ЛицевойСчет = втНачисленияВРазрезеТарифов.ЛицевойСчет
	|			И втКоличествоВидовТарифовПоУслугамИПериодам.Услуга = втНачисленияВРазрезеТарифов.Услуга
	|			И втКоличествоВидовТарифовПоУслугамИПериодам.Период = втНачисленияВРазрезеТарифов.Период
	|ГДЕ
	|	НЕ втКоличествоВидовТарифовПоУслугамИПериодам.КоличествоВидовТарифов = 1
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияВРазрезеТарифов.ЛицевойСчет,
	|	втНачисленияВРазрезеТарифов.Услуга,
	|	втНачисленияВРазрезеТарифов.Период,
	|	втНачисленияВРазрезеТарифов.ВидТарифа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияВРазрезеТарифов.ЛицевойСчет,
	|	втНачисленияВРазрезеТарифов.Услуга,
	|	втНачисленияВРазрезеТарифов.Период,
	|	втНачисленияВРазрезеТарифов.ВидТарифа,
	|	втНачисленияВРазрезеТарифов.Тариф
	|ИЗ
	|	втНачисленияВРазрезеТарифов КАК втНачисленияВРазрезеТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеСтрокиНачислений.ЛицевойСчет,
	|	втОсновныеСтрокиНачислений.Услуга,
	|	втОсновныеСтрокиНачислений.ВидУслуги,
	|	втОсновныеСтрокиНачислений.ЕдИзм,
	|	втОсновныеСтрокиНачислений.Период,
	|	втОсновныеСтрокиНачислений.СуммаНачисления,
	|	втОсновныеСтрокиНачислений.СуммаПени,
	|	втОсновныеСтрокиНачислений.СуммаЛьгот,
	|	втОсновныеСтрокиНачислений.ИтогПоУслуге - втОсновныеСтрокиНачислений.СуммаЛьгот КАК ИтогПоУслуге,
	|	ЕСТЬNULL(втКоличествоВидовТарифовПоУслугамИПериодам.КоличествоВидовТарифов, 1) КАК КоличествоВидовТарифов
	|ИЗ
	|	втОсновныеСтрокиНачислений КАК втОсновныеСтрокиНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоВидовТарифовПоУслугамИПериодам КАК втКоличествоВидовТарифовПоУслугамИПериодам
	|		ПО втОсновныеСтрокиНачислений.ЛицевойСчет = втКоличествоВидовТарифовПоУслугамИПериодам.ЛицевойСчет
	|			И втОсновныеСтрокиНачислений.Услуга = втКоличествоВидовТарифовПоУслугамИПериодам.Услуга
	|			И втОсновныеСтрокиНачислений.Период = втКоличествоВидовТарифовПоУслугамИПериодам.Период";
	
	Если ПараметрыОтчета.ВыводитьЗаПериод Тогда
		Запрос.Текст = Запрос.Текст + "
						|
						|УПОРЯДОЧИТЬ ПО
						|	втОсновныеСтрокиНачислений.Период,
						|	втОсновныеСтрокиНачислений.ВидУслуги,
						|	втОсновныеСтрокиНачислений.Услуга
						|ИТОГИ
						|	СУММА(СуммаНачисления),
						|	СУММА(СуммаПени),
						|	СУММА(СуммаЛьгот),
						|	СУММА(ИтогПоУслуге)
						|ПО
						|	втОсновныеСтрокиНачислений.Период ПЕРИОДАМИ(МЕСЯЦ, &ДатаНач, &ДатаКон)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач",        ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКон",        ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",    ПараметрыОтчета.Проживающий.Владелец);
	Запрос.УстановитьПараметр("УчитыватьПроживающего", ПараметрыОтчета.УчитыватьПроживающего);
	Запрос.УстановитьПараметр("Проживающий",           ПараметрыОтчета.Проживающий);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Строки детализации в разрезе тарифов.
	тСтрокиДетализации = РезультатЗапроса[5].Выгрузить();
	// Все размеры тарифов за отчетный период.
	тРазмерыТарифов    = РезультатЗапроса[6].Выгрузить();
	// Основные строки начислений.
	тНачислений        = РезультатЗапроса[7].Выгрузить();
	
	СтруктОтбор = Новый Структура("ЛицевойСчет", ПараметрыОтчета.Проживающий.Владелец);
	
	ИтогоНачислено = 0;
	ИтогоПени      = 0;
	ИтогоЛьгот     = 0;
	Итого          = 0;
	
	Для Каждого Строка Из тНачислений Цикл
		Если ПараметрыОтчета.ВыводитьЗаПериод И Не ЗначениеЗаполнено(Строка.ЛицевойСчет) Тогда
			ОбластьМакетаСтрокаПериода.Параметры.МесяцНачисления = Строка.Период;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрокаПериода);
			
			ИтогоНачислено = ИтогоНачислено + Строка.СуммаНачисления;
			ИтогоПени      = ИтогоПени + Строка.Суммапени;
			ИтогоЛьгот     = ИтогоЛьгот + Строка.СуммаЛьгот;
			Итого          = Итого + Строка.ИтогПоУслуге;
			Продолжить;
		КонецЕсли;
		
		СтруктОтбор.Вставить("Услуга", Строка.Услуга);
		ОбластьМакетаСтрока.Параметры.Заполнить(Строка);
		
		ОднотарифнаяУслуга = Строка.КоличествоВидовТарифов = 1;
		
		ОбластьМакетаСтрока.Параметры.Услуга = "" + Строка.ВидУслуги + ?(ОднотарифнаяУслуга, "", ":");
		ОбластьМакетаСтрока.Параметры.Тариф  = ?(ОднотарифнаяУслуга, ПолучитьСтрокуТарифов(Строка, тРазмерыТарифов), "-");
		ОбластьМакетаСтрока.Параметры.Норма  = РегистрыСведений.КВП_НормыПотребленияУслугЛС.ПолучитьПоследнее(КонецМесяца(Строка.Период), СтруктОтбор).НормаПотребления.Размер;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		
		Если НЕ ОднотарифнаяУслуга Тогда
			
			СтрокиДетализации = тСтрокиДетализации.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, Период", Строка.ЛицевойСчет, Строка.Услуга, Строка.Период));
			
			Для каждого ТекСтрокаДетализации из СтрокиДетализации Цикл
				
				ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ТекСтрокаДетализации);
				
				Если ТекСтрокаДетализации.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
					СтрокаУслуги = " - нч. начисление";
				ИначеЕсли ТекСтрокаДетализации.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
					СтрокаУслуги = " - пк. начисление";
				Иначе
					СтрокаУслуги = " - дн. начисление";
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Услуга        = СтрокаУслуги;
				ОбластьМакетаСтрока.Параметры.Норма         = 0;
				ОбластьМакетаСтрока.Параметры.СуммаПени     = 0;
				ОбластьМакетаСтрока.Параметры.СуммаЛьгот    = 0;
				ОбластьМакетаСтрока.Параметры.ИтогПоУслуге = "-";
				ОбластьМакетаСтрока.Параметры.Тариф         = ПолучитьСтрокуТарифов(ТекСтрокаДетализации, тРазмерыТарифов, Истина);
				
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если тНачислений.Количество() = 0 Тогда
		ОбластьМакетаСтрока.Параметры.Услуга = "Отсутствует";
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЕсли;
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	Если ПараметрыОтчета.ВыводитьЗаПериод Тогда
		ОбластьМакетаПодвал.Параметры.ИтогоНачислено = ИтогоНачислено;
		ОбластьМакетаПодвал.Параметры.ИтогоПени      = ИтогоПени;
		ОбластьМакетаПодвал.Параметры.ИтогоЛьгот     = ИтогоЛьгот;
		ОбластьМакетаПодвал.Параметры.Итого          = Итого;
	Иначе
		ОбластьМакетаПодвал.Параметры.ИтогоНачислено = тНачислений.Итог("СуммаНачисления");
		ОбластьМакетаПодвал.Параметры.ИтогоПени      = тНачислений.Итог("СуммаПени");
		ОбластьМакетаПодвал.Параметры.ИтогоЛьгот     = тНачислений.Итог("СуммаЛьгот");
		ОбластьМакетаПодвал.Параметры.Итого          = тНачислений.Итог("ИтогПоУслуге");
	КонецЕсли;
	
	ОбластьМакетаПодвал.Параметры.Дата = ПараметрыОтчета.Дата;
	
	НастройкиУчетнойПолитикиТСЖ = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ПараметрыОтчета.Дата, ПараметрыОтчета.Организация);
	
	
	СтруктураДанныхДляЗапроса = Новый Структура("Организация");
	СтруктураДанныхДляЗапроса.Организация = ПараметрыОтчета.Организация;
	
	СписокЛС = Новый СписокЗначений;
	СписокЛС.Добавить(ПараметрыОтчета.ЛицевойСчет);
	
	ТаблицаДолжников = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(ПараметрыОтчета.Дата, СписокЛС,
																		СтруктураДанныхДляЗапроса,
																		НастройкиУчетнойПолитикиТСЖ);
	
	Задолженность = 0;
	Если ТаблицаДолжников.Количество() > 0 Тогда
		Если ПараметрыОтчета.ВидЗадолженности = 0 Тогда
			КолонкаИтогов = "ОбщаяСумма";
		Иначе
			КолонкаИтогов = "ОбщаяСуммаЗадолженности";
		КонецЕсли;
		Задолженность = ТаблицаДолжников.Итог(КолонкаИтогов);
	КонецЕсли;
	ОбластьМакетаПодвал.Параметры.Задолженность = ?(Задолженность = 0,
													"отсутствует",
													"составляет " + Формат(Задолженность, "ЧГ=0; ЧДЦ=2") + " руб.");
	
	//Задолженность = РегистрыНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(НачалоМесяца(ПараметрыОтчета.Дата),
	//																			Новый Структура("Организация,ЛицевойСчет",
	//																							  ПараметрыОтчета.Организация,
	//																							  ПараметрыОтчета.Проживающий.Владелец),
	//																			"ЛицевойСчет").Итог("СуммаНачисления");
	//
	//ОбластьМакетаПодвал.Параметры.Задолженность = ?(Задолженность = 0, "отсутствует",
	//																   "составляет " + Формат(Задолженность, "ЧГ=0; ЧДЦ=2") + " руб.");
	
	Руководители = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.Дата));
	Руководитель = Руководители.Руководитель;
	ОбластьМакетаПодвал.Параметры.Директор        = Руководители.РуководительДолжность;
	ОбластьМакетаПодвал.Параметры.ФИОДиректора    = Руководители.РуководительПредставление;
	ОбластьМакетаПодвал.Параметры.ФИОПользователя = Руководители.ГлавныйБухгалтерПредставление;
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	// Первую колонку не печатаем
	ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1, 2,
	                                  ТабличныйДокумент.ВысотаТаблицы, ТабличныйДокумент.ШиринаТаблицы);
	
	// Присвоим имя для сохранения параметров печати табличного документа
	ТабличныйДокумент.ИмяПараметровПечати = "КраткийСписокПроживающихПоЛицевомуСчетуКВП";
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

// Формирует строку, содержащую перечисление всех тарифов по услуге за период.
Функция ПолучитьСтрокуТарифов(СтрокаУслуги, ТаблицаТарифов, СтрокаДетализации = Ложь)
	
	Если СтрокаДетализации = Истина Тогда
		СтруктураОтбора = Новый Структура("ЛицевойСчет, Услуга, Период, ВидТарифа");
	Иначе
		СтруктураОтбора = Новый Структура("ЛицевойСчет, Услуга, Период");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаУслуги);
	
	тмТаблицаТарифов = ТаблицаТарифов.Скопировать(ТаблицаТарифов.НайтиСтроки(СтруктураОтбора), "Тариф");
	
	СтрокаТарифов = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(тмТаблицаТарифов.ВыгрузитьКолонку("Тариф"), " / ");
	
	Если СтрокаТарифов = "" Тогда
		СтрокаТарифов = "-";
	КонецЕсли;
	
	Возврат СтрокаТарифов;
	
КонецФункции

#КонецОбласти

#КонецЕсли