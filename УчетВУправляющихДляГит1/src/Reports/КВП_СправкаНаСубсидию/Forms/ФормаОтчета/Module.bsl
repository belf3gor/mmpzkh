
#Область ИнициализацияПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура подготовки параметров учета.
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Дата",                  Отчет.Дата);
	ПараметрыОтчета.Вставить("Номер",                 Отчет.Номер);
	ПараметрыОтчета.Вставить("НачалоПериода",         НачалоДня(Отчет.НачалоПериода));
	ПараметрыОтчета.Вставить("КонецПериода",          КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("Организация",           Отчет.Организация);
	ПараметрыОтчета.Вставить("Проживающий",           Отчет.Проживающий);
	Если Отчет.ЛицевойСчет.Пустая() Тогда
		ПараметрыОтчета.Вставить("ЛицевойСчет", Отчет.Проживающий.Владелец);
	Иначе
		ПараметрыОтчета.Вставить("ЛицевойСчет", Отчет.ЛицевойСчет);
	КонецЕсли;
	ПараметрыОтчета.Вставить("УчитыватьПроживающего", Отчет.УчитыватьПроживающего);
	ПараметрыОтчета.Вставить("ВыводитьЗаПериод",      Отчет.ВыводитьЗаПериод);
	ПараметрыОтчета.Вставить("ВидЗадолженности",      Отчет.ВидЗадолженности);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
// Процедура формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_СправкаНаСубсидию.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.КВП_СправкаНаСубсидию.СформироватьОтчет", 
			ПараметрыОтчета, 
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Процедура загрузки подготовленных данных.
Процедура ЗагрузитьПодготовленныеДанные()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)

	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура обновляет текст заголовка.
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Отчет = Форма.Отчет;
	ЗаголовокОтчета = "Справка на субсидию";
	
	Форма.Заголовок = ЗаголовокОтчета;
	
КонецПроцедуры

&НаСервере
// Устанавливает начальные настройки.
Процедура УстановитьНачальныеНастройки()
	
	Отчет.Дата = ТекущаяДатаСеанса();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
// Заполняет поле Проживающий, если по лицевому счету он один.
Процедура ЗаполнитьПроживающего(ВыбранноеЗначение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Отчет.Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", ВыбранноеЗначение);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Отчет.Проживающий = ?(ТаблицаРезультат.Количество() > 0, ТаблицаРезультат[0].Жилец, Справочники.УПЖКХ_Жильцы.ПустаяСсылка());
	
КонецПроцедуры

&НаСервере
// Возвращает таблицу лицевых счетов.
Функция ПолучитьСписокЛицевыхСчетов(ПолеАдрес)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних";

	Запрос.УстановитьПараметр("Дата",      Отчет.Дата);
	Запрос.УстановитьПараметр("Помещение", ПолеАдрес);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");

КонецФункции // ПолучитьТаблицуЛицевыхСчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Прочитаем переданные параметры.
	Если Параметры.Свойство("Проживающий") Тогда
		Параметры.Свойство("Проживающий", Отчет.Проживающий);
		ИспользоватьРучныеНастройки = Истина;
	КонецЕсли;
	
	// Установка настроек печати по умолчанию. Если настройки были изменены, они будут загружены при формировании отчета.
	Результат.АвтоМасштаб = Истина;
	
	УстановитьНачальныеНастройки();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Отчет.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Проживающий, "Владелец");
	
	Если Не ЗначениеЗаполнено(Отчет.НачалоПериода) Тогда
		Отчет.НачалоПериода = НачалоДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		Отчет.КонецПериода = КонецДня(Отчет.НачалоПериода);
	КонецЕсли;
	
	Если Отчет.Номер = "" Тогда 
		НомерСправки = 1;
	Иначе 
		НомерСправки = Отчет.Номер;
	КонецЕсли;
	Отчет.Номер = Прав("0000000000" + НомерСправки, 10);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПриЗакрытии(ЭтаФорма, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Если Не ИспользоватьРучныеНастройки Тогда
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки, Истина);
		
		ОбновитьТекстЗаголовка(ЭтаФорма);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ПанельНастроек(Команда)
	
	Попытка
		
		Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек,
																			Элементы.ГруппаПанельНастроек.Видимость);
		
	Исключение
		
		//ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры // ПанельНастроек()

////////////////////////////////////////////////////////////////////////////////
// ПЕРИОДА НАЧИСЛЕНИЯ ЖКУ

// Процедура - обработчик события "Нажатие" кнопки "ВыбратьПериод".
&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры // ВыбратьПериод()

// Процедура - обработчик завершения события "Нажатие" кнопки "ВыбратьПериод".
&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВыбратьПериодЗавершение()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ЭЛЕМЕНТЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ПроживающийПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Проживающий".
Процедура ПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	предЗначение = Отчет.Проживающий;
	
	Если ЗначениеЗаполнено(Отчет.ЛицевойСчет) Тогда
		СтандартнаяОбработка = Ложь;
		ФормаВыб = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыб.Список.Отбор, "Владелец", Отчет.ЛицевойСчет);
		
		ДопПараметры = Новый Структура("предЗначение", предЗначение);
		
		ФормаВыб.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора", ЭтаФорма, ДопПараметры);
		ФормаВыб.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыб.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора жильца, вызванного в процедуре "ПроживающийНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	предЗначение = ДопПараметры.предЗначение;
	
	Отчет.Проживающий = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предЗначение);
	
	ТекЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
	ПолеАдрес   = ?(ЗначениеЗаполнено(ВыбранноеЗначение), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекЛицевойСчет, "Адрес"), ПолеАдрес);
	Отчет.ЛицевойСчет = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ТекЛицевойСчет, Отчет.ЛицевойСчет);
	
КонецПроцедуры // ОбработатьРезультатВыбораЖильцаПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Проживающий".
Процедура ПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отчет.ЛицевойСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Владелец");
	ПолеАдрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.ЛицевойСчет, "Адрес");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "Проживающий".
Процедура ПроживающийОчистка(Элемент, СтандартнаяОбработка)
	
	ПолеАдрес = "";
	Отчет.ЛицевойСчет = "";
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛицевойСчет".
Процедура ЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	предЛицевойСчет = Отчет.ЛицевойСчет;
	
	МассивЛС = ПолучитьСписокЛицевыхСчетов(ПолеАдрес);
	
	Если МассивЛС.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Адрес", ПолеАдрес);
		
		ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
		
		ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		ДопПараметры = Новый Структура("предЛицевойСчет", предЛицевойСчет);
		
		ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора", ЭтаФорма, ДопПараметры);
		ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора л/с, вызванного в процедуре "ЛицевойСчетНачалоВыбора()".
Процедура ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	предЛицевойСчет = ДопПараметры.предЛицевойСчет;
	
	Отчет.ЛицевойСчет = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предЛицевойСчет);
	ПолеАдрес         = ?(ЗначениеЗаполнено(ВыбранноеЗначение), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес")
										, ?(ЗначениеЗаполнено(предЛицевойСчет), УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(предЛицевойСчет, "Адрес"), ПолеАдрес));
	Если Отчет.ЛицевойСчет <> предЛицевойСчет Тогда
		ЗаполнитьПроживающего(Отчет.ЛицевойСчет);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораЛСЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПолеАдрес".
Процедура ЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеАдрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Адрес");
	
	ЗаполнитьПроживающего(ВыбранноеЗначение);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЛицевойСчет".
Процедура ПолеАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	предАдрес            = ПолеАдрес;
	
	Если ЗначениеЗаполнено(Отчет.ЛицевойСчет) Тогда
		
		ТекАдрес = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.ЛицевойСчет, "Адрес");
		ТекЗдание = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Владелец");
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Владелец", ТекЗдание);
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора));
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Наименование", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекАдрес, "Наименование"));
		
	Иначе
		
		ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора");
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура("предАдрес", предАдрес);
	
	ФормаВыбора.ОписаниеОповещенияОзакрытии = Новый ОписаниеОповещения("ОбработатьРезультатВыбораПомещенияПолеАдресНачалоВыбора", ЭтаФорма, ДопПараметры);
	ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ПолеАдресНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора помещения, вызванного в процедуре "ПолеАдресНачалоВыбора()".
Процедура ОбработатьРезультатВыбораПомещенияПолеАдресНачалоВыбора(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	предАдрес = ДопПараметры.предАдрес;
	
	ПолеАдрес = ?(ЗначениеЗаполнено(ВыбранноеЗначение), ВыбранноеЗначение, предАдрес);
	
	СписокЛС = ПолучитьСписокЛицевыхСчетов(ПолеАдрес);
	Если СписокЛС.Количество() > 0 Тогда
		Отчет.ЛицевойСчет = СписокЛС[0];
		Если ПолеАдрес <> предАдрес Тогда
			ЗаполнитьПроживающего(Отчет.ЛицевойСчет);
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Отчет.ЛицевойСчет = "";
		Отчет.Проживающий = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыыбораПомещенияПолеАдресНачалоВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Номер".
Процедура НомерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата".
Процедура ДатаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПАНЕЛЬ НАСТРОЕК

// Обработчик события "ПриИзменении" флажка "УчитыватьПроживающего".
&НаКлиенте
Процедура УчитыватьПроживающегоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // УчитыватьПроживающегоПриИзменении()

// Обработчик события "ПриИзменении" флажка "ВыводитьЗаПериод".
&НаКлиенте
Процедура ВыводитьЗаПериодПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВыводитьЗаПериодПриИзменении()

// Обработчик события "ПриИзменении" переключателя "ВидЗадолженности".
&НаКлиенте
Процедура ВидЗадолженностиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры // ВидЗадолженностиПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры // СформироватьОтчет()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Попытка 
		Отчет.Номер = Число(Отчет.Номер) + 1;
	Исключение
	КонецПопытки;
КонецПроцедуры // ПередЗакрытием

#КонецОбласти
