&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2007Кв1";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь;
	
	СтруктураРеквизитовФормы.мИдГруппы1  = "П0000100060";
	СтруктураРеквизитовФормы.мИдГруппы2  = "П0000200050";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	КолИсхСтрокИдГруппы2 = 1;
	
	КолКолонокИдГруппы1 = 12;
	КолКолонокИдГруппы2 = 13;
	
	СтруктураДанныхТитульный = Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	
	// Структура содержит данные дополнительных страниц
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ФизЛица", "ТаблицаСтраницыФизЛица");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел1", "ТаблицаСтраницыРаздела1");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел2", "ТаблицаСтраницыРаздела2");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолИсхСтрокИдГруппы2);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолКолонокИдГруппы1);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, КолКолонокИдГруппы2);
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192);     // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192);  // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255);      // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	//// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА
	//
	// Версия формы
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2007";
	
	// Код отчета, равен КНД
	СтруктураРеквизитовФормы.мКодОтчета   = "1151056";
	
	СтруктураРеквизитовФормы.ОбязРазделов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 3.00004", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151056";
	
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "НАЛОГОВЫЙ РАСЧЕТ (ИНФОРМАЦИЯ) О СУММАХ, ВЫПЛАЧЕННЫХ ИНОСТРАННЫМ ОРГАНИЗАЦИЯМ ДОХОДОВ И УДЕРЖАННЫХ НАЛОГОВ";
	
	СтруктураРеквизитовФормы.РежимОтладки = Ложь;
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	ИмяМакета = Сред(ЭтаФормаИмя, СтрНайти(ЭтаФормаИмя, "ФормаОтчета")) + "_" + ИмяРаздела;
	Попытка
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(ИмяМакета));
	Исключение
	КонецПопытки;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела 	  = ИмяРаздела;	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;		
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыФизЛица.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.ДанныеДопСтрок              = Неопределено;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("МногострочныеИсключения");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВПрограммеИзмененаОрганизация");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");	
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мДокументВосстановлен");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИННБухгалтер");
	СтруктураРеквизитовФормы.Вставить("мИННДиректор");
	СтруктураРеквизитовФормы.Вставить("мИННРаздел1");
	СтруктураРеквизитовФормы.Вставить("мИННУпПред");
	СтруктураРеквизитовФормы.Вставить("мИННЮЛ");
	СтруктураРеквизитовФормы.Вставить("мКБКРаздел1");
	СтруктураРеквизитовФормы.Вставить("мКБКРаздел2");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мКодРегионаФизЛица");
	СтруктураРеквизитовФормы.Вставить("мКодСтраныРаздел1");
	СтруктураРеквизитовФормы.Вставить("мКППЮЛ");
	СтруктураРеквизитовФормы.Вставить("мОКАТОРаздел1");
	СтруктураРеквизитовФормы.Вставить("мОКАТОРаздел2");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("мОргКодИМНС");
	СтруктураРеквизитовФормы.Вставить("мОргОГРН");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("мПустойОбразЛистаФЛ");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мТелОрганизации");		
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчетаДляВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("ОбязРазделов");
	СтруктураРеквизитовФормы.Вставить("РежимОтладки");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	
КонецПроцедуры

&НаСервере
Функция СформироватьПустройФизЛицЛист()
	
	СтруктураДанныхПоля = Новый Структура;

	СтруктураДанныхПоля.Вставить("ФизЛицГород","");
	СтруктураДанныхПоля.Вставить("ФизЛицГражданство","");
	СтруктураДанныхПоля.Вставить("ФизЛицДатаРожд","");
	СтруктураДанныхПоля.Вставить("ФизЛицДок","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВид","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокВыдан","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокДата","");
	СтруктураДанныхПоля.Вставить("ФизЛицДокСерияНомер","");
	СтруктураДанныхПоля.Вставить("ФизЛицДом","");
	СтруктураДанныхПоля.Вставить("ФизЛицИнд","");
	СтруктураДанныхПоля.Вставить("ФизЛицИноАдрес","");
	СтруктураДанныхПоля.Вставить("ФизЛицКвартира","");
	СтруктураДанныхПоля.Вставить("ФизЛицКодГражд","");
	СтруктураДанныхПоля.Вставить("ФизЛицКорпус","");
	СтруктураДанныхПоля.Вставить("ФизЛицМестоР","");
	СтруктураДанныхПоля.Вставить("ФизЛицНП","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолЖ","");
	СтруктураДанныхПоля.Вставить("ФизЛицПолМ","");
	СтруктураДанныхПоля.Вставить("ФизЛицРайон","");
	СтруктураДанныхПоля.Вставить("ФизЛицС","");
	СтруктураДанныхПоля.Вставить("ФизЛицСлТел","");
	СтруктураДанныхПоля.Вставить("ФизЛицСубъект","");
	СтруктураДанныхПоля.Вставить("ФизЛицУлица","");
	СтруктураДанныхПоля.Вставить("ФизЛицоФИО","");

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	// выполняем начальные настройки
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСвойствСтраниц();
	ФормироватьСтруктуруСтраницОтчета();
	
	СтруктураРеквизитовФормы.мПустойОбразЛистаФЛ = СформироватьПустройФизЛицЛист();
	
	// ФлОтклВыборЗначений
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	// При печати, расчет выполнятся не должен при любых обстоятельствах.
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	СтруктураРеквизитовФормы.мДокументВосстановлен          = Ложь;
	РегламентированнаяОтчетность.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			// документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе
			
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			ТабличныйДокумент.Области.ВидДок.Значение = "1";
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		Если НЕ БезОткрытияФормы Тогда
			// Установим маска, чтобы при воостановлении не устанавливать, а копировать с уже установленных масок на строках.
			НачальныеОперацииСМногострочнымиБлоками();
		КонецЕсли;
		
		// При открытии или при копировании сохраненного
		// отчета восстанавливаем сохраненные данные.
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		
		Если НЕ БезОткрытияФормы
           И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
        	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

        КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация);
	
	СохрЗначВКвадратиках(ЭтаФорма);
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Или СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		ЗаполнитьСведенияОбФЛ();
	КонецЕсли;
	
	ПолучитьИННКПП();
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	мСкопированаФорма = Неопределено;
	Параметры.Свойство("мСкопированаФорма", мСкопированаФорма);
	Если ЗначениеЗаполнено(мСкопированаФорма) Тогда 
		Модифицированность = Истина;
	КонецЕсли;
	НомерКорректировки = НомерКорректировки * СтруктураРеквизитовФормы.ВидДокумента;
	ТабличныйДокумент.Области.НомКоррект.Значение = НомерКорректировки;
	ТабличныйДокумент.Области.ВидДок.Значение = ?(НомерКорректировки = 0, "1", "3");
	ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ЭтаФормаИмя = ЭтаФорма.ИмяФормы;
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФормаИмя).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
						
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
    
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
        	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
    СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Титульного листа
	СтрокаУровня1.ИмяСтраницы                          = "ФизЛица";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "ФизЛицФИО";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	// Добавим св-ва Раздела 1
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000010001000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр              = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы     = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область      = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();

	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "П000020001000";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр              = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы     = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область      = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 1;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИФНС.
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ФизЛица";
	СтрокаУровня1.Представление            = "Сведения о физических лицах";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 =  мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "мТаблицаМногострочныхРазделов");
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля) Экспорт

	ИмяСтраницы = ИмяРаздела;
	
	Если ИмяСтраницы = "Раздел1" Тогда

		ПеременныеМодуля.мКодСтраныРаздел1 = "";
		ПеременныеМодуля.мИННРаздел1       = "";
		ПеременныеМодуля.мКБКРаздел1       = "";
		ПеременныеМодуля.мОКАТОРаздел1     = "";

	ИначеЕсли ИмяСтраницы = "Раздел2" Тогда

		ПеременныеМодуля.мКБКРаздел2   = "";
		ПеременныеМодуля.мОКАТОРаздел2 = "";

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Знач ИмяСтраницы)

	// Процедура должна быть пустой
	Пусто = Неопределено;
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоказателиИзМакета (РазделВМакете)
	
	// Загрузка общих списков.
	Если РазделВМакете = "СтраныМира" Тогда
		
		СписокКодовСтран.Загрузить(РегламентированнаяОтчетность.ПолучитьСписокВыбораИзОбщихСписков("СтраныМира"));
		
		Возврат;
		
	КонецЕсли;
		
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2007Кв1");

	ТекОбласть = МакетСоставаПоказателей.Области.Найти(РазделВМакете);

	Если ТекОбласть <> Неопределено Тогда

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// Перебираем строки макета.

			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			Название = СокрП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			Если КодПоказателя = "###" Тогда
				Прервать;
			Иначе

				Если РазделВМакете = "КБК2005Раздел1" Тогда
					НовСтрока = мКБК2005Раздел1.Добавить();
				КонецЕсли;

				Если РазделВМакете = "КБК2005Раздел2" Тогда
					НовСтрока = мКБК2005Раздел2.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ВидыДоходовИностранныхОрганизации" Тогда
					НовСтрока = мВидыДоходовИностранныхОрганизации.Добавить();
				КонецЕсли;

				Если РазделВМакете = "ОКВ" Тогда
					НовСтрока = мОКВ.Добавить();
				КонецЕсли;

				Если РазделВМакете = "СтатьиДоходов"
				 ИЛИ РазделВМакете = "СтатьиДоходов092008"
				 ИЛИ РазделВМакете = "СтатьиДоходов122012" Тогда
					НовСтрока = мСтатьиДоходов.Добавить();
				КонецЕсли;
					
				НовСтрока.Код= КодПоказателя;
				НовСтрока.Название = Название;
				
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем ВерсияФормы;
	Перем ТаблицаМногостраничногоДокумента;

	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если СтруктураРеквизитовФормы.Организация <> СтруктураРеквизитовФормы.мСохраненныйДок.Организация
	   И СтруктураРеквизитовФормы.Организация <> РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")
	   И СтруктураРеквизитовФормы.Организация <> Неопределено Тогда
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	Иначе
		// восстанавливаем реквизиты отчета
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи										  = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий										  = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();

	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем версию формы
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки();
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;      	
		
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ?(СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено, Ложь, СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
    

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
    Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	
	ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета);
	ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца();
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
		
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	// Управляем видимостью страниц основной панели формы
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;

	СтруктураРеквизитовФормы.мДокументВосстановлен = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОбОрганизацииИзТитульногоЛистаСтарогоОбразца(ПоказателиОтчета)
	
	ПоказателиТаблПоле = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	Для Каждого Показатель Из ПоказателиТаблПоле Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			СтруктураДанныхТитульный.Вставить("ИНН");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИНН = СокрЛП(СтруктураДанныхТитульный.ИНН) + ПоказателиТаблПоле["ИНН1_" + Ном];
				СтруктураДанныхТитульный.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(СтруктураДанныхТитульный.ИНН, 2) = "00" Тогда
				СтруктураДанныхТитульный.ИНН = Сред(СтруктураДанныхТитульный.ИНН, 3);
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			СтруктураДанныхТитульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				СтруктураДанныхТитульный.КПП = СокрЛП(СтруктураДанныхТитульный.КПП) + ПоказателиТаблПоле["КПП1_" + Ном];
				СтруктураДанныхТитульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомКвартал1" Тогда
			СтруктураДанныхТитульный.Вставить("НомКвартал");
			Для Ном = 1 По 2 Цикл
				СтруктураДанныхТитульный.НомКвартал = СокрЛП(СтруктураДанныхТитульный.НомКвартал) + ПоказателиТаблПоле["НомКвартал" + Ном];
				СтруктураДанныхТитульный.Удалить("НомКвартал" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			СтруктураДанныхТитульный.Вставить("ОтчетГод");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.ОтчетГод = СокрЛП(СтруктураДанныхТитульный.ОтчетГод) + ПоказателиТаблПоле["ОтчетГод" + Ном];
				СтруктураДанныхТитульный.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
        ИначеЕсли ИмяПоказателя = "КодИМНС1" Тогда
			СтруктураДанныхТитульный.Вставить("КодИМНС");
			Для Ном = 1 По 4 Цикл
				СтруктураДанныхТитульный.КодИМНС = СокрЛП(СтруктураДанныхТитульный.КодИМНС) + ПоказателиТаблПоле["КодИМНС" + Ном];
				СтруктураДанныхТитульный.Удалить("КодИМНС" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ОГРН1" Тогда
			СтруктураДанныхТитульный.Вставить("ОГРН");
			Для Ном = 1 По 13 Цикл
				СтруктураДанныхТитульный.ОГРН = СокрЛП(СтруктураДанныхТитульный.ОГРН) + ПоказателиТаблПоле["ОГРН" + Ном];
				СтруктураДанныхТитульный.Удалить("ОГРН" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			СтруктураДанныхТитульный.Вставить("Прил");
			Для Ном = 1 По 3 Цикл
				СтруктураДанныхТитульный.Прил = СокрЛП(СтруктураДанныхТитульный.Прил) + ПоказателиТаблПоле["Прил" + Ном];
				СтруктураДанныхТитульный.Удалить("Прил" + Ном);
			КонецЦикла;				
		ИначеЕсли ИмяПоказателя = "ИННРук1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННРук");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННРук = СокрЛП(СтруктураДанныхТитульный.ИННРук) + ПоказателиТаблПоле["ИННРук" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННРук" + Ном);
			КонецЦикла;		
		ИначеЕсли ИмяПоказателя = "ИННГБ1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННГБ");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННГБ = СокрЛП(СтруктураДанныхТитульный.ИННГБ) + ПоказателиТаблПоле["ИННГБ" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННГБ" + Ном);
			КонецЦикла;	
		ИначеЕсли ИмяПоказателя = "ИННУП1" Тогда
			СтруктураДанныхТитульный.Вставить("ИННУП");
			Для Ном = 1 По 12 Цикл
				СтруктураДанныхТитульный.ИННУП = СокрЛП(СтруктураДанныхТитульный.ИННУП) + ПоказателиТаблПоле["ИННУП" + Ном];
				СтруктураДанныхТитульный.Удалить("ИННУП" + Ном);
			КонецЦикла;			
				
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьДатуВЯчейкахНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьСведенияОФизическихЛицахИзЛистаФизЛицаСтарогоОбразца()
	
	Для Каждого ЭлементТабл Из ЭтаФорма[мСтруктураМногостраничныхРазделов.ФизЛица] Цикл
		
		ЭлементТабл.АктивнаяСтраница = Ложь;
		
		ПоказателиТаблПоле = ЭлементТабл.Данные[0].Значение;
		
		СтруктураДанныхФизЛица = ЭлементТабл.Данные[0].Значение;
		
		Для Каждого Показатель Из ПоказателиТаблПоле Цикл
			
			ИмяПоказателя = Показатель.Ключ;
			
			Если ИмяПоказателя = "ФизЛицДатаРожд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДатаРожд");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДатаРожд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДатаРожд) + ПоказателиТаблПоле["ФизЛицДатаРожд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДатаРожд" + Ном);
				КонецЦикла;	
				ДатаСтр = Сред(СтруктураДанныхФизЛица.ФизЛицДатаРожд, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДатаРожд, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДатаРожд, 2);
				СтруктураДанныхФизЛица.ФизЛицДатаРожд = Дата(?(ЗначениеЗаполнено(ДатаСтр), ДатаСтр, '00010101'));
			ИначеЕсли ИмяПоказателя = "ФизЛицКодГражд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицКодГражд");
				Для Ном = 1 По 3 Цикл
					СтруктураДанныхФизЛица.ФизЛицКодГражд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицКодГражд) + ПоказателиТаблПоле["ФизЛицКодГражд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицКодГражд" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДок1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДок");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицДок = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДок) + ПоказателиТаблПоле["ФизЛицДок" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДок" + Ном);
				КонецЦикла;
			ИначеЕсли ИмяПоказателя = "ФизЛицДокДата1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицДокДата");
				Для Ном = 1 По 8 Цикл
					СтруктураДанныхФизЛица.ФизЛицДокДата = СокрЛП(СтруктураДанныхФизЛица.ФизЛицДокДата) + ПоказателиТаблПоле["ФизЛицДокДата" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицДокДата" + Ном);
				КонецЦикла;	
				ДатаСтр = Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 5) + Сред(СтруктураДанныхФизЛица.ФизЛицДокДата, 3, 2) + Лев(СтруктураДанныхФизЛица.ФизЛицДокДата, 2);
				СтруктураДанныхФизЛица.ФизЛицДокДата = Дата(?(ЗначениеЗаполнено(ДатаСтр), ДатаСтр, '00010101'));
			ИначеЕсли ИмяПоказателя = "ФизЛицИнд1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицИнд");
				Для Ном = 1 По 6 Цикл
					СтруктураДанныхФизЛица.ФизЛицИнд = СокрЛП(СтруктураДанныхФизЛица.ФизЛицИнд) + ПоказателиТаблПоле["ФизЛицИнд" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицИнд" + Ном);
				КонецЦикла;		
			ИначеЕсли ИмяПоказателя = "ФизЛицС1" Тогда
				СтруктураДанныхФизЛица.Вставить("ФизЛицС");
				Для Ном = 1 По 2 Цикл
					СтруктураДанныхФизЛица.ФизЛицС = СокрЛП(СтруктураДанныхФизЛица.ФизЛицС) + ПоказателиТаблПоле["ФизЛицС" + Ном];
					СтруктураДанныхФизЛица.Удалить("ФизЛицС" + Ном);
				КонецЦикла;			
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПользовательскиеНастройки()
	
	Сообщение = Новый СообщениеПользователю;

	Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменилась версия формы отчета.%1Выполняется обновление пользовательских настроек.'"), Символы.ПС);

	Сообщение.Сообщить();
				
	// Обновляем варианты заполнения показателей отчета
	ЕстьИзмененияВариантыЗаполнения = ОбновитьВариантыЗаполнения();

	// Обновляем настройки страниц отчета (содержание отчета)
	ЕстьИзмененияНастройкаСтраниц   = ОбновитьНастройкиСтраниц();

	Если ЕстьИзмененияВариантыЗаполнения ИЛИ ЕстьИзмененияНастройкаСтраниц Тогда
		// Если были изменения в пользовательских настройках,
		// то устанавливаем флаг модифицированности формы.
		Модифицированность = Истина;
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Обновление пользовательских настроек успешно завершено!'");

		Сообщение.Сообщить();

	Иначе

		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!'");

		Сообщение.Сообщить();

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя,ПеременныеМодуля) Экспорт
		
	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;

	Если ИмяПоказателя = "КодСтраныРаздел1" Тогда
		ПеременныеМодуля.мКодСтраныРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ИННРаздел1" Тогда
		ПеременныеМодуля.мИННРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
		ПеременныеМодуля.мКБКРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
		ПеременныеМодуля.мОКАТОРаздел1 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "КБКРаздел2" Тогда
		ПеременныеМодуля.мКБКРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	ИначеЕсли ИмяПоказателя = "ОКАТОРаздел2" Тогда
		ПеременныеМодуля.мОКАТОРаздел2 = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;

	КонецЕсли;

	Возврат ИзмененияПроизошли;	
		
КонецФункции

&НаСервере
Функция ОбновитьВариантыЗаполнения()
	Перем МассивВариантовЗаполненияСтраниц;

	ЕстьИзменения = Ложь;

	// Подлежат обновлению следующие структуры:
	// 1.Пользовательские настройки вариантов заполнения таблиц

	// Сначала создадим эталонные модели вариантов автозаполнения таблиц.
	// Их определяем по макету СоставПоказателей
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));

	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));

	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));

	ОписаниеТиповЧисло15   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ЕстьИзменения = Ложь;

	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		// организован цикл по именованным областям макета,
		// содержащим состав показателей и варианты автозаполнения
		// таблиц на каждой странице основной панели формы.

		ТекОбласть  = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы = ТекОбласть.Имя;

		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
		ТаблицаВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета

			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан варианет заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// не было предусмотрено автозаполнение по данным ИБ.
				// Добавим такую возможность в пользовательскую настройку
                				
				МассивВариантовЗаполненияСтраниц.Очистить();
				// Первым элементом массива является "эталонная" таблица значений вариантов заполнения
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);

				// сохраняем варианты заполнения таблиц на данной странице
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);

				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				// Рассмотрим вариант, когда в предыдущей версии формы по данной странице
				// было предусмотрено автозаполнение таблицы, а в текущей версии - отключено.
				// В этом случае из структуры вариантов автозаполнения удаляем элемент,
				// хранящий настройки вариантов автозаполнения текущей станицы.
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);

				ЕстьИзменения = Истина;
			Иначе
				// Рассмотрим вариант, когда и в предыдущей, и в текущей версии формы было предусмотрено
				// автозаполнение текущей страницы. В этом случае обновляем таблицу значений, содержащей
				// пользовательские настройки вариантов автозаполнения текущей страницы.

				Для каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
                        КодПоказателяПоСтруктуре = СтрокаТаблицы.КодПоказателяПоСтруктуре;
						
						Если ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя)).Количество() = 0 Тогда	
							// Рассмотри вариант, когда в новой версии формы список реквизитов,
							// заполняемых автоматически по данным ИБ, дополнен новым реквизитом.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
                            НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
							
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
                   // КопироватьДанныеФормы(ЭлементМассива,ТаблДляЦикла);
					Для каждого СтрокаТаблицы Из ЭлементМассива Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;

						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// Рассмотрим вариант, когда в предыдущей версии отчета для данной страницы
							// было предусмотрено автозаполнение ячейки по коду КодПоказателя,
							// а в текущей версии - отключено. В этом случае удаляем эту ячейку
							// из таблицы пользовательских настроек вариантов автозаполнения.
							СтрокаВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура(КодПоказателя, "КодПоказателя"));
							Если  СтрокаВЭлементеМассива <> Неопределено Тогда
								ЭлементМассива.Удалить(СтрокаВЭлементеМассива);
								ЕстьИзменения = Истина;
							КонецЕсли;
							ЕстьИзменения = Истина;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Функция ОбновитьНастройкиСтраниц()

	ЕстьИзменения = Ложь;

	// формируем дерево значений - пользовательских настройки страниц отчета
	мПользовательскиеНастройкиСтраниц = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Скопировать();

	// формируем дерево значений - настройки страниц отчета обновленной формы
	ФормироватьСтруктуруСтраницОтчета();

	// Сначала проверяем, не изменилась ли структура настроек страниц (колонки дерева)
	Для каждого ИсхКолонка Из РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки Цикл

		Если мПользовательскиеНастройкиСтраниц.Колонки.Найти(ИсхКолонка.Имя) = Неопределено Тогда
			// добавиляем новую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Добавить(ИсхКолонка.Имя, ИсхКолонка.ТипЗначения, ИсхКолонка.Заголовок, ИсхКолонка.Ширина);
			мПользовательскиеНастройкиСтраниц.ЗагрузитьКолонку(РеквизитФормыВЗначение("мДеревоСтраницОтчета").ВыгрузитьКолонку(ИсхКолонка.Имя), ИсхКолонка.Имя);

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Выполняем обратную задачу:
	// удаляем отсутствующие колонки
	Для каждого ТекКолонка Из мПользовательскиеНастройкиСтраниц.Колонки Цикл

		Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Найти(ТекКолонка.Имя) = Неопределено Тогда
			// удаляем отсутствующую колонку
			мПользовательскиеНастройкиСтраниц.Колонки.Удалить(мПользовательскиеНастройкиСтраниц.Колонки.Индекс(ТекКолонка));

			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла;

	// Обновляем строки дерева значений - пользовательских настроек:
	//
	// добавляем новые строки и удаляем лишние:
	Если мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() <> мПользовательскиеНастройкиСтраниц.Строки.Количество() Тогда

		КолвоКолонок     = РеквизитФормыВЗначение("мДеревоСтраницОтчета").Колонки.Количество();

		// добавляем новые строки
		Для каждого Строка Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

			Если мПользовательскиеНастройкиСтраниц.Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				НоваяСтрока = мПользовательскиеНастройкиСтраниц.Строки.Добавить();
				Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл
				
					НоваяСтрока[НомКолонки] = Строка[НомКолонки];
				
				КонецЦикла;

			КонецЕсли;

			// обновляем строки второго уровня
			Если Строка.Строки.Количество() > 0 Тогда

				Для каждого Строка2 Из Строка.Строки Цикл

					Если мПользовательскиеНастройкиСтраниц.Найти(Строка2.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

						НоваяСтрока2 = НоваяСтрока.Строки.Добавить();
						Для НомКолонки = 0 По (КолвоКолонок - 1) Цикл

							НоваяСтрока2[НомКолонки] = Строка2[НомКолонки];

						КонецЦикла;

					КонецЕсли;

				КонецЦикла; 

			КонецЕсли; 

		КонецЦикла;

		// удаляем лишние строки
		Для каждого Строка Из мПользовательскиеНастройкиСтраниц Цикл

			Если РеквизитФормыВЗначение("мДеревоСтраницОтчета").Найти(Строка.ИмяСтраницы, "ИмяСтраницы") = Неопределено Тогда

				мПользовательскиеНастройкиСтраниц.Строки.Удалить(мПользовательскиеНастройкиСтраниц.Строки.Индекс(Строка));

			КонецЕсли;

		КонецЦикла;

		ЕстьИзменения = Истина;
	КонецЕсли;

	Для каждого ТекСтрока Из мДеревоСтраницОтчета.ПолучитьЭлементы() Цикл

		НомСтр = мДеревоСтраницОтчета.ПолучитьЭлементы().Индекс(ТекСтрока);

		// устанавливаем признаки предопределенных установок выгружаемых страниц (значение флажка = 2);
		Если ТекСтрока.ВыгрузитьСтраницу = 2 Тогда
			
			Если мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу <> 2 Тогда
				мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ВыгрузитьСтраницу = 2;
				ЕстьИзменения = Истина;
			КонецЕсли;

		КонецЕсли;

		// обновляем представление
		Если ТекСтрока.Представление <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].Представление = ТекСтрока.Представление;
			ЕстьИзменения = Истина;
		КонецЕсли;

		// обновляем имя поля табличного документа
		Если ТекСтрока.ИмяПоляТабличногоДокум <> мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум Тогда
			мПользовательскиеНастройкиСтраниц.Строки[НомСтр].ИмяПоляТабличногоДокум = ТекСтрока.ИмяПоляТабличногоДокум;
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЦикла; 

	ЗначениеВРеквизитФормы(мПользовательскиеНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");

	Возврат ЕстьИзменения;

КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ПолеТабличногоДокументаТитульный = ТабличныйДокумент;
	
	НомерМесяца   = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=М");
	Если НомерМесяца = "12" Тогда
		НомерМесяца = "0";
	КонецЕсли;

	НомерКвартала = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=к");
	НомерГода     = Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=гггг");

	// Отображаем на титульном листе отчетный период
	Если СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		
		ПолеТабличногоДокументаТитульный.Области.НалогПериод.Значение = "1";
		// в этой форме нет НомераКвартала
		ПолеТабличногоДокументаТитульный.Области.НомКвартал.Значение = Формат(Число(?(НомерМесяца="0","12",НомерМесяца)), "ЧЦ=2; ЧВН=");
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = РегламентированнаяОтчетностьВызовСервера.ПредставлениеФинансовогоПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Ложь");
		
	Иначе
		
		ПолеТабличногоДокументаТитульный.Области.НомКвартал.Значение = Формат(Число(НомерКвартала), "ЧЦ=2; ЧВН=");

		Если НомерКвартала = "4" Тогда
			ПолеТабличногоДокументаТитульный.Области.НалогПериод.Значение = "0";
		КонецЕсли;

		Если НомерКвартала = "3" Тогда
			ПолеТабличногоДокументаТитульный.Области.НалогПериод.Значение = "9";
		КонецЕсли;

		Если НомерКвартала = "2" Тогда
			ПолеТабличногоДокументаТитульный.Области.НалогПериод.Значение = "6";
		КонецЕсли;

		Если НомерКвартала = "1" Тогда
			ПолеТабличногоДокументаТитульный.Области.НалогПериод.Значение = "3";
		КонецЕсли;
		
		СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
		
	КонецЕсли;

	ПолеТабличногоДокументаТитульный.Области.ОтчетГод.Значение   = НомерГода;
				
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если Форма.СтруктураРеквизитовФормы.Организация = Неопределено ИЛИ Форма.СтруктураРеквизитовФормы.Организация
		= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Сведения = Новый СписокЗначений;
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "КППЮЛ");
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ОГРН");
		Сведения.Добавить("", "ОКАТО");
		Сведения.Добавить("", "ОКТМО");
		Сведения.Добавить("", "КодНО");
		Сведения.Добавить("", "НаимНО");
		Сведения.Добавить("", "ТипНП");
		Сведения.Добавить("", "ТелОрганизации");
		
	КонецЕсли;
	
	Сведения.Добавить("", "ФИОРук");
	Сведения.Добавить("", "ИННРук");
	Сведения.Добавить("", "ФИОБух");
	Сведения.Добавить("", "ИННБух");
	Сведения.Добавить("", "ФИОУпПред");
	Сведения.Добавить("", "ИННУпПред");
	Сведения.Добавить("", "ФИО");
	
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Сведения);
		
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		КодНО = ОргСведения.КодНО;
		КПП   = ОргСведения.КППЮЛ;
	Иначе
		КодНО = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;
		КПП   = Форма.ТабличныйДокумент.Области.КПП.Значение;
	КонецЕсли;
	
	ДанныеПредставителя = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОПредставителе(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, Ложь, КодНО, КПП);
		
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ИННЮЛ          = "";
		КППЮЛ          = "";
		НаимЮЛПол      = "";
		ОГРН           = "";
		ОКАТО          = "";
		ОКТМО          = "";
		КодНО          = "";
		НаимНО         = "";
		ТипНП          = "";
		ТелОрганизации = "";
		
	КонецЕсли;
	
	ФИОРук    = "";
	ИННРук    = "";
	ФИОБух    = "";
	ИННБух    = "";
	ФИОУпПред = "";
	ИННУпПред = "";
	ФИО       = "";
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
		ОргСведения.Свойство("КППЮЛ", КППЮЛ);
		ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол);
		ОргСведения.Свойство("ОГРН", ОГРН);
		ОргСведения.Свойство("ОКАТО", ОКАТО);
		ОргСведения.Свойство("ОКТМО", ОКТМО);
		ОргСведения.Свойство("КодНО", КодНО);
		ОргСведения.Свойство("НаимНО", НаимНО);
		ОргСведения.Свойство("ТипНП", ТипНП);
		ОргСведения.Свойство("ТелОрганизации", ТелОрганизации);
		
	КонецЕсли;
	
	ОргСведения.Свойство("ФИОРук", ФИОРук);
	ОргСведения.Свойство("ИННРук", ИННРук);
	ОргСведения.Свойство("ФИОБух", ФИОБух);
	ОргСведения.Свойство("ИННБух", ИННБух);
	ОргСведения.Свойство("ФИОУпПред", ФИОУпПред);
	ОргСведения.Свойство("ИННУпПред", ИННУпПред);
	ОргСведения.Свойство("ФИО", ФИО);
	
	ФИОУпПред = ДанныеПредставителя.ФИОУпПред;
	ИННУпПред = ДанныеПредставителя.ИННУпПред;
	
	Если Форма.СтруктураРеквизитовФормы.ИП Тогда
		
		НаимЮЛПол = ФИО;
		
		ФИОРук = "";
		ИННРук = "            ";
		Форма.СтруктураРеквизитовФормы.мИННДиректор = "            ";
		
		ФИОБух = "";
		ИННБух = "            ";
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = "            ";
		
		ФИОУпПред = "";
		ИННУпПред = "            ";
		Форма.СтруктураРеквизитовФормы.мИННУпПред = "            ";
		
	КонецЕсли;
	
	Если ВПрограммеИзмененаДатаПодписи Тогда
		
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
		Форма.ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;
		
		Форма.СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;
		
		Форма.ТабличныйДокумент.Области["ИННРук"].Значение = ИННРук;
		Форма.ТабличныйДокумент.Области["ИННГБ"].Значение = ИННБух;
		Форма.ТабличныйДокумент.Области["ИННУП"].Значение = ИННУпПред;
		
		Возврат;
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.мТелОрганизации = ТелОрганизации;
	
	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен)
	 ИЛИ Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		Форма.ТабличныйДокумент.Области["ИНН"].Значение = ИННЮЛ;
		Форма.ТабличныйДокумент.Области["КПП"].Значение = КППЮЛ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, "0");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, " ");
	КонецЕсли;
	
	Форма.СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");
	Форма.СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;
	
	Признаки = Форма.ТабличныйДокумент.Области.ТипОрг1.Значение
			 + Форма.ТабличныйДокумент.Области.ТипОрг2.Значение
			 + Форма.ТабличныйДокумент.Области.ТипОрг3.Значение;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ НЕ ЗначениеЗаполнено(Признаки) Тогда
		Если ТипНП = 1 Тогда
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "V";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "";
		ИначеЕсли ТипНП = 3 Тогда
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "V";
		ИначеЕсли ТипНП = 5 Тогда
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "V";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "";
		Иначе
			Форма.ТабличныйДокумент.Области.ТипОрг1.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг2.Значение = "";
			Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргНазв.Значение) Тогда
		Форма.ТабличныйДокумент.Области.ОргНазв.Значение = НаимЮЛПол;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.КодТелНА.Значение) Тогда
		Форма.ТабличныйДокумент.Области.КодТелНА.Значение = ТелОрганизации;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение) Тогда
		Форма.ТабличныйДокумент.Области.ОргДиректор.Значение = ФИОРук;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННДиректор) Тогда
		Форма.ТабличныйДокумент.Области["ИННРук"].Значение = ИННРук;
		Форма.СтруктураРеквизитовФормы.мИННДиректор = ИННРук;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение) Тогда
		Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение = ФИОБух;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		Форма.ТабличныйДокумент.Области["ИННГБ"].Значение = ИННБух;
		Форма.СтруктураРеквизитовФормы.мИННБухгалтер = ИННБух;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргУП.Значение) Тогда
		Форма.ТабличныйДокумент.Области.ОргУП.Значение = ФИОУпПред;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мИННУпПред) Тогда
		Форма.ТабличныйДокумент.Области["ИННУП"].Значение = ИННУпПред;
		Форма.СтруктураРеквизитовФормы.мИННУпПред = ИННУпПред;
	КонецЕсли;
	
	Если ТипНП <> 3 И (Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргОГРН)) Тогда
		ОГРН = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ОГРН, ?(ТипНП = 3, 15, 13), " ");
		Форма.ТабличныйДокумент.Области["ОГРН"].Значение = ОГРН;
		Форма.СтруктураРеквизитовФормы.мОргОГРН = ОГРН;
	КонецЕсли;

	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация И ТипНП = 3 Тогда
		Форма.СтруктураРеквизитовФормы.мОргОГРН = "             ";
		Форма.ТабличныйДокумент.Области["ОГРН"].Значение = Форма.СтруктураРеквизитовФормы.мОргОГРН;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОКАТОРаздел1) Тогда
		Если (НЕ Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация)
			И (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен) Тогда
			ИспользуетсяОКТМО = (Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-12-01');
			КодТерриториальногоОбразования = ?(ИспользуетсяОКТМО, ОКТМО, ОКАТО);
			КодТерриториальногоОбразования = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодТерриториальногоОбразования, 11, " ");
			Форма.СтруктураРеквизитовФормы.мОКАТОРаздел1 = КодТерриториальногоОбразования;
			РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Раздел1", "ОКАТО", 11, КодТерриториальногоОбразования);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.СтруктураРеквизитовФормы.мОргКодИМНС) Тогда
		КодНО = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КодНО, 4, " ");
		Форма.ТабличныйДокумент.Области["КодИМНС"].Значение = КодНО;
		Форма.СтруктураРеквизитовФормы.мОргКодИМНС = КодНО;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ ПустаяСтрока(Форма.ТабличныйДокумент.Области.ОргИМНС.Значение) Тогда
		Форма.ТабличныйДокумент.Области.ОргИМНС.Значение = НаимНО;
	КонецЕсли;
	
	Если (НЕ Форма.СтруктураРеквизитовФормы.мДокументВосстановлен)
	 ИЛИ Форма.СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Тогда
		ЗаполнитьДатуВЯчейках(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
    	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)

	ДатаПодписиРук = "        ";
	ДатаПодписиБух = "        ";
	ДатаПодписиУпПред = "        ";
		
	Если Мин(НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ОргДиректор.Значение),НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мИННДиректор)) = 0 Тогда
		ДатаПодписиРук = Форма.ДатаПодписи; 
	КонецЕсли;

	Если Мин(НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ОргБухгалтер.Значение),НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мИННБухгалтер)) = 0 Тогда
		ДатаПодписиБух = Форма.ДатаПодписи;
	КонецЕсли;
	
	Если Мин(НЕ ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.ОргУП.Значение),НЕ ЗначениеЗаполнено(Форма.СтруктураРеквизитовФормы.мИННУпПред)) = 0 Тогда
		ДатаПодписиУпПред = Форма.ДатаПодписи;
	КонецЕсли;

	ФЛ = ?(Форма.ТабличныйДокумент.Области.ТипОрг3.Значение = "V", Истина, Ложь);

	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
    	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	// Собираем в список значений имена вычисляемых показателей,
	// которые участвуют в расчете других показателей отчета по
	// внутренним связям между страницами декларации.
	// При создании коллекции значений редактируемых полей табличного
	// документа они не будут игнорированы, а их значения будут собраны
	// в структуру. Такой алгоритм имеет назначение ускорить вычислительные
	// процессы.
	//
	// В противном случае нам пришлось для получения итогового значения
	// вычисляемого показателя по всем страницам многостраничного раздела
	// вызвать процедуру расчета по каждой странице.
	//
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			ИмяПоказателя      = ТекущаяОбласть.Имя;
			ЗначениеПоказателя = ТекущаяОбласть.Значение;

			СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЕсли;
     
	КонецЦикла;

	Если ИмяТабличногоПоля = "Раздел1" Тогда

		СтруктураДанныхПоля.Вставить("КодСтраныРаздел1"  , Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел1);
		СтруктураДанныхПоля.Вставить("ИННРаздел1"  , Форма.СтруктураРеквизитовФормы.мИННРаздел1);
		СтруктураДанныхПоля.Вставить("КБКРаздел1"  , Форма.СтруктураРеквизитовФормы.мКБКРаздел1);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел1"  , Форма.СтруктураРеквизитовФормы.мОКАТОРаздел1);

	ИначеЕсли ИмяТабличногоПоля = "Раздел2" Тогда

		СтруктураДанныхПоля.Вставить("КБКРаздел2"  , Форма.СтруктураРеквизитовФормы.мКБКРаздел2);
		СтруктураДанныхПоля.Вставить("ОКАТОРаздел2"  , Форма.СтруктураРеквизитовФормы.мОКАТОРаздел2);

	КонецЕсли;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		СтруктураДанныхТитульный.Вставить("КодИМНС", ТабличныйДокумент.Области.КодИМНС.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.КодИМНС;
	КПП = СтруктураДанныхТитульный.КПП;

                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
						
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
								
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;

	// установим текущие значения реквизитов документа	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант 								  = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();

	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив;
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
		
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
                        	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
    
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
		
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	    
	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мКодСтраныРаздел1",  СтруктураРеквизитовФормы.мКодСтраныРаздел1);
	ПеременныеМодуля.Вставить("мИННРаздел1", СтруктураРеквизитовФормы.мИННРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел1", СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мОКАТОРаздел1", СтруктураРеквизитовФормы.мОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел2", СтруктураРеквизитовФормы.мКБКРаздел2);
	ПеременныеМодуля.Вставить("мОКАТОРаздел2", СтруктураРеквизитовФормы.мОКАТОРаздел2);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мКодСтраныРаздел1 = ПеременныеМодуля.мКодСтраныРаздел1;
	СтруктураРеквизитовФормы.мИННРаздел1       = ПеременныеМодуля.мИННРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел1       = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мОКАТОРаздел1     = ПеременныеМодуля.мОКАТОРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел2       = ПеременныеМодуля.мКБКРаздел2;
	СтруктураРеквизитовФормы.мОКАТОРаздел2     = ПеременныеМодуля.мОКАТОРаздел2;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мКодСтраныРаздел1",  СтруктураРеквизитовФормы.мКодСтраныРаздел1);
	ПеременныеМодуля.Вставить("мИННРаздел1", СтруктураРеквизитовФормы.мИННРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел1", СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мОКАТОРаздел1", СтруктураРеквизитовФормы.мОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел2", СтруктураРеквизитовФормы.мКБКРаздел2);
	ПеременныеМодуля.Вставить("мОКАТОРаздел2", СтруктураРеквизитовФормы.мОКАТОРаздел2);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мКодСтраныРаздел1 = ПеременныеМодуля.мКодСтраныРаздел1;
	СтруктураРеквизитовФормы.мИННРаздел1       = ПеременныеМодуля.мИННРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел1       = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мОКАТОРаздел1     = ПеременныеМодуля.мОКАТОРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел2       = ПеременныеМодуля.мКБКРаздел2;
	СтруктураРеквизитовФормы.мОКАТОРаздел2     = ПеременныеМодуля.мОКАТОРаздел2;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
		
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюТД = Элементы.ТабличныйДокументКонтекстноеМеню;
	
	Если Элемент.ТекущиеДанные.РазделМногостраничный  Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		КМенюРО.Видимость = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;	
		
		Если НЕ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
			
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
		 	 ИЛИ Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда	
			 
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
				
			Иначе
				
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаУдалитьСтраницу.Видимость  = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюКнопкаДобавитьСтраницу.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность           = Истина;
	Иначе
		Элементы.Обновить.Доступность           = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1"
	 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	Иначе 
		КМенюТД.ПодчиненныеЭлементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.СпрятатьСсылкуУдалитьСтраницу(ЭтаФорма);
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
						
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	// Многостраничные разделы.
	//
	Если НаимРаздела = "ФизЛица" Тогда
	     			
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "ФизЛица" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛица";
				
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многостраничные и многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1"
		  ИЛИ НаимРаздела = "Раздел2" Тогда	
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
									
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность);
						
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
				
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многостраничные разделы.
	//
	Если ИмяТекРаздела = "ФизЛица" Тогда
		
		НаимТаблицыСтраницы = "ТаблицаСтраницыФизЛица";
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
	    КонецЦикла;
						
	// Многостраничные и многострочные разделы.
	//	
	ИначеЕсли ИмяТекРаздела = "Раздел1"
		  ИЛИ ИмяТекРаздела = "Раздел2" Тогда
		  
		Если ИмяТекРаздела = "Раздел1" Тогда
			  
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела1";
			
		ИначеЕсли ИмяТекРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
								
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
								
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	// Обычные разделы.
	//	
	Иначе
	строкаПрв = "СтруктураДанных" + ИмяТекРаздела;
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;	
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		УстановитьФорматВыводаНаСервере(ИмяТекРаздела);
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", НужнаяСтрокаИлиКолонка = Неопределено) Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, НужнаяСтрокаИлиКолонка);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", НужнаяСтрокаИлиКолонка = Неопределено) Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, НужнаяСтрокаИлиКолонка);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", НужнаяСтрокаИлиКолонка = Неопределено)

	// Процедура пустая, для совместимости
	Пусто = Неопределено;
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	ЗаполнитьСведенияОбФЛ();
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
	ОбновитьНаСервере();
	СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
	Модифицированность = Истина;
                  
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ДатаПодписи = Неопределено;
		ТабличныйДокумент.Области.НомКоррект.Значение = НомерКорректировки;
		ТабличныйДокумент.Области.ДатаПодписи.Значение = ДатаПодписи;
		ТабличныйДокумент.Области.ВидДок.Значение = "1";
		СтруктураРеквизитовФормы.ВидДокумента = 0;
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "ФизЛица" Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ОтключитьАвтоРасчет", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма, "дляВыбораСтраницОтчета");

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда	
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		#Если ВебКлиент Тогда
			ИзменитьТаблицуВариантовЗаполненияНаСервере();
		#Иначе
			РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
		#КонецЕсли	
		
	КонецЕсли;
	
	Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
		ПослеСменыЕдИзмеренияИТочности();
	КонецЕсли;
	
	// Управляем видимостью страниц основной панели формы
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			// Пытаемся найти ранее запомненный раздел.
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено 
				И НЕ НомерСтраницыРазделаОтчета = Неопределено 
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			// В случае успешного поиска, устанавливаем курсор на найденный раздел.
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСменыЕдИзмеренияИТочности()

	ПроверитьТочность();
	УстановитьФорматВыводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	#Если ВебКлиент Тогда
		РасчетНаСервере();
	#Иначе
		РасчетНаКлиенте();
	#КонецЕсли
    
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в рублях точность не может превышать 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах рублей точность не может превышать 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах рублей точность не может превышать 6 знаков'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доп. страницы с данными физических лиц формируются автоматически, в случае, если у руководителя, гл. бухгалтера или уполномоченного лица нет ИНН.%1Формирование происходит при первоначальном открытии отчета или по нажатию на кнопку ""Обновить"", которая находится на верхней командной панели формы отчета.'"), Символы.ПС));
				 
		Возврат;		 
				 
	КонецЕсли;			 

	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса =  НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
	КонецЕсли;
	
	ИзменитьТаблицуПараметровАвтозаполненияИУдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
		СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
		
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
	Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Ложь;
		Обл.Текст = "";
	Иначе
		Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
		Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
		Обл.Гиперссылка = Истина;
		Обл.Текст = "Удалить страницу";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполненияИУдалитьДополнительнуюСтраницуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ИзменитьТаблицуПараметровАвтозаполненияНаСервере(-1, КолонкаРазделыОтчетаСокрНаим);
	УдалитьДополнительнуюСтраницуНаСервере(КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
				
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	// Предварительно проверим наличие дополнительных строк,
	// в заданном поле табличного документа.
	// При наличии таких строк удаляем их.
	ВыбТабличноеПоле = Форма["ТабличныйДокумент"];
	ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ВыбТабличноеПолеИмя);
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		// Поле табличного документа содержит многострочный раздел.
		
		// Получим таблицу значений, содержащую данные дополнительных строк.
		
		Форма.УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок);

		Форма["ТабличныйДокумент"] = ВыбТабличноеПоле;

		
	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];
		
		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ВыбТабличноеПолеИмя <> "ПолеТабличногоДокументаФизЛица") Тогда
			//  Для ФизЛица защищенные ячейки нужно очищать, кроме ИНН КПП
			Если ТекущаяОбласть.Защита Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если (СтрНайти(ТекущаяОбласть.Имя, "ИНН1_") > 0 ) Или (СтрНайти(ТекущаяОбласть.Имя, "КПП1_") > 0 ) Тогда
				Если ТекущаяОбласть.Защита Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
				
	КонецЦикла; 
	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мКодСтраныРаздел1", Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел1);
	ПеременныеМодуля.Вставить("мИННРаздел1",       Форма.СтруктураРеквизитовФормы.мИННРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел1",       Форма.СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мОКАТОРаздел1",     Форма.СтруктураРеквизитовФормы.мОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел2",       Форма.СтруктураРеквизитовФормы.мКБКРаздел2);
	ПеременныеМодуля.Вставить("мОКАТОРаздел2",     Форма.СтруктураРеквизитовФормы.мОКАТОРаздел2);
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрЗаменить(ВыбТабличноеПолеИмя, "ПолеТабличногоДокумента", ""), ПеременныеМодуля);
	
	Форма.СтруктураРеквизитовФормы.мКодСтраныРаздел1 = ПеременныеМодуля.мКодСтраныРаздел1;
	Форма.СтруктураРеквизитовФормы.мИННРаздел1       = ПеременныеМодуля.мИННРаздел1;
	Форма.СтруктураРеквизитовФормы.мКБКРаздел1       = ПеременныеМодуля.мКБКРаздел1;
	Форма.СтруктураРеквизитовФормы.мОКАТОРаздел1     = ПеременныеМодуля.мОКАТОРаздел1;
	Форма.СтруктураРеквизитовФормы.мКБКРаздел2       = ПеременныеМодуля.мКБКРаздел2;
	Форма.СтруктураРеквизитовФормы.мОКАТОРаздел2     = ПеременныеМодуля.мОКАТОРаздел2;
	
	Если ИмяГруппыДопСтрок <> Неопределено Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппыДопСтрок);

		ИмяСтраницыПанели = СтрЗаменить(ТекущаяОбласть.Имя, "ПолеТабличногоДокумента", "");

		// Пересчитаем автоматически вычисляемые ячейки таблицы.
		Расчет(Форма, ИмяСтраницыПанели);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеобходимоеКоличествоДопСтрокНаСервере(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок) Экспорт
	
	// Получим таблицу значений, содержащую данные дополнительных строк.
	ПромТаблицаДопСтрокРаздела = Неопределено;
	мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
	
	ПромТаблицаДопСтрокРаздела = ЭтаФорма[ПромТаблицаДопСтрокРаздела];
	
	ИсходноеКоличествоСтрокГруппы = 0;
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппыДопСтрок, ИсходноеКоличествоСтрокГруппы);
	
	ТекущееКоличествоСтрок = ПромТаблицаДопСтрокРаздела.Количество();
	
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда
		// Имеются дополнительные строки.
		// Удаляем их.
		
		НСтр = ПромТаблицаДопСтрокРаздела.Количество();
		
		Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
			
			ТекСтрокаТаблицы = ПромТаблицаДопСтрокРаздела[НСтр - 1];
			
			ИмяПервойКолонки = ИмяГруппыДопСтрок + "01_";
			ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + НСтр;
			
			// область первой ячейки удаляемой строки многострочного раздела
			ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
			
			НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
			НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
			
			РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ВыбТабличноеПоле, ВыбТабличноеПолеИмя, ИмяГруппыДопСтрок, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
			
			// удаляем из структуры многострочного раздела соответствующую строку
			ПромТаблицаДопСтрокРаздела.Удалить(ТекСтрокаТаблицы);
			
			НСтр = НСтр - 1;
						
		КонецЦикла;	
		
		Если ВыбТабличноеПоле.Области.Найти("МногострочнаяЧасть") = Неопределено Тогда
			
			ВыбТабличноеПоле.Область(НомерВерхЯчейкиОбласти - 1, , НомерНижнЯчейкиОбласти - 1).Имя = "МногострочнаяЧасть";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

    ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мКодСтраныРаздел1", СтруктураРеквизитовФормы.мКодСтраныРаздел1);
	ПеременныеМодуля.Вставить("мИННРаздел1",       СтруктураРеквизитовФормы.мИННРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел1",       СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мОКАТОРаздел1",     СтруктураРеквизитовФормы.мОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел2",       СтруктураРеквизитовФормы.мКБКРаздел2);
	ПеременныеМодуля.Вставить("мОКАТОРаздел2",     СтруктураРеквизитовФормы.мОКАТОРаздел2);
		
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мКодСтраныРаздел1 = ПеременныеМодуля.мКодСтраныРаздел1;
	СтруктураРеквизитовФормы.мИННРаздел1       = ПеременныеМодуля.мИННРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел1       = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мОКАТОРаздел1     = ПеременныеМодуля.мОКАТОРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел2       = ПеременныеМодуля.мКБКРаздел2;
	СтруктураРеквизитовФормы.мОКАТОРаздел2     = ПеременныеМодуля.мОКАТОРаздел2;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мКодСтраныРаздел1", СтруктураРеквизитовФормы.мКодСтраныРаздел1);
	ПеременныеМодуля.Вставить("мИННРаздел1",       СтруктураРеквизитовФормы.мИННРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел1",       СтруктураРеквизитовФормы.мКБКРаздел1);
	ПеременныеМодуля.Вставить("мОКАТОРаздел1",     СтруктураРеквизитовФормы.мОКАТОРаздел1);
	ПеременныеМодуля.Вставить("мКБКРаздел2",       СтруктураРеквизитовФормы.мКБКРаздел2);
	ПеременныеМодуля.Вставить("мОКАТОРаздел2",     СтруктураРеквизитовФормы.мОКАТОРаздел2);
		
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мКодСтраныРаздел1 = ПеременныеМодуля.мКодСтраныРаздел1;
	СтруктураРеквизитовФормы.мИННРаздел1       = ПеременныеМодуля.мИННРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел1       = ПеременныеМодуля.мКБКРаздел1;
	СтруктураРеквизитовФормы.мОКАТОРаздел1     = ПеременныеМодуля.мОКАТОРаздел1;
	СтруктураРеквизитовФормы.мКБКРаздел2       = ПеременныеМодуля.мКБКРаздел2;
	СтруктураРеквизитовФормы.мОКАТОРаздел2     = ПеременныеМодуля.мОКАТОРаздел2;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТаблицаСтраницыРаздела1.Очистить();
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыФизЛица.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	Если НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный"
	   И НЕ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ФизЛица" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
		
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Команда = ДополнительныеПараметры.Команда;
		
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
        	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки Тогда
    	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
		
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
			
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		СохрТЗМногострочнойГруппы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
				
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
	
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1].Загрузить(СохрТЗМногострочнойГруппы);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2].Загрузить(СохрТЗМногострочнойГруппы);
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписиРук = Новый Массив(8);
	МассивДатаПодписиБух = Новый Массив(8);
	МассивДатаПодписиУпП = Новый Массив(8);
	МассивИННРук		 = Новый Массив(12);
	МассивИННБух 		 = Новый Массив(12);
	МассивИННУП 		 = Новый Массив(12);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = "00" + СтрИНН;
		КонецЕсли;
				
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННРук");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННРук[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННГБ");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННБух[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Область = ИсходныйМакет.Области.Найти("ИННУП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивИННУП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргДиректор.Значение) Тогда
				МассивДатаПодписиРук[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргБухгалтер.Значение) Тогда
				МассивДатаПодписиБух[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			КонецЕсли;	
			Если ЗначениеЗаполнено(ИсходныйМакет.Области.ОргУП.Значение) Тогда
				МассивДатаПодписиУпП[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
		
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиРук", МассивДатаПодписиРук);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиБух", МассивДатаПодписиБух);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписиУпП", МассивДатаПодписиУпП);	
	ОбщиеРеквизитыРазделов.Вставить("ИННРук", МассивИННРук);	
	ОбщиеРеквизитыРазделов.Вставить("ИННГБ",  МассивИННБух);	
	ОбщиеРеквизитыРазделов.Вставить("ИННУП",  МассивИННУП);	
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПечатнуюФорму(ПараметрыПечати, МакетПечатнойФормы, ОбщиеРеквизитыРазделов)
	
	ИсходныйМакет = ТабличныйДокумент;
		
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда
			
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ИНН") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "КПП") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ДатаПодписи") > 0 Тогда
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКвартал") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ОтчетГод") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "КодИМНС") > 0
					  ИЛИ Область.Имя = "ОГРН"
					  ИЛИ СтрЧислоВхождений(Область.Имя, "Прил") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННРук") > 0
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННГБ") > 0 
					  ИЛИ СтрЧислоВхождений(Область.Имя, "ИННУП") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				ИначеЕсли СтрЧислоВхождений(Область.Имя, "НомКоррект") > 0 Тогда
					
					НомерКорр = Область.Значение;
					
					МакетПечатнойФормы.Области[Область.Имя].Значение = ?(НомерКорр = 0, " ", НомерКорр);
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "ФизЛица" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "ФизЛицДатаРожд") > 0 
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДокДата") > 0 Тогда
					
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						СтрокаДт =  Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
						Для Ном = 1 По СтрДлина(СтрокаДт) Цикл
							
							МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(СтрокаДт, Ном, 1);
							
						КонецЦикла;
						
					КонецЕсли;
					
					Продолжить;	
				ИначеЕсли (СтрЧислоВхождений(Область.Имя, "ФизЛицКодГражд") > 0
                    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицИнд") > 0  
					ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицДок") > 0
				    ИЛИ СтрЧислоВхождений(Область.Имя, "ФизЛицС") > 0) 
					И (Область.Имя<>"ФизЛицДокВид") И (Область.Имя<>"ФизЛицДокВыдан")  
					И (Область.Имя<>"ФизЛицДокСерияНомер") 
					И (Область.Имя<>"ФизЛицСлТел")  И (Область.Имя<>"ФизЛицСубъект") Тогда
					
					Если Не ПустаяСтрока(Область.Значение) Тогда
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					КонецЕсли;
					Продолжить;     				
					
				КонецЕсли;

			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел1" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "КодСтраны") > 0
					ИЛИ СтрЧислоВхождений(Область.Имя, "ИННИнОрг") > 0
				    ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
			
			ИначеЕсли ПараметрыПечати.ИмяСтраницы = "Раздел2" Тогда
				
				Если СтрЧислоВхождений(Область.Имя, "КБК") > 0
				 ИЛИ СтрЧислоВхождений(Область.Имя, "ОКАТО") > 0 Тогда
					
					Для Ном = 1 По СтрДлина(Область.Значение) Цикл
						
						МакетПечатнойФормы.Области[Область.Имя + Ном].Значение = Сред(Область.Значение, Ном, 1);
						
					КонецЦикла;
					
					Продолжить;
					
				КонецЕсли;
            КонецЕсли;
			МакетПечатнойФормы.Области[Область.Имя].Значение = Область.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Для Каждого Реквизит Из ОбщиеРеквизитыРазделов Цикл
		
		Индекс = 1;
		Постфикс = "_1";
		Разделитель = Истина;
		
		Если Реквизит.Ключ = "ДатаПодписиРук" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиРук";
			Иначе
				НаименованиеОбласти = "ДатаПодписи1_";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиБух" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ДатаПодписиБух";
			Иначе
				НаименованиеОбласти = "ДатаПодписи1_";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ДатаПодписиУпП" Тогда
			Постфикс = "1";
			Разделитель = Ложь;
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
			НаименованиеОбласти = "ДатаПодписиУпП";
			Иначе
				НаименованиеОбласти = "ДатаПодписи1_";
			КонецЕсли;
		ИначеЕсли Реквизит.Ключ = "ИННРук" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННРук";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;	
		ИначеЕсли Реквизит.Ключ = "ИННГБ" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННГБ";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;		
		ИначеЕсли Реквизит.Ключ = "ИННУП" Тогда
			Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
				НаименованиеОбласти = "ИННУП";
				Постфикс = "1";
				Разделитель = Ложь;
			КонецЕсли;			
		Иначе
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
		КонецЕсли;
		
		Пока НЕ МакетПечатнойФормы.Области.Найти(НаименованиеОбласти + Постфикс) = Неопределено Цикл
			
			Для Ном = 1 По Реквизит.Значение.Количество() Цикл
				Если НЕ Реквизит.Значение[Ном - 1] = Неопределено Тогда
					МакетПечатнойФормы.Области[НаименованиеОбласти + ?(Разделитель, "_", "") + Ном].Значение = Реквизит.Значение[Ном - 1];
				КонецЕсли;
			КонецЦикла;
			
			Индекс = Индекс + 1;
			
			НаименованиеОбласти = Реквизит.Ключ + Индекс;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный",   "ПечатнаяФормаОтчета2007Кв1_Титульный");
	СоответствиеРазделовМакетам.Вставить("ФизЛица",     "ПечатнаяФормаОтчета2007Кв1_ФизЛица");
	СоответствиеРазделовМакетам.Вставить("Раздел1",     "ПечатнаяФормаОтчета2007Кв1_Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",     "ПечатнаяФормаОтчета2007Кв1_Раздел2");
	
	ПечатнаяФормаРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетПечатнойФормы = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ПечатнаяФормаРаздела);
	МакетПечатнойФормы.ПолеСверху = 5;
	МакетПечатнойФормы.ПолеСправа = 5;
	МакетПечатнойФормы.ПолеСнизу = 5;
	МакетПечатнойФормы.ПолеСлева = 5;
		
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если ИдГруппы <> Неопределено Тогда
		
		КолвоСтрокВТаблДок = ЭтаФорма[ИдГруппы].Количество();
		
		ОбластьМнгЧасти              = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть");
		ВысотаОбластиМнгЧасти        = МакетПечатнойФормы.ПолучитьОбласть("МногострочнаяЧасть").ВысотаТаблицы;
		ИмяОбластиПоследнейДопСтроки = ОбластьМнгЧасти.ПолучитьОбласть(ВысотаОбластиМнгЧасти, , ВысотаОбластиМнгЧасти).Области[0].Имя;
		
		КолвоСтрокВПечатнойФорме = Число(Сред(ИмяОбластиПоследнейДопСтроки, СтрНайти(ИмяОбластиПоследнейДопСтроки, "_") + 1));
				
		Если КолвоСтрокВТаблДок > КолвоСтрокВПечатнойФорме Тогда
						
			НомерВерхЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + "01_" + КолвоСтрокВПечатнойФорме).Верх;
			НомерНижнЯчейкиОбласти = МакетПечатнойФормы.Область(ИдГруппы + Формат(мСтруктураКолвоКолонокРазделов[ИдГруппы], "ЧЦ=2; ЧВН=") + "_" + КолвоСтрокВПечатнойФорме).Низ;
				
			ВставляемаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти);
			
			КолвоДопСтрок = КолвоСтрокВТаблДок - КолвоСтрокВПечатнойФорме;
									
			Для Ном = 1 По КолвоДопСтрок Цикл
							
				МакетПечатнойФормы.ВставитьОбласть(ВставляемаяОбласть, , ТипСмещенияТабличногоДокумента.ПоВертикали);
													
			КонецЦикла;
			
			Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
				НайденнаяОбласть = МакетПечатнойФормы.Области.Найти(Область.Имя);
				Если НЕ НайденнаяОбласть = Неопределено Тогда 
					НайденнаяОбласть.Имя = Лев(НайденнаяОбласть.Имя, СтрНайти(НайденнаяОбласть.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВТаблДок, "ЧЦ=3");
				КонецЕсли;
			КонецЦикла;
			
			Для Ном = 0 По КолвоДопСтрок - 1 Цикл
				
				Для Каждого Область Из МакетПечатнойФормы.ПолучитьОбласть(НомерВерхЯчейкиОбласти + КолвоДопСтрок, , НомерНижнЯчейкиОбласти + КолвоДопСтрок).Области Цикл
					НайденнаяОбласть = МакетПечатнойФормы.Область(НомерВерхЯчейкиОбласти + Ном, Область.Лево, НомерВерхЯчейкиОбласти + Ном, Область.Право);
					Если НЕ НайденнаяОбласть = Неопределено Тогда 
						НайденнаяОбласть.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_") - 1) + "_" + Формат(КолвоСтрокВПечатнойФорме + Ном, "ЧЦ=3");
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
						
		КонецЕсли;
						
	КонецЕсли;
	
	ЗаполнитьПечатнуюФорму(Парам1, МакетПечатнойФормы, ОбщиеРеквизитыРазделов);
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетПечатнойФормы);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетПечатнойФормы, СтрПоля, "Макет");

	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	ИнициализацияСоставаПоказателей();
	
	ИзвлечьДанные();
	ТаблицаСообщений.Очистить();
	Возврат (ПроверитьТитульныйЛистИСведенияОФизЛицах(Ложь) И ПроверитьПредписанныеПоказатели(Ложь));
	
КонецФункции

&НаСервере
Процедура ИзвлечьДанные()
	
	СохрСтруктура = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьТитульныйЛистИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	СтатусПроверки = 0;//возможные состояния: 0 - ошибок нет, 1 - ошибка
	ПредставлениеОтчета = "";
	
	Если БратьИзформы Тогда
		Орг = СтруктураРеквизитовФормы.Организация;
	Иначе
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			Если ВыводитьСообщения Тогда
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);

				Сообщение.Сообщить();
				
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если Данные = Неопределено Тогда
			Если ВыводитьСообщения Тогда
								
				Сообщение = Новый СообщениеПользователю;

				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1Источник данных для формирования отчета не определен!'"), ПредставлениеОтчета);

				Сообщение.Сообщить();
				
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	КонецЕсли;
		 
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы, ВыводитьСообщения);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргИНН = Орг.ИНН;
	ОргНазв = ПоказателиТитульный.ОргНазв;
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	ИННРук = СокрЛП(ПоказателиТитульный.ИННРук);
	ИННБух = СокрЛП(ПоказателиТитульный.ИННГБ);
	ИННУП = СокрЛП(ПоказателиТитульный.ИННУП);
	
	ДокПредставляется = 231;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 232;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 233;
	КонецЕсли;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);
	
	Если НЕ ЭтоПБОЮЛ Тогда
		Если ТекущаяДатаСеанса() >= '20080101' И (ПустаяСтрока(ОргУП) ИЛИ НЕ ПустаяСтрока(ОргБухгалтер)) Тогда
			Если ПустаяСтрока(ОргДиректор) Тогда
				Если ВыводитьСообщения Тогда
					СообщитьВТС("Не указаны Ф.И.О. (полностью) руководителя!", "Титульный", "ОргДиректор");  
				КонецЕсли;
				СтатусПроверки = 1;
			КонецЕсли;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргДиректор, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество руководителя содержат недопустимые символы!", "Титульный", "ОргДиректор");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргБухгалтер, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество главного бухгалтера содержат недопустимые символы!", "Титульный", "ОргБухгалтер");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргУП, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество уполномоченного представителя содержат недопустимые символы!", "Титульный", "ОргУП");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипаНаСервере(ОргИНН) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН организации!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИННРук) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННРук, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН руководителя организации!", "Титульный", "ИННРук");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИННБух) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННБух, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН главного бухгалтера!", "Титульный", "ИННГБ");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИННУП) И НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ИННУП, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН уполномоченного представителя!", "Титульный", "ИННУП");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не задано полное название организации!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ОргНазв) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Не указаны Ф.И.О. (полностью) индивидуального предпринимателя!", "Титульный", "ОргНазв");  
			КонецЕсли;
			СтатусПроверки = 1;
		ИначеЕсли РегламентированнаяОтчетность.ФИОНаписаноВерно(СтрЗаменить(ОргНазв, ",", "")) = 0 Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Фамилия, имя или отчество физического лица содержат недопустимые символы!", "Титульный", "ОргНазв");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
		Если НЕ РегламентированнаяОтчетностьВызовСервера.ИННСоответствуетТребованиямНаСервере(ОргИНН, Истина) Тогда
			Если ВыводитьСообщения Тогда
				СообщитьВТС("Неверно задан ИНН индивидуального предпринимателя!", "Титульный", "ИНН1");
			КонецЕсли;
			СтатусПроверки = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Функция ПроверитьПредписанныеПоказатели(БратьИзФормы = Истина, ВыводитьСообщения = Истина, ЧтоПроверять = "12", ПечатаемыеЛисты = Неопределено)
	
	ФормаВыводаСообщений = ЭтаФорма;
	ИмяРазделаПред = "";
	СтатусПроверки = 0;
	ПредставлениеОтчета = "";	
	Если БратьИзФормы Тогда
	Иначе		
		ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();		
		Если ДанныеОтчета = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Данные для формирования отчета не заданы. Не удалось проверить правильность заполнения!'");

			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;		
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
		
		Для Каждого ЭлементСтруктуры Из ДанныеОтчета.ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
						
		КонецЦикла;
		
		мСтруктураВариантыЗаполнения.Очистить();
			
		Для Каждого ЭлементСтруктуры Из ДанныеОтчета.ДанныеВариантовАвтоЗаполнения Цикл
			
			МассивТаблЗнач = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ];
			МассивТаблЗнач.Очистить();
			
			мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
			
			Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
				
				ТаблВарЗаполнения = МассивТаблЗнач.Добавить();
				
				ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения.ТаблицаВариантовЗаполнения);
				
			КонецЦикла;
			
		КонецЦикла;
					
		ПредставлениеОтчета = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок) + ". ";
	КонецЕсли;
	
	Показатели = РеквизитФормыВЗначение("мТаблицаСоставПоказателей", Тип("ТаблицаЗначений")).Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	
	Разделы = Новый Структура;
	ТекСостРазд = Неопределено;
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СтруктураРеквизитовФормы.МногострочныеИсключения = Новый СписокЗначений;
	Для Каждого Разд Из Разделы Цикл
		
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		
		Если РазделПуст(Разд, ПоказателиОтчета) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Призн = "#" Тогда //раздел многостранично-многострочный
			
			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							//проверка на то, что строка пустая
							СтрокаПустая = Истина;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									Если РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
										СтрокаПустая = Ложь;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							//конец проверки
							
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ном, , ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
								Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
									СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
								КонецЕсли;
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
					КонецЕсли;
				КонецЦикла;
				
				Если СтраницаПустая = 1 Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, , , ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
					Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
						СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, НомСтр, ФормаВыводаСообщений), СтатусПроверки);
					КонецЕсли;
				КонецЦикла;
				
				Если ПечатаемыеЛисты <> Неопределено Тогда
					НовСтр = ПечатаемыеЛисты.Добавить();
					НовСтр.Имя = ИмяРаздела;
					НовСтр.НомерСтраницы = НомСтр;
				КонецЕсли;
				
			КонецЦикла;
			//конец выгрузки многостраничного раздела
			
		ИначеЕсли Призн = "/" Тогда //раздел многострочный
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						СтрокаПустая = Истина;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								Если  РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, Ложь, , ном, 1) = 0 Тогда
									СтрокаПустая = Ложь;
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ном, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
							Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
								СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, ТекОписатель, ЗначениеПоля, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
							КонецЕсли;
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
						Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
							СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, СтрРаздела, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Конеццикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			
			//выгрузка многостраничного раздела
			
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				Если СтрНайти(ЧтоПроверять, "1") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , , , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
				Если СтрНайти(ЧтоПроверять, "2") <> 0 Тогда
					СтатусПроверки = Макс(РегламентированнаяОтчетность.ПроверитьНаКорректность(ПредставлениеОтчета, Стр3, ЗначениеЯчейки, ВыводитьСообщения, , ФормаВыводаСообщений), СтатусПроверки);
				КонецЕсли;
			КонецЦикла;
			
			Если ПечатаемыеЛисты <> Неопределено Тогда
				НовСтр = ПечатаемыеЛисты.Добавить();
				НовСтр.Имя = ИмяРаздела;
				НовСтр.НомерСтраницы = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	Возврат (СтатусПроверки <> 1);
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(БратьИзФормы = Истина, ВыводитьСообщения = Истина)
	
	СтруктураМногостраничныхРазделов = Неопределено;
	Если БратьИзФормы Тогда
	Иначе
	    ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;

	КонецЕсли;
	
	ПоказателиТитульный = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПоказателиОтчета.ПолеТабличногоДокументаТитульный));
	
	ДанныеФизЛиц = ПолучитьДанныеФизЛиц( ?(СтруктураМногостраничныхРазделов = Неопределено, мСтруктураМногостраничныхРазделов, СтруктураМногостраничныхРазделов));
	
	СписокДляВозврата = Новый СписокЗначений;
	СписокДляВозврата.Добавить(ПоказателиТитульный);
	СписокДляВозврата.Добавить(ДанныеФизЛиц);
	
	Возврат СписокДляВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФизЛиц(СтруктураМногостраничныхРазделов = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	
	ТаблСведенийФизЛиц = Новый ТаблицаЗначений();
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицоФИО");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСлТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДомТел");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДатаР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицМестоР");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицПол");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГражданство");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодГражд");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВид");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокКод");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокСерияНомер");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокВыдан");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДокДата");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИндекс");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицСубъект");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКодСуб");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицРайон");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицГород");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицНП");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицУлица");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицДом");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКорпус");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицКвартира");
	ТаблСведенийФизЛиц.Колонки.Добавить("ФизЛицИноАдрес");
	
	Если СтруктураМногостраничныхРазделов <> Неопределено Тогда
		мСтруктураМногостраничныхРазд = РегламентированнаяОтчетность.СкопированнаяСтруктура(СтруктураМногостраничныхРазделов);
	Иначе
		мСтруктураМногостраничныхРазд = мСтруктураМногостраничныхРазделов;
	КонецЕсли;
	
	Если Не мСтруктураМногостраничныхРазд.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	Для Каждого СтрМногоСтраничныхРазделов Из ЭтаФорма[мСтруктураМногостраничныхРазд.ФизЛица] Цикл
		СтрДанных = СтрМногоСтраничныхРазделов.Данные[0].Значение;
		Если СтрДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если ПустаяСтрока(СтрДанных.ФизЛицоФИО) Тогда
			Продолжить;
		КонецЕсли;
		СтрТаблСведенийФизЛиц = ТаблСведенийФизЛиц.Добавить();
		СтрТаблСведенийФизЛиц.ФизЛицоФИО = СтрДанных.ФизЛицоФИО;
		СтрТаблСведенийФизЛиц.ФизЛицСлТел = СтрДанных.ФизЛицСлТел;
		СтрТаблСведенийФизЛиц.ФизЛицДатаР = Формат(СтрДанных.ФизЛицДатаРожд, "ДЛФ=Д");
		СтрТаблСведенийФизЛиц.ФизЛицМестоР = СтрДанных.ФизЛицМестоР;
		СтрТаблСведенийФизЛиц.ФизЛицПол = ?(СтрДанных.ФизЛицПолЖ = "V", 2, 1);
		СтрТаблСведенийФизЛиц.ФизЛицГражданство = СтрДанных.ФизЛицГражданство;
		СтрТаблСведенийФизЛиц.ФизЛицКодГражд = СтрДанных.ФизЛицКодГражд;
		СтрТаблСведенийФизЛиц.ФизЛицДокВид = СтрДанных.ФизЛицДокВид;
		СтрТаблСведенийФизЛиц.ФизЛицДокКод = СтрДанных.ФизЛицДок;
		СтрТаблСведенийФизЛиц.ФизЛицДокСерияНомер = СтрДанных.ФизЛицДокСерияНомер;
		СтрТаблСведенийФизЛиц.ФизЛицДокВыдан = СтрДанных.ФизЛицДокВыдан;
		СтрТаблСведенийФизЛиц.ФизЛицДокДата = Формат(СтрДанных.ФизЛицДокДата, "ДЛФ=Д");
		СтрТаблСведенийФизЛиц.ФизЛицИндекс = СтрДанных.ФизЛицИнд;
		СтрТаблСведенийФизЛиц.ФизЛицСубъект = СтрДанных.ФизЛицСубъект;
		СтрТаблСведенийФизЛиц.ФизЛицКодСуб = СтрДанных.ФизЛицС;
		СтрТаблСведенийФизЛиц.ФизЛицРайон = СтрДанных.ФизЛицРайон;
		СтрТаблСведенийФизЛиц.ФизЛицГород = СтрДанных.ФизЛицГород;
		СтрТаблСведенийФизЛиц.ФизЛицНП = СтрДанных.ФизЛицНП;
		СтрТаблСведенийФизЛиц.ФизЛицУлица = СтрДанных.ФизЛицУлица;
		СтрТаблСведенийФизЛиц.ФизЛицДом = СтрДанных.ФизЛицДом;
		СтрТаблСведенийФизЛиц.ФизЛицКорпус = СтрДанных.ФизЛицКорпус;
		СтрТаблСведенийФизЛиц.ФизЛицКвартира = СтрДанных.ФизЛицКвартира;
		СтрТаблСведенийФизЛиц.ФизЛицИноАдрес = СтрДанных.ФизЛицИноАдрес;
	КонецЦикла;
	
	Возврат ТаблСведенийФизЛиц;
	
КонецФункции

&НаСервере
Функция РазделПуст(Разд, ПоказателиОтчета)
	
	//Проверка на пустые разделы 
	ИмяРаздела = Разд.Ключ;
	Призн = Разд.Значение;
	СтраницаПустая = 1;

	Если Призн = "#" Тогда //раздел многостранично-многострочный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
			НомСтр = НомСтр + 1;
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				//в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда//многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
							
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
					КонецЦикла;
				КонецЕсли;//многострочный или обычный подраздел
			Конеццикла;//по подразделам
		КонецЦикла;//по страницам
	ИначеЕсли Призн = "*" Тогда //раздел многостраничный
		ТаблицаСтраницРаздела = Неопределено;
		мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		НомСтр = 0;
		Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
			НомСтр = НомСтр + 1;
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли Призн = "/" Тогда //раздел многострочный
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Подраздел Из Подразделы Цикл
			НачПоказатель = Подраздел.Ключ;
			ТипПодраздела = Подраздел.Значение;
			
			//в многострочном разделе возможны только многострочные и обычные подразделы
			Если ТипПодраздела = "/" Тогда//многострочный подраздел
				СтрФорматаПодраздела = Новый СписокЗначений;
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					СтрФорматаПодраздела.Добавить(СтрРаздела);						
				КонецЦикла;
				//определили показатели подраздела. Теперь выведем их для каждой строки
				
				ном = 1;
				ЗначениеПоля = Неопределено;
				
				ВыходИзДвойногоЦикла = Ложь;
				
				Пока Истина Цикл
					Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
						ТекОписатель = СтрФормата.Значение;
						КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
						ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
						Если НЕ ТекПок.Свойство(КодПоказателя + "_" + ном, ЗначениеПоля) Тогда	
							
							ВыходИзДвойногоЦикла = Истина;
							Прервать;
							
						КонецЕсли;
						СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, , ном, 1), СтраницаПустая);
					КонецЦикла;
					
					Если ВыходИзДвойногоЦикла Тогда
						Прервать;
					КонецЕсли;
									
					ном = ном + 1;
				КонецЦикла;
			ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
				ПодразделНайден = Ложь;
				ПервыйПроход = Истина;
				Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
					ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
					Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
						ПодразделНайден = Истина;
					КонецЕсли;
					Если НЕ ПодразделНайден Тогда
						Продолжить;
					КонецЕсли;
					Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
						Продолжить;
					КонецЕсли;
					Если ПервыйПроход Тогда
						ПервыйПроход = Ложь;
					Иначе	
						ВЗнач = Неопределено;
						Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
				КонецЦикла;
			КонецЕсли;
		Конеццикла;
	ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
		ПокТекТабПоля = Неопределено;
		Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
			Возврат Истина;
		КонецЕсли;
		ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
		СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
		Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
			КодПоказателя = Стр3.КодПоказателяПоСоставу;
			ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
			ПризнакФормата = Стр3.ТипДанныхПоказателя;
			Если КодПоказателя="###" Тогда
				Продолжить;
			ИначеЕсли КодПоказателя="===" Тогда
				Прервать;	
			КонецЕсли;
			ЗначениеЯчейки = ТекПок[ИмяЯчейки];
			СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, , , 1), СтраницаПустая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Булево(СтраницаПустая);

	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
				
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");

		Сообщение.Сообщить();

		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция УниверсальнаяВыгрузка(Текст = Неопределено, ПроверятьБлокировки = Истина) Экспорт
		
	Если НЕ ПроверитьПоказатели() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	//выводим общие сведения информационной части
	РегламентированнаяОтчетность.ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Орг, , СтруктураРеквизитовФормы.мСохраненныйДок.КПП, СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала, СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана);
	
	//выводим сведения о физ. лицах и блок "описание форм отчетности"
	ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст);
	
	//выводим предписанные показатели
	УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, Ложь);
	
	ОбработатьРезультирующийТекстВыгрузки(Текст);
	
	НомСтрКолПокФОтч = РегламентированнаяОтчетность.НайтиКолПокФОтч(Текст);
	Если НомСтрКолПокФОтч <> -1 Тогда
		Текст.ЗаменитьСтроку(НомСтрКолПокФОтч, "КолПокФОтч:" + РегламентированнаяОтчетность.ПолучитьКоличествоПоказателей(Текст));
	КонецЕсли;

	РегламентированнаяОтчетность.СтандартнаяПостобработкаТекстаВыгрузки(Текст);

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьТитульныйЛистИСведенияОФизЛицах(Текст)
	
	Данные = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		
	Орг = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	Инф = ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах(Ложь, Ложь);
	ПоказателиТитульный = Инф.Получить(0).Значение;
	
	ОргКПП = СокрЛП(ПоказателиТитульный.КПП);
	ОргИНН = Орг.ИНН;
	КодИнсп = ПоказателиТитульный.КодИМНС;
	ОГРН = СокрЛП(ПоказателиТитульный.ОГРН);
	
	ДокПредставляется = 231;
	Если НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг2) Тогда
		ДокПредставляется = 232;
	ИначеЕсли НЕ ПустаяСтрока(ПоказателиТитульный.ТипОрг3) Тогда
		ДокПредставляется = 233;
	КонецЕсли;
	
	ТелЮЛ = ПоказателиТитульный.КодТелНА;
	ОргНазв = СокрЛП(ПоказателиТитульный.ОргНазв);
	ОргДиректор = ПоказателиТитульный.ОргДиректор;
	ОргБухгалтер = ПоказателиТитульный.ОргБухгалтер;
	ОргУП = ПоказателиТитульный.ОргУП;
	
	ИННРук = СокрЛП(ПоказателиТитульный.ИННРук);
	ИННБух = СокрЛП(ПоказателиТитульный.ИННГБ);
	ИННУП = СокрЛП(ПоказателиТитульный.ИННУП);
	
	ПризнВидаДок = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 1, 3);
	Попытка
		НомКорректировки = Число(ПоказателиТитульный.НомКоррект);
	Исключение
		НомКорректировки = 0;
	Конецпопытки;
	РазницаМесяцев = Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания) - Месяц (СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала) + 1;
	Если СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность = Перечисления.Периодичность.Месяц Тогда
		ПризнОтчетногоПериода = 1;
	Иначе
		ПризнОтчетногоПериода = РазницаМесяцев % 12;
	КонецЕсли;
	НомерКварталаМесяца = ПоказателиТитульный.НомКвартал;
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(Орг);
	                                         
	Если НЕ ЭтоПБОЮЛ Тогда
		
		СведенияОФизлицах = Инф.Получить(1).Значение;
		
		Текст.ДобавитьСтроку("НаимЮЛПол:" + ВРег(СокрЛП(СтрЗаменить(ОргНазв, Символы.ПС, ""))));
		Текст.ДобавитьСтроку("ИННЮЛ:" + ОргИНН);  
		Текст.ДобавитьСтроку("КППЮЛ:" + СокрЛП(ОргКПП));
		Если НЕ ПустаяСтрока(ОГРН) Тогда
			Текст.ДобавитьСтроку("ОГРН:" + ОГРН);
		КонецЕсли;
		Текст.ДобавитьСтроку("ТелЮЛ:"  + СокрЛП(ВРЕГ(Лев(ТелЮЛ, 20))));
		Текст.ДобавитьСтроку("###");
		Текст.ДобавитьСтроку("ФИОРук:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргДиректор)); 
		Если НЕ ПустаяСтрока(ИННРук) Тогда
			Текст.ДобавитьСтроку("ИННРук:" + ИННРук);
		Иначе
			СведенияОРуководителе = СведенияОФизлицах.Найти(ОргДиректор, "ФизЛицоФИО");
			Если СведенияОРуководителе <> Неопределено Тогда
				ВставитьНеобязательныйРеквизит(Текст, "ТелРук", СокрЛП(СведенияОРуководителе.ФизЛицСлТел));
				ВставитьНеобязательныйРеквизит(Текст, "ДатаРождРук", СокрЛП(СведенияОРуководителе.ФизЛицДатаР));
				ВставитьНеобязательныйРеквизит(Текст, "МестоРождРук", СокрЛП(СведенияОРуководителе.ФизЛицМестоР));
				ВставитьНеобязательныйРеквизит(Текст, "ПолРук", СведенияОРуководителе.ФизЛицПол);
				ВставитьНеобязательныйРеквизит(Текст, "ГраждРук", СокрЛП(СведенияОРуководителе.ФизЛицГражданство));
				ВставитьНеобязательныйРеквизит(Текст, "КодГраждРук", СокрЛП(СведенияОРуководителе.ФизЛицКодГражд));
				
				Если ЗначениеЗаполнено(СведенияОРуководителе.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОРуководителе.ФизЛицДокСерияНомер) Тогда
					СведенияОДокументе = СокрЛП(СведенияОРуководителе.ФизЛицДокКод) + "," + СокрЛП(СведенияОРуководителе.ФизЛицДокСерияНомер);
					ВставитьНеобязательныйРеквизит(Текст, "УдЛичнРук", СведенияОДокументе);
				КонецЕсли;
				ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнРук", СокрЛП(СведенияОРуководителе.ФизЛицДокВыдан));
				ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнРук", СокрЛП(СведенияОРуководителе.ФизЛицДокДата));
				
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖРукРФ", ПредставлениеАдресаФЛ(СведенияОРуководителе));
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖРукРез", СокрЛП(СведенияОРуководителе.ФизЛицИноАдрес));
			КонецЕсли;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ОргБухгалтер) Тогда
			Текст.ДобавитьСтроку("ФИОБух:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргБухгалтер)); 
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИННБух) Тогда
			Текст.ДобавитьСтроку("ИННБух:" + ИННБух);
		Иначе
			СведенияОБухгалтере = СведенияОФизлицах.Найти(ОргБухгалтер, "ФизЛицоФИО");
			Если СведенияОБухгалтере <> Неопределено Тогда
				ВставитьНеобязательныйРеквизит(Текст, "ТелБух", СокрЛП(СведенияОБухгалтере.ФизЛицСлТел));
				
				Если ЗначениеЗаполнено(СведенияОБухгалтере.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОБухгалтере.ФизЛицДокСерияНомер) Тогда
					СведенияОДокументе = СокрЛП(СведенияОБухгалтере.ФизЛицДокКод) + "," + СокрЛП(СведенияОБухгалтере.ФизЛицДокСерияНомер);
					ВставитьНеобязательныйРеквизит(Текст, "УдЛичнБух", СведенияОДокументе);
				КонецЕсли;
				ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнБух", СокрЛП(СведенияОБухгалтере.ФизЛицДокВыдан));
				ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнБух", СокрЛП(СведенияОБухгалтере.ФизЛицДокДата));
				
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖБухРФ", ПредставлениеАдресаФЛ(СведенияОБухгалтере));
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖБухРез", СокрЛП(СведенияОБухгалтере.ФизЛицИноАдрес));
			КонецЕсли;
		КонецЕсли;
		Текст.ДобавитьСтроку("ФИОУпПред:" + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргУП)); 
		Если НЕ ПустаяСтрока(ИННУП) Тогда
			Текст.ДобавитьСтроку("ИННУпПред:" + ИННУП);
		Иначе
			СведенияОПредставителе = СведенияОФизлицах.Найти(ОргУП, "ФизЛицоФИО");
			Если СведенияОПредставителе <> Неопределено Тогда
				ВставитьНеобязательныйРеквизит(Текст, "ТелУпПред", СокрЛП(СведенияОПредставителе.ФизЛицСлТел));
				ВставитьНеобязательныйРеквизит(Текст, "ДатаРождУпПред", СокрЛП(СведенияОПредставителе.ФизЛицДатаР));
				ВставитьНеобязательныйРеквизит(Текст, "МестоРождУпПред", СокрЛП(СведенияОПредставителе.ФизЛицМестоР));
				ВставитьНеобязательныйРеквизит(Текст, "ПолУпПред", СведенияОПредставителе.ФизЛицПол);
				ВставитьНеобязательныйРеквизит(Текст, "ГраждУпПред", СокрЛП(СведенияОПредставителе.ФизЛицГражданство));
				ВставитьНеобязательныйРеквизит(Текст, "КодГраждУпПред", СокрЛП(СведенияОПредставителе.ФизЛицКодГражд));
				
				Если ЗначениеЗаполнено(СведенияОПредставителе.ФизЛицДокКод) ИЛИ ЗначениеЗаполнено(СведенияОПредставителе.ФизЛицДокСерияНомер) Тогда
					СведенияОДокументе = СокрЛП(СведенияОПредставителе.ФизЛицДокКод) + "," + СокрЛП(СведенияОПредставителе.ФизЛицДокСерияНомер);
					ВставитьНеобязательныйРеквизит(Текст, "УдЛичнУпПред", СведенияОДокументе);
				КонецЕсли;
				ВставитьНеобязательныйРеквизит(Текст, "ВыдУдЛичнУпПред", СокрЛП(СведенияОПредставителе.ФизЛицДокВыдан));
				ВставитьНеобязательныйРеквизит(Текст, "ДатаУдЛичнУпПред", СокрЛП(СведенияОПредставителе.ФизЛицДокДата));
				
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖУпПредРФ", ПредставлениеАдресаФЛ(СведенияОПредставителе));
				ВставитьНеобязательныйРеквизит(Текст, "АдрМЖУпПредРез", СокрЛП(СведенияОПредставителе.ФизЛицИноАдрес));
			КонецЕсли;
		КонецЕсли;
		Текст.ДобавитьСтроку("###");
	Иначе
		Текст.ДобавитьСтроку("ФИО:"   + РегламентированнаяОтчетность.СтрЗаменитьПробелы(ОргНазв)); 
		Текст.ДобавитьСтроку("ИННФЛ:" + ОргИНН);
		Текст.ДобавитьСтроку("###");
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ПризФОтч:1"); 
	Текст.ДобавитьСтроку("КНД:" + СтруктураРеквизитовФормы.КНД); 
	Текст.ДобавитьСтроку("НаимФОтч:" + ВРЕГ(СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки)); 
	Текст.ДобавитьСтроку("ВерФОтч:3.00004");
	Текст.ДобавитьСтроку("ПериодВерОтч:04.04.2007,");
	Текст.ДобавитьСтроку("ПризВидДок:" + ПризнВидаДок);
	Если ПризнВидаДок = 3 Тогда
		Текст.ДобавитьСтроку("НомерКорр:" + НомКорректировки);
	КонецЕсли;
	Текст.ДобавитьСтроку("ПризПериодОтч:"  + ПризнОтчетногоПериода);
	Текст.ДобавитьСтроку("НомерПериодОтч:" + НомерКварталаМесяца);
	Текст.ДобавитьСтроку("ГодПериодОтч:" + Формат(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),"ЧГ = 0"));
	Текст.ДобавитьСтроку("ДокПредст:" + ДокПредставляется);
	Текст.ДобавитьСтроку("ОКЕИ:383"); 
	Текст.ДобавитьСтроку("КолПокФОтч:0");//этот показатель далее меняется 
	Текст.ДобавитьСтроку("###");
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНеобязательныйРеквизит(Текст, ИмяРеквизита, ЗначениеРеквизита)
	
	Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Текст.ДобавитьСтроку(ИмяРеквизита + ":" + ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеАдресаФЛ(СведенияОФизЛице)
	
	Если ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицИндекс)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКодСуб)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицРайон)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицГород)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицНП)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицУлица)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицДом)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКорпус)
	 ИЛИ ЗначениеЗаполнено(СведенияОФизЛице.ФизЛицКвартира) Тогда
		ПредставлениеАдреса = "643"
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицИндекс)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКодСуб)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицРайон)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицГород)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицНП)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицУлица)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицДом)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКорпус)
		                    + "," + СокрЛП(СведенияОФизЛице.ФизЛицКвартира);
	Иначе
		ПредставлениеАдреса = "";
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

&НаСервере
Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей(Текст, БратьИзФормы = Истина)
	
	ДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
	ИмяРазделаПред = "";
	Разделы = Новый Структура;
	Показатели = РеквизитФормыВЗначение("мТаблицаСоставПоказателей", Тип("ТаблицаЗначений")).Скопировать();
	Показатели.Свернуть("ИмяПоляТаблДокумента, ПризнМногострочности","");
	ТекСостРазд = Неопределено;
	ФорматВыгрузки = "ЧЦ=15; ЧДЦ=0; ЧГ=0";
	
	Для Каждого Стр Из Показатели Цикл
		ИмяРаздела = Стр.ИмяПоляТаблДокумента;
		Разделы.Свойство(ИмяРаздела, ТекСостРазд);
		Призн = Стр.ПризнМногострочности;
		Если Призн = "*" Тогда
			Если (ТекСостРазд = "/") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "") Тогда
				Разделы.Вставить(ИмяРаздела, "*");
			КонецЕсли;
		ИначеЕсли Призн = "/" Тогда
			Если (ТекСостРазд = "*") Тогда
				Разделы.Вставить(ИмяРаздела, "#");
			ИначеЕсли (ТекСостРазд = Неопределено) ИЛИ (ТекСостРазд = "")Тогда
				Разделы.Вставить(ИмяРаздела, "/");
			КонецЕсли;
		ИначеЕсли Призн = "#" Тогда
			Продолжить;
		ИначеЕсли Призн = "" Тогда
			Если ТекСостРазд = Неопределено Тогда
				Разделы.Вставить(ИмяРаздела, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	//Выгружаем поочередно разделы
	Для Каждого Разд Из Разделы Цикл
		ИмяРаздела = Разд.Ключ;
		Призн = Разд.Значение;
		ПустойРаздел = РазделПуст(Разд, ПоказателиОтчета);
		Если ПустойРаздел И СтруктураРеквизитовФормы.ОбязРазделов.НайтиПоЗначению(ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Призн = "#" Тогда //раздел многостранично-многострочный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр из ТаблицаСтраницРаздела Цикл
				
				//проверка на пустую страницу раздела
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтраницаПустая = 1;
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтраницаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", СтрРаздела, ЗначениеЯчейки, Ложь, НомСтр, , 1), СтраницаПустая);
						КонецЦикла;
					КонецЕсли;//многострочный или обычный подраздел
				Конеццикла;//по подразделам
				
				Если (СтраницаПустая = 1) И (НЕ ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец проверки на пустую страницу раздела
				
				Для Каждого Подраздел Из Подразделы Цикл
					НачПоказатель = Подраздел.Ключ;
					ТипПодраздела = Подраздел.Значение;
					
					//в многострочном разделе возможны только многострочные и обычные подразделы
					Если ТипПодраздела = "/" Тогда//многострочный подраздел
						СтрФорматаПодраздела = Новый СписокЗначений;
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							СтрФорматаПодраздела.Добавить(СтрРаздела);						
						КонецЦикла;
						//определили показатели подраздела. Теперь выведем их для каждой строки
						
						ном = 1;
						ЗначениеПоля = Неопределено;
						
						ВыходИзДвойногоЦикла = Ложь;
						
						Пока Истина Цикл
							СтрокаПустая = 1;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда	
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, НомСтр, ном, 1), СтрокаПустая);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Если СтрокаПустая = 1 И ном <> 1 Тогда
								ном = ном + 1;
								Продолжить;
							КонецЕсли;
							Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
								ТекОписатель = СтрФормата.Значение;
								КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
								ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
								ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
								Если ИндексЗнакаВИмениЯчейки > 0 Тогда
									ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
								КонецЕсли;
								ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
								Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда
									
									ВыходИзДвойногоЦикла = Истина;
									Прервать;
									
								КонецЕсли;
								РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
							КонецЦикла;
							
							Если ВыходИзДвойногоЦикла Тогда
								Прервать;
							КонецЕсли;
														
							Текст.ДобавитьСтроку("###");						
							ном = ном + 1;
						КонецЦикла;
					ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
						ПодразделНайден = Ложь;
						ПервыйПроход = Истина;
						Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
							КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
							ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
							Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
								ПодразделНайден = Истина;
							КонецЕсли;
							Если НЕ ПодразделНайден Тогда
								Продолжить;
							КонецЕсли;
							Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
								Продолжить;
							КонецЕсли;
							Если ПервыйПроход Тогда
								ПервыйПроход = Ложь;
							Иначе	
								ВЗнач = Неопределено;
								Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
									Прервать;
								КонецЕсли;
							КонецЕсли;
							ЗначениеЯчейки = ТекПок[ИмяЯчейки];
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						Текст.ДобавитьСтроку("###");
					КонецЕсли;//многострочный или обычный подраздел
				КонецЦикла;//по подразделам
			КонецЦикла;//по страницам
		ИначеЕсли Призн = "*" Тогда //раздел многостраничный

			ТаблицаСтраницРаздела = Неопределено;
			мСтруктураМногостраничныхРазделов.Свойство(ИмяРаздела, ТаблицаСтраницРаздела);
			
			ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
			
			НомСтр = 0;
			Для Каждого Стр2 из ТаблицаСтраницРаздела Цикл
				ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(Стр2.Данные[0].Значение));
				НомСтр = НомСтр + 1;
				СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
				
				//проверка на пустую страницу раздела
				СтраницаПустая = 1;
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					СтраницаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", Стр3, ЗначениеЯчейки, Ложь, НомСтр, ,1 ), СтраницаПустая);
				КонецЦикла;
				Если (СтраницаПустая = 1) И (Не ПустойРаздел) Тогда
					Продолжить;
				КонецЕсли;
				//конец процерки на пустую страницу раздела
				
				Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
					КодПоказателя = Стр3.КодПоказателяПоСоставу;
					ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
					ПризнакФормата = Стр3.ТипДанныхПоказателя;
					Если КодПоказателя="###" Тогда
						Продолжить;
					ИначеЕсли КодПоказателя="===" Тогда
						Прервать;	
					КонецЕсли;
					ЗначениеЯчейки = ТекПок[ИмяЯчейки];
					РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
				КонецЦикла;
				Текст.ДобавитьСтроку("###");
			КонецЦикла;
			//конец выгрузки многостраничного раздела
		ИначеЕсли Призн = "/" Тогда //раздел многострочный

			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			Подразделы = РегламентированнаяОтчетность.РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, СтруктураРеквизитовФормы.МногострочныеИсключения);
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Подраздел Из Подразделы Цикл
				НачПоказатель = Подраздел.Ключ;
				ТипПодраздела = Подраздел.Значение;
				
				// в многострочном разделе возможны только многострочные и обычные подразделы
				Если ТипПодраздела = "/" Тогда // многострочный подраздел
					СтрФорматаПодраздела = Новый СписокЗначений;
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						СтрФорматаПодраздела.Добавить(СтрРаздела);						
					КонецЦикла;
					//определили показатели подраздела. Теперь выведем их для каждой строки
					
					ном = 1;
					ЗначениеПоля = Неопределено;
					
					ВыходИзДвойногоЦикла = Ложь;
					
					Пока Истина Цикл
						СтрокаПустая = 1;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							СтрокаПустая = Мин(РегламентированнаяОтчетность.ПроверитьНаПустоеЗначение("", ТекОписатель, ЗначениеПоля, Ложь, Неопределено, ном, 1), СтрокаПустая);							
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
												
						Если СтрокаПустая = 1 И ном <> 1 Тогда
							ном = ном + 1;
							Продолжить;
						КонецЕсли;
						Для Каждого СтрФормата Из СтрФорматаПодраздела Цикл
							ТекОписатель = СтрФормата.Значение;
							КодПоказателя = ТекОписатель.КодПоказателяПоСоставу;
							ИмяЯчейки = ?(Пустаястрока(ТекОписатель.КодПоказателяПоФорме), КодПоказателя, ТекОписатель.КодПоказателяПоФорме); 
							ИндексЗнакаВИмениЯчейки = СтрНайти(ИмяЯчейки, "_");
							Если ИндексЗнакаВИмениЯчейки > 0 Тогда
								ИмяЯчейки = Лев(ИмяЯчейки, ИндексЗнакаВИмениЯчейки - 1);
							КонецЕсли;
							ПризнакФормата = ТекОписатель.ТипДанныхПоказателя;
							Если НЕ ТекПок.Свойство(ИмяЯчейки + "_" + ном, ЗначениеПоля) Тогда	
								
								ВыходИзДвойногоЦикла = Истина;
								Прервать;
								
							КонецЕсли;
							РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеПоля, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
						КонецЦикла;
						
						Если ВыходИзДвойногоЦикла Тогда
							Прервать;
						КонецЕсли;
						
						Текст.ДобавитьСтроку("###");						
						ном = ном + 1;
					КонецЦикла;
				ИначеЕсли ТипПодраздела = "" Тогда//обычный подраздел
					ПодразделНайден = Ложь;
					ПервыйПроход = Истина;
					Для Каждого СтрРаздела Из СтрокиФорматаТекРаздела Цикл
						КодПоказателя = СтрРаздела.КодПоказателяПоСоставу;
						ИмяЯчейки = ?(Пустаястрока(СтрРаздела.КодПоказателяПоФорме), КодПоказателя, СтрРаздела.КодПоказателяПоФорме); 
						ПризнакФормата = СтрРаздела.ТипДанныхПоказателя;
						Если СтрРаздела.КодПоказателяПоСоставу = НачПоказатель Тогда
							ПодразделНайден = Истина;
						КонецЕсли;
						Если НЕ ПодразделНайден Тогда
							Продолжить;
						КонецЕсли;
						Если КодПоказателя = "###" или КодПоказателя = "===" Тогда
							Продолжить;
						КонецЕсли;
						Если ПервыйПроход Тогда
							ПервыйПроход = Ложь;
						Иначе	
							ВЗнач = Неопределено;
							Если Подразделы.Свойство(КодПоказателя, ВЗнач) Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						ЗначениеЯчейки = ТекПок[ИмяЯчейки];
						РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
					КонецЦикла;
					Текст.ДобавитьСтроку("###");
				КонецЕсли;
			Конеццикла;
		ИначеЕсли Призн = "" Тогда //просто раздел на одной странице без многострочных частей
			ПокТекТабПоля = Неопределено;
			Если НЕ ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяРаздела, ПокТекТабПоля) Тогда
				Продолжить;
			КонецЕсли;
			ТекПок = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(РегламентированнаяОтчетность.СкопированнаяСтруктура(ПокТекТабПоля));
			СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
			Для Каждого Стр3 Из СтрокиФорматаТекРаздела Цикл
				КодПоказателя = Стр3.КодПоказателяПоСоставу;
				ИмяЯчейки = ?(Пустаястрока(Стр3.КодПоказателяПоФорме), КодПоказателя, Стр3.КодПоказателяПоФорме); 
				ПризнакФормата = Стр3.ТипДанныхПоказателя;
				Если КодПоказателя="###" Тогда
					Продолжить;
				ИначеЕсли КодПоказателя="===" Тогда
					Прервать;	
				КонецЕсли;
				ЗначениеЯчейки = ТекПок[ИмяЯчейки];
				РегламентированнаяОтчетность.ВывестиПоказатель(Текст, ЗначениеЯчейки, КодПоказателя, ПризнакФормата, ФорматВыгрузки);
			КонецЦикла;
			Текст.ДобавитьСтроку("###");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультирующийТекстВыгрузки(Текст)
	
	СоответствиеКодовПоказателейДлинамЗначений = Новый Соответствие;
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010001000", 1000);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010002000", 128);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010003000", 128);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010005000", 50);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010006002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000010006005", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020001000", 1000);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020002000", 50);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020003000", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020005002", 120);
	СоответствиеКодовПоказателейДлинамЗначений.Вставить("П000020005006", 120);
	
	КолСтрок = Текст.КоличествоСтрок();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч + 1;
		ТекСтрока = Текст.ПолучитьСтроку(ТекИнд);
		Тек13Симв = Лев(ТекСтрока, 13);
		ДлинаЗначения = СоответствиеКодовПоказателейДлинамЗначений[Тек13Симв];
		Если ДлинаЗначения <> Неопределено Тогда
			Текст.ЗаменитьСтроку(ТекИнд, СокрП(Лев(ТекСтрока, 13 + 1 + ДлинаЗначения)));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияСоставаПоказателей()

	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));

	мТаблицаСоставПоказателей.Очистить();

	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			ДопОписание			 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 7).Текст);
			Обязательность  	 = СокрЛП(МакетСоставаПоказателей.Область(Ном, 8).Текст);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			
			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = ?(ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоСтруктуре, КодПоказателяПоФорме);
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.ДопОписание			   = ДопОписание;
			НоваяСтрока.Обязательность		   = Обязательность;
			НоваяСтрока.НомерСтрокиВМакете     = ном;
		КонецЦикла;
	КонецЦикла;
	мТаблицаСоставПоказателей.Сортировать("НомерСтрокиВМакете");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполненияНаСервере(Парам, Лист = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;
		
	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
					
		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда

			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			Иначе
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
			КонецЕсли;

		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВозвратитьПустойОбразЛистаФЛ()

	СтруктураДанных = Новый Структура;

	Для Каждого Стр из СтруктураРеквизитовФормы.мПустойОбразЛистаФЛ Цикл
		СтруктураДанных.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;

	Возврат СтруктураДанных;

КонецФункции

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	//РегламентированнаяОтчетностьКлиентСервер.ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы);
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + 1, , МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - 1), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			ОбластьТаблДок = ТекТабличноеПоле.Область(МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Лево, МногострочнаяЧастьВерх + ТекущееКоличествоСтрокГруппы - НомНовойСтроки, Область.Право);
			
			Если ОбластьТаблДок.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьВерх).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Процедура ВыводДанныхОФизическомЛице(Знач СвязьУстановлена, Знач Данные, ТипДанных, ОграниченияВыводаУчесть = Ложь, ТаблицаСтраницРазделаМ, ИндексВТабл);

	ФИО = "";
	Тел = "";
	ВидУдЛичн = "";
	КодУдЛичн = "";
	СерияУдЛичн = "";
	НомерУдЛичн = "";
	ОрганВыданУдЛичн = "";
	ДатаУдЛичн = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	ИндексМЖ = "";
	СубъектМЖ = "";
	КодСубъектМЖ = "";
	РайонМЖ = "";
	ГородМЖ = "";
	НПунктМЖ = "";
	УлицаМЖ = "";
	ДомМЖ = "";
	КорпусМЖ = "";
	КвартираМЖ = "";
	МестоРожд = "";
	Гражд = "";
	ГраждСтрана = "";

	Пол = 0;

	ДатаРожд = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
	
	Данные.Свойство(?(ТипДанных = 1,"ФИОРук", ?(ТипДанных = 2, "ФИОБух", ?(ТипДанных = 3, "ФИОУпПред",""))), ФИО);
	Данные.Свойство(?(ТипДанных = 1,"ГраждРук", ?(ТипДанных = 2, "ГраждБух", ?(ТипДанных = 3, "ГраждУпПред",""))), Гражд);
	Данные.Свойство(?(ТипДанных = 1,"ГраждСтранаРук", ?(ТипДанных = 2, "ГраждСтранаБух", ?(ТипДанных = 3, "ГраждСтранаУпПред",""))), ГраждСтрана);
	Данные.Свойство(?(ТипДанных = 1,"ТелРук", ?(ТипДанных = 2, "ТелБух", ?(ТипДанных = 3, "ТелУпПред",""))), Тел);
	Данные.Свойство(?(ТипДанных = 1,"ВидУдЛичнРук", ?(ТипДанных = 2, "ВидУдЛичнБух", ?(ТипДанных = 3, "ВидУдЛичнУпПред",""))), ВидУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"КодУдЛичнРук", ?(ТипДанных = 2, "КодУдЛичнБух", ?(ТипДанных = 3, "КодУдЛичнУпПред",""))), КодУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаРождРук", ?(ТипДанных = 2, "ДатаРождБух", ?(ТипДанных = 3, "ДатаРождУпПред",""))), ДатаРожд);
	Данные.Свойство(?(ТипДанных = 1,"МестоРождРук", ?(ТипДанных = 2, "МестоРождБух", ?(ТипДанных = 3, "МестоРождУпПред",""))), МестоРожд);
	Данные.Свойство(?(ТипДанных = 1,"СерияУдЛичнРук", ?(ТипДанных = 2, "СерияУдЛичнБух", ?(ТипДанных = 3, "СерияУдЛичнУпПред",""))), СерияУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"НомерУдЛичнРук", ?(ТипДанных = 2, "НомерУдЛичнБух", ?(ТипДанных = 3, "НомерУдЛичнУпПред",""))), НомерУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ПолРук", ?(ТипДанных = 2, "ПолБух", ?(ТипДанных = 3, "ПолУпПред",""))), Пол);
	Данные.Свойство(?(ТипДанных = 1,"ОрганВыданУдЛичнРук", ?(ТипДанных = 2, "ОрганВыданУдЛичнБух", ?(ТипДанных = 3, "ОрганВыданУдЛичнУпПред",""))), ОрганВыданУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ДатаУдЛичнРук", ?(ТипДанных = 2, "ДатаУдЛичнБух", ?(ТипДанных = 3, "ДатаУдЛичнУпПред",""))), ДатаУдЛичн);
	Данные.Свойство(?(ТипДанных = 1,"ИндексМЖРук", ?(ТипДанных = 2, "ИндексМЖБух", ?(ТипДанных = 3, "ИндексМЖУпПред",""))), ИндексМЖ);
	Данные.Свойство(?(ТипДанных = 1,"СубъектМЖРук", ?(ТипДанных = 2, "СубъектМЖБух", ?(ТипДанных = 3, "СубъектМЖУпПред",""))), СубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КодСубъектМЖРук", ?(ТипДанных = 2, "КодСубъектМЖБух", ?(ТипДанных = 3, "КодСубъектМЖУпПред",""))), КодСубъектМЖ);
	Данные.Свойство(?(ТипДанных = 1,"РайонМЖРук", ?(ТипДанных = 2, "РайонМЖБух", ?(ТипДанных = 3, "РайонМЖУпПред",""))), РайонМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ГородМЖРук", ?(ТипДанных = 2, "ГородМЖБух", ?(ТипДанных = 3, "ГородМЖУпПред",""))), ГородМЖ);
	Данные.Свойство(?(ТипДанных = 1,"НПунктМЖРук", ?(ТипДанных = 2, "НПунктМЖБух", ?(ТипДанных = 3, "НПунктМЖУпПред",""))), НПунктМЖ);
	Данные.Свойство(?(ТипДанных = 1,"УлицаМЖРук", ?(ТипДанных = 2, "УлицаМЖБух", ?(ТипДанных = 3, "УлицаМЖУпПред",""))), УлицаМЖ);
	Данные.Свойство(?(ТипДанных = 1,"ДомМЖРук", ?(ТипДанных = 2, "ДомМЖБух", ?(ТипДанных = 3, "ДомМЖУпПред",""))), ДомМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КорпусМЖРук", ?(ТипДанных = 2, "КорпусМЖБух", ?(ТипДанных = 3, "КорпусМЖУпПред",""))), КорпусМЖ);
	Данные.Свойство(?(ТипДанных = 1,"КвартираМЖРук", ?(ТипДанных = 2, "КвартираМЖБух", ?(ТипДанных = 3, "КвартираМЖУпПред",""))), КвартираМЖ);

	 //Заполним ИНН/КПП предприятия на новой странице

	Если НЕ СвязьУстановлена Тогда

		// нужно создать новый экземпляр докумнта, предварительно сняв активность у активного листа
		// в случае, если ФИО в структуре числое, то считаем что лист готов для заполнения и пишем информацию в него
		СтрТаблицаСтраницы = ТаблицаСтраницРазделаМ.НайтиСтроки(Новый Структура("АктивнаяСтраница" ,Истина));
		Если СтрТаблицаСтраницы.Количество() = 0 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Ошибка установки активной страницы раздела ФЛ'");

			Сообщение.Сообщить();
			
		Иначе
			СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		КонецЕсли;

		Если ПустаяСтрока(СтрТаблицаСтраницы.Данные[0].Значение.ФизЛицоФИО) Тогда

			СтрокаДляВставкиДанных = СтрТаблицаСтраницы;

			// Пишем в этот лист

		Иначе

			// Убираем активность у текущей страницы
			
			СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

			СтрНоваяСтраница = ТаблицаСтраницРазделаМ.Добавить();

			// Присваиваем представление по умолчанию
			СтрНоваяСтраница.Представление      = "Новая страница";

			СтрНоваяСтраница.АвтоматическоеПредставление = Истина;

			СтрНоваяСтраница.АктивнаяСтраница = Истина;

			СтрНоваяСтраница.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
            
			СтрокаДляВставкиДанных = СтрНоваяСтраница;

		КонецЕсли;

	ИначеЕсли СвязьУстановлена Тогда

		// Пишем в раздел с индексом ИндексВТабл
		СтрокаДляВставкиДанных = ТаблицаСтраницРазделаМ[ИндексВТабл];
	КонецЕсли;

	// Определим простой порядковый номер
	ИндексСтроки = ТаблицаСтраницРазделаМ.Индекс(СтрокаДляВставкиДанных);

	// Теперь можно выводить данные на страницу
	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицоФИО = ФИО;
		Представление = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицоФИО;
		СтрокаДляВставкиДанных.Данные[0].Представление = Представление + ". Лист N " + Строка(ИндексСтроки + 1);

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСлТел = СтруктураРеквизитовФормы.мТелОрганизации;
			
 	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Если НЕ ОграниченияВыводаУчесть Тогда
		ГраждСтрана = ?(НЕ ЗначениеЗаполнено(ГраждСтрана), "лицо без гражданства", ГраждСтрана);

		Если (НЕ СвязьУстановлена) или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство)) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГражданство = ГраждСтрана;
			
		КонецЕсли;
	КонецЕсли;

	Если ТипДанных <> 2 Тогда
		// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
		// чтобы сохранить универсальность и переносимость функции

		КодСтраны = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд;

		Если (НЕ СвязьУстановлена)или (ПустаяСтрока(КодСтраны)) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКодГражд = Гражд;
			
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВид = ВидУдЛичн;

	КонецЕсли;
	
	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок)) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДок = КодУдЛичн;  

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокСерияНомер = СерияУдЛичн + "  " + НомерУдЛичн;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Или (ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан)) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокВыдан = ОрганВыданУдЛичн;

	КонецЕсли;

	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	Попытка
		Если НЕ ОграниченияВыводаУчесть Тогда
		// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
			Если (НЕ СвязьУстановлена) Тогда

				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаРожд = ДатаРожд;

			Иначе

				Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаРожд) Тогда
					
					СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДатаРожд =ДатаРожд;       

				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	Исключение
	// В случае, если на листе ФЛ такого параметра нет, то пропускаем, и делаем все через Попытку/Исключить
	// чтобы сохранить универсальность и переносимость функции
	КонецПопытки;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		Если (НЕ СвязьУстановлена) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР = МестоРожд;
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицМестоР = МестоРожд;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата = ДатаУдЛичн;

	Иначе

		Если НЕ ЗначениеЗаполнено(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДокДата = ДатаУдЛичн;

		КонецЕсли;

	КонецЕсли;

	Если НЕ ОграниченияВыводаУчесть Тогда
	// в некоторых декларация определенные параметры для бухгалтера ввыводить на лист не нужно
		ПолМ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ;
		ПолЖ = СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ;

		Если (НЕ СвязьУстановлена) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ = ?(Пол = 1, "V", "");
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ = ?(Пол = 2, "V", "");

		Иначе

			Если (НЕ ЗначениеЗаполнено(ПолЖ)) И (НЕ ЗначениеЗаполнено(ПолМ)) Тогда
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолМ = ?(Пол = 1, "V", "");
				СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицПолЖ = ?(Пол = 2, "V", "");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицИнд = ИндексМЖ;
                                                                                 
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицСубъект = СубъектМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС) Тогда
			
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицС = КодСубъектМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицРайон = РайонМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда
		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
	Иначе
		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицГород = ГородМЖ;
		КонецЕсли;
	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицНП = НПунктМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицУлица = УлицаМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом) Тогда
			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицДом = ДомМЖ;
		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКорпус = КорпусМЖ;

		КонецЕсли;

	КонецЕсли;

	Если (НЕ СвязьУстановлена) Тогда

		СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

	Иначе

		Если ПустаяСтрока(СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира) Тогда

			СтрокаДляВставкиДанных.Данные[0].Значение.ФизЛицКвартира = КвартираМЖ;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбФЛ(СмениласьДатаПодписания = Ложь)

	Перем ТаблицаСтраницРаздела;

	Если (СтруктураРеквизитовФормы.Организация  = Неопределено) Или (СтруктураРеквизитовФормы.Организация = РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
		Возврат;
	КонецЕсли;

	СписокПоказателей = Новый СписокЗначений;

	// Составляем список данных, необходимых для вывода в декларацию
	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		СписокПоказателей.Добавить("", "ФИОРук"); // ФИО руководителя
		СписокПоказателей.Добавить("", "ТелРук"); // телефон руководителя из контактной информации
		// СведенияФЛ.Добавить("", "ТелРукДом"); // телефон руководителя ДОМАШНИЙ

		СписокПоказателей.Добавить("", "ВидУдЛичнРук"); // вид уд личности руководителя
		СписокПоказателей.Добавить("", "КодУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "СерияУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "НомерУдЛичнРук"); // код уд личности руководителя
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнРук"); // Кем выдан
		СписокПоказателей.Добавить("", "ДатаУдЛичнРук");
		СписокПоказателей.Добавить("", "ДатаРождРук");
		СписокПоказателей.Добавить("", "МестоРождРук");
		СписокПоказателей.Добавить("", "ПолРук");

		СписокПоказателей.Добавить("", "ИндексМЖРук");
		СписокПоказателей.Добавить("", "СубъектМЖРук");
		СписокПоказателей.Добавить("", "КодСубъектМЖРук");
		СписокПоказателей.Добавить("", "РайонМЖРук");
		СписокПоказателей.Добавить("", "ГородМЖРук");
		СписокПоказателей.Добавить("", "НПунктМЖРук");
		СписокПоказателей.Добавить("", "УлицаМЖРук");
		СписокПоказателей.Добавить("", "ДомМЖРук");
		СписокПоказателей.Добавить("", "КорпусМЖРук");
		СписокПоказателей.Добавить("", "КвартираМЖРук");

		СписокПоказателей.Добавить("", "ГраждРук");
		СписокПоказателей.Добавить("", "ГраждСтранаРук");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда
		// Получим данные о бухгалтере
		СписокПоказателей.Добавить("", "ФИОБух");
		СписокПоказателей.Добавить("", "ТелБух");

		СписокПоказателей.Добавить("", "ВидУдЛичнБух");
		СписокПоказателей.Добавить("", "КодУдЛичнБух");
		СписокПоказателей.Добавить("", "СерияУдЛичнБух");
		СписокПоказателей.Добавить("", "НомерУдЛичнБух");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаУдЛичнБух");
		СписокПоказателей.Добавить("", "ДатаРождБух");
		СписокПоказателей.Добавить("", "МестоРождБух");
		СписокПоказателей.Добавить("", "ПолБух");

		СписокПоказателей.Добавить("", "ИндексМЖБух");
		СписокПоказателей.Добавить("", "СубъектМЖБух");
		СписокПоказателей.Добавить("", "КодСубъектМЖБух");
		СписокПоказателей.Добавить("", "РайонМЖБух");
		СписокПоказателей.Добавить("", "ГородМЖБух");
		СписокПоказателей.Добавить("", "НПунктМЖБух");
		СписокПоказателей.Добавить("", "УлицаМЖБух");
		СписокПоказателей.Добавить("", "ДомМЖБух");
		СписокПоказателей.Добавить("", "КорпусМЖБух");
		СписокПоказателей.Добавить("", "КвартираМЖБух");

		СписокПоказателей.Добавить("", "ГраждБух");
		СписокПоказателей.Добавить("", "ГраждСтранаБух");

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		// Получим данные о УП
		СписокПоказателей.Добавить("", "ФИОУпПред");
		СписокПоказателей.Добавить("", "ТелУпПред");

		СписокПоказателей.Добавить("", "ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("", "КодУдЛичнУпПред");
		СписокПоказателей.Добавить("", "СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("", "НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("", "ДатаРождУпПред");
		СписокПоказателей.Добавить("", "МестоРождУпПред");
		СписокПоказателей.Добавить("", "ПолУпПред");

		СписокПоказателей.Добавить("", "ИндексМЖУпПред");
		СписокПоказателей.Добавить("", "СубъектМЖУпПред");
		СписокПоказателей.Добавить("", "КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("", "РайонМЖУпПред");
		СписокПоказателей.Добавить("", "ГородМЖУпПред");
		СписокПоказателей.Добавить("", "НПунктМЖУпПред");
		СписокПоказателей.Добавить("", "УлицаМЖУпПред");
		СписокПоказателей.Добавить("", "ДомМЖУпПред");
		СписокПоказателей.Добавить("", "КорпусМЖУпПред");
		СписокПоказателей.Добавить("", "КвартираМЖУпПред");

		СписокПоказателей.Добавить("", "ГраждУпПред");
		СписокПоказателей.Добавить("", "ГраждСтранаУпПред");

		// Инициализируем данные о УП
	КонецЕсли;

	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, СписокПоказателей);

	ТаблицаСтраницРаздела = Неопределено;
	Если Не мСтруктураМногостраничныхРазделов.Свойство("ФизЛица", ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	ОписаниеТиповСтрока254 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	Если СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация
	 ИЛИ СмениласьДатаПодписания
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда

		ТаблицаСтраницРаздела.Очистить();
		СтрПервая = ТаблицаСтраницРаздела.Добавить();
		СтрПервая.Представление = "Новая страница";
		СтрПервая.АктивнаяСтраница = Истина;
		СтрПервая.Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		СтрПервая.АвтоматическоеПредставление = Истина;

	ИначеЕсли (НЕ (СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация Или СмениласьДатаПодписания)) Тогда

		// Если документ новый, то в первый лист ФЛ запишем пустой образ листа ФЛ
		Если Не СтруктураРеквизитовФормы.мДокументВосстановлен Тогда
			
			СтруктураДанных11 = Новый Структура;
			СтруктураДанных11 = ВозвратитьПустойОбразЛистаФЛ(); 
			ТаблицаСтраницРаздела[0].Данные.Добавить(ВозвратитьПустойОбразЛистаФЛ());
		КонецЕсли;

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННДиректор) Тогда

		ФИОДиректора = ТабличныйДокумент.Области.ОргДиректор.Значение;

		Если НЕ ПустаяСтрока(ФИОДиректора) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
								Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОДиректора Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 1,, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННБухгалтер) Тогда

		ФИОБухгалтера = ТабличныйДокумент.Области.ОргБухгалтер.Значение;

		Если НЕ ПустаяСтрока(ФИОБухгалтера) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИОБухгалтера Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 2, Истина, ТаблицаСтраницРаздела, ТекИндекс);

		КонецЕсли; // Если ФИО пусто

	КонецЕсли;

	Если ПустаяСтрока(СтруктураРеквизитовФормы.мИННУпПред) Тогда
		Попытка
			ФИООргУП = ТабличныйДокумент.Области.ОргУП.Значение;

		Если НЕ ПустаяСтрока(ФИООргУП) Тогда
			СвязьУстановлена = Ложь;
			ТекИндекс = -1;
			Для Каждого Строка Из ТаблицаСтраницРаздела Цикл
				Если Строка.Данные[0].Значение.ФизЛицоФИО = ФИООргУП Тогда
					ТекИндекс = ТаблицаСтраницРаздела.Индекс(Строка);
					СвязьУстановлена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ВыводДанныхОФизическомЛице(СвязьУстановлена, ОргСведения, 3,, ТаблицаСтраницРаздела, ТекИндекс);
		КонецЕсли;

		Исключение
		КонецПопытки;

	КонецЕсли;

	АктивнаяСтр = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если АктивнаяСтр.Количество() > 0 Тогда
		
		АктивнаяСтр = АктивнаяСтр[0];

		Шаг = ТаблицаСтраницРаздела.Индекс(АктивнаяСтр);

	Иначе
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
				
	#Иначе
		
		ДобавитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
		
	ВставитьДополнительнуюСтроку(ЭтаФорма,КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуНаКлиенте(КолонкаРазделыОтчетаСокрНаим)   
		
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
			
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
		
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
			
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
			
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
    	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = ИмяГруппы + "01_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// порядековый номер последней строки перед вставкой
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;

	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	// Определяем текущую область таблицы
	ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;

	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УдалитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		
	#Иначе
		УдалитьСтрокуНаКлиенте(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим); //	
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуНаСервере(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуНаКлиенте(ТекущаяСтраница)
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// предварительно обновим структуру многострочных разделов
	ОбновитьСтруктуруМногострочногоРаздела(Форма,ИмяГруппы);
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, СтрНайти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + НомУдаляемойСтроки;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						                        						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + (НСтр - 1);
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин( НомУдаляемойСтроки, СтруктураГруппы.Количество() );
	ИмяТекущейОбласти = ИмяГруппы + "01_" + НомТекущейСтроки;
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
			ИмяКолонки = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда	
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел2" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы2;
	КонецЕсли;

	Возврат ИмяГруппы;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(ТекТабличноеПоле) Экспорт
	Перем ИдГруппы;

	Если ТекТабличноеПоле = "Раздел1" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ТекТабличноеПоле = "Раздел2" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	КонецЕсли;

	Возврат ИдГруппы;

КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
		
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Раздел1";
		
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы2 Тогда 
		
		ТекТабличноеПоле = "Раздел2";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УдалениеДополнительныхСтрокПриОчисткеТабличногоПоля(ПромТаблицаДопСтрокРаздела,ВыбТабличноеПоле,ВыбТабличноеПолеИмя,ИмяГруппыДопСтрок,ИсходноеКоличествоСтрокГруппы) Экспорт
	
	НСтр = ЭтаФорма[ПромТаблицаДопСтрокРаздела].Количество();
	Пока НСтр > ИсходноеКоличествоСтрокГруппы Цикл
		
		ТекСтрокаТаблицы = ЭтаФорма[ПромТаблицаДопСтрокРаздела][НСтр - 1];
		НомерГрафы = 1;
		
		ИмяПервойКолонки = ИмяГруппыДопСтрок + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
		ИмяПервойЯчейкиУдаляемойСтроки  = ИмяПервойКолонки + "_" + НСтр;
		
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ВыбТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ;

		// Определим область удаляемой строки
		РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ВыбТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		ЭтаФорма[ВыбТабличноеПолеИмя] = ВыбТабличноеПоле;
		
		// удаляем из структуры многострочного раздела соответствующую строку
		ЭтаФорма[ПромТаблицаДопСтрокРаздела].Удалить(ТекСтрокаТаблицы);
		
		НСтр = НСтр - 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИННКПП()

	// Теперь получаем данные из глобальной общей функции
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ИННЮЛ, КППЮЛ, ТелОрганизации");

	ИННЮЛ = "";
	КППЮЛ = "";
	ОргСведения.Свойство("ИННЮЛ", ИННЮЛ);
	ОргСведения.Свойство("КППЮЛ", КППЮЛ);

	Если НЕ ЗначениеЗаполнено(ИННЮЛ) Тогда
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, " ");
	Иначе
		ИННЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(ИННЮЛ, 12, "0");
	КонецЕсли;

	КППЮЛ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(КППЮЛ, 9, " ");

	СтруктураРеквизитовФормы.мИННЮЛ = ИННЮЛ;
	СтруктураРеквизитовФормы.мКППЮЛ = КППЮЛ;

	СтруктураРеквизитовФормы.мТелОрганизации = "";
	ОргСведения.Свойство("ТелОрганизации", СтруктураРеквизитовФормы.мТелОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохрЗначВКвадратиках(Форма)

	Форма.СтруктураРеквизитовФормы.мОргКодИМНС = Форма.ТабличныйДокумент.Области.КодИМНС.Значение;
					 
	Форма.СтруктураРеквизитовФормы.мИННДиректор = Форма.ТабличныйДокумент.Области.ИННРук.Значение;
					  	
	Форма.СтруктураРеквизитовФормы.мИННБухгалтер = Форма.ТабличныйДокумент.Области.ИННГБ.Значение;
					 
	Форма.СтруктураРеквизитовФормы.мИННУпПред = Форма.ТабличныйДокумент.Области.ИННУП.Значение;
					
	Форма.СтруктураРеквизитовФормы.мОргОГРН = Форма.ТабличныйДокумент.Области.ОГРН.Значение;
				
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматВыводаНаСервере(НаимРаздела)
	
	УстановитьФорматВывода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВывода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "ЧЦ = 18; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл
		
		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = Форма.ТабличныйДокумент;

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				СтруктураГруппы = Форма[СтруктураГруппы];

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтр];
					ФорматируемаяОбласть.Формат = Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") > 0 И Область.Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		УдалитьСтроку("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;

	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Если СтрНайти(Область.Имя,"ТипОрг") > 0 Тогда
			СтандартнаяОбработка = Ложь;
			Область.Значение = "V";
			Модифицированность = Истина;
			АктивныйНомер = Число(Сред(Область.Имя, СтрДлина(Область.Имя), 1));

			Зн = 1;
			Пока Зн <= 3 цикл
				Если АктивныйНомер=Зн Тогда
					Зн = Зн + 1;
				Иначе
					ТабличныйДокумент.Области[ Сред(Область.Имя, 1, 6) + Строка(Зн)].Значение = " ";
					Зн = Зн + 1;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ФизЛица" Тогда
		Если (СтрНайти(Область.Имя, "ФизЛицИнд") > 0)
	   		Или (Область.Имя = "ФизЛицСубъект")
	   		Или (Область.Имя = "ФизЛицРайон")
	   		Или (Область.Имя = "ФизЛицГород")
	   		Или (Область.Имя = "ФизЛицС")
	   		Или (Область.Имя = "ФизЛицНП")
	   		Или (Область.Имя = "ФизЛицУлица")
	   		Или (Область.Имя = "ФизЛицДом")
	   		Или (Область.Имя = "ФизЛицКорпус")
	   		Или (Область.Имя = "ФизЛицКвартира") Тогда

			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			НомерАдреса = "";
			СтандартнаяОбработка = Ложь;
		
			Индекс = ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение;
		   
			РоссийскийАдрес = Новый Соответствие;
		
			РоссийскийАдрес.Вставить("Индекс",	        ПолеТабличногоДокументаФизЛица.Области.ФизЛицИнд.Значение);
			РоссийскийАдрес.Вставить("Регион",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицСубъект.Значение);
			РоссийскийАдрес.Вставить("КодРегиона",      ПолеТабличногоДокументаФизЛица.Области.ФизЛицС.Значение);
			РоссийскийАдрес.Вставить("Район",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицРайон.Значение);
			РоссийскийАдрес.Вставить("Город",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицГород.Значение);
			РоссийскийАдрес.Вставить("НаселенныйПункт", ПолеТабличногоДокументаФизЛица.Области.ФизЛицНП.Значение);
			РоссийскийАдрес.Вставить("Улица",           ПолеТабличногоДокументаФизЛица.Области.ФизЛицУлица.Значение);
			РоссийскийАдрес.Вставить("Дом",             ПолеТабличногоДокументаФизЛица.Области.ФизЛицДом.Значение);
			РоссийскийАдрес.Вставить("Корпус",          ПолеТабличногоДокументаФизЛица.Области.ФизЛицКорпус.Значение);
			РоссийскийАдрес.Вставить("Квартира",        ПолеТабличногоДокументаФизЛица.Области.ФизЛицКвартира.Значение);
		
			ЗначенияПолей = Новый СписокЗначений;
		
			ЗначенияПолей.Добавить(РоссийскийАдрес["Индекс"],          "Индекс");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Регион"],          "Регион");
			ЗначенияПолей.Добавить(РоссийскийАдрес["КодРегиона"],      "КодРегиона");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Район"],           "Район");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Город"],           "Город");
			ЗначенияПолей.Добавить(РоссийскийАдрес["НаселенныйПункт"], "НаселенныйПункт");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Улица"],           "Улица");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Дом"],             "Дом");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Корпус"],          "Корпус");
			ЗначенияПолей.Добавить(РоссийскийАдрес["Квартира"],        "Квартира");
								 		
			ПредставлениеАдреса = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых("643," + РоссийскийАдрес["Индекс"] + ","
						+ РоссийскийАдрес["Регион"] + ","
						+ РоссийскийАдрес["Район"] + ","
						+ РоссийскийАдрес["Город"] + ","
						+ РоссийскийАдрес["НаселенныйПункт"] + ","
						+ РоссийскийАдрес["Улица"] + ","
						+ РоссийскийАдрес["Дом"] + ","
						+ РоссийскийАдрес["Корпус"] + ","
						+ РоссийскийАдрес["Квартира"]);

			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",               "Ввод адреса");
			ПараметрыФормы.Вставить("ЗначенияПолей", 		   ЗначенияПолей);
			ПараметрыФормы.Вставить("Представление", 		   ПредставлениеАдреса);
			ПараметрыФормы.Вставить("ВидКонтактнойИнформации", СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииПочтовыйАдресОрганизации);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("РоссийскийАдрес", РоссийскийАдрес);
			
			ТипЗначения = Тип("ОписаниеОповещения");
			ПараметрыКонструктора = Новый Массив(3);
			ПараметрыКонструктора[0] = "ОткрытьФормуКонтактнойИнформацииЗавершение";
			ПараметрыКонструктора[1] = ЭтаФорма;
			ПараметрыКонструктора[2] = ДополнительныеПараметры;
			
			Оповещение = Новый (ТипЗначения, ПараметрыКонструктора);
			
			ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент").ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, , Оповещение);

		ИначеЕсли Область.Имя = "ФизЛицПолМ" Тогда

			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			СтандартнаяОбработка = Ложь;
			Модифицированность = Истина;
			Если ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "V" Тогда
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "";
				Возврат;
			Иначе
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "";
			КонецЕсли;
			
		ИначеЕсли Область.Имя = "ФизЛицПолЖ" Тогда
			
			Модифицированность = Истина;
			СтандартнаяОбработка = Ложь;
			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			Если ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "V" Тогда
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "";
				Возврат;
			Иначе
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолЖ.Значение = "V";
				ПолеТабличногоДокументаФизЛица.Области.ФизЛицПолМ.Значение = "";
			КонецЕсли;
			
		ИначеЕсли СтрНайти(Область.Имя, "ФизЛицКодГражд") > 0 Тогда

			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				Возврат;
			КонецЕсли;
			
			ОбластьИмя = Область.Имя;
			
			ПолеТабличногоДокументаФизЛица = ТабличныйДокумент;
			
			СтандартнаяОбработка = Ложь;
						
			Если СписокКодовСтран.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("СтраныМира");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    СписокКодовСтран);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", Область.Значение));
			ДополнительныеПараметры = Новый Структура("ОбластьИмя, ПолеТабличногоДокументаФизЛица", ОбластьИмя, ПолеТабличногоДокументаФизЛица);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияФизЛицКодГраждЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;

	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
		
		ОбластьИмя = Область.Имя;
        ПолеТабличногоДокументаРаздел1 = ТабличныйДокумент;
		
		Если СтрНайти(Область.Имя, "КБК") > 0 Тогда

			ТекущееЗначениеКБК = ПолеТабличногоДокументаРаздел1.Области.КБК.Значение;
			СтандартнаяОбработка = Ложь;
			Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
				
				Если мКБК2005Раздел1.Количество() = 0 Тогда
					ЗагрузитьПоказателиИзМакета("КБК2005Раздел1");
				КонецЕсли;
								
				ТаблицаКБК = мКБК2005Раздел1;
								
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаКБК);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекущееЗначениеКБК));
				
				ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел1", ПолеТабличногоДокументаРаздел1);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел1, ТекущееЗначениеКБК", ПолеТабличногоДокументаРаздел1, ТекущееЗначениеКБК);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСтрокуКБКРаздел1Завершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводСтроки(ОписаниеОповещения, ТекущееЗначениеКБК, "Введите КБК", 20);
			КонецЕсли;
		ИначеЕсли СтрНайти(ОбластьИмя, "КодСтраны") > 0
			  ИЛИ СтрНайти(ОбластьИмя, "П000010003000") > 0 Тогда

			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если ОбластьИмя = "КодСтраны" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = "П000010003000";
				КолонкаДляПоиска = "Код";
			ИначеЕсли ОбластьИмя = "П000010003000" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = "КодСтраны";
				КолонкаДляПоиска = "Название";
			КонецЕсли;
			
			Если СписокКодовСтран.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("СтраныМира");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    СписокКодовСтран);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, ОбластьИмя, ПолеТабличногоДокументаРаздел1", ИмяЯчейкиДляВыводаВторогоЗначения, ОбластьИмя, ПолеТабличногоДокументаРаздел1);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборСтраныЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  
			
		ИначеЕсли (Лев(ОбластьИмя, 13) = "П000010006003")
			Или  (Лев(ОбластьИмя, 13) = "П000010006002") Тогда
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;
			//ПолеТабличногоДокументаРаздел1
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если Лев(ОбластьИмя, 13) = "П000010006002" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000010006002_", "П000010006003_");
				КолонкаДляПоиска = "Название";
			ИначеЕсли Лев(ОбластьИмя, 13) = "П000010006003" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000010006003_", "П000010006002_");
				КолонкаДляПоиска = "Код";
			КонецЕсли;
			
			Если мВидыДоходовИностранныхОрганизации.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("ВидыДоходовИностранныхОрганизации");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мВидыДоходовИностранныхОрганизации);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел1", ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел1);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенийВидыДоходовИностранныхОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
						
		ИначеЕсли (Лев(ОбластьИмя, 13) = "П000010006006")
			Или  (Лев(ОбластьИмя, 13) = "П000010006005") Тогда
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;
			//ПолеТабличногоДокументаРаздел1
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если Лев(ОбластьИмя, 13) = "П000010006005" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000010006005_", "П000010006006_");
				КолонкаДляПоиска = "Название";
			ИначеЕсли Лев(ОбластьИмя, 13) = "П000010006006" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000010006006_", "П000010006005_");
				КолонкаДляПоиска = "Код";
			КонецЕсли;
			
			Если мОКВ.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("ОКВ");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКВ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел1", ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел1);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияОКВЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		ИначеЕсли СтрНайти(Область.Имя, "П000010006010") > 0 Тогда
            Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;
			//ПолеТабличногоДокументаРаздел1
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			КолонкаДляПоиска = "Код";
		
			Если мОКВ.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("ОКВ");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКВ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияКодОКВЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 		КонецЕсли; 		
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ОбластьИмя = Область.Имя;
        ПолеТабличногоДокументаРаздел2 = ТабличныйДокумент;
		Если (СтрНайти(ОбластьИмя, "П000020005004") > 0) И (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда

						СтандартнаяОбработка = Ложь;
			Список = Новый СписокЗначений;
			Список.Добавить("1","1 (Двухсторонние кредиты)");
			Список.Добавить("2","2 (Синдицированные кредиты)");
			Список.Добавить("3","3 (Консорциональные кредиты)");
			Список.Добавить("4","4 (Клубные кредиты)");
			Список.Добавить("","Пустое значение");

			НайденнаяСтрока = Список.НайтиПоЗначению(Область.Значение);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИзСпискаКодЗавершение",ЭтотОбъект, ДополнительныеПараметры);
			
			Если НайденнаяСтрока = Неопределено Тогда
				ПоказатьВыборИзСписка(ОписаниеОповещения, Список);
			Иначе
				ПоказатьВыборИзСписка(ОписаниеОповещения,Список,, НайденнаяСтрока);
			КонецЕсли;
			
		ИначеЕсли (СтрНайти(ОбластьИмя, "П000020005004") > 0) И (СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("КодВидаКредита", СокрЛП(Область.Значение));
			ДополнительныеПараметры.Вставить("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСтрокуКодВидаКредитаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			СтандартнаяОбработка = Ложь;
			
			ПоказатьВводСтроки(ОписаниеОповещения, СокрЛП(Область.Значение), "Введите код",1,);
			
		ИначеЕсли СтрНайти(ОбластьИмя, "П000020004000") > 0
			  ИЛИ СтрНайти(ОбластьИмя, "П000020003000") > 0 Тогда

			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
				Возврат;
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если ОбластьИмя = "П000020004000" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = "П000020003000";
				КолонкаДляПоиска = "Код";
			ИначеЕсли ОбластьИмя = "П000020003000" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = "П000020004000";
				КолонкаДляПоиска = "Название";
			КонецЕсли;
			
			Если СписокКодовСтран.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("СтраныМира");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор страны");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    СписокКодовСтран);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, ОбластьИмя, ПолеТабличногоДокументаРаздел2", ИмяЯчейкиДляВыводаВторогоЗначения, ОбластьИмя, ПолеТабличногоДокументаРаздел2);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияВыборСтраныРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);  	

		ИначеЕсли СтрНайти(ОбластьИмя, "КБК") > 0 Тогда
		// Строка 041. КБК.
			
			СтандартнаяОбработка = Ложь;
			ТекущееЗначениеКБК = ПолеТабличногоДокументаРаздел2.Области.КБК.Значение;
			Если (НЕ СтруктураРеквизитовФормы.мАвтоВыборКодов) Тогда
				
				Если мКБК2005Раздел2.Количество() = 0 Тогда
					ЗагрузитьПоказателиИзМакета("КБК2005Раздел2");
				КонецЕсли;
								
				ТаблицаКБК = мКБК2005Раздел2;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Заголовок",          "Выбор КБК");
				ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаКБК);
				ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура("Код", ТекущееЗначениеКБК));
				
				ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел2", ПолеТабличногоДокументаРаздел2);
				ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияКБКРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				
				ДополнительныеПараметры = Новый Структура("ПолеТабличногоДокументаРаздел2, ТекущееЗначениеКБК", ПолеТабличногоДокументаРаздел2, ТекущееЗначениеКБК);
				ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиСтрокуКБКЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				ПоказатьВводСтроки(ОписаниеОповещения, ТекущееЗначениеКБК, "Введите КБК", 20);
				
			КонецЕсли;
		
        ИначеЕсли (Лев(ОбластьИмя, 13) = "П000020005002")
			Или  (Лев(ОбластьИмя, 13) = "П000020005003") Тогда
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;

			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если Лев(ОбластьИмя, 13) = "П000020005002" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000020005002_", "П000020005003_");
				КолонкаДляПоиска = "Название";
			ИначеЕсли Лев(ОбластьИмя, 13) = "П000020005003" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000020005003_", "П000020005002_");
				КолонкаДляПоиска = "Код";
			КонецЕсли;
			
			Если мСтатьиДоходов.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("СтатьиДоходов122012");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мСтатьиДоходов);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел2", ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел2);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияСтатьиДоходовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        ИначеЕсли (Лев(ОбластьИмя, 13) = "П000020005007")
			Или  (Лев(ОбластьИмя, 13) = "П000020005006") Тогда
			
			Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;
			//ПолеТабличногоДокументаРаздел1
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			Если Лев(ОбластьИмя, 13) = "П000020005006" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000020005006_", "П000020005007_");
				КолонкаДляПоиска = "Название";
			ИначеЕсли Лев(ОбластьИмя, 13) = "П000020005007" Тогда
				ИмяЯчейкиДляВыводаВторогоЗначения = СтрЗаменить(ОбластьИмя, "П000020005007_", "П000020005006_");
				КолонкаДляПоиска = "Код";
			КонецЕсли;
			
			Если мОКВ.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("ОКВ");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКВ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			
			ДополнительныеПараметры = Новый Структура("ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел2", ИмяЯчейкиДляВыводаВторогоЗначения, Область, ОбластьИмя, ПолеТабличногоДокументаРаздел2);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияОКВРаздел2Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		ИначеЕсли СтрНайти(Область.Имя, "П000020005011") > 0 Тогда
            Если СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда // отключен выбор
				//можно добавить форму ввода
				Возврат;
			КонецЕсли;
			//ПолеТабличногоДокументаРаздел1
			СтандартнаяОбработка = Ложь;
			АктивныеДанные = Область.Значение;

			КолонкаДляПоиска = "Код";
		
			Если мОКВ.Количество() = 0 Тогда
				ЗагрузитьПоказателиИзМакета("ОКВ");
			КонецЕсли;
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заголовок",          "Выбор значения");
			ПараметрыФормы.Вставить("ТаблицаЗначений",    мОКВ);
			ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаДляПоиска, АктивныеДанные));
			ДополнительныеПараметры = Новый Структура("Область", Область);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораЗначенияОКВ5011Завершение", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
 		КонецЕсли; 		
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВвестиСтрокуКодВидаКредитаЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Строка = ?(Строка = Неопределено, ДополнительныеПараметры.КодВидаКредита, Строка);
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Строка) Тогда
		Область.Значение = Строка;
	Иначе
		ПоказатьПредупреждение(,"Введенное значение должно состоять только из цифр");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаКодЗавершение(СписокЭлемент, ДополнительныеПараметры) Экспорт
	
	Если СписокЭлемент <> Неопределено  Тогда
		ДополнительныеПараметры.Область.Значение = СписокЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСтрокуКБКРаздел1Завершение(Строка, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	ТекущееЗначениеКБК = ?(Строка = Неопределено, ДополнительныеПараметры.ТекущееЗначениеКБК, Строка);
	
	
	Если (Строка <> Неопределено) Тогда
		ПолеТабличногоДокументаРаздел1.Области.КБК.Значение = ТекущееЗначениеКБК;
		Модифицированность = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияОКВ5011Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ПервоеЗнач;
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияОКВРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ?(Лев(ОбластьИмя, 13) = "П000020005007", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел2.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(Лев(ОбластьИмя, 13) = "П000020005006", ПервоеЗнач,ВтороеЗнач );
	
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияСтатьиДоходовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ?(Лев(ОбластьИмя, 13) = "П000020005003", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел2.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(Лев(ОбластьИмя, 13) = "П000020005002", ПервоеЗнач,ВтороеЗнач );
	
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСтрокуКБКЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	ТекущееЗначениеКБК = ?(Строка = Неопределено, ДополнительныеПараметры.ТекущееЗначениеКБК, Строка);
	
	Если (Строка <> Неопределено) Тогда
		ПолеТабличногоДокументаРаздел2.Области.КБК.Значение = ТекущееЗначениеКБК;
		Модифицированность = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияКБКРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокументаРаздел2.Области.КБК.Значение = Результат["Код"];
	
	ПолеТабличногоДокументаРаздел2.Области["КБК"].Значение = Результат["Код"];
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборСтраныРаздел2Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел2 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел2;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	
	ПолеТабличногоДокументаРаздел2.Области[ОбластьИмя].Значение = ?(ОбластьИмя = "П000020004000", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел2.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(ОбластьИмя = "П000020004000", ВтороеЗнач, ПервоеЗнач);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияКодОКВЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ПервоеЗнач;
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияОКВЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ?(Лев(ОбластьИмя, 13) = "П000010006006", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел1.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(Лев(ОбластьИмя, 13) = "П000010006005", ПервоеЗнач,ВтороеЗнач );
	
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенийВидыДоходовИностранныхОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	Область = ДополнительныеПараметры.Область;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	Область.Значение = ?(Лев(ОбластьИмя, 13) = "П000010006003", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел1.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(Лев(ОбластьИмя, 13) = "П000010006002", ПервоеЗнач,ВтороеЗнач );
	
	// Необходимо запустить расчет, чтобы пересчитать итоговые строки в приложении 1
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияВыборСтраныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяЯчейкиДляВыводаВторогоЗначения = ДополнительныеПараметры.ИмяЯчейкиДляВыводаВторогоЗначения;
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПервоеЗнач = Результат["Код"];
	ВтороеЗнач = Результат["Название"];
	
	Если НЕ ЗначениеЗаполнено(ПервоеЗнач) Тогда
		ВтороеЗнач = "";
	КонецЕсли;
	
	ПолеТабличногоДокументаРаздел1.Области[ОбластьИмя].Значение = ?(ОбластьИмя = "КодСтраны", ПервоеЗнач, ВтороеЗнач);
	ПолеТабличногоДокументаРаздел1.Области[ИмяЯчейкиДляВыводаВторогоЗначения].Значение = ?(ОбластьИмя = "КодСтраны", ВтороеЗнач, ПервоеЗнач);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКБКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПолеТабличногоДокументаРаздел1 = ДополнительныеПараметры.ПолеТабличногоДокументаРаздел1;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокументаРаздел1.Области.КБК.Значение = Результат["Код"];
	
	ПолеТабличногоДокументаРаздел1.Области["КБК"].Значение = Результат["Код"];
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияФизЛицКодГраждЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбластьИмя = ДополнительныеПараметры.ОбластьИмя;
	ПолеТабличногоДокументаФизЛица = ДополнительныеПараметры.ПолеТабличногоДокументаФизЛица;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокументаФизЛица.Области[ОбластьИмя].Значение = Результат.Код;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтактнойИнформацииЗавершение(Результат, Параметры) Экспорт
	
	ОбновитьАдресВТабличномДокументе(Результат, Параметры.РоссийскийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресВТабличномДокументе(Результат, РоссийскийАдрес)
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		// Обход ошибки платформы: в веб-клиенте, в результате выполнения процедуры "СформироватьАдрес"
		// общего модуля "РегламентированнаяОтчетностьВызовСервера", не изменяются значения ключей
		// соответствия "РоссийскийАдрес", передаваемого в качестве параметра.
		РоссийскийАдрес_ = РоссийскийАдрес;
		
		РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Результат.КонтактнаяИнформация, РоссийскийАдрес_);
		
		ТабличныйДокумент.Области.ФизЛицИнд.Значение      = РоссийскийАдрес_["Индекс"];
		ТабличныйДокумент.Области.ФизЛицС.Значение        = РоссийскийАдрес_["КодРегиона"];
		ТабличныйДокумент.Области.ФизЛицРайон.Значение    = РоссийскийАдрес_["Район"];
		ТабличныйДокумент.Области.ФизЛицГород.Значение    = РоссийскийАдрес_["Город"];
		ТабличныйДокумент.Области.ФизЛицНП.Значение       = РоссийскийАдрес_["НаселенныйПункт"];
		ТабличныйДокумент.Области.ФизЛицУлица.Значение    = РоссийскийАдрес_["Улица"];
		ТабличныйДокумент.Области.ФизЛицДом.Значение      = РоссийскийАдрес_["Дом"];
		ТабличныйДокумент.Области.ФизЛицКорпус.Значение   = РоссийскийАдрес_["Корпус"];
		ТабличныйДокумент.Области.ФизЛицКвартира.Значение = РоссийскийАдрес_["Квартира"];
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяТекущейСтраницыПанели = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Модифицированность = Истина;
	Если Область.Имя = "ДатаПодписи" Тогда 
		ДатаПодписи = Область.Значение;
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Истина;
		ДатаПодписиПриИзмененииНаСервере();
		СтруктураРеквизитовФормы.мВПрограммеИзмененаОрганизация = Ложь;
		Возврат;
	ИначеЕсли Область.Имя = "НомКоррект" Тогда 
		НомерКорректировки = Область.Значение;
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		ТабличныйДокумент.Области["ВидДок"].Значение = ?(НомерКорректировки = 0, "1", "3");
		Возврат;
	КонецЕсли;
	
	ОбластьИмя = Элемент.ТекущаяОбласть.Имя;
	Если СтрНайти(ОбластьИмя, "НомСтр") = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбластьИмя = "ОКАТО" И ЗначениеЗаполнено(Область.Значение)
	   И НЕ СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2013-12-01' Тогда
		
		ДлинаЗначения = СтрДлина(СокрЛП(Область.Значение));
		
		Для Инд = ДлинаЗначения + 1 По 11 Цикл
			Область.Значение = СокрЛП(Область.Значение) + "0";
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ИмяТекущейСтраницыПанели = "Раздел2") Или (ИмяТекущейСтраницыПанели = "Раздел1") Тогда

		Группа = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
		Если Группа <> Неопределено Тогда
			НомерСтрокиМнгЧ = Сред(ОбластьИмя, 15);
			РегламентированнаяОтчетностьКлиентСервер.СохранитьЗначениеВМногостраничномБлоке(ЭтаФорма, Группа, НомерСтрокиМнгЧ, Сред(ОбластьИмя, 1, 13), Элемент.ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	ЗаполнитьСведенияОбФЛ(Истина);
	СформироватьДеревоРазделовОтчетаНаСервере();
	ЗаполнитьДатуВЯчейкахНаСервере();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПРОВЕРКИ КОНТРОЛЬНЫХ СООТНОШЕНИЙ

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда 
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда 
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
	Иначе
		СписокРасшифровкиформулы.Очистить();
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверкаРаздел1(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ПроверкаРаздел1(СтруктураРезультата)
	
	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.
	
	СтруктураОшибок = Новый Структура;
	
	ТребуемыйРаздел = "Раздел1";
	
	Раздел1 = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить().ДанныеМногостраничныхРазделов.Раздел1;
	
	ТекстФормулы = "Проверка раздела 1";
	
	НомерСтраницы = 1;
	Для Каждого Страница Из Раздел1 Цикл
		Инд = 1;
		Данные = Страница.Данные;
		
		Пока Данные.Свойство("П000010006001_" + Инд) Цикл
			
			ИмяКодВидаДохода = "П000010006003_" + Инд;
			НаименованиеКодВидаДохода = "Код вида дохода (Раздел 1 Строка 60 Графа 3 Стр." + НомерСтраницы + ")";
			КодВидаДохода = Данные[ИмяКодВидаДохода];
			
			// 1.1
			
			ИмяПоказателяЛевойЧасти = "П000010006009_" + Инд;
			НазваниеПоказателяЛевойЧасти = "Сумма налога, подлежащая перечислению в бюджет (Раздел 1 Строка 60 Графа 9 Стр." + НомерСтраницы + ")";
			
			ОписаниеКС = "Сумма налога, подлежащая перечислению в бюджет (графа 9 Раздел 1) должна быть равна произведению значений графы 4, графы 8 и графы 12 построчно, если код вида дохода по графе 3 по соответствующим строкам равен значениям 01-06, 10-15, 19, 20.";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Число(Данные[ИмяПоказателяЛевойЧасти]));
			
			ПраваяЧасть = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, Число(Данные["П000010006004_" + Инд]) * Число(Данные["П000010006008_" + Инд]) *
				Число(Данные["П000010006012_" + Инд]) / 100);
			
			Расшифровка = "" + ЛеваяЧасть + " = " + ПраваяЧасть + ", если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) +
				" = 01-06, 10-15, 19, 20";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, НомерСтраницы,
				СчетчикФормулДляРасшифровок);
			
			ИмяПоказателя = "П000010006004_" + Инд;
			НаименованиеПоказателя = "Сумма дохода до удержания налога (Раздел 1 Строка 60 Графа 4 Стр." + НомерСтраницы + ")";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НаименованиеПоказателя, Число(Данные[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			ИмяПоказателя = "П000010006008_" + Инд;
			НаименованиеПоказателя = "Ставка налога, % (Раздел 1 Строка 60 Графа 8) Стр." + НомерСтраницы + "";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НаименованиеПоказателя, Число(Данные[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			ИмяПоказателя = "П000010006012_" + Инд;
			НаименованиеПоказателя = "Курс рубля на дату перечисления налога (Раздел 1 Строка 60 Графа 12 Стр." + НомерСтраницы + ")";
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателя,
				НаименованиеПоказателя, Число(Данные[ИмяПоказателя]), "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "01, 02, 03, 04, 05, 06, 10, 11, 12, 13, 14, 15, 19, 20");
			
			ЭтоОшибка = ЛеваяЧасть <> ПраваяЧасть;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Арифметическая ошибка";
				Норма="";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.2 - 1.4
			
			ИмяПоказателяЛевойЧасти = "П000010006008_" + Инд;
			НазваниеПоказателяЛевойЧасти = "Ставка налога, % (Раздел 1 Строка 60 Графа 8 Стр." + НомерСтраницы + ")";
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздел 1) должно быть равно 15, если в графе 3 соответствующей строки указано значение кода вида дохода ""01""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			ПраваяЧасть = 15;
			
			Расшифровка = "" + ЛеваяЧасть + " = 15, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 01";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1", Неопределено, НомерСтраницы,
				СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "01");
			
			ЭтоОшибка = ЛеваяЧасть <> ПраваяЧасть;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="пп. 2 п.3 ст.284 НК РФ," + Символы.ВК + "п.3 ст. 310 НК РФ," + Символы.ВК + "пп.1 п.2 ст. 310 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.5 - 1.7
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздел 1) должно быть равно 20, если в графе 3 соответствующей строки указано значение кода вида дохода равное 02, 04, 05, 19, 20";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			ПраваяЧасть = 20;
			
			Расшифровка = "" + ЛеваяЧасть + " = 20, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 02, 04, 05, 19, 20";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "02, 04, 05, 19, 20");
			
			ЭтоОшибка = ЛеваяЧасть <> ПраваяЧасть;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="пп. 1 п. 2 ст. 284 НК РФ" + Символы.ВК + "пп. 4 п. 2 ст. 310 НК РФ" + Символы.ВК + "пп. 1 п. 2 ст. 310 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.8 - 1.10
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздел 1) должно быть равно 15, если в графе 3 соответствующей строки указано значение кода вида дохода ""03""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			ПраваяЧасть = 15;
			
			Расшифровка = "" + ЛеваяЧасть + " = 15, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 03";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "03");
			
			ЭтоОшибка = ЛеваяЧасть <> ПраваяЧасть;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="пп.1 п.4 ст. 284 НК РФ" + Символы.ВК + "пп. 4 п. 2 ст. 310 НК РФ" + Символы.ВК + "пп. 1 п. 2 ст. 310 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.11 - 1.13
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздела 1)должно быть равно 20% или 24% в зависимости от признания расходов, указанных в п. 4 ст. 309 НК РФ, при условии, если значение кода вида доходов в графе 3 соответствующей строки равно значению ""06""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 20 или 24, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 06";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "06");
			
			ЭтоОшибка = ЛеваяЧасть <> 20 И ЛеваяЧасть <> 24;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="п. 1 и пп. 1 п. 2 ст. 284 НК РФ" + Символы.ВК + "пп. 4 п. 2 ст. 310 НК РФ" + Символы.ВК + "пп. 1 п. 2 ст. 310 НК РФ";
			Иначе 
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.14
			
			ОписаниеКС = "Значение графы 8 Раздела 1 больше или меньше 24, если код вида дохода в графе 3 по соответствующей строке равен ""06""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 24, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 06";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "06");
			
			ЭтоОшибка = ЛеваяЧасть <> 24;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Необоснованное занижение налоговой базы вследствие неподтверждения расходов или подтверждения расходов неправильно оформленными бумагами. Необходимо проверить обоснование расходов и правильности оформления соответствующих бумаг.";
				Норма="п. 4 ст. 309 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.15 - 1.16
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздела 1)должно быть равно 20% или 24% в зависимости от признания расходов, указанных в п. 4 ст. 309 НК РФ, при условии, если значение кода вида доходов в графе 3 соответствующей строки равно значению ""11""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 20 или 24, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 11";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "11");
			
			ЭтоОшибка = ЛеваяЧасть <> 20 И ЛеваяЧасть <> 24;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="п. 1 и пп. 1 п. 2 ст. 284 НК РФ" + Символы.ВК + "пп.1 п. 2 ст. 310 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.17
			
			ОписаниеКС = "Значение графы 8 Раздела 1 больше или меньше 24, если код вида дохода в графе 3 по соответствующей строке равен ""11""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 24, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 11";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "11");
			
			ЭтоОшибка = ЛеваяЧасть <> 24;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Необоснованное занижение налоговой базы вследствие неподтверждения расходов или подтверждения расходов неправильно оформленными бумагами. Необходимо проверить обоснование расходов и правильности оформления соответствующих бумаг.";
				Норма="п. 4 ст. 309 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.18 - 1.20
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздела 1)должно быть равно 10% или 20% в зависимости от использования имущества в международных перевозках, при условии, если значение кода вида доходов в графе 3 соответствующей строки равно значению ""12"", ""13"", ""14""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 10 или 20, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 12, 13, 14";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "12, 13, 14");
			
			ЭтоОшибка = ЛеваяЧасть <> 10 И ЛеваяЧасть <> 20;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="пп. 1, 2 п. 2 ст. 284 НК РФ" + Символы.ВК + "пп. 4 п. 2 ст. 310 НК РФ" + Символы.ВК + "пп. 1 п. 2 ст. 310 НК РФ";
			Иначе
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка,
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			// 1.21 - 1.23
			
			ОписаниеКС = "Значение ставки налога (графа 8 Раздел 1) должно быть равно 10, если в графе 3 соответствующей строки указано значение кода вида дохода ""15""";
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
			
			ЛеваяЧасть = Число(Данные[ИмяПоказателяЛевойЧасти]);
			
			Расшифровка = "" + ЛеваяЧасть + " = 10, если " + ?(ПустаяСтрока(КодВидаДохода), """ """, КодВидаДохода) + " = 15";
			
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяПоказателяЛевойЧасти,
				НазваниеПоказателяЛевойЧасти, ЛеваяЧасть, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка,
				"Раздел1", Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
				
			РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(СписокРасшифровкиПоказателей, ИмяКодВидаДохода,
				НаименованиеКодВидаДохода, КодВидаДохода, "", СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, "Раздел1",
				Неопределено, НомерСтраницы, СчетчикФормулДляРасшифровок);
			
			УсловиеВыполнено = ЗначениеСодержитсяВСписке(КодВидаДохода, "15");
			ЭтоОшибка = ЛеваяЧасть <> 10;
			Если УсловиеВыполнено и ЭтоОшибка Тогда 
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				ОписаниеНарушения = "Возможно, имеет место одно из следующих нарушений:" + Символы.ВК + "1) Применена ошибочная ставка;" + Символы.ВК + "2) Необоснованное применение соглашения об избежании двойного налогообложения и неполное удержание налога;" + Символы.ВК + "3) Необоснованное неудержание налога с доходов, которые не относятся к постоянному представительству.";
				Норма="пп. 2 п. 2 ст. 284 НК РФ" + Символы.ВК + "пп.4 п. 2 ст. 310 НК РФ" + Символы.ВК + "пп.1 п. 2 ст. 310 НК РФ";
			Иначе 
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				ОписаниеНарушения = "";
				Норма="";
			КонецЕсли;
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, 
				УсловиеВыполнено И ЭтоОшибка, ОписаниеНарушения, Норма);
			
			Инд = Инд + 1;
		КонецЦикла;
		
		НомерСтраницы = НомерСтраницы + 1;
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок",    ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок",              СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, ОписаниеНарушения, Норма)
		
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Нарушено соотношение показателей. Возможно, показатели заполнены некорректно.");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстФормулы + ". " + ОписаниеКС);
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеНарушения);
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Норма);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСодержитсяВСписке(ПроверяемоеЗначение, КонтрольныйСписок)
	
	Результат = Ложь;
	
	Значения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтрольныйСписок, ",");
	Для Инд = 0 По Значения.ВГраница() Цикл
		Значения[Инд] = СокрЛП(Значения[Инд]);
	КонецЦикла;
	
	Результат = (Значения.Найти(ПроверяемоеЗначение) <> Неопределено);
	
	Возврат Результат
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		ТестовоеИмя = ИмяГруппы + "01_" + Строка(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1);
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 И
			
			ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть)

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку2" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы2;
	КонецЕсли;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];
		
		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции