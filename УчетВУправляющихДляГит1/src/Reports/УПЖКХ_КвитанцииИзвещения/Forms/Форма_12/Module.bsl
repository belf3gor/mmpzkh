// Квитанция для консалтинговой компании "Бизнес Логика" (г. Санкт-Петербург).
// Квитанция соответствует жилищному распоряжению №129ф Жилищного комитета 
// Правительства Санкт-Петербурга (формат ВЦКП).
// Все начисления и оплаты рассчитываются за выбранный период - МЕСЯЦ. 
// Поля "За период с..по.." выводятся в макете для информации. Это нужно, если начисления 
// производят на несколько месяцев вперед в одном месяце.
//
// Особенностью формы является то, что пени выводятся за предыдущий месяц

#Область ИнициализацияПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура заполнения списков выбора настроек.
Процедура ЗаполнитьСпискиВыбораНастроек()
	
	мСпособПечатиКвитанцииКапРемонт = Новый СписокЗначений();
	мСпособПечатиКвитанцииКапРемонт.Добавить("основную квитанцию и квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только основную квитанцию");
	мСпособПечатиКвитанцииКапРемонт.Добавить("только квитанцию на кап. ремонт");
	мСпособПечатиКвитанцииКапРемонт.Добавить("единая квитанция на осн. услуги и кап. ремонт");
	
	Для Каждого ТекЭлемент Из мСпособПечатиКвитанцииКапРемонт Цикл
		Элементы.СпособПечатиКвитанцииКапРемонт.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпискиВыбораНастроек()

&НаСервере
// Обновляет строку с представлением услуг капитального ремонта.
//
Процедура ОбновитьСписокУслугКапРемонт()
	
	СтрокаСоСпискомУслуг = "";
	
	Если ТипЗнч(мСтруктураНастроекКапРемонта.СписокУслуг) = Тип("СписокЗначений") Тогда
		Для Каждого ТекУслуга ИЗ мСтруктураНастроекКапРемонта.СписокУслуг Цикл
			СтрокаСоСпискомУслуг = СтрокаСоСпискомУслуг + ?(ПустаяСтрока(СтрокаСоСпискомУслуг), "", Символы.ПС) + Символы.Таб + ТекУслуга;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.НадписьСписокУслугКапРемонт.Высота    = мСтруктураНастроекКапРемонта.СписокУслуг.Количество();
	Элементы.НадписьСписокУслугКапРемонт.Заголовок = СтрокаСоСпискомУслуг;
	
КонецПроцедуры // ОбновитьСписокУслугКапРемонт()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	Попытка
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
		
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;

КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
// Предназначена для оформления элементов формы, расположенных на странице "Кап.ремонт".
//
Процедура ОбновитьСтатусВеденияУчетаПоКапремонту()
	
	СтруктураОформления = Справочники.УПЖКХ_НастройкиУчетаКапремонта.СформироватьСтруктуруОформленияПолейФормы(мСтруктураНастроекКапРемонта);
	Элементы.НадписьВедениеКапремонта.Заголовок  = СтруктураОформления.СтатусВеденияУчета;
	Элементы.КнопкаЭлементСправочника.Заголовок  = СтруктураОформления.НадписьКнопки;
	Элементы.НадписьВедениеКапремонта.ЦветТекста = СтруктураОформления.ЦветаСтатуса;
	
КонецПроцедуры // ОбновитьСтатусВеденияУчетаПоКапремонту()

&НаСервере
// Возвращает значение реквизита объекта.
//
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Производит сохранение параметров отчета.
//
Процедура СохранениеРеквизитов()
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Объект",                            Отчет.ОбъектОтчета);
	СтруктураПараметров.Вставить("Организация",                       Отчет.Организация);
	СтруктураПараметров.Вставить("ПериодПросмотра",                   Отчет.ПериодПросмотра);
	СтруктураПараметров.Вставить("ВключатьКассовыйСбор",              Отчет.ВключатьКассовыйСбор);
	СтруктураПараметров.Вставить("ВариантСортировки",                 Отчет.ВариантСортировки);
	СтруктураПараметров.Вставить("НеПечататьНулевыеКвитанции",        Отчет.НеПечататьНулевыеКвитанции);
	СтруктураПараметров.Вставить("ВыводитьНачальноеСальдо",           Отчет.ВыводитьНачальноеСальдо);
	СтруктураПараметров.Вставить("ВключениеНачальнойЗадолженности",   Отчет.ВключениеНачальнойЗадолженности);
	СтруктураПараметров.Вставить("ОбщийСписокУслуг",                  Отчет.ОбщийСписокУслуг.Выгрузить());
	СтруктураПараметров.Вставить("УслугиКоммунальные",                Отчет.УслугиКоммунальные.Выгрузить());
	СтруктураПараметров.Вставить("УслугиСодержанияРемонта",           Отчет.УслугиСодержанияРемонта.Выгрузить());
	СтруктураПараметров.Вставить("ВыводитьПоОднойКвитанции",          Отчет.ВыводитьПоОднойКвитанции);
	СтруктураПараметров.Вставить("ЗаПериод",                          ЗаПериод);
	СтруктураПараметров.Вставить("ДатаС",                             ДатаС);
	СтруктураПараметров.Вставить("ДатаПо",                            ДатаПо);
	СтруктураПараметров.Вставить("ПериодДолга",                       Отчет.ПериодДолга);
	СтруктураПараметров.Вставить("ВыводитьКоличествоПроживающих",     Отчет.ВыводитьКоличествоПроживающих);
	СтруктураПараметров.Вставить("ВсегдаВыводитьПоказанияСчетчиков",  Отчет.ВсегдаВыводитьПоказанияСчетчиков);
	СтруктураПараметров.Вставить("ВыводитьОтрицательнуюСуммуКОплате", Отчет.ВыводитьОтрицательнуюСуммуКОплате);
	СтруктураПараметров.Вставить("ПечататьКвитанциюКапРемонт",        Отчет.ПечататьКвитанциюКапРемонт);
	СтруктураПараметров.Вставить("СпособПечатиКвитанцииКапРемонт",    Отчет.СпособПечатиКвитанцииКапРемонт);
	СтруктураПараметров.Вставить("ПолучательПлатежа",                 Отчет.ПолучательПлатежа);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыОтчета_УПЖКХ_КвитанцииИзвещения",,
																	СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
// Процедура записывает порядок услуг в регистр сведений.
Процедура ЗаписатьПорядокУслуг()
	
	Отчеты.УПЖКХ_КвитанцииИзвещения.ЗаписатьПорядокУслугВКвитанции(ПорядокУслугВКвитанции.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
// Управляет видимостью элементов формы.
Процедура УстановитьВидимость()
	
	Элементы.ВключениеНачальнойЗадолженности.Видимость = (Отчет.ВыводитьНачальноеСальдо);
	
	Элементы.ЧислоДолгаСтрока.Видимость = Отчет.ВыводитьНачальноеСальдо;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		
		ЗаполнитьСпискиВыбораНастроек();
		
		Параметры.Свойство("СформироватьКвитанциюПриОткрытии", СформироватьКвитанциюПриОткрытии);
		Параметры.Свойство("ОбъектОтчета",            Отчет.ОбъектОтчета);
		
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Отчет.Организация = Параметры.Организация;
		КонецЕсли;
		
		Отчет.СписокФормКвитанций = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
		Отчеты.УПЖКХ_КвитанцииИзвещения.ИнициализацияРеквизитов(Отчет);
		
		ЗаполнитьТаблицуОбщийСписокУслуг();
		
		Отчет.СпособПечатиКвитанцииКапРемонт = ?(ЗначениеЗаполнено(Отчет.СпособПечатиКвитанцииКапРемонт), Отчет.СпособПечатиКвитанцииКапРемонт, мСпособПечатиКвитанцииКапРемонт[0].Значение);
		
		ЗаполнитьРеквизитыОтчетаПоКапремонту();
		
		ОбновитьСтатусВеденияУчетаПоКапремонту();
		
		УправлениеФормой();
		
		ОбновитьСписокУслугКапРемонт();
		
		УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
		
		// Устанавливаем организацию из параметров формы, если при смене организации открывается её основная квитанция.
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Отчет.Организация = Параметры.Организация;
		КонецЕсли;
		
		ПорядокУслугВКвитанции.Загрузить(Отчеты.УПЖКХ_КвитанцииИзвещения.ЗаполнитьПорядокУслугВКвитанции());
		
		// Реклама
		ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
		// Конец Реклама
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить настройки формирования квитанции. Пожалуйста, проверьте, корректно ли заданы настройки формирования квитанций."));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура предназначена для обновления общего списка услуг разделения по типам,
// если изначально таблицы разделения услуг по типам пустые, либо в базе добавлены новые услуги.
//
Процедура ЗаполнитьТаблицуОбщийСписокУслуг()
	
	ВсеВидыУслуг.Загрузить(Отчеты.УПЖКХ_КвитанцииИзвещения.ПолучитьВсеВидыУслуг());
	
	Если Отчет.ОбщийСписокУслуг.Количество() = 0 
		И Отчет.УслугиКоммунальные.Количество() = 0 
		И Отчет.УслугиСодержанияРемонта.Количество() = 0 Тогда
		Отчет.ОбщийСписокУслуг.Загрузить(ВсеВидыУслуг.Выгрузить());
	ИначеЕсли ВсеВидыУслуг.Количество() <> (Отчет.ОбщийСписокУслуг.Количество() 
										+ Отчет.УслугиКоммунальные.Количество() 
										+ Отчет.УслугиСодержанияРемонта.Количество()) Тогда
		ЕстьИзменения = Ложь;
		КоличествоСтр = ВсеВидыУслуг.Количество();
		Для Сч = 1 По КоличествоСтр Цикл
			СтрВсехВидовУслуг = ВсеВидыУслуг.Получить(КоличествоСтр - Сч);
			Если Отчет.ОбщийСписокУслуг.НайтиСтроки(Новый Структура("ВидУслуги", СтрВсехВидовУслуг.ВидУслуги)).Количество() > 0
			 Или Отчет.УслугиКоммунальные.НайтиСтроки(Новый Структура("ВидУслуги", СтрВсехВидовУслуг.ВидУслуги)).Количество() > 0
			 Или Отчет.УслугиСодержанияРемонта.НайтиСтроки(Новый Структура("ВидУслуги", СтрВсехВидовУслуг.ВидУслуги)).Количество() > 0 Тогда
				ЕстьИзменения = Истина;
				ВсеВидыУслуг.Удалить(СтрВсехВидовУслуг);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрУслуг Из ВсеВидыУслуг Цикл
			НовСтрОбщегоСписка = Отчет.ОбщийСписокУслуг.Добавить();
			НовСтрОбщегоСписка.ВидУслуги = СтрУслуг.ВидУслуги;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Изменен список видов услуг, необходимо проверить разделение видов услуг по типам на закладке ""Разделение услуг"".");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Попытка
		
		Период = Формат(Отчет.ПериодПросмотра,"ДФ=""ММММ гггг""");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек,
																				Элементы.ГруппаПанельНастроек.Видимость);
		УстановитьВидимость();
		
		Если СформироватьКвитанциюПриОткрытии Тогда
			СформироватьОтчет(Команды.СформироватьОтчет);
		КонецЕсли;
		
		ТекущаяФормаКвитанции = Отчет.СписокФормКвитанций.НайтиПоЗначению("12");
		
		ПредыдущаяОрганизация = Отчет.Организация;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ОтменитьВыполнениеЗаданияНаСервере();
		
		ЗаписатьПорядокУслуг();
		
		СохранениеРеквизитов();
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сохранить настройки формирования квитанций. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сохранить настройки формирования квитанций. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
		// Выполним обновление общего списка услуг раделения по типам после загрузки пользовательских настроек.
		// Это необходимо, что бы новые услуги, попали в настройки разделения услуг по типам.
		//
		ЗаполнитьТаблицуОбщийСписокУслуг();
		
		// Данный код предназначен для корректной обработки ситуации, если отчет открывается из формы списка справочника "Лицевые счета"
		// и существуют сохраненные пользовательские настройки отчета.
		//
		// Ранее, в таком случае, лицевой счет, выбранный на форме списка справочника "Лицевые счета",
		// заменялся на лицевой счет, сохраненный в пользовательских настройках отчета.
		//
		// Теперь квитанция формируется на лицевой счет, выбранный на форме списка справочника "Лицевые счета".
		//
		Если Параметры.Свойство("ОбъектОтчета") И НЕ Параметры.ОбъектОтчета.Пустая() Тогда
			Отчет.ОбъектОтчета = Параметры.ОбъектОтчета;
		КонецЕсли;
		
		УправлениеФормой();
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_ПечатьКвитанцийСервер.ВывестиСообщениеОбОшибкеНаСервере(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить пользовательские настройки формирования квитанций. Пожалуйста, проверьте, корректно ли заданы пользовательские настройки формирования квитанций."));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
			И Параметр = Отчет.Организация Тогда
		ЗаполнитьРеквизитыОтчетаПоКапремонту();
		ОбновитьСтатусВеденияУчетаПоКапремонту();
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.ПериодПросмотра", "Период", Модифицированность);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.ПериодПросмотра", "Период",
															Направление, Модифицированность);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.ПериодПросмотра", "Период");
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ПредыдущаяОрганизация = Отчет.Организация Тогда
		
		Попытка
			
			Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
			КонецЕсли;
			
			СменитьКвитанциюПриИзмененииОрганизации();
			
			ЗаполнитьРеквизитыОтчетаПоКапремонту();
			
			ОбновитьСтатусВеденияУчетаПоКапремонту();
			
			УправлениеФормой();
			
			ПредыдущаяОрганизация = Отчет.Организация;
			
		Исключение
			
			УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектОтчета".
Процедура ОбъектОтчетаПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось получить список лицевых счетов. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолучательПлатежа".
Процедура ПолучательПлатежаПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия ссылки "СсылкаНаСайтНажатие".
Процедура СсылкаНаСайтНажатие(Элемент)
	
	Попытка
		
		КВП_РаботаСДиалогамиКлиент.ПоказатьВебСтраницу(КВП_ПрочиеПроцедурыИФункции.АдресСайтаИнтернетПортала(),
														"1С: Сайт управляющей компании ЖКХ, ТСЖ и ЖСК", Истина);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ПАНЕЛЬ НАСТРОЕК

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьНачальноеСальдо".
Процедура ВыводитьНачальноеСальдоПриИзменении(Элемент)
	
	Попытка
		
		УстановитьВидимость();
		
		ЧислоДолгаСтрока = 0;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВключениеНачальнойЗадолженности".
Процедура ВключениеНачальнойЗадолженностиПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьПоОднойКвитанции".
Процедура ВыводитьПоОднойКвитанцииПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьОтрицательнуюСуммуКОплате".
Процедура ВыводитьОтрицательнуюСуммуКОплатеПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантСортировки".
Процедура ВариантСортировкиПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЗаПериод".
Процедура ЗаПериодПриИзменении(Элемент)
	
	Попытка
		
		Если ЗаПериод = Истина Тогда
			ДатаС = НачалоМесяца(Отчет.ПериодПросмотра);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаС".
Процедура ДатаСПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПо".
Процедура ДатаПоПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаФормирования".
Процедура ДатаФормированияПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЧислоДолгаСтрока".
Процедура ЧислоДолгаСтрокаПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьКоличествоПроживающих".
Процедура ВыводитьКоличествоПроживающихПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВсегдаВыводитьПоказанияСчетчиков".
Процедура ВсегдаВыводитьПоказанияСчетчиковПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТА

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "Результат".
Процедура РезультатВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Расшифровка = Область.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ТекстШК") Тогда
		СтандартнаяОбработка = Ложь;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Расшифровка.ТекстШК;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	Попытка
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		
		РезультатВыполнения = СформироватьОтчетНаСервере();
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки(), "не удалось сформировать квитанцию. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru"));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек".
Процедура ПанельНастроек(Команда)
	
	Попытка
		
		Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек,
																				Элементы.ГруппаПанельНастроек.Видимость);
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СменитьКвитанцию".
//
Процедура СменитьКвитанцию(Команда)
	
	Отчет.СписокФормКвитанций = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыКвитанции", ЭтотОбъект, Новый Структура);
	
	Отчет.СписокФормКвитанций.ПоказатьВыборЭлемента(ОповещениеОВыборе, "Сменить квитанцию", Отчет.СписокФормКвитанций.НайтиПоЗначению("12"));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Нажатие" кнопки "КнопкаЭлементСправочника".
//
Процедура КнопкаЭлементСправочникаНажатие(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Отчет.Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Отчет.Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			Оповещение = Новый ОписаниеОповещения("КнопкаЭлементСправочникаНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатие()

&НаКлиенте
// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
Процедура КнопкаЭлементСправочникаНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатиеЗавершение()

&НаКлиенте
// Обработчик команды "ВСодержание".
Процедура ВСодержание(Команда)
	
	Попытка
		
		ТекСтрокаУслуг = Элементы.ОбщийСписокУслуг.ТекущиеДанные;
		Если (Не ТекСтрокаУслуг = Неопределено) И ЗначениеЗаполнено(ТекСтрокаУслуг.ВидУслуги) Тогда
			НовСтр = Отчет.УслугиСодержанияРемонта.Добавить();
			НовСтр.ВидУслуги = ТекСтрокаУслуг.ВидУслуги;
			Отчет.ОбщийСписокУслуг.Удалить(ТекСтрокаУслуг);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзСодержания".
Процедура ИзСодержания(Команда)
	
	Попытка
		
		ТекСтрокаУслуг = Элементы.УслугиСодержанияРемонта.ТекущиеДанные;
		Если (Не ТекСтрокаУслуг = Неопределено) И ЗначениеЗаполнено(ТекСтрокаУслуг.ВидУслуги) Тогда
			НовСтр = Отчет.ОбщийСписокУслуг.Добавить();
			НовСтр.ВидУслуги = ТекСтрокаУслуг.ВидУслуги;
			Отчет.УслугиСодержанияРемонта.Удалить(ТекСтрокаУслуг);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ВКоммунальные".
Процедура ВКоммунальные(Команда)
	
	Попытка
		
		ТекСтрокаУслуг = Элементы.ОбщийСписокУслуг.ТекущиеДанные;
		Если (Не ТекСтрокаУслуг = Неопределено) И ЗначениеЗаполнено(ТекСтрокаУслуг.ВидУслуги) Тогда
			НовСтр = Отчет.УслугиКоммунальные.Добавить();
			НовСтр.ВидУслуги = ТекСтрокаУслуг.ВидУслуги;
			Отчет.ОбщийСписокУслуг.Удалить(ТекСтрокаУслуг);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ИзКоммунальных".
Процедура ИзКоммунальных(Команда)
	
	Попытка
		
		ТекСтрокаУслуг = Элементы.УслугиКоммунальные.ТекущиеДанные;
		Если (Не ТекСтрокаУслуг = Неопределено) И ЗначениеЗаполнено(ТекСтрокаУслуг.ВидУслуги) Тогда
			НовСтр = Отчет.ОбщийСписокУслуг.Добавить();
			НовСтр.ВидУслуги = ТекСтрокаУслуг.ВидУслуги;
			Отчет.УслугиКоммунальные.Удалить(ТекСтрокаУслуг);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		УПЖКХ_РаботаСДиалогамиКлиент.ВывестиСообщениеОбОшибкеВКвитанции(ЭтотОбъект, УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(ОписаниеОшибки()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Отчет.УПЖКХ_КвитанцииИзвещения", "ПФ_MXL_Макет_12");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗаданияНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ПериодПросмотра"				   , Отчет.ПериодПросмотра);
	ПараметрыОтчета.Вставить("Организация"					   , Отчет.Организация);
	ПараметрыОтчета.Вставить("ОбъектОтчета"					   , Отчет.ОбъектОтчета);
	ПараметрыОтчета.Вставить("ВариантСортировки"			   , Отчет.ВариантСортировки);
	ПараметрыОтчета.Вставить("НеПечататьНулевыеКвитанции"	   , Отчет.НеПечататьНулевыеКвитанции);
	ПараметрыОтчета.Вставить("ВыводитьНачальноеСальдо"		   , Отчет.ВыводитьНачальноеСальдо);
	ПараметрыОтчета.Вставить("ВключениеНачальнойЗадолженности" , Отчет.ВключениеНачальнойЗадолженности);
	ПараметрыОтчета.Вставить("ВключатьКассовыйСбор"			   , Отчет.ВключатьКассовыйСбор);
	ПараметрыОтчета.Вставить("ВыводитьПоОднойКвитанции"		   , Отчет.ВыводитьПоОднойКвитанции);
	ПараметрыОтчета.Вставить("ВыводитьКоличествоПроживающих"   , Отчет.ВыводитьКоличествоПроживающих);
	ПараметрыОтчета.Вставить("ВсегдаВыводитьПоказанияСчетчиков", Отчет.ВсегдаВыводитьПоказанияСчетчиков);
	ПараметрыОтчета.Вставить("ВыводитьОтрицательнуюСуммуКОплате",Отчет.ВыводитьОтрицательнуюСуммуКОплате);
	ПараметрыОтчета.Вставить("ОбщийСписокУслуг"				   , Отчет.ОбщийСписокУслуг.Выгрузить());
	ПараметрыОтчета.Вставить("УслугиСодержанияРемонта"		   , Отчет.УслугиСодержанияРемонта.Выгрузить());
	ПараметрыОтчета.Вставить("УслугиКоммунальные"			   , Отчет.УслугиКоммунальные.Выгрузить());
	ПараметрыОтчета.Вставить("ПериодДолга"					   , Отчет.ПериодДолга);
	ПараметрыОтчета.Вставить("ДатаФормирования"				   , ДатаФормирования);
	ПараметрыОтчета.Вставить("ЗаПериод"						   , ЗаПериод);
	ПараметрыОтчета.Вставить("ДатаС"						   , ДатаС);
	ПараметрыОтчета.Вставить("ДатаПо"						   , ДатаПо);
	ПараметрыОтчета.Вставить("ЧислоДолгаСтрока"				   , ЧислоДолгаСтрока);
	ПараметрыОтчета.Вставить("ПениЗаТекущийМесяц"			   , Ложь);
	ПараметрыОтчета.Вставить("КассовыйСборБанка"			   , 3);
	ПараметрыОтчета.Вставить("ИсполнительРасчетов"			   , Отчет.ПолучательПлатежа);
	ПараметрыОтчета.Вставить("ВидЗапроса"					   , "форма_12");
	ПараметрыОтчета.Вставить("Форма"						   , "12");
	
	// Здесь необходимо добавить параметр "ВедетсяРаздельныйУчетПоУслугамКапремонта".
	Попытка
		СтруктураНастроекПоКапремонту = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Отчет.Организация, Истина);
		
		ПараметрыОтчета.Вставить("ВедетсяРаздельныйУчетПоУслугамКапремонта", СтруктураНастроекПоКапремонту.ВедетсяРаздельныйУчет);
		ПараметрыОтчета.Вставить("СписокУслугКапРемонт",                     СтруктураНастроекПоКапремонту.СписокУслуг);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки учета капитального ремонта. Пожалуйста, проверьте, корректно ли заданы настройки учета капитального ремонта.", ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	ПараметрыОтчета.Вставить("СпособПечатиКвитанцииКапРемонт", Отчет.СпособПечатиКвитанцииКапРемонт);
	ПараметрыОтчета.Вставить("ПечататьКвитанциюКапРемонт",     ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта
														       И НЕ ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[1].Значение);
	
	// Формируем таблицу со всеми объектами квитанции в разрезе помещений и зданий.
	Попытка
		ТаблицаОбъектов = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуОбъектовКвитанции(ПараметрыОтчета);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить список лицевых счетов. Обратитесь за помощью к разработчикам: <div>otr@rarus.ru<ref>mailto:otr@rarus.ru", ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	// Формируем списки, необходимые для поиска данных.
	СписокЛицевыхСчетов = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(ТаблицаОбъектов.Скопировать(), "ЛицевойСчет");
	СписокПомещений     = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(ТаблицаОбъектов.Скопировать(), "Помещение");
	СписокПодъездов     = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(ТаблицаОбъектов.Скопировать(), "Подъезд");
	СписокЗданий        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСписокОбъектов(ТаблицаОбъектов.Скопировать(), "Здание");
	
	ПараметрыОтчета.Вставить("ТаблицаОбъектов",      ТаблицаОбъектов);
	ПараметрыОтчета.Вставить("СписокЛицевыхСчетов",  СписокЛицевыхСчетов);
	ПараметрыОтчета.Вставить("СписокПомещений",      СписокПомещений);
	ПараметрыОтчета.Вставить("СписокПодъездов",      СписокПодъездов);
	ПараметрыОтчета.Вставить("СписокЗданий",         СписокЗданий);
	ПараметрыОтчета.Вставить("ВыбранныеУслуги",      Отчет.ВыбранныеУслуги.Выгрузить());
	ПараметрыОтчета.Вставить("ВыборУслуг",           Отчет.ВыборУслуг);
	УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСпискиУслуг(ПараметрыОтчета);
	
	ПараметрыОтчета.Вставить("КомпонентаQRКодаПодключена", УПЖКХ_ПечатьКвитанцийСервер.КомпонентаФормированияQRКодаПодключена());
	ПараметрыОтчета.Вставить("КомпонентаШКПодключена",     УПЖКХ_ПечатьКвитанцийСервер.КомпонентаФормированияШтрихКодаПодключена());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ЗаписатьПорядокУслуг();
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.УПЖКХ_КвитанцииИзвещения.СформироватьОтчетФорма12(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.УПЖКХ_КвитанцииИзвещения.СформироватьОтчетФорма12",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
// Управляет видимостью элементов формы.
Процедура УправлениеФормой()
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Элементы.СпособПечатиКвитанцииКапРемонт.Видимость = Истина;
		
		Элементы.НадписьУслугиКапРемонта.Видимость               = Истина;
		Элементы.НадписьСписокУслугКапРемонт.Видимость           = Истина;
		
		Элементы.НадписьВедениеКапремонта.ЦветТекста = ЦветаСтиля.УПЖКХ_ТекстСообщенияИнформации;
		
		ОбновитьСписокУслугКапРемонт();
	Иначе
		
		Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены Тогда
			Элементы.НадписьВедениеКапремонта.ЦветТекста = ЦветаСтиля.УПЖКХ_ТекстСообщенияОПроблемах;
		Иначе
			Элементы.НадписьВедениеКапремонта.ЦветТекста = Новый Цвет(0, 0, 0);
		КонецЕсли;
		
		Элементы.СпособПечатиКвитанцииКапРемонт.Видимость        = Ложь;
		
		Элементы.НадписьУслугиКапРемонта.Видимость               = Ложь;
		Элементы.НадписьСписокУслугКапРемонт.Видимость           = Ложь;
	КонецЕсли;
	
	Элементы.СравнитьМакетСТиповым.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Отчет.УПЖКХ_КвитанцииИзвещения", "ПФ_MXL_Макет_12");
	
КонецПроцедуры

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает основную форму квитанции выбранной организации.
//
Процедура СменитьКвитанциюПриИзмененииОрганизации()
	
	мНастройкиФормированияПДЖКХОтказ = Ложь;
	мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Отчет.Организация,
																								 мНастройкиФормированияПДЖКХОтказ);
	
	Если НЕ мНастройкиФормированияПДЖКХотказ Тогда
		ОсновнаяФормаКвитанцииОрганизации = мНастройкиФормированияПДЖКХ.ФормаКвитанции;
		
		ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено;
		Если ОсновнаяФормаКвитанцииОрганизации <> ВидМакета Тогда
			ДопПараметры = Новый Структура;
			Если Не ТипЗнч(ОсновнаяФормаКвитанцииОрганизации) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
				// Поиск формы квитанции в списке квитанций по значению.
				Для Каждого ФормаКвитанции Из Отчет.СписокФормКвитанций Цикл
					Если ФормаКвитанции.Значение = ОсновнаяФормаКвитанцииОрганизации Тогда
						ОсновнаяФормаКвитанцииОрганизацииВСписке = ФормаКвитанции;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОсновнаяФормаКвитанцииОрганизацииВСписке = Отчет.СписокФормКвитанций.НайтиПоЗначению("Внешний отчет");
				ДопПараметры.Вставить("ВнешнийОтчет", ОсновнаяФормаКвитанцииОрганизации);
			КонецЕсли;
			
			Если Не ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено Тогда
				ДопПараметры.Вставить("ОсновнаяФормаКвитанцииОрганизации", ОсновнаяФормаКвитанцииОрганизацииВСписке);
				ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ОбработатьСменуКвитанцииПриИзмененииОрганизации", ЭтотОбъект, ДопПараметры);
				ТекстВопроса = "Сменить квитанцию на """
							+ ОсновнаяФормаКвитанцииОрганизации
							+ """, которая является основной квитанцией для организации "
							+ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Организация, "НаименованиеСокращенное") + "?";
				ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СменитьКвитанциюПриИзмененииОрганизации()

&НаКлиенте
// Процедура обрабатывает изменение квитанции в случае смены организации в квитанции в соответствии с ответом пользователя.
//
Процедура ОбработатьСменуКвитанцииПриИзмененииОрганизации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДопПараметры = Новый Структура;
		Если ДополнительныеПараметры.Свойство("ВнешнийОтчет") Тогда
			ОбработкаОткрытияВнешнейКвитанции(ДополнительныеПараметры.ВнешнийОтчет, ДопПараметры);
		Иначе
			ДопПараметры.Вставить("ИзменитьОрганизацию", Истина);
			ОбработатьВыборФормыКвитанции(ДополнительныеПараметры.ОсновнаяФормаКвитанцииОрганизации, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСменуКвитанцииПриИзмененииОрганизации()

&НаКлиенте
// Открывает при необходимости выбранную пользователем форму квитанции.
//
Процедура ОбработатьВыборФормыКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если ВыбраннаяКвитанция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяКвитанция.Значение = ТекущаяФормаКвитанции Тогда
		Возврат;
	ИначеЕсли ВыбраннаяКвитанция.Значение = "Внешний отчет" Тогда
		Попытка
			ОтборПоВиду = Новый СписокЗначений;
			ДополнительныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет");
			ОтборПоВиду.Добавить(ДополнительныйОтчет, ДополнительныйОтчет);
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Отбор",       Новый Структура("Вид", ОтборПоВиду));
			ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработкаОткрытияВнешнейКвитанции", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора", ПараметрыОткрытияФормы,,,,, ОповещениеОВыборе);
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		
		ПараметрыОтчета = Новый Структура;
		Если ДопПараметры.Свойство("ИзменитьОрганизацию") Тогда
			ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
		КонецЕсли;
		
		ПараметрыОтчета.Вставить("ВидМакета", ВыбраннаяКвитанция.Значение);
		
		Если ТипЗнч(ВыбраннаяКвитанция.Значение) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов") Тогда
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		Иначе
			ОткрытьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма.Форма_" + ВыбраннаяКвитанция.Представление, ПараметрыОтчета);
		КонецЕсли;
		
		// Закрываем текущую форму.
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФормыКвитанции()

&НаКлиенте
// Процедура открывает файл отчета внешней квитанции.
//
Процедура ОбработкаОткрытияВнешнейКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если Не ВыбраннаяКвитанция = Неопределено Тогда
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыбраннаяКвитанция);
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма",, ЭтаФорма);
		
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОткрытияВнешнейКвитанции()

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

#КонецОбласти
