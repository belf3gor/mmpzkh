
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		
		Параметры.Свойство("СформироватьКвитанциюПриОткрытии", СформироватьКвитанциюПриОткрытии);
		Параметры.Свойство("ОбъектОтчета",                     Отчет.ОбъектОтчета);
		
		Отчеты.УПЖКХ_КвитанцииИзвещения.ИнициализацияРеквизитов(Отчет);
		
		Параметры.Свойство("Организация", Отчет.Организация);
		
		Отчет.ПериодПросмотра = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		
		Если Отчет.Организация.Пустая() Тогда
			
			УстановитьОрганизациюВКвитанции();
			
			Если Отчет.Организация.Пустая() Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		мНастройкиФормированияПДЖКХОтказ = Ложь;
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Отчет.Организация,
																									 мНастройкиФормированияПДЖКХОтказ);
		
		Если мНастройкиФормированияПДЖКХОтказ = Ложь
		 И ЗначениеЗаполнено(мНастройкиФормированияПДЖКХ.ФормаКвитанции) Тогда
			ЭтаФорма.НомерФормы = мНастройкиФормированияПДЖКХ.ФормаКвитанции;
		КонецЕсли;
		
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		Для Каждого ТекФорма Из ОтчетОбъект.Метаданные().Формы Цикл
			Если Найти(ТекФорма.Имя, "Форма_") = 1
			   И СтрДлина(ТекФорма.Имя) = СтрДлина("Форма_00") Тогда
				Элементы.НомерФормы.СписокВыбора.Добавить(Прав(ТекФорма.Имя, 2));
			КонецЕсли;
		КонецЦикла;
		
		// ОбщиеМеханизмыИКоманды
		ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
		// Конец ОбщиеМеханизмыИКоманды
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Попытка
		
		Если Не ПустаяСтрока(НомерФормы) Тогда
			//Отказ = Истина;
			ОткрытьФормуКвитанции();
			Закрыть();
			Возврат;
		КонецЕсли;
		
		Если Не Элементы.НомерФормы.СписокВыбора.Количество() = 0 Тогда
			НомерФормы = Элементы.НомерФормы.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
		
		Если Элементы.НомерФормы.СписокВыбора.Количество() = 1 Тогда
			ОткрытьФормуКвитанции();
			Закрыть();
			Возврат;
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ОткрытьФорму".
Процедура КнопкаОткрытьФормуКвитанции(Команда)
	
	Попытка
		
		ОткрытьФормуКвитанции();
		Закрыть();
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Открывает указанную форму квитанции.
Процедура ОткрытьФормуКвитанции()
	
	Если ПустаяСтрока(НомерФормы) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана форма квитанции!");
		Возврат;
	КонецЕсли;

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СформироватьКвитанциюПриОткрытии", СформироватьКвитанциюПриОткрытии);
	ПараметрыОтчета.Вставить("ОбъектОтчета",                     Отчет.ОбъектОтчета);
	ПараметрыОтчета.Вставить("Организация",                      Отчет.Организация);
	
	Если ТипЗнч(НомерФормы) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Попытка
			ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(НомерФормы);
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОтчета, ЭтаФорма);
		Исключение	
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(НомерФормы) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыПлатежныхДокументов") Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", НомерФормы);
		
		// Пока будем открывать форму как отдельную форму отчета, так как механизм повторного открытия
		// формы будет доработан с учетом открытия отчета по разным лицевым счетам.
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета, , Истина);
		
	Иначе
		
		// Пока будем открывать форму как отдельную форму отчета, так как механизм повторного открытия
		// формы будет доработан с учетом открытия отчета по разным лицевым счетам.
		ОткрытьФорму("Отчет.УПЖКХ_КвитанцииИзвещения.Форма.Форма_" + НомерФормы, ПараметрыОтчета, , Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет организацию из договора контрагента лицевого счета.
//
// Входящие параметры:
//  текОбъектОтчета - элемент справочника "Лицевые счета".
//
Процедура ОпределитьОрганизациюИзСведенийДляВзаиморасчетов(текОбъектОтчета)
	
	Если Не текОбъектОтчета = Неопределено Тогда
		// Если не удалось определить организацию, то определяем из договора контрагента л/с.
		ОрганизацияИзВзаиморасчетов = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьОрганизациюИзДоговораКонтрагентаЛицевогоСчета(текОбъектОтчета,
																														 Отчет.ПериодПросмотра);
		Если Не ОрганизацияИзВзаиморасчетов.Пустая() Тогда
			Отчет.Организация = ОрганизацияИзВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОпределитьОрганизациюИзСведенийДляВзаиморасчетов()

&НаСервере
// Определяет организацию из сохраненных настроек квитанций.
// Если организация не определена, то получаем сохраненный объект квитанции.
//
Процедура ОпределитьОрганизациюИзНастроекКвитанций(текОбъектОтчета)
	
	СтруктураПараметровКИ = ХранилищеОбщихНастроек.Загрузить("ПараметрыОтчета_УПЖКХ_КвитанцииИзвещения");
	Если ТипЗнч(СтруктураПараметровКИ) = Тип("Структура") Тогда
		
		Если СтруктураПараметровКИ.Свойство("Организация")
		   И ТипЗнч(СтруктураПараметровКИ.Организация) = Тип("СправочникСсылка.Организации")
		   И Не СтруктураПараметровКИ.Организация.Пустая() Тогда
			Отчет.Организация = СтруктураПараметровКИ.Организация;
			Если Отчет.Организация.Пустая() И СтруктураПараметровКИ.Свойство("Объект") Тогда
				
				ОбъектОтчета = СтруктураПараметровКИ.Объект;
				Если ЗначениеЗаполнено(ОбъектОтчета)
				   И ТипЗнч(ОбъектОтчета) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
				   И Не ОбъектОтчета.Пустая() Тогда
					
					Если ОбъектОтчета.ЭтоГруппа Тогда
						// По группе получаем список л/с и берем первый в списке.
						СписокОбъектов = ПолучитьСписокЛицевыхСчетовПоГруппе(ОбъектОтчета);
						Если СписокОбъектов.Количество() > 0 Тогда
							текОбъектОтчета = СписокОбъектов[0];
						КонецЕсли;
					Иначе
						текОбъектОтчета = ОбъектОтчета;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОпределитьОрганизациюИзНастроекКвитанций()

&НаСервере
// Получает список лицевых счетов по группе для формирования квитанций.
//
// Параметры
//  ГруппаЛС  - группа лицевых счетов.
//
// Возвращаемое значение:
//   СписокЗначений   - список лицевых счетов.
//
Функция ПолучитьСписокЛицевыхСчетовПоГруппе(ОбъектОтчета)

	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Справочник.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаИзСправочника
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК Справочник
	|ГДЕ
	|	Справочник.Ссылка В ИЕРАРХИИ(&ТекущийОбъектОтчета)
	|	И НЕ Справочник.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчетаТекущие
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаИзСправочника.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаИзСправочника КАК втЛицевыеСчетаИзСправочника)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчетаЗаПериод
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Действует
	|	И КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчетаИзСправочника.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчетаИзСправочника КАК втЛицевыеСчетаИзСправочника)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.ЛицевойСчет, втЛицевыеСчетаЗаПериод.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.НомерКвартиры, втЛицевыеСчетаЗаПериод.НомерКвартиры) КАК НомерКвартиры,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.СуффиксКвартиры, втЛицевыеСчетаЗаПериод.СуффиксКвартиры) КАК СуффиксКвартиры,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.ВидПомещения, втЛицевыеСчетаЗаПериод.ВидПомещения) КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаТекущие КАК втЛицевыеСчетаТекущие
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛицевыеСчетаЗаПериод КАК втЛицевыеСчетаЗаПериод
	|		ПО втЛицевыеСчетаТекущие.ЛицевойСчет = втЛицевыеСчетаЗаПериод.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
	|	втЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
	|	втЛицевыеСчета.ВидПомещения КАК ВидПомещения
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.ВидПомещения,
	|	втЛицевыеСчета.НомерКвартиры,
	|	втЛицевыеСчета.СуффиксКвартиры,
	|	втЛицевыеСчета.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПомещения,
	|	НомерКвартиры,
	|	СуффиксКвартиры";
	
	Запрос.УстановитьПараметр("ТекущийОбъектОтчета", ОбъектОтчета);
	Запрос.УстановитьПараметр("ДатаНач",             НачалоМесяца(Отчет.ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(Отчет.ПериодПросмотра));
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	Если Отчет.ВариантСортировки = "Лицевой счет" Тогда
		ТаблицаЛС.Сортировать("ЛицевойСчет");
	Иначе
		ТаблицаЛС.Сортировать("ВидПомещения, НомерКвартиры, СуффиксКвартиры");
	КонецЕсли;
	ТаблицаЛС.Свернуть("ЛицевойСчет");
	СписокЛицевыхСчетов.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;

КонецФункции // ПолучитьСписокЛСПоГруппе()

// Определяет организацию из сохраненных настроек платежных документов.
// Если организация не определена, то получаем сохраненный объект платежных документов.
//
Процедура ОпределитьОрганизациюИзНастроекПД(текОбъектОтчета)
	
	СтруктураПараметровПД = ХранилищеОбщихНастроек.Загрузить("Отчет.УПЖКХ_ПлатежныйДокумент");
	Если ТипЗнч(СтруктураПараметровПД) = Тип("Структура") Тогда
		
		Если СтруктураПараметровПД.Свойство("Организация")
		   И ТипЗнч(СтруктураПараметровПД.Организация) = Тип("СправочникСсылка.Организации")
		   И Не СтруктураПараметровПД.Организация.Пустая() Тогда
			
			Отчет.Организация = СтруктураПараметровПД.Организация;
			
			Если Отчет.Организация.Пустая() И СтруктураПараметровПД.Свойство("ОбъектыОтчета") Тогда
				
				ОбъектыОтчета = СтруктураПараметровПД.ОбъектыОтчета;
				Если ЗначениеЗаполнено(ОбъектыОтчета)
				   И ТипЗнч(ОбъектыОтчета) = Тип("ТаблицаЗначений")
				   И ОбъектыОтчета.Количество() > 0
				   И Не ОбъектыОтчета.Колонки.Найти("Объект") = Неопределено
				   И ТипЗнч(ОбъектыОтчета[0].Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
					текОбъектОтчета = ОбъектыОтчета[0].Объект;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьОрганизациюИзНастроекПД()

&НаСервере
// Возвращает таблицу организаций в справочнике "Организации".
//
Функция ПолучитьТаблицуОрганизаций()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуОрганизаций()

&НаСервере
// Устанавливает организацию в поле "Организация" квитанции.
//
Процедура УстановитьОрганизациюВКвитанции()
	
	// Определяем основную организацию.
	Отчет.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Если Отчет.Организация.Пустая() Тогда
		
		ТаблицаОрганизаций = ПолучитьТаблицуОрганизаций();
		Если ТаблицаОрганизаций.Количество() = 1 Тогда
			
			Отчет.Организация = ТаблицаОрганизаций[0].Организация;
			
		ИначеЕсли ТаблицаОрганизаций.Количество() > 1 Тогда
			
			текОбъектОтчета = Неопределено;
			
			ОпределитьОрганизациюИзНастроекПД(текОбъектОтчета);
			
			Если Отчет.Организация.Пустая() Тогда
				
				ОпределитьОрганизациюИзНастроекКвитанций(текОбъектОтчета);
				
				Если Отчет.Организация.Пустая() Тогда
					
					ОпределитьОрганизациюИзСведенийДляВзаиморасчетов(текОбъектОтчета);
					
					Если Отчет.Организация.Пустая() Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Установите нужную Вам организацию в качестве основной в справочнике ""Организации"".");
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Организации не созданы. Для создания организаций перейдите в справочник ""Организации"".");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОрганизациюВКвитанции()

&НаСервере
// Выводит пользователю сообщение об ошибке.
Процедура ВывестиСообщениеОбОшибке()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Квитанция неработоспособна. Возможно, требуется адаптация к актуальному релизу программы.
					  |Обратитесь за помощью к разработчикам: otr@rarus.ru";
	
	Сообщение.Сообщить();
	
КонецПроцедуры

#КонецОбласти
