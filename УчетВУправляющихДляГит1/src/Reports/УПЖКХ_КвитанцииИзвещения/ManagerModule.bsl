#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ДАННЫХ

#Область ПроцедурыИФункцииПолученияДанных

// Поиск оплат за месяц.
//
// Параметры:
//  СписокОбъектов – список лицевых счетов.
//
// Возвращаемое значение:
//  таблица значений с данными
//
Функция ПолучитьДанныеОбОплатах(ПараметрыОтчета) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ((УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						ИЛИ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))
	|						И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления < &НачалоМесяца
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплатаЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления >= &НачалоМесяца
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Предоплата,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыОстаткаПоРассрочке,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыДобровольногоСтрахования
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Период,
	|	УПЖКХ_НачисленияОбороты.Услуга";
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",  ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛС",     ПараметрыОтчета.СписокЛицевыхСчетов);
	
	ДанныеОбОплатах = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеОбОплатах;
	
КонецФункции // ПолучитьДанныеОбОплатах()

// Поиск счетчиков.
//
// Параметры:
//  СписокОбъектов – список лицевых счетов.
//
// Возвращаемое значение:
//  таблица значений с данными
//
Функция ПолучитьДанныеПоСчетчикам(ПараметрыОтчета) Экспорт
	
	// Формируем таблицу с максимальными показаниями счетчиков при всех возможных
	// разрядностях. Передаем данную таблицу в запрос для реализации механизма 
	// перехода через ноль.
	ТаблицаМаксЗначений = Новый ТаблицаЗначений;
	ТаблицаМаксЗначений.Колонки.Добавить("Разрядность",  Новый ОписаниеТипов("Число"));
	ТаблицаМаксЗначений.Колонки.Добавить("МаксЗначение", Новый ОписаниеТипов("Число"));
	
	Для Счетчик = 1 По 15 Цикл
		НоваяСтрока = ТаблицаМаксЗначений.Добавить();
		НоваяСтрока.Разрядность  = Счетчик;
		НоваяСтрока.МаксЗначение = Pow(10, Счетчик);
	КонецЦикла;
	
	// Описание запроса:
	//
	// втТаблицаСчетчиков
	// ОПИСАНИЕ:
	//  Приборы учета, действующие на л/с или помещении на дату окончания периода
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Абонент - наименование ПУ
	//  Счетчик - ссылка на ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ.
	//
	// втТаблицаПоказаний
	// ОПИСАНИЕ:
	//  Данные о показаниях ПУ, выбранных в таблицу втТаблицаСчетчиков, на дату начала периода и за период.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания.
	//
	// втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний
	// ОПИСАНИЕ:
	//  Данные о текущих и предыдущих показаниях ПУ. Формируются по данным таблицы втТаблицаПоказаний:
	//  текущие - это показания с наиболее поздней датой, предыдущие - показания с наиболее ранней датой.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания.
	//
	// втТаблицаСчетчиковСПоказаниями
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение (по данным таблицы втТаблицаСчетчиков), с данными о
	//  текущих и предыдущих показаниях (по данным таблиц втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний).
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Счетчик - ссылка на ПУ
	//  Абонент - наименование ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ
	//  ТекПериод, ТекПоказание[Дн|Нч|Пк] - данные о текущих показаниях
	//  ПредПериод, ПредПоказание[Дн|Нч|Пк] - данные о предыдущих показаниях; если способ регистрации
	//                            показаний ПУ "Расход за период расчета", то устанавливаются равными 0.
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение, с текущими и предыдущими показаниями (по данным 
	//  таблицы втТаблицаСчетчиковСПоказаниями) с рассчитанным расходом и сальдо по услугам на дату 
	//  окончания периода.
	//
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач",             НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1);
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыОтчета.СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("СписокПомещений",     ПараметрыОтчета.СписокПомещений);
	Запрос.УстановитьПараметр("ТаблицаМаксЗначений", ТаблицаМаксЗначений);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаМаксЗначений.Разрядность,
	|	ТаблицаМаксЗначений.МаксЗначение
	|ПОМЕСТИТЬ втМаксЗначенияПоказаний
	|ИЗ
	|	&ТаблицаМаксЗначений КАК ТаблицаМаксЗначений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес КАК Помещение
	|ПОМЕСТИТЬ ВТ_НазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			ДатаИзменения <= &ДатаКон
	|				И Организация = &Организация
	|				И (Объект В (&СписокЛицевыхСчетов)
	|					ИЛИ Объект В (&СписокПомещений))) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	КВП_НазначенныеНачисления.Объект.Адрес
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеНачисления.Активность
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И (КВП_НазначенныеНачисления.Объект В (&СписокЛицевыхСчетов)
	|			ИЛИ КВП_НазначенныеНачисления.Объект В (&СписокПомещений))
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	КВП_НазначенныеНачисления.Объект.Адрес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование КАК Абонент,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			(Объект В (&СписокЛицевыхСчетов)
	|				ИЛИ Объект В (&СписокПомещений))
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчики.Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.Наименование,
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги.ВидУслуги.ЕдиницаИзмерения,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И (КВП_ЗакрепленныеСчетчики.Объект В (&СписокЛицевыхСчетов)
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект В (&СписокПомещений))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗакрепленныеСчетчики.Объект,
	|	втЗакрепленныеСчетчики.Абонент,
	|	втЗакрепленныеСчетчики.Счетчик,
	|	втЗакрепленныеСчетчики.Услуга,
	|	втЗакрепленныеСчетчики.ВидУслуги,
	|	втЗакрепленныеСчетчики.ЕдИзм,
	|	втЗакрепленныеСчетчики.СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НазначенныеНачисления КАК ВТ_НазначенныеНачисления
	|		ПО втЗакрепленныеСчетчики.Услуга = ВТ_НазначенныеНачисления.Услуга
	|			И (ВЫБОР
	|				КОГДА втЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА втЗакрепленныеСчетчики.Объект = ВТ_НазначенныеНачисления.Помещение
	|				ИНАЧЕ втЗакрепленныеСчетчики.Объект = ВТ_НазначенныеНачисления.Объект
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПоказанийВсехПУ.Счетчик КАК Счетчик,
	|	ТаблицаПоказанийВсехПУ.Период КАК Период,
	|	ТаблицаПоказанийВсехПУ.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказанийВсехПУ.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказанийВсехПУ.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаПоказанийВсехПУ.НачальноеПоказание КАК НачальноеПоказание
	|ПОМЕСТИТЬ втТаблицаПоказаний
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&ДатаНач,
	|			Счетчик В
	|				(ВЫБРАТЬ
	|					ТаблицаСчетчиков.Счетчик
	|				ИЗ
	|					втТаблицаСчетчиков КАК ТаблицаСчетчиков)) КАК ТаблицаПоказанийВсехПУ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаПоказанийВсехПУ.Счетчик,
	|	ТаблицаПоказанийВсехПУ.Период,
	|	ТаблицаПоказанийВсехПУ.ДневноеПоказание,
	|	ТаблицаПоказанийВсехПУ.НочноеПоказание,
	|	ТаблицаПоказанийВсехПУ.ПиковоеПоказание,
	|	ТаблицаПоказанийВсехПУ.НачальноеПоказание
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков КАК ТаблицаПоказанийВсехПУ
	|ГДЕ
	|	ТаблицаПоказанийВсехПУ.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТаблицаПоказанийВсехПУ.Активность
	|	И ТаблицаПоказанийВсехПУ.Счетчик В
	|			(ВЫБРАТЬ
	|				ТаблицаСчетчиков.Счетчик
	|			ИЗ
	|				втТаблицаСчетчиков КАК ТаблицаСчетчиков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.Период КАК Период,
	|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаТекущихПоказаний
	|ИЗ
	|	втТаблицаПоказаний КАК ТаблицаПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПоказаний.Счетчик КАК Счетчик,
	|			МАКСИМУМ(ТаблицаПоказаний.Период) КАК Период
	|		ИЗ
	|			втТаблицаПоказаний КАК ТаблицаПоказаний
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПоказаний.Счетчик) КАК ТаблицаМаксимальныхПериодов
	|		ПО ТаблицаПоказаний.Счетчик = ТаблицаМаксимальныхПериодов.Счетчик
	|			И ТаблицаПоказаний.Период = ТаблицаМаксимальныхПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.ДневноеПоказание
	|	КОНЕЦ КАК ДневноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.НочноеПоказание
	|	КОНЕЦ КАК НочноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.ПиковоеПоказание
	|	КОНЕЦ КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаПредыдущихПоказаний
	|ИЗ
	|	втТаблицаПоказаний КАК ТаблицаПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПоказаний.Счетчик КАК Счетчик,
	|			МИНИМУМ(ТаблицаПоказаний.Период) КАК Период
	|		ИЗ
	|			втТаблицаПоказаний КАК ТаблицаПоказаний
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПоказаний.Счетчик) КАК ТаблицаМинимальныхПериодов
	|		ПО ТаблицаПоказаний.Счетчик = ТаблицаМинимальныхПериодов.Счетчик
	|			И ТаблицаПоказаний.Период = ТаблицаМинимальныхПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.Абонент,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.ВидУслуги,
	|	ТаблицаСчетчиков.ЕдИзм,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ТекПериод,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ДневноеПоказание, 0) КАК ТекПоказаниеДн,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.НочноеПоказание, 0) КАК ТекПоказаниеНч,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ПиковоеПоказание, 0) КАК ТекПоказаниеПк,
	|	ЕСТЬNULL(ТаблицаПредыдущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПредПериод,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ДневноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.НочноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ПиковоеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеПк
	|ПОМЕСТИТЬ втТаблицаСчетчиковСПоказаниями
	|ИЗ
	|	втТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаТекущихПоказаний КАК ТаблицаТекущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаТекущихПоказаний.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПредыдущихПоказаний КАК ТаблицаПредыдущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаПредыдущихПоказаний.Счетчик";
	Запрос.Выполнить();
	
	// Данный пакет сильно нагружает запрос, но используется только в форме №7.
	Если ПараметрыОтчета.Форма = "07" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет В (&СписокЛицевыхСчетов)
		|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
		|		ИНАЧЕ ВЫБОР
		|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес В (&СписокПомещений)
		|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес
		|			КОНЕЦ
		|	КОНЕЦ КАК Объект,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК КонечноеСальдо
		|ПОМЕСТИТЬ втСальдоНачислений
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И (ЛицевойСчет В (&СписокЛицевыхСчетов)
		|					ИЛИ ЛицевойСчет.Адрес В (&СписокПомещений))) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки";
		Запрос.Выполнить();
		
		КонечноеСальдо     = "ЕСТЬNULL(втСальдоНачислений.КонечноеСальдо, 0)";
		СоединениеСПакетом =
		"ЛЕВОЕ СОЕДИНЕНИЕ втСальдоНачислений КАК втСальдоНачислений
		|		ПО ТаблицаСчетчиковСПоказаниями.Услуга = втСальдоНачислений.Услуга
		|			И ТаблицаСчетчиковСПоказаниями.Объект = втСальдоНачислений.Объект";
		
	Иначе
		
		КонечноеСальдо     = "0";
		СоединениеСПакетом = "";
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиковСПоказаниями.Объект КАК Объект,
	|	ТаблицаСчетчиковСПоказаниями.Абонент,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиковСПоказаниями.Услуга КАК Услуга,
	|	ТаблицаСчетчиковСПоказаниями.ВидУслуги,
	|	ТаблицаСчетчиковСПоказаниями.ЕдИзм,
	|	ТаблицаСчетчиковСПоказаниями.ТекПериод КАК ПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн КАК ПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч КАК ПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк КАК ПредыдущееПоказаниеПк,
	|	ТаблицаСчетчиковСПоказаниями.ПредПериод КАК ПредПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн КАК ПредПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч КАК ПредПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк КАК ПредПредыдущееПоказаниеПк,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходПк,
	|	0 КАК ТарифДн,
	|	0 КАК ТарифНч,
	|	0 КАК ТарифПк,
	|	0 КАК НачисленоДн,
	|	0 КАК НачисленоНч,
	|	0 КАК НачисленоПк,
	|	" + КонечноеСальдо + " КАК КонечноеСальдо
	|ИЗ
	|	втТаблицаСчетчиковСПоказаниями КАК ТаблицаСчетчиковСПоказаниями
	|		" + СоединениеСПакетом + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксЗначенияПоказаний КАК втМаксЗначенияПоказаний
	|		ПО ТаблицаСчетчиковСПоказаниями.Счетчик.Разрядность = втМаксЗначенияПоказаний.Разрядность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	Услуга,
	|	Счетчик";
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетчиков.Индексы.Добавить("Объект");
	
	// Для следующих форм расчитаем тарифы и начисления в разрезе тарифов, т.к. данные параметры выводятся в таблице показаний ПУ.
	Если (ПараметрыОтчета.Форма = "04" ИЛИ ПараметрыОтчета.Форма = "06" ИЛИ ПараметрыОтчета.Форма = "07") Тогда
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			СтрокаСчетчика.ТарифДн  = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаСчетчика.Услуга,
																	СтрокаСчетчика.Объект,
																	Перечисления.КВП_ВидыТарифов.Дневной);
			СтрокаСчетчика.ТарифНч  = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация, 
																	СтрокаСчетчика.Услуга,
																	СтрокаСчетчика.Объект,
																	Перечисления.КВП_ВидыТарифов.Ночной);
			СтрокаСчетчика.ТарифПк = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаСчетчика.Услуга, 
																	СтрокаСчетчика.Объект,
																	Перечисления.КВП_ВидыТарифов.Пиковый);
			СтрокаСчетчика.НачисленоДн = СтрокаСчетчика.РасходДн * СтрокаСчетчика.ТарифДн;
			СтрокаСчетчика.НачисленоНч = СтрокаСчетчика.РасходНч * СтрокаСчетчика.ТарифНч;
			СтрокаСчетчика.НачисленоПк = СтрокаСчетчика.РасходПк * СтрокаСчетчика.ТарифПк;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции // ПолучитьДанныеПоСчетчикам()

// Формирует запрос для получения таблицы начислений.
//
// Параметры
//  СписокОбъектов – список лицевых счетов.
//
// Возвращаемое значение:
//  Таблица значений с данными
//
Функция ПолучитьЗапросНачисления(ПараметрыОтчета) Экспорт
	
	ЗапросНачисления = Новый Запрос();
	
	Если ПараметрыОтчета.ВидЗапроса = "форма_01"
	 ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_03"
	 ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_04"
	 ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_08"
	 ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_10" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(0) КАК Субсидии,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам))
		|				И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.Начислено - ТаблицаНачисления.Льгота КАК КОплате,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	0 КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_02" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(0) КАК Субсидии,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК КОплате,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.КОплате КАК КОплате,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_05" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Пени,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(0) КАК Субсидии,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК КОплате,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.Пени КАК Пени,
		|	ТаблицаНачисления.КОплате КАК КОплате,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	ВТ_ТаблицаНачисленияОбщая.Пени КАК Пени,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_06" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(0) КАК Субсидии,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК КОплате,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.КОплате КАК КОплате,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_07" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаЛьготы,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПерерасчета,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНачисления,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(0) КАК НачальноеСальдо,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияНачальныйОстаток),
		|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка),
		|	NULL,
		|	СУММА(0),
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15))
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	СУММА(ТаблицаНачисления.СуммаЛьготы) КАК Льготы,
		|	СУММА(ТаблицаНачисления.СуммаНачисления) КАК Начислено,
		|	СУММА(ТаблицаНачисления.НачисленоИПУ) КАК НачисленоИПУ,
		|	СУММА(ТаблицаНачисления.НачисленоОПУ) КАК НачисленоОПУ,
		|	СУММА(ТаблицаНачисления.СуммаОплаты) КАК Оплата,
		|	СУММА(ТаблицаНачисления.СуммаПерерасчета) КАК Перерасчет,
		|	МАКСИМУМ(ТаблицаНачисления.ВРоткл) КАК ВРоткл,
		|	СУММА(ТаблицаНачисления.СуммаНачисления + ТаблицаНачисления.СуммаПерерасчета - ТаблицаНачисления.СуммаЛьготы + ВЫБОР
		|			КОГДА &ВыводитьНачальноеСальдо
		|				ТОГДА ВЫБОР
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
		|							ТОГДА ВЫБОР
		|									КОГДА ТаблицаНачисления.НачальноеСальдо > 0
		|										ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
		|							ТОГДА ВЫБОР
		|									КОГДА ТаблицаНачисления.НачальноеСальдо < 0
		|										ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
		|							ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КОплате,
		|	СУММА(ВЫБОР
		|			КОГДА &ВыводитьНачальноеСальдо
		|				ТОГДА ТаблицаНачисления.НачальноеСальдо
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачальноеСальдо,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	СУММА(ТаблицаНачисления.Количество) КАК Количество,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	МАКСИМУМ(ТаблицаНачисления.ВидТарифа) КАК ВидТарифа,
		|	МАКСИМУМ(ТаблицаНачисления.Тариф) КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	МАКСИМУМ(ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход) КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачисления.ЛицевойСчет,
		|	ТаблицаНачисления.Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ,
		|	ТаблицаНачисления.ЕдИзм,
		|	ТаблицаНачисления.СоставноеКоличествоИнд,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА),
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0),
		|	ТаблицаНачисления.СоставнаяУслуга,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льготы КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Оплата КАК Оплата,
		|	ВТ_ТаблицаНачисленияОбщая.НачальноеСальдо КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
		ЗапросНачисления.УстановитьПараметр("ВключениеНачальнойЗадолженности", ПараметрыОтчета.ВключениеНачальнойЗадолженности);
		ЗапросНачисления.УстановитьПараметр("ВыводитьНачальноеСальдо",         ПараметрыОтчета.ВыводитьНачальноеСальдо);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_09" ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_12" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(0) КАК Субсидии,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено + ВТ_ТаблицаНачисленияОбщая.Перерасчет - ВТ_ТаблицаНачисленияОбщая.Льгота КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_11" ИЛИ ПараметрыОтчета.ВидЗапроса = "форма_13" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК КОплате,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.КОплате КАК КОплате,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Субсидии,
		|	0 КАК ВРоткл,
		|	0 КАК Оплата,
		|	0 КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_14" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги КАК ВидУслуги,
		|	КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый КАК НовыйВидУслуги
		|ПОМЕСТИТЬ втНовыеВидыУслуг
		|ИЗ
		|	РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПростойВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормы
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаЛьготы,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПерерасчета,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаНачисления,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоИПУ,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоОПУ,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(0) КАК НачальноеСальдо,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаЯвляетсяСоставной,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаПоСчетчикам,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УслугаСоставнаяПоСчетчикам,
		|	ВЫБОР
		|		КОГДА (УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
		|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам)
		|						И УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади))
		|					И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Количество) > 1
		|				ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)
		|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.Договор) > 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ДобровольноеСтрахование)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга,
		|	УПЖКХ_НачисленияОбороты.ВидТарифа,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления)

		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга.СпособРасчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияНачальныйОстаток),
		|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка),
		|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка),
		|	СУММА(0),
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ЛОЖЬ,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15))
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме), ЗНАЧЕНИЕ(перечисление.КВП_СпособыРасчета.СограничениемПоНормам))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВЫБОР
		|		КОГДА втНовыеВидыУслуг.НовыйВидУслуги ЕСТЬ NULL
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ втНовыеВидыУслуг.НовыйВидУслуги
		|	КОНЕЦ КАК ВидУслуги,
		|	ТаблицаНачисления.ЕдИзм КАК ЕдИзм,
		|	ТаблицаНачисления.СуммаЛьготы КАК Льготы,
		|	ТаблицаНачисления.СуммаНачисления КАК Начислено,
		|	ТаблицаНачисления.НачисленоИПУ КАК НачисленоИПУ,
		|	ТаблицаНачисления.НачисленоОПУ КАК НачисленоОПУ,
		|	ТаблицаНачисления.СуммаОплаты КАК Оплата,
		|	ТаблицаНачисления.СуммаПерерасчета КАК Перерасчет,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.СуммаНачисления + ТаблицаНачисления.СуммаПерерасчета - ТаблицаНачисления.СуммаЛьготы + ВЫБОР
		|		КОГДА &ВыводитьНачальноеСальдо
		|			ТОГДА ВЫБОР
		|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаНачисления.НачальноеСальдо > 0
		|									ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|								ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|							КОНЕЦ
		|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
		|						ТОГДА ВЫБОР
		|								КОГДА ТаблицаНачисления.НачальноеСальдо < 0
		|									ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|								ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|							КОНЕЦ
		|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
		|						ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КОплате,
		|	ВЫБОР
		|		КОГДА &ВыводитьНачальноеСальдо
		|			ТОГДА ТаблицаНачисления.НачальноеСальдо
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НачальноеСальдо,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК Норма,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.ПростойВариантНастройки, ИСТИНА) КАК ПростойВариантНастройки,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.РазмерНормы, 0) КАК РазмерНормы,
		|	ТаблицаНачисления.Количество КАК Количество,
		|	ТаблицаНачисления.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ТаблицаНачисления.ВидТарифа КАК ВидТарифа,
		|	ТаблицаНачисления.Тариф КАК Тариф,
		|	ТаблицаНачисления.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ТаблицаНачисления.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ТаблицаНачисления.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ТаблицаНачисления.ЛицевойСчет.Адрес КАК Помещение,
		|	ТаблицаНачисления.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ТаблицаНачисления.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНовыеВидыУслуг КАК втНовыеВидыУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = втНовыеВидыУслуг.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ЕдИзм КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СоставнаяУслуга КАК СоставнаяУслуга,
		|	ВТ_ТаблицаНачисленияОбщая.Тариф КАК Тариф,
		|	ВТ_ТаблицаНачисленияОбщая.ВидТарифа КАК ВидТарифа,
		|	ВТ_ТаблицаНачисленияОбщая.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоИПУ КАК НачисленоИПУ,
		|	ВТ_ТаблицаНачисленияОбщая.НачисленоОПУ КАК НачисленоОПУ,
		|	ВТ_ТаблицаНачисленияОбщая.Льготы КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.Перерасчет КАК Перерасчет,
		|	0 КАК Пени,
		|	0 КАК Субсидии,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	ВТ_ТаблицаНачисленияОбщая.ПростойВариантНастройки КАК ПростойВариантНастройки,
		|	ВТ_ТаблицаНачисленияОбщая.РазмерНормы КАК РазмерНормы,
		|	ВТ_ТаблицаНачисленияОбщая.Количество КАК Количество,
		|	ВТ_ТаблицаНачисленияОбщая.Оплата КАК Оплата,
		|	ВТ_ТаблицаНачисленияОбщая.НачальноеСальдо КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаЯвляетсяСоставной КАК УслугаЯвляетсяСоставной,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаПоСчетчикам КАК УслугаПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.УслугаСоставнаяПоСчетчикам КАК УслугаСоставнаяПоСчетчикам,
		|	ВТ_ТаблицаНачисленияОбщая.Помещение КАК Помещение,
		|	ВТ_ТаблицаНачисленияОбщая.ИмеетсяСоставнойИндивидуальныйРасход КАК ИмеетсяСоставнойИндивидуальныйРасход,
		|	ВТ_ТаблицаНачисленияОбщая.СоставноеКоличествоИнд КАК СоставноеКоличествоИнд,
		|	ЛОЖЬ КАК СтрокаДляОбщегоИмущества
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
		ЗапросНачисления.УстановитьПараметр("ВключениеНачальнойЗадолженности", ПараметрыОтчета.ВключениеНачальнойЗадолженности);
		ЗапросНачисления.УстановитьПараметр("ВыводитьНачальноеСальдо",         ПараметрыОтчета.ВыводитьНачальноеСальдо);
		ЗапросНачисления.УстановитьПараметр("ЛьготыСправочно",                 ПараметрыОтчета.ЛьготыСправочно);
		
	КонецЕсли;
	
	ЗапросНачисления.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыОтчета.СписокЛицевыхСчетов);
	ЗапросНачисления.УстановитьПараметр("ДатаНач",             НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("ДатаКон",             Новый Граница(КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ВидГраницы.Включая));
	ЗапросНачисления.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	
	ТаблицаНачисления = ЗапросНачисления.Выполнить().Выгрузить();
	
	ЗаполнитьРазмерыНормыПотребления(ТаблицаНачисления, ПараметрыОтчета);
	
	УПЖКХ_ПечатьКвитанцийСервер.ДополнитьТаблицуНачисленийСУчетомСпособовРасчета(ТаблицаНачисления, ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра);
	
	Возврат ТаблицаНачисления;
	
КонецФункции // ПолучитьЗапросНачисления()

// Заполняет размер нормы потребления в таблице начисления.
//
Процедура ЗаполнитьРазмерыНормыПотребления(ТаблицаНачисления, ПараметрыОтчета)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНачисления Цикл
		Если НЕ СтрокаТаблицы.ПростойВариантНастройки Тогда
			СтрокаТаблицы.РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), 
																	   СтрокаТаблицы.Норма, ПараметрыОтчета.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение данных об имеющихся субсидиях.
//
// Параметры
//  СписокОбъектов – список лицевых счетов.
//
Функция ПолучитьДанныеОСубсидиях(ПараметрыОтчета) Экспорт
	
	ЗапросСубсидии = Новый Запрос();
	
	ЗапросСубсидии.Текст =
	"ВЫБРАТЬ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	КВП_НачисленныеЛьготыОбороты.СоставнаяУслуга,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК Льгота
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НачисленныеЛьготыОбороты";
	
	ЗапросСубсидии.УстановитьПараметр("ДатаНач",             НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросСубсидии.УстановитьПараметр("ДатаКон",             КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросСубсидии.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыОтчета.СписокЛицевыхСчетов);
	ЗапросСубсидии.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	
	ТаблицаСубсидий = ЗапросСубсидии.Выполнить().Выгрузить();
	
	Возврат ТаблицаСубсидий;
	
КонецФункции // ПолучитьДанныеОСубсидиях()

// Получение данных о накопившихся пени.
//
// Параметры
//  СписокОбъектов – список лицевых счетов
//  ПениЗаТекущийМесяц - флаг, определяющий за какой месяц искать пени(текущий/предыдущий).
//
Функция ПолучитьДанныеОПени(ПараметрыОтчета) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход КАК СуммаПени,
	|	ВЫБОР
	|		КОГДА &ВыводитьНачальноеСальдо
	|			ТОГДА ВЫБОР
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
	|							И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток >= 0
	|						ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток + КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
	|							И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток <= 0
	|						ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток + КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход
	|					КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
	|						ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток + КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход
	|					ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход
	|				КОНЕЦ
	|		ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияПриход
	|	КОНЕЦ КАК ПениНачисленоСНачСальдоПени
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты";
	
	ПениЗаТекущийМесяц = Истина;
	Если ПараметрыОтчета.Свойство("ПениЗаТекущийМесяц") Тогда
		ПениЗаТекущийМесяц = ПараметрыОтчета.ПениЗаТекущийМесяц;
	КонецЕсли;
	
	Если ПениЗаТекущийМесяц Тогда
		ПериодДляПени = ПараметрыОтчета.ПериодПросмотра;
	Иначе
		ПериодДляПени = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач",             НачалоМесяца(ПериодДляПени));
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(ПериодДляПени));
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыОтчета.СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	
	Запрос.УстановитьПараметр("ВыводитьНачальноеСальдо",         ПараметрыОтчета.ВыводитьНачальноеСальдо);
	Запрос.УстановитьПараметр("ВключениеНачальнойЗадолженности", ПараметрыОтчета.ВключениеНачальнойЗадолженности);
	
	ТаблицаПени = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПени;
	
КонецФункции // ПолучитьДанныеОПени()

// Получает сумму начального сальдо по каждому л/с в списке объектов.
//
// Параметры
//  СписокОбъектов       – список лицевых счетов.
//
// Возвращаемое значение:
//  Таблица значений
//
Функция ПолучитьДанныеОНачальномСальдо(ПараметрыОтчета) Экспорт
	
	ЗапросСальдо = Новый Запрос();
	ЗапросСальдо.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК НачальноеСальдо,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачальноеСальдоПени
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	ЗапросСальдо.УстановитьПараметр("СписокЛицевыхСчетов", ПараметрыОтчета.СписокЛицевыхСчетов);
	ЗапросСальдо.УстановитьПараметр("Дата",                НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросСальдо.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	
	Возврат ЗапросСальдо.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеОНачальномСальдо()

// Получение данных за предыдущий месяц.
//
Функция ПолучитьПредыдущиеДанные(ПараметрыОтчета)
	
	// Предыдущие начисления и оплаты.
	ЗапросПред = Новый Запрос();
	ЗапросПред.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК КОплатеНаНачалоМесяца
	|ПОМЕСТИТЬ втКОплатеНаНачалоМесяца
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			ЛицевойСчет В (&СписокЛС)
	|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК ОплаченоЗаМесяц
	|ПОМЕСТИТЬ втОплатыЗаМесяц
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаПредНач,
	|			&ДатаПредКон,
	|			Регистратор,
	|			ЛицевойСчет В (&СписокЛС)
	|				И Организация = &Организация
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	// Не учитывать оплаты, записи по которым созданы при помощи документа "Закрытие периода по начислениям ЖКХ".
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.СуммаНачисленияПриход) КАК СуммаНачисленияПриход
	|ПОМЕСТИТЬ втНачисленныеПени
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			ЛицевойСчет В (&СписокЛС)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКОплатеНаНачалоМесяца.ЛицевойСчет, ЕСТЬNULL(втНачисленныеПени.ЛицевойСчет, втОплатыЗаМесяц.ЛицевойСчет)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втКОплатеНаНачалоМесяца.Услуга, ЕСТЬNULL(втНачисленныеПени.Услуга, втОплатыЗаМесяц.Услуга)) КАК Услуга,
	|	СУММА(ЕСТЬNULL(втКОплатеНаНачалоМесяца.КОплатеНаНачалоМесяца, 0)) КАК КОплатеНаНачалоМесяца,
	|	СУММА(ЕСТЬNULL(-втОплатыЗаМесяц.ОплаченоЗаМесяц, 0)) КАК ОплаченоЗаМесяц,
	|	СУММА(ЕСТЬNULL(втНачисленныеПени.СуммаНачисленияПриход, 0)) КАК ПениЗаМесяц
	|ИЗ
	|	втКОплатеНаНачалоМесяца КАК втКОплатеНаНачалоМесяца
	|		ПОЛНОЕ СОЕДИНЕНИЕ втОплатыЗаМесяц КАК втОплатыЗаМесяц
	|		ПО втКОплатеНаНачалоМесяца.ЛицевойСчет = втОплатыЗаМесяц.ЛицевойСчет
	|			И втКОплатеНаНачалоМесяца.Услуга = втОплатыЗаМесяц.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ втНачисленныеПени КАК втНачисленныеПени
	|		ПО втКОплатеНаНачалоМесяца.ЛицевойСчет = втНачисленныеПени.ЛицевойСчет
	|			И втКОплатеНаНачалоМесяца.Услуга = втНачисленныеПени.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втКОплатеНаНачалоМесяца.ЛицевойСчет, ЕСТЬNULL(втНачисленныеПени.ЛицевойСчет, втОплатыЗаМесяц.ЛицевойСчет)),
	|	ЕСТЬNULL(втКОплатеНаНачалоМесяца.Услуга, ЕСТЬNULL(втНачисленныеПени.Услуга, втОплатыЗаМесяц.Услуга))";
	
	ЗапросПред.УстановитьПараметр("СписокЛС",    ПараметрыОтчета.СписокЛицевыхСчетов);
	ЗапросПред.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	ЗапросПред.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросПред.УстановитьПараметр("ДатаКон",     КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	ДатаПредНач = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра);
	ДатаПредКон = КонецМесяца(ПараметрыОтчета.ПериодПросмотра);
	Если ПараметрыОтчета.Форма = "14" Тогда
		ДатаПредНач = НачалоМесяца(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1);
		ДатаПредКон = КонецМесяца(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1);
	КонецЕсли;
	ЗапросПред.УстановитьПараметр("ДатаПредНач", ДатаПредНач);
	ЗапросПред.УстановитьПараметр("ДатаПредКон", ДатаПредКон);
	
	ТаблицаПред = ЗапросПред.Выполнить().Выгрузить();
	
	Возврат ТаблицаПред;
	
КонецФункции // ПолучитьПредыдущиеДанные()

// Формирует запрос по льготам.
//
Функция ПолучитьДанныеПоЛьготам(ПараметрыОтчета)
	
	ЗапросПоЛьготам = Новый Запрос;
	ЗапросПоЛьготам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втНазначенныеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаНач,
	|			Проживающий.Владелец В (&СписокЛС)
	|				И ДатаИзменения <= &ДатаНач) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий.Владелец,
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_НазначенныеЛьготы.Проживающий.Владелец В(&СписокЛС)
	|	И КВП_НазначенныеЛьготы.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Проживающий,
	|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК СуммаЛьготы
	|ПОМЕСТИТЬ втНачисленныеЛьготы
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			ЛицевойСчет В (&СписокЛС)
	|				И Организация = &Организация) КАК КВП_НачисленныеЛьготыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Проживающий,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеЛьготы.ЛицевойСчет КАК ЛицевойСчет,
	|	втНазначенныеЛьготы.Проживающий КАК Проживающий,
	|	втНазначенныеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втНачисленныеЛьготы.Услуга,
	|	втНачисленныеЛьготы.СуммаЛьготы КАК СуммаЛьготы
	|ИЗ
	|	втНазначенныеЛьготы КАК втНазначенныеЛьготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисленныеЛьготы КАК втНачисленныеЛьготы
	|		ПО втНазначенныеЛьготы.ЛьготнаяКатегория = втНачисленныеЛьготы.ЛьготнаяКатегория
	|			И втНазначенныеЛьготы.Проживающий = втНачисленныеЛьготы.Проживающий
	|			И втНазначенныеЛьготы.ЛицевойСчет = втНачисленныеЛьготы.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Проживающий,
	|	ЛьготнаяКатегория
	|ИТОГИ ПО
	|	ЛьготнаяКатегория";
	
	ЗапросПоЛьготам.УстановитьПараметр("СписокЛС",    ПараметрыОтчета.СписокЛицевыхСчетов);
	ЗапросПоЛьготам.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	ЗапросПоЛьготам.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросПоЛьготам.УстановитьПараметр("ДатаКон",     КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	ТаблицаЛьгот = ЗапросПоЛьготам.Выполнить().Выгрузить();
	
	Возврат ТаблицаЛьгот;
	
КонецФункции // ПолучитьДанныеПоЛьготам()

// Функция формирует и возвращает таблицу данных по начислениям и оплатам за 6 последних месяцев.
//
Функция ПолучитьПредыдущиеСведения(ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛС",    ПараметрыОтчета.СписокЛицевыхСчетов);
	
	ТекстЗапроса = "";
	Для ном = 1 По 8 Цикл
		
		Если ном > 1 Тогда
			ТекстЗапроса = ТекстЗапроса +
						"
						|
						|ОБЪЕДИНИТЬ
						|
						|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ" + ?(ном = 1, " РАЗРЕШЕННЫЕ", "") + Символы.ПС +
		"	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	&ДатаСведений" + ном + " КАК ДатаСведений,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления))
		|					ИЛИ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Доначислено,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Оплачено" + Символы.ПС +
		?(ном = 1, "ПОМЕСТИТЬ втНачисления" + Символы.ПС, "") +
		"ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач" + ном + ",
		|			&ДатаКон" + ном + ",
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга";
		
		Если ном = 8 Тогда
			ТекстЗапроса = ТекстЗапроса + 
						"
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|";
		КонецЕсли;
		
	КонецЦикла;
	
	Для ном = 1 По 8 Цикл
		
		Если ном > 1 Тогда
			ТекстЗапроса = ТекстЗапроса +
						"
						|
						|ОБЪЕДИНИТЬ
						|
						|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ" + ?(ном = 1, " РАЗРЕШЕННЫЕ", "") + Символы.ПС +
		"	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
		|	&ДатаСведений" + ном + " КАК ДатаСведений,
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК КонечноеСальдо" + Символы.ПС
		 + ?(ном = 1, "ПОМЕСТИТЬ втКонечноеСальдо" + Символы.ПС, "") +
		"ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКонСальдо" + ном + ",
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втКонечноеСальдо.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втНачисления.Услуга, втКонечноеСальдо.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втНачисления.ДатаСведений, втКонечноеСальдо.ДатаСведений) КАК ПериодДанных,
	|	СУММА(ЕСТЬNULL(втНачисления.Начислено, 0)) КАК Начислено,
	|	СУММА(ЕСТЬNULL(втНачисления.Доначислено, 0)) КАК Доначислено,
	|	СУММА(ЕСТЬNULL(втНачисления.Оплачено, 0)) КАК Оплачено,
	|	СУММА(ЕСТЬNULL(втКонечноеСальдо.КонечноеСальдо, 0)) КАК КонечноеСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКонечноеСальдо КАК втКонечноеСальдо
	|		ПО втНачисления.ЛицевойСчет = втКонечноеСальдо.ЛицевойСчет
	|			И втНачисления.Услуга = втКонечноеСальдо.Услуга
	|			И втНачисления.ДатаСведений = втКонечноеСальдо.ДатаСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втНачисления.ЛицевойСчет, втКонечноеСальдо.ЛицевойСчет),
	|	ЕСТЬNULL(втНачисления.Услуга, втКонечноеСальдо.Услуга),
	|	ЕСТЬNULL(втНачисления.ДатаСведений, втКонечноеСальдо.ДатаСведений)";
	
	Запрос.Текст = ТекстЗапроса;
	
	Для Ном = 1 По 8 Цикл
		ДатаСведений = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, Ном - 8);
		
		Запрос.УстановитьПараметр("ДатаНач" + Ном,      НачалоМесяца(ДатаСведений));
		Запрос.УстановитьПараметр("ДатаКон" + Ном,      КонецМесяца(ДатаСведений));
		Запрос.УстановитьПараметр("ДатаКонСальдо" + Ном,      КонецМесяца(ДатаСведений) + 1);
		Запрос.УстановитьПараметр("ДатаСведений" + Ном, ДатаСведений);
		
	КонецЦикла;
		
	ТаблицаПредыдущихСведений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПредыдущихСведений;
	
КонецФункции // ПолучитьПредыдущиеСведения()

// Формирует таблицу зависимых услуг по услугам, рассчитываемым по счетчикам.
//
// Параметры:
//  ТаблицаСчетчиков – таблица значений с показаниями счетчиков.
//
// Возвращаемое значение:
//  Таблица значений – таблица значений с зависимыми услугами.
//
Функция ПолучитьТаблицуЗависимыхУслуг(ТаблицаСчетчиков, ПараметрыОтчета)
	
	Запрос = Новый Запрос();
	
	УказыватьЗависимостьУслугВРазрезеЗданий = Ложь;
	ПараметрыОтчета.Свойство("УказыватьЗависимостьУслугВРазрезеЗданий", УказыватьЗависимостьУслугВРазрезеЗданий);
	
	Если УказыватьЗависимостьУслугВРазрезеЗданий Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Объект КАК Здание,
		|	1 КАК Приоритет,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаЗависимостей
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект В (&СписокЗданий)
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ЗависимостиУслугСрезПоследних.Объект,
		|	0,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаЗависимостей.Приоритет) КАК Приоритет,
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга
		|ПОМЕСТИТЬ ТаблицаМаксПриоритетов
		|ИЗ
		|	ТаблицаЗависимостей КАК ТаблицаЗависимостей
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗависимостей.Здание,
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга,
		|	ТаблицаЗависимостей.ВидУслуги,
		|	ТаблицаЗависимостей.ЕдИзм КАК ЕдИзм,
		|	ТаблицаЗависимостей.Коэффициент
		|ПОМЕСТИТЬ втТаблицаЗависимостейБезЛС
		|ИЗ
		|	ТаблицаМаксПриоритетов КАК ТаблицаМаксПриоритетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗависимостей КАК ТаблицаЗависимостей
		|		ПО (ТаблицаЗависимостей.Приоритет = ТаблицаМаксПриоритетов.Приоритет)
		|			И (ТаблицаЗависимостей.УслугаОснование = ТаблицаМаксПриоритетов.УслугаОснование)
		|			И (ТаблицаЗависимостей.Услуга = ТаблицаМаксПриоритетов.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втТаблицаЗависимостейБезЛС.УслугаОснование,
		|	втТаблицаЗависимостейБезЛС.Услуга,
		|	втТаблицаЗависимостейБезЛС.ВидУслуги,
		|	втТаблицаЗависимостейБезЛС.ЕдИзм,
		|	втТаблицаЗависимостейБезЛС.Коэффициент
		|ИЗ
		|	втТаблицаЗависимостейБезЛС КАК втТаблицаЗависимостейБезЛС
		|		ПОЛНОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО (ВЫБОР
		|				КОГДА втТаблицаЗависимостейБезЛС.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ втТаблицаЗависимостейБезЛС.Здание = втЛицевыеСчета.Здание
		|			КОНЕЦ)";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ втТаблицаЗависимостейБезЛС
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втТаблицаЗависимостейБезЛС.УслугаОснование,
		|	втТаблицаЗависимостейБезЛС.Услуга,
		|	втТаблицаЗависимостейБезЛС.ВидУслуги,
		|	втТаблицаЗависимостейБезЛС.ЕдИзм,
		|	втТаблицаЗависимостейБезЛС.Коэффициент
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета,
		|	втТаблицаЗависимостейБезЛС КАК втТаблицаЗависимостейБезЛС";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УслугиОснования", ТаблицаСчетчиков.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("ПериодСреза",     КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("СписокЗданий",    ПараметрыОтчета.СписокЗданий);
	Запрос.УстановитьПараметр("СписокЛС",        ПараметрыОтчета.СписокЛицевыхСчетов);
	
	ТаблицаЗависимостей = Запрос.Выполнить().Выгрузить();
	ТаблицаЗависимостей.Индексы.Добавить("УслугаОснование");
	
	// Определим список выходных зависимых приборов учета.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Счетчики.Ссылка КАК ВыходнойПриборУчета
	|ПОМЕСТИТЬ втВыходныеПриборыУчета
	|ИЗ
	|	Справочник.КВП_Счетчики КАК КВП_Счетчики
	|ГДЕ
	|	КВП_Счетчики.ПризнакВыходногоСчетчика
	|	И КВП_Счетчики.Ссылка В(&ВыходныеПриборыУчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗависимыеСчетчики.ВыходнойПриборУчета КАК ВыходнойПриборУчета
	|ИЗ
	|	РегистрСведений.КВП_ЗависимыеСчетчики КАК КВП_ЗависимыеСчетчики
	|ГДЕ
	|	КВП_ЗависимыеСчетчики.ВыходнойПриборУчета В
	|			(ВЫБРАТЬ
	|				втВыходныеПриборыУчета.ВыходнойПриборУчета КАК ВыходнойПриборУчета
	|			ИЗ
	|				втВыходныеПриборыУчета КАК втВыходныеПриборыУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗависимыеСчетчики.ВыходнойПриборУчета";
	
	Запрос.УстановитьПараметр("ВыходныеПриборыУчета", ТаблицаСчетчиков.ВыгрузитьКолонку("Счетчик"));
	
	ТаблицаВыходныхПУ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗависимыхУслуг = ТаблицаСчетчиков.СкопироватьКолонки();
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("УслугаОснование", СтрокаСчетчика.Услуга);
		СтруктураПоиска.Вставить("ЛицевойСчет", СтрокаСчетчика.Объект);
		СписокЗависимых = ТаблицаЗависимостей.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаУслуги Из СписокЗависимых Цикл
			НоваяСтрока = ТаблицаЗависимыхУслуг.Добавить();
			НоваяСтрока.Абонент   = СтрокаУслуги.ВидУслуги;
			НоваяСтрока.Объект    = СтрокаУслуги.ЛицевойСчет;
			НоваяСтрока.Услуга    = СтрокаУслуги.Услуга;
			НоваяСтрока.ВидУслуги = СтрокаУслуги.ВидУслуги;
			НоваяСтрока.ЕдИзм     = СтрокаУслуги.ЕдИзм;
			
			Если ТаблицаВыходныхПУ.Найти(СтрокаСчетчика.Счетчик, "ВыходнойПриборУчета") = Неопределено Тогда
				НоваяСтрока.РасходДн = СтрокаСчетчика.РасходДн * СтрокаУслуги.Коэффициент;
				НоваяСтрока.РасходНч = СтрокаСчетчика.РасходНч * СтрокаУслуги.Коэффициент;
			Иначе
				НоваяСтрока.РасходДн = -СтрокаСчетчика.РасходДн * СтрокаУслуги.Коэффициент;
				НоваяСтрока.РасходНч = -СтрокаСчетчика.РасходНч * СтрокаУслуги.Коэффициент;
			КонецЕсли;
			
			НоваяСтрока.ТарифДн  = 0;
			НоваяСтрока.ТарифНч  = 0;
			НоваяСтрока.НачисленоДн = 0;
			НоваяСтрока.НачисленоНч = 0;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗависимыхУслуг.Свернуть("Абонент,Объект,Услуга,ВидУслуги,ЕдИзм", "РасходДн,РасходНч,ТарифДн,ТарифНч,НачисленоДн,НачисленоНч");
	
	Для Каждого СтрокаУслуги Из ТаблицаЗависимыхУслуг Цикл
		СтрокаУслуги.ТарифДн  = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
															 ПараметрыОтчета.Организация, 
															 СтрокаУслуги.Услуга,
															 СтрокаУслуги.Объект,
															 Перечисления.КВП_ВидыТарифов.Дневной);
		СтрокаУслуги.ТарифНч  = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
															 ПараметрыОтчета.Организация,
															 СтрокаУслуги.Услуга,
															 СтрокаУслуги.Объект,
															 Перечисления.КВП_ВидыТарифов.Ночной);
		СтрокаУслуги.НачисленоДн = СтрокаУслуги.РасходДн * СтрокаУслуги.ТарифДн;
		СтрокаУслуги.НачисленоНч = СтрокаУслуги.РасходНч * СтрокаУслуги.ТарифНч;
	КонецЦикла;
	
	Возврат ТаблицаЗависимыхУслуг;
	
КонецФункции // ПолучитьТаблицуЗависимыхУслуг()

// Получение информации из таблицы субсидий о сумме пени для л/с.
//
Функция ПолучитьСуммуПениДляЛС(ТаблицаПени, ЛицевойСчет, ИмяПараметра)
	
	СтрокиПени = ТаблицаПени.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
	
	ДанныеОПени = ТаблицаПени.Скопировать(СтрокиПени);
	ДанныеОПени.Свернуть("ЛицевойСчет", ИмяПараметра);
	
	Если ДанныеОПени.Количество() > 0 Тогда
		ИтоговыеДанныеПени = ДанныеОПени[0];
		Возврат ИтоговыеДанныеПени[ИмяПараметра];
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСуммуПениДляЛС()

// Получение информации из таблицы начального сальдо о сумме сальдо для л/с.
// Возвращаемое значение - Структура, содержащая поля: Начальное сальдо и СУчетомГрафикаПлатежей.
Функция ПолучитьНачальноеСальдоДляЛС(ТаблицаСальдо, ЛицевойСчет, ПараметрыОтчета) Экспорт
	
	СтруктураНачСальдо = Новый Структура;
	СтруктураНачСальдо.Вставить("НачальноеСальдо",     0);
	СтруктураНачСальдо.Вставить("НачальноеСальдоПени", 0);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		СтрокиСальдо = ТаблицаСальдо.НайтиСтроки(Новый Структура("ЛицевойСчет", ЛицевойСчет));
		
		ДанныеОНачСальдо = ТаблицаСальдо.Скопировать(СтрокиСальдо);
		ДанныеОНачСальдо.Свернуть("ЛицевойСчет", "НачальноеСальдо, НачальноеСальдоПени");
		
		Если ДанныеОНачСальдо.Количество() > 0 Тогда
			СтруктураНачСальдо.Вставить("НачальноеСальдо",     ДанныеОНачСальдо[0].НачальноеСальдо);
			СтруктураНачСальдо.Вставить("НачальноеСальдоПени", ДанныеОНачСальдо[0].НачальноеСальдоПени);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНачСальдо;
	
КонецФункции // ПолучитьНачальноеСальдоДляЛС()

#КонецОбласти

//////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Получаем макет квитанции по номеру формы квитанции.
//
Функция ПолучитьМакетКвитанцииПоФормеКвитанции(ФормаКвитанции)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.УПЖКХ_КвитанцииИзвещения." + УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ФормаКвитанции));
	
КонецФункции

// Выводит текущую квитанцию в итоговый табличный документ, анализируя настройки
// и свободное место на листе.
//
// Параметры:
//  ДокументРезультат - результирующий табличный документ
//  тмДокумент - табличный документ с текущей квитанцией
//  ЭтоПервая - признак первой квитанции в списке.
//
Процедура ВывестиТекущуюКвитанцию(ДокументРезультат, тмДокумент, ЭтоПервая, ПараметрыОтчета) Экспорт
	
	Если ЭтоПервая Тогда
		ЭтоПервая = Ложь;
	ИначеЕсли ПараметрыОтчета.ВыводитьПоОднойКвитанции Или Не ДокументРезультат.ПроверитьВывод(тмДокумент) Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ДокументРезультат.Вывести(тмДокумент);
	
КонецПроцедуры // ВывестиТекущуюКвитанцию()

// Проверяет равность нулю итоговой суммы к оплате и суммы начисления.
//
// Параметры:
//  Начисления - таблица значений с данными о начислениях
//  Пени       - таблица значений с данными о пенях
//  НачСальдо  - таблица значений с данными о начальном сальдо
//  Оплаты     - таблица значений с данными об оплатах.
//
// Возвращаемое значение:
//  Булево.
//
Функция ТекущаяКвитанцияНулевая(ТекущиеДанные, ВыводитьНачальноеСальдо) Экспорт
	
	Начисления = ТекущиеДанные.ДанныеОНачислениях;
	Пени       = ТекущиеДанные.ДанныеОПени;
	НачСальдо  = ТекущиеДанные.ДанныеОНачСальдо;
	Оплаты     = ТекущиеДанные.ДанныеОбОплатах;
	
	Если НЕ Начисления.Количество() = 0 Тогда
		ВсегоКОплате = Начисления.Итог("КОплате") + Пени;
	Иначе
		ВсегоКОплате = Пени;
	КонецЕсли;
	
	Если НЕ Оплаты = Неопределено Тогда
		БылиОплаты = ?(Оплаты.Количество() = 0, Ложь, Истина);
	Иначе
		БылиОплаты = Ложь;
	КонецЕсли;
	
	Сальдо = 0;
	Если ВыводитьНачальноеСальдо И НЕ НачСальдо = Неопределено Тогда
		Сальдо = ?(НачСальдо.Свойство("НачальноеСальдо"), НачСальдо["НачальноеСальдо"], 0);
	КонецЕсли;
	
	Если ВсегоКОплате = 0 И НЕ БылиОплаты И Сальдо = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ТекущаяКвитанцияНулевая()

// Формирует наименование организации в зависимости от настройки
// «Для печатных форм использовать».
Функция ПолучитьНаименованиеОрганизации(Организация) Экспорт
	
	СправочникОрганизации = Справочники.Организации.НайтиПоНаименованию(Организация);
	Если СправочникОрганизации.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование Тогда
		Возврат СправочникОрганизации.НаименованиеСокращенное;
	Иначе
		Возврат СправочникОрганизации.НаименованиеПолное;
	КонецЕсли;
	
КонецФункции // ПолучитьНаименованиеОрганизации()

// Нахождение стоимости банковского перевода.
//
// Параметры
//  ВсегоНачислено – сумма начисления.
//
Процедура ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета) Экспорт

	Если ПараметрыОтчета.ВключатьКассовыйСбор Тогда
		ПарамКассСборы = Новый Структура();
		СтоимостьУслугБанка = Окр(ВсегоНачислено * ПараметрыОтчета.КассовыйСборБанка / 100, 2);
		ПарамКассСборы.Вставить("УслугиБанка", СтоимостьУслугБанка);

		ВсегоНачислено = ВсегоНачислено + СтоимостьУслугБанка;
	КонецЕсли;

КонецПроцедуры // ОпределитьКассовыйСбор()

// Включает начальное сальдо в итоговую сумму к оплате в зависимости от указанных
// настроек.
// 
// Параметры
//  ВсегоКОплате    - Итоговая сумма к оплате
//  Объект          - Лицевой счет
//  ВнесеноОплат    - Итоговая сумма поступивших оплат
//  Предоплата      - Сумма предоплаты
//  НачальноеСальдо - Начальное сальдо.
// 
Процедура ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета,
									СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования) Экспорт
	
	Задолженность = ?(НачальноеСальдо > 0, НачальноеСальдо, 0);
	Аванс         = ?(НачальноеСальдо < 0, НачальноеСальдо, 0);
	
	// Предоплата по еще неначисленной рассрочке и оплата добровольного страхования не должны влиять на текущую сумму к оплате.
	// Еще неначисленная рассрочка - это то, что должно быть начисленно в будущем. На текущие расчеты влиять не должна.
	// Добровольное страхование оплачивается в текущем месяце за следующий месяц. На текущие расчеты также влиять не должно.
	ФактическаяСуммаОплаты = ВнесеноОплат - СуммаОплатыОстаткаПоРассрочке - СуммаОплатыДобровольногоСтрахования;
		
	Если ПараметрыОтчета.ВключениеНачальнойЗадолженности = "НеВключать" Тогда
		ВсегоКОплате = ВсегоКОплате - Предоплата;
		
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" Тогда
		ВсегоКОплате = ВсегоКОплате - ФактическаяСуммаОплаты + Задолженность;
			
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьАванс" Тогда
		ВсегоКОплате = ВсегоКОплате - ФактическаяСуммаОплаты + Аванс;
			
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьНачСальдо" Тогда
		ВсегоКОплате = ВсегоКОплате - ФактическаяСуммаОплаты + НачальноеСальдо;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьНачальноеСальдо()

// Процедура добавляет в структуры дополнительные элементы со значениями,
// составляющие текст штрихкода.
//
Процедура ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков)
	
	ОбщиеДанные.Вставить("ТаблицаИПУ",                      ТаблицаСчетчиков);
	ОбщиеДанные.Вставить("КОплатеПени",                     Формат(ПениНачислено, "ЧН=0,00"));
	ОбщиеДанные.Вставить("КОплатеПениДляШК",                Формат(ПениНачислено, "ЧН=0,00"));
	ОбщиеДанные.Вставить("КОплатеПениСУчетомНачСальдоПени", Формат(ПениНачисленоСНачСальдоПени, "ЧН=0,00"));
	ОбщиеДанные.Вставить("ВсегоКОплатеДляШК",               СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбщиеДанные.ВсегоКОплате));
	
КонецПроцедуры // ПодготовитьСтруктуры()

// Процедура устанавливает картинку штрихкода.
//
Процедура УстановитьКартинкуШтрихкода(ДокументРезультат, Объект, ОбщиеДанные, СтруктураНастроек)
	
	Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный И СтруктураНастроек.КомпонентаШКПодключена Тогда
		
		Если ДокументРезультат.Области.Найти("ШтрихКод") = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать штрихкод.");
		Иначе
			ЗаполнитьКартинкуОдномерногоШтрихКода(Объект, ОбщиеДанные, СтруктураНастроек, ДокументРезультат.Области.ШтрихКод);
		КонецЕсли;
		
	ИначеЕсли СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.QR И СтруктураНастроек.КомпонентаQRКодаПодключена Тогда
		
		Если ДокументРезультат.Области.Найти("QRШК") = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать QR-код.");
		Иначе
			ЗаполнитьКартинкуQRКода(Объект, ОбщиеДанные, СтруктураНастроек, ДокументРезультат.Области.QRШК)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКартинкуШтрихкода()

// Устанавливает расшифорвку к картинке штрихкода.
//
// Параметры:
//  Область	 - 	Область табличного документа - область картинки штрихкода.
//  ТекстШК	 - 	Строка - текст строки штрихкода.
//
Процедура УстановитьРасшифровкуОбластиШК(Область, ТекстШК)
	
	Область.Расшифровка = Новый Структура("ТекстШК", ТекстШК);
	
КонецПроцедуры

// Заполняет картинку одномерного штрихкода.
//
Процедура ЗаполнитьКартинкуОдномерногоШтрихКода(Объект, ОбщиеДанные, СтруктураНастроек, Картинка)
	
	ТекстШК    = "";
	КартинкаШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьШтрихкод(Объект, ОбщиеДанные, СтруктураНастроек, ТекстШК, Ложь);
	ОбщиеДанные.Вставить("ТекстШК", ТекстШК);
	
	Если ТипЗнч(КартинкаШК) = Тип("Картинка") Тогда
		Картинка.Картинка = КартинкаШК;
		УстановитьРасшифровкуОбластиШК(Картинка, ТекстШК);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать штрихкод.");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет картинку QR-кода.
//
Процедура ЗаполнитьКартинкуQRКода(Объект, ОбщиеДанные, СтруктураНастроек, Картинка)
	
	ТекстШК      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные);
	ДанныеQRКода = УПЖКХ_ПечатьКвитанцийСервер.ДанныеQRКода(ТекстШК, 1, 190);
	
	Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		Картинка.Картинка = Новый Картинка(ДанныеQRКода);
		УстановитьРасшифровкуОбластиШК(Картинка, ТекстШК);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать QR-код.");
	КонецЕсли;
	
КонецПроцедуры

// Формирует штрихкоды в табличном документе.
//
// Параметры:
//  ТабличныйДокумент - Табличный документ - область текущего ПД.
//  ПараметрыОтчета   - Структура          - структура с настройками формирования квитанций.
//  ОбщиеДанные       - Структура          - сведения о лицевом счете.
//
Процедура СформироватьДопШтрихкоды(ТабличныйДокумент, ПараметрыОтчета, ОбщиеДанные)
	
	// Двоичные данные картинок одномерного и двумерного штрихкода из библиотеки картинок.
	ДвоичныеДанныеОдномерногоШтрихКода = БиблиотекаКартинок.УПЖКХ_ШтрихКод.ПолучитьДвоичныеДанные();
	ДвоичныеДанныеQRКода               = БиблиотекаКартинок.УПЖКХ_QRкод.ПолучитьДвоичныеДанные();
	
	// Перебор всех рисунков, содержащихся в табличном документе с платежкой.
	Для Каждого ТекущийШК Из ТабличныйДокумент.Рисунки Цикл
		
		ИмяРисунка = ТекущийШК.Имя;
		
		// Стандартные ШК "QRШК" и "ШтрихКод" должны быть заполнены ранее, поэтому их не обрабатываем.
		Если ТекущийШК.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И Не ИмяРисунка = "QRШК" И Не ИмяРисунка = "ШтрихКод" Тогда
			
			ДвоичныеДанныеТекущейКартинки = ТекущийШК.Картинка.ПолучитьДвоичныеДанные();
			
			КартинкаЯвляетсяQRКодом    = ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеQRКода;
			КартинкаЯвляетсяШтрихкодом = ДвоичныеДанныеТекущейКартинки = ДвоичныеДанныеОдномерногоШтрихКода;
			
			Если КартинкаЯвляетсяQRКодом И ПараметрыОтчета.КомпонентаQRКодаПодключена Тогда // Картинка QR-штрихкода.
				ЗаполнитьКартинкуQRКода(ОбщиеДанные.ЛицевойСчет, ОбщиеДанные, ПараметрыОтчета, ТекущийШК);
			ИначеЕсли КартинкаЯвляетсяШтрихкодом И ПараметрыОтчета.КомпонентаШКПодключена Тогда // Картинка одномерного штрихкода.
				ЗаполнитьКартинкуОдномерногоШтрихКода(ОбщиеДанные.ЛицевойСчет, ОбщиеДанные, ПараметрыОтчета, ТекущийШК);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выводит таблицу начислений.
//
Процедура ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти = "", ТаблицаЛьготСправочно) Экспорт
	
	// Сворачиваем и сортируем таблицу начислений
	ТаблицаСНачислениями = ОбработатьТаблицуНачислений(ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно);
	
	ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаСНачислениями, ТаблицаСчетчиков);
	
	// используется для 13 формы.
	ТаблицаСНачислениями.Колонки.Добавить("ИтогоНачислено", Новый ОписаниеТипов("Число"));
	
	МаксИндекс = ТаблицаСНачислениями.Количество() - 1;
	Для Сч = 0 По МаксИндекс Цикл
		Строка = ТаблицаСНачислениями.Получить(Сч);
		
		Строка.ИтогоНачислено = Строка.Начислено - ?(Строка.Льгота = Неопределено, 0, Строка.Льгота);
		
		Область = Макет.ПолучитьОбласть("НачисленияСтрока" + ПриставкаОбласти);
		Область.Параметры.Заполнить(Строка);
		Область.Параметры.ВидУслуги = Строка.ВидДляВывода;
		Область.Параметры.Тариф     = Строка.ТарифДляВывода;
		
		Если НЕ Строка.УслугаПоСчетчикам
		   И НЕ Строка.УслугаСоставнаяПоСчетчикам
		   И Строка.ИмеетсяСоставнойИндивидуальныйРасход Тогда
			Область.Параметры.Количество = ?(ПустаяСтрока(Строка.СоставноеКоличествоИнд), "", Строка.СоставноеКоличествоИнд);
		КонецЕсли;
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("РазмерНормы");
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		СписокФорматируемыхПараметров.Добавить("Количество");
		СписокФорматируемыхПараметров.Добавить("ПоказаниеПредыдущее");
		СписокФорматируемыхПараметров.Добавить("ПоказаниеТекущее");
		
		СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-";
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачислений()

// Подготавливает таблицу начислений по текущему л/с.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с таблица данных по всем л/с отчета
//  ТекущиеДанные - стуктура с данными по текущему л/с
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица начисления
//
Функция ОбработатьТаблицуНачислений(ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно)
	
	ТаблицаСНачислениями = ТаблицаНачисления.СкопироватьКолонки();
	
	СкомпоноватьНачисления(ТаблицаСНачислениями, ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно);
	
	ТаблицаСНачислениями.ЗаполнитьЗначения(Ложь, "СтрокаДляОбщегоИмущества");
	
	// Свертка таблицы начислений.
	УПЖКХ_ПечатьКвитанцийСервер.СвернутьТаблицуНачисленияКвитанцииИзвещения(ТаблицаСНачислениями, ПараметрыОтчета.ТаблицаВидовУслуг, ПараметрыОтчета);
	
	Возврат ТаблицаСНачислениями;
	
КонецФункции // ОбработатьТаблицуНачислений()

// Обрабатывает таблицу со всеми начислениями по текущему лицевому счету, компонуя
// строки начисления, детализируя по видам тарифов и по составляющим услугам.
//
Процедура СкомпоноватьНачисления(ТаблицаНачисления, ТаблицаСНачислениями, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно)
	
	ЛицевойСчет = Объект;
	
	ТаблицаУслуг = ТаблицаСНачислениями.Скопировать(, "Услуга, ВидУслуги, ЕдИзм, УслугаЯвляетсяСоставной, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам");
	ТаблицаУслуг.Свернуть("Услуга, ВидУслуги, ЕдИзм, УслугаЯвляетсяСоставной, УслугаПоСчетчикам, УслугаСоставнаяПоСчетчикам");
	
	ТаблицаНачисления.Колонки.Добавить("ВидДляВывода",           Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ТарифДляВывода",         Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("СтрокаДетализацииСост",  Новый ОписаниеТипов("Булево"));
	ТаблицаНачисления.Колонки.Добавить("СтрокаДетализацииТариф", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаУслуги Из ТаблицаУслуг Цикл 
		
		Услуга = СтрокаУслуги.Услуга;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Услуга", Услуга);
		СтрокиНачисления = ТаблицаСНачислениями.НайтиСтроки(Отбор);
		ТаблицаПоУслуге  = ТаблицаСНачислениями.Скопировать(СтрокиНачисления);
		
		// Если в выборке из регистра имеется только одна строка по текущей
		// услуге, начисления по данной услуге компоновать и детализировать
		// не требуется.
		Если ТаблицаПоУслуге.Количество() = 1 Тогда
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно);
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУслуги.УслугаПоСчетчикам Тогда
			// Компонуем и детализируем начисления по видам тарифов для услуг со 
			// способом расчета "По показаниям счетчика".
			ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно);
		ИначеЕсли СтрокаУслуги.УслугаЯвляетсяСоставной Тогда
			// Компонуем и детализируем начисления по составляющим услугам для составных услуг.
			ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно);
		Иначе
			// Компонуем начисления для всех остальных услуг.
			СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкомпоноватьНачисления()

// Для услуг, по которым нет необходимости детализировать начисления, добавляет единственную
// строку в итоговую таблицу.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий лицевой счет
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с настройками пользователя
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание
//
Процедура СвернутьНачисленияПоУслуге(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно)
	
	Услуга              = СтрокаУслуги.Услуга;
	ВидУслуги           = СтрокаУслуги.ВидУслуги;
	ЕдИзм               = СтрокаУслуги.ЕдИзм;
	
	Если НЕ СтрокаУслуги.УслугаПоСчетчикам И УПЖКХ_ПечатьКвитанцийСервер.ИмелоМестоИзменениеТарифа(ТаблицаПоУслуге) Тогда
		ТарифБылИзменен = Истина;
	Иначе
		ТарифБылИзменен = Ложь;
	КонецЕсли;
	
	// Если в течение месяца тариф менялся, объем потребления необходимо сворачивать, а не суммировать.
	Если ТарифБылИзменен Тогда
		СтрокаОбщТарифа = ТаблицаПоУслуге.Найти(Перечисления.КВП_ВидыТарифов.Общий, "ВидТарифа");
		Количество      = ?(СтрокаОбщТарифа = Неопределено, 0, СтрокаОбщТарифа.Количество);
	Иначе
		Количество = ТаблицаПоУслуге.Итог("Количество");
	КонецЕсли;
	
	Начислено       = ТаблицаПоУслуге.Итог("Начислено");
	Перерасчет      = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота          = ТаблицаПоУслуге.Итог("Льгота");
	Пени            = ТаблицаПоУслуге.Итог("Пени");
	Субсидии        = ТаблицаПоУслуге.Итог("Субсидии");
	ВРоткл          = ТаблицаПоУслуге.Итог("ВРоткл");
	КОплате         = ТаблицаПоУслуге.Итог("КОплате");
	Оплата          = ТаблицаПоУслуге.Итог("Оплата");
	НачальноеСальдо = ТаблицаПоУслуге.Итог("НачальноеСальдо");
	
	// При сверке услуг нет необходимости брать сумму размеров нормы по строкам, т.к в таком случае
	// произойдет задвоение, а то и затроение размера нормы.
	// Поэтому берем размер нормы из одной из строк.
	РазмерНормы = ТаблицаПоУслуге[0].РазмерНормы;
	
	Если ТарифБылИзменен Тогда
		ПредставлениеТарифа = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьВсеТарифыПоУслуге(ТаблицаПоУслуге);
	Иначе
		ПредставлениеТарифа = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТарифПоУслуге(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра, 
													ЛицевойСчет, Услуга, ТаблицаПоУслуге);
	КонецЕсли;
	
	РазмерТарифа = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьРазмерТарифа(ПредставлениеТарифа);
	
	СтрокаИмеетсяСоставнойИндивидуальныйРасход = ТаблицаПоУслуге.Найти(Истина, "ИмеетсяСоставнойИндивидуальныйРасход");
	Если НЕ СтрокаИмеетсяСоставнойИндивидуальныйРасход = Неопределено Тогда
		ИмеетсяСоставнойИндивидуальныйРасход = Истина;
		СоставноеКоличествоИнд               = СтрокаИмеетсяСоставнойИндивидуальныйРасход.СоставноеКоличествоИнд;
	Иначе
		ИмеетсяСоставнойИндивидуальныйРасход = Ложь;
		СоставноеКоличествоИнд               = "";
	КонецЕсли;
	
	НоваяСтрока = ТаблицаНачисления.Добавить();
	
	НоваяСтрока.Услуга                               = Услуга;
	НоваяСтрока.ВидУслуги                            = ВидУслуги;
	НоваяСтрока.ВидТарифа                            = УПЖКХ_ПечатьКвитанцийСервер.ОпределитьТекущийВидТарифа(ТаблицаПоУслуге);
	НоваяСтрока.ВидДляВывода                         = ВидУслуги;
	НоваяСтрока.ЕдИзм                                = ЕдИзм;
	НоваяСтрока.РазмерНормы                          = РазмерНормы;
	НоваяСтрока.ТарифДляВывода                       = ПредставлениеТарифа;
	НоваяСтрока.Тариф                                = РазмерТарифа;
	НоваяСтрока.Количество                           = Количество;
	НоваяСтрока.Начислено                            = Начислено;
	НоваяСтрока.Перерасчет                           = Перерасчет;
	НоваяСтрока.Льгота                               = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах);
	НоваяСтрока.КОплате                              = КОплате;
	НоваяСтрока.Пени                                 = Пени;
	НоваяСтрока.Оплата                               = Оплата;
	НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
	НоваяСтрока.Субсидии                             = Субсидии;
	НоваяСтрока.ВРоткл                               = ВРоткл;
	НоваяСтрока.УслугаПоСчетчикам                    = СтрокаУслуги.УслугаПоСчетчикам;
	НоваяСтрока.УслугаСоставнаяПоСчетчикам           = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	НоваяСтрока.СтрокаДетализацииСост                = Ложь;
	НоваяСтрока.СтрокаДетализацииТариф               = Ложь;
	НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
	НоваяСтрока.СоставноеКоличествоИнд               = СоставноеКоличествоИнд;
	
КонецПроцедуры // СвернутьНачисленияПоУслуге()

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по видам тарифа. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий л/с
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с пользовательскими настройками
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоВидамТарифа(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно)
	
	Услуга    = СтрокаУслуги.Услуга;
	ВидУслуги = СтрокаУслуги.ВидУслуги;
	ЕдИзм     = СтрокаУслуги.ЕдИзм;
	
	Перерасчет      = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота          = ТаблицаПоУслуге.Итог("Льгота");
	Количество      = ТаблицаПоУслуге.Итог("Количество");
	Начислено       = ТаблицаПоУслуге.Итог("Начислено");
	Пени            = ТаблицаПоУслуге.Итог("Пени");
	Субсидии        = ТаблицаПоУслуге.Итог("Субсидии");
	ВРоткл          = ТаблицаПоУслуге.Итог("ВРоткл");
	КОплате         = ТаблицаПоУслуге.Итог("КОплате");
	Оплата          = ТаблицаПоУслуге.Итог("Оплата");
	НачальноеСальдо = ТаблицаПоУслуге.Итог("НачальноеСальдо");
	
	// При детализации услуги по видам тарифов нет необходимости брать сумму размеров нормы по строкам, т.к в таком случае
	// произойдет задвоение, а то и затроение размера нормы.
	// Поэтому берем размер нормы из одной из строк.
	РазмерНормыИнд = ТаблицаПоУслуге[0].РазмерНормы;
	
	СтрокаОбщ = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Общий);
	СтрокаДн  = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Дневной);
	СтрокаНч  = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Ночной);
	СтрокаПик = ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, Перечисления.КВП_ВидыТарифов.Пиковый);
	
	ДневнойИОбщийТарифыРавны = Истина;
	
	Если УПЖКХ_ПечатьКвитанцийСервер.НеобходимоДетализироватьПоВидамТарифов(СтрокаОбщ, СтрокаДн, СтрокаНч, СтрокаПик, ДневнойИОбщийТарифыРавны) Тогда
		
		// Добавляем итоговую строку по услуге.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидДляВывода               = "" + ВидУслуги + ":";
		НоваяСтрока.ЕдИзм                      = ЕдИзм;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Начислено                  = Начислено;
		НоваяСтрока.Перерасчет                 = Перерасчет;
		НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах);
		НоваяСтрока.КОплате                    = КОплате;
		НоваяСтрока.Пени                       = Пени;
		НоваяСтрока.Оплата                     = Оплата;
		НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
		НоваяСтрока.Субсидии                   = Субсидии;
		НоваяСтрока.ВРоткл                     = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам          = Истина;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
		НоваяСтрока.СтрокаДетализацииСост      = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф     = Ложь;
		
		Если ДневнойИОбщийТарифыРавны Тогда
			
			// Дневной и общий виды тарифа. 
			// (выводятся совместно)
			Если Не СтрокаДн = Неопределено Или Не СтрокаОбщ = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = ?(Не СтрокаДн = Неопределено, Перечисления.КВП_ВидыТарифов.Дневной, Перечисления.КВП_ВидыТарифов.Общий);
				НоваяСтрока.ВидДляВывода               = ?(Не СтрокаДн = Неопределено, " - дн. начисление", " - норм. начисление");
				НоваяСтрока.Тариф                      = ?(Не СтрокаДн = Неопределено, СтрокаДн.Тариф, СтрокаОбщ.Тариф);
				НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
				НоваяСтрока.Количество                 = ?(Не СтрокаДн = Неопределено, СтрокаДн.Количество, 0)
				                                         + ?(Не СтрокаОбщ = Неопределено, СтрокаОбщ.Количество, 0);
				НоваяСтрока.Начислено                  = НоваяСтрока.Тариф * НоваяСтрока.Количество;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
			КонецЕсли;
			
		Иначе
			// Общий вид тарифа.
			Если Не СтрокаОбщ = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Общий;
				НоваяСтрока.ВидДляВывода               = " - норм. начисление";
				НоваяСтрока.Тариф                      = СтрокаОбщ.Тариф;
				НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
				НоваяСтрока.Количество                 = ?(Не СтрокаОбщ = Неопределено, СтрокаОбщ.Количество, 0);
				НоваяСтрока.Начислено                  = СтрокаОбщ.Начислено;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
			КонецЕсли;
			
			// Дневной вид тарифа.
			Если Не СтрокаДн = Неопределено Тогда
				НоваяСтрока = ТаблицаНачисления.Добавить();
				
				НоваяСтрока.Услуга                     = Услуга;
				НоваяСтрока.ВидУслуги                  = ВидУслуги;
				НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Дневной;
				НоваяСтрока.ВидДляВывода               = " - дн. начисление";
				НоваяСтрока.Тариф                      = СтрокаДн.Тариф;
				НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
				НоваяСтрока.Количество                 = ?(Не СтрокаДн = Неопределено, СтрокаДн.Количество, 0);
				НоваяСтрока.Начислено                  = СтрокаДн.Начислено;
				НоваяСтрока.УслугаПоСчетчикам          = Истина;
				НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
				НоваяСтрока.СтрокаДетализацииСост      = Ложь;
				НоваяСтрока.СтрокаДетализацииТариф     = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Ночной вид тарифа.
		Если Не СтрокаНч = Неопределено Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			
			НоваяСтрока.Услуга                     = Услуга;
			НоваяСтрока.ВидУслуги                  = ВидУслуги;
			НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Ночной;
			НоваяСтрока.ВидДляВывода               = " - нч. начисление";
			НоваяСтрока.Тариф                      = СтрокаНч.Тариф;
			НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
			НоваяСтрока.Количество                 = СтрокаНч.Количество;
			НоваяСтрока.Начислено                  = СтрокаНч.Начислено;
			НоваяСтрока.УслугаПоСчетчикам          = Истина;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
			НоваяСтрока.СтрокаДетализацииСост      = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф     = Истина;
		КонецЕсли;
		
		// Пиковый вид тарифа.
		Если Не СтрокаПик = Неопределено Тогда
			НоваяСтрока = ТаблицаНачисления.Добавить();
			
			НоваяСтрока.Услуга                     = Услуга;
			НоваяСтрока.ВидУслуги                  = ВидУслуги;
			НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Пиковый;
			НоваяСтрока.ВидДляВывода               = " - пик. начисление";
			НоваяСтрока.Тариф                      = СтрокаПик.Тариф;
			НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
			НоваяСтрока.Количество                 = СтрокаПик.Количество;
			НоваяСтрока.Начислено                  = СтрокаПик.Начислено;
			НоваяСтрока.УслугаПоСчетчикам          = Истина;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
			НоваяСтрока.СтрокаДетализацииСост      = Ложь;
			НоваяСтрока.СтрокаДетализацииТариф     = Истина;
		КонецЕсли;					
	Иначе
		// Если нет необходимости детализировать начисления по видам тарифов,
		// добавляем в итоговую таблицу единственную строку.
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Дневной;
		НоваяСтрока.ВидДляВывода               = ВидУслуги;
		НоваяСтрока.ЕдИзм                      = ЕдИзм;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		НоваяСтрока.Тариф                      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТарифПоУслугеСоСчетчиком(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра,
																			      ЛицевойСчет, Услуга, СтрокаДн, СтрокаОбщ, СтрокаНч, СтрокаПик);
		НоваяСтрока.ТарифДляВывода             = "" + НоваяСтрока.Тариф;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Начислено                  = Начислено;
		НоваяСтрока.Перерасчет                 = Перерасчет;
		НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах);
		НоваяСтрока.КОплате                    = КОплате;
		НоваяСтрока.Пени                       = Пени;
		НоваяСтрока.Оплата                     = Оплата;
		НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
		НоваяСтрока.Субсидии                   = Субсидии;
		НоваяСтрока.ВРоткл                     = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам          = Истина;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам = Ложь;
		НоваяСтрока.СтрокаДетализацииСост      = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф     = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ДетализироватьПоВидамТарифа()

// Анализирует таблицу начисления по текущей услуге и при необходимости детализирует
// начисления по составляющим услугам. Полученные строки начисления записываются в 
// итоговую таблицу начисления.
// 
// Параметры:
//  СтрокаУслуги - строка начисления по текущей услуге
//  ЛицевойСчет - текущий л/с
//  ТаблицаПоУслуге - таблица с начислениями по текущей услуге
//  ТаблицаНачисления - итоговая таблица начисления
//  СтруктураНастроек - структура с пользовательскими настройками
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  РазмерНормыИнд - размер нормы, установленной на текущий л/с
//  РазмерНормыОбщ - размер нормы, установленной на текущее здание.
//
Процедура ДетализироватьПоСоставляющимУслугам(СтрокаУслуги, ЛицевойСчет, ТаблицаПоУслуге, ТаблицаНачисления, ПараметрыОтчета, ТаблицаЛьготСправочно)
	
	Услуга                     = СтрокаУслуги.Услуга;
	ВидУслуги                  = СтрокаУслуги.ВидУслуги;
	ЕдИзм                      = СтрокаУслуги.ЕдИзм;
	УслугаПоСчетчикам          = СтрокаУслуги.УслугаПоСчетчикам;
	УслугаСоставнаяПоСчетчикам = СтрокаУслуги.УслугаСоставнаяПоСчетчикам;
	
	Количество      = ТаблицаПоУслуге.Итог("Количество");
	Перерасчет      = ТаблицаПоУслуге.Итог("Перерасчет");
	Льгота          = ТаблицаПоУслуге.Итог("Льгота");
	Начислено       = ТаблицаПоУслуге.Итог("Начислено");
	КОплате         = ТаблицаПоУслуге.Итог("КОплате");
	Пени            = ТаблицаПоУслуге.Итог("Пени");
	Субсидии        = ТаблицаПоУслуге.Итог("Субсидии");
	ВРоткл          = ТаблицаПоУслуге.Итог("ВРоткл");
	Оплата          = ТаблицаПоУслуге.Итог("Оплата");
	НачальноеСальдо = ТаблицаПоУслуге.Итог("НачальноеСальдо");
	
	// При детализации услуги по составляющим услугам нет необходимости брать сумму размеров нормы по строкам, т.к в таком случае
	// произойдет задвоение, а то и затроение размера нормы.
	// Поэтому берем размер нормы из одной из строк.
	РазмерНормыИнд = ТаблицаПоУслуге[0].РазмерНормы;
	
	ТаблицаСостУслуг = ТаблицаПоУслуге.Скопировать(, "СоставнаяУслуга, ВидТарифа, ЕдИзм, ИмеетсяСоставнойИндивидуальныйРасход, СоставноеКоличествоИнд");
	
	Если УПЖКХ_ПечатьКвитанцийСервер.НеобходимоДетализироватьПоСоставляющимУслугам(ТаблицаСостУслуг) Тогда 
		
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		ИмеетсяСоставнойИндивидуальныйРасход = (НЕ ТаблицаСостУслуг.Найти(Истина, "ИмеетсяСоставнойИндивидуальныйРасход") = Неопределено);
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидДляВывода               = "" + ВидУслуги + ":";
		НоваяСтрока.ВидТарифа                  = Перечисления.КВП_ВидыТарифов.Общий;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		НоваяСтрока.Количество                 = Количество;
		НоваяСтрока.Начислено                  = Начислено;
		НоваяСтрока.Перерасчет                 = Перерасчет;
		НоваяСтрока.Льгота                     = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах);
		НоваяСтрока.КОплате                    = КОплате;
		НоваяСтрока.Пени                       = Пени;
		НоваяСтрока.Оплата                     = Оплата;
		НоваяСтрока.НачальноеСальдо            = НачальноеСальдо;
		НоваяСтрока.Субсидии                   = Субсидии;
		НоваяСтрока.ВРоткл                     = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам          = УслугаПоСчетчикам;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам = УслугаСоставнаяПоСчетчикам;
		НоваяСтрока.СтрокаДетализацииСост      = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф     = Ложь;
		
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ИмеетсяСоставнойИндивидуальныйРасход;
		НоваяСтрока.СоставноеКоличествоИнд               = "";
		
		// Для каждой составляющей услуги добавляем строку детализации.
		Для Каждого СтрокаСостУслуги Из ТаблицаСостУслуг Цикл
			СостУслуга = СтрокаСостУслуги.СоставнаяУслуга;
			СостЕдИзм  = СтрокаСостУслуги.ЕдИзм;
			ВидТарифа  = СтрокаСостУслуги.ВидТарифа;
			
			Отбор = Новый Структура;
			Отбор.Вставить("СоставнаяУслуга", СостУслуга);
			Отбор.Вставить("ВидТарифа",       ВидТарифа);
			Строки = ТаблицаПоУслуге.НайтиСтроки(Отбор);
			
			КоличествоПоУслуге = 0;
			НачисленоПоУслуге  = 0;
			ПерерасчетПоУслуге = 0;
			ЛьготаПоУслуге     = 0;
			КОплатеПоУслуге    = 0;
			ПениПоУслуге       = 0;
			СубсидииПоУслуге   = 0;
			ВРотклПоУслуге     = 0;
			
			Для Каждого Строка Из Строки Цикл
				КоличествоПоУслуге    = КоличествоПоУслуге + Строка.Количество;
				НачисленоПоУслуге     = НачисленоПоУслуге  + Строка.Начислено;
				ПерерасчетПоУслуге    = ПерерасчетПоУслуге + Строка.Перерасчет;
				ЛьготаПоУслуге        = ЛьготаПоУслуге     + Строка.Льгота;
				ПениПоУслуге          = ПениПоУслуге       + Строка.Пени;
				СубсидииПоУслуге      = СубсидииПоУслуге   + Строка.Субсидии;
				ВРотклПоУслуге        = ВРотклПоУслуге     + Строка.ВРоткл;
			КонецЦикла;
			
			ПредставлениеТарифа = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТарифПоУслуге(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра, 
														ЛицевойСчет, СостУслуга, ТаблицаПоУслуге, Истина, ВидТарифа);
			РазмерТарифа        = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьРазмерТарифа(ПредставлениеТарифа);
			
			НоваяСтрока = ТаблицаНачисления.Добавить();
			
			НоваяСтрока.Услуга                               = СостУслуга;
			НоваяСтрока.ВидУслуги                            = СостУслуга.ВидУслуги;
			НоваяСтрока.ВидТарифа                            = ВидТарифа;
			НоваяСтрока.ВидДляВывода                         = " >" + СостУслуга + " (" + ВидТарифа + ")";
			НоваяСтрока.ЕдИзм                                = СостЕдИзм;
			НоваяСтрока.ТарифДляВывода                       = ПредставлениеТарифа;
			НоваяСтрока.Тариф                                = РазмерТарифа;
			НоваяСтрока.Количество                           = КоличествоПоУслуге;
			НоваяСтрока.Начислено                            = НачисленоПоУслуге;
			НоваяСтрока.Перерасчет                           = ПерерасчетПоУслуге;
			НоваяСтрока.Льгота                               = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, ЛьготаПоУслуге, СостУслуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах, "СоставнаяУслуга");
			НоваяСтрока.Пени                                 = ПениПоУслуге;
			НоваяСтрока.Субсидии                             = СубсидииПоУслуге;
			НоваяСтрока.ВРоткл                               = ВРотклПоУслуге;
			НоваяСтрока.УслугаПоСчетчикам                    = УслугаПоСчетчикам;
			НоваяСтрока.УслугаСоставнаяПоСчетчикам           = УслугаСоставнаяПоСчетчикам;
			НоваяСтрока.СтрокаДетализацииСост                = Истина;
			НоваяСтрока.СтрокаДетализацииТариф               = Ложь;
			НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = СтрокаСостУслуги.ИмеетсяСоставнойИндивидуальныйРасход;
			НоваяСтрока.СоставноеКоличествоИнд               = СтрокаСостУслуги.СоставноеКоличествоИнд;
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ТаблицаНачисления.Добавить();
		
		НоваяСтрока.Услуга                     = Услуга;
		НоваяСтрока.ВидУслуги                  = ВидУслуги;
		НоваяСтрока.ВидДляВывода               = ВидУслуги;
		НоваяСтрока.ЕдИзм                      = ЕдИзм;
		НоваяСтрока.РазмерНормы                = РазмерНормыИнд;
		
		Если ТаблицаПоУслуге[0].ИмеетсяСоставнойИндивидуальныйРасход Тогда
			НоваяСтрока.Количество = ТаблицаПоУслуге[0].СоставноеКоличествоИнд;
		Иначе
			НоваяСтрока.Количество = Количество;
		КонецЕсли;
		
		НоваяСтрока.Начислено                            = Начислено;
		НоваяСтрока.Перерасчет                           = Перерасчет;
		НоваяСтрока.Льгота                               = ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах);
		НоваяСтрока.КОплате                              = КОплате;
		НоваяСтрока.Пени                                 = Пени;
		НоваяСтрока.Оплата                               = Оплата;
		НоваяСтрока.НачальноеСальдо                      = НачальноеСальдо;
		НоваяСтрока.Субсидии                             = Субсидии;
		НоваяСтрока.ВРоткл                               = ВРоткл;
		НоваяСтрока.УслугаПоСчетчикам                    = УслугаПоСчетчикам;
		НоваяСтрока.УслугаСоставнаяПоСчетчикам           = УслугаСоставнаяПоСчетчикам;
		НоваяСтрока.СтрокаДетализацииСост                = Ложь;
		НоваяСтрока.СтрокаДетализацииТариф               = Ложь;
		НоваяСтрока.ИмеетсяСоставнойИндивидуальныйРасход = ТаблицаПоУслуге[0].ИмеетсяСоставнойИндивидуальныйРасход;
		НоваяСтрока.СоставноеКоличествоИнд               = ТаблицаПоУслуге[0].СоставноеКоличествоИнд;
		
	КонецЕсли;
	
КонецПроцедуры // ДетализироватьПоСоставляющимУслугам()

// Дополняет таблицу начисления данными о показаниях счетчиков и о расходе по счетчикам.
//
// Параметры:
//  ТаблицаНачисления - таблица начисления по текущему лицевому счету
//  ТаблицаПоказанийСчетчиков - таблица с показаниями счетчиков по текущему лиевому счету
//  ТаблицаРасхода - таблица с расходом по счетчикам по текущему лицевому счету
//
Процедура ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаНачисления, ТаблицаПоказанийСчетчиков)
	
	ТаблицаНачисления.Колонки.Добавить("ПоказаниеПредыдущее", Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("ПоказаниеТекущее",    Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		
		Если (Не ЗначениеЗаполнено(СтрокаНачисления.УслугаПоСчетчикам) Или Не СтрокаНачисления.УслугаПоСчетчикам)
			И (Не ЗначениеЗаполнено(СтрокаНачисления.УслугаСоставнаяПоСчетчикам) Или Не СтрокаНачисления.УслугаСоставнаяПоСчетчикам) Тогда
			 Продолжить;
		КонецЕсли;
		
		Услуга = СтрокаНачисления.Услуга;
		
		// ИЩЕМ ПРЕДЫДУЩИЕ, ТЕКУЩИЕ ПОКАЗАНИЯ И РАСХОД.
		Отбор = Новый Структура;
		Отбор.Вставить("Услуга", Услуга);
		
		СтрокиПоказаний = ТаблицаПоказанийСчетчиков.НайтиСтроки(Отбор);
		ТаблицаПоказанийПоТекУслуге = ТаблицаПоказанийСчетчиков.Скопировать(СтрокиПоказаний);
		
		ТекПоказанияИнд        = "";
		ПредыдущиеПоказанияИПУ = "";
		
		ТекущиеПоказанияИПУДн = "";
		ТекущиеПоказанияИПУНч = "";
		ТекущиеПоказанияИПУПк = "";
		
		ПредыдущиеПоказанияИПУДн = "";
		ПредыдущиеПоказанияИПУНч = "";
		ПредыдущиеПоказанияИПУПк = "";
		
		Для Каждого СтрокаПоказанийИПУ Из ТаблицаПоказанийПоТекУслуге Цикл
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн) Тогда
				ТекущиеПоказанияИПУДн    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУДн), ТекущиеПоказанияИПУДн + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеДн);
										
				ПредыдущиеПоказанияИПУДн = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУДн), ПредыдущиеПоказанияИПУДн + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеДн, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеДн);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч) Тогда
				ТекущиеПоказанияИПУНч    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУНч), ТекущиеПоказанияИПУНч + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеНч);
										
				ПредыдущиеПоказанияИПУНч = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУНч), ПредыдущиеПоказанияИПУНч + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеНч, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеНч);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк) Тогда
				ТекущиеПоказанияИПУПк    = ?(ЗначениеЗаполнено(ТекущиеПоказанияИПУПк), ТекущиеПоказанияИПУПк + "/" 
											+ СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк, "" + СтрокаПоказанийИПУ.ПредыдущееПоказаниеПк);
										
				ПредыдущиеПоказанияИПУПк = ?(ЗначениеЗаполнено(ПредыдущиеПоказанияИПУПк), ПредыдущиеПоказанияИПУПк + "/" 
											+ СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеПк, "" + СтрокаПоказанийИПУ.ПредПредыдущееПоказаниеПк);
			КонецЕсли;
			
		КонецЦикла;
		
		ТекПоказанияИнд = ТекущиеПоказанияИПУДн
							+ ?(ПустаяСтрока(ТекущиеПоказанияИПУНч), "", "/")
							+ ТекущиеПоказанияИПУНч
							+ ?(ПустаяСтрока(ТекущиеПоказанияИПУПк), "", "/")
							+ ТекущиеПоказанияИПУПк;
							
		ПредыдущиеПоказанияИПУ = ПредыдущиеПоказанияИПУДн
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияИПУНч), "", "/")
								   + ПредыдущиеПоказанияИПУНч
								   + ?(ПустаяСтрока(ПредыдущиеПоказанияИПУПк), "", "/")
								   + ПредыдущиеПоказанияИПУПк;
		
		Если СтрокаНачисления.УслугаСоставнаяПоСчетчикам И НЕ СтрокаНачисления.СтрокаДетализацииСост Тогда
			Если Не ТаблицаПоказанийПоТекУслуге.Количество() = 0 Тогда
				СтрокаНачисления.ПоказаниеТекущее       = ТекПоказанияИнд;
				СтрокаНачисления.ПоказаниеПредыдущее    = ПредыдущиеПоказанияИПУ;
			КонецЕсли;
		Иначе
			Если СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Дневной 
				Или СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий Тогда
				
				Если Не ТаблицаПоказанийПоТекУслуге.Количество() = 0 Тогда
					СтрокаНачисления.ПоказаниеТекущее    = ТекущиеПоказанияИПУДн;
					СтрокаНачисления.ПоказаниеПредыдущее = ПредыдущиеПоказанияИПУДн;
				КонецЕсли;
			ИначеЕсли СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Ночной Тогда
				
				Если Не ТаблицаПоказанийПоТекУслуге.Количество() = 0 Тогда
					СтрокаНачисления.ПоказаниеТекущее    = ТекущиеПоказанияИПУНч;
					СтрокаНачисления.ПоказаниеПредыдущее = ПредыдущиеПоказанияИПУНч;
				КонецЕсли;
			ИначеЕсли СтрокаНачисления.ВидТарифа = Перечисления.КВП_ВидыТарифов.Пиковый Тогда
				
				Если Не ТаблицаПоказанийПоТекУслуге.Количество() = 0 Тогда
					СтрокаНачисления.ПоказаниеТекущее    = ТекущиеПоказанияИПУПк;
					СтрокаНачисления.ПоказаниеПредыдущее = ПредыдущиеПоказанияИПУПк;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам()

// Получает сумму начисленной льготы по текущей услуге с учетом настроек УП.
//
// Параметры:
//  ТаблицаЛьготСправочно - таблица со льготами, начисленными справочно
//  Льгота - сумма льгот, полученная из РН "Начисления"
//  Услуга - текущая услуга
//  ЛьготыСправочно - пользовательская настройка.
//
// Возвращаемое значение:
//  Число - сумма льгот.
//
Функция ПолучитьЛьготуПоТекущейУслуге(ТаблицаЛьготСправочно, Льгота, Услуга, ЛьготыСправочно, КолонкаДляПоиска = "Услуга")
	
	СуммаЛьготы = Льгота;
	
	Если ЛьготыСправочно И Не ТаблицаЛьготСправочно.Количество() = 0 Тогда
		
		// ЛЬГОТА.
		СуммаЛьготы = 0;
		
		ОтборПоУслуге = Новый Структура;
		ОтборПоУслуге.Вставить(КолонкаДляПоиска, Услуга);
		
		СтрокиТекУслуги = ТаблицаЛьготСправочно.НайтиСтроки(ОтборПоУслуге);
		Для каждого ТекУслуги Из СтрокиТекУслуги Цикл
			СуммаЛьготы = СуммаЛьготы + ТекУслуги.Льгота;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СуммаЛьготы;
	
КонецФункции // ПолучитьЛьготуПоТекущейУслуге()

// Заполняет цифры суммы к оплате.
//
Процедура ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, СуммаОплаты, СтруктураПараметровМакета)
	
	СтрокаСуммы = СокрЛП(Формат(СуммаОплаты * 100, "ЧЦ=10; ЧДЦ=0; ЧН=000; ЧГ=0"));
	
	ВсегоЦифр = Мин(СтрДлина(СтрокаСуммы), 7);
	Для Сч = 1 По ВсегоЦифр Цикл
		
		ТекЦифра = Сред(СтрокаСуммы, ВсегоЦифр - Сч + 1, 1);
		
		СтруктураПараметровМакета.Вставить("ВсегоКОплате" + Сч, ТекЦифра);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыСуммыВсего()

// Возвращает представление расчетного счета.
//
Функция ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, ОбщиеДанные) Экспорт
	
	Здание        = ОбщиеДанные.Здание;
	КвитанцияНаКР = ОбщиеДанные.КвитанцияНаКР;
	
	ИнформацияПоРасчетномуСчету = "";
	
	Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта И КвитанцияНаКР Тогда
		СтрокаРСЗдания = ПараметрыОтчета.ТаблицаРСКапРемонт.Найти(Здание, "Здание");
	Иначе
		СтрокаРСЗдания = ПараметрыОтчета.ТаблицаРСЗданий.Найти(Здание, "Здание");
	КонецЕсли;
	
	НомерСчета  = "";
	НаимБанк    = "";
	КоррСчет    = "";
	БИК         = "";
	ВладелецИНН = "";
	ВладелецКПП = "";
	
	Если НЕ СтрокаРСЗдания = Неопределено Тогда
		
		НомерСчета = СтрокаРСЗдания.РасчетныйСчет;
		НаимБанк   = СтрокаРСЗдания.Банк;
		КоррСчет   = СтрокаРСЗдания.КоррСчет;
		БИК        = СтрокаРСЗдания.БИК;
		
		ВладелецИНН = СтрокаРСЗдания.ВладелецИНН;
		ВладелецКПП = СтрокаРСЗдания.ВладелецКПП;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ИсполнительРасчетов) И НЕ КвитанцияНаКР Тогда
		
		НомерСчета = ОбщиеДанные.РасчетныйСчетИсполнителя;
		НаимБанк   = ОбщиеДанные.БанкИсполнителя;
		КоррСчет   = ОбщиеДанные.КоррСчетБанкаИсполнителя;
		БИК        = ОбщиеДанные.БИКБанкаИсполнителя;
		
		ВладелецИНН = ОбщиеДанные.ИННИсполнителя;
		ВладелецКПП = ОбщиеДанные.КППИсполнителя;
		
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Банк",              НаимБанк);
	ОбщиеДанные.Вставить("БИК",               СокрЛП(БИК));
	ОбщиеДанные.Вставить("РасчетныйСчет",     СокрЛП(НомерСчета));
	ОбщиеДанные.Вставить("КоррСчет",          СокрЛП(КоррСчет));
	
	ИнформацияПоРасчетномуСчету = ИнформацияПоРасчетномуСчету
								+"р/с " + СокрЛП(НомерСчета)
								+ ", в " + НаимБанк + ", к/с " + СокрЛП(КоррСчет)
								+ ", БИК " + СокрЛП(БИК);
	
	ОбщиеДанные.Вставить("ИНН", "ИНН " + ВладелецИНН + " / КПП " + ВладелецКПП);
	
	Если ПараметрыОтчета.Форма = "09"
	 ИЛИ ПараметрыОтчета.Форма = "12"
	 ИЛИ ПараметрыОтчета.Форма = "13" Тогда
		ОбщиеДанные.Вставить("ИНН", "ИНН " + ВладелецИНН);
	КонецЕсли;
	
	Возврат ИнформацияПоРасчетномуСчету;
	
КонецФункции // ПолучитьИнформациюПоРасчетномуСчету()

// Рассчитывает суммы "Всего к оплате".
//
Функция РассчитатьСуммуВсегоКОплате(НачальноеСальдо, Начислено, Оплачено, Предоплата, ПараметрыОтчета, Объект,
									СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования) Экспорт
	
	ВсегоКОплате = Начислено;
	ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, Оплачено, Предоплата, НачальноеСальдо, ПараметрыОтчета, СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	Если ВсегоКОплате < 0 И НЕ ПараметрыОтчета.ВыводитьОтрицательнуюСуммуКОплате Тогда
		ВсегоКОплате = 0;
	КонецЕсли;

	Возврат ВсегоКОплате;

КонецФункции // РассчитатьСуммуВсегоКОплате()

// Возвращает количество различных льготных категорий льготников, проживающих в отчетном л/с.
//
Функция ПолучитьКоличествоЛьгот(Объект, ПериодПросмотра)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",     ПериодПросмотра);
	Запрос.УстановитьПараметр("Владелец", Объект);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория) КАК КоличествоЛьгот
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий.Владелец = &Владелец
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЛьгот;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоЛьгот()

// Возвращает пустую таблицу значений с определенным составом колонок.
//
Функция ИнициализироватьСведенияСчетчиков()
	
	СведенияСчетчиков = Новый ТаблицаЗначений();
	СведенияСчетчиков.Колонки.Добавить("МестоЭл");
	СведенияСчетчиков.Колонки.Добавить("Дн");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредЭл");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредЭл");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекЭл");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекЭл");
	СведенияСчетчиков.Колонки.Добавить("МестоХВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредХВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредХВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекХВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекХВ");
	СведенияСчетчиков.Колонки.Добавить("МестоГВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредГВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредГВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекГВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекГВ");
	
	Возврат СведенияСчетчиков;
	
КонецФункции // ИнициализироватьСведенияСчетчиков()

// Выводит текущую таблицу начислений в квитанции "Форма №12".
//
Процедура ВывестиТекущуюТаблицу(ТекущаяТаблица, Макет, ДокументРезультат, СтрокаФормата)
	
	Для Каждого СтрокаТаблицы Из ТекущаяТаблица Цикл
		Область = Макет.ПолучитьОбласть("НачисленияСтрока");
		Область.Параметры.Заполнить(СтрокаТаблицы);
		
		Область.Параметры.ВидУслуги = СтрокаТаблицы.ВидДляВывода;
		Область.Параметры.Тариф     = СтрокаТаблицы.ТарифДляВывода;
		
		Если НЕ СтрокаТаблицы.УслугаПоСчетчикам
		   И НЕ СтрокаТаблицы.УслугаСоставнаяПоСчетчикам
		   И СтрокаТаблицы.ИмеетсяСоставнойИндивидуальныйРасход Тогда
			Область.Параметры.НормаПоказания = ?(ПустаяСтрока(СтрокаТаблицы.СоставноеКоличествоИнд), "", СтрокаТаблицы.СоставноеКоличествоИнд);
		КонецЕсли;
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
КонецПроцедуры

// Выводит области квитанции "Форма №14".
//
Процедура ВывестиНачисленияПоказания(ДокументРезультат, Объект, ТекущиеДанные, ОбщиеДанные, ПараметрыОтчета)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	ПредыдущиеДанные            = ТекущиеДанные.ПредыдущиеДанные;
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	
	СведенияОбОрганизации = ОбщиеДанные.СведенияОбОрганизации;
	
	Если ПредыдущиеДанные.Количество() > 0 Тогда
		// Структура с информацией о предыдущем начислении и оплате.
		СтрокаПредыдущихДанных = ПредыдущиеДанные[0];
		ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", СтрокаПредыдущихДанных.КОплатеНаНачалоМесяца);
		ОбщиеДанные.Вставить("ОплаченоЗаПредМесяц",   СтрокаПредыдущихДанных.ОплаченоЗаМесяц);
		ОбщиеДанные.Вставить("ПениЗаМесяц",           СтрокаПредыдущихДанных.ПениЗаМесяц);
	Иначе
		ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", 0);
		ОбщиеДанные.Вставить("ОплаченоЗаПредМесяц",   0);
		ОбщиеДанные.Вставить("ПениЗаМесяц",           0);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("СуммаПени", ПениНачислено);
	ОбщиеДанные.Вставить("ПениНачисленоСНачСальдоПени", ПениНачисленоСНачСальдоПени);
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	ОбщиеДанные.Вставить("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
	
	ТаблицаНачисления.Колонки.Добавить("НомерСтроки");
	
	СтрВывода = Новый Структура();
	СтрВывода.Вставить("Объект", Объект);
	СтрВывода.Вставить("ИтогоПредМесяц",       0);
	СтрВывода.Вставить("ИтогоНачальноеСальдо", 0);
	СтрВывода.Вставить("ИтогоНачислено",       0);
	СтрВывода.Вставить("ИтогоПерерасчет",      0);
	СтрВывода.Вставить("ИтогоЛьгота",          0);
	СтрВывода.Вставить("ИтогоКОплате",         0);
	
	МаксИндекс = ТаблицаНачисления.Количество() - 1;
	
	Для Сч = 0 По МаксИндекс Цикл
		Строка = ТаблицаНачисления.Получить(Сч);
		
		СтрВывода.ИтогоПредМесяц       = СтрВывода.ИтогоПредМесяц       + Строка.Оплата;
		СтрВывода.ИтогоНачальноеСальдо = СтрВывода.ИтогоНачальноеСальдо + Строка.НачальноеСальдо;
		СтрВывода.ИтогоНачислено       = СтрВывода.ИтогоНачислено       + Строка.Начислено;
		СтрВывода.ИтогоПерерасчет      = СтрВывода.ИтогоПерерасчет      + Строка.Перерасчет;
		СтрВывода.ИтогоЛьгота          = СтрВывода.ИтогоЛьгота          + Строка.Льгота;
		СтрВывода.ИтогоКОплате         = СтрВывода.ИтогоКОплате         + Строка.КОплате;
		
	КонецЦикла;
	
	Если ПараметрыОтчета.ДетализироватьНачисления И ПараметрыОтчета.ЛьготыСправочно Тогда
		СтрВывода.ИтогоЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	КонецЕсли;
	
	СтрВывода.ИтогоКОплате = СтрВывода.ИтогоКОплате + ОбщиеДанные.ПениЗаМесяц;
	
	// Если сумма оплаты отрицательная и нет необходимости выводить отрицательную сумму к оплате, то выводим ноль.
	Если СтрВывода.ИтогоКОплате < 0 И НЕ ПараметрыОтчета.ВыводитьОтрицательнуюСуммуКОплате Тогда
		СтрВывода.ИтогоКОплате = 0;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ВсегоКОплате", СтрВывода.ИтогоКОплате);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("Получатель,КоличествоПроживающих,ОбщаяПлощадь,ОбщаяПлощадьБезДоли,ЛС,РасчетныйСчет,Банк,БИК,КоррСчет,ИНН,КПП");
	СтруктураПараметровМакета.Получатель            = ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация);
	СтруктураПараметровМакета.КоличествоПроживающих = Неопределено;
	СтруктураПараметровМакета.ОбщаяПлощадь          = Неопределено;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли   = Неопределено;
	СтруктураПараметровМакета.ЛС                    = Объект;
	
	СтруктураПараметровМакета.РасчетныйСчет = ОбщиеДанные.РасчетныйСчет;
	СтруктураПараметровМакета.Банк          = ОбщиеДанные.Банк;
	СтруктураПараметровМакета.БИК           = ОбщиеДанные.БИК;
	СтруктураПараметровМакета.КоррСчет      = ОбщиеДанные.КоррСчет;
	СтруктураПараметровМакета.ИНН           = СведенияОбОрганизации.ИНН;
	СтруктураПараметровМакета.КПП           = СведенияОбОрганизации.КПП;
	
	// ИЗВЕЩЕНИЕ
	Область = Макет.ПолучитьОбласть("Заполняется");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВидШК = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("СчетФактура");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
		ОбластьШтрих = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("СчетФактураQR");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
		ОбластьШтрих = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
		ОбластьШтрих.Параметры.Заполнить(ОбщиеДанные);
	КонецЕсли;
	
	Квитанция = Новый ТабличныйДокумент();
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	
	Если ТаблицаНачисления.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("Задолженность",  ТаблицаНачисления[0].НачальноеСальдо);
		ОбщиеДанные.Вставить("ИтогоНачислено", ТаблицаНачисления[0].Начислено);
	Иначе
		ОбщиеДанные.Вставить("Задолженность",  0);
		ОбщиеДанные.Вставить("ИтогоНачислено", 0);
	КонецЕсли;
	
	УстановитьКартинкуШтрихкода(ОбластьШтрих, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Квитанция.Вывести(ОбластьШтрих);
	ДокументРезультат.Присоединить(Квитанция);
	
	ОбщиеДанные.Вставить("ПлОбщ", "" + СтруктОписание.ОбщаяПлощадь + " кв.м.");
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	СтруктураПараметровМакета.КоличествоПроживающих = СтруктОписание.КоличествоПроживающих;
	СтруктураПараметровМакета.ОбщаяПлощадь          = СтруктОписание.ОбщаяПлощадь;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли   = СтруктОписание.ОбщаяПлощадьБезДоли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("Нумерация");
	ДокументРезультат.Вывести(Область);
	ОбластьШтрих = Макет.ПолучитьОбласть("ШтрихКодИНН");
	
	Если НЕ ОбластьШтрих.Области.Найти("ШтрихКод_ИНН") = Неопределено Тогда
		ИНН = СведенияОбОрганизации.ИНН;
		
		ПараметрыШтрихкода = Новый Структура;
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, ИНН);
	
		ОбластьШтрих.Области.ШтрихКод_ИНН.Картинка = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		УстановитьРасшифровкуОбластиШК(ОбластьШтрих.Области.ШтрихКод_ИНН, ИНН);
		
		ОбщиеДанные.Вставить("ТекстШК_ИНН", ИНН);
		ОбластьШтрих.Параметры.Заполнить(ОбщиеДанные);
	КонецЕсли;
	
	Квитанция    = Новый ТабличныйДокумент();
	Квитанция.Вывести(ОбластьШтрих);
	ДокументРезультат.Присоединить(Квитанция);
	
	СведенияСчетчиков = ПолучитьСведенияСчетчиков(ТаблицаСчетчиков, ПараметрыОтчета);
	
	ИнициализироватьКвитанцию(Макет, СтрВывода, ТаблицаСчетчиков, ПараметрыОтчета, ОбщиеДанные);
	
	// Сворачиваем и сортируем таблицу начислений
	ТаблицаСНачислениями = ОбработатьТаблицуНачислений(ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно);
	
	ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаСНачислениями, ТаблицаСчетчиков);
	
	ТаблицаСНачислениями.Колонки.Удалить("ВидУслуги");
	ТаблицаСНачислениями.Колонки.ВидДляВывода.Имя = "ВидУслуги";
	
	ТаблицаСНачислениями.Колонки.Удалить("Тариф");
	ТаблицаСНачислениями.Колонки.ТарифДляВывода.Имя = "Тариф";
	
	МаксИндекс = ТаблицаСНачислениями.Количество() - 1;
	
	Для Сч = 0 По МаксИндекс Цикл
		
		Строка = ТаблицаСНачислениями.Получить(Сч);
		Строка.НомерСтроки = Сч + 1;
		
		Если Не ПараметрыОтчета.ДетализироватьНачисления Тогда
			Строка.Оплата          = 0;
			Строка.Перерасчет      = 0;
			Строка.НачальноеСальдо = 0;
			Строка.Льгота          = 0;
			Строка.КОплате         = 0;
		КонецЕсли;
		
		ВывестиСтроку(ДокументРезультат, Макет, "НачисленияСтрока", Строка, Сч + 1, ПараметрыОтчета);
		
	КонецЦикла;
	Сч = Сч + 1;
	
	ВывестиСтроку(ДокументРезультат, Макет, "НачисленияИтого", СтрВывода, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	
	Если ОбщиеДанные.СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		ВывестиСтроку(ДокументРезультат, Макет, "КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки", ОбщиеДанные, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
	КонецЕсли;
	
	Если ОбщиеДанные.СуммаОплатыДобровольногоСтрахования > 0 Тогда
		ВывестиСтроку(ДокументРезультат, Макет, "ОбластьВнесеноОплатНаДобровольноеСтрахование", ОбщиеДанные, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
	КонецЕсли;
	
	ВывестиСтроку(ДокументРезультат, Макет, "НачисленияПени", ОбщиеДанные, Сч, ПараметрыОтчета);
	
	Если СведенияСчетчиков.Количество() > 0 Тогда
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияЗаголовок", Неопределено, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияВидУслуги", Неопределено, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияВремя", Неопределено, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияКолонки", Неопределено, Сч, ПараметрыОтчета);
		
		Для Каждого СтрокаПоказания Из СведенияСчетчиков Цикл
			Сч = Сч + 1;
			ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияРасшифровка", СтрокаПоказания, Сч, ПараметрыОтчета);
		КонецЦикла;
	КонецЕсли;
	
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПустаяСтрока", Неопределено, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	
	// выведем примечание
	ТекстПримеч = СокрЛП(?(ОбщиеДанные.КвитанцияНаКР, ОбщиеДанные.ПримечаниеКвитанцииКр, ОбщиеДанные.ПримечаниеКвитанцииОсн));
	
	Если Не ПустаяСтрока(ТекстПримеч) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаПримечания");
		
		СтруктураПараметровМакета = Новый Структура("Примечание");
		СтруктураПараметровМакета.Примечание = ТекстПримеч;
		
		ВывестиСтроку(ДокументРезультат, Макет, "СтрокаПримечания", СтруктураПараметровМакета, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
	КонецЕсли;
	
	Пока Сч <= ПараметрыОтчета.СтрокиКвитанции.Количество() Цикл
		ВывестиСтроку(ДокументРезультат, Макет, "ПустаяСтрока", Неопределено, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиНачисленияПоказания()

// Развертывает ПоказанияСчетчиков в колонки по видам услуг
//
Функция ПолучитьСведенияСчетчиков(ПоказанияСчетчиков, ПараметрыОтчета)
	
	ЗаполнитьВидыСчетчиков(ПоказанияСчетчиков);
	Показания = ПоказанияСчетчиков.Скопировать();
	Показания.Сортировать("НомерСтроки");
	ПараметрыОтчета.мСведенияСчетчиков.Очистить();
	ПредыдущийНомерСтроки = 0;
	Для Каждого СтрокаПоказания Из Показания Цикл
		Если СтрокаПоказания.НомерСтроки > ПредыдущийНомерСтроки Тогда
			НоваяСтрока = ПараметрыОтчета.мСведенияСчетчиков.Добавить();
			ПредыдущийНомерСтроки = СтрокаПоказания.НомерСтроки;
		КонецЕсли;
		Попытка
			НоваяСтрока["Место" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.Счетчик;
			НоваяСтрока["ДатаПред" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредПредыдущееПоказаниеПериод;
			НоваяСтрока["ПоказПред" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредПредыдущееПоказаниеДн;
			НоваяСтрока["ДатаТек" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредыдущееПоказаниеПериод;
			НоваяСтрока["ПоказТек" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредыдущееПоказаниеДн;
		Исключение
		КонецПопытки;
		Если СтрокаПоказания.ВидСчетчика = "ЭЛ" Тогда
			НоваяСтрока.Дн = "д";
			Если СтрокаПоказания.ПредПредыдущееПоказаниеНч + СтрокаПоказания.ПредыдущееПоказаниеНч > 0 Тогда
				НоваяСтрока = ПараметрыОтчета.мСведенияСчетчиков.Добавить();
				НоваяСтрока.МестоЭЛ = СтрокаПоказания.Счетчик;
				НоваяСтрока.Дн = "н";
				НоваяСтрока.ДатаПредЭЛ  = СтрокаПоказания.ПредПредыдущееПоказаниеПериод;
				НоваяСтрока.ПоказПредЭЛ = СтрокаПоказания.ПредПредыдущееПоказаниеНч;
				НоваяСтрока.ДатаТекЭЛ = СтрокаПоказания.ПредыдущееПоказаниеПериод;
				НоваяСтрока.ПоказТекЭЛ = СтрокаПоказания.ПредыдущееПоказаниеНч;
				ПредыдущийНомерСтроки = ПредыдущийНомерСтроки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОтчета.мСведенияСчетчиков;
	
КонецФункции // ПолучитьСведенияСчетчиков()

// Формирует массив со строками для вывода в квитанции "Форма №14".
//
Процедура ИнициализироватьКвитанцию(Макет, СтрВывода, ПоказанияСчетчиков, ПараметрыОтчета, ОбщиеДанные)
	
	КолонкаКвитанции = 51;
	
	ПараметрыОтчета.Вставить("КолонкаКвитанции", КолонкаКвитанции);
	
	СтрокиКвитанции = Новый Массив();
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Получатель"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.СведенияОбОрганизации.НаименованиеДляПечатныхФорм));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Лицевой счет:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , СтрВывода.Объект));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Плательщик:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.ФИО));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Адрес:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.Адрес));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "счет от " + Формат(ТекущаяДата(), "ДЛФ=D") + " за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'")));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "Сумма " + Формат(ОбщиеДанные.ВсегоКОплате, "ЧДЦ=2; ЧРД=,; ЧН=-")+ "р."));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Оплачено плательщиком"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоВерх"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоСередина"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоНиз"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Плательщик ______________"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";";
	
	ПоказанияСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ПоказанияСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ПоказанияСчетчиков.Количество() > 0 Тогда
		ПоказанияКвитанции = Новый ТаблицаЗначений();
		ПоказанияКвитанции.Колонки.Добавить("НомерСчетчика");
		ПоказанияКвитанции.Колонки.Добавить("ВидСчетчика");
		ПоказанияКвитанции.Колонки.Добавить("ПредыдущееПоказание");
		СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "ВАШИ ПОКАЗАНИЯ ПРИБОРОВ УЧЕТА"));
		СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииШапка"));
		Для Каждого СтрокаПоказаний Из ПоказанияСчетчиков Цикл
			СтрокаПоказания = Новый Структура();
			СтрокаПоказания.Вставить("НомерСчетчика", СтрокаПоказаний.Счетчик);
			СтрокаПоказания.Вставить("ВидСчетчика", СтрокаПоказаний.ВидСчетчика);
			СтрокаПоказания.Вставить("ПредыдущееПоказание", Формат(СтрокаПоказаний.ПредыдущееПоказаниеДн, СтрокаФормата));
			СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииРасшифровка", СтрокаПоказания));
			Если СтрокаПоказаний.ВидСчетчика = "ЭЛ" И СтрокаПоказаний.ПредыдущееПоказаниеНч > 0 Тогда
				СтрокаПоказания = Новый Структура();
				СтрокаПоказания.Вставить("НомерСчетчика", СтрокаПоказаний.Счетчик);
				СтрокаПоказания.Вставить("ВидСчетчика", СтрокаПоказаний.ВидСчетчика);
				СтрокаПоказания.Вставить("ПредыдущееПоказание", Формат(СтрокаПоказаний.ПредыдущееПоказаниеНч, СтрокаФормата));
				СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииРасшифровка", СтрокаПоказания));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("СтрокиКвитанции", СтрокиКвитанции);
	
КонецПроцедуры // ИнициализироватьКвитанцию()

// Выводит области квитанции "Форма №14" с учетом различных параметров.
//
Процедура ВывестиСтроку(ДокументРезультат, Макет, ИмяОбласти, СтрокаВывода, НомерСтроки, ПараметрыОтчета)
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ОбластьКвитанции = Неопределено;
	Если НомерСтроки <= ПараметрыОтчета.СтрокиКвитанции.Количество() Тогда
		ОбластьКвитанции = ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Область;
		Если ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры = Неопределено Тогда
			Попытка
				ОбластьКвитанции.Параметры.Параметр = ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Значение;
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				Если ТипЗнч(ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры) <> Тип("Структура") Тогда
					ОбластьКвитанции.Параметры.Заполнить(ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры);
				Иначе
					Для Каждого Элемент Из ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры Цикл
						Попытка
							ОбластьКвитанции.Параметры[Элемент.Ключ] = Элемент.Значение;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаВывода <> Неопределено Тогда
		Если ТипЗнч(СтрокаВывода) <> Тип("Структура") Тогда
			Область.Параметры.Заполнить(СтрокаВывода);
		Иначе
			Для Каждого Элемент Из СтрокаВывода Цикл
				Попытка
					Область.Параметры[Элемент.Ключ] = Элемент.Значение;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьКвитанции <> Неопределено Тогда
		Если ОбластьКвитанции.Рисунки.Количество() = 0 Тогда
			Область.ВставитьОбласть(ОбластьКвитанции.Область(1,1,1,5), Область.Область(1,ПараметрыОтчета.КолонкаКвитанции,1, ПараметрыОтчета.КолонкаКвитанции), ТипСмещенияТабличногоДокумента.БезСмещения, Истина);
			
			Если ИмяОбласти = "ПоказанияРасшифровка" Тогда
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПоказПредЭл");
				СписокФорматируемыхПараметров.Добавить("ПоказТекЭл");
				СписокФорматируемыхПараметров.Добавить("ПоказПредХВ");
				СписокФорматируемыхПараметров.Добавить("ПоказТекХВ");
				СписокФорматируемыхПараметров.Добавить("ПоказПредГВ");
				СписокФорматируемыхПараметров.Добавить("ПоказТекГВ");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Область);
		Иначе
			ДокументРезультат.Вывести(Область);
			Квитанция = Новый ТабличныйДокумент();
			Квитанция.Вывести(ОбластьКвитанции);
			ДокументРезультат.Присоединить(Квитанция);
		КонецЕсли;
	Иначе
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
КонецПроцедуры // ВывестиСтроку()

// Возвращает структуру данных для вывода в квитанции "Форма №14".
//
Функция ДобавитьСтрокуКвитанции(Макет, ИмяОбласти, Параметры = Неопределено, Значение = Неопределено)
	
	СтрокаКвитанции = Новый Структура();
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	СтрокаКвитанции.Вставить("Область", Область);
	СтрокаКвитанции.Вставить("Параметры", Параметры);
	СтрокаКвитанции.Вставить("Значение", Значение);
	
	Возврат СтрокаКвитанции;
	
КонецФункции // ДобавитьСтрокуКвитанции()

// Добавляет в таблицу показаний счетчиков колонки и заполняет эти колонки данными.
//
Процедура ЗаполнитьВидыСчетчиков(ПоказанияСчетчиков)
	
	ПоказанияСчетчиков.Колонки.Добавить("НомерВидаСчетчика");
	ПоказанияСчетчиков.Колонки.Добавить("НомерСтроки");
	ПоказанияСчетчиков.Колонки.Добавить("ВидСчетчика");
	НомерЭл = 0;
	НомерХВ = 0;
	НомерГВ = 0;
	Номер4 = 0;
	
	Для Каждого СтрокаСчетчика Из ПоказанияСчетчиков Цикл
		Нвод = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ВОД");
		Нх = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ХОЛ");
		Нг = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ГОР");
		Нэ = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ЭЛ");
		Нр = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ЭНЕР");
		Нс = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "СНАБЖ");
		Если Нх > 0 И Нх < Нвод Тогда
			СтрокаСчетчика.ВидСчетчика = "ХВ";
			СтрокаСчетчика.НомерВидаСчетчика = 1;
			НомерХВ = НомерХВ + 1;
			СтрокаСчетчика.НомерСтроки = НомерХВ;
		ИначеЕсли Нг > 0 И Нг < Нвод Тогда
			СтрокаСчетчика.ВидСчетчика = "ГВ";
			СтрокаСчетчика.НомерВидаСчетчика = 2;
			НомерГВ = НомерГВ + 1;
			СтрокаСчетчика.НомерСтроки = НомерГВ;
		ИначеЕсли Нэ > 0 И Нэ < Нр Тогда
			СтрокаСчетчика.ВидСчетчика = "ЭЛ";
			СтрокаСчетчика.НомерВидаСчетчика = 3;
			НомерЭл = НомерЭл + 1;
			СтрокаСчетчика.НомерСтроки = НомерЭл;
		ИначеЕсли Нэ > 0 И Нэ < Нс Тогда
			СтрокаСчетчика.ВидСчетчика = "ЭЛ";
			СтрокаСчетчика.НомерВидаСчетчика = 3;
			НомерЭл = НомерЭл + 1;
			СтрокаСчетчика.НомерСтроки = НомерЭл;
		Иначе
			СтрокаСчетчика.ВидСчетчика = СтрокаСчетчика.Услуга.Ссылка;
			СтрокаСчетчика.НомерВидаСчетчика = 4;
			Номер4 = Номер4 + 1;
			СтрокаСчетчика.НомерСтроки = Номер4;
		КонецЕсли;
	КонецЦикла;
	
	ПоказанияСчетчиков.Сортировать("НомерВидаСчетчика, Услуга, Счетчик");
	
КонецПроцедуры // ЗаполнитьВидыСчетчиков()

// Формирует таблицу с начислениями по типу услуг, определенному на форме настроек.
//
// Параметры:
//  ТаблицаНачисления - таблица со всеми начислениями по текущему л/с
//  Отбор - структура с параметрами отбора
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с начислениями по определенному типу услуг
//
Функция ПолучитьТаблицуУслуг(ТаблицаНачисления, ВидыУслуг)
	
	НастройкаСбораДанных = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка();
	
	ТаблицаУслуг = ТаблицаНачисления.СкопироватьКолонки();
	
	Для Каждого ВидУслуги Из ВидыУслуг Цикл
		СтрокиНачисления = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ВидУслуги));
		
		Для Каждого СтрокаНачисления Из СтрокиНачисления Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаУслуг.Добавить(), СтрокаНачисления);
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаУслуг.Колонки.Найти("Порядок") = Неопределено Тогда
		ТаблицаУслуг.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	КонецЕсли;
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаУслуг, НастройкаСбораДанных);
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслуг()

// Возвращает структуру таблиц с данными о взаиморасчетах по списку объектов (без учета разреза услуг).
//
// Параметры:
//  СписокОбъектов - СписокЗначений - список лицевых счетов.
//
// Возвращаемое значение:
//  СтруктураОбщихТаблиц - Структура - структура общих таблиц без учета разреза услуг.
//
Функция ПолучитьСтруктуруОбщихТаблиц(ПараметрыОтчета)
	
	СтруктураОбщихТаблиц = Новый Структура;
	
	// Ищем оплаты по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаОплат",      ПолучитьДанныеОбОплатах(ПараметрыОтчета));
	
	// Ищем данные о начальном сальдо по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаСальдо",     ПолучитьДанныеОНачальномСальдо(ПараметрыОтчета));
	
	// Ищем данные о субсидиях по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаСубсидий",   ПолучитьДанныеОСубсидиях(ПараметрыОтчета));
	
	// Ищем показания счетчиков по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаСчетчиков",  ПолучитьДанныеПоСчетчикам(ПараметрыОтчета));
	
	// Ищем данные о начислениях по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаНачислений", ПолучитьЗапросНачисления(ПараметрыОтчета));
	
	// Ищем данные о пени по всем объектам отчета.
	СтруктураОбщихТаблиц.Вставить("ТаблицаПени",       ПолучитьДанныеОПени(ПараметрыОтчета));
	
	// Ищем предыдущие данные об остатках и оплатах по всем объектам отчета.
	Если ПараметрыОтчета.Форма = "02"
	 ИЛИ ПараметрыОтчета.Форма = "06"
	 ИЛИ ПараметрыОтчета.Форма = "14" Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаПредыдущихДанных", ПолучитьПредыдущиеДанные(ПараметрыОтчета));
	КонецЕсли;
	
	// Ищем данные о суммах льгот по всем объектам отчета.
	Если ПараметрыОтчета.Форма = "07" Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаДанныхПоЛьготам", ПолучитьДанныеПоЛьготам(ПараметрыОтчета));
	КонецЕсли;
	
	// Ищем сведения о начислениях и оплатах по всем объектам отчета за последние 6 месяцев.
	Если ПараметрыОтчета.Форма = "11" Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаПредыдущихСведений", ПолучитьПредыдущиеСведения(ПараметрыОтчета));
	КонецЕсли;
	
	// Ищем сведения о зависимых услугах.
	Если (ПараметрыОтчета.Форма = "04"
	 ИЛИ ПараметрыОтчета.Форма = "06"
	 ИЛИ ПараметрыОтчета.Форма = "07") И ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		СтруктураОбщихТаблиц.Вставить("ТаблицаЗависимыхУслуг", ПолучитьТаблицуЗависимыхУслуг(СтруктураОбщихТаблиц.ТаблицаСчетчиков, ПараметрыОтчета));
	КонецЕсли;
	
	Возврат СтруктураОбщихТаблиц;
	
КонецФункции // ПолучитьСтруктуруОбщихТаблиц()

// Формирует структуру с данными о начислениях по текущему объекту отчета.
//
// Параметры:
//  СтруктураОбщихТаблиц - структура с данными по всем объектам отчета
//  ЛицевойСчет - текущий объект отчета.
//  ПараметрыОтчета - структура с пользовательскими настройками.
//
// Возвращаемое значение:
//  Структура - структура с данными о начислениях по текущему объекту отчета.
//
Функция ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ЛицевойСчет, ПараметрыОтчета)
	
	ТекущиеДанные = Новый Структура;
	
	ДанныеОбОплатах = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаОплат, "ЛицевойСчет", ЛицевойСчет);
	ДанныеОбОплатах.Свернуть("ЛицевойСчет, Период", "СуммаОплаты, ОплатаЗадолженности, Предоплата, СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования");
	
	ТекущиеДанные.Вставить("ДанныеОбОплатах",             ДанныеОбОплатах);
	ТекущиеДанные.Вставить("ДанныеОНачСальдо",            ПолучитьНачальноеСальдоДляЛС(СтруктураОбщихТаблиц.ТаблицаСальдо, ЛицевойСчет, ПараметрыОтчета));
	ТекущиеДанные.Вставить("ДанныеОСубсидиях",            УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаСубсидий, "ЛицевойСчет", ЛицевойСчет));
	ТекущиеДанные.Вставить("ДанныеОСчетчиках",            УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаСчетчиков, "Объект", ЛицевойСчет, "Объект", ЛицевойСчет.Адрес));
	ТекущиеДанные.Вставить("ДанныеОНачислениях",          УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаНачислений, "ЛицевойСчет", ЛицевойСчет));
	ТекущиеДанные.Вставить("ДанныеОПени",                 ПолучитьСуммуПениДляЛС(СтруктураОбщихТаблиц.ТаблицаПени, ЛицевойСчет, "СуммаПени"));
	ТекущиеДанные.Вставить("ПениНачисленоСНачСальдоПени", ПолучитьСуммуПениДляЛС(СтруктураОбщихТаблиц.ТаблицаПени, ЛицевойСчет, "ПениНачисленоСНачСальдоПени"));
	
	Если ПараметрыОтчета.Форма = "02"
	 ИЛИ ПараметрыОтчета.Форма = "06"
	 ИЛИ ПараметрыОтчета.Форма = "14" Тогда
		ПредыдущиеДанные = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПредыдущихДанных, "ЛицевойСчет", ЛицевойСчет);
		ПредыдущиеДанные.Свернуть("ЛицевойСчет", "КОплатеНаНачалоМесяца, ОплаченоЗаМесяц, ПениЗаМесяц");
		ТекущиеДанные.Вставить("ПредыдущиеДанные", ПредыдущиеДанные);
	КонецЕсли;
	
	Если ПараметрыОтчета.Форма = "07" Тогда
		ДанныеПоЛьготам = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаДанныхПоЛьготам, "ЛицевойСчет", ЛицевойСчет);
		ДанныеПоЛьготам.Свернуть("Проживающий, ЛьготнаяКатегория", "СуммаЛьготы");
		ТекущиеДанные.Вставить("ДанныеПоЛьготам", ДанныеПоЛьготам);
	КонецЕсли;
	
	Если ПараметрыОтчета.Форма = "11" Тогда
		ПредыдущиеСведения = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаПредыдущихСведений, "ЛицевойСчет", ЛицевойСчет);
		ПредыдущиеСведения.Свернуть("ЛицевойСчет, ПериодДанных", "Начислено, Доначислено, Оплачено, КонечноеСальдо");
		ТекущиеДанные.Вставить("ПредыдущиеСведения", ПредыдущиеСведения);
	КонецЕсли;
	
	Если (ПараметрыОтчета.Форма = "04"
	 ИЛИ ПараметрыОтчета.Форма = "06"
	 ИЛИ ПараметрыОтчета.Форма = "07") И ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТекущиеДанные.Вставить("ДанныеОЗависимыхУслугах", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуДанныхСОтборомПоКритерию(СтруктураОбщихТаблиц.ТаблицаЗависимыхУслуг, "Объект", ЛицевойСчет, "Объект", ЛицевойСчет.Адрес));
	КонецЕсли;
	
	Возврат ТекущиеДанные;
	
КонецФункции // ПолучитьСтруктуруДанныхПоТекущемуОбъекту()

// Записывает в структуру с общими данными сведения о текущему плательщике.
//
// Параметры:
//  ОбщиеДанные - структура с общими данными
//  СтруктураНастроек - структура с пользовательскими настройками
//  СтруктураПлательщиков - структура с информацией о всех плательщиках отчета
//  СтрокаТаблицы - строка с информацией о текущем плательщике.
//
Процедура ПодготовитьСведенияОПлательщике(ОбщиеДанные, ПараметрыОтчета, СтрокаТаблицы)
	
	ЛицевойСчет        = СтрокаТаблицы.ЛицевойСчет;
	Помещение          = СтрокаТаблицы.Помещение;
	Подъезд            = СтрокаТаблицы.Подъезд;
	Здание             = СтрокаТаблицы.Здание;
	Организация        = ПараметрыОтчета.Организация;
	
	ОбщиеДанные.Вставить("ЛицевойСчет",                ЛицевойСчет);
	ОбщиеДанные.Вставить("НаименованиеЛицевогоСчета",  ЛицевойСчет.Наименование);
	ОбщиеДанные.Вставить("ЧисловойНомерЛицевогоСчета", УПЖКХ_ПечатьКвитанцийСервер.СократитьНаименованиеЛС(СокрЛП(ЛицевойСчет.Наименование)));
	ОбщиеДанные.Вставить("Помещение",                  Помещение);
	ОбщиеДанные.Вставить("Подъезд",                    Подъезд);
	ОбщиеДанные.Вставить("Здание",                     Здание);
	ОбщиеДанные.Вставить("ИдентификаторЛС",            ЛицевойСчет.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                      ЛицевойСчет.Код);
	ОбщиеДанные.Вставить("АдресЭлектроннойПочты",      ЛицевойСчет.АдресЭлектроннойПочты);
	ОбщиеДанные.Вставить("ТелефонЛС",                  ЛицевойСчет.Телефон);
	
	// Адрес по текущему л/с.
	АдресДома = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Здание);
	Адрес     = ПолучитьАдресПомещения(АдресДома, Помещение);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = ЛицевойСчет.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	ОбщиеДанные.Вставить("Адрес",     Адрес);
	ОбщиеДанные.Вставить("АдресДома", Адрес);
	
	// ФИО ответственного собственника л/с.
	СтрокаВладельца = ПараметрыОтчета.ТаблицаВладельцев.Найти(ЛицевойСчет, "ЛицевойСчет");
	Если СтрокаВладельца = Неопределено Тогда
		ОбщиеДанные.Вставить("ФИО",                            "");
		ОбщиеДанные.Вставить("ФИОСтрока",                      "");
		ОбщиеДанные.Вставить("ВладелецЖилец",                  Ложь);
		ОбщиеДанные.Вставить("ФамилияОтветственного",          "");
		ОбщиеДанные.Вставить("ИмяОтветственного",              "");
		ОбщиеДанные.Вставить("ОтчествоОтветственного",         "");
		ОбщиеДанные.Вставить("ОтветственныйКонтрагентФизЛицо", Ложь);
		ОбщиеДанные.Вставить("ВладелецФизЛицо",                Справочники.ФизическиеЛица.ПустаяСсылка());
		ОбщиеДанные.Вставить("ТелефонВладельцаЖильца",         "");
		ОбщиеДанные.Вставить("ИННВладельцаЖильца",             "");
		ОбщиеДанные.Вставить("ДатаРожденияВладельца",          Дата(1,1,1));
		ОбщиеДанные.Вставить("СтраховойНомерПФРВладельца",     "");
	Иначе
		ОбщиеДанные.Вставить("ФИО",           СтрокаВладельца.Владелец);
		ОбщиеДанные.Вставить("ФИОСтрока",     СтрокаВладельца.НаименованиеВладельца);
		ОбщиеДанные.Вставить("ВладелецЖилец", СтрокаВладельца.ВладелецЖилец);
		ОбщиеДанные.Вставить("ОтветственныйКонтрагентФизЛицо", СтрокаВладельца.ОтветственныйКонтрагентФизЛицо);
		
		Если СтрокаВладельца.ОтветственныйКонтрагентФизЛицо Тогда
			ФИОСтруктура = РазделитьФИО(СокрЛП(ОбщиеДанные.ФИО));
			ОбщиеДанные.Вставить("ФамилияОтветственного",  ФИОСтруктура.Фамилия);
			ОбщиеДанные.Вставить("ИмяОтветственного",      ФИОСтруктура.Имя);
			ОбщиеДанные.Вставить("ОтчествоОтветственного", ФИОСтруктура.Отчество);
		ИначеЕсли СтрокаВладельца.ВладелецЖилец Тогда
			ОбщиеДанные.Вставить("ФамилияОтветственного",  СтрокаВладельца.ФамилияЖильца);
			ОбщиеДанные.Вставить("ИмяОтветственного",      СтрокаВладельца.ИмяЖильца);
			ОбщиеДанные.Вставить("ОтчествоОтветственного", СтрокаВладельца.ОтчествоЖильца);
		КонецЕсли;
		
		ОбщиеДанные.Вставить("ВладелецФизЛицо",            СтрокаВладельца.ВладелецФизЛицо);
		ОбщиеДанные.Вставить("ТелефонВладельцаЖильца",     СтрокаВладельца.ТелефонВладельцаЖильца);
		ОбщиеДанные.Вставить("ИННВладельцаЖильца",         СтрокаВладельца.ИННВладельцаЖильца);
		ОбщиеДанные.Вставить("ДатаРожденияВладельца",      СтрокаВладельца.ДатаРожденияВладельца);
		ОбщиеДанные.Вставить("СтраховойНомерПФРВладельца", СтрокаВладельца.СтраховойНомерПФРВладельца);
	КонецЕсли;
	
	// Сведения о р/с фонда кап. ремонта.
	СтрокаРС = ПараметрыОтчета.ТаблицаРСКапРемонт.Найти(Здание, "Здание");
	Если Не СтрокаРС = Неопределено Тогда
		
		ОбщиеДанные.Вставить("ВладелецСчетаКР",              СтрокаРС.ВладелецСчета);
		ОбщиеДанные.Вставить("НаименованиеВладельцаСчетаКР", СтрокаРС.ВладелецНаименование);
		ОбщиеДанные.Вставить("КодВладельцаСчетаКР",          СтрокаРС.ВладелецКод);
		ОбщиеДанные.Вставить("ИННВладельцаСчетаКР",          СтрокаРС.ВладелецИНН);
		ОбщиеДанные.Вставить("КППВладельцаСчетаКР",          СтрокаРС.ВладелецКПП);
		ОбщиеДанные.Вставить("РасчетныйСчетКР",              СтрокаРС.РасчетныйСчет);
		ОбщиеДанные.Вставить("БанкКР",                       СтрокаРС.Банк);
		ОбщиеДанные.Вставить("КоррСчетКР",                   СтрокаРС.КоррСчет);
		ОбщиеДанные.Вставить("БИККР",                        СтрокаРС.БИК);
		ОбщиеДанные.Вставить("ДопИнформацияИсполнителяКР",   СтрокаРС.ДопИнформация);
		ОбщиеДанные.Вставить("ЮрАдресИсполнителяКР",         СтрокаРС.ЮрАдрес);
		ОбщиеДанные.Вставить("ТелефонИсполнителяКР",         СтрокаРС.Телефон);
		ОбщиеДанные.Вставить("ЭлЯщикПолучателяКР",           СтрокаРС.ЭлПочта);
		
	Иначе
		
		ОбщиеДанные.Вставить("ВладелецСчетаКР",              "");
		ОбщиеДанные.Вставить("НаименованиеВладельцаСчетаКР", "");
		ОбщиеДанные.Вставить("КодВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("ИННВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("КППВладельцаСчетаКР",          "");
		ОбщиеДанные.Вставить("РасчетныйСчетКР",              "");
		ОбщиеДанные.Вставить("БанкКР",                       "");
		ОбщиеДанные.Вставить("КоррСчетКР",                   "");
		ОбщиеДанные.Вставить("БИККР",                        "");
		ОбщиеДанные.Вставить("ЮрАдресИсполнителяКР",         "");
		ОбщиеДанные.Вставить("ДопИнформацияИсполнителяКР",   "");
		ОбщиеДанные.Вставить("ТелефонИсполнителяКР",         "");
		ОбщиеДанные.Вставить("ЭлЯщикПолучателяКР",           "");
	КонецЕсли;
	
	// Сведения о р/с зданий:
	СтрокаРС = ПараметрыОтчета.ТаблицаРСЗданий.Найти(Здание, "Здание");
	
	ОбщиеДанные.Вставить("РасчетныйСчет", "");
	ОбщиеДанные.Вставить("Банк",          "");
	ОбщиеДанные.Вставить("КоррСчет",      "");
	ОбщиеДанные.Вставить("БИК",           "");
	
	Если Не СтрокаРС = Неопределено Тогда
		Если Организация = СтрокаРС.ВладелецСчета Тогда
			ОбщиеДанные.Вставить("РасчетныйСчет", СтрокаРС.РасчетныйСчет);
			ОбщиеДанные.Вставить("Банк",          СтрокаРС.Банк);
			ОбщиеДанные.Вставить("КоррСчет",      СтрокаРС.КоррСчет);
			ОбщиеДанные.Вставить("БИК",           СтрокаРС.БИК);
		Иначе
			ОбщиеДанные.Вставить("РасчетныйСчет", Организация.ОсновнойБанковскийСчет.НомерСчета);
			ОбщиеДанные.Вставить("Банк",          Организация.ОсновнойБанковскийСчет.Банк.Наименование);
			ОбщиеДанные.Вставить("КоррСчет",      Организация.ОсновнойБанковскийСчет.Банк.КоррСчет);
			ОбщиеДанные.Вставить("БИК",           Организация.ОсновнойБанковскийСчет.Банк.Код);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСведенияОПлательщике()

// Получает данные получателя платежа в зависимости от способа печати квитанции на кап.ремонт
// и записывает в общие данные.
//
Процедура ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета)
	
	ТекущийПолучательПлатежа = ПараметрыОтчета.Организация;
	
	Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта И ОбщиеДанные.КвитанцияНаКР Тогда
		ТекущийПолучательПлатежа = ОбщиеДанные.ВладелецСчетаКР;
	Иначе
		СтрокаРСЗдания = ПараметрыОтчета.ТаблицаРСЗданий.Найти(ОбщиеДанные.Здание, "Здание");
		Если ПараметрыОтчета.Свойство("ИсполнительРасчетов") И ЗначениеЗаполнено(ПараметрыОтчета.ИсполнительРасчетов) Тогда
			ТекущийПолучательПлатежа = ПараметрыОтчета.ИсполнительРасчетов;
			
			УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьСведенияОбИсполнителе(ОбщиеДанные, ПараметрыОтчета);
			
		ИначеЕсли НЕ СтрокаРСЗдания = Неопределено И ЗначениеЗаполнено(СтрокаРСЗдания.ВладелецСчета) И НЕ СтрокаРСЗдания.ВладелецСчета = ПараметрыОтчета.Организация Тогда
			ТекущийПолучательПлатежа = СтрокаРСЗдания.ВладелецСчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОтчета.Форма = "07" ИЛИ ПараметрыОтчета.Форма = "14" Тогда
		СведенияОПолучателе = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ТекущийПолучательПлатежа, КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
		ОбщиеДанные.Вставить("СведенияОбОрганизации", СведенияОПолучателе);
	КонецЕсли;
	
	Если ТекущийПолучательПлатежа = ПараметрыОтчета.Организация Тогда
		ОбщиеДанные.Вставить("ПолучательПлатежа", ОбщиеДанные.Организация);
		ОбщиеДанные.Вставить("ИННадрес",          ОбщиеДанные.ИННОрганизации + ?(ПустаяСтрока(ОбщиеДанные.ЮрАдресОрганизации), "", ", " + ОбщиеДанные.ЮрАдресОрганизации));
	ИначеЕсли ПараметрыОтчета.Форма = "07" ИЛИ ПараметрыОтчета.Форма = "14" Тогда
		ОбщиеДанные.Вставить("ПолучательПлатежа", СведенияОПолучателе.НаименованиеДляПечатныхФорм);
		ОбщиеДанные.Вставить("ИННадрес", СокрЛП(УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "ИНН, ЮридическийАдрес")));
	Иначе
		СведенияОПолучателе = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ТекущийПолучательПлатежа, КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
		ОбщиеДанные.Вставить("ПолучательПлатежа", СведенияОПолучателе.НаименованиеДляПечатныхФорм);
		ОбщиеДанные.Вставить("ИННадрес", СокрЛП(УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "ИНН, ЮридическийАдрес")));
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ИнформацияПоБанку",      ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, ОбщиеДанные));
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ?(ОбщиеДанные.КвитанцияНаКР, ОбщиеДанные.ДопИнформацияКР, ОбщиеДанные.ДопИнформация));
	
КонецПроцедуры // ЗаполнитьДанныеПолучателяПлатежа()

// Помещает некоторые параметры в общие данные в зависимости от номера формы квитанции.
//
Процедура ЗаполнитьПараметрыВОбщихДанныхЗависящиеОтНомераФормы(ПараметрыОтчета, ОбщиеДанные)
	
	ПериодОплаты = "за ";
	Если ПараметрыОтчета.Форма = "02"
	 ИЛИ ПараметрыОтчета.Форма = "06"
	 ИЛИ ПараметрыОтчета.Форма = "09"
	 ИЛИ ПараметрыОтчета.Форма = "10" Тогда
		ПериодОплаты = "";
	КонецЕсли;
	ОбщиеДанные.Вставить("ПериодОплаты", ПериодОплаты + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	
	Если ПараметрыОтчета.Форма = "09" Тогда
		ОбщиеДанные.Вставить("ДатаФормирования", "от " + Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=dd.MM.yy"));
	КонецЕсли;
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ОбщиеДанные.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплатыДата", Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	ОбщиеДанные.Вставить("СрокОплаты",     "Оплатить до " + ОбщиеДанные.СрокОплатыДата + " г.");
	
	// Определим представление организации. (Используется в Формах 02 и 06).
	ОбщиеДанные.Вставить("ОрганизацияПредставление", СокрЛП(ОбщиеДанные.Организация + ?(ПустаяСтрока(ОбщиеДанные.Телефон), "", ", " + ОбщиеДанные.Телефон)));
	
КонецПроцедуры // ЗаполнитьПараметрыВОбщихДанныхЗависящиеОтНомераФормы()

// Выводит строки таблицы начислений в необходимых областях макета квитанции "Форма №9".
//
Процедура ВывестиСтрокиТаблицыНачисленийФорма9(тмДокумент, тмДокумент1, Макет, НаименованиеВыводимойГруппы, ТаблицаНачислений, ПараметрыОтчета, КоличетвоВыводимыхГрупп, МаксКоличествоСтрок, Сч)
	
	Если КоличетвоВыводимыхГрупп > 0 Тогда
		Если Сч < МаксКоличествоСтрок Тогда
			Область = Макет.ПолучитьОбласть("НачислениеГруппа");
		Иначе
			Область = Макет.ПолучитьОбласть("НачислениеГруппа1");
		КонецЕсли;
		Область.Параметры.Заполнить(Новый Структура("Группа", НаименованиеВыводимойГруппы));
		
		Если Сч < МаксКоличествоСтрок Тогда
			тмДокумент.Вывести(Область);
		Иначе
			тмДокумент1.Вывести(Область);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
		Если Сч < МаксКоличествоСтрок Тогда
			Область = Макет.ПолучитьОбласть("НачислениеСтрока");
		Иначе
			Область = Макет.ПолучитьОбласть("НачислениеСтрока1");
		КонецЕсли;
		Область.Параметры.Заполнить(СтрокаТаблицы);
		
		Область.Параметры.ВидУслуги = СтрокаТаблицы.ВидДляВывода;
		Область.Параметры.Тариф     = СтрокаТаблицы.ТарифДляВывода;
		
		Если НЕ СтрокаТаблицы.УслугаПоСчетчикам
		   И НЕ СтрокаТаблицы.УслугаСоставнаяПоСчетчикам
		   И СтрокаТаблицы.ИмеетсяСоставнойИндивидуальныйРасход Тогда
			Область.Параметры.НормаПоказания = ?(ПустаяСтрока(СтрокаТаблицы.СоставноеКоличествоИнд), "", СтрокаТаблицы.СоставноеКоличествоИнд);
		КонецЕсли;
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;");
		
		Если Сч < МаксКоличествоСтрок Тогда
			тмДокумент.Вывести(Область);
		Иначе
			тмДокумент1.Вывести(Область);
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры // ВывестиСтрокиТаблицыНачисленийФорма9()

// Выводит примечание.
//
// Параметры:
//  ДокументРезультат – табличный документ, в который нужно вывести примечание
//  Макет        – табличный документ, из которого нужно брать шаблон примечания.
//
Процедура ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные) Экспорт

	ТекстПримеч = СокрЛП(?(ОбщиеДанные.КвитанцияНаКР, ОбщиеДанные.ПримечаниеКвитанцииКР, ОбщиеДанные.ПримечаниеКвитанцииОсн));
	
	Если Не ПустаяСтрока(ТекстПримеч) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаПримечания");
		
		СтруктураПараметровМакета = Новый Структура("Примечание");
		СтруктураПараметровМакета.Примечание = ТекстПримеч;
		
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

КонецПроцедуры // ВывестиПримечание()

// Производит отбор строк по видам тарифа и, в случае наличия сторнации, по отсутствию перерасчетов.
//
Функция ОтборСтрокиПоЗначениюТарифа(ТаблицаПоУслуге, ВидТарифа)
	
	СтрокаСТарифом = Неопределено;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидТарифа", ВидТарифа);
	НайденныеСтроки = ТаблицаПоУслуге.НайтиСтроки(ПараметрыОтбора);
	
	ТаблицаПоТекущемуВидуТарифу = ТаблицаПоУслуге.Скопировать(НайденныеСтроки);
	Если ТаблицаПоТекущемуВидуТарифу.Количество() = 1 Тогда
		СтрокаСТарифом = ТаблицаПоТекущемуВидуТарифу[0];
	ИначеЕсли ТаблицаПоТекущемуВидуТарифу.Количество() > 1 Тогда
		
		// Отсекаем сторнирование начислений, если вид тарифа "Общий".
		
		ПараметрыОтбора.Вставить("Начислено", 0);
		СтрокиДляУдаления = ТаблицаПоТекущемуВидуТарифу.НайтиСтроки(ПараметрыОтбора);
		
		// Происходит удаление строк из таблицы "ТаблицаПоТекущемуВидуТарифу", в которых не заполнено поле "Начислено",
		// т.к. в данные строки не удовлетворяют условиям определения размера по текущему виду тарифа.
		Если СтрокиДляУдаления.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
				ТаблицаПоТекущемуВидуТарифу.Удалить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
		Если ТаблицаПоТекущемуВидуТарифу.Количество() = 1 Тогда
			СтрокаСТарифом = ТаблицаПоТекущемуВидуТарифу[0];
		ИначеЕсли ТаблицаПоТекущемуВидуТарифу.Количество() > 1 Тогда
			
			ПараметрыОтбора.Очистить();
			
			// Если произведено сторнирование за предыдущие периоды и в текущем месяце изменялся размер тарифа по текущему виду тарифа.
			ПараметрыОтбора.Вставить("Перерасчет", 0);
			НайденныеСтроки = ТаблицаПоТекущемуВидуТарифу.НайтиСтроки(ПараметрыОтбора);
			
			КоличествоНайденныхСтрок = НайденныеСтроки.Количество();
			
			Если НЕ КоличествоНайденныхСтрок = 0 Тогда
				
				Если КоличествоНайденныхСтрок = 1 Тогда
					
					НайденнаяСтрока = НайденныеСтроки[0];
					
					Количество = НайденнаяСтрока.Количество;
					Начислено  = НайденнаяСтрока.Начислено;
					
				ИначеЕсли КоличествоНайденныхСтрок > 1 Тогда
					
					// Суммируем начисления по всем тарифам в рамках текущего вида тарифа.
					Количество = ТаблицаПоТекущемуВидуТарифу.Итог("Количество");
					Начислено  = ТаблицаПоТекущемуВидуТарифу.Итог("Начислено");
					
				КонецЕсли;
				
				СтрокаСТарифом = НайденныеСтроки[0];
				
				СтрокаСТарифом.Количество = Количество;
				СтрокаСТарифом.Начислено  = Начислено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаСТарифом;
	
КонецФункции // ОтборСтрокиПоЗначениюТарифа()

#КонецОбласти

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

#Область ПроцедурыИФункцииФормированияОтчета

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ОбъектОтчета) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Объект не указан.");
		Возврат;
	КонецЕсли;
	
	Попытка
		мНастройкиУчетнойПолитикиТСЖотказ = Ложь;
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра),
																										ПараметрыОтчета.Организация, 
																										мНастройкиУчетнойПолитикиТСЖотказ);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки Учетной политики (ЖКХ). Пожалуйста, проверьте, корректно ли заданы настройки Учетной политики (ЖКХ).", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПараметрыОтчета.Вставить("ПараметрыУП",      мНастройкиУчетнойПолитикиТСЖ);
	ПараметрыОтчета.Вставить("ПараметрыУПОтказ", мНастройкиУчетнойПолитикиТСЖОтказ);
	
	Попытка
		мНастройкиФормированияПДЖКХотказ = Ложь;
		мНастройкиФормированияПДЖКХ      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ПараметрыОтчета.Организация,
																										  мНастройкиФормированияПДЖКХотказ);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки формирования квитанции. Пожалуйста, проверьте, корректно ли заданы настройки формирования квитанций.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПараметрыОтчета.Вставить("ПараметрыФормированияПД",      мНастройкиФормированияПДЖКХ);
	ПараметрыОтчета.Вставить("ПараметрыФормированияПДОтказ", мНастройкиФормированияПДЖКХОтказ);
	
	ПараметрыОтчета.Вставить("ВидШК", ?(мНастройкиФормированияПДЖКХОтказ, Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный, мНастройкиФормированияПДЖКХ.ВидШтрихкода));
	
	ПараметрыОтчета.Вставить("мТочностьОбъемаНачислений",               Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить());
	ПараметрыОтчета.Вставить("УказыватьЗависимостьУслугВРазрезеЗданий", Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить());
	ПараметрыОтчета.Вставить("ЛьготыСправочно",                         ?(мНастройкиУчетнойПолитикиТСЖОтказ, Ложь, мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах));
	ПараметрыОтчета.Вставить("ВидМакета", "");
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ИсполнительРасчетов) Тогда
		
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного", Истина);
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам", ПараметрыОтчета.ИсполнительРасчетов.ОсновнойБанковскийСчет);
		
	Иначе
		
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного", Ложь);
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам", Справочники.БанковскиеСчета.ПустаяСсылка());
		
	КонецЕсли;
	
	// Не используется в квитанциях. Заглушка.
	ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного", Ложь);
	ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	// Структура с параметрами для заголовков извещения и квитанции.
	ОбщиеДанные = Новый Структура();
	
	// Записываем в структуру сведения об основной организации и об исполнителе расчетов.
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, ПараметрыОтчета);
	
	// Определим некоторые параметры общих данных, которые зависят от номера формы квитанции.
	ЗаполнитьПараметрыВОбщихДанныхЗависящиеОтНомераФормы(ПараметрыОтчета, ОбщиеДанные);
	
	ОбщиеДанные.Вставить("МесяцДобровольногоСтрахования", Формат(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1), "ДФ='MMMM yyyy'") + " г.");
	
	// Таблицы с р/с основного фонда и фонда кап. ремонта по зданиям.
	ПараметрыОтчета.Вставить("ТаблицаРСЗданий",    УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(ПараметрыОтчета, Ложь));
	ПараметрыОтчета.Вставить("ТаблицаРСКапРемонт", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(ПараметрыОтчета, Истина));
	
	ПараметрыОтчета.Вставить("ТаблицаВладельцев", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуВладельцевЛицевыхСчетов(ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.СписокЛицевыхСчетов));
	
	// Подготавливаем структуру с таблицами данных о начислениях, оплатах, пени и т.д. по всем л/с.
	СтруктураОбщихТаблиц = ПолучитьСтруктуруОбщихТаблиц(ПараметрыОтчета);
	
	Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		Если НЕ ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			Если ПараметрыОтчета.ПечататьКвитанциюКапРемонт Тогда
				Если ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
					СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.ТекущийСписокУслуг);
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.СписокУслугКапРемонт);
				Иначе
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.СписокУслугКапРемонт);
				КонецЕсли;
			Иначе
				// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
				СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.ТекущийСписокУслуг);
			КонецЕсли;
		Иначе
			// Для печати единой квитанции программно меняем в параметрах отчета методику ведения учета по услугам кап. ремонта.
			ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	тмДокумент    = Новый ТабличныйДокумент();
	ЭтоПервая     = Истина;
	
	Для Каждого ЭлементСписка Из ПараметрыОтчета.ТаблицаОбъектов Цикл
		
		ПараметрыОтчета.Вставить("СтруктОписание", СформироватьДанныеПоЛицевомуСчету(ЭлементСписка.ЛицевойСчет, ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.ПараметрыУП, ПараметрыОтчета.Организация));
		
		// Записываем в структуру общих данных сведения о плательщике.
		ПодготовитьСведенияОПлательщике(ОбщиеДанные, ПараметрыОтчета, ЭлементСписка);
		
		Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Если ПараметрыОтчета.ПечататьКвитанциюКапРемонт Тогда
				Если ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицОсновная, ЭлементСписка.ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
					
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицКапРемонт, ЭлементСписка.ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, Истина);
				Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[2].Значение
					
					СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицКапРемонт, ЭлементСписка.ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, Истина);
				КонецЕсли;
			Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[1].Значение
				СформироватьТекущуюКвитанцию(СтруктураОбщихТаблицОсновная, ЭлементСписка.ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
				
			КонецЕсли;
		Иначе
			СформироватьТекущуюКвитанцию(СтруктураОбщихТаблиц, ЭлементСписка.ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
		КонецЕсли;
	КонецЦикла;
	
	// Для формы квитанции "05" проверяем, есть ли необходимость вывода 2-х квитанций на один лист.
	Если ПараметрыОтчета.Форма = "05" И Не ПараметрыОтчета.ВыводитьПоОднойКвитанции Тогда
		ВывестиКвитанцииИзМассивовКвитанцийДляПечатиДвухКвитанцийНаЛист(ДокументРезультат, ПараметрыОтчета);
	КонецЕсли;
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КвитанцииИзвещенияКВП";
	
	// Область печати
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2,
									  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	Если ПараметрыОтчета.Форма = "09" Тогда
		
		РезультатыФормированияОтчета = Новый Структура("ДокументРезультат, ДанныеПоКвитанциям", ДокументРезультат);
		
		// ВРЕМЕННО СКРЫТЫЙ МЕХАНИЗМ РАССЫЛКИ КВИТАНЦИЙ!!!
		// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ДополнитьСтруктуруРезультатовОтчетаДаннымиПоКвитанциям(РезультатыФормированияОтчета, ПараметрыОтчета.ДанныеПоКвитанциям);
		// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
		
		ПоместитьВоВременноеХранилище(РезультатыФормированияОтчета, АдресХранилища);
		
	Иначе
		ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные и выводит на печать квитанцию.
//
// Параметры:
//  СтруктураОбщихТаблиц - Структура - структура с общими таблицами;
//  ЛицевойСчет          - СправочникСсылка.КВП_ЛицевыеСчета - текущий лицевой счет;
//  ДокументРезультат    - ТабличныйДокумент - основной табличный документ;
//  тмДокумент           - ТабличныйДокумент - дополнительный табличный документ;
//  ЭтоПервая            - Булево - признак того, что текущая квитанция является первой печатаемой.
//
Процедура СформироватьТекущуюКвитанцию(СтруктураОбщихТаблиц, ЛицевойСчет, тмДокумент, ДокументРезультат, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, КвитанцияНаКР = Ложь)
	
	Если Не ПараметрыОтчета.Свойство("МассивСтраниц_ОднаКвитанцияНаСтранице") Тогда
		ПараметрыОтчета.Вставить("МассивСтраниц_ОднаКвитанцияНаСтранице", Новый Массив);
	КонецЕсли;
	
	Если Не ПараметрыОтчета.Свойство("МассивСтраниц_ДвеКвитанцияНаСтранице") Тогда
		ПараметрыОтчета.Вставить("МассивСтраниц_ДвеКвитанцияНаСтранице", Новый Массив);
	КонецЕсли;
	
	тмДокумент.Очистить();
	
	// Добавляем в общие данные признак формирования квитанции на кап.ремонт.
	ОбщиеДанные.Вставить("КвитанцияНаКР", КвитанцияНаКР);
	
	// Подготавливаем структуру с таблицами по текущему объекту отчета.
	ТекущиеДанные = ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ЛицевойСчет, ПараметрыОтчета);
	
	Если НЕ ПараметрыОтчета.НеПечататьНулевыеКвитанции ИЛИ НЕ ТекущаяКвитанцияНулевая(ТекущиеДанные, ПараметрыОтчета.ВыводитьНачальноеСальдо) Тогда
		
		Попытка
			
			Выполнить("СформироватьФорма" + ПараметрыОтчета.Форма + "(ЛицевойСчет, тмДокумент, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные);");
			
		Исключение
			
			Если УПЖКХ_ОбщегоНазначенияСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Отчет.УПЖКХ_КвитанцииИзвещения", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНаименованиеМакетаПоФормеКвитанции(ПараметрыОтчета.Форма)) Тогда
				ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось сформировать квитанцию. Возможно, ошибка связана с использованием измененного макета квитанции. Рекомендуем ознакомиться с <div>инструкцией<ref>https://vgkh.ru/faq/faq_tsj_3_0/oshibka_formirovaniya_kvitancii/<div>.", ОписаниеОшибки());
			Иначе
				ВызватьИсключение ОписаниеОшибки();
			КонецЕсли;
			
		КонецПопытки;
		
		// Проверяем, подходит ли квитанция для вывода по итоговой сумме к оплате.
		Если ПараметрыОтчета.Свойство("ОтборКвитанций") Тогда
			
			ОтборКвитанций = ПараметрыОтчета.ОтборКвитанций;
			
			Если ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьКвитанцииСИтоговойСуммойВИнтервале Тогда
				
				СуммаКОплате = ОбщиеДанные.ВсегоКОплате;
				ГраницаОтбораИтоговойСуммыОт = ПараметрыОтчета.ГраницаОтбораИтоговойСуммыОт;
				ГраницаОтбораИтоговойСуммыДо = ПараметрыОтчета.ГраницаОтбораИтоговойСуммыДо;
				
				Если ТипЗнч(ГраницаОтбораИтоговойСуммыОт) = Тип("Число") И СуммаКОплате < ГраницаОтбораИтоговойСуммыОт
				 ИЛИ ТипЗнч(ГраницаОтбораИтоговойСуммыДо) = Тип("Число") И СуммаКОплате > ГраницаОтбораИтоговойСуммыДо Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверяем, есть ли в макете штрихкоды, отличные от стандартных, и заполняем их.
		СформироватьДопШтрихкоды(тмДокумент, ПараметрыОтчета, ОбщиеДанные);
		
		// Для квитанции "05" проверяем необходимость вывода 2-х квитанций на лист.
		// Если такая необходимости есть, то докмент-результат заполним позже.
		Если ПараметрыОтчета.Форма = "05" И Не ПараметрыОтчета.ВыводитьПоОднойКвитанции Тогда
			ЗаполнитьМассивыКвитанцийПриФормированииДвухКвитанцийНаЛист("ПФ_MXL_Макет_05", тмДокумент, ПараметрыОтчета);
		Иначе
			ВывестиТекущуюКвитанцию(ДокументРезультат, тмДокумент, ЭтоПервая, ПараметрыОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекущуюКвитанцию()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма01(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца "
							+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,Пени,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.Пени                      = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;
	
	// ИЗВЕЩЕНИЕ
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	тмДокумент = Новый ТабличныйДокумент();
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);
	
	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// СЧЕТЧИКИ.
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=-; ЧГ=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультат.Присоединить(ОбластьШапка);
	
	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = 
															  Формат(ТаблицаСчетчиков.Получить(0).ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	// НАЧИСЛЕНИЯ
	
	ПриставкаОбласти = "БезЛьгот";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти, ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено", ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",   ИтоговоеКОплате + ПениНачислено);
	СтруктураИтогов.Вставить("Льгота",    ИтоговаяЛьгота);
	
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(Область);
	
	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты                   = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты                    = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
		Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
			
			Область = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма01()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма02(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах             = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков            = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления           = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно       = ТекущиеДанные.ДанныеОСубсидиях;
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	ПредыдущиеДанные            = ТекущиеДанные.ПредыдущиеДанные;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ОбщиеДанные.Вставить("НачалоМесяца", "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ПериодМесяца", "" + ПредложныйПадежМесяца(ПараметрыОтчета.ПериодПросмотра) + " " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='yyyy'") + " г.");
	
	Если ПредыдущиеДанные.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ОплаченоЗаМесяц", ПредыдущиеДанные[0].ОплаченоЗаМесяц);
	Иначе
		ОбщиеДанные.Вставить("ОплаченоЗаМесяц", "");
	КонецЕсли;
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	ОбщиеДанные.Вставить("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
	
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = ?(НачальноеСальдо > 0, "задолженность", "переплата") + " на начало месяца "
							+ Формат(АбсРазмерСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	ОбщиеДанные.Вставить("КоличествоЧеловек",     СтруктОписание.КоличествоЗарегистрированных);
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	
	ОбщиеДанные.Вставить("КОплатеЗаМесяц", ВсегоКОплате);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ДанныеОЛьготах,НачалоМесяца,КОплатеНаНачалоМесяца,Пени,КОплатеЗаМесяц,КОплате,Льгота,Начислено,Перерасчет");
	СтруктураПараметровМакета.ДанныеОЛьготах        = СтруктОписание.ДанныеОЛьготах;
	СтруктураПараметровМакета.НачалоМесяца          = "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.";
	Если ПредыдущиеДанные.Количество() > 0 Тогда
		СтруктураПараметровМакета.КОплатеНаНачалоМесяца = ПредыдущиеДанные[0].КОплатеНаНачалоМесяца;
	КонецЕсли;
	СтруктураПараметровМакета.Пени                  = ПениНачислено;
	СтруктураПараметровМакета.КОплатеЗаМесяц        = ОбщиеДанные.КОплатеЗаМесяц;
	СтруктураПараметровМакета.КОплате               = ИтоговоеКОплате + ПениНачислено;
	СтруктураПараметровМакета.Льгота                = ИтоговаяЛьгота;
	СтруктураПараметровМакета.Начислено             = ИтоговоеНачисление;
	СтруктураПараметровМакета.Перерасчет            = ИтоговыйПерерасчет;
	
	// ИЗВЕЩЕНИЕ
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	
	Если ПараметрыОтчета.ВидШК = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаОдномерныйШК");
		УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQRШК");
		УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
	
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			ТекСтрокаПараметры = Новый Структура("Тариф");
			ТекСтрокаПараметры.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаСчетчика.Услуга,
																	Объект);
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если Не ПустаяСтрока(СтруктОписание.ДанныеОЛьготах) Тогда
		Область = Макет.ПолучитьОбласть("ДанныеОЛьготах");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка2");
	ДокументРезультат.Вывести(Область);
	
	// НАЧАЛЬНОЕ САЛЬДО
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("НачальноеСальдоШапка");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("ОплаченоШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, "", ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
	
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			ТекСтрокаПараметры = Новый Структура("Тариф");
			ТекСтрокаПараметры.Тариф = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация, 
																	СтрокаСчетчика.Услуга,
																	Объект);
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	// ПОДВАЛ
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма03(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
		НачСальдо = Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0,00");
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ПредПредыдущееПоказаниеПериод,НачСальдо,Пени,СуммаОплаты,СуммаКОплате");
	СтруктураПараметровМакета.ПредПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.НачСальдо                     = НачСальдо;
	СтруктураПараметровМакета.Пени                          = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты                   = ВнесеноОплат;
	СтруктураПараметровМакета.СуммаКОплате                  = Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0,00");

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);

	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	Если Не НачСальдо = Неопределено И Не ПустаяСтрока(НачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("НачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, "", ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено", ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",   ИтоговоеКОплате + ПениНачислено);
	СтруктураИтогов.Вставить("Льгота",    ИтоговаяЛьгота);

	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(Область);

	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты  = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
		Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
			
			Область = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("РазделительКвитанций");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма03()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма04(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ТекущиеДанные.ДанныеОЗависимыхУслугах;
	КонецЕсли;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца "
		    	+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,Пени,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.Пени                      = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;
	
	// ИЗВЕЩЕНИЕ
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	тмДокумент = Новый ТабличныйДокумент();
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);
	
	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультат.Присоединить(ОбластьШапка);
	
	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		
		// Ищем максимальную дату последних учтенных показаний.
		ЭтоПервый = Истина;
		
		Для каждого ТекСтрока из ТаблицаСчетчиков Цикл
			Если ЭтоПервый Тогда
				МаксДата  = ТекСтрока.ПредыдущееПоказаниеПериод;
				ЭтоПервый = Ложь;
			Иначе
				ТекДата = ТекСтрока.ПредыдущееПоказаниеПериод;
				Если ТекДата > МаксДата Тогда
					МаксДата = ТекДата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Формат(МаксДата, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				СписокФорматируемыхПараметров.Очистить();
				СписокФорматируемыхПараметров.Добавить("РасходДн");
				СписокФорматируемыхПараметров.Добавить("РасходНч");
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);

	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	ПриставкаОбласти = "БезЛьгот";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);
	
	// Выводим начисления в соответствии с возможностями свертки и детализации текущей квитанции.
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти, ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено", ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",   ИтоговоеКОплате + ПениНачислено);
	СтруктураИтогов.Вставить("Льгота",    ИтоговаяЛьгота);

	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(Область);

	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты  = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
		Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
			
			Область = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма04()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма05(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)

	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговоеПени        = ТаблицаНачисления.Итог("Пени");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате;
	
	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");

	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо          = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца: " + Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление + ИтоговыйПерерасчет);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);
	
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;
	
	// ИЗВЕЩЕНИЕ
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	
	Если ПараметрыОтчета.ВидШК = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQR");
		УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);
	
	Если ПараметрыОтчета.ВидШК = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
		УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияБезШК");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// СЧЕТЧИКИ.
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
	
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	КонецЕсли;

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ

	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		
		// Ищем максимальную дату последних учтенных показаний
		ЭтоПервый = Истина;
		
		Для каждого ТекСтрока из ТаблицаСчетчиков Цикл
			Если ЭтоПервый Тогда
				МаксДата  = ТекСтрока.ПредыдущееПоказаниеПериод;
				ЭтоПервый = Ложь;
			Иначе
				ТекДата = ТекСтрока.ПредыдущееПоказаниеПериод;
				Если ТекДата > МаксДата Тогда
					МаксДата = ТекДата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Формат(МаксДата, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);

	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ
	
	ПриставкаОбласти = ?(ПараметрыОтчета.ВыводитьЛьготы, "", "БезЛьгот");
	Область          = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти, ТаблицаЛьготСправочно);
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено",  ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",    ИтоговоеКОплате);
	СтруктураИтогов.Вставить("Льгота",     ИтоговаяЛьгота);
	СтруктураИтогов.Вставить("Пени",       ИтоговоеПени);
	СтруктураИтогов.Вставить("Перерасчет", ИтоговыйПерерасчет);
	
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтруктураИтогов);
	
	ДокументРезультат.Вывести(Область);
	
	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты  = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
		Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
			
			Область = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма05()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма06(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено      = ТекущиеДанные.ДанныеОПени;
	СтруктураНачСальдо = ТекущиеДанные.ДанныеОНачСальдо;
	ПредыдущиеДанные   = ТекущиеДанные.ПредыдущиеДанные;
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ТекущиеДанные.ДанныеОЗависимыхУслугах;
	КонецЕсли;
	
	// (1) Сбор информации.
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ОбщиеДанные.Вставить("НачалоМесяца", "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ПериодМесяца", "" + ПредложныйПадежМесяца(ПараметрыОтчета.ПериодПросмотра) + " " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='yyyy'") + " г.");
	
	Если ПредыдущиеДанные.Количество() > 0 Тогда
		СтрокаПредыдущихДанных = ПредыдущиеДанные[0];
		// Структура с информацией о предыдущем начислении и оплате.
		Если НЕ СтрокаПредыдущихДанных.КОплатеНаНачалоМесяца < 0 Тогда
			ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", СтрокаПредыдущихДанных.КОплатеНаНачалоМесяца);
			ОбщиеДанные.Вставить("Переплата", 0);
		Иначе
			ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", 0);
			ОбщиеДанные.Вставить("Переплата", (СтрокаПредыдущихДанных.КОплатеНаНачалоМесяца)*(-1));
		КонецЕсли;
		// Нигде не используется!
		ОбщиеДанные.Вставить("ОплаченоЗаМесяц", СтрокаПредыдущихДанных.ОплаченоЗаМесяц);
	Иначе
		ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", 0);
		ОбщиеДанные.Вставить("Переплата", 0);
	КонецЕсли;
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	Если ПараметрыОтчета.ПараметрыУП.НеУчитыватьЛьготыВоВзаиморасчетах Тогда
		ИтоговаяЛьгота = ТаблицаЛьготСправочно.Итог("Льгота");
	Иначе
		ИтоговаяЛьгота = ТаблицаНачисления.Итог("Льгота");
	КонецЕсли;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоКОплате, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");

	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = ?(НачальноеСальдо > 0, "задолженность", "переплата") + " на начало месяца "
		                  + Формат(АбсРазмерСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ИтоговоеНачисление + ИтоговыйПерерасчет);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	ОбщиеДанные.Вставить("КоличествоЧеловек",     СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		ПроцентБанка = ПараметрыОтчета.ПроцентЗаУслугиБанка;
	Иначе
		ПроцентБанка = 0;
	КонецЕсли;
	ОбщиеДанные.Вставить("ПроцентБанка", ПроцентБанка);
	
	СуммаПроцентовБанка = ВсегоКОплате * ПроцентБанка / 100;
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		ВсегоКОплате = ВсегоКОплате + СуммаПроцентовБанка;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("КОплатеЗаМесяц", ВсегоКОплате);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ДанныеОЛьготах,СуммаПроцентовБанка,Пени,Начислено,Перерасчет,Льгота,КОплате");
	СтруктураПараметровМакета.ДанныеОЛьготах      = Неопределено;
	СтруктураПараметровМакета.СуммаПроцентовБанка = СуммаПроцентовБанка;
	СтруктураПараметровМакета.Пени                = ПениНачислено;
	СтруктураПараметровМакета.Начислено           = ИтоговоеНачисление;
	СтруктураПараметровМакета.Перерасчет          = ИтоговыйПерерасчет;
	СтруктураПараметровМакета.Льгота              = ИтоговаяЛьгота;
	СтруктураПараметровМакета.КОплате             = ИтоговоеКОплате;
	
	// ИЗВЕЩЕНИЕ
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
			Область = Макет.ПолучитьОбласть("РазмерПроцентаБанка");
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если Не ПустаяСтрока(СтруктОписание.ДанныеОЛьготах) Тогда
		Область = Макет.ПолучитьОбласть("ДанныеОЛьготах");
		СтруктураПараметровМакета.ДанныеОЛьготах = СтруктОписание.ДанныеОЛьготах;
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка2");
	ДокументРезультат.Вывести(Область);
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("НачисленияЗаголовок");
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Присоединить(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, "", ТаблицаЛьготСправочно);
	
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		Область = Макет.ПолучитьОбласть("НачисленияПодвал1");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
	Иначе
		Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	КонецЕсли;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// СЧЕТЧИКИ
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
			Область = Макет.ПолучитьОбласть("РазмерПроцентаБанка");
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	// ПОДВАЛ
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма07(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	ДанныеПоЛьготам             = ТекущиеДанные.ДанныеПоЛьготам;
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ТекущиеДанные.ДанныеОЗависимыхУслугах;
	КонецЕсли;
	
	// (1) Сбор информации.
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	ОбщиеДанные.Вставить("СуммаОплатыДобровольногоСтрахования", СуммаОплатыДобровольногоСтрахования);
	
	ОбщиеДанные.Вставить("АдресПолучателя", "Адрес: " + УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(ОбщиеДанные.СведенияОбОрганизации, "ЮридическийАдрес,"));
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ='dd MMMM yyyy'"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	// Удаляем те услуги, по которым уже внесены показания.
	врТаблицаСчетчиков = ТаблицаСчетчиков.Скопировать();
	ВсегоСтрок = ТаблицаСчетчиков.Количество();
	Для ОбратныйИндекс = 1 По ВсегоСтрок Цикл
		СтрокаСчетч = ТаблицаСчетчиков.Получить(ВсегоСтрок - ОбратныйИндекс);
		Если (СтрокаСчетч.РасходДн > 0 ИЛИ СтрокаСчетч.РасходНч > 0)
		   И НачалоМесяца(СтрокаСчетч.ПредыдущееПоказаниеПериод) = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) Тогда
			ТаблицаСчетчиков.Удалить(СтрокаСчетч);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьСчетчики = (ТаблицаСчетчиков.Количество() > 0);
	
	ИтоговоеНачисление      = ТаблицаНачисления.Итог("Начислено");
	ИтоговыйПерерасчет      = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате         = ТаблицаНачисления.Итог("КОплате");
	ИтоговоеНачальноеСальдо = ТаблицаНачисления.Итог("НачальноеСальдо");
	ИтоговаяОплата          = ТаблицаНачисления.Итог("Оплата");
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	Если ПараметрыОтчета.СуммаОплаты > 0 И ВсегоКОплате > 0 Тогда
		НоваяСумма = 0;
		Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
			СтрокаНачисления.КОплате = СтрокаНачисления.КОплате * ПараметрыОтчета.СуммаОплаты / ВсегоКОплате;
		КонецЦикла;
		ВсегоКОплате = ПараметрыОтчета.СуммаОплаты;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  ИтоговоеНачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление + ИтоговыйПерерасчет);
	
	// Если сумма оплаты отрицательная и нет необходимости выводить отрицательную сумму к оплате, то выводим ноль.
	Если ВсегоКОплате < 0 И НЕ ПараметрыОтчета.ВыводитьОтрицательнуюСуммуКОплате Тогда
		ВсегоКОплате = 0;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ВсегоКОплате", ВсегоКОплате);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	СтруктОписание.Вставить("КоличествоЧеловек", СтруктОписание.КоличествоПроживающих);
	КоличествоПроживающих = "Зарегистрировано: " + СтруктОписание.КоличествоЗарегистрированных + "; "
						  + "временно отсутствует: " + СтруктОписание.ВременноОтсутствующих + "; "
						  + "временно проживает: " + СтруктОписание.ВременноПроживающих;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("КоличествоПроживающих", КоличествоПроживающих);
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               ОбщиеДанные.ТелефонЛС);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("Пени");
	СтруктураПараметровМакета.Пени = ПениНачислено;
	
	// ИЗВЕЩЕНИЕ
	
	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, врТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(ОбластьМакета, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
	
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ЕстьСчетчики Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыПоСчетчикам");
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыОбщие");
	ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, ВсегоКОплате, СтруктураПараметровМакета);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// КВИТАНЦИЯ
	
	ОбластьМакета = Макет.ПолучитьОбласть("КвитанцияШапка");
	ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ЕстьСчетчики Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыПоСчетчикам");
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыОбщие");
	ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, ВсегоКОплате, СтруктураПараметровМакета);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	ОбластьМакета.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// НАЧИСЛЕНИЯ
	
	ОбластьМакета = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, "", ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	ИтоговоеКОплате = ВсегоКОплате;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено",       ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",         ИтоговоеКОплате);
	СтруктураИтогов.Вставить("Перерасчет",      ИтоговыйПерерасчет);
	СтруктураИтогов.Вставить("НачальноеСальдо", ИтоговоеНачальноеСальдо);
	СтруктураИтогов.Вставить("Оплата",          ИтоговаяОплата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("НачисленияПодвал");
	ОбластьМакета.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
		ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	Если СуммаОплатыДобровольногоСтрахования > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьВнесеноОплатНаДобровольноеСтрахование");
		ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков, Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка());
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиШапка");
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиСтрока");
			ОбластьМакета.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(ОбластьМакета, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(ОбластьМакета);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиСтрока");
				ОбластьМакета.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(ОбластьМакета, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПОДВАЛ
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// ПРИМЕЧАНИЕ
	
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	// ЛЬГОТЫ
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСведений");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛьгот");
	ДокументРезультат.Вывести(ОбластьМакета);
	ПерваяСтрока = ДокументРезультат.ВысотаТаблицы;
	
	Для Каждого СтрокаЛьготника ИЗ ДанныеПоЛьготам Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЛьгот");
		ОбластьМакета.Параметры.Заполнить(СтрокаЛьготника);
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение = &Квартира) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	Собственник";
	
	Запрос.УстановитьПараметр("Квартира", ОбщиеДанные.Помещение);
	Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	СведенияОСобственниках = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОСобственниках  = СведенияОСобственниках 
								+ ?(ПустаяСтрока(СведенияОСобственниках), "", Символы.ПС) 
								+ Выборка.Собственник;
	КонецЦикла;
	
	ПоследняяСтрока      = ДокументРезультат.ВысотаТаблицы;
	ОбластьСобственников = ДокументРезультат.Область(ПерваяСтрока, 23, ПоследняяСтрока, 35);
	ОбластьСобственников.Объединить();
	ОбластьСобственников.Текст = СведенияОСобственниках;
	
КонецПроцедуры // СформироватьФорма07()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма08(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	СформироватьФорма01(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма09(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	Если ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("ПериодОплаты", 
							 "период :" + Формат(ПараметрыОтчета.ДатаС, "ДФ='MMMM yyyy'") 
							 			+ " г. - " 
										+ Формат(ПараметрыОтчета.ДатаПо,"ДФ='MMMM yyyy'")
										+ " г.");
		ОбщиеДанные.Вставить("СрокОплаты", "");
	КонецЕсли;
	
	ПериодПени       = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	МесяцСтрокойПени = НРег(Формат(ПериодПени, "ДФ=MMMM"));
	ГодПени          = Формат(Год(ПериодПени),"ЧГ=0");
	
	ОбщиеДанные.Вставить("ПериодПени", "за " + МесяцСтрокойПени + " " + ГодПени);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ЧислоДолгаСтрока) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) + ((ПараметрыОтчета.ЧислоДолгаСтрока - 1) * 60 * 60* 24);
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтчета.ПериодДолга) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Пени", Формат(ПениНачислено, "ЧДЦ=2; ЧН=-"));
	
	// Создание и заполнение строки итогов.
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговаяЛьгота      = ТаблицаНачисления.Итог("Льгота");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	ВсегоНачислено = ИтоговоеНачисление - ИтоговаяЛьгота + ИтоговыйПерерасчет + ПениНачислено;
	
	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ПериодПросмотра = ПараметрыОтчета.ПериодДолга;
	
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	// Обработка начального сальдо
	НачальноеСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
	
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		НачальноеСальдо = НачальноеСальдо - ПениНачислено;
	
		НачальноеСальдоСправочно = НачальноеСальдо;
			
		ДатаСтрокиПредупреждения = Формат(ПараметрыОтчета.ПериодДолга, "ДФ=dd.MM.yyyy");
			Для Каждого Стр Из ДанныеОбОплатах Цикл
				Если Стр.Период < ПараметрыОтчета.ПериодДолга Тогда
					НачальноеСальдоСправочно = НачальноеСальдоСправочно - Стр.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			Если НачальноеСальдо > 0 Тогда
				СтрокаНачСальдо = "Ваша задолженность на " + Формат((НачалоМесяца(ПериодПросмотра) - 1), "ДЛФ=Д") + ": "
							+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
			Иначе
				СтрокаНачСальдо = "";
			КонецЕсли;
		КонецЕсли;
	
		ОбщиеДанные.Вставить("СтрокаНачСальдо", СтрокаНачСальдо);
		Если ПараметрыОтчета.ЗаПериод Тогда
			ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
		Иначе
			Если НачальноеСальдоСправочно = 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
			ИначеЕсли НачальноеСальдоСправочно < 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", 
								 "Переплата на " + ДатаСтрокиПредупреждения
								 				 + "  " 
												 +Формат(-1 * НачальноеСальдоСправочно, "ЧДЦ=2") 
												 + ". Благодарим за своевременную оплату счетов!");
			Иначе
				ОбщиеДанные.Вставить("СтрокаПредупреждения", 
								 "Напоминаем, что на "  + ДатаСтрокиПредупреждения
														+ " вы не заплатили "
														+ Формат(НачальноеСальдоСправочно, "ЧДЦ=2") 
														+ " за предыдущий период");
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		ДатаСтрокиПредупреждения = Формат(НачалоМесяца(ПериодПросмотра), "ДФ=dd.MM.yyyy");
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",       Окр(ВсегоКОплате, 2));
	ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(ИтоговоеКОплате, "ЧДЦ=2; ЧН=-"));
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", ?(ПараметрыОтчета.ВыводитьКоличествоПроживающих, "Кол-во прожив: " + СтруктОписание.КоличествоПроживающих, ""));
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	// ИЗВЕЩЕНИЕ
	
	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQR");
	КонецЕсли;
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ДокументРезультат.Вывести(Область);
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	ДокументРезультат.Вывести(Область);
	
	// ШАПКА КВИТАНЦИИ
	
	тмДокумент = Новый ТабличныйДокумент;
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		
		Область = Макет.ПолучитьОбласть("СтрокаПредупреждения");
		Область.Параметры.Заполнить(ОбщиеДанные);
		тмДокумент.Вывести(Область);
	
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияИнф");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	
	тмДокумент.Очистить();
	
	//КОРЕШОК
	
	Область = Макет.ПолучитьОбласть("КорешокШапка");
	тмДокумент.Вывести(Область);
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Если ПараметрыОтчета.ВсегдаВыводитьПоказанияСчетчиков Тогда
			Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
				Область = Макет.ПолучитьОбласть("КорешокСчетчик");
				ТекСтрокаПараметры = Новый Структура("Абонент");
				ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмДокумент.Вывести(Область);
				тмПоказания = Новый ТабличныйДокумент;
				Область = Макет.ПолучитьОбласть("КорешокПоказания");
				СтрокаПоказаний = "";
				СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата) + "-"
												  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата) + "="
												  + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеНч) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата) + "-"
													  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата) + "="
													  + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеПк) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата) + "-"
													  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата) + "="
													  + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				ТекСтрокаПараметры.Вставить("СтрокаПоказаний", СтрокаПоказаний);
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмПоказания.Вывести(Область);
				тмДокумент.Присоединить(тмПоказания);
			КонецЦикла;
			
		Иначе
			Если ТаблицаСчетчиков.Итог("РасходДн") <> 0 Или ТаблицаСчетчиков.Итог("РасходНч") <> 0 Или ТаблицаСчетчиков.Итог("РасходПк") <> 0 Тогда
				 Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
				 	Область = Макет.ПолучитьОбласть("КорешокСчетчик");
					ТекСтрокаПараметры = Новый Структура("Абонент");
					ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмДокумент.Вывести(Область);
					тмПоказания = Новый ТабличныйДокумент;
					Область = Макет.ПолучитьОбласть("КорешокПоказания");
					СтрокаПоказаний = "";
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходДн) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходНч) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходПк) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					ТекСтрокаПараметры.Вставить("СтрокаПоказаний", СтрокаПоказаний);
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмПоказания.Вывести(Область);
					тмДокумент.Присоединить(тмПоказания);
				 КонецЦикла;
			 КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КорешокПодвал");
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	ДокументРезультат.Вывести(Область);
	
	тмДокумент.Очистить();
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	тмДокумент.Вывести(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	
	// Заполним недостающие данные.
	Для Каждого СтрокаТаблицы Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) Тогда
			Если СтрокаТаблицы.Тариф = 0 Тогда
				СтрокаТаблицы.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаТаблицы.Услуга,
																	Объект, ?(ЗначениеЗаполнено(СтрокаТаблицы.ВидТарифа), СтрокаТаблицы.ВидТарифа, Неопределено));
			КонецЕсли;
			СтрокаТаблицы.Тариф = ОКР(СтрокаТаблицы.Тариф, 4);
		КонецЕсли;
	КонецЦикла;
	
	// Сворачиваем и сортируем таблицу начислений.
	ТаблицаСНачислениями = ОбработатьТаблицуНачислений(ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно);
	
	ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаСНачислениями, ТаблицаСчетчиков);
	
	ТаблицаСНачислениями.Колонки.КОплате.Имя    = "НачисленоИтог";
	ТаблицаСНачислениями.Колонки.Количество.Имя = "НормаПоказания";
	
	//////////////////////////////////////////////////////////////////////////
	
	ТаблицаПрочие       = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.ОбщийСписокУслуг.ВыгрузитьКолонку("ВидУслуги"));
	ТаблицаКоммунальные = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.УслугиКоммунальные.ВыгрузитьКолонку("ВидУслуги"));
	ТаблицаСодержание   = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.УслугиСодержанияРемонта.ВыгрузитьКолонку("ВидУслуги"));
	
	//////////////////////////////////////////////////////////////////////////
	
	тмДокумент.Очистить();
	тмДокумент1 = Новый ТабличныйДокумент;
	
	КоличетвоВыводимыхГрупп = 0;
	Если НЕ ТаблицаПрочие.Количество() = 0 Тогда
		КоличетвоВыводимыхГрупп = КоличетвоВыводимыхГрупп + 1;
	КонецЕсли;
	Если НЕ ТаблицаКоммунальные.Количество() = 0 Тогда
		КоличетвоВыводимыхГрупп = КоличетвоВыводимыхГрупп + 1;
	КонецЕсли;
	Если НЕ ТаблицаСодержание.Количество() = 0 Тогда
		КоличетвоВыводимыхГрупп = КоличетвоВыводимыхГрупп + 1;
	КонецЕсли;
	КоличетвоВыводимыхГрупп = ?(КоличетвоВыводимыхГрупп = 1, 0, КоличетвоВыводимыхГрупп);
	
	МаксКоличествоСтрок = Макс(ПараметрыОтчета.КоличествоСтрокТаблицыНачислений, Окр((ТаблицаСНачислениями.Количество() + КоличетвоВыводимыхГрупп) / 2));
	
	Сч = 0;
	
	КоличествоПустыхСтрокВыводаВЛевойЧасти = МаксКоличествоСтрок - ТаблицаСНачислениями.Количество() - КоличетвоВыводимыхГрупп;
	КоличествоПустыхСтрокВыводаВЛевойЧасти = ?(КоличествоПустыхСтрокВыводаВЛевойЧасти < 0, 0, КоличествоПустыхСтрокВыводаВЛевойЧасти);
	
	КоличествоПустыхСтрокВыводаВПравойЧасти = ТаблицаСНачислениями.Количество() + КоличетвоВыводимыхГрупп - МаксКоличествоСтрок;
	КоличествоПустыхСтрокВыводаВПравойЧасти = ?(КоличествоПустыхСтрокВыводаВПравойЧасти < 0, 0, КоличествоПустыхСтрокВыводаВПравойЧасти);
	КоличествоПустыхСтрокВыводаВПравойЧасти = МаксКоличествоСтрок - КоличествоПустыхСтрокВыводаВПравойЧасти;
	
	Если ТаблицаСодержание.Количество() > 0 Тогда
		ВывестиСтрокиТаблицыНачисленийФорма9(тмДокумент, тмДокумент1, Макет, "СОДЕРЖАНИЕ И РЕМОНТ ЖИЛОГО ПОМЕЩЕНИЯ", ТаблицаСодержание, ПараметрыОтчета, КоличетвоВыводимыхГрупп, МаксКоличествоСтрок, Сч);
	КонецЕсли;
	
	Если ТаблицаКоммунальные.Количество() > 0 Тогда
		ВывестиСтрокиТаблицыНачисленийФорма9(тмДокумент, тмДокумент1, Макет, "КОММУНАЛЬНЫЕ УСЛУГИ", ТаблицаКоммунальные, ПараметрыОтчета, КоличетвоВыводимыхГрупп, МаксКоличествоСтрок, Сч);
	КонецЕсли;
	
	Если ТаблицаПрочие.Количество() > 0 Тогда
		ВывестиСтрокиТаблицыНачисленийФорма9(тмДокумент, тмДокумент1, Макет, "ПРОЧИЕ УСЛУГИ", ТаблицаПрочие, ПараметрыОтчета, КоличетвоВыводимыхГрупп, МаксКоличествоСтрок, Сч);
	КонецЕсли;
	
	Если КоличествоПустыхСтрокВыводаВЛевойЧасти > 0 Тогда
		Сч = 0;
		Пока Сч < КоличествоПустыхСтрокВыводаВЛевойЧасти Цикл
			Область = Макет.ПолучитьОбласть("НачислениеСтрока");
			тмДокумент.Вывести(Область);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если КоличествоПустыхСтрокВыводаВПравойЧасти > 0 Тогда
		Сч = 0;
		Пока Сч < КоличествоПустыхСтрокВыводаВПравойЧасти Цикл
			Область = Макет.ПолучитьОбласть("НачислениеСтрока1");
			тмДокумент1.Вывести(Область);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	ДокументРезультат.Присоединить(тмДокумент1);
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено",     ИтоговоеНачисление);
	СтруктураИтогов.Вставить("НачисленоИтог", ИтоговоеКОплате);
	СтруктураИтогов.Вставить("Льгота",        ИтоговаяЛьгота);
	СтруктураИтогов.Вставить("Перерасчет",    ИтоговыйПерерасчет);
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	ДокументРезультат.Вывести(Область);
	
	тмДокумент.Очистить();
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтруктураИтогов);
	тмДокумент.Вывести(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	
	// ПРИМЕЧАНИЕ
	
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока1");
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ПолеСверху = 5;
	ДокументРезультат.ПолеСправа = 5;
	ДокументРезультат.ПолеСнизу  = 5;
	ДокументРезультат.ПолеСлева  = 5;
	
	// МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	Если ПараметрыОтчета.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте Тогда
		УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ЗаполнитьДанныеПоКвитанциям(ДокументРезультат,
																								 ПараметрыОтчета.ДанныеПоКвитанциям,
																								 ПериодПросмотра,
																								 ОбщиеДанные);
	КонецЕсли;
	// Конец МеханизмРассылкиКвитанцийНаЭлекторонныйЯщики
	
КонецПроцедуры // СформироватьФорма09()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма10(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	НачалоПериода = Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ=dd.MM.yyyy");
	ОбщиеДанные.Вставить("НачалоПериода", НачалоПериода);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("КоличествоЛьготников",  СтруктОписание.КоличествоЛьготников);
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("НачалоПериода", НачалоПериода);
	ПарамИтогКв.Вставить("Пени",          ПениНачислено);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговаяЛьгота      = ТаблицаНачисления.Итог("Льгота");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	ПарамИтогКв.Вставить("Начислено", ИтоговоеНачисление);
	ПарамИтогКв.Вставить("Льгота",    ИтоговаяЛьгота);
	ПарамИтогКв.Вставить("КОплате",   ИтоговоеКОплате);
	
	ВсегоНачислено = ИтоговоеКОплате + ПениНачислено;
	ВсегоКОплате   = ВсегоНачислено;
	
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		ПарамИтогКв.Вставить("НачСальдо", Формат(НачальноеСальдо, "ЧН=0"));
		АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, 0, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, 0, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		СуммаПроцентовБанка = ВсегоКОплате * ПараметрыОтчета.ПроцентЗаУслугиБанка / 100;
		ПарамИтогКв.Вставить("СуммаПроцентовБанка", СуммаПроцентовБанка);
		ВсегоКОплате = ВсегоКОплате + СуммаПроцентовБанка;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ОбщиеДанные.Вставить("ВсегоКОплате", ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоКОплате", ВсегоКОплате);
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	// ИЗВЕЩЕНИЕ
	
	ОбластьИзвещениеШапка = Макет.ПолучитьОбласть("ИзвещениеШапка");
	ДокументРезультат.Вывести(ОбластьИзвещениеШапка);
	
	тмДокумент = Новый ТабличныйДокумент();
	
	ОбластьИзвещение = Макет.ПолучитьОбласть("Извещение");
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	ПараметрыОтчета.Вставить("ВидШК", Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный);
	
	ТекстШК = "";
	КартинкаШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьШтрихкод(Объект, ОбщиеДанные, ПараметрыОтчета, ТекстШК, Ложь);
	ОбщиеДанные.Вставить("ТекстШК", ТекстШК);
	Если ТипЗнч(КартинкаШК) = Тип("Картинка")
		И Не ОбластьИзвещение.Области.Найти("ШтрихКод") = Неопределено Тогда
		ОбластьИзвещение.Области.ШтрихКод.Картинка = КартинкаШК;
		ОбластьИзвещение.Параметры.Заполнить(ОбщиеДанные);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать штрихкод.");
	КонецЕсли;
	
	ПараметрыШК = Новый Структура;
	ПараметрыШК.Вставить("ШК1", Сред(ТекстШК, 1, 5));
	ПараметрыШК.Вставить("ШК2", Сред(ТекстШК, 6, 9));
	ПараметрыШК.Вставить("ШК3", Сред(ТекстШК, 15, 7));
	ПараметрыШК.Вставить("ШК4", Сред(ТекстШК, 22, 4));
	
	ОбластьИзвещение.Параметры.Заполнить(ПараметрыШК);
	
	тмДокумент.Вывести(ОбластьИзвещение);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// КВИТАНЦИЯ
	
	ОбластьКвитанцияШапка = Макет.ПолучитьОбласть("КвитанцияШапка");
	ДокументРезультат.Вывести(ОбластьКвитанцияШапка);
	
	тмДокумент = Новый ТабличныйДокумент();
	
	ОбластьКвитанция = Макет.ПолучитьОбласть("Квитанция");
	ОбластьКвитанция.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьКвитанция);
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	тмДокумент.Вывести(Область);
	
	ВывестиТаблицуНачислений(тмДокумент, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, "", ТаблицаЛьготСправочно);
	
	Область = Макет.ПолучитьОбласть("НачисленияИтого");
	Область.Параметры.Заполнить(ПарамИтогКв);
	тмДокумент.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ПарамИтогКв);
	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	КонецЕсли;
	
	тмДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(ПарамИтогКв);
	тмДокумент.Присоединить(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	
КонецПроцедуры // СформироватьФорма10()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма11(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено      = ТекущиеДанные.ДанныеОПени;
	СтруктураНачСальдо = ТекущиеДанные.ДанныеОНачСальдо;
	ПредыдущиеСведения = ТекущиеДанные.ПредыдущиеСведения;
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ОбщиеДанные.Вставить("МесяцОплаты", НРег(Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM'")));
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("КоличествоПроживающих,КоличествоЛьгот,ОбщаяПлощадь,ОбщаяПлощадьБезДоли,
												|ЖилаяПлощадь,ЖилаяПлощадьБезДоли,ПлЖил,Пени,Долг,СледМесяц");
	СтруктураПараметровМакета.КоличествоПроживающих = СтруктОписание.КоличествоПроживающих;
	СтруктураПараметровМакета.КоличествоЛьгот		= ПолучитьКоличествоЛьгот(Объект, ПараметрыОтчета.ПериодПросмотра);
	СтруктураПараметровМакета.ОбщаяПлощадь			= СтруктОписание.ОбщаяПлощадь;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли	= СтруктОписание.ОбщаяПлощадьБезДоли;
	СтруктураПараметровМакета.ЖилаяПлощадь			= СтруктОписание.ЖилаяПлощадь;
	СтруктураПараметровМакета.ЖилаяПлощадьБезДоли	= СтруктОписание.ЖилаяПлощадьБезДоли;
	СтруктураПараметровМакета.Пени 					= ПениНачислено;
	СтруктураПараметровМакета.Долг 					= Неопределено;
	СтруктураПараметровМакета.СледМесяц				= Неопределено;
	
	// ИЗВЕЩЕНИЕ
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	ПриставкаОбласти = "";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговаяЛьгота      = ТаблицаНачисления.Итог("Льгота");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти, ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	ВсегоКОплате = ИтоговоеКОплате + ПениНачислено;
	
	// Если сумма оплаты отрицательная и нет необходимости выводить отрицательную сумму к оплате, то выводим ноль.
	Если ВсегоКОплате < 0 И НЕ ПараметрыОтчета.ВыводитьОтрицательнуюСуммуКОплате Тогда
		ВсегоКОплате = 0;
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено",  ИтоговоеНачисление);
	СтруктураИтогов.Вставить("КОплате",    ВсегоКОплате);
	СтруктураИтогов.Вставить("Льгота",     ИтоговаяЛьгота);
	СтруктураИтогов.Вставить("Перерасчет", ИтоговыйПерерасчет);
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	ДокументРезультат.Вывести(Область);
	
	Для ном = 0 По 6 Цикл
		НайденнаяСтрокаСведений = ПредыдущиеСведения.Найти(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, ном - 7), "ПериодДанных");
		Если НЕ НайденнаяСтрокаСведений = Неопределено Тогда
			Область = Макет.ПолучитьОбласть("ИзвещениеПодвалСтрока");
			ТекСтрокаПараметры = Новый Структура("КонечноеСальдо,Месяц");
			Если ном = 0 Тогда
				ТекСтрокаПараметры.Месяц          = "пред. долг";
				ТекСтрокаПараметры.КонечноеСальдо = НайденнаяСтрокаСведений.КонечноеСальдо;
			Иначе
				Область.Параметры.Заполнить(НайденнаяСтрокаСведений);
				ТекСтрокаПараметры.Месяц          = Формат(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, ном - 7), "ДФ='MMMM гггг'");
				ТекСтрокаПараметры.КонечноеСальдо = НайденнаяСтрокаСведений.КонечноеСальдо;
			КонецЕсли;
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("Задолженность");
	
	НайденнаяСтрокаСведений = ПредыдущиеСведения.Найти(ПараметрыОтчета.ПериодПросмотра, "ПериодДанных");
	Если НЕ НайденнаяСтрокаСведений = Неопределено Тогда
		СтруктураПараметровМакета.Долг = Формат(НайденнаяСтрокаСведений.КонечноеСальдо, "ЧДЦ=2; ЧН=; ЧГ=");
	Иначе
		СтруктураПараметровМакета.Долг = "0.00";
	КонецЕсли;
	
	СтруктураПараметровМакета.СледМесяц = "" + РодительныйПадежМесяца(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1)) + " " 
										 + Формат(Год(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1)), "ЧГ=") + " г.";
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьОтчет()

// Формирует отчет по объекту / группе объектов.
//
Процедура СформироватьОтчетФорма12(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ОбъектОтчета) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Объект не указан.");
		Возврат;
	КонецЕсли;
	
	Попытка
		мНастройкиУчетнойПолитикиТСЖотказ = Ложь;
		мНастройкиУчетнойПолитикиТСЖ      = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), 
																											 ПараметрыОтчета.Организация, мНастройкиУчетнойПолитикиТСЖотказ);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки Учетной политики (ЖКХ). Пожалуйста, проверьте, корректно ли заданы настройки Учетной политики (ЖКХ).", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПараметрыОтчета.Вставить("ПараметрыУП",      мНастройкиУчетнойПолитикиТСЖ);
	ПараметрыОтчета.Вставить("ПараметрыУПОтказ", мНастройкиУчетнойПолитикиТСЖОтказ);
	
	Попытка
		мНастройкиФормированияПДЖКХотказ = Ложь;
		мНастройкиФормированияПДЖКХ      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ПараметрыОтчета.Организация,
																										  мНастройкиФормированияПДЖКХотказ);
	Исключение
		ВызватьИсключение УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>не удалось получить настройки формирования квитанции. Пожалуйста, проверьте, корректно ли заданы настройки формирования квитанций.", ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ПараметрыОтчета.Вставить("ПараметрыФормированияПД",      мНастройкиФормированияПДЖКХ);
	ПараметрыОтчета.Вставить("ПараметрыФормированияПДОтказ", мНастройкиФормированияПДЖКХОтказ);
	
	Если мНастройкиУчетнойПолитикиТСЖотказ = Ложь Тогда
		ДатаОплатыУслуг = мНастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа;
	Иначе
		ДатаОплатыУслуг = 10;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ВидШК",                     ?(мНастройкиФормированияПДЖКХОтказ, Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный, мНастройкиФормированияПДЖКХ.ВидШтрихкода));
	ПараметрыОтчета.Вставить("ДатаОплатыУслуг",           ДатаОплатыУслуг);
	ПараметрыОтчета.Вставить("мТочностьОбъемаНачислений", Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить());
	ПараметрыОтчета.Вставить("ЛьготыСправочно",           ?(мНастройкиУчетнойПолитикиТСЖотказ, Ложь, мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах));
	ПараметрыОтчета.Вставить("ВидМакета", "");
	
	// Структура с параметрами для заголовков извещения и квитанции.
	ОбщиеДанные = Новый Структура();
	
	// Не используется в квитанциях. Заглушка.
	ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонтаОтличаетсяОтОсновного", Ложь);
	ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоУслугамКапРемонта", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ИсполнительРасчетов) Тогда
		
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного", Истина);
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам", ПараметрыОтчета.ИсполнительРасчетов.ОсновнойБанковскийСчет);
		
	Иначе
		
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного", Ложь);
		ПараметрыОтчета.Вставить("РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам", Справочники.БанковскиеСчета.ПустаяСсылка());
		
	КонецЕсли;
	
	// Записываем в структуру сведения об основной организации и об исполнителе расчетов.
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьСведенияОбОрганизациях(ОбщиеДанные, ПараметрыОтчета);
	
	ОбщиеДанные.Вставить("ПериодОплаты",     "" + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ДатаФормирования", "от " + Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=dd.MM.yy"));
	
	ОбщиеДанные.Вставить("МесяцДобровольногоСтрахования", Формат(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1), "ДФ='MMMM yyyy'") + " г.");
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ОбщиеДанные.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплатыДата", Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	ОбщиеДанные.Вставить("СрокОплаты",     "Оплатить до " + ОбщиеДанные.СрокОплатыДата + " г.");
	
	// Таблица с р/с фонда кап. ремонта по зданиям.
	ПараметрыОтчета.Вставить("ТаблицаРСЗданий",    УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(ПараметрыОтчета, Ложь));
	ПараметрыОтчета.Вставить("ТаблицаРСКапРемонт", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовОрганизацийОбсуживающихЗдания(ПараметрыОтчета, Истина));
	
	ПараметрыОтчета.Вставить("ТаблицаВладельцев", УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуВладельцевЛицевыхСчетов(ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.СписокЛицевыхСчетов));
	
	// Подготавливаем структуру с таблицами данных о начислениях, оплатах, пени и т.д. по всем л/с.
	СтруктураОбщихТаблиц = ПолучитьСтруктуруОбщихТаблиц(ПараметрыОтчета);
	
	Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
		Если НЕ ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "единая квитанция на осн. услуги и кап. ремонт" Тогда
			Если ПараметрыОтчета.ПечататьКвитанциюКапРемонт Тогда
				Если ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
					СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.ТекущийСписокУслуг);
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.СписокУслугКапРемонт);
				Иначе
					// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в квитанции по кап ремонту.
					СтруктураОбщихТаблицКапРемонт = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.СписокУслугКапРемонт);
				КонецЕсли;
			Иначе
				// (КАП. РЕМОНТ) Структура общих таблиц, соответствующая всем услугам, которые необходимо вывести в основной квитанции.
				СтруктураОбщихТаблицОсновная = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруОбщихТаблицПоТекущимУслугам(СтруктураОбщихТаблиц, ПараметрыОтчета.ТекущийСписокУслуг);
			КонецЕсли;
		Иначе
			// Для печати единой квитанции программно меняем в параметрах отчета методику ведения учета по услугам кап. ремонта.
			ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	тмДокумент        = Новый ТабличныйДокумент();
	тмОбщийДок        = Новый ТабличныйДокумент();
	ЭтоПервая         = Истина;
	ТекНомерВыводимой = 1;
	
	Для Каждого ЭлементСписка Из ПараметрыОтчета.ТаблицаОбъектов Цикл
		
		ПараметрыОтчета.Вставить("СтруктОписание", СформироватьДанныеПоЛицевомуСчету(ЭлементСписка.ЛицевойСчет, ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.ПараметрыУП, ПараметрыОтчета.Организация));
		
		// Записываем в структуру общих данных сведения о плательщике.
		ПодготовитьСведенияОПлательщике(ОбщиеДанные, ПараметрыОтчета, ЭлементСписка);
		
		Если ПараметрыОтчета.ВедетсяРаздельныйУчетПоУслугамКапремонта Тогда
			Если ПараметрыОтчета.ПечататьКвитанциюКапРемонт Тогда
				Если ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
					СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблицОсновная, ЭлементСписка.ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
					
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					
					СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблицКапРемонт, ЭлементСписка.ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, Истина);
				Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[2].Значение
					
					СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблицКапРемонт, ЭлементСписка.ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, Истина);
				КонецЕсли;
			Иначе // СпособПечатиКвитанцииКапРемонт = мСпособПечатиКвитанцииКапРемонт[1].Значение
				СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблицОсновная, ЭлементСписка.ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
				
			КонецЕсли;
		Иначе
			СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблиц, ЭлементСписка.ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая);
		КонецЕсли;
		
	КонецЦикла;
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КвитанцииИзвещенияКВП";
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху = 10;
	ДокументРезультат.ПолеСправа = 10;
	ДокументРезультат.ПолеСнизу  = 10;
	ДокументРезультат.ПолеСлева  = 10;
	
	// Область печати
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 1,
									  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Подготавливает данные и выводит на печать квитанцию.
//
// Параметры:
//  СтруктураОбщихТаблиц - Структура - структура с общими таблицами;
//  ЛицевойСчет          - СправочникСсылка.КВП_ЛицевыеСчета - текущий лицевой счет;
//  ДокументРезультат    - ТабличныйДокумент - основной табличный документ;
//  тмДокумент           - ТабличныйДокумент - дополнительный табличный документ;
//  ЭтоПервая            - Булево - признак того, что текущая квитанция является первой печатаемой.
//
Процедура СформироватьТекущуюКвитанциюФорма12(СтруктураОбщихТаблиц, ЛицевойСчет, тмДокумент, тмОбщийДок, ДокументРезультат, ТекНомерВыводимой, ПараметрыОтчета, ОбщиеДанные, ЭтоПервая, КвитанцияНаКР = Ложь)
	
	ОбщиеДанные.Вставить("КвитанцияНаКР", КвитанцияНаКР);
	
	// Подготавливаем структуру с таблицами по текущему объекту отчета.
	ТекущиеДанные = ПолучитьСтруктуруДанныхПоТекущемуОбъекту(СтруктураОбщихТаблиц, ЛицевойСчет, ПараметрыОтчета);
	
	Если НЕ ПараметрыОтчета.НеПечататьНулевыеКвитанции ИЛИ НЕ ТекущаяКвитанцияНулевая(ТекущиеДанные, ПараметрыОтчета.ВыводитьНачальноеСальдо) Тогда
		
		СформироватьФорма12(ЛицевойСчет, тмДокумент, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные);
		
		Если Не ПараметрыОтчета.ВыводитьПоОднойКвитанции Тогда
			тмОбщийДок.Присоединить(тмДокумент);
			тмОбщийДок.ВывестиВертикальныйРазделительСтраниц();
			тмОбщийДок.ВывестиГоризонтальныйРазделительСтраниц();
			Если ТекНомерВыводимой % 2 = 0 Тогда
				ДокументРезультат.Вывести(тмОбщийДок);
				тмОбщийДок = Новый ТабличныйДокумент();
			КонецЕсли;
			
			ВсегоОбъектовПечати = ПараметрыОтчета.СписокЛицевыхСчетов.Количество();
			Если ПараметрыОтчета.ПечататьКвитанциюКапРемонт И ПараметрыОтчета.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт" Тогда
				ВсегоОбъектовПечати = ВсегоОбъектовПечати * 2;
			КонецЕсли;
			
			// Вывод последнего элемента.
			Если ВсегоОбъектовПечати % 2 <> 0
			 И ВсегоОбъектовПечати = ТекНомерВыводимой Тогда
				ДокументРезультат.Вывести(тмДокумент);
				ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
		Иначе
			ДокументРезультат.Вывести(тмДокумент);
			ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ТекНомерВыводимой = ТекНомерВыводимой + 1;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТекущуюКвитанцию()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма12(Объект, ДокументРезультатДляВозврата, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено               = ТекущиеДанные.ДанныеОПени;
	ПениНачисленоСНачСальдоПени = ТекущиеДанные.ПениНачисленоСНачСальдоПени;
	СтруктураНачСальдо          = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	Если ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("ПериодОплаты", "период :" + Формат(ПараметрыОтчета.ДатаС, "ДФ='MMMM yyyy'") 
		                      + " г. - " + Формат(ПараметрыОтчета.ДатаПо,"ДФ='MMMM yyyy'") + " г.");
		ОбщиеДанные.Вставить("СрокОплаты", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ЧислоДолгаСтрока) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) + ((ПараметрыОтчета.ЧислоДолгаСтрока - 1) * 60 * 60* 24);
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтчета.ПериодДолга) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	ВсегоНачислено = ПениНачислено;
	
	ОбщиеДанные.Вставить("Пени", Формат(ПениНачислено, "ЧДЦ=2; ЧН=-"));
	
	// Создание и заполнение строки итогов.
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговаяЛьгота      = ТаблицаНачисления.Итог("Льгота");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	// Поиск оплат за месяц.
	ПериодПросмотра = ПараметрыОтчета.ПериодДолга;
	
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	// Обработка начального сальдо.
	НачальноеСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
	
		Если НачальноеСальдо > 0 Тогда
			НачальноеСальдо = НачальноеСальдо - ВсегоНачислено;
		КонецЕсли;
		
		ВсегоНачислено = ВсегоНачислено + ИтоговоеКОплате;
		
		// Нахождение стоимости банковского перевода.
		ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
	
		НачальноеСальдоСправочно = НачальноеСальдо;
		ДатаСтрокиПредупреждения = Формат(ПараметрыОтчета.ПериодДолга, "ДФ=dd.MM.yyyy");
		Для Каждого Стр Из ДанныеОбОплатах Цикл
			Если Стр.Период < ПараметрыОтчета.ПериодДолга Тогда
				НачальноеСальдоСправочно = НачальноеСальдоСправочно - Стр.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
	
		ОбщиеДанные.Вставить("ВсегоКОплате",       Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=-"));
		ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(ИтоговоеКОплате, "ЧДЦ=2; ЧН=-"));
	
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			Если НачальноеСальдо > 0 Тогда
				СтрокаНачСальдо = "Ваша задолженность на " + Формат((НачалоМесяца(ПериодПросмотра) - 1), "ДЛФ=Д") + ": "
								+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
			Иначе
				СтрокаНачСальдо = "";
			КонецЕсли;
		КонецЕсли;
	
		ОбщиеДанные.Вставить("СтрокаНачСальдо", СтрокаНачСальдо);
		Если ПараметрыОтчета.ЗаПериод Тогда
			ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
		Иначе
			Если НачальноеСальдоСправочно = 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
			ИначеЕсли НачальноеСальдоСправочно < 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Переплата на "
									 + ДатаСтрокиПредупреждения 
									 + "  " +Формат((-1) * НачальноеСальдоСправочно, "ЧДЦ=2") 
									 + ". Благодарим за своевременную оплату счетов!");
			Иначе
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Напоминаем, что на " + ДатаСтрокиПредупреждения
									 + " вы не заплатили " + Формат(НачальноеСальдоСправочно, "ЧДЦ=2") + " за предыдущий период");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДатаСтрокиПредупреждения = Формат(НачалоМесяца(ПериодПросмотра), "ДФ=dd.MM.yyyy");
		ВсегоНачислено           = ВсегоНачислено + ИтоговоеКОплате;
		
		// Нахождение стоимости банковского перевода.
		ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		
		ОбщиеДанные.Вставить("ВсегоКОплате",       Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=-"));
		ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(ИтоговоеКОплате, "ЧДЦ=2; ЧН=-"));
		
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеКОплате);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", ?(ПараметрыОтчета.ВыводитьКоличествоПроживающих, "Кол-во прожив: " + СтруктОписание.КоличествоПроживающих, ""));
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	// ИЗВЕЩЕНИЕ
	
	Если ПараметрыОтчета.ВидШК =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQR");
	КонецЕсли;
	
	ПериодПени       = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	МесяцСтрокойПени = НРег(Формат(ПериодПени, "ДФ=MMMM"));
	ГодПени          = Формат(Год(ПериодПени), "ЧГ=0");
	
	ОбщиеДанные.Вставить("ПериодПени", "за " + МесяцСтрокойПени + " " + ГодПени);
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(ОбщиеДанные, ПениНачислено, ПениНачисленоСНачСальдоПени, ТаблицаСчетчиков);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	// КВИТАНЦИЯ
	
	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	тмДокумент = Новый ТабличныйДокумент;
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("СтрокаПредупреждения");
		Область.Параметры.Заполнить(ОбщиеДанные);
		тмДокумент.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияИнф");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	ДокументРезультат.Присоединить(тмДокумент);
	
	тмДокумент.Очистить();
	
	Область = Макет.ПолучитьОбласть("КорешокШапка");
	тмДокумент.Вывести(Область);
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
	
	Если ПараметрыОтчета.ВсегдаВыводитьПоказанияСчетчиков
	 ИЛИ (ТаблицаСчетчиков.Итог("РасходДн") <> 0
		 ИЛИ ТаблицаСчетчиков.Итог("РасходНч") <> 0
		 ИЛИ ТаблицаСчетчиков.Итог("РасходПк") <> 0) Тогда
		Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("КорешокСчетчик");
			ТекСтрокаПараметры = Новый Структура("Абонент,СтрокаПоказаний");
			ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			тмДокумент.Вывести(Область);
			тмПоказания = Новый ТабличныйДокумент;
			Область = Макет.ПолучитьОбласть("КорешокПоказания");
			СтрокаПоказаний = "";
			СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата)
								+ "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата)
								+ "=" + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
			
			Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеНч) Тогда
				СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата)
									+ "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата)
									+ "=" + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеПк) Тогда
				СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата)
									+ "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата)
									+ "=" + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
			КонецЕсли;
			ТекСтрокаПараметры.СтрокаПоказаний = СтрокаПоказаний;
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			тмПоказания.Вывести(Область);
			тмДокумент.Присоединить(тмПоказания);
		КонецЦикла;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КорешокПодвал");
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(Область);
	
	// Сворачиваем и сортируем таблицу начислений.
	ТаблицаСНачислениями = ОбработатьТаблицуНачислений(ТаблицаНачисления, Объект, ПараметрыОтчета, ТаблицаЛьготСправочно);
	
	ДополнитьНачисленияПоказаниямиИРасходомПоСчетчикам(ТаблицаСНачислениями, ТаблицаСчетчиков);
	
	ТаблицаСНачислениями.Колонки.КОплате.Имя    = "НачисленоИтог";
	ТаблицаСНачислениями.Колонки.Количество.Имя = "НормаПоказания";
	
	//////////////////////////////////////////////////////////////////////////
	
	ТаблицаПрочие       = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.ОбщийСписокУслуг.ВыгрузитьКолонку("ВидУслуги"));
	ТаблицаКоммунальные = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.УслугиКоммунальные.ВыгрузитьКолонку("ВидУслуги"));
	ТаблицаСодержание   = ПолучитьТаблицуУслуг(ТаблицаСНачислениями, ПараметрыОтчета.УслугиСодержанияРемонта.ВыгрузитьКолонку("ВидУслуги"));
	
	//////////////////////////////////////////////////////////////////////////
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
	
	Если ТаблицаСодержание.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("НачисленияСодержание");
		ДокументРезультат.Вывести(Область);
		ВывестиТекущуюТаблицу(ТаблицаСодержание, Макет, ДокументРезультат, СтрокаФормата);
	КонецЕсли;
	
	Если ТаблицаКоммунальные.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("НачисленияКоммунальные");
		ДокументРезультат.Вывести(Область);
		ВывестиТекущуюТаблицу(ТаблицаКоммунальные, Макет, ДокументРезультат, СтрокаФормата);
	КонецЕсли;
	
	Если ТаблицаПрочие.Количество() > 0 Тогда
		Если ТаблицаКоммунальные.Количество() > 0 ИЛИ ТаблицаСодержание.Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть("НачисленияПрочие");
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		ВывестиТекущуюТаблицу(ТаблицаПрочие, Макет, ДокументРезультат, СтрокаФормата);
	КонецЕсли;
	
	СтруктураИтогов = Новый Структура;
	СтруктураИтогов.Вставить("Начислено",     ИтоговоеНачисление);
	СтруктураИтогов.Вставить("НачисленоИтог", ИтоговоеКОплате);
	СтруктураИтогов.Вставить("Льгота",        ИтоговаяЛьгота);
	СтруктураИтогов.Вставить("Перерасчет",    ИтоговыйПерерасчет);
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтруктураИтогов);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока1");
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультатДляВозврата = ДокументРезультат;
	
КонецПроцедуры // СформироватьФорма12()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма13(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)

	ДанныеОбОплатах       = ТекущиеДанные.ДанныеОбОплатах;
	ТаблицаСчетчиков      = ТекущиеДанные.ДанныеОСчетчиках;
	ТаблицаНачисления     = ТекущиеДанные.ДанныеОНачислениях;
	ТаблицаЛьготСправочно = ТекущиеДанные.ДанныеОСубсидиях;
	
	ПениНачислено      = ТекущиеДанные.ДанныеОПени;
	СтруктураНачСальдо = ТекущиеДанные.ДанныеОНачСальдо;
	
	// (1) Сбор информации.

	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",        СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли", СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",        СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли", СтруктОписание.ЖилаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КолВоЖильцов",        "Количество жильцов: " + СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("ТипСобственности",    СтруктОписание.ТипСобственностиКвартиры);
	
	ОбщиеДанные.Вставить("Период", Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	
	ИтоговоеНачисление  = ТаблицаНачисления.Итог("Начислено");
	ИтоговаяЛьгота      = ТаблицаНачисления.Итог("Льгота");
	ИтоговыйПерерасчет  = ТаблицаНачисления.Итог("Перерасчет");
	ИтоговоеКОплате     = ТаблицаНачисления.Итог("КОплате");
	
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке       = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	СуммаОплатыДобровольногоСтрахования = ДанныеОбОплатах.Итог("СуммаОплатыДобровольногоСтрахования");
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ДатаПоследнейОплаты = ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период;
	КонецЕсли;
	ОбщиеДанные.Вставить("ДатаПослОплаты", Формат(ДатаПоследнейОплаты ,"ДФ=dd.MM.yyyy"));
	
	ВсегоКОплате = ПениНачислено + ИтоговоеКОплате;

	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		ОбщиеДанные.Вставить("НачальноеСальдо", НачальноеСальдо);
	Иначе
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоКОплате, ВнесеноОплат, Предоплата, ПараметрыОтчета, Объект,
												   СуммаОплатыОстаткаПоРассрочке, СуммаОплатыДобровольногоСтрахования);
		НачальноеСальдо = 0;
		ОбщиеДанные.Вставить("НачальноеСальдо", 0);
	КонецЕсли;
		
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда 
		Процент = ПараметрыОтчета.ПроцентЗаУслугиБанка / 100;
	 	ИтогоКОплате = ВсегоКОплате + ИтоговоеКОплате * Процент;
	Иначе
		ИтогоКОплате = ВсегоКОплате;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ИтогоКОплате", Формат(ИтогоКОплате, "ЧДЦ = 2"));
	
	// (2) Вывод информации.
	
	Макет = ПолучитьМакетКвитанцииПоФормеКвитанции(ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("Пени,ИтогоНачисленоСумма,КомиссияБанка,ОплатаСКомиссией,ИтогоКОплате,ДатаВыдачи,Начислено,Льгота,Перерасчет,КОплате");
	СтруктураПараметровМакета.Пени                = ПениНачислено;
	СтруктураПараметровМакета.ИтогоНачисленоСумма = ИтоговоеНачисление - ИтоговаяЛьгота;
	СтруктураПараметровМакета.КомиссияБанка       = Неопределено;
	СтруктураПараметровМакета.ОплатаСКомиссией    = Неопределено;
	СтруктураПараметровМакета.ИтогоКОплате        = Формат(ИтогоКОплате, "ЧДЦ = 2");
	СтруктураПараметровМакета.ДатаВыдачи          = "Дата выдачи: " + Формат(ТекущаяДата(), "ДФ='dd MMMM yyyy'") + " г.";
	СтруктураПараметровМакета.Начислено           = ИтоговоеНачисление;
	СтруктураПараметровМакета.Льгота              = ИтоговаяЛьгота;
	СтруктураПараметровМакета.Перерасчет          = ИтоговыйПерерасчет;
	СтруктураПараметровМакета.КОплате             = ИтоговоеКОплате + ПениНачислено;
	
	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШтрихкодОплачено");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ОбщиеДанные.ИтогоКОплате = Формат(ИтогоКОплате, "ЧДЦ = 2");
	
	Область = Макет.ПолучитьОбласть("ОбщиеДанные");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ПриставкаОбласти = "";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ТаблицаСчетчиков, Объект, ПараметрыОтчета, ПриставкаОбласти, ТаблицаЛьготСправочно);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		Область = Макет.ПолучитьОбласть("ПлатежКомиссия");
		СтруктураПараметровМакета.КомиссияБанка     = СтруктураПараметровМакета.КОплате * Процент;
		СтруктураПараметровМакета.ОплатаСКомиссией  = СтруктураПараметровМакета.КОплате + СтруктураПараметровМакета.КОплате * Процент;
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	
	ВывестиПримечание(ДокументРезультат, Макет, ОбщиеДанные);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом.
//
Процедура СформироватьФорма14(Объект, ДокументРезультат, ТекущиеДанные, ПараметрыОтчета, ОбщиеДанные)
	
	мСведенияСчетчиков = ИнициализироватьСведенияСчетчиков();
	
	ПараметрыОтчета.Вставить("мСведенияСчетчиков", мСведенияСчетчиков);
	
	// (1) Сбор информации.
	
	ЗаполнитьДанныеПолучателяПлатежа(ОбщиеДанные, ПараметрыОтчета);
	
	ОтветственныеЛица = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, ТекущаяДата());
	
	ОбщиеДанные.Вставить("Квартира",     СтрЗаменить(ОбщиеДанные.Помещение, "Кв. ", ""));
	ОбщиеДанные.Вставить("ПериодОплаты", КонецМесяца(КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + 1));
	ОбщиеДанные.Вставить("МесяцОплаты",  ПараметрыОтчета.ПериодПросмотра);
	ОбщиеДанные.Вставить("Руководитель", ОтветственныеЛица.Руководитель);
	
	ВывестиНачисленияПоказания(ДокументРезультат, Объект, ТекущиеДанные, ОбщиеДанные, ПараметрыОтчета);
	
КонецПроцедуры // СформироватьФорма14()

// Применяет к табличному документу установленные параметры печати.
//
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент - табличный документ, к которому применяются параметры печати;
//  РазмерСтраницы    - Строка            - формат размера печатаемой страницы на латинице.
//
Процедура УстановитьПараметрыПечати(ТабличныйДокумент, РазмерСтраницы)
	
	Формат = Новый Структура;
	
	Формат.Вставить("АвтоМасштаб",        Истина);
	Формат.Вставить("РазмерСтраницы",     РазмерСтраницы);
	Формат.Вставить("ПолеСверху",         5);
	Формат.Вставить("ПолеСлева",          5);
	Формат.Вставить("ПолеСнизу",          5);
	Формат.Вставить("ПолеСправа",         5);
	Формат.Вставить("ОриентацияСтраницы", ?(РазмерСтраницы = "A5", ОриентацияСтраницы.Ландшафт, ОриентацияСтраницы.Портрет));
	
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, Формат);
	
КонецПроцедуры // УстановитьПараметрыПечати()

// Выполняет заполнение массивов квитанций, помещающихся на половине листа А4 и не помещающихся.
//
Процедура ЗаполнитьМассивыКвитанцийПриФормированииДвухКвитанцийНаЛист(ИмяМакета, тмДокумент, ПараметрыОтчета)
	
	ШаблонА5 = Новый ТабличныйДокумент;
	УстановитьПараметрыПечати(ШаблонА5, "A5");
	
	// Проверяем, умещается ли сформированная квитанция на половине листа.
	Если ШаблонА5.ПроверитьВывод(тмДокумент) Тогда
		
		УстановитьПараметрыПечати(тмДокумент, "A5");
		
		Макет                   = ПолучитьМакет(ИмяМакета);
		ОбластьПустаяСтрока     = Макет.ПолучитьОбласть("ПустаяСтрока");
		ОбластьМасштабнаяСтрока = Макет.ПолучитьОбласть("ОбластьМасштабнаяСтрока");
		
		// Дополняем текущую квитанцию до полного заполнения области на странице, отведенной под эту квитанцию,
		// но с учетом зазора для области разделителя "ПустаяСтрока".
		Пока тмДокумент.ПроверитьВывод(ОбластьМасштабнаяСтрока) Цикл
			тмДокумент.Вывести(ОбластьПустаяСтрока);
		КонецЦикла;
		
		ШаблонА5.Вывести(тмДокумент);
		
		ПараметрыОтчета.МассивСтраниц_ДвеКвитанцияНаСтранице.Добавить(ШаблонА5);
		
	Иначе
		
		ШаблонА5.Вывести(тмДокумент);
		
		ПараметрыОтчета.МассивСтраниц_ОднаКвитанцияНаСтранице.Добавить(ШаблонА5);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит квитанции, сформированные ранее и помещенные в массивы помещающихся на половину листа А4
// и не помещающихся. Используется при необходимости вывода 2-х квитанций на одном листе.
//
Процедура ВывестиКвитанцииИзМассивовКвитанцийДляПечатиДвухКвитанцийНаЛист(ДокументРезультат, ПараметрыОтчета)
	
	// Выводим квитанции, которые не умещаются на половине листа А4, первыми.
	Если Не ПараметрыОтчета.МассивСтраниц_ОднаКвитанцияНаСтранице.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Имеются квитанции, превышающие половину листа А4. Такие квитанции будут сформированы по одной на лист.");
	КонецЕсли;
	
	Для каждого ТекОдиночнаяКвитанция из ПараметрыОтчета.МассивСтраниц_ОднаКвитанцияНаСтранице Цикл
		
		ДокументРезультат.Вывести(ТекОдиночнаяКвитанция);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла;
	
	// Затем выводим страницы с двумя квитанциями.
	Макет              = ПолучитьМакет("ПФ_MXL_Макет_05");
	ОбластьЛинияОтрыва = Макет.ПолучитьОбласть("ЛинияОтрыва");
	
	// Выводим квитанции таким образом, чтобы первая половина квитанций выводилась вверху листа,
	// а вторая внизу. Таким образом мы сохраним порядок сортировки квитанций в пачках.
	КоличествоКвитанций = ПараметрыОтчета.МассивСтраниц_ДвеКвитанцияНаСтранице.Количество();
	МаксИндекс          = КоличествоКвитанций - 1;
	Половина            = Окр(КоличествоКвитанций / 2, 0);
	ИндексСередины      = Половина - 1;
	ИндексОтСередины    = Половина;
	
	Для Сч = 0 По ИндексСередины Цикл
		
		ОбластьДанных = ПараметрыОтчета.МассивСтраниц_ДвеКвитанцияНаСтранице[Сч];
		ДокументРезультат.Вывести(ОбластьДанных);
		ДокументРезультат.Вывести(ОбластьЛинияОтрыва);
		
		Если ИндексОтСередины <= МаксИндекс Тогда
			ОбластьДанных = ПараметрыОтчета.МассивСтраниц_ДвеКвитанцияНаСтранице[ИндексОтСередины];
			ДокументРезультат.Вывести(ОбластьДанных);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ИндексОтСередины = ИндексОтСередины + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

// Производит начальное заполнение параметров отчета.
//
// Параметры:
//  Нет
//
Процедура ИнициализацияРеквизитов(Отчет) Экспорт
	
	Если Не Отчет.НеЗаполнятьНастройкиПриОткрытии Тогда
		
		СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_УПЖКХ_КвитанцииИзвещения");
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			ТаблицаВидовУслуг = Новый ТаблицаЗначений;
			Если НЕ ЗначениеЗаполнено(Отчет.ОбъектОтчета) Тогда
				СтруктураПараметров.Свойство("Объект", Отчет.ОбъектОтчета);
			КонецЕсли;
			СтруктураПараметров.Свойство("Организация",                                Отчет.Организация);
			СтруктураПараметров.Свойство("ПолучательПлатежа",                          Отчет.ПолучательПлатежа);
			СтруктураПараметров.Свойство("ВключатьКассовыйСбор",                       Отчет.ВключатьКассовыйСбор);
			СтруктураПараметров.Свойство("ВыводитьЗависимыеУслуги",                    Отчет.ВыводитьЗависимыеУслуги);
			СтруктураПараметров.Свойство("ВыводитьЛьготы",                             Отчет.ВыводитьЛьготы);
			СтруктураПараметров.Свойство("ОтборКвитанций",                             Отчет.ОтборКвитанций);
			СтруктураПараметров.Свойство("ГраницаОтбораИтоговойСуммыОт",               Отчет.ГраницаОтбораИтоговойСуммыОт);
			СтруктураПараметров.Свойство("ГраницаОтбораИтоговойСуммыОтБезОграничений", Отчет.ГраницаОтбораИтоговойСуммыОтБезОграничений);
			СтруктураПараметров.Свойство("ГраницаОтбораИтоговойСуммыДо",               Отчет.ГраницаОтбораИтоговойСуммыДо);
			СтруктураПараметров.Свойство("ГраницаОтбораИтоговойСуммыДоБезОграничений", Отчет.ГраницаОтбораИтоговойСуммыДоБезОграничений);
			СтруктураПараметров.Свойство("ВыводитьПроцентЗаУслугиБанка",               Отчет.ВыводитьПроцентЗаУслугиБанка);
			СтруктураПараметров.Свойство("ПроцентЗаУслугиБанка",                       Отчет.ПроцентЗаУслугиБанка);
			СтруктураПараметров.Свойство("ВключениеНачальнойЗадолженности",            Отчет.ВключениеНачальнойЗадолженности);
			СтруктураПараметров.Свойство("ВыводитьПоДвеКвитанции",                     Отчет.ВыводитьПоДвеКвитанции);
			СтруктураПараметров.Свойство("КоличествоСтрокТаблицыНачислений",           Отчет.КоличествоСтрокТаблицыНачислений);
			СтруктураПараметров.Свойство("ВариантСортировки",                          Отчет.ВариантСортировки);
			СтруктураПараметров.Свойство("ПериодДолга",                                Отчет.ПериодДолга);
			СтруктураПараметров.Свойство("НеПечататьНулевыеКвитанции",                 Отчет.НеПечататьНулевыеКвитанции);
			СтруктураПараметров.Свойство("ВыводитьНачальноеСальдо",                    Отчет.ВыводитьНачальноеСальдо);
			СтруктураПараметров.Свойство("ВыводитьКоличествоПроживающих",              Отчет.ВыводитьКоличествоПроживающих);
			СтруктураПараметров.Свойство("ДетализироватьНачисления",                   Отчет.ДетализироватьНачисления);
			СтруктураПараметров.Свойство("ВсегдаВыводитьПоказанияСчетчиков",           Отчет.ВсегдаВыводитьПоказанияСчетчиков);
			СтруктураПараметров.Свойство("ВыводитьПоОднойКвитанции",                   Отчет.ВыводитьПоОднойКвитанции);
			СтруктураПараметров.Свойство("ВыводитьОтрицательнуюСуммуКОплате",          Отчет.ВыводитьОтрицательнуюСуммуКОплате);
			СтруктураПараметров.Свойство("ПечататьКвитанциюКапРемонт",                 Отчет.ПечататьКвитанциюКапРемонт);
			СтруктураПараметров.Свойство("СпособПечатиКвитанцииКапРемонт",             Отчет.СпособПечатиКвитанцииКапРемонт);
			СтруктураПараметров.Свойство("ПериодПросмотра",                            Отчет.ПериодПросмотра);
			СтруктураПараметров.Свойство("ОбщийСписокУслуг",                           ТаблицаВидовУслуг);
			Если ЗначениеЗаполнено(ТаблицаВидовУслуг) > 0 Тогда
				// Данная проверка нужна для того, что бы перейти от хранения услуг в таблице типов услуг к хранению видов услуг.
				Если ТипЗнч(ТаблицаВидовУслуг) = Тип("ТаблицаЗначений") И НЕ ТаблицаВидовУслуг.Колонки.Найти("Услуга") = Неопределено Тогда
					ТаблицаВидовУслуг = ОбработатьТаблицуУслугПоТипам(ТаблицаВидовУслуг);
				КонецЕсли;
				ТаблицаВидовУслуг = Отчеты.УПЖКХ_КвитанцииИзвещения.ИсключитьУдаленныеВидыУслуг(ТаблицаВидовУслуг);
				Отчет.ОбщийСписокУслуг.Загрузить(ТаблицаВидовУслуг);
			КонецЕсли;
			
			СтруктураПараметров.Свойство("УслугиКоммунальные",              ТаблицаВидовУслуг);
			Если ЗначениеЗаполнено(ТаблицаВидовУслуг) > 0 Тогда
				// Данная проверка нужна для того, что бы перейти от хранения услуг в таблице типов услуг к хранению видов услуг.
				Если ТипЗнч(ТаблицаВидовУслуг) = Тип("ТаблицаЗначений") И НЕ ТаблицаВидовУслуг.Колонки.Найти("Услуга") = Неопределено Тогда
					ТаблицаВидовУслуг = ОбработатьТаблицуУслугПоТипам(ТаблицаВидовУслуг);
				КонецЕсли;
				ТаблицаВидовУслуг = Отчеты.УПЖКХ_КвитанцииИзвещения.ИсключитьУдаленныеВидыУслуг(ТаблицаВидовУслуг);
				Отчет.УслугиКоммунальные.Загрузить(ТаблицаВидовУслуг);
			КонецЕсли;
			
			СтруктураПараметров.Свойство("УслугиСодержанияРемонта",         ТаблицаВидовУслуг);
			Если ЗначениеЗаполнено(ТаблицаВидовУслуг) > 0 Тогда
				// Данная проверка нужна для того, что бы перейти от хранения услуг в таблице типов услуг к хранению видов услуг.
				Если ТипЗнч(ТаблицаВидовУслуг) = Тип("ТаблицаЗначений") И НЕ ТаблицаВидовУслуг.Колонки.Найти("Услуга") = Неопределено Тогда
					ТаблицаВидовУслуг = ОбработатьТаблицуУслугПоТипам(ТаблицаВидовУслуг);
				КонецЕсли;
				ТаблицаВидовУслуг = Отчеты.УПЖКХ_КвитанцииИзвещения.ИсключитьУдаленныеВидыУслуг(ТаблицаВидовУслуг);
				Отчет.УслугиСодержанияРемонта.Загрузить(ТаблицаВидовУслуг);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отчет.ВариантСортировки) Тогда
			ВариантСортировки = "Квартира";
		КонецЕсли;
		
		Если Отчет.КоличествоСтрокТаблицыНачислений = 0 Тогда
			Отчет.КоличествоСтрокТаблицыНачислений = 13;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отчет.ПериодПросмотра) Тогда
			Отчет.ПериодПросмотра = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		КонецЕсли;
		
		Если Отчет.ГраницаОтбораИтоговойСуммыОт = Неопределено Тогда
			Отчет.ГраницаОтбораИтоговойСуммыОт = "без ограничений";
		КонецЕсли;
		
		Если Отчет.ГраницаОтбораИтоговойСуммыДо = Неопределено Тогда
			Отчет.ГраницаОтбораИтоговойСуммыДо = "без ограничений";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Отчет.ОтборКвитанций) Тогда
			Отчет.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИнициализацияРеквизитов()

// Возвращает таблицу видов услуг исключив из нее удаленные виды услуг.
//
Функция ИсключитьУдаленныеВидыУслуг(ТаблицаВидовУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ТЗ.ВидУслуги ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаВидовУслуг);
	Запрос.Выполнить();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|		ПО КВП_ВидыУслуг.Ссылка = ТЗ.ВидУслуги";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьУдаленныеВидыУслуг

// Заменяет услуги из таблицы значений на соответствующие виды услуг.
//
Функция ОбработатьТаблицуУслугПоТипам(ТаблицаВидовУслуг)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ТЗ.Услуга ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаВидовУслуг);
	Запрос.Выполнить();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|		ПО КВП_Услуги.Ссылка = ТЗ.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслуги.Услуга.ВидУслуги КАК ВидУслуги
	|ИЗ
	|	втУслуги КАК втУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втУслуги.Услуга.ВидУслуги";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ОбработатьТаблицуУслугПоТипам

// Возвращает порядок услуг для заполнения квитанции.
//
Функция ЗаполнитьПорядокУслугВКвитанции() Экспорт
	
	НастройкаСбораДанных = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ПорядокУслугВКвитанции.ВидУслуги,
	|	КВП_ПорядокУслугВКвитанции.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугВКвитанции КАК КВП_ПорядокУслугВКвитанции
	|ГДЕ
	|	КВП_ПорядокУслугВКвитанции.НастройкаСбораДанных = &НастройкаСбораДанных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Запрос.УстановитьПараметр("НастройкаСбораДанных", НастройкаСбораДанных);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ЗаполнитьПорядокУслугВКвитанции()

// Записывает порядок услуг в регистр сведений.
//
Процедура ЗаписатьПорядокУслугВКвитанции(СписокУслуг) Экспорт
	
	НастройкаФормированийКвитанции = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПустаяСсылка();
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НастройкаСбораДанных.Установить(НастройкаФормированийКвитанции);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Индекс = 0;
	Для Каждого Услуга Из СписокУслуг Цикл
		
		Индекс = Индекс + 1;
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.НастройкаСбораДанных = НастройкаФормированийКвитанции;
		СтрокаНабора.ВидУслуги            = Услуга.ВидУслуги;
		СтрокаНабора.Порядок              = Индекс;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ЗаписатьПорядокУслугВКвитанции()

// Возвращает все виды услуг из справочника КВП_ВидыУслуг.
//
Функция ПолучитьВсеВидыУслуг() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВсеВидыУслуг()

// Проверяет наличие реквизита объекта.
//
// Параметры:
//   Объект - объект.
//   ИмяРеквизита - Имя проверяемого реквизита объекта.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции // ЕстьРеквизитОбъекта()

// Формирует название месяца в предложном падеже.
//
// Параметры:
//  Дата         – дата для формирования месяца.
//
// Возвращаемое значение:
//  Строка – нужная форма месяца
//
Функция ПредложныйПадежМесяца(Дата) Экспорт

	Месяц = НРег(Формат(Дата, "ДФ='MMMM'"));
	Если Не Прав(Месяц, 1) = "т" Тогда
		Месяц = Лев(Месяц, СтрДлина(Месяц) - 1);
	КонецЕсли;
	
	Возврат Месяц + "е";

КонецФункции // ПредложныйПадежМесяца()

// Формирует название месяца в родительном падеже.
//
// Параметры:
//  Дата         – дата для формирования месяца.
//
// Возвращаемое значение:
//  Строка – нужная форма месяца
//
Функция РодительныйПадежМесяца(Дата) Экспорт

	Месяц = НРег(Формат(Дата, "ДФ='MMMM'"));
	Если Не Прав(Месяц, 1) = "т" Тогда
		Месяц = Лев(Месяц, СтрДлина(Месяц) - 1);
		Возврат Месяц + "я";
	КонецЕсли;
	
	Возврат Месяц + "а";

КонецФункции // РодительныйПадежМесяца()

// Форматирует параметры области в соответствии с заданным форматом.
//
Процедура ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата) Экспорт
	
	Если Область.Параметры.Количество() > 0 Тогда
		Для Каждого ФорматируемыйПараметр Из СписокФорматируемыхПараметров Цикл
			Если ЕстьРеквизитОбъекта(Область.Параметры, ФорматируемыйПараметр.Значение) Тогда
				
				// Попытка добавлена для обработки ситуации, когда вместо числа в форматируемом параметре оказывается строка.
				// Например в форме_09 для параметра "НормаПоказания".
				Попытка
					Область.Параметры[ФорматируемыйПараметр.Значение] = Число(Область.Параметры[ФорматируемыйПараметр.Значение]);
				Исключение
				КонецПопытки;
				
				Область.Параметры[ФорматируемыйПараметр.Значение] = Формат(Область.Параметры[ФорматируемыйПараметр.Значение], СтрокаФормата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
