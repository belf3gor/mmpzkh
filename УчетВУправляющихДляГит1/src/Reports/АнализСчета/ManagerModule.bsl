#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ПроверкаИтогов",                     Истина);

	Возврат Результат;

КонецФункции

// Формирует текст, выводимый в заголовке отчета.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//
// Возвращаемое значение:
//   Строка      - текст заголовка с учетом периода.
//
Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	Возврат СтрШаблон(
			НСтр("ru = 'Анализ счета %1%2'"),
			ПараметрыОтчета.Счет,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				ПараметрыОтчета.НачалоПериода,
				ПараметрыОтчета.КонецПериода));
		
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Счет"         , БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПараметрыОтчета.Счет));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ПараметрыОтчета.КонецПериода));
	Иначе
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПараметрПериод", КонецДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	// Проверяем наличие среди выбранных группировок оборотных субконто.
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыОтчета.Счет);
	ЕстьВидСубконтоТолькоОбороты = Ложь;
	Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
		
		ИмяФлагаВидаСубконто = "ВидСубконто" + НомерСубконто + "ТолькоОбороты";
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, ИмяФлагаВидаСубконто, СвойстваСчета[ИмяФлагаВидаСубконто]);
		
		Для каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
			
			Если Не ПолеВыбраннойГруппировки.Использование
			 Или ЕстьВидСубконтоТолькоОбороты
			 Или Не СвойстваСчета[ИмяФлагаВидаСубконто]
			 Или Сред(ПолеВыбраннойГруппировки.Поле, 9, 1) <> Формат(НомерСубконто, "ЧГ=0") Тогда
				Продолжить;
			КонецЕсли;
			
			РазделительРеквизита = Сред(ПолеВыбраннойГруппировки.Поле, 10, 1);
			Если (ПустаяСтрока(РазделительРеквизита) Или РазделительРеквизита = ".")
			   И Лев(ПолеВыбраннойГруппировки.Поле, 8) = "Субконто" Тогда
				ЕстьВидСубконтоТолькоОбороты = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	Если КоличествоПоказателей > 1 Тогда
		
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Заголовок     = БухгалтерскиеОтчеты.ЗаголовокГруппыПоказателей();
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
		
		Для Индекс = 1 По 3 Цикл
			Если Индекс = 1 Тогда
					ЗначениеПодстановки = "НачальныйОстаток";
				ИначеЕсли Индекс = 2 Тогда 
					ЗначениеПодстановки = "Оборот";
				Иначе
					ЗначениеПодстановки = "КонечныйОстаток";
				КонецЕсли;
			Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
				Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + ИмяПоказателя + ЗначениеПодстановки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ГруппаДт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаДт.Заголовок     = НСтр("ru = 'Дебет'");
	ГруппаДт.Использование = Истина;
	ГруппаДт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппаКт = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаКт.Заголовок     = НСтр("ru = 'Кредит'");
	ГруппаКт.Использование = Истина;
	ГруппаКт.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;	
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("Контроль");
	
	МассивПоказателейДоп = Новый Массив;
	МассивПоказателейДоп.Добавить("ВалютнаяСумма");
	МассивПоказателейДоп.Добавить("Количество");
	
	ВыводимыеПоля = Новый Массив;
	
	ВидОстатков = ?(ПараметрыОтчета.РазвернутоеСальдо, "Развернутый", "");
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "Начальный" + ВидОстатков + "ОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + ИмяПоказателя + "НачальныйОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("ОборотыЗаПериод." + ИмяПоказателя + "ОборотКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "Конечный"  + ВидОстатков + "ОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяПоказателя Из МассивПоказателейДоп Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокДт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаДт, ВыбранноеПоле);
			ВыбранноеПоле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода."  + ИмяПоказателя + "КонечныйОстатокКт");
			ВыводимыеПоля.Добавить(ВыбранноеПоле);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаКт, ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	
	// Дополнительные данные.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	УсловноеОформлениеАвтоотступа = Неопределено;
	Для каждого ЭлементОформления Из КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = НСтр("ru = 'Уменьшенный автоотступ'") Тогда
			УсловноеОформлениеАвтоотступа = ЭлементОформления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
		УсловноеОформлениеАвтоотступа = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
		УсловноеОформлениеАвтоотступа.Представление = НСтр("ru = 'Уменьшенный автоотступ'");
		УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
		УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Иначе
		УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
	КонецЕсли;
	
	Структура = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных")); 
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец); 
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		
		ЗначениеОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Структура.Отбор, "SystemFields.LevelInGroup", 1);
		ЗначениеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		
	КонецЕсли;

	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл 
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ПолеВыбраннойГруппировки.Поле);
			
			Если ПолеВыбраннойГруппировки.ТипГруппировки = 1 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			ИначеЕсли ПолеВыбраннойГруппировки.ТипГруппировки = 2 Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			Иначе
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			КонецЕсли;
			
			Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
			
			Если ЕстьВидСубконтоТолькоОбороты Тогда
				// Если есть оборотное субконто, то могут возникать ненужные группировки с пустыми ресурсами.
				ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, Структура);
			КонецЕсли;
			
			ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			ПолеОформления.Поле = ПолеГруппировки.Поле;
			
		КонецЕсли;
	КонецЦикла;
	
	// Период.
	БухгалтерскиеОтчетыВызовСервера.ДобавитьГруппировкуПоПериоду(ПараметрыОтчета, Структура);
	Если ПараметрыОтчета.Периодичность > 0 Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
	КонецЕсли;
	
	Для каждого ЭлементГруппировки Из Структура.ПоляГруппировки.Элементы Цикл
		Если ЭлементГруппировки.Поле = Новый ПолеКомпоновкиДанных(?(ПараметрыОтчета.Периодичность = 2, "Регистратор", "Период")) Тогда
			Поле = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
			Поле.Поле = ЭлементГруппировки.Поле;
		КонецЕсли;
	КонецЦикла;
	
	// Валюта.
	Если ПараметрыОтчета.ПоказательВалютнаяСумма И БухгалтерскиеОтчетыКлиентСервер.НайтиГруппировку(КомпоновщикНастроек.Настройки.Структура, "Валюта") = Неопределено Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Валюта");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеГруппировки", РасположениеГруппировкиКомпоновкиДанных.НачалоИКонец);
		
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЕсли;
	
	// Кор счет.
	Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСчет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор"               , ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "РасположениеПолейГруппировки", РасположениеПолейГруппировкиКомпоновкиДанных.ОтдельноИТолькоВИтогах); 
	
	ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
	ПолеОформления.Поле = ПолеГруппировки.Поле;
	
	Если Не ПараметрыОтчета.ПоСубсчетамКорСчетов Тогда
		// Установка отбора на выводимый уровень иерархии счета.
		ГруппаЭлементовОтбора = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
		ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);
		СписокСчетовПоСубсчетам = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовПоСубсчетам(ПараметрыОтчета.ГруппировкаКор);
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "КорСчет", СписокСчетовПоСубсчетам, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии, СписокСчетовПоСубсчетам.Количество() > 0);
	КонецЕсли;
	
	// КорСубконто.
	КоличествоКорГруппировок = 0;
	// Позиция подразделения: 0 - подразделение не нужно выводить, -1 - подразделение нужно выводить всегда 1-м в группировке.
	// остальные значения - выводить на указанной позиции.
	ПозицияПодразделения = 0; 
	КорСчетаСПодразделением = Новый Массив;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			ИндексПодразделения = (СтрНайти(СтрокаГруппировки.ПоСубконто,"+0")+1)/2;
			Если ИндексПодразделения <> ПозицияПодразделения И ИндексПодразделения >= 1 Тогда
				// Если в таблице подразделения находятся на разных позициях - то подразделение всегда выводится первым.
				ПозицияПодразделения = ?(ПозицияПодразделения = 0, ИндексПодразделения, -1);
			КонецЕсли;
			
			Если ИндексПодразделения <> 0.5 Тогда
				КорСчетаСПодразделением.Добавить(СтрокаГруппировки.Счет);
			КонецЕсли;
			
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+") - СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+0");
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	Если ПозицияПодразделения = -1 Тогда
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорПодразделение");
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	ИначеЕсли ПозицияПодразделения <> 0 Тогда
		КоличествоКорГруппировок = КоличествоКорГруппировок + 1;
	КонецЕсли;
	
	НомерСубконто = 0;
	Для Индекс = 1 По КоличествоКорГруппировок Цикл 
		Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		Если Индекс = ПозицияПодразделения Тогда
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорПодразделение");
		Иначе
			НомерСубконто = НомерСубконто + 1;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("КорСубконто" + НомерСубконто);
		КонецЕсли;
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		ПолеОформления = УсловноеОформлениеАвтоотступа.Поля.Элементы.Добавить();
		ПолеОформления.Поле = ПолеГруппировки.Поле;
	КонецЦикла;
	
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	
	Если ПозицияПодразделения <> 0 Тогда
		
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("КорПодразделение");
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "КорСчет", СчетаВИерархии(КорСчетаСПодразделением), ВидСравненияКомпоновкиДанных.НеВСписке);
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
		
	Если УсловноеОформлениеАвтоотступа.Поля.Элементы.Количество() = 0 Тогда
		УсловноеОформлениеАвтоотступа.Использование = Ложь;
	КонецЕсли;
	
	// Пометить строки для удаления по счетам, на которых не ведется налоговый учет.
	УсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ВР");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("Контроль");
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаНачалоПериода." + Показатель + "НачальныйРазвернутыйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + Показатель + "КонечныйОстатокДт");
		Поле = УсловноеОформление.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СальдоНаКонецПериода." + Показатель + "КонечныйРазвернутыйОстатокДт");
	КонецЦикла;
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(УсловноеОформление.Отбор, "Счет.НалоговыйУчет", Ложь);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(УсловноеОформление.Оформление, "МаксимальнаяВысота", 1);
	
	ДобавитьУсловиеПоВыбраннымРесурсам(ПараметрыОтчета, Схема);
	
КонецПроцедуры

// В процедуре можно уточнить особенности вывода данных в отчет.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  МакетКомпоновки - МакетКомпоновкиДанных - описание выводимых данных.
//
Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	КорСчетаВсе = Новый СписокЗначений;
	
	// Корректировка запроса для группировки по кор. счетам.
	ИсходныйТекстЗапроса = МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Элементы.Обороты.Запрос;
	КонечныйТекстЗапроса = "";
	ПозицияКорсчета = СтрНайти(ИсходныйТекстЗапроса, ", ) КАК ХозрасчетныйОбороты");
	ПостояннаяЧастьЗапроса = Лев(ИсходныйТекстЗапроса, ПозицияКорСчета - 1);
	ЗавершающаяЧастьЗапроса = Сред(ИсходныйТекстЗапроса, ПозицияКорсчета + 2);
	
	// Поиск условия по кор. счету.
	Индекс = СтрДлина(ПостояннаяЧастьЗапроса);
	Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1); 
	УсловиеКорСчета = "";
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		Символ = Сред(ПостояннаяЧастьЗапроса, Индекс, 1);
		Если Символ = "," Тогда
			УсловиеКорСчета = Сред(ПостояннаяЧастьЗапроса, Индекс + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Формируем запрос-объединение для детализации корсчетов.
	Индекс = 1;

	// Оставим уникальные строки со счетами.
	ГруппировкаКор  = БухгалтерскиеОтчеты.УникальныеНастройкиОтчетаПоСчетам(ПараметрыОтчета.ГруппировкаКор);
	
	Для Каждого СтрокаТаблицы Из ГруппировкаКор Цикл 
		
		ИерархияКорСчета = СтрокаТаблицы.СчетаВИерархии;
		Для Каждого КорСчет Из ИерархияКорСчета Цикл
			КорСчетаВсе.Добавить(КорСчет);
		КонецЦикла;
		
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет В (&КорСчет" + Индекс + ")";
		Иначе
			ТекстУсловияКорСчета = " КорСчет В (&КорСчет" + Индекс + ")";
		КонецЕсли;
		
		// Добавим значение корсчета.
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчет" + Индекс;
		НовоеЗначение.Значение = ИерархияКорСчета;
		
		// Добавим значение корсубконто.
		СписокКорСубконто = Новый СписокЗначений;
		
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.Счет);
		СписокВидовСубконто = Новый СписокЗначений;
		КоличествоСубконто = СтрДлина(СтрокаТаблицы.ПоСубконто) / 2;
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			Если Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто*2, 1)="0" Тогда
				Продолжить;
			КонецЕсли;
			Если  ?(Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто * 2 - 1, 1) = "+", Истина, Ложь) Тогда
				СписокКорСубконто.Добавить(ДанныеСчета["ВидСубконто" + Сред(СтрокаТаблицы.ПоСубконто, НомерСубконто*2, 1)]); 
			КонецЕсли;
		КонецЦикла;
		
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя = "КорСубконто" + Индекс;
		НовоеЗначение.Значение = СписокКорСубконто;
		
		Если СписокКорСубконто.Количество() = 0 Тогда 
			ТекстУсловияКорСубконто = "";
			НачальныйИндексКор = 0;
		Иначе
			ТекстУсловияКорСубконто = "&КорСубконто" + Индекс;
			НачальныйИндексКор = СписокКорСубконто.Количество();
		КонецЕсли;
		
		ПромежуточныйТекстЗапроса = ПостояннаяЧастьЗапроса;
		
		Для ИндексКор = НачальныйИндексКор + 1 По 3 Цикл
			НачалоСтроки = СтрНайти(ПромежуточныйТекстЗапроса, "ХозрасчетныйОбороты.КорСубконто" + ИндексКор);
			Пока НачалоСтроки <> 0 Цикл
				ВременныйТекст = Сред(ПромежуточныйТекстЗапроса, НачалоСтроки);
				КонецСтроки = СтрНайти(ВременныйТекст, " КАК ");
				СтрокаПоиска = Сред(ВременныйТекст, 1, КонецСтроки - 1) + " КАК "; 
				
				Если СтрНайти(СтрокаПоиска, ") КАК ") <> 0 Тогда
					СтрокаЗамены = "NULL) КАК ";
				Иначе
					СтрокаЗамены = "NULL КАК ";
				КонецЕсли;
				
				ПромежуточныйТекстЗапроса = СтрЗаменить(ПромежуточныйТекстЗапроса, СтрокаПоиска, СтрокаЗамены);
				НачалоСтроки = СтрНайти(ПромежуточныйТекстЗапроса, "ХозрасчетныйОбороты.КорСубконто" + ИндексКор);
			КонецЦикла;
		КонецЦикла;
		
		КонечныйТекстЗапроса = КонечныйТекстЗапроса + " " + ПромежуточныйТекстЗапроса + " " + ТекстУсловияКорСчета + ", " + ТекстУсловияКорСубконто + ЗавершающаяЧастьЗапроса;
		КонечныйТекстЗапроса = КонечныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		
		
		Индекс = Индекс + 1;

	КонецЦикла;
	
	Если Индекс > 1 Тогда 
		КонечныйТекстЗапроса = Сред(КонечныйТекстЗапроса, 0, СтрДлина(КонечныйТекстЗапроса) - 16);
	КонецЕсли;
	
	ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.ПодразделениеКор КАК", "NULL КАК");
	Для НомерСубконто = 1 По 3 Цикл
		ПостояннаяЧастьЗапроса = СтрЗаменить(ПостояннаяЧастьЗапроса, "ХозрасчетныйОбороты.КорСубконто" + НомерСубконто + " КАК", "NULL КАК");
	КонецЦикла;
		
	Если Индекс > 1 Тогда
		Если Не ПустаяСтрока(УсловиеКорСчета) Тогда
			ТекстУсловияКорСчета = " И КорСчет НЕ В (&КорСчетВсе)";
		Иначе
			ТекстУсловияКорСчета = " КорСчет НЕ В (&КорСчетВсе)";
		КонецЕсли;
		НовоеЗначение = МакетКомпоновки.ЗначенияПараметров.Добавить();
		НовоеЗначение.Имя      = "КорСчетВсе";
		НовоеЗначение.Значение = КорСчетаВсе;
		
		ИсходныйТекстЗапроса = ПостояннаяЧастьЗапроса + ТекстУсловияКорСчета + ЗавершающаяЧастьЗапроса;
	КонецЕсли;
	
	Если Не ПустаяСтрока(КонечныйТекстЗапроса) Тогда
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + КонечныйТекстЗапроса;
	Иначе
		КонечныйТекстЗапроса = ИсходныйТекстЗапроса;
	КонецЕсли;
	
	КонечныйТекстЗапроса = СокрЛП(СтрЗаменить(КонечныйТекстЗапроса, "РАЗРЕШЕННЫЕ", ""));
	КонечныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + Сред(КонечныйТекстЗапроса, 8); 
	
	МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Элементы.Обороты.Запрос = КонечныйТекстЗапроса;
	
	// Обработка макета компоновки для вывода.
	МакетШапкиОтчета = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетШапки(МакетКомпоновки);
		
	КолонкаКорСчета = 1;
	Для Каждого СтрокаМакета Из МакетШапкиОтчета.Макет Цикл
		КолонкаМакета = 0;
		Для Каждого Ячейка Из СтрокаМакета.Ячейки Цикл
			Если Ячейка.Элементы.Количество() = 1 Тогда
				Если ТипЗнч(Ячейка.Элементы[0].Значение) = Тип("Строка") 
					И ВРег(Строка(Ячейка.Элементы[0].Значение)) = "КОР. СЧЕТ" Тогда 
					КолонкаКорСчета = КолонкаМакета;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			КолонкаМакета = КолонкаМакета + 1;
		КонецЦикла;
	КонецЦикла;
	
	КоличествоГруппировок = 1 + ?(ПараметрыОтчета.Периодичность > 0, 1, 0);
	Для Каждого СтрокаТаблицы Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаТаблицы.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоОсновныхГруппировок = КоличествоГруппировок;
	
	КоличествоКорГруппировок = 0;
	ЕстьКорПодразделение = Ложь;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.ГруппировкаКор Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоКорСубконто = СтрЧислоВхождений(СтрокаГруппировки.ПоСубконто, "+");
			
			Если СтрНайти(СтрокаГруппировки.ПоСубконто, "+0") > 0 Тогда
				КоличествоКорСубконто = КоличествоКорСубконто - 1;
				ЕстьКорПодразделение = Истина;
			КонецЕсли;
			
			КоличествоКорГруппировок = Макс(КоличествоКорГруппировок, КоличествоКорСубконто);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоКорГруппировок = КоличествоКорГруппировок + ?(ЕстьКорПодразделение, 2, 1);
	
	КоличествоСтрокШапки = Макс(КоличествоГруппировок, КоличествоКорГруппировок);
	ПараметрыОтчета.Вставить("ВысотаШапки", КоличествоСтрокШапки);
	
	МассивДляУдаления = Новый Массив;
	Для Индекс = КоличествоСтрокШапки По МакетШапкиОтчета.Макет.Количество() - 1 Цикл
		МассивДляУдаления.Добавить(МакетШапкиОтчета.Макет[Индекс]);
	КонецЦикла;
	
	КоличествоСтрок = МакетШапкиОтчета.Макет.Количество();
	Для ИндексСтроки = 1 По КоличествоСтрок - 1 Цикл
		СтрокаМакета = МакетШапкиОтчета.Макет[ИндексСтроки];
		
		КоличествоКолонок = СтрокаМакета.Ячейки.Количество();
		
		Для ИндексКолонки = КоличествоКолонок - 3 По КоличествоКолонок - 1 Цикл
			Ячейка = СтрокаМакета.Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	КоличествоКолонок = МакетШапкиОтчета.Макет[0].Ячейки.Количество();
	МаксимальныйИндексКорКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл
		Если КоличествоОсновныхГруппировок > 1 Тогда
			Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
				ЯчейкаПриемник = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
				ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоОсновныхГруппировок + ИндексСтроки - 1].Ячейки[ИндексКолонки];
				
				ЯчейкаПриемник.Элементы.Очистить();
				Для Каждого Элемент Из ЯчейкаИсточник.Элементы Цикл
					НовыйЭлемент = ЯчейкаПриемник.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
					Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
					ЗаполнитьЗначенияСвойств(ЯчейкаПриемник.Оформление.Элементы[Индекс], Элемент);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексКолонки = КолонкаКорСчета По МаксимальныйИндексКорКолонки Цикл 
		ЯчейкаИсточник = МакетШапкиОтчета.Макет[КоличествоКорГруппировок - 1].Ячейки[ИндексКолонки];
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			Для Каждого Элемент Из ЯчейкаИсточник.Оформление.Элементы Цикл
				Индекс = ЯчейкаИсточник.Оформление.Элементы.Индекс(Элемент);
				ЗаполнитьЗначенияСвойств(Ячейка.Оформление.Элементы[Индекс], Элемент);
			КонецЦикла;
		КонецЦикла;
		Для ИндексСтроки = 0 По КоличествоКорГруппировок - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
		КонецЦикла;
		Для ИндексСтроки = КоличествоКорГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл 
		Для ИндексСтроки = КоличествоОсновныхГруппировок По КоличествоСтрокШапки - 1 Цикл
			Ячейка = МакетШапкиОтчета.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
		КонецЦикла;
	КонецЦикла;
		
	МакетГруппировкиСчетЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Заголовок");
	МакетГруппировкиСчетПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Счет", , "Подвал");
	
	МакетГруппировкиСубконтоЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Заголовок");
	МакетГруппировкиСубконтоПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Субконто", , "Подвал");
	
	МакетГруппировкиПодразделениеЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Заголовок");
	МакетГруппировкиПодразделениеПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Подразделение", , "Подвал");
	
	МакетГруппировкиОрганизацияЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Заголовок");
	МакетГруппировкиОрганизацияПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Организация", , "Подвал");

	МакетГруппировкиВалютаЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Заголовок");
	МакетГруппировкиВалютаПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Валюта", , "Подвал");

	МакетГруппировкиПериодЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Заголовок");
	МакетГруппировкиПериодПодвал    = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Период", , "Подвал");

	
	МакетГруппировкиКорЗаголовок = БухгалтерскиеОтчетыВызовСервера.ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, "Кор", , "Заголовок");

	Для Каждого Элемент Из МассивДляУдаления Цикл
		МакетШапкиОтчета.Макет.Удалить(Элемент);
	КонецЦикла;

	Для Каждого Макет Из МакетКомпоновки.Макеты Цикл 
		МассивДляУдаления.Очистить();
		Если МакетГруппировкиСчетЗаголовок.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаЗаголовок.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = КоличествоПоказателей По Макет.Макет.Количество() - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			Ячейка01 = Макет.Макет[0].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка01.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Начальное сальдо'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение); 
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка01.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		КонецЕсли;
		
		Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено 
			ИЛИ МакетГруппировкиСубконтоПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПодразделениеПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиОрганизацияПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиВалютаПодвал.Найти(Макет) <> Неопределено
			ИЛИ МакетГруппировкиПериодПодвал.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);
			КонецЦикла;
			Ячейка00 = Макет.Макет[0].Ячейки[0];
			ПараметрОтступ = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(Ячейка00.Оформление.Элементы, "Отступ");
			
			Если МакетГруппировкиСчетПодвал.Найти(Макет) <> Неопределено Тогда
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей  * 3 - 1 Цикл
					Для Каждого Ячейка Из Макет.Макет[ИндексСтроки].Ячейки Цикл
						// Выделим область итогов полужирным шрифтом.
						ШрифтИтога = Ячейка.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
						Если ШрифтИтога <> Неопределено Тогда
							ШрифтНаЗамену = Новый Шрифт(ШрифтИтога.Значение,,, Истина);
							БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "Шрифт", ШрифтНаЗамену);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			// Область итога "Оборот".
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей].Ячейки Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для Каждого ПараметрМакета Из Макет.Параметры Цикл
				Если ТипЗнч(ПараметрМакета) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
					Для Каждого ВыражениеПоля Из ПараметрМакета.ВыраженияПолей Цикл
						Если ВыражениеПоля.Поле = "БухТипРесурса" Тогда
							ПараметрМакета.ВыраженияПолей.Удалить(ВыражениеПоля);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			ЯчейкаN1 = Макет.Макет[КоличествоПоказателей].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = ЯчейкаN1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Оборот'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЯчейкаN1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		
			Для Индекс = 0 По Макет.Макет.Количество() - 1 Цикл
				Ячейка = Макет.Макет[Индекс].Ячейки[КолонкаКорСчета];
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Ложь);
			КонецЦикла;
			
			// Область итога "Конечное сальдо".
			Для Каждого Ячейка Из Макет.Макет[КоличествоПоказателей * 2].Ячейки Цикл
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);	
			КонецЦикла;
			
			Ячейка2N1 = Макет.Макет[КоличествоПоказателей * 2].Ячейки[КолонкаКорСчета];
			НовыйЭлемент = Ячейка2N1.Элементы.Добавить(Тип("ПолеОбластиКомпоновкиДанных"));
			НовыйЭлемент.Значение = НСтр("ru = 'Конечное сальдо'");
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Отступ", ПараметрОтступ.Значение);
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка2N1.Оформление.Элементы, "Размещение", ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
			
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
				Для ИндексСтроки = КоличествоПоказателей * 2 + 1 По КоличествоПоказателей * 3 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если МакетГруппировкиКорЗаголовок.Найти(Макет) <> Неопределено Тогда
			КоличествоПоказателей = Макет.Макет.Количество() / 3;
			Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			Для Индекс = КоличествоПоказателей * 2 По КоличествоПоказателей * 3 - 1 Цикл
				МассивДляУдаления.Добавить(Макет.Макет[Индекс]);  
			КонецЦикла;
			
			КоличествоКолонок = Макет.Макет[0].Ячейки.Количество();
			МаксимальныйИндексКолонки = ?(КоличествоПоказателей > 1, КоличествоКолонок - 4, КоличествоКолонок - 3);
			Для ИндексКолонки = 0 По МаксимальныйИндексКолонки Цикл
				Ячейка = Макет.Макет[КоличествоПоказателей].Ячейки[ИндексКолонки];
				Ячейка01 = Макет.Макет[0].Ячейки[ИндексКолонки];
				Для Каждого Элемент Из Ячейка01.Элементы Цикл
					НовыйЭлемент = Ячейка.Элементы.Добавить(ТипЗнч(Элемент));
					ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
				КонецЦикла; 
				
				Для Каждого Элемент Из Ячейка01.Оформление.Элементы Цикл
					Индекс = Ячейка01.Оформление.Элементы.Индекс(Элемент);
					Приемник = Ячейка.Оформление.Элементы[Индекс];
					ЗаполнитьЗначенияСвойств(Приемник, Элемент);
				КонецЦикла;
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Ложь);
			КонецЦикла;
			
			Для ИндексКолонки = 1 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоГоризонтали", Истина);
				КонецЦикла;
			КонецЦикла;
			Для ИндексКолонки = 0 По КолонкаКорСчета - 1 Цикл
				Для ИндексСтроки = КоличествоПоказателей + 1 По КоличествоПоказателей * 2 - 1 Цикл
					Ячейка = Макет.Макет[ИндексСтроки].Ячейки[ИндексКолонки];
					БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Ячейка.Оформление.Элементы, "ОбъединятьПоВертикали", Истина);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;

		Для Каждого Элемент Из МассивДляУдаления Цикл
			Макет.Макет.Удалить(Элемент);
		КонецЦикла;

	КонецЦикла;
	
	Если Не ПараметрыОтчета.ПоСубсчетам Тогда
		Для Каждого Макет Из МакетКомпоновки.Макеты Цикл
			Если ТипЗнч(Макет.Макет) = Тип("МакетГруппировкиДиаграммыОбластиКомпоновкиДанных")
				ИЛИ ТипЗнч(Макет.Макет) = Тип("МакетРесурсаДиаграммыОбластиКомпоновкиДанных") Тогда
				Для Каждого Параметр Из Макет.Параметры Цикл
					Если ТипЗнч(Параметр) = Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
						ВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
						ВыражениеПоля.Поле      = "Счет";
						ВыражениеПоля.Выражение = "&Счет";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Снимем флаг Игнорировать значение Null для реквизитов субконто.
	Для ИндексСубконто = 1 По 3 Цикл
		Для Каждого Поле Из МакетКомпоновки.НаборыДанных.ОсновнойНаборДанных.Поля Цикл
			
			Если Лев(Поле.ПутьКДанным, 10) = "Субконто" + ИндексСубконто + "." Тогда
				
				Поле.Роль.ИгнорироватьЗначенияNULL = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет контрольное соотношение "начальные остатки + обороты Дт - обороты Кт = конечные остатки".
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - содержит результат формирования отчета.
//
Процедура ПроверитьКорректностьИтогов(ПараметрыОтчета, Результат) Экспорт

	ДополнительныеСвойства = ПараметрыОтчета.НастройкиКомпоновкиДанных.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("КонтрольноеСоотношениеИтоговВыполняется", Истина);
	
	ОбластьИтогов = БухгалтерскиеОтчеты.ОбластьЧтенияИтогов(ПараметрыОтчета);
	Если ОбластьИтогов.РазделительДробнойЧасти = Неопределено // нет однозначного представления сумм в ячейках
	 Или ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный = 0 // единственный показатель - это "Контроль"
		Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КонтрольноеСоотношение = 0;
	
	// Определяем позиции колонок с суммами из шапки.
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	ПоследняяИзЯчеекИтогов = Результат.ШиринаТаблицы;

	ФлагиОбщегоИтога = ОбластьИтогов.ФлагиОбщегоИтога;
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов - 1, -1); // сумма Дт
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов, 1);      // сумма Кт

	// Сальдо начальное.
	ОбластьИтогов.ПерваяИзСтрокИтогов = ПараметрыОтчета.ВысотаШапки + 1;
	Если ПараметрыОтчета.ВыводитьЗаголовок Тогда
		ОбластьЗаголовок = Результат.Области.Найти("Заголовок");
		Если ОбластьЗаголовок <> Неопределено Тогда
			ОбластьИтогов.ПерваяИзСтрокИтогов = ОбластьИтогов.ПерваяИзСтрокИтогов + ОбластьЗаголовок.Низ;
		КонецЕсли;
	КонецЕсли;
	ОбластьИтогов.ПоследняяИзСтрокИтогов = ОбластьИтогов.ПерваяИзСтрокИтогов + КоличествоПоказателей - 1;
	Если ПараметрыОтчета.ПоказательКонтроль Тогда
		ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный = ОбластьИтогов.ПерваяИзСтрокИтогов
			+ ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный - 1;
	КонецЕсли;
	БухгалтерскиеОтчеты.ДополнитьКонтрольноеСоотношение(Результат, ОбластьИтогов, КонтрольноеСоотношение);

	// Обороты за период.
	ОбластьИтогов.ПоследняяИзСтрокИтогов = Результат.ВысотаТаблицы - КоличествоПоказателей;
	ОбластьИтогов.ПерваяИзСтрокИтогов = ОбластьИтогов.ПоследняяИзСтрокИтогов - КоличествоПоказателей + 1;
	Если ПараметрыОтчета.ПоказательКонтроль Тогда
		ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный = ОбластьИтогов.ПерваяИзСтрокИтогов
			+ ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный - 1;
	КонецЕсли;
	БухгалтерскиеОтчеты.ДополнитьКонтрольноеСоотношение(Результат, ОбластьИтогов, КонтрольноеСоотношение);
	
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов - 1, 1);  // сумма Дт
	ФлагиОбщегоИтога.Вставить(ПоследняяИзЯчеекИтогов, -1);     // сумма Кт
	
	// Сальдо конечное.
	ОбластьИтогов.ПоследняяИзСтрокИтогов = ОбластьИтогов.ПоследняяИзСтрокИтогов + КоличествоПоказателей;
	ОбластьИтогов.ПерваяИзСтрокИтогов = ОбластьИтогов.ПерваяИзСтрокИтогов + КоличествоПоказателей;
	Если ПараметрыОтчета.ПоказательКонтроль Тогда
		ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный = ОбластьИтогов.ПерваяИзСтрокИтогов
			+ ОбластьИтогов.НомерСтрокиПоказателяКонтрольОтносительный - 1;
	КонецЕсли;
	БухгалтерскиеОтчеты.ДополнитьКонтрольноеСоотношение(Результат, ОбластьИтогов, КонтрольноеСоотношение);

	Если КонтрольноеСоотношение <> 0 Тогда
		// Проверим, нет ли настройек отбора, которые допускают вывод оборотов без вывода остатков.
		ЭлементыОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы;
		
		Если ПараметрыОтчета.ГруппировкаКор.НайтиСтроки(Новый Структура("Использование", Истина)).Количество() > 0
		 Или БухгалтерскиеОтчеты.ЕстьОтборПоКорполю(ЭлементыОтбора) Тогда
			Возврат;
		КонецЕсли;
		
		ОтбираемыеКорСубконто = Новый Массив;
		БухгалтерскиеОтчеты.СписокОтборовПоСубконто(ЭлементыОтбора, ОтбираемыеКорСубконто, , Истина);
		Если ОтбираемыеКорСубконто.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если БухгалтерскиеОтчеты.ИспользуютсяОборотныеСубконто(ПараметрыОтчета.Счет, ЭлементыОтбора) Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ДополнительныеСвойства.Вставить("КонтрольноеСоотношениеИтоговВыполняется", КонтрольноеСоотношение = 0);
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);

	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСверху = ПараметрыОтчета.ВысотаШапки;
	Иначе
		Результат.ФиксацияСверху = Результат.Области.Заголовок.Низ + ПараметрыОтчета.ВысотаШапки;
	КонецЕсли;
	
	ВыводитьКолонкуСчет = Ложь;
	
	КоличествоГруппировок = 0;
	Для Каждого СтрокаГруппировки Из ПараметрыОтчета.Группировка Цикл
		Если СтрокаГруппировки.Использование Тогда
			КоличествоГруппировок = КоличествоГруппировок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОтчета.ПоСубсчетам ИЛИ ПараметрыОтчета.ПоказательВалютнаяСумма ИЛИ ПараметрыОтчета.Периодичность > 0 ИЛИ КоличествоГруппировок > 0 Тогда 
		ВыводитьКолонкуСчет = Истина;
	КонецЕсли;
	
	Если Не ВыводитьКолонкуСчет Тогда
		Результат.УдалитьОбласть(Результат.Область("C1"), ТипСмещенияТабличногоДокумента.ПоВертикали);	
	КонецЕсли;
	
	Результат.ФиксацияСлева = 0;
	
КонецПроцедуры

// Задает набор показателей, которые позволяет анализировать отчет.
//
// Возвращаемое значение:
//	Массив - основные суммовые показатели отчета.
//
Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("Контроль");
	НаборПоказателей.Добавить("ВалютнаяСумма");
	НаборПоказателей.Добавить("Количество");
	
	Возврат НаборПоказателей;
	
КонецФункции

// Задает набор опций, которые позволяет настраивать отчет.
//
// Возвращаемое значение:
//   Массив      - имена опций.
//
Функция СохраняемыеОпции() Экспорт
	
	КоллекцияНастроек = Новый Массив;
	Для каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Добавить("Показатель" + Показатель);
	КонецЦикла;
	КоллекцияНастроек.Добавить("РазвернутоеСальдо");
	КоллекцияНастроек.Добавить("ПоСубсчетам");
	КоллекцияНастроек.Добавить("ПоСубсчетамКорСчетов");
	КоллекцияНастроек.Добавить("Периодичность");
	КоллекцияНастроек.Добавить("РазмещениеДополнительныхПолей");
	
	Возврат КоллекцияНастроек;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьУсловиеПоВыбраннымРесурсам(ПараметрыОтчета, Схема)
	
	ТекстУсловияДт = "";
	ТекстУсловияКт = "";
	
	Для Каждого ИмяПоказателя Из ПолучитьНаборПоказателей() Цикл
		
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			
			Если ИмяПоказателя = "БУ" Тогда
				
				ИмяПоказателяДляПодстановки = "Сумма";
				
			ИначеЕсли ИмяПоказателя = "ВалютнаяСумма" ИЛИ ИмяПоказателя = "Количество" ИЛИ ИмяПоказателя = "Контроль" Тогда
				
				Продолжить;
				
			Иначе
				
				ИмяПоказателяДляПодстановки = "Сумма" + ИмяПоказателя;
				
			КонецЕсли;
			
			ТекстУсловияДт = ТекстУсловияДт +" ХозрасчетныйОстаткиИОбороты." + ИмяПоказателяДляПодстановки + "ОборотДт -";
			
			ТекстУсловияКт = ТекстУсловияКт +" ХозрасчетныйОстаткиИОбороты." + ИмяПоказателяДляПодстановки + "ОборотКт -";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстУсловияДт <> "" Тогда
		ТекстУсловияДляПодстановкиВЗапрос = "ГДЕ ВЫБОР КОГДА " + Лев(ТекстУсловияДт, СтрДлина(ТекстУсловияДт) - 1) + " <> 0"
		+ " ИЛИ " + Лев(ТекстУсловияКт, СтрДлина(ТекстУсловияКт) - 1) + " <> 0" + " ТОГДА ИСТИНА ИНАЧЕ ИСТИНА КОНЕЦ";
		
		СхемаЭталон = ПолучитьМакет("СхемаКомпоновкиДанных");
		ТекстЗапроса = СхемаЭталон.НаборыДанных.ОсновнойНаборДанных.Элементы.ОсновнойНаборДанных.Запрос;
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстЗапроса, Новый Структура("Условие", ТекстУсловияДляПодстановкиВЗапрос));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//", "");
		Схема.НаборыДанных.ОсновнойНаборДанных.Элементы.ОсновнойНаборДанных.Запрос = ТекстЗапроса;
	КонецЕсли;

КонецПроцедуры

Функция СчетаВИерархии(СчетГруппа)
	
	Если НЕ ЗначениеЗаполнено(СчетГруппа) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетГруппа", СчетГруппа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетГруппа)
	|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

Процедура ДобавитьОтборПоВыводимымПолям(ВыводимыеПоля, Структура, ВыводитьОтбор = Ложь)
	
	// Добавим отбор на пустые строки (Если все выводимые поля для записи равны 0).
	Если НЕ ВыводитьОтбор Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;
	
	ОтборГруппировки = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборГруппировки.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	ПропускатьКонтроль = СтрНайти(ВыводимыеПоля[0], ".Контроль") = 0;
	
	Для Каждого ВыбранноеПоле Из ВыводимыеПоля Цикл
		
		Если СтрНайти(ВыбранноеПоле, ".Контроль") <> 0 И ПропускатьКонтроль Тогда
			Продолжить;
		КонецЕсли;
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировки, ВыбранноеПоле, 0, ВидСравненияКомпоновкиДанных.НеРавно);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область РасшифровкаСтандартныхОтчетов

// Заполняет настройки расшифровки (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки) для переданного экземпляра отчета.
//
// Параметры:
//  Настройки				 - Структура								 - Настройки расшифровки отчета, которые нужно заполнить (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//  Объект					 - ОтчетОбъект								 - Отчет из данных которого нудно собрать универсальные настройки.
//  ДанныеРасшифровки		 - ДанныеРасшифровкиКомпоновкиДанных		 - Данные расшифровки отчета.
//  ИдентификаторРасшифровки - ИдентификаторРасшифровкиКомпоновкиДанных  - Идентификатор расшифровки из ячейки для которой вызвана расшифровка.
//  РеквизитыРасшифровки	 - Структура								 - Реквизиты отчета полученные из контекста расшифровываемой ячейки.
//
Процедура ЗаполнитьНастройкиРасшифровки(Настройки, Объект, ДанныеРасшифровки, ИдентификаторРасшифровки, РеквизитыРасшифровки) Экспорт

	БухгалтерскиеОтчетыРасшифровка.ЗаполнитьНастройкиРасшифровкиПоДаннымСтандартногоОтчета(Настройки, ДанныеРасшифровки, ИдентификаторРасшифровки, Объект, РеквизитыРасшифровки);
	
КонецПроцедуры

// Адаптирует переданные настройки для данного вида отчетов.
// Перед применением настроек расшифровки может возникнуть необходимость учесть особенности этого вида отчетов.
//
// Параметры:
//  Настройки	 - Структура - Настройки которые нужно адаптировать (см. БухгалтерскиеОтчетыКлиентСервер.НовыйУниверсальныеНастройки).
//
Процедура АдаптироватьНастройки(Настройки) Экспорт
	
	// Удалим отбор по счету из настроек, так как в шапке отчета отбор по счету уже задан явно.
	ОтборыДляУдаления = Новый Массив;
	ПолеСчет = Новый ПолеКомпоновкиДанных("Счет");
	Для Каждого ЭлементОтбора Из Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ПолеСчет Тогда
			ОтборыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из ОтборыДляУдаления Цикл
		Настройки.Отбор.Элементы.Удалить(ЭлементДляУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает какими отчетами и при каких условиях может быть расшифрован этот вид отчетов.
//
// Параметры:
//  Правила - ТаблицаЗначений с правилами расшифровки этого отчета см. БухгалтерскиеОтчетыРасшифровка.НовыйПравилаРасшифровки.
//
Процедура ЗаполнитьПравилаРасшифровки(Правила) Экспорт

		Правило = Правила.Добавить();
		Правило.Отчет = "ОтчетПоПроводкам";
		БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса");
		Правило.ШаблонПредставления = НСтр("ru = 'Отчет по проводкам'");

		Правило = Правила.Добавить();
		Правило.Отчет = "КарточкаСчета";
		БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "Счет", "Счет");
		БухгалтерскиеОтчетыРасшифровка.ДобавитьТребуемыйРеквизитРасшифровки(Правило.ТребуемыеРеквизиты, "БухТипРесурса", "БухТипРесурса", "Неопределено");
		// БухТипРесурса (сторона проводки) принимает значения "Дт", "Кт" или может быть не заполнен.
		// Когда БухТипРесурса известен открывается отчет по проводкам который может дать более точную расшифровку используя эту информацию.
		// В остальных случаях будем открывать карточку счета, для этого у БухТипРесурса значение по умолчанию "Неопределено" и правилами наложен фильтр.
		Правило.Условия = Новый Структура("БухТипРесурса", "Неопределено");
		Правило.ШаблонПредставления = НСтр("ru = 'Карточка счета [Счет]'");
	
КонецПроцедуры
	
#КонецОбласти

#КонецЕсли