
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	СохраненныйОтчет  = Параметры.СохраненныйОтчет;
	ИсточникОтчета    = Параметры.ИсточникОтчета;
	ВыбраннаяФорма    = Параметры.ВыбраннаяФорма;
	РезультатВыгрузки = Параметры.РезультатВыгрузки;

	РазделыОтчета = ИзвлечьСохраненныеПоказателиОтчета(СохраненныйОтчет);
	
	ПараметрыВыгрузки = ПараметрыВыгрузкиОтчета(СохраненныйОтчет, РазделыОтчета);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИсточникОтчета);
	Если НЕ ВыгрузкаВозможна(СохраненныйОтчет, ПараметрыВыгрузки, РазделыОтчета, РезультатВыгрузки) Тогда
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки, РазделыОтчета, РезультатВыгрузки);
	Если НЕ РегламентированнаяОтчетность.ПроверитьДанные(РезультатВыгрузки, ДеревоВыгрузки) Тогда
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		Возврат РезультатВыгрузки;
	КонецЕсли;
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	КодировкаФайлаВыгрузки = "windows-1251";
	    	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "УСН");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
		
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИзвлечьСохраненныеПоказателиОтчета(СохраненныйОтчет)
	
	РазделыОтчета = Новый Структура;
	
	ДанныеОтчета = СохраненныйОтчет.ДанныеОтчета.Получить();
	
	Показатели = ДанныеОтчета.ПоказателиОтчета;
	Для Каждого Раздел Из Показатели Цикл
		РазделыОтчета.Вставить(Раздел.Ключ,
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ДополнитьСохраненныеПоказателиОтчета(РазделыОтчета);
	
	Возврат РазделыОтчета;
	
КонецФункции

Процедура ДополнитьСохраненныеПоказателиОтчета(РазделыОтчета)
	
	Раздел11 = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел11.Вставить("П100110004003", Раздел11["П000110004003"] - Раздел11["П000110005003"]);
	Раздел11.Вставить("П100110007003", Раздел11["П000110007003"] - Раздел11["П000110008003"]);
	Раздел11.Вставить("П100110010003", Раздел11["П000110010003"] - Раздел11["П000110011003"]);
	
	Раздел12 = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	Раздел12.Вставить("П100120004003", Раздел12["П000120004003"] - Раздел12["П000120005003"]);
	Раздел12.Вставить("П100120007003", Раздел12["П000120007003"] - Раздел12["П000120008003"]);
	Раздел12.Вставить("П100120010003", Раздел12["П000120010003"] - Раздел12["П000120011003"]);
	
	Раздел22 = РазделыОтчета.ПолеТабличногоДокументаРаздел22;
	Раздел22.Вставить("П100220024003", Раздел22["П000220024003"] - Раздел22["П000220025003"]);
	Раздел22.Вставить("П100220024103", Раздел22["П000220024103"] - Раздел22["П000220025103"]);
	Раздел22.Вставить("П100220024203", Раздел22["П000220024203"] - Раздел22["П000220025203"]);
	Раздел22.Вставить("П100220024303", Раздел22["П000220024303"] - Раздел22["П000220025303"]);
	
КонецПроцедуры

Функция ПараметрыВыгрузкиОтчета(СохраненныйОтчет, РазделыОтчета)
	
	Титульный = РазделыОтчета.ПолеТабличногоДокументаТитульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СохраненныйОтчет.Организация);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("Период", СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("ОтчетГод", Формат(СохраненныйОтчет.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("КодНО", СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("НомКорр", Строка(СохраненныйОтчет.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту", СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭД", СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("Тлф", СокрЛП(Титульный.ТелОрганизации));
	
	Если ЭтоПБОЮЛ Тогда
		ПараметрыВыгрузки.Вставить("ИННФЛ", СокрЛП(СохраненныйОтчет.Организация.ИНН));
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
		
		ПараметрыВыгрузки.Вставить("ФЛФамилия",  ФИО.Фамилия);
		ПараметрыВыгрузки.Вставить("ФЛИмя",      ФИО.Имя);
		ПараметрыВыгрузки.Вставить("ФЛОтчество", ФИО.Отчество);
	Иначе
		// Случай перехода 2.0 -> 3.0.
		Если НЕ Титульный.Свойство("КПП") И Титульный.Свойство("КПП1_1")Тогда
			Титульный.Вставить("КПП");
			Для Ном = 1 По 9 Цикл
				Титульный.КПП = СокрЛП(Титульный.КПП) + ?(Титульный["КПП1_" + Ном] = "-", "", Титульный["КПП1_" + Ном]);
				Титульный.Удалить("КПП1_" + Ном);
			КонецЦикла;
		КонецЕсли;
		
		ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
		ПараметрыВыгрузки.Вставить("ИННОрг",  СокрЛП(СохраненныйОтчет.Организация.ИНН));
		ПараметрыВыгрузки.Вставить("КППОрг",  СокрЛП(Титульный.КПП));
		
		ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
		ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
		ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ПрПодп", СокрЛП(Титульный.ПрПодп));
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ПодпФамилия",  ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ПодпИмя",      ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ПодпОтчество", ФИОПодписанта.Отчество);
	ПараметрыВыгрузки.Вставить("ПодпНаимДок", СокрЛП(Титульный.ДокУпПред));
	ПараметрыВыгрузки.Вставить("ПодпНаимОрг", СокрЛП(Титульный.ОргУп));
	
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки", "NO_USN");
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника",
		?(СохраненныйОтчет.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СохраненныйОтчет.Организация.КодНалоговогоОрганаПолучателя), ""));
	ПараметрыВыгрузки.Вставить("ИдФайл", СформироватьИдФайл(ПараметрыВыгрузки));
	
	// Условия выгрузки отдельных ветвей файла электронного представления.
	Раздел11 = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	Раздел12 = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(Раздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(Раздел12);
	
	Если ЗаполненРаздел11 И НЕ ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Истина;
		ВыгружатьРаздел12 = Ложь;
	ИначеЕсли НЕ ЗаполненРаздел11 И ЗаполненРаздел12 Тогда
		ВыгружатьРаздел11 = Ложь;
		ВыгружатьРаздел12 = Истина;
	Иначе
		ДанныеУчетнойПолитики = ДанныеУчетнойПолитикиУСН(СохраненныйОтчет);
		Если ДанныеУчетнойПолитики.ПрименяетсяУСН Тогда
			ВидОбъектаНалогообложения = ДанныеУчетнойПолитики.КодОбъектаНалогообложенияУСН;
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		Иначе
			// Попытка получить объекта налогообложения в случае, если в отчетном периоде УСН применялась.
			ВидОбъектаНалогообложения = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
				СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаНачала, СохраненныйОтчет.ДатаОкончания);
			Если ВидОбъектаНалогообложения = 1 Тогда
				ВыгружатьРаздел11 = Истина;
				ВыгружатьРаздел12 = Ложь;
			ИначеЕсли ВидОбъектаНалогообложения = 2 Тогда
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Истина;
			Иначе
				ВыгружатьРаздел11 = Ложь;
				ВыгружатьРаздел12 = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел11", ВыгружатьРаздел11);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12", ВыгружатьРаздел12);
	
	ВыгружатьРаздел12_100 = ЗначениеЗаполнено(Раздел12.П000120010003) ИЛИ ЗначениеЗаполнено(Раздел12.П000120011003) ИЛИ НЕ ЗначениеЗаполнено(Раздел12.П000120012003);
	ВыгружатьРаздел12_120 = НЕ ВыгружатьРаздел12_100;
	
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12_100", ВыгружатьРаздел12_100);
	ПараметрыВыгрузки.Вставить("ВыгружатьРаздел12_120", ВыгружатьРаздел12_120);
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННФЛ), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

Функция ВыгрузкаВозможна(СохраненныйОтчет, ПараметрыВыгрузки, РазделыОтчета, Результат)
	
	СтатусПроверки = Истина;
	
	ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки, Результат);
	
	СочетаниеРазделовКорректно = Истина;
	
	ЗаполненРаздел11 = ЗаполненРаздел11(РазделыОтчета.ПолеТабличногоДокументаРаздел11);
	ЗаполненРаздел12 = ЗаполненРаздел12(РазделыОтчета.ПолеТабличногоДокументаРаздел12);
	ЗаполненРаздел21 = ЗаполненРаздел21(РазделыОтчета.ПолеТабличногоДокументаРаздел21);
	ЗаполненРаздел22 = ЗаполненРаздел22(РазделыОтчета.ПолеТабличногоДокументаРаздел22);
	
	ЗаполненоПоКоду1 = ЗаполненРаздел11 ИЛИ ЗаполненРаздел21;
	ЗаполненоПоКоду2 = ЗаполненРаздел12 ИЛИ ЗаполненРаздел22;
	
	ДанныеУчетнойПолитики = ДанныеУчетнойПолитикиУСН(СохраненныйОтчет);
	
	КодВидаОбъекта = Неопределено;
	Если ДанныеУчетнойПолитики.ПрименяетсяУСН Тогда
		КодВидаОбъекта = ДанныеУчетнойПолитики.КодОбъектаНалогообложенияУСН;
	Иначе
		// Попытка получить объект налогообложения в случае, если в отчетном периоде УСН применялась.
		КодВидаОбъекта = РегламентированнаяОтчетность.ОбъектНалогообложенияУСНЗаПериод(
			СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаНачала, СохраненныйОтчет.ДатаОкончания);
	КонецЕсли;
	
	Если КодВидаОбъекта = 1 Тогда
		Если ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 2", "Раздел12", "П000120001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	ИначеЕсли КодВидаОбъекта = 2 Тогда
		Если ЗаполненоПоКоду1 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "При действующей системе налогообложения не допускается заполнение отчета по объектам налогообложения с кодом 1", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		КонецЕсли;
		
	Иначе
		Если ЗаполненоПоКоду1 И ЗаполненоПоКоду2 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "Не допускается одновременное заполнение отчета по объектам налогообложения с кодами 1 и 2", "Раздел11", "П000110001003");
			СтатусПроверки = Ложь;
			СочетаниеРазделовКорректно = Ложь;
		Иначе
			Если НЕ ПараметрыВыгрузки.ВыгружатьРаздел11 И НЕ ПараметрыВыгрузки.ВыгружатьРаздел12 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат, "Не указан объект налогообложения УСН", "Раздел11", "П000110001003");
				СтатусПроверки = Ложь;
				СочетаниеРазделовКорректно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СочетаниеРазделовКорректно Тогда
		
		ПроверятьПоКоду1 = (КодВидаОбъекта = 1)
		               ИЛИ (КодВидаОбъекта <> 2 И ЗаполненоПоКоду1)
		               ИЛИ (КодВидаОбъекта <> 2 И НЕ ЗаполненоПоКоду2);
		
		ПроверятьПоКоду2 = НЕ ПроверятьПоКоду1;
		
		Если ПроверятьПоКоду1 Тогда
			ПроверитьЗаполнение_Раздел11(РазделыОтчета, СтатусПроверки, Результат);
			ПроверитьЗаполнение_Раздел21(РазделыОтчета, СтатусПроверки, Результат);
		КонецЕсли;
		
		Если ПроверятьПоКоду2 Тогда
			ПроверитьЗаполнение_Раздел12(РазделыОтчета, СтатусПроверки, Результат);
			ПроверитьЗаполнение_Раздел22(РазделыОтчета, СтатусПроверки, Результат);
		КонецЕсли;
		
		ПроверитьЗаполнение_Раздел3(РазделыОтчета, СтатусПроверки, Результат);
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ЗаполненРаздел11(ДанныеРаздела)
	
	СписокПоказателей = "П000110002003,П000110003003,П000110004003,П000110005003,П000110006003,
		|П000110007003,П000110008003,П000110009003,П000110010003,П000110011003";
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел12(ДанныеРаздела)
	
	СписокПоказателей = "П000120002003,П000120003003,П000120004003,П000120005003,П000120006003,
		|П000120007003,П000120008003,П000120009003,П000120010003,П000120011003,П000120012003";
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел21(ДанныеРаздела)
	
	СписокПоказателей
		= "П002110011003,П002110011103,П002110011203,П002110011303,
		  |П002110013003,П002110013103,П002110013203,П002110013303,
		  |П002110014003,П002110014103,П002110014203,П002110014303,
		  |П002120011003,П002120011103,П002120011203,П002120011303,
		  |П002120013003,П002120013103,П002120013203,П002120013303,
		  |П002120014003,П002120014103,П002120014203,П002120014303,
		  |П002120015003,П002120015103,П002120015203,П002120015303,
		  |П002120016003,П002120016103,П002120016203,П002120016303";
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция ЗаполненРаздел22(ДанныеРаздела)
	
	СписокПоказателей
		= "П000220021003,П000220021103,П000220021203,П000220021303,
		  |П000220022003,П000220022103,П000220022203,П000220022303,П000220023003,
		  |П000220024003,П000220024103,П000220024203,П000220024303,
		  |П000220025003,П000220025103,П000220025203,П000220025303,
		  |П000220027003,П000220027103,П000220027203,П000220027303,П000220028003";
	Возврат РазделЗаполнен(ДанныеРаздела, СписокПоказателей);
	
КонецФункции

Функция РазделЗаполнен(ДанныеРаздела, СписокПоказателей)
	
	ИменаПоказателей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	
	Результат = Ложь;
	
	Для Каждого ИмяПоказателя Из ИменаПоказателей Цикл
		ИмяПоказателя = СокрЛП(ИмяПоказателя);
		Если ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя]) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЗаполнение_ТитульныйЛист(ПараметрыВыгрузки, СтатусПроверки, Результат)
	
	ЭтоПБОЮЛ = ПараметрыВыгрузки.ЭтоПБОЮЛ;
	
	ВозможныеКодыПериода = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("34,50,95,96"); // ограничено форматом выгрузки
	ВозможныеКодыПоМесту = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("120,210,215"); // ограничено форматом выгрузки
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Период) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код налогового периода",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПериода.Найти(ПараметрыВыгрузки.Период) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе задан некорректный код налогового периода",
		"Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код налогового органа",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(ПараметрыВыгрузки.КодНО)) <> 4 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе неверно задан код налогового органа",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задан код места, по которому представляется документ",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе задан некорректный код места, по которому представляется документ",
		"Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе не задано значение кода вида деятельности по ОКВЭД",
		"Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭД) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД. Допустимы значения, соответствующие следующим шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).",
		"Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЭтоПБОЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННФЛ) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан ИНН индивидуального предпринимателя",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННФЛ) <> 12 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан ИНН индивидуального предпринимателя",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе не указана фамилия индивидуального предпринимателя",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФЛИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"На титульном листе не указано имя индивидуального предпринимателя",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИННОрг) <> 10 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КППОрг) <> 9 Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Неверно задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не указано полное наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			Если ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"Не задан код формы реорганизации", "Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
				Если ДлинаИННРеорг <> 10
					ИЛИ НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыВыгрузки.ИННРеорг) Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
					"Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации",
					"Титульный", "ИННРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
				ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
				Если ДлинаКППРеорг <> 9 Тогда
					РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
					"Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации",
					"Титульный", "КППРеорганизованнойОрганизации");
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	ПодписаноИндивидуальнымПредпринимателем = (ЭтоПБОЮЛ И ПараметрыВыгрузки.ПрПодп = "1");
	Если НЕ ПодписаноИндивидуальнымПредпринимателем Тогда
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпФамилия) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задана фамилия подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыВыгрузки.ПодпИмя) Тогда
			РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			"Не задано имя подписанта", "Титульный", "ОргПодписант");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И ПустаяСтрока(ПараметрыВыгрузки.ПодпНаимДок) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Не задано наименование документа, удостоверяющего полномочия представителя",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел11(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел11;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000110001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.1 не указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.1 неверно указан код по ОКТМО", "Раздел11", "П000110001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000110003003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000110006003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000110009003", СтатусПроверки, Результат);
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110004003,П000110005003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110007003,П000110008003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000110010003,П000110011003", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел12(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел12;
	
	ОКТМО = СокрЛП(ДанныеРаздела.П000120001003);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО = 0 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.2 не указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	ИначеЕсли ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 010 раздела 1.2 неверно указан код по ОКТМО", "Раздел12", "П000120001003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьОКТМО(ДанныеРаздела, "П000120003003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000120006003", СтатусПроверки, Результат);
	ПроверитьОКТМО(ДанныеРаздела, "П000120009003", СтатусПроверки, Результат);
	
	СочетаниеСтрок = ?(ЗначениеЗаполнено(ДанныеРаздела.П000120010003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120011003), 1, 0)
	               + ?(ЗначениеЗаполнено(ДанныеРаздела.П000120012003), 1, 0);
	Если СочетаниеСтрок > 1 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Допускается заполнение только одной из строк 100, 110 и 120 раздела 1.2",
		"Раздел12", "П000120010003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120004003,П000120005003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120007003,П000120008003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000120010003,П000120011003", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел21(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел21;
	
	ВозможныеПризнакиНалогоплательщика
		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("1,2"); // ограничено форматом выгрузки
	Если НЕ ЗначениеЗаполнено(ДанныеРаздела.П002110010203) Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 102 раздела 2.1.1 не задан признак налогоплательщика", "Раздел21", "П002110010203");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеПризнакиНалогоплательщика.Найти(ДанныеРаздела.П002110010203) = Неопределено Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"В строке 102 раздела 2.1.1 неверно задан признак налогоплательщика", "Раздел21", "П002110010203");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016003 = Окр(ДанныеРаздела.П002120016003);
	Окр_П002110013003 = Окр(ДанныеРаздела.П002110013003);
	Окр_П002110014003 = Окр(ДанныеРаздела.П002110014003);
	Если Окр_П002120016003 > Окр_П002110013003 - Окр_П002110014003 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 160 раздела 2.1.2 должно быть меньше или равно разности значений в строках 130 и 140 раздела 2.1.1", "Раздел21", "П002120016003");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016103 = Окр(ДанныеРаздела.П002120016103);
	Окр_П002110013103 = Окр(ДанныеРаздела.П002110013103);
	Окр_П002110014103 = Окр(ДанныеРаздела.П002110014103);
	Если Окр_П002120016103 > Окр_П002110013103 - Окр_П002110014103 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 161 раздела 2.1.2 должно быть меньше или равно разности значений в строках 131 и 141 раздела 2.1.1", "Раздел21", "П002120016103");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016203 = Окр(ДанныеРаздела.П002120016203);
	Окр_П002110013203 = Окр(ДанныеРаздела.П002110013203);
	Окр_П002110014203 = Окр(ДанныеРаздела.П002110014203);
	Если Окр_П002120016203 > Окр_П002110013203 - Окр_П002110014203 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 162 раздела 2.1.2 должно быть меньше или равно разности значений в строках 132 и 142 раздела 2.1.1", "Раздел21", "П002120016203");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Окр_П002120016303 = Окр(ДанныеРаздела.П002120016303);
	Окр_П002110013303 = Окр(ДанныеРаздела.П002110013303);
	Окр_П002110014303 = Окр(ДанныеРаздела.П002110014303);
	Если Окр_П002120016303 > Окр_П002110013303 - Окр_П002110014303 Тогда
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
		"Значение в строке 163 раздела 2.1.2 должно быть меньше или равно разности значений в строках 133 и 143 раздела 2.1.1", "Раздел21", "П002120016303");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел22(РазделыОтчета, СтатусПроверки, Результат)
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел22;
	
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024003,П000220025003", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024103,П000220025103", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024203,П000220025203", СтатусПроверки, Результат);
	ПроверитьСочетаниеПоказателей(ДанныеРаздела, "П000220024303,П000220025303", СтатусПроверки, Результат);
	
КонецПроцедуры

Процедура ПроверитьЗаполнение_Раздел3(РазделыОтчета, СтатусПроверки, Результат)
	
	Перем Индекс, ИндексСтр;
	
	ДанныеРаздела = РазделыОтчета.ПолеТабличногоДокументаРаздел3;
	
	РегламентированнаяОтчетностьКлиентСервер.УстановитьИндекс(Индекс, ИндексСтр);
	
	Пока ДанныеРаздела.Свойство("П000030000101_" + ИндексСтр) Цикл
		
		СтрокаЗаполнена = ЗначениеЗаполнено(ДанныеРаздела["П000030000101_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000102_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000103_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000104_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000105_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000106_" + ИндексСтр])
		              ИЛИ ЗначениеЗаполнено(ДанныеРаздела["П000030000107_" + ИндексСтр]);
		
		Если СтрокаЗаполнена Тогда
			
			КодВидаПоступления = СокрЛП(ДанныеРаздела["П000030000101_" + ИндексСтр]);
			Если НЕ ЗначениеЗаполнено(КодВидаПоступления) Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке " + ИндексСтр + " раздела 3 не указан код вида поступлений",
				"Раздел3", "П000030000101_" + ИндексСтр);
				СтатусПроверки = Ложь;
			ИначеЕсли СтрДлина(КодВидаПоступления) <> 3 Тогда
				РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
				"В строке " + ИндексСтр + " раздела 3 неверно указан код вида поступлений",
				"Раздел3", "П000030000101_" + ИндексСтр);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентированнаяОтчетностьКлиентСервер.УвеличитьИндекс(Индекс, ИндексСтр);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьОКТМО(ДанныеРаздела, ИмяПоказателя, СтатусПроверки, Результат)
	
	КодРаздела = Сред(ИмяПоказателя, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя, 5, 1) + "." + Сред(ИмяПоказателя, 6, 1);
	КодСтроки = Сред(ИмяПоказателя, 9, 3);
	
	ОКТМО = СокрЛП(ДанныеРаздела[ИмяПоказателя]);
	ДлинаОКТМО = СтрДлина(ОКТМО);
	Если ДлинаОКТМО <> 0 И ДлинаОКТМО <> 8 И ДлинаОКТМО <> 11 Тогда
		ОписаниеОшибки = "В строке " + КодСтроки + " раздела " + НомерРаздела
			+ " неверно указан код по ОКТМО";
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСочетаниеПоказателей(ДанныеРаздела, СписокПоказателей, СтатусПроверки, Результат)
	
	Показатели = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПоказателей);
	ИмяПоказателя1 = Показатели[0];
	ИмяПоказателя2 = Показатели[1];
	
	КодРаздела = Сред(ИмяПоказателя1, 5, 2);
	НомерРаздела = Сред(ИмяПоказателя1, 5, 1) + "." + Сред(ИмяПоказателя1, 6, 1);
	КодСтроки1 = Сред(ИмяПоказателя1, 9, 3);
	КодСтроки2 = Сред(ИмяПоказателя2, 9, 3);
	
	ЗаполненПоказатель1 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя1]);
	ЗаполненПоказатель2 = ЗначениеЗаполнено(ДанныеРаздела[ИмяПоказателя2]);
	
	Если ЗаполненПоказатель1 и ЗаполненПоказатель2 Тогда
		ОписаниеОшибки = "Не допускается одновременное заполнение показателей в строках "
			+ КодСтроки1 + " и " + КодСтроки2 + " раздела " + НомерРаздела;
		РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Результат,
			ОписаниеОшибки, "Раздел" + КодРаздела, ИмяПоказателя1);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьСтруктуруXML(ИсточникОтчета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = Отчеты[ИсточникОтчета].ПолучитьМакет("СхемаВыгрузки505");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 1).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Процедура ЗаполнитьВыгрузкуДанными(ДеревоВыгрузки, ПараметрыВыгрузки, РазделыОтчета, Результат)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки, Результат);
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки, РазделыОтчета);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел, Результат)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(Результат, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр, Результат);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, РазделыОтчета, НомерСтроки = Неопределено)
	
	КоличествоВставленныхУзлов = 0;
	
	Для Каждого Стр из Узел.Строки Цикл
		
		Если КоличествоВставленныхУзлов > 0 Тогда
			КоличествоВставленныхУзлов = КоличествоВставленныхУзлов - 1;
			Продолжить;
		КонецЕсли;
		
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если Стр.Многостраничность Тогда
				ДанныеРаздела = РазделыОтчета[Стр.Раздел];
				Для Каждого СтраницаРаздела Из ДанныеРаздела Цикл
					УзелСтраницы = НовыйУзелИзПрототипа(Стр);
					УзелСтраницы.Многостраничность = Ложь;
					ВиртуальныеДанные = Новый Структура(Стр.Раздел, СтраницаРаздела.Данные);
					ЗаполнитьДаннымиУзел(ВиртуальныеДанные, УзелСтраницы, РазделыОтчета);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
				КонецЦикла;
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			ИначеЕсли Стр.Многострочность Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						ДанныеРаздела = ПараметрыВыгрузки[Стр.Раздел];
					Иначе
						ДанныеРаздела = РазделыОтчета["ПолеТабличногоДокумента" + Стр.Раздел];
					КонецЕсли;
				Иначе
					ДанныеРаздела = ПараметрыВыгрузки;
				КонецЕсли;
				ИмяКонтрольногоПоказателя = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Стр);
				
				НомерСтроки = 1;
				Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				
				Пока ДанныеРаздела.Свойство(ИмяКонтрольногоПоказателя + Постфикс) Цикл
					УзелСтроки = НовыйУзелИзПрототипа(Стр);
					УзелСтроки.Многострочность = Ложь;
					ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(УзелСтроки, Постфикс);
					ЗаполнитьДаннымиУзел(ДанныеРаздела, УзелСтроки, РазделыОтчета);
					КоличествоВставленныхУзлов = КоличествоВставленныхУзлов + 1;
					
					НомерСтроки = НомерСтроки + 1;
					Постфикс = "_" + Формат(НомерСтроки, "ЧГ=");
				КонецЦикла;
				
				РегламентированнаяОтчетность.УдалитьУзел(Стр);
				КоличествоВставленныхУзлов = Макс(0, КоличествоВставленныхУзлов - 1);
				
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, РазделыОтчета);
				
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Раздел) И НЕ ПустаяСтрока(Стр.Ключ) Тогда
					Если ПараметрыВыгрузки.Свойство(Стр.Раздел) Тогда
						// Данные представлены в виде раздела в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Раздел][Стр.Ключ];
					ИначеЕсли ПараметрыВыгрузки.Свойство(Стр.Ключ) Тогда
						// Данные заданы в виде значения в параметрах.
						ЗначениеЭлемента = ПараметрыВыгрузки[Стр.Ключ];
					Иначе
						// Данные находятся в сохраненных данных отчета.
						ЗначениеЭлемента = РазделыОтчета["ПолеТабличногоДокумента" + Стр.Раздел][Стр.Ключ];
					КонецЕсли;
					ВывестиПоказательВXML(Стр, ЗначениеЭлемента);
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				Ключ = Сред(Стр.ЗначениеПоУмолчанию, 2);
				Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, Ключ) Тогда
					ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Ключ]);
				КонецЕсли;
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйУзелИзПрототипа(ПрототипУзла)
	
	РодительУзла = ПрототипУзла.Родитель;
	
	ПозицияИсходногоУзла = РодительУзла.Строки.Индекс(ПрототипУзла);
	НовыйУзел = РодительУзла.Строки.Вставить(ПозицияИсходногоУзла);
	ЗаполнитьЗначенияСвойств(НовыйУзел, ПрототипУзла, , "Родитель, Строки");
	Для Каждого Стр из ПрототипУзла.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Функция СкопироватьУзел(Родитель, Узел)
	
	НовыйУзел = Родитель.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

Функция ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(Узел)
	
	Результат = Неопределено;
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Результат = ИмяПервогоПоказателяМногострочнойЧастиВыгрузки(СтрокаУзла);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				Результат = СокрЛП(СтрокаУзла.Ключ);
			КонецЕсли;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(Узел, Постфикс)
	
	Для Каждого СтрокаУзла из Узел.Строки Цикл
		Если СтрокаУзла.Тип = "С" ИЛИ СтрокаУзла.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			ДополнитьИменаПоказателейМногострочнойЧастиВыгрузки(СтрокаУзла, Постфикс);
		Иначе
			Если ЗначениеЗаполнено(СтрокаУзла.Ключ) Тогда
				СтрокаУзла.Ключ = СокрЛП(СтрокаУзла.Ключ) + Постфикс;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиПоказательВXML(Узел, Знач ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") И НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			ЗначениеПоказателя = "";
		Иначе
			ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателя), Лев(СокрЛП(ЗначениеПоказателя), МаксШирина), ЗначениеПоказателя);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(Узел)
	
	ПустойУзел = ?(Узел.Формат = "N", Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)), НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат ПустойУзел;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251");
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ДанныеУчетнойПолитикиУСН(СохраненныйОтчет)
	
	Результат = Новый Структура("ПрименяетсяУСН, КодОбъектаНалогообложенияУСН", Ложь, 0);
	
	Если НЕ ЗначениеЗаполнено(СохраненныйОтчет.Организация) Тогда
		Возврат Результат;
	КонецЕсли;

	Сведения = Новый СписокЗначений;
	Сведения.Добавить("", "ПрименяетсяУСН");
	Сведения.Добавить("", "ОбъектНалогообложенияУСН");
	ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СохраненныйОтчет.Организация, СохраненныйОтчет.ДатаОкончания, Сведения);
	
	ПрименяетсяУСН = Ложь;
	ОргСведения.Свойство("ПрименяетсяУСН", ПрименяетсяУСН);
	// Учет случая, когда значение ПрименяетсяУСН
	// не заполнено или тип значения отличен от Булево.
	ПрименяетсяУСН = ?(ПрименяетсяУСН = Истина, ПрименяетсяУСН, Ложь);
	
	КодВида = "";
	ОргСведения.Свойство("ОбъектНалогообложенияУСН", КодВида);
	
	Результат.Вставить("ПрименяетсяУСН", ПрименяетсяУСН);
	Результат.Вставить("КодОбъектаНалогообложенияУСН", КодВида);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли