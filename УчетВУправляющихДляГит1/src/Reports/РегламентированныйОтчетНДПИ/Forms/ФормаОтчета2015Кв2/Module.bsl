&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Перем СписокРасшифровкиПоказателей;

&НаСервере
Перем СписокРасшифровкиформулы;

&НаСервере
Перем ТаблицаСоставПоказателей;

&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015Кв2";
	
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДСДМ
		= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11, 10, ДопустимыйЗнак.Неотрицательный));
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы1   = "П0001000001";
	СтруктураРеквизитовФормы.мИдГруппы211 = "П0002110001";
	СтруктураРеквизитовФормы.мИдГруппы212 = "П0002120001";
	СтруктураРеквизитовФормы.мИдГруппы311 = "П0003110001";
	СтруктураРеквизитовФормы.мИдГруппы4   = "П0004000001";
	СтруктураРеквизитовФормы.мИдГруппы51  = "П0005100001";
	СтруктураРеквизитовФормы.мИдГруппы62  = "П0006200001";
	СтруктураРеквизитовФормы.мИдГруппы71  = "П0007100001";
	СтруктураРеквизитовФормы.мИдГруппы73  = "П0007300001";
	
	СтруктураДанныхТитульный = Новый Структура;
	СтруктураДанныхРаздел1   = Новый Структура;
	СтруктураДанныхРаздел6   = Новый Структура;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03300 = Новый Массив;
	
	// Структура содержит имена и число уровней многоуровневых разделов.
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел2", 3);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел3", 3);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел5", 2);
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, СтруктураРеквизитовФормы.мИдГруппы211);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, СтруктураРеквизитовФормы.мИдГруппы212);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, СтруктураРеквизитовФормы.мИдГруппы311);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   СтруктураРеквизитовФормы.мИдГруппы4);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  СтруктураРеквизитовФормы.мИдГруппы51);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  СтруктураРеквизитовФормы.мИдГруппы62);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  СтруктураРеквизитовФормы.мИдГруппы71);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  СтруктураРеквизитовФормы.мИдГруппы73);
	
	мСтруктураИменаКолонокРазделов = Новый Структура;
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  Новый СписокЗначений);
	мСтруктураИменаКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  Новый СписокЗначений);
	
	// Структура содержит данные дополнительных страниц.
	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("Раздел4", "ТаблицаСтраницыРаздел4");
	мСтруктураМногостраничныхРазделов.Вставить("Раздел7", "ТаблицаСтраницыРаздел7");
	
	// Структура исходных строк (минимального кол-ва) многострочных разделов формы.
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, 1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  1);
	
	мСтруктураКолвоКолонокРазделов = Новый Структура;
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1,   3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы211, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы212, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы311, 2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы4,   2);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62,  4);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы71,  3);
	мСтруктураКолвоКолонокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы73,  6);
	
	ЦветЗаполняетсяТолькоВручную                           = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир                           = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир                        = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192);
	ЦветЗаполняетсяОднозначноВручную                       = Новый Цвет(255, 255, 192);
	ЦветЗаполняетсяАвтоматически                           = Новый Цвет(255, 255, 255);

	// Структура цветов раскраски автозаполняемых ячеек.
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
	
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "08/07/2015";
	
	// Код отчета, равен КНД.
	СтруктураРеквизитовФормы.мКодОтчета = 1151054;
	
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки = Новый СписокЗначений;
	СтруктураРеквизитовФормы.ВариантыФорматовВыгрузки.Добавить(СтруктураРеквизитовФормы.мСоставПоказателей, "Формат 5.04", Истина);
	
	СтруктураРеквизитовФормы.КНД = "1151054";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
	
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 = Параметры.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417;
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры 

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("КНД");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мДелитель");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы211");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы212");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы311");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы4");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы51");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы62");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы71");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы73");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ОтключитьВыполнениеРасчета", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВариантыФорматовВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповНеотрицательноеЧислоДСДМ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мПечатьБезШтрихкодаРазрешена");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("НачальноеЗначениеНаимОрганизации", "");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("АдресВоВремХранилищеТаблицаСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("НомераСтраницРазделов3СКодомВидаДПИ03300");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД",  "");
	СтруктураРеквизитовФормы.Вставить("ОКВЭД2", "");
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногоуровневыхРазделов()
	
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		
		ИмяРаздела = Элем.Ключ;
		КолУровней = Элем.Значение;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для ТекУровень = 0 По КолУровней - 1 Цикл
			ТекВетка = ТекВетка.Строки.Добавить();
			ТекВетка.Данные = Новый Структура;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяРаздела);
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоставаПоказателей()
	
	Если ТаблицаСоставПоказателей = Неопределено Тогда
		ТаблицаСоставПоказателей = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТаблицуСоставаПоказателей()
	
	ОписаниеТиповСтрока15 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	
	ТаблицаСоставПоказателей = Новый ТаблицаЗначений;
	
	КолонкиТЗ = ТаблицаСоставПоказателей.Колонки;
	КолонкиТЗ.Добавить("ИмяПоляТаблДокумента",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСоставу",   ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("КодПоказателяПоФорме",     ОписаниеТиповСтрока50);
	КолонкиТЗ.Добавить("ПризнМногострочности",     ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("ТипДанныхПоказателя",      ОписаниеТиповСтрока15);
	КолонкиТЗ.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел4.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
	СтрПерваяСтраница = ТаблицаСтраницыРаздел7.Добавить();
	СтрПерваяСтраница.Представление               = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено )
	
	ИзменитьТаблицуПараметровАвтозаполнения(1, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ВставитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.ВставитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	СохранитьДанныеРаздела(ИмяТекущейСтраницыПанели, Ложь, Ложь);
	
	РасчетНаСервере(ИмяТекущейСтраницыПанели);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	
	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = Форма[ИмяТекТабличногоПоля];

	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(Форма, ИмяТекТабличногоПоля);

	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		
		// Раздел 7 содержит несколько многострочных блоков,
		// Поочередно сохраняем данные дополнительных строк каждого блока.
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы71);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы73);
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы71 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы71].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы71);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ТаблицаДопСтрокГруппы71);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы73 = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы73].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы73);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ТаблицаДопСтрокГруппы73);
		
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// Создаем исходную таблицу значений многостраничных разделов.
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
		СтрТаблицаСтраницы.АвтоматическоеПредставление = Истина;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];

		Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) 
		 ИЛИ (СтрТаблицаСтраницы.Представление = "Новая страница") Тогда
			СтрТаблицаСтраницы.Представление = "Новая страница";
		КонецЕсли;
		
		Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
			СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
		Иначе
			СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
		КонецЕсли;

		Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
		КонецЕсли;
		
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		// Очищаем показатели текущей страницы и, в случае, если
		// страница содержит многострочный раздел, удаляем все
		// дополнительно созданные строки.
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		// Выполняем расчет показателей добавленной страницы.
		Расчет(Форма, ИмяТекущейСтраницыПанели);

		Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальныеОперацииПослеОчисткиЛистаНаКлиенте(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаСервере
Процедура СпециальныеОперацииПослеОчисткиЛистаНаСервере(ИмяСтраницы, УдалениДопЭкз = Истина) Экспорт
	
	СпециальныеОперацииПослеОчисткиЛиста(ЭтаФорма, ИмяСтраницы, УдалениДопЭкз);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпециальныеОперацииПослеОчисткиЛиста(Форма, ИмяСтраницы, УдалениДопЭкз) Экспорт
	
	Расчет(Форма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт

	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 6;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел21";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы211;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел212";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы212;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел31";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел311";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы311;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы4;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	СтрокаУровня1.ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = Истина;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел51";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы51;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы62;
	НовСтр.Область = "МногострочнаяЧасть";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Раздел7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы71;
	НовСтр.Область = "МногострочнаяЧасть71";
	НовСтр.ВысотаСтроки = 2;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы73;
	НовСтр.Область = "МногострочнаяЧасть73";
	НовСтр.ВысотаСтроки = 12;
	
КонецПроцедуры

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп)
	
	Перем ТекТабличноеПоле;
	
	Если ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		ТекТабличноеПоле = "Раздел1";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы211 Тогда
		ТекТабличноеПоле = "Раздел21";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы212 Тогда
		ТекТабличноеПоле = "Раздел212";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы311 Тогда
		ТекТабличноеПоле = "Раздел311";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы4 Тогда
		ТекТабличноеПоле = "Раздел4";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы51 Тогда
		ТекТабличноеПоле = "Раздел51";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы62 Тогда
		ТекТабличноеПоле = "Раздел6";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы71 Тогда
		ТекТабличноеПоле = "Раздел7";
	ИначеЕсли ИдГруппы = ИдГрупп.мИдГруппы73 Тогда
		ТекТабличноеПоле = "Раздел7";
	КонецЕсли;
	
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1",   СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы211", СтруктураРеквизитовФормы.мИдГруппы211);
	ИдГрупп.Вставить("мИдГруппы212", СтруктураРеквизитовФормы.мИдГруппы212);
	ИдГрупп.Вставить("мИдГруппы311", СтруктураРеквизитовФормы.мИдГруппы311);
	ИдГрупп.Вставить("мИдГруппы4",   СтруктураРеквизитовФормы.мИдГруппы4);
	ИдГрупп.Вставить("мИдГруппы51",  СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы62",  СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы71",  СтруктураРеквизитовФормы.мИдГруппы71);
	ИдГрупп.Вставить("мИдГруппы73",  СтруктураРеквизитовФормы.мИдГруппы73);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ЭтаФорма, ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(Форма, ИмяЛиста = Неопределено, ТекущаяСтраница = Неопределено, ИдГрупп)
	
	Перем ИмяГруппы;

	Если ИмяЛиста = Неопределено Тогда
		ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;
	
	Если ИмяТекущейСтраницыПанели = "Раздел1" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел21" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы211;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел212" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы212;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел311" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы311;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел4" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел51" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы51;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел6" Тогда
		ИмяГруппы = ИдГрупп.мИдГруппы62;
	ИначеЕсли ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ИмяТабличногоПоля)
	
	ТабличноеПоле = Форма[ИмяТабличногоПоля];

	СтруктураДанныхПоля = Новый Структура;

	Для Инд = 0 По ТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ТабличноеПоле.Области[Инд];

		Если НЕ Тип(ТекущаяОбласть) = Тип("РисунокТабличногоДокумента") И Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		ИмяПоказателя      = ТекущаяОбласть.Имя;
		ЗначениеПоказателя = ТекущаяОбласть.Значение;
		
		СтруктураДанныхПоля.Вставить(ИмяПоказателя, ЗначениеПоказателя);

	КонецЦикла;

	Возврат СтруктураДанныхПоля;
	
КонецФункции

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	ИзмененияПроизошли = Истина;
	
	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = ЭтаФорма[ИмяТекТабличногоПоля];
	
	Попытка
		ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		Если Лев(ИмяПоказателя, 1) = "_" Тогда
			Возврат ИзмененияПроизошли;
		КонецЕсли;
	Исключение
		ИзмененияПроизошли = Ложь;
	КонецПопытки;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции

&НаСервере
Процедура ПоказатьПериод()
	
	ЗаполнитьПериодОтчета(ЭтаФорма);
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиенте
Процедура УправлениеЛистамиНаКлиенте(ТипНП = Неопределено) Экспорт

	УправлениеЛистами(ЭтаФорма, ТипНП);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЛистами(Форма, ТипНП = Неопределено)
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, НаимНО, ТипНП, ТелОрганизации, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = ИНН;
		Форма.ТабличныйДокумент.Области.КПП.Значение = КПП;
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		Форма.ТабличныйДокумент.Области.НалоговыйОрган.Значение = КодНО;
		
		Если Форма.СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		Форма.ТабличныйДокумент.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
		Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = Форма.ТабличныйДокумент.Области.НаимОрг.Значение;
		
		Форма.ТабличныйДокумент.Области.ТелОрганизации.Значение = СокрЛП(СведенияОбОрганизации.ТелОрганизации);
						
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(Форма.ДатаПодписи, Форма.СтруктураРеквизитовФормы);
	РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(Форма.ДатаПодписи,
																	 Форма.СтруктураРеквизитовФормы,
																	 Форма.ТабличныйДокумент.Области.ОКВЭД.Значение);
	
	Форма.ЗаполнитьСведенияОПодписантах();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОПодписантах() Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	//выясним, есть ли представитель
	КодНО = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП   = СокрЛП(ТабличныйДокумент.Области.КПП.Значение);

	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		//представителя нет
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			//подписант - руководитель
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук), СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));	
		КонецЕсли;
	Иначе
		//есть представитель, подписант - он
	    Подписант 								= СведенияОПредставителе.ФИОПредставителя;
 		НаименованиеОрганизацииПредставителя 	= СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя 					= СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ТабличныйДокумент.Области.ПрПодп.Значение = ТипПодписанта;
	ТабличныйДокумент.Области.ОргПодписант.Значение = Подписант;
	ТабличныйДокумент.Области.ОргУп.Значение = НаименованиеОрганизацииПредставителя;
	ТабличныйДокумент.Области.ДокУпПред.Значение = ДокументПредставителя;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Истина);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	
	Если СтруктураРеквизитовФормы.ДоступенМеханизмПечатиРеглОтчетностиСДвухмернымШтрихкодомPDF417 Тогда
		мПараметры.Вставить("РазрешитьВстроеннуюПечать", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	ПараметрыФормы.Вставить("мСчетчикСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	#Если ВебКлиент Тогда
		ИзменитьТаблицуВариантовЗаполненияНаСервере();
	#Иначе
		РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(
		ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	#КонецЕсли
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов, СтрПоля = Неопределено)
	
	ПрефиксИменМакетов = "ПечатныйБланк2015Кв2_";
	
	СоответствиеРазделовМакетам = Новый Соответствие;
	
	СоответствиеРазделовМакетам.Вставить("Титульный", ПрефиксИменМакетов + "Титульный");
	СоответствиеРазделовМакетам.Вставить("Раздел1",   ПрефиксИменМакетов + "Раздел1");
	СоответствиеРазделовМакетам.Вставить("Раздел2",   ПрефиксИменМакетов + "Раздел2");
	СоответствиеРазделовМакетам.Вставить("Раздел211", ПрефиксИменМакетов + "Раздел211");
	СоответствиеРазделовМакетам.Вставить("Раздел3",   ПрефиксИменМакетов + "Раздел3");
	СоответствиеРазделовМакетам.Вставить("Раздел4",   ПрефиксИменМакетов + "Раздел4");
	СоответствиеРазделовМакетам.Вставить("Раздел5",   ПрефиксИменМакетов + "Раздел5");
	СоответствиеРазделовМакетам.Вставить("Раздел6",   ПрефиксИменМакетов + "Раздел6");
	СоответствиеРазделовМакетам.Вставить("Раздел7",   ПрефиксИменМакетов + "Раздел7");
	СоответствиеРазделовМакетам.Вставить("Раздел72",  ПрефиксИменМакетов + "Раздел72");
	СоответствиеРазделовМакетам.Вставить("Раздел73",  ПрефиксИменМакетов + "Раздел73");
	
	МЧБРаздела = СоответствиеРазделовМакетам[Парам1.ИмяСтраницы];
	
	МакетМЧБ = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(МЧБРаздела);
	МакетМЧБ.ПолеСверху = 5;
	МакетМЧБ.ПолеСправа = 5;
	МакетМЧБ.ПолеСнизу  = 5;
	МакетМЧБ.ПолеСлева  = 5;
	
	ВремПоля = Новый Структура(СтрПоля);
	
	ИдГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(Парам1.ИмяСтраницы);
	
	Если Парам1.ИмяСтраницы = "Раздел7" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы71;
	ИначеЕсли Парам1.ИмяСтраницы = "Раздел73" Тогда
		ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы73;
	КонецЕсли;
	
	Если ИдГруппы <> Неопределено Тогда
		
		ИсхКолвоСтрокБлока = 0;
		
		// Определение исходного количества строк на листе МЧБ.
		Если Парам1.ИмяСтраницы = "Раздел1" Тогда
			ИсхКолвоСтрокБлока = 8;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел4" Тогда
			ИсхКолвоСтрокБлока = 3;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел6" Тогда
			ИсхКолвоСтрокБлока = 7;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел7" Тогда
			ИсхКолвоСтрокБлока = 19;
		ИначеЕсли Парам1.ИмяСтраницы = "Раздел73" Тогда
			ИсхКолвоСтрокБлока = 4;
		КонецЕсли;
		
		СохрТабличныйДокумент = Новый ТабличныйДокумент;
		СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
		
		ТекКолвоСтрокБлока = ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]].Количество();
		Если ТекКолвоСтрокБлока > 0 И ИсхКолвоСтрокБлока > 0 Тогда
			//Добавляли строки - значит будут доп. листы МЧБ
			//Определение общего количества листов МЧБ
			КолвоЛистовМЧБ = Цел(ТекКолвоСтрокБлока / ИсхКолвоСтрокБлока);
			КолвоСтрокНаПоследнемЛисте = ТекКолвоСтрокБлока % ИсхКолвоСтрокБлока;
			Если КолвоСтрокНаПоследнемЛисте <> 0 Тогда
				КолвоЛистовМЧБ = КолвоЛистовМЧБ + 1;	
			КонецЕсли;
			
			//заполнение строки имен показателей (для проверки перед переименованием)
			СтрИменаПоказателей = "";
			
			Колонки = ДанныеФормыВЗначение(ЭтаФорма[мСтруктураМногострочныхРазделов[ИдГруппы]], Тип("ТаблицаЗначений")).Колонки;
			
			Для каждого КолонкаСтруктуры Из Колонки Цикл
				СтрИменаПоказателей = СтрИменаПоказателей + КолонкаСтруктуры.Имя;
			КонецЦикла;
			
			//Заполнение списка листов МЧБ
			СписокЛистовМЧБ = Новый СписокЗначений;
			Для Сч = 1 По КолвоЛистовМЧБ Цикл
				
				СписокОчищаемыхОбластей = Новый Массив;
				СписокОбластейПереименования = Новый СписокЗначений;
				
				Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
					ИмяЯчейки = ТекущаяОбласть.Имя;
					
					Если СтрДлина(ИмяЯчейки) < 13 ИЛИ СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
						//проверка на вхождение в данную многострочную часть
						Продолжить;
					КонецЕсли;
					
					//определение и обрасывание НомерЯчейки
					ПоказательИНомерСтрокиСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Истина); // ВМЕСТЕ с разделителем
					ПоказательИНомерСтроки = Лев(ПоказательИНомерСтрокиСРазделителем,СтрДлина(ПоказательИНомерСтрокиСРазделителем) - 1);
					НомерЯчейки = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
					//определение СмысловаяЧасть и ТекущийСчетчик
					СмысловаяЧастьСРазделителем = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Истина); // ВМЕСТЕ с разделителем
					СмысловаяЧасть = Лев(СмысловаяЧастьСРазделителем,СтрДлина(СмысловаяЧастьСРазделителем) - 1);
					ТекущийСчетчик = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСмысловуюЧастьИмениЯчейки(ПоказательИНомерСтроки, Ложь);
					
					//Окончательная проверка на вхождение в данную многострочную часть
					Если СтрНайти(СтрИменаПоказателей,СмысловаяЧасть) = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйСчетчик = Число(ТекущийСчетчик) + ?(Сч = 1, 0, ИсхКолвоСтрокБлока);
					Если НовыйСчетчик > ТекКолвоСтрокБлока Тогда
						СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
						Продолжить;
					КонецЕсли;
					
					//Подготовка к переименованию
					//заполнение списка: значение - область, представление - будущее имя
					СписокОбластейПереименования.Добавить(ТекущаяОбласть, СмысловаяЧасть + "_" + Формат(НовыйСчетчик, "ЧГ=") + "_" + НомерЯчейки);
				КонецЦикла;
				
				Если Парам1.ИмяСтраницы <> "Раздел4" Тогда
					Если Сч > 1 Тогда
						Для каждого ТекущаяОбласть Из МакетМЧБ.Области Цикл
							ИмяЯчейки = ТекущаяОбласть.Имя;
							Если Лев(ИмяЯчейки, 2) = "П0" И СтрНайти(СтрИменаПоказателей, Лев(ИмяЯчейки, 13)) = 0 Тогда
								СписокОчищаемыхОбластей.Добавить(ТекущаяОбласть);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				//Очищение
				Для каждого ОбластьСписка Из СписокОчищаемыхОбластей Цикл
					ОбластьСписка.Имя = "";
					ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
				КонецЦикла;
				
				//Переименование
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				
				СписокЛистовМЧБ.Добавить(МакетМЧБ.ПолучитьОбласть());
			КонецЦикла;
			
			Для каждого элЛистМЧБ Из СписокЛистовМЧБ Цикл
				
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(СохрТабличныйДокумент);

				ЛистМЧБ = элЛистМЧБ.Значение;
				
				ЗаполнитьМакетМЧБ(Парам1, ЛистМЧБ, ОбщиеРеквизитыРазделов);
				
				Если СписокЛистовМЧБ.Индекс(элЛистМЧБ)<СписокЛистовМЧБ.Количество() - 1 Тогда
					//Выводится не последний лист многострочной серии листов МЧБ
					//Необходимо обнулить итоговые показатели
					ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ЛистМЧБ);
				КонецЕсли;
				
				Если Парам1.ИмяСтраницы = "Раздел4" Тогда
					МассивОчищаемыхОбластейТекущегоЛистаРаздел4 = Новый Массив;
					Если СписокЛистовМЧБ.Количество() > 1 Тогда
						НомерЛистаМЧБ = СписокЛистовМЧБ.Индекс(элЛистМЧБ) + 1;
						Если НомерЛистаМЧБ > 1 Тогда
							Для каждого ТекущаяОбласть Из ЛистМЧБ.Области Цикл
							ИмяЯчейки = Лев(ТекущаяОбласть.Имя, 13);
								Если ИмяЯчейки = "П000400001003" ИЛИ ИмяЯчейки = "П000400002003"
									ИЛИ ИмяЯчейки = "П000400003003" ИЛИ ИмяЯчейки = "П000400004003"
									ИЛИ ИмяЯчейки = "П000400005003" ИЛИ ИмяЯчейки = "П000400005004"
									ИЛИ ИмяЯчейки = "П000400005005" ИЛИ ИмяЯчейки = "П000400006003"
									ИЛИ ИмяЯчейки = "П000400007003" Тогда
									МассивОчищаемыхОбластейТекущегоЛистаРаздел4.Добавить(ТекущаяОбласть);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Если НомерЛистаМЧБ < СписокЛистовМЧБ.Количество() Тогда
							Для каждого ТекущаяОбласть Из ЛистМЧБ.Области Цикл
								ИмяЯчейки = Лев(ТекущаяОбласть.Имя, 13);
								Если ИмяЯчейки = "П000400008003" ИЛИ ИмяЯчейки = "П000400009003"
									ИЛИ ИмяЯчейки = "П000400010003" ИЛИ ИмяЯчейки = "П000400011003"
									ИЛИ ИмяЯчейки = "П000400012003" ИЛИ ИмяЯчейки = "П000400013003"
									ИЛИ ИмяЯчейки = "П000400014003" ИЛИ ИмяЯчейки = "П000400015003" Тогда
									МассивОчищаемыхОбластейТекущегоЛистаРаздел4.Добавить(ТекущаяОбласть);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Для каждого ОбластьСписка Из МассивОчищаемыхОбластейТекущегоЛистаРаздел4 Цикл
						ОбластьСписка.Имя = "";
						ОбластьСписка.Текст = ?(СокрЛП(ОбластьСписка.Текст) = ".", ".", "-");
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
				ТабличныйДокумент.Очистить();
				ТабличныйДокумент.Вывести(ЛистМЧБ);
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ЛистМЧБ, СтрПоля, "Макет");
				
				РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
								
				ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
			КонецЦикла;
			Возврат;
		Иначе
			//Не добавляли строки - продолжение выполнения
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМакетМЧБ(Парам1, МакетМЧБ, ОбщиеРеквизитыРазделов);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(МакетМЧБ);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, МакетМЧБ, СтрПоля, "Макет");
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМакетМЧБ(ПараметрыПечати, МакетМЧБ, ОбщиеРеквизитыРазделов)
	
	Показатели = Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Имя");
	Показатели.Колонки.Добавить("Значение");
	Показатели.Колонки.Добавить("ЗначениеМЧБ");
	
	Показатели.Индексы.Добавить("Имя");
	
	ИсходныйМакет = ТабличныйДокумент;
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = Область.Имя;
			Если Область.Имя = "П000700005003" Тогда
				КоэфКтд = СокрЛП(Область.Значение);
				Если СтрДлина(КоэфКтд) = 3 Тогда
					КоэфКтд = СтрЗаменить(КоэфКтд, ",", ".");
					КоэфКтд = СтрЗаменить(КоэфКтд, ".0", ".-");
				Иначе
					КоэфКтд = "-.-";
				КонецЕсли;
				НовСтр.Значение = КоэфКтд;
				НовСтр.ЗначениеМЧБ = КоэфКтд;
			Иначе
				НовСтр.Значение = Область.Значение;
				НовСтр.ЗначениеМЧБ = ПолучитьЗначениеМЧБ(Область);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НайденноеЗначение = Показатели.Найти("ИНН", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ИНН = "";
	Для Ном = 0 По 11 Цикл
		ИНН = ИНН + ОбщиеРеквизитыРазделов.ИНН[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ИНН";
	НовСтр.Значение = ИНН;
	НовСтр.ЗначениеМЧБ = СокрЛП(ИНН);
	
	НайденноеЗначение = Показатели.Найти("КПП", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	КПП = "";
	Для Ном = 0 По 8 Цикл
		КПП = КПП + ОбщиеРеквизитыРазделов.КПП[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "КПП";
	НовСтр.Значение = КПП;
	НовСтр.ЗначениеМЧБ = СокрЛП(КПП);
	
	НайденноеЗначение = Показатели.Найти("ДатаПодписи", "Имя");
	
	Если НЕ НайденноеЗначение = Неопределено Тогда
		Показатели.Удалить(НайденноеЗначение);
	КонецЕсли;
		
	ДатаПодписиСтр = "";
	Для Ном = 0 По 7 Цикл
		ДатаПодписиСтр = ДатаПодписиСтр + ОбщиеРеквизитыРазделов.ДатаПодписи[Ном];
	КонецЦикла;
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписи";
	НовСтр.Значение = ДатаПодписиСтр;
	НовСтр.ЗначениеМЧБ = СокрЛП(ДатаПодписиСтр);
	
	НовСтр = Показатели.Добавить();
	НовСтр.Имя = "ДатаПодписиПолная";
	Если СокрЛП(ДатаПодписиСтр) <> "" Тогда
		НовСтр.Значение = Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг""");
		НовСтр.ЗначениеМЧБ = СокрЛП(Формат(Дата(Прав(ДатаПодписиСтр, 4) + Сред(ДатаПодписиСтр, 3, 2) + Лев(ДатаПодписиСтр, 2) + "000000"), "ДФ = ""дд.ММ.гггг"""));
	КонецЕсли;
	
	// особая обработка ФИО на титульном листе
	Если ПараметрыПечати.ИмяСтраницы = "Титульный" Тогда
						
		ПокПодписант = Показатели.Найти("ОргПодписант", "Имя");
		Если ПокПодписант <> Неопределено Тогда
			
			ФИО = РегламентированнаяОтчетность.РазложитьФИО(ПокПодписант.Значение);
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантФамилия";
			НовСтр.Значение = ФИО.Фамилия;
			НовСтр.ЗначениеМЧБ = ФИО.Фамилия;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантИмя";
			НовСтр.Значение = ФИО.Имя;
			НовСтр.ЗначениеМЧБ = ФИО.Имя;
			
			НовСтр = Показатели.Добавить();
			НовСтр.Имя = "ОргПодписантОтчество";
			НовСтр.Значение = ФИО.Отчество;
			НовСтр.ЗначениеМЧБ = ФИО.Отчество;
			
		КонецЕсли;
		
		// особая обработка ОКВЭД
		ПокОКВЭД = Показатели.Найти("ОКВЭД", "Имя");
		Если ПокОКВЭД <> Неопределено Тогда
			ОКВЭД = ПокОКВЭД.ЗначениеМЧБ;
			Если Сред(ОКВЭД, 2, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 1) + " " + Сред(ОКВЭД, 2);
			КонецЕсли;
			Если Сред(ОКВЭД, 5, 1) = "." Тогда
				ОКВЭД = Лев(ОКВЭД, 4) + " " + Сред(ОКВЭД, 5);
			КонецЕсли;
			ПокОКВЭД.Значение = ОКВЭД;
			ПокОКВЭД.ЗначениеМЧБ = ОКВЭД;
		КонецЕсли;
		
	КонецЕсли;
	
	// особая обработка ИНН
	ИНН = Новый Массив(12);
	Для Инд = 1 По 9 Цикл
		Для Знакоместо = 0 По 11 Цикл
			ИНН[Знакоместо] = Показатели.Найти("ИНН" + Инд + "_" + (Знакоместо + 1), "Имя");
		КонецЦикла;
		Если ИНН[0] = Неопределено ИЛИ ИНН[1] = Неопределено ИЛИ ИНН[10] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// ОКТМО.
	Для Каждого Показатель Из Показатели Цикл
		Если СтрНайти(Показатель.Имя, "П000100000102") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000200004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000300008003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000400004003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000500005003") > 0
		 ИЛИ СтрНайти(Показатель.Имя, "П000700004003") > 0 Тогда
			Показатель.ЗначениеМЧБ = РегламентированнаяОтчетностьКлиентСервер.ДополнитьСтроку(
				СокрЛП(Показатель.Значение), 11, "-", 1);
		ИначеЕсли Показатель.Имя = "П000400007003"
			ИЛИ СтрНайти(Показатель.Имя, "П000730000101") > 0
			ИЛИ СтрНайти(Показатель.Имя, "П000730000106") > 0 Тогда
			Если НЕ ЗначениеЗаполнено(Показатель.ЗначениеМЧБ) Тогда
				Показатель.ЗначениеМЧБ = "--.----";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ИндексТочкиПоКорню=Новый Структура;
	Для каждого Область Из МакетМЧБ.Области Цикл
		Если Область.Текст="." Тогда
			ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
			Корень=ТекАдресЗначенияОбласти.Корень;
			ИндексТочкиЧислаНаМЧБ=ТекАдресЗначенияОбласти.ИндексЗнакоместа;
			ИндексТочкиПоКорню.Вставить(Корень,ИндексТочкиЧислаНаМЧБ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Область Из МакетМЧБ.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			ИмяОбласти = Область.Имя;
			
			Если СтрЧислоВхождений(ИмяОбласти, "НомСтр") > 0
			 ИЛИ СтрЧислоВхождений(ИмяОбласти, "СоставленаНа") > 0 Тогда
				Продолжить;
			КонецЕсли;
					
			РезультатПоиска = Показатели.Найти(ИмяОбласти, "Имя");
			Если РезультатПоиска = Неопределено Тогда
				ТекАдресЗначенияОбласти = АдресЗначенияОбласти(Область);
				ЗначениеВыведено = Ложь;
				Если ТекАдресЗначенияОбласти.ИндексЗнакоместа <> 0 Тогда
					РезультатПоиска = Показатели.Найти(ТекАдресЗначенияОбласти.Корень, "Имя");
					Если РезультатПоиска <> Неопределено Тогда
						Если ТипЗнч(РезультатПоиска.Значение)=Тип("Число") Тогда
							//разделение числа на 2 части
							ЦелаяЧасть = Цел(РезультатПоиска.Значение);
							СтрЦелаяЧасть = СтрЗаменить(Строка(Формат(Цел(РезультатПоиска.Значение), "ЧРГ=';'")), ";", "");
							Если РезультатПоиска.Значение < 0 И СтрНайти(РезультатПоиска.ЗначениеМЧБ, ".") > 0 Тогда
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),4);
							Иначе
								СтрДробнаяЧасть = Сред(Строка(РезультатПоиска.Значение - ЦелаяЧасть),3);
							КонецЕсли;
							Если СтрЦелаяЧасть <> "" ИЛИ СтрДробнаяЧасть <> "" Тогда
								СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "", "0", СтрЦелаяЧасть);
								Если РезультатПоиска.Значение < 0 Тогда
									СтрЦелаяЧасть = ?(СтрЦелаяЧасть = "0", "-0", СтрЦелаяЧасть);
								КонецЕсли;
								СтрДробнаяЧасть = ?(СтрДробнаяЧасть = "", "0", СтрДробнаяЧасть);
							КонецЕсли;
							//разделение областей показателя на 2 части
							ИндексТочкиЧислаНаМЧБ = Неопределено;
							Если ИндексТочкиПоКорню.Свойство(ТекАдресЗначенияОбласти.Корень,ИндексТочкиЧислаНаМЧБ) = Ложь Тогда
								//На МЧБ нет разделения на целую и дробную части
								ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа);
								ЗначениеВыведено = Истина;	
							Иначе
								//определяем какая часть выводится (Целая, дробная или точка)
								Если ТекАдресЗначенияОбласти.ИндексЗнакоместа<ИндексТочкиЧислаНаМЧБ Тогда
									//выводится целая часть
									ПрисвоитьЗначениеОбласти(Область, ?(РезультатПоиска.ЗначениеМЧБ = "-","-",СтрЦелаяЧасть), ТекАдресЗначенияОбласти.ИндексЗнакоместа);
									ЗначениеВыведено = Истина;	
								ИначеЕсли ТекАдресЗначенияОбласти.ИндексЗнакоместа > ИндексТочкиЧислаНаМЧБ Тогда
									//выводится дробная часть
									ПрисвоитьЗначениеОбласти(Область, СтрДробнаяЧасть, ТекАдресЗначенияОбласти.ИндексЗнакоместа - ИндексТочкиЧислаНаМЧБ);
									ЗначениеВыведено = Истина;
								Иначе
									//выводится точка
									//присваивать ничего не будем, но считаем, что область заполненяется корректно
									ЗначениеВыведено = Истина;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ, ТекАдресЗначенияОбласти.ИндексЗнакоместа, ТипЗнч(РезультатПоиска.Значение) <> Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(РезультатПоиска.Значение));
							ЗначениеВыведено = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЗначениеВыведено
					  И ИмяОбласти <> "ОпределениеВысотыСтрокиМногострочнойЧасти" Тогда //служебное поле
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось заполнить область ""%1""!'"), ИмяОбласти);
					Сообщение.Сообщить();
					
				КонецЕсли;
			Иначе
				ПрисвоитьЗначениеОбласти(Область, РезультатПоиска.ЗначениеМЧБ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбнулитьИтоговыеПоказателиНаЛистеМЧБ(ТаблДок)
	
	ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели");
	
	Если ОбластьИтоговыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьИтоговыеПоказателиВерх = ОбластьИтоговыеПоказатели.Верх;
	ОбластьИтоговыеПоказателиНиз = ОбластьИтоговыеПоказатели.Низ;
	
	Для Каждого Обл Из ТаблДок.Области Цикл
		
		Если Обл.ГраницаСлева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обл.Верх >= ОбластьИтоговыеПоказателиВерх
			И Обл.Низ <= ОбластьИтоговыеПоказателиНиз
			И Обл.ГраницаСлева.ТипЛинии = ТипЛинииЯчейкиТабличногоДокумента.Точечная Тогда
			
			Если Обл.СодержитЗначение = Истина Тогда // возможны 3 состояния
				Обл.Значение = "-";
			Иначе
				Обл.Текст = "-";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеМЧБ(Область)
	
	ТипЗначения = ТипЗнч(Область.Значение);
	Если ТипЗначения = Тип("Число") Тогда
		ФорматОбласти = Область.Формат;
		СоотвСтрокаФормата = РазобратьСтрокуФормата(ФорматОбласти);
		СоотвСтрокаФормата.Вставить("ЧРД", ".");
		СоотвСтрокаФормата.Вставить("ЧГ", "");
		Результат = Формат(Область.Значение, СобратьСтрокуФормата(СоотвСтрокаФормата));
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Результат = СокрЛП(Область.Значение);
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Результат = Формат(Область.Значение, ?(ПустаяСтрока(Область.Формат), "ДФ=ddMMyyyy", Область.Формат));
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Результат = Формат(Область.Значение, Область.Формат);
	КонецЕсли;
	Возврат СокрЛП(Результат);
	
КонецФункции

&НаСервере
Функция АдресЗначенияОбласти(Область)
	
	Имя = Область.Имя;
	КореньИмениОбласти = Неопределено;
	СтрИндексЗнакоместа = "";
	ИндексЗнакоместа = 0;
	ДлинаИмени = СтрДлина(Имя);
	Для ИндексВхождения = 1 По ДлинаИмени Цикл
		СтрИндексЗнакоместа = Сред(Имя, ДлинаИмени - ИндексВхождения + 1);
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрИндексЗнакоместа) Тогда
			КореньИмениОбласти = Лев(Имя, ДлинаИмени - ИндексВхождения);
			ИндексЗнакоместа = Число(СтрИндексЗнакоместа);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Прав(КореньИмениОбласти, 1) = "_" Тогда
		КореньИмениОбласти = Лев(КореньИмениОбласти, СтрДлина(КореньИмениОбласти) - 1);
	КонецЕсли;
		
	Возврат Новый Структура("Корень, ИндексЗнакоместа", КореньИмениОбласти, ИндексЗнакоместа);
	
КонецФункции

&НаСервере
Процедура ПрисвоитьЗначениеОбласти(Область, Знач Значение, ИндексЗнакоместа = 0, ДополнятьСправа_ = Истина)
	
	Если ИндексЗнакоместа <> 0 Тогда
		Если СтрДлина(Значение) >= ИндексЗнакоместа Тогда
			Значение = Сред(Значение, ИндексЗнакоместа, 1);
		Иначе
			Значение = ?(ДополнятьСправа_, "-", "");
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Значение) Тогда
		Значение = "-";
	КонецЕсли;
	
	Если Область.СодержитЗначение = Истина Тогда
		Область.Значение = ВРЕГ(Значение);
	Иначе
		Область.Текст = ВРЕГ(Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
	
	ЗначенияПараметров = Новый Соответствие;
	Пока СтрНайти(СтрокаФормата, ";") <> 0 Цикл
		ВхождениеРазделителя = СтрНайти(СтрокаФормата, ";");
		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
		ВхождениеРавно = СтрНайти(ДоРазделителя, "=");
		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
	КонецЦикла;
	ВхождениеРавно = СтрНайти(СтрокаФормата, "=");
	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
	КонецЕсли;
	Возврат ЗначенияПараметров;
	
КонецФункции

&НаСервере
Функция СобратьСтрокуФормата(ПараметрыФормата)
	
	СтрокаФормата = "";
	Для Каждого Параметр Из ПараметрыФормата Цикл
		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
		СтрокаФормата = Сред(СтрокаФормата, 3);
	КонецЕсли;
	Возврат СтрокаФормата;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	МассивПризнаковАктивности = Новый Массив;
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		МассивПризнаковАктивности.Добавить(ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница);
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
		Если ИмяСтраницы = "Раздел7" Тогда
			СтруктураПараметров72 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметровСтраницы Цикл
				СтруктураПараметров72.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметров72.Вставить("ИмяСтраницы", "Раздел72");
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
			ВывестиНаПечатьЛист(СтруктураПараметров72, ОбщиеРеквизитыРазделов);
			СтруктураПараметров73 = Новый Структура;
			Для каждого ЭлСтруктурыПараметров Из СтруктураПараметровСтраницы Цикл
				СтруктураПараметров73.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
			КонецЦикла;
			СтруктураПараметров73.Вставить("ИмяСтраницы", "Раздел73");
			ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
			ВывестиНаПечатьЛист(СтруктураПараметров73, ОбщиеРеквизитыРазделов);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = МассивПризнаковАктивности[ТекущийИндекс];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	
	Перем ИсходноеКоличествоСтрокГруппы;

	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли

	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
				ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
	
	ПостфиксВИмениОбластиМногострочнаяЧасть = "";
	Если ИмяГруппы = "П0007100001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "71";
	ИначеЕсли ИмяГруппы = "П0007300001" Тогда
		ПостфиксВИмениОбластиМногострочнаяЧасть = "73";
	КонецЕсли;
	
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть);
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если СтрНайти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
		
		Постфикс = Формат(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1, "ЧГ=");
		
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, СтрНайти(Область.Имя, "_")) + Постфикс;
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Верх, ,
	ТекТабличноеПоле.Области["МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть].Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть" + ПостфиксВИмениОбластиМногострочнаяЧасть;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументСпецНаСервере(Знач НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, мСтруктураКолвоКолонокРазделов) Экспорт
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
	
	// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
	НастройкиМнгЧ = ДанныеФормыВЗначение(НастройкиМнгЧ, Тип("ТаблицаЗначений")).Скопировать();
	
	НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;
	
	НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
	НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");
	
	// Определим координаты всех многострочных блоков, для последующего восстановления.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		КоординатаНиз  = Раздел.Области[Зап.Область].Низ;
		КоординатаВерх = Раздел.Области[Зап.Область].Верх;
		Зап.НизМногострочнойЧасти    = КоординатаНиз;
		Зап.ВерхМногострочнойЧасти   = КоординатаВерх;
		// Координаты текущей области
		Если Зап.Область = НазвОбласти Тогда
			Низ           = КоординатаНиз;
			Верх          = КоординатаВерх;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
	// Скопируем верхнюю часть документа, не включая многострочную часть.
	ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
	// Скопируем подвал, все, что ниже области многострочного блока.
	Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);
			
	Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);
	
	Если ВысотаСтроки > 1 Тогда
		ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
		Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
		КонецЕсли;
	КонецЕсли;
	
	Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
		Строка.Области[НазвОбласти].Имя = "";
	КонецЕсли;
	
	// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
	// автоматически добавляем необходимое колво строк.
	
	Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
		// Переопределим именнованность.
		Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
		НомСтр = Формат(НомНовойСтроки, "ЧГ=");
		
		СписокИменКолонокРаздела = мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(КолИмя) Тогда
				
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьСтрокуДаннымиИзТаблицы(ДанныеФормыВЗначение(СтруктураГруппы, Тип("ТаблицаЗначений")), Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
		ТаблДок.Вывести(Строка1);
		
	КонецЦикла;
		
	ТаблДок.Вывести(Подвал);
	
	Раздел.Очистить();
	Раздел.Вывести(ТаблДок);
		
	// Восстановим области.
	Для каждого Зап Из НастройкиМнгЧ Цикл
		Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=")).Имя = Зап.Область;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме)
	
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		
		ЗначениеПоказателя = СтрокаТаблицы[КолонкаИмя];
		
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = ЗначениеПоказателя;
		Иначе
			Строка1.Области[НазвЯчейки].Текст = ЗначениеПоказателя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуПараметровАвтозаполнения(Парам, Лист)
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;
	
	ИмяТекущейСтраницыПанели = Лист;

	Если Не мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяТекущейСтраницыПанели];

	НомерТекущейСтраницы = 1;

	Если мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		// Раздел является многостраничным, определим активную страницу раздела:
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если СтрТаблицаСтраницы.Количество() > 0 Тогда
			НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы[0]) + 1;
		КонецЕсли;
	КонецЕсли;

	Если Парам = 1 Тогда // создаем таблицу параметров автозаполнения ячеек добавленного листа

		// При добавлении новой страницы параметры автозаполнения ее ячеек определяем
		// по эталонной модели
		НоваяТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет, СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);

		Если НоваяТаблицаВариантыЗаполнения <> Неопределено Тогда
			
			ТаблВариантов = МассивВариантовЗаполненияСтраниц.Добавить();	
			
			Если ТипЗнч(НоваяТаблицаВариантыЗаполнения) = Тип("ДанныеФормыКоллекция") Тогда
				
				КопироватьДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			Иначе
				
				ЗначениеВДанныеФормы(НоваяТаблицаВариантыЗаполнения, ТаблВариантов.ТаблицаВариантовЗаполнения);
				
			КонецЕсли;
			
		КонецЕсли;

	Иначе // Парам = -1. Удаляем таблицу параметров автозаполнения ячеек удаленного листа

		Если МассивВариантовЗаполненияСтраниц.Количество() > 1 Тогда 
			МассивВариантовЗаполненияСтраниц.Удалить(НомерТекущейСтраницы - 1);
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");

		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// предварительно сохраним данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		СохрТЗМногострочнойГруппы211 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы211].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
		СохрТЗМногострочнойГруппы212 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы212].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		СохрТЗМногострочнойГруппы311 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы311].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		СохрТЗМногострочнойГруппы4 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		СохрТЗМногострочнойГруппы51 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы51].Выгрузить();
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		СохрТЗМногострочнойГруппы71 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы71].Выгрузить();
		СохрТЗМногострочнойГруппы73 = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы73].Выгрузить();
	КонецЕсли;
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиМакетВТаблДокНаСервере("Титульный", 0);
	
	ОбщиеРеквизитыРазделов = ПолучитьОбщиеРеквизитыСТитульногоЛиста();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
			
		Иначе
			
			Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
				
				ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			Иначе
				
				СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
				ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если текущий раздел многостраничный, имеющий многострочные части,
	// восстановим предварительно сохраненные данные многострочных групп.
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы211].Загрузить(СохрТЗМногострочнойГруппы211);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы212].Загрузить(СохрТЗМногострочнойГруппы212);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы311].Загрузить(СохрТЗМногострочнойГруппы311);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы4].Загрузить(СохрТЗМногострочнойГруппы4);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы51].Загрузить(СохрТЗМногострочнойГруппы51);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы71].Загрузить(СохрТЗМногострочнойГруппы71);
		ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы73].Загрузить(СохрТЗМногострочнойГруппы73);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьДанныеМногоуровневогоРаздела(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля)
	
	ИмяТекРаздела = СтруктураПараметров.ИмяСтраницы;
	
	КолУровнейРаздела = мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела);
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(ИмяТекРаздела, 7)]);
	
	Если ИмяТекРаздела = "Раздел2" Тогда
		
		// Вывод листов с кодом "01008036".
		//
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
				
				Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
				
				Для Каждого ЭлСтруктуры Из Ветка2.Данные Цикл
					Если НомСтрокиВВетке2 > 1 И ЭлСтруктуры.Ключ = "П000200002003" Тогда
						Продолжить;
					КонецЕсли;
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				Для Каждого ЭлСтруктуры Из Ветка21.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				// Вывод листа с кодом "01008036".
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
				// Определение количества листов с кодом "01008043",
				// относящихся к выведенному листу с кодом "01008036".
				//
				НомерСтроки211 = 0;
				Пока Ветка21.Данные.Свойство("П000211000101_" + Формат(НомерСтроки211 + 1, "ЧГ=")) Цикл
					НомерСтроки211 = НомерСтроки211 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки211 / 3;
				ЦелКол = Цел(НомерСтроки211 / 3);
				КолЛистов01008043ПоКолСтрок211 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				КолЛистов01008043ПоКолСтрок212 = 0;
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка212 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					НомерСтроки212 = 0;
					Пока Ветка212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212 + 1, "ЧГ=")) Цикл
						НомерСтроки212 = НомерСтроки212 + 1;
					КонецЦикла;
					ДробКол = НомерСтроки212 / 3;
					ЦелКол = Цел(НомерСтроки212 / 3);
					КолЛистов01008043ПоКолСтрок212 = КолЛистов01008043ПоКолСтрок212 + ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				КонецЦикла;
				// Необходимое количество листов с кодом "01008043".
				КолЛистов01008043 = Макс(КолЛистов01008043ПоКолСтрок211, КолЛистов01008043ПоКолСтрок212);
				
				// Формирование данных для заполнения листов с кодом "01008043".
				//
				МассивДанных211 = Новый Массив;
				Для НомЛиста = 1 По КолЛистов01008043 Цикл
					ПриращениеКНомеру = (НомЛиста - 1) * 3;
					СтруктДанных211 = Новый Структура;
					Для НомСтрВЭлементеМассива = 1 По 3 Цикл
						ИмяП000211000101 = "П000211000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000211000102 = "П000211000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						НовИмяП000211000101 = "П000211000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000211000102 = "П000211000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных211.Вставить(НовИмяП000211000101, "");
						СтруктДанных211.Вставить(НовИмяП000211000102, 0);
						Если Ветка21.Данные.Свойство(ИмяП000211000101) Тогда
							СтруктДанных211[НовИмяП000211000101] = Ветка21.Данные[ИмяП000211000101];
							СтруктДанных211[НовИмяП000211000102] = Ветка21.Данные[ИмяП000211000102];
						КонецЕсли;
					КонецЦикла;
					МассивДанных211.Добавить(СтруктДанных211);
				КонецЦикла;
				МассивДанных212 = Новый Массив;
				НомСтрокиВВетке21 = 1;
				НомЛиста = 1;
				Пока НомЛиста <= КолЛистов01008043 Цикл
					Если НомСтрокиВВетке21 <= Ветка21.Строки.Количество() Тогда
						Ветка212 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
						НомерСтроки212 = 0;
						Пока Ветка212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212 + 1, "ЧГ=")) Цикл
							НомерСтроки212 = НомерСтроки212 + 1;
						КонецЦикла;
						ДробКол = НомерСтроки212 / 3;
						ЦелКол = Цел(НомерСтроки212 / 3);
						КолЛистовИзТекВетки212 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
						Для НомЛистаИзТекВетки212 = 1 По КолЛистовИзТекВетки212 Цикл
							ПриращениеКНомеру = (НомЛистаИзТекВетки212 - 1) * 3;
							СтруктДанных212 = Новый Структура;
							Для НомСтрВЭлементеМассива = 1 По 3 Цикл
								ИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
								ИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
								НовИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
								НовИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
								СтруктДанных212.Вставить(НовИмяП000212000101, "");
								СтруктДанных212.Вставить(НовИмяП000212000102, 0);
								Если Ветка212.Данные.Свойство(ИмяП000212000101) Тогда
									СтруктДанных212[НовИмяП000212000101] = Ветка212.Данные[ИмяП000212000101];
									СтруктДанных212[НовИмяП000212000102] = Ветка212.Данные[ИмяП000212000102];
								КонецЕсли;
								Если НомЛистаИзТекВетки212 = 1 Тогда
									Для каждого Показатель Из Ветка212.Данные Цикл
										Если Лев(Показатель.Ключ, 2) = "П0" И СтрНайти(Показатель.Ключ, "_") > 0 Тогда
											Продолжить;
										КонецЕсли;
										СтруктДанных212.Вставить(Показатель.Ключ, Показатель.Значение);
									КонецЦикла;
								КонецЕсли;
							КонецЦикла;
							МассивДанных212.Добавить(СтруктДанных212);
						КонецЦикла;
					Иначе
						СтруктДанных212 = Новый Структура;
						Для НомСтрВЭлементеМассива = 1 По 3 Цикл
							НовИмяП000212000101 = "П000212000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							НовИмяП000212000102 = "П000212000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							СтруктДанных212.Вставить(НовИмяП000212000101, "");
							СтруктДанных212.Вставить(НовИмяП000212000102, 0);
						КонецЦикла;
						МассивДанных212.Добавить(СтруктДанных212);
						КолЛистовИзТекВетки212 = 1;
					КонецЕсли;
					НомСтрокиВВетке21 = НомСтрокиВВетке21 + 1;
					НомЛиста = НомЛиста + КолЛистовИзТекВетки212;
				КонецЦикла;
				
				// Вывод листов с кодом "01008043".
				//
				Для НомЛиста = 1 По КолЛистов01008043 Цикл
					
					ТабличныйДокумент.Очистить();
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
					
					ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел21");
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных211[НомЛиста - 1]);
					
					СтруктураГруппы = Неопределено;
					
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
					
					ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел212");
					
					ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных212[НомЛиста - 1]);
					
					СтруктураГруппы = Неопределено;
					
					мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
					
					СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
					
					Для Каждого ЭлСтруктуры Из МассивДанных211[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ЭлСтруктуры Из МассивДанных212[НомЛиста - 1] Цикл
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
					
					СтруктураПараметров211 = Новый Структура;
					Для каждого ЭлСтруктурыПараметров Из СтруктураПараметров Цикл
						СтруктураПараметров211.Вставить(ЭлСтруктурыПараметров.Ключ, ЭлСтруктурыПараметров.Значение);
					КонецЦикла;
					СтруктураПараметров211.Вставить("ИмяСтраницы", "Раздел211");
					
					// Вывод листа с кодом "01008043".
					ВывестиНаПечатьЛист(СтруктураПараметров211, ОбщиеРеквизитыРазделов, СтрПоля);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел3" Тогда
		
		// Вывод листов с кодом "01008050".
		//
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка3 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			Для НомСтрокиВВетке3 = 1 По Ветка3.Строки.Количество() Цикл
				
				Ветка31 = Ветка3.Строки[НомСтрокиВВетке3 - 1];
				
				Для НомСтрокиВВетке31 = 1 По Ветка31.Строки.Количество() Цикл
					
					Ветка311 = Ветка31.Строки[НомСтрокиВВетке31 - 1];
					
					// Определение текущего количества листов с кодом "01008050".
					//
					НомерСтроки311 = 0;
					Пока Ветка311.Данные.Свойство("П000311000101_" + Формат(НомерСтроки311 + 1, "ЧГ=")) Цикл
						НомерСтроки311 = НомерСтроки311 + 1;
					КонецЦикла;
					ДробКол = НомерСтроки311 / 3;
					ЦелКол = Цел(НомерСтроки311 / 3);
					КолТекЛистов01008050ПоКолСтрок311 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
					
					// Формирование данных многосторочной части 3.1.1 для заполнения листов с кодом "01008050".
					//
					МассивДанных311 = Новый Массив;
					Для НомЛиста = 1 По КолТекЛистов01008050ПоКолСтрок311 Цикл
						ПриращениеКНомеру = (НомЛиста - 1) * 3;
						СтруктДанных311 = Новый Структура;
						Для НомСтрВЭлементеМассива = 1 По 3 Цикл
							ИмяП000311000101 = "П000311000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
							ИмяП000311000102 = "П000311000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
							НовИмяП000311000101 = "П000311000101_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							НовИмяП000311000102 = "П000311000102_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
							СтруктДанных311.Вставить(НовИмяП000311000101, "");
							СтруктДанных311.Вставить(НовИмяП000311000102, 0);
							Если Ветка311.Данные.Свойство(ИмяП000311000101) Тогда
								СтруктДанных311[НовИмяП000311000101] = Ветка311.Данные[ИмяП000311000101];
								СтруктДанных311[НовИмяП000311000102] = Ветка311.Данные[ИмяП000311000102];
							КонецЕсли;
						КонецЦикла;
						МассивДанных311.Добавить(СтруктДанных311);
					КонецЦикла;
					
					Для НомЛиста = 1 По КолТекЛистов01008050ПоКолСтрок311 Цикл
						
						ТабличныйДокумент.Очистить();
						
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
						
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
						
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
						
						ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел311");
						
						ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных311[НомЛиста - 1]);
						
						СтруктураГруппы = Неопределено;
						
						мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
						
						СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
						
						ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
						
						Если НомСтрокиВВетке3 = 1 И НомСтрокиВВетке31 = 1 И НомЛиста = 1 Тогда
							Для Каждого ЭлСтруктуры Из Ветка3.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = ЭлСтруктуры.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если НомСтрокиВВетке31 = 1 И НомЛиста = 1 Тогда
							Для Каждого ЭлСтруктуры Из Ветка31.Данные Цикл
								Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = ЭлСтруктуры.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если НомЛиста = 1 Тогда
							Для Каждого ЭлСтруктуры Из Ветка311.Данные Цикл
								Если Лев(ЭлСтруктуры.Ключ, 11) = "П0003110001" Тогда
									Продолжить;
								КонецЕсли;
								Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
								Если Обл <> Неопределено Тогда
									Обл.Значение = ЭлСтруктуры.Значение;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Для Каждого ЭлСтруктуры Из МассивДанных311[НомЛиста - 1] Цикл
							Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
							Если Обл <> Неопределено Тогда
								Обл.Значение = ЭлСтруктуры.Значение;
							КонецЕсли;
						КонецЦикла;
						
						// Вывод листа с кодом "01008050".
						ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел5" Тогда
		
		// Вывод листов с кодом "01008074".
		//
		Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
			
			Ветка5 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
			
			// Формирование данных многосторочной части 5.1 для заполнения листов с кодом "01008074".
			//
			МассивДанных51 = Новый Массив;
			
			Для НомСтрокиВВетке5 = 1 По Ветка5.Строки.Количество() Цикл
				
				Ветка51 = Ветка5.Строки[НомСтрокиВВетке5 - 1];
				
				НомерСтроки51 = 0;
				Пока Ветка51.Данные.Свойство("П000510000101_" + Формат(НомерСтроки51 + 1, "ЧГ=")) Цикл
					НомерСтроки51 = НомерСтроки51 + 1;
				КонецЦикла;
				ДробКол = НомерСтроки51 / 3;
				ЦелКол = Цел(НомерСтроки51 / 3);
				КолГруппСтрок01_03ВТекВетке51 = ?(ДробКол = ЦелКол, ЦелКол, ЦелКол + 1);
				
				Для НомГруппыСтрок01_03 = 1 По КолГруппСтрок01_03ВТекВетке51 Цикл
					ПриращениеКНомеру = (НомГруппыСтрок01_03 - 1) * 3;
					СтруктДанных51 = Новый Структура;
					Если МассивДанных51.Количество() / 2 = Цел(МассивДанных51.Количество() / 2) Тогда
						Префикс5  = "П0005";
						Префикс51 = "П0005100001";
					Иначе
						Префикс5  = "П1005";
						Префикс51 = "П1005100001";
					КонецЕсли;
					СтруктДанных51.Вставить(Префикс5 + "00005003", "");
					СтруктДанных51.Вставить(Префикс5 + "00006003", "");
					СтруктДанных51.Вставить(Префикс5 + "00006004", "");
					СтруктДанных51.Вставить(Префикс5 + "00006005", "");
					Если НомГруппыСтрок01_03 = 1 Тогда
						СтруктДанных51[Префикс5 + "00005003"] = Ветка51.Данные["П000500005003"];
						СтруктДанных51[Префикс5 + "00006003"] = Ветка51.Данные["П000500006003"];
						СтруктДанных51[Префикс5 + "00006004"] = Ветка51.Данные["П000500006004"];
						СтруктДанных51[Префикс5 + "00006005"] = Ветка51.Данные["П000500006005"];
					КонецЕсли;
					Для НомСтрВЭлементеМассива = 1 По 3 Цикл
						ИмяП000510000101 = "П000510000101_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000510000102 = "П000510000102_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000510000103 = "П000510000103_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						ИмяП000510000104 = "П000510000104_" + Формат(НомСтрВЭлементеМассива + ПриращениеКНомеру, "ЧГ=");
						НовИмяП000510000101 = Префикс51 + "01_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000510000102 = Префикс51 + "02_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000510000103 = Префикс51 + "03_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						НовИмяП000510000104 = Префикс51 + "04_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
						СтруктДанных51.Вставить(НовИмяП000510000101, "");
						СтруктДанных51.Вставить(НовИмяП000510000102, 0);
						СтруктДанных51.Вставить(НовИмяП000510000103, 0);
						СтруктДанных51.Вставить(НовИмяП000510000104, "-.-");
						Если Ветка51.Данные.Свойство(ИмяП000510000101) Тогда
							СтруктДанных51[НовИмяП000510000101] = Ветка51.Данные[ИмяП000510000101];
							СтруктДанных51[НовИмяП000510000102] = Ветка51.Данные[ИмяП000510000102];
							СтруктДанных51[НовИмяП000510000103] = Ветка51.Данные[ИмяП000510000103];
							КоэфКтд = СокрЛП(Ветка51.Данные[ИмяП000510000104]);
							Если СтрДлина(КоэфКтд) = 3 Тогда
								КоэфКтд = СтрЗаменить(КоэфКтд, ",", ".");
								КоэфКтд = СтрЗаменить(КоэфКтд, ".0", ".-");
							Иначе
								КоэфКтд = "-.-";
							КонецЕсли;
							СтруктДанных51[НовИмяП000510000104] = КоэфКтд;
						КонецЕсли;
					КонецЦикла;
					МассивДанных51.Добавить(СтруктДанных51);
				КонецЦикла;
				
			КонецЦикла;
			
			Если МассивДанных51.Количество() / 2 <> Цел(МассивДанных51.Количество() / 2) Тогда
				СтруктДанных51 = Новый Структура;
				Префикс5  = "П1005";
				Префикс51 = "П1005100001";
				СтруктДанных51.Вставить(Префикс5 + "00005003", "");
				СтруктДанных51.Вставить(Префикс5 + "00006003", "");
				СтруктДанных51.Вставить(Префикс5 + "00006004", "");
				СтруктДанных51.Вставить(Префикс5 + "00006005", "");
				Для НомСтрВЭлементеМассива = 1 По 3 Цикл
					НовИмяП000510000101 = Префикс51 + "01_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
					НовИмяП000510000102 = Префикс51 + "02_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
					НовИмяП000510000103 = Префикс51 + "03_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
					НовИмяП000510000104 = Префикс51 + "04_" + Формат(НомСтрВЭлементеМассива, "ЧГ=");
					СтруктДанных51.Вставить(НовИмяП000510000101, "");
					СтруктДанных51.Вставить(НовИмяП000510000102, 0);
					СтруктДанных51.Вставить(НовИмяП000510000103, 0);
					СтруктДанных51.Вставить(НовИмяП000510000104, "-.-");
				КонецЦикла;
				МассивДанных51.Добавить(СтруктДанных51);
			КонецЕсли;
			
			Для НомЛиста = 1 По МассивДанных51.Количество() / 2 Цикл
				
				ИндексВМассиве = НомЛиста * 2 - 2;
				
				ТабличныйДокумент.Очистить();
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
				
				ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере("Раздел51");
				
				ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, МассивДанных51[ИндексВМассиве]);
				
				СтруктураГруппы = Неопределено;
				
				мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				
				СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
				
				ТабличныйДокумент_ = ТабличныйДокумент.ПолучитьОбласть();
				СписокОбластейПереименования = Новый СписокЗначений;
				Для каждого Обл Из ТабличныйДокумент_.Области Цикл
					Если Лев(Обл.Имя, 5) = "П0005" Тогда
						СписокОбластейПереименования.Добавить(Обл, "П1005" + Сред(Обл.Имя, 6));
					КонецЕсли;
				КонецЦикла;
				Для каждого ЭлСпискаОбластей Из СписокОбластейПереименования Цикл
					ЭлСпискаОбластей.Значение.Имя = ЭлСпискаОбластей.Представление;
				КонецЦикла;
				ТабличныйДокумент.Вывести(ТабличныйДокумент_);
				
				ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
				
				УстановитьТипЗначений(ИмяТекРаздела);
				
				Если НомЛиста = 1 ИЛИ НомЛиста = МассивДанных51.Количество() / 2 Тогда
					Для Каждого ЭлСтруктуры Из Ветка5.Данные Цикл
						Если МассивДанных51.Количество() / 2 > 1 Тогда
							Если НомЛиста = 1
								И (ЭлСтруктуры.Ключ = "П000500007003" ИЛИ ЭлСтруктуры.Ключ = "П000500008003"
								ИЛИ ЭлСтруктуры.Ключ = "П000500009003" ИЛИ ЭлСтруктуры.Ключ = "П000500010003"
								ИЛИ ЭлСтруктуры.Ключ = "П000500011003" ИЛИ ЭлСтруктуры.Ключ = "П000500012003"
								ИЛИ ЭлСтруктуры.Ключ = "П000500013003" ИЛИ ЭлСтруктуры.Ключ = "П000500014003"
								ИЛИ ЭлСтруктуры.Ключ = "П000500015003" ИЛИ ЭлСтруктуры.Ключ = "П000500016003") Тогда
								Продолжить;
							КонецЕсли;
							Если НомЛиста = МассивДанных51.Количество() / 2
								И (ЭлСтруктуры.Ключ = "П000500001003" ИЛИ ЭлСтруктуры.Ключ = "П000500002003"
								ИЛИ ЭлСтруктуры.Ключ = "П000500003003" ИЛИ ЭлСтруктуры.Ключ = "П000500004003") Тогда
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
						Если Обл <> Неопределено Тогда
							Обл.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Для Каждого ЭлСтруктуры Из МассивДанных51[ИндексВМассиве] Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ЭлСтруктуры Из МассивДанных51[ИндексВМассиве + 1] Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Значение = ЭлСтруктуры.Значение;
					КонецЕсли;
				КонецЦикла;
				
				// Вывод листа с кодом "01008074".
				ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов, СтрПоля);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОбщиеРеквизитыСТитульногоЛиста()
	
	МассивИНН            = Новый Массив(12);
	МассивКПП            = Новый Массив(9);
	МассивДатаПодписи    = Новый Массив(8);
				
	ИсходныйМакет = ТабличныйДокумент;
		
	Область = ИсходныйМакет.Области.Найти("ИНН");
	
	Если НЕ Область = Неопределено Тогда
		
		СтрИНН = Область.Значение;
		
		Если СтрДлина(СтрИНН) = 10 Тогда
			СтрИНН = СтрИНН + "--";
		КонецЕсли;
			
		Для Ном = 1 По СтрДлина(СтрИНН) Цикл
			
			МассивИНН[Ном - 1] = Сред(СтрИНН, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Область = ИсходныйМакет.Области.Найти("КПП");
	
	Если НЕ Область = Неопределено Тогда
		
		Для Ном = 1 По СтрДлина(Область.Значение) Цикл
			
			МассивКПП[Ном - 1] = Сред(Область.Значение, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
			
	Область = ИсходныйМакет.Области.Найти("ДатаПодписи");
	
	Если НЕ Область = Неопределено Тогда
		
		Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда 
			СтрДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
		ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда 
			Если ЗначениеЗаполнено(Область.Значение) Тогда 
				СтрДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
			Иначе
				СтрДатаПодписи = "        ";
			КонецЕсли;
		КонецЕсли;
		
		Для Ном = 1 По СтрДлина(СтрДатаПодписи) Цикл
			
			МассивДатаПодписи[Ном - 1] = Сред(СтрДатаПодписи, Ном, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщиеРеквизитыРазделов = Новый Структура;
	
	ОбщиеРеквизитыРазделов.Вставить("ИНН", МассивИНН);
	ОбщиеРеквизитыРазделов.Вставить("КПП", МассивКПП);
	ОбщиеРеквизитыРазделов.Вставить("ДатаПодписи", МассивДатаПодписи);
	
	Возврат ОбщиеРеквизитыРазделов;
	
КонецФункции

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;

	Если СтруктураДанныхТитульный.Количество() = 0 
	 ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		
		СтруктураДанныхТитульный.Вставить("НалоговыйОрган", ТабличныйДокумент.Области.НалоговыйОрган.Значение);
		СтруктураДанныхТитульный.Вставить("КПП", ТабличныйДокумент.Области.КПП.Значение);
		
	КонецЕсли;
	
	КодИФНС = СтруктураДанныхТитульный.НалоговыйОрган;
	КПП = СтруктураДанныхТитульный.КПП;
                       
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, КодИФНС, Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует, КодИФНС, КПП)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки,КодИФНС, КПП);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, КодИФНС, КПП)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, КодИФНС, КПП", Автосохранение, Вариант, ВыполняемоеОповещение,КодИФНС, КПП );
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, Неопределено, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	КодИФНС = ДополнительныеПараметры.КодИФНС;
	КПП = ДополнительныеПараметры.КПП;
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС, КПП, ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС, КПП)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС, КПП) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;

	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
	 
	 	Возврат Ложь;
		
 	КонецЕсли;
		
	Возврат Сохранить(Автосохранение, КодИФНС, КПП, Вариант, , НаимТекРаздела);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС, КПП, Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета = Метаданные.Отчеты[ИмяОтчета(ЭтаФорма.ИмяФормы)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.КодНалоговогоОргана      = КодИФНС;
	СтруктураРеквизитовФормы.мСохраненныйДок.КПП        			  = КПП;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
		
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
		
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
    	
	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
    	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Если ЭлементСтруктуры.Ключ = "Раздел7" Тогда
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
															
							СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
								
						КонецЦикла;
						
					Иначе
						
						Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
						   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
								
							СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
							
							Ном = Ном + 1;
							
							Продолжить;
								
						КонецЕсли;
						
						Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
								
							СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
								
						КонецЦикла;
						
					КонецЕсли;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		ИмяРаздела = Элем.Ключ;
		ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);

	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);

	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	// вствляем флажок разрешения печати без штрихкода
	СписокСохранения.Вставить("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
		
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);

	Модифицированность   = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
       И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
				   
    	ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);

    КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21"
			И Раздел.ИмяСтраницы <> "Раздел212"
			И Раздел.ИмяСтраницы <> "Раздел5"
			И Раздел.ИмяСтраницы <> "Раздел51"
			И Раздел.ИмяСтраницы <> "Раздел3"
			И Раздел.ИмяСтраницы <> "Раздел31"
			И Раздел.ИмяСтраницы <> "Раздел311" Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		// Многоуровневые разделы и входящие в них подразделы.
		Если Раздел.ИмяСтраницы = "Раздел2"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел21"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел212"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел3"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел31"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел311"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел5"
		 ИЛИ Раздел.ИмяСтраницы = "Раздел51" Тогда
			
			ИмяМногоуровневогоРаздела = Лев(Раздел.ИмяСтраницы, 7);
			
			ДеревоДанныхРазделУровень0 = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяМногоуровневогоРаздела]);
			
			Если Раздел.ИмяСтраницы = "Раздел2"
				ИЛИ Раздел.ИмяСтраницы = "Раздел3"
				ИЛИ Раздел.ИмяСтраницы = "Раздел5" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					Если ДеревоДанныхРазделУровень0.Строки[0].Данные.Количество() = 0 Тогда
						ТабличныйДокумент.Очистить();
						ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
						СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
						Если Раздел.ИмяСтраницы = "Раздел2" Тогда
							ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
							ТабличныйДокумент.Области["П000200003003"].Значение = "168";
						КонецЕсли;
						СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Раздел21"
				ИЛИ Раздел.ИмяСтраницы = "Раздел31"
				ИЛИ Раздел.ИмяСтраницы = "Раздел51" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						Если ДеревоДанныхРазделУровень1.Строки[0].Данные.Количество() = 0 Тогда
							ТабличныйДокумент.Очистить();
							ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
							Если Раздел.ИмяСтраницы = "Раздел51" Тогда
								ТабличныйДокумент.Области["П000510000104_1"].Значение = "-";
							КонецЕсли;
							СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Раздел.ИмяСтраницы = "Раздел212" ИЛИ Раздел.ИмяСтраницы = "Раздел311" Тогда
				Если ДеревоДанныхРазделУровень0.Строки.Количество() = 1 Тогда
					ДеревоДанныхРазделУровень1 = ДеревоДанныхРазделУровень0.Строки[0];
					Если ДеревоДанныхРазделУровень1.Строки.Количество() = 1 Тогда
						ДеревоДанныхРазделУровень2 = ДеревоДанныхРазделУровень1.Строки[0];
						Если ДеревоДанныхРазделУровень2.Строки.Количество() = 1 Тогда
							Если ДеревоДанныхРазделУровень2.Строки[0].Данные.Количество() = 0 Тогда
								ТабличныйДокумент.Очистить();
								ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
								СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			Если Раздел.ИмяСтраницы = "Раздел7" Тогда
				ТабличныйДокумент.Области["П000700005003"].Значение = "-";
			КонецЕсли;
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногоуровневыхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СохраненныеДанныеОтчета();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение])
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	// Восстанавливаем сохраненные данные многоуровневых разделов.
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем флажок ПодсчетаСтраниц
	СписокСохранения.Свойство("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	СписокСохранения.Свойство("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	Если НЕ СписокСохранения.Свойство("ПечатьБезШтрихкодаРазрешена", СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена) Тогда
		СтруктураРеквизитовФормы.мПечатьБезШтрихкодаРазрешена = Ложь;
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе
			И Раздел.ИмяСтраницы <> "Раздел2"
			И Раздел.ИмяСтраницы <> "Раздел21"
			И Раздел.ИмяСтраницы <> "Раздел212"
			И Раздел.ИмяСтраницы <> "Раздел3"
			И Раздел.ИмяСтраницы <> "Раздел31"
			И Раздел.ИмяСтраницы <> "Раздел311"
			И Раздел.ИмяСтраницы <> "Раздел5"
			И Раздел.ИмяСтраницы <> "Раздел51" Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяТекРаздела = "Титульный";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	РасчетНаСервере("Раздел6");
	РасчетНаСервере("Раздел51");
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СписокСохранения)
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	
	ПрефиксТД = "ПолеТабличногоДокумента";
	
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения") Тогда
		СписокСохранения.Удалить("ДанныеВариантовАвтоЗаполнения");
	КонецЕсли;
	
	ДанныеТит = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Титульный"];
	
	Для Каждого Показатель Из ДанныеТит Цикл
		
		ИмяПоказателя = Показатель.Ключ;
		
		Если ИмяПоказателя = "ИНН1_1" Тогда
			ДанныеТит.Вставить("ИНН", "");
			Для Ном = 1 По 12 Цикл
				ДанныеТит.ИНН = ДанныеТит.ИНН + СокрЛП(ДанныеТит["ИНН1_" + Ном]);
				ДанныеТит.Удалить("ИНН1_" + Ном);
			КонецЦикла;
			Если Лев(ДанныеТит.ИНН, 2) = "00" Тогда
				ДанныеТит.ИНН = Сред(ДанныеТит.ИНН, 3);
			КонецЕсли;
			ДанныеТит.ИНН = СтрЗаменить(ДанныеТит.ИНН, "-", "");
		ИначеЕсли ИмяПоказателя = "КПП1_1" Тогда
			ДанныеТит.Вставить("КПП", "");
			Для Ном = 1 По 9 Цикл
				ДанныеТит.КПП = ДанныеТит.КПП + СокрЛП(ДанныеТит["КПП1_" + Ном]);
				ДанныеТит.Удалить("КПП1_" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НалоговыйОрган1" Тогда
			ДанныеТит.Вставить("НалоговыйОрган", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.НалоговыйОрган = ДанныеТит.НалоговыйОрган + СокрЛП(ДанныеТит["НалоговыйОрган" + Ном]);
				ДанныеТит.Удалить("НалоговыйОрган" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "НомерКорректировки1" Тогда
			ДанныеТит.Вставить("НомерКорректировки", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.НомерКорректировки = ДанныеТит.НомерКорректировки
					+ СтрЗаменить(СокрЛП(ДанныеТит["НомерКорректировки" + Ном]), "-", "");
				ДанныеТит.Удалить("НомерКорректировки" + Ном);
				Если НЕ ЗначениеЗаполнено(ДанныеТит.НомерКорректировки) Тогда
					ДанныеТит.НомерКорректировки = "0";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Период1" Тогда
			ДанныеТит.Вставить("Период", "");
			Для Ном = 1 По 2 Цикл
				ДанныеТит.Период = ДанныеТит.Период + СокрЛП(ДанныеТит["Период" + Ном]);
				ДанныеТит.Удалить("Период" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ОтчетГод1" Тогда
			ДанныеТит.Вставить("ОтчетГод", "");
			Для Ном = 1 По 4 Цикл
				ДанныеТит.ОтчетГод = ДанныеТит.ОтчетГод + СокрЛП(ДанныеТит["ОтчетГод" + Ном]);
				ДанныеТит.Удалить("ОтчетГод" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "ПоМесту1" Тогда
			ДанныеТит.Вставить("ПоМесту", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.ПоМесту = ДанныеТит.ПоМесту + СокрЛП(ДанныеТит["ПоМесту" + Ном]);
				ДанныеТит.Удалить("ПоМесту" + Ном);
			КонецЦикла;
		ИначеЕсли ИмяПоказателя = "Прил1" Тогда
			ДанныеТит.Вставить("Прил", "");
			Для Ном = 1 По 3 Цикл
				ДанныеТит.Прил = ДанныеТит.Прил + СокрЛП(ДанныеТит["Прил" + Ном]);
				ДанныеТит.Удалить("Прил" + Ном);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	Если СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000100010") Тогда
			
			СтарыеИмена1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000010001003,П000010002003,П000010003003");
			НовыеИмена1 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000100000101,П000100000102,П000100000103");
			
			НовыеДанные1 = Новый Структура;
			СтарыеДанные1 = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел1"];
			
			Для каждого Показатель Из СтарыеДанные1 Цикл
				ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
				ИндВМассиве = СтарыеИмена1.Найти(ПодстрокаПоиска);
				Если ИндВМассиве <> Неопределено Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена1[ИндВМассиве]);
					НовыеДанные1.Вставить(НовИмяПоказателя, Показатель.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_1 = ДанныеМногострочныхРазделов["П0000100010"];
			Для НомКолонки = 1 по 3 Цикл
				НовИмяКолонки = "П00010000010" + НомКолонки;
				ТЗ_1.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
			КонецЦикла;
			
			Для НомСтр1 = 1 По ТЗ_1.Количество() Цикл
				НомСтр1Стр = Формат(НомСтр1, "ЧГ=");
				Если НовыеДанные1.Свойство("П000100000101_" + НомСтр1Стр) Тогда
					СтрокаТЗ_1 = ТЗ_1[НомСтр1 - 1];
					СтрокаТЗ_1["П000100000101"] = НовыеДанные1["П000100000101_" + НомСтр1Стр];
					СтрокаТЗ_1["П000100000102"] = НовыеДанные1["П000100000102_" + НомСтр1Стр];
					СтрокаТЗ_1["П000100000103"] = НовыеДанные1["П000100000103_" + НомСтр1Стр];
				КонецЕсли;
			КонецЦикла;
			
			СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел1"] = НовыеДанные1;
			ДанныеМногострочныхРазделов.Вставить("П0001000001", ТЗ_1.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000100010");
			
		КонецЕсли;
		
		Если ДанныеМногострочныхРазделов.Свойство("П0000662100") Тогда
			
			СтарыеИмена6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000066210001,П000066210002,П000066210003,П000066210004");
			НовыеИмена6 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"П000620000101,П000620000102,П000620000103,П000620000104");
			
			НовыеДанные6 = Новый Структура;
			СтарыеДанные6 = СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел6"];
			
			Для каждого Показатель Из СтарыеДанные6 Цикл
				ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
				ИндВМассиве = СтарыеИмена6.Найти(ПодстрокаПоиска);
				Если ИндВМассиве <> Неопределено Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена6[ИндВМассиве]);
					НовыеДанные6.Вставить(НовИмяПоказателя, Показатель.Значение);
				ИначеЕсли СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000600" Тогда
					НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00006", "П00060");
					НовыеДанные6.Вставить(НовИмяПоказателя, Показатель.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ТЗ_6 = ДанныеМногострочныхРазделов["П0000662100"];
			Для НомКолонки = 1 по 4 Цикл
				НовИмяКолонки = "П00062000010" + НомКолонки;
				ТЗ_6.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
			КонецЦикла;
			
			Для НомСтр6 = 1 По ТЗ_6.Количество() Цикл
				НомСтр6Стр = Формат(НомСтр6, "ЧГ=");
				Если НовыеДанные6.Свойство("П000620000101_" + НомСтр6Стр) Тогда
					СтрокаТЗ_6 = ТЗ_6[НомСтр6 - 1];
					СтрокаТЗ_6["П000620000101"] = НовыеДанные6["П000620000101_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000102"] = НовыеДанные6["П000620000102_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000103"] = НовыеДанные6["П000620000103_" + НомСтр6Стр];
					СтрокаТЗ_6["П000620000104"] = НовыеДанные6["П000620000104_" + НомСтр6Стр];
				КонецЕсли;
			КонецЦикла;
			
			СписокСохранения.ПоказателиОтчета[ПрефиксТД + "Раздел6"] = НовыеДанные6;
			ДанныеМногострочныхРазделов.Вставить("П0006200001", ТЗ_6.Скопировать());
			ДанныеМногострочныхРазделов.Удалить("П0000662100");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				Если ЭлементСтруктуры.Ключ = "Раздел4" Тогда
					
					ТЗ_4 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					Для каждого СтрокаТЗ_4 Из ТЗ_4 Цикл
						
						СтарыеДанные = СтрокаТЗ_4.Данные;
						СтарыеДанныеДопСтрок = СтрокаТЗ_4.ДанныеДопСтрок;
						
						НовыеДанные = Новый Структура;
						НовыеДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма["П0004000001"], Тип("ТаблицаЗначений"));
						
						Для каждого Показатель Из СтарыеДанные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000400" Тогда
								Если Показатель.Ключ = "П000040007003" ИЛИ Показатель.Ключ = "П000040007004" Тогда
									Год = СтарыеДанные["П000040007004"];
									Мес = СтарыеДанные["П000040007003"];
									НовИмяПоказателя = "П000400007003";
									Если Год > 0 И Мес > 0 Тогда
										СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
										СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
										НовыеДанные.Вставить(НовИмяПоказателя, Дата(СтрГод + СтрМес + "01000000"));
									Иначе
										НовыеДанные.Вставить(НовИмяПоказателя,
											РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")));
									КонецЕсли;
								Иначе
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00004", "П00040");
									НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ТЗ_40 = Неопределено;
						НовыеДанныеДопСтрок.Очистить();
						Если СтрокаТЗ_4.ДополнительныеДанные <> Неопределено
							И СтрокаТЗ_4.ДополнительныеДанные.Свойство("П000044110000", ТЗ_40) Тогда
							НомСтр40 = 0;
							Для каждого СтрокаТЗ_40 Из ТЗ_40 Цикл
								НомСтр40 = НомСтр40 + 1;
								НомСтр40Стр = Формат(НомСтр40, "ЧГ=");
								НовыеДанные.Вставить("П000400000101_" + НомСтр40Стр, СтрокаТЗ_40["КодОснования"]);
								НовыеДанные.Вставить("П000400000102_" + НомСтр40Стр, СтрокаТЗ_40["Количество"]);
								НовСтрокаДопДанных40 = НовыеДанныеДопСтрок.Добавить();
								НовСтрокаДопДанных40["П000400000101"] = СтрокаТЗ_40["КодОснования"];
								НовСтрокаДопДанных40["П000400000102"] = СтрокаТЗ_40["Количество"];
							КонецЦикла;
						Иначе
							НовыеДанные.Вставить("П000400000101_1", "");
							НовыеДанные.Вставить("П000400000102_1", 0);
							НовыеДанныеДопСтрок.Добавить();
						КонецЕсли;
						
						СтрокаТЗ_4.Данные = НовыеДанные;
						
						СтрокаТЗ_4.ДанныеДопСтрок = НовыеДанныеДопСтрок;
						
					КонецЦикла;
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел7" Тогда
					
					ТЗ_7 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					Для каждого СтрокаТЗ_7 Из ТЗ_7 Цикл
						
						СтарыеДанные = СтрокаТЗ_7.Данные;
						СтарыеДанныеДопСтрок = СтрокаТЗ_7.ДанныеДопСтрок;
						
						НовыеДанные = Новый Структура;
						НовыеДанныеДопСтрок = Новый Структура;
						
						СтарыеИмена73 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000070017003,П000070018003,П000070019003,П000070020003,П000070021003,П000070022003");
						НовыеИмена73 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000730000101,П000730000102,П000730000103,П000730000104,П000730000105,П000730000106");
						
						Для каждого Показатель Из СтарыеДанные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000700" Тогда
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00007", "П00070");
								НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
							ИначеЕсли СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 11) = "П0000771000" Тогда
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П0000771000", "П0007100001");
								НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
							ИначеЕсли СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000700" Тогда
								ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
								ИндВМассиве = СтарыеИмена73.Найти(ПодстрокаПоиска);
								Если ИндВМассиве <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, ПодстрокаПоиска, НовыеИмена73[ИндВМассиве]);
									Если ПодстрокаПоиска = "П000070017003" ИЛИ ПодстрокаПоиска = "П000070022003" Тогда
										Если ПодстрокаПоиска = "П000070017003" Тогда
											Год = СтарыеДанные[СтрЗаменить(Показатель.Ключ, "П000070017003", "П000070017004")];
										Иначе
											Год = СтарыеДанные[СтрЗаменить(Показатель.Ключ, "П000070022003", "П000070022004")];
										КонецЕсли;
										Мес = Показатель.Значение;
										Если Год > 0 И Мес > 0 Тогда
											СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
											СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
											НовыеДанные.Вставить(НовИмяПоказателя, Дата(СтрГод + СтрМес + "01000000"));
										Иначе
											НовыеДанные.Вставить(НовИмяПоказателя,
												РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата")));
										КонецЕсли;
									Иначе
										НовыеДанные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Если СтарыеДанныеДопСтрок.Свойство("П0000771000") Тогда
							
							ТЗ_71 = СтарыеДанныеДопСтрок["П0000771000"];
							
							Для НомКолонки = 1 по 3 Цикл
								НовИмяКолонки = "П00071000010" + НомКолонки;
								ТЗ_71.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
							КонецЦикла;
							
							НовыеДанныеДопСтрок.Вставить("П0007100001", ТЗ_71.Скопировать());
							
						КонецЕсли;
						
						Если СтарыеДанныеДопСтрок.Свойство("П0000700170") Тогда
							
							ТЗ_73 = СтарыеДанныеДопСтрок["П0000700170"];
							
							ТЗ_73.Колонки.Вставить(0, "П000730000101", ОписаниеТиповДата);
							ТЗ_73.Колонки.Добавить("П000730000106", ОписаниеТиповДата);
							
							Для каждого СтрокаТЗ_73 Из ТЗ_73 Цикл
								
								Мес = СтрокаТЗ_73["П000070017003"];
								Год = СтрокаТЗ_73["П000070017004"];
								Если Год > 0 И Мес > 0 Тогда
									СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
									СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
									СтрокаТЗ_73["П000730000101"] = Дата(СтрГод + СтрМес + "01000000");
								Иначе
									СтрокаТЗ_73["П000730000101"]
									= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
								КонецЕсли;
								
								Мес = СтрокаТЗ_73["П000070022003"];
								Год = СтрокаТЗ_73["П000070022004"];
								Если Год > 0 И Мес > 0 Тогда
									СтрГод = Формат(Год, "ЧЦ=4;ЧГ=;ЧВН=");
									СтрМес = Формат(Мес, "ЧЦ=2;ЧВН=");
									СтрокаТЗ_73["П000730000106"] = Дата(СтрГод + СтрМес + "01000000");
								Иначе
									СтрокаТЗ_73["П000730000106"]
									= РегламентированнаяОтчетностьКлиентСервер.ПустоеЗначениеТипа(Тип("Дата"));
								КонецЕсли;
								
							КонецЦикла;
							
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070017003"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070017004"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070022003"]);
							ТЗ_73.Колонки.Удалить(ТЗ_73.Колонки["П000070022004"]);
							
							Для НомКолонки = 2 по 5 Цикл
								НовИмяКолонки = "П00073000010" + НомКолонки;
								ТЗ_73.Колонки[НомКолонки - 1].Имя = НовИмяКолонки;
							КонецЦикла;
							
							НовыеДанныеДопСтрок.Вставить("П0007300001", ТЗ_73.Скопировать());
							
						КонецЕсли;
						
						СтрокаТЗ_7.Данные = НовыеДанные;
						
						СтрокаТЗ_7.ДанныеДопСтрок = НовыеДанныеДопСтрок;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				Если ЭлементСтруктуры.Ключ = "Раздел2" Тогда
					
					ТЗ_21 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					ПредЗначКБК = Неопределено;
					
					Для каждого СтрокаТЗ_21 Из ТЗ_21 Цикл
						
						ТекЗначКБК = СокрЛП(СтрокаТЗ_21.Данные["П000020002003"]);
						
						Если ПредЗначКБК <> ТекЗначКБК Тогда
							
							ВеткаРаздел2 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел2.Данные = Новый Структура;
							
							ВеткаРаздел2.Данные.Вставить("П000200001003", "03100");
							ВеткаРаздел2.Данные.Вставить("П000200002003", ТекЗначКБК);
							ВеткаРаздел2.Данные.Вставить("П000200003003", "168");
							
							ПредЗначКБК = ТекЗначКБК;
							
						КонецЕсли;
						
						ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
						ВеткаРаздел21.Данные = Новый Структура;
						
						Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000200" Тогда
								Если Показатель.Ключ = "П000020002003" Тогда
									Продолжить;
								КонецЕсли;
								НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00002", "П00020");
								ВеткаРаздел21.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
							КонецЕсли;
						КонецЦикла;
						
						ТЗ_211 = Неопределено;
						Если СтрокаТЗ_21.ДополнительныеДанные <> Неопределено
							И СтрокаТЗ_21.ДополнительныеДанные.Свойство("П000022110000", ТЗ_211) Тогда
							НомСтр211 = 0;
							Для каждого СтрокаТЗ_211 Из ТЗ_211 Цикл
								НомСтр211 = НомСтр211 + 1;
								ВеткаРаздел21.Данные.Вставить("П000211000101_" + Формат(НомСтр211, "ЧГ="), СтрокаТЗ_211["КодОснования"]);
								ВеткаРаздел21.Данные.Вставить("П000211000102_" + Формат(НомСтр211, "ЧГ="), СтрокаТЗ_211["Количество"]);
							КонецЦикла;
						Иначе
							ВеткаРаздел21.Данные.Вставить("П000211000101_1", "");
							ВеткаРаздел21.Данные.Вставить("П000211000102_1", 0);
						КонецЕсли;
						
						НомСтрТЗ_212 = 0;
						Пока СтрокаТЗ_21.Данные.Свойство("П000022121000_" + Формат(НомСтрТЗ_212 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
							ВеткаРаздел212.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_21.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000200" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_212 + 1, "ЧГ=") Тогда
										НовИмяПоказателя = СтрЗаменить(Лев(Показатель.Ключ, 13), "П00002", "П00020");
										ВеткаРаздел212.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_212 = Неопределено;
							Если СтрокаТЗ_21.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_21.ДополнительныеДанные.Свойство("П000022121000_" + Формат(НомСтрТЗ_212 + 1, "ЧГ="), ТЗ_212) Тогда
								НомСтр212 = 0;
								Для каждого СтрокаТЗ_212 Из ТЗ_212 Цикл
									НомСтр212 = НомСтр212 + 1;
									ВеткаРаздел212.Данные.Вставить("П000212000101_" + Формат(НомСтр212, "ЧГ="), СтрокаТЗ_212["КодОснования"]);
									ВеткаРаздел212.Данные.Вставить("П000212000102_" + Формат(НомСтр212, "ЧГ="), СтрокаТЗ_212["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел212.Данные.Вставить("П000212000101_1", "");
								ВеткаРаздел212.Данные.Вставить("П000212000102_1", 0);
							КонецЕсли;
							НомСтрТЗ_212 = НомСтрТЗ_212 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел3" Тогда
					
					ТЗ_3 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					Для каждого СтрокаТЗ_3 Из ТЗ_3 Цикл
						
						ИндексСтрокиТЗ_3 = ТЗ_3.Индекс(СтрокаТЗ_3);
						Если ИндексСтрокиТЗ_3 > 0 Тогда
							ПредыдущаяСтрокаТЗ_3 = ТЗ_3[ИндексСтрокиТЗ_3 - 1];
							Если СтрокаТЗ_3.Данные["П000030001003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030001003"]
							   И СтрокаТЗ_3.Данные["П000030002003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030002003"]
							   И СтрокаТЗ_3.Данные["П000030003003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030003003"]
							   И СтрокаТЗ_3.Данные["П000030004003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030004003"]
							   И СтрокаТЗ_3.Данные["П000030005003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030005003"]
							   И СтрокаТЗ_3.Данные["П000030006003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030006003"]
							   И СтрокаТЗ_3.Данные["П000030007003"] = ПредыдущаяСтрокаТЗ_3.Данные["П000030007003"] Тогда
								
								ВеткаРаздел3 = ДеревоДанных.Строки[ДеревоДанных.Строки.Количество() - 1];
								
							Иначе
								
								ВеткаРаздел3 = ДеревоДанных.Строки.Добавить();
								ВеткаРаздел3.Данные = Новый Структура;
								
							КонецЕсли;
						Иначе
							
							ВеткаРаздел3 = ДеревоДанных.Строки.Добавить();
							ВеткаРаздел3.Данные = Новый Структура;
							
						КонецЕсли;
						
						РазрешенныеКодыСтрок3 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"010,020,030,040,050,060,070");
						Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок3.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00003", "П00030");
									ВеткаРаздел3.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
						ВеткаРаздел31.Данные = Новый Структура;
						
						РазрешенныеКодыСтрок31 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"080,090,100,110,120,130");
						Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок31.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00003", "П00030");
									ВеткаРаздел31.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						СтарыеИмена311 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000030017001,П000030017002,П000030017003,П000030017004,П000030017005");
						НовыеИмена311 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"П000300017003,П000300017004,П000300017005,П000300017006,П000300017007");
						
						НомСтрТЗ_311 = 0;
						Пока СтрокаТЗ_3.Данные.Свойство("П000033110000_" + Формат(НомСтрТЗ_311 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
							ВеткаРаздел311.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_3.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000300" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_311 + 1, "ЧГ=") Тогда
										ПодстрокаПоиска = Лев(Показатель.Ключ, 13);
										ИндВМассиве = СтарыеИмена311.Найти(ПодстрокаПоиска);
										Если ИндВМассиве <> Неопределено Тогда
											НовИмяПоказателя = НовыеИмена311[ИндВМассиве];
										Иначе
											НовИмяПоказателя = СтрЗаменить(ПодстрокаПоиска, "П00003", "П00030");
										КонецЕсли;
										ВеткаРаздел311.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_311 = Неопределено;
							Если СтрокаТЗ_3.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_3.ДополнительныеДанные.Свойство("П000033110000_" + Формат(НомСтрТЗ_311 + 1, "ЧГ="), ТЗ_311) Тогда
								НомСтр311 = 0;
								Для каждого СтрокаТЗ_311 Из ТЗ_311 Цикл
									НомСтр311 = НомСтр311 + 1;
									ВеткаРаздел311.Данные.Вставить("П000311000101_" + Формат(НомСтр311, "ЧГ="), СтрокаТЗ_311["КодОснования"]);
									ВеткаРаздел311.Данные.Вставить("П000311000102_" + Формат(НомСтр311, "ЧГ="), СтрокаТЗ_311["Количество"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел311.Данные.Вставить("П000311000101_1", "");
								ВеткаРаздел311.Данные.Вставить("П000311000102_1", 0);
							КонецЕсли;
							НомСтрТЗ_311 = НомСтрТЗ_311 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				ИначеЕсли ЭлементСтруктуры.Ключ = "Раздел5" Тогда
					
					ТЗ_5 = ДанныеМногостраничныхРазделов[ЭлементСтруктуры.Ключ];
					
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					
					Для каждого СтрокаТЗ_5 Из ТЗ_5 Цикл
						
						ВеткаРаздел5 = ДеревоДанных.Строки.Добавить();
						ВеткаРаздел5.Данные = Новый Структура;
						
						РазрешенныеКодыСтрок5 = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
							"010,020,030,040,070,080,090,100,110,120,130,140,150,160");
						Для каждого Показатель Из СтрокаТЗ_5.Данные Цикл
							Если СтрДлина(Показатель.Ключ) = 13 И Лев(Показатель.Ключ, 8) = "П0000500" Тогда
								ПодстрокаПоиска = Сред(Показатель.Ключ, 9, 3);
								Если РазрешенныеКодыСтрок5.Найти(ПодстрокаПоиска) <> Неопределено Тогда
									НовИмяПоказателя = СтрЗаменить(Показатель.Ключ, "П00005", "П00050");
									ВеткаРаздел5.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						НомСтрТЗ_51 = 0;
						Пока СтрокаТЗ_5.Данные.Свойство("П000055110000_" + Формат(НомСтрТЗ_51 + 1, "ЧГ=")) Цикл
							
							ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
							ВеткаРаздел51.Данные = Новый Структура;
							
							Для каждого Показатель Из СтрокаТЗ_5.Данные Цикл
								Если СтрДлина(Показатель.Ключ) > 14 И Лев(Показатель.Ключ, 8) = "П0000500" Тогда
									Если Сред(Показатель.Ключ, 15) = Формат(НомСтрТЗ_51 + 1, "ЧГ=") Тогда
										НовИмяПоказателя = СтрЗаменить(Лев(Показатель.Ключ, 13), "П00005", "П00050");
										ВеткаРаздел51.Данные.Вставить(НовИмяПоказателя, Показатель.Значение);
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							
							ТЗ_51 = Неопределено;
							Если СтрокаТЗ_5.ДополнительныеДанные <> Неопределено
								И СтрокаТЗ_5.ДополнительныеДанные.Свойство("П000055110000_" + Формат(НомСтрТЗ_51 + 1, "ЧГ="), ТЗ_51) Тогда
								НомСтр51 = 0;
								Для каждого СтрокаТЗ_51 Из ТЗ_51 Цикл
									НомСтр51 = НомСтр51 + 1;
									ВеткаРаздел51.Данные.Вставить("П000510000101_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["КодОснования"]);
									ВеткаРаздел51.Данные.Вставить("П000510000102_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["Количество"]);
									ВеткаРаздел51.Данные.Вставить("П000510000103_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["Кподз"]);
									ВеткаРаздел51.Данные.Вставить("П000510000104_" + Формат(НомСтр51, "ЧГ="), СтрокаТЗ_51["Ктд"]);
								КонецЦикла;
							Иначе
								ВеткаРаздел51.Данные.Вставить("П000510000101_1", "");
								ВеткаРаздел51.Данные.Вставить("П000510000102_1", 0);
								ВеткаРаздел51.Данные.Вставить("П000510000103_1", 0);
								ВеткаРаздел51.Данные.Вставить("П000510000104_1", "-");
							КонецЕсли;
							НомСтрТЗ_51 = НомСтрТЗ_51 + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДеревоДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	// Раздел 2.1.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000200015003", "П000200013003;П000200014003");
	
	// Раздел 3.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000300004003", "П000300019003");
	
	// Разделы 5.1, 5.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000500014003", "П000500007003;П000510000101;П000510000102");
	
	// Раздел 6.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600004003", "П000600001003;П000600002003;П000600003003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600009003", "П000600001003;П000600005003;П000600006003;П000600007003;П000600008003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000600010003", "П000600001003;П000600002003;П000600003003;П000600005003;П000600006003;П000600007003;П000600008003");
	// Для вычисления значений в графе 3 многострочной части подраздела 6.2.
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000620000103", "П000620000102");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("П000620000104", "П000620000102;П000600001003;П000600002003;П000600003003;П000600005003;П000600006003;П000600007003;П000600008003");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов()
	
	Для каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		СписокИменРаздела = мСтруктураИменаКолонокРазделов[ЭлементСтруктуры.Ключ];
		ТаблицаРаздела = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений"));
		
		СписокИменРаздела.Очистить();
		Для каждого КолонкаТаблицы Из ТаблицаРаздела.Колонки Цикл
			СписокИменРаздела.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ИнициализироватьТаблицуСоставаПоказателей();
	
	ЗаполнитьНачальныеНастройки();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьСтруктуруИменКолонокМногострочныхРазделов();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	ОтчетСкопированОрганизацияНеИзменилась = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		НачальныеОперацииСМногострочнымиБлоками();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
				// Для нового док-та установим возведенный флаг проверки соотношений.
				СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
			КонецЕсли;
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			ТабличныйДокумент.Области.ПоМесту.Значение
			= ?(РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
			СтруктураРеквизитовФормы.Организация), "214", "120");
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			Если СтруктураРеквизитовФормы.мСохраненныйДок.Организация
				= СтруктураРеквизитовФормы.Организация Тогда
				ОтчетСкопированОрганизацияНеИзменилась = Истина;
			КонецЕсли;
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.ИП = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	
	СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации = НачальноеЗначениеНаименованияОрганизации();
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		Если СтруктураРеквизитовФормы.ИП
			И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
			И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
			ТабличныйДокумент.Области.КодФормыРеорганизации.Значение = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		
		Если ОтчетСкопированОрганизацияНеИзменилась Тогда
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма)
				И ЗначениеЗаполнено(ТабличныйДокумент.Области.КодФормыРеорганизации.Значение)
				И ТабличныйДокумент.Области.КодФормыРеорганизации.Значение <> "0" Тогда
				НаимОргВосстановленное = ТабличныйДокумент.Области.НаимОрг.Значение;
				ЗаполнитьСведенияОбОрганизацииНаСервере();
				ТабличныйДокумент.Области.НаимОрг.Значение = НаимОргВосстановленное;
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьСведенияОбОрганизацииНаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПоказатьКнопкиПечати(ЭтаФорма);
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейкахНаСервере();
	РегламентированнаяОтчетность.ПолучитьЗначениеОКВЭД(ДатаПодписи, СтруктураРеквизитовФормы);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция НачальноеЗначениеНаименованияОрганизации()
	
	Если НЕ СтруктураРеквизитовФормы.ИП Тогда
		
		СтрокаСведений = "НаимЮЛПол";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		НаимОрганизации = "";
		СведенияОбОрганизации.Свойство("НаимЮлПол", НаимОрганизации);
		
		Возврат СокрЛП(НаимОрганизации);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПериодОтчета(Форма)
	
	ЗаполненКодФормыРеорганизации = ЗначениеЗаполнено(Форма.ТабличныйДокумент.Области.КодФормыРеорганизации.Значение);
	МесяцОкончания = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если ЗаполненКодФормыРеорганизации Тогда
		КодОтчетногоПериода = МесяцОкончания + 70;
	Иначе
		КодОтчетногоПериода = МесяцОкончания;
	КонецЕсли;
	
	Форма.ТабличныйДокумент.Области.Период.Значение = Формат(КодОтчетногоПериода, "ЧЦ=2; ЧВН=");
	
	Форма.ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел2";
	СтрокаУровня1.Представление            = "Раздел 2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел3";
	СтрокаУровня1.Представление            = "Раздел 3";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел4";
	СтрокаУровня1.Представление            = "Раздел 4";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел5";
	СтрокаУровня1.Представление            = "Раздел 5";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел6";
	СтрокаУровня1.Представление            = "Раздел 6";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел7";
	СтрокаУровня1.Представление            = "Раздел 7";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки() Экспорт
	
	ПолучитьТаблицуСоставаПоказателей();
	ТаблицаСоставПоказателей.Очистить();
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
		
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		Если СтрНайти(ИмяСтраницы, "Раздел2") > 0
		 ИЛИ СтрНайти(ИмяСтраницы, "Раздел3") > 0
		 ИЛИ СтрНайти(ИмяСтраницы, "Раздел5") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить;
			КонецЕсли;

			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			НоваяСтрока = ТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;
			НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяпоСтруктуре;

			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
				НоваяСтрока.КодПоказателяПоСтруктуре  = КодПоказателяПоСтруктуре;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда	
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
		Конецесли;

	КонецЦикла;
	
	СтруктураРеквизитовФормы.АдресВоВремХранилищеТаблицаСоставПоказателей
		= ПоместитьВоВременноеХранилище(ТаблицаСоставПоказателей, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв2");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	// Определение имен секций.
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
		ИмяСекцииОснованияНалогообложения = "ОснованияНалогообложения201601";
	Иначе
		ИмяСекцииОснованияНалогообложения = "ОснованияНалогообложения201501";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2017-01-01' Тогда
		ИмяСекцииВидыПИ_Раздел5 = "ВидыПИ_Раздел5_201701";
	Иначе
		ИмяСекцииВидыПИ_Раздел5 = "ВидыПИ_Раздел5";
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2017-01-01' Тогда
		ИмяСекцииВидыПИ_Раздел6 = "ВидыПИ_201701";
	Иначе
		ИмяСекцииВидыПИ_Раздел6 = "ВидыПИ";
	КонецЕсли;
	
	Если ДатаПодписи >= '2016-01-01' ИЛИ НЕ ЗначениеЗаполнено(ДатаПодписи) Тогда
		ИмяСекцииКБК = "КБК_201601";
	Иначе
		ИмяСекцииКБК = "КБК_201505";
	КонецЕсли;
	
	// Титульный лист.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "ПоМесту", 3, ,
		"Выбор места представления", КоллекцияСписковВыбора["МестаПредставления"]);
	Если СтруктураРеквизитовФормы.ИП Тогда
		ИмяСекцииФормРеорг = "ФормыРеорганизацииИП";
	Иначе
		ИмяСекцииФормРеорг = "ФормыРеорганизацииОрг";
	КонецЕсли;
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодФормыРеорганизации", 1, ,
		"Выбор кода формы реорганизации (ликвидации)", КоллекцияСписковВыбора[ИмяСекцииФормРеорг]);
	
	//Раздел 1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000100000101", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	
	//Раздел 2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200002003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000211000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000212000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000200023003",  0, ,
		"Выбор значения коэффициента Кд", КоллекцияСписковВыбора["КоэфКд"]);
	
	//Раздел 3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300001003",  5, ,
		"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел3"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300002003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300003003",  3, ,
		"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000311000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000300006003",  0, ,
		"Выбор значения коэффициента К Ов", КоллекцияСписковВыбора["КоэфКОв"]);
	
	//Раздел 4.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400001003",  5, ,
		"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел4"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400002003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400003003",  3, ,
		"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000400000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	
	//Раздел 5.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500001003",  5, ,
		"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора[ИмяСекцииВидыПИ_Раздел5]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500002003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000500003003",  3, ,
		"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510000101",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510000103", 0, ,
		"Выбор значения коэффициента Кподз", КоллекцияСписковВыбора["КоэфКподз"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000510000104", 0, ,
		"Выбор значения коэффициента Ктд", КоллекцияСписковВыбора["КоэфКтд"]);
	
	//Раздел 6.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000600011003",  3, ,
		"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000620000101",  5, ,
		"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора[ИмяСекцииВидыПИ_Раздел6]);
	
	//Раздел 7.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700001003", 20, ,
		"Выбор кода бюджетной классификации", КоллекцияСписковВыбора[ИмяСекцииКБК]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700003003",  3, ,
		"Выбор кода единицы измерения по ОКЕИ", КоллекцияСписковВыбора["ОКЕИ"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000700005003",  0, ,
		"Выбор значения коэффициента Ктд", КоллекцияСписковВыбора["КоэфКтд"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000710000101",  5, ,
		"Выбор кода вида полезного ископаемого", КоллекцияСписковВыбора["ВидыПИ_Раздел7"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П000710000102",  4, ,
		"Выбор кода основания налогообложения", КоллекцияСписковВыбора[ИмяСекцииОснованияНалогообложения]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
		
		Если СтрНачинаетсяС(Область.Имя, "П000510000104") ИЛИ Область.Имя = "П000700005003" Тогда
			Если СокрЛП(Область.Значение) = "0,0" Тогда
				ИсходноеЗначение = "0";
			ИначеЕсли СокрЛП(Область.Значение) = "1,0" Тогда
				ИсходноеЗначение = "1";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
		
		Если СтрНачинаетсяС(Область.Имя, "П000510000104") ИЛИ Область.Имя = "П000700005003" Тогда
			ЗначПоказателя = СокрЛП(Область.Значение);
			Если ЗначПоказателя = "0" Тогда
				Область.Значение = "0,0";
			ИначеЕсли ЗначПоказателя = "1" Тогда
				Область.Значение = "1,0";
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
	Если КодПоказателя = "КодФормыРеорганизации" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
		ЗаполнитьПериодОтчета(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИзвлечьСтруктуруXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СхемаВыгрузки504");

	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""), РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		АктивнаяСтраница = ЭтаФорма[ТекущийРаздел].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		Если АктивнаяСтраница.Количество() > 0 Тогда
			АктивнаяСтраница = АктивнаяСтраница[0];
			ИндексАктивнойСтраницы = ЭтаФорма[ТекущийРаздел].Индекс(АктивнаяСтраница);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногостраничныхРазделов Цикл	
		
		НайденноеЗначение = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
		
		Если НЕ НайденноеЗначение = Неопределено Тогда
			
			НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
			
			ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
			
			Если НайденноеЗначение[0].Свойство("Данные") Тогда
				
				Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
						
						СтрокаТаблЗнач.Данные.Очистить();
						СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
					
					Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
						
						СтруктураДопСтрок = Новый Структура;
						
						Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
							
							ТаблЗнач = ЭлСтруктуры.Значение;
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
							
							ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
							
							СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
							
						КонецЦикла;
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
						
						СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ)].Добавить().Таблица;
						
						ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
						
						НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
						
					КонецЕсли;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	ТекущийРаздел = Неопределено;
	Если мСтруктураМногостраничныхРазделов.Свойство(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТекущийРаздел) Тогда
		Если ИндексАктивнойСтраницы <> Неопределено Тогда
			ЭтаФорма[ТекущийРаздел][ИндексАктивнойСтраницы].АктивнаяСтраница = Истина;
		КонецЕсли;
	КонецЕсли;

	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		ТаблицаЛистовРаздела = ЭтаФорма[Раздел.Значение];
		Для Каждого Лист Из ТаблицаЛистовРаздела Цикл
			Лист.Данные[0].Значение = РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Лист.Данные[0].Значение);
		КонецЦикла;
		мДанныеОтчета.Вставить(Раздел.Ключ, ЭтаФорма[Раздел.Значение]);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВерсПрог",		РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("КНД",			СтруктураРеквизитовФормы.КНД);
	ПараметрыВыгрузки.Вставить("ДатаДок",		Формат(ТекущаяДатаСеанса(), "ДФ=дд.ММ.гггг"));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч",	Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ПериодОтч",		СокрЛП(Титульный.Период));
	ПараметрыВыгрузки.Вставить("КодИФНС",		СокрЛП(Титульный.НалоговыйОрган));
	ПараметрыВыгрузки.Вставить("ВидДок",		Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
	ПараметрыВыгрузки.Вставить("ПоМесту",		СокрЛП(Титульный.ПоМесту));
	ПараметрыВыгрузки.Вставить("ОКВЭДОрг",		СтрЗаменить(СокрЛП(СтрЗаменить(Титульный.ОКВЭД, ".", " ")), " ", "."));
	ПараметрыВыгрузки.Вставить("ТелОрг",		СокрЛП(Титульный.ТелОрганизации));
	ПараметрыВыгрузки.Вставить("НаимОрг",		СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИННОрг",		СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("КППОрг",		СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("КодИФНСПосредника", ?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
	
	ПараметрыВыгрузки.Вставить("ТипПодписанта",	СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПредставителя", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПредставителя", СокрЛП(Титульный.ДокУпПред));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("ФамилияИП",		ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяИП",			ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоИП",	ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ",		НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация));
	
	СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(СтруктураРеквизитовФормы.Организация, ТекущаяДатаСеанса(), "ФИОБух, ТелБух");
	Если ПараметрыВыгрузки.ЭтоПБОЮЛ И ПустаяСтрока(СведенияОбОрганизации.ФИОБух) Тогда
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Индивидуальный предприниматель");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОИП.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОИП.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОИП.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		?(ПараметрыВыгрузки.Свойство("ТелОрг"), ПараметрыВыгрузки.ТелОрг, ""));
	Иначе
		ФИОБух = РегламентированнаяОтчетность.РазложитьФИО(СведенияОбОрганизации.ФИОБух);
		ПараметрыВыгрузки.Вставить("ДолжОтв",		"Главный бухгалтер");
		ПараметрыВыгрузки.Вставить("ФамилияОтв",	ФИОБух.Фамилия);
		ПараметрыВыгрузки.Вставить("ИмяОтв",		ФИОБух.Имя);
		ПараметрыВыгрузки.Вставить("ОтчествоОтв",	ФИОБух.Отчество);
		ПараметрыВыгрузки.Вставить("ТелОтв",		СведенияОбОрганизации.ТелБух);
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ОргПодписант);
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",		ФИОПодписанта.Фамилия);
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",			ФИОПодписанта.Имя);
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта",	ФИОПодписанта.Отчество);
	
	ПараметрыВыгрузки.Вставить("ИмяФайлаСхемы",				"NO_NDPI_1_010_00_05_04_01.xsd");
	ПараметрыВыгрузки.Вставить("ПрефиксИмениФайлаВыгрузки",	"NO_NDPI");
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "НДПИ");
	
	ПараметрыВыгрузки.Вставить("ИдФайл",		СформироватьИдФайл(ПараметрыВыгрузки));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг",			СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННЮЛРеорг",		СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",			СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция СформироватьИдФайл(ПараметрыВыгрузки)
	
	Возврат ПараметрыВыгрузки.ПрефиксИмениФайлаВыгрузки
			+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНСПосредника), ПараметрыВыгрузки.КодИФНСПосредника, ПараметрыВыгрузки.КодИФНС)
			+ "_" + ПараметрыВыгрузки.КодИФНС
			+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ, СокрЛП(ПараметрыВыгрузки.ИННОрг), СокрЛП(ПараметрыВыгрузки.ИННОрг) + СокрЛП(ПараметрыВыгрузки.КППОрг))
			+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
			+ "_" + Строка(Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыПоМесту = Новый Массив;
	ВозможныеКодыПоМесту.Добавить("120");
	ВозможныеКодыПоМесту.Добавить("213");
	ВозможныеКодыПоМесту.Добавить("214");
	ВозможныеКодыПоМесту.Добавить("215");
	ВозможныеКодыПоМесту.Добавить("216");
	ВозможныеКодыПоМесту.Добавить("331");
	
	ВозможныеКодыПериода = "01|02|03|04|05|06|07|08|09|10|11|12|71|72|73|74|75|76|77|78|79|80|81|82";
	ВозможныеКодыФормыРеорганизции = "0|1|2|3|5|6";
	
	// Титульный лист.
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННОрг) Тогда
		СообщитьВТС("Не задан ИНН организации.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КППОрг) Тогда
		СообщитьВТС("Не задан КПП организации.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
		СообщитьВТС("Не задано полное наименование организации (обособленного подразделения).", "Титульный", "НаимОрг");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодИФНС) Тогда
		СообщитьВТС("Не задан код налогового органа.", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Не задан код по ОКВЭД.", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ПараметрыВыгрузки.ОКВЭДОрг) Тогда
		СообщитьВТС("Задано некорректное значение кода по ОКВЭД. Допустимы значения, соответствующие шаблонам: ""XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).", "Титульный", "ОКВЭД");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПоМесту) Тогда
		СообщитьВТС("На титульном листе не задан код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	ИначеЕсли ВозможныеКодыПоМесту.Найти(ПараметрыВыгрузки.ПоМесту) = Неопределено Тогда
		СообщитьВТС("На титульном листе задан некорректный код места нахождения (учета)!", "Титульный", "ПоМесту");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ПериодОтч) Тогда
		СообщитьВТС("На титульном листе не задан код налогового периода!", "Титульный", "Период");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрНайти(ВозможныеКодыПериода, ПараметрыВыгрузки.ПериодОтч) = 0 Тогда
		СообщитьВТС("На титульном листе задано некорректное значение кода налогового периода!", "Титульный", "Период");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС("Не задана фамилия подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если (НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ ИЛИ ПараметрыВыгрузки.ТипПодписанта = "2") И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС("Не задано имя подписанта!", "Титульный", "ОргПодписант");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.ТипПодписанта = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПредставителя) Тогда
		СообщитьВТС("Не задано наименование документа, удостоверяющего полномочия представителя!", "Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННЮЛРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг)
	 ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
			СообщитьВТС("Не задан код формы реорганизации!", "Титульный", "КодФормыРеорганизации");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) И ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
			ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННЮЛРеорг);
			Если ДлинаИННРеорг <> 10 Тогда
				СообщитьВТС("Не" + ?(ДлинаИННРеорг = 0, "", "верно") + " задан ИНН реорганизованной организации!", "Титульный", "ИННРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
			ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
			Если ДлинаКППРеорг <> 9 Тогда
				СообщитьВТС("Не" + ?(ДлинаКППРеорг = 0, "", "верно") + " задан КПП реорганизованной организации!", "Титульный", "КППРеорганизованнойОрганизации");
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Раздел 1.
	НомерСтроки = 1;
	НомерСтрокиСтр = "1";
	ЗаполненХотяБыОдинИзБлоковРаздела1 = Ложь;
	Раздел1 = мДанныеОтчета.Раздел1;
	Пока Раздел1.Свойство("П000100000101_" + НомерСтрокиСтр) Цикл
		ИмяЯчейкиКБКРаздел1 = "П000100000101_" + НомерСтрокиСтр;
		ИмяЯчейкиОКТМОРаздел1 = "П000100000102_" + НомерСтрокиСтр;
		ИмяЯчейкиСуммаРаздел1 = "П000100000103_" + НомерСтрокиСтр;
		
		КБКРаздел1 = СокрЛП(Раздел1[ИмяЯчейкиКБКРаздел1]);
		ОКТМОРаздел1 = СокрЛП(Раздел1[ИмяЯчейкиОКТМОРаздел1]);
		СуммаРаздел1 = Раздел1[ИмяЯчейкиСуммаРаздел1];
		
		Если НЕ ЗначениеЗаполнено(КБКРаздел1)
			И НЕ ЗначениеЗаполнено(ОКТМОРаздел1)
			И НЕ ЗначениеЗаполнено(СуммаРаздел1) Тогда
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
			Продолжить;
		КонецЕсли;
		
		ДлинаКБКРаздел1 = СтрДлина(КБКРаздел1);
		Если ДлинаКБКРаздел1 <> 20 Тогда
			СообщитьВТС("Раздел 1: в строке " + НомерСтрокиСтр + " не"
			+ ?(ДлинаКБКРаздел1 = 0, "", "верно") + " задан КБК.", "Раздел1", ИмяЯчейкиКБКРаздел1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ДлинаОКТМОРаздел1 = СтрДлина(ОКТМОРаздел1);
		Если ДлинаОКТМОРаздел1 <> 11 И ДлинаОКТМОРаздел1 <> 8 Тогда
			СообщитьВТС("Раздел 1: в строке " + НомерСтрокиСтр + " не"
			+ ?(ДлинаОКТМОРаздел1 = 0, "", "верно") + " задан код по ОКТМО.", "Раздел1", ИмяЯчейкиОКТМОРаздел1);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела1
			= ЗаполненХотяБыОдинИзБлоковРаздела1
			ИЛИ ЗначениеЗаполнено(КБКРаздел1)
			ИЛИ ЗначениеЗаполнено(ОКТМОРаздел1);
		
		НомерСтроки = НомерСтроки + 1;
		НомерСтрокиСтр = Формат(НомерСтроки, "ЧГ=");
	КонецЦикла;
	Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела1 Тогда
		СообщитьВТС("Раздел 1: не заполнен ни один из блоков строки 010 - 030", "Раздел1", "П000100000101_1");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 2.
	// Определение необходимости проверки раздела 2.
	ДанныеРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	ПроверятьРаздел2 = Ложь;
	Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
		ЗаполненРаздел2 = НЕ СтраницаПуста(СтраницаРаздела2.Данные, "Раздел2", ДеревоВыгрузки);
		Если ЗаполненРаздел2 Тогда
			ПроверятьРаздел2 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", ДеревоВыгрузки);
			Если ЗаполненРаздел21 Тогда
				ПроверятьРаздел2 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
				ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки);
				Если ЗаполненРаздел212 Тогда
					ПроверятьРаздел2 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПроверятьРаздел2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка раздела 2.
	Если ПроверятьРаздел2 Тогда
		
		Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
			
			НомерСтраницы = ДанныеРаздела2.Строки.Индекс(СтраницаРаздела2) + 1;
		
			// КБК.
			КБКРаздел2Длина = СтрДлина(СокрЛП(СтраницаРаздела2.Данные["П000200002003"]));
			Если КБКРаздел2Длина <> 20 Тогда
				СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
				+ ": не" + ?(КБКРаздел2Длина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел2", "П000200002003", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка раздела 2.1.
			// Должен быть заполнен хотя бы 1 экземпляр раздела 2.1.
			ЕстьЗаполненныйЭкземплярРаздела21 = Ложь;
			
			Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
				
				ЗаполненаСтраницаРаздела21 = Ложь;
				Если СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", ДеревоВыгрузки) Тогда
					Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
						Если СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки) Тогда
							Продолжить;
						Иначе
							ЗаполненаСтраницаРаздела21 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполненаСтраницаРаздела21 = Истина;
				КонецЕсли;
				Если НЕ ЗаполненаСтраницаРаздела21 Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела21 = Истина;
				
				НомерСтраницы21 = СтраницаРаздела2.Строки.Индекс(СтраницаРаздела21) + 1;
				
				КоординатыСтраницы21 = Строка(НомерСтраницы) + "," + Строка(НомерСтраницы21);
				
				ОКТМОРаздел21  = СокрЛП(СтраницаРаздела21.Данные["П000200004003"]);
				СерЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005003"]);
				НомЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005004"]);
				ВидЛицРаздел21 = СокрЛП(СтраницаРаздела21.Данные["П000200005005"]);
				
				// ОКТМО.
				ОКТМОРаздел21Длина = СтрДлина(ОКТМОРаздел21);
				Если НЕ (ОКТМОРаздел21Длина = 8 ИЛИ ОКТМОРаздел21Длина = 11) Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ": не" + ?(ОКТМОРаздел21Длина = 0, "", "верно")
					+ " задан код по ОКТМО.",
					"Раздел21", "П000200004003", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Серия, номер и вид лицензии на пользование недрами.
				СерЛицРаздел21Длина = СтрДлина(СерЛицРаздел21);
				Если СерЛицРаздел21Длина <> 3 Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ": не" + ?(СерЛицРаздел21Длина = 0, "", "верно")
					+ " задана серия лицензии на пользование недрами.",
					"Раздел21", "П000200005003", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомЛицРаздел21Длина = СтрДлина(НомЛицРаздел21);
				Если НомЛицРаздел21Длина <> 5 Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ": не" + ?(НомЛицРаздел21Длина = 0, "", "верно")
					+ " задан номер лицензии на пользование недрами.",
					"Раздел21", "П000200005004", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ВидЛицРаздел21Длина = СтрДлина(ВидЛицРаздел21);
				Если ВидЛицРаздел21Длина <> 2 Тогда
					СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
					+ " -> Расчет налога. Страница " + НомерСтраницы21
					+ ": не" + ?(ВидЛицРаздел21Длина = 0, "", "верно")
					+ " задан вид лицензии на пользование недрами.",
					"Раздел21", "П000200005005", КоординатыСтраницы21);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 2.1.
				НомерСтроки211 = 1;
				НомерСтроки211Стр = "1";
				Пока СтраницаРаздела21.Данные.Свойство("П000211000101_" + НомерСтроки211Стр) Цикл
					
					КодОснНал = СокрЛП(СтраницаРаздела21.Данные["П000211000101_" + НомерСтроки211Стр]);
					КолНефти  = СтраницаРаздела21.Данные["П000211000102_" + НомерСтроки211Стр];
					
					Если НЕ ЗначениеЗаполнено(КодОснНал)
					   И НЕ ЗначениеЗаполнено(КолНефти) Тогда
						НомерСтроки211 = НомерСтроки211 + 1;
						НомерСтроки211Стр = Формат(НомерСтроки211, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					// Код основания налогообложения.
					КодОснНалДлина = СтрДлина(КодОснНал);
					Если КодОснНалДлина <> 4 Тогда
						СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
						+ " -> Расчет налога. Страница " + НомерСтраницы21
						+ ": в строке " + НомерСтроки211Стр + " не" + ?(КодОснНалДлина = 0, "", "верно")
						+ " задан код основания налогообложения.",
						"Раздел21", "П000211000101_" + НомерСтроки211Стр, КоординатыСтраницы21);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					НомерСтроки211 = НомерСтроки211 + 1;
					НомерСтроки211Стр = Формат(НомерСтроки211, "ЧГ=");
					
				КонецЦикла;
				
				// Определение необходимости проверки текущего экземпляра раздела 2.1.2.
				ПроверятьРаздел212 = Ложь;
				Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
					ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки);
					Если ЗаполненРаздел212 Тогда
						ПроверятьРаздел212 = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// Проверка текущего экземпляра раздела 2.1.2.
				Если ПроверятьРаздел212 Тогда
					
					Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
						
						Если СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", ДеревоВыгрузки) Тогда
							Продолжить;
						КонецЕсли;
						
						НомерСтраницы212 = СтраницаРаздела21.Строки.Индекс(СтраницаРаздела212) + 1;
						
						КоординатыСтраницы212 = Строка(НомерСтраницы) + "," + Строка(НомерСтраницы21) + "," + Строка(НомерСтраницы212);
						
						НаимЗалежиРаздел212 = СокрЛП(СтраницаРаздела212.Данные["П000200016003"]);
						
						// Наименование залежи.
						НаимЗалежиРаздел212Длина = СтрДлина(НаимЗалежиРаздел212);
						Если НаимЗалежиРаздел212Длина = 0 Тогда
							СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
							+ " -> Расчет налога. Страница " + НомерСтраницы21
							+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
							+ ": не задано наименование залежи.", "Раздел212", "П000200016003", КоординатыСтраницы212);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						// Проверка многострочной части текущего экземпляра раздела 2.1.2.
						// Должна быть заполнена хотя бы 1 строка.
						ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 = Ложь;
						
						НомерСтроки212 = 1;
						НомерСтроки212Стр = "1";
						Пока СтраницаРаздела212.Данные.Свойство("П000212000101_" + НомерСтроки212Стр) Цикл
							
							КодОснНал212 = СокрЛП(СтраницаРаздела212.Данные["П000212000101_" + НомерСтроки212Стр]);
							КолНефти212  = СтраницаРаздела212.Данные["П000212000102_" + НомерСтроки212Стр];
							
							Если НЕ ЗначениеЗаполнено(КодОснНал212)
							   И НЕ ЗначениеЗаполнено(КолНефти212) Тогда
								НомерСтроки212 = НомерСтроки212 + 1;
								НомерСтроки212Стр = Формат(НомерСтроки212, "ЧГ=");
								Продолжить;
							КонецЕсли;
							
							ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 = Истина;
							
							// Код основания налогообложения.
							КодОснНал212Длина = СтрДлина(КодОснНал212);
							Если КодОснНал212Длина <> 4 Тогда
								СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
								+ " -> Расчет налога. Страница " + НомерСтраницы21
								+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
								+ ": в строке " + НомерСтроки212Стр + " не" + ?(КодОснНал212Длина = 0, "", "верно")
								+ " задан код основания налогообложения.", "Раздел212",
								"П000212000101_" + НомерСтроки212Стр, КоординатыСтраницы212);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							НомерСтроки212 = НомерСтроки212 + 1;
							НомерСтроки212Стр = Формат(НомерСтроки212, "ЧГ=");
							
						КонецЦикла;
						
						Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела212 Тогда
							СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
							+ " -> Расчет налога. Страница " + НомерСтраницы21
							+ " -> Нефть, добытая из залежи. Страница " + НомерСтраницы212
							+ ": в строке 1 не задан код основания налогообложения.",
							"Раздел212", "П000212000101_1" , КоординатыСтраницы212);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела21 Тогда
				СообщитьВТС("Раздел 2 -> Уплата налога. Страница " + НомерСтраницы
				+ ": должен быть заполнен раздел 2.1.", "Раздел21", "П000200004003", НомерСтраницы + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	// Определение необходимости проверки раздела 3.
	ДанныеРаздела3 = ДанныеМногоуровневыхРазделов.Раздел3;
	ПроверятьРаздел3 = Ложь;
	Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
		ЗаполненРаздел3 = НЕ СтраницаПуста(СтраницаРаздела3.Данные, "Раздел3", ДеревоВыгрузки);
		Если ЗаполненРаздел3 Тогда
			ПроверятьРаздел3 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
			ЗаполненРаздел31 = НЕ СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", ДеревоВыгрузки);
			Если ЗаполненРаздел31 Тогда
				ПроверятьРаздел3 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
				ЗаполненРаздел311 = НЕ СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки);
				Если ЗаполненРаздел311 Тогда
					ПроверятьРаздел3 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ПроверятьРаздел3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел3 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Проверка раздела 3.
	Если ПроверятьРаздел3 Тогда
		
		Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
			
			НомерСтраницы3 = ДанныеРаздела3.Строки.Индекс(СтраницаРаздела3) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300001003"]));
			Если КодДПИРаздел3Длина <> 5 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(КодДПИРаздел3Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого.", "Раздел3", "П000300001003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// КБК.
			КБКРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300002003"]));
			Если КБКРаздел3Длина <> 20 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(КБКРаздел3Длина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел3", "П000300002003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// ОКЕИ.
			ОКЕИРаздел3Длина = СтрДлина(СокрЛП(СтраницаРаздела3.Данные["П000300003003"]));
			Если ОКЕИРаздел3Длина <> 3 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": не" + ?(ОКЕИРаздел3Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ.", "Раздел3", "П000300003003", НомерСтраницы3);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьЗаполненныйЭкземплярРаздела31 = Ложь;
			
			Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
				
				ЗаполненаСтраницаРаздела31 = Ложь;
				Если СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", ДеревоВыгрузки) Тогда
					Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
						Если СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки) Тогда
							Продолжить;
						Иначе
							ЗаполненаСтраницаРаздела31 = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаполненаСтраницаРаздела31 = Истина;
				КонецЕсли;
				Если НЕ ЗаполненаСтраницаРаздела31 Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела31 = Истина;
				
				НомерСтраницы31 = СтраницаРаздела3.Строки.Индекс(СтраницаРаздела31) + 1;
				
				КоординатыСтраницы31 = Строка(НомерСтраницы3) + "," + Строка(НомерСтраницы31);
				
				ОКТМОРаздел31  = СокрЛП(СтраницаРаздела31.Данные["П000300008003"]);
				СерЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300009003"]);
				НомЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300009004"]);
				ВидЛицРаздел31 = СокрЛП(СтраницаРаздела31.Данные["П000300009005"]);
				
				// ОКТМО.
				ОКТМОРаздел31Длина = СтрДлина(ОКТМОРаздел31);
				Если НЕ (ОКТМОРаздел31Длина = 8 ИЛИ ОКТМОРаздел31Длина = 11) Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": не" + ?(ОКТМОРаздел31Длина = 0, "", "верно")
					+ " задан код по ОКТМО.",
					"Раздел31", "П000300008003", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				СерЛицРаздел31Длина = СтрДлина(СерЛицРаздел31);
				Если СерЛицРаздел31Длина <> 3 Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": не" + ?(СерЛицРаздел31Длина = 0, "", "верно")
					+ " задана серия лицензии на пользование недрами.",
					"Раздел31", "П000300009003", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомЛицРаздел31Длина = СтрДлина(НомЛицРаздел31);
				Если НомЛицРаздел31Длина <> 5 Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": не" + ?(НомЛицРаздел31Длина = 0, "", "верно")
					+ " задан номер лицензии на пользование недрами.",
					"Раздел31", "П000300009004", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ВидЛицРаздел31Длина = СтрДлина(ВидЛицРаздел31);
				Если ВидЛицРаздел31Длина <> 2 Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": не" + ?(ВидЛицРаздел31Длина = 0, "", "верно")
					+ " задан вид лицензии на пользование недрами.",
					"Раздел31", "П000300009005", КоординатыСтраницы31);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела311 = Ложь;
				
				Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
					
					Если СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", ДеревоВыгрузки) Тогда
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненныйЭкземплярРаздела311 = Истина;
					
					НомерСтраницы311 = СтраницаРаздела31.Строки.Индекс(СтраницаРаздела311) + 1;
					
					КоординатыСтраницы311 = Строка(НомерСтраницы3) + "," + Строка(НомерСтраницы31) + "," + Строка(НомерСтраницы311);
					
					НаимЗалежиРаздел311 = СокрЛП(СтраницаРаздела311.Данные["П000300014003"]);
					
					// Наименование залежи.
					НаимЗалежиРаздел311Длина = СтрДлина(НаимЗалежиРаздел311);
					Если НаимЗалежиРаздел311Длина = 0 Тогда
						СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
						+ " -> Расчет налога. Страница " + НомерСтраницы31
						+ " -> Полезное ископаемое, добытое из залежи " + НомерСтраницы311
						+ ": не задано наименование залежи.", "Раздел311", "П000300014003", КоординатыСтраницы311);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					// Проверка многострочной части текущего экземпляра раздела 3.1.1.
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 = Ложь;
					
					НомерСтроки311 = 1;
					НомерСтроки311Стр = "1";
					Пока СтраницаРаздела311.Данные.Свойство("П000311000101_" + НомерСтроки311Стр) Цикл
						
						КодОснНал311 = СокрЛП(СтраницаРаздела311.Данные["П000311000101_" + НомерСтроки311Стр]);
						КолНефти311  = СтраницаРаздела311.Данные["П000311000102_" + НомерСтроки311Стр];
						
						Если НЕ ЗначениеЗаполнено(КодОснНал311)
						   И НЕ ЗначениеЗаполнено(КолНефти311) Тогда
							НомерСтроки311 = НомерСтроки311 + 1;
							НомерСтроки311Стр = Формат(НомерСтроки311, "ЧГ=");
							Продолжить;
						КонецЕсли;
						
						ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 = Истина;
						
						// Код основания налогообложения.
						КодОснНал311Длина = СтрДлина(КодОснНал311);
						Если КодОснНал311Длина <> 4 Тогда
							СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
							+ " -> Расчет налога. Страница " + НомерСтраницы31
							+ " -> Полезное ископаемое, добытое из залежи. Страница " + НомерСтраницы311
							+ ": в строке " + НомерСтроки311Стр + " не" + ?(КодОснНал311Длина = 0, "", "верно")
							+ " задан код основания налогообложения.", "Раздел311",
							"П000311000101_" + НомерСтроки311Стр, КоординатыСтраницы311);
							СтатусПроверки = Ложь;
						КонецЕсли;
						
						НомерСтроки311 = НомерСтроки311 + 1;
						НомерСтроки311Стр = Формат(НомерСтроки311, "ЧГ=");
						
					КонецЦикла;
					
					Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела311 Тогда
						СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
							+ " -> Расчет налога. Страница " + НомерСтраницы31
						+ " -> Полезное ископаемое, добытое из залежи. Страница " + НомерСтраницы311
						+ ": в строке 1 не задан код основания налогообложения.",
						"Раздел311", "П000311000101_1" , КоординатыСтраницы311);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненныйЭкземплярРаздела311 Тогда
					СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
					+ " -> Расчет налога. Страница " + НомерСтраницы31
					+ ": должен быть заполнен раздел 3.1.1.", "Раздел311", "П000300014003", КоординатыСтраницы31 + ",1");
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела31 Тогда
				СообщитьВТС("Раздел 3 -> Уплата налога. Страница " + НомерСтраницы3
				+ ": должен быть заполнен раздел 3.1.", "Раздел31", "П000300008003", НомерСтраницы3 + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	// Определение необходимости проверки раздела 4.
	Раздел4 = мДанныеОтчета.Раздел4;
	ПроверятьРаздел4 = Ложь;
	Для Каждого СтраницаРаздела4 Из Раздел4 Цикл
		Данные4 = СтраницаРаздела4.Данные[0].Значение;
		Если СтраницаПуста(Данные4, "Раздел4", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьРаздел4 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ПроверятьРаздел4 Тогда
		
		Для Каждого СтраницаРаздела4 Из Раздел4 Цикл
			Данные4 = СтраницаРаздела4.Данные[0].Значение;
			Если СтраницаПуста(Данные4, "Раздел4", ДеревоВыгрузки) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы4 = Раздел4.Индекс(СтраницаРаздела4) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400001003"]));
			Если КодДПИРаздел4Длина <> 5 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(КодДПИРаздел4Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого.", "Раздел4", "П000400001003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// КБК.
			КБКРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400002003"]));
			Если КБКРаздел4Длина <> 20 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(КБКРаздел4Длина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел4", "П000400002003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКЕИ.
			ОКЕИРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400003003"]));
			Если ОКЕИРаздел4Длина <> 3 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(ОКЕИРаздел4Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ.", "Раздел4", "П000400003003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400004003"]));
			Если НЕ (ОКТМОРаздел4Длина = 8 ИЛИ ОКТМОРаздел4Длина = 11) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(ОКТМОРаздел4Длина = 0, "", "верно")
				+ " задан код по ОКТМО.", "Раздел4", "П000400004003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Серия, номер и вид лицензии на пользование недрами.
			СерЛицРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400005003"]));
			Если СерЛицРаздел4Длина <> 3 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(СерЛицРаздел4Длина = 0, "", "верно")
				+ " задана серия лицензии на пользование недрами.", "Раздел4", "П000400005003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			НомЛицРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400005004"]));
			Если НомЛицРаздел4Длина <> 5 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(НомЛицРаздел4Длина = 0, "", "верно")
				+ " задан номер лицензии на пользование недрами.", "Раздел4", "П000400005004", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ВидЛицРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400005005"]));
			Если ВидЛицРаздел4Длина <> 2 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не" + ?(ВидЛицРаздел4Длина = 0, "", "верно")
				+ " задан вид лицензии на пользование недрами.", "Раздел4", "П000400005005", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Наименование нового морского месторождения.
			НаимМестРаздел4Длина = СтрДлина(СокрЛП(Данные4["П000400006003"]));
			Если НаимМестРаздел4Длина = 0 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не задано наименование нового морского месторождения.", "Раздел4", "П000400006003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Месяц и год начала промышленной добычи углеводородного сырья.
			Если НЕ ЗначениеЗаполнено(Данные4["П000400007003"]) Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": не заданы месяц и год начала промышленной добычи углеводородного сырья.", "Раздел4", "П000400007003", НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			// Проверка многострочной части текущего экземпляра раздела 4.
			ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 = Ложь;
			
			НомерСтроки4 = 1;
			НомерСтроки4Стр = "1";
			Пока Данные4.Свойство("П000400000101_" + НомерСтроки4Стр) Цикл
				
				КодОснНал4 = СокрЛП(Данные4["П000400000101_" + НомерСтроки4Стр]);
				КолНефти4  = Данные4["П000400000102_" + НомерСтроки4Стр];
				
				Если НЕ ЗначениеЗаполнено(КодОснНал4)
				   И НЕ ЗначениеЗаполнено(КолНефти4) Тогда
					НомерСтроки4 = НомерСтроки4 + 1;
					НомерСтроки4Стр = Формат(НомерСтроки4, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 = Истина;
				
				// Код основания налогообложения.
				КодОснНал4Длина = СтрДлина(КодОснНал4);
				Если КодОснНал4Длина <> 4 Тогда
					СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
					+ ": в строке " + НомерСтроки4Стр + " не" + ?(КодОснНал4Длина = 0, "", "верно")
					+ " задан код основания налогообложения.", "Раздел4",
					"П000400000101_" + НомерСтроки4Стр, НомерСтраницы4);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомерСтроки4 = НомерСтроки4 + 1;
				НомерСтроки4Стр = Формат(НомерСтроки4, "ЧГ=");
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела4 Тогда
				СообщитьВТС("Раздел 4 -> Страница " + НомерСтраницы4
				+ ": в строке 1 не задан код основания налогообложения.",
				"Раздел4", "П000400000101_1" , НомерСтраницы4);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 5.
	// Определение необходимости проверки раздела 5.
	ДанныеРаздела5 = ДанныеМногоуровневыхРазделов.Раздел5;
	ПроверятьРаздел5 = Ложь;
	Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
		ЗаполненРаздел5 = НЕ СтраницаПуста(СтраницаРаздела5.Данные, "Раздел5", ДеревоВыгрузки);
		Если ЗаполненРаздел5 Тогда
			ПроверятьРаздел5 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
			ЗаполненРаздел51 = НЕ СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", ДеревоВыгрузки);
			Если ЗаполненРаздел51 Тогда
				ПроверятьРаздел5 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьРаздел5 Тогда
		
		Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
			
			НомерСтраницы5 = ДанныеРаздела5.Строки.Индекс(СтраницаРаздела5) + 1;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел5Длина = СтрДлина(СокрЛП(СтраницаРаздела5.Данные["П000500001003"]));
			Если КодДПИРаздел5Длина <> 5 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(КодДПИРаздел5Длина = 0, "", "верно")
				+ " задан код вида добытого полезного ископаемого.", "Раздел5", "П000500001003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// КБК.
			КБКРаздел5Длина = СтрДлина(СокрЛП(СтраницаРаздела5.Данные["П000500002003"]));
			Если КБКРаздел5Длина <> 20 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(КБКРаздел5Длина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел5", "П000500002003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКЕИ.
			ОКЕИРаздел5Длина = СтрДлина(СокрЛП(СтраницаРаздела5.Данные["П000500003003"]));
			Если ОКЕИРаздел5Длина <> 3 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не" + ?(ОКЕИРаздел5Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ.", "Раздел5", "П000500003003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Количество реализованного добытого полезного ископаемого.
			КолРеалДПИ = СтраницаРаздела5.Данные["П000500009003"];
			ВырРеалДПИ = СтраницаРаздела5.Данные["П000500010003"];
			Если НЕ ЗначениеЗаполнено(КолРеалДПИ) И ЗначениеЗаполнено(ВырРеалДПИ) Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": не заполнено значение количества реализованного добытого полезного ископаемого при заполненном значении выручки от реализации добытого полезного ископаемого",
				"Раздел5", "П000500009003", НомерСтраницы5);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЕстьЗаполненныйЭкземплярРаздела51 = Ложь;
			
			Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
				
				Если СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", ДеревоВыгрузки) Тогда
					Продолжить;
				КонецЕсли;
				
				ЕстьЗаполненныйЭкземплярРаздела51 = Истина;
				
				НомерСтраницы51 = СтраницаРаздела5.Строки.Индекс(СтраницаРаздела51) + 1;
				
				КоординатыСтраницы51 = Строка(НомерСтраницы5) + "," + Строка(НомерСтраницы51);
				
				ОКТМОРаздел51  = СокрЛП(СтраницаРаздела51.Данные["П000500005003"]);
				СерЛицРаздел51 = СокрЛП(СтраницаРаздела51.Данные["П000500006003"]);
				НомЛицРаздел51 = СокрЛП(СтраницаРаздела51.Данные["П000500006004"]);
				ВидЛицРаздел51 = СокрЛП(СтраницаРаздела51.Данные["П000500006005"]);
				
				// ОКТМО.
				ОКТМОРаздел51Длина = СтрДлина(ОКТМОРаздел51);
				Если НЕ (ОКТМОРаздел51Длина = 8 ИЛИ ОКТМОРаздел51Длина = 11) Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(ОКТМОРаздел51Длина = 0, "", "верно")
					+ " задан код по ОКТМО.",
					"Раздел51", "П000500005003", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Серия, номер и вид лицензии на пользование недрами.
				СерЛицРаздел51Длина = СтрДлина(СерЛицРаздел51);
				Если СерЛицРаздел51Длина <> 3 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(СерЛицРаздел51Длина = 0, "", "верно")
					+ " задана серия лицензии на пользование недрами.",
					"Раздел51", "П000500006003", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				НомЛицРаздел51Длина = СтрДлина(НомЛицРаздел51);
				Если НомЛицРаздел51Длина <> 5 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(НомЛицРаздел51Длина = 0, "", "верно")
					+ " задан номер лицензии на пользование недрами.",
					"Раздел51", "П000500006004", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				ВидЛицРаздел51Длина = СтрДлина(ВидЛицРаздел51);
				Если ВидЛицРаздел51Длина <> 2 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": не" + ?(ВидЛицРаздел51Длина = 0, "", "верно")
					+ " задан вид лицензии на пользование недрами.",
					"Раздел51", "П000500006005", КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				// Проверка многострочной части текущего экземпляра раздела 5.1.
				ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Ложь;
				
				НомерСтроки51 = 1;
				НомерСтроки51Стр = "1";
				Пока СтраницаРаздела51.Данные.Свойство("П000510000101_" + НомерСтроки51Стр) Цикл
					
					КодОснНал51 = СокрЛП(СтраницаРаздела51.Данные["П000510000101_" + НомерСтроки51Стр]);
					КолНефти51  = СтраницаРаздела51.Данные["П000510000102_" + НомерСтроки51Стр];
					КоэфКподз51 = СтраницаРаздела51.Данные["П000510000103_" + НомерСтроки51Стр];
					КоэфКтд51   = СокрЛП(СтраницаРаздела51.Данные["П000510000104_" + НомерСтроки51Стр]);
					
					Если НЕ ЗначениеЗаполнено(КодОснНал51)
					   И НЕ ЗначениеЗаполнено(КолНефти51)
					   И НЕ ЗначениеЗаполнено(КоэфКподз51)
					   И (НЕ ЗначениеЗаполнено(КоэфКтд51) ИЛИ КоэфКтд51 = "-") Тогда
						НомерСтроки51 = НомерСтроки51 + 1;
						НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
						Продолжить;
					КонецЕсли;
					
					ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 = Истина;
					
					// Код основания налогообложения.
					КодОснНал51Длина = СтрДлина(КодОснНал51);
					Если КодОснНал51Длина <> 4 Тогда
						СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
						+ " -> Раздел 5.1. Страница " + НомерСтраницы51
						+ ": в строке " + НомерСтроки51Стр + " не" + ?(КодОснНал51Длина = 0, "", "верно")
						+ " задан код основания налогообложения.", "Раздел51",
						"П000510000101_" + НомерСтроки51Стр, КоординатыСтраницы51);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
					НомерСтроки51 = НомерСтроки51 + 1;
					НомерСтроки51Стр = Формат(НомерСтроки51, "ЧГ=");
					
				КонецЦикла;
				
				Если НЕ ЕстьЗаполненнаяМногострочнаяЧастьРаздела51 Тогда
					СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
					+ " -> Раздел 5.1. Страница " + НомерСтраницы51
					+ ": в строке 1 не задан код основания налогообложения.",
					"Раздел51", "П000510000101_1" , КоординатыСтраницы51);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненныйЭкземплярРаздела51 Тогда
				СообщитьВТС("Раздел 5 -> Уплата налога. Страница " + НомерСтраницы5
				+ ": должен быть заполнен раздел 5.1.", "Раздел51", "П000500005003", НомерСтраницы5 + ",1");
				СтатусПроверки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 6.
	// Определение необходимости проверки раздела 6.
	Раздел6 = мДанныеОтчета.Раздел6;
	ПроверятьРаздел6 = НЕ СтраницаПуста(Раздел6, "Раздел6", ДеревоВыгрузки);
	
	Если ПроверятьРаздел6 Тогда
		
		ОКЕИРаздел6 = СокрЛП(Раздел6["П000600011003"]);
		
		// ОКЕИ.
		ОКЕИРаздел6Длина = СтрДлина(ОКЕИРаздел6);
		Если ОКЕИРаздел6Длина <> 3 Тогда
			СообщитьВТС("Раздел 6: не" + ?(ОКЕИРаздел6Длина = 0, "", "верно")
			+ " задан код единицы измерения по ОКЕИ.", "Раздел6",
			"П000600011003");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		ЗаполненХотяБыОдинИзБлоковРаздела6 = Ложь;
		НомерСтроки6 = 1;
		НомерСтроки6Стр = "1";
		Пока Раздел6.Свойство("П000620000101_" + НомерСтроки6Стр) Цикл
			
			КодДПИРаздел6   = СокрЛП(Раздел6["П000620000101_" + НомерСтроки6Стр]);
			КоличДПИРаздел6 = Раздел6["П000620000102_" + НомерСтроки6Стр];
			ДоляДПИРаздел6  = Раздел6["П000620000103_" + НомерСтроки6Стр];
			СумРасхРаздел6  = Раздел6["П000620000104_" + НомерСтроки6Стр];
			
			Если НЕ ЗначениеЗаполнено(КодДПИРаздел6)
				И НЕ ЗначениеЗаполнено(КоличДПИРаздел6)
				И НЕ ЗначениеЗаполнено(ДоляДПИРаздел6)
				И НЕ ЗначениеЗаполнено(СумРасхРаздел6) Тогда
				НомерСтроки6 = НомерСтроки6 + 1;
				НомерСтроки6Стр = Формат(НомерСтроки6, "ЧГ=");
				Продолжить;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзБлоковРаздела6 = Истина;
			
			// Код вида добытого полезного ископаемого.
			КодДПИРаздел6Длина = СтрДлина(КодДПИРаздел6);
			Если КодДПИРаздел6Длина <> 5 Тогда
				СообщитьВТС("Раздел 6: в строке " + НомерСтроки6Стр
				+ " не" + ?(КодДПИРаздел6Длина = 0, "", "верно")
				+ " задан код добытого полезного ископаемого.", "Раздел6",
				"П000620000101_" + НомерСтроки6Стр);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки6 = НомерСтроки6 + 1;
			НомерСтроки6Стр = Формат(НомерСтроки6, "ЧГ=");
			
		КонецЦикла;
		
		Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела6 Тогда
			СообщитьВТС("Раздел 6: в строке 1 не задан код добытого полезного ископаемого.",
			"Раздел6", "П000620000101_1");
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Раздел 7.
	// Определение необходимости проверки раздела 7.
	Раздел7 = мДанныеОтчета.Раздел7;
	ПроверятьРаздел7 = Ложь;
	Для Каждого СтраницаРаздела7 Из Раздел7 Цикл
		Данные7 = СтраницаРаздела7.Данные[0].Значение;
		Если СтраницаПуста(Данные7, "Раздел7", ДеревоВыгрузки) Тогда
			Продолжить;
		КонецЕсли;
		ПроверятьРаздел7 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ПроверятьРаздел7 Тогда
		
		Для Каждого СтраницаРаздела7 Из Раздел7 Цикл
			Данные7 = СтраницаРаздела7.Данные[0].Значение;
			Если СтраницаПуста(Данные7, "Раздел7", ДеревоВыгрузки) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтраницы7 = Раздел7.Индекс(СтраницаРаздела7) + 1;
			
			КБКРаздел7    = СокрЛП(Данные7["П000700001003"]);
			СерЛицРаздел7 = СокрЛП(Данные7["П000700002003"]);
			НомЛицРаздел7 = СокрЛП(Данные7["П000700002004"]);
			ВидЛицРаздел7 = СокрЛП(Данные7["П000700002005"]);
			ОКЕИРаздел7   = СокрЛП(Данные7["П000700003003"]);
			ОКТМОРаздел7  = СокрЛП(Данные7["П000700004003"]);
			
			// КБК.
			КБКРаздел7Длина = СтрДлина(КБКРаздел7);
			Если КБКРаздел7Длина <> 20 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(КБКРаздел7Длина = 0, "", "верно")
				+ " задан код бюджетной классификации.", "Раздел7", "П000700001003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Серия, номер, вид лицензии на пользование недрами.
			СерЛицРаздел7Длина = СтрДлина(СерЛицРаздел7);
			Если СерЛицРаздел7Длина <> 3 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(СерЛицРаздел7Длина = 0, "", "верно")
				+ " задана серия лицензии на пользование недрами.", "Раздел7", "П000700002003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			НомЛицРаздел7Длина = СтрДлина(НомЛицРаздел7);
			Если НомЛицРаздел7Длина <> 5 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(НомЛицРаздел7Длина = 0, "", "верно")
				+ " задан номер лицензии на пользование недрами.", "Раздел7", "П000700002004", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ВидЛицРаздел7Длина = СтрДлина(ВидЛицРаздел7);
			Если ВидЛицРаздел7Длина <> 2 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(ВидЛицРаздел7Длина = 0, "", "верно")
				+ " задан вид лицензии на пользование недрами.", "Раздел7", "П000700002005", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКЕИ.
			ОКЕИРаздел7Длина = СтрДлина(ОКЕИРаздел7);
			Если ОКЕИРаздел7Длина <> 3 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(ОКЕИРаздел7Длина = 0, "", "верно")
				+ " задан код единицы измерения по ОКЕИ.", "Раздел7", "П000700003003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// ОКТМО.
			ОКТМОРаздел7Длина = СтрДлина(ОКТМОРаздел7);
			Если НЕ (ОКТМОРаздел7Длина = 8 ИЛИ ОКТМОРаздел7Длина = 11) Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
				+ ": не" + ?(ОКТМОРаздел7Длина = 0, "", "верно")
				+ " задан код по ОКТМО.", "Раздел7", "П000700004003", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			ЗаполненХотяБыОдинИзБлоковРаздела71 = Ложь;
			НомерСтроки71 = 1;
			НомерСтроки71Стр = "1";
			Пока Данные7.Свойство("П000710000101_" + НомерСтроки71Стр) Цикл
				
				КодДПИРаздел71    = СокрЛП(Данные7["П000710000101_" + НомерСтроки71Стр]);
				КодОснНалРаздел71 = СокрЛП(Данные7["П000710000102_" + НомерСтроки71Стр]);
				КоличДПИРаздел71  = Данные7["П000710000103_" + НомерСтроки71Стр];
				
				Если НЕ ЗначениеЗаполнено(КодДПИРаздел71)
					И НЕ ЗначениеЗаполнено(КодОснНалРаздел71)
					И НЕ ЗначениеЗаполнено(КоличДПИРаздел71) Тогда
					НомерСтроки71 = НомерСтроки71 + 1;
					НомерСтроки71Стр = Формат(НомерСтроки71, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				ЗаполненХотяБыОдинИзБлоковРаздела71 = Истина;
				
				// Код вида добытого полезного ископаемого.
				КодДПИРаздел71Длина = СтрДлина(КодДПИРаздел71);
				Если КодДПИРаздел71Длина <> 5 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки71Стр
					+ " подраздела 7.1 не" + ?(КодДПИРаздел71Длина = 0, "", "верно")
					+ " задан код вида добытого полезного ископаемого.", "Раздел7",
					"П000710000101_" + НомерСтроки71Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Код основания налогообложения.
				КодОснНалРаздел71Длина = СтрДлина(КодОснНалРаздел71);
				Если КодОснНалРаздел71Длина <> 4 Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки71Стр
					+ " подраздела 7.1 не" + ?(КодОснНалРаздел71Длина = 0, "", "верно")
					+ " задан код основания налогообложения.", "Раздел7",
					"П000710000102_" + НомерСтроки71Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомерСтроки71 = НомерСтроки71 + 1;
				НомерСтроки71Стр = Формат(НомерСтроки71, "ЧГ=");
				
			КонецЦикла;
			
			Если НЕ ЗаполненХотяБыОдинИзБлоковРаздела71 Тогда
				СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке 1 подраздела 7.1 не задан код вида добытого полезного ископаемого.",
				"Раздел7", "П000710000101_1", НомерСтраницы7);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			НомерСтроки73 = 1;
			НомерСтроки73Стр = "1";
			Пока Данные7.Свойство("П000730000101_" + НомерСтроки73Стр) Цикл
				
				МесГодВознРаздел73 = Данные7["П000730000101_" + НомерСтроки73Стр];
				НалВычНачРаздел7   = Данные7["П000730000102_" + НомерСтроки73Стр];
				НалВычПредРаздел7  = Данные7["П000730000103_" + НомерСтроки73Стр];
				НалВычТекРаздел7   = Данные7["П000730000104_" + НомерСтроки73Стр];
				НалВычКонРаздел7   = Данные7["П000730000105_" + НомерСтроки73Стр];
				МесГодОконРаздел73 = Данные7["П000730000106_" + НомерСтроки73Стр];
				
				Если НЕ ЗначениеЗаполнено(МесГодВознРаздел73)
					И НЕ ЗначениеЗаполнено(НалВычНачРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычПредРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычТекРаздел7)
					И НЕ ЗначениеЗаполнено(НалВычКонРаздел7)
					И НЕ ЗначениеЗаполнено(МесГодОконРаздел73) Тогда
					НомерСтроки73 = НомерСтроки73 + 1;
					НомерСтроки73Стр = Формат(НомерСтроки73, "ЧГ=");
					Продолжить;
				КонецЕсли;
				
				// Месяц и год возникновения права на налоговый вычет.
				Если НЕ ЗначениеЗаполнено(МесГодВознРаздел73) Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки73Стр
					+ " подраздела 7.3 не заданы месяц и год возникновения права на налоговый вычет.",
					"Раздел7", "П000730000101_" + НомерСтроки73Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				// Месяц и год окончания права на налоговый вычет.
				Если НЕ ЗначениеЗаполнено(МесГодОконРаздел73) Тогда
					СообщитьВТС("Раздел 7 -> Страница " + НомерСтраницы7
					+ ": в строке " + НомерСтроки73Стр
					+ " подраздела 7.3 не заданы месяц и год окончания права на налоговый вычет.",
					"Раздел7", "П000730000106_" + НомерСтроки73Стр, НомерСтраницы7);
					СтатусПроверки = Ложь;
				КонецЕсли;
				
				НомерСтроки73 = НомерСтроки73 + 1;
				НомерСтроки73Стр = Формат(НомерСтроки73, "ЧГ=");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
		Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
			ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(СохраненныеДанныеОтчета);
		КонецЕсли;
	КонецЕсли;
	
	// Конвертирование числовых значений коэффициента Ктд в графе 4 Раздела 5.1 в строковые.
	ДанныеМногоуровневыхРазделов = СохраненныеДанныеОтчета["ДанныеМногоуровневыхРазделов"];
	ДеревоДанныхРаздел5 = ДанныеМногоуровневыхРазделов["Раздел5"];
	
	Для каждого ВеткаРаздел5 Из ДеревоДанныхРаздел5.Строки Цикл
		
		Для каждого ВеткаРаздел51 Из ВеткаРаздел5.Строки Цикл
			
			НомСтр = 1;
			ИмяПок = "П000510000104_1";
			
			Пока ВеткаРаздел51.Данные.Свойство(ИмяПок) Цикл
				
				ТекЗнач = ВеткаРаздел51.Данные["П000510000104_" + Формат(НомСтр, "ЧГ=")];
				
				Если ТипЗнч(ТекЗнач) = Тип("Число") Тогда
					
					ВеткаРаздел51.Данные.Вставить(ИмяПок,
					?(ТекЗнач = 0, "-", Формат(ТекЗнач, "ЧЦ=2; ЧДЦ=1; ЧН=")));
					
				КонецЕсли;
				
				НомСтр = НомСтр + 1;
				ИмяПок = "П000510000104_" + Формат(НомСтр, "ЧГ=");
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ДанныеМногоуровневыхРазделов.Вставить("Раздел5", ДеревоДанныхРаздел5);
	СохраненныеДанныеОтчета.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	// Конвертирование числовых значений коэффициента Ктд в строке 050 Раздела 7 в строковые.
	ДанныеМногостраничныхРазделов = СохраненныеДанныеОтчета["ДанныеМногостраничныхРазделов"];
	ТаблицаРаздел7 = ДанныеМногостраничныхРазделов["Раздел7"];
	
	Для каждого СтрокаРаздел7 Из ТаблицаРаздел7 Цикл
		
		ТекЗнач = СтрокаРаздел7.Данные["П000700005003"];
		
		Если ТипЗнч(ТекЗнач) = Тип("Число") Тогда
			
			СтрокаРаздел7.Данные.Вставить("П000700005003",
			?(ТекЗнач = 0, "-", Формат(ТекЗнач, "ЧЦ=2; ЧДЦ=1; ЧН=")));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеМногостраничныхРазделов.Вставить("Раздел7", ТаблицаРаздел7);
	СохраненныеДанныеОтчета.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ПостОбработкаДереваВыгрузки(ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ПостОбработкаДереваВыгрузки(ДеревоВыгрузки)
	
	// Обработка всех узлов "КолРеалДПИ" раздела 5.
	УзлыКолРеалДПИ = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Код, Раздел", "КолРеалДПИ", "Раздел5"), Истина);
	
	Для Каждого Узел Из УзлыКолРеалДПИ Цикл
		
		Если Узел.Значение = "0" Тогда
			Продолжить;
		КонецЕсли;
		
		// находим узел "ВырРеалДПИ" соответствующий узлу "КолРеалДПИ".
		УзелВырРеалДПИ = Узел.Родитель.Строки.Найти("ВырРеалДПИ", "Код");
		
		Если УзелВырРеалДПИ <> Неопределено Тогда
			
			УзелВырРеалДПИ.Обязательность = "О";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель)
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Раздел 1.
	СумНалПУ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СумНалПУ");
	СумПУ = ПолучитьПодчиненныйЭлемент(СумНалПУ, "СумПУ");
	НомерСтроки = 1;
	ДанныеРаздела1 = мДанныеОтчета.Раздел1;
	Пока ДанныеРаздела1.Свойство("П000100000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЭкзСумПУ = СкопироватьУзел(СумНалПУ, СумПУ);
		ЗаполнитьДаннымиУзел(ДанныеРаздела1, ЭкзСумПУ, НомерСтроки);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Раздел 2.
	ДанныеРаздела2 = ДанныеМногоуровневыхРазделов.Раздел2;
	
	// Определение необходимости выгрузки раздела 2.
	ВыгружатьРаздел2 = Ложь;
	Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
		ЗаполненРаздел2 = НЕ СтраницаПуста(СтраницаРаздела2.Данные, "Раздел2", УзелРодитель.Владелец());
		Если ЗаполненРаздел2 Тогда
			ВыгружатьРаздел2 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
			ЗаполненРаздел21 = НЕ СтраницаПуста(СтраницаРаздела21.Данные, "Раздел21", УзелРодитель.Владелец());
			Если ЗаполненРаздел21 Тогда
				ВыгружатьРаздел2 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
				ЗаполненРаздел212 = НЕ СтраницаПуста(СтраницаРаздела212.Данные, "Раздел212", УзелРодитель.Владелец());
				Если ЗаполненРаздел212 Тогда
					ВыгружатьРаздел2 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВыгружатьРаздел2 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыгружатьРаздел2 Тогда
		
		ИсчНалНефт = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалНефт");
		Для каждого СтраницаРаздела2 Из ДанныеРаздела2.Строки Цикл
			ЭкзИсчНалНефт = СкопироватьУзел(УзелРодитель, ИсчНалНефт);
			Для каждого Эл Из ЭкзИсчНалНефт.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела2.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			// Раздел 2.1.
			ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалНефт, "ПокРасчНал");
			Для каждого СтраницаРаздела21 Из СтраницаРаздела2.Строки Цикл
				ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалНефт, ПокРасчНал);
				Для каждого Эл Из ЭкзПокРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела21.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// Многострочная часть раздела 2.1.
				ДобНефтУчНедр = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтУчНедр");
				НомерСтроки211 = 1;
				Пока СтраницаРаздела21.Данные.Свойство("П000211000101_" + Формат(НомерСтроки211, "ЧГ=")) Цикл
					ЭкзДобНефтУчНедр = СкопироватьУзел(ЭкзПокРасчНал, ДобНефтУчНедр);
					Для каждого Эл Из ЭкзДобНефтУчНедр.Строки Цикл
						ВывестиПоказательВXML(Эл, СтраницаРаздела21.Данные[Эл.Ключ + "_" + Формат(НомерСтроки211, "ЧГ=")]);
					КонецЦикла;
					НомерСтроки211 = НомерСтроки211 + 1;
				КонецЦикла;
				// Раздел 2.1.2.
				ДобНефтЗалеж = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "ДобНефтЗалеж");
				Для каждого СтраницаРаздела212 Из СтраницаРаздела21.Строки Цикл
					ЭкзДобНефтЗалеж = СкопироватьУзел(ЭкзПокРасчНал, ДобНефтЗалеж);
					Для каждого Эл Из ЭкзДобНефтЗалеж.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(Эл, СтраницаРаздела212.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					// Многострочная часть раздела 2.1.2.
					КолНефтОсн = ПолучитьПодчиненныйЭлемент(ЭкзДобНефтЗалеж, "КолНефтОсн");
					НомерСтроки212 = 1;
					Пока СтраницаРаздела212.Данные.Свойство("П000212000101_" + Формат(НомерСтроки212, "ЧГ=")) Цикл
						ЭкзКолНефтОсн = СкопироватьУзел(ЭкзДобНефтЗалеж, КолНефтОсн);
						Для каждого Эл Из ЭкзКолНефтОсн.Строки Цикл
							ВывестиПоказательВXML(Эл, СтраницаРаздела212.Данные[Эл.Ключ + "_" + Формат(НомерСтроки212, "ЧГ=")]);
						КонецЦикла;
						НомерСтроки212 = НомерСтроки212 + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 3.
	ДанныеРаздела3 = ДанныеМногоуровневыхРазделов.Раздел3;
	
	// Определение необходимости выгрузки раздела 3.
	ВыгружатьРаздел3 = Ложь;
	Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
		ЗаполненРаздел3 = НЕ СтраницаПуста(СтраницаРаздела3.Данные, "Раздел3", УзелРодитель.Владелец());
		Если ЗаполненРаздел3 Тогда
			ВыгружатьРаздел3 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
			ЗаполненРаздел31 = НЕ СтраницаПуста(СтраницаРаздела31.Данные, "Раздел31", УзелРодитель.Владелец());
			Если ЗаполненРаздел31 Тогда
				ВыгружатьРаздел3 = Истина;
				Прервать;
			КонецЕсли;
			Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
				ЗаполненРаздел311 = НЕ СтраницаПуста(СтраницаРаздела311.Данные, "Раздел311", УзелРодитель.Владелец());
				Если ЗаполненРаздел311 Тогда
					ВыгружатьРаздел3 = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ВыгружатьРаздел3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВыгружатьРаздел3 Тогда
		
		ИсчНалГаз = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчНалГаз");
		Для каждого СтраницаРаздела3 Из ДанныеРаздела3.Строки Цикл
			ЭкзИсчНалГаз = СкопироватьУзел(УзелРодитель, ИсчНалГаз);
			Для каждого Эл Из ЭкзИсчНалГаз.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела3.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 3.1.
			ПокРасчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчНалГаз, "ПокРасчНал");
			Для каждого СтраницаРаздела31 Из СтраницаРаздела3.Строки Цикл
				ЭкзПокРасчНал = СкопироватьУзел(ЭкзИсчНалГаз, ПокРасчНал);
				Для каждого Эл Из ЭкзПокРасчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела31.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				
				// Раздел 3.1.1.
				КолДПИЗал = ПолучитьПодчиненныйЭлемент(ЭкзПокРасчНал, "КолДПИЗал");
				Для каждого СтраницаРаздела311 Из СтраницаРаздела31.Строки Цикл
					ЭкзКолДПИЗал = СкопироватьУзел(ЭкзПокРасчНал, КолДПИЗал);
					Для каждого Эл Из ЭкзКолДПИЗал.Строки Цикл
						Если Эл.Строки.Количество() = 0 Тогда
							ВывестиПоказательВXML(Эл, СтраницаРаздела311.Данные[Эл.Ключ]);
						КонецЕсли;
					КонецЦикла;
					// Многострочная часть раздела 3.1.1.
					КолДПИЗалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолДПИЗал, "КолДПИЗалОсн");
					НомерСтроки311 = 1;
					Пока СтраницаРаздела311.Данные.Свойство("П000311000101_" + Формат(НомерСтроки311, "ЧГ=")) Цикл
						ЭкзКолДПИЗалОсн = СкопироватьУзел(ЭкзКолДПИЗал, КолДПИЗалОсн);
						Для каждого Эл Из ЭкзКолДПИЗалОсн.Строки Цикл
							ВывестиПоказательВXML(Эл, СтраницаРаздела311.Данные[Эл.Ключ + "_" + Формат(НомерСтроки311, "ЧГ=")]);
						КонецЦикла;
						НомерСтроки311 = НомерСтроки311 + 1;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 4.
	// Определение необходимости выгрузки раздела 4.
	ДанныеРаздела4 = мДанныеОтчета.Раздел4;
	ВыгружатьРаздел4 = Ложь;
	Для Каждого СтраницаРаздела4 Из ДанныеРаздела4 Цикл
		Если СтраницаПуста(СтраницаРаздела4.Данные[0].Значение, "Раздел4", УзелРодитель.Владелец()) Тогда
			Продолжить;
		КонецЕсли;
		ВыгружатьРаздел4 = Истина;
		Прервать;
	КонецЦикла;
	
	Если ВыгружатьРаздел4 Тогда
		
		ИсчУплНалНов = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалНов");
		Для Каждого СтраницаРаздела Из ДанныеРаздела4 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			ЭкзИсчУплНалНов = СкопироватьУзел(УзелРодитель, ИсчУплНалНов);
			Для Каждого Эл Из ЭкзИсчУплНалНов.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П000400007003" Тогда
						ВывестиПоказательВXML(Эл, Формат(ДанныеСтраницы[Эл.Ключ], "ДФ=""ММ.гггг"""));
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// Многострочная часть раздела 4.
			КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалНов, "КолПИНалОсн");
			НомерСтроки = 1;
			Пока ДанныеСтраницы.Свойство("П000400000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
				ЭкзКолПИНалОсн = СкопироватьУзел(ЭкзИсчУплНалНов, КолПИНалОсн);
				Для Каждого Эл Из ЭкзКолПИНалОсн.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки, "ЧГ=")]);
					КонецЕсли;
				КонецЦикла;
				НомерСтроки = НомерСтроки + 1;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 5.
	// Определение необходимости выгрузки раздела 5.
	ДанныеРаздела5 = ДанныеМногоуровневыхРазделов.Раздел5;
	ПроверятьРаздел5 = Ложь;
	Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
		ЗаполненРаздел5 = НЕ СтраницаПуста(СтраницаРаздела5.Данные, "Раздел5", УзелРодитель.Владелец());
		Если ЗаполненРаздел5 Тогда
			ПроверятьРаздел5 = Истина;
			Прервать;
		КонецЕсли;
		Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
			ЗаполненРаздел51 = НЕ СтраницаПуста(СтраницаРаздела51.Данные, "Раздел51", УзелРодитель.Владелец());
			Если ЗаполненРаздел51 Тогда
				ПроверятьРаздел5 = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПроверятьРаздел5 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверятьРаздел5 Тогда
		
		ИсчУплНалИскл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалИскл");
		Для каждого СтраницаРаздела5 Из ДанныеРаздела5.Строки Цикл
			ЭкзИсчУплНалИскл = СкопироватьУзел(УзелРодитель, ИсчУплНалИскл);
			Для каждого Эл Из ЭкзИсчУплНалИскл.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела5.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
			
			// Раздел 5.1.
			КолПИУчНал = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "КолПИУчНал");
			Для каждого СтраницаРаздела51 Из СтраницаРаздела5.Строки Цикл
				ЭкзКолПИУчНал = СкопироватьУзел(ЭкзИсчУплНалИскл, КолПИУчНал);
				Для каждого Эл Из ЭкзКолПИУчНал.Строки Цикл
					Если Эл.Строки.Количество() = 0 Тогда
						ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ]);
					КонецЕсли;
				КонецЦикла;
				// Многострочная часть раздела 5.1.
				КолПИНалОсн = ПолучитьПодчиненныйЭлемент(ЭкзКолПИУчНал, "КолПИНалОсн");
				НомерСтроки51 = 1;
				Пока СтраницаРаздела51.Данные.Свойство("П000510000101_" + Формат(НомерСтроки51, "ЧГ=")) Цикл
					ЭкзКолПИНалОсн = СкопироватьУзел(ЭкзКолПИУчНал, КолПИНалОсн);
					Для каждого Эл Из ЭкзКолПИНалОсн.Строки Цикл
						Если Эл.Код = "КоэфКтд" Тогда
							КоэфКтд = СокрЛП(СтраницаРаздела51.Данные[Эл.Ключ + "_" + Формат(НомерСтроки51, "ЧГ=")]);
							Если СтрДлина(КоэфКтд) = 3 Тогда
								Если КоэфКтд = "0,0" Тогда
									ВывестиПоказательВXML(Эл, "0");
								Иначе
									ВывестиПоказательВXML(Эл, СтрЗаменить(КоэфКтд, ",", "."));
								КонецЕсли;
							Иначе
								ВывестиПоказательВXML(Эл, "");
							КонецЕсли;
						Иначе
							ВывестиПоказательВXML(Эл, СтраницаРаздела51.Данные[Эл.Ключ + "_" + Формат(НомерСтроки51, "ЧГ=")]);
						КонецЕсли;
					КонецЦикла;
					НомерСтроки51 = НомерСтроки51 + 1;
				КонецЦикла;
			КонецЦикла;
			
			// Раздел 5.2.
			РасчНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалИскл, "РасчНалУпл");
			Для каждого Эл Из РасчНалУпл.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, СтраницаРаздела5.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 6.
	СтоимЕдДПИ = ПолучитьПодчиненныйЭлемент(УзелРодитель, "СтоимЕдДПИ");
	ДанныеРаздела6 = мДанныеОтчета.Раздел6;
	СумРасхДПИОбщ = ПолучитьПодчиненныйЭлемент(СтоимЕдДПИ, "СумРасхДПИОбщ");
	Для каждого Эл Из СумРасхДПИОбщ.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	СумРасхДПИОтд = ПолучитьПодчиненныйЭлемент(СтоимЕдДПИ, "СумРасхДПИОтд");
	Для каждого Эл Из СумРасхДПИОтд.Строки Цикл
		Если Эл.Строки.Количество() = 0 Тогда
			ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ]);
		КонецЕсли;
	КонецЦикла;
	// Многострочная часть раздела 6.2.
	СумРасхДПИКод = ПолучитьПодчиненныйЭлемент(СумРасхДПИОтд, "СумРасхДПИКод");
	НомерСтроки = 1;
	Пока ДанныеРаздела6.Свойство("П000620000101_" + Формат(НомерСтроки, "ЧГ=")) Цикл
		ЭкзСумРасхДПИКод = СкопироватьУзел(СумРасхДПИОтд, СумРасхДПИКод);
		Для Каждого Эл Из ЭкзСумРасхДПИКод.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеРаздела6[Эл.Ключ + "_" + Формат(НомерСтроки, "ЧГ=")]);
			КонецЕсли;
		КонецЦикла;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;

	// Раздел 7.
	ДанныеРаздела7 = мДанныеОтчета.Раздел7;
	ИсчУплНалУг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "ИсчУплНалУг");
	Для Каждого СтраницаРаздела Из ДанныеРаздела7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		ЭкзИсчУплНалУг = СкопироватьУзел(УзелРодитель, ИсчУплНалУг);
		Для Каждого Эл Из ЭкзИсчУплНалУг.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Код = "Ктд" Тогда
					КоэфКтд = СокрЛП(ДанныеСтраницы[Эл.Ключ]);
					Если СтрДлина(КоэфКтд) = 3 Тогда
						Если КоэфКтд = "0,0" Тогда
							ВывестиПоказательВXML(Эл, "0");
						Иначе
							ВывестиПоказательВXML(Эл, СтрЗаменить(КоэфКтд, ",", "."));
						КонецЕсли;
					Иначе
						ВывестиПоказательВXML(Эл, "");
					КонецЕсли;
				Иначе
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 7 (подраздел 7.1).
		ДанДПИУг = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "ДанДПИУг");
		ДанДПИУгУч = ПолучитьПодчиненныйЭлемент(ДанДПИУг, "ДанДПИУгУч");
		НомерСтроки71 = 1;
		Пока ДанныеСтраницы.Свойство("П000710000101_" + Формат(НомерСтроки71, "ЧГ=")) Цикл
			ЭкзДанДПИУгУч = СкопироватьУзел(ДанДПИУг, ДанДПИУгУч);
			Для Каждого Эл Из ЭкзДанДПИУгУч.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки71, "ЧГ=")]);
				КонецЕсли;
			КонецЦикла;
			НомерСтроки71 = НомерСтроки71 + 1;
		КонецЦикла;
		// Подраздел 7.2.
		РасчНалУпл = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалУпл");
		Для Каждого Эл Из РасчНалУпл.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		РасхОТПер = ПолучитьПодчиненныйЭлемент(РасчНалУпл, "РасхОТПер");
		Для Каждого Эл Из РасхОТПер.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ]);
			КонецЕсли;
		КонецЦикла;
		// Многострочная часть раздела 7 (подраздел 7.3).
		РасчНалВыч = ПолучитьПодчиненныйЭлемент(ЭкзИсчУплНалУг, "РасчНалВыч");
		РасчНалВычПер = ПолучитьПодчиненныйЭлемент(РасчНалВыч, "РасчНалВычПер");
		НомерСтроки73 = 1;
		Пока ДанныеСтраницы.Свойство("П000730000101_" + Формат(НомерСтроки73, "ЧГ=")) Цикл
			ЭкзРасчНалВычПер = СкопироватьУзел(РасчНалВыч, РасчНалВычПер);
			Для Каждого Эл Из ЭкзРасчНалВычПер.Строки Цикл
				Если Эл.Строки.Количество() = 0 Тогда
					Если Эл.Ключ = "П000730000101" ИЛИ Эл.Ключ = "П000730000106" Тогда
						ВывестиПоказательВXML(Эл, Формат(ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки73, "ЧГ=")], "ДФ=""ММ.гггг"""));
					Иначе
						ВывестиПоказательВXML(Эл, ДанныеСтраницы[Эл.Ключ + "_" + Формат(НомерСтроки73, "ЧГ=")]);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			НомерСтроки73 = НомерСтроки73 + 1;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	Если ТипЗнч(Показатели) = Тип("Строка") Тогда
		ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	Иначе
		ПоказателиРаздела = Показатели;
	КонецЕсли;
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	Если Показатели = "Раздел2" Тогда
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200001003");
		ПоказателиНеанализируемыеНаЗаполненность.Добавить("П000200003003");
	КонецЕсли;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Пок.Многострочность Тогда
			ИндексСтроки = 1;
			ЗначениеПоказателя = Неопределено;
			Пока ДанныеСтраницы.Свойство(Пок.Ключ + "_" + Формат(ИндексСтроки, "ЧГ="), ЗначениеПоказателя) Цикл
				Если ПоказательЗаполнен(Пок, ЗначениеПоказателя)
					И НЕ (Пок.Ключ = "П000510000104" И СокрЛП(ЗначениеПоказателя) = "-") Тогда
					Возврат Ложь;
				КонецЕсли;
				ИндексСтроки = ИндексСтроки + 1;
			КонецЦикла;
		Иначе
			Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ])
				И НЕ (Пок.Ключ = "П000700005003" И СокрЛП(ДанныеСтраницы[Пок.Ключ]) = "-") Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// находим узел с максимальным индексом и с тем же кодом, что и у копируемого, и добавляем новый сразу после найденного
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел, ПоказателиНеанализируемыеНаЗаполненность = Неопределено)
	
	ПустойУзел = ?(	Узел.Формат = "N",
				Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение)),
				НЕ ЗначениеЗаполнено(Узел.Значение));
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПустойУзел;
	
КонецФункции

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
			Узел.Значение = ?(МаксШирина < СтрДлина(СокрЛП(ЗначениеПоказателя)), СокрЛП(Лев(СокрЛП(ЗначениеПоказателя), МаксШирина)), СокрЛП(ЗначениеПоказателя));
		Иначе
			Узел.Значение = Неопределено;
		КонецЕсли;
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	ИначеЕсли Узел.Формат = "gYear" Тогда
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			Если ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
			Иначе
				Узел.Значение = Неопределено;
			КонецЕсли;
		Иначе
			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учтем оба варианта: кириллицу и латиницу
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти") И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("windows-1251"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML

	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = Истина Тогда
		РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС, Истина);
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	ДеревоВыгрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел2" Тогда
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела2 = НайденнаяСтраница2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел212" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела2 = НайденнаяСтраница2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				ТекСтраницаРаздела21 = НайденнаяСтраница21;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел3" Тогда
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел31" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела3 = НайденнаяСтраница3;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел311" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела3 = НайденнаяСтраница3;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				ТекСтраницаРаздела31 = НайденнаяСтраница31;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел5" Тогда
		
		Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел51" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела5 = НайденнаяСтраница5;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Раздел2"
		ИЛИ Ячейка.Раздел = "Раздел21"
		ИЛИ Ячейка.Раздел = "Раздел212"
		ИЛИ Ячейка.Раздел = "Раздел3"
		ИЛИ Ячейка.Раздел = "Раздел31"
		ИЛИ Ячейка.Раздел = "Раздел311"
		ИЛИ Ячейка.Раздел = "Раздел5"
		ИЛИ Ячейка.Раздел = "Раздел51" Тогда
		
		ТекущийЭлемент = Элементы.ТабличныйДокумент;
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		ИначеЕсли Ячейка.СтрокаПП <> Неопределено
			И ЗначениеЗаполнено(Ячейка.СтрокаПП) Тогда
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				КонецЕсли;
			КонецЕсли;
		Иначе
			НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "1");
			Если НЕ НайденнаяОбласть = Неопределено Тогда
				Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
			Иначе
				НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки + "_1");
				Если НЕ НайденнаяОбласть = Неопределено Тогда
					Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
				Иначе
					Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(Ячейка.ИмяЯчейки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	Иначе
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			Если ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
				
				ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
				
				КолСтрокВДеревеДанныхРаздел2 = Макс(ДеревоДанныхРаздел2.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел2 = 1 По КолСтрокВДеревеДанныхРаздел2 Цикл
					
					ЭлементРаздел2 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел2.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел2;
					ЭлементРаздел2.КолонкаРазделыОтчетаСокрНаим      = "Раздел2";
					ЭлементРаздел2.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел2;
					ЭлементРаздел2.ИндексКартинки                    = 0;
					ЭлементРаздел2.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел2.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел21
						= Макс(ДеревоДанныхРаздел2.Строки[НомерСтраницыРаздел2 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел21 = 1 По КолСтрокВДеревеДанныхРаздел21 Цикл
						
						ЭлементРаздел21 = ЭлементРаздел2.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел21.КолонкаРазделыОтчета              = "Расчет налога. Стр. " + НомерСтраницыРаздел21;
						ЭлементРаздел21.КолонкаРазделыОтчетаСокрНаим      = "Раздел21";
						ЭлементРаздел21.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел21;
						ЭлементРаздел21.ИндексКартинки                    = 0;
						ЭлементРаздел21.РазделМногостраничный             = ЭлементРаздел2.РазделМногостраничный;
						ЭлементРаздел21.РазделМногострочный               = ЭлементРаздел2.РазделМногострочный;
						
						КолСтрокВДеревеДанныхРаздел212
							= Макс(ДеревоДанныхРаздел2.Строки[НомерСтраницыРаздел2 - 1].Строки[НомерСтраницыРаздел21 - 1].Строки.Количество(), 1);
						
						Для НомерСтраницыРаздел212 = 1 По КолСтрокВДеревеДанныхРаздел212 Цикл
							
							ЭлементРаздел212 = ЭлементРаздел21.ПолучитьЭлементы().Добавить();
							
							ЭлементРаздел212.КолонкаРазделыОтчета              = "Нефть, добытая" + Символы.ПС + "из залежи. Стр. " + НомерСтраницыРаздел212;
							ЭлементРаздел212.КолонкаРазделыОтчетаСокрНаим      = "Раздел212";
							ЭлементРаздел212.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел212;
							ЭлементРаздел212.ИндексКартинки                    = 1;
							ЭлементРаздел212.РазделМногостраничный             = ЭлементРаздел21.РазделМногостраничный;
							ЭлементРаздел212.РазделМногострочный               = ЭлементРаздел21.РазделМногострочный;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
				
				ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
				
				КолСтрокВДеревеДанныхРаздел3 = Макс(ДеревоДанныхРаздел3.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел3 = 1 По КолСтрокВДеревеДанныхРаздел3 Цикл
					
					ЭлементРаздел3 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел3.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел3;
					ЭлементРаздел3.КолонкаРазделыОтчетаСокрНаим      = "Раздел3";
					ЭлементРаздел3.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел3;
					ЭлементРаздел3.ИндексКартинки                    = 0;
					ЭлементРаздел3.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел3.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел31
						= Макс(ДеревоДанныхРаздел3.Строки[НомерСтраницыРаздел3 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел31 = 1 По КолСтрокВДеревеДанныхРаздел31 Цикл
						
						ЭлементРаздел31 = ЭлементРаздел3.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел31.КолонкаРазделыОтчета              = "Расчет налога. Стр. " + НомерСтраницыРаздел31;
						ЭлементРаздел31.КолонкаРазделыОтчетаСокрНаим      = "Раздел31";
						ЭлементРаздел31.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел31;
						ЭлементРаздел31.ИндексКартинки                    = 0;
						ЭлементРаздел31.РазделМногостраничный             = ЭлементРаздел3.РазделМногостраничный;
						ЭлементРаздел31.РазделМногострочный               = ЭлементРаздел3.РазделМногострочный;
						
						КолСтрокВДеревеДанныхРаздел311
							= Макс(ДеревоДанныхРаздел3.Строки[НомерСтраницыРаздел3 - 1].Строки[НомерСтраницыРаздел31 - 1].Строки.Количество(), 1);
						
						Для НомерСтраницыРаздел311 = 1 По КолСтрокВДеревеДанныхРаздел311 Цикл
							
							ЭлементРаздел311 = ЭлементРаздел31.ПолучитьЭлементы().Добавить();
							
							ЭлементРаздел311.КолонкаРазделыОтчета              = "Полезное ископаемое," + Символы.ПС + "добытое из залежи. Стр. " + НомерСтраницыРаздел311;
							ЭлементРаздел311.КолонкаРазделыОтчетаСокрНаим      = "Раздел311";
							ЭлементРаздел311.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел311;
							ЭлементРаздел311.ИндексКартинки                    = 1;
							ЭлементРаздел311.РазделМногостраничный             = ЭлементРаздел31.РазделМногостраничный;
							ЭлементРаздел311.РазделМногострочный               = ЭлементРаздел31.РазделМногострочный;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
			ИначеЕсли ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
				
				ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
					Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
				
				КолСтрокВДеревеДанныхРаздел5 = Макс(ДеревоДанныхРаздел5.Строки.Количество(), 1);
				
				ЭлементРазделовОтчета.ИндексКартинки = 0;
				ЭлементРазделовОтчета.РазделМногостраничный = Истина;
				
				Для НомерСтраницыРаздел5 = 1 По КолСтрокВДеревеДанныхРаздел5 Цикл
					
					ЭлементРаздел5 = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
					
					ЭлементРаздел5.КолонкаРазделыОтчета              = "Уплата налога. Стр. " + НомерСтраницыРаздел5;
					ЭлементРаздел5.КолонкаРазделыОтчетаСокрНаим      = "Раздел5";
					ЭлементРаздел5.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел5;
					ЭлементРаздел5.ИндексКартинки                    = 0;
					ЭлементРаздел5.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
					ЭлементРаздел5.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
					
					КолСтрокВДеревеДанныхРаздел51
						= Макс(ДеревоДанныхРаздел5.Строки[НомерСтраницыРаздел5 - 1].Строки.Количество(), 1);
					
					Для НомерСтраницыРаздел51 = 1 По КолСтрокВДеревеДанныхРаздел51 Цикл
						
						ЭлементРаздел51 = ЭлементРаздел5.ПолучитьЭлементы().Добавить();
						
						ЭлементРаздел51.КолонкаРазделыОтчета              = "Раздел 5.1. Стр. " + НомерСтраницыРаздел51;
						ЭлементРаздел51.КолонкаРазделыОтчетаСокрНаим      = "Раздел51";
						ЭлементРаздел51.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздел51;
						ЭлементРаздел51.ИндексКартинки                    = 1;
						ЭлементРаздел51.РазделМногостраничный             = ЭлементРаздел5.РазделМногостраничный;
						ЭлементРаздел51.РазделМногострочный               = ЭлементРаздел5.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5"
		 ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51" Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиМакетСтраницыВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		КМенюРО.Видимость = Истина;
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
		КонецЕсли;
		
		Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
			И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
			
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
			
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		#КонецЕсли
		
		Если (СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Уплата налога") > 0)
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3"
			ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Уплата налога""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Расчет налога") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Расчет налога""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Нефть") > 0
			И СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "из залежи") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Нефть, добытая из залежи""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Полезное ископаемое") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Полезное ископаемое, добытое из залежи""";
		ИначеЕсли СтрНайти(Элемент.ТекущиеДанные.КолонкаРазделыОтчета, "Раздел 5.1") > 0 Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
			= "Добавить страницу ""Раздел 5.1""";
		Иначе
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
		КонецЕсли;
		
		#Если ВебКлиент Тогда
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
		#КонецЕсли
	Иначе
		КМенюРО.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
		КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда 
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы)
	
	Перем СтруктураДанныхДопСтрокРаздела;
	
	Если ИмяСтраницы = "Раздел7" Тогда
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы71);
		ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппы73);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочных блоков.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы71].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы71, ТаблицаДопСтрокГруппы);
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппы73].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппы73, ТаблицаДопСтрокГруппы);
		
	ИначеЕсли ИмяСтраницы = "Раздел4" Тогда
		
		ИдГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
		
		ОбновитьСтруктуруМногострочногоРаздела(Форма, ИдГруппы);
		
		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		// Обновим структуру, хранящую данные строк многострочного блока.
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + ИдГруппы].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела = ТаблицаДопСтрокГруппы;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхДопСтрокРаздела;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если НаимРаздела = "Раздел4"
		ИЛИ НаимРаздела = "Раздел7" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
			
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ЗагТекущейСтраницыПанели = СтрТаблицаСтраницы.Представление;
			
			Если ПустаяСтрока(СтрТаблицаСтраницы.Представление) Тогда
				СтрТаблицаСтраницы.Представление = "Новая страница";
			КонецЕсли;
			
			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
			
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменятьАктивнуюСтраницу;
			
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел1"
		ИЛИ НаимРаздела = "Раздел6" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		
		ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
		
	// Многоуровневые разделы.
	//
	ИначеЕсли НаимРаздела = "Раздел2"
		ИЛИ НаимРаздела = "Раздел21"
		ИЛИ НаимРаздела = "Раздел212"
		ИЛИ НаимРаздела = "Раздел3"
		ИЛИ НаимРаздела = "Раздел31"
		ИЛИ НаимРаздела = "Раздел311"
		ИЛИ НаимРаздела = "Раздел5"
		ИЛИ НаимРаздела = "Раздел51" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		ТекВетка.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(НаимРаздела, 7)]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
	
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы)
	Если ЭтаФорма[НаимТаблицыСтраницы].Количество() = 1 Тогда 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	Иначе
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
			Обл.Гиперссылка = Истина;
			Обл.Текст = "Удалить страницу";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьТипЗначений(ИмяТекРаздела)
	
	Если ИмяТекРаздела = "Раздел5" Тогда
		ТабличныйДокумент.Области.П000500008003.ТипЗначения
			= СтруктураРеквизитовФормы.мОписаниеТиповНеотрицательноеЧислоДСДМ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Программная установка типа (обход интерактивного запрета на точность больше 9).
	УстановитьТипЗначений(ИмяТекРаздела);
	
	// Многостраничные и многострочные разделы.
	//
	Если ИмяТекРаздела = "Раздел7" Тогда
		НаимТаблицыСтраницы = "ТаблицаСтраницыРаздел7";
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
		
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено И Обл.СодержитЗначение Тогда 
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
		
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппыДопСтрок);
				Если ЭтаФорма[ИмяГруппыДопСтрок].Количество() = 1 Тогда 
					Обл = ТабличныйДокумент.Области["УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1"];
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_2");
			Если Обл = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Текст = "";
					Обл.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяТекРаздела = "Раздел4" Тогда
		
		СтруктураДанных = Новый Структура;
		
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		Для каждого ТаблицаСтраницы Из ЭтаФорма[НаимТаблицыСтраницы] Цикл
			ТаблицаСтраницы.АктивнаяСтраница = Ложь;
		КонецЦикла;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	
		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) <> Неопределено Тогда
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаСтраницРаздела = ЭтаФорма[НаимТаблицыСтраницы];
		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
		
		КолМногострочныхЧастей = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "МногострочностьВРазделе").Количество();
		
		Если КолМногострочныхЧастей > 0 Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			// Способ хранения многострочных частей.
			СохранятьМногострКакТЗ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекРаздела, "СохранятьМногострКакТЗ");
			
		Иначе
			
			НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			
		КонецЕсли;
		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными.
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда
				
				ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
				
				ПромТаблицаДопСтрокРаздела = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(НовДанныеДопСтрокРаздела, ПромТаблицаДопСтрокРаздела);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				// Выводим в табличный документ данные группы дополнительных строк и обновляем структуру многострочного раздела.
				ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьВидимостьУдалитьСтраницу(НаимТаблицыСтраницы);
		ИмяГруппыДопСтрок = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		КонецЕсли;
		
	// Многострочные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел1"
		ИЛИ ИмяТекРаздела = "Раздел6" Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
			ИмяГруппыДопСтрок = КЗ.Ключ;
			Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
				Если Обл <> Неопределено Тогда 
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	// Многоуровневые разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Раздел2"
		ИЛИ ИмяТекРаздела = "Раздел21"
		ИЛИ ИмяТекРаздела = "Раздел212"
		ИЛИ ИмяТекРаздела = "Раздел3"
		ИЛИ ИмяТекРаздела = "Раздел31"
		ИЛИ ИмяТекРаздела = "Раздел311"
		ИЛИ ИмяТекРаздела = "Раздел5"
		ИЛИ ИмяТекРаздела = "Раздел51" Тогда
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Лев(ИмяТекРаздела, 7)]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		Если ИмяТекРаздела = "Раздел21"
			ИЛИ ИмяТекРаздела = "Раздел212"
			ИЛИ ИмяТекРаздела = "Раздел311"
			ИЛИ ИмяТекРаздела = "Раздел51" Тогда
			
			ИмяГруппы = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
			
			ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(ЭтаФорма, ИмяГруппы, ТекВетка.Данные);
			
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
			Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл
				ИмяГруппыДопСтрок = КЗ.Ключ;
				Если ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_2") = Неопределено Тогда
					Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ИмяГруппыДопСтрок + "01_1");
					Если Обл <> Неопределено Тогда 
						Обл.Гиперссылка = Ложь;
						Обл.Текст = "";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный"
		И ИмяТекРаздела <> "Раздел2"
		И ИмяТекРаздела <> "Раздел21"
		И ИмяТекРаздела <> "Раздел212"
		И ИмяТекРаздела <> "Раздел3"
		И ИмяТекРаздела <> "Раздел31"
		И ИмяТекРаздела <> "Раздел311"
		И ИмяТекРаздела <> "Раздел5"
		И ИмяТекРаздела <> "Раздел51" Тогда
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	КонецЕсли;
	
	Если ИмяТекРаздела <> "Титульный" Тогда
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	КонецЕсли;
	
	Если ИмяТекРаздела = "Раздел31" Тогда
		ОбновитьНомераСтраницРазделов3СКодомВидаДПИ03300();
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьОтчетЗавершение", ЭтотОбъект, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет", ОписаниеОповещения);
	Иначе
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьДеревоРазделовВФормеОтчета(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел2"
		ИЛИ ИмяРаздела = "Раздел21"
		ИЛИ ИмяРаздела = "Раздел212"
		ИЛИ ИмяРаздела = "Раздел3"
		ИЛИ ИмяРаздела = "Раздел31"
		ИЛИ ИмяРаздела = "Раздел311"
		ИЛИ ИмяРаздела = "Раздел5"
		ИЛИ ИмяРаздела = "Раздел51" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяРаздела", Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ДополнительныеПараметры.Вставить("ВыполняемоеОповещение",
		Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект);
		
		РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела"
		+ Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаПодчиненногоРазделаНаСервере(ИмяРаздела);
		
		СпрятатьСсылкуУдалитьСтраницу();
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаПодчиненногоРазделаНаСервере(ИмяРаздела)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(
	ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	
	Если ИмяРаздела = "Раздел2" Тогда
		ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
		ТабличныйДокумент.Области["П000200003003"].Значение = "168";
	КонецЕсли;
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(
	ИмяРаздела, , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетВДеревеЗначений(ЭтаФорма, ИмяРаздела);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
	Иначе
		РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел4" Тогда
			ТабличныйДокумент.Области["П000400002003"].Очистить();
			УстановитьДоступностьОбластей(ЭтаФорма, "Раздел4");
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
			ТабличныйДокумент.Области["П000510000104_1"].Значение = "-";
		ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел7" Тогда
			ТабличныйДокумент.Области["П000700005003"].Значение = "-";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	Модифицированность = Истина;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		ДобавитьСтраницуВРазделе2НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		Родитель21 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя21 = Родитель21.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя21);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212" Тогда
		
		Родитель212 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя212 = Родитель212.КолонкаНомерСтраницыРазделаОтчета;
		
		ПраРодитель212 = Родитель212.ПолучитьРодителя();
		НомСтраницыПраРодителя212 = ПраРодитель212.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе212НаСервере(НомСтраницыРодителя212, НомСтраницыПраРодителя212);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		ДобавитьСтраницуВРазделе3НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
		
		Родитель31 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя31 = Родитель31.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе31НаСервере(НомСтраницыРодителя31);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311" Тогда
		
		Родитель311 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя311 = Родитель311.КолонкаНомерСтраницыРазделаОтчета;
		
		ПраРодитель311 = Родитель311.ПолучитьРодителя();
		НомСтраницыПраРодителя311 = ПраРодитель311.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе311НаСервере(НомСтраницыРодителя311, НомСтраницыПраРодителя311);
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		ДобавитьСтраницуВРазделе5НаСервере();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51" Тогда
		
		Родитель51 = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя51 = Родитель51.КолонкаНомерСтраницыРазделаОтчета;
		
		ДобавитьСтраницуВРазделе51НаСервере(НомСтраницыРодителя51);
		
	Иначе
		
		ВставитьДополнительнуюСтраницуНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		
		Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел4" Тогда
			ТабличныйДокумент.Области["П000400002003"].Очистить();
		ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел7" Тогда
			ТабличныйДокумент.Области["П000700005003"].Значение = "-";
		КонецЕсли;
		
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
	Для Каждого КЗ Из мСтруктураМногострочныхРазделов Цикл 
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + КЗ.Ключ + "01_1");
		Если Обл <> Неопределено Тогда
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЦикла;
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе2НаСервере()
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки.Добавить();
	ВеткаРаздел2.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел2"));
	ТабличныйДокумент.Области["П000200001003"].Значение = "03100";
	ТабличныйДокумент.Области["П000200003003"].Значение = "168";
	ВеткаРаздел2.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе21НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки.Добавить();
	ВеткаРаздел21.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел21 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел21"));
	ВеткаРаздел21.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе212НаСервере(НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	// Ур. 0.
	ВеткаРаздел2 = ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел21 = ВеткаРаздел2.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 2.
	ВеткаРаздел212 = ВеткаРаздел21.Строки.Добавить();
	ВеткаРаздел212.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 2
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел212 = ДеревоДанныхРаздел2.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];// ур. 2
	ПредыдущаяВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел212"));
	ВеткаРаздел212.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела21 = НайденнаяСтраница21;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе3НаСервере()
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки.Добавить();
	ВеткаРаздел3.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
	ВеткаРаздел31.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел3.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
	ВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел3"));
	ВеткаРаздел3.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе31НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки.Добавить();
	ВеткаРаздел31.Данные = Новый Структура;
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел31 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел31"));
	ВеткаРаздел31.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе311НаСервере(НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	// Ур. 0.
	ВеткаРаздел3 = ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел31 = ВеткаРаздел3.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 2.
	ВеткаРаздел311 = ВеткаРаздел31.Строки.Добавить();
	ВеткаРаздел311.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 2
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел311 = ДеревоДанныхРаздел3.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];// ур. 2
	ПредыдущаяВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новой страницы.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел311"));
	ВеткаРаздел311.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела31 = НайденнаяСтраница31;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе5НаСервере()
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	// Ур. 0.
	ВеткаРаздел5 = ДеревоДанныхРаздел5.Строки.Добавить();
	ВеткаРаздел5.Данные = Новый Структура;
	
	// Ур. 1.
	ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
	ВеткаРаздел51.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел5.Строки.Количество();// ур. 0
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел5 = ДеревоДанныхРаздел5.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];// ур. 0
	ПредыдущаяВеткаРаздел5.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
	ВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел5"));
	ВеткаРаздел5.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуВРазделе51НаСервере(НомСтраницыРодителя)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	// Ур. 0.
	ВеткаРаздел5 = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1];
	
	// Ур. 1.
	ВеткаРаздел51 = ВеткаРаздел5.Строки.Добавить();
	ВеткаРаздел51.Данные = Новый Структура;
	
	ТекНомерСтраницы = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Количество();// ур. 1
	
	// Сохранение данных предыдущей страницы.
	ПредыдущаяВеткаРаздел51 = ДеревоДанныхРаздел5.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];// ур. 1
	ПредыдущаяВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	// Вывод и сохранение данных новых страниц.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + "Раздел51"));
	ТабличныйДокумент.Области["П000510000104_1"].Значение = "-";
	ВеткаРаздел51.Данные = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела5 = НайденнаяСтраница5;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета = ТекНомерСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(ТекНомерСтраницы);
	
КонецПроцедуры

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	
	ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
				
				ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
				ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ЗначениеЯчейки = ОбластьЯчейки.Значение;
				Иначе
					ЗначениеЯчейки = ОбластьЯчейки.Текст;
				КонецЕсли;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтруктуруМногоуровневогоМногострочногоРаздела(Форма, ИмяГруппы, ДанныеРаздела)
	
	Перем СтруктураГруппы;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СтруктураГруппы.Очистить();
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	ИмяПервойКолонки = СписокИменКолонокРаздела.Получить(0).Значение;
	
	НСтр = 1;
	НСтрСтр = "1";
	
	Пока ДанныеРаздела.Свойство(ИмяПервойКолонки + "_" + НСтрСтр) Цикл
		
		ТекСтрокаТаблицы = СтруктураГруппы.Добавить();
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
			
			Если ТекСтрокаТаблицы.Свойство(ИмяКолонки) Тогда
				
				ИмяПоказателя = ИмяКолонки + "_" + НСтрСтр;
				
				ТекСтрокаТаблицы[ИмяКолонки] = ДанныеРаздела[ИмяПоказателя];
				
			КонецЕсли;
			
		КонецЦикла;
		
		НСтр = НСтр + 1;
		НСтрСтр = Формат(НСтр, "ЧГ=");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		// Стр. 150 = стр. 130 - стр. 140.
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			Если ЗначениеЗаполнено(ОбластьИмя)
				И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000200015003, ОбластьИмя) > 0) Тогда
				Форма.ТабличныйДокумент.Области.П000200015003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000200013003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000200014003.Значение);
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел311" Тогда
		
		// Стр. 040 раздела 3 равна сумме стр. 190 разделов 3.1.1.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000300004003, ОбластьИмя) > 0) Тогда
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел5"
		  ИЛИ ИмяРаздела = "Раздел51" Тогда
		
		// Стр. 140 раздела 5.2 = стр. 070 раздела 5.2 * (сумма по графе 2 из разделов 5.1
		// по кодам "2000", "4000" в графе 1).
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000500014003, ОбластьИмя) > 0) Тогда
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел6" Тогда
		
		// Стр. 040 = стр. 010 + стр. 020 - стр. 030.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600004003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600004003.Значение
					= Форма.ТабличныйДокумент.Области.П000600001003.Значение
					+ Форма.ТабличныйДокумент.Области.П000600002003.Значение
					- Форма.ТабличныйДокумент.Области.П000600003003.Значение;
				Форма.СтруктураДанныхРаздел6.Вставить("П000600004003",
					Форма.ТабличныйДокумент.Области.П000600004003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600004003",
					Форма.СтруктураДанныхРаздел6.П000600001003
					+ Форма.СтруктураДанныхРаздел6.П000600002003
					- Форма.СтруктураДанныхРаздел6.П000600003003);
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 090 = стр. 050 + стр. 060 + стр. 070 х стр. 010 : стр. 080.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600009003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600009003.Значение
					= Форма.ТабличныйДокумент.Области.П000600005003.Значение
					+ Форма.ТабличныйДокумент.Области.П000600006003.Значение;
				// Учет деления на ноль.
				Если Форма.ТабличныйДокумент.Области.П000600008003.Значение <> 0 Тогда
					Форма.ТабличныйДокумент.Области.П000600009003.Значение
						= Форма.ТабличныйДокумент.Области.П000600009003.Значение
						+ Форма.ТабличныйДокумент.Области.П000600007003.Значение
						* Форма.ТабличныйДокумент.Области.П000600001003.Значение
						/ Форма.ТабличныйДокумент.Области.П000600008003.Значение;
				КонецЕсли;
				Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
					Форма.ТабличныйДокумент.Области.П000600009003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
					Форма.СтруктураДанныхРаздел6.П000600005003
					+ Форма.СтруктураДанныхРаздел6.П000600006003);
				// Учет деления на ноль.
				Если Форма.СтруктураДанныхРаздел6.П000600008003 <> 0 Тогда
					Форма.СтруктураДанныхРаздел6.Вставить("П000600009003",
						Форма.СтруктураДанныхРаздел6.П000600009003
						+ Форма.СтруктураДанныхРаздел6.П000600007003
						* Форма.СтруктураДанныхРаздел6.П000600001003
						/ Форма.СтруктураДанныхРаздел6.П000600008003);
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		
		// Стр. 100 = стр. 040 + стр. 090.
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000600010003, ОбластьИмя) > 0) Тогда
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				Форма.ТабличныйДокумент.Области.П000600010003.Значение
					= Форма.ТабличныйДокумент.Области.П000600004003.Значение
					+ Форма.ТабличныйДокумент.Области.П000600009003.Значение;
				Форма.СтруктураДанныхРаздел6.Вставить("П000600010003",
					Форма.ТабличныйДокумент.Области.П000600010003.Значение);
			Иначе
				Форма.СтруктураДанныхРаздел6.Вставить("П000600010003",
					Форма.СтруктураДанныхРаздел6.П000600004003
					+ Форма.СтруктураДанныхРаздел6.П000600009003);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ОбластьИмя) ИЛИ (ЗначениеЗаполнено(ОбластьИмя)
			И (СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000620000103, Лев(ОбластьИмя, 13)) > 0
			ИЛИ СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.П000620000104, Лев(ОбластьИмя, 13)) > 0)) Тогда
			
			ОбщаяСуммаПоГрафе2 = 0;
			ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = 0;
			
			Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
				
				НомДопСтроки = 1;
				НомДопСтрокиСтр = "1";
				Пока Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + НомДопСтрокиСтр) <> Неопределено Цикл
					ОбщаяСуммаПоГрафе2 = ОбщаяСуммаПоГрафе2
						+ Форма.ТабличныйДокумент.Области["П000620000102_" + НомДопСтрокиСтр].Значение;
					НомДопСтроки = НомДопСтроки + 1;
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
				КонецЦикла;
				
				НомДопСтроки = 1;
				НомДопСтрокиСтр = "1";
				Пока Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + НомДопСтрокиСтр) <> Неопределено Цикл
					ЭтоПоследняяСтрокаРаздела62
						= Форма.ТабличныйДокумент.Области.Найти("П000620000101_" + Формат(НомДопСтроки + 1, "ЧГ=")) = Неопределено;
					Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
						Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
							= ?(ОбщаяСуммаПоГрафе2 <> 0,
							Форма.ТабличныйДокумент.Области["П000620000102_" + НомДопСтрокиСтр].Значение
							/ ОбщаяСуммаПоГрафе2, 0);
						ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки
							+ Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение;
					Иначе
						Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
							= ?(ОбщаяСуммаПоГрафе2 <> 0, 1 - ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки, 0);
					КонецЕсли;
					Форма.ТабличныйДокумент.Области["П000620000104_" + НомДопСтрокиСтр].Значение
						= Форма.ТабличныйДокумент.Области["П000620000103_" + НомДопСтрокиСтр].Значение
						* Форма.ТабличныйДокумент.Области["П000600010003"].Значение;
					НомДопСтроки = НомДопСтроки + 1;
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
				КонецЦикла;
				
			Иначе
				
				Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы62, ТаблицаБлока);
				ТаблицаБлока = Форма[ТаблицаБлока];
				
				Для каждого Зап Из ТаблицаБлока Цикл
					ОбщаяСуммаПоГрафе2 = ОбщаяСуммаПоГрафе2 + Зап.П000620000102;
				КонецЦикла;
				Для каждого Зап Из ТаблицаБлока Цикл
					ЭтоПоследняяСтрокаРаздела62 = (ТаблицаБлока.Индекс(Зап) = ТаблицаБлока.Количество() - 1);
					Если НЕ ЭтоПоследняяСтрокаРаздела62 Тогда
						Зап.П000620000103 = ?(ОбщаяСуммаПоГрафе2 <> 0, Зап.П000620000102 / ОбщаяСуммаПоГрафе2, 0);
						ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки = ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки
							+ Зап.П000620000103;
					Иначе
						Зап.П000620000103 = ?(ОбщаяСуммаПоГрафе2 <> 0, 1 - ОбщаяСуммаПоГрафе3ЗаИсклПоследнейСтроки, 0);
					КонецЕсли;
					Зап.П000620000104 = Зап.П000620000103 * Форма.СтруктураДанныхРаздел6.П000600010003;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел7" Тогда
		
		РасчетВСтруктуре(Форма, "Раздел7");
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел7");
		Расчет(Форма, "Раздел6");
		Расчет(Форма, "Раздел5");
		Расчет(Форма, "Раздел311");
		Расчет(Форма, "Раздел21");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВСтруктуре(Форма, ИмяЛиста)
	
	ТаблицаРаздела = Форма.мСтруктураМногостраничныхРазделов[ИмяЛиста];
	ТаблицаРаздела = Форма[ТаблицаРаздела];
	
	Для Каждого Страница Из ТаблицаРаздела Цикл
		Данные = Страница.Данные[0].Значение;
		Если (Данные = Неопределено) ИЛИ (Тип(Данные) <> Тип("Структура")) Тогда
			Продолжить;
		КонецЕсли;
		Страница.Данные[0].Пометка = Ложь; // для инициализации обмена с сервером
		
		Если ИмяЛиста = "Раздел7" Тогда
		
			// Стр. 070 = стр. 080 + стр. 090 + стр. 100.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700007003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области.П000700008003.Значение
					+ Форма.ТабличныйДокумент.Области.П000700009003.Значение
					+ Форма.ТабличныйДокумент.Области.П000700010003.Значение);
				Данные.Вставить("П000700007003", Форма.ТабличныйДокумент.Области.П000700007003.Значение);
			Иначе
				Данные.Вставить("П000700007003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Данные.П000700008003 + Данные.П000700009003 + Данные.П000700010003));
			КонецЕсли;
			
			// Стр. 140 = стр. 130 × стр. 120.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700014003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Форма.ТабличныйДокумент.Области.П000700013003.Значение)
					* Форма.ТабличныйДокумент.Области.П000700012003.Значение);
				Данные.Вставить("П000700014003", Форма.ТабличныйДокумент.Области.П000700014003.Значение);
			Иначе
				Данные.Вставить("П000700014003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					Данные.П000700013003) * Данные.П000700012003));
			КонецЕсли;
			
			// Стр. 110 = стр. 060 + стр. 070 <= стр. 140.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700011003.Значение = Мин(
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700006003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700007003.Значение),
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700014003.Значение));
				Данные.Вставить("П000700011003", Форма.ТабличныйДокумент.Области.П000700011003.Значение);
			Иначе
				Данные.Вставить("П000700011003", Мин(
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700006003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700007003),
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700014003)));
			КонецЕсли;
			
			// Стр. 150 = стр. 130 - стр. 110.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700015003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700013003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700011003.Значение);
				Данные.Вставить("П000700015003",
					Форма.ТабличныйДокумент.Области.П000700015003.Значение);
			Иначе
				Данные.Вставить("П000700015003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700013003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700011003));
			КонецЕсли;
			
			// Стр. 160 = стр. 060 + стр. 070 - стр. 110.
			Если Страница.АктивнаяСтраница И Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста Тогда
				Форма.ТабличныйДокумент.Области.П000700016003.Значение
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700006003.Значение)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700007003.Значение)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					Форма, Форма.ТабличныйДокумент.Области.П000700011003.Значение);
				Данные.Вставить("П000700016003", Форма.ТабличныйДокумент.Области.П000700016003.Значение);
			Иначе
				Данные.Вставить("П000700016003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700006003)
					+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700007003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма, Данные.П000700011003));
			КонецЕсли;
			
			// Стр. 210 = стр. 180 - стр. 190 - стр. 200.
			ДанныеДопСтрок = Страница.ДанныеДопСтрок[0].Значение;
			Если (ДанныеДопСтрок = Неопределено) ИЛИ (Тип(ДанныеДопСтрок) <> Тип("Структура")) Тогда
				Продолжить;
			КонецЕсли;
			Страница.ДанныеДопСтрок[0].Пометка = Ложь; // для инициализации обмена с сервером
			ДанныеДопСтрокПодразд73 = ДанныеДопСтрок.П0007300001;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд73.Количество() Цикл
					НомДопСтрокиСтр = Формат(НомДопСтроки, "ЧГ=");
					ДопСтрокаПодразд73 = ДанныеДопСтрокПодразд73[НомДопСтроки - 1];
					ДопСтрокаПодразд73.П000730000102 = Форма.ТабличныйДокумент.Области["П000730000102_" + НомДопСтрокиСтр].Значение;
					ДопСтрокаПодразд73.П000730000103 = Форма.ТабличныйДокумент.Области["П000730000103_" + НомДопСтрокиСтр].Значение;
					ДопСтрокаПодразд73.П000730000104 = Форма.ТабличныйДокумент.Области["П000730000104_" + НомДопСтрокиСтр].Значение;
				КонецЦикла;
			КонецЕсли;
		
			Для каждого ДопСтрокаПодразд73 Из ДанныеДопСтрокПодразд73 Цикл
				ДопСтрокаПодразд73.П000730000105
					= РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000102)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000103)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
					  Форма, ДопСтрокаПодразд73.П000730000104);
			КонецЦикла;
			
			Если Страница.АктивнаяСтраница И (Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяЛиста) Тогда
				Для НомДопСтроки = 1 По ДанныеДопСтрокПодразд73.Количество() Цикл
					ДопСтрокаПодразд73 = ДанныеДопСтрокПодразд73[НомДопСтроки - 1];
					Форма.ТабличныйДокумент.Области["П000730000105_" + Формат(НомДопСтроки, "ЧГ=")].Значение = ДопСтрокаПодразд73.П000730000105;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	Если ИмяРаздела = "Раздел21" Тогда
		
		ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхРаздел2.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел2 Из ДеревоДанныхРаздел2.Строки Цикл
			Для каждого ВеткаРаздел21 Из ВеткаРаздел2.Строки Цикл
				
				Если ВеткаРаздел21 = АктивнаяВеткаДереваЗначений Тогда
					ВеткаРаздел21.Данные.Вставить("П000200013003",
						Форма.ТабличныйДокумент.Области["П000200013003"].Значение);
					ВеткаРаздел21.Данные.Вставить("П000200014003",
						Форма.ТабличныйДокумент.Области["П000200014003"].Значение);
				КонецЕсли;
				
				ВеткаРаздел21.Данные.Вставить("П000200015003",
					РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					ВеткаРаздел21.Данные.П000200013003)
					- РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(Форма,
					ВеткаРаздел21.Данные.П000200014003));
				
				Если ВеткаРаздел21 = АктивнаяВеткаДереваЗначений Тогда
					Форма.ТабличныйДокумент.Области["П000200015003"].Значение = ВеткаРаздел21.Данные.П000200015003;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, Форма.УникальныйИдентификатор);
	
	ИначеЕсли ИмяРаздела = "Раздел311" Тогда
		
		ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка311 = ДеревоДанныхРаздел3.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3" Тогда
			АктивнаяВеткаДереваЗначений = ДеревоДанныхРаздел3.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел3 Из ДеревоДанныхРаздел3.Строки Цикл
			
			ЗначП000300004003 = 0;
			
			Для каждого ВеткаРаздел31 Из ВеткаРаздел3.Строки Цикл
				Для каждого ВеткаРаздел311 Из ВеткаРаздел31.Строки Цикл
					
					Если ВеткаРаздел311 = АктивнаяВетка311 Тогда
						ВеткаРаздел311.Данные.Вставить("П000300019003",
							Форма.ТабличныйДокумент.Области["П000300019003"].Значение);
					КонецЕсли;
					
					ЗначП000300004003 = ЗначП000300004003
						+ РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(
						Форма, ВеткаРаздел311.Данные["П000300019003"]);
					
				КонецЦикла;
			КонецЦикла;
			
			ВеткаРаздел3.Данные["П000300004003"] = ЗначП000300004003;
			
			Если ВеткаРаздел3 = АктивнаяВеткаДереваЗначений Тогда
				Форма.ТабличныйДокумент.Области["П000300004003"].Значение = ВеткаРаздел3.Данные["П000300004003"];
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Раздел5" ИЛИ ИмяРаздела = "Раздел51" Тогда
		
		ВозможныеКодыОснованияДляРасчетаСтр140 = "2000|4000";
		
		ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
			АктивнаяВетка5 = ДеревоДанныхРаздел5.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		ИначеЕсли Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
			АктивнаяВетка51 = ДеревоДанныхРаздел5.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1];
		КонецЕсли;
		
		Для каждого ВеткаРаздел5 Из ДеревоДанныхРаздел5.Строки Цикл
			
			Если ВеткаРаздел5 = АктивнаяВетка5 Тогда
				ВеткаРаздел5.Данные.Вставить("П000500007003",
					Форма.ТабличныйДокумент.Области["П000500007003"].Значение);
			КонецЕсли;
			
			СуммаПоГрафе2Раздела51 = 0;
			
			Для каждого ВеткаРаздел51 Из ВеткаРаздел5.Строки Цикл
				
				Если ВеткаРаздел51 = АктивнаяВетка51 Тогда
					НомСтр = 1;
					НомСтрСтр = "1";
					Пока ВеткаРаздел51.Данные.Свойство("П000510000101_" + НомСтрСтр) Цикл
						ВеткаРаздел51.Данные.Вставить("П000510000101_" + НомСтрСтр,
							Форма.ТабличныйДокумент.Области["П000510000101_" + НомСтрСтр].Значение);
						ВеткаРаздел51.Данные.Вставить("П000510000102_" + НомСтрСтр,
							Форма.ТабличныйДокумент.Области["П000510000102_" + НомСтрСтр].Значение);
						НомСтр = НомСтр + 1;
						НомСтрСтр = Формат(НомСтр, "ЧГ=");
					КонецЦикла;
				КонецЕсли;
				
				НомСтр = 1;
				НомСтрСтр = "1";
				Пока ВеткаРаздел51.Данные.Свойство("П000510000101_" + НомСтрСтр) Цикл
					ТекКодОсн = СокрЛП(ВеткаРаздел51.Данные["П000510000101_" + НомСтрСтр]);
					Если ЗначениеЗаполнено(ТекКодОсн)
						И СтрНайти(ВозможныеКодыОснованияДляРасчетаСтр140, ТекКодОсн) > 0 Тогда
						СуммаПоГрафе2Раздела51 = СуммаПоГрафе2Раздела51
							+ ВеткаРаздел51.Данные["П000510000102_" + НомСтрСтр];
					КонецЕсли;
					НомСтр = НомСтр + 1;
					НомСтрСтр = Формат(НомСтр, "ЧГ=");
				КонецЦикла;
				
			КонецЦикла;
			
			ВеткаРаздел5.Данные.Вставить("П000500014003",
				ВеткаРаздел5.Данные["П000500007003"] * СуммаПоГрафе2Раздела51);
			
			Если ВеткаРаздел5 = АктивнаяВетка5 Тогда
				Форма.ТабличныйДокумент.Области["П000500014003"].Значение = ВеткаРаздел5.Данные["П000500014003"];
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
			= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено)
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСтраницРаздела = Форма[ТаблицаСтраницРаздела];

	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля = "ТабличныйДокумент";
	ТекТабличноеПоле     = Форма[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));

	Если СтрТаблицаСтраницы.Количество() > 0 Тогда
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		ОчиститьТабличноеПоле(Форма, ИмяТекущейСтраницыПанели);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();
		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда

				// Предварительно проверим, содержит ли страница многострочные части
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок[0].Значение;

				Если ДанныеДопСтрокРаздела <> Неопределено Тогда
					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;
						
						ПромТаблицаГруппыСтрок = Форма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
						
						КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);

						// Заменяем таблицу значений с данными текущей страницы.
						КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, Форма[ИмяГруппыДопСтрок]);
						// Выводим в табличный документ строки многострочной группы
						ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные[0].Значение;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл

				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Попытка
					Форма[ИмяТекТабличногоПоля].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			КонецЦикла;

			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Расчет(Форма, ИмяТекущейСтраницыПанели);
		Форма.Модифицированность = Истина;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, , , ИмяТекущейСтраницыПанели);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)
	
	ИзменитьТаблицуПараметровАвтозаполнения(-1, ИмяТекущейСтраницыПанели);
	
	Если ИмяТекущейСтраницыПанели = "Раздел7" Тогда
		УдалитьДополнительнуюСтраницу(ЭтаФорма, ИмяТекущейСтраницыПанели);
	Иначе
		РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	КопияТекущиеДанные = ТекущиеДанные;
	
	ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
	Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
		
		ЭлементыДанныхФормыДерево = ТекущиеДанные.ПолучитьЭлементы();
		ИмяКолонки = "КолонкаНомерСтраницыРазделаОтчета";
		ИскомоеЗначение = КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1;
		ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
		Для Ном = 0 По ЭлементыДанныхФормыДерево.Количество() - 1 Цикл
			ЭлементДерева = ЭлементыДанныхФормыДерево.Получить(Ном);
			Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
				ТекущаяСтраницаРазделаПослеУдаления = ЭлементДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел21" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел212" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекПраРодитель = ТекРодитель.ПолучитьРодителя();
		НомСтраницыПраРодителя = ТекПраРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел212НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел3НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел31" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел31НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел311" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекПраРодитель = ТекРодитель.ПолучитьРодителя();
		НомСтраницыПраРодителя = ТекПраРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел311НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел5НаСервере(НомУдаляемойСтраницы);
		СпрятатьСсылкуУдалитьСтраницу();
		
	ИначеЕсли Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел51" Тогда
		
		НомУдаляемойСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
		
		ТекРодитель = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя();
		НомСтраницыРодителя = ТекРодитель.КолонкаНомерСтраницыРазделаОтчета;
		
		УдалитьДополнительнуюСтраницуРаздел51НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя);
		СпрятатьСсылкуУдалитьСтраницу();
		
	Иначе
		
		УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
		НомерСтраницы = 1;
		Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			СтраницаРаздела.КолонкаРазделыОтчета              = "Стр. " + НомерСтраницы;
			СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
			НомерСтраницы = НомерСтраницы + 1;
		КонецЦикла;
		Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
		КонецЕсли;
		Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда 
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Ложь;
				Обл.Текст = "";
			КонецЕсли;
		Иначе
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
			Если Обл <> Неопределено Тогда 
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
				Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
				Обл.Гиперссылка = Истина;
				Обл.Текст = "Удалить страницу";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ОтрисоватьЗначкиУдаленияСтрок(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел2НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел2 = ДеревоДанныхРаздел2.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел2, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел2.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница2.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел2", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел21НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел21 = ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел21, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанныхРаздел2.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница21.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел21", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел212НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел2 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]);
	
	КолСтраницРаздел212 = ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел212, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	ДеревоДанныхРаздел2.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел2"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел2, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел2 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел2.КолонкаРазделыОтчетаСокрНаим = "Раздел2" Тогда
			Для каждого НайденнаяСтраница2 Из НайденныйРаздел2.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница2.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела2 = НайденнаяСтраница2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница21 Из ТекСтраницаРаздела2.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница21.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела21 = НайденнаяСтраница21;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница212 Из ТекСтраницаРаздела21.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница212.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница212.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел212", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел3НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел3 = ДеревоДанныхРаздел3.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел3, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел3.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница3.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел3", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел31НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел31 = ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел31, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел3.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница31.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел31", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел311НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя, НомСтраницыПраРодителя)
	
	ДеревоДанныхРаздел3 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	КолСтраницРаздел311 = ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел311, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 2.
	ДеревоДанныхРаздел3.Строки[НомСтраницыПраРодителя - 1].Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел3, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел3 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел3.КолонкаРазделыОтчетаСокрНаим = "Раздел3" Тогда
			Для каждого НайденнаяСтраница3 Из НайденныйРаздел3.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница3.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПраРодителя Тогда
					ТекСтраницаРаздела3 = НайденнаяСтраница3;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница31 Из ТекСтраницаРаздела3.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница31.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
			ТекСтраницаРаздела31 = НайденнаяСтраница31;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница311 Из ТекСтраницаРаздела31.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница311.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница311.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыПраРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел311", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел311");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел5НаСервере(НомУдаляемойСтраницы)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	КолСтраницРаздел5 = ДеревоДанныхРаздел5.Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел5, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 0.
	ДеревоДанныхРаздел5.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница5.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел5", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтраницуРаздел51НаСервере(НомУдаляемойСтраницы, НомСтраницыРодителя)
	
	ДеревоДанныхРаздел5 = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]);
	
	КолСтраницРаздел51 = ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Количество();
	
	НомПолучаемойСтраницы = ?(НомУдаляемойСтраницы = КолСтраницРаздел51, НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Ур. 1.
	ДеревоДанныхРаздел5.Строки[НомСтраницыРодителя - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел5"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздел5, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел5 Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел5.КолонкаРазделыОтчетаСокрНаим = "Раздел5" Тогда
			Для каждого НайденнаяСтраница5 Из НайденныйРаздел5.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница5.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыРодителя Тогда
					ТекСтраницаРаздела5 = НайденнаяСтраница5;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница51 Из ТекСтраницаРаздела5.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница51.КолонкаНомерСтраницыРазделаОтчета = НомПолучаемойСтраницы Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница51.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомСтраницыРодителя);
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(НомПолучаемойСтраницы);
	
	Модифицированность = Истина;
	
	// Вывод страницы.
	ВывестиМакетВТаблДокНаСервере("Раздел51", , СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере("Раздел51");
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Если (СтрНайти(ТабличныйДокумент.ТекущаяОбласть.Имя, "ДобавитьСтроку") > 0
		И СтрНайти(ТабличныйДокумент.ТекущаяОбласть.Имя, "73") > 0)
		ИЛИ Лев(ТабличныйДокумент.ТекущаяОбласть.Имя, 11) = "П0007300001" Тогда
		Если П0007300001.Количество() = 36 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Количество строк 170 - 220 раздела 7.3 не должно превышать 36.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуНаСервере(КолонкаРазделыОтчетаСокрНаим)
	
	ВставитьДополнительнуюСтроку(ЭтаФорма, КолонкаРазделыОтчетаСокрНаим);
	СохранитьДанныеРаздела(КолонкаРазделыОтчетаСокрНаим, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];
	
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДополнительнуюСтрокуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере(ТекущаяСтраница)
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
	
	УдалитьДополнительнуюСтроку(ЭтаФорма, , , ТекущаяСтраница);
	СохранитьДанныеРаздела(ТекущаяСтраница, Ложь, Ложь);
	
	СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
	
	Расчет(ЭтаФорма, ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуВЯчейкахНаКлиенте() Экспорт
	
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "")
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы Или Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИмяЯчейки = Неопределено Тогда

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		Если ВариантЗаполнения = 4 Тогда
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
		КонецЕсли;

		Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;

	Иначе

		ТаблицаВариантыЗаполнения = ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя     = Строка.КодПоказателя;
			ВариантЗаполнения = Строка.ВариантЗаполнения;
			Комментарий       = Строка.Комментарий;
			КодПоказателяПоСтруктуре = Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;
			
			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл
				
				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=");
				КонецЕсли;
				
				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;
				
				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);
				
				Если ВариантЗаполнения = 4 Тогда
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
				КонецЕсли;
				
				Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				
			КонецЦикла;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСДвухмернымШтрихкодомPDF417(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФорму(ЭтаФорма, Команда.Имя);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML();
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ТекущаяСтраница)
	
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.'");
		
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;
	
	// Исходное количество строк группы.
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	// Определяем последнюю строку многострочной группы.
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=");
	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=");
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойЯчейки + "_" + КолСтрокСтр;
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + КолСтрокСтр1;
	
	// Область первой ячейки последней строки многострочного раздела.
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// Номера строк исходной области.
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;
	
	// Номера строк вставляемой области.
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	РегламентированнаяОтчетностьВызовСервера.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	
	Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
	
	СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
	
	Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
		
		ИмяКолонки = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
		
		// Переопределяем имена вставленной области.
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// Определяем границы ячейки исходной области.
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено).
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// Назначаем имена областей для удаления строк.
			Если НомерГрафы = 1 Тогда
				НовОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейки.Верх, 2, ОбластьЯчейки.Верх, 2);
				НовОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяНовОбластиЯчейки;
				ИсхОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьЯчейкиИсходнойОбласти.Верх, 2, ОбластьЯчейкиИсходнойОбласти.Верх, 2);
				ИсхОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + ИмяОбластиЯчейки;
			КонецЕсли;
			
			// Очищаем значения ячеек вставленной области.
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			Иначе
				// Порядековый номер последней строки перед вставкой.
				ИсходныйНомер        = Число("0" + ОбластьЯчейки.Текст);
				НовыйПорядковыйНомер = ИсходныйНомер + 1;
				
				ОбластьЯчейки.Текст  = ? (НЕ НовыйПорядковыйНомер > МаксимальноеКоличествоСтрокГруппы, Строка(НовыйПорядковыйНомер), "");
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// Установим фокус на поле табличного документа.
	Форма.ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	
	// Добавляем в структуру многострочной группы новую строку.
	СтруктураГруппы.Добавить();
	
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы51 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("П000510000104_" + Формат(СтруктураГруппы.Количество(), "ЧГ="));
		Если Обл <> Неопределено Тогда
			Обл.Значение = "-";
		КонецЕсли;
	КонецЕсли;
	
	Инд = 0;
	Пока Истина Цикл 
		Инд = Инд + 1;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_" + Формат(Инд, "ЧГ="));
		Если Обл = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЦикла;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоТабличномуПолю(Форма, ИмяТекущейСтраницы) Экспорт
	
	Перем ИдГруппы;

	Если ИмяТекущейСтраницы = "Раздел1" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел21" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы211;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел212" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы212;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел311" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы311;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел4" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел51" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы51;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел6" Тогда
		ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы62;
	ИначеЕсли ИмяТекущейСтраницы = "Раздел7" Тогда
		ИмяГруппы = РазделТекущейОбласти(Форма, Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть);
	КонецЕсли;
	
	Возврат ИмяГруппы;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя)

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь)

	#Если НаКлиенте Тогда
		Возврат РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#Иначе
		Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяСтраницыПанели, ПолучитьЭталонную);
	#КонецЕсли
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, ТекущаяСтраница) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
	
	// Сначала выполним проверку на активную страницу панели формы,
	// которая содержит многострочный раздел.
	#Если НаКлиенте Тогда
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ТекущаяСтраница);
	#Иначе
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ТекущаяСтраница);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	ТекущаяОбласть = Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;
	
	ИмяГруппы = РазделТекущейОбласти(Форма, ТекущаяОбласть);
	
	// предварительно обновим структуру многострочных разделов
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, СтрНайти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля
	СтруктураГруппы = Форма[СтруктураГруппы];
	
	ИмяПервойЯчейки = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы][0].Значение;
	
	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки= ИмяПервойЯчейки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=");
		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];
		
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		// номера строк удаляемой области
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		РегламентированнаяОтчетностьВызовСервера.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
				
		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;
		
		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда
			
			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл
				
				ТекСтрока = СтруктураГруппы[НСтр-1];
				
				НСтрСтр = Формат(НСтр, "ЧГ=");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=");
				
				СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
				
				Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
					
					КолонкаИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если НомерГрафы = 1 Тогда
							ОбластьЯчейкиУдалитьСтроку = ТекТабличноеПоле.Область(ОбластьСдвинутойЯчейки.Верх, 2, ОбластьСдвинутойЯчейки.Верх, 2);
							ОбластьЯчейкиУдалитьСтроку.Имя = "УдалитьСтроку" + НовоеИмяСдвинутойЯчейки;
						КонецЕсли;
						
						Если ОбластьСдвинутойЯчейки.СодержитЗначение <> Истина Тогда
							// обновляем порядковый номер строки
							
							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер + ".";
							
							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк
		
		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);
		
		ДобавляемаяСтрока = СтруктураГруппы.Добавить();
		
		СписокИменКолонокРаздела = Форма.мСтруктураИменаКолонокРазделов[ИмяГруппы];
		
		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=");
			
			Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
				
				КолонкаТаблицыИмя = СписокИменКолонокРаздела.Получить(НомерГрафы - 1).Значение;
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицы;
					ОбластьЯчейкиТаблицы     = ТекТабличноеПоле.Области[ИмяЯчейки];
					
					Если ОбластьЯчейкиТаблицы.СодержитЗначение <> Истина Тогда
						
						ПервыйНомерВГруппе = 1;
						
						// обновляем порядковый номер строки
						НовыйПорядковыйНомер = Строка(ПервыйНомерВГруппе + НомерСтрокиВТаблице);
						
						СтрокаТаблицы[КолонкаТаблицыИмя] = НовыйПорядковыйНомер;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;
		
	Расчет(Форма, ТекущаяСтраница);
	
	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае
	
	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	
	ИмяТекущейОбласти = ИмяПервойЯчейки + "_" + Формат(НомТекущейСтроки, "ЧГ=");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
	
	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
	Если СтруктураГруппы.Количество() = 1 Тогда
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "01_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		Обл = ТекТабличноеПоле.Области.Найти("УдалитьСтроку" + ИмяГруппы + "10_1");
		Если Обл <> Неопределено Тогда 
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
	КонецЕсли;
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
			
			СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницы;
			СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Истина;
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина, Ложь);
		
		СтруктураРеквизитовФормы.ОтключитьВыполнениеРасчета = Ложь;
		
	КонецЕсли;
	
	Если ИмяСтраницы = "Титульный" Тогда
		Если Элементы.Найти("ДатаПодписи") = Неопределено Тогда
			Область = ТабличныйДокумент.Области.Найти("ДатаПодписи");
			Если НЕ Область = Неопределено Тогда
				Если ТипЗнч(Область.Значение) = Тип("Строка") Тогда
					ДатаПодписи = Лев(СтрЗаменить(Область.Значение, ".", ""), 8);
				ИначеЕсли ТипЗнч(Область.Значение) = Тип("Дата") Тогда
					Если ЗначениеЗаполнено(Область.Значение) Тогда
						ДатаПодписи = Лев(СтрЗаменить(Формат(Область.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
					Иначе
						ДатаПодписи = "        ";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если СтрНайти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
		СформироватьДеревоРазделовОтчетаНаКлиенте();
		
	ИначеЕсли СтрНайти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНС()
	
	КодИМНС = СокрЛП(ТабличныйДокумент.Области.НалоговыйОрган.Значение);
	КПП     = СокрЛП(ТабличныйДокумент.Области.КПП.Значение); 
	ЗначенияДляОтбора = Новый Массив;
	ЗначенияДляОтбора.Добавить(Новый Структура("КодНО, КПП", КодИМНС, КПП));
						   
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыФормы.Вставить("ЗначенияДляОтбора", ЗначенияДляОтбора);
						   
	ФормаВыбораНалоговогоОргана = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ФормаВыбораНалоговогоОргана", ПараметрыФормы, ЭтаФорма);
	
	Если ФормаВыбораНалоговогоОргана.ТаблицаНО.Количество() <> 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораИФНСЗавершение", ЭтотОбъект);
		ФормаВыбораНалоговогоОргана.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораНалоговогоОргана.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораНалоговогоОргана.Открыть();
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Код налогового органа необходимо задать в справочнике ""Организации"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрации в налоговом органе"".'");
		Сообщение.Сообщить();
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
			УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		КонецЕсли;

	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораИФНСЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		
		ВыбранныйКодНО = РезультатВыбора.КодНО;
		ДлинаКодаНО = СтрДлина(ВыбранныйКодНО);
		
		Для Инд = ДлинаКодаНО + 1 По 4 Цикл
			ВыбранныйКодНО = "0" + ВыбранныйКодНО;
		КонецЦикла;
		
		ТабличныйДокумент.Области["НалоговыйОрган"].Значение = ВыбранныйКодНО;
		
		ТабличныйДокумент.Области["КПП"].Значение = РезультатВыбора.КПП;
		
		ЗаполнитьСведенияОПодписантах();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = "НалоговыйОрган" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОбработкаВыбораИФНС();
		
	Иначе
		
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ДатаПодписиПриИзмененииНаСервере();
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда 
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		РегламентированнаяОтчетностьКлиентСервер.УстановитьЗначениеОКВЭД(ДатаПодписи,
																	 СтруктураРеквизитовФормы,
																	 ТабличныйДокумент.Области.ОКВЭД.Значение);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	Если СтрНайти(Область.Имя, "ОКВЭД") > 0 Тогда
		Если НЕ ПустаяСтрока(ЗначПоказателя) И НЕ РегламентированнаяОтчетностьКлиентСервер.ОКВЭДСоответствуетТребованиям(ЗначПоказателя) Тогда
			ТекстСообщения = "На титульном листе задано некорректное значение кода вида деятельности по ОКВЭД!" + Символы.ПС
						   + "Допустимы значения, соответствующие следующим шаблонам:" + Символы.ПС
						   + """XX"", ""XX.X"", ""XX.XX"", ""XX.XX.X"", ""XX.XX.XX"" (X - любая цифра).";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='" + ТекстСообщения + "'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000700012003" Тогда
		Если ЗначПоказателя > 0.3 Тогда
			Область.Значение = 0.3;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Значение коэффициента Кт должно быть меньше или равно 0,3'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000400001003" Тогда
		Если СокрЛП(ЗначПоказателя) = "03401" Тогда
			ТабличныйДокумент.Области["П000400002003"].Значение = "00000000000000000000";
		Иначе
			Если ТабличныйДокумент.Области["П000400002003"].Значение = "00000000000000000000" Тогда
				ТабличныйДокумент.Области["П000400002003"].Значение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000500001003" Тогда
		Если СокрЛП(ЗначПоказателя) = "03400" Тогда
			ТабличныйДокумент.Области["П000500002003"].Значение = "00000000000000000000";
		Иначе
			Если ТабличныйДокумент.Области["П000500002003"].Значение = "00000000000000000000" Тогда
				ТабличныйДокумент.Области["П000500002003"].Значение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяПоказателя = "П000400007003"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000730000101"
		ИЛИ Лев(ИмяПоказателя, 13) = "П000730000106" Тогда
		Если ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Если Год(ЗначПоказателя) > 2099 Тогда
				Область.Значение = '20991231';
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Значение месяца и года должно быть в интервале 01.1900 - 12.2099.'");
				Сообщение.Сообщить();
			ИначеЕсли Год(ЗначПоказателя) < 1900 Тогда
				Область.Значение = '19000101';
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Значение месяца и года должно быть в интервале 01.1900 - 12.2099.'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНачинаетсяС(ИмяПоказателя, "П000510000104")
		ИЛИ ИмяПоказателя = "П000700005003" Тогда
		ЗначПоказателя = СокрЛП(ЗначПоказателя);
		Если СтрДлина(ЗначПоказателя) = 2 Тогда
			Если Лев(ЗначПоказателя, 1) = "," Тогда
				ЗначПоказателя = "0" + ЗначПоказателя;
			ИначеЕсли Прав(ЗначПоказателя, 1) = "," Тогда
				ЗначПоказателя = ЗначПоказателя + "0";
			КонецЕсли;
			Область.Значение = ЗначПоказателя;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЗначПоказателя) Тогда
			Область.Значение = "-";
		ИначеЕсли ЗначПоказателя = "0" Тогда
			Область.Значение = "0,0";
		ИначеЕсли ЗначПоказателя = "1" Тогда
			Область.Значение = "1,0";
		Иначе
			ВозможныеКтд = Новый Массив;
			ВозможныеКтд.Добавить("-");
			ВозможныеКтд.Добавить("0,0");
			ВозможныеКтд.Добавить("0,2");
			ВозможныеКтд.Добавить("0,4");
			ВозможныеКтд.Добавить("0,6");
			ВозможныеКтд.Добавить("0,8");
			ВозможныеКтд.Добавить("1,0");
			Если ВозможныеКтд.Найти(ЗначПоказателя) = Неопределено Тогда
				Область.Значение = "-";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Введено некорректное значение коэффициента Ктд. Возможны значения: 0; 0,2; 0,4; 0,6; 0,8; 1. Значение коэффициента Ктд очищено.'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Титульный" Тогда
		
		ЗаполнитьПериодОтчета(ЭтаФорма);
		
	Иначе
		
		Если Область.Имя = "П000300001003" Тогда
			Если СокрЛП(Область.Значение) = "03300" Тогда
				ОчиститьКкмВПодчиненныхРазделах31();
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяРаздела = "Раздел311"
		 ИЛИ ИмяРаздела = "Раздел5"
		 ИЛИ ИмяРаздела = "Раздел51" Тогда
			РасчетНаСервере(ИмяРаздела, ИмяОбласти);
		Иначе
			РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПодписиПриИзмененииНаСервере()
	
	СформироватьСпискиВыбора();
	ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьКкмВПодчиненныхРазделах31()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	ТекВетка3 = ДеревоДанныхРаздела.Строки[(СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1)];
	Для каждого Ветка31 Из ТекВетка3.Строки Цикл
		Ветка31.Данные.Вставить("П000300012003", 0);
	КонецЦикла;
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]
		= ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНомераСтраницРазделов3СКодомВидаДПИ03300()
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел3"]);
	
	СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03300.Очистить();
	
	Для каждого Ветка3 Из ДеревоДанныхРаздела.Строки Цикл
		Если СокрЛП(Ветка3.Данные["П000300001003"]) = "03300" Тогда
			СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03300.Добавить(
				ДеревоДанныхРаздела.Строки.Индекс(Ветка3) + 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРаздел1.Очистить();
	СтруктураДанныхРаздел6.Очистить();
	
	ТаблицаСтраницыРаздел4.Очистить();
	ТаблицаСтраницыРаздел7.Очистить();
	
	ИнициализацияМногоуровневыхРазделов();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	ИначеЕсли СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела <> "Титульный" Тогда
		ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел2"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел21"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел212"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел3"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел31"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел311"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел5"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел51" Тогда
		ИмяТекРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1,
			СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Титульный" Тогда
		
		Если НЕ Форма.СтруктураРеквизитовФормы.ИП Тогда
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			Если ПустаяСтрока(ОпределяющаяОбласть.Значение)
			 ИЛИ ОпределяющаяОбласть.Значение = "0" Тогда
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			Иначе
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			КонецЕсли;
			
			ОпределяющаяОбласть = Форма.ТабличныйДокумент.Области.КодФормыРеорганизации;
			ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области.НаимОрг;
			Если ЗначениеЗаполнено(ОпределяющаяОбласть.Значение)
				И ОпределяющаяОбласть.Значение <> "0" Тогда
				РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
			Иначе
				ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
				Форма.ТабличныйДокумент.Области.НаимОрг.Значение = Форма.СтруктураРеквизитовФормы.НачальноеЗначениеНаимОрганизации;
			КонецЕсли;
			
		Иначе
			ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области.ИННРеорганизованнойОрганизации;
			ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области.КППРеорганизованнойОрганизации;
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел21" Тогда
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200015003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000200012003"];
		Если Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета >= '2016-01-01' Тогда
			ОбрабатываемаяОбласть.Формат = "ЧН=0";
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел212" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области["П000200023003"];
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000200024003"];
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000200025003"];
		Если ОпределяющаяОбласть.Значение = 1 Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел3" Тогда
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300004003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000300001003"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300005003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "03200" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел31" Тогда
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000300012003"];
		Если Форма.СтруктураРеквизитовФормы.НомераСтраницРазделов3СКодомВидаДПИ03300.Найти(
			Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0]) <> Неопределено Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел4" Тогда
		
		ОпределяющаяОбласть    = Форма.ТабличныйДокумент.Области["П000400001003"];
		ОбрабатываемаяОбласть1 = Форма.ТабличныйДокумент.Области["П000400002003"];
		ОбрабатываемаяОбласть2 = Форма.ТабличныйДокумент.Области["П000400013003"];
		ОбрабатываемаяОбласть3 = Форма.ТабличныйДокумент.Области["П000400014003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "03401" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1, Ложь);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть1);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть2);
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть3);
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницыПанели = "Раздел5" Тогда
		
		ОпределяющаяОбласть   = Форма.ТабличныйДокумент.Области["П000500001003"];
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500002003"];
		Если СокрЛП(ОпределяющаяОбласть.Значение) = "03400" Тогда
			ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, Ложь);
		Иначе
			РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть);
		КонецЕсли;
		
		ОбрабатываемаяОбласть = Форма.ТабличныйДокумент.Области["П000500014003"];
		Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			ОбрабатываемаяОбласть.Защита   = Ложь;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
		Иначе
			ОбрабатываемаяОбласть.Защита   = Истина;
			ОбрабатываемаяОбласть.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗапретитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть, ОчищатьЗначение = Истина)
	
	ЦветНедоступнойОбласти = Форма.мСтруктураЦветовРаскраски["_5"];
	
	ОбрабатываемаяОбласть.Защита   = Истина;
	ОбрабатываемаяОбласть.ЦветФона = ЦветНедоступнойОбласти;
	
	Если ОчищатьЗначение Тогда
		ТипЗначенияОбласти = ТипЗнч(ОбрабатываемаяОбласть.Значение);
		Если ТипЗначенияОбласти = Тип("Число") Тогда
			ОбрабатываемаяОбласть.Значение = 0;
		ИначеЕсли ТипЗначенияОбласти = Тип("Строка") Тогда
			ОбрабатываемаяОбласть.Значение = "";
		Иначе
			ОбрабатываемаяОбласть.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РазрешитьВводДанныхВОбласть(Форма, ОбрабатываемаяОбласть)
	
	ЦветОбластиРучногоВвода = Форма.мСтруктураЦветовРаскраски["_0"];
	
	ОбрабатываемаяОбласть.Защита   = Ложь;
	ОбрабатываемаяОбласть.ЦветФона = ЦветОбластиРучногоВвода;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФНС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ФНС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделТекущейОбласти(Форма, ТекущаяОбласть, ДлИмениОбласти = 13) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяТекущейОбласти = СтрЗаменить(ТекущаяОбласть.Имя, "ДобавитьСтрокуЗначок", "ДобавитьСтроку");
	Если ИмяТекущейОбласти = "ДобавитьСтроку1" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы1;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку211" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы211;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку212" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы212;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку311" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы311;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку4" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы4;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку51" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы51;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку62" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы62;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку71" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы71;
	ИначеЕсли ИмяТекущейОбласти = "ДобавитьСтроку73" Тогда
		Возврат Форма.СтруктураРеквизитовФормы.мИдГруппы73;
	ИначеЕсли СтрНайти(ИмяТекущейОбласти, "УдалитьСтроку") > 0 Тогда
		ИмяТекущейОбласти = СтрЗаменить(ИмяТекущейОбласти, "УдалитьСтроку", "");
	КонецЕсли;

	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, ДлИмениОбласти);
	
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		
		СтруктураГруппы = Форма[ЭлементСтруктуры.Значение];

		Если СтруктураГруппы[0].Свойство(ИмяАктивногоРаздела) Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = РазделТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда 
		ТестовоеИмя = ИмяГруппы + "01_" + Формат(мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы] + 1, "ЧГ=");
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0 
			И ТабличныйДокумент.Области.Найти(ТестовоеИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ СООТНООШЕНИЙ В ДЕКЛАРАЦИИ
///////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Проверить(Команда)
	
	РегламентированнаяОтчетностьКлиент.ПроверитьКонтрольныеСоотношения(ЭтаФорма, ОбработкаКС);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьКонтрольныеСоотношенияВОтчете() Экспорт
	
	СформироватьСтруктуруПоказателей(); // старая версия метода
	//ИзвлечьСохраненныеПоказателиОтчета(); // 1 из 2 обязательно присутствует в рег.отчете с выгрузкой
	
	СтруктураРеквизитовФормы.ТекстДляЗаголовочнойЧасти =
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Новый Структура);
	
	Если СписокРасшифровкиПоказателей = Неопределено Тогда
		СписокРасшифровкиПоказателей = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиПоказателей();
		
	Иначе
		СписокРасшифровкиПоказателей.Очистить();
		
	КонецЕсли;
	
	Если СписокРасшифровкиформулы = Неопределено Тогда
		СписокРасшифровкиформулы = РегламентированнаяОтчетность.СоздатьСписокРасшифровкиформулы();
		
	Иначе
		СписокРасшифровкиформулы.Очистить();
		
	КонецЕсли;
	
	СчетчикФормулДляРасшифровок = 0;
	
	ПроверитьКС_1_1(СтруктураРезультата);
	ПроверитьКС_1_2(СтруктураРезультата);
	ПроверитьКС_2_1(СтруктураРезультата);
	ПроверитьКС_2_2(СтруктураРезультата);
	ПроверитьКС_2_3(СтруктураРезультата);
	ПроверитьКС_2_4(СтруктураРезультата);
	ПроверитьКС_2_5(СтруктураРезультата);
	ПроверитьКС_2_6(СтруктураРезультата);
	ПроверитьКС_2_7(СтруктураРезультата);
	ПроверитьКС_2_8(СтруктураРезультата);
	ПроверитьКС_2_9(СтруктураРезультата);
	ПроверитьКС_2_10(СтруктураРезультата);
	ПроверитьКС_2_12(СтруктураРезультата);
	ПроверитьКС_2_13(СтруктураРезультата);
	ПроверитьКС_2_14(СтруктураРезультата);
	ПроверитьКС_2_15(СтруктураРезультата);
	ПроверитьКС_2_16(СтруктураРезультата);
	ПроверитьКС_2_17(СтруктураРезультата);
	ПроверитьКС_2_18(СтруктураРезультата);
	ПроверитьКС_2_19(СтруктураРезультата);
	ПроверитьКС_3_1(СтруктураРезультата);
	ПроверитьКС_3_2(СтруктураРезультата);
	ПроверитьКС_3_3(СтруктураРезультата);
	ПроверитьКС_3_4(СтруктураРезультата);
	ПроверитьКС_3_5(СтруктураРезультата);
	ПроверитьКС_3_6(СтруктураРезультата);
	ПроверитьКС_3_7(СтруктураРезультата);
	ПроверитьКС_3_8(СтруктураРезультата);
	ПроверитьКС_3_9(СтруктураРезультата);
	ПроверитьКС_3_10(СтруктураРезультата);
	ПроверитьКС_3_11(СтруктураРезультата);
	ПроверитьКС_3_12(СтруктураРезультата);
	ПроверитьКС_3_13(СтруктураРезультата);
	ПроверитьКС_3_14(СтруктураРезультата);
	ПроверитьКС_3_15(СтруктураРезультата);
	ПроверитьКС_3_16(СтруктураРезультата);
	ПроверитьКС_4_1(СтруктураРезультата);
	ПроверитьКС_4_2(СтруктураРезультата);
	ПроверитьКС_4_3(СтруктураРезультата);
	ПроверитьКС_4_4(СтруктураРезультата);
	ПроверитьКС_4_5(СтруктураРезультата);
	ПроверитьКС_4_6(СтруктураРезультата);
	ПроверитьКС_4_7(СтруктураРезультата);
	ПроверитьКС_4_8(СтруктураРезультата);
	ПроверитьКС_5_1(СтруктураРезультата);
	ПроверитьКС_5_2(СтруктураРезультата);
	ПроверитьКС_5_3(СтруктураРезультата);
	ПроверитьКС_5_4(СтруктураРезультата);
	ПроверитьКС_5_5(СтруктураРезультата);
	ПроверитьКС_5_6(СтруктураРезультата);
	ПроверитьКС_5_7(СтруктураРезультата);
	ПроверитьКС_5_8(СтруктураРезультата);
	ПроверитьКС_5_9(СтруктураРезультата);
	ПроверитьКС_6_1(СтруктураРезультата);
	ПроверитьКС_6_2(СтруктураРезультата);
	ПроверитьКС_6_3(СтруктураРезультата);
	ПроверитьКС_6_4(СтруктураРезультата);
	ПроверитьКС_6_5(СтруктураРезультата);
	ПроверитьКС_6_6(СтруктураРезультата);
	ПроверитьКС_7_1(СтруктураРезультата);
	ПроверитьКС_7_2(СтруктураРезультата);
	ПроверитьКС_7_3(СтруктураРезультата);
	ПроверитьКС_7_4(СтруктураРезультата);
	ПроверитьКС_7_5(СтруктураРезультата);
	ПроверитьКС_7_6(СтруктураРезультата);
	ПроверитьКС_7_7(СтруктураРезультата);
	ПроверитьКС_7_8(СтруктураРезультата);
	ПроверитьКС_7_9(СтруктураРезультата);
	ПроверитьКС_7_10(СтруктураРезультата);
	ПроверитьКС_7_11(СтруктураРезультата);
	
	Если СписокРасшифровкиПоказателей.Количество() > 0 Тогда 
		СтруктураРезультата.Вставить("СписокРасшифровкиПоказателей", 
			ПоместитьВоВременноеХранилище(СписокРасшифровкиПоказателей, Новый УникальныйИдентификатор));
			
	КонецЕсли;
	
	Если СписокРасшифровкиформулы.Количество() > 0 Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СписокРасшифровкиформулы, Новый УникальныйИдентификатор);
		СтруктураРезультата.Вставить("СписокРасшифровкиформулы", АдресВоВременномХранилище);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура ПроверитьКС_1_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.1)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 010 Раздела 1 должен соответствовать КБК, указанному в строке 020 Раздела 2 или в строке 020 Раздела 3 или в строке 020 раздела 4 или в строке 020 Раздела 5 или в строке 010 Раздела 7'");
	ОписаниеОшибки  = НСтр("ru='Необходимо убедиться в правильности заполнения КБК в Разделе 2, 3, 4, 5 и Разделе 7'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	Р2Ст20Гр03 = ПоказательПоСтроке("Р2Ст20Гр03");
	Р3Ст20Гр03 = ПоказательПоСтроке("Р3Ст20Гр03");
	Р4Ст20Гр03 = ПоказательПоСтроке("Р4Ст20Гр03");
	Р5Ст20Гр03 = ПоказательПоСтроке("Р5Ст20Гр03");
	Р7Ст10Гр03 = ПоказательПоСтроке("Р7Ст10Гр03");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	Раздел4 = мДанныеОтчета.Раздел4;
	Раздел5 = ДанныеИзДереваРаздела("Раздел5");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
		
		Если НЕ ЗначениеЗаполнено(Р1Ст1Гр01.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", );
		
		Для Каждого СтраницаРаздела Из Раздел2 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст20Гр03);
			
			Если Р1Ст1Гр01.Значение = Р2Ст20Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р2Ст20Гр03, Р2Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст20Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаРаздела Из Раздел3 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст20Гр03);
			
			Если Р1Ст1Гр01.Значение = Р3Ст20Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р3Ст20Гр03, Р3Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст20Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаР4 Из Раздел4 Цикл
			ДанныеСтраницыР4 = СтраницаР4.Данные[0].Значение;
			НомерСтраницыР4Стр = СтрокаЧГ0(Раздел4.Индекс(СтраницаР4) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР4, Р4Ст20Гр03);
			
			Если Р1Ст1Гр01.Значение = Р4Ст20Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р4Ст20Гр03, "Раздел4", НомерСтраницыР4Стр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаРаздела Из Раздел5 Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р5Ст20Гр03);
			
			Если Р1Ст1Гр01.Значение = Р5Ст20Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р5Ст20Гр03, Р5Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р5Ст20Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаР7 Из Раздел7 Цикл
			ДанныеСтраницыР7 = СтраницаР7.Данные[0].Значение;
			НомерСтраницыР7Стр = СтрокаЧГ0(Раздел7.Индекс(СтраницаР7) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР7, Р7Ст10Гр03);
			
			Если Р1Ст1Гр01.Значение = Р7Ст10Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р7Ст10Гр03, "Раздел7", НомерСтраницыР7Стр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Р1Ст1Гр01.Значение = Р2Ст20Гр03.Значение
			ИЛИ Р1Ст1Гр01.Значение = Р3Ст20Гр03.Значение
			ИЛИ Р1Ст1Гр01.Значение = Р4Ст20Гр03.Значение
			ИЛИ Р1Ст1Гр01.Значение = Р5Ст20Гр03.Значение
			ИЛИ Р1Ст1Гр01.Значение = Р7Ст10Гр03.Значение Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		Расшифровка = ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р2Ст20Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р3Ст20Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р4Ст20Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р5Ст20Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р7Ст10Гр03.ЗначениеСтр);
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_1_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 1 (КС 1.2)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО в строке 020 Раздела 1 должен соответствовать коду по ОКТМО, указанному в строке 040 Раздела 2.1 или в строке 080 Раздела 3.1 или в строке 040 Раздела 4 или в строке 050 раздела 5.1 или в строке 040 Раздела 7'");
	ОписаниеОшибки  = НСтр("ru='Необходимо убедиться в правильности заполнения ОКТМО в Разделе 2, 3, 4, 5 и Разделе 7'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р1Ст1Гр02 = ПоказательПоСтроке("Р1Ст1Гр02");
	Р2Ст40Гр03 = ПоказательПоСтроке("Р2Ст40Гр03");
	Р3Ст80Гр03 = ПоказательПоСтроке("Р3Ст80Гр03");
	Р4Ст40Гр03 = ПоказательПоСтроке("Р4Ст40Гр03");
	Р5Ст50Гр03 = ПоказательПоСтроке("Р5Ст50Гр03");
	Р7Ст40Гр03 = ПоказательПоСтроке("Р7Ст40Гр03");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	Раздел4 = мДанныеОтчета.Раздел4;
	Раздел5 = ДанныеИзДереваРаздела("Раздел5");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр02, Инд);
		
		Если НЕ ЗначениеЗаполнено(Р1Ст1Гр02.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р1Ст1Гр02, "Раздел1", );
		
		Для Каждого Страница Из Раздел2 Цикл
			ДанныеСтраницы = Страница.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст40Гр03);
			
			Если Р1Ст1Гр02.Значение = Р2Ст40Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р2Ст40Гр03, Р2Ст40Гр03.Раздел, НомерСтраницыМнУ(Страница.Представление, Р2Ст40Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Страница Из Раздел3 Цикл
			ДанныеСтраницы = Страница.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст80Гр03);
			
			Если Р1Ст1Гр02.Значение = Р3Ст80Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р3Ст80Гр03, Р3Ст80Гр03.Раздел, НомерСтраницыМнУ(Страница.Представление, Р3Ст80Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаР4 Из Раздел4 Цикл
			ДанныеСтраницыР4 = СтраницаР4.Данные[0].Значение;
			НомерСтраницыР4Стр = СтрокаЧГ0(Раздел4.Индекс(СтраницаР4) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР4, Р4Ст40Гр03);
			
			Если Р1Ст1Гр02.Значение = Р4Ст40Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р4Ст40Гр03, "Раздел4", НомерСтраницыР4Стр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Страница Из Раздел5 Цикл
			ДанныеСтраницы = Страница.Данные;
			НомерСтраницыСтр = "";
			Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
				НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
			Иначе
				НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(Страница) + 1);
			КонецЕсли;
			
			ВставитьЗначениеПоказателя(ДанныеСтраницы, Р5Ст50Гр03);
			
			Если Р1Ст1Гр02.Значение = Р5Ст50Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р5Ст50Гр03, Р5Ст50Гр03.Раздел, НомерСтраницыМнУ(Страница.Представление, Р5Ст50Гр03.ПорядокСтраницы));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтраницаР7 Из Раздел7 Цикл
			ДанныеСтраницыР7 = СтраницаР7.Данные[0].Значение;
			НомерСтраницыР7Стр = СтрокаЧГ0(Раздел7.Индекс(СтраницаР7) + 1);
			
			ВставитьЗначениеПоказателя(ДанныеСтраницыР7, Р7Ст40Гр03);
			
			Если Р1Ст1Гр02.Значение = Р7Ст40Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р7Ст40Гр03, "Раздел7", НомерСтраницыР7Стр);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Р1Ст1Гр02.Значение = Р2Ст40Гр03.Значение
			ИЛИ Р1Ст1Гр02.Значение = Р3Ст80Гр03.Значение
			ИЛИ Р1Ст1Гр02.Значение = Р4Ст40Гр03.Значение
			ИЛИ Р1Ст1Гр02.Значение = Р5Ст50Гр03.Значение
			ИЛИ Р1Ст1Гр02.Значение = Р7Ст40Гр03.Значение Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		Расшифровка = ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р2Ст40Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р3Ст80Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р4Ст40Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р5Ст50Гр03.ЗначениеСтр)
			+ " ИЛИ " + ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = " + ПредставлениеДляРасшифровки(Р7Ст40Гр03.ЗначениеСтр);
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.1)'");
	ОписаниеКС      = НСтр("ru='Код вида добытого полезного ископаемого в строке 010 Раздела 2 должен быть равен ""03100""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида полезных ископаемых в Разделе 2'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницыР2 = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницыР2.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницыР2.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст10Гр03, Р2Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст10Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст10Гр03.Значение, "03100");
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.2)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 2 должен быть равен КБК, указанному в строке 010 Раздела 1'");
	
	ОписаниеОшибки  = НСтр("ru='Необходимо проверить правильность указания КБК в Разделе 2'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р2Ст20Гр03 = ПоказательПоСтроке("Р2Ст20Гр03");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницыР2 = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницыР2.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницыР2.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст20Гр03, Р2Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст20Гр03.ПорядокСтраницы));
		
		СоотношениеВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			
			Если Р2Ст20Гр03.Значение = Р1Ст1Гр01.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст1Гр01, Р1Ст1Гр01.Раздел, );
				СоотношениеВыполнено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СоотношениеВыполнено Тогда
			Расшифровка = Р2Ст20Гр03.ЗначениеСтр + " = " + Р1Ст1Гр01.ЗначениеСтр;
			
		Иначе
			Расшифровка = Р2Ст20Гр03.ЗначениеСтр + " = [нет соответствующего КБК]";
			
		КонецЕсли;
		
		Если СоотношениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.3)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 2 должен быть равен ""18210701011011000110"" или ""18210701040011000110""'");
	ОписаниеОшибки  = НСтр("ru='Необходимо проверить правильность указания КБК в Разделе 2'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р2Ст20Гр03 = ПоказательПоСтроке("Р2Ст20Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницыР2 = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницыР2.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницыР2.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст20Гр03, Р2Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст20Гр03.ПорядокСтраницы));
		
		СоотношениеВыполнено = (Найти("18210701011011000110|18210701040011000110", Р2Ст20Гр03.Значение) > 0);
		
		Если СоотношениеВыполнено Тогда
			Расшифровка = Р2Ст20Гр03.ЗначениеСтр + " = 18210701011011000110 или 18210701040011000110";
		Иначе
			Расшифровка = "[...] = 18210701011011000110 или 18210701040011000110";
		КонецЕсли;
		
		Если СоотношениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.4)'");
	ОписаниеКС      = НСтр("ru='Код единицы измерения в строке 030 Раздела 2 должен быть равен ""168""'");
	ОписаниеОшибки  = НСтр("ru='Необходимо проверить правильность указания кода по ОКЕИ в Разделе 2'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р2Ст30Гр03 = ПоказательПоСтроке("Р2Ст30Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст30Гр03);
		ВнестиПоказательВРасшифровку(Р2Ст30Гр03, Р2Ст30Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст30Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст30Гр03.Значение, "168");
		Расшифровка = ПредставлениеДляРасшифровки(КС.ЛеваяЧастьСтр) + " = " + КС.ПраваяЧастьСтр;
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.5)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО в строке 040 Раздела 2.1 должен быть равен коду по ОКТМО в строке 020 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='Необходимо проверить правильность указания ОКТМО в Разделе 2.1'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р2Ст40Гр03 = ПоказательПоСтроке("Р2Ст40Гр03");
	Р1Ст1Гр02 = ПоказательПоСтроке("Р1Ст1Гр02");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст40Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст40Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		//ВставитьЗначениеПоказателя(ДанныеСтраницыР2, Р2Ст40Гр03);
		ВнестиПоказательВРасшифровку(Р2Ст40Гр03, Р2Ст40Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст40Гр03.ПорядокСтраницы));
		
		СоотношениеВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000102_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр02, Инд);
			
			Если Р2Ст40Гр03.Значение = Р1Ст1Гр02.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст1Гр02, Р1Ст1Гр02.Раздел, );
				СоотношениеВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СоотношениеВыполнено Тогда
			Расшифровка = Р2Ст40Гр03.ЗначениеСтр + " = " + Р1Ст1Гр02.ЗначениеСтр;
		Иначе
			Расшифровка = Р2Ст40Гр03.ЗначениеСтр + " = [нет соответствующего ОКТМО]";
		КонецЕсли;
		
		Если СоотношениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.6)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень выработанности запасов участка недр Кв в строке 090 Раздела 2.1 должен быть равен 0.3, если Степень выработанности запасов нефти участка недр (значение строки 100 Раздела 2.1) > 1'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кв в Разделе 2.1'");
	
	Р2Ст90Гр03 = ПоказательПоСтроке("Р2Ст90Гр03");
	Р2Ст100Гр03 = ПоказательПоСтроке("Р2Ст100Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст100Гр03);
		
		ВнестиПоказательВРасшифровку(Р2Ст90Гр03, Р2Ст90Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст90Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст100Гр03, Р2Ст100Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст100Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст90Гр03.Значение, 0.3);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст100Гр03.ЗначениеСтр + " > 1";
		
		УсловиеВыполнено = (Р2Ст100Гр03.Значение > 1);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок	= СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок	= СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок		= СтруктураРезультата.СтруктураОшибок;
	
	СоответствиеКк	= Новый Соответствие;
	СоответствиеКк.Вставить(2017, 306);
	СоответствиеКк.Вставить(2018, 357);
	СоответствиеКк.Вставить(2019, 428);
	СоответствиеКк.Вставить(2020, 428);
	
	ГодОтчета			= Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КоэффициентКк		= СоответствиеКк.Получить(ГодОтчета);
	КоэФФициентКк		= ?(ЗначениеЗаполнено(КоэФФициентКк), КоэффициентКк, 0);
	
	ТекстФормулы		= НСтр("ru='Раздел 2 (КС 2.7)'");
	ОписаниеКС			= НСтр("ru='Показатель, характеризующий особенности добычи нефти Дм в строке 060 Раздела 2.1 " 
		+ "должен быть равен произведению: строка 070 х строка 080 х (1 - строка 090 х строка 110 х 1 х строка 115 х строка 120)'");
	ОписаниеКС			= ОписаниеКС + ?(ЗначениеЗаполнено(КоэффициентКк), " - " + КоэффициентКк, "");
	ОписаниеОшибки		= НСтр("ru='Допущена ошибка при определении показателя Дм в Разделе 2.1'");
	ШаблонРасшифровки	= НСтр("ru='%1 = %2 х %3 х (1 - %4 х %5 х 1 х %6 х %7) - %8 Итог [%9]'");
	Нарушение			= НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст60Гр03 = ПоказательПоСтроке("Р2Ст60Гр03");
	Р2Ст70Гр03 = ПоказательПоСтроке("Р2Ст70Гр03");
	Р2Ст80Гр03 = ПоказательПоСтроке("Р2Ст80Гр03");
	Р2Ст90Гр03 = ПоказательПоСтроке("Р2Ст90Гр03");
	Р2Ст110Гр03 = ПоказательПоСтроке("Р2Ст110Гр03");
	Р2Ст115Гр03 = ПоказательПоСтроке("Р2Ст115Гр03");
	Р2Ст120Гр03 = ПоказательПоСтроке("Р2Ст120Гр03");
	
	МассивУникальных = Новый Массив;	
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст60Гр03.ПорядокСтраницы);
		
		Если НЕ МассивУникальных.Найти(НомерСтраницыСтр) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивУникальных.Добавить(НомерСтраницыСтр);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст115Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст120Гр03);
		
		ПоказателиНеЗаполнены = Р2Ст60Гр03.Значение + Р2Ст70Гр03.Значение + Р2Ст80Гр03.Значение + Р2Ст90Гр03.Значение 
			+ Р2Ст110Гр03.Значение + Р2Ст115Гр03.Значение + Р2Ст120Гр03.Значение = 0;
		
		Если ПоказателиНеЗаполнены Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст60Гр03	, Р2Ст60Гр03.Раздел	, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст70Гр03	, Р2Ст70Гр03.Раздел	, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст80Гр03	, Р2Ст80Гр03.Раздел	, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст90Гр03	, Р2Ст90Гр03.Раздел	, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст110Гр03, Р2Ст110Гр03.Раздел, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст115Гр03, Р2Ст115Гр03.Раздел, НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р2Ст120Гр03, Р2Ст120Гр03.Раздел, НомерСтраницыСтр);
		
		РасчетнаяСумма = Р2Ст70Гр03.Значение * Р2Ст80Гр03.Значение * (1 - Р2Ст90Гр03.Значение * Р2Ст110Гр03.Значение * 
			Р2Ст115Гр03.Значение * Р2Ст120Гр03.Значение) - КоэффициентКк;
		КС = ПоказателиКС(Р2Ст60Гр03.Значение, РасчетнаяСумма);
		Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРасшифровки, КС.ЛеваяЧасть, 
			Р2Ст70Гр03.Значение, Р2Ст80Гр03.Значение, Р2Ст90Гр03.Значение, Р2Ст110Гр03.Значение, Р2Ст115Гр03.Значение, 
			Р2Ст120Гр03.Значение, КоэффициентКк, КС.ПраваяЧасть);
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.8)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень выработанности запасов участка недр Кв в строке 090 Раздела 2.1 должен быть равен 1, если Степень выработанности запасов нефти участка недр (значение строки 100 Раздела 2.1) < 0,8'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кв в Разделе 2.1'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст90Гр03 = ПоказательПоСтроке("Р2Ст90Гр03");
	Р2Ст100Гр03 = ПоказательПоСтроке("Р2Ст100Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		Если НЕ РазделЗаполненСИсключениями(ДанныеСтраницы, , "П000200001003,П000200003003") Тогда
			Продолжить;
		КонецЕсли;			
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст100Гр03);
		
		ВнестиПоказательВРасшифровку(Р2Ст90Гр03, Р2Ст90Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст90Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст100Гр03, Р2Ст100Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст100Гр03.ПорядокСтраницы));
	
		КС = ПоказателиКС(Р2Ст90Гр03.Значение, 1);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст100Гр03.ЗначениеСтр + " < 0.8";
		
		УсловиеВыполнено = (Р2Ст100Гр03.Значение < 0.8);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.9)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий регион добычи и свойства нефти (Ккан) в строке 120 Раздела 2.1 должен быть равен 0 или 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Ккан в Разделе 2.1'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст120Гр03 = ПоказательПоСтроке("Р2Ст120Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст120Гр03);
		ВнестиПоказательВРасшифровку(Р2Ст120Гр03, Р2Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст120Гр03.ПорядокСтраницы));
		
		СоотношениеВыполнено = ((Р2Ст120Гр03.Значение = 0) ИЛИ (Р2Ст120Гр03.Значение = 1));
		Расшифровка = Р2Ст120Гр03.ЗначениеСтр + " = 0 или 1";
		
		Если СоотношениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.10)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий регион добычи и свойства нефти (Ккан) в строке 120 Раздела 2.1 должен быть равен ""0"", если заполнена графа 2 Раздела 2.1.1, для которой значение графы 1 Раздела 2.1.1 = ""2001"" - ""2008"" или ""4001"" - ""4008""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Ккан в Разделе 2.1'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст120Гр03 = ПоказательПоСтроке("Р2Ст120Гр03");
	Р211Ст1Гр01 = ПоказательПоСтроке("Р211Ст1Гр01");
	Р211Ст1Гр02 = ПоказательПоСтроке("Р211Ст1Гр02");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст120Гр03);
		ВнестиПоказательВРасшифровку(Р2Ст120Гр03, Р2Ст120Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст120Гр03.ПорядокСтраницы));
		
		УсловиеВыполнено = Ложь;
		ВозможныеКодыОснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("2001,2002,2003,2004,2005,2006,2007,2008,4001,4002,4003,4004,4005,4006,4007,4008");
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000211000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр01, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр02, Инд);
			Если ВозможныеКодыОснования.Найти(Р211Ст1Гр01.Значение) <> Неопределено
				И ЗначениеЗаполнено(Р211Ст1Гр02.Значение) Тогда
					ВнестиПоказательВРасшифровку(Р211Ст1Гр01, Р211Ст1Гр01.Раздел, );
					ВнестиПоказательВРасшифровку(Р211Ст1Гр02, Р211Ст1Гр02.Раздел, );
					УсловиеВыполнено = Истина;
					Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КС = ПоказателиКС(Р2Ст120Гр03.Значение, 0);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р211Ст1Гр01.ЗначениеСтр
			+ " = [2001...2008] или [4001...4008] и " + Р211Ст1Гр02.ЗначениеСтр + " <> 0";
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.12)'");
	ОписаниеКС      = НСтр("ru='Сумма налога к уплате в строке 150 Раздела 2.1 должна быть равна разнице показателей строк 130 и 140 Раздела 2.1'");
	Нарушение       = НСтр("ru='ст.342 НК РФ и ст.343.2 НК РФ'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога к уплате с учетом налогового вычета (возможна арифметическая ошибка)'");
	
	Р2Ст150Гр03 = ПоказательПоСтроке("Р2Ст150Гр03");
	Р2Ст130Гр03 = ПоказательПоСтроке("Р2Ст130Гр03");
	Р2Ст140Гр03 = ПоказательПоСтроке("Р2Ст140Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст150Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст140Гр03);

		Если (НЕ ЗначениеЗаполнено(Р2Ст130Гр03.Значение)) И (НЕ ЗначениеЗаполнено(Р2Ст140Гр03.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст150Гр03, Р2Ст150Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст150Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст130Гр03, Р2Ст130Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст130Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст140Гр03, Р2Ст140Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст140Гр03.ПорядокСтраницы));
	
		КС = ПоказателиКС(Р2Ст150Гр03.Значение, Р2Ст130Гр03.Значение - Р2Ст140Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р2Ст130Гр03.ЗначениеСтр + " - " + Р2Ст140Гр03.ЗначениеСтр + " Итог ["
			+ КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.13)'");
	ОписаниеКС      = НСтр("ru='Показатель, характеризующий особенность добычи нефти Дм по строке 210 Раздела 2.1.2 должен быть равен произведению строк 070 и 080 Раздела 2.1, если Количество нефти в графе 2 Раздела 2.1.1 имеет код основания (графа 1 Раздела 2.1.1 = ""2001"" и ""4001""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении показателя Дм в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст210Гр03 = ПоказательПоСтроке("Р2Ст210Гр03");
	Р2Ст70Гр03 = ПоказательПоСтроке("Р2Ст70Гр03");
	Р2Ст80Гр03 = ПоказательПоСтроке("Р2Ст80Гр03");
	Р211Ст1Гр01 = ПоказательПоСтроке("Р211Ст1Гр01");
	Р211Ст1Гр02 = ПоказательПоСтроке("Р211Ст1Гр02");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
			
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст210Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст80Гр03);
		
		ВнестиПоказательВРасшифровку(Р2Ст210Гр03, Р2Ст210Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст210Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст70Гр03, Р2Ст70Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст70Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст80Гр03, Р2Ст80Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст80Гр03.ПорядокСтраницы));
		
		УсловиеВыполнено = Ложь;
		ВозможныеКодыОснования = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("2001,4001");
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000211000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр01, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр02, Инд);
			Если ВозможныеКодыОснования.Найти(Р211Ст1Гр01.Значение) <> Неопределено
				И ЗначениеЗаполнено(Р211Ст1Гр02.Значение) Тогда
					ВнестиПоказательВРасшифровку(Р211Ст1Гр01, Р211Ст1Гр01.Раздел, );
					ВнестиПоказательВРасшифровку(Р211Ст1Гр02, Р211Ст1Гр02.Раздел, );
					УсловиеВыполнено = Истина;
					Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КС = ПоказателиКС(Р2Ст210Гр03.Значение, Р2Ст70Гр03.Значение * Р2Ст80Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р2Ст70Гр03.ЗначениеСтр + " * " + Р2Ст80Гр03.ЗначениеСтр + " Итог ["
			+ КС.ПраваяЧастьСтр + "], когда " + Р211Ст1Гр01.ЗначениеСтр + " = 2001 или 4001 и " + Р211Ст1Гр02.ЗначениеСтр + " <> 0";
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.14)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень сложности добычи нефти Кд по строке 230 Раздела 2.1.2 должен быть равен ""0,2"" или ""0,4"" или ""0,8"" или ""1""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении показателя Кд в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст230Гр03 = ПоказательПоСтроке("Р2Ст230Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст230Гр03);		
		Если НЕ ЗначениеЗаполнено(Р2Ст230Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст230Гр03, Р2Ст230Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст230Гр03.ПорядокСтраницы));
		
		СтепеньКд = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("0,2|0,4|0,8|1", "|");
		КСВыполнено = (СтепеньКд.Найти(Р2Ст230Гр03.ЗначениеСтр) <> Неопределено);
		Расшифровка = Р2Ст230Гр03.ЗначениеСтр + " = " + "0,2 | 0,4 | 0,8 | 1";
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.15)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень выработанности запасов участка недр Кв по строке 090 Раздела 2.1 должен быть равен ""1"", если значение строки 230 Раздела 2.1.2 < 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении показателя Кв в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.5 НК РФ'");
	
	Р2Ст90Гр03 = ПоказательПоСтроке("Р2Ст90Гр03");
	Р2Ст230Гр03 = ПоказательПоСтроке("Р2Ст230Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст230Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст230Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст90Гр03);
				
		ВнестиПоказательВРасшифровку(Р2Ст90Гр03, Р2Ст90Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст90Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст230Гр03, Р2Ст230Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст230Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст90Гр03.Значение, 1);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст230Гр03.ЗначениеСтр + " < 1";
		
		УсловиеВыполнено = (Р2Ст230Гр03.Значение < 1);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.16)'");
	ОписаниеКС      = НСтр("ru='Количество налоговых периодов применения коэффициента Кд<1 по строке 240 раздела 2.1.2 должно быть меньше или равен ""180"", если значение строки 230 Раздела 2.1.2 < 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении срока применения коэффициента Кд<1 в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.2 НК РФ'");
	
	Р2Ст240Гр03 = ПоказательПоСтроке("Р2Ст240Гр03");
	Р2Ст230Гр03 = ПоказательПоСтроке("Р2Ст230Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст230Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст230Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст240Гр03);
		
		ВнестиПоказательВРасшифровку(Р2Ст240Гр03, Р2Ст240Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст240Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст230Гр03, Р2Ст230Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст230Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст240Гр03.Значение, 180);
		Расшифровка = КС.ЛеваяЧастьСтр + " <= " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст230Гр03.ЗначениеСтр + " < 1";
		
		УсловиеВыполнено = (Р2Ст230Гр03.Значение < 1);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть <= КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_17(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.17)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень выработанности конкрентной залежи углеводородного сырья Кдв по строке 250 Раздела 2.1.2 должен быть равен ""1"", если значение строки 230 Раздела 2.1.2 < 1 и значение строки 220 Раздела 2.1.2 < 0,8'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кдв в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.2 НК РФ'");
	
	Р2Ст250Гр03 = ПоказательПоСтроке("Р2Ст250Гр03");
	Р2Ст230Гр03 = ПоказательПоСтроке("Р2Ст230Гр03");
	Р2Ст220Гр03 = ПоказательПоСтроке("Р2Ст220Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст230Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст220Гр03);
		Если НЕ ЗначениеЗаполнено(Р2Ст230Гр03.Значение) И НЕ ЗначениеЗаполнено(Р2Ст220Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст250Гр03);
		
		ВнестиПоказательВРасшифровку(Р2Ст250Гр03, Р2Ст250Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст250Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст230Гр03, Р2Ст230Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст230Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст220Гр03, Р2Ст220Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст220Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст250Гр03.Значение, 1, 4, 4);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст230Гр03.ЗначениеСтр + " < 1 и "
			+ Р2Ст220Гр03.ЗначениеСтр + " < 0.8";
		
		УсловиеВыполнено = (Р2Ст230Гр03.Значение < 1 И Р2Ст220Гр03.Значение < 0.8);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_18(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.18)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий степень выработанности конкрентной залежи углеводородного сырья Кдв по строке 250 Раздела 2.1.2 должен быть равен ""0,3"", если значение строки 230 Раздела 2.1.2 < 1 и значение строки 220 Раздела 2.1.2 > 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кдв в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342.2 НК РФ'");
	
	Р2Ст250Гр03 = ПоказательПоСтроке("Р2Ст250Гр03");
	Р2Ст230Гр03 = ПоказательПоСтроке("Р2Ст230Гр03");
	Р2Ст220Гр03 = ПоказательПоСтроке("Р2Ст220Гр03");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст250Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст230Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст220Гр03);

		Если НЕ ЗначениеЗаполнено(Р2Ст230Гр03.Значение) И НЕ ЗначениеЗаполнено(Р2Ст220Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р2Ст250Гр03, Р2Ст250Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст250Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст230Гр03, Р2Ст230Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст230Гр03.ПорядокСтраницы));
		ВнестиПоказательВРасшифровку(Р2Ст220Гр03, Р2Ст220Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст220Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р2Ст250Гр03.Значение, 0.3);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р2Ст230Гр03.ЗначениеСтр + " < 1 и "
			+ Р2Ст220Гр03.ЗначениеСтр + " > 1";
		
		УсловиеВыполнено = (Р2Ст230Гр03.Значение < 1 И Р2Ст220Гр03.Значение > 1);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_2_19(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 2 (КС 2.19)'");
	ОписаниеКС      = НСтр("ru='Количество налоговых периодов применения ставки налога 0 рублей в строке 260 Раздела 2.1.2 должно быть <=""180"", если Количество нефти в графе 2 Раздела 2.1.1 имеет код основания (графа 1 Раздела 2.1.1) = ""1084""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении количества налоговых периодов в Разделе 2.1.2'");
	Нарушение       = НСтр("ru='ст.342 НК РФ'");
	
	Р2Ст260Гр03 = ПоказательПоСтроке("Р2Ст260Гр03");
	Р211Ст1Гр01 = ПоказательПоСтроке("Р211Ст1Гр01");
	Р211Ст1Гр02 = ПоказательПоСтроке("Р211Ст1Гр02");
	Раздел2 = ДанныеИзДереваРаздела("Раздел2");
	
	Для Каждого СтраницаРаздела Из Раздел2 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел2.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р2Ст260Гр03);
		ВнестиПоказательВРасшифровку(Р2Ст260Гр03, Р2Ст260Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р2Ст260Гр03.ПорядокСтраницы));
		
		УсловиеВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000211000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр01, Инд);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р211Ст1Гр02, Инд);
			Если Р211Ст1Гр01.Значение = "1084"
				И ЗначениеЗаполнено(Р211Ст1Гр02.Значение) Тогда
					ВнестиПоказательВРасшифровку(Р211Ст1Гр01, Р211Ст1Гр01.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р211Ст1Гр01.ПорядокСтраницы));
					ВнестиПоказательВРасшифровку(Р211Ст1Гр02, Р211Ст1Гр02.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р211Ст1Гр02.ПорядокСтраницы));
					УсловиеВыполнено = Истина;
					Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		КС = ПоказателиКС(Р2Ст260Гр03.Значение, 180);
		Расшифровка = КС.ЛеваяЧастьСтр + " <= " + КС.ПраваяЧастьСтр + ", когда " + Р211Ст1Гр01.ЗначениеСтр + " = 1084 и " + Р211Ст1Гр02.ЗначениеСтр + " <> 0";;
		
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть <= КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.1)'");
	ОписаниеКС      = НСтр("ru='Код вида добытого полезного ископаемого по строке 010 Раздела 3 должен быть равен ""03200"" или ""03300""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида ПИ в Разделе 3'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р3Ст10Гр03 = ПоказательПоСтроке("Р3Ст10Гр03");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст10Гр03);
		
		Если НЕ ЗначениеЗаполнено(Р3Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Ст10Гр03, Р3Ст10Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст10Гр03.ПорядокСтраницы));
		
		КодыПИ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("03200,03300");
		
		КСВыполнено = (КодыПИ.Найти(Р3Ст10Гр03.Значение) <> Неопределено);
		Расшифровка = ПредставлениеДляРасшифровки(Р3Ст10Гр03.ЗначениеСтр) + " = ""03200"" или ""03300""";
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.2)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 3 должен быть равен КБК в строке 010 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в Разделе 3, отсутствует в Разделе 1. Либо неверно указан КБК в Разделе 3'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р3Ст20Гр03 = ПоказательПоСтроке("Р3Ст20Гр03");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Ст20Гр03, Р3Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст20Гр03.ПорядокСтраницы));
		
		КСВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			Если Р1Ст1Гр01.Значение = Р3Ст20Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", );
				КСВыполнено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ КСВыполнено Тогда
			ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = ПредставлениеДляРасшифровки(Р1Ст1Гр01.ЗначениеСтр) + " = "
			+ ПредставлениеДляРасшифровки(Р3Ст20Гр03.ЗначениеСтр);
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.3)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 3 должен быть равен ""18210701012011000110"" или ""18210701013011000110"" или ""18210701040011000110""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан КБК в Разделе 3'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р3Ст20Гр03 = ПоказательПоСтроке("Р3Ст20Гр03");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Ст20Гр03, Р3Ст20Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст20Гр03.ПорядокСтраницы));
		
		КодыКБК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("18210701012011000110,18210701013011000110,18210701040011000110");
		КСВыполнено = (КодыКБК.Найти(Р3Ст20Гр03.Значение) <> Неопределено);
		Расшифровка = ПредставлениеДляРасшифровки(Р3Ст20Гр03.ЗначениеСтр) + " = ""18210701012011000110"" или ""18210701013011000110"" или ""18210701040011000110""";
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.4)'");
	ОписаниеКС      = НСтр("ru='Код единицы измерения в строке 030 Раздела 3 должен быть равен ""168"" или ""114""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код по ОКЕИ в Разделе 3'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р3Ст30Гр03 = ПоказательПоСтроке("Р3Ст30Гр03");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст30Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст30Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Ст30Гр03, Р3Ст30Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст30Гр03.ПорядокСтраницы));
		
		КодыОКЕИ = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("168,114");
		КСВыполнено = (КодыОКЕИ.Найти(Р3Ст30Гр03.Значение) <> Неопределено);
		Расшифровка = ПредставлениеДляРасшифровки(Р3Ст30Гр03.ЗначениеСтр) + " = ""168"" или ""114""";
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.5)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО по строке 080 Раздела 3.1 должен быть равен ОКТМО в строке 020 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в Разделе 3, отсутствует в Разделе 1. Либо неверно указан ОКТМО в Разделе 3'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р3Ст80Гр03 = ПоказательПоСтроке("Р3Ст80Гр03");
	Р1Ст1Гр02 = ПоказательПоСтроке("Р1Ст1Гр02");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст80Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст80Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р3Ст80Гр03, Р3Ст80Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст80Гр03.ПорядокСтраницы));
		
		КСВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр02, Инд);
			Если Р1Ст1Гр02.Значение = Р3Ст80Гр03.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст1Гр02, "Раздел1", );
				КСВыполнено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ КСВыполнено Тогда
			ВнестиПоказательВРасшифровку(Р1Ст1Гр02, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = ПредставлениеДляРасшифровки(Р1Ст1Гр02.ЗначениеСтр) + " = "
			+ ПредставлениеДляРасшифровки(Р3Ст80Гр03.ЗначениеСтр);
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.6)'");
	ОписаниеКС      = НСтр("ru='Сумма исчисленного налога по строке 040 Раздела 3 должна быть равна сумме всех значений строки 190 Раздела 3.1.1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы исчисленного налога по участку недр (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342 НК РФ и ст.342.4 НК РФ'");
	
	Р3Ст40Гр03 = ПоказательПоСтроке("Р3Ст40Гр03");
	Р3Ст190Гр03 = ПоказательПоСтроке("Р3Ст190Гр03");
	
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст40Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст40Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст40Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст40Гр03.ПорядокСтраницы);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст40Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст40Гр03, Р3Ст40Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст40Гр03.ПорядокСтраницы));
		
		СуммаР3Ст190Гр03 = СуммаПодУровня(УровеньСтраницы, Раздел3, Р3Ст190Гр03);
		//ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст190Гр03);
		//ВнестиПоказательВРасшифровку(Р3Ст190Гр03, Р3Ст190Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст190Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р3Ст40Гр03.Значение, СуммаР3Ст190Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + РасшифровкаВСтр(СуммаР3Ст190Гр03.ЗначениеСтр) + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.7)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий долю реализации газа Ов по строке 060 Раздела 3 должен быть равен ""0,64"" или ""1""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Ов'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст60Гр03 = ПоказательПоСтроке("Р3Ст60Гр03");
	Раздел3 = ДанныеИзДереваРаздела("Раздел3");
	
	УровеньСтраницы = "";
	Для Каждого СтраницаРаздела Из Раздел3 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел3.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		Если УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст60Гр03.ПорядокСтраницы) Тогда
			Продолжить;
		КонецЕсли;
		УровеньСтраницы = НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст60Гр03.ПорядокСтраницы);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст60Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст60Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р3Ст60Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст60Гр03, Р3Ст60Гр03.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Р3Ст60Гр03.ПорядокСтраницы));
		
		КСВыполнено = ((Р3Ст60Гр03.Значение = 0.64) ИЛИ (Р3Ст60Гр03.Значение = 1));
		Расшифровка = Р3Ст60Гр03.ЗначениеСтр + " = ""0,64"" или ""1""";
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок,
			Расшифровка, ЭтоОшибка, ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.8)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий долю добытого газа по строке 070 Раздела 3 должен быть равен (35 х сумма всех значений графы 2 Раздела 3.1.1 для Кода вида добытого полезного ископаемого = ""03300"" (строка 010 Раздела 3) и Код единицы измерения в строке 030 Раздела 3 = ""114"") / (35 х (сумма всех значений графы 2 Раздела 3.1.1 для Кода вида добытого полезного ископаемого = ""03300"" (строка 010 Раздела 3) и Код единицы измерения в строке 030 Раздела 3 = ""114"" + Сумма всех значений графы 2 Раздела 5.1 для Кода вида добытого полезного ископаемого = ""03400"" (строка 010 Раздела 5) и Код единицы измерения в строке 030 Раздела 5 = ""114"") + (42 х (сумма всех значений графы 2 Раздела 2.1.1 и графы 2 Раздела 2.1.2 для Кода вида добытого полезного ископаемого = ""03100"" (строка 010 Раздела 2) и Код единицы измерения в строке 030 Раздела 2 = ""168"" + сумма всех значений графы 2 Раздела 3.1.1 для Кода вида добытого полезного ископаемого = ""03200"" (строка 010 Раздела 3) и Код единицы измерения в строке 030 Раздела 3 = ""168""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кгпн (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст70Гр03 = ПоказательПоСтроке("Р3Ст70Гр03");
	Р311Ст1Гр02 = ПоказательПоСтроке("Р311Ст1Гр02");
	Р311Ст1Гр02_2 = ПоказательПоСтроке("Р311Ст1Гр02");
	Р3Ст30Гр03 = ПоказательПоСтроке("Р3Ст30Гр03");
	Р3Ст10Гр03 = ПоказательПоСтроке("Р3Ст10Гр03");
	Р5Ст1Гр02 = ПоказательПоСтроке("Р5Ст1Гр02");
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	Р5Ст30Гр03 = ПоказательПоСтроке("Р5Ст30Гр03");
	Р211Ст1Гр02 = ПоказательПоСтроке("Р211Ст1Гр02");
	Р212Ст1Гр02 = ПоказательПоСтроке("Р212Ст1Гр02");
	Р2Ст10Гр03 = ПоказательПоСтроке("Р2Ст10Гр03");
	Р2Ст30Гр03 = ПоказательПоСтроке("Р2Ст30Гр03");
	
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	Раздел2 = ДанныеМногоуровнегоРаздела("Раздел2");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	СуммироватьМнС(Раздел3, Р3Ст70Гр03,);
	СуммироватьМнЧ(Раздел3, Р311Ст1Гр02, Новый Структура(Р3Ст10Гр03.Имя + "," + Р3Ст30Гр03.Имя, "03300", "114"));
	СуммироватьМнЧ(Раздел5, Р5Ст1Гр02, Новый Структура(Р5Ст10Гр03.Имя + "," + Р5Ст30Гр03.Имя, "03400", "114"));
	СуммироватьМнЧ(Раздел2, Р211Ст1Гр02, Новый Структура(Р2Ст10Гр03.Имя + "," + Р2Ст30Гр03.Имя, "03100", "168"));
	СуммироватьМнЧ(Раздел2, Р212Ст1Гр02, Новый Структура(Р2Ст10Гр03.Имя + "," + Р2Ст30Гр03.Имя, "03100", "168"));
	СуммироватьМнЧ(Раздел3, Р311Ст1Гр02_2, Новый Структура(Р3Ст10Гр03.Имя + "," + Р3Ст30Гр03.Имя, "03200", "168"));
	
	ЗначениеДелимогоПравойЧасти = 35 * Р311Ст1Гр02.Значение;
	ЗначениеДелителяПравойЧасти = 35 * Р311Ст1Гр02.Значение + Р5Ст1Гр02.Значение + 42 * Р212Ст1Гр02.Значение + Р311Ст1Гр02_2.Значение;
	
	КС = ПоказателиКС(Р3Ст70Гр03.Значение, ?(ЗначениеДелителяПравойЧасти = 0, 0, ЗначениеДелимогоПравойЧасти / ЗначениеДелителяПравойЧасти), 2, 2);
	
	Расшифровка = КС.ЛеваяЧастьСтр + " = (35 * " + Р311Ст1Гр02.ЗначениеСтр + " / (35 * " + Р311Ст1Гр02.ЗначениеСтр + " + "
		+ Р5Ст1Гр02.ЗначениеСтр + " 42 * " + Р212Ст1Гр02.ЗначениеСтр + " + " + Р311Ст1Гр02_2.ЗначениеСтр + ") Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.9)'");
	ОписаниеКС      = НСтр("ru='Коэффициент Дг по строке 130 Раздела 3.1 должен быть равен (35 х сумма всех значений графы 2 Раздела 3.1.1 для кода вида добытого полезного ископаемого = ""03300"" (строка 010 Раздела 3) и код единицы измерения в строке 030 Раздела 3 = ""114"") / (35 х сумма всех значений графы 2 Раздела 3.1.1 для кода вида добытого полезного ископаемого = ""03300"" (строка 010 Раздела 3) и код единицы измерения в строке 030 Раздела 3 = ""114"") + (42 х сумма всех значений графы 2 Раздела 3.1.1 для кода вида добытого полезного ископаемого = ""03200"" (строка 010 Раздела 3) и код единицы измерения в строке 030 Раздела 3 = ""168"")'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Дг (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст130Гр03 = ПоказательПоСтроке("Р3Ст130Гр03");
	Р311Ст1Гр02 = ПоказательПоСтроке("Р311Ст1Гр02");
	Р311Ст1Гр02_2 = ПоказательПоСтроке("Р311Ст1Гр02");
	Р3Ст10Гр03 = ПоказательПоСтроке("Р3Ст10Гр03");
	Р3Ст30Гр03 = ПоказательПоСтроке("Р3Ст30Гр03");
	
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	СуммироватьМнС(Раздел3, Р3Ст130Гр03,);
	СуммироватьМнЧ(Раздел3, Р311Ст1Гр02, Новый Структура(Р3Ст10Гр03.Имя + "," + Р3Ст30Гр03.Имя, "03300", "114"));
	СуммироватьМнЧ(Раздел3, Р311Ст1Гр02_2, Новый Структура(Р3Ст10Гр03.Имя + "," + Р3Ст30Гр03.Имя, "03200", "168"));
	
	ЗначениеДелимогоПравойЧасти = 35 * Р311Ст1Гр02.Значение;
	ЗначениеДелителяПравойЧасти = 35 * Р311Ст1Гр02.Значение + 42 * Р311Ст1Гр02_2.Значение;
	
	КС = ПоказателиКС(Р3Ст130Гр03.Значение, ?(ЗначениеДелителяПравойЧасти = 0, 0, ЗначениеДелимогоПравойЧасти / ЗначениеДелителяПравойЧасти), 2, 2);
		
	Расшифровка = КС.ЛеваяЧастьСтр + " = (35 * " + Р311Ст1Гр02.ЗначениеСтр + " / (35 * " + Р311Ст1Гр02.ЗначениеСтр + " + "
		+ " 42 * " + Р311Ст1Гр02_2.ЗначениеСтр + ") Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.10)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Квг (строка 170 Раздела 3.1.1) должно быть равно 2,75 - 2,5 х строка 100 Раздела 3.1, если значение строки 100 Раздела 3.1 > 0,7 и <= 0,9'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Квг (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр03 = ПоказательПоСтроке("Р3Ст170Гр03");
	Р3Ст100Гр03 = ПоказательПоСтроке("Р3Ст100Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр03.Свойство("ПорядокСтраницы"), Р3Ст170Гр03.ПорядокСтраницы, 0), 
		?(Р3Ст100Гр03.Свойство("ПорядокСтраницы"), Р3Ст100Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст100Гр03.Имя + "," + Р3Ст170Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст100Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст100Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст100Гр03, Р3Ст100Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр03, Р3Ст170Гр03.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр03.Значение, 2.75 - 2.5 * Р3Ст100Гр03.Значение, 4, 4);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = 2.75 - 2.5 * " + Р3Ст100Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда 0.7 < "
			+ Р3Ст100Гр03.ЗначениеСтр + " <= 0.9";
		
		УсловиеВыполнено = (Р3Ст100Гр03.Значение > 0.7) И (Р3Ст100Гр03.Значение <= 0.9);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.11)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Квг (строка 170 Раздела 3.1.1) должно быть равно ""0,5"", если значение строки 100 Раздела 3.1 > 0,9'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Квг (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр03 = ПоказательПоСтроке("Р3Ст170Гр03");
	Р3Ст100Гр03 = ПоказательПоСтроке("Р3Ст100Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр03.Свойство("ПорядокСтраницы"), Р3Ст170Гр03.ПорядокСтраницы, 0), 
		?(Р3Ст100Гр03.Свойство("ПорядокСтраницы"), Р3Ст100Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст100Гр03.Имя + "," + Р3Ст170Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст100Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст100Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст100Гр03, Р3Ст100Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр03, Р3Ст170Гр03.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр03.Значение, 0.5, 4, 4);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р3Ст100Гр03.ЗначениеСтр + " > 0.9";
		
		УсловиеВыполнено = (Р3Ст100Гр03.Значение > 0.9);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_12(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.12)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Квг (строка 170 Раздела 3.1.1) должно быть равно ""1"", если значение строки 100 Раздела 3.1 <= 0,7'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Квг (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр03 = ПоказательПоСтроке("Р3Ст170Гр03");
	Р3Ст100Гр03 = ПоказательПоСтроке("Р3Ст100Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр03.Свойство("ПорядокСтраницы"), Р3Ст170Гр03.ПорядокСтраницы, 0), 
		?(Р3Ст100Гр03.Свойство("ПорядокСтраницы"), Р3Ст100Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст100Гр03.Имя + "," + Р3Ст170Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст100Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст100Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;

		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст100Гр03, Р3Ст100Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр03, Р3Ст170Гр03.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр03.Значение, 1, 4, 4);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р3Ст100Гр03.ЗначениеСтр + " <= 0.7";
		
		УсловиеВыполнено = (Р3Ст100Гр03.Значение <= 0.7);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_13(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.13)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Кгз (строка 170 Раздела 3.1.1) должно быть равно ""1"", если значение строки 150 Раздела 3.1.1 <= 1700'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кгз (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр05 = ПоказательПоСтроке("Р3Ст170Гр05");
	Р3Ст150Гр03 = ПоказательПоСтроке("Р3Ст150Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр05.Свойство("ПорядокСтраницы"), Р3Ст170Гр05.ПорядокСтраницы, 0), 
		?(Р3Ст150Гр03.Свойство("ПорядокСтраницы"), Р3Ст150Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст150Гр03.Имя + "," + Р3Ст170Гр05.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст150Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст150Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст150Гр03, Р3Ст150Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр05);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр05, Р3Ст170Гр05.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр05.Значение, 1);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р3Ст150Гр03.ЗначениеСтр + " <= 1700";
		
		УсловиеВыполнено = (Р3Ст150Гр03.Значение <= 1700);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_14(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.14)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Кгз (строка 170 Раздела 3.1.1) должно быть равно ""0,64"", если значение строки 150 Раздела 3.1.1 > 1700 и <= 3300'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кгз (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр05 = ПоказательПоСтроке("Р3Ст170Гр05");
	Р3Ст150Гр03 = ПоказательПоСтроке("Р3Ст150Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр05.Свойство("ПорядокСтраницы"), Р3Ст170Гр05.ПорядокСтраницы, 0), 
		?(Р3Ст150Гр03.Свойство("ПорядокСтраницы"), Р3Ст150Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст150Гр03.Имя + "," + Р3Ст170Гр05.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст150Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст150Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст150Гр03, Р3Ст150Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр05);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр05, Р3Ст170Гр05.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр05.Значение, 0.64);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда 1700 < " + Р3Ст150Гр03.ЗначениеСтр + " <= 3300";
		
		УсловиеВыполнено = (Р3Ст150Гр03.Значение  > 1700) И (Р3Ст150Гр03.Значение <= 3300);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_15(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.15)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Кгз (строка 170 Раздела 3.1.1) должно быть равно ""0,5"", если значение строки 150 Раздела 3.1.1 > 3300'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кгз (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст170Гр05 = ПоказательПоСтроке("Р3Ст170Гр05");
	Р3Ст150Гр03 = ПоказательПоСтроке("Р3Ст150Гр03");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст170Гр05.Свойство("ПорядокСтраницы"), Р3Ст170Гр05.ПорядокСтраницы, 0), 
		?(Р3Ст150Гр03.Свойство("ПорядокСтраницы"), Р3Ст150Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст150Гр03.Имя + "," + Р3Ст170Гр05.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст150Гр03);
		Если НЕ ЗначениеЗаполнено(Р3Ст150Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВнестиПоказательВРасшифровку(Р3Ст150Гр03, Р3Ст150Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр05);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр05, Р3Ст170Гр05.Раздел, СтрокаДанных.НомерСтраницы);
	
		КС = ПоказателиКС(Р3Ст170Гр05.Значение, 0.5);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р3Ст150Гр03.ЗначениеСтр + "  > 3300";
		
		УсловиеВыполнено = (Р3Ст150Гр03.Значение  > 3300);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_3_16(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 3 (КС 3.16)'");
	ОписаниеКС      = НСтр("ru='Коэффициент, характеризующий сложность добычи газа горючего природного и(или) газового конденсата Кс по строке 180 Раздела 3.1.1 должен быть равен минимальному значению строки 170 Раздела 3.1.1 (min из Квг, Кр, Кгз, Кас, Корз)'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кс (возможна арифметическая ошибка)'");
	Нарушение       = НСтр("ru='ст.342.4 НК РФ'");
	
	Р3Ст180Гр03 = ПоказательПоСтроке("Р3Ст180Гр03");
	Р3Ст170Гр03 = ПоказательПоСтроке("Р3Ст170Гр03");
	Р3Ст170Гр04 = ПоказательПоСтроке("Р3Ст170Гр04");
	Р3Ст170Гр05 = ПоказательПоСтроке("Р3Ст170Гр05");
	Р3Ст170Гр06 = ПоказательПоСтроке("Р3Ст170Гр06");
	Р3Ст170Гр07 = ПоказательПоСтроке("Р3Ст170Гр07");
	Раздел3 = ДанныеМногоуровнегоРаздела("Раздел3");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р3Ст180Гр03.Свойство("ПорядокСтраницы"), Р3Ст180Гр03.ПорядокСтраницы, 0), 
		?(Р3Ст170Гр03.Свойство("ПорядокСтраницы"), Р3Ст170Гр03.ПорядокСтраницы, 0));
	
	ДанныеРаздела = Раздел3.Скопировать();
	ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р3Ст170Гр03.Имя + "," + Р3Ст170Гр04.Имя + ","
		+ Р3Ст170Гр05.Имя + "," + Р3Ст170Гр06.Имя + "," + Р3Ст170Гр07.Имя + "," + Р3Ст180Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр03);		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр04);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр05);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр06);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст170Гр07);
		
		Если НЕ (ЗначениеЗаполнено(Р3Ст170Гр03.Значение) ИЛИ ЗначениеЗаполнено(Р3Ст170Гр04.Значение) ИЛИ ЗначениеЗаполнено(Р3Ст170Гр05.Значение)
			ИЛИ ЗначениеЗаполнено(Р3Ст170Гр06.Значение) ИЛИ ЗначениеЗаполнено(Р3Ст170Гр07.Значение)) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВставитьЗначениеПоказателя(СтрокаДанных, Р3Ст180Гр03);
		ВнестиПоказательВРасшифровку(Р3Ст180Гр03, Р3Ст180Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр03, Р3Ст170Гр03.Раздел, СтрокаДанных.НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр04, Р3Ст170Гр04.Раздел, СтрокаДанных.НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр05, Р3Ст170Гр05.Раздел, СтрокаДанных.НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр06, Р3Ст170Гр06.Раздел, СтрокаДанных.НомерСтраницы);
		ВнестиПоказательВРасшифровку(Р3Ст170Гр07, Р3Ст170Гр07.Раздел, СтрокаДанных.НомерСтраницы);

		ПраваяЧасть = Мин(Р3Ст170Гр03.Значение, Р3Ст170Гр04.Значение, Р3Ст170Гр05.Значение, Р3Ст170Гр06.Значение, Р3Ст170Гр07.Значение);
		
		КС = ПоказателиКС(Р3Ст180Гр03.Значение, ПраваяЧасть, 4, 4);
			
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
		
		Если (КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.1)'");
	ОписаниеКС      = НСтр("ru='Код вида полезного ископаемого по строке 010 Раздела 4 должен быть равен ""03100"" или ""03200"" или ""03300"" или ""03401""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида ПИ в Разделе 4'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р4Ст10Гр03 = ПоказательПоСтроке("Р4Ст10Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р4Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р4Ст10Гр03, "Раздел4", НомерСтраницыСтр);
		
		Расшифровка = ПредставлениеДляРасшифровки(Р4Ст10Гр03.ЗначениеСтр) + " = 03100,03200,03300,03401";
		
		Если КодНайден(Р4Ст10Гр03.Значение, "03100,03200,03300,03401") Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.2)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 4 должен быть равен КБК в строке 010 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в Разделе 4, отсутствует в Разделе 1. Либо неверно указан КБК в Разделе 4'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	
	Р4Ст20Гр03 = ПоказательПоСтроке("Р4Ст20Гр03");
	Р4Ст40Гр03 = ПоказательПоСтроке("Р4Ст40Гр03");
	
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	Р1Ст2Гр01 = ПоказательПоСтроке("Р1Ст2Гр01");
	
	Раздел4 = мДанныеОтчета.Раздел4;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р4Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
		ВнестиПоказательВРасшифровку(Р4Ст20Гр03, "Раздел4", НомерСтраницыСтр);

		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст40Гр03);
		//ВнестиПоказательВРасшифровку(Р4Ст40Гр03, "Раздел4", НомерСтраницыСтр);
		
		КСВыполнено = Ложь;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст2Гр01, Инд);
			
			Если Р4Ст20Гр03.Значение = Р1Ст1Гр01.Значение И Р4Ст40Гр03.Значение = Р1Ст2Гр01.Значение Тогда
				КСВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КСВыполнено Тогда 
			ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = Р4Ст20Гр03.ЗначениеСтр + " = " + ?(КСВыполнено, Р1Ст1Гр01.ЗначениеСтр, "[...]") ;
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.3)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 4 должен быть равен ""18210701011011000110"" или ""18210701012011000110"" или ""18210701013011000110"" или ""00000000000000000000"" (если строка 010 Раздела 4 = ""03401"")'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан КБК в Разделе 4'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	
	Р4Ст20Гр03 = ПоказательПоСтроке("Р4Ст20Гр03");
	Р4Ст10Гр03 = ПоказательПоСтроке("Р4Ст10Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р4Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст10Гр03);

		ВнестиПоказательВРасшифровку(Р4Ст20Гр03, "Раздел4", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р4Ст10Гр03, "Раздел4", НомерСтраницыСтр);
		
		Код03401 = КодНайден(Р4Ст10Гр03.Значение, "03401");
		
		Если Код03401 Тогда
			Расшифровка = ПредставлениеДляРасшифровки(Р4Ст20Гр03.ЗначениеСтр) + " = " + "00000000000000000000";
		Иначе
			Расшифровка = ПредставлениеДляРасшифровки(Р4Ст20Гр03.ЗначениеСтр) + " = "
				+ "18210701011011000110,18210701012011000110,18210701013011000110";
		КонецЕсли;
		
		Если Код03401 И КодНайден(Р4Ст20Гр03.Значение, "00000000000000000000") Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		ИначеЕсли (НЕ Код03401) И КодНайден(Р4Ст20Гр03.Значение, "18210701011011000110,18210701012011000110,18210701013011000110") Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.4)'");
	ОписаниеКС      = НСтр("ru='Код единицы измерения в строке 030 Раздела 4 должен быть равен ""168"" или ""114"" или ""113""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код по ОКЕИ в Разделе 4'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	
	Р4Ст30Гр03 = ПоказательПоСтроке("Р4Ст30Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст30Гр03);
		Если НЕ ЗначениеЗаполнено(Р4Ст30Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р4Ст30Гр03, "Раздел4", НомерСтраницыСтр);
		
		Расшифровка = ПредставлениеДляРасшифровки(Р4Ст30Гр03.ЗначениеСтр) + " = " + "168,114,113";
		
		Если КодНайден(Р4Ст30Гр03.Значение, "168,114,113") Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.5)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО по строке 040 Раздела 4 должен быть равен ОКТМО в строке 020 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в Разделе 4, отсутствует в Разделе 1. Либо неверно указан ОКТМО в Разделе 4'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	
	Р4Ст20Гр03 = ПоказательПоСтроке("Р4Ст20Гр03");
	Р4Ст40Гр03 = ПоказательПоСтроке("Р4Ст40Гр03");
	
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	Р1Ст2Гр01 = ПоказательПоСтроке("Р1Ст2Гр01");
	
	Раздел4 = мДанныеОтчета.Раздел4;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст40Гр03);
		Если НЕ ЗначениеЗаполнено(Р4Ст40Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст20Гр03);

		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст40Гр03);
		ВнестиПоказательВРасшифровку(Р4Ст40Гр03, "Раздел4", НомерСтраницыСтр);
		
		КСВыполнено = Ложь;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст2Гр01, Инд);
			
			Если Р4Ст20Гр03.Значение = Р1Ст1Гр01.Значение И Р4Ст40Гр03.Значение = Р1Ст2Гр01.Значение Тогда
				КСВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КСВыполнено Тогда 
			ВнестиПоказательВРасшифровку(Р1Ст2Гр01, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = Р4Ст40Гр03.ЗначениеСтр + " = " + ?(КСВыполнено, Р1Ст2Гр01.ЗначениеСтр, "[...]") ;
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.6)'");
	ОписаниеКС      = НСтр("ru='Налоговая база по строке 130 Раздела 4 должна быть равна сумме значений по графам 2 раздела 4 с кодом основания по графе 1 Раздела 4 = ""7000""-""7006"" х Минимальную стоимость единицы полезного ископаемого по строке 090 раздела 4, если Стоимость единицы полезного ископаемого по строке 080 Раздела 4 < Минимальной стоимости единицы полезного ископаемого по строке 090 раздела 4 или значение Стоимости единицы полезного ископаемого по строке 080 Раздела 4 не заполнено'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы (возможна арифметическая ошибка) в Разделе 4'");
	Нарушение       = НСтр("ru='ст.340 и 341.1 НК РФ'");
	
	Р4Ст130Гр03 = ПоказательПоСтроке("Р4Ст130Гр03");
	Р4Ст1Гр02 = ПоказательПоСтроке("Р4Ст1Гр02");
	Р4Ст1Гр01 = ПоказательПоСтроке("Р4Ст1Гр01");
	Р4Ст90Гр03 = ПоказательПоСтроке("Р4Ст90Гр03");
	Р4Ст80Гр03 = ПоказательПоСтроке("Р4Ст80Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст80Гр03);
	
		ВнестиПоказательВРасшифровку(Р4Ст130Гр03, "Раздел4", НомерСтраницыСтр);
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000400000101_");
		СуммаР4Ст1Гр02 = 0;
		СуммаР4Ст1Гр02Стр = "";
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р4Ст1Гр01, Инд);
			Если КодНайден(Р4Ст1Гр01.Значение, "7000,7001,7002,7003,7004,7005,7006") Тогда
				ВнестиПоказательВРасшифровку(Р4Ст1Гр01, "Раздел4", НомерСтраницыСтр);
				ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р4Ст1Гр02, Инд);
				ВнестиПоказательВРасшифровку(Р4Ст1Гр02, "Раздел4", НомерСтраницыСтр);
				СуммаР4Ст1Гр02 = СуммаР4Ст1Гр02 + Р4Ст1Гр02.Значение;
				СуммаР4Ст1Гр02Стр = СуммаР4Ст1Гр02Стр + Р4Ст1Гр02.ЗначениеСтр + " + ";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВнестиПоказательВРасшифровку(Р4Ст90Гр03, "Раздел4", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р4Ст80Гр03, "Раздел4", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р4Ст130Гр03.Значение, СуммаР4Ст1Гр02 * Р4Ст90Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + СуммаР4Ст1Гр02 + " * " + Р4Ст90Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр
			+ "], когда " + Р4Ст80Гр03.ЗначениеСтр + " < " + Р4Ст90Гр03.ЗначениеСтр + " или " + Р4Ст80Гр03.ЗначениеСтр + " = 0";
		
		УсловиеВыполнено = (НЕ ЗначениеЗаполнено(Р4Ст80Гр03.Значение)) ИЛИ (Р4Ст80Гр03.Значение < Р4Ст90Гр03.Значение);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.7)'");
	ОписаниеКС      = НСтр("ru='Налоговая база по строке 130 Раздела 4 должна быть равна нулю, если Код вида полезного ископаемого в строке 010 Раздела 4 = ""03401""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы (возможна арифметическая ошибка) в Разделе 4'");
	Нарушение       = НСтр("ru='ст.340 и 341.1 НК РФ'");
	
	Р4Ст130Гр03 = ПоказательПоСтроке("Р4Ст130Гр03");
	Р4Ст10Гр03 = ПоказательПоСтроке("Р4Ст10Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст10Гр03);
		
		ВнестиПоказательВРасшифровку(Р4Ст130Гр03, "Раздел4", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р4Ст10Гр03, "Раздел4", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р4Ст130Гр03.Значение, 0);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р4Ст10Гр03.ЗначениеСтр + " = ""03401""";
		
		УсловиеВыполнено = КодНайден(Р4Ст10Гр03.Значение , "03401");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_4_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 4 (КС 4.8)'");
	ОписаниеКС      = НСтр("ru='Сумма исчисленного налога по строке 140 Раздела 4 должна быть равна нулю, если Код вида полезного ископаемого в строке 010 Раздела 4 = ""03401""'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы (возможна арифметическая ошибка) в Разделе 4'");
	Нарушение       = НСтр("ru='ст.340 и 341.1 НК РФ'");
	
	Р4Ст140Гр03 = ПоказательПоСтроке("Р4Ст140Гр03");
	Р4Ст10Гр03 = ПоказательПоСтроке("Р4Ст10Гр03");
	Раздел4 = мДанныеОтчета.Раздел4;
	
	Для Каждого СтраницаРаздела Из Раздел4 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел4.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст140Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р4Ст10Гр03);

		ВнестиПоказательВРасшифровку(Р4Ст140Гр03, "Раздел4", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р4Ст10Гр03, "Раздел4", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р4Ст140Гр03.Значение, 0);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр + ", когда " + Р4Ст10Гр03.ЗначениеСтр + " = ""03401""";
		
		УсловиеВыполнено = КодНайден(Р4Ст10Гр03.Значение , "03401");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.1)'");
	ОписаниеКС      = НСтр("ru='Код вида добытого полезного ископаемого по строке 010 Раздела 5 должен быть отличен от ""03100"" или ""03200"" или ""03401"" или ""01100"" или ""01150"" или ""01300"" или ""01350""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида ПИ в Разделе 5'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	КодыВидаПИСтр = "03100,03200,03401,01100,01150,01300,01350";
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст10Гр03.Свойство("ПорядокСтраницы"), Р5Ст10Гр03.ПорядокСтраницы, 0);
	
	ДанныеРаздела = Раздел5.Скопировать();
	//ДанныеРаздела.Свернуть("НомерСтраницы," + КолонкиДляСворачивания(УровеньОбхода) + Р5Ст10Гр03.Имя);
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст10Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р5Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р5Ст10Гр03, Р5Ст10Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		Расшифровка = Р5Ст10Гр03.ЗначениеСтр + " <> " + КодыВидаПИСтр;
		
		Если НЕ КодНайден(Р5Ст10Гр03.Значение, КодыВидаПИСтр) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.2)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 5 должен быть равен КБК в строке 010 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в Разделе 5, отсутствует в Разделе 1. Либо неверно указан КБК в Разделе 5'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р5Ст20Гр03 = ПоказательПоСтроке("Р5Ст20Гр03");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	Раздел1 = мДанныеОтчета.Раздел1;
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст20Гр03.Свойство("ПорядокСтраницы"), Р5Ст20Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст20Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст20Гр03);
		Если НЕ ЗначениеЗаполнено(Р5Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р5Ст20Гр03, Р5Ст20Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		КСВыполнено = Ложь;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			Если Р5Ст20Гр03.Значение = Р1Ст1Гр01.Значение Тогда
				КСВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КСВыполнено Тогда 
			ВнестиПоказательВРасшифровку(Р1Ст1Гр01, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = Р5Ст20Гр03.ЗначениеСтр + " = " + ?(КСВыполнено, Р1Ст1Гр01.ЗначениеСтр, "[...]") ;
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.3)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 5 должен быть равен ""00000000000000000000"" если строка 010 Раздела 5 = ""03400""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан КБК в Разделе 5'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р5Ст20Гр03 = ПоказательПоСтроке("Р5Ст20Гр03");
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст20Гр03.Свойство("ПорядокСтраницы"), Р5Ст20Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст10Гр03.Имя + "," + Р5Ст20Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст20Гр03);
		ВнестиПоказательВРасшифровку(Р5Ст20Гр03, Р5Ст20Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст10Гр03);
		ВнестиПоказательВРасшифровку(Р5Ст10Гр03, Р5Ст10Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		Расшифровка = ПредставлениеДляРасшифровки(Р5Ст20Гр03.ЗначениеСтр) + " = ""00000000000000000000"", когда "
			+ ПредставлениеДляРасшифровки(Р5Ст10Гр03.ЗначениеСтр) + " = ""03400""";
		
		КСВыполнено = (Р5Ст20Гр03.Значение = "00000000000000000000");
		УсловиеВыполнено = (Р5Ст10Гр03.Значение = "03400");
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КСВыполнено) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.4)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 020 Раздела 5 должен быть отличен от ""18210701011011000110"" или ""18210701012011000110"" или ""18210701013011000110"" или ""18210701060011000110""'");
	ОписаниеОшибки  = НСтр("ru='Неверно указан КБК в Разделе 5'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р5Ст20Гр03 = ПоказательПоСтроке("Р5Ст20Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	КодКБКСтр = "18210701011011000110,18210701012011000110,18210701013011000110,18210701060011000110";
	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст20Гр03.Свойство("ПорядокСтраницы"), Р5Ст20Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст20Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст20Гр03);		
		Если НЕ ЗначениеЗаполнено(Р5Ст20Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р5Ст20Гр03, Р5Ст20Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
	
		Расшифровка = ПредставлениеДляРасшифровки(Р5Ст20Гр03.ЗначениеСтр) + " <> " + КодКБКСтр;
		
		Если НЕ КодНайден(Р5Ст20Гр03.Значение, КодКБКСтр) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.5)'");
	ОписаниеКС      = НСтр("ru='Налоговая ставка в строке 040 Раздела 5 должна быть равна 0 или 3,8 или 4,0 или 4,8 или 5,5 или 6,0 или 6,5 или 7,5 или 8,0'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой ставки в Разделе 5'");
	Нарушение       = НСтр("ru='ст.342 НК РФ'");
	
	Ставки = Новый Массив;
	Ставки.Добавить(0);
	Ставки.Добавить(3.8); 
	Ставки.Добавить(4.0); 
	Ставки.Добавить(4.8); 
	Ставки.Добавить(5.5); 
	Ставки.Добавить(6.0); 
	Ставки.Добавить(6.5); 
	Ставки.Добавить(7.5); 
	Ставки.Добавить(8.0);
	
	Р5Ст40Гр03 = ПоказательПоСтроке("Р5Ст40Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст40Гр03.Свойство("ПорядокСтраницы"), Р5Ст40Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст40Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст40Гр03);		
		Если НЕ ЗначениеЗаполнено(Р5Ст40Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р5Ст40Гр03, Р5Ст40Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
	
		Расшифровка = Р5Ст40Гр03.ЗначениеСтр + " = {0; 3,8; 4,0; 4,8; 5,5; 6,0; 6,5; 7,5; 8,0}";
		
		Если Ставки.Найти(Р5Ст40Гр03.Значение) <> Неопределено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.6)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО по строке 050 Раздела 5 должен быть равен ОКТМО в строке 020 Раздела 1'");
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в Разделе 5, отсутствует в Разделе 1. Либо неверно указан ОКТМО в Разделе 5'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");
	
	Р5Ст50Гр03 = ПоказательПоСтроке("Р5Ст50Гр03");
	Р1Ст2Гр01 = ПоказательПоСтроке("Р1Ст2Гр01");
	Раздел1 = мДанныеОтчета.Раздел1;
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000102_");
	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст50Гр03.Свойство("ПорядокСтраницы"), Р5Ст50Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст50Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст50Гр03);		
		Если НЕ ЗначениеЗаполнено(Р5Ст50Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р5Ст50Гр03, Р5Ст50Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		КСВыполнено = Ложь;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст2Гр01, Инд);
			
			Если Р5Ст50Гр03.Значение = Р1Ст2Гр01.Значение Тогда
				КСВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КСВыполнено Тогда 
			ВнестиПоказательВРасшифровку(Р1Ст2Гр01, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = Р5Ст50Гр03.ЗначениеСтр + " = " + ?(КСВыполнено, Р1Ст2Гр01.ЗначениеСтр, "[...]") ;
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.7)'");
	ОписаниеКС      = НСтр("ru='Стоимость единицы добытого полезного ископаемого по строке 070 Раздела 5.2 должна быть равна (Выручка по строке 100 раздела 5.2 - Расходы по строке 120 Раздела 5.2) / Количество реализованного добытого полезного ископаемого по строке 090 Раздела 5.2, если Код вида добытого полезного ископаемого по строке 010 раздела 5.2 не равно ""13001"" - ""13008"" или ""11301"" - ""11310"" или ""12001"" - ""12007"" и строка 110 раздела 5.2 не заполнена'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении стоимости единицы полезного ископаемого (возможна арифметическая ошибка) в Разделе 5.2'");
	Нарушение       = НСтр("ru='ст.340 НК РФ'");
	
	КодВидаПИСтр = "13001,13002,13003,13004,13005,13006,13007,13008,11301,11302,11303,11304,11305,11306,11307,11308,11309,11310,12001,12002,12003,12004,12005,12006,12007";
	
	Р5Ст70Гр03 = ПоказательПоСтроке("Р5Ст70Гр03");
	Р5Ст100Гр03 = ПоказательПоСтроке("Р5Ст100Гр03");
	Р5Ст120Гр03 = ПоказательПоСтроке("Р5Ст120Гр03");
	Р5Ст90Гр03 = ПоказательПоСтроке("Р5Ст90Гр03");
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	Р5Ст110Гр03 = ПоказательПоСтроке("Р5Ст110Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст70Гр03.Свойство("ПорядокСтраницы"), Р5Ст70Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст70Гр03.Имя + "," + Р5Ст100Гр03.Имя + "," + Р5Ст120Гр03.Имя + ","
		+ Р5Ст90Гр03.Имя + "," + Р5Ст10Гр03.Имя + "," + Р5Ст110Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст70Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст100Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст120Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст90Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст10Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст110Гр03);
	
		ВнестиПоказательВРасшифровку(Р5Ст70Гр03, Р5Ст70Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст100Гр03, Р5Ст100Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст120Гр03, Р5Ст120Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст90Гр03, Р5Ст90Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст10Гр03, Р5Ст10Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст110Гр03, Р5Ст110Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		Если Р5Ст90Гр03.Значение = 0 Тогда
			ЗначениеПравойЧасти = 0;
		Иначе
			ЗначениеПравойЧасти = (Р5Ст100Гр03.Значение - Р5Ст120Гр03.Значение) / Р5Ст90Гр03.Значение;
		КонецЕсли;
		
		КС = ПоказателиКС(Р5Ст70Гр03.Значение, ЗначениеПравойЧасти);
		Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р5Ст100Гр03.ЗначениеСтр + " - " + Р5Ст120Гр03.ЗначениеСтр + ") / " + Р5Ст90Гр03.ЗначениеСтр
			+ " Итог [" + КС.ПраваяЧастьСтр + "], когда " + Р5Ст10Гр03.ЗначениеСтр
			+ " <> ""13001"" - ""13008"" или ""11301"" - ""11310"" или ""12001"" - ""12007"" и " + Р5Ст110Гр03.ЗначениеСтр + " = 0";
		
		УсловиеВыполнено = (НЕ КодНайден(Р5Ст10Гр03.Значение, КодВидаПИСтр)) И (НЕ ЗначениеЗаполнено(Р5Ст110Гр03.Значение));
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.8)'");
	ОписаниеКС      = НСтр("ru='Стоимость единицы добытого полезного ископаемого по строке 070 Раздела 5.2 должна быть равна Доля содержания по строке 080 раздела 5.2 х (Выручка по строке 100 раздела 5.2 - Расходы по строке 120 Раздела 5.2 - расходы по аффинажу по строке 130 раздела 5.2) / Количество реализованного добытого полезного ископаемого по строке 090 Раздела 5.2, если Код вида добытого полезного ископаемого по строке 010 раздела 5.2 равен ""13001"" - ""13008"" и строка 110 раздела 5.2 не заполнена'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении стоимости единицы полезного ископаемого (возможна арифметическая ошибка) в Разделе 5.2'");
	Нарушение       = НСтр("ru='ст.340 НК РФ'");
	
	Р5Ст70Гр03 = ПоказательПоСтроке("Р5Ст70Гр03");
	Р5Ст80Гр03 = ПоказательПоСтроке("Р5Ст80Гр03");
	Р5Ст100Гр03 = ПоказательПоСтроке("Р5Ст100Гр03");
	Р5Ст120Гр03 = ПоказательПоСтроке("Р5Ст120Гр03");
	Р5Ст130Гр03 = ПоказательПоСтроке("Р5Ст130Гр03");
	Р5Ст90Гр03 = ПоказательПоСтроке("Р5Ст90Гр03");
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	Р5Ст110Гр03 = ПоказательПоСтроке("Р5Ст110Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	КодВидаПИСтр = "13001,13002,13003,13004,13005,13006,13007,13008";
	
	//Определяем уровень обхода
	УровеньОбхода = ?(Р5Ст70Гр03.Свойство("ПорядокСтраницы"), Р5Ст70Гр03.ПорядокСтраницы, 0);
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст70Гр03.Имя + "," + Р5Ст80Гр03.Имя + "," + Р5Ст100Гр03.Имя + ","
		+ Р5Ст120Гр03.Имя + "," + Р5Ст130Гр03.Имя + "," + Р5Ст90Гр03.Имя + "," + Р5Ст10Гр03.Имя + "," + Р5Ст110Гр03.Имя);
	
	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст70Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст80Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст100Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст120Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст130Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст90Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст10Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст110Гр03);
	
		ВнестиПоказательВРасшифровку(Р5Ст70Гр03, Р5Ст70Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст80Гр03, Р5Ст80Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст100Гр03, Р5Ст100Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст120Гр03, Р5Ст120Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст130Гр03, Р5Ст130Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст90Гр03, Р5Ст90Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст10Гр03, Р5Ст10Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		ВнестиПоказательВРасшифровку(Р5Ст110Гр03, Р5Ст110Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных));
		
		Если Р5Ст90Гр03.Значение = 0 Тогда
			ЗначениеПравойЧасти = 0;
		Иначе
			ЗначениеПравойЧасти = Р5Ст80Гр03.Значение * (Р5Ст100Гр03.Значение - Р5Ст120Гр03.Значение - Р5Ст130Гр03.Значение) / Р5Ст90Гр03.Значение;
		КонецЕсли;
		
		КС = ПоказателиКС(Р5Ст70Гр03.Значение, ЗначениеПравойЧасти);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р5Ст80Гр03.ЗначениеСтр + " * (" + Р5Ст100Гр03.ЗначениеСтр + " - " + Р5Ст120Гр03.ЗначениеСтр
			+ " - " + Р5Ст130Гр03.ЗначениеСтр + ") / " + Р5Ст90Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда "
			+ Р5Ст10Гр03.ЗначениеСтр + " = ""13001"" - ""13008"" и " + Р5Ст110Гр03.ЗначениеСтр + " = 0";
		
		УсловиеВыполнено = (КодНайден(Р5Ст10Гр03.Значение, КодВидаПИСтр)) И (НЕ ЗначениеЗаполнено(Р5Ст110Гр03.Значение));
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_5_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 5 (КС 5.9)'");
	ОписаниеКС      = НСтр("ru='Налоговая база по строке 140 Раздела 5.2 должна быть равна сумме значений графы 2 раздела 5.1 с кодом основания по графе 1 Раздела 5.1 = ""2000"" или ""4000"" х Стоимость единицы добытого полезного ископаемого по строке 070 раздела 5.2'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налоговой базы (возможна арифметическая ошибка) в Разделе 5.2'");
	Нарушение       = НСтр("ru='ст.340 НК РФ'");
	
	Р5Ст140Гр03 = ПоказательПоСтроке("Р5Ст140Гр03");
	Р5Ст1Гр02_2к = ПоказательПоСтроке("Р5Ст1Гр02");
	Р5Ст1Гр02_4к = ПоказательПоСтроке("Р5Ст1Гр02");
	Р5Ст1Гр01 = ПоказательПоСтроке("Р5Ст1Гр01");
	Р5Ст70Гр03 = ПоказательПоСтроке("Р5Ст70Гр03");
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р5Ст140Гр03.Свойство("ПорядокСтраницы"), Р5Ст140Гр03.ПорядокСтраницы, 0), 
		?(Р5Ст70Гр03.Свойство("ПорядокСтраницы"), Р5Ст70Гр03.ПорядокСтраницы, 0));
	УровеньОбходаПодраздела =  Макс(?(Р5Ст1Гр02_2к.Свойство("ПорядокСтраницы"), Р5Ст1Гр02_2к.ПорядокСтраницы, 0),
		?(Р5Ст1Гр01.Свойство("ПорядокСтраницы"), Р5Ст1Гр01.ПорядокСтраницы, 0));
		
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст140Гр03.Имя + "," + Р5Ст70Гр03.Имя);
		
	ДанныеПодРаздела = Раздел5.Скопировать();
	ДанныеПодРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбходаПодраздела) + Р5Ст140Гр03.Имя
		+ "," + "П000510000102_Инд" + "," + "П000510000102" + ","
		+ "П000510000101_Инд" + "," + "П000510000101"
		+ "," + Р5Ст70Гр03.Имя);

	Для Каждого СтрокаДанных Из ДанныеРаздела Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст70Гр03);
		ВставитьЗначениеПоказателя(СтрокаДанных, Р5Ст140Гр03);
		
		НомерСтраницыСтр = НомерСтраницыПоКолонкам(СтрокаДанных, Р5Ст140Гр03.ПорядокСтраницы);
		ВнестиПоказательВРасшифровку(Р5Ст140Гр03, Р5Ст140Гр03.Раздел, НомерСтраницыСтр);
		СуммироватьМнЧ(Раздел5, Р5Ст1Гр02_2к, Новый Структура("НомМнУ1,П000510000101", Число(НомерСтраницыСтр), "2000"));
		СуммироватьМнЧ(Раздел5, Р5Ст1Гр02_4к, Новый Структура("НомМнУ1,П000510000101", Число(НомерСтраницыСтр), "4000"));
		
		ВнестиПоказательВРасшифровку(Р5Ст70Гр03, Р5Ст70Гр03.Раздел, НомерСтраницыПоКолонкам(СтрокаДанных, Р5Ст70Гр03.ПорядокСтраницы));
		
		КС = ПоказателиКС(Р5Ст140Гр03.Значение, (Р5Ст1Гр02_2к.Значение + Р5Ст1Гр02_4к.Значение) * Р5Ст70Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = (" + Р5Ст1Гр02_2к.ЗначениеСтр + " + " + Р5Ст1Гр02_4к.ЗначениеСтр + ") * " + Р5Ст70Гр03.ЗначениеСтр
			+ " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.1)'");
	ОписаниеКС      = НСтр("ru='Сумма прямых расходов по строке 040 Раздела 6.1 должна быть равна сумме Прямых расходов по строке 010 Раздела 6.1 и Остатка незавершенного производства на начало периода по строке 020 Раздела 6.1 за минусом Остатка незавершенного производства на конец периода по строке 030 Раздела 6.1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы прямых расходов, относящихся к добытым полезным ископаемым'");
	Нарушение       = НСтр("ru='п.4 ст.340 НК РФ'");
	
	Р6Ст40Гр03 = ПоказательПоСтроке("Р6Ст40Гр03");
	Р6Ст10Гр03 = ПоказательПоСтроке("Р6Ст10Гр03");
	Р6Ст20Гр03 = ПоказательПоСтроке("Р6Ст20Гр03");
	Р6Ст30Гр03 = ПоказательПоСтроке("Р6Ст30Гр03");
	Раздел6 = мДанныеОтчета.Раздел6;
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст40Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст10Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст20Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст30Гр03);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р6Ст40Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст10Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст20Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст30Гр03, "Раздел6");
	
	КС = ПоказателиКС(Р6Ст40Гр03.Значение, Р6Ст10Гр03.Значение + Р6Ст20Гр03.Значение - Р6Ст30Гр03.Значение);
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р6Ст10Гр03.ЗначениеСтр + " + " + Р6Ст20Гр03.ЗначениеСтр + " - " + Р6Ст30Гр03.ЗначениеСтр
		+ " Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.2)'");
	ОписаниеКС      = НСтр("ru='Сумма косвенных и иных расходов по строке 090 раздела 6.1 должна быть равна сумме Внереализационных расходов по строке 050 Раздела 6.1, Косвенных расходов по строке 060 Раздела 6.1, Косвенных расходов по строке 070 раздела 6.1 * Общую сумму прямых расходов по строке 080 Раздела 6.1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы косвенных и иных расходов, относящихся к добытым полезным ископаемым'");
	Нарушение       = НСтр("ru='п.4 ст.340 НК РФ'");
	
	Р6Ст90Гр03 = ПоказательПоСтроке("Р6Ст90Гр03");
	Р6Ст50Гр03 = ПоказательПоСтроке("Р6Ст50Гр03");
	Р6Ст60Гр03 = ПоказательПоСтроке("Р6Ст60Гр03");
	Р6Ст70Гр03 = ПоказательПоСтроке("Р6Ст70Гр03");
	Р6Ст10Гр03 = ПоказательПоСтроке("Р6Ст10Гр03");
	Р6Ст80Гр03 = ПоказательПоСтроке("Р6Ст80Гр03");
	Раздел6 = мДанныеОтчета.Раздел6;
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст90Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст50Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст60Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст70Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст10Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст80Гр03);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р6Ст90Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст50Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст60Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст70Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст10Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст80Гр03, "Раздел6");
	
	РасчетнаяСумма = Р6Ст50Гр03.Значение + Р6Ст60Гр03.Значение;
	Если ЗначениеЗаполнено(Р6Ст80Гр03.Значение) Тогда
		РасчетнаяСумма = РасчетнаяСумма + Р6Ст70Гр03.Значение * Р6Ст10Гр03.Значение / Р6Ст80Гр03.Значение;
	КонецЕсли;
	
	КС = ПоказателиКС(Р6Ст90Гр03.Значение, РасчетнаяСумма);
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р6Ст50Гр03.ЗначениеСтр + " + " + Р6Ст60Гр03.ЗначениеСтр + " + " 
		+ Р6Ст70Гр03.ЗначениеСтр + " * " + Р6Ст10Гр03.ЗначениеСтр + " / " + Р6Ст80Гр03.ЗначениеСтр + " Итог [" 
		+ КС.ПраваяЧастьСтр + "]";
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.3)'");
	ОписаниеКС      = НСтр("ru='Общая сумма расходов по строке 100 Раздела 6.1 должна быть равна сумме прямых расходов по строке 040 Раздела 6.1 и сумме косвенных и иных расходов по строке 090 Раздела 6.1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении общей суммы расходов по добыче полезных ископаемых'");
	Нарушение       = НСтр("ru='п.4 ст.340 НК РФ'");
	
	Р6Ст100Гр03 = ПоказательПоСтроке("Р6Ст100Гр03");
	Р6Ст40Гр03 = ПоказательПоСтроке("Р6Ст40Гр03");
	Р6Ст90Гр03 = ПоказательПоСтроке("Р6Ст90Гр03");
	Раздел6 = мДанныеОтчета.Раздел6;
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст100Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст40Гр03);
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст90Гр03);
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	ВнестиПоказательВРасшифровку(Р6Ст100Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст40Гр03, "Раздел6");
	ВнестиПоказательВРасшифровку(Р6Ст90Гр03, "Раздел6");
	
	КС = ПоказателиКС(Р6Ст100Гр03.Значение, Р6Ст40Гр03.Значение + Р6Ст90Гр03.Значение);
	Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р6Ст40Гр03.ЗначениеСтр + " + " + Р6Ст90Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.4)'");
	ОписаниеКС      = НСтр("ru='Общая сумма по графе 3 Раздела 6.2 должна быть равна 1'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении доли добытого полезного ископаемого в общем количестве добытых полезных ископаемых'");
	Нарушение       = НСтр("ru='ст.340 НК РФ'");
	
	Р6Ст1Гр03 = ПоказательПоСтроке("Р6Ст1Гр03");
	Раздел6 = мДанныеОтчета.Раздел6;
	
	Если НЕ РазделЗаполненСИсключениями(Раздел6,,) Тогда
		Возврат;
	КонецЕсли;			                        
	
	СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
	ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел6, "П000620000101_");
	СуммаР6Ст1Гр03 = 0;
	СуммаР6Ст1Гр03Стр = "";
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр03, Инд);
		ВнестиПоказательВРасшифровку(Р6Ст1Гр03, "Раздел6", );
		СуммаР6Ст1Гр03 = СуммаР6Ст1Гр03 + Р6Ст1Гр03.Значение;
		СуммаР6Ст1Гр03Стр = СуммаР6Ст1Гр03Стр + Р6Ст1Гр03.ЗначениеСтр + " + ";
		
	КонецЦикла;
	
	КС = ПоказателиКС(СуммаР6Ст1Гр03, 1);
	Расшифровка = РасшифровкаВСтр(СуммаР6Ст1Гр03Стр) + " Итог [" + КС.ЛеваяЧастьСтр + "] = " + КС.ПраваяЧастьСтр;
	
	Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
		ЭтоОшибка = Ложь;
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		
	Иначе
		ЭтоОшибка = Истина;
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		
	КонецЕсли;
	
	ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
	
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
	СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.5)'");
	ОписаниеКС      = НСтр("ru='Сумма расходов по добыче полезного ископаемого в графе 4 Раздела 6.2 должна быть равна произведению Общей суммы расходов по строке 100 Раздела 6.1 и соответствующей строки графы 3 Раздела 6.2, если значение рассчитываемой строки графы 2 Раздела 6.2 заполнено и отлично от нуля'");
	ОписаниеОшибки  = НСтр("ru='Ошибка при определении расходов по добыче полезного ископаемого'");
	Нарушение       = НСтр("ru='ст.340 НК РФ'");
	
	Р6Ст1Гр04 = ПоказательПоСтроке("Р6Ст1Гр04");
	Р6Ст100Гр03 = ПоказательПоСтроке("Р6Ст100Гр03");
	Р6Ст1Гр03 = ПоказательПоСтроке("Р6Ст1Гр03");
	Р6Ст1Гр02 = ПоказательПоСтроке("Р6Ст1Гр02");
	Раздел6 = мДанныеОтчета.Раздел6;
	ВставитьЗначениеПоказателя(Раздел6, Р6Ст100Гр03);
	
	КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел6, "П000620000102_");
	Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

		ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр04, Инд);
		ВнестиПоказательВРасшифровку(Р6Ст1Гр04, "Раздел6", );
		
		ВнестиПоказательВРасшифровку(Р6Ст100Гр03, "Раздел6");
		
		ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр03, Инд);
		ВнестиПоказательВРасшифровку(Р6Ст1Гр03, "Раздел6", );
		
		ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр02, Инд);
		ВнестиПоказательВРасшифровку(Р6Ст1Гр02, "Раздел6", );
		
		КС = ПоказателиКС(Р6Ст1Гр04.Значение, Р6Ст100Гр03.Значение * Р6Ст1Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р6Ст100Гр03.ЗначениеСтр + " * " + Р6Ст1Гр03.ЗначениеСтр + " Итог[" + КС.ПраваяЧастьСтр
			+ "], когда " + Р6Ст1Гр02.ЗначениеСтр + " <> 0";
		
		УсловиеВыполнено = ЗначениеЗаполнено(Р6Ст1Гр02.Значение) И (Р6Ст1Гр02.Значение <> 0);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_6_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 6 (КС 6.6)'");
	ОписаниеКС      = НСтр("ru='Сумма расходов по графе 2 Раздела 6.2 должна быть равна Количеству добытого полезного ископаемого в графе 2 Раздела 5.1, если значение в графе 2 Раздела 6.2 заполнено и не равно нулю и Код добытого полезного ископаемого в соответствующей графе 1 Раздела 6.2 должен быть равен Коду вида в строке 010 Раздела 5'");
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при опредлении количества добытого полезного ископаемого'");
	Нарушение       = НСтр("ru='ст.339 НК РФ'");
	
	Р6Ст1Гр02 = ПоказательПоСтроке("Р6Ст1Гр02");
	Р5Ст1Гр02 = ПоказательПоСтроке("Р5Ст1Гр02");
	Р6Ст1Гр02 = ПоказательПоСтроке("Р6Ст1Гр02");
	Р6Ст1Гр01 = ПоказательПоСтроке("Р6Ст1Гр01");
	Р5Ст10Гр03 = ПоказательПоСтроке("Р5Ст10Гр03");
	Раздел6 = мДанныеОтчета.Раздел6;
	Раздел5 = ДанныеМногоуровнегоРаздела("Раздел5");
	
	//Определяем уровень обхода по "младшему" показателю
	УровеньОбхода = Макс(?(Р5Ст1Гр02.Свойство("ПорядокСтраницы"), Р5Ст1Гр02.ПорядокСтраницы, 0), 
		?(Р5Ст10Гр03.Свойство("ПорядокСтраницы"), Р5Ст10Гр03.ПорядокСтраницы, 0));
	ДанныеРаздела = Раздел5.Скопировать();
	ДанныеРаздела.Свернуть(КолонкиДляСворачивания(УровеньОбхода) + Р5Ст10Гр03.Имя + "," + "П000510000102_Инд" + "," + "П000510000102");
	
	МассивКодовПИ = Новый Массив;
	СобратьМассивМногострочныхПоказателей(МассивКодовПИ, Раздел6, "П000620000101_");
	
	Для Каждого КодПИ Из МассивКодовПИ Цикл
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел6, "П000620000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр02, Инд);		
			ВставитьЗначениеМногострочногоПоказателя(Раздел6, Р6Ст1Гр01, Инд);		
			
			Если НЕ ЗначениеЗаполнено(Р6Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КодПИ <> Р6Ст1Гр01.Значение Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

			ВнестиПоказательВРасшифровку(Р6Ст1Гр02, "Раздел6", );
			ВнестиПоказательВРасшифровку(Р6Ст1Гр01, "Раздел6", );
			
			СуммироватьМнЧ(Раздел5, Р5Ст1Гр02, Новый Структура(Р5Ст10Гр03.Имя, Р6Ст1Гр01.Значение));
			
			КС = ПоказателиКС(Р6Ст1Гр02.Значение, Р5Ст1Гр02.Значение);
			Расшифровка = КС.ЛеваяЧастьСтр + " = " + КС.ПраваяЧастьСтр;
			
			УсловиеВыполнено = ЗначениеЗаполнено(Р5Ст1Гр02.Значение) И (Р5Ст1Гр02.Значение <> 0);
			Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
				ОписаниеОшибки, Нарушение, );
			
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
			СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_1(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.1)'");
	ОписаниеКС      = НСтр("ru='КБК по строке 010 Раздела 7 должен быть равен КБК, указанному в строке 010 Раздела 1'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='КБК, указанный в Разделе 7, отсутствует в Разделе 1. Либо неверно указан КБК в Разделе 7'");
	
	Р7Ст10Гр03 = ПоказательПоСтроке("Р7Ст10Гр03");
	Р1Ст1Гр01 = ПоказательПоСтроке("Р1Ст1Гр01");
 	Раздел7 = мДанныеОтчета.Раздел7;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст10Гр03);
		Если НЕ ЗначениеЗаполнено(Р7Ст10Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р7Ст10Гр03, "Раздел7", НомерСтраницыСтр);
		
		СоотношениеВыполнено = Ложь;
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(Раздел1, "П000100000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр01, Инд);
			
			Если Р7Ст10Гр03.Значение = Р1Ст1Гр01.Значение Тогда
				ВнестиПоказательВРасшифровку(Р1Ст1Гр01, Р1Ст1Гр01.Раздел, );
				СоотношениеВыполнено = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СоотношениеВыполнено Тогда
			Расшифровка = Р7Ст10Гр03.ЗначениеСтр + " = " + Р1Ст1Гр01.ЗначениеСтр;
			
		Иначе
			Расшифровка = Р7Ст10Гр03.ЗначениеСтр + " = [нет соответствующего КБК]";
			
		КонецЕсли;
		
		Если СоотношениеВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_10(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.10)'");
	ОписаниеКС      = НСтр("ru='Остаток неучтенных при определении налогового вычета расходов по строке 160 Раздела 7.2 должен быть равен Остаток неучтенных при определении налогового вычета расходов на начало налогового периода по строке 060 Раздела 7.2 + Сумма расходов по строке 070 Раздела 7.2 - Сумма расходов по строке 110 Раздела 7.2'");
	Нарушение       = НСтр("ru='ст.343.1 НК РФ'");		
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении остатка неучтенных при определении налогового вычета расходов'");
	
	Р7Ст160Гр03 = ПоказательПоСтроке("Р7Ст160Гр03");
	Р7Ст60Гр03 = ПоказательПоСтроке("Р7Ст60Гр03");
	Р7Ст70Гр03 = ПоказательПоСтроке("Р7Ст70Гр03");
	Р7Ст110Гр03 = ПоказательПоСтроке("Р7Ст110Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
	
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст160Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст110Гр03);
		
		ВнестиПоказательВРасшифровку(Р7Ст160Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст60Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст70Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст110Гр03, "Раздел7", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р7Ст160Гр03.Значение, Р7Ст60Гр03.Значение + Р7Ст70Гр03.Значение - Р7Ст110Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р7Ст60Гр03.ЗначениеСтр + " + " + Р7Ст70Гр03.ЗначениеСтр + " - " + Р7Ст110Гр03.Значение
			+ " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_11(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.11)'");
	ОписаниеКС      = НСтр("ru='Раздел 7 (КС 7.11). Остаток суммы налогового вычета на конец налогового периода по строке 210 должен быть равен Сумме налогового вычета по строке 180 Раздела 7.3 за вычетом Суммы налогового вычета по строкам 190 и 200 Раздела 7.3'");
	Нарушение       = НСтр("ru='п.4 ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы расходов, включаемых в налоговый вычет'");
	
	Р73Ст1Гр05 = ПоказательПоСтроке("Р73Ст1Гр05");
	Р73Ст1Гр02 = ПоказательПоСтроке("Р73Ст1Гр02");
	Р73Ст1Гр03 = ПоказательПоСтроке("Р73Ст1Гр03");
	Р73Ст1Гр04 = ПоказательПоСтроке("Р73Ст1Гр04");

	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
	
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000730000105_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);

			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р73Ст1Гр05, Инд);
			ВнестиПоказательВРасшифровку(Р73Ст1Гр05, "Раздел7", НомерСтраницыСтр);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р73Ст1Гр02, Инд);
			ВнестиПоказательВРасшифровку(Р73Ст1Гр02, "Раздел7", НомерСтраницыСтр);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р73Ст1Гр03, Инд);
			ВнестиПоказательВРасшифровку(Р73Ст1Гр03, "Раздел7", НомерСтраницыСтр);
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р73Ст1Гр04, Инд);
			ВнестиПоказательВРасшифровку(Р73Ст1Гр04, "Раздел7", НомерСтраницыСтр);
			
			КС = ПоказателиКС(Р73Ст1Гр05.Значение, Р73Ст1Гр02.Значение - Р73Ст1Гр03.Значение - Р73Ст1Гр04.Значение);
			Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р73Ст1Гр02.ЗначениеСтр + " - " + Р73Ст1Гр03.ЗначениеСтр + " - " + Р73Ст1Гр04.ЗначениеСтр
				+ " Итог [" + КС.ПраваяЧастьСтр + "]";
			
			Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
			
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
			СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_2(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.2)'");
	ОписаниеКС      = НСтр("ru='Код единицы измерения в строке 030 Раздела 7 должен быть равен ""168""'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Необходимо проверить правильность указания кода по ОКЕИ в Разделе 7'");
	
	Р7Ст30Гр03 = ПоказательПоСтроке("Р7Ст30Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст30Гр03);	
		Если НЕ ЗначениеЗаполнено(Р7Ст30Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р7Ст30Гр03, "Раздел7", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р7Ст30Гр03.Значение, "168");
		Расшифровка = ПредставлениеДляРасшифровки(КС.ЛеваяЧастьСтр) + " = ""168""";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_3(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.3)'");
	ОписаниеКС      = НСтр("ru='Код по ОКТМО в строке 040 Раздела 7 должен быть равен коду по ОКТМО в строке 020 Раздела 1'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='ОКТМО, указанный в Разделе 7, отсутствует в Разделе 1. Либо неверно указан ОКТМО в Разделе 7'");
	
	Р7Ст40Гр03 = ПоказательПоСтроке("Р7Ст40Гр03");
	Р1Ст1Гр02 = ПоказательПоСтроке("Р1Ст1Гр02");
	Раздел7 = мДанныеОтчета.Раздел7;
	Раздел1 = мДанныеОтчета.Раздел1;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст40Гр03);		
		Если НЕ ЗначениеЗаполнено(Р7Ст40Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р7Ст40Гр03, "Раздел7", НомерСтраницыСтр);
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000100000101_");
		КСВыполнено = Ложь;
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(Раздел1, Р1Ст1Гр02, Инд);
			Если Р7Ст40Гр03.Значение = Р1Ст1Гр02.Значение Тогда
				КСВыполнено = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КСВыполнено Тогда 
			ВнестиПоказательВРасшифровку(Р1Ст1Гр02, "Раздел1", );
		КонецЕсли;
		
		Расшифровка = Р7Ст40Гр03.ЗначениеСтр + " = " + ?(КСВыполнено, Р1Ст1Гр02.ЗначениеСтр, "[...]") ;
		
		Если КСВыполнено Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_4(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.4)'");
	ОписаниеКС      = НСтр("ru='Код вида добытого полезного ископаемого в графе 1 Раздела 7.1 должен быть равен ""01100"" или ""01150"" или ""01300"" или ""01350""'");
	Нарушение       = НСтр("ru='ст.80 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Неверно указан код вида полезных ископаемых в Разделе 7.1'");
	
	Р71Ст1Гр01 = ПоказательПоСтроке("Р71Ст1Гр01");
	Раздел7 = мДанныеОтчета.Раздел7;
	КодыВидаПИСтр = "01100,01150,01300,01350";
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, "П000710000101_");
		Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
			ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Р71Ст1Гр01, Инд);
			Если НЕ ЗначениеЗаполнено(Р71Ст1Гр01.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
						
			ВнестиПоказательВРасшифровку(Р71Ст1Гр01, "Раздел7", НомерСтраницыСтр);
			
			Расшифровка = ПредставлениеДляРасшифровки(Р71Ст1Гр01.ЗначениеСтр) + " = " + КодыВидаПИСтр;
			
			Если КодНайден(Р71Ст1Гр01.Значение, КодыВидаПИСтр) Тогда
				ЭтоОшибка = Ложь;
				ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
				
			Иначе
				ЭтоОшибка = Истина;
				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				
			КонецЕсли;
			
			ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
			
			СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
			СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
			СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
			
		КонецЦикла;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_5(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.5)'");
	ОписаниеКС      = НСтр("ru='Сумма расходов в строке 070 Раздела 7.2 должна быть равна сумме расходов по строкам 080, 090 и 100 Раздела 7.2'");
	Нарушение       = НСтр("ru='ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы расходов, связанных с обеспечением безопасных условий и охраны труда'");
	
	Р7Ст70Гр03 = ПоказательПоСтроке("Р7Ст70Гр03");
	Р7Ст80Гр03 = ПоказательПоСтроке("Р7Ст80Гр03");
	Р7Ст90Гр03 = ПоказательПоСтроке("Р7Ст90Гр03");
	Р7Ст100Гр03 = ПоказательПоСтроке("Р7Ст100Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст80Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст90Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст100Гр03);
	
		ВнестиПоказательВРасшифровку(Р7Ст70Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст80Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст90Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст100Гр03, "Раздел7", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р7Ст70Гр03.Значение, Р7Ст80Гр03.Значение + Р7Ст90Гр03.Значение + Р7Ст100Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р7Ст80Гр03.ЗначениеСтр + " + " + Р7Ст90Гр03.ЗначениеСтр + " + " + Р7Ст100Гр03.ЗначениеСтр
			+ " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_6(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.6)'");
	ОписаниеКС      = НСтр("ru='Сумма расходов в строке 110 Раздела 7.2 должна быть равна Остаток неучтенных при определении налогового вычета расходов на начало налогового периода по строке 060 Раздела 7.2 + Сумма расходов по строке 070 Раздела 7.2, если результат суммирования <= Предельной величине налогового вычета по строке 140 Раздела 7.2'");
	Нарушение       = НСтр("ru='ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении налогового вычета'");
	
	Р7Ст110Гр03 = ПоказательПоСтроке("Р7Ст110Гр03");
	Р7Ст60Гр03 = ПоказательПоСтроке("Р7Ст60Гр03");
	Р7Ст70Гр03 = ПоказательПоСтроке("Р7Ст70Гр03");
	Р7Ст140Гр03 = ПоказательПоСтроке("Р7Ст140Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст110Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст60Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст70Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст140Гр03);
		
		ВнестиПоказательВРасшифровку(Р7Ст110Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст60Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст70Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст140Гр03, "Раздел7", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р7Ст110Гр03.Значение, Р7Ст60Гр03.Значение + Р7Ст70Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р7Ст60Гр03.ЗначениеСтр + " + " + Р7Ст70Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "], когда " + КС.ПраваяЧастьСтр + " <= " + Р7Ст140Гр03.ЗначениеСтр;
		
		УсловиеВыполнено = (КС.ПраваяЧасть <= Р7Ст140Гр03.Значение);
		Если НЕ УсловиеВыполнено ИЛИ (УсловиеВыполнено И КС.ЛеваяЧасть = КС.ПраваяЧасть) Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_7(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.7)'");
	ОписаниеКС      = НСтр("ru='Значение коэффициента Кт в строке 120 Раздела 7.2 должно быть <= 0,3'");
	Нарушение       = НСтр("ru='п.3 ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении коэффициента Кт'");
	
	Р7Ст120Гр03 = ПоказательПоСтроке("Р7Ст120Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст120Гр03);
		Если НЕ ЗначениеЗаполнено(Р7Ст120Гр03.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВнестиПоказательВРасшифровку(Р7Ст120Гр03, "Раздел7", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р7Ст120Гр03.Значение, 0.3);
		Расшифровка = КС.ЛеваяЧастьСтр + " <= " + КС.ПраваяЧастьСтр;
		
		Если КС.ЛеваяЧасть <= КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_8(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.8)'");
	ОписаниеКС      = НСтр("ru='Предельная величина налогового вычета по строке 140 Раздела 7.2 должна быть равна произведению Коэффициента Кт по строке 120 Раздела 7.2 и Суммы исчисленного налога по строке 130 Раздела 7.2'");
	Нарушение       = НСтр("ru='ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении предельной величины налогового вычета'");
	
	Р7Ст140Гр03 = ПоказательПоСтроке("Р7Ст140Гр03");
	Р7Ст120Гр03 = ПоказательПоСтроке("Р7Ст120Гр03");
	Р7Ст130Гр03 = ПоказательПоСтроке("Р7Ст130Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст140Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст120Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст130Гр03);
	
		ВнестиПоказательВРасшифровку(Р7Ст140Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст120Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст130Гр03, "Раздел7", НомерСтраницыСтр);
	
		КС = ПоказателиКС(Р7Ст140Гр03.Значение, Р7Ст120Гр03.Значение * Р7Ст130Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р7Ст120Гр03.ЗначениеСтр + " * " + Р7Ст130Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
			ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьКС_7_9(СтруктураРезультата)
	
	ОбщееЧислоОшибок    = СтруктураРезультата.КоличествоНайденныхОшибок;
	ОбщееЧислоБезОшибок = СтруктураРезультата.КоличествоНайденныхБезОшибок;
	СтруктураОшибок     = СтруктураРезультата.СтруктураОшибок;
	
	ТекстФормулы    = НСтр("ru='Раздел 7 (КС 7.9)'");
	ОписаниеКС      = НСтр("ru='Сумма налога исчисленного по строке 150 Раздела 7.2 должна быть равна Сумма исчисленного налога по строке 130 Раздела 7.2 - Сумма расходов по строке 110 Раздела 7.2'");
	Нарушение       = НСтр("ru='п.3 ст.343.1 НК РФ'");	
	ОписаниеОшибки  = НСтр("ru='Допущена ошибка при определении суммы налога с учетом налогового вычета'");
	
	Р7Ст150Гр03 = ПоказательПоСтроке("Р7Ст150Гр03");
	Р7Ст130Гр03 = ПоказательПоСтроке("Р7Ст130Гр03");
	Р7Ст110Гр03 = ПоказательПоСтроке("Р7Ст110Гр03");
	Раздел7 = мДанныеОтчета.Раздел7;
	
	Для Каждого СтраницаРаздела Из Раздел7 Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
		НомерСтраницыСтр = СтрокаЧГ0(Раздел7.Индекс(СтраницаРаздела) + 1);
		
		СчетчикФормулДляРасшифровок = СчетчикФормулДляРасшифровок + 1;
		ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
		
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст150Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст130Гр03);
		ВставитьЗначениеПоказателя(ДанныеСтраницы, Р7Ст110Гр03);
		
		ВнестиПоказательВРасшифровку(Р7Ст150Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст130Гр03, "Раздел7", НомерСтраницыСтр);
		ВнестиПоказательВРасшифровку(Р7Ст110Гр03, "Раздел7", НомерСтраницыСтр);
		
		КС = ПоказателиКС(Р7Ст150Гр03.Значение, Р7Ст130Гр03.Значение - Р7Ст110Гр03.Значение);
		Расшифровка = КС.ЛеваяЧастьСтр + " = " + Р7Ст130Гр03.ЗначениеСтр + " - " + Р7Ст110Гр03.ЗначениеСтр + " Итог [" + КС.ПраваяЧастьСтр + "]";
		
		Если КС.ЛеваяЧасть = КС.ПраваяЧасть Тогда
			ЭтоОшибка = Ложь;
			ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
			
		Иначе
			ЭтоОшибка = Истина;
			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			
		КонецЕсли;
		
		ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок, ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка,
		ОписаниеОшибки, Нарушение, );
		
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СуммаПодУровня(УровеньСтраницы, Раздел, Параметр, Результат = Неопределено)
	
	ПодУровень = "";
	СуммаПараметра = 0;
	СуммаПараметраСтр = "";
	Для Каждого СтраницаРаздела Из Раздел Цикл
		ДанныеСтраницы = СтраницаРаздела.Данные;
		НомерСтраницыСтр = "";
		Если ДанныеСтраницы.Свойство("НомерСтраницы") Тогда
			НомерСтраницыСтр = ДанныеСтраницы.НомерСтраницы;
		Иначе
			НомерСтраницыСтр = СтрокаЧГ0(Раздел.Индекс(СтраницаРаздела) + 1);
		КонецЕсли;
		
		ПодУровень = Лев(НомерСтраницыМнУ(СтраницаРаздела.Представление, Параметр.ПорядокСтраницы), СтрДлина(УровеньСтраницы));
		Если УровеньСтраницы = ПодУровень Тогда
			Если СтрНайти(Параметр.Имя, "_%1") = 0 Тогда
				ВставитьЗначениеПоказателя(ДанныеСтраницы, Параметр);
				ВнестиПоказательВРасшифровку(Параметр, Параметр.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Параметр.ПорядокСтраницы));
				
				СуммаПараметра = СуммаПараметра + Параметр.Значение;
				СуммаПараметраСтр = СуммаПараметраСтр + Параметр.ЗначениеСтр + " + ";
				
			Иначе
				КолвоСтрокВМногострочнойЧасти = КоличествоСтрок(ДанныеСтраницы, СтрЗаменить(Параметр.Имя, "%1", ""));
				Для Инд = 1 По КолвоСтрокВМногострочнойЧасти Цикл
					ВставитьЗначениеМногострочногоПоказателя(ДанныеСтраницы, Параметр, Инд);
					ВнестиПоказательВРасшифровку(Параметр, Параметр.Раздел, НомерСтраницыМнУ(СтраницаРаздела.Представление, Параметр.ПорядокСтраницы));
					СуммаПараметра = СуммаПараметра + Параметр.Значение;
					СуммаПараметраСтр = СуммаПараметраСтр + Параметр.ЗначениеСтр + " + ";
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура("ОтметкаВыполнения,Значение,ЗначениеСтр", Истина, СуммаПараметра, СуммаПараметраСтр);
		
	Иначе
		Результат.Вставить("ОтметкаВыполнения", Истина);
		СуммаРезультата = 0;
		Результат.Свойство("Значение", СуммаРезультата);
		Результат.Вставить("Значение", СуммаРезультата + СуммаПараметра);
		
		СуммаРезультатаСтр = "";
		Результат.Свойство("ЗначениеСтр", СуммаРезультатаСтр);
		Результат.Вставить("ЗначениеСтр", СуммаРезультатаСтр + СуммаПараметраСтр);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211 = Неопределено, НомерСтраницы)
	
	ОбъединеннаяСтруктура = Новый Структура;
	//ОбъединеннаяСтруктура.Вставить("НомерСтраницы", НомерСтраницы);
	
	Для Каждого ЭлементСтруктуры Из Ветка2.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из Ветка21.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Если Ветка211 <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из Ветка211.Данные Цикл
			ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Представление = НомерСтраницы;
	НоваяСтрока.Данные = ОбъединеннаяСтруктура;
	
КонецПроцедуры

&НаСервере
Функция ДанныеНумерации(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21 = "")
	СтруктураНомераСтраницы = Новый Структура("НомерСтраницы,НомМнУ1,НомМнУ2,НомМнУ3");
	
	Разделитель = ",";
	НомерСтраницы = СтрокаЧГ0(НомСтрокиВДереве);
	Если НомСтрокиВВетке2  <> "" Тогда
		НомерСтраницы = НомерСтраницы + Разделитель + СтрокаЧГ0(НомСтрокиВВетке2);
	КонецЕсли;
	Если НомСтрокиВВетке21  <> "" Тогда
		НомерСтраницы = НомерСтраницы + Разделитель + СтрокаЧГ0(НомСтрокиВВетке21);
	КонецЕсли;
	СтруктураНомераСтраницы.Вставить("НомерСтраницы", НомерСтраницы);
	СтруктураНомераСтраницы.Вставить("НомМнУ1", НомСтрокиВДереве);
	СтруктураНомераСтраницы.Вставить("НомМнУ2", НомСтрокиВВетке2);
	Если НомСтрокиВВетке21 <> "" Тогда
		СтруктураНомераСтраницы.Вставить("НомМнУ3", НомСтрокиВВетке21);
	КонецЕсли;
	
	Возврат СтруктураНомераСтраницы;
	
КонецФункции

&НаСервере
Функция НомерСтраницыПоКолонкам(СтрокаДанных, ПорядокСтраницы = Неопределено)
	
	НомерСтраницы = "";
	Разделитель = ",";
	НомМнУ1 = "";
	НомМнУ2 = "";
	НомМнУ3 = "";
	КолонкиСтроки = СтрокаДанных.Владелец().Колонки;
	Для Каждого Колонка Из КолонкиСтроки Цикл
		ИмяКолонки = Колонка.Имя;
		Если Лев(ИмяКолонки, 7) = "НомМнУ1" Тогда
			НомМнУ1 = СтрокаЧГ0(СтрокаДанных[ИмяКолонки]);
		ИначеЕсли Лев(ИмяКолонки, 7) = "НомМнУ2" Тогда
			НомМнУ2 = СтрокаЧГ0(СтрокаДанных[ИмяКолонки]);
		ИначеЕсли Лев(ИмяКолонки, 7) = "НомМнУ3" Тогда
			НомМнУ3 = СтрокаЧГ0(СтрокаДанных[ИмяКолонки]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НомМнУ1) Тогда
		НомерСтраницы = НомМнУ1;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(НомМнУ2) Тогда
		НомерСтраницы = НомерСтраницы + Разделитель + НомМнУ2;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомМнУ3) Тогда
		НомерСтраницы = НомерСтраницы + Разделитель + НомМнУ3;
	КонецЕсли;
	
	Если ПорядокСтраницы <> Неопределено Тогда
		НомерСтраницы = НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы);
	КонецЕсли;
	
	Возврат НомерСтраницы;
	
КонецФункции

&НаСервере
Функция НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы)
	
	МассивНомеров = СтрРазделить(НомерСтраницы, ",");
	
	Индекс = МассивНомеров.ВГраница();
	Пока Индекс >= ПорядокСтраницы Цикл 
		Если Индекс > ПорядокСтраницы-1 Тогда
			МассивНомеров.Удалить(Индекс);
		КонецЕсли; 
		Индекс = Индекс - 1; 
	КонецЦикла;
	
	Возврат СтрСоединить(МассивНомеров, ",");
		
КонецФункции

&НаСервере
Функция НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21 = "")
	
	Разделитель = ",";
	Возврат СтрокаЧГ0(НомСтрокиВДереве) + Разделитель + СтрокаЧГ0(НомСтрокиВВетке2) + Разделитель + СтрокаЧГ0(НомСтрокиВВетке21);
	
КонецФункции

&НаСервере
Функция ДанныеИзДереваРаздела(ИмяРаздела) Экспорт
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Представление");
	Таблица.Колонки.Добавить("Данные");
	
	Если ИмяРаздела = "Раздел2" Тогда
	КонецЕсли;
	
	Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
		Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
		Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
			Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
			
			Если Ветка21.Строки.Количество() = 0 Тогда
				Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2,);
				ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, , Представление);
				
			Иначе
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка211 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					Представление = НомерСтраницы(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21);
					ДобавитьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211, Представление);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура РазвернутьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211 = Неопределено, НомерСтраницы)
	
	ОбъединеннаяСтруктура = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из НомерСтраницы Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из Ветка2.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из Ветка21.Данные Цикл
		ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	Если Ветка211 <> Неопределено Тогда
		Для Каждого ЭлементСтруктуры Из Ветка211.Данные Цикл
			ОбъединеннаяСтруктура.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ОбъединеннаяСтруктура Цикл
		ИмяПараметра = ЭлементСтруктуры.Ключ;
		Если ЭтоПараметрМнЧ(ИмяПараметра) Тогда
			ИмяКолонки_Инд = ИмяКолонки_Инд_МнЧ(ИмяПараметра);
			Если Таблица.Колонки.Найти(ИмяКолонки_Инд) = Неопределено Тогда
				Таблица.Колонки.Добавить(ИмяКолонки_Инд);
				Таблица.Колонки.Добавить(ИмяКолонки_МнЧ(ИмяПараметра));
				
			КонецЕсли;
			
		Иначе
			Если Таблица.Колонки.Найти(ИмяПараметра) = Неопределено Тогда
				Таблица.Колонки.Добавить(ИмяПараметра);
			
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока = Таблица.Добавить();
	//НоваяСтрока.Представление = НомерСтраницы;
	//НоваяСтрока.Данные = ОбъединеннаяСтруктура;
	Для Каждого ЭлементСтруктуры Из ОбъединеннаяСтруктура Цикл
		ИмяПараметра = ЭлементСтруктуры.Ключ;
		Если ЭтоПараметрМнЧ(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока[ИмяПараметра] = ЭлементСтруктуры.Значение;
		
	КонецЦикла;
	
	МассивИндексов = Новый Массив;
	Для Каждого ЭлементСтруктуры Из ОбъединеннаяСтруктура Цикл
		ИмяПараметра = ЭлементСтруктуры.Ключ;
		Если ЭтоПараметрМнЧ(ИмяПараметра) Тогда
			ИндексМнЧ = Индекс_МнЧ(ИмяПараметра);
			Если МассивИндексов.Найти(ИндексМнЧ) = Неопределено Тогда
				МассивИндексов.Добавить(ИндексМнЧ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из МассивИндексов Цикл
		ТекущийИндексМнЧ = Число(ЭлементМассива);
		ТекущийИндексМнЧСтр = ЭлементМассива;
		СтрокаМнЧДобавлена = Ложь;
		НоваяСтрокаМнЧ = Неопределено;
		Для Каждого ЭлементСтруктуры Из ОбъединеннаяСтруктура Цикл
			ИмяПараметра = ЭлементСтруктуры.Ключ;
			Если ЭтоПараметрМнЧ(ИмяПараметра) Тогда
				ИндексМнЧ = Индекс_МнЧ(ИмяПараметра);
				ИмяКолонки = ИмяКолонки_МнЧ(ИмяПараметра);
				ИмяКолонкиМнЧ = ИмяКолонки_Инд_МнЧ(ИмяПараметра);
				Если ТекущийИндексМнЧ = Число(ИндексМнЧ) Тогда
					Если ТекущийИндексМнЧ = 1 Тогда
						НоваяСтрока[ИмяКолонкиМнЧ] = ИндексМнЧ;
						НоваяСтрока[ИмяКолонки] = ЭлементСтруктуры.Значение;
						
					ИначеЕсли СтрокаМнЧДобавлена И НоваяСтрокаМнЧ <> Неопределено Тогда
						НоваяСтрокаМнЧ[ИмяКолонкиМнЧ] = ИндексМнЧ;
						НоваяСтрокаМнЧ[ИмяКолонки] = ЭлементСтруктуры.Значение;
						
					Иначе
						НоваяСтрокаМнЧ = Таблица.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаМнЧ, НоваяСтрока);
						
						НоваяСтрокаМнЧ[ИмяКолонкиМнЧ] = ИндексМнЧ;
						НоваяСтрокаМнЧ[ИмяКолонки] = ЭлементСтруктуры.Значение;
						
						СтрокаМнЧДобавлена = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеМногоуровнегоРаздела(ИмяРаздела) Экспорт
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	Таблица = Новый ТаблицаЗначений;
	//Таблица.Колонки.Добавить("Представление");
	//Таблица.Колонки.Добавить("Данные");
	
	Если ИмяРаздела = "Раздел2" Тогда
	КонецЕсли;
	
	Для НомСтрокиВДереве = 1 По ДеревоДанныхРаздела.Строки.Количество() Цикл
		Ветка2 = ДеревоДанныхРаздела.Строки[НомСтрокиВДереве - 1];
		Для НомСтрокиВВетке2 = 1 По Ветка2.Строки.Количество() Цикл
			Ветка21 = Ветка2.Строки[НомСтрокиВВетке2 - 1];
			
			Если Ветка21.Строки.Количество() = 0 Тогда
				ПараметрыНумерации = ДанныеНумерации(НомСтрокиВДереве, НомСтрокиВВетке2,);
				РазвернутьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, , ПараметрыНумерации);
				
			Иначе
				Для НомСтрокиВВетке21 = 1 По Ветка21.Строки.Количество() Цикл
					Ветка211 = Ветка21.Строки[НомСтрокиВВетке21 - 1];
					ПараметрыНумерации = ДанныеНумерации(НомСтрокиВДереве, НомСтрокиВВетке2, НомСтрокиВВетке21);
					РазвернутьСтрокуВТаблицу(Таблица, Ветка2, Ветка21, Ветка211, ПараметрыНумерации);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ВставитьЗначениеПоказателя(ИсточникДанных, Показатель)
	
	Если ТипЗнч(ИсточникДанных) = Тип("СтрокаТаблицыЗначений") Тогда
		Если ИсточникДанных.Владелец().Колонки.Найти(Показатель.Имя) <> Неопределено Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	Иначе
		Если ИсточникДанных.Свойство(Показатель.Имя) Тогда
			ЗначениеПоказателя = ИсточникДанных[Показатель.Имя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		Если ЗначениеПоказателя = Неопределено Тогда
			ЗначениеПоказателя = 0;
		Иначе
			ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьЗначениеМногострочногоПоказателя(ИсточникДанных, Показатель, НомерСтроки)
	
	НомерСтрокиСтр = СтрокаЧГ0(НомерСтроки);
	ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, НомерСтрокиСтр);
	
	Если ТипЗнч(ИсточникДанных) = Тип("СтрокаТаблицыЗначений") Тогда
		ИмяПоказателя = ИмяКолонки_МнЧ(Показатель.Имя);
		Если ИсточникДанных.Владелец().Колонки.Найти(ИмяПоказателя) <> Неопределено Тогда
			ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	Иначе
		Если ИсточникДанных.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ИсточникДанных[ИмяПоказателя];
		Иначе
			ЗначениеПоказателя = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель.Свойство("ИзменяемаяРазмерность") И Показатель.ИзменяемаяРазмерность = Истина Тогда
		ЗначениеПоказателя = РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, ЗначениеПоказателя);
	КонецЕсли;
	
	Если Показатель.Свойство("Формат") И ЗначениеЗаполнено(Показатель.Формат) Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, Показатель.Формат);
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Строка") Тогда
		ПредставлениеЗначения = ЗначениеПоказателя;
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ДЛФ=D");
	ИначеЕсли ТипЗнч(ЗначениеПоказателя) = Тип("Число") Тогда
		ПредставлениеЗначения = Формат(ЗначениеПоказателя, "ЧРД=,; ЧН=");
	Иначе
		ПредставлениеЗначения = Строка(ЗначениеПоказателя);
	КонецЕсли;
	
	Показатель.Вставить("Значение", ЗначениеПоказателя);
	Показатель.Вставить("ЗначениеСтр", ПредставлениеЗначения);
	Показатель.Вставить("НомерСтроки", НомерСтрокиСтр);
	
	ДобавитьКординаты(Показатель);
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьФормулуДляРасшифровки(ОписаниеКС);
	
	РегламентированнаяОтчетность.ЗарегистрироватьФормулуДляРасшифровки(СписокРасшифровкиФормулы, ОписаниеКС, , СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Процедура ВнестиПоказательВРасшифровку(Показатель, ИмяСтраницы, НомерСтраницы = Неопределено, СсылкаНаДокумент = Неопределено)
	
	ПредставлениеПоказателя = Показатель.Представление;
	
	ЗначениеПоказателя = ?(ТипЗнч(Показатель.Значение) = Тип ("Дата"), Показатель.ЗначениеСтр, Показатель.Значение);
	
	Если Показатель.Свойство("НомерСтроки") Тогда
		ИмяПоказателя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Показатель.Имя, Показатель.НомерСтроки);
	Иначе
		ИмяПоказателя = Показатель.Имя;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ЗарегистрироватьПоказательДляРасшифровки(
		СписокРасшифровкиПоказателей,
		ИмяПоказателя,
		ПредставлениеПоказателя + ?(СсылкаНаДокумент <> Неопределено , " (по данным за предыдущий отчетный период)", ""),
		ЗначениеПоказателя,
		"",
		?(СсылкаНаДокумент = Неопределено, СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка, СсылкаНаДокумент),
		ИмяСтраницы,
		Неопределено,
		НомерСтраницы,
		СчетчикФормулДляРасшифровок);
	
КонецПроцедуры

&НаСервере
Функция ПоказателиКС(ЛеваяЧасть, ПраваяЧасть, РазмерЛев = 2, РазмерПрав = 2)
	
	ПоказателиКС = Новый Структура();
	
	Если ТипЗнч(ЛеваяЧасть) = Тип("Число") Тогда
		Если РазмерЛев = Истина Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерЛев) = Тип("Число") Тогда
			ЛеваяЧасть = Окр(ЛеваяЧасть, РазмерЛев);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ПраваяЧасть) = Тип("Число") Тогда
		Если РазмерПрав = Истина Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, 2);
			
		ИначеЕсли ТипЗнч(РазмерПрав) = Тип("Число") Тогда
			ПраваяЧасть = Окр(ПраваяЧасть, РазмерПрав);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказателиКС.Вставить("ЛеваяЧасть", ЛеваяЧасть);
	ПоказателиКС.Вставить("ЛеваяЧастьСтр", Формат(ЛеваяЧасть, "ЧРД=,; ЧН="));
	
	ПоказателиКС.Вставить("ПраваяЧасть", ПраваяЧасть);
	ПоказателиКС.Вставить("ПраваяЧастьСтр", Формат(ПраваяЧасть, "ЧРД=,; ЧН="));
	
	Возврат ПоказателиКС;
	
КонецФункции

&НаСервере
Процедура ДобавитьЭлементВСтруктуруОшибок(СтруктураОшибок, ТекстФормулы, ОписаниеКС, ОбщееЧислоОшибок,
		ОбщееЧислоБезОшибок, Расшифровка, ЭтоОшибка, Описание = Неопределено, Нарушение = Неопределено,
		Коммент = Неопределено)
	
	ТекстовоеПредставлениеФормулы = ?(ПустаяСтрока(ТекстФормулы), "", ТекстФормулы + ". ") + ОписаниеКС;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Описание));
	СтруктураОшибок.Вставить("Нарушение" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Нарушение));
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Расшифровка));
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), ТекстовоеПредставлениеФормулы));
	СтруктураОшибок.Вставить("Комментарий" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Коммент);
	
КонецПроцедуры

&НаСервере
Функция ПоказательПоСтроке(УсловныйКодПоказателя)
	
	Результат = Новый Структура;
	Результат.Вставить("Имя");
	Результат.Вставить("Представление");
	
	Если УсловныйКодПоказателя = "Р1Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000100000101_%1");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст2Гр01" Тогда
		Результат.Вставить("Имя", "П000100000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000200002003");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000300002003");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000400002003");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000500002003");
		Результат.Вставить("Представление", Нстр("ru='Код бюджетной классификации'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000700001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р1Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000100000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000200004003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000300008003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000400004003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст50Гр03" Тогда
		Результат.Вставить("Имя", "П000500005003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000700004003");
		Результат.Вставить("Представление", Нстр("ru='Код по ОКТМО'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000200001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000200003003");
		Результат.Вставить("Представление", Нстр("ru='Код единицы измерения количества добытого полезного ископаемого по ОКЕИ'"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000200009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000200010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000200006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000200007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000200008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000200011003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст115Гр03" Тогда
		Результат.Вставить("Имя", "П000200011503");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П000200012003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р211Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000211000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р211Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000211000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р212Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000212000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р212Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000212000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст150Гр03" Тогда
		Результат.Вставить("Имя", "П000200015003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000200013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П000200014003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст210Гр03" Тогда
		Результат.Вставить("Имя", "П000200021003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст230Гр03" Тогда
		Результат.Вставить("Имя", "П000200023003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст240Гр03" Тогда
		Результат.Вставить("Имя", "П000200024003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст250Гр03" Тогда
		Результат.Вставить("Имя", "П000200025003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст220Гр03" Тогда
		Результат.Вставить("Имя", "П000200022003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст260Гр03" Тогда
		Результат.Вставить("Имя", "П000200026003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000300001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000300003003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000300004003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст190Гр03" Тогда
		Результат.Вставить("Имя", "П000300019003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000300009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст90Гр04" Тогда
		Результат.Вставить("Имя", "П000300009004");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст90Гр05" Тогда
		Результат.Вставить("Имя", "П000300009005");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000300006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000300007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р311Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000311000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000510000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000500001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000500003003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р2Ст10001Гр02" Тогда
		Результат.Вставить("Имя", "П000211000102");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000300013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст170Гр03" Тогда
		Результат.Вставить("Имя", "П000300017003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст170Гр04" Тогда
		Результат.Вставить("Имя", "П000300017004");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст170Гр05" Тогда
		Результат.Вставить("Имя", "П000300017005");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст170Гр06" Тогда
		Результат.Вставить("Имя", "П000300017006");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст170Гр07" Тогда
		Результат.Вставить("Имя", "П000300017007");
		Результат.Вставить("Представление", Нстр("ru=''"));
		
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000300010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст150Гр03" Тогда
		Результат.Вставить("Имя", "П000300015003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р3Ст180Гр03" Тогда
		Результат.Вставить("Имя", "П000300018003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000400001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000400003003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000400013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000400000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000400000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000400009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000400008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р4Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П000400014003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000500001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000500004003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000500007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000500010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П000500012003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000500009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000500011003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000500008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000500013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П000500014003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р5Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000510000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст40Гр03" Тогда
		Результат.Вставить("Имя", "П000600004003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст10Гр03" Тогда
		Результат.Вставить("Имя", "П000600001003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст20Гр03" Тогда
		Результат.Вставить("Имя", "П000600002003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000600003003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000600009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст50Гр03" Тогда
		Результат.Вставить("Имя", "П000600005003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000600006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000600007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000600008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000600010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000620000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст1Гр04" Тогда
		Результат.Вставить("Имя", "П000620000104_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000620000103_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р6Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000620000102_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст30Гр03" Тогда
		Результат.Вставить("Имя", "П000700003003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р71Ст1Гр01" Тогда
		Результат.Вставить("Имя", "П000710000101_%1");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст70Гр03" Тогда
		Результат.Вставить("Имя", "П000700007003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст80Гр03" Тогда
		Результат.Вставить("Имя", "П000700008003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст90Гр03" Тогда
		Результат.Вставить("Имя", "П000700009003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст100Гр03" Тогда
		Результат.Вставить("Имя", "П000700010003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст110Гр03" Тогда
		Результат.Вставить("Имя", "П000700011003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст60Гр03" Тогда
		Результат.Вставить("Имя", "П000700006003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст140Гр03" Тогда
		Результат.Вставить("Имя", "П000700014003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст120Гр03" Тогда
		Результат.Вставить("Имя", "П000700012003");
		Результат.Вставить("Представление", Нстр("ru=''"));
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст130Гр03" Тогда
		Результат.Вставить("Имя", "П000700013003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст150Гр03" Тогда
		Результат.Вставить("Имя", "П000700015003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р7Ст160Гр03" Тогда
		Результат.Вставить("Имя", "П000700016003");
		Результат.Вставить("Представление", Нстр("ru=''"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р73Ст1Гр05" Тогда
		Результат.Вставить("Имя", "П000730000105_%1");
		Результат.Вставить("Представление", Нстр("ru='Остаток суммы налогового вычета на конец налогового периода (стр.180 - стр.190 - стр.200)'"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р73Ст1Гр02" Тогда
		Результат.Вставить("Имя", "П000730000102_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма налогового вычета, образовавшаяся на месяц и год, указанные в строке 170'"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р73Ст1Гр03" Тогда
		Результат.Вставить("Имя", "П000730000103_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма налогового вычета, использованная в предыдущие налоговые периоды'"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	ИначеЕсли УсловныйКодПоказателя = "Р73Ст1Гр04" Тогда
		Результат.Вставить("Имя", "П000730000104_%1");
		Результат.Вставить("Представление", Нстр("ru='Сумма налогового вычета, использованная в налоговом периоде'"));
		//Результат.Вставить("ИзменяемаяРазмерность", Истина);
	
	КонецЕсли;
	
	Если Результат.Представление = "" Тогда
		Результат.Вставить("Представление", ПредставлениеПоказателя(Результат.Имя));
	КонецЕсли;
	
	ДобавитьКординаты(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПредставлениеПоказателя(ИмяПоказателя)
	
	Раздел = Новый Структура();
	Раздел.Вставить("П0001", "Раздела 1");
	Раздел.Вставить("П0002", "Раздела 2");
	Раздел.Вставить("П0003", "Раздела 3");
	Раздел.Вставить("П0004", "Раздела 4");
	Раздел.Вставить("П0005", "Раздела 5");
	Раздел.Вставить("П0006", "Раздела 6");
	Раздел.Вставить("П0007", "Раздела 7");
	
	ПодстрокаРаздела = Раздел[Лев(ИмяПоказателя, 5)];
	ПодстрокаСтроки = Сред(ИмяПоказателя, 9, 3);
	Если Прав(ИмяПоказателя,2) = "%1" Тогда
		ПодстрокаГрафы = Сред(ИмяПоказателя, 12, 2);
	Иначе
		ПодстрокаГрафы = Прав(ИмяПоказателя,2);
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Графа %1 строка %2 %3'"), ПодстрокаГрафы,
		ПодстрокаСтроки, ПодстрокаРаздела);
	
КонецФункции

&НаСервере
Функция РасшифровкаВСтр(ЗначениеДляРасшифровки)
	Перем СтрокаДляРасшифровки;
	
	Если ТипЗнч(ЗначениеДляРасшифровки) = Тип("Строка") Тогда
		СтрокаДляРасшифровки = ЗначениеДляРасшифровки;
		
	ИначеЕсли ТипЗнч(ЗначениеДляРасшифровки) = Тип("Структура")
		И ЗначениеДляРасшифровки.Свойство("ЗначениеСтр") Тогда
		СтрокаДляРасшифровки = ЗначениеДляРасшифровки.ЗначениеСтр;
		
	Иначе
		СтрокаДляРасшифровки = "";
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокаДляРасшифровки) = Тип("Строка") Тогда
		Если Прав(СтрокаДляРасшифровки, 3) = " + " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
			
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " - " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
			
		ИначеЕсли Прав(СтрокаДляРасшифровки, 3) = " и " Тогда
			Возврат Лев(СтрокаДляРасшифровки, СтрДлина(СтрокаДляРасшифровки) - 3);
			
		Иначе
			Возврат СтрокаДляРасшифровки;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаДляРасшифровки) = Тип("Число") Тогда
		Возврат СтрокаЧГ0(РегламентированнаяОтчетностьКлиентСервер.ОкруглитьЧислоПоФормату(ЭтаФорма, СтрокаДляРасшифровки));
		
	Иначе
		Возврат СтрокаДляРасшифровки;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция КодНайден(ЗначениеКода, Условия = Неопределено)
	
	МассивКодов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Условия);
	Возврат МассивКодов.Найти(ЗначениеКода) <> Неопределено;
	
КонецФункции

&НаСервере
Функция ПредставлениеДляРасшифровки(ЗначениеПредставления)
	
	ТипПредставления = ТипЗнч(ЗначениеПредставления);
	ПредставлениеПустого = "";
	Если ТипПредставления = Тип("Строка") Тогда
		Представление = ЗначениеПредставления;
		ПредставлениеПустого = """""";
	ИначеЕсли ТипПредставления = Тип("Дата") Тогда
		Представление = Формат(ЗначениеПредставления, "ДЛФ=D");
		ПредставлениеПустого = """ . . """;
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(ЗначениеПредставления), Представление, ПредставлениеПустого);
	
КонецФункции

&НаСервере
Функция НомерСтраницыМнУ(НомерСтраницы, ПорядокСтраницы)
	Перем Результат;
	
	Результат = "";
	ЧислоПорядков = СтрЧислоВхождений(НомерСтраницы, ",") + 1;
	Если ЧислоПорядков = 0 Тогда
		Возврат НомерСтраницы;
		
	ИначеЕсли ЧислоПорядков = ПорядокСтраницы Тогда
		Возврат НомерСтраницы;
		
	Иначе
		Результат = НомерСтраницыНав(НомерСтраницы, ПорядокСтраницы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НомерСтраницыМнС(СтрокаТаблицы, Параметр)
	Если Параметр.ПорядокСтраницы = 1 Тогда
		Возврат Строка(СтрокаТаблицы.НомМнУ1);
	ИначеЕсли Параметр.ПорядокСтраницы = 2 Тогда
		Возврат Строка(СтрокаТаблицы.НомМнУ1) + "," + Строка(СтрокаТаблицы.НомМнУ2);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ДобавитьКординаты(Результат)
	Перем ИмяПоказателя;
	
	ИмяПоказателя = Результат.Имя;
	ИмяПоказателя = СтрЗаменить(ИмяПоказателя, "_%1", "");
	
	Если СтрНайти("П000100000101|П000100000102|П000100000103", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел1");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000200001003|П000200002003|П000200003003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел2");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000200004003|П000200005003|П000200005004|П000200005005|П000200006003|П000200007003|П000200008003
						|П000200009003|П000200010003|П000200011003|П000200011503|П000200012003|П000200013003|П000200014003
						|П000200015003|П000200004003|П000211000101|П000211000102", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел21");
		Результат.Вставить("ПорядокСтраницы",2);
	
	ИначеЕсли СтрНайти("П000200016003|П000200017003|П000200018003|П000200019003|П000200020003|П000200021003|П000200022003
						|П000200023003|П000200024003|П000200025003|П000200026003|П000200027003|П000212000101
						|П000212000102", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел212");
		Результат.Вставить("ПорядокСтраницы", 3);
	
	ИначеЕсли СтрНайти("П000300001003|П000300002003|П000300003003|П000300004003|П000300005003|П000300006003|П000300007003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел3");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000300008003|П000300009003|П000300009004|П000300009005|П000300010003|П000300011003|П000300012003|П000300013003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел31");
		Результат.Вставить("ПорядокСтраницы", 2);
	
	ИначеЕсли СтрНайти("П000300014003|П000300015003|П000300016003|П000300017003|П000300017004|П000300017005|П000300017006
						|П000300017007|П000300018003|П000300019003|П000311000101|П000311000102", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел311");
		Результат.Вставить("ПорядокСтраницы", 3);
	
	ИначеЕсли СтрНайти("П000400001003|П000400002003|П000400003003|П000400004003|П000400005003|П000400005004|П000400005005
						|П000400006003|П000400007003|П000400000101|П000400000102|П000400008003|П000400009003|П000400010003|П000400011003
						|П000400012003|П000400013003|П000400014003|П000400015003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел4");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000500001003|П000500002003|П000500003003|П000500004003|П000500007003|П000500008003|П000500009003
						|П000500010003|П000500011003|П000500012003|П000500013003|П000500014003|П000500015003|П000500016003", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел5");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000500005003|П000500006003|П000500006004|П000500006005|П000510000101|П000510000102|П000510000103|П000510000104", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел51");
		Результат.Вставить("ПорядокСтраницы", 2);
	
	ИначеЕсли СтрНайти("П000600001003|П000600002003|П000600003003|П000600004003|П000600005003|П000600006003|П000600007003
						|П000600008003|П000600009003|П000600010003|П000600011003|П000620000101|П000620000102|П000620000103|П000620000104", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел6");
		Результат.Вставить("ПорядокСтраницы", 1);
	
	ИначеЕсли СтрНайти("П000700001003|П000700002003|П000700002004|П000700002005|П000700003003|П000700004003|П000700005003
						|П000710000101|П000710000102|П000710000103|П000700006003|П000700007003|П000700008003|П000700009003|П000700010003
						|П000700011003|П000700012003|П000700013003|П000700014003|П000700015003|П000700016003|П000730000101|П000730000102
						|П000730000103|П000730000104|П000730000105|П000730000106", ИмяПоказателя) <> 0 Тогда
		Результат.Вставить("Раздел", "Раздел7");
		Результат.Вставить("ПорядокСтраницы", 1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

&НаСервере
Функция КоличествоСтрок(Данные, Показатель)
	Инд = 1; Количество = 0;
	Пока Данные.Свойство(Показатель + СтрокаЧГ0(Инд)) Цикл
		Количество = Количество + 1;
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Процедура СобратьМассивМногострочныхПоказателей(МассивПоказателей, Раздел, Показатель);
	Инд = 1;
	Пока Раздел.Свойство(Показатель + СтрокаЧГ0(Инд)) Цикл
		ЗначениеПоказателя = Раздел[Показатель + СтрокаЧГ0(Инд)];
		Если ЗначениеЗаполнено(ЗначениеПоказателя)
			И МассивПоказателей.Найти(ЗначениеПоказателя) = Неопределено Тогда
			
			МассивПоказателей.Добавить(ЗначениеПоказателя);
			
		КонецЕсли;

		Инд = Инд + 1;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РазделЗаполненСИсключениями(Раздел, Подраздел = Неопределено, СписокИсключений = Неопределено)
	
	Результат = Ложь;
	
	Если СписокИсключений <> Неопределено Тогда 
		МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокИсключений, ",", Истина);
	Иначе
		МассивИсключений = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("Структура") Тогда
		
		Для Каждого ЭлементРаздела Из Раздел Цикл
			ПроверятьЭлемент = (Подраздел <> Неопределено И Сред(ЭлементРаздела.Ключ, 5, 2) = Подраздел)
				ИЛИ (Подраздел = Неопределено);
			ЭтоНеИсключение = (МассивИсключений = Неопределено)
				ИЛИ (МассивИсключений <> Неопределено И МассивИсключений.Найти(ЭлементРаздела.Ключ) = Неопределено);
			Если ПроверятьЭлемент И ЗначениеЗаполнено(ЭлементРаздела.Значение) И ЭтоНеИсключение Тогда
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Раздел) = Тип("ДанныеФормыКоллекция") Тогда
		
		Для Каждого СтраницаРаздела Из Раздел Цикл
			ДанныеСтраницы = СтраницаРаздела.Данные[0].Значение;
			Для Каждого ЭлементРаздела Из ДанныеСтраницы Цикл
				ПроверятьЭлемент = (Подраздел <> Неопределено И Сред(ЭлементРаздела.Ключ, 5, 2) = Подраздел)
					ИЛИ (Подраздел = Неопределено);
				ЭтоНеИсключение = (МассивИсключений = Неопределено)
					ИЛИ (МассивИсключений <> Неопределено И МассивИсключений.Найти(ЭлементРаздела.Ключ) = Неопределено);
				Если ПроверятьЭлемент И ЗначениеЗаполнено(ЭлементРаздела.Значение) И ЭтоНеИсключение Тогда
					Результат = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоПараметрМнЧ(ИмяПараметра)
	Возврат (СтрНайти(ИмяПараметра, "_") > 0);
КонецФункции

&НаСервере
Функция Индекс_МнЧ(ИмяПараметра)
	Возврат Сред(ИмяПараметра, СтрНайти(ИмяПараметра, "_") + 1);
КонецФункции

&НаСервере
Функция ИмяКолонки_Инд_МнЧ(ИмяПараметра)
	Возврат Лев(ИмяПараметра, СтрНайти(ИмяПараметра, "_")) + "Инд";
КонецФункции

&НаСервере
Функция ИмяКолонки_МнЧ(ИмяПараметра)
	Возврат Лев(ИмяПараметра, СтрНайти(ИмяПараметра, "_") - 1);
КонецФункции

&НаСервере
Функция КолонкиДляСворачивания(УровеньОбхода)
	Результат = "";
	Для Сч = 1 По УровеньОбхода Цикл
		Результат = Результат + "НомМнУ" + СтрокаЧГ0(Сч) + ","; 
	КонецЦикла;
	Возврат Результат;	
		
КонецФункции

#Область ПолучениеДанныхТаблицыМнУ

&НаСервере
Функция УсловияСворачивания(Параметр)
	Если Параметр.ПорядокСтраницы = 1 Тогда
		Возврат "НомМнУ1," + Параметр.Имя;
	ИначеЕсли Параметр.ПорядокСтраницы = 2 Тогда
		Возврат "НомМнУ1,НомМнУ2," + Параметр.Имя;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СуммироватьМнЧ(Раздел, Параметр, УсловияСуммирования)
	Перем ТаблицаСтраницыРаздела;
	
	МассивСтрок = Раздел.НайтиСтроки(УсловияСуммирования);
	ТаблицаСтраницыРаздела = Раздел.Скопировать(МассивСтрок);
	ИмяКолонки = ИмяКолонки_МнЧ(Параметр.Имя);
	ИмяКолонки_Инд = ИмяКолонки_Инд_МнЧ(Параметр.Имя);
	СуммаМнЧ = 0;
	СуммаМнЧСтр = "";
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСтраницыРаздела Цикл
		СуммаМнЧ = СуммаМнЧ + СтрокаТаблицы[ИмяКолонки];
		СуммаМнЧСтр = СуммаМнЧСтр + Строка(СтрокаТаблицы[ИмяКолонки]) + " + ";
		ВставитьЗначениеМногострочногоПоказателя(СтрокаТаблицы, Параметр, СтрокаТаблицы[ИмяКолонки_Инд]);
		ВнестиПоказательВРасшифровку(Параметр, Параметр.Раздел, НомерСтраницыМнУ(СтрокаТаблицы.НомерСтраницы, Параметр.ПорядокСтраницы));
	КонецЦикла;
	
	Параметр.Вставить("Значение", СуммаМнЧ);
	Параметр.Вставить("ЗначениеСтр", СтрокаЧГ0(СуммаМнЧ));
	Параметр.Вставить("Расшифровка", РасшифровкаВСтр(СуммаМнЧСтр));
	
КонецПроцедуры

&НаСервере
Процедура СуммироватьМнС(Раздел, Параметр, УсловияСуммирования = Неопределено)
	Перем ТаблицаСтраницыРаздела;
	
	Если УсловияСуммирования = Неопределено Тогда
		ТаблицаСтраницыРаздела = Раздел.Скопировать();
	Иначе
		МассивСтрок = Раздел.НайтиСтроки(УсловияСуммирования);
		ТаблицаСтраницыРаздела = Раздел.Скопировать(МассивСтрок);
	КонецЕсли;
	
	ТаблицаСтраницыРаздела.Свернуть(УсловияСворачивания(Параметр));
	
	ИмяКолонки = Параметр.Имя;
	СуммаМнC = 0;
	СуммаМнCСтр = "";
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСтраницыРаздела Цикл
		СуммаМнC = СуммаМнC + СтрокаТаблицы[ИмяКолонки];
		СуммаМнCСтр = СуммаМнCСтр + Строка(СтрокаТаблицы[ИмяКолонки]) + " + ";
		ВставитьЗначениеПоказателя(СтрокаТаблицы, Параметр);
		ВнестиПоказательВРасшифровку(Параметр, Параметр.Раздел, НомерСтраницыМнС(СтрокаТаблицы, Параметр));
	КонецЦикла;
	Параметр.Вставить("Значение", СуммаМнC);
	Параметр.Вставить("ЗначениеСтр", СтрокаЧГ0(СуммаМнC));
	Параметр.Вставить("Расшифровка", РасшифровкаВСтр(СуммаМнCСтр));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяОтчета(ЭтаФормаИмя)
	Форма_Имя = СтрЗаменить(ЭтаФормаИмя, "Внешний", "");
	Возврат Сред(Лев(Форма_Имя, СтрНайти(Форма_Имя, ".Форма.") - 1), 7);
КонецФункции