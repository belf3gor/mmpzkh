#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПослеКомпоновкиМакета",  Ложь);
	Результат.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
	Результат.Вставить("ИспользоватьПривилегированныйРежим", Истина);
	Результат.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",              Истина);

	Возврат Результат;
			
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт 
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
	Если ПараметрыОтчета.РежимРасшифровки Тогда
		Возврат СтрШаблон(НСтр("ru = 'Расшифровка оборачиваемости товаров%1'"), ПредставлениеПериода);
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Оборачиваемость товаров%1'"), ПредставлениеПериода);
	КонецЕсли;

КонецФункции

Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	Если Не ПараметрыОтчета.РежимРасшифровки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСДанными = Новый ТаблицаЗначений;
	ТаблицаСДанными.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НаборГруппировок = ПолучитьНаборГруппировок();
	Для каждого ГруппировкаНабора Из НаборГруппировок Цикл
		ТаблицаСДанными.Колонки.Добавить(ГруппировкаНабора);
	КонецЦикла;
	
	Для каждого РасчетныйПоказатель Из ПараметрыОтчета.НаборРасчетныхПоказателей Цикл
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			ТаблицаСДанными.Колонки.Добавить(ИмяПоказателя + РасчетныйПоказатель.Ключ, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ИмяПоказателяСреднийОбъем Из ПараметрыОтчета.НаборПоказателейСреднийОбъем Цикл
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			ТаблицаСДанными.Колонки.Добавить(ИмяПоказателя + ИмяПоказателяСреднийОбъем, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		КонецЦикла;
	КонецЦикла;

	СформироватьТаблицуСреднийОбъем(ПараметрыОтчета, ТаблицаСДанными);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ТаблицаСДанными", ТаблицаСДанными);
	
	Возврат ВнешниеНаборы;
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	// Заполняем параметры отчета.
	НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
	КонецПериода = КонецДня(ПараметрыОтчета.КонецПериода);
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецПериода);
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Периодичность", ПараметрыОтчета.Периодичность);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ПериодичностьЦифрой", ПериодичностьЦифрой(ПараметрыОтчета.Периодичность));
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВключитьПрошлыйПериод", ПараметрыОтчета.ИзменениеПрошлогоПериода);
	АналогичныйПрошлыйПериод = ПредыдущийПериод(НачалоПериода, КонецПериода);
	Если ЗначениеЗаполнено(АналогичныйПрошлыйПериод.ДатаНачала) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПредыдущегоПериода", АналогичныйПрошлыйПериод.ДатаНачала);
	КонецЕсли;
	Если ЗначениеЗаполнено(АналогичныйПрошлыйПериод.ДатаОкончания) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПредыдущегоПериода", АналогичныйПрошлыйПериод.ДатаОкончания);
	КонецЕсли;

	СтрокиНоменклатуры = ПараметрыОтчета.Группировка.НайтиСтроки(Новый Структура("Поле, Использование", "Номенклатура", Истина));
	СтрокиСклад = ПараметрыОтчета.Группировка.НайтиСтроки(Новый Структура("Поле, Использование", "Склад", Истина));
	Если СтрокиНоменклатуры.Количество()>0 И СтрокиСклад.Количество()>0 Тогда
		ВычестьВнутренниеОбороты = Ложь;
	Иначе
		ВычестьВнутренниеОбороты = Истина;
	КонецЕсли;
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВычестьВнутренниеОбороты", ВычестьВнутренниеОбороты);
	
	СтруктураСчетов = СтруктураСчетов(БухгалтерскиеОтчеты.СчетаУчетаТоваров());
	Для Каждого Счета Из СтруктураСчетов Цикл
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Счета.Ключ, Счета.Значение);
	КонецЦикла;
	
	// Дополнительные данные
	БухгалтерскиеОтчетыВызовСервера.ДобавитьДополнительныеПоля(ПараметрыОтчета, КомпоновщикНастроек);
	
	Если ПараметрыОтчета.ИспользуетсяНесколькоОрганизаций Тогда
		БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	КонецЕсли;
	
	ЦветПоложительный = ЦветаСтиля.РезультатУспехЦвет;
	ЦветОтрицательный = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	// заполняем настройки, специфичные для режима отчета.
	Если ПараметрыОтчета.РежимРасшифровки Тогда
		ЗаполнитьНастройкиДляРасшифровки(ПараметрыОтчета, КомпоновщикНастроек, Схема);
	Иначе
		ЗаполнитьНастройкиДляОтчета(ПараметрыОтчета, КомпоновщикНастроек, Схема);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыОтчетов.ОписаниеВарианта(
		Настройки, ОписаниеОтчета, "ОборачиваемостьТоваров").Размещение.Вставить(Метаданные.Подсистемы.Руководителю.Подсистемы.Склад, "");
	
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","ОборачиваемостьТоваров", Нстр("ru = 'Оборачиваемость товаров'")));
	
	Возврат Массив;
	
КонецФункции

Процедура ЗаполнитьПараметрыРасшифровкиОтчета(Адрес, Расшифровка, ПараметрыРасшифровки) Экспорт
		
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
	ДанныеОбъекта = ПолучитьИзВременногоХранилища(Адрес);
	
	ОтчетОбъект       = ДанныеОбъекта.Объект;
	ДанныеРасшифровки = ДанныеОбъекта.ДанныеРасшифровки;
	
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("КлючТекущегоВарианта", "ОборачиваемостьТоваров");
	ДополнительныеСвойства.Вставить("ОчищатьТаблицуГруппировок", Истина);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок", ОтчетОбъект.ВыводитьЗаголовок);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ДанныеРасшифровки.Настройки);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ДанныеОбъекта.Объект.СхемаКомпоновкиДанных));
	
	// Передаем в расшифровку отборы.
	МассивПолей = БухгалтерскиеОтчетыВызовСервера.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, КомпоновщикНастроек, Истина);
	Для Каждого Отбор Из МассивПолей Цикл
		Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
			Если Отбор.Значение = NULL тогда
				Продолжить;
			КонецЕсли;
			
			Если Отбор.Поле = "Организация" Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.Значение);
			Иначе
				Если Отбор.Иерархия Тогда
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
				Иначе
					БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.Поле, Отбор.Значение);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
				Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
					Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
						ДополнительныеСвойства.Вставить("Организация"                      , ЭлементОтбора.ПравоеЗначение);
						ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Отбор.Представление = "###ОтборПоОрганизации###" Тогда
				ДополнительныеСвойства.Вставить("Организация"                      , Отбор.ПравоеЗначение);
				ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь);
			ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				ДополнительныеСвойства.Вставить("Организация", Отбор.ПравоеЗначение);
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Передаем в расшифровку настройки с закладки "Показатели".
	ДополнительныеСвойства.Вставить("НачалоПериода"              , ОтчетОбъект.НачалоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода"               , ОтчетОбъект.КонецПериода);
	ДополнительныеСвойства.Вставить("ПоказательСумма"            , ОтчетОбъект.ПоказательСумма);
	ДополнительныеСвойства.Вставить("ПоказательКоличество"       , ОтчетОбъект.ПоказательКоличество);
	ДополнительныеСвойства.Вставить("ПериодОборачиваемости"      , ОтчетОбъект.ПериодОборачиваемости);
	ДополнительныеСвойства.Вставить("КоэффициентОборачиваемости" , ОтчетОбъект.КоэффициентОборачиваемости);
	ДополнительныеСвойства.Вставить("ИспользуетсяНесколькоОрганизаций", ОтчетОбъект.ИспользуетсяНесколькоОрганизаций);
	
	ПоказателиДляРасшифровкиРасчета = Новый Массив;
	НаборПоказателей = ПолучитьНаборРасчетныхПоказателей();
	РазрезыПоказателей = ПолучитьНаборПоказателей();
	Для каждого ПоказательИзНабора Из НаборПоказателей Цикл
		Для Каждого ИмяРазреза Из РазрезыПоказателей Цикл
			ПоказателиДляРасшифровкиРасчета.Добавить(ИмяРазреза + ПоказательИзНабора.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	// Определяем какую строку отчета расшифровываем и вариант открываемой расшифровки.
	Если МассивПолей.Количество() > 0 Тогда
		Если ПоказателиДляРасшифровкиРасчета.Найти(МассивПолей[0].Поле) <> Неопределено Тогда
			
			// Был выбран показатель, расшифровку которого мы поддерживаем.
			// РасчетныйПоказательРасшифровки - СреднийОбъем или ФактическийРасход, ПоказательРасшифровки - количество или сумма.
			ПолеРасшифровки = МассивПолей[0].Поле;
			РасчетныйПоказательРасшифровки = "";
			ПоказательРасшифровки = "";
			Для каждого ИмяПоказателя Из РазрезыПоказателей Цикл
				Если СтрНайти(ПолеРасшифровки, ИмяПоказателя) <> 0 Тогда
					РасчетныйПоказательРасшифровки = СтрЗаменить(ПолеРасшифровки, ИмяПоказателя, "");
					ПоказательРасшифровки = ИмяПоказателя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ДополнительныеСвойства.Вставить("РасчетныйПоказательРасшифровки", РасчетныйПоказательРасшифровки);
			ДополнительныеСвойства.Вставить("ПоказательРасшифровки", ПоказательРасшифровки);
			
			СписокПунктовМеню = Новый СписокЗначений;
			СписокПунктовМеню.Добавить("ОборачиваемостьТоваров", НСтр("ru = 'Оборачиваемость товаров'"));
			
			НастройкиРасшифровки = Новый Структура;
			НастройкиРасшифровки.Вставить("ОборачиваемостьТоваров", ПользовательскиеНастройки);
			ДанныеОбъекта.Вставить("НастройкиРасшифровки", НастройкиРасшифровки);
			Адрес = ПоместитьВоВременноеХранилище(ДанныеОбъекта, Адрес);
			ПараметрыРасшифровки.Вставить("СписокПунктовМеню", СписокПунктовМеню);
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Ложь);
			
			// Нужно отдельно передавать Группировку отчета, т.к. на момент формирования расшифровки будут получены 
			// несохраненные пользовательские настройки, которые могут отличаться от текущих настроек в отчете.
			ДополнительныеСвойства.Вставить("Группировка", ОбщегоНазначения.ТаблицаЗначенийВМассив(ОтчетОбъект.Группировка));
			
		Иначе
			
			ПараметрыРасшифровки.Вставить("ОткрытьОбъект", Истина);
			ПараметрыРасшифровки.Вставить("Значение", МассивПолей[0].Значение);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ВывестиЗаголовокОтчета(ПараметрыОтчета, КомпоновщикНастроек, Результат);
	
	Если Не ПараметрыОтчета.РежимРасшифровки И ПараметрыОтчета.ИзменениеПрошлогоПериода Тогда
		
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Прошлый период:'"); 
		
		АналогичныйПрошлыйПериод = ПредыдущийПериод(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);

		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = 
			ПредставлениеПериода(АналогичныйПрошлыйПериод.ДатаНачала, АналогичныйПрошлыйПериод.ДатаОкончания, "ФП = Истина");
		
		Результат.Вывести(ОбластьОписаниеНастроек);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает набор параметров, которые необходимо сохранять в рассылке отчетов.
// Значения параметров используются при формировании отчета в рассылке.
//
// Возвращаемое значение:
//   Структура - структура настроек, сохраняемых в рассылке с неинициализированными значениями.
//
Функция НастройкиОтчетаСохраняемыеВРассылке() Экспорт
	
	КоллекцияНастроек = Новый Структура;
	Для Каждого Показатель Из ПолучитьНаборПоказателей() Цикл
		КоллекцияНастроек.Вставить("Показатель" + Показатель, Ложь);
	КонецЦикла;
	КоллекцияНастроек.Вставить("Организация"                      , Справочники.Организации.ПустаяСсылка());
	КоллекцияНастроек.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	КоллекцияНастроек.Вставить("РазмещениеДополнительныхПолей"    , 0);
	КоллекцияНастроек.Вставить("Периодичность"                    , "День");
	КоллекцияНастроек.Вставить("ПериодОборачиваемости"            , Ложь);
	КоллекцияНастроек.Вставить("КоэффициентОборачиваемости"       , Ложь);
	КоллекцияНастроек.Вставить("ИзменениеПрошлогоПериода"         , Ложь);
	КоллекцияНастроек.Вставить("БазаРасчета"                      , "");
	КоллекцияНастроек.Вставить("Группировка"                      , Неопределено);
	КоллекцияНастроек.Вставить("ДополнительныеПоля"               , Неопределено);
	КоллекцияНастроек.Вставить("ВыводитьЗаголовок"                , Ложь);
	КоллекцияНастроек.Вставить("ВыводитьПодвал"                   , Ложь);
	КоллекцияНастроек.Вставить("МакетОформления"                  , Неопределено);
	КоллекцияНастроек.Вставить("НастройкиКомпоновкиДанных"        , Неопределено);
	
	Возврат КоллекцияНастроек;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	// Часть параметров компоновки отчета используется так же и в рассылке отчета.
	ПараметрыОтчета = НастройкиОтчетаСохраняемыеВРассылке();
	
	// Дополним параметрами, влияющими на формирование отчета.
	ПараметрыОтчета.Вставить("НаборПоказателей"                , ПолучитьНаборПоказателей());
	ПараметрыОтчета.Вставить("НаборПоказателейОборачиваемости" , ПолучитьНаборПоказателейОборачиваемости());
	ПараметрыОтчета.Вставить("НаборРасчетныхПоказателей"       , ПолучитьНаборРасчетныхПоказателей());
	ПараметрыОтчета.Вставить("НаборПоказателейСреднийОбъем"    , ПолучитьНаборПоказателейСреднийОбъем());
	
	ПараметрыОтчета.Вставить("ПериодОтчета"                    , Неопределено);
	ПараметрыОтчета.Вставить("НачалоПериода"                   , Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода"                    , Дата(1,1,1));
	
	ПараметрыОтчета.Вставить("РежимРасшифровки"                , Ложь);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"               , Неопределено);
	ПараметрыОтчета.Вставить("ПоказательРасшифровки"           , "");
	ПараметрыОтчета.Вставить("РасчетныйПоказательРасшифровки"  , "");
	
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"           , Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"             , "");
	ПараметрыОтчета.Вставить("ИспользуетсяНесколькоОрганизаций", Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("Количество");
	НаборПоказателей.Добавить("Сумма");
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьНаборПоказателейОборачиваемости() Экспорт
	
	НаборПоказателей = Новый Структура;
	НаборПоказателей.Вставить("КоэффициентОборачиваемости", НСтр("ru = 'Коэффициент оборачиваемости'"));
	НаборПоказателей.Вставить("ПериодОборачиваемости", НСтр("ru = 'Период оборачиваемости, дней'"));
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьНаборРасчетныхПоказателей() Экспорт
	
	НаборПоказателей = Новый Структура;
	НаборПоказателей.Вставить("СреднийОбъем", НСтр("ru = 'Средний остаток за период'"));
	НаборПоказателей.Вставить("Расход", НСтр("ru = 'Фактический расход за период'"));
	
	Возврат НаборПоказателей;
	
КонецФункции

Функция ПолучитьНаборПоказателейСреднийОбъем() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("НачальныйОстаток");
	НаборПоказателей.Добавить("КонечныйОстаток");
	
	Возврат НаборПоказателей;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНаборГруппировок()
	
	НаборГруппировок = Новый Массив;
	НаборГруппировок.Добавить("Организация");
	НаборГруппировок.Добавить("Подразделение");
	НаборГруппировок.Добавить("Склад");
	НаборГруппировок.Добавить("Номенклатура");
	НаборГруппировок.Добавить("Счет");
	
	Возврат НаборГруппировок;
	
КонецФункции

Функция СформироватьТаблицуСреднийОбъем(ПараметрыОтчета, ТаблицаСДанными)
	
	Настройки = ПараметрыОтчета.НастройкиКомпоновкиДанных;
	
	Настройки.Структура.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	Настройки.ПользовательскиеПоля.Элементы.Очистить();

	ИменаГруппировок = ПолучитьНаборГруппировок();
	ИменаГруппировок.Добавить("Период");
	Для каждого ИмяГруппировки Из ИменаГруппировок Цикл
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Настройки, ИмяГруппировки);
	КонецЦикла;
	
	ГруппировкаСреднегоОбъема = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаСреднегоОбъема.Имя = "ПоИзмерениям";
	ГруппировкаСреднегоОбъема.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаСреднегоОбъема.Использование = Истина;
	
	Для каждого ИмяГруппировки Из ИменаГруппировок Цикл
		ПолеСреднегоОбъема = ГруппировкаСреднегоОбъема.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеСреднегоОбъема.Использование = Истина;
		ПолеСреднегоОбъема.Поле = Новый ПолеКомпоновкиДанных(ИмяГруппировки);
	КонецЦикла;
	
	НазначитьПараметрВывода(Настройки, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НазначитьПараметрВывода(Настройки, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	СКД = ПолучитьМакет("СхемаСреднийОбъем");
	
	ТаблицаИсточник = ТаблицаСДанными.СкопироватьКолонки();
	ВывестиРезультатСКДВКоллекцию(СКД, Настройки, ТаблицаИсточник);

	Если ПараметрыОтчета.РасчетныйПоказательРасшифровки = "СреднийОбъем" Тогда
		
		// Дополним результат недостающими периодами за интервал отчета
		Организация   = Неопределено;
		Подразделение = Неопределено;
		Склад         = Неопределено;
		Номенклатура  = Неопределено;
		Счет          = Неопределено;
		НачалоПериода = НачалоДня(ПараметрыОтчета.НачалоПериода);
		КонецПериода  = НачалоДня(ПараметрыОтчета.КонецПериода);
		
		МаксСчетчик = ТаблицаИсточник.Количество()-1;
		Для Счетчик = 0 По МаксСчетчик Цикл
			
			ТекСтрока = ТаблицаИсточник[Счетчик];
			СледСтрока = ?(Счетчик = МаксСчетчик, Неопределено, ТаблицаИсточник[Счетчик+1]);
			ПредСтрока = ?(Счетчик = 0, Неопределено, ТаблицаИсточник[Счетчик-1]);
			
			Если ПредСтрока = Неопределено
				Или (ТекСтрока.Организация <> ПредСтрока.Организация
					Или ТекСтрока.Подразделение <> ПредСтрока.Подразделение
					Или ТекСтрока.Склад <> ПредСтрока.Склад
					Или ТекСтрока.Номенклатура <> ПредСтрока.Номенклатура
					Или ТекСтрока.Счет <> ПредСтрока.Счет) Тогда
					
				// Нашли первую сроку для набора уникальных измерений.
				// Добавим недостающий отрезок дат с начала интервала.
				ДобавитьПериоды(НачалоПериода, ТекСтрока.Период, ПараметрыОтчета.Периодичность, ТекСтрока, ТаблицаСДанными, Ложь);
				
			ИначеЕсли ПредСтрока <> Неопределено
				И ТекСтрока.Организация = ПредСтрока.Организация
				И ТекСтрока.Подразделение = ПредСтрока.Подразделение
				И ТекСтрока.Склад = ПредСтрока.Склад
				И ТекСтрока.Номенклатура = ПредСтрока.Номенклатура
				И ТекСтрока.Счет = ПредСтрока.Счет Тогда
				
				// Нашли очередную строку для набора уникальных измерений.
				// Добавим недостающий отрезок дат с прошлого интервала,
				// при этом нужно учесть, что начинать нужно со следующей даты.
				НачальныйПериод = СледующаяДатаПериода(ПредСтрока.Период, ПараметрыОтчета.Периодичность);
				ДобавитьПериоды(НачальныйПериод, ТекСтрока.Период, ПараметрыОтчета.Периодичность, ТекСтрока, ТаблицаСДанными, Ложь);
				
			КонецЕсли;
			
			Если СледСтрока = Неопределено
				Или (ТекСтрока.Организация <> СледСтрока.Организация
					Или ТекСтрока.Подразделение <> СледСтрока.Подразделение
					Или ТекСтрока.Склад <> СледСтрока.Склад
					Или ТекСтрока.Номенклатура <> СледСтрока.Номенклатура
					Или ТекСтрока.Счет <> СледСтрока.Счет) Тогда

				// Нашли конечную строку для набора уникальных измерений.
				// Добавим недостающий отрезок дат до конца интервала,
				// при этом нужно учесть, что начинать нужно со следующей даты.
				НачальныйПериод = СледующаяДатаПериода(ТекСтрока.Период, ПараметрыОтчета.Периодичность);
				ДобавитьПериоды(НачальныйПериод, КонецПериода, ПараметрыОтчета.Периодичность, ТекСтрока, ТаблицаСДанными, Истина);
				
			КонецЕсли;
			
			Организация   = ТекСтрока.Организация;
			Подразделение = ТекСтрока.Подразделение;
			Склад         = ТекСтрока.Склад;
			Номенклатура  = ТекСтрока.Номенклатура;
			Счет          = ТекСтрока.Счет;
			ТекущийПериод = ТекСтрока.Период;
			
		КонецЦикла;
		
	Иначе
			
		Для Каждого ТекСтрока Из ТаблицаИсточник Цикл
			НоваяСтрока = ТаблицаСДанными.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ТаблицаСДанными;
	
КонецФункции

Процедура НазначитьПараметрВывода(Настройки, ИмяПараметра, ЗначениеПараметра)
	
	ПараметрВывода = Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ПараметрВывода <> Неопределено Тогда
		ПараметрВывода.Использование = Истина;
		ПараметрВывода.Значение = ЗначениеПараметра;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПериоды(НачалоПериода, КонецПериода, Периодичность, СтрокаИсточник, ТаблицаПриемник, ДобавитьСледующийПериод);

	ТекущийПериод = НачалоПериода;
	Пока ТекущийПериод <= КонецПериода Цикл
		
		НоваяСтрока = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточник);
		НоваяСтрока.Период = ТекущийПериод;
		
		// Нужно изменить начальный и конечный остаток, в случае если он отличается в исхоной строке.
		Если ТекущийПериод <> СтрокаИсточник.Период И ДобавитьСледующийПериод Тогда
			НоваяСтрока.КоличествоНачальныйОстаток  = СтрокаИсточник.КоличествоКонечныйОстаток;
			НоваяСтрока.СуммаНачальныйОстаток  = СтрокаИсточник.СуммаКонечныйОстаток;
		ИначеЕсли ТекущийПериод <> СтрокаИсточник.Период И Не ДобавитьСледующийПериод Тогда
			НоваяСтрока.КоличествоКонечныйОстаток  = СтрокаИсточник.КоличествоНачальныйОстаток;
			НоваяСтрока.СуммаКонечныйОстаток  = СтрокаИсточник.СуммаНачальныйОстаток;
		Иначе
			// остаток не нужно менять, т.к. строка за этот период была получена из выборки.
		КонецЕсли;

		ТекущийПериод = СледующаяДатаПериода(ТекущийПериод, Периодичность);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СледующаяДатаПериода(ИсходныйПериод, Периодичность)
	
	Если Периодичность = "День" Тогда
		Возврат ИсходныйПериод + 86400;
	Иначе
		Возврат ДобавитьМесяц(ИсходныйПериод, 1);
	КонецЕсли;
	
КонецФункции

Процедура ВывестиРезультатСКДВКоллекцию(МакетСКД, НастройкиКомпоновки, РезультатВывода, ВнешнийНабор = Неопределено)
	
	// Отборы унаследованы из настроек отчета, для которого выполняется расшифровка. В частности, унаследован отбор,
	// добавленный вызовом БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(). Следовательно, выполнение
	// расшифровки допустимо выполнять в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиСреднийОбъем = КомпоновщикМакета.Выполнить
		(МакетСКД, НастройкиКомпоновки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	Если ВнешнийНабор = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиСреднийОбъем, , , Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиСреднийОбъем, ВнешнийНабор, , Истина);
	КонецЕсли;
			
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(РезультатВывода);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

Функция СтруктураСчетов(СчетаУчетаТоваров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	               |	ХозрасчетныйВидыСубконто.ВидСубконто,
	               |	ХозрасчетныйВидыСубконто.Суммовой
	               |ПОМЕСТИТЬ ВидыСубконто
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчетаТоваров)
	               |	И ХозрасчетныйВидыСубконто.ВидСубконто = &ВидСубконтоСклады
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет КАК Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыСубконто.Счет
	               |ИЗ
	               |	ВидыСубконто КАК ВидыСубконто
	               |ГДЕ
	               |	ВидыСубконто.Суммовой = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	НЕ Хозрасчетный.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВидыСубконто.Счет КАК Счет
	               |				ИЗ
	               |					ВидыСубконто КАК ВидыСубконто)
	               |	И Хозрасчетный.Ссылка В(&СчетаУчетаТоваров)";
				   
	Запрос.УстановитьПараметр("СчетаУчетаТоваров", СчетаУчетаТоваров);
	Запрос.УстановитьПараметр("ВидСубконтоСклады", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураСчетов = Новый Структура;
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладИНоменклатура", Результат[1].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаСкладТолькоКоличествоИНоменклатура", Результат[2].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	СтруктураСчетов.Вставить("СчетаУчетаНоменклатураБезСклада", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
	
	Возврат СтруктураСчетов;
	
КонецФункции

// Определяет предыдущий период по текущему периоду.
//
// Параметры:
//  ДатаНачала - Дата - Дата начала текущего периода.
//  ДатаКонца  - Дата - Дата окончания текущего периода.
//
// Возвращаемое значение:
//   Структура - Структура содержащая предыдущий период.
//
Функция ПредыдущийПериод(ДатаНачала, ДатаКонца)
	ПредыдущийПериод = Новый СтандартныйПериод;
	ПредыдущийПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	
	Если НачалоДня(ДатаНачала) = НачалоМесяца(ДатаНачала) И КонецДня(ДатаКонца) = КонецМесяца(ДатаКонца) Тогда
		// Случай, когда период установлен кратным месяцу. Посчитаем количество лет и месяцев.
		КоличествоЛет 	  = Год(ДатаКонца) - Год(ДатаНачала);
		КоличествоМесяцев = Месяц(ДатаКонца) - Месяц(ДатаНачала) + 1;
		
		ВычестьМесяцев = -(КоличествоМесяцев + КоличествоЛет * 12);
		
		ПредыдущийПериод.ДатаНачала = НачалоМесяца(ДобавитьМесяц(ДатаНачала, ВычестьМесяцев));
		ПредыдущийПериод.ДатаОкончания  = КонецМесяца(ДобавитьМесяц(ДатаКонца,   ВычестьМесяцев));
	Иначе
		// Общий случай, когда период установлен кратным одному дню.
		РазностьДатСекунд = ДатаКонца - ДатаНачала;
		ПредыдущийПериод.ДатаНачала = ДатаНачала - РазностьДатСекунд - 1;
		ПредыдущийПериод.ДатаОкончания  = ДатаКонца  - РазностьДатСекунд - 1;
	КонецЕсли;
	
	Возврат ПредыдущийПериод;
КонецФункции

Процедура ЗаполнитьНастройкиДляРасшифровки(ПараметрыОтчета, КомпоновщикНастроек, Схема)
	
	// Заполняем настраиваемые группировки отчета.
	РодительскаяГруппировка = КомпоновщикНастроек.Настройки;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Группировка = РодительскаяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			РодительскаяГруппировка = Группировка;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем в отчет группировку периода.
	ДанныеГруппировки = Новый Структура;
	ДанныеГруппировки.Вставить("Поле", "Период");
	ДанныеГруппировки.Вставить("Представление", "Период");
	ДанныеГруппировки.Вставить("Использование", Истина);
	ДанныеГруппировки.Вставить("ТипГруппировки", 0);
	НоваяГруппировка = РодительскаяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ДанныеГруппировки, НоваяГруппировка);
	
	// Формируем разные варианты расшифровки, в зависимости от того, к какой группе (СреднийОбъем или Расход) относится показатель расшифровки.
	Если ПараметрыОтчета.РасчетныйПоказательРасшифровки = "СреднийОбъем" Тогда
		
		Для каждого ИмяПоказателяСреднийОбъем Из ПараметрыОтчета.НаборПоказателейСреднийОбъем Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПараметрыОтчета.ПоказательРасшифровки + ИмяПоказателяСреднийОбъем);
		КонецЦикла;
		
		// Добавляем в отчет показатель среднего объема.
		ПоказательРасшифровки = ПараметрыОтчета.ПоказательРасшифровки + ПараметрыОтчета.РасчетныйПоказательРасшифровки;
		ЗаголовокПоля = ПараметрыОтчета.НаборРасчетныхПоказателей[ПараметрыОтчета.РасчетныйПоказательРасшифровки];
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПоказательРасшифровки, ЗаголовокПоля);
		
		Если КомпоновщикНастроек.Настройки.Структура.Количество() > 0 Тогда
			КомпоновщикНастроек.Настройки.Структура[0].Имя = "ШапкаРасшифровки";
			
			ЗаголовокСкладНоменклатура = "";
			Для каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
				Если ПолеВыбраннойГруппировки.Использование Тогда
					ЗаголовокСкладНоменклатура = ЗаголовокСкладНоменклатура + ?(ЗаголовокСкладНоменклатура="", 
						ПолеВыбраннойГруппировки.Поле, " / " + Символы.ПС + ПолеВыбраннойГруппировки.Поле);
				КонецЕсли;
			КонецЦикла;
			
			БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ЗаголовокСкладНоменклатура", ЗаголовокСкладНоменклатура);
			
		КонецЕсли;
		
	Иначе
		
		// Удаляем пустые строки в отчете с помощью отбора.
		ЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			НоваяГруппировка.Отбор, ПараметрыОтчета.ПоказательРасшифровки + ПараметрыОтчета.РасчетныйПоказательРасшифровки,, ВидСравненияКомпоновкиДанных.Заполнено);
			
		// Запрещаем вывод в отчет программного отбора.
		НазначитьПараметрВывода(НоваяГруппировка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		
		// Добавляем в отчет показатель фактического расхода.
		ПоказательРасшифровки = ПараметрыОтчета.ПоказательРасшифровки + ПараметрыОтчета.РасчетныйПоказательРасшифровки;
		ЗаголовокПоля = ПараметрыОтчета.НаборРасчетныхПоказателей[ПараметрыОтчета.РасчетныйПоказательРасшифровки];
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ПоказательРасшифровки, ЗаголовокПоля);
		
	КонецЕсли;
	
	ПараметрыОтчета.НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиДляОтчета(ПараметрыОтчета, КомпоновщикНастроек, Схема)
	
	// Заполняем настраиваемые группировки отчета.
	РодительскаяГруппировка = КомпоновщикНастроек.Настройки;
	Для Каждого ПолеВыбраннойГруппировки Из ПараметрыОтчета.Группировка Цикл
		
		Если ПолеВыбраннойГруппировки.Использование Тогда
			Группировка = РодительскаяГруппировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			РодительскаяГруппировка = Группировка;
			БухгалтерскиеОтчетыВызовСервера.ЗаполнитьГруппировку(ПолеВыбраннойГруппировки, Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	//Удаляем пустые строки в отчете с помощью отбора.
	ГруппаОтбора = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(РодительскаяГруппировка.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		ЭлементОтбора = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(
			ГруппаОтбора, ИмяПоказателя + "СреднийОбъем", 0, ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЦикла;
	
	// Запрещаем вывод в отчет программного отбора.
	НазначитьПараметрВывода(РодительскаяГруппировка, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	// Добавляем колонки с количественными и суммовыми показателями.
	Для каждого РасчетныйПоказатель Из ПараметрыОтчета.НаборРасчетныхПоказателей Цикл
		
		ГруппаПоказатели = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПоказатели.Использование = Истина;
		ГруппаПоказатели.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
		ГруппаПоказатели.Заголовок = ?(КоличествоПоказателей > 1, РасчетныйПоказатель.Значение, "");
		
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
				
				ЗаголовокПоля = ?(КоличествоПоказателей > 1, ИмяПоказателя, РасчетныйПоказатель.Значение);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, ИмяПоказателя + РасчетныйПоказатель.Ключ, ЗаголовокПоля);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ЦветПоложительный = ЦветаСтиля.РезультатУспехЦвет;
	ЦветОтрицательный = ЦветаСтиля.ЦветОтрицательногоЧисла;
	
	// Добавляем колонки с показателями оборачиваемости.
	Для каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателейОборачиваемости Цикл
		
		Если ПараметрыОтчета[ИмяПоказателя.Ключ] Тогда
			
			ГруппаЭлементов = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ГруппаЭлементов.Использование = Истина;
			ГруппаЭлементов.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ГруппаЭлементов.Заголовок = ?(ПараметрыОтчета.ИзменениеПрошлогоПериода,ИмяПоказателя.Значение, "");
			
			ПолеПоказателя = ПараметрыОтчета.БазаРасчета + ИмяПоказателя.Ключ;
			
			Если ПараметрыОтчета.ИзменениеПрошлогоПериода Тогда
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЭлементов, ПолеПоказателя, НСтр("ru = 'Значение'"));
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЭлементов, "Изм" + ПолеПоказателя, НСтр("ru = 'Изменение'"));
				
				// Добавляем выделение цветом показателей динамики прошлого периода
				Если ИмяПоказателя.Ключ = "ПериодОборачиваемости" Тогда
					ДобавитьЭлементУО(КомпоновщикНастроек.Настройки.УсловноеОформление, "Изм" + ПолеПоказателя, 
						0, ВидСравненияКомпоновкиДанных.Больше, "ЦветТекста", ЦветОтрицательный);
					
					ДобавитьЭлементУО(КомпоновщикНастроек.Настройки.УсловноеОформление, "Изм" + ПолеПоказателя, 
						0, ВидСравненияКомпоновкиДанных.Меньше, "ЦветТекста", ЦветПоложительный);
				ИначеЕсли ИмяПоказателя.Ключ = "КоэффициентОборачиваемости" Тогда
					ДобавитьЭлементУО(КомпоновщикНастроек.Настройки.УсловноеОформление, "Изм" + ПолеПоказателя, 
						0, ВидСравненияКомпоновкиДанных.Больше, "ЦветТекста", ЦветПоложительный);
						
					ДобавитьЭлементУО(КомпоновщикНастроек.Настройки.УсловноеОформление, "Изм" + ПолеПоказателя, 
						0, ВидСравненияКомпоновкиДанных.Меньше, "ЦветТекста", ЦветОтрицательный);
				КонецЕсли;
					
			Иначе
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаЭлементов, ПолеПоказателя, ИмяПоказателя.Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем поля сортировки, если не задана пользовательская сортировка
	Если КомпоновщикНастроек.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		ЭлементСортировки = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		Если ПараметрыОтчета.КоэффициентОборачиваемости И ПараметрыОтчета.ПериодОборачиваемости Тогда
			ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных("КоличествоПериодОборачиваемости");
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		ИначеЕсли ПараметрыОтчета.КоэффициентОборачиваемости Тогда
			ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.БазаРасчета + "КоэффициентОборачиваемости");
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Иначе
			ЭлементСортировки.Поле = Новый ПолеКомпоновкиДанных(ПараметрыОтчета.БазаРасчета + "ПериодОборачиваемости");
			ЭлементСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПериодичностьЦифрой(ПериодичностьСтрокой)
	
	Если ПериодичностьСтрокой = "Месяц" Тогда
		Возврат 9;
	// Периодичность - "День".
	Иначе
		Возврат 6;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЭлементУО(УсловноеОформление, ИмяПоля, ЗначениеПоля, ВидСравнения, ИмяПараметра, ЗначениеПараметра);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяПоля);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, ИмяПоля, ВидСравнения, ЗначениеПоля);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра(ИмяПараметра, ЗначениеПараметра);
	
	ЭлементУО.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	ЭлементУО.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли