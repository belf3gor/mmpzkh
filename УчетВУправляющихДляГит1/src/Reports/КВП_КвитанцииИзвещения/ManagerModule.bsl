#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Получает список лицевых счетов по группе для формирования квитанций.
//
// Параметры
//  ГруппаЛС  - группа лицевых счетов.
//
// Возвращаемое значение:
//   СписокЗначений   - список лицевых счетов.
//
Функция ПолучитьСписокЛицевыхСчетовПоГруппе(ПараметрыОтчета) Экспорт

	СписокЛицевыхСчетов = Новый СписокЗначений;
	
	Если НЕ ПараметрыОтчета.ОбъектОтчета.ЭтоГруппа Тогда
		СписокЛицевыхСчетов.Добавить(ПараметрыОтчета.ОбъектОтчета);
		Возврат СписокЛицевыхСчетов;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчетаТекущие
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаНач, ЛицевойСчет В ИЕРАРХИИ (&ГруппаЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчетаЗаПериод
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Действует
	|	И КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В ИЕРАРХИИ(&ГруппаЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.ЛицевойСчет, втЛицевыеСчетаЗаПериод.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.НомерКвартиры, втЛицевыеСчетаЗаПериод.НомерКвартиры) КАК НомерКвартиры,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.СуффиксКвартиры, втЛицевыеСчетаЗаПериод.СуффиксКвартиры) КАК СуффиксКвартиры,
	|	ЕСТЬNULL(втЛицевыеСчетаТекущие.ВидПомещения, втЛицевыеСчетаЗаПериод.ВидПомещения) КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаТекущие КАК втЛицевыеСчетаТекущие
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЛицевыеСчетаЗаПериод КАК втЛицевыеСчетаЗаПериод
	|		ПО втЛицевыеСчетаТекущие.ЛицевойСчет = втЛицевыеСчетаЗаПериод.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.ЛицевойСчет КАК ЛицевойСчет,
	|	Взаиморасчеты.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , ЛицевойСчет В ИЕРАРХИИ (&ГруппаЛС)) КАК Взаиморасчеты
	|ГДЕ
	|	(Взаиморасчеты.СуммаНачисленияНачальныйОстаток > 0
	|			ИЛИ Взаиморасчеты.СуммаНачисленияКонечныйОстаток > 0
	|			ИЛИ Взаиморасчеты.СуммаНачисленияПриход > 0
	|			ИЛИ Взаиморасчеты.СуммаНачисленияРасход > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
	|	втЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
	|	втЛицевыеСчета.ВидПомещения КАК ВидПомещения
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛицевыеСчета.ЛицевойСчет = втНачисления.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.Услуга,
	|	втЛицевыеСчета.ВидПомещения,
	|	втЛицевыеСчета.НомерКвартиры,
	|	втЛицевыеСчета.СуффиксКвартиры,
	|	втЛицевыеСчета.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидПомещения,
	|	НомерКвартиры,
	|	СуффиксКвартиры";
	
	Запрос.УстановитьПараметр("ГруппаЛС", ПараметрыОтчета.ОбъектОтчета);
	Запрос.УстановитьПараметр("ДатаНач",  НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	Если ПараметрыОтчета.ВариантСортировки = "Лицевой счет" Тогда
		ТаблицаЛС.Сортировать("ЛицевойСчет");
	Иначе
		ТаблицаЛС.Сортировать("ВидПомещения, НомерКвартиры, СуффиксКвартиры");
	КонецЕсли;
	ТаблицаЛС.Свернуть("ЛицевойСчет");
	СписокЛицевыхСчетов.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;

КонецФункции // ПолучитьСписокЛСПоГруппе()

// Поиск оплат за месяц.
//
// Параметры:
//  СписокОбъектов – список лицевых счетов
//
// Возвращаемое значение:
//  таблица значений с данными
//
Функция ПолучитьДанныеОбОплатах(СписокОбъектов, ПараметрыОтчета) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ(УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаты,
	|	УПЖКХ_НачисленияОбороты.Период КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления < &НачалоМесяца
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОплатаЗадолженности,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления >= &НачалоМесяца
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Предоплата,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыОстаткаПоРассрочке
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И ВидНачисления В (&ВидыНачисленияОплата)) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Период";
	
	Запрос.УстановитьПараметр("НачалоМесяца",         НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("КонецМесяца",          КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",          ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛС",             СписокОбъектов);
	
	ВидыНачисленияОплата = Новый СписокЗначений;
	ВидыНачисленияОплата.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
	ВидыНачисленияОплата.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Оплата);
	
	Запрос.УстановитьПараметр("ВидыНачисленияОплата", ВидыНачисленияОплата);
	
	ДанныеОбОплатах = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеОбОплатах;
	
КонецФункции // ПолучитьДанныеОбОплатах()

// Поиск счетчиков.
//
// Параметры:
//  СписокОбъектов – список лицевых счетов
//
// Возвращаемое значение:
//  таблица значений с данными
//
Функция ПолучитьДанныеПоСчетчикам(СписокОбъектов, ПараметрыОтчета) Экспорт
	
	// Формируем таблицу с максимальными показаниями счетчиков при всех возможных
	// разрядностях. Передаем данную таблицу в запрос для реализации механизма 
	// перехода через ноль.
	ТаблицаМаксЗначений = Новый ТаблицаЗначений;
	ТаблицаМаксЗначений.Колонки.Добавить("Разрядность",  Новый ОписаниеТипов("Число"));
	ТаблицаМаксЗначений.Колонки.Добавить("МаксЗначение", Новый ОписаниеТипов("Число"));
	
	Для Счетчик = 1 По 15 Цикл
		НоваяСтрока = ТаблицаМаксЗначений.Добавить();
		НоваяСтрока.Разрядность  = Счетчик;
		НоваяСтрока.МаксЗначение = Pow(10, Счетчик);
	КонецЦикла;
	
	// Описание запроса:
	//
	// втТаблицаСчетчиков
	// ОПИСАНИЕ:
	//  Приборы учета, действующие на л/с или помещении на дату окончания периода
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Абонент - наименование ПУ
	//  Счетчик - ссылка на ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ
	//
	// втТаблицаПоказаний
	// ОПИСАНИЕ:
	//  Данные о показаниях ПУ, выбранных в таблицу втТаблицаСчетчиков, на дату начала периода и за период.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания
	//
	// втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний
	// ОПИСАНИЕ:
	//  Данные о текущих и предыдущих показаниях ПУ. Формируются по данным таблицы втТаблицаПоказаний:
	//  текущие - это показания с наиболее поздней датой, предыдущие - показания с наиболее ранней датой.
	// ПОЛЯ:
	//  Счетчик - ссылка на ПУ
	//  Период  - дата показания
	//  ДневноеПоказание, НочноеПоказание, ПиковоеПоказание - показания
	//
	// втТаблицаСчетчиковСПоказаниями
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение (по данным таблицы втТаблицаСчетчиков), с данными о
	//  текущих и предыдущих показаниях (по данным таблиц втТаблицаТекущихПоказаний, втТаблицаПредыдущихПоказаний).
	// ПОЛЯ:
	//  Объект - л/с или помещение
	//  Счетчик - ссылка на ПУ
	//  Абонент - наименование ПУ
	//  Услуга  - ссылка на услугу
	//  ВидУслуги - ссылка на вид услуги
	//  ЕдИзм     - единица измерения вида услуги
	//  СпособРегистрацииПоказаний - способ регистрации показаний, заданный для ПУ
	//  ТекПериод, ТекПоказание[Дн|Нч|Пк] - данные о текущих показаниях
	//  ПредПериод, ПредПоказание[Дн|Нч|Пк] - данные о предыдущих показаниях; если способ регистрации
	//                            показаний ПУ "Расход за период расчета", то устанавливаются равными 0
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Список ПУ, действующих на л/с или помещение, с текущими и предыдущими показаниями (по данным 
	//  таблицы втТаблицаСчетчиковСПоказаниями) с рассчитанным расходом и сальдо по услугам на дату 
	//  окончания периода.
	//
	Запрос = Новый Запрос();
	
	// Создание списка помещений для запроса
	СписокПомещений = Новый СписокЗначений;
	Для каждого Объект из СписокОбъектов Цикл
		СписокПомещений.Добавить(Объект.Значение.Адрес);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДатаНач",             НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1);
	Запрос.УстановитьПараметр("ДатаКон",             КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокОбъектов);
	Запрос.УстановитьПараметр("СписокПомещений",     СписокПомещений);
	Запрос.УстановитьПараметр("ТаблицаМаксЗначений", ТаблицаМаксЗначений);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ ВТ_НазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Активность
	|				И ДатаИзменения < &ДатаКон
	|				И Организация = &Организация
	|				И (Объект В (&СписокЛицевыхСчетов)
	|					ИЛИ Объект В (&СписокПомещений))) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование КАК Абонент,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втПоследнихСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаНач,
	|			(Объект В (&СписокЛицевыхСчетов)
	|				ИЛИ Объект В (&СписокПомещений))
	|			И ДатаИзменения < &ДатаНач) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НазначенныеНачисления КАК ВТ_НазначенныеНачисления
	|		ПО КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги = ВТ_НазначенныеНачисления.Услуга
	|			И (ВЫБОР
	|				КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект = ВТ_НазначенныеНачисления.Объект.Адрес
	|				ИНАЧЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект = ВТ_НазначенныеНачисления.Объект
	|			КОНЕЦ)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчики.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.Наименование КАК Абонент,
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги КАК Услуга,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	КВП_ЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втСчетчиковЗаПериод
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НазначенныеНачисления КАК ВТ_НазначенныеНачисления
	|		ПО КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги = ВТ_НазначенныеНачисления.Услуга
	|			И (ВЫБОР
	|				КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|					ТОГДА КВП_ЗакрепленныеСчетчики.Объект = ВТ_НазначенныеНачисления.Объект.Адрес
	|				ИНАЧЕ КВП_ЗакрепленныеСчетчики.Объект = ВТ_НазначенныеНачисления.Объект
	|			КОНЕЦ)
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
	|	И (КВП_ЗакрепленныеСчетчики.Объект В (&СписокЛицевыхСчетов)
	|			ИЛИ КВП_ЗакрепленныеСчетчики.Объект В (&СписокПомещений))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПоследнихСчетчиков.Объект, втСчетчиковЗаПериод.Объект) КАК Объект,
	|	ЕСТЬNULL(втПоследнихСчетчиков.Абонент, втСчетчиковЗаПериод.Абонент) КАК Абонент,
	|	ЕСТЬNULL(втПоследнихСчетчиков.Счетчик, втСчетчиковЗаПериод.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(втПоследнихСчетчиков.Услуга, втСчетчиковЗаПериод.Услуга) КАК Услуга,
	|	ЕСТЬNULL(втПоследнихСчетчиков.ВидУслуги, втСчетчиковЗаПериод.ВидУслуги) КАК ВидУслуги,
	|	ЕСТЬNULL(втПоследнихСчетчиков.ЕдИзм, втСчетчиковЗаПериод.ЕдИзм) КАК ЕдИзм,
	|	ЕСТЬNULL(втПоследнихСчетчиков.СпособРегистрацииПоказаний, втСчетчиковЗаПериод.СпособРегистрацииПоказаний) КАК СпособРегистрацииПоказаний
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	втПоследнихСчетчиков КАК втПоследнихСчетчиков
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСчетчиковЗаПериод КАК втСчетчиковЗаПериод
	|		ПО втПоследнихСчетчиков.Счетчик = втСчетчиковЗаПериод.Счетчик
	|			И втПоследнихСчетчиков.Объект = втСчетчиковЗаПериод.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМаксЗначений.Разрядность,
	|	ТаблицаМаксЗначений.МаксЗначение
	|ПОМЕСТИТЬ втМаксЗначенияПоказаний
	|ИЗ
	|	&ТаблицаМаксЗначений КАК ТаблицаМаксЗначений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.Период КАК Период,
	|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаПоказаний.НачальноеПоказание
	|ПОМЕСТИТЬ втТаблицаПоказаний
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаПоказанийВсехПУ.Счетчик КАК Счетчик,
	|		ТаблицаПоказанийВсехПУ.Период КАК Период,
	|		ТаблицаПоказанийВсехПУ.ДневноеПоказание КАК ДневноеПоказание,
	|		ТаблицаПоказанийВсехПУ.НочноеПоказание КАК НочноеПоказание,
	|		ТаблицаПоказанийВсехПУ.ПиковоеПоказание КАК ПиковоеПоказание,
	|		ТаблицаПоказанийВсехПУ.НачальноеПоказание КАК НачальноеПоказание
	|	ИЗ
	|		РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|				&ДатаНач,
	|				Счетчик В
	|					(ВЫБРАТЬ
	|						ТаблицаСчетчиков.Счетчик
	|					ИЗ
	|						втТаблицаСчетчиков КАК ТаблицаСчетчиков)) КАК ТаблицаПоказанийВсехПУ
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаПоказанийВсехПУ.Счетчик,
	|		ТаблицаПоказанийВсехПУ.Период,
	|		ТаблицаПоказанийВсехПУ.ДневноеПоказание,
	|		ТаблицаПоказанийВсехПУ.НочноеПоказание,
	|		ТаблицаПоказанийВсехПУ.ПиковоеПоказание,
	|		ТаблицаПоказанийВсехПУ.НачальноеПоказание
	|	ИЗ
	|		РегистрСведений.КВП_ПоказанияСчетчиков КАК ТаблицаПоказанийВсехПУ
	|	ГДЕ
	|		ТаблицаПоказанийВсехПУ.Период МЕЖДУ &ДатаНач И &ДатаКон
	|		И ТаблицаПоказанийВсехПУ.Счетчик В
	|				(ВЫБРАТЬ
	|					ТаблицаСчетчиков.Счетчик
	|				ИЗ
	|					втТаблицаСчетчиков КАК ТаблицаСчетчиков)) КАК ТаблицаПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.Период КАК Период,
	|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаТекущихПоказаний
	|ИЗ
	|	втТаблицаПоказаний КАК ТаблицаПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПоказаний.Счетчик КАК Счетчик,
	|			МАКСИМУМ(ТаблицаПоказаний.Период) КАК Период
	|		ИЗ
	|			втТаблицаПоказаний КАК ТаблицаПоказаний
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПоказаний.Счетчик) КАК ТаблицаМаксимальныхПериодов
	|		ПО ТаблицаПоказаний.Счетчик = ТаблицаМаксимальныхПериодов.Счетчик
	|			И ТаблицаПоказаний.Период = ТаблицаМаксимальныхПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.Период КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.ДневноеПоказание
	|	КОНЕЦ КАК ДневноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.НочноеПоказание
	|	КОНЕЦ КАК НочноеПоказание,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаПоказаний.НачальноеПоказание
	|				И ТаблицаПоказаний.Период >= &ДатаНач
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаПоказаний.ПиковоеПоказание
	|	КОНЕЦ КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаПредыдущихПоказаний
	|ИЗ
	|	втТаблицаПоказаний КАК ТаблицаПоказаний
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПоказаний.Счетчик КАК Счетчик,
	|			МИНИМУМ(ТаблицаПоказаний.Период) КАК Период
	|		ИЗ
	|			втТаблицаПоказаний КАК ТаблицаПоказаний
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТаблицаПоказаний.Счетчик) КАК ТаблицаМинимальныхПериодов
	|		ПО ТаблицаПоказаний.Счетчик = ТаблицаМинимальныхПериодов.Счетчик
	|			И ТаблицаПоказаний.Период = ТаблицаМинимальныхПериодов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСчетчиков.Объект,
	|	ТаблицаСчетчиков.Счетчик,
	|	ТаблицаСчетчиков.Абонент,
	|	ТаблицаСчетчиков.Услуга,
	|	ТаблицаСчетчиков.ВидУслуги,
	|	ТаблицаСчетчиков.ЕдИзм,
	|	ТаблицаСчетчиков.СпособРегистрацииПоказаний,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ТекПериод,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ДневноеПоказание, 0) КАК ТекПоказаниеДн,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.НочноеПоказание, 0) КАК ТекПоказаниеНч,
	|	ЕСТЬNULL(ТаблицаТекущихПоказаний.ПиковоеПоказание, 0) КАК ТекПоказаниеПк,
	|	ЕСТЬNULL(ТаблицаПредыдущихПоказаний.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПредПериод,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ДневноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.НочноеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиков.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаПредыдущихПоказаний.ПиковоеПоказание, 0)
	|	КОНЕЦ КАК ПредПоказаниеПк
	|ПОМЕСТИТЬ втТаблицаСчетчиковСПоказаниями
	|ИЗ
	|	втТаблицаСчетчиков КАК ТаблицаСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаТекущихПоказаний КАК ТаблицаТекущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаТекущихПоказаний.Счетчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПредыдущихПоказаний КАК ТаблицаПредыдущихПоказаний
	|		ПО ТаблицаСчетчиков.Счетчик = ТаблицаПредыдущихПоказаний.Счетчик";
	Запрос.Выполнить();
	
	// Данный пакет сильно нагружает запрос, но используется только в форме №7.
	Если ПараметрыОтчета.Форма = "07" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет В (&СписокЛицевыхСчетов)
		|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
		|		ИНАЧЕ ВЫБОР
		|				КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес В (&СписокПомещений)
		|					ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет.Адрес
		|			КОНЕЦ
		|	КОНЕЦ КАК Объект,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК КонечноеСальдо
		|ПОМЕСТИТЬ втСальдоНачислений
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И (ЛицевойСчет В (&СписокЛицевыхСчетов)
		|					ИЛИ ЛицевойСчет.Адрес В (&СписокПомещений))) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки";
		Запрос.Выполнить();
		
		КонечноеСальдо     = "ЕСТЬNULL(втСальдоНачислений.КонечноеСальдо, 0)";
		СоединениеСПакетом =
		"ЛЕВОЕ СОЕДИНЕНИЕ втСальдоНачислений КАК втСальдоНачислений
		|		ПО ТаблицаСчетчиковСПоказаниями.Услуга = втСальдоНачислений.Услуга
		|			И ТаблицаСчетчиковСПоказаниями.Объект = втСальдоНачислений.Объект";
		
	Иначе
		
		КонечноеСальдо     = "0";
		СоединениеСПакетом = "";
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаСчетчиковСПоказаниями.Объект КАК Объект,
	|	ТаблицаСчетчиковСПоказаниями.Абонент,
	|	ТаблицаСчетчиковСПоказаниями.Счетчик КАК Счетчик,
	|	ТаблицаСчетчиковСПоказаниями.Услуга КАК Услуга,
	|	ТаблицаСчетчиковСПоказаниями.ВидУслуги,
	|	ТаблицаСчетчиковСПоказаниями.ЕдИзм,
	|	ТаблицаСчетчиковСПоказаниями.ТекПериод КАК ПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн КАК ПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч КАК ПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк КАК ПредыдущееПоказаниеПк,
	|	ТаблицаСчетчиковСПоказаниями.ПредПериод КАК ПредПредыдущееПоказаниеПериод,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн КАК ПредПредыдущееПоказаниеДн,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч КАК ПредПредыдущееПоказаниеНч,
	|	ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк КАК ПредПредыдущееПоказаниеПк,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеДн - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеДн
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходДн,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеНч - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеНч
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходНч,
	|	ВЫБОР
	|		КОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк >= ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			ТОГДА ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение >= 0.9
	|						И ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 1
	|						И ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк / втМаксЗначенияПоказаний.МаксЗначение < 0.9
	|					ТОГДА втМаксЗначенияПоказаний.МаксЗначение - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк + ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк
	|				ИНАЧЕ ТаблицаСчетчиковСПоказаниями.ТекПоказаниеПк - ТаблицаСчетчиковСПоказаниями.ПредПоказаниеПк
	|			КОНЕЦ
	|	КОНЕЦ КАК РасходПк,
	|	0 КАК ТарифДн,
	|	0 КАК ТарифНч,
	|	0 КАК ТарифПк,
	|	0 КАК НачисленоДн,
	|	0 КАК НачисленоНч,
	|	0 КАК НачисленоПк,
	|	" + КонечноеСальдо + " КАК КонечноеСальдо
	|ИЗ
	|	втТаблицаСчетчиковСПоказаниями КАК ТаблицаСчетчиковСПоказаниями
	|		" + СоединениеСПакетом + "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаксЗначенияПоказаний КАК втМаксЗначенияПоказаний
	|		ПО ТаблицаСчетчиковСПоказаниями.Счетчик.Разрядность = втМаксЗначенияПоказаний.Разрядность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	Услуга,
	|	Счетчик";
	
	ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		СтрокаСчетчика.ТарифДн  = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																ПараметрыОтчета.Организация,
																СтрокаСчетчика.Услуга,
																СтрокаСчетчика.Объект,
																Перечисления.КВП_ВидыТарифов.Дневной);
		СтрокаСчетчика.ТарифНч  = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																ПараметрыОтчета.Организация, 
																СтрокаСчетчика.Услуга,
																СтрокаСчетчика.Объект,
																Перечисления.КВП_ВидыТарифов.Ночной);
		СтрокаСчетчика.ТарифПк = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																ПараметрыОтчета.Организация,
																СтрокаСчетчика.Услуга, 
																СтрокаСчетчика.Объект,
																Перечисления.КВП_ВидыТарифов.Пиковый);
		СтрокаСчетчика.НачисленоДн = СтрокаСчетчика.РасходДн * СтрокаСчетчика.ТарифДн;
		СтрокаСчетчика.НачисленоНч = СтрокаСчетчика.РасходНч * СтрокаСчетчика.ТарифНч;
		СтрокаСчетчика.НачисленоПк = СтрокаСчетчика.РасходПк * СтрокаСчетчика.ТарифПк;
	КонецЦикла;
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции // ПолучитьДанныеПоСчетчикам()

// Формирует запрос для получения таблицы начислений.
//
// Параметры
//  СписокОбъектов – список лицевых счетов
//
// Возвращаемое значение:
//  Таблица значений с данными
//
//Функция ПолучитьЗапросНачисления(СписокОбъектов, ПараметрыОтчета, ВидЗапроса = "стандарт", ВыводитьНачСальдо = Неопределено, ВключениеНачЗадолженности = Неопределено) Экспорт
Функция ПолучитьЗапросНачисления(СписокОбъектов, ПараметрыОтчета) Экспорт
	
	ЗапросНачисления = Новый Запрос();
	
	Если ПараметрыОтчета.ВидЗапроса = "стандарт" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга КАК Услуга,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ КАК ВидУслуги,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) КАК Начислено,
		|	ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0) КАК Льгота,
		|	0 КАК Субсидии,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) * 0 КАК ВРоткл,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) - ВЫБОР
		|		КОГДА &НеУчитыватьЛьготыВоВзаиморасчетах
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0)
		|	КОНЕЦ КАК КОплате,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И ВидНачисления В (&ВидыНачислений)
		|				И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				ЛицевойСчет В (&СписокЛицевыхСчетов)
		|					И Организация = &Организация) КАК КВП_ЛьготыОбороты
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга = КВП_ЛьготыОбороты.Услуга
		|			И КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = КВП_ЛьготыОбороты.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|			МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|		ИЗ
		|			втТаблицаНорм КАК ТаблицаНорм
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаНорм.ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|			И КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисления.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисления.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисления.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисления.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВТ_ТаблицаНачисления.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисления.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ВТ_ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ВТ_ТаблицаНачисления.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисления.Норма КАК Норма,
		|	0 КАК Количество
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ВТ_ТаблицаНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисления.ВидУслуги.Наименование";
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.КорректировкаНачислений);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_02" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет) КАК ЛицевойСчет,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга) КАК Услуга,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга.ВидУслуги) КАК ВидУслуги,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) КАК Начислено,
		|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПерерасчеты.СуммаНачисленияОборот, 0) КАК Перерасчет
		|ПОМЕСТИТЬ ВТ_НачисленияНаЛицевыеСчета
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И ВидНачисления В (&ВидыНачислений)
		|				И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				ЛицевойСчет В (&СписокЛицевыхСчетов)
		|					И ВидНачисления = &ВидыНачисленияПерерасчет
		|					И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПерерасчеты
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет
		|			И КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_НачисленияНаЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_НачисленияНаЛицевыеСчета.Услуга КАК Услуга,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ВТ_НачисленияНаЛицевыеСчета.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ КАК ВидУслуги,
		|	ВТ_НачисленияНаЛицевыеСчета.Начислено КАК Начислено,
		|	ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0) КАК Льгота,
		|	ЕСТЬNULL(ВТ_НачисленияНаЛицевыеСчета.Перерасчет, 0) КАК Перерасчет,
		|	0 КАК Субсидии,
		|	ВТ_НачисленияНаЛицевыеСчета.Начислено - ВЫБОР
		|		КОГДА &НеУчитыватьЛьготыВоВзаиморасчетах
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0)
		|	КОНЕЦ + ВТ_НачисленияНаЛицевыеСчета.Перерасчет КАК КОплате,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	ВТ_НачисленияНаЛицевыеСчета КАК ВТ_НачисленияНаЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				Организация = &Организация
		|					И (ЛицевойСчет, Услуга) В
		|						(ВЫБРАТЬ
		|							ВТ_НачисленияНаЛицевыеСчета.ЛицевойСчет,
		|							ВТ_НачисленияНаЛицевыеСчета.Услуга
		|						ИЗ
		|							ВТ_НачисленияНаЛицевыеСчета КАК ВТ_НачисленияНаЛицевыеСчета)) КАК КВП_ЛьготыОбороты
		|		ПО ВТ_НачисленияНаЛицевыеСчета.ЛицевойСчет = КВП_ЛьготыОбороты.ЛицевойСчет
		|			И ВТ_НачисленияНаЛицевыеСчета.Услуга = КВП_ЛьготыОбороты.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ВТ_НачисленияНаЛицевыеСчета.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|			И ВТ_НачисленияНаЛицевыеСчета.Услуга = ТаблицаНормПоУслуге.Услуга
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|			МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|		ИЗ
		|			втТаблицаНорм КАК ТаблицаНорм
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаНорм.ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|		ПО ВТ_НачисленияНаЛицевыеСчета.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|			И ВТ_НачисленияНаЛицевыеСчета.Услуга.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО ВТ_НачисленияНаЛицевыеСчета.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисления.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисления.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисления.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисления.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВТ_ТаблицаНачисления.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачисления.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ВТ_ТаблицаНачисления.Субсидии КАК Субсидии,
		|	0 КАК ВРоткл,
		|	ВТ_ТаблицаНачисления.КОплате КАК КОплате,
		|	ВТ_ТаблицаНачисления.Норма КАК Норма,
		|	0 КАК Количество
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ВТ_ТаблицаНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисления.ВидУслуги.Наименование";
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_05" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ КВП_НачисленияНаЛицевыеСчетаОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Пени), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Льготы))
		|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
		|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Перерасчет,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Пени)
		|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Пени,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Льготы)
		|				ТОГДА -КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Льгота,
		|	СУММА(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот) КАК КОплате
		|ПОМЕСТИТЬ НачисленияПоЛицевымСчетам
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КомиссияЗаРассрочку), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.НачислениеРассрочки), ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты))) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.СпособРасчета,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	НачисленияПоЛицевымСчетам.Услуга КАК Услуга,
		|	НачисленияПоЛицевымСчетам.УслугаСпособРасчета,
		|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, НачисленияПоЛицевымСчетам.ВидУслуги) КАК ВидУслуги,
		|	НачисленияПоЛицевымСчетам.ЕдИзм,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, 0) КАК Норма,
		|	0 КАК Количество,
		|	НачисленияПоЛицевымСчетам.Начислено,
		|	НачисленияПоЛицевымСчетам.Перерасчет,
		|	НачисленияПоЛицевымСчетам.Льгота,
		|	НачисленияПоЛицевымСчетам.Пени,
		|	НачисленияПоЛицевымСчетам.КОплате,
		|	0 КАК Субсидии,
		|	0 КАК ВРоткл
		|ИЗ
		|	НачисленияПоЛицевымСчетам КАК НачисленияПоЛицевымСчетам
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО НачисленияПоЛицевымСчетам.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И НачисленияПоЛицевымСчетам.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО НачисленияПоЛицевымСчетам.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидУслуги";
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
		ЗапросНачисления.УстановитьПараметр("ВидыНачисленияКорректировкаНачислений", Перечисления.КВП_ВидыНачисления.КорректировкаНачислений);
		ЗапросНачисления.УстановитьПараметр("ВидНачисленияПени",                     Перечисления.КВП_ВидыНачисленияОстатки.Пени);
		ЗапросНачисления.УстановитьПараметр("Организация",                           ПараметрыОтчета.Организация);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_06" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ТаблицаНачисления.ВидУслуги КАК ВидУслуги,
		|	ТаблицаНачисления.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.Льгота КАК Льгота,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Пени КАК Пени,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.КОплате КАК КОплате,
		|	ТаблицаНачисления.Норма КАК Норма,
		|	0 КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.ЛицевойСчет, КВП_НачисленияНаЛицевыеСчетаПени.ЛицевойСчет) КАК ЛицевойСчет,
		|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.Услуга, КВП_НачисленияНаЛицевыеСчетаПени.Услуга) КАК Услуга,
		|		ВЫБОР
		|			КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|				ТОГДА ЕСТЬNULL(НачисленияПоЛицевымСчетам.ВидУслуги, КВП_НачисленияНаЛицевыеСчетаПени.Услуга.ВидУслуги)
		|			ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|		КОНЕЦ КАК ВидУслуги,
		|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.Начислено, 0) КАК Начислено,
		|		-ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0) КАК Льгота,
		|		НачисленияПоЛицевымСчетам.Перерасчет КАК Перерасчет,
		|		ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПени.СуммаНачисленияПриход, 0) КАК Пени,
		|		0 КАК Субсидии,
		|		0 КАК ВРоткл,
		|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.Начислено, 0) + ЕСТЬNULL(КВП_ЛьготыОбороты.СуммаНачисленияОборот, 0) + НачисленияПоЛицевымСчетам.Перерасчет КАК КОплате,
		|		ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет) КАК ЛицевойСчет,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга) КАК Услуга,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга.ВидУслуги) КАК ВидУслуги,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) КАК Начислено,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПерерасчеты.СуммаНачисленияОборот, 0) КАК Перерасчет
		|		ИЗ
		|			РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|					&ДатаНач,
		|					&ДатаКон,
		|					,
		|					ЛицевойСчет В (&СписокЛицевыхСчетов)
		|						И ВидНачисления В (&ВидыНачислений)
		|						И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|						&ДатаНач,
		|						&ДатаКон,
		|						,
		|						ЛицевойСчет В (&СписокЛицевыхСчетов)
		|							И ВидНачисления = &ВидыНачисленияПерерасчет
		|							И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПерерасчеты
		|				ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга
		|					И КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет) КАК НачисленияПоЛицевымСчетам
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|					&ДатаНач,
		|					&ДатаКон,
		|					,
		|					ЛицевойСчет В (&СписокЛицевыхСчетов)
		|						И ВидНачисления = &ВидыНачисленияЛьготы
		|						И Организация = &Организация) КАК КВП_ЛьготыОбороты
		|			ПО НачисленияПоЛицевымСчетам.Услуга = КВП_ЛьготыОбороты.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = КВП_ЛьготыОбороты.ЛицевойСчет
		|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|					&ДатаНач,
		|					&ДатаКон,
		|					,
		|					,
		|					ЛицевойСчет В (&СписокЛицевыхСчетов)
		|						И ВидНачисления = &ВидыНачисленияПени
		|						И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПени
		|			ПО НачисленияПоЛицевымСчетам.Услуга = КВП_НачисленияНаЛицевыеСчетаПени.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = КВП_НачисленияНаЛицевыеСчетаПени.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|			ПО НачисленияПоЛицевымСчетам.Услуга = ТаблицаНормПоУслуге.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|				ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|				МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|			ИЗ
		|				втТаблицаНорм КАК ТаблицаНорм
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаНорм.ЛицевойСчет,
		|				ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|			ПО НачисленияПоЛицевымСчетам.Услуга.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|			ПО НачисленияПоЛицевымСчетам.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги) КАК ТаблицаНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНачисления.ВидУслуги.Наименование";
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
		ЗапросНачисления.УстановитьПараметр("ВидыНачисленияПени", Перечисления.КВП_ВидыНачисленияОстатки.Пени);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_07" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга КАК Услуга,
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Льготы)
		|				ТОГДА -КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаЛьготы,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
		|				ТОГДА -КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
		|				ТОГДА КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПерерасчета,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Льготы)
		|					ИЛИ КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
		|					ИЛИ КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
		|					ИЛИ КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Пени)
		|				ТОГДА 0
		|			ИНАЧЕ КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК СуммаНачисления,
		|	0 КАК ВРоткл,
		|	0 КАК НачальноеСальдо
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.ЛицевойСчет,
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга,
		|	КВП_НачисленияНаЛицевыеСчетаОстаткиИОбороты.Услуга.ВидУслуги
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	0,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	0,
		|	0,
		|	0,
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияНачальныйОстаток)
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	СУММА(ТаблицаНачисления.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(ТаблицаНачисления.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ТаблицаНачисления.СуммаПерерасчета) КАК СуммаПерерасчета,
		|	СУММА(ТаблицаНачисления.ВРоткл) КАК ВРоткл,
		|	СУММА(ТаблицаНачисления.СуммаНачисления + ТаблицаНачисления.СуммаПерерасчета + ВЫБОР
		|			КОГДА &ВыводитьНачальноеСальдо
		|				ТОГДА ВЫБОР
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
		|							ТОГДА ВЫБОР
		|									КОГДА ТаблицаНачисления.НачальноеСальдо > 0
		|										ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
		|							ТОГДА ВЫБОР
		|									КОГДА ТаблицаНачисления.НачальноеСальдо < 0
		|										ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
		|							ТОГДА ТаблицаНачисления.НачальноеСальдо - ТаблицаНачисления.СуммаОплаты
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КОплате,
		|	ВЫБОР
		|		КОГДА &ВыводитьНачальноеСальдо
		|			ТОГДА СУММА(ТаблицаНачисления.НачальноеСальдо)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НачальноеСальдо,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ КАК ВидУслуги,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма
		|ПОМЕСТИТЬ ВТ_ТаблицаНачисленияОбщая
		|ИЗ
		|	ВТ_ТаблицаНачисления КАК ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|			МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|		ИЗ
		|			втТаблицаНорм КАК ТаблицаНорм
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаНорм.ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|		ПО ТаблицаНачисления.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|			И ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО ТаблицаНачисления.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаНачисления.ЛицевойСчет,
		|	ТаблицаНачисления.Услуга,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ТаблицаНачисленияОбщая.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ТаблицаНачисленияОбщая.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ТаблицаНачисленияОбщая.СуммаНачисления КАК Начислено,
		|	ТаблицаНачисленияОбщая.СуммаОплаты КАК Оплата,
		|	ТаблицаНачисленияОбщая.СуммаПерерасчета КАК Перерасчет,
		|	ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисленияОбщая.КОплате КАК КОплате,
		|	ТаблицаНачисленияОбщая.НачальноеСальдо КАК НачальноеСальдо,
		|	ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	0 КАК Количество
		|ИЗ
		|	ВТ_ТаблицаНачисленияОбщая КАК ТаблицаНачисленияОбщая
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
		ЗапросНачисления.УстановитьПараметр("ВключениеНачальнойЗадолженности", ПараметрыОтчета.ВключениеНачальнойЗадолженности);
		ЗапросНачисления.УстановитьПараметр("ВыводитьНачальноеСальдо",         ПараметрыОтчета.ВыводитьНачальноеСальдо);
	
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.Пени);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_09" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаНачисления.Услуга КАК Услуга,
		|	ТаблицаНачисления.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ТаблицаНачисления.ВидУслуги КАК ВидУслуги,
		|	ТаблицаНачисления.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ТаблицаНачисления.Начислено КАК Начислено,
		|	ТаблицаНачисления.НачисленоИтог КАК НачисленоИтог,
		|	ТаблицаНачисления.Перерасчет КАК Перерасчет,
		|	ТаблицаНачисления.Субсидии КАК Субсидии,
		|	ТаблицаНачисления.ВРоткл КАК ВРоткл,
		|	ТаблицаНачисления.Норма КАК Норма,
		|	0 КАК Количество,
		|	ТаблицаНачисления.Льгота КАК Льгота
		|ИЗ
		|	(ВЫБРАТЬ
		|		НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|		НачисленияПоЛицевымСчетам.Услуга КАК Услуга,
		|		ВЫБОР
		|			КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|				ТОГДА НачисленияПоЛицевымСчетам.ВидУслуги
		|			ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|		КОНЕЦ КАК ВидУслуги,
		|		НачисленияПоЛицевымСчетам.Начислено КАК Начислено,
		|		НачисленияПоЛицевымСчетам.Начислено + НачисленияПоЛицевымСчетам.Перерасчет + ЕСТЬNULL(Льготы.СуммаНачисленияОборот, 0) КАК НачисленоИтог,
		|		НачисленияПоЛицевымСчетам.Перерасчет КАК Перерасчет,
		|		0 КАК Субсидии,
		|		0 КАК ВРоткл,
		|		ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма,
		|		ВЫБОР
		|			КОГДА -ЕСТЬNULL(Льготы.СуммаНачисленияОборот, 0) <> 0
		|				ТОГДА -ЕСТЬNULL(Льготы.СуммаНачисленияОборот, 0)
		|			ИНАЧЕ ЕСТЬNULL(ЛьготыПриНеУчетеВоВзаиморасчетах.СуммаНачисленияОборот, 0)
		|		КОНЕЦ КАК Льгота
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет) КАК ЛицевойСчет,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга) КАК Услуга,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга.ВидУслуги, КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга.ВидУслуги) КАК ВидУслуги,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) КАК Начислено,
		|			ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПерерасчеты.СуммаНачисленияОборот, 0) КАК Перерасчет
		|		ИЗ
		|			РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|					&ДатаНач,
		|					&ДатаКон,
		|					,
		|					ЛицевойСчет В (&СписокЛицевыхСчетов)
		|						И ВидНачисления В (&ВидыНачислений)
		|						И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|						&ДатаНач,
		|						&ДатаКон,
		|						,
		|						ЛицевойСчет В (&СписокЛицевыхСчетов)
		|							И ВидНачисления = &ВидыНачисленияПерерасчет
		|							И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПерерасчеты
		|				ПО КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.Услуга
		|					И КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = КВП_НачисленияНаЛицевыеСчетаПерерасчеты.ЛицевойСчет
		|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|				ПО КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет) КАК НачисленияПоЛицевымСчетам
		|			ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|			ПО НачисленияПоЛицевымСчетам.Услуга = ТаблицаНормПоУслуге.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|				ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|				МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|			ИЗ
		|				втТаблицаНорм КАК ТаблицаНорм
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ТаблицаНорм.ЛицевойСчет,
		|				ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|			ПО НачисленияПоЛицевымСчетам.Услуга.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|			ПО НачисленияПоЛицевымСчетам.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ЛьготыВложенный.ЛицевойСчет КАК ЛицевойСчет,
		|				СУММА(ЛьготыВложенный.СуммаНачисленияОборот) КАК СуммаНачисленияОборот,
		|				ЛьготыВложенный.Услуга КАК Услуга
		|			ИЗ
		|				(ВЫБРАТЬ
		|					КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|					КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		|					КВП_НачисленияНаЛицевыеСчетаОбороты.Услуга КАК Услуга
		|				ИЗ
		|					РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|							&ДатаНач,
		|							&ДатаКон,
		|							,
		|							ЛицевойСчет В (&СписокЛицевыхСчетов)
		|								И ВидНачисления = &ВидыНачисленияЛьготы
		|								И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты) КАК ЛьготыВложенный
		|			
		|			СГРУППИРОВАТЬ ПО
		|				ЛьготыВложенный.ЛицевойСчет,
		|				ЛьготыВложенный.Услуга) КАК Льготы
		|			ПО НачисленияПоЛицевымСчетам.Услуга = Льготы.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = Льготы.ЛицевойСчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				КВП_НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|				КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
		|				КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот
		|			ИЗ
		|				РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|						&ДатаНач,
		|						&ДатаКон,
		|						Период,
		|						ЛицевойСчет В (&СписокЛицевыхСчетов)
		|							И Организация = &Организация) КАК КВП_НачисленныеЛьготыОбороты) КАК ЛьготыПриНеУчетеВоВзаиморасчетах
		|			ПО НачисленияПоЛицевымСчетам.Услуга = ЛьготыПриНеУчетеВоВзаиморасчетах.Услуга
		|				И НачисленияПоЛицевымСчетам.ЛицевойСчет = ЛьготыПриНеУчетеВоВзаиморасчетах.ЛицевойСчет) КАК ТаблицаНачисления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаНачисления.ВидУслуги.Наименование";
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_11" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ ТаблицаСчетчиков
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|	И КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения МЕЖДУ &ДатаНач И КОНЕЦПЕРИОДА(&ДатаНач, МЕСЯЦ)
		|	И КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект В(&СписокЛицевыхСчетов)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаКонПред, Объект В (&СписокЛицевыхСчетов) И ДатаИзменения <= &ДатаКонПред) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
		|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик,
		|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ПоказаниеТекущее,
		|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ ТекущиеПоказания
		|ИЗ
		|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
		|			&ДатаКон,
		|			Счетчик В
		|				(ВЫБРАТЬ
		|					ТаблицаСчетчиков.Счетчик
		|				ИЗ
		|					ТаблицаСчетчиков)) КАК КВП_ПоказанияСчетчиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСчетчиков.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаСчетчиков.Услуга,
		|	ТаблицаСчетчиков.Счетчик,
		|	МАКСИМУМ(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание) КАК ПоказаниеПредыдущее,
		|	МАКСИМУМ(КВП_ПоказанияСчетчиковСрезПоследних.Период) КАК Период
		|ПОМЕСТИТЬ ПредыдущиеПоказания
		|ИЗ
		|	ТаблицаСчетчиков КАК ТаблицаСчетчиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков КАК КВП_ПоказанияСчетчиковСрезПоследних
		|		ПО ТаблицаСчетчиков.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеПоказания КАК ТекущиеПоказания
		|		ПО ТаблицаСчетчиков.Счетчик = ТекущиеПоказания.Счетчик
		|ГДЕ
		|	КВП_ПоказанияСчетчиковСрезПоследних.Период < ТекущиеПоказания.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСчетчиков.ЛицевойСчет,
		|	ТаблицаСчетчиков.Услуга,
		|	ТаблицаСчетчиков.Счетчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредыдущиеПоказания.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(ПредыдущиеПоказания.Услуга, ТекущиеПоказания.Услуга) КАК Услуга,
		|	СУММА(ЕСТЬNULL(ПредыдущиеПоказания.ПоказаниеПредыдущее, 0)) КАК ПоказаниеПредыдущее,
		|	СУММА(ЕСТЬNULL(ТекущиеПоказания.ПоказаниеТекущее, 0)) КАК ПоказаниеТекущее
		|ПОМЕСТИТЬ ТаблицаПоказаний
		|ИЗ
		|	ТекущиеПоказания КАК ТекущиеПоказания
		|		ПОЛНОЕ СОЕДИНЕНИЕ ПредыдущиеПоказания КАК ПредыдущиеПоказания
		|		ПО ТекущиеПоказания.Услуга = ПредыдущиеПоказания.Услуга
		|			И ТекущиеПоказания.Счетчик = ПредыдущиеПоказания.Счетчик
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредыдущиеПоказания.ЛицевойСчет,
		|	ЕСТЬNULL(ПредыдущиеПоказания.Услуга, ТекущиеПоказания.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	НачисленияПоЛицевымСчетам.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		|	НачисленияПоЛицевымСчетам.Услуга КАК Услуга
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация
		|				И ВидНачисления В (&ВидыНачислений)) КАК НачисленияПоЛицевымСчетам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	НачисленияПоЛицевымСчетам.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		|	НачисленияПоЛицевымСчетам.Услуга КАК Услуга
		|ПОМЕСТИТЬ ВТ_Льготы
		|ИЗ
		|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК НачисленияПоЛицевымСчетам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
		|	НачисленияПоЛицевымСчетам.СуммаНачисленияОборот КАК СуммаНачисленияОборот,
		|	НачисленияПоЛицевымСчетам.Услуга КАК Услуга
		|ПОМЕСТИТЬ ВТ_Перерасчет
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ВидНачисления = &ВидыНачисленияКорректировка
		|				И Организация = &Организация
		|				И ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК НачисленияПоЛицевымСчетам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_Начисления.ЛицевойСчет, ЕСТЬNULL(ВТ_Льготы.ЛицевойСчет, ВТ_Перерасчет.ЛицевойСчет)) КАК ЛицевойСчет,
		|	ЕСТЬNULL(ВТ_Начисления.Услуга, ЕСТЬNULL(ВТ_Льготы.Услуга, ВТ_Перерасчет.Услуга)) КАК Услуга,
		|	ЕСТЬNULL(ВТ_Начисления.СуммаНачисленияОборот, 0) КАК Начислено,
		|	ЕСТЬNULL(ВТ_Льготы.СуммаНачисленияОборот, 0) КАК Льгота,
		|	ЕСТЬNULL(ВТ_Перерасчет.СуммаНачисленияОборот, 0) КАК Перерасчет
		|ПОМЕСТИТЬ ВТ_ТаблицаНачислений
		|ИЗ
		|	ВТ_Начисления КАК ВТ_Начисления
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Льготы КАК ВТ_Льготы
		|		ПО ВТ_Начисления.ЛицевойСчет = ВТ_Льготы.ЛицевойСчет
		|			И ВТ_Начисления.Услуга = ВТ_Льготы.Услуга
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Перерасчет КАК ВТ_Перерасчет
		|		ПО ВТ_Начисления.ЛицевойСчет = ВТ_Перерасчет.ЛицевойСчет
		|			И ВТ_Начисления.Услуга = ВТ_Перерасчет.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачислений.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачислений.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, ВТ_ТаблицаНачислений.Услуга.ВидУслуги) КАК ВидУслуги,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ВТ_ТаблицаНачислений.Услуга.ВидУслуги.ЕдиницаИзмерения
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый.ЕдиницаИзмерения
		|	КОНЕЦ КАК ЕдИзм,
		|	ВТ_ТаблицаНачислений.Начислено КАК Начислено,
		|	ВТ_ТаблицаНачислений.Льгота КАК Льгота,
		|	ВТ_ТаблицаНачислений.Перерасчет КАК Перерасчет,
		|	ВТ_ТаблицаНачислений.Начислено - ВЫБОР
		|		КОГДА &НеУчитыватьЛьготыВоВзаиморасчетах
		|			ТОГДА 0
		|		ИНАЧЕ ВТ_ТаблицаНачислений.Льгота
		|	КОНЕЦ + ВТ_ТаблицаНачислений.Перерасчет КАК КОплате,
		|	ПРЕДСТАВЛЕНИЕ(Показания.ПоказаниеПредыдущее) КАК ПоказаниеПредыдущее,
		|	ПРЕДСТАВЛЕНИЕ(Показания.ПоказаниеТекущее) КАК ПоказаниеТекущее,
		|	0 КАК Норма
		|ИЗ
		|	ВТ_ТаблицаНачислений КАК ВТ_ТаблицаНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПоказаний КАК Показания
		|		ПО ВТ_ТаблицаНачислений.Услуга = Показания.Услуга
		|			И ВТ_ТаблицаНачислений.ЛицевойСчет = Показания.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО ВТ_ТаблицаНачислений.Услуга.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачислений.Услуга.ВидУслуги.Наименование";

		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		
		ЗапросНачисления.УстановитьПараметр("ДатаКонПред",                 КонецМесяца(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1)));
		ЗапросНачисления.УстановитьПараметр("ВидыНачисленияКорректировка", Перечисления.КВП_ВидыНачисления.КорректировкаНачислений);
		
		ТекстУсловияНаОрганизацию = "ИСТИНА";
		Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
			ТекстУсловияНаОрганизацию = ТекстУсловияНаОрганизацию + " И Организация = &Организация";
		КонецЕсли;
		
	ИначеЕсли ПараметрыОтчета.ВидЗапроса = "форма_13" Тогда
		
		ЗапросНачисления.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втТаблицаНорм
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ЛицевойСчет В (&СписокЛицевыхСчетов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачисленияПоЛицевымСчетамОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НачисленияПоЛицевымСчетамОбороты.Услуга КАК Услуга,
		|	КВП_НачисленияПоЛицевымСчетамОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
		|				ТОГДА -КВП_НачисленияПоЛицевымСчетамОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаОплаты,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
		|				ТОГДА КВП_НачисленияПоЛицевымСчетамОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПерерасчета,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Льготы)
		|					ИЛИ КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.РегистрацияОплаты)
		|					ИЛИ КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.КорректировкаНачислений)
		|					ИЛИ КВП_НачисленияПоЛицевымСчетамОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисления.Пени)
		|				ТОГДА 0
		|			ИНАЧЕ КВП_НачисленияПоЛицевымСчетамОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК СуммаНачисления,
		|	СУММА(0) КАК ВРоткл,
		|	СУММА(0) КАК НачальноеСальдо
		|ПОМЕСТИТЬ втТаблицаНачисления
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК КВП_НачисленияПоЛицевымСчетамОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НачисленияПоЛицевымСчетамОбороты.ЛицевойСчет,
		|	КВП_НачисленияПоЛицевымСчетамОбороты.Услуга,
		|	КВП_НачисленияПоЛицевымСчетамОбороты.Услуга.ВидУслуги
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияРасход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	0,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
		|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияПриход
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	0,
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетам.СуммаНачисленияНачальныйОстаток)
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетам
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетам.Услуга.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛьготыОбороты.ЛицевойСчет,
		|	КВП_ЛьготыОбороты.Услуга,
		|	КВП_ЛьготыОбороты.СуммаНачисленияОборот КАК СуммаЛьготы
		|ПОМЕСТИТЬ втТаблицаНачисленныеЛьготы
		|ИЗ
		|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			Организация = &Организация
		|				И (ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						втТаблицаНачисления.ЛицевойСчет,
		|						втТаблицаНачисления.Услуга
		|					ИЗ
		|						втТаблицаНачисления КАК втТаблицаНачисления)) КАК КВП_ЛьготыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаНачисления.ЛицевойСчет,
		|	ВТ_ТаблицаНачисления.Услуга КАК Услуга,
		|	СУММА(ВТ_ТаблицаНачисления.СуммаНачисления) КАК СуммаНачисления,
		|	СУММА(ВТ_ТаблицаНачисления.СуммаОплаты) КАК СуммаОплаты,
		|	СУММА(ВТ_ТаблицаНачисления.СуммаПерерасчета) КАК СуммаПерерасчета,
		|	СУММА(ВТ_ТаблицаНачисления.ВРоткл) КАК ВРоткл,
		|	СУММА(ВТ_ТаблицаНачисления.СуммаНачисления + ВТ_ТаблицаНачисления.СуммаПерерасчета + ВЫБОР
		|			КОГДА &ВыводитьНачСальдо = ИСТИНА
		|				ТОГДА ВЫБОР
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьЗадолженность""
		|							ТОГДА ВЫБОР
		|									КОГДА ВТ_ТаблицаНачисления.НачальноеСальдо > 0
		|										ТОГДА ВТ_ТаблицаНачисления.НачальноеСальдо - ВТ_ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ВТ_ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьАванс""
		|							ТОГДА ВЫБОР
		|									КОГДА ВТ_ТаблицаНачисления.НачальноеСальдо < 0
		|										ТОГДА ВТ_ТаблицаНачисления.НачальноеСальдо - ВТ_ТаблицаНачисления.СуммаОплаты
		|									ИНАЧЕ -ВТ_ТаблицаНачисления.СуммаОплаты
		|								КОНЕЦ
		|						КОГДА &ВключениеНачальнойЗадолженности = ""ВключатьНачСальдо""
		|							ТОГДА ВТ_ТаблицаНачисления.НачальноеСальдо - ВТ_ТаблицаНачисления.СуммаОплаты
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КОплате,
		|	СУММА(ВЫБОР
		|			КОГДА &ВыводитьНачСальдо = ИСТИНА
		|				ТОГДА ВТ_ТаблицаНачисления.НачальноеСальдо
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачальноеСальдо,
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ВТ_ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ КАК ВидУслуги,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)) КАК Норма
		|ПОМЕСТИТЬ втТаблицаНачисленияОбщая
		|ИЗ
		|	втТаблицаНачисления КАК ВТ_ТаблицаНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК ТаблицаНормПоУслуге
		|		ПО ВТ_ТаблицаНачисления.Услуга = ТаблицаНормПоУслуге.Услуга
		|			И ВТ_ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоУслуге.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ТаблицаНорм.ЛицевойСчет КАК ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги КАК ВидУслуги,
		|			МАКСИМУМ(ТаблицаНорм.НормаПотребления) КАК НормаПотребления
		|		ИЗ
		|			втТаблицаНорм КАК ТаблицаНорм
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ТаблицаНорм.ЛицевойСчет,
		|			ТаблицаНорм.ВидУслуги) КАК ТаблицаНормПоВидуУслуг
		|		ПО ВТ_ТаблицаНачисления.ВидУслуги = ТаблицаНормПоВидуУслуг.ВидУслуги
		|			И ВТ_ТаблицаНачисления.ЛицевойСчет = ТаблицаНормПоВидуУслуг.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
		|		ПО ВТ_ТаблицаНачисления.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ТаблицаНачисления.ЛицевойСчет,
		|	ВТ_ТаблицаНачисления.Услуга,
		|	ЕСТЬNULL(ТаблицаНормПоУслуге.НормаПотребления, ЕСТЬNULL(ТаблицаНормПоВидуУслуг.НормаПотребления, 0)),
		|	ВЫБОР
		|		КОГДА КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый ЕСТЬ NULL 
		|			ТОГДА ВТ_ТаблицаНачисления.ВидУслуги
		|		ИНАЧЕ КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет КАК ЛицевойСчет,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга КАК Услуга,
		|	ВТ_ТаблицаНачисленияОбщая.Услуга.СпособРасчета КАК УслугаСпособРасчета,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги КАК ВидУслуги,
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВТ_ТаблицаНачисленияОбщая.СуммаНачисления КАК Начислено,
		|	ВТ_ТаблицаНачисленияОбщая.СуммаОплаты КАК Оплата,
		|	ВТ_ТаблицаНачисленияОбщая.СуммаПерерасчета КАК Перерасчет,
		|	ВТ_ТаблицаНачисленияОбщая.ВРоткл КАК ВРоткл,
		|	ЕСТЬNULL(ТаблицаНачисленныеЛьготы.СуммаЛьготы, 0) КАК Льгота,
		|	ВТ_ТаблицаНачисленияОбщая.КОплате - ВЫБОР
		|		КОГДА &НеУчитыватьЛьготыВоВзаиморасчетах
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(ТаблицаНачисленныеЛьготы.СуммаЛьготы, 0)
		|	КОНЕЦ КАК КОплате,
		|	ВТ_ТаблицаНачисленияОбщая.НачальноеСальдо КАК НачальноеСальдо,
		|	ВТ_ТаблицаНачисленияОбщая.Норма КАК Норма,
		|	0 КАК Количество
		|ИЗ
		|	втТаблицаНачисленияОбщая КАК ВТ_ТаблицаНачисленияОбщая
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНачисленныеЛьготы КАК ТаблицаНачисленныеЛьготы
		|		ПО ВТ_ТаблицаНачисленияОбщая.Услуга = ТаблицаНачисленныеЛьготы.Услуга
		|			И ВТ_ТаблицаНачисленияОбщая.ЛицевойСчет = ТаблицаНачисленныеЛьготы.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ТаблицаНачисленияОбщая.ВидУслуги.Наименование";
		
		ЗапросНачисления.УстановитьПараметр("ВключениеНачальнойЗадолженности", ПараметрыОтчета.ВключениеНачальнойЗадолженности);
		ЗапросНачисления.УстановитьПараметр("ВыводитьНачСальдо",               ПараметрыОтчета.ВыводитьНачальноеСальдо);
		
		ВидыНачислений = Новый Массив();
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);
		ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.Пени);		
		
	КонецЕсли;
	
	ЗапросНачисления.УстановитьПараметр("СписокЛицевыхСчетов",      СписокОбъектов);
	ЗапросНачисления.УстановитьПараметр("ВидыНачислений",           ВидыНачислений);
	ЗапросНачисления.УстановитьПараметр("ВидыНачисленийПени",       Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	ЗапросНачисления.УстановитьПараметр("ВидыНачисленияЛьготы",     Перечисления.КВП_ВидыНачисления.Льготы);
	ЗапросНачисления.УстановитьПараметр("ВидыНачисленияПерерасчет", Перечисления.КВП_ВидыНачисления.КорректировкаНачислений);
	ЗапросНачисления.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросНачисления.УстановитьПараметр("ДатаКон",     Новый Граница(КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ВидГраницы.Включая));
	ЗапросНачисления.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ЗапросНачисления.УстановитьПараметр("НеУчитыватьЛьготыВоВзаиморасчетах", ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах);
	
	Результат = ЗапросНачисления.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗапросНачисления()

// Получение данных об имеющихся субсидиях.
//
// Параметры
//  СписокОбъектов – список лицевых счетов
//
Функция ПолучитьДанныеОСубсидиях(СписокОбъектов, ПараметрыОтчета) Экспорт

	ЗапросСубсидии = Новый Запрос();

	ЗапросСубсидии.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленияНаЛицевыеСчетаОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот КАК СуммаСубсидии
	|ИЗ
	|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|			&ДатаНач, &ДатаКон, Период,
	|			Организация = &Организация И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И ВидНачисления = &ВидНачисления) КАК КВП_НачисленияНаЛицевыеСчетаОбороты";

	ЗапросСубсидии.УстановитьПараметр("ДатаНач",               НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросСубсидии.УстановитьПараметр("ДатаКон",               КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросСубсидии.УстановитьПараметр("СписокЛицевыхСчетов",   СписокОбъектов);
	ЗапросСубсидии.УстановитьПараметр("ВидНачисления",         Перечисления.КВП_ВидыНачисления.Льготы);
	ЗапросСубсидии.УстановитьПараметр("Организация",           ПараметрыОтчета.Организация);

	ТаблицаСубсидий = Новый ТаблицаЗначений;
	ТаблицаСубсидий.Колонки.Добавить("ЛицевойСчет");
	ТаблицаСубсидий.Колонки.Добавить("СуммаСубсидии");

	ВыборкаСубсидии = ЗапросСубсидии.Выполнить().Выбрать();
	
	Пока ВыборкаСубсидии.СледующийПоЗначениюПоля("ЛицевойСчет") Цикл
		Если НЕ ВыборкаСубсидии.СуммаСубсидии = 0 Тогда
			НоваяСтрока = ТаблицаСубсидий.Добавить();
			НоваяСтрока.ЛицевойСчет   = ВыборкаСубсидии.ЛицевойСчет;
			НоваяСтрока.СуммаСубсидии = ВыборкаСубсидии.СуммаСубсидии;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСубсидий;

КонецФункции // ПолучитьДанныеОСубсидиях()

// Получение данных о накопившихся пени.
//
// Параметры
//  СписокОбъектов – список лицевых счетов
//  ПениЗаТекущийМесяц - флаг, определяющий за какой месяц искать пени(текущий/предыдущий)
//
Функция ПолучитьДанныеОПени(СписокОбъектов, ПараметрыОтчета) Экспорт
	
	ЗапросПени = Новый Запрос();
	
	ЗапросПени.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленияНаЛицевыеСчетаОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияПриход, 0) КАК СуммаПени
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Период,
	|			Организация = &Организация И ЛицевойСчет В (&СписокЛицевыхСчетов)
	|				И ВидНачисления = &ВидНачисления) КАК КВП_НачисленияНаЛицевыеСчетаОстатки";
	
	ПениЗаТекущийМесяц = Истина;
	Если ПараметрыОтчета.Свойство("ПениЗаТекущийМесяц") Тогда
		ПениЗаТекущийМесяц = ПараметрыОтчета.ПениЗаТекущийМесяц;
	КонецЕсли;
	
	Если ПениЗаТекущийМесяц Тогда
		ПериодДляПени = ПараметрыОтчета.ПериодПросмотра;
	Иначе
		ПериодДляПени = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	КонецЕсли;
	
	ЗапросПени.УстановитьПараметр("ДатаНач",       НачалоМесяца(ПериодДляПени));
	ЗапросПени.УстановитьПараметр("ДатаКон",       КонецМесяца(ПериодДляПени));
	ЗапросПени.УстановитьПараметр("СписокЛицевыхСчетов", СписокОбъектов);
	ЗапросПени.УстановитьПараметр("ВидНачисления",       Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	ЗапросПени.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
	
	ТаблицаПени = Новый ТаблицаЗначений;
	ТаблицаПени.Колонки.Добавить("ЛицевойСчет");
	ТаблицаПени.Колонки.Добавить("СуммаПени");
	
	ВыборкаПени = ЗапросПени.Выполнить().Выбрать();
	Пока ВыборкаПени.СледующийПоЗначениюПоля("ЛицевойСчет") Цикл
		Если НЕ ВыборкаПени.СуммаПени = 0 Тогда
			НоваяСтрока = ТаблицаПени.Добавить();
			НоваяСтрока.ЛицевойСчет = ВыборкаПени.ЛицевойСчет;
			НоваяСтрока.СуммаПени   = ВыборкаПени.СуммаПени;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПени;
	
КонецФункции // ПолучитьДанныеОПени()

// Получает сумму начального сальдо по каждому л/с в списке объектов.
//
// Параметры
//  СписокОбъектов       – список лицевых счетов
//
// Возвращаемое значение:
//  Таблица значений
//
Функция ПолучитьДанныеОНачальномСальдо(СписокОбъектов, ПараметрыОтчета) Экспорт
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		
		// Получение суммарной информации о начислениях по лицевым счетам на начало месяца
		ЗапросСальдо = Новый Запрос();
		ЗапросСальдо.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ЕСТЬNULL(КВП_ГрафикиПлатежейПоЛС.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_ОплатыПоГрафикуВТекущемМесяце
		|ИЗ
		|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
		|ГДЕ
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет В(&СписокЛицевыхСчетов)
		|	И КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа = &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ЕСТЬNULL(КВП_ГрафикиПлатежейПоЛС.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_ОплатыПоГрафикуОстатки
		|ИЗ
		|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
		|ГДЕ
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет В(&СписокЛицевыхСчетов)
		|	И КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа >= &Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) - ЕСТЬNULL(ВТ_ОплатыПоГрафикуОстатки.Сумма, 0) + ЕСТЬNULL(ВТ_ОплатыПоГрафикуВТекущемМесяце.Сумма, 0) КАК НачальноеСальдо,
		|	ВЫБОР
		|		КОГДА НЕ ВТ_ОплатыПоГрафикуВТекущемМесяце.Сумма = NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СУчетомГрафикаПлатежей
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&Дата,
		|			ЛицевойСчет В (&СписокЛицевыхСчетов)
		|				И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОплатыПоГрафикуВТекущемМесяце КАК ВТ_ОплатыПоГрафикуВТекущемМесяце
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет = ВТ_ОплатыПоГрафикуВТекущемМесяце.ЛицевойСчет
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ОплатыПоГрафикуОстатки КАК ВТ_ОплатыПоГрафикуОстатки
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет = ВТ_ОплатыПоГрафикуОстатки.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет";
	
		ЗапросСальдо.УстановитьПараметр("СписокЛицевыхСчетов", СписокОбъектов);
		ЗапросСальдо.УстановитьПараметр("Дата",                НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
		ЗапросСальдо.УстановитьПараметр("Организация",         ПараметрыОтчета.Организация);
		
		Возврат ЗапросСальдо.Выполнить().Выгрузить();
	
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеОНачальномСальдо()

// В общей таблице оплат находит только те оплаты, которые относятся
// к текущему лицевому счету.
// 
// Параметры:
//  ТаблицаОплат - общая таблица оплат
//  ЛицевойСчет  - текущий лицевой счет
//
Функция ПолучитьТаблицуОплат(ТаблицаОплат, ЛицевойСчет) Экспорт
	
	Отбор = Новый Структура("ЛицевойСчет", ЛицевойСчет);
	СтрокиОплат     = ТаблицаОплат.НайтиСтроки(Отбор);
	ДанныеОбОплатах = ТаблицаОплат.СкопироватьКолонки();
	
	Для Каждого Строка Из СтрокиОплат Цикл
		НоваяСтрока = ДанныеОбОплатах.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;	
	
	Возврат ДанныеОбОплатах;
	
КонецФункции // ПолучитьТаблицуОплат()

// В общей таблице по счетчикам находит только те счетчики, которые относятся
// к текущему лицевому счету (или соответствующему помещению).
// 
// Параметры:
//  ТаблицаСчетчиков - общая таблица счетчиков
//  Объект           - текущий лицевой счет
//
Функция ПолучитьТаблицуСчетчиков(ТаблицаСчетчиков, Объект) Экспорт
	
	СтрокиПоказанийСчетчиков   = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Объект", Объект));
	ДанныеОПоказанияхСчетчиков = ТаблицаСчетчиков.Скопировать(СтрокиПоказанийСчетчиков);
	
	// Добавляем в таблицу информацию о счетчиках, установленных на помещение.
	СтрокиПоказанийСчетчиковДоп = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("Объект", Объект.Адрес));
	Для Каждого Строка Из СтрокиПоказанийСчетчиковДоп Цикл
		ЗаполнитьЗначенияСвойств(ДанныеОПоказанияхСчетчиков.Добавить(), Строка);
	КонецЦикла;	
	
	Возврат ДанныеОПоказанияхСчетчиков;
	
КонецФункции // ПолучитьТаблицуСчетчиков()

// Создает строку итогов по данным таблицы начислений.
Функция ПолучитьСтрокуИтогов(ТаблицаНачислений)
	
	Итоги        = ТаблицаНачислений.СкопироватьКолонки();
	СтрокаИтогов = Итоги.Добавить();
	
	Если НЕ ТаблицаНачислений.Колонки.Найти("Начислено") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.Начислено = 0;
		СтрокаИтогов.Начислено = ТаблицаНачислений.Итог("Начислено");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("Льгота") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.Льгота = 0;
		СтрокаИтогов.Льгота = ТаблицаНачислений.Итог("Льгота");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("КОплате") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.КОплате = 0;
		СтрокаИтогов.КОплате = ТаблицаНачислений.Итог("КОплате");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("Перерасчет") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.Перерасчет = 0;
		СтрокаИтогов.Перерасчет = ТаблицаНачислений.Итог("Перерасчет");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("НачисленоИтог") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.НачисленоИтог = 0;
		СтрокаИтогов.НачисленоИтог = ТаблицаНачислений.Итог("НачисленоИтог");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("Пени") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.Пени = 0;
		СтрокаИтогов.Пени = ТаблицаНачислений.Итог("Пени");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("Оплата") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.Оплата = 0;
		СтрокаИтогов.Оплата = ТаблицаНачислений.Итог("Оплата");
	КонецЕсли;
	Если НЕ ТаблицаНачислений.Колонки.Найти("НачальноеСальдо") = НЕОПРЕДЕЛЕНО Тогда
		СтрокаИтогов.НачальноеСальдо = 0;
		СтрокаИтогов.НачальноеСальдо = ТаблицаНачислений.Итог("НачальноеСальдо");
	КонецЕсли;
	
	Возврат СтрокаИтогов;
	
КонецФункции // ПолучитьСтрокуИтогов()

// В общей таблице начислений находит только те начисления, которые относятся
// к текущему лицевому счету.
// 
// Параметры:
//  ТаблицаНачислений - общая таблица оплат
//  ЛицевойСчет  - текущий лицевой счет
//
Функция ПолучитьТаблицуНачисления(ТаблицаНачислений, ЛицевойСчет) Экспорт
	
	Отбор = Новый Структура("ЛицевойСчет", ЛицевойСчет);
	СтрокиНачислений   = ТаблицаНачислений.НайтиСтроки(Отбор);
	ДанныеОНачислениях = ТаблицаНачислений.СкопироватьКолонки();
	
	// Добавление строки общих итогов по таблице начисления.
	СтрокаИтогов = ДанныеОНачислениях.Добавить();
	
	// Заполнение выходной таблицы.
	Для Каждого Строка Из СтрокиНачислений Цикл
		НоваяСтрока = ДанныеОНачислениях.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Заполнение строки итогов
	ЗаполнитьЗначенияСвойств(СтрокаИтогов, ПолучитьСтрокуИтогов(ДанныеОНачислениях));
	
	Возврат ДанныеОНачислениях;
	
КонецФункции // ПолучитьТаблицуНачисления()

// Получение информации из таблицы субсидий о сумме субсидий для л/с.
Функция ПолучитьСуммуСубсидийДляЛС(ТаблицаСубсидий, ЛицевойСчет) Экспорт
	
	Строка = ТаблицаСубсидий.Найти(ЛицевойСчет, "ЛицевойСчет");
	Если НЕ Строка = НЕОПРЕДЕЛЕНО Тогда
		Возврат Строка.СуммаСубсидии;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСуммуСубсидийДляЛС()

// Получение информации из таблицы субсидий о сумме пени для л/с.
Функция ПолучитьСуммуПениДляЛС(ТаблицаПени, ЛицевойСчет) Экспорт
	
	Строка = ТаблицаПени.Найти(ЛицевойСчет, "ЛицевойСчет");
	Если НЕ Строка = НЕОПРЕДЕЛЕНО Тогда
		Возврат Строка.СуммаПени;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Получение информации из таблицы начального сальдо о сумме сальдо для л/с.
// Возвращаемое значение - Структура, содержащая поля: Начальное сальдо и СУчетомГрафикаПлатежей.
Функция ПолучитьНачальноеСальдоДляЛС(ТаблицаСальдо, ЛицевойСчет, ПараметрыОтчета) Экспорт
	
	СтруктураНачСальдо = Новый Структура;
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Строка = ТаблицаСальдо.Найти(ЛицевойСчет, "ЛицевойСчет");
		Если НЕ Строка = НЕОПРЕДЕЛЕНО Тогда
			СтруктураНачСальдо.Вставить("НачальноеСальдо",        Строка.НачальноеСальдо);
			СтруктураНачСальдо.Вставить("СУчетомГрафикаПлатежей", Строка.СУчетомГрафикаПлатежей);
		Иначе
			СтруктураНачСальдо.Вставить("НачальноеСальдо",        0);
			СтруктураНачСальдо.Вставить("СУчетомГрафикаПлатежей", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНачСальдо;
	
КонецФункции // ПолучитьНачальноеСальдоДляЛС()

// Выводит текущую квитанцию в итоговый табличный документ, анализируя настройки
// и свободное место на листе.
//
// Параметры:
//  ДокументРезультат - результирующий табличный документ
//  тмДокумент - табличный документ с текущей квитанцией
//  ЭтоПервая - признак первой квитанции в списке
//
Процедура ВывестиТекущуюКвитанцию(ДокументРезультат, тмДокумент, ЭтоПервая, ПараметрыОтчета) Экспорт
	
	Если ЭтоПервая Тогда
		ЭтоПервая = Ложь;
	ИначеЕсли ПараметрыОтчета.ВыводитьПоОднойКвитанции Или Не ДокументРезультат.ПроверитьВывод(тмДокумент) Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ДокументРезультат.Вывести(тмДокумент);
	
КонецПроцедуры // ВывестиТекущуюКвитанцию()

// Проверяет равность нулю итоговой суммы к оплате и суммы начисления.
//
// Параметры:
//  Начисления - таблица значений с данными о начислениях
//  Пени       - таблица значений с данными о пенях
//  НаименованиеКолонки - наименование колонки в таблице начислений, по которой берется итог
//  НачСальдо  - таблица значений с данными о начальном сальдо
//  Оплаты     - таблица значений с данными об оплатах
//
// Возвращаемое значение:
//  Булево.
//
Функция ТекущаяКвитанцияНулевая(Начисления, Пени, НаименованиеКолонки, НачСальдо = Неопределено, Оплаты = Неопределено, ВыводитьНачальноеСальдо) Экспорт
	
	Если НЕ Начисления.Количество() = 0 Тогда
		СтрокаИтогов = Начисления.Получить(0);
		ВсегоКОплате = ?(НаименованиеКолонки = "КОплате", СтрокаИтогов.КОплате, СтрокаИтогов.НачисленоИтог) + Пени;
	Иначе
		ВсегоКОплате = Пени;
	КонецЕсли;
	
	Если НЕ Оплаты = Неопределено Тогда
		БылиОплаты = ?(Оплаты.Количество() = 0, Ложь, Истина);
	Иначе
		БылиОплаты = Ложь;
	КонецЕсли;
	
	Сальдо = 0;
	Если ВыводитьНачальноеСальдо И НЕ НачСальдо = Неопределено Тогда
		Сальдо = ?(НачСальдо.Свойство("НачальноеСальдо"), НачСальдо["НачальноеСальдо"], 0);
	КонецЕсли;
	
	Если ВсегоКОплате = 0 И НЕ БылиОплаты И Сальдо = 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ТекущаяКвитанцияНулевая()

// Формирует наименование организации в зависимости от настройки
// «Для печатных форм использовать»
Функция ПолучитьНаименованиеОрганизации(Организация) Экспорт
	
	СправочникОрганизации = Справочники.Организации.НайтиПоНаименованию(Организация);
	Если СправочникОрганизации.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование Тогда
		Возврат СправочникОрганизации.НаименованиеСокращенное;
	Иначе
		Возврат СправочникОрганизации.НаименованиеПолное;
	КонецЕсли;
	
КонецФункции // ПолучитьНаименованиеОрганизации()

// Возвращает дополнительные контакты организации.
//
Функция ПолучитьДополнительныеКонтакты(ПараметрыОтчета) Экспорт
	
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХотказ = Ложь Тогда
		ДопКонтакты = СокрЛП(ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ДополнительныеКонтактыОрганизации);
	Иначе
		ДопКонтакты = "";
	КонецЕсли;
	
	Возврат ДопКонтакты;
	
КонецФункции // ПолучитьДополнительныеКонтакты()

// Сортирует переданную таблицу начислений согласно установленному порядку.
//
// Параметры:
//  ТаблицаНачисления - Таблица значений - таблица начислений
//
Процедура СортироватьТаблицуНачислений(ТаблицаНачисления) Экспорт
	
	ТаблицаНачисления.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0));
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	тмПорядокУслуг = НаборЗаписей.Выгрузить();
	
	МаксНомер = тмПорядокУслуг.Количество() + 1;
	ТекСтрока = 0;
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		ТекСтрока = ТекСтрока + 1;
		Если ТекСтрока = 1 Тогда
			СтрокаНачисления.Порядок = 0;
			Продолжить;
		КонецЕсли;
		СтрокаПорядка = тмПорядокУслуг.Найти(СтрокаНачисления.ВидУслуги);
		Если СтрокаПорядка = Неопределено Тогда
			СтрокаНачисления.Порядок = МаксНомер;
		Иначе
			СтрокаНачисления.Порядок = СтрокаПорядка.Порядок;
		КонецЕсли;
	КонецЦикла;
	
	// Если в таблице начислений есть колонка "ВидТарифа", то сортируем и по ней.
	ТаблицаНачисления.Сортировать("Порядок,ВидУслуги" +
	                             ?(ТаблицаНачисления.Колонки.Найти("ВидТарифа") = Неопределено, "", ",ВидТарифа"));
	
КонецПроцедуры // СортироватьТаблицуНачислений()

// Нахождение стоимости банковского перевода.
//
// Параметры
//  ВсегоНачислено – сумма начисления
//
Процедура ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета) Экспорт

	Если ПараметрыОтчета.ВключатьКассовыйСбор Тогда
		ПарамКассСборы = Новый Структура();
		СтоимостьУслугБанка = Окр(ВсегоНачислено * ПараметрыОтчета.КассовыйСборБанка / 100, 2);
		ПарамКассСборы.Вставить("УслугиБанка", СтоимостьУслугБанка);

		ВсегоНачислено = ВсегоНачислено + СтоимостьУслугБанка;
	КонецЕсли;

КонецПроцедуры // ОпределитьКассовыйСбор()

// Включает начальное сальдо в итоговую сумму к оплате в зависимости от указанных
// настроек.
// 
// Параметры
//  ВсегоКОплате    - Итоговая сумма к оплате
//  Объект          - Лицевой счет
//  ВнесеноОплат    - Итоговая сумма поступивших оплат
//  Предоплата      - Сумма предоплаты
//  НачальноеСальдо - Начальное сальдо
// 
Процедура ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета) Экспорт
	
	Задолженность = ?(НачальноеСальдо > 0, НачальноеСальдо, 0);
	Аванс         = ?(НачальноеСальдо < 0, НачальноеСальдо, 0);
		
	Если ПараметрыОтчета.ВключениеНачальнойЗадолженности = "НеВыводить" Тогда
		ВсегоКОплате = ВсегоКОплате - Предоплата;
		
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьЗадолженность" Тогда
		ВсегоКОплате = ВсегоКОплате - ВнесеноОплат + Задолженность;
			
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьАванс" Тогда
		ВсегоКОплате = ВсегоКОплате - ВнесеноОплат + Аванс;
			
	ИначеЕсли ПараметрыОтчета.ВключениеНачальнойЗадолженности = "ВключатьНачСальдо" Тогда
		ВсегоКОплате = ВсегоКОплате - ВнесеноОплат + НачальноеСальдо;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьНачальноеСальдо()

// Формирует текст штрих-кода для вывода в квитанцию.
//
// Параметры
//  Объект       – текущий лицевой счет
//  СуммаОплаты  – сумма к оплате
//
// Возвращаемое значение:
//  Строка – текст штрих-кода
//
Функция ПолучитьШтрихКод(Объект, СуммаОплаты, ПараметрыОтчета, ТекстКода = "", ОтображатьТекст = Истина) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Дата",        ПараметрыОтчета.ПериодПросмотра);
	Параметры.Вставить("ЛицевойСчет", Объект);
	Параметры.Вставить("Сумма",       СуммаОплаты);
	
	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра, "ИННЮЛ,БанкСчетНомер");
	
	Параметры.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.ИННЮЛ,         12));
	Параметры.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.БанкСчетНомер, 20));
	
	// Заглушка для вывод штрихкодов в квитанциях (не поддерживается QR)
	НастройкиФормированияПД = ПараметрыОтчета.мНастройкиФормированияПДЖКХ;
	НастройкиФормированияПД.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	
	ТекстКода = УПЖКХ_ПечатьКвитанцийСервер.СформироватьШтрихкод(Параметры, НастройкиФормированияПД);
	
	ПараметрыШтрихкода = Новый Структура;
	УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, ТекстКода);
	
	Возврат МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецФункции // ПолучитьШтрихКод()

// Процедура добавляет в структуры дополнительные элементы со значениями,
// составляющие текст штрихкода.
//
Процедура ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты)
	
	ПараметрыОтчета.Вставить("ПараметрыУП",             ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ);
	ПараметрыОтчета.Вставить("ПараметрыФормированияПД", ПараметрыОтчета.мНастройкиФормированияПДЖКХ);
	ПараметрыОтчета.Вставить("ВидШК",                   ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода);
	
	ОбщиеДанные.Вставить("СрокОплатыДата",    Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	ОбщиеДанные.Вставить("ТаблицаИПУ",        ТаблицаСчетчиков);
	ОбщиеДанные.Вставить("КОплатеПени",       ПениНачислено);
	ОбщиеДанные.Вставить("Организация",       ПараметрыОтчета.Организация);
	
	ТаблицаРСЗдания = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовЗданий(ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.Организация, Объект.Адрес.Владелец);
	СтрокаЗдания = ТаблицаРСЗдания[0];
	
	НомерСчета = СтрокаЗдания.РасчетныйСчет;
	Банк       = СтрокаЗдания.Банк.Наименование;
	КоррСчет   = СтрокаЗдания.КоррСчет;
	БИК        = СтрокаЗдания.БИК;
	
	ОбщиеДанные.Вставить("Банк",              Банк);
	ОбщиеДанные.Вставить("БИК",               СокрЛП(БИК));
	ОбщиеДанные.Вставить("РасчетныйСчет",     СокрЛП(НомерСчета));
	ОбщиеДанные.Вставить("КоррСчет",          СокрЛП(КоррСчет));
	ОбщиеДанные.Вставить("ВсегоКОплатеДляШК", СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОбщиеДанные.ВсегоКОплате));
	ОбщиеДанные.Вставить("КППОрганизации",    ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ИННОрганизации",    ПараметрыОтчета.Организация.ИНН);
	ОбщиеДанные.Вставить("ВладелецЖилец",     ?(ТипЗнч(ОбщиеДанные.ФИО) = Тип("СправочникСсылка.Контрагенты"), Ложь, Истина));
	ОбщиеДанные.Вставить("ЛицевойСчет",       Объект);
	ОбщиеДанные.Вставить("Помещение",         Объект.Адрес);
	
КонецПроцедуры // ПодготовитьСтруктуры()

// Процедура устанавливает картинку штрихкода.
//
Процедура УстановитьКартинкуШтрихкода(ДокументРезультат, Объект, ОбщиеДанные, СтруктураНастроек)
	
	Если СтруктураНастроек.ВидШК = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный Тогда
		
		ТекстШК    = "";
		КартинкаШК = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьШтрихкод(Объект, ОбщиеДанные, СтруктураНастроек, ТекстШК, Ложь);
		ОбщиеДанные.Вставить("ТекстШК", ТекстШК);
		Если ТипЗнч(КартинкаШК) = Тип("Картинка")
			И Не ДокументРезультат.Области.Найти("ШтрихКод") = Неопределено Тогда
			ДокументРезультат.Области.ШтрихКод.Картинка = КартинкаШК;
			ДокументРезультат.Параметры.Заполнить(ОбщиеДанные);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать штрихкод.");
		КонецЕсли;
		
	Иначе
		ТекстШК      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтрокуQRШтрихкода(Объект, СтруктураНастроек, ОбщиеДанные);
		ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(ТекстШК, 1, 190);
		
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные")
		   И Не ДокументРезультат.Области.Найти("QRШК") = Неопределено Тогда
			ДокументРезультат.Области.QRШК.Картинка = Новый Картинка(ДанныеQRКода);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать QR-код.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьКартинкуШтрихкода()

// Выводит таблицу начислений.
Процедура ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеОФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти = "", ПараметрыОтчета,
								   СуммируемыеПоля = "", СворачиватьПоТарифам = Ложь, СворачиватьПоТарифамОднойСтрокой = Ложь, ПоляПеречисления = "") Экспорт
	
	// Заполним недостающие данные.
	Для Каждого СтрокаТаблицы Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тариф) Тогда
				СтрокаТаблицы.Тариф = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаТаблицы.Услуга,
																	Объект);
				// Если размер тарифа не найден, то ищем в данных о фактических затратах.
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тариф) Тогда
					НайденнаяСтрока = ДанныеОФактЗатратах.Найти(СтрокаТаблицы.Услуга, "Услуга");
					Если Не НайденнаяСтрока = Неопределено Тогда
						СтрокаТаблицы.Тариф = НайденнаяСтрока.Тариф;
					КонецЕсли;
				КонецЕсли;
				СтрокаТаблицы.Количество = КВП_ПолучитьНачислениеНаОбъектПоУслуге(КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация, Объект, 
										 СтрокаТаблицы.Услуга, ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ, , , , Истина);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Норма) И Не ЗначениеЗаполнено(СтрокаТаблицы.РазмерНормы) Тогда
				СтрокаТаблицы.РазмерНормы = ПолучитьРазмерНормыПотребления(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), СтрокаТаблицы.Норма, ПараметрыОтчета.Организация);
			КонецЕсли;	
			
			СтрокаТаблицы.Тариф = ОКР(СтрокаТаблицы.Тариф, 4);
			
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.КВП_ВидыУслугДляЗаменыВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаВидовУслуг = НаборЗаписей.Выгрузить();
	ТаблицаВидовУслуг.Свернуть("ВидУслугиНовый");
	Для Каждого ТекВидУслуги Из ТаблицаВидовУслуг Цикл
		СтрокиВидаУслуги = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
	КонецЦикла;
	
	// Сворачиваем и сортируем таблицу начислений
	УПЖКХ_ПечатьКвитанцийСервер.СвернутьТаблицуНачислений(ТаблицаНачисления, СуммируемыеПоля, СворачиватьПоТарифам, СворачиватьПоТарифамОднойСтрокой, ПоляПеречисления);
	
	МаксИндекс = ТаблицаНачисления.Количество() - 1;
	Для Сч = 1 По МаксИндекс Цикл
		Строка = ТаблицаНачисления.Получить(Сч);
		Если НЕ ЗначениеЗаполнено(Строка.Количество)
		 ИЛИ (Не Строка.Начислено = Строка.Тариф * Строка.Количество) Тогда
			Если Строка.УслугаСпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
				Если Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь Тогда
					Строка.Количество = СтруктОписание.ОбщаяПлощадь;
				ИначеЕсли Строка.Услуга.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь Тогда
					Строка.Количество = СтруктОписание.ЖилаяПлощадь;
				Иначе
					Строка.Количество = ?(Строка.Тариф = 0, 0, Строка.Начислено / Строка.Тариф);
				КонецЕсли;
			Иначе
				Строка.Количество = ?(Строка.Тариф = 0, 0, Строка.Начислено / Строка.Тариф);
			КонецЕсли;
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("НачисленияСтрока" + ПриставкаОбласти);
		Область.Параметры.Заполнить(Строка);
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("РазмерНормы");
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		СписокФорматируемыхПараметров.Добавить("Количество");
		СписокФорматируемыхПараметров.Добавить("ПоказаниеПредыдущее");
		СписокФорматируемыхПараметров.Добавить("ПоказаниеТекущее");
		
		СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-";
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
КонецПроцедуры // ВывестиТаблицуНачислений()

// Выводит примечание.
//
// Параметры:
//  ДокументРезультат – табличный документ, в который нужно вывести примечание
//  Макет        – табличный документ, из которого нужно брать шаблон примечания
//
Процедура ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета) Экспорт

	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХотказ = Ложь Тогда
		ТекстПримеч = СокрЛП(ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ПримечаниеКвитанции);
	Иначе
		ТекстПримеч = "";
	КонецЕсли;
	
	СтруктураПараметровМакета = Новый Структура("Примечание");
	СтруктураПараметровМакета.Примечание = ТекстПримеч;
	
	Если Не ПустаяСтрока(ТекстПримеч) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаПримечания");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

КонецПроцедуры // ВывестиПримечание()

// Формирует название месяца в предложном падеже.
//
// Параметры:
//  Дата         – дата для формирования месяца
//
// Возвращаемое значение:
//  Строка – нужная форма месяца
//
Функция ПредложныйПадежМесяца(Дата) Экспорт

	Месяц = НРег(Формат(Дата, "ДФ='MMMM'"));
	Если Не Прав(Месяц, 1) = "т" Тогда
		Месяц = Лев(Месяц, СтрДлина(Месяц) - 1);
	КонецЕсли;
	Возврат Месяц + "е";

КонецФункции // ПредложныйПадежМесяца()

// Формирует название месяца в родительном падеже.
//
// Параметры:
//  Дата         – дата для формирования месяца
//
// Возвращаемое значение:
//  Строка – нужная форма месяца
//
Функция РодительныйПадежМесяца(Дата) Экспорт

	Месяц = НРег(Формат(Дата, "ДФ='MMMM'"));
	Если Не Прав(Месяц, 1) = "т" Тогда
		Месяц = Лев(Месяц, СтрДлина(Месяц) - 1);
		Возврат Месяц + "я";
	КонецЕсли;
	Возврат Месяц + "а";

КонецФункции // РодительныйПадежМесяца()

// Формирует таблицу зависимых услуг по услугам, рассчитываемым по счетчикам.
//
// Параметры:
//  ТаблицаСчетчиков – таблица значений с показаниями счетчиков
//
// Возвращаемое значение:
//  Таблица значений – таблица значений с зависимыми услугами
//
Функция ПолучитьТаблицуЗависимыхУслуг(ТаблицаСчетчиков, Объект, ПараметрыОтчета) Экспорт
	
	Запрос = Новый Запрос();
	
	УказыватьЗависимостьУслугВРазрезеЗданий = Ложь;
	ПараметрыОтчета.Свойство("УказыватьЗависимостьУслугВРазрезеЗданий", УказыватьЗависимостьУслугВРазрезеЗданий);
	
	Если УказыватьЗависимостьУслугВРазрезеЗданий Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Приоритет,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ТаблицаЗависимостей
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = &Здание
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	0,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаЗависимостей.Приоритет) КАК Приоритет,
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга
		|ПОМЕСТИТЬ ТаблицаМаксПриоритетов
		|ИЗ
		|	ТаблицаЗависимостей КАК ТаблицаЗависимостей
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗависимостей.УслугаОснование,
		|	ТаблицаЗависимостей.Услуга,
		|	ТаблицаЗависимостей.ВидУслуги,
		|	ТаблицаЗависимостей.ЕдИзм КАК ЕдИзм,
		|	ТаблицаЗависимостей.Коэффициент
		|ИЗ
		|	ТаблицаМаксПриоритетов КАК ТаблицаМаксПриоритетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЗависимостей КАК ТаблицаЗависимостей
		|		ПО (ТаблицаЗависимостей.Приоритет = ТаблицаМаксПриоритетов.Приоритет)
		|			И (ТаблицаЗависимостей.УслугаОснование = ТаблицаМаксПриоритетов.УслугаОснование)
		|			И (ТаблицаЗависимостей.Услуга = ТаблицаМаксПриоритетов.Услуга)";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги,
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ КАК Поле1
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ПериодСреза,
		|			Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|				И УслугаОснование В (&УслугиОснования)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УслугиОснования", ТаблицаСчетчиков.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("ПериодСреза", КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("Здание",      Объект.Адрес.Владелец);
	
	ТаблицаЗависимостей = Запрос.Выполнить().Выгрузить();
	ТаблицаЗависимостей.Индексы.Добавить("УслугаОснование");
	
	ТаблицаЗависимыхУслуг = ТаблицаСчетчиков.СкопироватьКолонки();
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		
		СписокЗависимых = ТаблицаЗависимостей.НайтиСтроки(Новый Структура("УслугаОснование", СтрокаСчетчика.Услуга));
		Для Каждого СтрокаУслуги Из СписокЗависимых Цикл
			НоваяСтрока = ТаблицаЗависимыхУслуг.Добавить();
			НоваяСтрока.Абонент   = СтрокаУслуги.ВидУслуги;
			НоваяСтрока.Услуга    = СтрокаУслуги.Услуга;
			НоваяСтрока.ВидУслуги = СтрокаУслуги.ВидУслуги;
			НоваяСтрока.ЕдИзм     = СтрокаУслуги.ЕдИзм;
			
			НоваяСтрока.РасходДн = СтрокаСчетчика.РасходДн * СтрокаУслуги.Коэффициент;
			НоваяСтрока.РасходНч = СтрокаСчетчика.РасходНч * СтрокаУслуги.Коэффициент;
			НоваяСтрока.ТарифДн  = 0;
			НоваяСтрока.ТарифНч  = 0;
			НоваяСтрока.НачисленоДн = 0;
			НоваяСтрока.НачисленоНч = 0;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаЗависимыхУслуг.Свернуть("Абонент,Услуга,ВидУслуги,ЕдИзм", "РасходДн,РасходНч,ТарифДн,ТарифНч,НачисленоДн,НачисленоНч");
	
	Для Каждого СтрокаУслуги Из ТаблицаЗависимыхУслуг Цикл
		СтрокаУслуги.ТарифДн  = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
															 ПараметрыОтчета.Организация, 
															 СтрокаУслуги.Услуга,
															 Объект,
															 Перечисления.КВП_ВидыТарифов.Дневной);
		СтрокаУслуги.ТарифНч  = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
															 ПараметрыОтчета.Организация,
															 СтрокаУслуги.Услуга,
															 Объект,
															 Перечисления.КВП_ВидыТарифов.Ночной);
		СтрокаУслуги.ТарифДн  = ?(ЗначениеЗаполнено(СтрокаУслуги.ТарифДн), СтрокаУслуги.ТарифДн, 0);
		СтрокаУслуги.ТарифНч  = ?(ЗначениеЗаполнено(СтрокаУслуги.ТарифНч), СтрокаУслуги.ТарифНч, 0);
		СтрокаУслуги.НачисленоДн = СтрокаУслуги.РасходДн * СтрокаУслуги.ТарифДн;
		СтрокаУслуги.НачисленоНч = СтрокаУслуги.РасходНч * СтрокаУслуги.ТарифНч;
	КонецЦикла;
	
	Возврат ТаблицаЗависимыхУслуг;
	
КонецФункции // ПолучитьТаблицуЗависимыхУслуг()

Процедура ПолучитьСписокЛицевыхСУчетомЛьгот(СписокОбъектов, ПараметрыОтчета)
	
	Если Не ПараметрыОтчета.ВыводитьПоЛьготам = "всех" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.Адрес.Код КАК НомерКвартиры,
		|	КВП_ЛицевыеСчета.Адрес.Суффикс КАК СуффиксКвартиры
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	" + ?(ПараметрыОтчета.ВыводитьПоЛьготам = "без_льгот", "КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)
		|	И НЕ ", "") + "КВП_ЛицевыеСчета.Ссылка В
		|				(ВЫБРАТЬ
		|					КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец
		|				ИЗ
		|					РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
		|							&Дата, 
		|							Проживающий.Владелец В (&СписокЛС)) КАК КВП_НазначенныеЛьготыСрезПоследних
		|				ГДЕ
		|					КВП_НазначенныеЛьготыСрезПоследних.Действие)";
		
		Запрос.УстановитьПараметр("Дата",     КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
		Запрос.УстановитьПараметр("СписокЛС", СписокОбъектов);
		
		ТаблицаЛС = Запрос.Выполнить().Выгрузить();
		Если ПараметрыОтчета.ВариантСортировки = "Лицевой счет" Тогда
			ТаблицаЛС.Сортировать("ЛицевойСчет");
		Иначе
			ТаблицаЛС.Сортировать("НомерКвартиры, СуффиксКвартиры");
		КонецЕсли;
		ТаблицаЛС.Свернуть("ЛицевойСчет");
		СписокОбъектов = Новый СписокЗначений();
		СписокОбъектов.ЗагрузитьЗначения(ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет"));
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос по льготам.
Процедура СформироватьЗапросПоЛьготам(мЗапросПоЛьготам, мНастройкиУчетнойПолитикиТСЖ)
	
	Если мНастройкиУчетнойПолитикиТСЖ.НеУчитыватьЛьготыВоВзаиморасчетах = Истина Тогда
		мЗапросПоЛьготам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
		|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
		|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаЛьготы
		|ИЗ
		|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|						&ДатаНач, 
		|						&ДатаКон, 
		|						Период, 
		|						ЛицевойСчет = &ЛицевойСчет) КАК КВП_НачисленныеЛьготыОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
		|						&ДатаНач,
		|						Проживающий.Владелец = &ЛицевойСчет) КАК КВП_НазначенныеЛьготыСрезПоследних
		|		ПО КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория = КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проживающий,
		|	ЛьготнаяКатегория
		|ИТОГИ ПО
		|	ЛьготнаяКатегория";
		
	Иначе
		мЗапросПоЛьготам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
		|	КВП_НачисленияНаЛицевыеСчетаОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
		|	-КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот КАК СуммаЛьготы
		|ИЗ
		|	РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Период,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ВидНачисления = &ВидыНачисленияЛьготы) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
		|						&ДатаНач, 
		|						Проживающий.Владелец = &ЛицевойСчет) КАК КВП_НазначенныеЛьготыСрезПоследних
		|		ПО КВП_НачисленияНаЛицевыеСчетаОбороты.ЛьготнаяКатегория = КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проживающий,
		|	ЛьготнаяКатегория
		|ИТОГИ ПО
		|	ЛьготнаяКатегория";
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьЗапросПоЛьготам()

// Заполняет цифры суммы к оплате.
Процедура ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, СуммаОплаты, СтруктураПараметровМакета)
		
	СтрокаСуммы = СокрЛП(Формат(СуммаОплаты * 100, "ЧЦ=10; ЧДЦ=0; ЧН=000; ЧГ=0"));
	
	ВсегоЦифр = Мин(СтрДлина(СтрокаСуммы), 7);
	Для Сч = 1 По ВсегоЦифр Цикл
		
		ТекЦифра = Сред(СтрокаСуммы, ВсегоЦифр - Сч + 1, 1);
		
		СтруктураПараметровМакета.Вставить("ВсегоКОплате" + Сч, ТекЦифра);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПараметрыСуммыВсего()

// Возвращает представление расчетного счета.
//
Функция ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Здание) Экспорт
	
	ИнформацияПоРасчетномуСчету = "";
	
	ТаблицаРСЗдания = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовЗданий(ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.Организация, Здание);
	СтрокаЗдания = ТаблицаРСЗдания[0];
	
	НомерСчета = СтрокаЗдания.РасчетныйСчет;
	Банк       = СтрокаЗдания.Банк.Наименование;
	КоррСчет   = СтрокаЗдания.КоррСчет;
	БИК        = СтрокаЗдания.БИК;
	
	ИнформацияПоРасчетномуСчету = ИнформацияПоРасчетномуСчету
								+"р/с " + СокрЛП(НомерСчета)
								+ ", в " + Банк + ", к/с " + СокрЛП(КоррСчет)
								+ ", БИК " + СокрЛП(БИК);
	
	Возврат ИнформацияПоРасчетномуСчету;
	
КонецФункции // ПолучитьИнформациюПоРасчетномуСчету()

// Рассчитывает суммы "Всего к оплате".
//
Функция РассчитатьСуммуВсегоКОплате(НачальноеСальдо, Начислено, Оплачено, Предоплата, ПараметрыОтчета, Объект) Экспорт
	
	ВсегоКОплате = Начислено;
	ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, Оплачено, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Если ВсегоКОплате < 0 И НЕ ПараметрыОтчета.ВыводитьОтрицательнуюСуммуКОплате Тогда
		ВсегоКОплате = 0;
	КонецЕсли;

	Возврат ВсегоКОплате;

КонецФункции // РассчитатьСуммуВсегоКОплате()

// Процедура заполняет данные о количестве услуг по показаниям счетчиков.
//
Процедура ЗаполнитьНачисленияПоПоказаниямСчетчиков( ТаблицаСчетчиков, 
													ТаблицаНачисления, 
													ДобавлятьКолонкиРасшифровки = Ложь) Экспорт
	
	Если ДобавлятьКолонкиРасшифровки Тогда
		ТаблицаНачисления.Колонки.Добавить("РасходДн");
		ТаблицаНачисления.Колонки.Добавить("РасходНч");
		ТаблицаНачисления.Колонки.Добавить("РасходПк");
	КонецЕсли;
	
	// Сформируем вспомогательную таблицу счетчиков и расхода по ним
	ТаблицаРасходаПоСчетчикам = ТаблицаСчетчиков.Скопировать( , "Услуга, РасходДн, РасходНч, РасходПк");
	ТаблицаРасходаПоСчетчикам.Свернуть("Услуга", "РасходДн, РасходНч, РасходПк");
	
	// По счетчикам определим объем расхода из вспомогательной таблицы
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		Если СтрокаНачисления.УслугаСпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		 Или СтрокаНачисления.УслугаСпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме
		 Или (ЗначениеЗаполнено(СтрокаНачисления.Услуга)
		   И (СтрокаНачисления.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
		   Или СтрокаНачисления.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме)) Тогда
			
			ТекРасходДн = 0;
			ТекРасходНч = 0;
			ТекРасходПк = 0;
			
			СтрокиПоУслуге = ТаблицаРасходаПоСчетчикам.НайтиСтроки(Новый Структура("Услуга", СтрокаНачисления.Услуга));
			Для Каждого ТекСтрокаРасхода Из СтрокиПоУслуге Цикл
				ТекРасходДн = ТекРасходДн + ТекСтрокаРасхода.РасходДн;
				ТекРасходНч = ТекРасходНч + ТекСтрокаРасхода.РасходНч;
				ТекРасходПк = ТекРасходПк + ТекСтрокаРасхода.РасходПк;
				
			КонецЦикла;
			СтрокаНачисления.Количество = ТекРасходДн + ТекРасходНч + ТекРасходПк;
			Если ДобавлятьКолонкиРасшифровки Тогда
				СтрокаНачисления.РасходДн = ТекРасходДн;
				СтрокаНачисления.РасходНч = ТекРасходНч;
				СтрокаНачисления.РасходПк = ТекРасходПк;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачисленияПоПоказаниямСчетчиков()

Функция ПолучитьКоличествоЛьгот(Объект, ПериодПросмотра)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ПериодПросмотра);
	Запрос.УстановитьПараметр("Владелец", Объект);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория) КАК КоличествоЛьгот
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&Дата, 
	|		Проживающий.Владелец = &Владелец) КАК КВП_НазначенныеЛьготыСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЛьгот;
	Иначе
		Возврат 0;
	КонецЕсли;
	

КонецФункции

Функция ПолучитьПредыдущиеСведения(Объект, ДатаСведений, Организация)

	ВидыНачислений = Новый СписокЗначений;
	ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводНачальногоСальдо);
	ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.ВводФактическихЗатратНаОбъект);
	ВидыНачислений.Добавить(Перечисления.КВП_ВидыНачисления.НачислениеУслуг);

	ВидыДоначислений = Новый СписокЗначений;
	ВидыДоначислений.Добавить(Перечисления.КВП_ВидыНачисления.КорректировкаНачислений);
	ВидыДоначислений.Добавить(Перечисления.КВП_ВидыНачисления.Льготы);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",		Объект);
	Запрос.УстановитьПараметр("ДатаНач",			НачалоМесяца(ДатаСведений));
	Запрос.УстановитьПараметр("ДатаКон",			КонецМесяца(ДатаСведений));
	Запрос.УстановитьПараметр("ВидыНачислений",		ВидыНачислений);
	Запрос.УстановитьПараметр("ВидыНачисленийПени",		Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	Запрос.УстановитьПараметр("ВидыДоначислений",	ВидыДоначислений);
	Запрос.УстановитьПараметр("ВидыОплат",			Перечисления.КВП_ВидыНачисления.РегистрацияОплаты);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(Начисления.СуммаНачисленияОборот, 0) КАК Начислено,
	|	ЕСТЬNULL(Доначислено.СуммаНачисленияОборот, 0) КАК Доначислено,
	|	ЕСТЬNULL(Оплата.СуммаНачисленияОборот, 0) КАК Оплачено,
	|	ЕСТЬNULL(КонечноеСальдо.СуммаНачисленияОстаток, 0) КАК КонечноеСальдо
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.СуммаНачисленияОборот, 0) 
	|			+ ЕСТЬNULL(НачисленияПениПоЛицевымСчетам.СуммаНачисленияПриход, 0) КАК СуммаНачисленияОборот,
	|		ЕСТЬNULL(НачисленияПоЛицевымСчетам.Услуга, НачисленияПениПоЛицевымСчетам.Услуга) КАК Услуга
	|	ИЗ
	|		РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Организация = &Организация
	|					И ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления В (&ВидыНачислений)) КАК НачисленияПоЛицевымСчетам
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					Организация = &Организация
	|						И ЛицевойСчет = &ЛицевойСчет
	|						И ВидНачисления = &ВидыНачисленийПени) КАК НачисленияПениПоЛицевымСчетам
	|			ПО НачисленияПоЛицевымСчетам.Услуга = НачисленияПениПоЛицевымСчетам.Услуга) КАК Начисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЕСТЬNULL(ОплатаПоЛицевымСчетам.СуммаНачисленияОборот, 0) 
	|				+ ЕСТЬNULL(ОплатаПениПоЛицевымСчетам.СуммаНачисленияРасход, 0) КАК СуммаНачисленияОборот,
	|			ЕСТЬNULL(ОплатаПоЛицевымСчетам.Услуга, ОплатаПениПоЛицевымСчетам.Услуга) КАК Услуга
	|		ИЗ
	|			РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					,
	|					Организация = &Организация
	|						И ЛицевойСчет = &ЛицевойСчет
	|						И ВидНачисления В (&ВидыОплат)) КАК ОплатаПоЛицевымСчетам
	|				ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|						&ДатаНач,
	|						&ДатаКон,
	|						,
	|						Организация = &Организация
	|							И ЛицевойСчет = &ЛицевойСчет
	|							И ВидНачисления = &ВидыНачисленийПени) КАК ОплатаПениПоЛицевымСчетам
	|				ПО ОплатаПоЛицевымСчетам.Услуга = ОплатаПениПоЛицевымСчетам.Услуга) КАК Оплата
	|		ПО Начисления.Услуга = Оплата.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Организация = &Организация
	|					И ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления В (&ВидыДоначислений)) КАК Доначислено
	|		ПО Начисления.Услуга = Доначислено.Услуга
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаКон,
	|				Организация = &Организация
	|					И ЛицевойСчет = &ЛицевойСчет) КАК КонечноеСальдо
	|		ПО Начисления.Услуга = КонечноеСальдо.Услуга
	|ИТОГИ
	|	СУММА(Начислено),
	|	СУММА(Доначислено),
	|	СУММА(Оплачено),
	|	СУММА(КонечноеСальдо)
	|ПО
	|	ОБЩИЕ";
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ИнициализироватьСведенияСчетчиков()
	
	СведенияСчетчиков = Новый ТаблицаЗначений();
	СведенияСчетчиков.Колонки.Добавить("МестоЭл");
	СведенияСчетчиков.Колонки.Добавить("Дн");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредЭл");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредЭл");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекЭл");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекЭл");
	СведенияСчетчиков.Колонки.Добавить("МестоХВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредХВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредХВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекХВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекХВ");
	СведенияСчетчиков.Колонки.Добавить("МестоГВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаПредГВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказПредГВ");
	СведенияСчетчиков.Колонки.Добавить("ДатаТекГВ");
	СведенияСчетчиков.Колонки.Добавить("ПоказТекГВ");
	
	Возврат СведенияСчетчиков;
	
КонецФункции

Процедура ПолучитьПредыдущиеДанные(ЛицевойСчет, ПараметрыОтчета, ОбщиеДанные)
	
	// Предыдущие начисления и оплаты.
	ЗапросПред = Новый Запрос();
	ЗапросПред.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток, 0) КАК КОплатеНаНачалоМесяца,
	|	-ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) КАК ОплаченоЗаМесяц,
	|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПени.СуммаНачисленияПриход, 0) КАК ПениЗаМесяц
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|				&ДатаПредНач,
	|				&ДатаПредКон,
	|				Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияОплата
	|					И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
	|		ПО (ИСТИНА)
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияПени
	|					И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПени
	|		ПО (ИСТИНА)";
	
	ЗапросПред.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросПред.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	ЗапросПред.УстановитьПараметр("ВидНачисленияОплата", Перечисления.КВП_ВидыНачисления.РегистрацияОплаты);
	ЗапросПред.УстановитьПараметр("ВидНачисленияПени",   Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	ЗапросПред.УстановитьПараметр("ДатаПредНач",   НачалоМесяца(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1));
	ЗапросПред.УстановитьПараметр("ДатаНач",       НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросПред.УстановитьПараметр("ДатаПредКон",       КонецМесяца(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) - 1));
	ЗапросПред.УстановитьПараметр("ДатаКон",       КонецМесяца(ПараметрыОтчета.ПериодПросмотра));

	ВыборкаПред = ЗапросПред.Выполнить().Выбрать();
	Если ВыборкаПред.Следующий() Тогда
		// Структура с информацией о предыдущем начислении и оплате.
		ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца",     ВыборкаПред.КОплатеНаНачалоМесяца);
		ОбщиеДанные.Вставить("ОплаченоЗаПредМесяц",       ВыборкаПред.ОплаченоЗаМесяц);
		ОбщиеДанные.Вставить("ПениЗаМесяц",               ВыборкаПред.ПениЗаМесяц);
	КонецЕсли;
	
КонецПроцедуры

// Выводит таблицу начислений.
Процедура ВывестиНачисленияПоказания(ДокументРезультат, ТаблицаНачисления, ПоказанияСчетчиков, Объект, 
									СведенияОбОрганизации, ОбщиеДанные, ПараметрыОтчета, ДанныеОбОплатах, ПениНачислено)
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	
	// Заполним недостающие данные.
	Для Каждого СтрокаТаблицы Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Тариф) Тогда
				СтрокаТаблицы.Тариф = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаТаблицы.Услуга, 
																	Объект);
				СтрокаТаблицы.Количество = КВП_ПолучитьНачислениеНаОбъектПоУслуге(КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация, Объект, 
										 СтрокаТаблицы.Услуга, ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ, , , , Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей = РегистрыСведений.КВП_ВидыУслугДляЗаменыВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаВидовУслуг = НаборЗаписей.Выгрузить();
	ТаблицаВидовУслуг.Свернуть("ВидУслугиНовый");
	Для Каждого ТекВидУслуги Из ТаблицаВидовУслуг Цикл
		СтрокиВидаУслуги = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
	КонецЦикла;
	
	// Свертка таблицы начислений
	УПЖКХ_ПечатьКвитанцийСервер.СвернутьТаблицуНачислений(ТаблицаНачисления, "Оплата, Перерасчет, НачальноеСальдо, Начислено, Льгота, КОплате");
	
	ТаблицаНачисления.Колонки.Добавить("НомерСтроки");
	
	СтрВывода = Новый Структура();
	СтрВывода.Вставить("Объект", Объект);
	СтрВывода.Вставить("ИтогоПредМесяц", 0);
	СтрВывода.Вставить("ИтогоНачальноеСальдо", 0);
	СтрВывода.Вставить("ИтогоНачислено", 0);
	СтрВывода.Вставить("ИтогоПерерасчет", 0);
	СтрВывода.Вставить("ИтогоЛьгота", 0);
	СтрВывода.Вставить("ИтогоКОплате", 0);
	
	МаксИндекс = ТаблицаНачисления.Количество() - 1;
	
	Для Сч = 1 По МаксИндекс Цикл
		Строка = ТаблицаНачисления.Получить(Сч);
		
		СтрВывода.ИтогоПредМесяц       = СтрВывода.ИтогоПредМесяц + Строка.Оплата;
		СтрВывода.ИтогоНачальноеСальдо = СтрВывода.ИтогоНачальноеСальдо + Строка.НачальноеСальдо;
		СтрВывода.ИтогоНачислено       = СтрВывода.ИтогоНачислено + Строка.Начислено;
		СтрВывода.ИтогоПерерасчет      = СтрВывода.ИтогоПерерасчет + Строка.Перерасчет;
		СтрВывода.ИтогоЛьгота          = СтрВывода.ИтогоЛьгота + Строка.Льгота;
		СтрВывода.ИтогоКОплате         = СтрВывода.ИтогоКОплате + Строка.КОплате;
		
	КонецЦикла;
	
	ОбщиеДанные.Вставить("ВсегоКОплате", СтрВывода.ИтогоКОплате);
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_14");
	
	СтруктураПараметровМакета = Новый Структура("Получатель,КоличествоПроживающих,ОбщаяПлощадь,ОбщаяПлощадьБезДоли,ЛС,РасчетныйСчет,Банк,БИК,КоррСчет,ИНН,КПП");
	СтруктураПараметровМакета.Получатель            = ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация);
	СтруктураПараметровМакета.КоличествоПроживающих = Неопределено;
	СтруктураПараметровМакета.ОбщаяПлощадь          = Неопределено;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли   = Неопределено;
	СтруктураПараметровМакета.ЛС                    = Объект;
	СтруктураПараметровМакета.РасчетныйСчет         = СведенияОбОрганизации.НомерСчета;
	СтруктураПараметровМакета.Банк                  = СведенияОбОрганизации.Банк;
	СтруктураПараметровМакета.БИК                   = СведенияОбОрганизации.БИК;
	СтруктураПараметровМакета.КоррСчет              = СведенияОбОрганизации.КоррСчет;
	СтруктураПараметровМакета.ИНН                   = СведенияОбОрганизации.ИНН;
	СтруктураПараметровМакета.КПП                   = СведенияОбОрганизации.КПП;

	// ИЗВЕЩЕНИЕ
	Область = Макет.ПолучитьОбласть("Заполняется");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("СчетФактура");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
		ОбластьШтрих = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("СчетФактураQR");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
		ОбластьШтрих = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
		ОбластьШтрих.Параметры.Заполнить(ОбщиеДанные);
	КонецЕсли;
	
	Квитанция = Новый ТабличныйДокумент();
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ПоказанияСчетчиков, СрокОплаты);
	
	ОбщиеДанные.Вставить("Задолженность",  ТаблицаНачисления[0].НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ТаблицаНачисления[0].Начислено);
	
	УстановитьКартинкуШтрихкода(ОбластьШтрих, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Квитанция.Вывести(ОбластьШтрих);
	ДокументРезультат.Присоединить(Квитанция);
	
	ОбщиеДанные.Вставить("ПлОбщ", "" + СтруктОписание.ОбщаяПлощадь + " кв.м.");
	
	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);

	СтруктураПараметровМакета.КоличествоПроживающих = СтруктОписание.КоличествоПроживающих;
	СтруктураПараметровМакета.ОбщаяПлощадь          = СтруктОписание.ОбщаяПлощадь;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли   = СтруктОписание.ОбщаяПлощадьБезДоли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	Область = Макет.ПолучитьОбласть("Нумерация");
	ДокументРезультат.Вывести(Область);
	ОбластьШтрих = Макет.ПолучитьОбласть("ШтрихКодИНН");
	
	Если НЕ ОбластьШтрих.Области.Найти("ШтрихКод_ИНН") = Неопределено Тогда
		ИНН = СведенияОбОрганизации.ИНН;
		
		ПараметрыШтрихкода = Новый Структура;
		УПЖКХ_ПечатьКвитанцийСервер.ЗаполнитьПараметрыОдномерногоШК(ПараметрыШтрихкода, ИНН);
	
		ОбластьШтрих.Области.ШтрихКод_ИНН.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
		
		ОбщиеДанные.Вставить("ТекстШК_ИНН", ИНН);
		ОбластьШтрих.Параметры.Заполнить(ОбщиеДанные);
	КонецЕсли;
	
	Квитанция    = Новый ТабличныйДокумент();
	Квитанция.Вывести(ОбластьШтрих);
	ДокументРезультат.Присоединить(Квитанция);
	
	СведенияСчетчиков = ПолучитьСведенияСчетчиков(ПоказанияСчетчиков, ПараметрыОтчета);
	
	ИнициализироватьКвитанцию(Макет, СтрВывода, ПоказанияСчетчиков, ПараметрыОтчета, ОбщиеДанные);
	
	Для Сч = 1 По МаксИндекс Цикл
		
		Строка = ТаблицаНачисления.Получить(Сч);
		Строка.НомерСтроки = Сч;
		
		Если Не ПараметрыОтчета.ДетализироватьНачисления Тогда
			Строка.Оплата          = 0;
			Строка.Перерасчет      = 0;
			Строка.НачальноеСальдо = 0;
			Строка.Льгота          = 0;
			Строка.КОплате         = 0;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = ?(Строка.Тариф = 0, 0, Строка.Начислено / Строка.Тариф);
		КонецЕсли;
		
		ВывестиСтроку(ДокументРезультат, Макет, "НачисленияСтрока", Строка, Сч, ПараметрыОтчета);
			
	КонецЦикла;
	
	ВывестиСтроку(ДокументРезультат, Макет, "НачисленияИтого", СтрВывода, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	
	Если ОбщиеДанные.СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		ВывестиСтроку(ДокументРезультат, Макет, "КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки", ОбщиеДанные, Сч, ПараметрыОтчета);
		Сч = Сч + 1;
	КонецЕсли;
	
	ВывестиСтроку(ДокументРезультат, Макет, "НачисленияПени", ОбщиеДанные, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияЗаголовок", Неопределено, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияВидУслуги", Неопределено, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияВремя", Неопределено, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияКолонки", Неопределено, Сч, ПараметрыОтчета);
	
	Для Каждого СтрокаПоказания Из СведенияСчетчиков Цикл
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПоказанияРасшифровка", СтрокаПоказания, Сч, ПараметрыОтчета);
	КонецЦикла;
	
	Сч = Сч + 1;
	ВывестиСтроку(ДокументРезультат, Макет, "ПустаяСтрока", Неопределено, Сч, ПараметрыОтчета);
	Сч = Сч + 1;
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);
	
	Пока Сч <= ПараметрыОтчета.СтрокиКвитанции.Количество() Цикл
		Сч = Сч + 1;
		ВывестиСтроку(ДокументРезультат, Макет, "ПустаяСтрока", Неопределено, Сч, ПараметрыОтчета);
	КонецЦикла;
	
КонецПроцедуры // ВывестиНачисленияПоказания()

// Развертывает ПоказанияСчетчиков в колонки по видам услуг
//
Функция ПолучитьСведенияСчетчиков(ПоказанияСчетчиков, ПараметрыОтчета)
	
	ЗаполнитьВидыСчетчиков(ПоказанияСчетчиков);
	Показания = ПоказанияСчетчиков.Скопировать();
	Показания.Сортировать("НомерСтроки");
	ПараметрыОтчета.мСведенияСчетчиков.Очистить();
	ПредыдущийНомерСтроки = 0;
	Для Каждого СтрокаПоказания Из Показания Цикл
		Если СтрокаПоказания.НомерСтроки > ПредыдущийНомерСтроки Тогда
			НоваяСтрока = ПараметрыОтчета.мСведенияСчетчиков.Добавить();
			ПредыдущийНомерСтроки = СтрокаПоказания.НомерСтроки;
		КонецЕсли;
		Попытка
			НоваяСтрока["Место" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.Счетчик;
			НоваяСтрока["ДатаПред" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредПредыдущееПоказаниеПериод;
			НоваяСтрока["ПоказПред" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредПредыдущееПоказаниеДн;
			НоваяСтрока["ДатаТек" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредыдущееПоказаниеПериод;
			НоваяСтрока["ПоказТек" + СтрокаПоказания.ВидСчетчика] = СтрокаПоказания.ПредыдущееПоказаниеДн;
		Исключение
		КонецПопытки;
		Если СтрокаПоказания.ВидСчетчика = "ЭЛ" Тогда
			НоваяСтрока.Дн = "д";
			Если СтрокаПоказания.ПредПредыдущееПоказаниеНч + СтрокаПоказания.ПредыдущееПоказаниеНч > 0 Тогда
				НоваяСтрока = ПараметрыОтчета.мСведенияСчетчиков.Добавить();
				НоваяСтрока.МестоЭЛ = СтрокаПоказания.Счетчик;
				НоваяСтрока.Дн = "н";
				НоваяСтрока.ДатаПредЭЛ  = СтрокаПоказания.ПредПредыдущееПоказаниеПериод;
				НоваяСтрока.ПоказПредЭЛ = СтрокаПоказания.ПредПредыдущееПоказаниеНч;
				НоваяСтрока.ДатаТекЭЛ = СтрокаПоказания.ПредыдущееПоказаниеПериод;
				НоваяСтрока.ПоказТекЭЛ = СтрокаПоказания.ПредыдущееПоказаниеНч;
				ПредыдущийНомерСтроки = ПредыдущийНомерСтроки + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПараметрыОтчета.мСведенияСчетчиков;
	
КонецФункции

Процедура ИнициализироватьКвитанцию(Макет, СтрВывода, ПоказанияСчетчиков, ПараметрыОтчета, ОбщиеДанные)
	КолонкаКвитанции = 51;
	
	ПараметрыОтчета.Вставить("КолонкаКвитанции", КолонкаКвитанции);
	
	СтрокиКвитанции = Новый Массив();
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Получатель"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.СведенияОбОрганизации.НаименованиеДляПечатныхФорм));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Лицевой счет:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , СтрВывода.Объект));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Плательщик:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.ФИО));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Адрес:"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , ОбщиеДанные.Адрес));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "счет от " + Формат(ТекущаяДата(), "ДЛФ=D") + " за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'")));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "Сумма " + Формат(СтрВывода.ИтогоКОплате + ОбщиеДанные.ПениЗаМесяц, "ЧДЦ=2; ЧРД=,; ЧН=-")+ "р."));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Оплачено плательщиком"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоВерх"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоСередина"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ОплаченоНиз"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит", , "Плательщик ______________"));
	СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Реквизит"));
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";";
	
	ПоказанияСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ПоказанияСчетчиков);
	
	Если ПоказанияСчетчиков.Количество() > 0 Тогда
		ПоказанияКвитанции = Новый ТаблицаЗначений();
		ПоказанияКвитанции.Колонки.Добавить("НомерСчетчика");
		ПоказанияКвитанции.Колонки.Добавить("ВидСчетчика");
		ПоказанияКвитанции.Колонки.Добавить("ПредыдущееПоказание");
		СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "Значение", , "ВАШИ ПОКАЗАНИЯ ПРИБОРОВ УЧЕТА"));
		СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииШапка"));
		Для Каждого СтрокаПоказаний Из ПоказанияСчетчиков Цикл
			СтрокаПоказания = Новый Структура();
			СтрокаПоказания.Вставить("НомерСчетчика", СтрокаПоказаний.Счетчик);
			СтрокаПоказания.Вставить("ВидСчетчика", СтрокаПоказаний.ВидСчетчика);
			СтрокаПоказания.Вставить("ПредыдущееПоказание", Формат(СтрокаПоказаний.ПредыдущееПоказаниеДн, СтрокаФормата));
			СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииРасшифровка", СтрокаПоказания));
			Если СтрокаПоказаний.ВидСчетчика = "ЭЛ" И СтрокаПоказаний.ПредыдущееПоказаниеНч > 0 Тогда
				СтрокаПоказания = Новый Структура();
				СтрокаПоказания.Вставить("НомерСчетчика", СтрокаПоказаний.Счетчик);
				СтрокаПоказания.Вставить("ВидСчетчика", СтрокаПоказаний.ВидСчетчика);
				СтрокаПоказания.Вставить("ПредыдущееПоказание", Формат(СтрокаПоказаний.ПредыдущееПоказаниеНч, СтрокаФормата));
				СтрокиКвитанции.Добавить(ДобавитьСтрокуКвитанции(Макет, "ПоказанияКвитанцииРасшифровка", СтрокаПоказания));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("СтрокиКвитанции", СтрокиКвитанции);
	
КонецПроцедуры

Процедура ВывестиСтроку(ДокументРезультат, Макет, ИмяОбласти, СтрокаВывода, НомерСтроки, ПараметрыОтчета)
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ОбластьКвитанции = Неопределено;
	Если НомерСтроки <= ПараметрыОтчета.СтрокиКвитанции.Количество() Тогда
		ОбластьКвитанции = ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Область;
		Если ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры = Неопределено Тогда
			Попытка
				ОбластьКвитанции.Параметры.Параметр = ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Значение;
			Исключение
			КонецПопытки;
		Иначе
			Попытка
				Если ТипЗнч(ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры) <> Тип("Структура") Тогда
					ОбластьКвитанции.Параметры.Заполнить(ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры);
				Иначе
					Для Каждого Элемент Из ПараметрыОтчета.СтрокиКвитанции[НомерСтроки - 1].Параметры Цикл
						Попытка
							ОбластьКвитанции.Параметры[Элемент.Ключ] = Элемент.Значение;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаВывода <> Неопределено Тогда
		Если ТипЗнч(СтрокаВывода) <> Тип("Структура") Тогда
			Область.Параметры.Заполнить(СтрокаВывода);
		Иначе
			Для Каждого Элемент Из СтрокаВывода Цикл
				Попытка
					Область.Параметры[Элемент.Ключ] = Элемент.Значение;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбластьКвитанции <> Неопределено Тогда
		Если ОбластьКвитанции.Рисунки.Количество() = 0 Тогда
			Область.ВставитьОбласть(ОбластьКвитанции.Область(1,1,1,5), Область.Область(1,ПараметрыОтчета.КолонкаКвитанции,1, ПараметрыОтчета.КолонкаКвитанции), ТипСмещенияТабличногоДокумента.БезСмещения, Истина);
			
			Если ИмяОбласти = "ПоказанияРасшифровка" Тогда
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПоказПредЭл");
				СписокФорматируемыхПараметров.Добавить("ПоказТекЭл");
				СписокФорматируемыхПараметров.Добавить("ПоказПредХВ");
				СписокФорматируемыхПараметров.Добавить("ПоказТекХВ");
				СписокФорматируемыхПараметров.Добавить("ПоказПредГВ");
				СписокФорматируемыхПараметров.Добавить("ПоказТекГВ");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			КонецЕсли;
			
			ДокументРезультат.Вывести(Область);
		Иначе
			ДокументРезультат.Вывести(Область);
			Квитанция = Новый ТабличныйДокумент();
			Квитанция.Вывести(ОбластьКвитанции);
			ДокументРезультат.Присоединить(Квитанция);
		КонецЕсли;
	Иначе
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьСтрокуКвитанции(Макет, ИмяОбласти, Параметры = Неопределено, Значение = Неопределено)
	СтрокаКвитанции = Новый Структура();
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	СтрокаКвитанции.Вставить("Область", Область);
	СтрокаКвитанции.Вставить("Параметры", Параметры);
	СтрокаКвитанции.Вставить("Значение", Значение);
	Возврат СтрокаКвитанции;
КонецФункции

Процедура ЗаполнитьВидыСчетчиков(ПоказанияСчетчиков)
	
	ПоказанияСчетчиков.Колонки.Добавить("НомерВидаСчетчика");
	ПоказанияСчетчиков.Колонки.Добавить("НомерСтроки");
	ПоказанияСчетчиков.Колонки.Добавить("ВидСчетчика");
	НомерЭл = 0;
	НомерХВ = 0;
	НомерГВ = 0;
	Номер4 = 0;
	
	Для Каждого СтрокаСчетчика Из ПоказанияСчетчиков Цикл
		Нвод = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ВОД");
		Нх = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ХОЛ");
		Нг = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ГОР");
		Нэ = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ЭЛ");
		Нр = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "ЭНЕР");
		Нс = Найти(ВРег(СтрокаСчетчика.Услуга.Ссылка), "СНАБЖ");
		Если Нх > 0 И Нх < Нвод Тогда
			СтрокаСчетчика.ВидСчетчика = "ХВ";
			СтрокаСчетчика.НомерВидаСчетчика = 1;
			НомерХВ = НомерХВ + 1;
			СтрокаСчетчика.НомерСтроки = НомерХВ;
		ИначеЕсли Нг > 0 И Нг < Нвод Тогда
			СтрокаСчетчика.ВидСчетчика = "ГВ";
			СтрокаСчетчика.НомерВидаСчетчика = 2;
			НомерГВ = НомерГВ + 1;
			СтрокаСчетчика.НомерСтроки = НомерГВ;
		ИначеЕсли Нэ > 0 И Нэ < Нр Тогда
			СтрокаСчетчика.ВидСчетчика = "ЭЛ";
			СтрокаСчетчика.НомерВидаСчетчика = 3;
			НомерЭл = НомерЭл + 1;
			СтрокаСчетчика.НомерСтроки = НомерЭл;
		ИначеЕсли Нэ > 0 И Нэ < Нс Тогда
			СтрокаСчетчика.ВидСчетчика = "ЭЛ";
			СтрокаСчетчика.НомерВидаСчетчика = 3;
			НомерЭл = НомерЭл + 1;
			СтрокаСчетчика.НомерСтроки = НомерЭл;
		Иначе
			СтрокаСчетчика.ВидСчетчика = СтрокаСчетчика.Услуга.Ссылка;
			СтрокаСчетчика.НомерВидаСчетчика = 4;
			Номер4 = Номер4 + 1;
			СтрокаСчетчика.НомерСтроки = Номер4;
		КонецЕсли;
	КонецЦикла;
	
	ПоказанияСчетчиков.Сортировать("НомерВидаСчетчика, Услуга, Счетчик");
	
КонецПроцедуры

// Функция возвращает таблицу начислений документом "Ввод фактических затрат на объект".
//
// Параметры:
//  СписокУслуг  - СписокЗначений - список услуг, по которым необходимо получить данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьТаблицуНачисленийВводФактическихЗатрат(СписокОбъектов, ПараметрыОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			,
	|			Организация = &Организация
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
	|				И ЛицевойСчет В (&СписокОбъектов)) КАК УПЖКХ_НачисленияОбороты";
	
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	Запрос.УстановитьПараметр("Организация",    ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("КонецМесяца",    КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	Запрос.УстановитьПараметр("НачалоМесяца",   НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНачисленийВводФактическихЗатрат()

// Получение информации из таблицы фактических затрат о сумме затрат для л/с.
//
// Параметры
//  ТаблицаФактЗатрат  - ТаблицаЗначений - таблица фактических затрат.
//                 <продолжение описания параметра>
//  ЛицевойСчет  - ссылка на элемент справочника "Лицевые счета" - лицевой счет, по которому необходимо получить
//                                                                 информацию.
// Возвращаемое значение:
//   ТаблицаЗначений.
//
Функция ПолучитьФактЗатратыДляЛС(ТаблицаФактЗатрат, ЛицевойСчет) Экспорт
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЛицевойСчет", ЛицевойСчет);
	
	Возврат ТаблицаФактЗатрат.Скопировать(ТаблицаФактЗатрат.НайтиСтроки(СтруктураПоиска));
	
КонецФункции // ПолучитьФактЗатратыДляЛС()

//////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ОТЧЕТА

// Процедура формирует отчет.
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ОбъектОтчета) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Объект не указан.");
		Возврат;
	КонецЕсли;
	
	мНастройкиУчетнойПолитикиТСЖотказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра),
																		ПараметрыОтчета.Организация, 
																		мНастройкиУчетнойПолитикиТСЖотказ);
	
	мНастройкиФормированияПДЖКХотказ = Ложь;
	мНастройкиФормированияПДЖКХ      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ПараметрыОтчета.Организация,
																									  мНастройкиФормированияПДЖКХотказ);
	
	мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();
	
	Если мНастройкиУчетнойПолитикиТСЖотказ = Ложь Тогда
		ДатаОплатыУслуг = мНастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа;
	Иначе
		ДатаОплатыУслуг = 10;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ДатаОплатыУслуг",                         ДатаОплатыУслуг);
	ПараметрыОтчета.Вставить("мНастройкиУчетнойПолитикиТСЖ" ,           мНастройкиУчетнойПолитикиТСЖ);
	ПараметрыОтчета.Вставить("мНастройкиУчетнойПолитикиТСЖотказ" ,      мНастройкиУчетнойПолитикиТСЖотказ);
	ПараметрыОтчета.Вставить("мНастройкиФормированияПДЖКХ" ,            мНастройкиФормированияПДЖКХ);
	ПараметрыОтчета.Вставить("мНастройкиФормированияПДЖКХотказ" ,       мНастройкиФормированияПДЖКХотказ);
	ПараметрыОтчета.Вставить("мТочностьОбъемаНачислений",               мТочностьОбъемаНачислений);
	ПараметрыОтчета.Вставить("УказыватьЗависимостьУслугВРазрезеЗданий", Константы.УПЖКХ_УказыватьЗависимостьУслугВРазрезеЗданий.Получить());
	
	// Формирование структуры настроек для использования во внешних модулях, на основе текущих данных.
	СформироватьСтруктуруНастроек(ПараметрыОтчета);
	
	// Если указанный объект - группа, то собираются все элементы по иерархии 
	// (кроме закрытых л/с с нулевыми остатками и оборотами по услугам)
	СписокОбъектов = ПолучитьСписокЛицевыхСчетовПоГруппе(ПараметрыОтчета);
	
	Если ПараметрыОтчета.Форма = "07" Тогда
		ПолучитьСписокЛицевыхСУчетомЛьгот(СписокОбъектов, ПараметрыОтчета);
	КонецЕсли;
	
	Если (Не ПараметрыОтчета.Форма = "10") И (Не ПараметрыОтчета.Форма = "11") Тогда
		// Ищем оплаты по всем объектам отчета.
		ТаблицаОплат = ПолучитьДанныеОбОплатах(СписокОбъектов, ПараметрыОтчета);
	КонецЕсли;
		
	Если (Не ПараметрыОтчета.Форма = "07") И (Не ПараметрыОтчета.Форма = "11") И (Не ПараметрыОтчета.Форма = "14") Тогда
		// Ищем данные о начальном сальдо по всем объектам отчета.
		ТаблицаСальдо = ПолучитьДанныеОНачальномСальдо(СписокОбъектов, ПараметрыОтчета);
	КонецЕсли;
	
	Если (Не ПараметрыОтчета.Форма = "09") И (Не ПараметрыОтчета.Форма = "10")
			И (Не ПараметрыОтчета.Форма = "11") И (Не ПараметрыОтчета.Форма = "13") И (Не ПараметрыОтчета.Форма = "14") Тогда
		// Ищем данные о субсидиях по всем объектам отчета.
		ТаблицаСубсидий = ПолучитьДанныеОСубсидиях(СписокОбъектов, ПараметрыОтчета);
	КонецЕсли;
	
	Если (Не ПараметрыОтчета.Форма = "10" И Не ПараметрыОтчета.Форма = "13") Тогда
		// Ищем показания счетчиков по всем объектам отчета.
		ТаблицаСчетчиков = ПолучитьДанныеПоСчетчикам(СписокОбъектов, ПараметрыОтчета);
	КонецЕсли;
	
	// Ищем данные о фактических затратах по всем объектам отчета.
	ТаблицаФактическихЗатрат = ПолучитьТаблицуНачисленийВводФактическихЗатрат(СписокОбъектов, ПараметрыОтчета);

	// Ищем данные о начислениях по всем объектам отчета.
	ТаблицаНачислений = ПолучитьЗапросНачисления(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем данные о пени по всем объектам отчета.
	ТаблицаПени       = ПолучитьДанныеОПени(СписокОбъектов, ПараметрыОтчета);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	тмДокумент    = Новый ТабличныйДокумент();
	ЭтоПервая     = Истина;
	ВсегоОбъектов = СписокОбъектов.Количество();
	ТекНомер      = 1;
	
	Для Каждого ЭлементСписка Из СписокОбъектов Цикл
				
		тмДокумент.Очистить();
		
		Если (Не ПараметрыОтчета.Форма = "10") И (Не ПараметрыОтчета.Форма = "11") Тогда
			ДанныеОбОплатах = ПолучитьТаблицуОплат(ТаблицаОплат, ЭлементСписка.Значение);
		Иначе 
			ДанныеОбОплатах = Неопределено;
		КонецЕсли;
			
		Если (Не ПараметрыОтчета.Форма = "07") И (Не ПараметрыОтчета.Форма = "11") И (Не ПараметрыОтчета.Форма = "14") Тогда
			ДанныеОНачСальдо = ПолучитьНачальноеСальдоДляЛС(ТаблицаСальдо, ЭлементСписка.Значение, ПараметрыОтчета);
		Иначе 
			ДанныеОНачСальдо = Неопределено;
		КонецЕсли;
		
		Если (Не ПараметрыОтчета.Форма = "09") И (Не ПараметрыОтчета.Форма = "10")
				И (Не ПараметрыОтчета.Форма = "11") И (Не ПараметрыОтчета.Форма = "13") И (Не ПараметрыОтчета.Форма = "14") Тогда
			ДанныеОСубсидиях = ПолучитьСуммуСубсидийДляЛС(ТаблицаСубсидий, ЭлементСписка.Значение);
		Иначе
			ДанныеОСубсидиях = Неопределено;
		КонецЕсли;
		
		Если (Не ПараметрыОтчета.Форма = "10" И Не ПараметрыОтчета.Форма = "13") Тогда
			ДанныеОСчетчиках = ПолучитьТаблицуСчетчиков(ТаблицаСчетчиков, ЭлементСписка.Значение);
		Иначе 
			ДанныеОСчетчиках = Неопределено;
		КонецЕсли;
		
		ДанныеОНачислениях  = ПолучитьТаблицуНачисления(ТаблицаНачислений, ЭлементСписка.Значение);
		ДанныеОПени         = ПолучитьСуммуПениДляЛС(ТаблицаПени, ЭлементСписка.Значение);
		ДанныеоФактЗатратах = ПолучитьФактЗатратыДляЛС(ТаблицаФактическихЗатрат, ЭлементСписка.Значение);
		
		ИмяКолонкиИтогов = ?(ПараметрыОтчета.Форма = "09" ИЛИ ПараметрыОтчета.Форма = "12", "НачисленоИтог", "КОплате");
		
		ПараметрыОтчета.Вставить("СтруктОписание", СформироватьДанныеПоЛицевомуСчету(ЭлементСписка.Значение, ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ, ПараметрыОтчета.Организация));
		
		Если НЕ ПараметрыОтчета.НеПечататьНулевыеКвитанции ИЛИ НЕ ТекущаяКвитанцияНулевая(ДанныеОНачислениях, ДанныеОПени, ИмяКолонкиИтогов, ДанныеОНачСальдо, ДанныеОбОплатах, ПараметрыОтчета.ВыводитьНачальноеСальдо) Тогда
			
			Выполнить("СформироватьФорма" + ПараметрыОтчета.Форма + "(ЭлементСписка.Значение, тмДокумент, ДанныеОбОплатах, ДанныеОСчетчиках, ДанныеОНачислениях, ДанныеОСубсидиях, ДанныеОПени, ДанныеОНачСальдо, ДанныеОФактЗатратах, Истина, 0, ПараметрыОтчета);");
			
			ВывестиТекущуюКвитанцию(ДокументРезультат, тмДокумент, ЭтоПервая, ПараметрыОтчета);
			
		КонецЕсли;
		
		ТекНомер = ТекНомер + 1;
	КонецЦикла;

	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КвитанцииИзвещенияКВП";
	
	// Область печати
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 2,
									  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма01(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления,СубсидийНачислено,
									ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание,
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ЛицевойСчет",            Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",        Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                  Объект.Код);
	ОбщиеДанные.Вставить("ПериодОплаты", "за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");
	
	ВсегоНачислено = СубсидийНачислено + ПениНачислено;

	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ИтоговоеНачисление  = СтрокаИтогов.Начислено;
	ИтоговаяЛьгота      = СтрокаИтогов.Льгота;

	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);

	ВсегоКОплате = ВсегоНачислено + ИтоговоеНачисление;

	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца "
		    	+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
		
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);
	
	ВсегоКОплате = ?(ВсегоКОплате < 0, 0,  ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_" + ПараметрыОтчета.Форма);
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,Пени,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.Пени                      = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);
	
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=-; ЧГ=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	КонецЕсли;

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = 
															  Формат(ТаблицаСчетчиков.Получить(0).ПредыдущееПоказаниеПериод, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + ";" + "ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);
	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	ПриставкаОбласти = ?(ПараметрыОтчета.ПериодПросмотра < '20081001', "", "БезЛьгот");
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти, ПараметрыОтчета, "РазмерНормы, Начислено, Льгота, КОплате");

	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);

	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты                   = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты                    = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма01()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма02(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления,СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)
	
	// (1) Сбор информации.
	
	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	СведенияОПолучателе         = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.ПолучательПлатежа, КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	СведенияОбОрганизации       = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация,       КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	парПолучательПлатежа        = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе,    "ПолноеНаименование");
	парИННадрес                 = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе,    "ИНН,ЮридическийАдрес");
	парОрганизацияПредставление = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации( СведенияОбОрганизации, "Представление,Телефоны");
	
	СведенияОбОрганизации.Представление= ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация);

	ИнформацияПоБанку = "";
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ПолучательПлатежа) Тогда
		СчетПолучателя = ПараметрыОтчета.ПолучательПлатежа.ОсновнойБанковскийСчет;
		ОбщиеДанные.Вставить("ИнформацияПоБанку",
		                     "р/с " + СокрЛП(СчетПолучателя.НомерСчета)
		                     + ", в " + СчетПолучателя.Банк.Наименование + ", к/с " + СокрЛП(СчетПолучателя.Банк.КоррСчет)
		                     + ", БИК " + СокрЛП(СчетПолучателя.Банк.Код));
	Иначе
		ОбщиеДанные.Вставить("ИнформацияПоБанку",    ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ПолучательПлатежа",        СокрЛП(парПолучательПлатежа));
	ОбщиеДанные.Вставить("ИННадрес",                 СокрЛП(парИННадрес));
	ОбщиеДанные.Вставить("ОрганизацияПредставление", СокрЛП(парОрганизацияПредставление));
	ОбщиеДанные.Вставить("ФИО",                      Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание,
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес", Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты", "" + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("НачалоМесяца", "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ПериодМесяца", "" 
						+ ПредложныйПадежМесяца(ПараметрыОтчета.ПериодПросмотра) 
						+ " "
						+ Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='yyyy'")
						+ " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",     Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС", Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",           Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");

	ВсегоНачислено = ПениНачислено;

	// Предыдущие начисления и оплаты.
	ЗапросПред = Новый Запрос();
	ЗапросПред.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток, 0) КАК КОплатеНаНачалоМесяца,
	|	-ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) 
	|	+ ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПени.СуммаНачисленияРасход, 0) КАК ОплаченоЗаМесяц
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|						&ДатаНач,
	|						ЛицевойСчет = &ЛицевойСчет И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияОплата И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
	|		ПО (ИСТИНА)
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияПени И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПени
	|		ПО (ИСТИНА)";
	
	ЗапросПред.УстановитьПараметр("ЛицевойСчет", Объект);
	ЗапросПред.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	ЗапросПред.УстановитьПараметр("ВидНачисленияОплата", Перечисления.КВП_ВидыНачисления.РегистрацияОплаты);
	ЗапросПред.УстановитьПараметр("ВидНачисленияПени",   Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	ЗапросПред.УстановитьПараметр("ДатаНач",       НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросПред.УстановитьПараметр("ДатаКон",       КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	ВыборкаПред = ЗапросПред.Выполнить().Выбрать();
	Если ВыборкаПред.Следующий() Тогда
		ОбщиеДанные.Вставить("ОплаченоЗаМесяц",       ВыборкаПред.ОплаченоЗаМесяц);
	КонецЕсли;

	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ИтоговоеНачисление  = СтрокаИтогов.Начислено;
	ИтоговаяЛьгота      = СтрокаИтогов.Льгота;
	ИтоговыйПерерасчет  = СтрокаИтогов.Перерасчет;
	ИтоговоеКОплате     = СтрокаИтогов.КОплате;

	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);
	
	//ИтоговоеНачисление
	ВсегоКОплате = ВсегоНачислено + ИтоговоеКОплате;

	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = ?(НачальноеСальдо > 0, "задолженность", "переплата") + " на начало месяца "
		                  + Формат(АбсРазмерСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);
	ОбщиеДанные.Вставить("КоличествоЧеловек",     СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);

	ОбщиеДанные.Вставить("КОплатеЗаМесяц", ВсегоКОплате);
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_02");
	
	СтруктураПараметровМакета = Новый Структура("ДанныеОЛьготах,НачалоМесяца,КОплатеНаНачалоМесяца,Пени,КОплатеЗаМесяц");
	СтруктураПараметровМакета.ДанныеОЛьготах        = СтруктОписание.ДанныеОЛьготах;
	СтруктураПараметровМакета.НачалоМесяца          = "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.";
	СтруктураПараметровМакета.КОплатеНаНачалоМесяца = ВыборкаПред.КОплатеНаНачалоМесяца;
	СтруктураПараметровМакета.Пени                  = ПениНачислено;
	СтруктураПараметровМакета.КОплатеЗаМесяц        = ОбщиеДанные.КОплатеЗаМесяц;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			ТекСтрокаПараметры = Новый Структура("Тариф");
			ТекСтрокаПараметры.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация,
																	СтрокаСчетчика.Услуга,
																	Объект);
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	Если Не ПустаяСтрока(СтруктОписание.ДанныеОЛьготах) Тогда
		Область = Макет.ПолучитьОбласть("ДанныеОЛьготах");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияШапка2");
	ДокументРезультат.Вывести(Область);

	// НАЧАЛЬНОЕ САЛЬДО
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("НачальноеСальдоШапка");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;	
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("ОплаченоШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если ОбщиеДанные.СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект,, ПараметрыОтчета, "Начислено, Льгота, Перерасчет, КОплате");
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтрокаИтогов);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ

	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			ТекСтрокаПараметры = Новый Структура("Тариф");
			ТекСтрокаПараметры.Тариф = ПолучитьТарифПоЛицевомуСчету( КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
																	ПараметрыОтчета.Организация, 
																	СтрокаСчетчика.Услуга,
																	Объект);
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// ПОДВАЛ
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);

КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма03(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание,
													Перечисления.КВП_ВидыАдресов.Здание, 
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты",  "за " +  Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",            Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",        Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                  Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");

	ВсегоНачислено = СубсидийНачислено + ПениНачислено;

	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ИтоговоеНачисление  = СтрокаИтогов.Начислено;
	ИтоговаяЛьгота      = СтрокаИтогов.Льгота;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);

	ВсегоКОплате = ВсегоНачислено + ИтоговоеНачисление;

	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");
	
	
	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца "
		    	+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;		
		
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);

	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_03");
	
	СтруктураПараметровМакета = Новый Структура("ПредПредыдущееПоказаниеПериод,СтрокаНачСальдо,Пени,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо               = СтрокаНачСальдо;
	СтруктураПараметровМакета.Пени                          = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты                   = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                     = Неопределено;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);

	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект,, ПараметрыОтчета, "Начислено, Льгота, КОплате");
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;

	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);

	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты                   = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты                    = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);
	
	Область = Макет.ПолучитьОбласть("РазделительКвитанций");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма03()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма04(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание, 
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра), 
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес", Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты", "за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",      Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",  Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",            Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");

	ВсегоНачислено = СубсидийНачислено + ПениНачислено;
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ПолучитьТаблицуЗависимыхУслуг(ТаблицаСчетчиков, Объект, ПараметрыОтчета);
	КонецЕсли;

	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	УПЖКХ_ПечатьКвитанцийСервер.ДетализироватьТаблицуНачисленийВРазрезеТарифов(ТаблицаНачисления, ТаблицаСчетчиков, ПараметрыОтчета.мСтруктураНастроек);
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);

	ИтоговоеНачисление  = СтрокаИтогов.Начислено;
	ИтоговаяЛьгота      = СтрокаИтогов.Льгота;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);

	ВсегоКОплате = ВсегоНачислено + ИтоговоеНачисление;

	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");

	// Учет начального сальдо. 
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца "
		    	+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;		
		
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);

	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_04");
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,Пени,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.Пени                      = ПениНачислено;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;
	
	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);

	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ

	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		
		// Ищем максимальную дату последних учтенных показаний
		ЭтоПервый = Истина;
		
		Для каждого ТекСтрока из ТаблицаСчетчиков Цикл
			Если ЭтоПервый Тогда
				МаксДата  = ТекСтрока.ПредыдущееПоказаниеПериод;
				ЭтоПервый = Ложь;
			Иначе
				ТекДата = ТекСтрока.ПредыдущееПоказаниеПериод;
				Если ТекДата > МаксДата Тогда
					МаксДата = ТекДата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Формат(МаксДата, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				СписокФорматируемыхПараметров.Очистить();
				СписокФорматируемыхПараметров.Добавить("РасходДн");
				СписокФорматируемыхПараметров.Добавить("РасходНч");
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);

	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	ПриставкаОбласти = ?(ПараметрыОтчета.ПериодПросмотра < '20081001', "", "БезЛьгот");
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);
	
	// Выводим начисления в соответствии с возможностями свертки и детализации текущей квитанции.
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти, ПараметрыОтчета, "РазмерНормы, Начислено, КОплате", Истина);
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;

	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);

	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты                   = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты                    = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма04()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма05(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание, 
													Перечисления.КВП_ВидыАдресов.Здание, 
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты", "за "  +  Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",            Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",        Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                  Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");

	ВсегоНачислено = СубсидийНачислено + ПениНачислено;
	
	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));	
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ИтоговоеНачисление  = СтрокаИтогов.Начислено;
	ИтоговоеПени        = СтрокаИтогов.Пени;
	ИтоговаяЛьгота      = СтрокаИтогов.Льгота;
	ИтоговыйПерерасчет  = СтрокаИтогов.Перерасчет; 
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);

	ВсегоКОплате = ВсегоНачислено + ИтоговоеНачисление + ИтоговыйПерерасчет;

	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");

	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо          = СтруктураНачСальдо["НачальноеСальдо"];
		СУчетомГрафикаПлатежей   = СтруктураНачСальдо["СУчетомГрафикаПлатежей"]; 
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = "Остаток на начало месяца" + ?(СУчетомГрафикаПлатежей, " (с учетом граф. платежей): ", ": ")
		                  + Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
		
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);

	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_05");
	
	СтруктураПараметровМакета = Новый Структура("ПредыдущееПоказаниеПериод,СтрокаНачСальдо,СуммаОплаты,КонСтрока");
	СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Неопределено;
	СтруктураПараметровМакета.СтрокаНачСальдо           = СтрокаНачСальдо;
	СтруктураПараметровМакета.СуммаОплаты               = ВнесеноОплат;
	СтруктураПараметровМакета.КонСтрока                 = Неопределено;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьШапка);

	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещения");
	Иначе
		Область = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
	КонецЕсли;

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ДокументРезультат.Присоединить(ОбластьШапка);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ

	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиковПред");
		
		// Ищем максимальную дату последних учтенных показаний
		ЭтоПервый = Истина;
		
		Для каждого ТекСтрока из ТаблицаСчетчиков Цикл
			Если ЭтоПервый Тогда
				МаксДата  = ТекСтрока.ПредыдущееПоказаниеПериод;
				ЭтоПервый = Ложь;
			Иначе
				ТекДата = ТекСтрока.ПредыдущееПоказаниеПериод;
				Если ТекДата > МаксДата Тогда
					МаксДата = ТекДата;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметровМакета.ПредыдущееПоказаниеПериод = Формат(МаксДата, "ДФ=dd.MM.yy");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчикаПред");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеНч");
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеНч");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			СписокФорматируемыхПараметров.Очистить();
			СписокФорматируемыхПараметров.Добавить("РасходДн");
			СписокФорматируемыхПараметров.Добавить("РасходНч");
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;

		Область = Макет.ПолучитьОбласть("ПодвалСчетчиковПред");
		ДокументРезультат.Вывести(Область);

	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяСтрока");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Если Не СтрокаНачСальдо = Неопределено И Не ПустаяСтрока(СтрокаНачСальдо) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНачСальдо");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// НАЧИСЛЕНИЯ

	ПриставкаОбласти = ?(ПараметрыОтчета.ПериодПросмотра < '20081001', "", "БезЛьгот");
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти, ПараметрыОтчета, "РазмерНормы, Льгота, Начислено, Перерасчет, КОплате");
	
	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Область = Макет.ПолучитьОбласть("НачисленияПодвал" + ПриставкаОбласти);
	Область.Параметры.Заполнить(СтрокаИтогов);
	
	ДокументРезультат.Вывести(Область);
	
	Если Не ДанныеОбОплатах.Количество() = 0 Тогда
		
		ТекСтрокаПараметры = Новый Структура("СуммаОплаты, ДатаОплаты");
		
		Для Каждого ТекОплата Из ДанныеОбОплатах Цикл
			
			ТекСтрокаПараметры.СуммаОплаты                   = ТекОплата.СуммаОплаты;
			ТекСтрокаПараметры.ДатаОплаты                    = Формат(ТекОплата.Период, "ДФ=dd.MM.yy");
			
			Область = Макет.ПолучитьОбласть("ОплатыСтрока");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ТекОплата.Период, "ДФ=dd.MM.yyyy"));
		Область = Макет.ПолучитьОбласть("ОплатыПодвал");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
		
		СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
		Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
			
			ТекСтрокаПараметры = Новый Структура("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
			
			Область = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
			
		КонецЕсли;
		
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	СтруктураПараметровМакета.КонСтрока = КонСтрокаЗнач;
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры // СформироватьФорма05()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма06(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)
	
	// (1) Сбор информации.
	
	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	СведенияОПолучателе = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.ПолучательПлатежа, КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	парПолучательПлатежа = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "ПолноеНаименование");
	парИННадрес          = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "ИНН,ЮридическийАдрес");
	
	СведенияОбОрганизации               = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	СведенияОбОрганизации.Представление = ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация); 
	парОрганизацияПредставление         = УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Представление,Телефоны");
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	ИнформацияПоБанку = "";
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ПолучательПлатежа) Тогда
		СчетПолучателя = ПараметрыОтчета.ПолучательПлатежа.ОсновнойБанковскийСчет;
		ОбщиеДанные.Вставить("ИнформацияПоБанку",
		                     "р/с " + СокрЛП(СчетПолучателя.НомерСчета)
		                     + ", в " + СчетПолучателя.Банк.Наименование + ", к/с " + СокрЛП(СчетПолучателя.Банк.КоррСчет)
		                     + ", БИК " + СокрЛП(СчетПолучателя.Банк.Код));
	Иначе
		ОбщиеДанные.Вставить("ИнформацияПоБанку",    ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ПолучательПлатежа",        СокрЛП(парПолучательПлатежа));
	ОбщиеДанные.Вставить("ИННадрес",                 СокрЛП(парИННадрес));
	ОбщиеДанные.Вставить("ОрганизацияПредставление", СокрЛП(парОрганизацияПредставление));
	ОбщиеДанные.Вставить("ФИО",                      Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание, 
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра), 
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес", Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты", "" + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("НачалоМесяца", "" + Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ='dd MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ПериодМесяца", "" 
						+ ПредложныйПадежМесяца(ПараметрыОтчета.ПериодПросмотра) 
						+ " " 
						+ Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='yyyy'") 
						+ " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",     Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС", Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",           Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");

	ВсегоНачислено = СубсидийНачислено + ПениНачислено;

	// Предыдущие начисления и оплаты.
	ЗапросПред = Новый Запрос();
	ЗапросПред.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК КОплатеНаНачалоМесяца,
	|	-ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаОбороты.СуммаНачисленияОборот, 0) 
	|	+ ЕСТЬNULL(КВП_НачисленияНаЛицевыеСчетаПени.СуммаНачисленияРасход, 0) КАК ОплаченоЗаМесяц
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|								&ДатаНач, 
	|								ЛицевойСчет = &ЛицевойСчет И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленияПоЛицевымСчетам.Обороты(
	|				&ДатаНач, &ДатаКон, Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияОплата И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаОбороты
	|		ПО ИСТИНА
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Обороты(
	|				&ДатаНач, &ДатаКон, Период,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ВидНачисления = &ВидНачисленияПени И Организация = &Организация) КАК КВП_НачисленияНаЛицевыеСчетаПени
	|		ПО ИСТИНА";
	
	ЗапросПред.УстановитьПараметр("ЛицевойСчет", Объект);
	ЗапросПред.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	ЗапросПред.УстановитьПараметр("ВидНачисленияОплата", Перечисления.КВП_ВидыНачисления.РегистрацияОплаты);
	ЗапросПред.УстановитьПараметр("ВидНачисленияПени",   Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	ЗапросПред.УстановитьПараметр("ДатаНач",       НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	ЗапросПред.УстановитьПараметр("ДатаКон",       КонецМесяца(ПараметрыОтчета.ПериодПросмотра));

	ВыборкаПред = ЗапросПред.Выполнить().Выбрать();
	Если ВыборкаПред.Следующий() Тогда
		// Структура с информацией о предыдущем начислении и оплате.
		Если ВыборкаПред.КОплатеНаНачалоМесяца >= 0 Тогда
			ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", ВыборкаПред.КОплатеНаНачалоМесяца);
			ОбщиеДанные.Вставить("Переплата", 0);
		Иначе
			ОбщиеДанные.Вставить("КОплатеНаНачалоМесяца", 0);
			ОбщиеДанные.Вставить("Переплата", (ВыборкаПред.КОплатеНаНачалоМесяца)*(-1));
		КонецЕсли;
		// Нигде не используется!
		ОбщиеДанные.Вставить("ОплаченоЗаМесяц",       ВыборкаПред.ОплаченоЗаМесяц);
	КонецЕсли;

	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ИтоговоеНачисление = СтрокаИтогов.Начислено;
	ИтоговаяЛьгота     = СтрокаИтогов.Льгота;
	ИтоговыйПерерасчет = СтрокаИтогов.Перерасчет;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("ВсегоЖКУ", ИтоговоеНачисление);

	ВсегоКОплате = ВсегоНачислено + ИтоговоеНачисление + ИтоговыйПерерасчет;

	// Нахождение стоимости банковского перевода.
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);

	// Поиск оплат за месяц.
	ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
	Предоплата   = ДанныеОбОплатах.Итог("Предоплата");

	// Учет начального сальдо.
	АбсРазмерСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			АбсРазмерСальдо = ?(НачальноеСальдо > 0, НачальноеСальдо, -1 * НачальноеСальдо);
			СтрокаНачСальдо = ?(НачальноеСальдо > 0, "задолженность", "переплата") + " на начало месяца "
		                  + Формат(АбсРазмерСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
		КонецЕсли;
		
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, Предоплата, НачальноеСальдо, ПараметрыОтчета);
	Иначе
		ВсегоКОплате = ВсегоКОплате - Предоплата;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  АбсРазмерСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", ИтоговоеНачисление);

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоНачислено", ВсегоНачислено);
	ПарамИтогКв.Вставить("ВсегоКОплате",   ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоЛьгота",    ИтоговаяЛьгота);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ПарамИтогКв.Вставить("КоличествоПроживающих", "Проживает: " + СтруктОписание.КоличествоПроживающих + " чел.");
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);
	ОбщиеДанные.Вставить("КоличествоЧеловек",     СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ПолучитьТаблицуЗависимыхУслуг(ТаблицаСчетчиков, Объект, ПараметрыОтчета);
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		ПроцентБанка = ПараметрыОтчета.ПроцентЗаУслугиБанка;
	Иначе
		ПроцентБанка = 0;
	КонецЕсли;
	ОбщиеДанные.Вставить("ПроцентБанка", ПроцентБанка);
	
	СуммаПроцентовБанка = ВсегоКОплате * ПроцентБанка / 100;
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		ВсегоКОплате = ВсегоКОплате + СуммаПроцентовБанка;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("КОплатеЗаМесяц", ВсегоКОплате);
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_06");
	
	СтруктураПараметровМакета = Новый Структура("ДанныеОЛьготах,СуммаПроцентовБанка,Пени");
	СтруктураПараметровМакета.ДанныеОЛьготах      = Неопределено;
	СтруктураПараметровМакета.СуммаПроцентовБанка = СуммаПроцентовБанка;
	СтруктураПараметровМакета.Пени                = ПениНачислено;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);

		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
			Область = Макет.ПолучитьОбласть("РазмерПроцентаБанка");
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	Если Не ПустаяСтрока(СтруктОписание.ДанныеОЛьготах) Тогда
		Область = Макет.ПолучитьОбласть("ДанныеОЛьготах");
		СтруктураПараметровМакета.ДанныеОЛьготах = СтруктОписание.ДанныеОЛьготах;
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КвитанцияШапка2");
	ДокументРезультат.Вывести(Область);

	// НАЧИСЛЕНИЯ

	Область = Макет.ПолучитьОбласть("НачисленияЗаголовок");
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Присоединить(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект,, ПараметрыОтчета, "РазмерНормы, Льгота, Начислено, Перерасчет, КОплате");

	КонСтрокаЗнач = "Итого к оплате " + Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=0") + " руб.";
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		Область = Макет.ПолучитьОбласть("НачисленияПодвал1");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
	Иначе
		Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	КонецЕсли;
	Область.Параметры.Заполнить(СтрокаИтогов);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// СЧЕТЧИКИ

	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ШапкаСчетчиков");
		ДокументРезультат.Вывести(Область);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
			Область.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(Область);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				Область = Макет.ПолучитьОбласть("ПоказаниеСчетчика");
				Область.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(Область);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
			Область = Макет.ПолучитьОбласть("РазмерПроцентаБанка");
			Область.Параметры.Заполнить(ОбщиеДанные);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ПодвалСчетчика");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	// ПОДВАЛ
	Область = Макет.ПолучитьОбласть("КвитанцияПодвал");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);

КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма07(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)
	
	// (1) Сбор информации.
	
	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;

	СведенияОбОрганизации               = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра);
	СведенияОбОрганизации.Представление = ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация);
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Представление,"));
	ОбщиеДанные.Вставить("АдресПолучателя",   "Адрес:" + УПЖКХ_ТиповыеМетодыВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес,"));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	
	ОбщиеДанные.Вставить("ИНН", "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО", Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание,
													Перечисления.КВП_ВидыАдресов.Здание, 
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес", Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты", "за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",      Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",  Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",            Объект.Код);
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ='dd MMMM yyyy'") + " г.");
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ='dd MMMM yyyy'"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	// Удаляем те услуги, по которым уже внесены показания.
	врТаблицаСчетчиков = ТаблицаСчетчиков.Скопировать();
	ВсегоСтрок = ТаблицаСчетчиков.Количество();
	Для ОбратныйИндекс = 1 По ВсегоСтрок Цикл
		СтрокаСчетч = ТаблицаСчетчиков.Получить(ВсегоСтрок - ОбратныйИндекс);
		Если (СтрокаСчетч.РасходДн > 0 ИЛИ СтрокаСчетч.РасходНч > 0)
		   И НачалоМесяца(СтрокаСчетч.ПредыдущееПоказаниеПериод) = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) Тогда
			ТаблицаСчетчиков.Удалить(СтрокаСчетч);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
		ТаблицаЗависимыхУслуг = ПолучитьТаблицуЗависимыхУслуг(ТаблицаСчетчиков, Объект, ПараметрыОтчета);
	КонецЕсли;
	
	ЕстьСчетчики = (ТаблицаСчетчиков.Количество() > 0);
	
	// Обработка таблицы начисления.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));	

	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ОбщиеДанные.Вставить("Задолженность",  СтрокаИтогов.НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", СтрокаИтогов.Начислено);
	
	ВсегоКОплате = СтрокаИтогов.КОплате + ПениНачислено + СубсидийНачислено;
	Если ПараметрыОтчета.СуммаОплаты > 0 И ВсегоКОплате > 0 Тогда
		НоваяСумма = 0;
		Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
			Если ТаблицаНачисления.Индекс(СтрокаНачисления) = 0 Тогда
				СтрокаНачисления.Порядок = 0;
				Продолжить;
			КонецЕсли;
			СтрокаНачисления.КОплате = СтрокаНачисления.КОплате * ПараметрыОтчета.СуммаОплаты / ВсегоКОплате;
		КонецЦикла;
		ВсегоКОплате = ПараметрыОтчета.СуммаОплаты;
		СтрокаИтогов.КОплате = ВсегоКОплате;
	КонецЕсли;
	
	// Если сумма оплаты отрицательная, то выводим ноль.
	Если ВсегоКОплате < 0 Тогда
		ВсегоКОплате = 0;
	КонецЕсли;
	
	ОбщиеДанные.Вставить("ВсегоКОплате", ВсегоКОплате);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	СтруктОписание.Вставить("КоличествоЧеловек", СтруктОписание.КоличествоПроживающих);
	КоличествоПроживающих = "Прописано: " + СтруктОписание.КоличествоПрописано + "; "
						  + "временно отсутствует: " + СтруктОписание.ВременноОтсутствующих + "; "
						  + "временно проживает: " + СтруктОписание.ВременноПроживающих;
	
	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("КоличествоПроживающих", КоличествоПроживающих);
	ПарамИтогКв.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ПарамИтогКв.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ПарамИтогКв.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ПарамИтогКв.Вставить("Телефон",               Объект.Телефон);
	
	// (2) Вывод информации.
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_07");
	
	СтруктураПараметровМакета = Новый Структура("Пени");
	СтруктураПараметровМакета.Пени = ПениНачислено;
	
	// ИЗВЕЩЕНИЕ
	
	//ОбластьМакета = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("ИнформацияИзвещенияQR");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, врТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(ОбластьМакета, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ЕстьСчетчики Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыПоСчетчикам");
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыОбщие");
	ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, ВсегоКОплате, СтруктураПараметровМакета);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// КВИТАНЦИЯ
	
	ОбластьМакета = Макет.ПолучитьОбласть("КвитанцияШапка");
	ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если ЕстьСчетчики Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыПоСчетчикам");
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСуммыОбщие");
	ЗаполнитьПараметрыСуммыВсего(ОбластьМакета, ВсегоКОплате, СтруктураПараметровМакета);
	ОбластьМакета.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	ОбластьМакета.Параметры.Заполнить(ПарамИтогКв);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// НАЧИСЛЕНИЯ
	
	ОбластьМакета = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект,, ПараметрыОтчета, "Оплата, НачальноеСальдо, Начислено, Перерасчет, КОплате");
	
	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтрокаИтогов.КОплате = ВсегоКОплате;
	
	ОбластьМакета = Макет.ПолучитьОбласть("НачисленияПодвал");
	ОбластьМакета.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(ОбластьМакета);
	
	Если СуммаОплатыОстаткаПоРассрочке > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("КвитанцияСальдоВнесеноОплатНаПогашениеРассрочки");
		ОбластьМакета.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(ОбластьМакета);
	КонецЕсли;
	
	// СЧЕТЧИКИ
	
	ТаблицаСчетчиков.Колонки.Добавить("Порядок", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла("2"));
	УПЖКХ_ПечатьКвитанцийСервер.СортироватьТаблицуУслугПоПорядку(ТаблицаСчетчиков);
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиШапка");
		ДокументРезультат.Вывести(ОбластьМакета);
		
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиСтрока");
			ОбластьМакета.Параметры.Заполнить(СтрокаСчетчика);
			
			СписокФорматируемыхПараметров = Новый СписокЗначений;
			СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
			
			СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
			ОтформатироватьПараметрыОбласти(ОбластьМакета, СписокФорматируемыхПараметров, СтрокаФормата);
			
			ДокументРезультат.Вывести(ОбластьМакета);
		КонецЦикла;
		
		Если ПараметрыОтчета.ВыводитьЗависимыеУслуги Тогда
			Для Каждого СтрокаСчетчика Из ТаблицаЗависимыхУслуг Цикл
				ОбластьМакета = Макет.ПолучитьОбласть("СчетчикиСтрока");
				ОбластьМакета.Параметры.Заполнить(СтрокаСчетчика);
				
				СписокФорматируемыхПараметров = Новый СписокЗначений;
				СписокФорматируемыхПараметров.Добавить("ПредПредыдущееПоказаниеДн");
				
				СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
				ОтформатироватьПараметрыОбласти(ОбластьМакета, СписокФорматируемыхПараметров, СтрокаФормата);
				
				ДокументРезультат.Вывести(ОбластьМакета);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПОДВАЛ
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);
	
	// ЛЬГОТЫ
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСведений");
	ДокументРезультат.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаЛьгот");
	ДокументРезультат.Вывести(ОбластьМакета);
	ПерваяСтрока = ДокументРезультат.ВысотаТаблицы;
	
	мЗапросПоЛьготам = Новый Запрос();
	СформироватьЗапросПоЛьготам(мЗапросПоЛьготам, ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ);
	
	мЗапросПоЛьготам.УстановитьПараметр("ЛицевойСчет", Объект);
	мЗапросПоЛьготам.УстановитьПараметр("ВидыНачисленияЛьготы", Перечисления.КВП_ВидыНачисления.Льготы);
	мЗапросПоЛьготам.УстановитьПараметр("ДатаНач",     НачалоМесяца(ПараметрыОтчета.ПериодПросмотра));
	мЗапросПоЛьготам.УстановитьПараметр("ДатаКон",     КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	РезультатЛьготников = мЗапросПоЛьготам.Выполнить();
	
	ВыборкаКатегорий = РезультатЛьготников.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКатегорий.Следующий() Цикл
		ВыборкаЛьготников = ВыборкаКатегорий.Выбрать();
		Пока ВыборкаЛьготников.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЛьгот");
			ОбластьМакета.Параметры.Заполнить(ВыборкаЛьготников);
			ТекСтрокаПараметры = Новый Структура("СуммаЛьготы");
			ТекСтрокаПараметры.СуммаЛьготы = ВыборкаЛьготников.СуммаЛьготы / ВыборкаЛьготников.Количество();
			ОбластьМакета.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(ОбластьМакета);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&ДатаКон, Помещение = &Квартира) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	Собственник";
	Запрос.УстановитьПараметр("Квартира", Объект.Адрес);
	Запрос.УстановитьПараметр("ДатаКон",  КонецМесяца(ПараметрыОтчета.ПериодПросмотра));
	
	СведенияОСобственниках = "";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СведенияОСобственниках  = СведенияОСобственниках 
								+ ?(ПустаяСтрока(СведенияОСобственниках), "", Символы.ПС) 
								+ Выборка.Собственник;
	КонецЦикла;
	
	ПоследняяСтрока      = ДокументРезультат.ВысотаТаблицы;
	ОбластьСобственников = ДокументРезультат.Область(ПерваяСтрока, 23, ПоследняяСтрока, 35);
	ОбластьСобственников.Объединить();
	ОбластьСобственников.Текст = СведенияОСобственниках;
	
КонецПроцедуры // СформироватьФорма07()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма08(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)
	
	СформироватьФорма01(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления,СубсидийНачислено,
									ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок, ВысотаЗаголовка, ПараметрыОтчета);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма09(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	ОбщиеДанные.Вставить("РасчетныйСчет",     "Р/С: " + СокрЛП(ПараметрыОтчета.БанковскийСчет.НомерСчета));
	ОбщиеДанные.Вставить("Банк",              "Банк: " + ПараметрыОтчета.БанковскийСчет.Банк.Наименование);
	ОбщиеДанные.Вставить("БИКиКС",            "БИК: " + ПараметрыОтчета.БанковскийСчет.Банк.Код + " К/С " + СокрЛП(ПараметрыОтчета.БанковскийСчет.Банк.КоррСчет));
	ОбщиеДанные.Вставить("ДатаФормирования",  "от " + Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=dd.MM.yy"));
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание, 
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра),
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	
	Если ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("ПериодОплаты", 
							 "период :" + Формат(ПараметрыОтчета.ДатаС, "ДФ='MMMM yyyy'") 
							 			+ " г. - " 
										+ Формат(ПараметрыОтчета.ДатаПо,"ДФ='MMMM yyyy'")
										+ " г.");
	Иначе
		ОбщиеДанные.Вставить("ПериодОплаты", ВРег(Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г."));
	КонецЕсли;
	ПериодПени       = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	МесяцСтрокойПени = НРег(Формат(ПериодПени, "ДФ=MMMM"));
	ГодПени          = Формат(Год(ПериодПени),"ЧГ=0");
	ОбщиеДанные.Вставить("ПериодПени",      "за " + МесяцСтрокойПени + " " + ГодПени);
	ОбщиеДанные.Вставить("ЛицевойСчет",     Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС", Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",           Объект.Код);

	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	Если Не ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ЧислоДолгаСтрока) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) + ((ПараметрыОтчета.ЧислоДолгаСтрока - 1) * 60 * 60* 24);
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтчета.ПериодДолга) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	ВсегоНачислено = ПениНачислено;
	
	ОбщиеДанные.Вставить("Пени", Формат(ПениНачислено, "ЧДЦ=2; ЧН=-"));
	
	// Обработка "таблицы начисления".
	ТаблицаНачисления.Колонки.Добавить("Тариф",          Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("НормаПоказания", Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы",    Новый ОписаниеТипов("Число"));
	
	// Создание и заполнение строки итогов.
	СтрокаИтогов = ТаблицаНачисления.Получить(0);

	ВсегоНачислено = ВсегоНачислено + СтрокаИтогов.НачисленоИтог;
	
	// Нахождение стоимости банковского перевода
	ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
	
	// Поиск оплат за месяц.
	ПериодПросмотра = ПараметрыОтчета.ПериодДолга;
	
	// Обработка начального сальдо
	НачальноеСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда

		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		НачальноеСальдо = НачальноеСальдо - ПениНачислено;

		НачальноеСальдоСправочно = НачальноеСальдо;
			
		ДатаСтрокиПредупреждения = Формат(ПараметрыОтчета.ПериодДолга, "ДФ=dd.MM.yyyy");
			Для Каждого Стр Из ДанныеОбОплатах Цикл
				Если Стр.Период < ПараметрыОтчета.ПериодДолга Тогда
					НачальноеСальдоСправочно = НачальноеСальдоСправочно - Стр.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
		
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект);

		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			Если НачальноеСальдо > 0 Тогда
				СтрокаНачСальдо = "Ваша задолженность на " + Формат((НачалоМесяца(ПериодПросмотра) - 1), "ДЛФ=Д") + ": "
							+ Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
			Иначе
				СтрокаНачСальдо = "";
			КонецЕсли;
		КонецЕсли;
	
		ОбщиеДанные.Вставить("СтрокаНачСальдо", СтрокаНачСальдо);
		Если ПараметрыОтчета.ЗаПериод Тогда
			ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
		Иначе
			Если НачальноеСальдоСправочно = 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
			ИначеЕсли НачальноеСальдоСправочно < 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", 
								 "Переплата на " + ДатаСтрокиПредупреждения
								 				 + "  " 
												 +Формат(-1 * НачальноеСальдоСправочно, "ЧДЦ=2") 
												 + ". Благодарим за своевременную оплату счетов!");
			Иначе
				ОбщиеДанные.Вставить("СтрокаПредупреждения", 
								 "Напоминаем, что на "  + ДатаСтрокиПредупреждения
														+ " вы не заплатили "
														+ Формат(НачальноеСальдоСправочно, "ЧДЦ=2") 
														+ " за предыдущий период");
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		ДатаСтрокиПредупреждения = Формат(НачалоМесяца(ПериодПросмотра), "ДФ=dd.MM.yyyy");
		ВнесеноОплат    = ДанныеОбОплатах.Итог("СуммаОплаты");
		ВсегоКОплате    = РассчитатьСуммуВсегоКОплате(0, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект);
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", СтрокаИтогов.Начислено);
	
	ОбщиеДанные.Вставить("ВсегоКОплате",       Окр(ВсегоКОплате, 2));
	ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(СтрокаИтогов.НачисленоИтог, "ЧДЦ=2; ЧН=-"));
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", ?(ПараметрыОтчета.ВыводитьКоличествоПроживающих, "Кол-во прожив: " + СтруктОписание.КоличествоПроживающих, ""));
	
	// Скопируем таблицу счетчиков для заполнения количества в начислениях.
	ТаблицаСчетчиковДляЗаполненияНачислений = ТаблицаСчетчиков.Скопировать();
	ЗаполнитьНачисленияПоПоказаниямСчетчиков(ТаблицаСчетчиковДляЗаполненияНачислений, ТаблицаНачисления, Истина);

	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_09");
	
	// ИЗВЕЩЕНИЕ
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQR");
	КонецЕсли;
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	ДокументРезультат.Вывести(Область);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	ДокументРезультат.Вывести(Область);
	
	// ШАПКА КВИТАНЦИИ
	
	тмДокумент = Новый ТабличныйДокумент;
	
	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		
		Область = Макет.ПолучитьОбласть("СтрокаПредупреждения");
		Область.Параметры.Заполнить(ОбщиеДанные);
		тмДокумент.Вывести(Область);
	
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияИнф");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);

	ДокументРезультат.Присоединить(тмДокумент);
	
	тмДокумент.Очистить();
	
	//КОРЕШОК
	
	Область = Макет.ПолучитьОбласть("КорешокШапка");
	тмДокумент.Вывести(Область);
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Если ПараметрыОтчета.ВсегдаВыводитьПоказанияСчетчиков Тогда
			Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
				Область = Макет.ПолучитьОбласть("КорешокСчетчик");
				ТекСтрокаПараметры = Новый Структура("Абонент");
				ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмДокумент.Вывести(Область);
				тмПоказания = Новый ТабличныйДокумент;
				Область = Макет.ПолучитьОбласть("КорешокПоказания");
				СтрокаПоказаний = "";
				СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата) + "-"
												  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата) + "="
												  + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеНч) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата) + "-"
													  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата) + "="
													  + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеПк) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата) + "-"
													  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата) + "="
													  + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				ТекСтрокаПараметры.Вставить("СтрокаПоказаний", СтрокаПоказаний);
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмПоказания.Вывести(Область);
				тмДокумент.Присоединить(тмПоказания);
			КонецЦикла;
			
		Иначе
			Если ТаблицаСчетчиков.Итог("РасходДн") <> 0 Или ТаблицаСчетчиков.Итог("РасходНч") <> 0 Или ТаблицаСчетчиков.Итог("РасходПк") <> 0 Тогда
				 Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
				 	Область = Макет.ПолучитьОбласть("КорешокСчетчик");
					ТекСтрокаПараметры = Новый Структура("Абонент");
					ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмДокумент.Вывести(Область);
					тмПоказания = Новый ТабличныйДокумент;
					Область = Макет.ПолучитьОбласть("КорешокПоказания");
					СтрокаПоказаний = "";
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходДн) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходНч) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходПк) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата) + "-"
														  + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата) + "="
														  + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					ТекСтрокаПараметры.Вставить("СтрокаПоказаний", СтрокаПоказаний);
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмПоказания.Вывести(Область);
					тмДокумент.Присоединить(тмПоказания);
				 КонецЦикла;
			 КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КорешокПодвал");
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);
	
	// НАЧИСЛЕНИЯ
	
	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(Область);
	
	// Подготовка таблицы начислений к выводу
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьТаблицуНачисленияКВыводу(ТаблицаНачисления, Объект, ПараметрыОтчета.мСтруктураНастроек, "Начислено, Льгота, Перерасчет, НачисленоИтог");
	
	// заполним значение группы в таблице начисления для разделения услуг
	//  не заполнено - поле группировки;
	//  0 - строка итогов;
	//  1 - услуги содержания;
	//  2 - услуги коммунальные;
	//  3 - прочие услуги
	ТаблицаНачисления.Колонки.Добавить("Группа");
	ПервыйОбходТаблицы = Истина;
	Для Каждого СтрокаНачисления Из ТаблицаНачисления Цикл
		
		Если ПервыйОбходТаблицы Тогда
			СтрокаНачисления.Группа = 0;
			ПервыйОбходТаблицы = Ложь;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПараметрыОтчета.УслугиСодержанияРемонта.Найти(СтрокаНачисления.Услуга, "Услуга") = Неопределено Тогда
			СтрокаНачисления.Группа = 1;
		ИначеЕсли НЕ ПараметрыОтчета.УслугиКоммунальные.Найти(СтрокаНачисления.Услуга, "Услуга") = Неопределено Тогда
			СтрокаНачисления.Группа = 2;
		Иначе
			СтрокаНачисления.Группа = 3;
		КонецЕсли;
	КонецЦикла;
	
	// отсортируем по группам
	ТаблицаНачисления.Сортировать("Группа Возр");
	
	// дополним таблицу начисления строками групп
	МассивГрупп = Новый Массив;
	МассивГрупп.Вставить(0, "СОДЕРЖАНИЕ И РЕМОНТ ЖИЛОГО ПОМЕЩЕНИЯ");
	МассивГрупп.Вставить(1, "КОММУНАЛЬНЫЕ УСЛУГИ");
	МассивГрупп.Вставить(2, "ПРОЧИЕ УСЛУГИ");

	МаксИндекс = -1;
	ОтборГрупп = Новый Структура;
	
	Для Сч = 0 По МассивГрупп.ВГраница() Цикл
		ОтборГрупп.Вставить("Группа", Сч);
		НайденныеСтроки    = ТаблицаНачисления.НайтиСтроки(ОтборГрупп);
		МаксИндекс         = МаксИндекс + НайденныеСтроки.Количество() + 1;
		НоваяСтрока        = ТаблицаНачисления.Вставить(МаксИндекс);
		НоваяСтрока.Группа = МассивГрупп[Сч];
	КонецЦикла;
	
	МаксКоличествоСтрок = Макс(ПараметрыОтчета.КоличествоСтрокТаблицыНачислений, Окр((ТаблицаНачисления.Количество() - 1) / 2));
	
	// вывод таблицы начисления
	Для Сч = 1 По МаксКоличествоСтрок Цикл
		
		// вывод левой части
		Если Сч > ТаблицаНачисления.Количество() - 1 Тогда
			Область = Макет.ПолучитьОбласть("НачислениеСтрока");
		Иначе
			ТекущаяСтрока = ТаблицаНачисления.Получить(Сч);
			Если ТипЗнч(ТекущаяСтрока.Группа) = Тип("Строка") Тогда
				Область = Макет.ПолучитьОбласть("НачислениеГруппа");
				ТекСтрокаПараметры = Новый Структура("Группа");
				ТекСтрокаПараметры.Группа = ТекущаяСтрока.Группа;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Иначе
				Область = Макет.ПолучитьОбласть("НачислениеСтрока");
				Область.Параметры.Заполнить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
		
		// вывод правой части
		Если Сч + МаксКоличествоСтрок > ТаблицаНачисления.Количество() - 1 Тогда
			Область = Макет.ПолучитьОбласть("НачислениеСтрока1");
		Иначе
			ТекущаяСтрока = ТаблицаНачисления.Получить(Сч + МаксКоличествоСтрок);
			Если ТипЗнч(ТекущаяСтрока.Группа) = Тип("Строка") Тогда
				Область = Макет.ПолучитьОбласть("НачислениеГруппа1");
				ТекСтрокаПараметры = Новый Структура("Группа");
				ТекСтрокаПараметры.Группа = ТекущаяСтрока.Группа;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
			Иначе
				Область = Макет.ПолучитьОбласть("НачислениеСтрока1");
				Область.Параметры.Заполнить(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Присоединить(Область);
		
	КонецЦикла;

	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока1");
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ПолеСверху = 5;
	ДокументРезультат.ПолеСправа = 5;
	ДокументРезультат.ПолеСнизу  = 5;
	ДокументРезультат.ПолеСлева  = 5;
	
КонецПроцедуры // СформироватьФорма09()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма10(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	// Владелец лицевого счета.
	Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта( ТекЗдание,
													Перечисления.КВП_ВидыАдресов.Здание,
													КонецМесяца(ПараметрыОтчета.ПериодПросмотра), 
													ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета);
	СтрокиАдреса = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
	Если СтрокиАдреса.Количество() > 0 Тогда
		АдресДома = СтрокиАдреса[0].Представление;
		Адрес     = Адрес + " (адрес доставки: " + АдресДома + ")";
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("ПериодОплаты",           Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("ЛицевойСчет",            Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",        Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                  Объект.Код);

	НачалоПериода = Формат(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), "ДФ=dd.MM.yyyy");
	ОбщиеДанные.Вставить("НачалоПериода", НачалоПериода);

	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",          СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли",   СтруктОписание.ЖилаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", СтруктОписание.КоличествоПроживающих);
	ОбщиеДанные.Вставить("КоличествоЛьготников",  СтруктОписание.КоличествоЛьготников);

	ПарамИтогКв = Новый Структура();
	ПарамИтогКв.Вставить("НачалоПериода", НачалоПериода);
	ПарамИтогКв.Вставить("Пени",          ПениНачислено);

	// Обработка информации о начислениях на текущий лицевой счет.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ПарамИтогКв.Вставить("Начислено", СтрокаИтогов.Начислено);
	ПарамИтогКв.Вставить("Льгота",    СтрокаИтогов.Льгота);
	ПарамИтогКв.Вставить("КОплате",   СтрокаИтогов.КОплате);

	ВсегоНачислено = СтрокаИтогов.КОплате + ПениНачислено;
	ВсегоКОплате   = ВсегоНачислено; 
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		ПарамИтогКв.Вставить("НачСальдо", Формат(НачальноеСальдо, "ЧН=0"));

		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, 0, 0, НачальноеСальдо, ПараметрыОтчета);
	КонецЕсли;
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		СуммаПроцентовБанка = ВсегоКОплате * ПараметрыОтчета.ПроцентЗаУслугиБанка / 100;
		ПарамИтогКв.Вставить("СуммаПроцентовБанка", СуммаПроцентовБанка);	
		ВсегоКОплате = ВсегоКОплате + СуммаПроцентовБанка;
	КонецЕсли;

	ВсегоКОплате = ?(ВсегоКОплате < 0, 0, ВсегоКОплате);
	ОбщиеДанные.Вставить("ВсегоКОплате", ВсегоКОплате);
	ПарамИтогКв.Вставить("ВсегоКОплате", ВсегоКОплате);
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_10");
	
	// ИЗВЕЩЕНИЕ

	ОбластьИзвещениеШапка = Макет.ПолучитьОбласть("ИзвещениеШапка");
	ДокументРезультат.Вывести(ОбластьИзвещениеШапка);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьИзвещение = Макет.ПолучитьОбласть("Извещение");
	
	Параметры = Новый Структура();
	Параметры.Вставить("Дата",        ПараметрыОтчета.ПериодПросмотра);
	Параметры.Вставить("ЛицевойСчет", Объект);
	Параметры.Вставить("Сумма",       ВсегоКОплате);
	
	ОргСведения = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСведенияОбОрганизации(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра, "ИННЮЛ,БанкСчетНомер");
	
	Параметры.Вставить("ИННОрганизации",           УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.ИННЮЛ,         12));
	Параметры.Вставить("РасчетныйСчетОрганизации", УПЖКХ_ТиповыеМетодыКлиентСервер.ДополнитьСтроку(ОргСведения.БанкСчетНомер, 20));
	
	// Для формы вид штрихкода должен быть одномерным.
	ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный");
	
	ШтрихКодКвитанции = УПЖКХ_ПечатьКвитанцийСервер.СформироватьШтрихкод(Параметры, ПараметрыОтчета.мНастройкиФормированияПДЖКХ);
	
	ПараметрыШК = Новый Структура;
	ПараметрыШК.Вставить("ШК1", Сред(ШтрихКодКвитанции, 1, 5));
	ПараметрыШК.Вставить("ШК2", Сред(ШтрихКодКвитанции, 6, 9));
	ПараметрыШК.Вставить("ШК3", Сред(ШтрихКодКвитанции, 15, 7));
	ПараметрыШК.Вставить("ШК4", Сред(ШтрихКодКвитанции, 22, 4));
	
	ОбластьИзвещение.Параметры.Заполнить(ОбщиеДанные);
	ОбластьИзвещение.Параметры.Заполнить(ПараметрыШК);
	тмДокумент.Вывести(ОбластьИзвещение);
	ДокументРезультат.Присоединить(тмДокумент);

	// КВИТАНЦИЯ

	ОбластьКвитанцияШапка = Макет.ПолучитьОбласть("КвитанцияШапка");
	ДокументРезультат.Вывести(ОбластьКвитанцияШапка);

	тмДокумент = Новый ТабличныйДокумент();

	ОбластьКвитанция = Макет.ПолучитьОбласть("Квитанция");
	ОбластьКвитанция.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(ОбластьКвитанция);

	// НАЧИСЛЕНИЯ

	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	тмДокумент.Вывести(Область);

	ВывестиТаблицуНачислений(тмДокумент, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект,, ПараметрыОтчета, "Начислено, Льгота, КОплате");

	Область = Макет.ПолучитьОбласть("НачисленияИтого");
	Область.Параметры.Заполнить(ПарамИтогКв);
	тмДокумент.Вывести(Область);

	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ПарамИтогКв);
	Иначе
		Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	КонецЕсли;
	
	тмДокумент.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(ПарамИтогКв);
	тмДокумент.Присоединить(Область);

	ДокументРезультат.Присоединить(тмДокумент);
	
	КартинкаШК = ПолучитьШтрихкод(Объект, ВсегоКОплате, ПараметрыОтчета, "", Ложь);
	Если ТипЗнч(КартинкаШК) = Тип("Картинка")
	   И Не ДокументРезультат.Области.Найти("ШтрихКод") = Неопределено Тогда
		ДокументРезультат.Области.ШтрихКод.Картинка = КартинкаШК;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать штрихкод.");
	КонецЕсли;
	
КонецПроцедуры // СформироватьФорма10()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма11(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;

	СтруктАдрес = ПолучитьАдрес(ТекЗдание, Перечисления.КВП_ВидыАдресов.Здание);
	СтруктАдрес.Регион   = "";
	СтруктАдрес.Район    = "";
	СтруктАдрес.Город    = "";
	СтруктАдрес.Индекс   = "";
	АдресДома = УПЖКХ_ТиповыеМетодыСервер.ПолучитьПредставлениеАдресаДляПФР(СтруктАдрес);

	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	ОбщиеДанные.Вставить("ПолучательПлатежа",      ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку",      ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",                    "ИНН " + ПараметрыОтчета.Организация.ИНН + " / КПП " + ПараметрыОтчета.Организация.КПП);
	ОбщиеДанные.Вставить("ФИО",                    Владелец);
	ОбщиеДанные.Вставить("Адрес",                  АдресДома + ", " + Объект.Адрес);
	ОбщиеДанные.Вставить("ПериодОплаты",           "за " + Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	ОбщиеДанные.Вставить("МесяцОплаты",            НРег(Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM'")));
	ОбщиеДанные.Вставить("ЛицевойСчет",            Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС",        Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",                  Объект.Код);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	
	// Обработка информации о начислениях на текущий лицевой счет.
	ТаблицаНачисления.Колонки.Добавить("Тариф",       Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы", Новый ОписаниеТипов("Число"));
	
	// В квитанции счетчики не выводятся, но используются для получения расхода по начислениям.
	ЗаполнитьНачисленияПоПоказаниямСчетчиков(ТаблицаСчетчиков, ТаблицаНачисления);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_11");
	
	СтруктураПараметровМакета = Новый Структура("КоличествоПроживающих,КоличествоЛьгот,ОбщаяПлощадь,ОбщаяПлощадьБезДоли,
												|ЖилаяПлощадь,ЖилаяПлощадьБезДоли,ПлЖил,Пени,Долг,СледМесяц");
	СтруктураПараметровМакета.КоличествоПроживающих	= СтруктОписание.КоличествоПроживающих;
	СтруктураПараметровМакета.КоличествоЛьгот		= ПолучитьКоличествоЛьгот(Объект, ПараметрыОтчета.ПериодПросмотра);
	СтруктураПараметровМакета.ОбщаяПлощадь			= СтруктОписание.ОбщаяПлощадь;
	СтруктураПараметровМакета.ОбщаяПлощадьБезДоли	= СтруктОписание.ОбщаяПлощадьБезДоли;
	СтруктураПараметровМакета.ЖилаяПлощадь			= СтруктОписание.ЖилаяПлощадь;
	СтруктураПараметровМакета.ЖилаяПлощадьБезДоли	= СтруктОписание.ЖилаяПлощадьБезДоли;
	СтруктураПараметровМакета.Пени 					= ПениНачислено;
	СтруктураПараметровМакета.Долг 					= Неопределено;
	СтруктураПараметровМакета.СледМесяц				= Неопределено;

	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("ОписаниеКвартиры");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	ПриставкаОбласти = "";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти, ПараметрыОтчета, "Начислено, Льгота, Перерасчет, КОплате",,,"ПоказаниеПредыдущее, ПоказаниеТекущее");

	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;

	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ИзвещениеПодвал");
	ДокументРезультат.Вывести(Область);

	Для ном = 0 По 6 Цикл
		ВыборкаПредСведений = ПолучитьПредыдущиеСведения(Объект, ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, ном - 7), ПараметрыОтчета.Организация);
		Если ВыборкаПредСведений.Следующий () Тогда
			Область = Макет.ПолучитьОбласть("ИзвещениеПодвалСтрока");
			ТекСтрокаПараметры = Новый Структура("КонечноеСальдо,Месяц");
			Если ном = 0 Тогда
				ТекСтрокаПараметры.КонечноеСальдо = ВыборкаПредСведений.КонечноеСальдо;
				ТекСтрокаПараметры.Месяц          = "пред. долг";
			Иначе
				Область.Параметры.Заполнить(ВыборкаПредСведений);
				ТекСтрокаПараметры.Месяц = Формат(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, ном - 7), "ДФ='MMMM'");
			КонецЕсли;
			Область.Параметры.Заполнить(ТекСтрокаПараметры);
			ДокументРезультат.Вывести(Область);
		КонецЕсли;
	КонецЦикла;

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("Задолженность");
	Выборка = ПолучитьПредыдущиеСведения(Объект, ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.Организация);
	Если Выборка.Следующий() Тогда
		СтруктураПараметровМакета.Долг = Формат(Выборка.КонечноеСальдо, "ЧДЦ=2; ЧН=; ЧГ=");
	Иначе
		СтруктураПараметровМакета.Долг = "0.00";
	КонецЕсли;
	СтруктураПараметровМакета.СледМесяц = "" + РодительныйПадежМесяца(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1)) + " " 
										+ Формат(Год(ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, 1)), "ЧГ=") + " г.";
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);

КонецПроцедуры // СформироватьОтчет()

// Формирует отчет по объекту / группе объектов.
Процедура СформироватьОтчетФорма12(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(ПараметрыОтчета.ОбъектОтчета) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Объект не указан.");
		Возврат;
	КонецЕсли;
	
	мНастройкиУчетнойПолитикиТСЖотказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ПараметрыОтчета.ПериодПросмотра), 
	                                                       ПараметрыОтчета.Организация, мНастройкиУчетнойПолитикиТСЖотказ);
	
	мНастройкиФормированияПДЖКХотказ = Ложь;
	мНастройкиФормированияПДЖКХ      = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(ПараметрыОтчета.Организация,
																									  мНастройкиФормированияПДЖКХотказ);
	
	мТочностьОбъемаНачислений = Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить();
	
	Если мНастройкиУчетнойПолитикиТСЖотказ = Ложь Тогда
		ДатаОплатыУслуг = мНастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа;
	Иначе
		ДатаОплатыУслуг = 10;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("ДатаОплатыУслуг",                   ДатаОплатыУслуг);
	ПараметрыОтчета.Вставить("мНастройкиУчетнойПолитикиТСЖ",      мНастройкиУчетнойПолитикиТСЖ);
	ПараметрыОтчета.Вставить("мНастройкиУчетнойПолитикиТСЖотказ", мНастройкиУчетнойПолитикиТСЖотказ);
	ПараметрыОтчета.Вставить("мНастройкиФормированияПДЖКХ",       мНастройкиФормированияПДЖКХ);
	ПараметрыОтчета.Вставить("мНастройкиФормированияПДЖКХотказ",  мНастройкиФормированияПДЖКХотказ);
	ПараметрыОтчета.Вставить("мТочностьОбъемаНачислений",         мТочностьОбъемаНачислений);
	
	// Формирование структуры настроек для использования во внешних модулях, на основе текущих данных.
	СформироватьСтруктуруНастроек(ПараметрыОтчета);
	
	// если указанный объект - группа, то собираются все элементы по иерархии
	СписокОбъектов    = ПолучитьСписокЛицевыхСчетовПоГруппе(ПараметрыОтчета);
	
	// Ищем оплаты по всем объектам отчета.
	ТаблицаОплат      = ПолучитьДанныеОбОплатах(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем показания счетчиков по всем объектам отчета.
	ТаблицаСчетчиков  = ПолучитьДанныеПоСчетчикам(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем данные о начислениях по всем объектам отчета.
	ТаблицаНачислений = ПолучитьЗапросНачисления(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем данные о пени по всем объектам отчета.
	ТаблицаПени       = ПолучитьДанныеОПени(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем данные о начальном сальдо по всем объектам отчета.
	ТаблицаСальдо     = ПолучитьДанныеОНачальномСальдо(СписокОбъектов, ПараметрыОтчета);
	
	// Ищем данные о фактических затратах по всем объектам отчета.
	ТаблицаФактическихЗатрат = ПолучитьТаблицуНачисленийВводФактическихЗатрат(СписокОбъектов, ПараметрыОтчета);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	тмДокумент        = Новый ТабличныйДокумент();
	тмОбщийДок        = Новый ТабличныйДокумент();
	ЭтоПервая         = Истина;
	ВсегоОбъектов     = СписокОбъектов.Количество();
	ТекНомер          = 1;
	ТекНомерВыводимой = 1;
	
	Для Каждого ЭлементСписка Из СписокОбъектов Цикл
		
		ДанныеОбОплатах     = ПолучитьТаблицуОплат(ТаблицаОплат, ЭлементСписка.Значение);
		ДанныеОСчетчиках    = ПолучитьТаблицуСчетчиков(ТаблицаСчетчиков, ЭлементСписка.Значение);
		ДанныеОНачислениях  = ПолучитьТаблицуНачисления(ТаблицаНачислений, ЭлементСписка.Значение);
		ДанныеОПени         = ПолучитьСуммуПениДляЛС(ТаблицаПени, ЭлементСписка.Значение);
		ДанныеОНачСальдо    = ПолучитьНачальноеСальдоДляЛС(ТаблицаСальдо, ЭлементСписка.Значение, ПараметрыОтчета);
		ДанныеоФактЗатратах = ПолучитьФактЗатратыДляЛС(ТаблицаФактическихЗатрат, ЭлементСписка.Значение);
		
		ПараметрыОтчета.Вставить("СтруктОписание", СформироватьДанныеПоЛицевомуСчету(ЭлементСписка.Значение, ПараметрыОтчета.ПериодПросмотра, мНастройкиУчетнойПолитикиТСЖ, ПараметрыОтчета.Организация));
		
		Если НЕ ПараметрыОтчета.НеПечататьНулевыеКвитанции ИЛИ НЕ ТекущаяКвитанцияНулевая(ДанныеОНачислениях, ДанныеОПени, "НачисленоИтог", ДанныеОНачСальдо, ДанныеОбОплатах, ПараметрыОтчета.ВыводитьНачальноеСальдо) Тогда
			СформироватьФорма12(ЭлементСписка.Значение, тмДокумент, ДанныеОбОплатах, ДанныеОСчетчиках, 
							ДанныеОНачислениях, ДанныеОПени, ДанныеОНачСальдо, ДанныеоФактЗатратах, Истина, 0, ПараметрыОтчета);
			
			Если Не ПараметрыОтчета.ВыводитьПоОднойКвитанции Тогда
				Если ТекНомерВыводимой % 2 > 0 Тогда
					тмОбщийДок.Присоединить(тмДокумент);
				Иначе
					тмОбщийДок.Присоединить(тмДокумент);
					ДокументРезультат.Вывести(тмОбщийДок);
					тмОбщийДок = Новый ТабличныйДокумент();
					ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				// выводим последний элемент
				Если СписокОбъектов.Количество()%2 <> 0 И СписокОбъектов.Количество() = ТекНомерВыводимой Тогда
					ДокументРезультат.Вывести(тмДокумент);
					ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
			Иначе
				ДокументРезультат.Вывести(тмДокумент);
				ДокументРезультат.ВывестиВертикальныйРазделительСтраниц();
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ТекНомерВыводимой = ТекНомерВыводимой + 1;
		
		КонецЕсли;
		
		ТекНомер = ТекНомер + 1;
		
	КонецЦикла;
	
	// Присвоим имя для сохранения параметров печати табличного документа.
	ДокументРезультат.ИмяПараметровПечати = "НастройкиПечати_КвитанцииИзвещенияКВП";
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху = 10;
	ДокументРезультат.ПолеСправа = 10;
	ДокументРезультат.ПолеСнизу  = 10;
	ДокументРезультат.ПолеСлева  = 10;
	
	// Область печати
	ДокументРезультат.ОбластьПечати = ДокументРезультат.Область(1, 1,
									  ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	
	ПоместитьВоВременноеХранилище(ДокументРезультат, АдресХранилища);
	
КонецПроцедуры

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма12(Объект, ДокументРезультатДляВозврата, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, 
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.
	ДокументРезультат = Новый ТабличныйДокумент;
	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;

	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ПолучательПлатежа", ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	ОбщиеДанные.Вставить("ИнформацияПоБанку", ПолучитьИнформациюПоРасчетномуСчету(ПараметрыОтчета, Объект.Адрес.Владелец));
	ОбщиеДанные.Вставить("ИНН",               "ИНН " + ПараметрыОтчета.Организация.ИНН);
	ОбщиеДанные.Вставить("ФИО",               Владелец);
	ОбщиеДанные.Вставить("РасчетныйСчет",     "Р/С: " + СокрЛП(ПараметрыОтчета.БанковскийСчет.НомерСчета));
	ОбщиеДанные.Вставить("Банк",              "Банк: " + ПараметрыОтчета.БанковскийСчет.Банк.Наименование);
	ОбщиеДанные.Вставить("БИКиКС",            "БИК: " + ПараметрыОтчета.БанковскийСчет.Банк.Код + " К/С " + СокрЛП(ПараметрыОтчета.БанковскийСчет.Банк.КоррСчет));
	ОбщиеДанные.Вставить("ДатаФормирования",  "от " + Формат(ПараметрыОтчета.ДатаФормирования, "ДФ=dd.MM.yy"));
	
	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;
	
	АдресДома = ПолучитьПредставлениеАдресаОбъекта(ТекЗдание, Перечисления.КВП_ВидыАдресов.Здание, 
	                                                 КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Адрес = ПолучитьАдресПомещения(АдресДома, Объект.Адрес);
	
	ОбщиеДанные.Вставить("Адрес",                  Адрес);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	
	Если ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("ПериодОплаты", "период :" + Формат(ПараметрыОтчета.ДатаС, "ДФ='MMMM yyyy'") 
		                      + " г. - " + Формат(ПараметрыОтчета.ДатаПо,"ДФ='MMMM yyyy'") + " г.");
	Иначе
		ОбщиеДанные.Вставить("ПериодОплаты", ВРег(Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г."));
	КонецЕсли;
	ОбщиеДанные.Вставить("ЛицевойСчет",     Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС", Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",           Объект.Код);
	
	СрокОплаты = КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + ПараметрыОтчета.ДатаОплатыУслуг * 24 * 60 * 60;
	Если Не ПараметрыОтчета.ЗаПериод Тогда
		ОбщиеДанные.Вставить("СрокОплаты", "Оплатить до " + Формат(СрокОплаты, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.ЧислоДолгаСтрока) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра) + ((ПараметрыОтчета.ЧислоДолгаСтрока - 1) * 60 * 60* 24);
	ИначеЕсли Не ЗначениеЗаполнено(ПараметрыОтчета.ПериодДолга) Тогда
		ПараметрыОтчета.ПериодДолга = НачалоМесяца(ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	ВсегоНачислено = ПениНачислено;
	
	ОбщиеДанные.Вставить("Пени", Формат(ПениНачислено, "ЧДЦ=2; ЧН=-"));
	
	ТаблицаНачисления.Колонки.Добавить("Тариф",          Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("НормаПоказания", Новый ОписаниеТипов("Строка"));
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы",    Новый ОписаниеТипов("Число"));	
	
	// Получение строки итогов.
	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	// Поиск оплат за месяц.
	ПериодПросмотра = ПараметрыОтчета.ПериодДолга;
	
	// Обработка начального сальдо
	НачальноеСальдо = 0;
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо          = СтруктураНачСальдо["НачальноеСальдо"];
	
		Если НачальноеСальдо > 0 Тогда
			НачальноеСальдо = НачальноеСальдо - ВсегоНачислено;
		КонецЕсли;
	
		ВсегоНачислено = ВсегоНачислено + СтрокаИтогов.НачисленоИтог;
		
		// Нахождение стоимости банковского перевода
		ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
	
		НачальноеСальдоСправочно = НачальноеСальдо;
		ДатаСтрокиПредупреждения = Формат(ПараметрыОтчета.ПериодДолга, "ДФ=dd.MM.yyyy");
		Для Каждого Стр Из ДанныеОбОплатах Цикл
			Если Стр.Период < ПараметрыОтчета.ПериодДолга Тогда
				НачальноеСальдоСправочно = НачальноеСальдоСправочно - Стр.СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(НачальноеСальдо, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект);
	
		ОбщиеДанные.Вставить("ВсегоКОплате",       Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=-"));
		ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(СтрокаИтогов.НачисленоИтог, "ЧДЦ=2; ЧН=-"));
	
		Если НачальноеСальдо = 0 Тогда
			СтрокаНачСальдо = "";
		Иначе
			Если НачальноеСальдо > 0 Тогда
				СтрокаНачСальдо = "Ваша задолженность на " + Формат((НачалоМесяца(ПериодПросмотра) - 1), "ДЛФ=Д") + ": "
		                  + Формат(НачальноеСальдо, "ЧДЦ=2; ЧН=0") + " руб.";
			Иначе
				СтрокаНачСальдо = "";
			КонецЕсли;
		КонецЕсли;
	
		ОбщиеДанные.Вставить("СтрокаНачСальдо", СтрокаНачСальдо);
		Если ПараметрыОтчета.ЗаПериод Тогда
			ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
		Иначе
			Если НачальноеСальдоСправочно = 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Благодарим за своевременную оплату счетов!");
			ИначеЕсли НачальноеСальдоСправочно < 0 Тогда
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Переплата на "
			                        + ДатаСтрокиПредупреждения 
									+ "  " +Формат(-1 * НачальноеСальдоСправочно, "ЧДЦ=2") 
									+ ". Благодарим за своевременную оплату счетов!");
			Иначе
				ОбщиеДанные.Вставить("СтрокаПредупреждения", "Напоминаем, что на " 
			                    + ДатаСтрокиПредупреждения
								+ " вы не заплатили " + Формат(НачальноеСальдоСправочно, "ЧДЦ=2") + " за предыдущий период");
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		ДатаСтрокиПредупреждения = Формат(НачалоМесяца(ПериодПросмотра), "ДФ=dd.MM.yyyy");
		ВсегоНачислено           = ВсегоНачислено + СтрокаИтогов.НачисленоИтог;
	
		// Нахождение стоимости банковского перевода
		ОпределитьКассовыйСбор(ВсегоНачислено, ПараметрыОтчета);
		
		ВнесеноОплат = ДанныеОбОплатах.Итог("СуммаОплаты");
		ВсегоКОплате = РассчитатьСуммуВсегоКОплате(0, ВсегоНачислено, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), ПараметрыОтчета, Объект);
	
		ОбщиеДанные.Вставить("ВсегоКОплате",       Формат(ВсегоКОплате, "ЧДЦ=2; ЧН=-"));
		ОбщиеДанные.Вставить("ИтоговоеНачисление", Формат(СтрокаИтогов.НачисленоИтог, "ЧДЦ=2; ЧН=-"));
	КонецЕсли;
	
	ОбщиеДанные.Вставить("Задолженность",  НачальноеСальдо);
	ОбщиеДанные.Вставить("ИтогоНачислено", СтрокаИтогов.НачисленоИтог);
	
	СтруктОписание = ПараметрыОтчета.СтруктОписание;
	ОбщиеДанные.Вставить("ОбщаяПлощадь",          СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли",   СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КоличествоПроживающих", ?(ПараметрыОтчета.ВыводитьКоличествоПроживающих, "Кол-во прожив: " + СтруктОписание.КоличествоПроживающих, ""));
	
	// Скопируем таблицу счетчиков для заполнения количества в начислениях.
	ТаблицаСчетчиковДляЗаполненияНачислений = ТаблицаСчетчиков.Скопировать();
	ЗаполнитьНачисленияПоПоказаниямСчетчиков(ТаблицаСчетчиковДляЗаполненияНачислений, ТаблицаНачисления, Истина);

	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_12");
	
	// ИЗВЕЩЕНИЕ
	Если ПараметрыОтчета.мНастройкиФормированияПДЖКХ.ВидШтрихкода =
				ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.Одномерный") Тогда
		Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Иначе
		Область = Макет.ПолучитьОбласть("ИзвещениеШапкаQR");
	КонецЕсли;
	
	ПериодПени       = ДобавитьМесяц(ПараметрыОтчета.ПериодПросмотра, -1);
	МесяцСтрокойПени = НРег(Формат(ПериодПени, "ДФ=MMMM"));
	ГодПени          = Формат(Год(ПериодПени),"ЧГ=0");
	ОбщиеДанные.Вставить("ПериодПени",      "за " + МесяцСтрокойПени + " " + ГодПени);
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ОбщиеДанные.Вставить("ДатаОплаты", Формат(ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период, "ДФ=dd.MM.yyyy"));
	Иначе
		ОбщиеДанные.Вставить("ДатаОплаты", ДАТА("00010101"));
	КонецЕсли;
	
	ПодготовитьСтруктуры(Объект, ПараметрыОтчета, ОбщиеДанные, ПениНачислено, ТаблицаСчетчиков, СрокОплаты);
	УстановитьКартинкуШтрихкода(Область, Объект, ОбщиеДанные, ПараметрыОтчета);
	
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);

	// КВИТАНЦИЯ

	Область = Макет.ПолучитьОбласть("Разделитель");
	ДокументРезультат.Вывести(Область);

	Область = Макет.ПолучитьОбласть("ПустаяОбласть");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	тмДокумент = Новый ТабличныйДокумент;

	Область = Макет.ПолучитьОбласть("КвитанцияШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("СтрокаПредупреждения");
		Область.Параметры.Заполнить(ОбщиеДанные);
		тмДокумент.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("КвитанцияИнф");
	Область.Параметры.Заполнить(ОбщиеДанные);
	тмДокумент.Вывести(Область);

	ДокументРезультат.Присоединить(тмДокумент);
	
	тмДокумент.Очистить();

	Область = Макет.ПолучитьОбласть("КорешокШапка");
	тмДокумент.Вывести(Область);
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=0;";
	
	Если ТаблицаСчетчиков.Количество() > 0 Тогда
		Если ПараметрыОтчета.ВсегдаВыводитьПоказанияСчетчиков Тогда
			Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
				Область = Макет.ПолучитьОбласть("КорешокСчетчик");
				ТекСтрокаПараметры = Новый Структура("Абонент,СтрокаПоказаний");
				ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмДокумент.Вывести(Область);
				тмПоказания = Новый ТабличныйДокумент;
				Область = Макет.ПолучитьОбласть("КорешокПоказания");
				СтрокаПоказаний = "";
				СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата)
				                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата)
								 + "=" + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;

				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеНч) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата)
					                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата)
									 + "=" + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрСчетчиков.ПредыдущееПоказаниеПк) Тогда
					СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата)
					                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата)
									 + "=" + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
				КонецЕсли;
				ТекСтрокаПараметры.СтрокаПоказаний = СтрокаПоказаний;
				Область.Параметры.Заполнить(ТекСтрокаПараметры);
				тмПоказания.Вывести(Область);
				тмДокумент.Присоединить(тмПоказания);
			КонецЦикла;
		
		Иначе
			Если ТаблицаСчетчиков.Итог("РасходДн") <> 0 Или ТаблицаСчетчиков.Итог("РасходНч") <> 0 
				Или ТаблицаСчетчиков.Итог("РасходПк") <> 0 Тогда
				Для Каждого СтрСчетчиков Из ТаблицаСчетчиков Цикл
					Область = Макет.ПолучитьОбласть("КорешокСчетчик");
					ТекСтрокаПараметры = Новый Структура("Абонент,СтрокаПоказаний");
					ТекСтрокаПараметры.Абонент = СтрСчетчиков.Абонент;
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмДокумент.Вывести(Область);
					тмПоказания = Новый ТабличныйДокумент;
					Область = Макет.ПолучитьОбласть("КорешокПоказания");
					СтрокаПоказаний = "";
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходДн) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеДн, СтрокаФормата)
						                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеДн, СтрокаФормата)
										 + "=" + Формат(СтрСчетчиков.РасходДн, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходНч) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеНч, СтрокаФормата)
						                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеНч, СтрокаФормата)
										 + "=" + Формат(СтрСчетчиков.РасходНч, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					Если ЗначениеЗаполнено(СтрСчетчиков.РасходПк) Тогда
						СтрокаПоказаний = СтрокаПоказаний + Формат(СтрСчетчиков.ПредыдущееПоказаниеПк, СтрокаФормата)
						                 + "-" + Формат(СтрСчетчиков.ПредПредыдущееПоказаниеПк, СтрокаФормата)
										 + "=" + Формат(СтрСчетчиков.РасходПк, СтрокаФормата) + Символы.ПС;
					КонецЕсли;
					ТекСтрокаПараметры.СтрокаПоказаний = СтрокаПоказаний;
					Область.Параметры.Заполнить(ТекСтрокаПараметры);
					тмПоказания.Вывести(Область);
					тмДокумент.Присоединить(тмПоказания);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Область = Макет.ПолучитьОбласть("КорешокПодвал");
	тмДокумент.Вывести(Область);
	ДокументРезультат.Присоединить(тмДокумент);

	// НАЧИСЛЕНИЯ

	Область = Макет.ПолучитьОбласть("НачисленияШапка");
	ДокументРезультат.Вывести(Область);
	
	// Подготовка таблицы начислений к выводу
	УПЖКХ_ПечатьКвитанцийСервер.ПодготовитьТаблицуНачисленияКВыводу(ТаблицаНачисления, Объект, ПараметрыОтчета.мСтруктураНастроек, "Начислено, Льгота, Перерасчет, НачисленоИтог");
	
	//////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаНачисления);
	Запрос.УстановитьПараметр("ОбщиеУслуги", ПараметрыОтчета.ОбщийСписокУслуг.ВыгрузитьКолонку("Услуга"));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ИЗ
	|	ТЗ
	|ГДЕ
	|	ТЗ.Услуга В (&ОбщиеУслуги)";
	
	ТаблицаПрочие = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаНачисления);
	Запрос.УстановитьПараметр("УслугиКоммунальные", ПараметрыОтчета.УслугиКоммунальные.ВыгрузитьКолонку("Услуга"));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ИЗ
	|	ТЗ
	|ГДЕ
	|	ТЗ.Услуга В (&УслугиКоммунальные)";
	
	ТаблицаКоммунальные = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаНачисления);
	Запрос.УстановитьПараметр("УслугиСодержанияРемонта", ПараметрыОтчета.УслугиСодержанияРемонта.ВыгрузитьКолонку("Услуга"));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ *
	|ИЗ
	|	ТЗ
	|ГДЕ
	|	ТЗ.Услуга В (&УслугиСодержанияРемонта)";
	
	ТаблицаСодержание = Запрос.Выполнить().Выгрузить();
	
	//////////////////////////////////////////////////////////////////////////
	
	НаборЗаписей = РегистрыСведений.КВП_ВидыУслугДляЗаменыВКвитанции.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	ТаблицаВидовУслуг = НаборЗаписей.Выгрузить();
	ТаблицаВидовУслуг.Свернуть("ВидУслугиНовый");
	Для Каждого ТекВидУслуги Из ТаблицаВидовУслуг Цикл
		
		СтрокиВидаУслуги = ТаблицаНачисления.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
		
		СтрокиВидаУслуги = ТаблицаПрочие.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
		
		СтрокиВидаУслуги = ТаблицаКоммунальные.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
		
		СтрокиВидаУслуги = ТаблицаСодержание.НайтиСтроки(Новый Структура("ВидУслуги", ТекВидУслуги.ВидУслугиНовый));
		Для Каждого СтрокаВидаУслуги Из СтрокиВидаУслуги Цикл
			СтрокаВидаУслуги.УслугаСпособРасчета = СтрокиВидаУслуги.Получить(0).УслугаСпособРасчета;
		КонецЦикла;
		
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("НачисленияСодержание");
	ДокументРезультат.Вывести(Область);
	
	СтрокаФормата = "ЧДЦ=" + Строка(ПараметрыОтчета.мТочностьОбъемаНачислений) + "; ЧН=-;";
	
	Для Каждого СтрокаТаблицы Из ТаблицаСодержание Цикл
		Область = Макет.ПолучитьОбласть("НачисленияСтрока");
		Область.Параметры.Заполнить(СтрокаТаблицы);
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("НачисленияКоммунальные");
	ДокументРезультат.Вывести(Область);
	Для Каждого СтрокаТаблицы Из ТаблицаКоммунальные Цикл
		Область = Макет.ПолучитьОбласть("НачисленияСтрока");
		Область.Параметры.Заполнить(СтрокаТаблицы);
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("НачисленияПрочие");
	ДокументРезультат.Вывести(Область);
	Для Каждого СтрокаТаблицы Из ТаблицаПрочие Цикл
		Область = Макет.ПолучитьОбласть("НачисленияСтрока");
		Область.Параметры.Заполнить(СтрокаТаблицы);
		
		СписокФорматируемыхПараметров = Новый СписокЗначений;
		СписокФорматируемыхПараметров.Добавить("НормаПоказания");
		
		ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата);
		
		ДокументРезультат.Вывести(Область);
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	Область.Параметры.Заполнить(СтрокаИтогов);
	ДокументРезультат.Вывести(Область);

	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);

	Область = Макет.ПолучитьОбласть("ПустаяСтрока1");
	ДокументРезультат.Вывести(Область);
	
	ДокументРезультатДляВозврата = ДокументРезультат;
	
КонецПроцедуры // СформироватьФорма12()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма13(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	// (1) Сбор информации.

	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;

	СтруктАдрес = ПолучитьАдрес(ТекЗдание, Перечисления.КВП_ВидыАдресов.Здание);
	СтруктАдрес.Регион   = "";
	СтруктАдрес.Район    = "";
	СтруктАдрес.Город    = "";
	СтруктАдрес.Индекс   = "";
	АдресДома = УПЖКХ_ТиповыеМетодыСервер.ПолучитьПредставлениеАдресаДляПФР(СтруктАдрес);
		
	Владелец = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	Если Не ЗначениеЗаполнено(Владелец) Тогда
		Владелец = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект, ПараметрыОтчета.ПериодПросмотра);
	КонецЕсли;
	
	СтруктОписание   = ПараметрыОтчета.СтруктОписание;
	ТипСобственности = СтруктОписание.ТипСобственностиКвартиры;
	КолВоЖильцов     = "Количество жильцов: " + СтруктОписание.КоличествоПроживающих;
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	
	ОбщиеДанные.Вставить("ПолучательПлатежа",   ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация));
	
	ТаблицаРСЗдания = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуРасчетныхСчетовЗданий(ПараметрыОтчета.ПериодПросмотра, ПараметрыОтчета.Организация, Объект.Адрес.Владелец);
	СтрокаЗдания = ТаблицаРСЗдания[0];
	
	НомерСчета = СтрокаЗдания.РасчетныйСчет;
	Банк       = СтрокаЗдания.Банк.Наименование;
	КоррСчет   = СтрокаЗдания.КоррСчет;
	БИК        = СтрокаЗдания.БИК;
	
	ОбщиеДанные.Вставить("РС",                  СокрЛП(НомерСчета));
	ОбщиеДанные.Вставить("Банк",                Банк);
	ОбщиеДанные.Вставить("КС",                  СокрЛП(КоррСчет));
	ОбщиеДанные.Вставить("БИК",                 СокрЛП(БИК));
	
	ОбщиеДанные.Вставить("ИНН",                 ПараметрыОтчета.Организация.ИНН);
	ОбщиеДанные.Вставить("ОбщаяПлощадь",        СтруктОписание.ОбщаяПлощадь);
	ОбщиеДанные.Вставить("ОбщаяПлощадьБезДоли", СтруктОписание.ОбщаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("ЖилаяПлощадь",        СтруктОписание.ЖилаяПлощадь);
	ОбщиеДанные.Вставить("ЖилаяПлощадьБезДоли", СтруктОписание.ЖилаяПлощадьБезДоли);
	ОбщиеДанные.Вставить("КолВоЖильцов",        КолВоЖильцов);
	ОбщиеДанные.Вставить("ТипСобственности",    ТипСобственности);
	ОбщиеДанные.Вставить("ФИО",                 Владелец);
	ОбщиеДанные.Вставить("Адрес",               АдресДома + ", " + Объект.Адрес);
	ОбщиеДанные.Вставить("ЛицевойСчет",         Сред(Объект.Наименование,6));
	ОбщиеДанные.Вставить("ИдентификаторЛС",     Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",               Объект.Код);
	ОбщиеДанные.Вставить("Период",              Формат(ПараметрыОтчета.ПериодПросмотра, "ДФ='MMMM yyyy'") + " г.");
	
	// Получение информации о начислениях на текущий лицевой счет за
	// текущий месяц по услугам и итоговое.
	ТаблицаНачисления.Колонки.Добавить("Тариф",          Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	ТаблицаНачисления.Колонки.Добавить("ИтогоНачислено", Новый ОписаниеТипов("Число"));	
	ТаблицаНачисления.Колонки.Добавить("РазмерНормы",    Новый ОписаниеТипов("Число"));	
	
	Для Каждого СтрокаТаблицы Из ТаблицаНачисления Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Услуга) Тогда
			СтрокаТаблицы.ИтогоНачислено = СтрокаТаблицы.Начислено - СтрокаТаблицы.Льгота;
		КонецЕсли;	
	КонецЦикла;	

	СтрокаИтогов = ТаблицаНачисления.Получить(0);
	
	ВсегоНачислено  = ПениНачислено;
	ВнесеноОплат    = ДанныеОбОплатах.Итог("СуммаОплаты");
	
	Если ДанныеОбОплатах.Количество() > 0 Тогда
		ДатаПоследнейОплаты = ДанныеОбОплатах.Получить(ДанныеОбОплатах.Количество() - 1).Период;
	КонецЕсли;	
	ОбщиеДанные.Вставить("ДатаПослОплаты", Формат(ДатаПоследнейОплаты ,"ДФ=dd.MM.yyyy"));
	
	ВсегоКОплате = ВсегоНачислено + СтрокаИтогов.КОплате;

	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		НачальноеСальдо = СтруктураНачСальдо["НачальноеСальдо"];
		ОбработатьНачальноеСальдо(ВсегоКОплате, Объект, ВнесеноОплат, ДанныеОбОплатах.Итог("Предоплата"), НачальноеСальдо, ПараметрыОтчета);
		ОбщиеДанные.Вставить("НачальноеСальдо", НачальноеСальдо);
	Иначе
		НачальноеСальдо = 0;
		ОбщиеДанные.Вставить("НачальноеСальдо", 0);
	КонецЕсли;
		
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда 
		Процент = ПараметрыОтчета.ПроцентЗаУслугиБанка / 100;
	 	ИтогоКОплате = ВсегоКОплате + СтрокаИтогов.КОплате * Процент;
	Иначе
		ИтогоКОплате = ВсегоКОплате;
	КонецЕсли;
	
	Если ИтогоКОплате < 0 Тогда
		ИтогоКОплате = Формат(0, "ЧН = 0");
	КонецЕсли;	

    ОбщиеДанные.Вставить("ИтогоКОплате", Формат(ИтогоКОплате, "ЧДЦ = 2"));		
		
	// (2) Вывод информации.

	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Отчет.КВП_КвитанцииИзвещения.ПФ_MXL_Макет_13");
	
	СтруктураПараметровМакета = Новый Структура("Пени,ИтогоНачисленоСумма,КомиссияБанка,ОплатаСКомиссией,ИтогоКОплате,ДатаВыдачи");
	СтруктураПараметровМакета.Пени                = ПениНачислено;
	СтруктураПараметровМакета.ИтогоНачисленоСумма = ТаблицаНачисления.Итог("ИтогоНачислено");
	СтруктураПараметровМакета.КомиссияБанка       = Неопределено;
	СтруктураПараметровМакета.ОплатаСКомиссией    = Неопределено;
	СтруктураПараметровМакета.ИтогоКОплате        = Формат(ИтогоКОплате, "ЧДЦ = 2");
	СтруктураПараметровМакета.ДатаВыдачи          = "Дата выдачи: " + Формат(ТекущаяДата(), "ДФ='dd MMMM yyyy'") + " г.";
	
	// ИЗВЕЩЕНИЕ

	Область = Макет.ПолучитьОбласть("ИзвещениеШапка");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьНачальноеСальдо Тогда
		Область = Макет.ПолучитьОбласть("ОбластьСальдо");
		Область.Параметры.Заполнить(ОбщиеДанные);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ШтрихкодОплачено");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ОбщиеДанные.ИтогоКОплате = Формат(ИтогоКОплате, "ЧДЦ = 2");
	
	Область = Макет.ПолучитьОбласть("ОбщиеДанные");
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ПриставкаОбласти = "";
	Область = Макет.ПолучитьОбласть("НачисленияШапка" + ПриставкаОбласти);
	Область.Параметры.Заполнить(ОбщиеДанные);
	ДокументРезультат.Вывести(Область);
	
	ВывестиТаблицуНачислений(ДокументРезультат, Макет, ТаблицаНачисления, ДанныеоФактЗатратах, СтруктОписание, Объект, ПриставкаОбласти, ПараметрыОтчета, "Начислено, Льгота, ИтогоНачислено, Перерасчет, КОплате");

	Если НЕ ПениНачислено = 0 Тогда
		Область = Макет.ПолучитьОбласть("ОбластьПени");
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;

	СтрокаИтогов.КОплате = СтрокаИтогов.КОплате + ПениНачислено;
	
	Область = Макет.ПолучитьОбласть("НачисленияПодвал");
	
	Область.Параметры.Заполнить(СтрокаИтогов);
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	Если ПараметрыОтчета.ВыводитьПроцентЗаУслугиБанка Тогда
		Область = Макет.ПолучитьОбласть("ПлатежКомиссия");
		СтруктураПараметровМакета.КомиссияБанка		= ТаблицаНачисления.Получить(0).КОплате * Процент;
		СтруктураПараметровМакета.ОплатаСКомиссией	= ТаблицаНачисления.Получить(0).КОплате + ТаблицаНачисления.Получить(0).КОплате * Процент;
		Область.Параметры.Заполнить(СтруктураПараметровМакета);
		ДокументРезультат.Вывести(Область);
	КонецЕсли;	
	
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.Заполнить(СтруктураПараметровМакета);
	ДокументРезультат.Вывести(Область);
	
	// ПРИМЕЧАНИЕ
	ВывестиПримечание(ДокументРезультат, Макет, ПараметрыОтчета);
	
	Область = Макет.ПолучитьОбласть("ПустаяСтрока");
	ДокументРезультат.Вывести(Область);
		
КонецПроцедуры // СформироватьОтчет()

// Выполняет запрос и формирует табличный документ-результат отчета
// в соответствии с настройками, заданными значениями реквизитов отчета.
//
// Параметры:
//  ДокументРезультат - табличный документ, формируемый отчетом
//
Процедура СформироватьФорма14(Объект, ДокументРезультат, ДанныеОбОплатах, ТаблицаСчетчиков, ТаблицаНачисления, СубсидийНачислено,
							ПениНачислено, СтруктураНачСальдо, ДанныеоФактЗатратах, ПоказыватьЗаголовок = Истина, ВысотаЗаголовка = 0, ПараметрыОтчета)

	мСведенияСчетчиков = ИнициализироватьСведенияСчетчиков();
	
	ПараметрыОтчета.Вставить("мСведенияСчетчиков", мСведенияСчетчиков);
	
	// (1) Сбор информации.

	// Определяем текущее здание через текущий лицевой счет
	ТекЗдание = Объект.Адрес.Владелец;

	СтруктАдрес = ПолучитьАдрес(ТекЗдание, Перечисления.КВП_ВидыАдресов.Здание);
	СтруктАдрес.Регион   = "";
	СтруктАдрес.Район    = "";
	СтруктАдрес.Город    = "";
	СтруктАдрес.Индекс   = "";
	АдресДома = УПЖКХ_ТиповыеМетодыСервер.ПолучитьПредставлениеАдресаДляПФР(СтруктАдрес);

	Владелец              = ПолучитьВладельцаОбъекта(Объект, КонецМесяца(ПараметрыОтчета.ПериодПросмотра), ПараметрыОтчета.Организация);
	СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.ПериодПросмотра);
	ОтветственныеЛица     = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(ПараметрыОтчета.Организация, ТекущаяДата());
	СведенияОбОрганизации.Представление = ПолучитьНаименованиеОрганизации(ПараметрыОтчета.Организация);
	
	// Структура с параметрами для заголовков извещения и квитанции
	ОбщиеДанные = Новый Структура();
	ОбщиеДанные.Вставить("СведенияОбОрганизации", СведенияОбОрганизации); 
	
	// Т.к. в квитанциях извещениях не предусмотрена печать отдельной квитанции на капремонт,
	// то признак "КвитанцияНаКР" всегда принимает значение "Ложь".
	ОбщиеДанные.Вставить("КвитанцияНаКР", Ложь);
	
	ОбщиеДанные.Вставить("ФИО",             Владелец);
	ОбщиеДанные.Вставить("АдресДома",       АдресДома);
	ОбщиеДанные.Вставить("Квартира",        СтрЗаменить(Объект.Адрес, "Кв. ", ""));
	ОбщиеДанные.Вставить("Адрес",           АдресДома + " " + Объект.Адрес);
	ОбщиеДанные.Вставить("ПериодОплаты",    КонецМесяца(КонецМесяца(ПараметрыОтчета.ПериодПросмотра) + 1));
	ОбщиеДанные.Вставить("МесяцОплаты",     ПараметрыОтчета.ПериодПросмотра);
	ОбщиеДанные.Вставить("ЛицевойСчет",     Объект.Наименование);
	ОбщиеДанные.Вставить("ИдентификаторЛС", Объект.Идентификатор);
	ОбщиеДанные.Вставить("КодЛС",           Объект.Код);
	ОбщиеДанные.Вставить("ДополнительныеКонтакты", ПолучитьДополнительныеКонтакты(ПараметрыОтчета));
	ОбщиеДанные.Вставить("Руководитель",           ОтветственныеЛица.Руководитель);
	ОбщиеДанные.Вставить("Телефон",                УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(ПараметрыОтчета.Организация, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации));
	
	// Обработка информации о начислениях на текущий лицевой счет.
	ТаблицаНачисления.Колонки.Добавить("Тариф", Новый ОписаниеТипов("Число"));
	
	ПолучитьПредыдущиеДанные(Объект, ПараметрыОтчета, ОбщиеДанные);
	
	ОбщиеДанные.Вставить("СуммаПени", ПениНачислено);
	
	// В квитанции счетчики не выводятся, но используются для получения расхода по начислениям.
	ЗаполнитьНачисленияПоПоказаниямСчетчиков(ТаблицаСчетчиков, ТаблицаНачисления);
	
	СуммаОплатыОстаткаПоРассрочке = ДанныеОбОплатах.Итог("СуммаОплатыОстаткаПоРассрочке");
	ОбщиеДанные.Вставить("СуммаОплатыОстаткаПоРассрочке", СуммаОплатыОстаткаПоРассрочке);
	
	ВывестиНачисленияПоказания(ДокументРезультат, ТаблицаНачисления, ТаблицаСчетчиков, Объект, СведенияОбОрганизации, ОбщиеДанные, ПараметрыОтчета, ДанныеОбОплатах, ПениНачислено);
	
КонецПроцедуры // СформироватьФорма14()

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Производит начальное заполнение параметров отчета.
//
// Параметры:
//  Нет
//
Процедура ИнициализацияРеквизитов(Отчет) Экспорт

	Если Не Отчет.НеЗаполнятьНастройкиПриОткрытии Тогда

		СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_КВП_КвитанцииИзвещения");
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда

			ТаблицаУслуг = Новый ТаблицаЗначений;
			СтруктураПараметров.Свойство("Банк",                             Отчет.Банк);
			СтруктураПараметров.Свойство("БанковскийСчет",                   Отчет.БанковскийСчет);
			Если НЕ ЗначениеЗаполнено(Отчет.ОбъектОтчета) Тогда
				СтруктураПараметров.Свойство("Объект",                       Отчет.ОбъектОтчета);
			КонецЕсли;
			СтруктураПараметров.Свойство("Организация",                       Отчет.Организация);
			СтруктураПараметров.Свойство("ПолучательПлатежа",                 Отчет.ПолучательПлатежа);
			СтруктураПараметров.Свойство("ВключатьКассовыйСбор",              Отчет.ВключатьКассовыйСбор);
			СтруктураПараметров.Свойство("ВыводитьЗависимыеУслуги",           Отчет.ВыводитьЗависимыеУслуги);
			СтруктураПараметров.Свойство("ВыводитьПроцентЗаУслугиБанка",      Отчет.ВыводитьПроцентЗаУслугиБанка);
			СтруктураПараметров.Свойство("ПроцентЗаУслугиБанка",              Отчет.ПроцентЗаУслугиБанка);
			СтруктураПараметров.Свойство("ВключениеНачальнойЗадолженности",   Отчет.ВключениеНачальнойЗадолженности);
			СтруктураПараметров.Свойство("ВыводитьПоДвеКвитанции",            Отчет.ВыводитьПоДвеКвитанции);
			СтруктураПараметров.Свойство("КоличествоСтрокТаблицыНачислений",  Отчет.КоличествоСтрокТаблицыНачислений);
			СтруктураПараметров.Свойство("ВариантСортировки",                 Отчет.ВариантСортировки);
			СтруктураПараметров.Свойство("ПериодДолга",                       Отчет.ПериодДолга);
			СтруктураПараметров.Свойство("НеПечататьНулевыеКвитанции",        Отчет.НеПечататьНулевыеКвитанции);
			СтруктураПараметров.Свойство("ВыводитьНачальноеСальдо",           Отчет.ВыводитьНачальноеСальдо);
			СтруктураПараметров.Свойство("ВыводитьКоличествоПроживающих",     Отчет.ВыводитьКоличествоПроживающих);
			СтруктураПараметров.Свойство("ДетализироватьНачисления", 		  Отчет.ДетализироватьНачисления);
			СтруктураПараметров.Свойство("ВсегдаВыводитьПоказанияСчетчиков",  Отчет.ВсегдаВыводитьПоказанияСчетчиков);
			СтруктураПараметров.Свойство("ВыводитьПоОднойКвитанции",          Отчет.ВыводитьПоОднойКвитанции);
			СтруктураПараметров.Свойство("ВыводитьОтрицательнуюСуммуКОплате", Отчет.ВыводитьОтрицательнуюСуммуКОплате);
			
			СтруктураПараметров.Свойство("ОбщийСписокУслуг",                  ТаблицаУслуг);
			Если ЗначениеЗаполнено(ТаблицаУслуг) > 0 Тогда
				ТаблицаУслуг = Отчеты.КВП_КвитанцииИзвещения.ИсключитьУдаленныеУслуги(ТаблицаУслуг);
				Отчет.ОбщийСписокУслуг.Загрузить(ТаблицаУслуг);
			КонецЕсли;
			
			СтруктураПараметров.Свойство("УслугиКоммунальные",              ТаблицаУслуг);
			Если ЗначениеЗаполнено(ТаблицаУслуг) > 0 Тогда
				ТаблицаУслуг = Отчеты.КВП_КвитанцииИзвещения.ИсключитьУдаленныеУслуги(ТаблицаУслуг);
				Отчет.УслугиКоммунальные.Загрузить(ТаблицаУслуг);
			КонецЕсли;
			
			СтруктураПараметров.Свойство("УслугиСодержанияРемонта",         ТаблицаУслуг);
			Если ЗначениеЗаполнено(ТаблицаУслуг) > 0 Тогда
				ТаблицаУслуг = Отчеты.КВП_КвитанцииИзвещения.ИсключитьУдаленныеУслуги(ТаблицаУслуг);
				Отчет.УслугиСодержанияРемонта.Загрузить(ТаблицаУслуг);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Отчет.ВариантСортировки) Тогда
			ВариантСортировки = "Квартира";
		КонецЕсли;
		
		//Если Отчет.Организация.Пустая() Тогда
		//	Отчет.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
		//КонецЕсли;
		Если Отчет.Банк.Пустая() Тогда
			Отчет.Банк = Отчет.Организация.ОсновнойБанковскийСчет.Банк;
		КонецЕсли;
		Если Отчет.БанковскийСчет.Пустая() Тогда
			Отчет.БанковскийСчет = Отчет.Организация.ОсновнойБанковскийСчет;
		КонецЕсли;
		Если Отчет.КоличествоСтрокТаблицыНачислений = 0 Тогда
			Отчет.КоличествоСтрокТаблицыНачислений = 13;
		КонецЕсли;
		
		Отчет.ПериодПросмотра = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();

	КонецЕсли;

КонецПроцедуры // ИнициализацияРеквизитов()

Функция ИсключитьУдаленныеУслуги(ТаблицаУслуг) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ ТЗ.Услуга ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТаблицаУслуг);
	Запрос.Выполнить();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗ КАК ТЗ
	|		ПО КВП_Услуги.Ссылка = ТЗ.Услуга";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьУдаленныеУслуги

// Возвращает порядок услуг для заполнения квитанции.
Функция ЗаполнитьПорядокУслугВКвитанции() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ПорядокУслугВКвитанции.ВидУслуги,
	|	КВП_ПорядокУслугВКвитанции.Порядок КАК Порядок
	|ИЗ
	|	РегистрСведений.КВП_ПорядокУслугВКвитанции КАК КВП_ПорядокУслугВКвитанции
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Записывает порядок услуг в регистр сведений.
Процедура ЗаписатьПорядокУслугВКвитанции(СписокУслуг) Экспорт
	
	НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
	
	Индекс = 0;
	Для Каждого Услуга Из СписокУслуг Цикл
		
		Индекс = Индекс + 1;
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.ВидУслуги = Услуга.ВидУслуги;
		СтрокаНабора.Порядок = Индекс;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Возвращает все услуги из справочника КВП_Услуги.
Функция ПолучитьВсеУслуги() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ЭтоГруппа = ЛОЖЬ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет значение переменной структуру настроек, предназначенную для
// передачи во внешние модули
//
Процедура СформироватьСтруктуруНастроек(ПараметрыОтчета) Экспорт
	
	мСтруктураНастроек = Новый Структура;
	мСтруктураНастроек.Вставить("НастройкиУчетнойПолитикиТСЖ", ПараметрыОтчета.мНастройкиУчетнойПолитикиТСЖ);
	мСтруктураНастроек.Вставить("НастройкиФормированияПДЖКХ",  ПараметрыОтчета.мНастройкиФормированияПДЖКХ);
	мСтруктураНастроек.Вставить("ПериодПросмотра",             ПараметрыОтчета.ПериодПросмотра);
	мСтруктураНастроек.Вставить("Организация",                 ПараметрыОтчета.Организация);
	
	ПараметрыОтчета.Вставить("мСтруктураНастроек", мСтруктураНастроек);
	
КонецПроцедуры // СформироватьСтруктуруНастроек()

// Проверяет наличие реквизита объекта.
//
// Параметры:
//   Объект - объект.
//   ИмяРеквизита - Имя проверяемого реквизита объекта.
//
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции // ЕстьРеквизитОбъекта()

// Форматирует параметры области в соответствии с заданным форматом.
Процедура ОтформатироватьПараметрыОбласти(Область, СписокФорматируемыхПараметров, СтрокаФормата) Экспорт
	Если Область.Параметры.Количество() > 0 Тогда
		Для Каждого ФорматируемыйПараметр Из СписокФорматируемыхПараметров Цикл
			Если ЕстьРеквизитОбъекта(Область.Параметры, ФорматируемыйПараметр.Значение) Тогда
				
				// Попытка добавлена для обработки ситуации, когда вместо числа в форматируемом параметре оказывается строка.
				// Например в форме_09 для параметра "НормаПоказания".
				Попытка
					Область.Параметры[ФорматируемыйПараметр.Значение] = Число(Область.Параметры[ФорматируемыйПараметр.Значение]);
				Исключение
				КонецПопытки;
				
				Область.Параметры[ФорматируемыйПараметр.Значение] = Формат(Область.Параметры[ФорматируемыйПараметр.Значение], СтрокаФормата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура корректирует сумму оплаты для вывода в зависимости от настройки
// "ВыводитьОтрицательнуюСуммуКОплате".
Процедура СкорректироватьСуммуКОплате(ВсегоКОплате) Экспорт
	
	//Если ВсегоКОплате < 0 И НЕ ВыводитьОтрицательнуюСуммуКОплате Тогда
	//	ВсегоКОплате = 0;
	//КонецЕсли;
	
КонецПроцедуры // СкорректироватьСуммуКОплате()

#КонецЕсли