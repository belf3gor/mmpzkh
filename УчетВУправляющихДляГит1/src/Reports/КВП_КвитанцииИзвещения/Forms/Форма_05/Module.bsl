&НаКлиенте
Перем ПараметрыОбработчикаОжидания; // Хранит параметры обработчика ожидания.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Производит сохранение параметров отчета.
//
Процедура СохранениеРеквизитов()
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("Банк",                              Отчет.Банк);
	СтруктураПараметров.Вставить("Объект",                            Отчет.ОбъектОтчета);
	СтруктураПараметров.Вставить("Организация",                       Отчет.Организация);
	СтруктураПараметров.Вставить("ВключатьКассовыйСбор",              Отчет.ВключатьКассовыйСбор);
	СтруктураПараметров.Вставить("ВариантСортировки",                 Отчет.ВариантСортировки);
	СтруктураПараметров.Вставить("НеПечататьНулевыеКвитанции",        Отчет.НеПечататьНулевыеКвитанции);
	СтруктураПараметров.Вставить("ВыводитьНачальноеСальдо", 		  Отчет.ВыводитьНачальноеСальдо);
	СтруктураПараметров.Вставить("ВключениеНачальнойЗадолженности",   Отчет.ВключениеНачальнойЗадолженности);
	СтруктураПараметров.Вставить("ВыводитьПоОднойКвитанции",          Отчет.ВыводитьПоОднойКвитанции);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыОтчета_КВП_КвитанцииИзвещения",,
																	СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
// Процедура записывает порядок услуг в регистр сведений.
Процедура ЗаписатьПорядокУслуг()
	
	Отчеты.КВП_КвитанцииИзвещения.ЗаписатьПорядокУслугВКвитанции(ПорядокУслугВКвитанции.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
// Управляет видимостью элементов формы.
Процедура УстановитьВидимость()
	
	Элементы.ВключениеНачальнойЗадолженности.Видимость = (Отчет.ВыводитьНачальноеСальдо);
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Попытка
		
		ПорядокУслугВКвитанции.Загрузить(Отчеты.КВП_КвитанцииИзвещения.ЗаполнитьПорядокУслугВКвитанции());
		
		Параметры.Свойство("СформироватьПриОткрытии", СформироватьПриОткрытии);
		Параметры.Свойство("ОбъектОтчета",            Отчет.ОбъектОтчета);
		
		Отчет.СписокФормКвитанций = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
		Отчеты.КВП_КвитанцииИзвещения.ИнициализацияРеквизитов(Отчет);
		
		УправлениеФормой(ЭтаФорма);
		
		УПЖКХ_ТиповыеМетодыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
		
		// Устанавливаем организацию из параметров формы, если при смене организации открывается её основная квитанция.
		Если Параметры.Свойство("Организация") И ЗначениеЗаполнено(Параметры.Организация) Тогда
			Отчет.Организация = Параметры.Организация;
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	

	Попытка
		
		Период = Формат(Отчет.ПериодПросмотра,"ДФ=""ММММ гггг""");
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек,
																				Элементы.ГруппаПанельНастроек.Видимость);
		
		УстановитьВидимость();
		
		Если СформироватьПриОткрытии Тогда
			СформироватьОтчет(Команды.СформироватьОтчет);
		КонецЕсли;
		
		ТекущаяФормаКвитанции = Отчет.СписокФормКвитанций.НайтиПоЗначению("05");
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриЗакрытии" формы.
Процедура ПриЗакрытии()
	
	Попытка
		
		ОтменитьВыполнениеЗаданияНаСервере();
		
		ЗаписатьПорядокУслуг();
		
		СохранениеРеквизитов();
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при сохранении настроек на сервере.
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура возникает при загрузке настроек на сервере.
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
		
		УправлениеФормой(ЭтаФорма);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Отчет.ПериодПросмотра", "Период", Модифицированность);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Отчет.ПериодПросмотра", "Период",
															Направление, Модифицированность);
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Отчет.ПериодПросмотра", "Период");
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Попытка
		
		УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Попытка
		
		БанковскийСчет = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Организация, "ОсновнойБанковскийСчет");
		Отчет.Банк = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(БанковскийСчет, "Банк");
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
		СменитьКвитанциюПриИзмененииОрганизации();
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОбъектОтчета".
Процедура ОбъектОтчетаПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ПАНЕЛЬ НАСТРОЕК

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПорядокУслугВКвитанции".
Процедура ПорядокУслугВКвитанцииПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьНачальноеСальдо".
Процедура ВыводитьНачальноеСальдоПриИзменении(Элемент)
	
	Попытка
		
		УстановитьВидимость();
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВключениеНачальнойЗадолженности".
Процедура ВключениеНачальнойЗадолженностиПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыводитьПоОднойКвитанции".
Процедура ВыводитьПоОднойКвитанцииПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантСортировки".
Процедура ВариантСортировкиПриИзменении(Элемент)
	
	Попытка
		
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ РЕЗУЛЬТАТА

&НаКлиенте
// Обработчик события "ОбработкаДополнительнойРасшифровки" поля "Результат".
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды "СформироватьОтчет".
Процедура СформироватьОтчет(Команда)
	
	ОчиститьСообщения();
	
	Попытка
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		
		РезультатВыполнения = СформироватьОтчетНаСервере();
		Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда		
			УПЖКХ_ТиповыеМетодыКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		КонецЕсли;
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПанельНастроек".
Процедура ПанельНастроек(Команда)
	
	Попытка
		
		Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек,
																				Элементы.ГруппаПанельНастроек.Видимость);
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СменитьКвитанцию".
//
Процедура СменитьКвитанцию(Команда)
	
	Отчет.СписокФормКвитанций = УПЖКХ_ПечатьКвитанцийСервер.СформироватьСписокФормКвитанции();
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборФормыКвитанции", ЭтотОбъект, Новый Структура);
	
	Отчет.СписокФормКвитанций.ПоказатьВыборЭлемента(ОповещениеОВыборе, "Сменить квитанцию", Отчет.СписокФормКвитанций.НайтиПоЗначению("05"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
// Процедура проверяет, выполнено ли задание.
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
// Процедура отменяет выполнение задания.
Процедура ОтменитьВыполнениеЗаданияНаСервере()
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
// Процедура готовит параметры на сервере.
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Банк"							   , Отчет.Банк);
	ПараметрыОтчета.Вставить("ПериодПросмотра"				   , Отчет.ПериодПросмотра);
	ПараметрыОтчета.Вставить("Организация"					   , Отчет.Организация);
	ПараметрыОтчета.Вставить("ОбъектОтчета"					   , Отчет.ОбъектОтчета);
	ПараметрыОтчета.Вставить("ВариантСортировки"			   , Отчет.ВариантСортировки);
	ПараметрыОтчета.Вставить("ВыводитьНачальноеСальдо"		   , Отчет.ВыводитьНачальноеСальдо);
	ПараметрыОтчета.Вставить("НеПечататьНулевыеКвитанции"	   , Отчет.НеПечататьНулевыеКвитанции);
	ПараметрыОтчета.Вставить("ВключениеНачальнойЗадолженности" , Отчет.ВключениеНачальнойЗадолженности);
	ПараметрыОтчета.Вставить("ВключатьКассовыйСбор"			   , Отчет.ВключатьКассовыйСбор);
	ПараметрыОтчета.Вставить("ВыводитьПоОднойКвитанции"		   , Отчет.ВыводитьПоОднойКвитанции);
	ПараметрыОтчета.Вставить("КассовыйСборБанка"			   , 3);
	ПараметрыОтчета.Вставить("Форма"						   , "05");
	ПараметрыОтчета.Вставить("ВидЗапроса"					   , "форма_05");
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
// Функция формирует отчет на сервере.
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ЗаписатьПорядокУслуг();
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	УПЖКХ_ТиповыеМетодыСервер.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_КвитанцииИзвещения.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_КвитанцииИзвещения.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Отчет    = Форма.Отчет;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

&НаСервере
// Процедура загружает подготовленные данные на сервере.
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедуры проверяет выполнение задания.
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Выводит пользователю сообщение об ошибке.
Процедура ВывестиСообщениеОбОшибке()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Квитанция неработоспособна. Возможно, требуется адаптация к актуальному релизу программы.
					  |Обратитесь за помощью к разработчикам: clients@vdgb-soft.ru";
	
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает основную форму квитанции выбранной организации.
//
Процедура СменитьКвитанциюПриИзмененииОрганизации()
	
	мНастройкиФормированияПДЖКХОтказ = Ложь;
	мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Отчет.Организация,
																								 мНастройкиФормированияПДЖКХОтказ);
	
	Если НЕ мНастройкиФормированияПДЖКХотказ Тогда
		ОсновнаяФормаКвитанцииОрганизации = мНастройкиФормированияПДЖКХ.ФормаКвитанции;
		
		ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено;
		Если ОсновнаяФормаКвитанцииОрганизации <> ВидМакета Тогда
			ДопПараметры = Новый Структура;
			Если Не ТипЗнч(ОсновнаяФормаКвитанцииОрганизации) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
				// Поиск формы квитанции в списке квитанций по представлению.
				Для Каждого ФормаКвитанции Из Отчет.СписокФормКвитанций Цикл
					Если ФормаКвитанции.Представление = ОсновнаяФормаКвитанцииОрганизации Тогда
						ОсновнаяФормаКвитанцииОрганизацииВСписке = ФормаКвитанции;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ОсновнаяФормаКвитанцииОрганизацииВСписке = Отчет.СписокФормКвитанций.НайтиПоЗначению("Внешний отчет");
				ДопПараметры.Вставить("ВнешнийОтчет", ОсновнаяФормаКвитанцииОрганизации);
			КонецЕсли;
			
			Если Не ОсновнаяФормаКвитанцииОрганизацииВСписке = Неопределено Тогда
				ДопПараметры.Вставить("ОсновнаяФормаКвитанцииОрганизации", ОсновнаяФормаКвитанцииОрганизацииВСписке);
				ОповещениеОВыбореОтвета = Новый ОписаниеОповещения("ОбработатьСменуКвитанцииПриИзмененииОрганизации", ЭтотОбъект, ДопПараметры);
				ТекстВопроса = "Сменить квитанцию на """
							+ ОсновнаяФормаКвитанцииОрганизации
							+ """, которая является основной квитанцией для организации "
							+ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Отчет.Организация, "НаименованиеСокращенное") + "?";
				ПоказатьВопрос(ОповещениеОВыбореОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СменитьКвитанциюПриИзмененииОрганизации()

&НаКлиенте
// Процедура обрабатывает изменение квитанции в случае смены организации в квитанции в соответствии с ответом пользователя.
//
Процедура ОбработатьСменуКвитанцииПриИзмененииОрганизации(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ДопПараметры = Новый Структура;
		Если ДополнительныеПараметры.Свойство("ВнешнийОтчет") Тогда
			ОбработкаОткрытияВнешнейКвитанции(ДополнительныеПараметры.ВнешнийОтчет, ДопПараметры);
		Иначе
			ДопПараметры.Вставить("ИзменитьОрганизацию", Истина);
			ОбработатьВыборФормыКвитанции(ДополнительныеПараметры.ОсновнаяФормаКвитанцииОрганизации, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСменуКвитанцииПриИзмененииОрганизации()

&НаКлиенте
// Открывает при необходимости выбранную пользователем форму квитанции.
//
Процедура ОбработатьВыборФормыКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если ВыбраннаяКвитанция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяКвитанция.Значение = ТекущаяФормаКвитанции Тогда
		Возврат;
	ИначеЕсли ВыбраннаяКвитанция.Значение = "Внешний отчет" Тогда
		Попытка
			ОтборПоВиду = Новый СписокЗначений;
			ДополнительныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет");
			ОтборПоВиду.Добавить(ДополнительныйОтчет, ДополнительныйОтчет);
			
			ПараметрыОткрытияФормы = Новый Структура;
			ПараметрыОткрытияФормы.Вставить("Отбор",       Новый Структура("Вид", ОтборПоВиду));
			ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработкаОткрытияВнешнейКвитанции", ЭтотОбъект);
			
			ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора", ПараметрыОткрытияФормы,,,,, ОповещениеОВыборе);
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
	Иначе
		
		ПараметрыОтчета = Новый Структура;
		Если ДопПараметры.Свойство("ИзменитьОрганизацию") Тогда
			ПараметрыОтчета.Вставить("Организация", Отчет.Организация);
		КонецЕсли;
		
		Если ВыбраннаяКвитанция.Представление = "Плат. документ (приказ №924/пр)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "СтандартныйКР");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (приказ №454 в соответ. с пост. №354)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "Стандартный");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (с полями для отметки банка №1)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "СПолямиБанка1");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (с полями для отметки банка №2)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "СПолямиБанка2");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (Пермский край)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "ПермскийКрай");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (Чувашская республика)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "Чебоксары");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		ИначеЕсли ВыбраннаяКвитанция.Представление = "Плат. документ (пост. №1161/57 для МО)" Тогда
			ПараметрыОтчета.Вставить("ВидМакета", "Москва");
			ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		Иначе
			ОткрытьФорму("Отчет.КВП_КвитанцииИзвещения.Форма.Форма_" + ВыбраннаяКвитанция.Представление, ПараметрыОтчета);
		КонецЕсли;
		
		// Закрываем текущую форму.
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФормыКвитанции()

&НаКлиенте
// Процедура открывает файл отчета внешней квитанции.
//
Процедура ОбработкаОткрытияВнешнейКвитанции(ВыбраннаяКвитанция, ДопПараметры) Экспорт
	
	Если Не ВыбраннаяКвитанция = Неопределено Тогда
		ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыбраннаяКвитанция);
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма",, ЭтаФорма);
		
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОткрытияВнешнейКвитанции()