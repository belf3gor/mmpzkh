
&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПоказатьПредупреждение(Неопределено, "Отчет не используется. Рекомендуется формировать отчет, доступный
										|в разделе ""Начисления услуг"" - ""Квитанции извещения""");
	Отказ = Истина;
	//Попытка
	//	
	//	Если Не ПустаяСтрока(НомерФормы) Тогда
	//		//Отказ = Истина;
	//		ОткрытьФормуКвитанции();
	//		Закрыть();
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если Не Элементы.НомерФормы.СписокВыбора.Количество() = 0 Тогда
	//		НомерФормы = Элементы.НомерФормы.СписокВыбора.Получить(0).Значение;
	//	КонецЕсли;
	//	
	//	Если Элементы.НомерФормы.СписокВыбора.Количество() = 1 Тогда
	//		ОткрытьФормуКвитанции();
	//		Закрыть();
	//		Возврат;
	//	КонецЕсли;
	//	
	//Исключение
	//	
	//	ВывестиСообщениеОбОшибке();
	//	
	//КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
// Процедура вызывается при нажатии кнопки "ОткрытьФорму".
Процедура КнопкаОткрытьФормуКвитанции(Команда)
	
	Попытка
		
		ОткрытьФормуКвитанции();
		Закрыть();
		
	Исключение
		
		ВывестиСообщениеОбОшибке();
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
// Открывает указанную форму квитанции.
Процедура ОткрытьФормуКвитанции()
	
	Если ПустаяСтрока(НомерФормы) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана форма квитанции!");
		Возврат;
	КонецЕсли;

	//Если эта форма открыта, то закрываем.
	//Если Открыта() Тогда
	//	Закрыть();
	//КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", СформироватьПриОткрытии);
	ПараметрыОтчета.Вставить("ОбъектОтчета",            Отчет.ОбъектОтчета);
	ПараметрыОтчета.Вставить("Организация",             Отчет.Организация);
	
	Если ТипЗнч(НомерФормы) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Попытка
			ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(НомерФормы);
			ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОтчета, ЭтаФорма);
		Исключение	
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
		КонецПопытки;
		
	ИначеЕсли НомерФормы = "Плат. документ (приказ №454 в соответ. с пост. №354)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "Стандартный");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (с полями для отметки банка №1)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "СПолямиБанка1");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (с полями для отметки банка №2)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "СПолямиБанка2");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (Пермский край)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "ПермскийКрай");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (Чувашская республика)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "Чебоксары");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (пост. №1161/57 для МО)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "Москва");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	ИначеЕсли НомерФормы = "Плат. документ (приказ №924/пр)" Тогда
		
		ПараметрыОтчета.Вставить("ВидМакета", "СтандартныйКР");
		
		ОткрытьФорму("Отчет.УПЖКХ_ПлатежныйДокумент.Форма.ФормаОтчета", ПараметрыОтчета);
		
	Иначе
		
		ОткрытьФорму("Отчет.КВП_КвитанцииИзвещения.Форма.Форма_" + НомерФормы, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//// Определяет организацию из договора контрагента лицевого счета.
////
//// Входящие параметры:
////  текОбъектОтчета - элемент справочника "Лицевые счета".
////
//Процедура ОпределитьОрганизациюИзСведенийДляВзаиморасчетов(текОбъектОтчета)
//	
//	Если Не текОбъектОтчета = Неопределено Тогда
//		// Если не удалось определить организацию, то определяем из договора контрагента л/с.
//		ОрганизацияИзВзаиморасчетов = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьОрганизациюИзДоговораКонтрагентаЛицевогоСчета(текОбъектОтчета,
//																														 Отчет.ПериодПросмотра);
//		Если Не ОрганизацияИзВзаиморасчетов.Пустая() Тогда
//			Отчет.Организация = ОрганизацияИзВзаиморасчетов;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ОпределитьОрганизациюИзСведенийДляВзаиморасчетов()

//&НаСервере
//// Определяет организацию из сохраненных настроек квитанций.
//// Если организация не определена, то получаем сохраненный объект квитанции.
////
//Процедура ОпределитьОрганизациюИзНастроекКвитанций(текОбъектОтчета)
//	
//	СтруктураПараметровКИ = ХранилищеОбщихНастроек.Загрузить("Отчет.КВП_КвитанцииИзвещения");
//	Если ТипЗнч(СтруктураПараметровКИ) = Тип("Структура") Тогда
//		
//		Если СтруктураПараметровКИ.Свойство("Организация")
//		   И ТипЗнч(СтруктураПараметровКИ.Организация) = Тип("СправочникСсылка.Организации")
//		   И Не СтруктураПараметровКИ.Организация.Пустая() Тогда
//			Отчет.Организация = СтруктураПараметровКИ.Организация;
//			Если Отчет.Организация.Пустая() И СтруктураПараметровКИ.Свойство("Объект") Тогда
//				
//				ОбъектОтчета = СтруктураПараметровКИ.Объект;
//				Если ЗначениеЗаполнено(ОбъектОтчета)
//				   И ТипЗнч(ОбъектОтчета) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
//				   И Не ОбъектОтчета.Пустая() Тогда
//					
//					Если ОбъектОтчета.ЭтоГруппа Тогда
//						// По группе получаем список л/с и берем первый в списке.
//						СписокОбъектов = Отчеты.КВП_КвитанцииИзвещения.ПолучитьСписокЛицевыхСчетовПоГруппе(ОбъектОтчета);
//						Если СписокОбъектов.Количество() > 0 Тогда
//							текОбъектОтчета = СписокОбъектов[0];
//						КонецЕсли;
//					Иначе
//						текОбъектОтчета = ОбъектОтчета;
//					КонецЕсли;
//				КонецЕсли;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецПроцедуры // ОпределитьОрганизациюИзНастроекКвитанций()

//// Определяет организацию из сохраненных настроек платежных документов.
//// Если организация не определена, то получаем сохраненный объект платежных документов.
////
//Процедура ОпределитьОрганизациюИзНастроекПД(текОбъектОтчета)
//	
//	СтруктураПараметровПД = ХранилищеОбщихНастроек.Загрузить("Отчет.УПЖКХ_ПлатежныйДокумент");
//	Если ТипЗнч(СтруктураПараметровПД) = Тип("Структура") Тогда
//		
//		Если СтруктураПараметровПД.Свойство("Организация")
//		   И ТипЗнч(СтруктураПараметровПД.Организация) = Тип("СправочникСсылка.Организации")
//		   И Не СтруктураПараметровПД.Организация.Пустая() Тогда
//			
//			Отчет.Организация = СтруктураПараметровПД.Организация;
//			
//			Если Отчет.Организация.Пустая() И СтруктураПараметровПД.Свойство("ОбъектыОтчета") Тогда
//				
//				ОбъектыОтчета = СтруктураПараметровПД.ОбъектыОтчета;
//				Если ЗначениеЗаполнено(ОбъектыОтчета)
//				   И ТипЗнч(ОбъектыОтчета) = Тип("ТаблицаЗначений")
//				   И ОбъектыОтчета.Количество() > 0
//				   И Не ОбъектыОтчета.Колонки.Найти("Объект") = Неопределено
//				   И ТипЗнч(ОбъектыОтчета[0].Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
//					текОбъектОтчета = ОбъектыОтчета[0].Объект;
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры // ОпределитьОрганизациюИзНастроекПД()

//&НаСервере
//// Возвращает таблицу организаций в справочнике "Организации".
////
//Функция ПолучитьТаблицуОрганизаций()
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Организации.Ссылка КАК Организация
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|ГДЕ
//	|	НЕ Организации.ПометкаУдаления";
//	
//	Возврат Запрос.Выполнить().Выгрузить();
//	
//КонецФункции // ПолучитьТаблицуОрганизаций()

//&НаСервере
//// Устанавливает организацию в поле "Организация" квитанции.
////
//Процедура УстановитьОрганизациюВКвитанции()
//	
//	// Определяем основную организацию.
//	Отчет.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
//	
//	Если Отчет.Организация.Пустая() Тогда
//		
//		ТаблицаОрганизаций = ПолучитьТаблицуОрганизаций();
//		Если ТаблицаОрганизаций.Количество() = 1 Тогда
//			
//			Отчет.Организация = ТаблицаОрганизаций[0].Организация;
//			
//		ИначеЕсли ТаблицаОрганизаций.Количество() > 1 Тогда
//			
//			текОбъектОтчета = Неопределено;
//			
//			ОпределитьОрганизациюИзНастроекПД(текОбъектОтчета);
//			
//			Если Отчет.Организация.Пустая() Тогда
//				
//				ОпределитьОрганизациюИзНастроекКвитанций(текОбъектОтчета);
//				
//				Если Отчет.Организация.Пустая() Тогда
//					
//					ОпределитьОрганизациюИзДоговора(текОбъектОтчета);
//					
//					Если Отчет.Организация.Пустая() Тогда
//						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Установите нужную Вам организацию в качестве основной в справочнике ""Организации"".");
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//			КонецЕсли;
//			
//		Иначе
//			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Организации не созданы. Для создания организаций перейдите в справочник ""Организации"".");
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры // УстановитьОрганизациюВКвитанции()

&НаСервере
// Выводит пользователю сообщение об ошибке.
Процедура ВывестиСообщениеОбОшибке()
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Квитанция неработоспособна. Возможно, требуется адаптация к актуальному релизу программы.
					  |Обратитесь за помощью к разработчикам: clients@vdgb-soft.ru";
	
	Сообщение.Сообщить();
	
КонецПроцедуры