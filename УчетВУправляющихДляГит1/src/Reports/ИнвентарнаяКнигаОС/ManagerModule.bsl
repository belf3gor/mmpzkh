#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда



// Процедура формирует табличный документ с обложкой инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводится
//                      обложка инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьОбложкуИнвентарнойКнигиОС(ПараметрыОтчета)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НачалоПериода              = ПараметрыОтчета.Началопериода;
	КонецПериода               = ПараметрыОтчета.КонецПериода;
	Организация                = ПараметрыОтчета.Организация;
	МестонахождениеОС          = ПараметрыОтчета.МестонахождениеОС;
	МОЛ                        = ПараметрыОтчета.МОЛ;
	Ответственный              = ПараметрыОтчета.Ответственный;
	СписокСформированныхЛистов = ПараметрыОтчета.СписокСформированныхЛистов;
	
	ДатаОтбора = ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, Неопределено);
	
	Сведения             = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, ДатаОтбора);
	ДанныеОтветственного = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, Ответственный, ДатаОтбора);
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Обложка");
	Макет.Параметры.НаименованиеОрганизации          = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(Сведения, "НаименованиеДляПечатныхФорм");
	Макет.Параметры.ОКПО                             = Сведения.КодПоОКПО;
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		СтрокаС = Формат(НачалоПериода, "ДЛФ=DD");
	Иначе
		СтрокаС = НСтр("ru = '""____"" ___________ ______ г.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда
		СтрокаПо = Формат(КонецПериода, "ДЛФ=DD");
	Иначе
		СтрокаПо = НСтр("ru = '""____"" ___________ ______ г.'");
	КонецЕсли;
	ШаблонСтрокаПериода = НСтр("ru = 'с %1 по %2'");
	
	Макет.Параметры.Период                           = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтрокаПериода, СтрокаС, СтрокаПо);
	Макет.Параметры.НаименованиеПодразделения        = ?(ЗначениеЗаполнено(МестонахождениеОС), МестонахождениеОС.Наименование, "");  
	Макет.Параметры.КодПодразделения                 = ?(ЗначениеЗаполнено(МестонахождениеОС), МестонахождениеОС.Код, "");
	Макет.Параметры.Должность                        = ДанныеОтветственного.Должность;
	Макет.Параметры.ФамилияИО                        = ДанныеОтветственного.Представление;
	Макет.Параметры.ТабельныйНомер                   = ДанныеОтветственного.ТабельныйНомер;
	
	ДокументРезультат.Вывести(Макет);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
	СписокСформированныхЛистов.Добавить(ДокументРезультат, "Обложка");
	
КонецПроцедуры // СформироватьОбложку()

// Процедура формирует табличный документ со страницами инвентарной книги.
//
// Параметры:
//  ДокументРезультат - табличный документ, в который выводятся
//                      страницы инвентарной книги.
//
// Возвращаемое значение:
//  Нет.
//
Процедура СформироватьСтраницыИнвентарнойКнигиОС(ПараметрыОтчета)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	
	НачалоПериода              = ПараметрыОтчета.Началопериода;
	КонецПериода               = ПараметрыОтчета.КонецПериода;
	Организация                = ПараметрыОтчета.Организация;
	МестонахождениеОС          = ПараметрыОтчета.МестонахождениеОС;
	МОЛ                        = ПараметрыОтчета.МОЛ;
	СписокСформированныхЛистов = ПараметрыОтчета.СписокСформированныхЛистов;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода", ?(НЕ ЗначениеЗаполнено(НачалоПериода), НачалоПериода, НачалоДня(НачалоПериода)));
	Запрос.УстановитьПараметр("КонецПериода",  ?(НЕ ЗначениеЗаполнено(КонецПериода),  КонецПериода,  КонецДня(КонецПериода)));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("МестонахождениеОС", МестонахождениеОС);
	Запрос.УстановитьПараметр("МОЛ",           МОЛ);
	
	Если ЗначениеЗаполнено(НачалоПериода)
		И ЗначениеЗаполнено(КонецПериода) Тогда
		
		ОтборПоПериоду = "СобытияОСОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода И";
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		
		ОтборПоПериоду = "СобытияОСОрганизаций.Период >= &НачалоПериода И";
		
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		
		ОтборПоПериоду = "СобытияОСОрганизаций.Период <= &КонецПериода И";
		
	Иначе
		
		ОтборПоПериоду = "";
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство.НаименованиеПолное КАК ОсновноеСредствоНаименованиеПолное,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство.Наименование КАК ОсновноеСредствоНаименование,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство КАК ОсновноеСредствоСсылка,
	|	ПРЕДСТАВЛЕНИЕ(СрезПоследнихПоРегистрамСведенийИБухгалтерии.Документ) КАК ПредставлениеДокумента,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.Документ,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ТипДокумента,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ДатаДокумента КАК ДатаДокумента,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПричинаСписания,
	|	ЕСТЬNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ИнвентарныйНомер,
	|	ЕСТЬNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПорядокПогашенияСтоимости,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМОЛ,
	|	ЕстьNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМОЛ.Представление, """") КАК ПоследнееМОЛПредставление,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМОЛ,
	|	ЕстьNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМОЛ.Представление, """") КАК ПредпоследнееМОЛПредставление,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМестонахождение,
	|	ЕстьNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМестонахождение.Представление, """") КАК ПоследнееМестонахождениеПредставление,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМестонахождение,
	|	ЕстьNULL(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМестонахождение.Представление, """") КАК ПредпоследнееМестонахождениеПредставление,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаПринятияКУчету,
	|	СостоянияОСОрганизаций.Регистратор КАК ДокументПринятияКУчету,
	|	ЕСТЬNULL(ВосстановительнаяСтоимостьОСБУ.СуммаКонечныйОстатокДт, 0) КАК ВосстановительнаяСтоимость,
	|	ЕСТЬNULL(НачисленнаяАмортизацияИлиИзносОСБУ.СуммаКонечныйОстатокКт, 0) КАК НачисленнаяАмортизация,
	|	ЕСТЬNULL(НачисленнаяАмортизацияИлиИзносОСБУ.СуммаКонечныйОстатокДт, 0) КАК НачисленныйИзнос,
	|	ЕСТЬNULL(АмортизацияИлиИзносПоДокументу.СуммаОборотКт, 0) КАК АмортизацияПоДокументу,
	|	ЕСТЬNULL(АмортизацияИлиИзносПоДокументу.СуммаОборотДт, 0) КАК ИзносПоДокументу,
	|	СрезПоследнихПоРегистрамСведенийИБухгалтерии.СчетНачисленияАмортизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		СрезПоследнихПоРегистрамСведений.ОсновноеСредство КАК ОсновноеСредство,
	|		СрезПоследнихПоРегистрамСведений.Документ КАК Документ,
	|		СрезПоследнихПоРегистрамСведений.ТипДокумента КАК ТипДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДокумента КАК ДатаДокумента,
	|		СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|		СрезПоследнихПоРегистрамСведений.ПричинаСписания КАК ПричинаСписания,
	|		СрезПоследнихПоРегистрамСведений.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|		СрезПоследнихПоРегистрамСведений.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		СрезПоследнихПоРегистрамСведений.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|		СрезПоследнихПоРегистрамСведений.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМОЛ КАК ПоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМОЛ КАК ПредпоследнееМОЛ,
	|		СрезПоследнихПоРегистрамСведений.ПоследнееМестонахождение КАК ПоследнееМестонахождение,
	|		СрезПоследнихПоРегистрамСведений.ПредпоследнееМестонахождение КАК ПредпоследнееМестонахождение,
	|		МАКСИМУМ(ВосстановительнаяСтоимостьОСБУ.Период) КАК ДатаПоследнегоДвиженияВосстановительнаяСтоимость,
	|		МАКСИМУМ(НачисленнаяАмортизацияИлиИзносОСБУ.Период) КАК ДатаПоследнегоДвиженияНачисленнаяАмортизацияИлиИзнос,
	|		СрезПоследнихПоРегистрамСведений.СчетУчета КАК СчетУчета,
	|		СрезПоследнихПоРегистрамСведений.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство КАК ОсновноеСредство,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.Документ КАК Документ,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ТипДокумента КАК ТипДокумента,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ДатаДокумента КАК ДатаДокумента,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|			ДатыПоследнихДвиженийПоРегистрамСведений.ПричинаСписания КАК ПричинаСписания,
	|			ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|			ПервоначальныеСведенияОСБухгалтерскийУчет.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|			ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|			ПервоначальныеСведенияОСБухгалтерскийУчет.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|			СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчета,
	|			СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|			МестонахождениеОСБухгалтерскийУчетПоследнее.МОЛ КАК ПоследнееМОЛ,
	|			МестонахождениеОСБухгалтерскийУчетПоследнее.Местонахождение КАК ПоследнееМестонахождение,
	|			МестонахождениеОСБухгалтерскийУчетПредпоследнее.МОЛ КАК ПредпоследнееМОЛ,
	|			МестонахождениеОСБухгалтерскийУчетПредпоследнее.Местонахождение КАК ПредпоследнееМестонахождение
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ДвиженияОС.ОсновноеСредство КАК ОсновноеСредство,
	|				ДвиженияОС.Документ КАК Документ,
	|				ДвиженияОС.ТипДокумента КАК ТипДОкумента,
	|				ДвиженияОС.ДатаДокумента КАК ДатаДокумента,
	|				ДвиженияОС.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии,
	|				ДвиженияОС.ПричинаСписания КАК ПричинаСписания,
	|				МАКСИМУМ(ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК ДатаПоследнегоПервоначальныеСведенияОС,
	|				МАКСИМУМ(ПараметрыАмортизацииОСБухгалтерскийУчет.Период) КАК ДатаПоследнегоПараметрыАмортизацииОС,
	|				МАКСИМУМ(МестонахождениеОСБухгалтерскийУчетПоследнее.Период) КАК ДатаПоследнегоМестонахождениеОС,
	|				МАКСИМУМ(МестонахождениеОСБухгалтерскийУчетПредпоследнее.Период) КАК ДатаПредпоследнегоМестонахождениеОС,
	|				МАКСИМУМ(СчетаБухгалтерскогоУчетаОС.Период) КАК ДатаПоследнегоСчетаБухгалтерскогоУчетаОС
	|			ИЗ
	|				(ВЫБРАТЬ
	|					СобытияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство,
	|					Документы.Ссылка КАК Документ,
	|					Документы.ТипДокумента КАК ТипДокумента,
	|					Документы.ПричинаСписания КАК ПричинаСписания,
	|					СобытияОСОрганизаций.Период КАК ДатаДокумента,
	|					Документы.ДатаДвиженийБухгалтерии КАК ДатаДвиженийБухгалтерии
	|				ИЗ
	|					РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|							ПринятиеКУчетуОС.Ссылка КАК Ссылка,
	|							ПринятиеКУчетуОС.Дата КАК ДатаДвиженийБухгалтерии,
	|							""ПринятиеКУчетуОС"" КАК ТипДокумента,
	|							"""" КАК ПричинаСписания
	|						ИЗ
	|							Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПеремещениеОС.Ссылка,
	|							ПеремещениеОС.Дата,
	|							""ПеремещениеОС"",
	|							""""
	|						ИЗ
	|							Документ.ПеремещениеОС КАК ПеремещениеОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПередачаОС.Ссылка,
	|							ПередачаОС.ДокПодготовкаКПередачеОС.Дата,
	|							""ПередачаОС"",
	|							""""
	|						ИЗ
	|							Документ.ПередачаОС КАК ПередачаОС
	|							ГДЕ НЕ (ПередачаОС.ДокПодготовкаКПередачеОС = ЗНАЧЕНИЕ(Документ.ПодготовкаКПередачеОС.ПустаяСсылка))
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПередачаОС.Ссылка,
	|							ПередачаОС.Дата,
	|							""ПередачаОС"",
	|							""""
	|						ИЗ
	|							Документ.ПередачаОС КАК ПередачаОС
	|							ГДЕ ПередачаОС.ДокПодготовкаКПередачеОС = ЗНАЧЕНИЕ(Документ.ПодготовкаКПередачеОС.ПустаяСсылка)
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							СписаниеОС.Ссылка,
	|							СписаниеОС.Дата,
	|							""СписаниеОС"",
	|							СписаниеОС.ПричинаСписания.Представление
	|						ИЗ
	|							Документ.СписаниеОС КАК СписаниеОС
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							ПоступлениеТоваровУслуг.Ссылка,
	|							ПоступлениеТоваровУслуг.Дата,
	|							""ПоступлениеТоваровУслуг"",
	|							""""
	|						ИЗ
	|							Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг) КАК Документы
	|						ПО СобытияОСОрганизаций.Регистратор = Документы.Ссылка
	|				
	|				ГДЕ
	|" + ОтборПоПериоду + "				   
	|					СобытияОСОрганизаций.Организация = &Организация) КАК ДвиженияОС
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|					ПО ДвиженияОС.ДатаДокумента >= ПервоначальныеСведенияОСБухгалтерскийУчет.Период И ДвиженияОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчетПоследнее
	|					ПО ДвиженияОС.ДатаДокумента >= МестонахождениеОСБухгалтерскийУчетПоследнее.Период И ДвиженияОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетПоследнее.ОсновноеСредство И (МестонахождениеОСБухгалтерскийУчетПоследнее.Организация = &Организация)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|					ПО ДвиженияОС.ДатаДокумента >= ПараметрыАмортизацииОСБухгалтерскийУчет.Период И ДвиженияОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство И (ПараметрыАмортизацииОСБухгалтерскийУчет.Организация = &Организация)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчетПредпоследнее
	|					ПО ДвиженияОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетПредпоследнее.ОсновноеСредство И ДвиженияОС.ДатаДокумента > МестонахождениеОСБухгалтерскийУчетПредпоследнее.Период И (МестонахождениеОСБухгалтерскийУчетПредпоследнее.Организация = &Организация)
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|					ПО ДвиженияОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство И ДвиженияОС.ДатаДвиженийБухгалтерии >= СчетаБухгалтерскогоУчетаОС.Период И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ДвиженияОС.ОсновноеСредство,
	|				ДвиженияОС.Документ,
	|				ДвиженияОС.ТипДокумента,
	|				ДвиженияОС.ДатаДокумента,
	|				ДвиженияОС.ДатаДвиженийБухгалтерии,
	|				ДвиженияОС.ПричинаСписания) КАК ДатыПоследнихДвиженийПоРегистрамСведений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчетаОС
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоСчетаБухгалтерскогоУчетаОС = СчетаБухгалтерскогоУчетаОС.Период И (СчетаБухгалтерскогоУчетаОС.Организация = &Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчетПоследнее
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетПоследнее.ОсновноеСредство И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоМестонахождениеОС = МестонахождениеОСБухгалтерскийУчетПоследнее.Период И (МестонахождениеОСБухгалтерскийУчетПоследнее.Организация = &Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчетПредпоследнее
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетПредпоследнее.ОсновноеСредство И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПредпоследнегоМестонахождениеОС = МестонахождениеОСБухгалтерскийУчетПредпоследнее.Период И (МестонахождениеОСБухгалтерскийУчетПредпоследнее.Организация = &Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоПараметрыАмортизацииОС = ПараметрыАмортизацииОСБухгалтерскийУчет.Период И (ПараметрыАмортизацииОСБухгалтерскийУчет.Организация = &Организация)
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|				ПО ДатыПоследнихДвиженийПоРегистрамСведений.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство И ДатыПоследнихДвиженийПоРегистрамСведений.ДатаПоследнегоПервоначальныеСведенияОС = ПервоначальныеСведенияОСБухгалтерскийУчет.Период) КАК СрезПоследнихПоРегистрамСведений
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ВосстановительнаяСтоимостьОСБУ
	|			ПО СрезПоследнихПоРегистрамСведений.ОсновноеСредство = ВосстановительнаяСтоимостьОСБУ.Субконто1 
	|			 И СрезПоследнихПоРегистрамСведений.СчетУчета = ВосстановительнаяСтоимостьОСБУ.Счет 
	|			 И СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии > ВосстановительнаяСтоимостьОСБУ.Период
	|			 И НЕ (ВосстановительнаяСтоимостьОСБУ.СуммаКонечныйОстатокДт ЕСТЬ NULL)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Запись, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК НачисленнаяАмортизацияИлиИзносОСБУ
	|			ПО СрезПоследнихПоРегистрамСведений.ОсновноеСредство = НачисленнаяАмортизацияИлиИзносОСБУ.Субконто1 
	|			 И СрезПоследнихПоРегистрамСведений.СчетНачисленияАмортизации = НачисленнаяАмортизацияИлиИзносОСБУ.Счет 
	|			 И СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии > НачисленнаяАмортизацияИлиИзносОСБУ.Период
	|			СГРУППИРОВАТЬ ПО
	|				СрезПоследнихПоРегистрамСведений.ОсновноеСредство,
	|				СрезПоследнихПоРегистрамСведений.Документ,
	|				СрезПоследнихПоРегистрамСведений.ТипДокумента,
	|				СрезПоследнихПоРегистрамСведений.ДатаДокумента,
	|				СрезПоследнихПоРегистрамСведений.ПричинаСписания,
	|				СрезПоследнихПоРегистрамСведений.СрокПолезногоИспользования,
	|				СрезПоследнихПоРегистрамСведений.ИнвентарныйНомер,
	|				СрезПоследнихПоРегистрамСведений.ПервоначальнаяСтоимость,
	|				СрезПоследнихПоРегистрамСведений.ПорядокПогашенияСтоимости,
	|				СрезПоследнихПоРегистрамСведений.ПоследнееМОЛ,
	|				СрезПоследнихПоРегистрамСведений.ПредпоследнееМОЛ,
	|				СрезПоследнихПоРегистрамСведений.ПоследнееМестонахождение,
	|				СрезПоследнихПоРегистрамСведений.ПредпоследнееМестонахождение,
	|				СрезПоследнихПоРегистрамСведений.СчетУчета,
	|				СрезПоследнихПоРегистрамСведений.СчетНачисленияАмортизации,
	|				СрезПоследнихПоРегистрамСведений.ДатаДвиженийБухгалтерии) КАК СрезПоследнихПоРегистрамСведенийИБухгалтерии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК ВосстановительнаяСтоимостьОСБУ
	|		ПО СрезПоследнихПоРегистрамСведенийИБухгалтерии.ДатаПоследнегоДвиженияВосстановительнаяСтоимость = ВосстановительнаяСтоимостьОСБУ.Период
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство = ВосстановительнаяСтоимостьОСБУ.Субконто1 
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.СчетУчета = ВосстановительнаяСтоимостьОСБУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Регистратор, , , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК НачисленнаяАмортизацияИлиИзносОСБУ
	|		ПО СрезПоследнихПоРегистрамСведенийИБухгалтерии.ДатаПоследнегоДвиженияНачисленнаяАмортизацияИлиИзнос = НачисленнаяАмортизацияИлиИзносОСБУ.Период 
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство = НачисленнаяАмортизацияИлиИзносОСБУ.Субконто1 
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.СчетНачисленияАмортизации = НачисленнаяАмортизацияИлиИзносОСБУ.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ПО СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство 
	|		 И СостоянияОСОрганизаций.Организация = &Организация 
	|		 И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Регистратор, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация, ,) КАК АмортизацияИлиИзносПоДокументу
	|		ПО СрезПоследнихПоРегистрамСведенийИБухгалтерии.ОсновноеСредство = АмортизацияИлиИзносПоДокументу.Субконто1 
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.ДатаДвиженийБухгалтерии = АмортизацияИлиИзносПоДокументу.Период 
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.СчетНачисленияАмортизации = АмортизацияИлиИзносПоДокументу.Счет
	|		 И СрезПоследнихПоРегистрамСведенийИБухгалтерии.СчетНачисленияАмортизации <> АмортизацияИлиИзносПоДокументу.КорСчет
	|        И (((СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|           ИЛИ СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ))
	|           И АмортизацияИлиИзносПоДокументу.СуммаОборотДт <> 0)
	|	       ИЛИ 
	|           ((СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПорядокПогашенияСтоимости <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|           ИЛИ СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПорядокПогашенияСтоимости <> ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ))
	|           И АмортизацияИлиИзносПоДокументу.СуммаОборотКт <> 0))	         
	|
	|" + ?(НЕ МестонахождениеОС.Пустая() ИЛИ НЕ МОЛ.Пустая(), "ГДЕ " ,"") + ?(МестонахождениеОС.Пустая(), "", "(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМестонахождение = &МестонахождениеОС ИЛИ СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМестонахождение = &МестонахождениеОС)") + 
	?(МОЛ.Пустая(), "", ?(МестонахождениеОС.Пустая(), "", " И ") + "(СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПоследнееМОЛ = &МОЛ ИЛИ СрезПоследнихПоРегистрамСведенийИБухгалтерии.ПредпоследнееМОЛ = &МОЛ)") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Заполнение таблицы строк инвентарной книги.
	
	СтрокиИнвентарнойКниги = Новый ТаблицаЗначений();
	СтрокиИнвентарнойКниги.Колонки.Добавить("ДокументСсылка");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредствоСсылка");	
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОсновноеСредство");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ИнвентарныйНомер");
	СтрокиИнвентарнойКниги.Колонки.Добавить("СрокПолезногоИспользования");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПервоначальнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДатаПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоДокументПринятияКУчету");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПоступилоМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("НачисленнаяАмортизацияИлиИзнос");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ОстаточнаяСтоимость");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПредставлениеДокумента");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПодразделение");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеМОЛ");
	СтрокиИнвентарнойКниги.Колонки.Добавить("ПеремещениеИлиВыбытиеПричинаВыбытия");
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаИнвентарнойКниги = СтрокиИнвентарнойКниги.Добавить();
		
		СтрокаИнвентарнойКниги.ОсновноеСредствоСсылка                          = Выборка.ОсновноеСредствоСсылка;
		СтрокаИнвентарнойКниги.ОсновноеСредство                                = ?(НЕ ЗначениеЗаполнено(Выборка.ОсновноеСредствоНаименованиеПолное), Выборка.ОсновноеСредствоНаименование, Выборка.ОсновноеСредствоНаименованиеПолное);
		СтрокаИнвентарнойКниги.ИнвентарныйНомер                                = Выборка.ИнвентарныйНомер;
		СтрокаИнвентарнойКниги.СрокПолезногоИспользования                      = Выборка.СрокПолезногоИспользования;
		СтрокаИнвентарнойКниги.ДокументСсылка                                  = Выборка.Документ;
		
		Если Выборка.ТипДокумента = "ПринятиеКУчетуОС" ИЛИ Выборка.ТипДокумента = "ПоступлениеТоваровУслуг" Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Выборка.ДокументПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ПервоначальнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = 0;
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = ?(Выборка.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету,
			0,
			Выборка.ПервоначальнаяСтоимость);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = "";
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		ИначеЕсли Выборка.ТипДокумента = "ПеремещениеОС" И Выборка.ПоследнееМестонахождение = МестонахождениеОС Тогда
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = Выборка.ПредставлениеДокумента;
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = Выборка.ДатаПринятияКУчету;
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = "";
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ВосстановительнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = ?(Выборка.СчетНачисленияАмортизации <> ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств, Выборка.НачисленнаяАмортизация + Выборка.АмортизацияПоДокументу, Выборка.НачисленныйИзнос + Выборка.ИзносПоДокументу);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = Выборка.ВосстановительнаяСтоимость - СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПредпоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    = ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка.ПредпоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = "";
			
		Иначе                                                         
			
			// Четная страница.
			СтрокаИнвентарнойКниги.ПоступилоПредставлениеДокумента             = "";
			СтрокаИнвентарнойКниги.ПоступилоДатаПринятияКУчету                 = "";
			СтрокаИнвентарнойКниги.ПоступилоДокументПринятияКУчету             = Неопределено;
			СтрокаИнвентарнойКниги.ПоступилоПодразделение                      = "";
			СтрокаИнвентарнойКниги.ПоступилоМОЛ                                = "";
			СтрокаИнвентарнойКниги.ПервоначальнаяСтоимость                     = Выборка.ВосстановительнаяСтоимость;
			СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос              = ?(Выборка.СчетНачисленияАмортизации <> ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств, Выборка.НачисленнаяАмортизация + Выборка.АмортизацияПоДокументу, Выборка.НачисленныйИзнос + Выборка.ИзносПоДокументу);
			
			// Нечетная страница.
			СтрокаИнвентарнойКниги.ОстаточнаяСтоимость                         = Выборка.ВосстановительнаяСтоимость - СтрокаИнвентарнойКниги.НачисленнаяАмортизацияИлиИзнос;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПредставлениеДокумента = Выборка.ПредставлениеДокумента;			
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПодразделение          = Выборка.ПоследнееМестонахождениеПредставление;
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеМОЛ                    =ФизическиеЛицаКлиентСервер.ФамилияИнициалы(Выборка.ПоследнееМОЛПредставление);
			СтрокаИнвентарнойКниги.ПеремещениеИлиВыбытиеПричинаВыбытия         = Выборка.ПричинаСписания;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод страниц инвентарной книги.
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСверху         = 20;
	ДокументРезультат.ПолеСнизу          = 20;
	ДокументРезультат.ПолеСлева          = 10;
	ДокументРезультат.ПолеСправа         = 10;
	ДокументРезультат.ФиксацияСлева      = 3;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ИнвентарнаяКнигаОС_Обложка";
	
	Макет = ПолучитьМакет("Страницы");
	
	НомерЧетнойСтраницы   = 2;
	НомерНечетнойСтраницы = НомерЧетнойСтраницы + 1;
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
	Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;	
	ДокументРезультат.Вывести(Шапка);
	
	Подвал = Макет.ПолучитьОбласть("Подвал");
	
	Для каждого СтрокаИнвентарнойКниги Из СтрокиИнвентарнойКниги Цикл
		
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Строка.Параметры.Заполнить(СтрокаИнвентарнойКниги);
		Строка.Параметры.НомерСтроки = СтрокиИнвентарнойКниги.Индекс(СтрокаИнвентарнойКниги) + 1;
		
		СтрокаСПодвалом = Новый Массив;
		СтрокаСПодвалом.Добавить(Строка);
		СтрокаСПодвалом.Добавить(Подвал);
		
		Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, СтрокаСПодвалом) Тогда
			
			ДокументРезультат.Вывести(Подвал);
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
			НомерЧетнойСтраницы   = НомерЧетнойСтраницы + 2;
			НомерНечетнойСтраницы = НомерНечетнойСтраницы + 2;
			
			Шапка = Макет.ПолучитьОбласть("Шапка");
			Шапка.Параметры.НомерЧетнойСтраницы   = НомерЧетнойСтраницы;
			Шапка.Параметры.НомерНечетнойСтраницы = НомерНечетнойСтраницы;
			ДокументРезультат.Вывести(Шапка);
			
		КонецЕсли;
		
		ДокументРезультат.Вывести(Строка);
		
	КонецЦикла;
	
	ДокументРезультат.Вывести(Подвал);
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
	СписокСформированныхЛистов.Добавить(ДокументРезультат, "Страницы");
	
КонецПроцедуры

// Формирует табличную часть отчета
Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ПараметрыОтчета.СписокСформированныхЛистов.Очистить();
	
	СформироватьСтраницыИнвентарнойКнигиОС(ПараметрыОтчета);
	
	СформироватьОбложкуИнвентарнойКнигиОС(ПараметрыОтчета);
	
	ПоместитьВоВременноеХранилище(ПараметрыОтчета.СписокСформированныхЛистов, АдресХранилища);
	
КонецПроцедуры


#КонецЕсли