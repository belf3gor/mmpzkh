
////////////////////////////////////////////////////////////////////////////////
//
// Параметры формы
//
// 		БезОткрытияФормы 			- Булево - Флаг работы без открытия формы.
//		мВыбраннаяФорма				- Произвольный - Имя выбранной формы отчета. 
//									Для данной формы всегда "ФормаОтчета2014Кв1".
//		мДатаНачалаПериодаОтчета	- Произвольный - Дата начала периода данных, отражаемых в отчете.
//		мДатаКонцаПериодаОтчета		- Произвольный - Дата конца периода данных, отражаемых в отчете.
//		мПериодичность				- Произвольный - Отражает периодичность составления отчета.
//									Значения из Перечисления.Периодичность.
//		мСкопированаФорма			- Произвольный - При копировании отчета имя формы копируемого отчета.
//		мСохраненныйДок				- Произвольный - Документ регламентированного отчета.
//									Неопределено или Документ.РегламентированныйОтчет.Ссылка.
//		Организация					- Произвольный - Организация декларант, от имени которой заполняется отчет.
//									Неопределено или Справочник.Организации.Ссылка.
//		СформироватьФормуОтчетаАвтоматически - Булево - Флаг необходимости заполнить отчет на основании данных ИБ
//														при открытии.
//		  
////////////////////////////////////////////////////////////////////////////////


#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстЭДОКлиент Экспорт;

// Управляемая форма длительной операции для данного отчета.
&НаКлиенте
Перем ФормаДлительнойОперации Экспорт; 

// Управляемая форма - открытая форма записи регистра при редактировании строки таблицы.
&НаКлиенте
Перем ФормаЗаписиРегистра Экспорт;

// Форма выбора из списка, ввода пары значений, форма длительной операции, 
// записи регистра, ввода данных по ОП и т.д.
// Любая открытая из данной формы форма в режиме блокировки владельца.
&НаКлиенте
Перем ОткрытаяФормаПотомокСБлокировкойВладельца Экспорт;

&НаКлиенте
Перем ФормаОшибок Экспорт;

// Управляемая форма - владелец формы ФормаДлительнойОперации.
// Может быть либо формой данного объекта (если форма открыта), либо внешней формой, 
// из которой запущена проверка, выгрузка, печать.. Например 1С-отчетность или Управление отчетностью.
&НаКлиенте
Перем ВладелецФормыДлитОпер Экспорт;

// Управляемая форма - владелец формы сообщений об ошибках.
// Может быть либо формой данного объекта (если форма открыта), либо внешней формой, 
// из которой запущена проверка, выгрузка.. Например 1С-отчетность или Управление отчетностью.
&НаКлиенте
Перем ВладелецФормыОшибок Экспорт;

&НаКлиенте
Перем ОтменаОперации Экспорт; // Флаг отмены длительной операции.

// Содержит структуру параметров обработчика ожидания окончания выполнения длительной операции.
// 		*МинимальныйИнтервал 	- Число - минимальный интервал проверки.
// 		*МаксимальныйИнтервал	- Число - Максимальный интервал проверки.
// 		*ТекущийИнтервал		- Число - Текущий интервал проверки.
// 		*КоэффициентУвеличенияИнтервала - Число - множитель, на который умножается текущий интервал, 
//										для получения нового текущего интервала.
&НаКлиенте
Перем ПараметрыОбработчикаОжидания Экспорт;  

&НаКлиенте
Перем СообщениеПользователю Экспорт; // Сообщение пользователю, передаваемое в форму длительной операции.

&НаКлиенте
Перем НачалосьВыполнениеДлительнойОперации Экспорт; // Флаг начала выполнения длительной операции.

// Флаг необходимости показывать предупреждение в формах редактирования строк таблиц
// о необходимости действий после изменения в справочниках или документах.
&НаКлиенте
Перем ПоказыватьПредупреждениеПослеПереходаПоСсылке Экспорт;

// Номер строки, имя колонки и имя элемента формы при активизации
// строки таблицы или элемента формы из формы сообщений об ошибках.
&НаКлиенте
Перем НомерСтрокиАктивизации Экспорт;
&НаКлиенте
Перем ИмяКолонкиАктивизации Экспорт;
&НаКлиенте
Перем ИмяЯчейкиАктивизации Экспорт;

// Индекс регистра для активной страницы многострочных разделов (Лицензии, Раздел 1 и Раздел 2).
// Используется в форме записи регистра сведений при редактировании строки таблицы.
&НаКлиенте
Перем ИндексАктивнойСтраницыВРегистре Экспорт;

// Количество строк активной страницы многострочных разделов (Лицензии, Раздел 1 и Раздел 2).
// Используется в форме записи регистра сведений при редактировании строки таблицы.
&НаКлиенте
Перем КоличествоСтрок Экспорт;

// Вспомогательные переменные для передачи параметров в процедуру ПоказатьСтраницуМногострочногоРазделаНаКлиенте(),
// вызываемую с задержкой через ПодключитьОбработчикОжидания.
&НаКлиенте
Перем ПоказатьПоИндексуПриВыводеСтраницы Экспорт;
&НаКлиенте
Перем НомерСтраницыПриВыводеСтраницы Экспорт;
&НаКлиенте
Перем НаименованиеРазделаПриВыводеСтраницы Экспорт;
&НаКлиенте
Перем ЭлементПриВыводеСтраницы Экспорт;
&НаКлиенте
Перем ЭтоРазделОтчетаПриВыводеСтраницы Экспорт; 
&НаКлиенте
Перем ЭтоЛицензируемаяДеятельностьПриВыводеСтраницы Экспорт;

&НаСервере	  
Перем ОбъектЭтогоОтчета Экспорт;// Объект метаданных отчета.

// Вспомогательная переменная для передачи значения текущего активного элемента таблицы формы в процедуры,
// вызываемые с задержкой через ПодключитьОбработчикОжидания.
&НаКлиенте
Перем АктивныйЭлементТаблицы Экспорт;

// АктивнаяСтраницаРаздела - переменная спозиционированна на данных Активной страницы
// многострочных разделов (Лицензии, Раздел 1 и Раздел 2).
// Позиционирование происходит в ПоказатьСтраницуМногострочногоРазделаНаКлиенте().
//
// Используется для прямого доступа к Данным и Дополнительным данным страницы
// Данные страницы - АктивнаяСтраницаРаздела.Данные[0].Значение  (тип Структура)
// Дополнительные Данные страницы - АктивнаяСтраницаРаздела.ДополнительныеДанные[0].Значение (тип Структура).
//
// Смысл использования столь длинных конструкций в том что при прямом доступе нет необходимости 
// в механизме записи изменений в ТаблицуРазделов и отслеживании момента когда это надо делать
// - все сразу пишется.
//
// Если использовать конструкцию ДанныеСтраницы = АктивнаяСтраницаРаздела.Данные[0].Значение
// изменения в ДанныеСтраницы не приводят к изменениям в АктивнаяСтраницаРаздела.Данные[0].Значение
// поскольку АктивнаяСтраницаРаздела.Данные - имеет тип Список Значений, а не Структура
// и тогда нужно все изменения вовремя записывать обратно.
&НаКлиенте
Перем АктивнаяСтраницаРаздела Экспорт;// ДанныеФормыЭлементКоллекции.

// Вспомогательные списки значений, используемые в обработчиках действия "ПриАктивизацииСтроки" таблицы Разделыотчета.
&НаКлиенте
Перем СписокПараметровПереходаНаСтраницуРаздела Экспорт; 

// Переменная, хранящая оповещение, которое необходимо выполнить после копирования регистров отчета при
// сохранении отчета с измененным номером корректировки.
&НаКлиенте
Перем ВыполняемоеОповещениеПослеКопированияРегистров Экспорт;

// Переменная хранит оповещение в ситуациях, когда передача параметра напрямую невозможна.
&НаКлиенте
Перем УниверсальноеОписаниеОповещения Экспорт;

// Переменная хранит признак удаления страницы до сохранения.
// Используется в форме ошибок выгрузке при анализе - можно переходить в форму отчета
// или нельзя ввиду изменения структуры страниц, чтобы избежать перехода на
// не существующую страницу.
&НаКлиенте
Перем БылаУдаленаСтраницаРаздела Экспорт;

&НаКлиенте
Перем ОбщийПараметрПроцедурНаКлиенте Экспорт;
#КонецОбласти


#Область ПрограммныйИнтерфейс

// Выполняет все длительные операции отчета.
//
// Параметры:
//
//	 	ВидДлОперации 				- Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.
//									Задает вид выполняемой длительной операции отчета.
// 		ВидПечати 					- Строка - Необязательный. Задает вид печати отчета при длительных
//									операцях печати.
// 		ФормаВлФормыДлитОперации	- Управляемая форма - Необязательный. Опеределяет форму - владельца
//									формы длительной операции.
//
// Пример использования из внешней формы:
//		
//		&НаКлиенте
// 		// Переменная используется извне формы механизмом длительных операций алкоотчетности.
//		Перем ПараметрыОбработчикаОжидания Экспорт;
//
//		&НаКлиенте
// 		// Переменная используется механизмом длительных операций алкоотчетности.
//		Перем СтруктураВспомДанныхДлитОперацииАЛКО;
//
//		&НаКлиенте
//		Процедура ДлительныеОперацииАлко(ДокументСсылкаАлкоОтчет, ВидДлОперации, ВидПечати = Неопределено)
//
//			СтруктураВспомДанныхДлитОперацииАЛКО = Новый Структура;
//			СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидДлительнойОперации", ВидДлОперации);
//			СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ВидПечати", ВидПечати);
//		
//			ФормаОтчетаДлитОперации = РегламентированнаяОтчетностьКлиент.ИнициализацияОтчета(ДокументСсылкаАлкоОтчет);
//	
//			СтруктураВспомДанныхДлитОперацииАЛКО.Вставить("ФормаОтчетаДлитОперации", ФормаОтчетаДлитОперации);
//		
//			ФормаОтчетаДлитОперации.ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлОперации, ВидПечати, ЭтаФорма);	
//
//		КонецПроцедуры
//
//      &НаКлиенте
//		Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте()
//			
//			ФормаОтчетаДлитОперации = СтруктураВспомДанныхДлитОперацииАЛКО.ФормаОтчетаДлитОперации;
//			ОперацияЗавершена = РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьДействияПриПроверкеВыполненияДлительнойОперации(ФормаОтчетаДлитОперации);
//			
//			Если ОперацияЗавершена Тогда
//
//				ПараметрыОбработчикаОжидания = Неопределено;
//				СтруктураВспомДанныхДлитОперацииАЛКО = Неопределено;
//				
//			    Возврат;
//				
//			КонецЕсли;
//			
//			ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
//			
//			Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
//				ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
//			КонецЕсли;
//			
//			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
//			
//		КонецПроцедуры
//
//
&НаКлиенте
Процедура ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлОперации, ВидПечати = Неопределено, ФормаВлФормыДлитОперации = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьДлительнуюОперациюАЛКО(
					ЭтаФорма, ВидДлОперации, ВидПечати, ФормаВлФормыДлитОперации);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетНаКлиенте() Экспорт
	Подключаемый_ОткрытьОтчетНаКлиенте();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ИнициализацияНаСервере(БезОткрытияФормы) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ИнициализацияНаСервереАЛКО(ЭтаФорма, БезОткрытияФормы);
			
КонецПроцедуры	

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьАЛКО.ПриСозданииНаСервереАЛКО(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	РегламентированнаяОтчетностьАЛКОКлиент.ПриОткрытииАЛКО(ЭтаФорма, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) 
	
	РегламентированнаяОтчетностьАЛКОКлиент.ПередЗакрытиемАЛКО(
					ЭтаФорма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы) 
	
	РегламентированнаяОтчетностьАЛКОКлиент.ПриЗакрытииАЛКО(ЭтаФорма, ЗавершениеРаботы);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ОбработкаОповещенияАЛКО(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовШапкиФормыТитульный

&НаКлиенте
Процедура НомерКорректировкиПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.НомерКорректировкиПриИзмененииАЛКО(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставляетсяВПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЭлементТитульногоПриИзмененииАЛКО(
									ЭтаФорма, Элемент, "ОргИМНС", "КудаПредставляется");
		
КонецПроцедуры

&НаКлиенте
Процедура КоличествоСтраницПодтверждающихДокументовПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЭлементТитульногоПриИзмененииАЛКО(
									ЭтаФорма, Элемент, "Прил", "КоличествоСтраницПодтверждающихДокументов");
		
КонецПроцедуры

// Процедура экспортируема, поскольку может вызываться из АктивизироватьПолеАктивнойСтраницы()
// через оповещение, как действие "Нажатие" для элемента. 
// При вызове через ВыполнитьОбработкуОповещения() Дополнительные параметры не передаются,
// в качестве Результата в параметр Элемент передается элемент формы.
//
&НаКлиенте
Процедура ОрганизацияОткрытие(Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.ОрганизацияОткрытиеАЛКО(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГражданинПодсобноеХозяйствоПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЭлементТитульногоПриИзмененииАЛКО(
									ЭтаФорма, Элемент, "ЭтоЛичноеХозяйство", "ЭтоЛичноеХозяйство");
	
КонецПроцедуры

&НаКлиенте
Процедура МестоОсуществленияДеятельностиНажатие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьАЛКОКлиент.МестоОсуществленияДеятельностиНажатиеАЛКО(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныйАдресОрганизацииПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЭлементТитульногоПриИзмененииАЛКО(
									ЭтаФорма, Элемент, "ЭлектроннаяПочта", "ОрганизацияЭлектронныйАдрес");
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ДатаПодписиПриИзмененииАЛКО(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЭлементТитульногоПриИзмененииАЛКО(
									ЭтаФорма, Элемент, "Комментарий", "Комментарий");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыЛицензии

// Процедура экспортируема, поскольку может вызываться из АктивизироватьПолеАктивнойСтраницы()
// через оповещение, как действие "НачалоВыбора" для элемента. 
// При вызове через ВыполнитьОбработкуОповещения() Дополнительные параметры не передаются,
// в качестве Результата в параметр ДанныеВыбора передается элемент формы, но это не имеет значения.
//
&НаКлиенте
Процедура ДеятельностьПоЛицензииНачалоВыбора(ДанныеВыбора = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.ДеятельностьПоЛицензииНачалоВыбораАЛКО(
											ЭтаФорма, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыДекларация

&НаКлиенте
Процедура ПриИзмененииВиноградныхДанных(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ПриИзмененииВиноградныхДанныхАЛКО(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагГоловногоОППереключательПриИзменении(Элемент)
	
	ФлагГоловногоОП = ?(ФлагГоловногоОПЗначенияПереключателя = 0, Истина, Ложь);
	ФлагГоловногоОППриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагГоловногоОППриИзменении(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ФлагГоловногоОППриИзмененииАЛКО(ЭтаФорма, Элемент);
	
КонецПроцедуры

// Процедура экспортируема, поскольку может вызываться из АктивизироватьПолеАктивнойСтраницы()
// через оповещение, как действие "Нажатие" для элемента. 
// При вызове через ВыполнитьОбработкуОповещения() Дополнительные параметры не передаются,
// в качестве Результата в параметр Элемент передается элемент формы.
// 
&НаКлиенте
Процедура ОбособленноеПодразделениеНажатие(Элемент = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.ОбособленноеПодразделениеНажатиеАЛКО(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСРАР"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРазделыОтчета

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.РазделыОтчетаПриАктивизацииСтрокиАЛКО(ЭтаФорма, Элемент);
					
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРаздел1Раздел2Лицензии

// Обработчики определяются при программном создании таблиц многострочных разделов,
// в РегламентированнаяОтчетностьАЛКО.СоздатьТаблицуФормыРазделаБезПодвалаАЛКО()
&НаКлиенте
Процедура Подключаемый_ТаблицаФормыРазделаВыборНаКлиенте(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ТаблицаФормыРазделаВыборАЛКО(
								ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаФормыРазделаПередУдалениемНаКлиенте(Элемент, Отказ = Истина)
		
	РегламентированнаяОтчетностьАЛКОКлиент.ТаблицаФормыРазделаПередУдалениемАЛКО(ЭтаФорма, Элемент, Отказ);
																		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаФормыРазделаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ТаблицаФормыРазделаПередНачаломДобавленияАЛКО(
					ЭтаФорма, Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр);
					
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаФормыРазделаПриИзмененииНаКлиенте(Элемент)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ТаблицаФормыРазделаПриИзмененииАЛКО(ЭтаФорма, Элемент); 
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаФормыРазделаПриАктивизацииСтрокиНаКлиенте(Элемент)
			
	РегламентированнаяОтчетностьАЛКОКлиент.ТаблицаФормыРазделаПриАктивизацииСтрокиАЛКО(ЭтаФорма, Элемент);
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьКомандуФормы(Команда)
	
	ИмяКоманды = Команда.Имя;
	
	РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьКомандуФормыПоИмениАЛКО(ЭтаФорма, ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура Просуммировать() Экспорт
	
	П000010000307 = П000010000304 + П000010000305 + П000010000306;
	Элемент = Элементы.Найти("П000010000307");
	ПриИзмененииВиноградныхДанных(Элемент);
	
КонецПроцедуры

///////////////////////////////////////////
// Сторонние обработчики.
///////////////////////////////////////////

#Область КомандаЗагрузитьИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчереди();
		Возврат;		
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		ВыполнитьСледующееДействиеИзОчереди();
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	ДеревоДляЗагрузки = РегламентированнаяОтчетность.ИзвлечьСтруктуруXML(ЭтотОбъект, "СхемаВыгрузки432_2016Кв1");

    Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
        ЭтотОбъект, Новый Структура, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
        Возврат Ложь;
    КонецЕсли;

	Возврат Истина;
	
КонецФункции
	
#КонецОбласти 

#Область КомандаОткрытьПрисоединенныеФайлы

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)

	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры
	
#КонецОбласти 

#Область КомандаПроверитьВИнтернете

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда) Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);

	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда		
		ВыполнитьСледующееДействиеИзОчереди();
		Возврат;		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетДляПроверкиПослеСохраненияНаКлиенте", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетДляПроверкиПослеСохраненияНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Модифицированность Тогда		
		ВыгрузитьОтчетДляПроверки_ДлительнаяОперация();
	Иначе	
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////
// Результат выгрузки обрабатывается в 
// РегламентированнаяОтчетностьАЛКОКлиент.ПолучитьФайлВыгрузкиАЛКО()
////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыгрузитьОтчетДляПроверки_ДлительнаяОперация()
	
	Если Открыта() И Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
	
	ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ПроверкаВыгрузкиВИнтернете");
	ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлительнойОперации);
			
КонецПроцедуры

#КонецОбласти

#Область КомандаВыгрузитьПакет

&НаКлиенте
Процедура ВыгрузитьПакет(Команда) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Организация не выбрана! Выгрузка невозможна.'");
		Сообщение.Сообщить();
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
			
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияНаКлиенте", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияНаКлиенте(Результат, ДополнительныеПараметры) Экспорт
	
	Если Модифицированность Тогда		
		
		// отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеПолученияКонтекста", ЭтотОбъект);
	ДокументооборотСКОКлиент.ПолучитьКонтекстЭДО(ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекста(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = Результат.КонтекстЭДО;
	
	ВыгрузитьОтчетДляВыгрузкиПакета_ДлительнаяОперация();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////
// Результат выгрузки обрабатывается в 
// РегламентированнаяОтчетностьАЛКОКлиент.ПолучитьФайлВыгрузкиАЛКО()
////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыгрузитьОтчетДляВыгрузкиПакета_ДлительнаяОперация()
	
	Если Открыта() И Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
	
	ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ВыгрузкаПакета");
	ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлительнойОперации);
			
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеПолученияКонтекстаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстЭДОКлиент = ДополнительныеПараметры.КонтекстЭДОКлиент;
	ИмяВременногоФайлаПакета = Результат.РезультатВыгрузки;
	Если ЗначениеЗаполнено(ИмяВременногоФайлаПакета) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение", ЭтотОбъект);
		КонтекстЭДОКлиент.СохранитьФайлНаКлиенте(ИмяВременногоФайлаПакета, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПакетПослеСохраненияФайлаНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при выгрузке пакета'"));
		ВыполнитьСледующееДействиеИзОчереди();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандаОтправитьВКонтролирующийОрган

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчереди();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		ВыполнитьСледующееДействиеИзОчереди();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеСохраненияНаКлиенте", ЭтотОбъект);
	
	Если Модифицированность Тогда
		ПользовательНажалСохранитьОтчет = Истина;
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеСохраненияНаКлиенте(Отказ, ДополнительныеПараметры) Экспорт
	
	Если НЕ Модифицированность Тогда		
		ВыгрузитьОтчетДляОтправки_ДлительнаяОперация();
	Иначе	
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Результат выгрузки обрабатывается в 
// РегламентированнаяОтчетностьАЛКОКлиент.ПолучитьФайлВыгрузкиАЛКО()
////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВыгрузитьОтчетДляОтправки_ДлительнаяОперация()
	
	Если Открыта() И Модифицированность Тогда		
		
	    // отказ от сохранения или ошибка сохранения
		ПоказатьПредупреждение( , НСтр("ru='Отчет не сохранен, продолжение выгрузки невозможно!'"));		
		ВыполнитьСледующееДействиеИзОчереди();
		
		Возврат;
		
	КонецЕсли;
	
	ВидДлительнойОперации = ПредопределенноеЗначение("Перечисление.ВидыДлительныхОперацийРегламентированныхОтчетов.ОтправкаВКонтролирующийОрган");
	ВыполнитьДлительнуюОперацию_НаКлиенте(ВидДлительнойОперации);
			
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ОбновитьОтправку(Команда) Экспорт

	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда) Экспорт
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "ФСРАР");
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбщие

#Область СлужебныеОбщиеЗаглушки

&НаСервере
Процедура ЗаполнитьДатуВЯчейкахНаСервере() Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;
КонецПроцедуры

&НаСервере
Процедура УправлениеЛистамиНаСервере(ТипНП = Неопределено) Экспорт	
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат; 	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами.
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами.
	Возврат;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьСледующееДействиеИзОчереди()

	РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьСледующееДействиеИзОчередиАЛКО(ЭтаФорма); 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеТитульный

&НаСервере
Процедура ОбновитьМестоОсуществленияДеятельностиНаСервере(Результат) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ОбновитьМестоОсуществленияДеятельности(ЭтаФорма, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОКорректировкеНажатие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьАЛКОКлиент.ЗаявлениеОКорректировкеНажатиеАЛКО(ЭтаФорма, Элемент, СтандартнаяОбработка);
				
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыОбъектаЗначенияЭлементаФормы(ИмяЭлементаСсылки, ЗначениеСсылки = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПолучитьИмяФормыОбъектаЗначенияЭлементаФормы(
						ЭтаФорма, ИмяЭлементаСсылки, ЗначениеСсылки);
	
КонецФункции

#КонецОбласти

#Область СлужебныеОП_Выбор

&НаСервере
Процедура ЗаполнитьОПРеквизитамиОрганизации(Раздел, ИндексСтраницы) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ЗаполнитьОПРеквизитамиОрганизацииАЛКО(ЭтаФорма, Раздел, ИндексСтраницы);
															
КонецПроцедуры

&НаСервере
Процедура ВводРеквизитовОПЗавершениеНаСервере(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ВводРеквизитовОПЗавершениеАЛКО(
								ЭтаФорма, РезультатВвода, ДополнительныеПараметры);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеТаблицыФормыРаздела

&НаСервере
Процедура АктивацияДеактивацияНаСервере(ТекущиеДанные, Раздел, КоличествоСтрок)
	
	РегламентированнаяОтчетностьАЛКО.АктивацияДеактивацияАЛКО(
		ЭтаФорма, ТекущиеДанные, Раздел, КоличествоСтрок);
		
КонецПроцедуры

&НаКлиенте
Процедура АктивацияДеактивация() Экспорт 
		
	Элемент = АктивныйЭлементТаблицы;		
	ТекущиеДанные = Элемент.ТекущиеДанные;
		
	Раздел = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	АктивацияДеактивацияНаСервере(ТекущиеДанные, Раздел, КоличествоСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьТекущиеИтогиНаСервере(ИнформацияДляПересчетаИтогов) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ПересчитатьТекущиеИтогиТаблицыФормыАЛКО(ЭтаФорма, ИнформацияДляПересчетаИтогов); 
		
КонецПроцедуры
#КонецОбласти  

#Область СлужебныеПереходНаСтрокуТаблицыФормы

&НаСервере
Функция ПереходНаСтрокуТаблицыФормыНаСервере(ИдГруппы, НомерСтроки, ИмяПоля = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПереходНаСтрокуТаблицыФормыАЛКО(ЭтаФорма, ИдГруппы, НомерСтроки, ИмяПоля);
	
КонецФункции

#КонецОбласти

#Область СлужебныеВыводТаблицыФормы

&НаСервере
Процедура УправлениеМенюТаблицыФормыНаСервере(Раздел) Экспорт

	РегламентированнаяОтчетностьАЛКО.УправлениеМенюТаблицыФормыАЛКО(ЭтаФорма, Раздел);	

КонецПроцедуры

&НаСервере
Процедура ВывестиИтогиТабличногоПоляРазделаНаСервере(ИдГруппы, СтруктураИтогов = Неопределено) Экспорт

	РегламентированнаяОтчетностьАЛКО.ВывестиИтогиТаблицыФормыРазделаАЛКО(ЭтаФорма, ИдГруппы, СтруктураИтогов);

КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПереходНаСтраницуРаздела

&НаКлиенте
Процедура ПроверитьОтображениеСтраницы() Экспорт

	РегламентированнаяОтчетностьАЛКОКлиент.ПроверитьОтображениеСтраницыАЛКО(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытиеСтраницыНаКлиенте() Экспорт

	РегламентированнаяОтчетностьАЛКОКлиент.ВыполнитьПереходНаСтраницуРазделаАЛКО(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьДействиеТаблицыРазделыОтчетаНаСервере(Действие, ИмяПроцедурыДействия) Экспорт

	РегламентированнаяОтчетностьАЛКО.УстановитьДействиеТаблицыРазделыОтчетаАЛКО(ЭтаФорма, Действие, ИмяПроцедурыДействия); 
		
КонецПроцедуры
 
&НаСервере
Процедура ПоказатьСтраницуМногострочногоРазделаНаСервере(Шаг, Раздел, ПоказатьПоИндексу = Истина) Экспорт

	РегламентированнаяОтчетностьАЛКО.ПоказатьСтраницуМногострочногоРазделаАЛКО(ЭтаФорма, Шаг, Раздел, ПоказатьПоИндексу);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСтраницуНеМногостраничногоРазделаНаСервере(Раздел) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ПоказатьСтраницуНеМногостраничногоРазделаАЛКО(ЭтаФорма, Раздел);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРазделов(НаименованиеРаздела, ИндексСтраницы,
					ЗаголовокОП_ИП = Неопределено, ЗаголовокОП_ЮЛ = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.УстановитьВидимостьРазделовАЛКО(ЭтаФорма, НаименованиеРаздела, ИндексСтраницы, 
										ЗаголовокОП_ИП, ЗаголовокОП_ЮЛ);
		
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеРасчет

// Расчет по строке выполняется либо в форме редактирования строки записи регистра сведений,
// либо при перерасчете - в длительной операции Пересчет итогов (после загрузки данных отчетов,
// сохраненных в старом формате, или при включении признака авторасчета в настройках).

// Во всех вариантах в конечном итоге отрабатывает процедура Расчет() модуля объекта.
	
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;  
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.
	Возврат;   
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяТекущейСтраницыПанели = "", Знач ОбластьИмя = "") Экспорт	
	// Процедура "заглушка". Для совместимости с общими механизмами работы с многостраничными разделами.	
	Возврат;	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеУдалитьСтраницу

&НаСервере
Процедура УдалитьСтраницуНаСервере(Раздел = Неопределено, ИндексСтраницы = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.УдалитьСтраницуОтчетаАЛКО(ЭтаФорма, Раздел, ИндексСтраницы);
				
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеДобавитьСтраницу

&НаСервере
Процедура ДобавитьСтраницуНаСервере(Раздел = Неопределено) Экспорт

	РегламентированнаяОтчетностьАЛКО.ВставитьСтраницуОтчетаАЛКО(ЭтаФорма, Раздел);
		
КонецПроцедуры
	
#КонецОбласти 

#Область АртефактОбновитьПеременныеМодуля

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
		
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя,ПеременныеМодуля) Экспорт
	
	Возврат (Лев(ИмяПоказателя, 1) = "_");	
		
КонецФункции

#КонецОбласти

#Область СлужебныеОбновитьСтраницу

&НаСервере
Процедура ОбновитьНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ОбновитьНаСервереАЛКО(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеОчистить

// Параметры Многостраничность, КолВоСтраницВРазделе сохранены для совместимости, поскольку данная процедура вызывается
// из РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов().
// Используется при очистке страницы отчета.
&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, 
													РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
			
	РегламентированнаяОтчетностьАЛКО.ОчисткаРегламентированногоОтчетаАЛКО(
								ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки);
КонецПроцедуры

// Используется при очистке всего отчета из РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов().
&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт

	РегламентированнаяОтчетностьАЛКОКлиент.ОчиститьОтчетАЛКО(ЭтаФорма, ВыполняемоеОповещение);
		
КонецПроцедуры

// Используется при очистке всего отчета из РегламентированнаяОтчетностьАЛКОКлиент.ОчиститьОтчетАЛКО().
&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ОчиститьНаСервереАЛКО(ЭтаФорма);
		
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеСохранитьОтчет

&НаСервере
Процедура ПередСохранениемНаСервере(СтруктураПараметров) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ПередСохранениемАЛКО(ЭтаФорма, СтруктураПараметров);
			
КонецПроцедуры
	
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт 
	
	РегламентированнаяОтчетностьАЛКОКлиент.СохранитьНаКлиентеАЛКО(ЭтаФорма, Автосохранение, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Функция СохранитьДанныеОтчетаНаСервере(Автосохранение = Ложь, КодИФНС, КПП, Вариант, 
					ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодИФНС", КодИФНС);
	СтруктураПараметров.Вставить("КПП", КПП);
	СтруктураПараметров.Вставить("Вариант", Вариант);
	СтруктураПараметров.Вставить("ВидДокументаНомерКорректировкиИзменен", 
								ВидДокументаНомерКорректировкиИзменен);
	СтруктураПараметров.Вставить("Автосохранение", Автосохранение);
	СтруктураПараметров.Вставить("НаимТекРаздела", НаимТекРаздела);
	
	Возврат РегламентированнаяОтчетностьАЛКО.СохранитьДанныеОтчетаАЛКО(ЭтаФорма, СтруктураПараметров);

КонецФункции

#КонецОбласти

#Область СлужебныеЗакрытьОтчет

&НаСервере
Процедура ПриЗакрытииНаСервере() Экспорт
	
	УдалитьИзВременногоХранилищаАдреса(Истина, Истина, Истина);
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеСкопироватьДанныеРегистровОтчета

&НаСервере
Процедура ПриОтменеКопированияДанныхНаСервере() Экспорт

	РегламентированнаяОтчетностьАЛКО.ОтменаКопированияДанныхПриЗаписиСНовымНомеромКорректировки(ЭтаФорма);

КонецПроцедуры
 
#КонецОбласти  

#Область СлужебныеВосстановитьОтчет

&НаСервере
Процедура ПродолжениеВосстановленияДанныхНаСервере(АдресВоВременномХранилище) Экспорт
			
	РегламентированнаяОтчетностьАЛКО.ПродолжениеВосстановленияДанныхАЛКО(ЭтаФорма, АдресВоВременномХранилище);
	ОбработкаПослеВосстановленияНаСервере();
	ОкончаниеИнициализацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПослеВосстановленияНаСервере() Экспорт

	РегламентированнаяОтчетностьАЛКО.ОбработкаПослеВосстановленияАЛКО(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОкончаниеИнициализацииНаСервере() Экспорт

	РегламентированнаяОтчетностьАЛКО.ОкончаниеИнициализацииАЛКО(ЭтаФорма);
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеФормаНавигацииПоОшибкам

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуНавигацииПоОшибкамБезПараметров()

	РегламентированнаяОтчетностьАЛКОКлиент.ОткрытьФормуНавигацииПоОшибкамБезПараметровАЛКО(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеДлительныеОперации

&НаСервере
Процедура ВосстановитьДанныеБезОткрытияФормыНаСервере() Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ВосстановитьДанныеБезОткрытияФормыАЛКО(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьДлительнуюОперацию_НаСервере(ВидДлОперации, ВидПечати = Неопределено) Экспорт

	Возврат РегламентированнаяОтчетностьАЛКО.ВыполнитьДлительнуюОперациюАЛКО(ЭтаФорма, ВидДлОперации, ВидПечати);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеДлительнойОперацииНаКлиенте()
	
	РегламентированнаяОтчетностьАЛКОКлиент.Подключаемый_ПроверитьВыполнениеДлительнойОперацииАЛКО(ЭтаФорма);
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗадания) Экспорт

	Возврат РегламентированнаяОтчетностьАЛКО.ОтменитьФоновоеЗадание(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура УдалитьИзВременногоХранилищаАдреса(ОсновнойАдрес, ВспомогательныйАдрес, АдресДвоичныхДанных)
	
	РегламентированнаяОтчетностьАЛКО.УдалитьИзВременногоХранилищаАдресаАЛКО(
				ЭтаФорма, ОсновнойАдрес, ВспомогательныйАдрес, АдресДвоичныхДанных); 
		
КонецПроцедуры

#Область ЗаполнитьАвтоДлительнаяОперация

// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.ПослеВыполненияДлительнойОперацииНаКлиентеАЛКО().
&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеАвтоЗаполненияНаСервере() Экспорт
		
	РегламентированнаяОтчетностьАЛКО.ЗагрузитьПодготовленныеДанныеАвтоЗаполненияАЛКО(ЭтаФорма);
			
КонецПроцедуры

// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.ПослеВыполненияДлительнойОперацииАЛКО()
// и из РегламентированнаяОтчетностьАЛКОКлиент.ПослеВосстановленияУдаленныхСтраницАЛКО().
&НаКлиенте
Процедура ПослеВыполненияЗадания_АвтоЗаполнения() Экспорт

	РегламентированнаяОтчетностьАЛКОКлиент.ПослеВыполненияЗадания_АвтоЗаполненияАЛКО(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ПечатьОтчетаДлительнаяОперация

&НаСервере
Функция ПослеВыполненияЗадания_ПечатьНаСервере(ВидПечати) Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПослеВыполненияЗадания_ПечатьАЛКО(ЭтаФорма, ВидПечати);
	
КонецФункции

#КонецОбласти 

#Область ОчисткаОтМусораДлительнаяОперация
 
&НаСервере
Процедура ПослеВыполненияЗадания_ОчисткаОтМусораНаСервере() Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ПослеВыполненияЗадания_ОчисткаОтМусораАЛКО(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныеФормаНастроек

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере() Экспорт
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПечать

&НаСервере
Функция ПроверкаГотовностиПечатиНаСервере() Экспорт
	
	Возврат РегламентированнаяОтчетностьАЛКО.ПроверкаГотовностиПечатиНаСервереАЛКО(ЭтаФорма);
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеВосстановитьУдаленныеСтраницы

// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.ВосстановитьУдаленныеСтраницыЗавершениеАЛКО()
&НаСервере
Процедура ВосстановитьУдаленныеСтраницыНаСервере() Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ВосстановитьУдаленныеСтраницыАЛКО(ЭтаФорма);
	
КонецПроцедуры	

// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.ВосстановитьУдаленныеСтраницыЗавершениеАЛКО()
// как процедура обработчика ожидания.
&НаКлиенте
Процедура ПослеВосстановленияУдаленныхСтраниц() Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.ПослеВосстановленияУдаленныхСтраницАЛКО(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЛицензии

&НаСервере
Процедура ОбработкаПолейСтраницыЛицензийНаСервере(ЭтоЛицензируемаяДеятельность) Экспорт
	
	РегламентированнаяОтчетностьАЛКО.ОбработкаПолейСтраницыЛицензийАЛКО(ЭтаФорма, ЭтоЛицензируемаяДеятельность);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеАктивизироватьЯчейку

&НаСервере
Функция ПолучитьДействиеПоляФормы(ИмяПоля, ИмяДействия) Экспорт
	Возврат Элементы[ИмяПоля].ПолучитьДействие(ИмяДействия);
КонецФункции

// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.АктивизироватьПолеАктивнойСтраницыСЗадержкойАЛКО()
// как процедура обработчика ожидания.
&НаКлиенте
Процедура АктивизироватьПолеАктивнойСтраницы() Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.АктивизироватьПолеАктивнойСтраницыАЛКО(ЭтаФорма);
			
КонецПроцедуры


// Вызывается из РегламентированнаяОтчетностьАЛКОКлиент.АктивизироватьЯчейкуСЗадержкойАЛКО()
// как процедура обработчика ожидания.
&НаКлиенте
Процедура АктивизироватьЯчейкуПослеЗакрытияОткрытыхФорм() Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.АктивизироватьЯчейкуПослеЗакрытияОткрытыхФормАЛКО(ЭтаФорма);
	
КонецПроцедуры

// Вызывается из формы отображения ошибок выгрузки.
&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиент.АктивизироватьЯчейкуАЛКО(ЭтаФорма, Ячейка);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеИнициализация

&НаКлиенте
Процедура Подключаемый_ОткрытьОтчетНаКлиенте()

	РегламентированнаяОтчетностьАЛКОКлиент.ОткрытьОтчетАЛКОИзОповещения(Неопределено, ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(ЭтаФорма);
			
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.СформироватьДеревоРазделовОтчетаАЛКО(ЭтаФорма);
			
КонецПроцедуры

#Область СлужебныеНастройкаОтчета

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраницНаСервере() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Титульный";
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Ложь;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.СохранятьМногострКакТЗ               = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь; 
		
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчетаНаСервере() Экспорт

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
		
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = "Декларация";
	СтрокаУровня1.ОриентацияСтраницы       = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДекларации() Экспорт
	
	// ОПИСАНИЕ ПАРАМЕТРОВ ФОРМЫ ОТЧЕТА.
	//
	// Версия формы.
	СтруктураРеквизитовФормы.мВерсияФормы = "27/10/2016"; // Второй вариант.
	
	СтруктураРеквизитовФормы.КНД = "";
	СтруктураРеквизитовФормы.НаименованиеОтчетаДляВыгрузки = "";
	
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Титульный";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Перечисления.Периодичность.Год;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	СтруктураРеквизитовФормы.СформироватьФормуОтчетаАвтоматически = Параметры.СформироватьФормуОтчетаАвтоматически;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = РегламентированнаяОтчетностьАЛКО.ИмяДействующегоМакета(
								ЭтаФорма.ИмяФормы, "СоставПоказателей", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
								
	ДатаПодписи	= ТекущаяДатаСеанса();
		
	//
	///////////////////////////////////////////////////////////////////////
	
	ЭтоЛицензируемаяДеятельность = Ложь;
	
	УказываютсяНомераЛицензии 	= Ложь;
	
	ЕстьСпискиВыбора 			= Ложь;
		
	ВходВРедактированиеПриАктивизации = Истина;
			
	// ОПИСАНИЕ ПАРАМЕТРОВ МНОГОСТРОЧНЫХ ГРУПП.
	
	// Вспомогательный список для облегчения создания нового отчета и предотвращения ошибок внимания.
	СписокИдГруппОтчета = Новый СписокЗначений;
	СписокИдГруппОтчета.Добавить("П0000100003", "мИдГруппы12"); // Раздел Декларация.	
	
	// Структура многострочных разделов формы.
	мСтруктураМногострочныхРазделов = Новый Структура;
	
	// Идентификаторы многострочных групп.
	Для каждого ЭлементСписка Из СписокИдГруппОтчета Цикл
	    СтруктураРеквизитовФормы.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
		мСтруктураМногострочныхРазделов.Вставить(ЭлементСписка.Значение, ЭлементСписка.Значение);
	КонецЦикла; 
	
	///////////////////////////////////////////////////////////////////////
	// Структура соответствия разделов и относящихся к ним групп.
	мСтруктураИдГрупп = Новый Структура;
	
	// Структура мСтруктураИдГрупп состоит из элементов, где ключ - Раздел - имя раздела,
	// значение - список ИдГрупп, относящихся к разделу, в списке значение - Идгруппы, 
	// представление - ИмяТаблицыФормы.
	//
	// Обработка создания элементов формы на основании данных мСтруктураИдГрупп
	// осуществляется в РегламентированнаяОтчетностьАЛКО.ИнициализацияЭлементовТаблицыФормыАЛКО().
	//
	// Для каждого раздела в группе ГруппаТаблицы генерируется группа "ГруппаТаблицы" + Раздел,
	// далее, если в списке групп раздела лишь одна группа,
	// генерируется группа "ГруппаТаблицыФормы" + ИмяТаблицыФормы, в которой впоследствии создается элемент 
	// "ТаблицаФормы" + ИдГруппы.
	// Если в списке групп несколько групп, в группе "ГруппаТаблицы" + Раздел создается
	// группа "СтраницыТаблиц" + Раздел типа "Страницы", в которой уже создаются
	// группы "СтраницаТаблицы" + ИмяТаблицыФормы типа "Страница", и только уже в группах Страница
	// гененрируется группа "ГруппаТаблицыФормы" + ИмяТаблицыФормы, в которой впоследствии 
	// создается элемент "ТаблицаФормы" + ИдГруппы.
	
	СписокИдГруппРаздела = Новый СписокЗначений;
	
	СписокИдГруппРаздела.Добавить(СтруктураРеквизитовФормы.мИдГруппы12, "Декларация");
	мСтруктураИдГрупп.Вставить("Декларация", СписокИдГруппРаздела);
	
	СтруктураРеквизитовФормы.Вставить("мСтруктураИдГрупп", мСтруктураИдГрупп);
		
	//
	///////////////////////////////////////////////////////////////////////
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти


