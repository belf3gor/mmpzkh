#Область ПрограммныйИнтерфейс

// Вызывается при выполнении команды "ВозобновитьПроверку" из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС
//
Процедура ВозобновитьПроверку(Форма) Экспорт
	
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиИПодбора(Форма);
	
	ТребуетсяВопрос = Ложь;
	
	Если Форма.Модифицированность Тогда
		
		Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект)
			И ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
	
			Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
			
			ТребуетсяВопрос  = Истина;
			ПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			ТекстВопроса     = СтрШаблон(НСтр("ru = 'Документ был изменен. %1?'"), ПровестиЗаписать);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Форма", Форма);
		ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВозобновитьПроверкуИПодборПриОтветеНаВопрос",
			ЭтотОбъект, ПараметрыВопроса);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки);
			
		КонецЕсли;
	
	
КонецПроцедуры

// Вызывается при переходе по гиперссылке открытия формы проверки и подбора из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС:
// 	 * НавигационнаяСсылкаФорматированнойСтроки - Строка - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиИПодбора()
// 	 * СтандартнаяОбработка - Булево - признак стандартной системной обработки события перехода по гиперссылке
//
Процедура ДекорацияСканироватьПроверитьТоварыОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиИПодбора(Форма);
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ПроверкаИПодборПродукцииМОТПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиИПодбора() Тогда
	
		ТребуетсяВопрос = Ложь;
		
		Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект)
			И ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
	
			Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
			
			Если Объект.Ссылка.Пустая() Тогда
				
				ТребуетсяВопрос = Истина;
				ТекстВопроса    = НСтр("ru = 'Сканирование табачной продукции возможно только в записанном документе. Записать?'");
				
			ИначеЕсли Форма.Модифицированность Тогда
				
				ТребуетсяВопрос  = Истина;
				ПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
				ТекстВопроса     = СтрШаблон(НСтр("ru = 'Документ был изменен. %1?'"), ПровестиЗаписать);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТребуетсяВопрос Тогда
			
			ПараметрыВопроса = Новый Структура();
			ПараметрыВопроса.Вставить("Форма", Форма);
			ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПроверкиИПодбораПриОтветеНаВопрос",
				ЭтотОбъект, ПараметрыВопроса);
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для установки параметров открытия формы проверки и подбора табачной продукции
//
//Параметры:
// Форма - УправляемаяФорма - форма прикладного документа или общая форма, в который встраивается функциональность библиотеки ГосИС:
//Возвращаемое значение:
// ПараметрыОткрытия - Структура - значения, используемые для управления формой проверки и подбора:
//  ИмяРеквизитаФормыОбъект              - Строка - имя реквизита формы документа, содержащего объект документа. Для открытия не из формы документа должен быть пустой строкой
//  ИмяРеквизитаОрганизация              - Строка - имя реквизита документа или реквизита формы, содержащего организацию
//  ИмяРеквизитаКонтрагент               - Строка - имя реквизита документа или реквизита формы, содержащего контрагента
//  ИмяРеквизитаСклад                    - Строка - имя реквизита документа или реквизита формы, содержащего склад
//  ИмяРеквизитаДокументОснование        - Строка - имя реквизита документа, содержащего его основание. Если основания нет, должен быть пустой строкой.
//  ПроверятьНеобходимостьПеремаркировки - Булево - признак необходимости контроля состава упаковок в форме проверки.
//  РедактированиеФормыНедоступно        - Булево - признак недоступности редактирования формы, из которой открывается форма проверки
//  АдресПроверяемыхДанных               - Строка - адрес данных для загрузки в форму проверки, если передача данных происходит не через ссылку на документ
//  ОписаниеОповещенияПриЗакрытии        - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия формы проверки
//  ПроверятьМодифицированность          - Булево - признак необходимости записи документа перед открытием формы проверки
//
Функция ПараметрыОткрытияФормыПроверкиИПодбора(Форма) Экспорт
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ИмяРеквизитаФормыОбъект",             "Объект");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаОрганизация",             "Организация");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаКонтрагент",              "Контрагент");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаСклад",                   "Склад");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаДокументОснование",       "ДокументОснование");
	ПараметрыОткрытия.Вставить("ПроверятьНеобходимостьПеремаркировки", Истина);
	ПараметрыОткрытия.Вставить("РедактированиеФормыНедоступно",        Ложь);
	ПараметрыОткрытия.Вставить("АдресПроверяемыхДанных",               "");
	ПараметрыОткрытия.Вставить("ПроверятьМодифицированность",          Истина);
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияПриЗакрытии",        Новый ОписаниеОповещения(
		"ПриЗакрытииФормыПроверкиИПодбора",
		ЭтотОбъект,
		Новый Структура("Форма",Форма)));

	ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый.ПриУстановкеПараметровОткрытияФормыПроверкиИПодбора(Форма, ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

// Предназаначена для открытия формы проверки и подбора табачной продукции
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа или общая форма, в который встраивается функциональность библиотеки ГосИС:
// 	 * ПараметрыОткрытияФормыПроверки - Структура - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыОткрытияФормыПроверкиИПодбора()
//
Процедура ОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки) Экспорт

	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеФормыНедоступно",        ПараметрыОткрытияФормыПроверки.РедактированиеФормыНедоступно);
	ПараметрыФормы.Вставить("ПроверятьНеобходимостьПеремаркировки", ПараметрыОткрытияФормыПроверки.ПроверятьНеобходимостьПеремаркировки);
	ПараметрыФормы.Вставить("АдресПроверяемыхДанных",               ПараметрыОткрытияФормыПроверки.АдресПроверяемыхДанных);
	
	Если ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		
		ПараметрыФормы.Вставить("Склад",                   Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад]);
		ПараметрыФормы.Вставить("Организация",             Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
		ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Истина);
		ПараметрыФормы.Вставить("НачальныйСтатусПроверки", ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
		ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок", Истина);
	
	Иначе
		
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		
		ПараметрыФормы.Вставить("ПроверяемыйДокумент", Объект.Ссылка);
		ПараметрыФормы.Вставить("Склад",               Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад]);
		ПараметрыФормы.Вставить("Организация",         Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
		
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоЧекККМ(Форма)
		 Или ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоЧекККМВозврат(Форма) Тогда
			ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Истина);
			ПараметрыФормы.Вставить("НачальныйСтатусПроверки", ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
			ПараметрыФормы.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Ложь);
			ПараметрыФормы.Вставить("НачальныйСтатусПроверки", ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась"));
			
			Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаДокументОснование) Тогда
				ПараметрыФормы.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию",
					ЗначениеЗаполнено(Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаДокументОснование]));
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоДокументПриобретения(Форма) Тогда
			ПараметрыФормы.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Истина);
			ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок",         Ложь);
		Иначе
			ПараметрыФормы.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Ложь);
			ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок",         Истина);
		КонецЕсли;
		
		Если НЕ ПараметрыФормы.РежимПодбораСуществующихУпаковок Тогда
			ПараметрыФормы.Вставить("Контрагент", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаКонтрагент]);
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый.ПередОткрытиемФормыПроверкиПодбора(
		Форма, ПараметрыОткрытияФормыПроверки, ПараметрыФормы, Отказ);
	
	Если Отказ Тогда
		Возврат;
	ИначеЕсли ПараметрыОткрытияФормыПроверки.ОписаниеОповещенияПриЗакрытии <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор", ПараметрыФормы,
			Форма, Форма.УникальныйИдентификатор, , ,
			ПараметрыОткрытияФормыПроверки.ОписаниеОповещенияПриЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор", ПараметрыФормы,
			Форма, Форма.УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Предназаначена для открытия формы проверки и подбора табачной продукции в режиме возобновления проверки
// 
// Параметры:
// 	 * Форма - УправляемаяФорма - форма прикладного документа или общая форма, в который встраивается функциональность библиотеки ГосИС:
// 	 * ПараметрыОткрытияФормыПроверки - Структура - см. функцию ПроверкаИПодборПродукцииМОТПКлиентСервер.ПараметрыОткрытияФормыПроверкиИПодбора()
//
Процедура ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки) Экспорт
	
	Если ПроверкаИПодборПродукцииМОТПВызовСервера.ВозобновитьПроверкуПоДокументу(
		Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект].Ссылка) Тогда
		ОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки);
	КонецЕсли;
	
КонецПроцедуры


// Обновляет статус проверки маркируемой продукции при изменении количества/состава строк по кешированным данным
//   состава табличной части "Штрихкоды упаковок"
// 
// Параметры:
//   Форма - УправляемаяФорма - редактируемая форма
//   ДанныеСтроки - ДанныеФормыЭлементКоллекции - редактируемая строка
//   ДанныеКешаСтроки - Структура - данные строки перед редактированием
// Возвращаемое значение:
//   Булево - требуется пересчет кеша для всей табличной части
Функция ПрименитьКешПоСтроке(Форма, ДанныеСтроки, ДанныеКешаСтроки) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииФормыПроверкиГосИС.МОТП;
	
	КлючСвязиИзменен = ДанныеСтроки.Номенклатура<>ДанныеКешаСтроки.Номенклатура
		ИЛИ (ПараметрыИнтеграции.ХарактеристикиИспользуются
			И ДанныеСтроки.Характеристика<>ДанныеКешаСтроки.Характеристика)
		ИЛИ (ПараметрыИнтеграции.СерииИспользуются 
			И ДанныеСтроки.Серия<>ДанныеКешаСтроки.Серия);
	
	Объект = ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект;
	ТабличнаяЧастьТовары = Форма[Объект][ПараметрыИнтеграции.ИмяТабличнойЧастиТовары];
	
	МассивКлючейСвязи = Новый Массив;
	МассивКлючейСвязи.Добавить("Номенклатура");
	Если ПараметрыИнтеграции.ХарактеристикиИспользуются Тогда
		МассивКлючейСвязи.Добавить("Характеристика");
	КонецЕсли;
	Если ПараметрыИнтеграции.СерииИспользуются Тогда
		МассивКлючейСвязи.Добавить("Серия");
	КонецЕсли;
	СтруктураПоиска = Новый Структура(СтрСоединить(МассивКлючейСвязи,","));

	Если КлючСвязиИзменен И ДанныеКешаСтроки.МаркируемаяПродукцияГосИС Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеКешаСтроки);
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
		Если СтрокиКеша.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.МаркируемаяПродукцияГосИС Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
		СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
		СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
		КоличествоПоКлючу = 0;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
		КонецЦикла;
		Если СтрокиКеша.Количество() = 0 Тогда
			СтатусПроверкиГосИС = 2;
		ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
			СтатусПроверкиГосИС = 1;
		Иначе
			СтатусПроверкиГосИС = 2;
		КонецЕсли;
		Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
			СтрокаПоКлючу.СтатусПроверкиГосИС = СтатусПроверкиГосИС;
		КонецЦикла;
		
	Иначе
		ДанныеСтроки.СтатусПроверкиГосИС = 0;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Готовит данные для генерации серий
// 
// Параметры:
// 	ПодобраннаяТабачнаяПродукция - ТаблицаЗначений - таблица подобранной табачной продукции.
// Возвращаемое значение:
// 	Массив - содержит структуры (См. ИнтеграцияМОТПУТКлиентСервер.СтруктураДанныхДляГенерацииСерии)
//
Функция ДанныеДляГенерацииСерийПоПодобраннойТабачнойПродкуции(ПодобраннаяТабачнаяПродукция) Экспорт
	
	ДанныеДляГенерации = Новый Массив;
	
	СтатусыСерийСерияНеУказана = ПроверкаИПодборПродукцииМОТПКлиентСервер.СтатусыСерийСерияНеУказана();
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяТабачнаяПродукция Цикл
		
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПодобраннойПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			
			ДанныеПоСтроке = СтруктураДанныхДляГенерацииСерии();
			ЗаполнитьЗначенияСвойств(ДанныеПоСтроке, СтрокаПодобраннойПродукции);
			
			ДанныеСерииСуществуют = Ложь;
			
			Для Каждого ДанныеСерии Из ДанныеДляГенерации Цикл
				ДанныеСерииСовпадают = Истина;
				
				Для Каждого КлючИЗначение Из ДанныеПоСтроке Цикл
					ДанныеСерииСовпадают = ДанныеСерииСовпадают И (ДанныеСерии[КлючИЗначение.Ключ] = КлючИЗначение.Значение);
					Если НЕ ДанныеСерииСовпадают Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеСерииСовпадают Тогда
					ДанныеСерииСуществуют = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДанныеСерииСуществуют Тогда
				ДанныеДляГенерации.Добавить(ДанныеПоСтроке);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляГенерации;

КонецФункции

Процедура ЗаполнитьСерииВПодобраннойТабачнойПродукции(Форма, ДанныеСерий, ПодобраннаяТабачнаяПродукция) Экспорт
	
	Для Каждого ДанныеСерии Из ДанныеСерий Цикл
		Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяТабачнаяПродукция Цикл
			Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Серия) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючевыеЗначенияСовпадают = Истина;
			
			Для Каждого КлючИЗначение Из ДанныеСерии Цикл
				Если КлючИЗначение.Ключ = "Серия" Тогда
					Продолжить;
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПодобраннойПродукции, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючевыеЗначенияСовпадают = КлючевыеЗначенияСовпадают
					И (СтрокаПодобраннойПродукции[КлючИЗначение.Ключ] = КлючИЗначение.Значение);
				
				Если НЕ КлючевыеЗначенияСовпадают Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если КлючевыеЗначенияСовпадают Тогда
				Если ДанныеСерии.ЕстьОшибка Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 произошла ошибка при создании серии по причине %2'"),
						СтрокаПодобраннойПродукции.НомерСтроки,
						ДанныеСерии.ТекстОшибки);
					
					ИмяПоля = "ПодобраннаяТабачнаяПродукция["
						+ ПодобраннаяТабачнаяПродукция.Индекс(СтрокаПодобраннойПродукции)
						+ "].Серия";
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,ИмяПоля);
				Иначе
					СтрокаПодобраннойПродукции.Серия = ДанныеСерии.Серия;
					
					СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииСерии(Форма,
						СтрокаПодобраннойПродукции, Неопределено, Форма.ПараметрыУказанияСерий);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет специфичные параметры указания серий для товаров, указанных в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма с товарами, для которой необходимо определить параметры указания серий.
//	ПараметрыУказанияСерий - Структура - дополняемые параметры указания серий.
//
Процедура ДополнитьПараметрыУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	Если Форма.ИспользоватьСерииНоменклатуры Тогда
		ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый.ДополнитьПараметрыУказанияСерий(Форма, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

// Подготовливает структуру, массив которых в дальнейшем будет передан в процедуру генерации серий.
// 
// Параметры:
// Возвращаемое значение:
// 	Структура - Описание:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура, для которой будет генерироваться серия.
// * Серия        - ОпределяемыйТип.СерииНоменклатуры   - В данное значение будет записана сгенерированная серия.
// * МРЦ          - Число - Максимальная розничная цена табачной продукции.
// * ЕстьОшибка   - Булево - Будет установлено в Истина, если по каким то причинам серия сгенерирована не будет.
// * ТекстОшибки  - Строка - причина, по которой серия не генерировалась.
//
Функция СтруктураДанныхДляГенерацииСерии() Экспорт
	
	СтруктураДанных = Новый Структура();
	
	ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый.ПолучитьДанныеДляГенерацииСерии(СтруктураДанных);
	
	Возврат СтруктураДанных;
	
КонецФункции

#Область РасчетХешСумм

// Пересчитывает хеш-суммы всех упаковок формы. На клиенте формируется структура для расчёта, на сервере
// вычисляются хеш-суммы и проверяется необходимость перемаркировки.
//
// Параметры:
//	Форма - УправляемаяФорма - форма проверки и подбора маркируемой продкуции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Если НЕ Форма.ПроверятьНеобходимостьПеремаркировки Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		Возврат;
	КонецЕсли;
	
	ЗначенияСтрокДерева = Новый Массив();
	
	ПроверкаИПодборПродукцииИСКлиент.ЗаполнитьЗначенияСтрокДереваДляРасчетаХешСумм(ЗначенияСтрокДерева, Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы());

	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииМОТПВызовСервера.ПересчитатьХешСуммыВсехУпаковок(ЗначенияСтрокДерева);
	
	ПроверкаИПодборПродукцииИСКлиент.ЗаполнитьХешСуммыВСтрокахДереваУпаковок(ЗначенияСтрокДерева, Форма.ДеревоМаркированнойПродукции);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЕстьРасхожденияПоРезультатамПроверкиИПодбора(ПодобраннаяТабачнаяПродукция) Экспорт
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяТабачнаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество <> СтрокаПодобраннойПродукции.КоличествоПодобрано Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	 
	Возврат Ложь;
	
КонецФункции

Процедура ОткрытьФормуПроверкиИПодбораПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		
	ЗаписаноУспешно = Ложь;
	
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;

	Если ЗаписаноУспешно Тогда
		ОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВозобновитьПроверкуИПодборПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		
	ЗаписаноУспешно = Ложь;
	
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;

	Если ЗаписаноУспешно Тогда
		ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораТабачнойПродукции(Форма, ПараметрыОткрытияФормыПроверки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытииФормыПроверкиИПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверкаИПодборПродукцииМОТПКлиентПереопределяемый.ПриЗакрытииФормыПроверкиИПодбора(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

