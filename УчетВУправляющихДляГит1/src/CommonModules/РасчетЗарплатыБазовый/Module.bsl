
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ФормироватьЗаписиТолькоДляИзменений, ЗаполнятьНаборЗаписей) Экспорт
	
	Если СтруктураДанных.ДанныеОПлановыхНачислениях = Неопределено
		ИЛИ СтруктураДанных.ДанныеОПлановыхНачислениях.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПлановыеНачисления.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОПлановыхНачислениях.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ПлановыеНачисления.Загрузить(СтруктураДанных.ДанныеОПлановыхНачислениях);
	КонецЕсли; 
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РегистраторОбъект)) Тогда
		Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
			И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
			
			Движения.ПлановыеНачисления.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхУдержаний(Движения, СтруктураДанных) Экспорт
	
	ДанныеПлановыхУдержаний = СтруктураДанных.ДанныеПлановыхУдержаний;
	
	ЗаполнятьДокументОснование = ДанныеПлановыхУдержаний.Колонки.Найти("ДокументОснование") <> Неопределено;
	ИспользуютсяВозвратныеСобытия = ДанныеПлановыхУдержаний.Колонки.Найти("ДействуетДо") <> Неопределено;
	
	// Признак Использования по окончании может быть и в явном виде указан в таблице, 
	// в этом случае используем именно его значение.
	ИспользованиеПоОкончанииОпределено = ДанныеПлановыхУдержаний.Колонки.Найти("ИспользуетсяПоОкончании") <> Неопределено;
	
	Регистратор = Движения.ПлановыеУдержания.Отбор.Регистратор.Значение;
	
	Если ИспользуютсяВозвратныеСобытия Тогда
		
		// Получим действующие начисления, чтобы записать возвратные движения,
		// Признак Используется начисления должен соответствовать значению, действующему на дату текущего события.
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ИзмеренияДаты.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ИзмеренияДаты.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
		Если ЗаполнятьДокументОснование Тогда
			ИзмеренияДаты.Колонки.Добавить("ДокументОснование", Метаданные.РегистрыСведений.ПлановыеУдержания.Измерения.ДокументОснование.Тип);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеПлановыхУдержаний, ИзмеренияДаты);
		ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "<>", Регистратор);
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеУдержания",
			МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
			ПараметрыПостроения);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПлановыеУдержания.ФизическоеЛицо,
		|	ПлановыеУдержания.Организация,
		|	ПлановыеУдержания.Удержание,
		|	ПлановыеУдержания.ДокументОснование,
		|	ПлановыеУдержания.Размер
		|ИЗ
		|	ВТПлановыеУдержанияСрезПоследних КАК ПлановыеУдержания
		|ГДЕ
		|	ПлановыеУдержания.Используется");
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ДействующиеУдержания = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ФизическоеЛицо");
		ОтборСтрок.Вставить("Организация");
		ОтборСтрок.Вставить("Удержание");
		
		Если ЗаполнятьДокументОснование Тогда
			ОтборСтрок.Вставить("ДокументОснование");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеПлановыхУдержаний Цикл
		
		СтрокаДвижений = Движения.ПлановыеУдержания.Добавить();
		СтрокаДвижений.Период = СтрокаДанных.ДатаСобытия;
		СтрокаДвижений.Организация = СтрокаДанных.Организация;
		СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДвижений.Удержание = СтрокаДанных.Удержание;
		
		Если ЗаполнятьДокументОснование Тогда
			СтрокаДвижений.ДокументОснование = СтрокаДанных.ДокументОснование;
		КонецЕсли;
		
		СтрокаДвижений.Используется = СтрокаДанных.Используется;
		СтрокаДвижений.Размер = СтрокаДанных.Размер;
		
		Если ИспользуютсяВозвратныеСобытия И ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
			
			СтрокаДвижений.ДействуетДо = СтрокаДанных.ДействуетДо;
			ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаДвижений);
			НайденныеСтроки = ДействующиеУдержания.НайтиСтроки(ОтборСтрок);
			УдержаниеИспользовалось = НайденныеСтроки.Количество() > 0;
			
			Если ИспользованиеПоОкончанииОпределено Тогда
				// Использование по окончании указано в исходной таблице.
				СтрокаДвижений.ИспользуетсяПоОкончании = СтрокаДанных.ИспользуетсяПоОкончании;
			Иначе
				// Использование по окончании соответствует действию удержания до текущего события.
				СтрокаДвижений.ИспользуетсяПоОкончании = УдержаниеИспользовалось;
			КонецЕсли;
			
			Если УдержаниеИспользовалось Тогда 
				СтрокаДвижений.РазмерПоОкончании = НайденныеСтроки[0].Размер;
			КонецЕсли;
			
		КонецЕсли;
		
		Движения.ПлановыеУдержания.Записывать = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхВыплат(Движения, ДанныеОПлановыхВыплатах) Экспорт
	
	Для Каждого СтрокаДанных Из ДанныеОПлановыхВыплатах Цикл
		
		Движения.ПлановыеАвансы.Записывать = Истина;
		
		НоваяСтрока = Движения.ПлановыеАвансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодобратьДокументНачисленияЗарплаты(ДокументСсылка, МесяцНачисления, Организация, Подразделение = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НачислениеЗарплаты.Ссылка КАК Документ
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.МесяцНачисления = &МесяцНачисления
	|	И НачислениеЗарплаты.Организация = &Организация
	|	И (НачислениеЗарплаты.Подразделение = &Подразделение
	|			ИЛИ &ПоВсемПодразделениям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачислениеЗарплаты.Дата,
	|	НачислениеЗарплаты.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", Подразделение = Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
	Иначе
		ДокументОбъект = Документы.НачислениеЗарплаты.СоздатьДокумент();
		ДокументОбъект.Дата = НачалоДня(КонецМесяца(МесяцНачисления));
		ДокументОбъект.МесяцНачисления = МесяцНачисления;
		ДокументОбъект.Организация = Организация;
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ДокументОбъект.Подразделение = Подразделение;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьДокументНачисленияЗарплаты(ДокументОбъект);
	ДокументОбъект.Записать();
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция ОснованиеИсчисленияНалогаСОтсроченнойУплатой(Основания) Экспорт

	Результаты = Новый Соответствие;
	БольничныйЛист = Тип("ДокументСсылка.БольничныйЛист");
	Отпуск = Тип("ДокументСсылка.Отпуск");
	Для каждого Основание Из Основания Цикл
		ТипОснования = ТипЗнч(Основание);
		Результаты.Вставить(Основание, ТипОснования = БольничныйЛист Или ТипОснования = Отпуск);
	КонецЦикла;
	
	Возврат Результаты
	
КонецФункции 

Функция РазностьДатПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДнейПроизводственногоКалендаря.Ссылка КАК ВидДня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней
		|ИЗ
		|	Перечисление.ВидыДнейПроизводственногоКалендаря КАК ВидыДнейПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВидыДнейПроизводственногоКалендаря.Ссылка = ДанныеПроизводственногоКалендаря.ВидДня
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДнейПроизводственногоКалендаря.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДня";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДнейПоВидам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КоличествоДнейПоВидам.Вставить(Выборка.ВидДня, Выборка.КоличествоДней);
	КонецЦикла;
		
	Возврат КоличествоДнейПоВидам;
	
КонецФункции

Функция РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов", 0, 0);
	
	ДанныеКалендаря = РазностьДатПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода);
	
	РабочиеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	РабочихДнейЧасов.Дней = РабочиеДни + ПредпраздничныеДни;
	РабочихДнейЧасов.Часов = РабочиеДни * 8 + ПредпраздничныеДни * 7;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

// Заполняет таблицу значений, содержащую данные для начисления зарплаты.
//
// Параметры:
//	см. РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты
//	МесяцНачисления - в базовой реализации начисления получаются 
//	только за месяц в целом, а не за произвольный период.
//
Функция РезультатНачисленияРасчетаЗарплаты(Организация, МесяцНачисления, Документ, Подразделение, Сотрудники) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("ПланируемаяДатаВыплаты", КонецМесяца(МесяцНачисления));
	
	КадровыеДанныеДокумента = "ГоловнаяОрганизация,Организация,Подразделение,ТарифнаяСтавка,ПроцентСевернойНадбавки,ДатаРождения";
	КадровыеДанные = КадровыеДанныеДокумента;
	Если ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные) Тогда
		ПоляСортировки = Сред(КадровыеДанные, СтрДлина(КадровыеДанныеДокумента) + 2);
	Иначе
		ПоляСортировки = "";
	КонецЕсли;
	
	Если Сотрудники = Неопределено Тогда
		
		ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизацииПредварительно";
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет.
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 					= МесяцНачисления;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 				= КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= КадровыеДанные;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций, ИмяВТСотрудникиОрганизации);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизации.Период КАК Период,
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СотрудникиОрганизации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	СотрудникиОрганизации.Организация КАК Организация,
			|	СотрудникиОрганизации.Подразделение КАК Подразделение,
			|	СотрудникиОрганизации.ТарифнаяСтавка КАК ТарифнаяСтавка,
			|	СотрудникиОрганизации.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
			|	СотрудникиОрганизации.ДатаРождения КАК ДатаРождения
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ИЗ
			|	ВТСотрудникиОрганизацииПредварительно КАК СотрудникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, МЕСЯЦ) = НачисленияУдержанияПоСотрудникам.Период)
			|			И СотрудникиОрганизации.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL 
			|	И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)";
			
		Если Не ПустаяСтрока(ПоляСортировки) Тогда
			
			СтрокаЗамены = "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения";
			ПоляСортировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляСортировки);
			
			Для каждого ПолеСортировки Из ПоляСортировки Цикл
				СтрокаЗамены = СтрокаЗамены + "," + Символы.ПС + Символы.Таб
					+ "СотрудникиОрганизации." + ПолеСортировки + " КАК " + ПолеСортировки;
			КонецЦикла;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ДатаРождения КАК ДатаРождения", СтрокаЗамены);
			
		КонецЕсли; 
			
		Если Не ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СотрудникиОрганизации.Подразделение В ИЕРАРХИИ(&Подразделение)", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.Выполнить();
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	&Период КАК Период,
			|	Сотрудники.Ссылка КАК Сотрудник
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО (НачисленияУдержанияПоСотрудникам.Период = &Месяц)
			|			И Сотрудники.Ссылка = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Регистратор)
			|			И (НачисленияУдержанияПоСотрудникам.Регистратор ССЫЛКА Документ.НачислениеЗарплаты)
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)
			|	И НачисленияУдержанияПоСотрудникам.Сумма ЕСТЬ NULL ";
				
			
		Запрос.УстановитьПараметр("Период", КонецМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Месяц", НачалоМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
		Запрос.Выполнить();
		
		ОписательВТ = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
		ОписательВТ.ИмяВТКадровыеДанныеСотрудников = "ВТСотрудникиОрганизации";
		
		КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВТ, Истина, КадровыеДанные);
		
	КонецЕсли;
	
	Если МесяцНачисления < УчетСтраховыхВзносовКлиентСервер.ДатаОбъединенияСтраховойИНакопительнойЧастейВзносовПФР() Тогда
		КадровыйУчет.ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
			"ПлановыеНачисления",
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				"ВТСотрудникиОрганизации",
				"Сотрудник"));
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисления.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.Размер КАК Результат,
		|	ВЫБОР
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|			ТОГДА ИСТИНА
		|		КОГДА ПлановыеНачисления.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Прочее)
		|				И ПлановыеНачисления.Начисление.ВходитВБазуРКИСН
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ВходитВБазуРКиСН,
		|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ПлановыеНачисления.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	Начисления.Ссылка КАК Начисление,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Результат,
		|	ИСТИНА КАК ВходитВБазуРКиСН,
		|	&ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
		|ПОМЕСТИТЬ ВТДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда))";
		
	КонецЕсли;
	
	Запрос.Выполнить();
		
	Возврат ТаблицаЗаполненияНачислений(Запрос.МенеджерВременныхТаблиц);
	
КонецФункции

Функция ТаблицаЗаполненияНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеНачисленийПоСотрудникам.Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение,
		|	ДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты,
		|	СУММА(ДанныеНачисленийПоСотрудникам.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТСводныеДанныеНачисленийПоСотрудникам
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеНачисленийПоСотрудникам
		|ГДЕ
		|	ДанныеНачисленийПоСотрудникам.ВходитВБазуРКиСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеНачисленийПоСотрудникам.Сотрудник,
		|	ДанныеНачисленийПоСотрудникам.Подразделение,
		|	ДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыеДанныеСотрудников.Период,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Сотрудник КАК Справочник.Сотрудники) КАК Сотрудник,
		|	ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Подразделение КАК Справочник.ПодразделенияОрганизаций) КАК Подразделение,
		|	СводныеДанныеНачисленийПоСотрудникам.ПланируемаяДатаВыплаты,
		|	СводныеДанныеНачисленийПоСотрудникам.Результат КАК Результат,
		|	КадровыеДанныеСотрудников.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.Подразделение.РайонныйКоэффициент
		|		КОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.Организация.РайонныйКоэффициент
		|		КОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент > 1
		|			ТОГДА КадровыеДанныеСотрудников.ГоловнаяОрганизация.РайонныйКоэффициент
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК РайонныйКоэффициент
		|ПОМЕСТИТЬ ВТДанныеПоКоэффициентамСотрудников
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСводныеДанныеНачисленийПоСотрудникам КАК СводныеДанныеНачисленийПоСотрудникам
		|		ПО КадровыеДанныеСотрудников.Сотрудник = СводныеДанныеНачисленийПоСотрудникам.Сотрудник
		|			И КадровыеДанныеСотрудников.Подразделение = СводныеДанныеНачисленийПоСотрудникам.Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПоКоэффициентамСотрудников.Период,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ВТПодразделенияПериоды
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников";
		
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТПодразделенияПериоды", "СтруктурнаяЕдиница"));
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
		|	ДанныеПоСотрудникам.Начисление КАК Начисление,
		|	ВЫБОР
		|		КОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА ДанныеПоСотрудникам.Начисление.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ КАК КодВычета,
		|	ДанныеПоСотрудникам.Результат КАК Результат,
		|	ДанныеПоСотрудникам.ВходитВБазуРКиСН КАК ВходитВБазуРКиСН,
		|	0 КАК КоэффициентПересчета,
		|	ДанныеПоСотрудникам.ПланируемаяДатаВыплаты
		|ИЗ
		|	ВТДанныеНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоСотрудникам.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1),
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент - 1,
		|	ДанныеПоКоэффициентамСотрудников.ПланируемаяДатаВыплаты
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент))
		|			И (ДанныеПоКоэффициентамСотрудников.РайонныйКоэффициент <> 1)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеПоКоэффициентамСотрудников.Сотрудник,
		|	ДанныеПоКоэффициентамСотрудников.Подразделение,
		|	Начисления.Ссылка,
		|	ВЫБОР
		|		КОГДА Начисления.КодДоходаНДФЛ.ИмеетЕдинственныйВычет
		|			ТОГДА Начисления.КодДоходаНДФЛ.ВычетПоУмолчанию
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	КОНЕЦ,
		|	ДанныеПоКоэффициентамСотрудников.Результат * ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
		|	ЛОЖЬ,
		|	ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки / 100,
		|	ДанныеПоКоэффициентамСотрудников.ПланируемаяДатаВыплаты
		|ИЗ
		|	ВТДанныеПоКоэффициентамСотрудников КАК ДанныеПоКоэффициентамСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО (Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
		|			И (ДанныеПоКоэффициентамСотрудников.ПроцентСевернойНадбавки <> 0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловия
		|		ПО ДанныеПоКоэффициентамСотрудников.Период = ТерриториальныеУсловия.Период
		|			И ДанныеПоКоэффициентамСотрудников.Подразделение = ТерриториальныеУсловия.СтруктурнаяЕдиница
		|			И (ТерриториальныеУсловия.ТерриториальныеУсловияПФР В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.РКСМ), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПРОЧ)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ПО ДанныеПоКоэффициентамСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисление";
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "КадровыеДанныеСотрудников");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Конструирует объект для хранения данных для проведения.
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо.
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений.
//
//		ИсчисленныеВзносы - таблица значений.
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах).
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо.
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
	"МенеджерВременныхТаблиц, 
	|НачисленияПоСотрудникам,
	|ОтработанноеВремяПоСотрудникам,
	|УдержанияПоСотрудникам, 
	|ИсчисленныйНДФЛ, 
	|ИсчисленныеВзносы";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений, ПолеДатыДействия, ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	// Получаем массив имен табличных частей.
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице.
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса 
			+ "ВЫБРАТЬ
			|	ТаблицаНачислений.НомерСтроки КАК ИдентификаторСтроки,
			|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
			|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК ПериодДействия,
			|	ТаблицаНачислений.ДатаДействия КАК ДатаНачала,
			|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания,
			|	ТаблицаНачислений.Начисление КАК Начисление,
			|	ТаблицаНачислений.Результат КАК СуммаДохода,
			|	ТаблицаНачислений.Результат КАК Сумма,
			|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаНДФЛ,
			|	ТаблицаНачислений.СуммаВычета КАК СуммаВычетаВзносы,
			|	ТаблицаНачислений.КодВычета КАК КодВычетаНДФЛ,
			|	ТаблицаНачислений.Подразделение,
			|	ТаблицаНачислений.Подразделение КАК ПодразделениеОрганизации,
			|	ТаблицаНачислений.Подразделение КАК ТерриторияВыполненияРаботВОрганизации
			|";
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ПланируемаяДатаВыплаты") <> Неопределено Тогда
			
			ТекстЗапроса = ТекстЗапроса + ",
				|	ТаблицаНачислений.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты";
			
		КонецЕсли;
		
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ПОМЕСТИТЬ ВТНачисления
				|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса 
			+ "
			|ИЗ
			|	#ТаблицаНачислений КАК ТаблицаНачислений
			|ГДЕ
			|	ТаблицаНачислений.Ссылка = &Ссылка
			|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|	И ВЫРАЗИТЬ(ТаблицаНачислений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли; 
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	// Устанавливаем поле даты действия.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК ПериодДействия", ПолеДатыДействия + ", МЕСЯЦ) КАК ПериодДействия");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия КАК ДатаНачала", ПолеДатыДействия + " КАК ДатаНачала");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания", ПолеДатыДействия + ", МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	Запрос.Выполнить();
	
	// Составляем текст запроса таблицы значений.
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		
		ТекстЗапросаПолей =
			"ВЫБРАТЬ
			|	Начисления.НомерСтроки КАК ИдентификаторСтроки,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Начисления.Сотрудник КАК Сотрудник,
			|	Начисления.Подразделение,
			|	Начисления.Начисление КАК Начисление,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.ОтработаноДней КАК ОтработаноДней,
			|	Начисления.ОтработаноЧасов КАК ОтработаноЧасов,
			|	Начисления.ОтработаноДней КАК ОплаченоДней,
			|	Начисления.ОтработаноЧасов КАК ОплаченоЧасов,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
			|ИЗ
			|	#ТаблицаНачислений КАК Начисления
			|ГДЕ
			|	Начисления.Ссылка = &Ссылка
			|";
		Если ОтборПоФизическимЛицам Тогда
			ТекстЗапросаПолей = ТекстЗапросаПолей 
				+ "
				|	И ВЫРАЗИТЬ(Начисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо В (&ФизическиеЛица)
				|";
		КонецЕсли;
			
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоДней") <> Неопределено Тогда
			
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноДней КАК ОплаченоДней", "Начисления.ОплаченоДней КАК ОплаченоДней");
			
			Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ОплаченоЧасов") <> Неопределено Тогда
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоЧасов КАК ОплаченоЧасов");
			Иначе
				ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "Начисления.ОтработаноЧасов КАК ОплаченоЧасов", "Начисления.ОплаченоДней * 8 КАК ОплаченоЧасов");
			КонецЕсли;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаНачала") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала", "Начисления.ДатаНачала КАК ДатаНачала");
		Иначе
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала", "Начисления." + ПолеДатыДействия + " КАК ДатаНачала");
		КонецЕсли;
		
		Если МетаданныеДокумента.ТабличныеЧасти[ИмяТаблицыНачислений].Реквизиты.Найти("ДатаОкончания") <> Неопределено Тогда
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания", "Начисления.ДатаОкончания КАК ДатаОкончания");
		Иначе
			ТекстЗапросаПолей = СтрЗаменить(ТекстЗапросаПолей, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания", "НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Начисления." + ПолеДатыДействия + ", МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания");
		КонецЕсли;
		
		ПерваяТаблица = Ложь;
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаПолей;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	СУММА(Начисления.Сумма) КАК Сумма,
		|	СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
		|	СУММА(Начисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(Начисления.ОплаченоДней) КАК ОплаченоДней,
		|	СУММА(Начисления.ОплаченоЧасов) КАК ОплаченоЧасов
		|ПОМЕСТИТЬ ВТНачисленияИОтработанноеВремя
		|ИЗ
		|(" + ТекстЗапроса + ") КАК Начисления
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ИдентификаторСтроки,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.Сотрудник,
		|	Начисления.Подразделение,
		|	Начисления.Начисление,
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания";
	
	ТекстЗапроса = ТекстЗапроса + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() 
		+ "ВЫБРАТЬ
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		  |	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала,
		  |	НачисленияИОтработанноеВремя.ДатаОкончания,
		  |	НачисленияИОтработанноеВремя.Сумма КАК Сумма,
		  |	НачисленияИОтработанноеВремя.ОтработаноДней КАК ОтработаноДней,
		  |	НачисленияИОтработанноеВремя.ОтработаноЧасов КАК ОтработаноЧасов,
		  |	НачисленияИОтработанноеВремя.ОплаченоДней КАК ОплаченоДней,
		  |	НачисленияИОтработанноеВремя.ОплаченоЧасов КАК ОплаченоЧасов
		  |ИЗ
		  |	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо КАК ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник КАК Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение КАК Подразделение,
		  |	НачисленияИОтработанноеВремя.Начисление КАК Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала,
		  |	СУММА(НачисленияИОтработанноеВремя.ОтработаноДней) КАК ОтработаноДней,
		  |	СУММА(НачисленияИОтработанноеВремя.ОтработаноЧасов) КАК ОтработаноЧасов,
		  |	СУММА(НачисленияИОтработанноеВремя.ОплаченоДней) КАК ОплаченоДней,
		  |	СУММА(НачисленияИОтработанноеВремя.ОплаченоЧасов) КАК ОплаченоЧасов
		  |ИЗ
		  |	ВТНачисленияИОтработанноеВремя КАК НачисленияИОтработанноеВремя
		  |ГДЕ
		  |	НЕ(НачисленияИОтработанноеВремя.ОтработаноДней = 0
		  |				И НачисленияИОтработанноеВремя.ОтработаноЧасов = 0
		  |				И НачисленияИОтработанноеВремя.ОплаченоДней = 0
		  |				И НачисленияИОтработанноеВремя.ОплаченоЧасов = 0)
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	НачисленияИОтработанноеВремя.ИдентификаторСтроки,
		  |	НачисленияИОтработанноеВремя.ФизическоеЛицо,
		  |	НачисленияИОтработанноеВремя.Сотрудник,
		  |	НачисленияИОтработанноеВремя.Подразделение,
		  |	НачисленияИОтработанноеВремя.Начисление,
		  |	НачисленияИОтработанноеВремя.ДатаНачала";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведенияНачисленияЗарплаты.НачисленияПоСотрудникам = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведенияНачисленияЗарплаты.ОтработанноеВремяПоСотрудникам = РезультатыЗапроса[2].Выгрузить();
	
КонецПроцедуры

// Заполняет данные для проведения удержаниями.
//	
// Параметры:	
// 		ДанныеДляПроведенияНачисленияЗарплаты.
//		Документ
//		ТаблицаУдержаний - имя табличной части с удержаниями, не обязательно, по умолчанию - "Удержания".
//
Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний, ФизическиеЛица) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ОтборПоФизическимЛицам = Ложь;
	Иначе
		ОтборПоФизическимЛицам = Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Если ОтборПоФизическимЛицам Тогда
		Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	КонецЕсли; 
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ИмяТаблицыУдержаний = МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаУдержаний;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удержания.НомерСтроки КАК ИдентификаторСтроки,
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.ДокументОснование КАК ДокументОснование,
	|	СУММА(Удержания.Результат) КАК Сумма
	|ИЗ
	|	#ТаблицаУдержаний КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка = &Ссылка
	|	И Удержания.Сотрудник В(&ФизическиеЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	Удержания.НомерСтроки,
	|	Удержания.Сотрудник,
	|	Удержания.Удержание,
	|	Удержания.Контрагент,
	|	Удержания.ДокументОснование,
	|	Удержания.Удержание.КатегорияУдержания";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержаний", ИмяТаблицыУдержаний);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Удержания.Сотрудник В(&ФизическиеЛица)", "");
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей НДФЛ.
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	НДФЛ = УчетНДФЛ.ДанныеДокументаОНалогеПоОсновнойСтавкеИВычетах(ДокументСсылка, , , ФизическиеЛица);
	Если НДФЛ.Колонки.Найти("ПодразделениеСотрудника") = Неопределено Тогда  
		НДФЛ.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	КонецЕсли;
	
	Для каждого СтрокаТЗ Из НДФЛ Цикл
		СтрокаТЗ.ПодразделениеСотрудника = СтрокаТЗ.Подразделение;
	КонецЦикла;
	
	ДанныеДляПроведения.Вставить("НДФЛ", НДФЛ);
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей КорректировкиВыплаты.
//
Процедура ЗаполнитьДанныеКорректировкиВыплаты(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	КорректировкиВыплаты = РасчетЗарплаты.ДанныеДокументаКорректировкиВыплатыПоДокументу(ДокументСсылка, , , ФизическиеЛица);
	ДанныеДляПроведения.Вставить("КорректировкиВыплаты", КорректировкиВыплаты);
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей страховых взносов.
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка, ФизическиеЛица) Экспорт
	
	ДанныеДляПроведения.Вставить("СтраховыеВзносы", УчетСтраховыхВзносов.ДанныеОВзносахИзДокумента(ДокументСсылка, , , ФизическиеЛица));

КонецПроцедуры

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо.
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ГоловнойСотрудник,ДатаПриема,ДатаЗавершенияРаботы,ВАрхиве";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ТарифнаяСтавка, 0) КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаЗавершенияРаботы, МЕСЯЦ) >= &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьПланВидовРасчетаПоНастройкам() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияПоНастройкам();
	ПланыВидовРасчета.Удержания.СоздатьУдержанияПоНастройкам();

КонецПроцедуры

Процедура СформироватьВидыРасчетаРКиСН() Экспорт
	
	ПланыВидовРасчета.Начисления.СоздатьНачисленияРКиСН();
	
КонецПроцедуры

// Создает временную таблицу ВТПорядокПредопределенныхНачисленийУдержаний.
//	Поля
//		Ссылка - ссылка, ПланыВидовРасчета.Начисления, ПланыВидовРасчета.Удержания
//		Порядок - число
//		НачислениеУдержание - строка, "Начисление" или "Удержание".
// 
Процедура СоздатьВТПорядокПредопределенныхНачисленийУдержаний(МенеджерВременныхТаблиц, ТолькоРазрешенные) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
	|			ТОГДА 1
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент)
	|			ТОГДА 2
	|		КОГДА Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка)
	|			ТОГДА 3
	|	КОНЕЦ КАК Порядок,
	|	""Начисления"" КАК НачислениеУдержание
	|ПОМЕСТИТЬ ВТПорядокПредопределенныхНачисленийУдержаний
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка),
	|	0,
	|	""Удержания""
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();

КонецПроцедуры

// Помещает в переданный МенеджерВременныхТаблиц таблицу 
// 	ВТДополнительныеСвойстваНачислений с полями
//		Начисление - ПланВидовРасчетаСсылка.Начисления,
//		ЯвляетсяДенежнымСодержанием - Булево,
//		ЯвляетсяДенежнымДовольствием - Булево.
//		ЯвляетсяДоходомВНатуральнойФорме - Булево.
//		НачисляетсяВЦеломЗаМесяц - Булево.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
//
Процедура СоздатьВТДополнительныеСвойстваНачислений(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланВидовРасчетаНачисления.Ссылка КАК Начисление,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымСодержанием,
	|	ЛОЖЬ КАК ЯвляетсяДенежнымДовольствием,
	|	ПланВидовРасчетаНачисления.ЯвляетсяДоходомВНатуральнойФорме КАК ЯвляетсяДоходомВНатуральнойФорме,
	|	ИСТИНА КАК НачисляетсяВЦеломЗаМесяц,
	|	НЕОПРЕДЕЛЕНО КАК ВидПособияСоциальногоСтрахования
	|ПОМЕСТИТЬ ВТДополнительныеСвойстваНачислений
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК ПланВидовРасчетаНачисления";
	
	Запрос.Выполнить();  
	
КонецПроцедуры

Процедура ЗаполнитьДокументНачисленияЗарплаты(Объект) Экспорт
	
	ЗаполнитьРезультатНачисления(Объект);
	ЗаполнитьНДФЛиВзносы(Объект);
	ЗаполнитьКорректировкиВыплаты(Объект);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатУдержаний(Объект);
		МодульРасчетЗарплатыДляНебольшихОрганизаций.СформироватьТабличнуюЧастьСотрудники(Объект);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаполнитьРезультатНачисления(Объект)
	
	Объект.Начисления.Очистить();
	
	РезультатНачисления = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(Объект.Организация, Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатНачисления, Объект.Начисления);
	
	ЗаполнитьОтработанноеВремя(Объект.Начисления, Объект.МесяцНачисления, Объект.Организация);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизаций = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизаций");
		МодульРасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьРезультатНачисления(Объект, Объект.Начисления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтработанноеВремя(СтрокиНачислений, МесяцНачисления, Организация) Экспорт
	
	КоличествоДней = 0;
	КоличествоЧасов = 0;
	
	// Получаем количество дней по календарю.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ЗарплатаКадрыДляНебольшихОрганизаций.РасчетЗарплаты") Тогда
		МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп = ОбщегоНазначения.ОбщийМодуль("РасчетЗарплатыДляНебольшихОрганизацийПовтИсп");
		ПроизводственныйКалендарьРФ = МодульРасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ПроизводственныйКалендарьОрганизации(Организация);
	Иначе
		ПроизводственныйКалендарьРФ = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КонецЕсли;
	
	Если ПроизводственныйКалендарьРФ <> Неопределено Тогда
		
		// Если производственный календарь определить не удалось - оставляем число дней нулевым.
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		
		КоличествоДней = РабочихДнейЧасов.Дней;
		КоличествоЧасов = РабочихДнейЧасов.Часов;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокиНачислений) = Тип("ТаблицаЗначений") Тогда
		СотрудникиНачислений = СтрокиНачислений.ВыгрузитьКолонку("Сотрудник");
	Иначе
		СотрудникиНачислений = СтрокиНачислений.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
	КонецЕсли;
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиНачислений, "ДатаПриема,ДатаЗавершенияРаботы");
	
	Начисления = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиНачислений, "Начисление", Истина);
	КатегорииНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Начисления, "КатегорияНачисленияИлиНеоплаченногоВремени");
	
	КоэффициентыПересчетаСотрудников = Новый Соответствие;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			НачалоПериодаРаботы = НачалоМесяца(МесяцНачисления);
			ОкончаниеПериодаРаботы = КонецМесяца(МесяцНачисления);
			
			ДанныеСотрудника = КадровыеДанные.НайтиСтроки(Новый Структура("Сотрудник", Строка.Сотрудник));
			Если ПроизводственныйКалендарьРФ <> Неопределено
				И ДанныеСотрудника.Количество() > 0
				И (ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы
					ИЛИ ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаЗавершенияРаботы)
						И ДанныеСотрудника[0].ДатаЗавершенияРаботы < ОкончаниеПериодаРаботы) Тогда
						
				Если ДанныеСотрудника[0].ДатаПриема > НачалоПериодаРаботы Тогда
					НачалоПериодаРаботы = ДанныеСотрудника[0].ДатаПриема;
				КонецЕсли; 
				
				Если ЗначениеЗаполнено(ДанныеСотрудника[0].ДатаЗавершенияРаботы)
					И ДанныеСотрудника[0].ДатаЗавершенияРаботы < ОкончаниеПериодаРаботы Тогда
					
					ОкончаниеПериодаРаботы = ДанныеСотрудника[0].ДатаЗавершенияРаботы;
					
				КонецЕсли; 
						
				РабочихДнейЧасов = РабочихДнейЧасовВПериоде(ПроизводственныйКалендарьРФ, НачалоПериодаРаботы, ОкончаниеПериодаРаботы);
				
				КоличествоОтработанныхДней = РабочихДнейЧасов.Дней;
				КоличествоОтработанныхЧасов = РабочихДнейЧасов.Часов;
				
			Иначе
				КоличествоОтработанныхДней = КоличествоДней;
				КоличествоОтработанныхЧасов = КоличествоЧасов;
			КонецЕсли;
			
			Строка.ОтработаноДней = КоличествоОтработанныхДней;
			Строка.ОтработаноЧасов = КоличествоОтработанныхЧасов;
			
			Если ТипЗнч(Строка) = Тип("ДанныеФормыЭлементКоллекции") Тогда
				
				Если Строка.Свойство("РабочихДней") Тогда
					Строка.РабочихДней = КоличествоДней;
				КонецЕсли;
				
				Если Строка.Свойство("РабочихЧасов") Тогда
					Строка.РабочихЧасов = КоличествоЧасов;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Строка.ОтработаноДней <> КоличествоДней И КоличествоДней <> 0 Тогда
				
				КоэффициентыПересчета = Строка.ОтработаноДней / КоличествоДней;
				КоэффициентыПересчетаСотрудников.Вставить(Строка.Сотрудник, КоэффициентыПересчета);
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиНачислений Цикл
		
		Если КатегорииНачислений[Строка.Начисление] <> Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
			
			КоэффициентыПересчета = КоэффициентыПересчетаСотрудников.Получить(Строка.Сотрудник);
			Если КоэффициентыПересчета <> Неопределено Тогда
				Строка.Результат = Строка.Результат * КоэффициентыПересчета;
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект, Сотрудники = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	&МесяцНачисления КАК ПериодДействия,
	|	&МесяцНачисления КАК ДатаНачала,
	|	НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ), ДЕНЬ) КАК ДатаОкончания,
	|	Начисления.Результат КАК СуммаДохода,
	|	Начисления.КодВычета КАК КодВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычета КАК СуммаВычетаВзносы,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТВсеНачисления
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.ПериодДействия КАК ПериодДействия,
	|	Начисления.ДатаНачала КАК ДатаНачала,
	|	Начисления.ДатаОкончания КАК ДатаОкончания,
	|	Начисления.СуммаДохода КАК СуммаДохода,
	|	Начисления.СуммаДохода КАК Сумма,
	|	Начисления.КодВычетаНДФЛ КАК КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ КАК СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы КАК СуммаВычетаВзносы,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Подразделение КАК ПодразделениеОрганизации,
	|	Начисления.Подразделение КАК ТерриторияВыполненияРаботВОрганизации,
	|	Начисления.ПланируемаяДатаВыплаты КАК ПланируемаяДатаВыплаты
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникиОтбор
	|		ПО (ВЫРАЗИТЬ(Начисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо = СотрудникиОтбор.ФизическоеЛицо)
	|ГДЕ
	|	СотрудникиОтбор.Ссылка В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Начисления.Сотрудник,
	|	Начисления.Начисление,
	|	Начисления.ПериодДействия,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисления.СуммаДохода,
	|	Начисления.СуммаДохода,
	|	Начисления.КодВычетаНДФЛ,
	|	Начисления.СуммаВычетаНДФЛ,
	|	Начисления.СуммаВычетаВзносы,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.Подразделение,
	|	Начисления.ПланируемаяДатаВыплаты
	|ИЗ
	|	ВТВсеНачисления КАК Начисления
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.Сотрудник КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Результат КАК Сумма
	|ПОМЕСТИТЬ ВТВсеУдержания
	|ИЗ
	|	&Удержания КАК Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Удержание КАК Удержание,
	|	Удержания.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК СотрудникОтбор
	|		ПО Удержания.ФизическоеЛицо = СотрудникОтбор.ФизическоеЛицо
	|ГДЕ
	|	СотрудникОтбор.Ссылка В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Удержания.ФизическоеЛицо,
	|	Удержания.Удержание,
	|	Удержания.Сумма
	|ИЗ
	|	ВТВсеУдержания КАК Удержания
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&Сотрудники)
	|	И &ПоВсемСотрудникам = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = Начисления.Сотрудник)
	|ГДЕ
	|	&ПоВсемСотрудникам = ИСТИНА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("Удержания", Объект.Удержания.Выгрузить());
	Запрос.УстановитьПараметр("МесяцНачисления", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ПоВсемСотрудникам", Сотрудники = Неопределено);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛиВзносы(Объект, ЗаполнятьНДФЛ = Истина, ЗаполнятьВзносы = Истина) Экспорт
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов.
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДляРасчетаНДФЛиВзносов(МенеджерВременныхТаблиц, Объект);

	ДатаОперации = Мин(Объект.Дата, КонецМесяца(Объект.МесяцНачисления));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗаполнятьНДФЛ Тогда
		ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации);
	КонецЕсли; 
	
	Если ЗаполнятьВзносы Тогда
		ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации);
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации);
	СортироватьРезультатРасчетаНДФЛ(РезультатРасчетаНДФЛ, Объект);
	
	Объект.НДФЛ.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.НДФЛ, Объект.НДФЛ);
	
	Объект.ПримененныеВычетыНаДетейИИмущественные.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаНДФЛ.ПримененныеВычетыНаДетейИИмущественные, Объект.ПримененныеВычетыНаДетейИИмущественные);
	
КонецПроцедуры

Процедура СортироватьРезультатРасчетаНДФЛ(РезультатРасчетаНДФЛ, Объект)
	
	СортируемыеКоллекции = Новый Массив;
	Коллекция = СотрудникиФормы.СортируемаяКоллекцияФизическихЛиц(РезультатРасчетаНДФЛ.НДФЛ);
	Коллекция.ОписаниеКоллекции.Псевдоним = "НДФЛ";
	Коллекция.ОписаниеКоллекции.ИмяПоляФизическоеЛицо = "ФизическоеЛицо";
	МетаданныеРеквизитов = Метаданные.Документы.НачислениеЗарплаты.ТабличныеЧасти.НДФЛ.Реквизиты;
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "МесяцНалоговогоПериода", МетаданныеРеквизитов.МесяцНалоговогоПериода.Тип);
	СотрудникиФормы.ДобавитьДополнительноеПолеСортировки(Коллекция, "Подразделение", МетаданныеРеквизитов.Подразделение.Тип);
	
	СортируемыеКоллекции.Добавить(Коллекция);
	
	ПорядокСортировки = СотрудникиФормы.ПорядокСортировкиКоллекцияФизическихЛиц(СортируемыеКоллекции, Объект.Организация, КонецМесяца(Объект.МесяцНачисления));
	
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Если ПорядокСортировки.Свойство("НДФЛ") Тогда
		
		Для Каждого СтрокаПорядка Из ПорядокСортировки.НДФЛ Цикл
			СтрокаТаблицы = РезультатРасчетаНДФЛ.НДФЛ[СтрокаПорядка.ИндексСтрокиИсходнойТаблицы];
			СтрокаТаблицы.Порядок = СтрокаПорядка.Порядок;
		КонецЦикла;
		
	КонецЕсли;
	
	РезультатРасчетаНДФЛ.НДФЛ.Сортировать("Порядок");
	РезультатРасчетаНДФЛ.НДФЛ.Колонки.Удалить("Порядок");
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкиВыплаты(Объект, МесяцНачисленияИмя = "МесяцНачисления") Экспорт
	
	// Расчет НДФЛ
	РезультатРасчетаКорректировкиВыплаты = РезультатРасчетаКорректировкиВыплаты(Объект, МесяцНачисленияИмя);
	
	Объект.КорректировкиВыплаты.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатРасчетаКорректировкиВыплаты, Объект.КорректировкиВыплаты);
	
КонецПроцедуры

Процедура ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ДатаОперации)
	
	Если Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет страховых взносов
	Взносы = РезультатРасчетаВзносов(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
	
	// Перенос результата расчета страховых взносов в форму.
	Объект.Взносы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Взносы, Объект.Взносы);
	
КонецПроцедуры

Функция РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект, ДатаОперации, ПланируемаяДатаВыплатыВТаблицеНачислений = Ложь) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты);
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	УчетНДФЛ.СформироватьСоциальныеВычетыПоВременнойТаблице(Объект.Ссылка, НаборыЗаписей,  Неопределено, Объект.Организация, ДатаОперации, Объект.МесяцНачисления, МенеджерВременныхТаблиц);
	УчетНДФЛ.СформироватьДоходыНДФЛПоНачислениям(НаборыЗаписей, Неопределено, Объект.Организация, ДатаОперации, ?(ПланируемаяДатаВыплатыВТаблицеНачислений, Неопределено, КонецМесяца(Объект.МесяцНачисления)), МенеджерВременныхТаблиц, Объект.МесяцНачисления);
	
	// Расчет НДФЛ
	РезультатРасчетаНДФЛ = УчетНДФЛ.РезультатРасчетаНДФЛ(МенеджерВременныхТаблиц, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Истина, НачалоДня(КонецМесяца(Объект.МесяцНачисления)), НаборыЗаписей);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат РезультатРасчетаНДФЛ;
	
КонецФункции

Функция РезультатРасчетаКорректировкиВыплаты(Объект, МесяцНачисленияИмя = "МесяцНачисления", ФизическиеЛица = Неопределено) Экспорт
	
	// Расчет КорректировкиВыплаты
	РезультатРасчетаНДФЛ = Объект.НДФЛ.Выгрузить();
	Если ФизическиеЛица <> Неопределено Тогда
		Для Каждого СтрокаТаблицы ИЗ РезультатРасчетаНДФЛ Цикл
			Если ФизическиеЛица.Найти(СтрокаТаблицы.ФизическоеЛицо) = Неопределено Тогда
				РезультатРасчетаНДФЛ.Удалить(РезультатРасчетаНДФЛ.Индекс(СтрокаТаблицы));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	РезультатРасчетаНДФЛ.Колонки.Налог.Имя = "НалогПоСтавке13";
	РезультатРасчетаНДФЛ.Колонки.ЗачтеноАвансовыхПлатежей.Имя = "ЗачтеноАвансовыхПлатежейПоСтавке13";
	
	ДатаОперации = Мин(Объект.Дата, КонецМесяца(Объект[МесяцНачисленияИмя]));
	НалогКУдержанию = УчетНДФЛ.НалогКУдержаниюПоРезультатамРасчета(Объект.Ссылка, Объект.Организация, ДатаОперации, РезультатРасчетаНДФЛ);
	НалогКУдержаниюФизическиеЛица = НалогКУдержанию.ВыгрузитьКолонку("ФизическоеЛицо");
	ТекущиеОстаткиВзаиморасчетов = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(Объект.Организация, Объект[МесяцНачисленияИмя], НалогКУдержаниюФизическиеЛица, Объект.Ссылка);
	
	КЗачетуВозврату = РасчетЗарплаты.РекомендуемыеКорректировкиВыплаты(НалогКУдержанию, ТекущиеОстаткиВзаиморасчетов, Год(Объект[МесяцНачисленияИмя]));
	
	Возврат КЗачетуВозврату;
	
КонецФункции

// Составляет таблицу для заполнения страховых взносов в форме документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - менеджер временных таблиц, в котором определены таблицы ВТНачисления и ВТФизическиеЛица.
//
// Возвращаемое значение - таблица значений Взносы.
//
Функция РезультатРасчетаВзносов(МенеджерВременныхТаблиц, ДокументСсылка, Организация, МесяцНачисления) Экспорт
	
	// Подготавливаем структуру наборов записей документа, имитирующую коллекцию Движения.
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(ДокументСсылка.Метаданные(),?(ДокументСсылка.Пустая(), Неопределено, ДокументСсылка));
	
	Если Не ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОтменятьЗапись = Истина;
	КонецЕсли;
	
	// Расчет страховых взносов
	ОтражениеЗарплатыВБухучетеБазовый.ДополнитьСведенияОДоходахДаннымиОЕНВДПриРасчете(Организация, МесяцНачисления, МенеджерВременныхТаблиц);
	УчетСтраховыхВзносов.СформироватьСведенияОДоходахСтраховыеВзносы(НаборыЗаписей, Неопределено, Организация, МесяцНачисления, МенеджерВременныхТаблиц, , Истина);
	
	Взносы = УчетСтраховыхВзносов.РассчитатьВзносы(ДокументСсылка, Организация, МесяцНачисления, МенеджерВременныхТаблиц, Ложь);
	
	Если ОтменятьЗапись = Истина Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат Взносы;
	
КонецФункции

Функция ИзмеренияРасчетаПлановыхНачислений() Экспорт
	
	Возврат "Сотрудник, Начисление, ГоловнаяОрганизация";	
	
КонецФункции

Процедура СоздатьНачислениеОтпускБезОплаты(ПараметрыОбновления = Неопределено) Экспорт
	
	// Оплата отпуска
	Описание = ПланыВидовРасчета.Начисления.ОписаниеНачисления();
	Описание.Код							= НСтр("ru = 'ОТПОЗ'");
	Описание.Наименование					= НСтр("ru = 'Отпуск без оплаты согласно ТК РФ'");
	Описание.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты;
	
	НачисленияПоОписанию = ПланыВидовРасчета.Начисления.НачисленияПоКатегории(Описание.КатегорияНачисленияИлиНеоплаченногоВремени);
	Если НачисленияПоОписанию.Количество() = 0 Тогда
		
		НачислениеОбъект = ПланыВидовРасчета.Начисления.СоздатьВидРасчета();
		ЗаполнитьЗначенияСвойств(НачислениеОбъект, Описание);
		НачислениеОбъект.КраткоеНаименование = НСтр("ru='Отп. без опл.'");
		НачислениеОбъект.Записать();
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	
КонецПроцедуры

Функция ЗначениеПоказателяПоИдентификатору(Показатели, Идентификатор) Экспорт
	
	Возврат Показатели[Идентификатор];
	
КонецФункции

Функция НачисленияТарифнойСтавки() Экспорт
	
	КатегорииОкладов = Новый Массив;
	КатегорииОкладов.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииОкладов", КатегорииОкладов);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Ссылка
		|ИЗ
		|	ПланВидовРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&КатегорииОкладов)
		|	И Начисления.ЗачетОтработанногоВремени";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция КатегорииСдельнойОплатыТруда() Экспорт
	
	Возврат Новый Массив;
	
КонецФункции

Функция КатегорииНачисленийКомпенсационныхВыплат() Экспорт
	
	КатегорииКомпенсаций = Новый Массив;
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.РайонныйКоэффициент);
	КатегорииКомпенсаций.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.СевернаяНадбавка);
	
	Возврат КатегорииКомпенсаций;
	
КонецФункции

Процедура ЗаменитьСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ, НДФЛ, ОбновляемаяКоллекцияВычеты, ПримененныеВычеты, ОтборСтрок = Неопределено, СохранятьИсправления = Истина, КлючевыеКолонки = "ФизическоеЛицо") Экспорт
	
	МаксимальныйИдентификаторСтрокиНДФЛ = УчетНДФЛФормы.МаксимальныйИдентификаторСтрокиНДФЛ(ОбновляемаяКоллекцияНДФЛ);
	
	// Заполняем строки идентификатором, увеличенным на единицу относительно максимального.
	УчетНДФЛФормы.НазначитьИдентификаторыНовымСтрокамТаблицамНДФЛИПримененныеВычетыНаДетейИИмущественные(
		МаксимальныйИдентификаторСтрокиНДФЛ + 1, НДФЛ, ПримененныеВычеты);

	// Сохранение идентификаторов заменяемых строк НДФЛ.
	ИдентификаторыСтрокНДФЛ = Новый Массив;
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИдентификаторыСтрокНДФЛ, 
		ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ"));
		
	// Таблица ПримененныеВычеты, является расширением строк таблицы НДФЛ,
	// поэтому замена строк в таблицы ПримененныеВычеты, должна выполняться на тех же условиях, что
	// и замена строк таблицы НДФЛ.
	
	// Сбор информации об идентификаторах строка НДФЛ принимающих участие в замене.
	ИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	
	ЗаменитьСтрокиНаНовыеДанные(ОбновляемаяКоллекцияНДФЛ, НДФЛ, КлючевыеКолонки, ОтборСтрок);
	
	// Удаление из коллекции ИдентификаторыСтрокНДФЛУчаствующихВЗамене, идентификаторов
	// строк, не подвергшихся замене, добавление в коллекцию идентификаторов 
	// новых строк НДФД.
	
	Если ОтборСтрок = Неопределено Тогда
		ЗаменяемыеСтрокиНДФЛ = ОбновляемаяКоллекцияНДФЛ;
	Иначе
		ЗаменяемыеСтрокиНДФЛ = НайтиСтрокиОтборПоМассиву(ОбновляемаяКоллекцияНДФЛ, "ФизическоеЛицо", ОтборСтрок.ФизическоеЛицо);
	КонецЕсли;
	
	ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене = ОбщегоНазначения.ВыгрузитьКолонку(ЗаменяемыеСтрокиНДФЛ, "ИдентификаторСтрокиНДФЛ");
	Для каждого ИдентификаторСтрокиНДФЛ Из ОбновленныеИдентификаторыСтрокНДФЛУчаствующихВЗамене Цикл
		
		ИндексЭлемента = ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Найти(ИдентификаторСтрокиНДФЛ);
		Если ИндексЭлемента = Неопределено Тогда
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Добавить(ИдентификаторСтрокиНДФЛ);
		Иначе
			ИдентификаторыСтрокНДФЛУчаствующихВЗамене.Удалить(ИндексЭлемента);
		КонецЕсли;
		
	КонецЦикла;
		
	// Обновление строк таблицы ПримененныеВычеты.
	ЗаменитьСтрокиНаНовыеДанные(
		ОбновляемаяКоллекцияВычеты, 
		ПримененныеВычеты, 
		"ИдентификаторСтрокиНДФЛ",
		Новый Структура("ИдентификаторСтрокиНДФЛ", ИдентификаторыСтрокНДФЛУчаствующихВЗамене));
	
КонецПроцедуры

Функция НайтиСтрокиОтборПоМассиву(КоллекцияСтрок, ИмяПоля, МассивЗначений) Экспорт
	
	НайденныеСтроки = Новый Массив;
	
	// Имя может быть передано как составное, например "Сотрудник.ФизическоеЛицо".
	// Это значит, что прежде нужно определить значения через ".", 
	// от значений в искомых полях, и искать затем уже именно по ним.
	ЧастиИмениПоля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если ЧастиИмениПоля.Количество() > 1 Тогда
		ЗначенияПервыйУровень = ОбщегоНазначения.ВыгрузитьКолонку(КоллекцияСтрок, ЧастиИмениПоля[0], Истина);
		СоответствиеЗначений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗначенияПервыйУровень, ЧастиИмениПоля[1]);
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетУсловиям = Истина;
		Если МассивЗначений <> Неопределено Тогда
			Если ЧастиИмениПоля.Количество() > 1 Тогда
				// Соответствие по имени поля через ".".
				СоответствуетУсловиям = МассивЗначений.Найти(СоответствиеЗначений[СтрокаКоллекции[ЧастиИмениПоля[0]]]) <> Неопределено;
			Иначе	
				// Соответствие по простому имени поля.
				СоответствуетУсловиям = МассивЗначений.Найти(СтрокаКоллекции[ИмяПоля]) <> Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СоответствуетУсловиям Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

Функция ЗаменитьСтрокиНаНовыеДанные(ЗаменяемыеДанные, ЗаменяющиеДанные, КлючевыеКолонки, ОтборСтрок = Неопределено) Экспорт
	
	// Возвращаемым значением является массив идентификаторов замененных строк.
	ЗамененныеСтроки = Новый Массив;
	
	МассивКлючевыхКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеКолонки);
	
	// Собираем строки коллекции для обработки, 
	// если задан отбор строк, то добавляем только те, которые ему соответствуют.
	КоллекцииСтрок = Новый Массив;
	КоллекцииСтрок.Добавить(ЗаменяемыеДанные);
	КоллекцииСтрок.Добавить(ЗаменяющиеДанные);
	
	НайденныеСтроки = Новый Массив;
	Для Каждого КоллекцияСтрок Из КоллекцииСтрок Цикл
		Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
			СоответствуетУсловиям = Истина;
			Если ОтборСтрок <> Неопределено Тогда
				Для Каждого КлючИЗначение Из ОтборСтрок Цикл
					ИмяОтбора = КлючИЗначение.Ключ;
					ЗначениеОтбора = КлючИЗначение.Значение;
					Если ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
						СоответствуетУсловиям = ЗначениеОтбора.Найти(СтрокаКоллекции[ИмяОтбора]) <> Неопределено;
					Иначе
						СоответствуетУсловиям = СтрокаКоллекции[ИмяОтбора] = ЗначениеОтбора;
					КонецЕсли;
					Если Не СоответствуетУсловиям Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СоответствуетУсловиям Тогда
				НайденныеСтроки.Добавить(СтрокаКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СочетанияКлючевых = Новый ТаблицаЗначений;
	Для Каждого ИмяКолонки Из МассивКлючевыхКолонок Цикл
		СочетанияКлючевых.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	// Используем ключ поиска для того, чтобы найти все строки 
	// и выбрать из них все возможные сочетания значений ключевых полей по обеим коллекциям.
	КлючОтбора = Новый Структура(КлючевыеКолонки);
	Для Каждого СтрокаКоллекции Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СтрокаКоллекции);
		Если СочетанияКлючевых.НайтиСтроки(КлючОтбора).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(СочетанияКлючевых.Добавить(), СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
		
	// Для всех возможных сочетаний выполняем замену строк.
	Для Каждого СочетаниеКлючевых Из СочетанияКлючевых Цикл
		ЗаполнитьЗначенияСвойств(КлючОтбора, СочетаниеКлючевых); 
		СтарыеСтроки = ЗаменяемыеДанные.НайтиСтроки(КлючОтбора);
		НовыеСтроки = НайтиСтроки(ЗаменяющиеДанные, КлючОтбора);
		ИндексСтроки = 0;
		ИндексДляВставки = 0;
		Если СтарыеСтроки.Количество() = 0 И МассивКлючевыхКолонок.Количество() > 0 Тогда
			// Предполагается, что первой колонкой передан сотрудник или физическое лицо.
			ИмяПоляРаботник = МассивКлючевыхКолонок[0];
			СтрокиРаботника = ЗаменяемыеДанные.НайтиСтроки(Новый Структура(ИмяПоляРаботник, СочетаниеКлючевых[ИмяПоляРаботник]));
			КоличествоСтрокРаботника = СтрокиРаботника.Количество();
			Если КоличествоСтрокРаботника > 0 Тогда 
				ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокиРаботника[КоличествоСтрокРаботника - 1]) + 1;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Строка Из НовыеСтроки Цикл
			Если СтарыеСтроки.ВГраница() < ИндексСтроки Тогда
				СтрокаДляЗаполнения = ЗаменяемыеДанные.Вставить(ИндексДляВставки);
			Иначе
				СтрокаДляЗаполнения = СтарыеСтроки[ИндексСтроки];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, Строка);
			ИндексДляВставки = ЗаменяемыеДанные.Индекс(СтрокаДляЗаполнения) + 1;
			ИндексСтроки = ИндексСтроки + 1;
			Если ЕстьПолеВСтрокеКоллекции(Строка, "ИдентификаторСтрокиВидаРасчета") Тогда
				ЗамененныеСтроки.Добавить(Строка.ИдентификаторСтрокиВидаРасчета);
			КонецЕсли;
		КонецЦикла;
		Для Счетчик = ИндексСтроки По СтарыеСтроки.ВГраница() Цикл
			ЗаменяемыеДанные.Удалить(ЗаменяемыеДанные.Индекс(СтарыеСтроки[Счетчик]));
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЗамененныеСтроки;
	
КонецФункции

Функция ЕстьПолеВСтрокеКоллекции(СтрокаКоллекции, ИмяПоля) Экспорт
	
	Если ТипЗнч(СтрокаКоллекции) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат СтрокаКоллекции.Владелец().Колонки.Найти(ИмяПоля) <> Неопределено;
	Иначе
		Возврат СтрокаКоллекции.Свойство(ИмяПоля);
	КонецЕсли;
	
КонецФункции

Функция НайтиСтроки(КоллекцияСтрок, Отбор)
	
	НайденныеСтроки = Новый Массив;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат НайденныеСтроки;
	КонецЕсли;
	
	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		СоответствуетОтбору = Истина;
		Для Каждого КлючИЗначение Из Отбор Цикл
			ИмяОтбора = КлючИЗначение.Ключ;
			ЗначениеОтбора = КлючИЗначение.Значение;
			Если СтрокаКоллекции[ИмяОтбора] <> ЗначениеОтбора Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			НайденныеСтроки.Добавить(СтрокаКоллекции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции

#Область ФормированиеПечатныхФорм

Функция НалогиИВзносыПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	
	Возврат ОтчетПоНачислениямПодробнее("НалогиИВзносыКратко",
										"",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
КонецФункции

Функция АнализЗарплатыПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	
	Возврат ОтчетПоНачислениямПодробнее("АнализНачисленийИУдержаний",
										"АнализЗарплатыПоПодразделениямИСотрудникамЗаПериод",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
	
КонецФункции

Функция СводНачисленийИУдержанийПодробнее(ДокументОбъект, Модифицированность, ФизическиеЛица, ДатаОтчета, ИсходныйДокументОбъект = Неопределено) Экспорт
	
	Возврат ОтчетПоНачислениямПодробнее("АнализНачисленийИУдержаний",
										"КраткийСводНачисленийИУдержаний",
										ДокументОбъект,
										Модифицированность,
										ФизическиеЛица,
										ДатаОтчета,
										ИсходныйДокументОбъект)
	
КонецФункции

Функция ОтчетПоНачислениямПодробнее(ИмяОтчета,
									ИмяНастройки,
									ДокументОбъект,
									Модифицированность,
									ФизическиеЛица,
									ДатаОтчета,
									ИсходныйДокументОбъект = Неопределено)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ОтображатьЗаголовки = Ложь;
	ДокументРезультат.ОтображатьСетку = Ложь;
	
	Если ДокументОбъект.ПометкаУдаления Тогда
		ВызватьИсключение НСтр("ru='Документ помечен на удаление, отчет не будет сформирован'");
	Иначе
		
		Попытка
			
			НачатьТранзакцию();
			
			УстановитьПривилегированныйРежим(Истина);
			
			Если ТипЗнч(ФизическиеЛица) = Тип("Массив") Тогда
				ФизическиеЛицаОтчета = ФизическиеЛица;
			Иначе
				ФизическиеЛицаОтчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
			КонецЕсли;
			
			Если НЕ ДокументОбъект.Проведен ИЛИ Модифицированность Тогда
				
				ДокументОбъект.ДополнительныеСвойства.Вставить("ФизическиеЛица", ФизическиеЛицаОтчета);
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
			
			ТекущийОтчет = Отчеты[ИмяОтчета].Создать();
			Если ЗначениеЗаполнено(ИмяНастройки) Тогда
				
				ТекущийОтчет.ИнициализироватьОтчет();
				
				ТекущийОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(
					ТекущийОтчет.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяНастройки].Настройки);
				
			КонецЕсли;
			
			Отбор = ТекущийОтчет.КомпоновщикНастроек.Настройки.Отбор;
			Отбор.Элементы.Очистить();
			
			СтандартныйПериод = Новый СтандартныйПериод;
			СтандартныйПериод.ДатаНачала    = НачалоМесяца(ДатаОтчета);
			СтандартныйПериод.ДатаОкончания = КонецМесяца(ДатаОтчета);
			
			ПараметрыДанных = ТекущийОтчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
			ПараметрыДанных.УстановитьЗначениеПараметра("Период", СтандартныйПериод);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
																	"Организация",
																	ВидСравненияКомпоновкиДанных.Равно,
																	ДокументОбъект.Организация);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор,
																	"ФизическоеЛицо",
																	ВидСравненияКомпоновкиДанных.ВСписке,
																	ФизическиеЛицаОтчета);
			
			ТекущийОтчет.СкомпоноватьРезультат(ДокументРезультат);
			
			ОтменитьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Если ПривилегированныйРежим() Тогда
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
			
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'Не удалось, сформировать отчет.'") + " " + Инфо.Описание;

		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ДокументРезультат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
