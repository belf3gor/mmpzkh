// Конвертация БП3.0.44 (формат 1.2) от 10.06.2019 14:21:32
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
			"СкладПоУмолчанию,
			|ПравилаЗагрузкиПодразделений,
			|РазрешитьПроведениеДокументовПриЗагрузке,
			|НоменклатурнаяГруппаПоУмолчанию,
			|СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
			
		КонецЕсли;
		
		КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
		КомпонентыОбмена.ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке = КомпонентыОбмена.ЭтоОбменЧерезПланОбмена;
			
		// Инициализация таблицы для заполнения наборов дополнительных реквизитов и сведений.
		ДопРеквизитыИСведения = Новый ТаблицаЗначений;
		ДопРеквизитыИСведения.Колонки.Добавить("Свойство");
		ДопРеквизитыИСведения.Колонки.Добавить("ЭтоДопСведение");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипОбъекта");
		ДопРеквизитыИСведения.Колонки.Добавить("ТипЗначения");
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения = ДопРеквизитыИСведения;
	
		// Инициализация таблицы для отложенного заполнения документов.
			
		ЗагруженныеОбъекты = Новый ТаблицаЗначений;
		ЗагруженныеОбъекты.Колонки.Добавить("ИмяПКО");
		ЗагруженныеОбъекты.Колонки.Добавить("Объект");
	
		КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеОбъекты = ЗагруженныеОбъекты;
		КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов = Новый Массив;
	
		// Инициализация таблицы "проблемных" счетов фактур, где может потребоваться дозаполнение документов оснований.
		СчетаФактурыЗаполнитьДокументыОснования = Новый ТаблицаЗначений;
		СчетаФактурыЗаполнитьДокументыОснования.Колонки.Добавить("СчетФактура");
		СчетаФактурыЗаполнитьДокументыОснования.Колонки.Добавить("ДанныеXDTO_ДокументыОснования");
		КомпонентыОбмена.ПараметрыКонвертации.Вставить("СчетаФактурыЗаполнитьДокументыОснования", СчетаФактурыЗаполнитьДокументыОснования);
		
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности выданных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.РеализацияОтгруженныхТоваров"));
	
		СчетФактурыВыданныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыВыданныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке = СчетФактурыВыданныеКОбработке;
	
		///////////////////////////////////////////////////////////////////
		// Инициализация таблицы для формирования структуры подчиненности полученных документов исправления
		МассивТиповДокумента = Новый Массив;
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
	
		МассивТиповИсправляемогоДокумента = Новый Массив;
	
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ГТДИмпорт"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.КорректировкаПоступления"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.СчетФактураПолученный"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		МассивТиповИсправляемогоДокумента.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	
		СчетФактурыПолученныеКОбработке = Новый ТаблицаЗначений;
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("Документ",             Новый ОписаниеТипов(МассивТиповДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("НомерИсправления",     Новый ОписаниеТипов("Число"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ДатаДокумента",        Новый ОписаниеТипов("Дата"));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИсправляемыйДокумент", Новый ОписаниеТипов(МассивТиповИсправляемогоДокумента));
		СчетФактурыПолученныеКОбработке.Колонки.Добавить("ИндексСтроки",         Новый ОписаниеТипов("Число"));
	
		КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке = СчетФактурыПолученныеКОбработке;	
	    // Отчеты о розничных продажах, для которых необходимо создать ПКО
		КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке = Новый Массив;
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов          = Новый Соответствие;
	Иначе
		
		Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	
			ЗаполнитьЗначенияСвойств(КомпонентыОбмена.ПараметрыКонвертации, КомпонентыОбмена.УзелКорреспондента,
				"ВыгружатьАналитикуПоСкладам");
				
		КонецЕсли;
		ДатаОстатков = Неопределено;
		Если КомпонентыОбмена.ПараметрыКонвертации.Свойство("ДатаОстатков", ДатаОстатков)
			И ТипЗнч(ДатаОстатков) = Тип("Дата") Тогда
			КомпонентыОбмена.ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов", НачалоДня(КонецДня(ДатаОстатков) + 1));
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	Если КомпонентыОбмена.НаправлениеОбмена = "Получение" Тогда
	
		УстановитьЗначенияФункциональныхОпций();
	
		ПрефиксыЗагруженныхДокументов = КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов;
		Если ПрефиксыЗагруженныхДокументов.Количество() > 0 Тогда
			ОбменДаннымиУТ.ЗаписьРегистраПрефиксыИнформационныхБазПоУмолчанию(ПрефиксыЗагруженныхДокументов);
		КонецЕсли;
		ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена);
		
		// Формирование структуры подчиненности выданных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурВыданных(КомпонентыОбмена);
	
		// Формирование структуры подчиненности полученных исправительных документов
		АктуализироватьПодчиненностьСчетовФактурПолученных(КомпонентыОбмена);
		
		// Обработка отчетов о розничных продажах
		Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка Тогда
			СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена);
КонецПроцедуры

#КонецОбласти
#Область ПОД
// Заполняет таблицу правил обработки данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаОбработкиДанных - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		Если ПравилаОбработкиДанных.Колонки.Найти("ОчисткаДанных") = Неопределено Тогда
			ПравилаОбработкиДанных.Колонки.Добавить("ОчисткаДанных");
		КонецЕсли;
		ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияПодарочныхСертификатов_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СписаниеТоваров(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтатьиРасходов_ПрочиеДоходыРасходы_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПОД_Документ_АвансовыйОтчет_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.АвансовыйОтчет;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровОтПокупателя_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия Тогда
		ИспользованиеПКО.Документ_ВозвратТоваровПоставщику_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиента_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Документ_ИнвентаризацияТоваров_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ОприходованиеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиБезналичныхДенежныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Субконто1 КАК БанковскийСчет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|			ТОГДА ""Расчетный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Аккредитивы))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АккредитивыВал))
	|			ТОГДА ""Аккредитивы""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЧековыеКнижки))
	|			ТОГДА ""ЧековыеКнижки""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчета))
	|				ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал))
	|			ТОГДА ""Депозитный""
	|		КОГДА ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеСпециальныеСчета))
	|			ТОГДА ""Иной""
	|		ИНАЧЕ ""Иной""
	|	КОНЕЦ КАК ВидБанковскогоСчета
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток > 0 И ХозрасчетныйОстатки.Субконто1 <>  ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|	ХозрасчетныйОстатки.Субконто1
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата        = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");
		Колонки.Добавить("ВидБанковскогоСчета");
		Колонки.Добавить("БанковскийСчет");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			Если ВыборкаДетальная.Сумма > 0 Тогда
				НоваяСтрока = ДенежныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			КонецЕсли;
		КонецЦикла;
		
		ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиЗадолженностиПодотчетныхЛиц");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоДтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетДт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И (Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					ИЛИ Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета),
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДокументыПоДтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоДт
	|ИЗ
	|	ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоДтВсе.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоДтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоДтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоДт
	|ИЗ
	|	ДатыПоследнихДокументовПоДт КАК ДатыПоследнихДокументовПоДт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоДтВсе КАК ДокументыПоДтВсе
	|		ПО ДатыПоследнихДокументовПоДт.ДатаПоследнегоДвижения = ДокументыПоДтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоДт.ФизическоеЛицо = ДокументыПоДтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоДт.Организация = ДокументыПоДтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоДт.ФизическоеЛицо,
	|	ДокументыПоДтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоДт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоДт КАК ПоследниеДокументыПоДт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоДт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоДт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПОД_Документ_ОстаткиКредитыЗаймы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиКредитыЗаймы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиКредитыЗаймы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "КредитыЗаймы");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПОД_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНаличныхДенежныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Организация КАК Организация,
	|	Таб.Валюта,
	|	Таб.СуммаРегл,
	|	Таб.Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация КАК Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК Валюта,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаРегл,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаОстатков,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|					И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы),
	|				,
	|				) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Организация,
	|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
	|		ХозрасчетныйОстатки.СуммаОстаток,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы), , ) КАК ХозрасчетныйОстатки
	|	ГДЕ
	|		ХозрасчетныйОстатки.СуммаОстаток > 0) КАК Таб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таб.Организация,
	|	ЕСТЬNULL(Таб.Валюта, &ВалютаРегл)
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, ДенежныеСредства");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		ДенежныеСредства = Новый ТаблицаЗначений;
		Колонки = ДенежныеСредства.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("Валюта");	
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = ДенежныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		Если ДенежныеСредства.Количество() > 0 Тогда
			
			ДанныеИБ.ДенежныеСредства = ДенежныеСредства;
			
			МассивВыборки.Добавить(ДанныеИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиНематериальныхАктивов_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиНематериальныхАктивов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиНематериальныхАктивов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиНематериальныхАктивов");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаНМАЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаНМАЭталон.Колонки;
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	// Справочные данные НМА.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("ПрочиеСведения");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ВидОбъектаУчета");
	// Стоимость НМА.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьВР");
	// Принятие к учету НМА.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("ДатаПриобретения");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииНУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("КоэффициентБУ");
	КолонкиТаблицы.Добавить("ОбъемПродукцииРаботДляВычисленияАмортизации");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияВР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(ТекущаяСтоимостьВР) 		КАК ТекущаяСтоимостьВР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР,
		|Сумма(НакопленнаяАмортизацияВР) КАК НакопленнаяАмортизацияВР
		|ПОМЕСТИТЬ ТаблицаСтоимостьНМА
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	ХозрасчетныйОстатки.СуммаВРОстаток 			КАК ТекущаяСтоимостьВР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР,
		|	0 											КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК НМА,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.Подразделение 			КАК Подразделение,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	0 											КАК ТекущаяСтоимостьВР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.НМА,
		|Таб.Организация,
		|Таб.Подразделение
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьНМА.Организация 								КАК Организация,
		|	ТаблицаСтоимостьНМА.Подразделение 								КАК Подразделение,
		|	ТаблицаСтоимостьНМА.НМА.Наименование 							КАК Наименование,
		|	ТаблицаСтоимостьНМА.НМА.Код 									КАК КодВПрограмме,
		// Справочные данные.
		|	ТаблицаСтоимостьНМА.НМА.НаименованиеПолное 						КАК НаименованиеПолное,
		|	ТаблицаСтоимостьНМА.НМА.ПрочиеСведения 							КАК ПрочиеСведения,
		|	ТаблицаСтоимостьНМА.НМА.АмортизационнаяГруппа 					КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьНМА.НМА.ВидОбъектаУчета 						КАК ВидОбъектаУчета,
		// Стоимость.
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ТаблицаСтоимостьНМА.ТекущаяСтоимостьВР 							КАК ТекущаяСтоимостьВР,
		|	ПервоначальныеСведенияНМАБУ.ПервоначальнаяСтоимость 			КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияНМАНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	ТаблицаСтоимостьНМА.НакопленнаяАмортизацияВР 					КАК НакопленнаяАмортизацияВР,
		|	ПервоначальныеСведенияНМАБУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюБУ,
		|	ПервоначальныеСведенияНМАНУ.НачислятьАмортизацию 				КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияНМАБУ.Коэффициент 						КАК КоэффициентБУ,
		|	ПервоначальныеСведенияНМАБУ.СпособНачисленияАмортизации 		КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияНМАНУ.МетодНачисленияАмортизации 			КАК СпособНачисленияАмортизацииНУ,
		|	ПервоначальныеСведенияНМАБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПервоначальныеСведенияНМАНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведенияНМАБУ.ОбъемПродукцииРаботДляВычисленияАмортизации	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
		|	НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаНМА.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		// Принятие к учету.
		|	ПервоначальныеСведенияНМАБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияНМАНУ.ДатаПриобретения 					КАК ДатаПриобретения,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СчетаУчетаНМА.СчетУчета.Код 									КАК СчетУчетаБУ,
		// Использование до 2009г.
		|	ПервоначальныеСведенияНМАНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияНМАНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьНМА КАК ТаблицаСтоимостьНМА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАБУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАБУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияНМАНУ
		|ПО ТаблицаСтоимостьНМА.НМА = ПервоначальныеСведенияНМАНУ.НематериальныйАктив
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьНМА.НМА = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = НачислениеАмортизацииНМАСпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&ДатаОстатков, Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьНМА.НМА = СобытиеПриемКУчету.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаНМА
		|ПО ТаблицаСтоимостьНМА.НМА = СчетаУчетаНМА.НематериальныйАктив
		|	И ТаблицаСтоимостьНМА.Организация = СчетаУчетаНМА.Организация
		|ИТОГИ ПО
		|	ТаблицаСтоимостьНМА.Организация,
		|	ТаблицаСтоимостьНМА.Подразделение
		|";
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, НематериальныеАктивы");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаНМА = ТаблицаНМАЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаНМА = ТаблицаНМА.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНМА, Выборка);
			КонецЦикла;
			ДанныеИБ.НематериальныеАктивы = ТаблицаНМА;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиОсновныхСредств_Отправка
Процедура ДобавитьПОД_Документ_ОстаткиОсновныхСредств_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиОсновныхСредств_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиОсновныхСредств");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	#Область ИнициализацияКолонокТабличнойЧасти
	ТаблицаОСЭталон = Новый ТаблицаЗначений;
	КолонкиТаблицы = ТаблицаОСЭталон.Колонки;
	КолонкиТаблицы.Добавить("КодВПрограмме");
	КолонкиТаблицы.Добавить("Наименование");
	КолонкиТаблицы.Добавить("ИнвентарныйНомер");
	КолонкиТаблицы.Добавить("МОЛ");
	// Справочные данные ОС.
	КолонкиТаблицы.Добавить("НаименованиеПолное");
	КолонкиТаблицы.Добавить("Комментарий");
	КолонкиТаблицы.Добавить("Изготовитель");
	КолонкиТаблицы.Добавить("ЗаводскойНомер");
	КолонкиТаблицы.Добавить("НомерПаспорта");
	КолонкиТаблицы.Добавить("ДатаВыпуска");
	// Стоимость ОС.
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ПервоначальнаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьБУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьНУ");
	КолонкиТаблицы.Добавить("ТекущаяСтоимостьПР");
	// Принятие к учету ОС.
	КолонкиТаблицы.Добавить("ДатаПринятияКУчету");
	КолонкиТаблицы.Добавить("НомерДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("НазваниеДокументаПринятияКУчету");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуСсылка");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуНаименование");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчетуВидСобытия");
	КолонкиТаблицы.Добавить("СобытиеПринятияКУчету");
	КолонкиТаблицы.Добавить("СпособПоступления");
	КолонкиТаблицы.Добавить("АмортизационнаяГруппа");
	КолонкиТаблицы.Добавить("ГруппаОС");
	КолонкиТаблицы.Добавить("КодПоОКОФ");
	КолонкиТаблицы.Добавить("ШифрПоЕНАОФ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиБУ");
	КолонкиТаблицы.Добавить("ПорядокПогашенияСтоимостиНУ");
	КолонкиТаблицы.Добавить("СчетУчетаБУ");
	// Амортизация ОС.
	КолонкиТаблицы.Добавить("НачислятьАмортизациюБУ");
	КолонкиТаблицы.Добавить("НачислятьАмортизациюНУ");
	КолонкиТаблицы.Добавить("СпособНачисленияАмортизацииБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияБУ");
	КолонкиТаблицы.Добавить("СрокПолезногоИспользованияНУ");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУСсылка");
	КолонкиТаблицы.Добавить("ГрафикАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентАмортизацииБУ");
	КолонкиТаблицы.Добавить("КоэффициентУскоренияБУ");
	КолонкиТаблицы.Добавить("ОбъемНаработкиБУ");
	КолонкиТаблицы.Добавить("ПоказательНаработки");
	КолонкиТаблицы.Добавить("ПоказательНаработкиСсылка");
	КолонкиТаблицы.Добавить("ПоказательНаработкиНаименование");
	КолонкиТаблицы.Добавить("ПоказательНаработкиЕдиницаИзмерения");
	КолонкиТаблицы.Добавить("СпециальныйКоэффициентНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияБУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияНУ");
	КолонкиТаблицы.Добавить("НакопленнаяАмортизацияПР");
	КолонкиТаблицы.Добавить("СчетАмортизацииБУ");
	КолонкиТаблицы.Добавить("НакопленнаяВыработка");
	// Модернизация ОС.
	КолонкиТаблицы.Добавить("ДатаПоследнейМодернизации");
	КолонкиТаблицы.Добавить("НазваниеДокументаМодернизации");
	КолонкиТаблицы.Добавить("НомерДокументаМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизации");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииСсылка");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииНаименование");
	КолонкиТаблицы.Добавить("СобытиеМодернизацииВидСобытия");
	// Использование до 2009г.
	КолонкиТаблицы.Добавить("АмортизацияДо2009");
	КолонкиТаблицы.Добавить("СрокИспользованияНУДо2009");
	#КонецОбласти
	#Область ЗапросКДанным
	Запрос = Новый Запрос;
	Запрос.Текст = 
		// Данные из регистров бухгалтерии.
		"ВЫБРАТЬ 
		|Таб.ОсновноеСредство,
		|Таб.Организация,
		|Сумма(ТекущаяСтоимостьБУ) 		КАК ТекущаяСтоимостьБУ,
		|Сумма(ТекущаяСтоимостьНУ) 		КАК ТекущаяСтоимостьНУ,
		|Сумма(ТекущаяСтоимостьПР) 		КАК ТекущаяСтоимостьПР,
		|Сумма(НакопленнаяАмортизацияБУ) КАК НакопленнаяАмортизацияБУ,
		|Сумма(НакопленнаяАмортизацияНУ) КАК НакопленнаяАмортизацияНУ,
		|Сумма(НакопленнаяАмортизацияПР) КАК НакопленнаяАмортизацияПР
		|ПОМЕСТИТЬ ТаблицаСтоимостьОС
		|ИЗ (ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток 			КАК ТекущаяСтоимостьБУ,
		|	ХозрасчетныйОстатки.СуммаНУОстаток 			КАК ТекущаяСтоимостьНУ,
		|	ХозрасчетныйОстатки.СуммаПРОстаток 			КАК ТекущаяСтоимостьПР,
		|	0 											КАК НакопленнаяАмортизацияБУ,
		|	0 											КАК НакопленнаяАмортизацияНУ,
		|	0 											КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства))
		|														ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток > 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток > 0 
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1				КАК ОсновноеСредство,
		|	ХозрасчетныйОстатки.Организация 			КАК Организация,
		|	0 											КАК ТекущаяСтоимостьБУ,
		|	0 											КАК ТекущаяСтоимостьНУ,
		|	0 											КАК ТекущаяСтоимостьПР,
		|	(-1)*ХозрасчетныйОстатки.СуммаОстаток 		КАК НакопленнаяАмортизацияБУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаНУОстаток 	КАК НакопленнаяАмортизацияНУ,
		|	(-1)*ХозрасчетныйОстатки.СуммаПРОстаток 	КАК НакопленнаяАмортизацияПР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток < 0 ИЛИ ХозрасчетныйОстатки.СуммаНУОстаток < 0 
		|	) КАК Таб
		|СГРУППИРОВАТЬ ПО
		|Таб.ОсновноеСредство,
		|Таб.Организация
		|;
		// Данные из регистров сведений.
		|ВЫБРАТЬ
		|	ТаблицаСтоимостьОС.Организация 									КАК Организация,
		|	МестонахождениеОСБУ.Местонахождение 							КАК Подразделение,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Наименование 				КАК Наименование,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Код 						КАК КодВПрограмме,
		|	ЕстьNULL(ПервоначальныеСведенияОСБУ.ИнвентарныйНомер, """") 	КАК ИнвентарныйНомер,
		|	МестонахождениеОСБУ.МОЛ 										КАК МОЛ,
		// Справочные данные.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НаименованиеПолное 			КАК НаименованиеПолное,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Изготовитель 				КАК Изготовитель,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ЗаводскойНомер 				КАК ЗаводскойНомер,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.НомерПаспорта 				КАК НомерПаспорта,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ДатаВыпуска 				КАК ДатаВыпуска,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.Комментарий 				КАК Комментарий,
		// Стоимость.
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьБУ 							КАК ТекущаяСтоимостьБУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьНУ 							КАК ТекущаяСтоимостьНУ,
		|	ТаблицаСтоимостьОС.ТекущаяСтоимостьПР 							КАК ТекущаяСтоимостьПР,
		|	ПервоначальныеСведенияОСБУ.ПервоначальнаяСтоимость 				КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияОСНУ.ПервоначальнаяСтоимостьНУ 			КАК ПервоначальнаяСтоимостьНУ,
		// Амортизация.
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияБУ 					КАК НакопленнаяАмортизацияБУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияНУ 					КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаСтоимостьОС.НакопленнаяАмортизацияПР 					КАК НакопленнаяАмортизацияПР,
		|	НачислениеАмортизацииОСБУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюБУ,
		|	НачислениеАмортизацииОСНУ.НачислятьАмортизацию 					КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияОСБУ.СпособНачисленияАмортизации 			КАК СпособНачисленияАмортизацииБУ,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки 					КАК ПоказательНаработкиСсылка,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.Наименование 		КАК ПоказательНаработкиНаименование,
		|	ПервоначальныеСведенияОСБУ.ПараметрВыработки.ЕдиницаИзмерения 	КАК ПоказательНаработкиЕдиницаИзмерения,
		|	ПараметрыАмортизацииОСБУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииОСНУ.СрокПолезногоИспользования 			КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииОСБУ.ОбъемПродукцииРабот 					КАК ОбъемНаработкиБУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииБУ,
		|	ПараметрыАмортизацииОСНУ.КоэффициентАмортизации 				КАК КоэффициентАмортизацииНУ,
		|	ПараметрыАмортизацииОСБУ.КоэффициентУскорения 					КАК КоэффициентУскоренияБУ,
		|	ГрафикиАмортизацииОСБУ.ГрафикАмортизации 						КАК ГрафикАмортизацииБУСсылка,
		|	НачислениеАмортизацииОССпециальныйКоэффициентНУ.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
		|	СчетаУчетаОС.СчетНачисленияАмортизации.Код 						КАК СчетАмортизацииБУ,
		|	ВыработкаОС.КоличествоОборот 									КАК НакопленнаяВыработка,
		// Принятие к учету.
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ГруппаОС 					КАК ГруппаОС,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.АмортизационнаяГруппа 		КАК АмортизационнаяГруппа,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.ШифрПоЕНАОФ.Код 			КАК ШифрПоЕНАОФ,
		|	ТаблицаСтоимостьОС.ОсновноеСредство.КодПоОКОФ.Код 				КАК КодПоОКОФ,
		|	ПервоначальныеСведенияОСБУ.СпособПоступления 					КАК СпособПоступления,
		|	ПервоначальныеСведенияОСБУ.ПорядокПогашенияСтоимости 			КАК ПорядокПогашенияСтоимостиБУ,
		|	ПервоначальныеСведенияОСНУ.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокПогашенияСтоимостиНУ,
		|	СобытиеПриемКУчету.Период			 							КАК ДатаПринятияКУчету,
		|	СобытиеПриемКУчету.НомерДокумента	 							КАК НомерДокументаПринятияКУчету,
		|	СобытиеПриемКУчету.Событие 										КАК СобытиеПринятияКУчетуСсылка,
		|	СобытиеПриемКУчету.Событие.Наименование 						КАК СобытиеПринятияКУчетуНаименование,
		|	СобытиеПриемКУчету.Событие.ВидСобытияОС 						КАК СобытиеПринятияКУчетуВидСобытия,
		|	СобытиеПриемКУчету.НазваниеДокумента							КАК НазваниеДокументаПринятияКУчету,
		|	СчетаУчетаОС.СчетУчета.Код 										КАК СчетУчетаБУ,
		// Модернизация.
		|	СобытиеМодернизация.Период			 							КАК ДатаПоследнейМодернизации,
		|	СобытиеМодернизация.НомерДокумента	 							КАК НомерДокументаМодернизации,
		|	СобытиеМодернизация.Событие 									КАК СобытиеМодернизацииСсылка,
		|	СобытиеМодернизация.Событие.Наименование 						КАК СобытиеМодернизацииНаименование,
		|	СобытиеМодернизация.Событие.ВидСобытияОС 						КАК СобытиеМодернизацииВидСобытия,
		|	СобытиеМодернизация.НазваниеДокумента							КАК НазваниеДокументаМодернизации,
		// Использование до 2009г.
		|	ПервоначальныеСведенияОСНУ.АмортизацияДо2009 					КАК АмортизацияДо2009,
		|	ПервоначальныеСведенияОСНУ.ФактическийСрокИспользованияДо2009 	КАК СрокИспользованияНУДо2009
		|ИЗ ТаблицаСтоимостьОС КАК ТаблицаСтоимостьОС
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСБУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПервоначальныеСведенияОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПервоначальныеСведенияОСНУ.ОсновноеСредство
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК ПараметрыАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ПараметрыАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ПараметрыАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК ГрафикиАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ГрафикиАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ГрафикиАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК МестонахождениеОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = МестонахождениеОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = МестонахождениеОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСБУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСБУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСБУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОСНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОСНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОСНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&ДатаОстатков) КАК НачислениеАмортизацииОССпециальныйКоэффициентНУ
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНУ.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = НачислениеАмортизацииОССпециальныйКоэффициентНУ.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету)
		|							ИЛИ Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию)) КАК СобытиеПриемКУчету
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеПриемКУчету.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеПриемКУчету.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СобытияОСОрганизаций.СрезПоследних(&ДатаОстатков, Событие.ВидСобытияОС = ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.Модернизация)) КАК СобытиеМодернизация
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СобытиеМодернизация.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СобытиеМодернизация.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков) КАК СчетаУчетаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = СчетаУчетаОС.Организация
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.ВыработкаОС.Обороты(,&ДатаОстатков) КАК ВыработкаОС
		|ПО ТаблицаСтоимостьОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
		|	И ТаблицаСтоимостьОС.Организация = ВыработкаОС.Организация
		|	И ПервоначальныеСведенияОСБУ.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
		|ИТОГИ ПО
		|	ТаблицаСтоимостьОС.Организация,
		|	МестонахождениеОСБУ.Местонахождение
		|";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	#КонецОбласти
	МассивВыборки = Новый Массив;
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		ВыборкаПодразделения = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
			ДанныеИБ = Новый Структура("Дата, Организация, Подразделение, ОсновныеСредства");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			ДанныеИБ.Подразделение = ВыборкаПодразделения.Подразделение;
			ТаблицаОС = ТаблицаОСЭталон.Скопировать();
			Выборка = ВыборкаПодразделения.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрокаОС = ТаблицаОС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОС, Выборка);
			КонецЦикла;
			ДанныеИБ.ОсновныеСредства = ТаблицаОС;
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиПерерасходаПодотчетныхЛиц");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ФизическоеЛицо,
	|	ХозрасчетныйДвиженияССубконто.Период КАК ДатаПоследнегоДвижения,
	|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|ПОМЕСТИТЬ ДокументыПоКтВсе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			&ДатаОстатков,
	|			СчетКт В (&СчетаРасчетовСПодотчетнымиЛицами)
	|				И Регистратор ССЫЛКА Документ.АвансовыйОтчет,
	|			&ВидыСубконто,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДокументыПоКтВсе.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.ДатаПоследнегоДвижения) КАК ДатаПоследнегоДвижения
	|ПОМЕСТИТЬ ДатыПоследнихДокументовПоКт
	|ИЗ
	|	ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоКтВсе.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо,
	|	ДатаПоследнегоДвижения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыПоКтВсе.Организация КАК Организация,
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(ДокументыПоКтВсе.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ПоследниеДокументыПоКт
	|ИЗ
	|	ДатыПоследнихДокументовПоКт КАК ДатыПоследнихДокументовПоКт
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПоКтВсе КАК ДокументыПоКтВсе
	|		ПО ДатыПоследнихДокументовПоКт.ДатаПоследнегоДвижения = ДокументыПоКтВсе.ДатаПоследнегоДвижения
	|			И ДатыПоследнихДокументовПоКт.ФизическоеЛицо = ДокументыПоКтВсе.ФизическоеЛицо
	|			И ДатыПоследнихДокументовПоКт.Организация = ДокументыПоКтВсе.Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыПоследнихДокументовПоКт.ФизическоеЛицо,
	|	ДокументыПоКтВсе.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФизическоеЛицо,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0) = 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ РасчетыСПодотчетнымиЛицами
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаРасчетовСПодотчетнымиЛицами), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПодотчетнымиЛицами.Счет,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо,
	|	РасчетыСПодотчетнымиЛицами.Организация КАК Организация,
	|	РасчетыСПодотчетнымиЛицами.ВалютаВзаиморасчетов,
	|	РасчетыСПодотчетнымиЛицами.СуммаРегл,
	|	РасчетыСПодотчетнымиЛицами.Сумма,
	|	ЕСТЬNULL(ПоследниеДокументыПоКт.Регистратор, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов
	|ИЗ
	|	РасчетыСПодотчетнымиЛицами КАК РасчетыСПодотчетнымиЛицами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДокументыПоКт КАК ПоследниеДокументыПоКт
	|		ПО РасчетыСПодотчетнымиЛицами.ФизическоеЛицо = ПоследниеДокументыПоКт.ФизическоеЛицо
	|			И РасчетыСПодотчетнымиЛицами.Организация = ПоследниеДокументыПоКт.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПодотчетнымиЛицами.Организация,
	|	РасчетыСПодотчетнымиЛицами.ФизическоеЛицо
	|ИТОГИ ПО
	|	Организация";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами",
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
		ДанныеИБ.Дата = ДатаОстатков;
		ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
		
		Расчеты = Новый ТаблицаЗначений;
		Колонки = Расчеты.Колонки;
		Колонки.Добавить("ФизическоеЛицо");
		Колонки.Добавить("ВалютаВзаиморасчетов");
		Колонки.Добавить("СуммаРегл");
		Колонки.Добавить("Сумма");
		Колонки.Добавить("ДокументРасчетов");
		
		ВыборкаДетальная = ВыборкаОрганизации.Выбрать();
		Пока ВыборкаДетальная.Следующий() Цикл
			
			НоваяСтрока = Расчеты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальная);
			
		КонецЦикла;
		
		ДанныеИБ.Расчеты = Расчеты;
		
		МассивВыборки.Добавить(ДанныеИБ);
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиАвансы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПокупателямиДолги");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиКлиенты");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиАвансы");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "АвансыПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиРасчетыСПоставщикамиДолги");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы) Тогда
		ЗаполнениеОстатковДолговАвансовКредитовЗаймов(КомпонентыОбмена.ПараметрыКонвертации);
	КонецЕсли;
	
	МассивВыборки = Новый Массив;
	
	ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, КомпонентыОбмена.ПараметрыКонвертации, "ДолгиПоставщики");
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПОД_Документ_ОстаткиСобственныхТМЦ(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиСобственныхТМЦ");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладах))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Материалы))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)
		|				И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации))
		|				И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МатериалыПереданныеВПереработку)
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ГотоваяПродукция))
		|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПокупныеИзделия)))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС,
		|	Таб.СчетУчета
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	ТипыЗапасовФормата = Новый Массив();
	ТипыЗапасовФормата.Добавить("СырьеИМатериалы");
	ТипыЗапасовФормата.Добавить("ПокупныеПолуфабрикатыИКомплектующие");
	ТипыЗапасовФормата.Добавить("ВозвратнаяТара");
	ТипыЗапасовФормата.Добавить("Топливо");
	ТипыЗапасовФормата.Добавить("ЗапасныеЧасти");
	ТипыЗапасовФормата.Добавить("ПрочиеМатериалы");
	ТипыЗапасовФормата.Добавить("СтроительныеМатериалы");
	ТипыЗапасовФормата.Добавить("ИнвентарьИХозяйственныеПринадлежности");
	ТипыЗапасовФормата.Добавить("СпецоснасткаИСпецодеждаНаСкладе");
	ТипыЗапасовФормата.Добавить("СобственныеТовары");
	ТипыЗапасовФормата.Добавить("ПокупныеИзделия");
	ТипыЗапасовФормата.Добавить("ГотоваяПродукция");
	ТипыЗапасовФормата.Добавить("КомиссионныеТовары");
	
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.ТМЦ = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, ТМЦ");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ТМЦ.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДетальныеЗаписи.ВидСтавкиНДС, ДатаОстатков);
			
			НоваяСтрока.ВидЗапасов = СокрЛП(ВыборкаДетальныеЗаписи.СчетУчета.ИмяПредопределенныхДанных);
			Если ТипыЗапасовФормата.Найти(НоваяСтрока.ВидЗапасов) = Неопределено Тогда
				НоваяСтрока.ВидЗапасов = "СобственныеТовары";
			КонецЕсли;
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.ТМЦ = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПОД_Документ_ОстаткиТараПринятая(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТараПринятая";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТараПринятая");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДокументПоступления,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто3 КАК Склад
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Тара)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто2.Контрагент,
	|	ХозрасчетныйОстатки.Субконто3
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТараПодТоваромИПорожняя)), , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления
	|ИТОГИ ПО
	|	Организация,
	|	Склад,
	|	ДокументПоступления";
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаСклады = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСклады.Следующий() Цикл
			ВыборкаДокументыПоступления = ВыборкаСклады.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаДокументыПоступления.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаДокументыПоступления.Выбрать();
				
				ДанныеИБ = Новый Структура("Дата, Организация, Склад, Тара, Контрагент");
				ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДокументыПоступления);
				
				ДанныеИБ.Дата = ДатаОстатков;
				ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
				
				Тара = Новый ТаблицаЗначений;
				Колонки = Тара.Колонки;
				Колонки.Добавить("Номенклатура");
				Колонки.Добавить("СуммаБезНДС");
				Колонки.Добавить("Количество");
				Колонки.Добавить("КоличествоУпаковок");
				Колонки.Добавить("НомерГТД");
				Колонки.Добавить("ЕдиницаИзмерения");
				Колонки.Добавить("СтавкаНДС");
				Колонки.Добавить("СуммаНДС");
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
						НоваяСтрока = Тара.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
						
						РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения,ВидСтавкиНДС");
						НоваяСтрока.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
						НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ДатаОстатков);
						
						СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);					
						НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
					КонецЕсли;
				КонецЦикла;
				
				ДанныеИБ.Тара = Тара;
				
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПереданныхНаКомиссию");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество,
		|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоУпаковок,
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто2 КАК Номенклатура
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыОтгруженные)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстаток <> 0 И ХозрасчетныйОстатки.КоличествоОстаток > 0
		|	И ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ХозрасчетныйОстатки.Организация,
		|	Контрагент
		|ИТОГИ ПО
		|	Организация,
		|	Контрагент";
	
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	МассивВыборки = Новый Массив;
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаКонтрагент = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКонтрагент.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
			
			ДанныеИБ = Новый Структура("Дата, Организация, Товары, Контрагент");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаКонтрагент);
			
			ДанныеИБ.Дата        = ДатаОстатков;
			ДанныеИБ.Организация = ВыборкаОрганизации.Организация;
			
			Товары = Новый ТаблицаЗначений;
			Колонки = Товары.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("КоличествоУпаковок");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Сумма > 0 Тогда
					НоваяСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения,ВидСтавкиНДС");
					НоваяСтрока.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ДатаОстатков);
				
					СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
					НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
				КонецЕсли;	
			КонецЦикла;
			
			ДанныеИБ.Товары = Товары;
			
			МассивВыборки.Добавить(ДанныеИБ);
		КонецЦикла;
		
		
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Неопределено;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОстаткиТоваровПринятыхНаКомиссию");
КонецПроцедуры

Функция ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(КомпонентыОбмена)
	ДатаОстатков = КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ
		|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе))";
		
	МассивСчетовУчета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Запрос = ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков);
	
	Запрос.Текст = Запрос.Текст + 
		"
		|;
		|
		|ВЫБРАТЬ
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент КАК Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента КАК Договор,
		|	СУММА(Таб.Количество) КАК Количество,
		|	СУММА(Таб.Количество) КАК КоличествоУпаковок,
		|	СУММА(Таб.Сумма) КАК Сумма
		|ИЗ ВТ_Остатки КАК Таб
		|СГРУППИРОВАТЬ ПО
		|	Таб.Организация,
		|	Таб.Склад,
		|	Таб.Номенклатура,
		|	Таб.Номенклатура.ЕдиницаИзмерения,
		|	Таб.Номенклатура.ВидСтавкиНДС,
		|	Таб.СчетУчета,
		|	Таб.ДокументПоступления.Контрагент,
		|	Таб.ДокументПоступления.ДоговорКонтрагента
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Склад,
		|	Контрагент,
		|	Договор";
	
	МассивВыборки = Новый Массив;
	
	ТекОрганизация = Неопределено;
	ТекСклад = Неопределено;
	ТекКонтрагент = Неопределено;
	ТекДоговор = Неопределено;
	ПерваяИтерацияЗакончена = Ложь;
	
	ДанныеИБ = Неопределено;
	ТМЦ = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ТекОрганизация <> ВыборкаДетальныеЗаписи.Организация Тогда
			ТекОрганизация = ВыборкаДетальныеЗаписи.Организация;
			ТекСклад = Неопределено;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекСклад <> ВыборкаДетальныеЗаписи.Склад Тогда
			ТекСклад = ВыборкаДетальныеЗаписи.Склад;
			ТекКонтрагент = Неопределено;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		Если ТекКонтрагент <> ВыборкаДетальныеЗаписи.Контрагент Тогда
			ТекКонтрагент = ВыборкаДетальныеЗаписи.Контрагент;
			ТекДоговор = Неопределено;
		КонецЕсли;
		
		
		Если ТекДоговор <> ВыборкаДетальныеЗаписи.Договор Тогда
			ТекДоговор = ВыборкаДетальныеЗаписи.Договор;
			
			// Окончание группировки.
			Если ПерваяИтерацияЗакончена И ТМЦ.Количество() > 0 Тогда
				ДанныеИБ.Товары = ТМЦ;
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
			
			// Начало группировки.
			ДанныеИБ = Новый Структура("Дата, Организация, Склад, Товары, Контрагент, Договор");
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ВыборкаДетальныеЗаписи);
			ДанныеИБ.Дата = ДатаОстатков;
			
			ТМЦ = Новый ТаблицаЗначений;
			Колонки = ТМЦ.Колонки;
			Колонки.Добавить("Номенклатура");
			Колонки.Добавить("СуммаБезНДС");
			Колонки.Добавить("Количество");
			Колонки.Добавить("НомерГТД");
			Колонки.Добавить("ВидЗапасов");
			Колонки.Добавить("ЕдиницаИзмерения");
			Колонки.Добавить("СтавкаНДС");
			Колонки.Добавить("СуммаНДС");
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.Количество > 0
			И ВыборкаДетальныеЗаписи.Сумма > 0
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Номенклатура)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент)
			И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Договор) Тогда
			НоваяСтрока = ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
			ТМЦ.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаДетальныеЗаписи.ВидСтавкиНДС, ДатаОстатков);
			
			СтавкаНДСЧислом = СтавкаНДСЧислом(НоваяСтрока.СтавкаНДС);
			НоваяСтрока.СуммаБезНДС = Окр(ВыборкаДетальныеЗаписи.Сумма / (1 + СтавкаНДСЧислом/100), 2);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.СуммаБезНДС * СтавкаНДСЧислом / 100, 2);
		КонецЕсли;
		
		Если Не ПерваяИтерацияЗакончена Тогда
			ПерваяИтерацияЗакончена = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Окончание группировки.
	Если Не РезультатЗапроса.Пустой() И ТМЦ.Количество() > 0 Тогда
		ДанныеИБ.Товары = ТМЦ;
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.Ссылка,
		|	Док.Дата
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка КАК Ссылка,
		|		Док.Ссылка.Дата КАК Дата
		|	ИЗ Документ.ОтчетОРозничныхПродажах.Товары КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	ОБЪЕДИНИТЬ ВСЕ 
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Док.Ссылка,
		|		Док.Ссылка.Дата
		|	ИЗ
		|		Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Док
		|	ГДЕ
		|		Док.Ссылка.Проведен
		|		И Док.Ссылка.Дата >= &ДатаНачала 
		|		И Док.Ссылка.Дата <= &ДатаОкончания
		|	) КАК Док
		|УПОРЯДОЧИТЬ ПО Док.Дата
		|";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПКО_Отправка
Процедура ДобавитьПОД_Документ_ПКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка   = Ложь;
	ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка    = Ложь;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка        = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка            = Ложь;
	ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка       = Ложь;
	ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка       = Ложь;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		
		ИспользованиеПКО.Документ_ПКОРасчетыССотрудниками_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
		
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка Тогда
		
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			ИспользованиеПКО.Документ_ПКОПрочиеДоходы_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			//Данные о валюте конвертации можно взять только из договора
			//Если этих данных нет, придется выгружать документ как ПрочееПоступление
			Если ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
				И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
				ИспользованиеПКО.Документ_ПКОКонвертацияВалюты_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			КонецЕсли;
		Иначе
		
			ИспользованиеПКО.Документ_ПКОПрочееПоступление_Отправка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПлатежноеПоручение_Отправка
Процедура ДобавитьПОД_Документ_ПлатежноеПоручение_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПлатежноеПоручение_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПлатежноеПоручение;
	ПравилоОбработки.ОчисткаДанных = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
		И ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		И ДанныеИБ.Проведен И ДанныеИБ.Склад.ТипСклада <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ИспользованиеПКО.Документ_ПоступлениеТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_ПРС_Отправка
Процедура ДобавитьПОД_Документ_ПРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочееПоступление_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПрочиеДоходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПРСПоПлатежнымКартам_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_ПРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Ложь;
	ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам,
		// расчетам по кредитам (займам) и прочим расчетам с контрагентами
		ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.0") Тогда
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_ПРСПоПлатежнымКартам_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		// Конвертация валюты - из операций, связанных с конвертацией валюты
		ИспользованиеПКО.Документ_ПРСКонвертацияВалюты_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		
		// Расчеты с сотрудниками - из возврата займа работником
		ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ЛичныеСредстваПредпринимателя
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
	
		ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеДоходы Тогда
			
			// 91.01
			ИспользованиеПКО.Документ_ПРСПрочиеДоходы_Отправка = Истина;
			
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_ Тогда
			
			// 71.xx
			// Расчеты с сотрудниками - из прочего поступления (расчеты с подотчеными лицами)
			ИспользованиеПКО.Документ_ПРСРасчетыССотрудниками_Отправка = Истина;
			
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) И ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			// 60.xx, 62.xx, 66.xx, 67.xx 76.xx
			// Расчеты с контрагентами - из прочего поступления
			ИспользованиеПКО.Документ_ПРСРасчетыСКонтрагентами_Отправка = Истина;
			
		Иначе 
			ИспользованиеПКО.Документ_ПРСПрочееПоступление_Отправка = Истина;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_ПРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.Оборудование
		//Если в документе заполнены только агентские услуги - не отправляем
		И (ДанныеИБ.Товары.Количество() + ДанныеИБ.Услуги.Количество()  + ДанныеИБ.АгентскиеУслуги.Количество() + ДанныеИБ.ВозвратнаяТара.Количество() > 0) Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Если ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОстатков) 
		И ЗначениеЗаполнено(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов) Тогда
		
		МассивВыборки = Новый Массив;
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Док.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК Док
			|ГДЕ
			|	Док.Проведен
			|	И Док.Дата >= &ДатаНачала 
			|	И Док.Дата <= &ДатаОкончания";
	
		Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
		Выборка = Запрос.Выполнить().Выбрать();
	
		Пока Выборка.Следующий() Цикл
			МассивВыборки.Добавить(Выборка.Ссылка);
		КонецЦикла;
	
		Возврат МассивВыборки;
	
	КонецЕсли;
КонецФункции
#КонецОбласти
#Область Документ_РКО_Отправка
Процедура ДобавитьПОД_Документ_РКО_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКО_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКО_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_РКО_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_РКО_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Ложь;
	ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Ложь;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		
		// Расчеты с контрагентами - из операций по покуптелям, поставщикам, расчетам по кредитам (займам)
		ИспользованиеПКО.Документ_РКОРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		    ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОВыплатаЗарплаты_Отправка = Истина;
		КонецЕсли;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		
		// Расчеты с сотрудниками - из операций по выплате депонентов и заработной платы, расчетов с подотчетниками
		ИспользованиеПКО.Документ_РКОРасчетыССотрудниками_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
	
		// Перемещение на банковский счет - из операций инкассации и взноса наличными в банк
		ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ЛичныеСредстваПредпринимателя Тогда
	
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход Тогда
	
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасходыНаПродажу
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПрочиеРасходы Тогда
			
			// 20.xx, 23, 25, 26, 44.xx, 91.02
			ИспользованиеПКО.Документ_РКОПрочийРасход_Отправка = Истина;
		
		ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
			
			// 57.02, 57.22
			ИспользованиеПКО.Документ_РКОКонвертацияВалюты_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
		КонецЕсли;
	
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратРозничномуПокупателю Тогда
		ИспользованиеПКО.Документ_РКОПрочаяВыдача_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_РКО_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПОД_Документ_СписаниеТоваров_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеТоваров;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Отправка");
КонецПроцедуры

Функция ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеТоваров КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СРС_Отправка
Процедура ДобавитьПОД_Документ_СРС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СРС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СРС_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_СРС_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗП_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗПНаЛС_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СРС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка  = Ложь;
	ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка    = Ложь;
	ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка   = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка        = Ложь;
	ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка         = Ложь;
	ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка        = Ложь;
	
	ВидПрочегоСписания = "";
	ВидРасчетовСКонтрагентом = "";
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю 
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		
		ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу Тогда
		ИспользованиеПКО.Документ_СБДСРасчетыССотрудниками_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику Тогда
		//Прочее
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ") Тогда
			ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			Если СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				Или СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты Тогда
				//ИспользованиеПКО.Документ_СБДСКонвертацияВалюты_Отправка = Истина;
			ИначеЕсли ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
				ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
			ИначеЕсли  ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПустаяСсылка() 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
			Иначе
				ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		ИспользованиеПКО.Документ_СБДСПлатежиВБюджет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		ИспользованиеПКО.Документ_СБДСПереводНаДругойСчет_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
			И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
		ИначеЕсли (ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами) 
			И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ИспользованиеПКО.Документ_СБДСРасчетыСКонтрагентами_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ИспользованиеПКО.Документ_СБДСПрочиеРасходы_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП ИЛИ 
		ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДепонентов Тогда
		Если УчетЗарплаты.ЗарплатаВыплачиваетсяБезВедомости() Тогда
		    ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
		Иначе
			ИспользованиеПКО.Документ_СБДСПеречислениеЗП_Отправка = Истина;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику Тогда
		ИспользованиеПКО.Документ_СБДСПеречислениеЗПНаЛС_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ЛичныеСредстваПредпринимателя Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеДивидендов Тогда
		ИспользованиеПКО.Документ_СБДСПрочееСписание_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_СРС_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_СчетПоставщика_Отправка
Процедура ДобавитьПОД_Документ_СчетПоставщика_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетПоставщика_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СчетПоставщика_Отправка = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.ГТДИмпорт;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Отправка");
КонецПроцедуры

Функция ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ГТДИмпорт КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата >= &ДатаНачала 
		|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ЦенаУстановленаХотяБыВОднойСтроке = Ложь;
	Для Каждого СтрокаТовара ИЗ ДанныеИБ.Товары Цикл
		Если СтрокаТовара.Цена <> 0 Тогда
			ЦенаУстановленаХотяБыВОднойСтроке = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЦенаУстановленаХотяБыВОднойСтроке Тогда
		ИспользованиеПКО.Документ_УстановкаЦенНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК Док
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	|		ПО Док.Ссылка = УстановкаЦенНоменклатурыТовары.Ссылка
	|			И (УстановкаЦенНоменклатурыТовары.Цена <> 0)
	|ГДЕ
	|	Док.Проведен
	|	И Док.Дата >= &ДатаНачала
	|	И Док.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", КомпонентыОбмена.ПараметрыКонвертации.ДатаНачалаПериодаВыгрузкиДокументов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КомпонентыОбмена.ПараметрыКонвертации.ДатаОкончанияПериодаВыгрузкиДокументов));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область ДополнительныеРеквизиты_Отправка
Процедура ДобавитьПОД_ДополнительныеРеквизиты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ДополнительныеРеквизиты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДополнительныеРеквизиты");
КонецПроцедуры
#КонецОбласти
#Область ЗначенияДопРеквизитов_Отправка
Процедура ДобавитьПОД_ЗначенияДопРеквизитов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "ЗначенияДопРеквизитов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЗначенияДополнительныхРеквизитов");
КонецПроцедуры
#КонецОбласти
#Область РегистрСведений_СтатусыДокументов_Отправка
Процедура ДобавитьПОД_РегистрСведений_СтатусыДокументов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "РегистрСведений_СтатусыДокументов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.СтатусыДокументов;
	ПравилоОбработки.ОчисткаДанных = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Отправка
Процедура ДобавитьПОД_Справочник_Банки_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Банки;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Банки_Отправка_ПриОбработке";
	ПравилоОбработки.ВыборкаДанных = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры

Процедура ПОД_Справочник_Банки_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ<>Неопределено И ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_Банки = Ложь;	
	КонецЕсли;
КонецПроцедуры

Функция ПОД_Справочник_Банки_Отправка_ВыборкаДанных(КомпонентыОбмена)
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Код,
		|	Банки.Ссылка,
		|	Банки.Наименование,
		|	Банки.КоррСчет,
		|	Банки.Город,
		|	Банки.Адрес,
		|	Банки.ЭтоГруппа,
		|	Банки.Телефоны
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	НЕ Банки.ЭтоГруппа";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВыборки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Структура = Новый Структура("Код,Наименование,КоррСчет,Город,Адрес,Телефоны,Ссылка,ЭтоГруппа");
		ЗаполнитьЗначенияСвойств(Структура, Выборка);	
	
		МассивВыборки.Добавить(Структура);	
	КонецЦикла;
	
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.БанковскиеСчета;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Отправка
Процедура ДобавитьПОД_Справочник_Валюты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Валюты;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ВидыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ВидыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ВидыНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПОД_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоОбработки.ВыборкаДанных = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов_Отправка");
КонецПроцедуры

Функция ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(КомпонентыОбмена)
	МассивВыборки = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ссылка
	|ИЗ Справочник.ДоговорыКонтрагентов
	|ГДЕ ЭтоГруппа = Ложь";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивВыборки.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат МассивВыборки;
КонецФункции
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ДокументыФизическихЛиц" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_ДокументыФизическихЛиц_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Должности_Отправка
Процедура ДобавитьПОД_Справочник_Должности_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Должности_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Должности;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Должности_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ПОД_Справочник_Должности_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПОД_Справочник_Контрагенты_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Контрагенты;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Контрагенты_Отправка = Ложь;
	ИспользованиеПКО.Справочник_КонтрагентыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_КонтрагентыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Контрагенты_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка
Процедура ДобавитьПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ЛицензииПоставщиковАлкогольнойПродукции_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ЛицензииПоставщиковАлкогольнойПродукции" добавлен в версии 1.3.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.ЛицензииПоставщиковАлкогольнойПродукции_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПОД_Справочник_Номенклатура_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Номенклатура;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Номенклатура_Отправка = Ложь;
	ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_НоменклатураГруппа_Отправка = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Номенклатура_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПОД_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатурнаяГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_НоменклатурнаяГруппа_Отправка = Ложь;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПОД_Справочник_Организации_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПОД_Справочник_Подразделения_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Подразделения_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Подразделения_Отправка");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Отправка
Процедура ДобавитьПОД_Справочник_Пользователи_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Пользователи;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ПрочиеДоходыРасходы_Отправка
Процедура ДобавитьПОД_Справочник_ПрочиеДоходыРасходы_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ПрочиеДоходыРасходы_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПОД_Справочник_Склады_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Склады;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Склады_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры

Процедура ПОД_Справочник_Склады_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Склады_Отправка = Ложь;
	ИспользованиеПКО.Справочник_СкладыГруппа = Ложь;
	
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_СкладыГруппа = Истина;
	Иначе
		ИспользованиеПКО.Справочник_Склады_Отправка = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.3") Тогда
		ИспользованиеПКО.Справочник_СпецификацииНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Отправка
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры

Процедура ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеИБ.ЭтоГруппа Тогда
		ИспользованиеПКО.Справочник_СтатьиДДС = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Отправка
Процедура ДобавитьПОД_Справочник_СтраныМира_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.СтраныМира;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПОД_Справочник_ТипыЦен(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.ФизическиеЛица;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Отправка");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_ФизическиеЛица_Отправка = Не ДанныеИБ.ЭтоГруппа;
	ИспользованиеПКО.Справочник_ФизическиеЛицаГруппа_Отправка = ДанныеИБ.ЭтоГруппа;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПОД_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке";
	ПравилоОбработки.ОчисткаДанных = Ложь;
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ШтрихкодыНоменклатуры_Отправка");
КонецПроцедуры

Процедура ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(ДанныеИБ, ИспользованиеПКО, КомпонентыОбмена)
	// Объект формата "Справочник.ШтрихкодыНоменклатуры" добавлен в версии 1.4.
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.4") Тогда
		ИспользованиеПКО.Справочник_ШтрихкодыНоменклатуры_Отправка = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Документ_АвансовыйОтчет
Процедура ДобавитьПОД_Документ_АвансовыйОтчет(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АвансовыйОтчет";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АвансовыйОтчет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_АвансовыйОтчет_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АвансовыйОтчет_Получение_ПоляПоиска");
КонецПроцедуры

Процедура ПОД_Документ_АвансовыйОтчет_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьСсылка = ДанныеXDTO.КлючевыеСвойства.Свойство("Ссылка");
	
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение = ЕстьСсылка;
	ИспользованиеПКО.Документ_АвансовыйОтчет_Получение_ПоляПоиска = Не ЕстьСсылка;
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот
Процедура ДобавитьПОД_Документ_АктВыполненныхРабот(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АктВыполненныхРабот";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АктВыполненныхРабот";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_АктВыполненныхРабот");
КонецПроцедуры
#КонецОбласти
#Область Документ_АннулированиеПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_АннулированиеПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_АннулированиеПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("АннулированиеПодарочныхСертификатов_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзПроизводства_Получение
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзПроизводства_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзЭксплуатации_Получение
Процедура ДобавитьПОД_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратМатериаловИзЭксплуатации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_ВозвратПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ВозвратПодарочныхСертификатов_ВозвратНаличными");
КонецПроцедуры

Процедура ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Истина;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Ложь;
	Иначе
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту = Ложь;
		ИспользованиеПКО.ВозвратПодарочныхСертификатов_ВозвратНаличными = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяДавальцу_Получение
Процедура ДобавитьПОД_Документ_ВозвратСырьяДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратСырьяДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяОтПереработчика_Получение
Процедура ДобавитьПОД_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратСырьяОтПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПОД_Документ_ВозвратТоваровОтПокупателя(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровОтПокупателя");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПОД_Документ_ВозвратТоваровПоставщику(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВозвратТоваровПоставщику";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВозвратТоваровПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВозвратТоваровПоставщику");
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыпускПродукции_Получение
Процедура ДобавитьПОД_Документ_ВыпускПродукции_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ВыпускПродукции_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ВыпускПродукции";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ВыпускПродукции_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПОД_Документ_ЗаказКлиента_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ЗаказКлиента_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗаказКлиента";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ЗаказКлиента_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Получение
Процедура ДобавитьПОД_Документ_ИнвентаризацияТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ИнвентаризацияТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ИнвентаризацияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ИнвентаризацияТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Получение
Процедура ДобавитьПОД_Документ_КорректировкаДолга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаДолга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.КорректировкаДолга";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаДолга_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления_Получение
Процедура ДобавитьПОД_Документ_КорректировкаПоступления_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаПоступления_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.КорректировкаПоступленияТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаПоступления");
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализацииТоваров
Процедура ДобавитьПОД_Документ_КорректировкаРеализацииТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_КорректировкаРеализацииТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.КорректировкаРеализацииТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_КорректировкаРеализации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте
Процедура ДобавитьПОД_Документ_ОперацияПоПлатежнойКарте(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОперацияПоПлатежнойКарте_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров
Процедура ДобавитьПОД_Документ_ОприходованиеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОприходованиеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОприходованиеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОприходованиеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоОперациямЭквайринга_Получение
Процедура ДобавитьПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетБанкаПоОперациямЭквайринга_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ");
КонецПроцедуры

Процедура ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ = Ложь;
	Если ДанныеXDTO.Свойство("СуммаКомиссии") И ДанныеXDTO.СуммаКомиссии > 0 Тогда
		ИспользованиеПКО.Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетДавальцу_Получение
Процедура ДобавитьПОД_Документ_ОтчетДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионера_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомиссионера_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомиссионера_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетКомиссионера";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомиссионераОПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитенту_Получение
Процедура ДобавитьПОД_Документ_ОтчетКомитенту_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетКомитенту_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетКомитенту";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетКомитентуОПродажах_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПОД_Документ_ОтчетОРозничныхПродажах(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетОРозничныхПродажах";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетОРозничныхПродажах";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетОРозничныхПродажах");
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПереработчика_Получение
Процедура ДобавитьПОД_Документ_ОтчетПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ОтчетПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ОтчетПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ОтчетПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПОД_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПоПлатежнымКартам_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПБДСПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаДавальцу_Получение
Процедура ДобавитьПОД_Документ_ПередачаДавальцу_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаДавальцу_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаДавальцу";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаДавальцу_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВПроизводство_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВПроизводство_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаМатериаловВПроизводство_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТребованиеНакладная_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВЭксплуатацию_Получение
Процедура ДобавитьПОД_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаМатериаловВЭксплуатацию_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаПереработчику_Получение
Процедура ДобавитьПОД_Документ_ПередачаПереработчику_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПередачаПереработчику_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПередачаПереработчику";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПередачаПереработчику_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПередачаПереработчику_Получение = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров
Процедура ДобавитьПОД_Документ_ПеремещениеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПеремещениеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПеремещениеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПеремещениеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_ПКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_ПКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанке_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанке_Получение = Истина;
	ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение = Ложь;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0")
		И ДанныеXDTO.ВидОперации.Значение = "ПолучениеНаличных" Тогда
		ИспользованиеПКО.Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочееПоступление_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочееПоступление";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочееПоступление_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПОД_Документ_ПКОПрочиеДоходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОПрочиеДоходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОПрочиеДоходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПОД_Документ_ПКОРозничнаяВыручка_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПКОРозничнаяВыручка";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПКОРозничнаяВыручка_Получение");
КонецПроцедуры

Процедура ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.СоздаватьПКОРозничнаяВыручка Тогда
		ИспользованиеПКО.Документ_ПКОРозничнаяВыручка_Получение = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеОтПереработчика_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеОтПереработчика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеОтПереработчика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеОтПереработчика";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеОтПереработчика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеСырьяОтДавальца_Получение
Процедура ДобавитьПОД_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеСырьяОтДавальца_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ПоступлениеСырьяОтДавальца_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг
Процедура ДобавитьПОД_Документ_ПоступлениеТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ПоступлениеТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ПоступлениеТоваровУслуг";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУ_ПоступлениеДопРасходов");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровПоставщику");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ВозвратТоваровСтороннейКомпании");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_СписаниеТоваров");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("ПТиУРасх_ОприходованиеТоваров");
КонецПроцедуры

Процедура ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Поиск данных для ПКО
	
	// ПТиУ_ПоступлениеДопРасходов и ПТиУ_ПоступлениеТоваровУслуг 
	ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг             = Ложь;
	ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов              = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику        = Ложь;
	ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Ложь;
	ИспользованиеПКО.ПТиУРасх_СписаниеТоваров                 = Ложь;
	ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров            = Ложь;
	
	Если ДанныеXDTO.Свойство("Услуги") Тогда
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			Если Услуги_Строка.ЭтоДопРасходы = Неопределено Тогда
				Услуги_Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;	
		
			Если Услуги_Строка.ЭтоДопРасходы Тогда
				ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов = Истина;
			Иначе
				ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов
		И (Не ДанныеXDTO.Свойство("РасшифровкаДопРасходов") Или ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0) Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеДопРасходов  = Ложь;
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;	
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Товары") Тогда
		ИспользованиеПКО.ПТиУ_ПоступлениеТоваровУслуг = Истина;
	КонецЕсли;
	
	// ПТиУРасх_ВозвратТоваровПоставщику, ПТиУРасх_ВозвратТоваровСтороннейКомпании и ПТиУРасх_СписаниеТоваров
	Если ДанныеXDTO.Свойство("Недостачи") Тогда
		Для Каждого Недостачи_Строка Из ДанныеXDTO.Недостачи Цикл
			Если Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Недостачи_Строка.ВариантОтражения.Значение = "ЗаСчетСтороннейКомпании" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровСтороннейКомпании = Истина;
			Иначе // НаПрочиеРасходы и все остальное
				ИспользованиеПКО.ПТиУРасх_СписаниеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ПТиУРасх_ОприходованиеТоваров, ПТиУРасх_ВозвратТоваровПоставщику
	Если ДанныеXDTO.Свойство("Излишки") Тогда
		Для Каждого Излишки_Строка ИЗ ДанныеXDTO.Излишки Цикл
			Если Излишки_Строка.ВариантОтражения.Значение = "ВПользуПоставщика" Тогда
				ИспользованиеПКО.ПТиУРасх_ВозвратТоваровПоставщику = Истина;
			ИначеЕсли Излишки_Строка.ВариантОтражения.Значение = "НаПрочиеДоходы" Тогда
				ИспользованиеПКО.ПТиУРасх_ОприходованиеТоваров = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияПодарочныхСертификатов_Получение
Процедура ДобавитьПОД_Документ_РеализацияПодарочныхСертификатов_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияПодарочныхСертификатов_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РеализацияПодарочныхСертификатов_ОплатаНаличными");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("РеализацияПодарочныхСертификатов_ОплатаКартой");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаКартой = Истина;
	Иначе
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаКартой = Ложь;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("СуммаНаличными") И ДанныеXDTO.СуммаНаличными > 0 Тогда
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаНаличными = Истина;
	Иначе
		ИспользованиеПКО.РеализацияПодарочныхСертификатов_ОплатаНаличными = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПОД_Документ_РеализацияТоваровУслуг(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РеализацияТоваровУслуг";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РеализацияТоваровУслуг";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияТоваровУслуг");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РеализацияОтгруженныхТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РТиУБезПереходаПравСобственностиУслуги");
КонецПроцедуры

Процедура ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ЕстьТовары = ДанныеXDTO.Свойство("Товары") И ДанныеXDTO.Товары.Количество() > 0;
	ЕстьУслуги = ДанныеXDTO.Свойство("Услуги") И ДанныеXDTO.Услуги.Количество() > 0;
	
	ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Истина;
	Если (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
		Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано") И Не ЕстьТовары Тогда
		ИспользованиеПКО.Документ_РеализацияТоваровУслуг = Ложь;
	КонецЕсли;
	
	ИспользованиеПКО.Документ_РТиУБезПереходаПравСобственностиУслуги = ЕстьУслуги
		И (ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_ВПути"
			Или ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано");
	
	ИспользованиеПКО.Документ_РеализацияОтгруженныхТоваров_Получение = ЕстьТовары
		И ДанныеXDTO.ВидОперации.Значение = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПОД_Документ_РКОВнутренняяПередача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОВнутренняяПередача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВнутренняяПередача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПОД_Документ_РКОВыплатаЗарплаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОВыплатаЗарплаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОВыплатаЗарплаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_РКОКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПОД_Документ_РКОНаБанковскийСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОНаБанковскийСчет";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_РКОНаБанковскийСчет_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчет_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОНаБанковскийСчетПБДС_Получение");
КонецПроцедуры

Процедура ПОД_Документ_РКОНаБанковскийСчет_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_РКОНаБанковскийСчет_Получение = Истина;
	ИспользованиеПКО.Документ_РКОНаБанковскийСчетПБДС_Получение = Ложь;
	
	Если ДанныеXDTO.ВидОперации.Значение = "ВзносНаличными" Тогда
		ИспользованиеПКО.Документ_РКОНаБанковскийСчетПБДС_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПОД_Документ_РКОПрочаяВыдача_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочаяВыдача";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочаяВыдача_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПОД_Документ_РКОПрочийРасход_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОПрочийРасход_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОПрочийРасход";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОПрочийРасход_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_РКОРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.РКОРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_РКОРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПОД_Документ_СБДСКонвертацияВалюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСКонвертацияВалюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСКонвертацияВалюты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПОД_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПереводНаДругойСчет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПереводНаДругойСчет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗаработнойПлаты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение
Процедура ДобавитьПОД_Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПеречислениеЗарПлЛицСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПОД_Документ_СБДСПлатежиВБюджет_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПлатежиВБюджет";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПлатежиВБюджет_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочееСписание_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочееСписание_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочееСписание";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочееСписание_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПОД_Документ_СБДСПрочиеРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСПрочиеРасходы";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСПрочиеРасходы_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыСКонтрагентами_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПОД_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СБДСРасчетыССотрудниками";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СБДСРасчетыССотрудниками_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПОД_Документ_СборкаТоваров_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СборкаТоваров_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СборкаТоваров";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СборкаТоваров_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеПриСборке_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Ложь;
	Для Каждого СтрокаТовары ИЗ ДанныеXDTO.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.ТипЗапасов) И СтрокаТовары.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			ИспользованиеПКО.Документ_СписаниеПриСборке_Получение = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров
Процедура ДобавитьПОД_Документ_СписаниеТоваров(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СписаниеТоваров";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СписаниеТоваров";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СписаниеТоваров_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПоставщика_Получение
Процедура ДобавитьПОД_Документ_СчетПоставщика_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетПоставщика_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ЗаказПоставщику";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетПоставщика_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураВыданный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураВыданный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетФактураВыданный";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураВыданный_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПОД_Документ_СчетФактураПолученный_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_СчетФактураПолученный_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.СчетФактураПолученный";
	ПравилоОбработки.ПриОбработке = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Получение");
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_СчетФактураПолученный_Испр_Получение");
КонецПроцедуры

Процедура ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	// Счета-фактуры и исправленного счета-фактуры
	ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Истина;
	ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Ложь;
	
	Если ДанныеXDTO.Свойство("Исправление") 
		И ДанныеXDTO.Исправление = Истина Тогда
		ИспользованиеПКО.Документ_СчетФактураПолученный_Получение      = Ложь;
		ИспользованиеПКО.Документ_СчетФактураПолученный_Испр_Получение = Истина;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПОД_Документ_ТаможеннаяДекларация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.ТаможеннаяДекларация";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_ТаможеннаяДекларация_Получение");
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПОД_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Документ.УстановкаЦенНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Документ_УстановкаЦенНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Банки_Получение
Процедура ДобавитьПОД_Справочник_Банки_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Банки_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Банки";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Банки");
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПОД_Справочник_БанковскиеСчета_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_БанковскиеСчета_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.БанковскиеСчета";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_БанковскиеСчета_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_Получение
Процедура ДобавитьПОД_Справочник_Валюты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Валюты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Валюты");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Договоры_Получение
Процедура ДобавитьПОД_Справочник_Договоры_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Договоры_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Договоры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДоговорыКонтрагентов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПОД_Справочник_ДокументыФизическихЛиц_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ДокументыФизическихЛиц";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ДокументыФизическихЛиц_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Должности_Получение
Процедура ДобавитьПОД_Справочник_Должности_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Должности_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Должности";
	ПравилоОбработки.ПриОбработке = "ПОД_Справочник_Должности_Получение_ПриОбработке";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Должности");
КонецПроцедуры

Процедура ПОД_Справочник_Должности_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
	ИспользованиеПКО.Справочник_Должности = ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.1");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КлассификаторЕдиницИзмерения_Получение
Процедура ДобавитьПОД_Справочник_КлассификаторЕдиницИзмерения_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КлассификаторЕдиницИзмерения_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЕдиницыИзмерения";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПОД_Справочник_КонтрагентыГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_КонтрагентыГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.КонтрагентыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_КонтрагентыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПОД_Справочник_Организации_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Организации_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Организации_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПОД_Справочник_Склады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Склады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Склады_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа_Получение
Процедура ДобавитьПОД_Справочник_СкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СкладыГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СкладыГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры
Процедура ДобавитьПОД_Справочник_СпецификацииНоменклатуры(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СпецификацииНоменклатуры";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СпецификацииНоменклатуры";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СпецификацииНоменклатуры_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДДС_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДС_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДС";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДС");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДСГруппа
Процедура ДобавитьПОД_Справочник_СтатьиДДСГруппа(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДДСГруппа";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДДСГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДДСГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение
Процедура ДобавитьПОД_Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиДоходов_ПрочиеДоходыИРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиДоходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиДоходов");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_ПрочиеДоходыРасходы_Получение
Процедура ДобавитьПОД_Справочник_СтатьиРасходов_ПрочиеДоходыРасходы_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтатьиРасходов_ПрочиеДоходыРасходы_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтатьиРасходов";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира_Получение
Процедура ДобавитьПОД_Справочник_СтраныМира_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_СтраныМира_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СтраныМира";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_СтраныМира");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен_Получение
Процедура ДобавитьПОД_Справочник_ТипыЦен_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ТипыЦен_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ТипыЦен";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ТипыЦен");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_Справочник_ФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛицаГруппа";
	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ФизическиеЛицаГруппа_Отправка");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
// Заполняет таблицу правил конвертации объектов.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую добавляются правила. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации);
		ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска(ПравилаКонвертации);
		ДобавитьПКО_Документ_АктВыполненныхРабот(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ИнвентаризацияТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаПоступления(ПравилаКонвертации);
		ДобавитьПКО_Документ_КорректировкаРеализации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетКомитентуОПродажах_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации);
		ДобавитьПКО_Документ_ОтчетПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаДавальцу_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПередачаПереработчику_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОНаБанковскийСчетПБДС_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетПоставщика_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Испр_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации);
		ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации);
		ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации);
		ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации);
		ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаКартой(ПравилаКонвертации);
		ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными(ПравилаКонвертации);
		ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы(ПравилаКонвертации);
		ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_Банки(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Должности(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации);
	ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации);
	ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область Документ_АвансовыйОтчет_Отправка
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Документ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПрочиеРасходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПрочиеРасходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//Табличные части
	#Область Товары
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	НомерВходящегоДокумента,
	|	ДатаВходящегоДокумента,
	|	Контрагент,
	|	Ложь,
	|	null,
	|	null
	|ИЗ Документ.АвансовыйОтчет.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	#КонецОбласти
	#Область ВыданныеАвансы
	Если ДанныеИБ.ВыданныеАвансы.Количество() > 0 Тогда
		ТаблицаАвансы = Новый ТаблицаЗначений;
		ТаблицаАвансы.Колонки.Добавить("Документ");
		ТаблицаАвансы.Колонки.Добавить("Сумма");
	
		Для Каждого Строка ИЗ ДанныеИБ.ВыданныеАвансы Цикл
			ИмяПКО = "";
			ТипДокумента = ТипЗнч(Строка.ДокументАванса);
			Если ТипДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
	           ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	        Иначе
	        	Продолжить;
			КонецЕсли;
			СтрокаТаблицы = ТаблицаАвансы.Добавить();
			СтрокаТаблицы.Документ = Новый Структура("Значение, ИмяПКО", Строка.ДокументАванса, ИмяПКО);
			СтрокаТаблицы.Сумма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДокументАванса, "СуммаДокумента");
		КонецЦикла;
		ДанныеXDTO.Вставить("ВыданныеАвансы", ТаблицаАвансы);
	КонецЕсли;
	#КонецОбласти
	#Область ОплатаПоставщикам
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагент,
	|   ДоговорКонтрагента КАК Договор,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|   КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов,
	|   СуммаВзаиморасчетов,
	|   Сумма,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента
	|ИЗ Документ.АвансовыйОтчет.ОплатаПоставщикам
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаОплатаПоставщикам = РезультатЗапроса.Выгрузить();
	Если ТаблицаОплатаПоставщикам.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ОплатаПоставщикам", ТаблицаОплатаПоставщикам);
	КонецЕсли;
	#КонецОбласти
	#Область Прочее
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|   Содержание,
	|   ДатаВходящегоДокумента,
	|   НомерВходящегоДокумента,
	|	Поставщик,
	|	ПредъявленСФ,
	|	ДатаСФ,
	|	НомерСФ
	|ИЗ Документ.АвансовыйОтчет.Прочее
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПрочее = РезультатЗапроса.Выгрузить();
	Если ТаблицаПрочее.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("ПрочиеРасходы", ТаблицаПрочее);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровОтПокупателя
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ВозвратОтКомиссионера";
	Иначе 
		ВидОперации = "ВозвратОтКлиента";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ВЫБОР
	|		КОГДА ВозвратТоваровОтПокупателяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		ИНАЧЕ ВозвратТоваровОтПокупателяТовары.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения
	|ИЗ Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null
	|ИЗ Документ.ВозвратТоваровОтПокупателя.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику_Отправка
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ВозвратТоваровПоставщику
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ВозвратКомитенту";
	Иначе 
		ВидОперации = "ВозвратПоставщику";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	ВЫРАЗИТЬ(ДокументОприходования КАК Документ.ПоступлениеТоваровУслуг) КАК ДокументПоступления
	|ИЗ Документ.ВозвратТоваровПоставщику.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null,
	|	null
	|ИЗ Документ.ВозвратТоваровПоставщику.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаТовары = РезультатЗапроса.Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Отправка
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиента_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОрганизацияПолучатель";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СчетНаОплатуПокупателюТовары.Количество КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И СчетНаОплатуПокупателюТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПокупателюВозвратнаяТара.Количество,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Цена,
	|	СчетНаОплатуПокупателюВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.ВозвратнаяТара КАК СчетНаОплатуПокупателюВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПокупателюВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПокупателюТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПокупателюТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуПокупателюТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуПокупателюТовары.Цена КАК Цена,
	|	СчетНаОплатуПокупателюТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПокупателюТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПокупателюТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
	|ГДЕ
	|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
	|	И ЕстьNULL(СчетНаОплатуПокупателюТовары.Номенклатура.Услуга, ИСТИНА) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Отправка
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнвентаризацияТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ДатаНачалаИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ДатаОкончанияИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеВид";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеВид";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеДата";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеНомер";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтветственноеЛицо";
	НоваяСтрока.СвойствоФормата = "ОтветственноеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПричинаПроведенияИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ПричинаПроведенияИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнвентаризацияТоваровНаСкладеТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ИнвентаризацияТоваровНаСкладеТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ИнвентаризацияТоваровНаСкладеТовары.Номенклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ИнвентаризацияТоваровНаСкладеТовары.СчетУчета КАК СчетУчета,
	|	ИнвентаризацияТоваровНаСкладеТовары.Количество КАК Количество,
	|	ИнвентаризацияТоваровНаСкладеТовары.КоличествоУчет КАК КоличествоУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.Цена КАК Цена,
	|	ИнвентаризацияТоваровНаСкладеТовары.Сумма КАК Сумма,
	|	ИнвентаризацияТоваровНаСкладеТовары.СуммаУчет КАК СуммаУчет,
	|	ИнвентаризацияТоваровНаСкладеТовары.ЦенаВРознице КАК ЦенаВРознице
	|ИЗ
	|	Документ.ИнвентаризацияТоваровНаСкладе.Товары КАК ИнвентаризацияТоваровНаСкладеТовары
	|ГДЕ
	|	ИнвентаризацияТоваровНаСкладеТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяПрочихДоходовРасходов";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	НомерГТД.Код КАК НомерГТД,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.ОприходованиеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиБезналичныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиБезналичныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиБезналичныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидБанковскогоСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиЗадолженностиПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиЗадолженностиПодотчетныхЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// ДокументРасчетов
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
	
		Если ЗначениеЗаполнено(Строка.ДокументРасчетов) Тогда
			
			Инструкция = Новый Структура("Значение", Строка.ДокументРасчетов);
			Если ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
				Или ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_РКОРасчетыССотрудниками_Отправка");
			ИначеЕсли ТипЗнч(Строка.ДокументРасчетов) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
				Инструкция.Вставить("ИмяПКО", "Документ_СБДСРасчетыССотрудниками_Отправка");
			КонецЕсли;
			Строка.ДокументРасчетов = Инструкция;
			
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиКредитыЗаймы
Процедура ДобавитьПКО_Документ_ОстаткиКредитыЗаймы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиКредитыЗаймы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовПоКредитамЗаймам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты, "КраткосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеКредитыВал, "КраткосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам, "ПроцентыПоКраткосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал, "ПроцентыПоКраткосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы, "КраткосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймыВал, "КраткосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам, "ПроцентыПоКраткосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал, "ПроцентыПоКраткосрочнымЗаймам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты, "ДолгосрочныеКредиты");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеКредитыВал, "ДолгосрочныеКредиты");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам, "ПроцентыПоДолгосрочнымКредитам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал, "ПроцентыПоДолгосрочнымКредитам");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы, "ДолгосрочныеЗаймы");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал, "ДолгосрочныеЗаймы");
	
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам, "ПроцентыПоДолгосрочнымЗаймам");
	ПравилаКонвертации.Вставить(ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал, "ПроцентыПоДолгосрочнымЗаймам");
	
	Для Каждого Строка Из ДанныеИБ.Расчеты Цикл
		Строка.ВидРасчетов = ПравилаКонвертации.Получить(Строка.ВидРасчетов);	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНаличныхДенежныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиНаличныхДенежныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиНаличныхДенежныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДенежныеСредства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДенежныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ДенежныеСредства", ДанныеИБ.ДенежныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиНематериальныхАктивов
Процедура ДобавитьПКО_Документ_ОстаткиНематериальныхАктивов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиНематериальныхАктивов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("НематериальныеАктивы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.НематериальныеАктивы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "АмортизационнаяГруппа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_АмортизационныеГруппы";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "АмортизацияДо2009";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОбъектаУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОбъектовУчетаНМА";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПринятияКУчету";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПриобретения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоэффициентБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияВР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияПР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачислятьАмортизациюБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачислятьАмортизациюНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъемПродукцииРаботДляВычисленияАмортизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПервоначальнаяСтоимостьБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПервоначальнаяСтоимостьНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПрочиеСведения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпециальныйКоэффициентНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособНачисленияАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпособыНачисленияАмортизацииНМАБУ";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособНачисленияАмортизацииНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпособыНачисленияАмортизацииНМАНУ";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыПоступленияАктивов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокИспользованияНУДо2009";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокПолезногоИспользованияБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокПолезногоИспользованияНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьВР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьПР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НематериальныеАктивы", ДанныеИБ.НематериальныеАктивы);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиОсновныхСредств
Процедура ДобавитьПКО_Документ_ОстаткиОсновныхСредств(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиОсновныхСредств";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиОсновныхСредств";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОсновныеСредства", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОсновныеСредства;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "АмортизационнаяГруппа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_АмортизационныеГруппы";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "АмортизацияДо2009";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГрафикАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ГруппаОС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ГруппыОС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыпуска";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПоследнейМодернизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПринятияКУчету";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗаводскойНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Изготовитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ИнвентарныйНомер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодПоОКОФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоэффициентАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоэффициентУскоренияБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НазваниеДокументаМодернизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НазваниеДокументаПринятияКУчету";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НакопленнаяАмортизацияПР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачислятьАмортизациюБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачислятьАмортизациюНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДокументаМодернизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДокументаПринятияКУчету";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерПаспорта";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъемНаработкиБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПервоначальнаяСтоимостьБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПервоначальнаяСтоимостьНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНаработки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПорядокПогашенияСтоимостиБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ПорядокПогашенияСтоимостиОС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПорядокПогашенияСтоимостиНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СобытиеМодернизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СобытиеПринятияКУчету";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпециальныйКоэффициентНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособНачисленияАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыНачисленияАмортизацииОС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СпособПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыПоступленияАктивов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокИспользованияНУДо2009";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокПолезногоИспользованияБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокПолезногоИспользованияНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетАмортизацииБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьБУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТекущаяСтоимостьПР";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ШифрПоЕНАОФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Заполнение свойств с типом КлючевыеСвойства в ТЧ ОС.
	Для Каждого СтрокаИБ ИЗ ДанныеИБ.ОсновныеСредства Цикл
		Если НЕ (ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка)
			ИЛИ ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) ИЛИ ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУ)) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеПринятияКУчетуСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеПринятияКУчетуНаименование, 
				СтрокаИБ.СобытиеПринятияКУчетуВидСобытия);
			СтрокаИБ.СобытиеПринятияКУчету = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.СобытиеМодернизацииСсылка) Тогда
			СобытиеКлючевыеСвойства = Новый Структура("Наименование, ВидСобытияОС", 
				СтрокаИБ.СобытиеМодернизацииНаименование, 
				СтрокаИБ.СобытиеМодернизацииВидСобытия);
			СтрокаИБ.СобытиеМодернизации = СобытиеКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиСсылка) 
			И ЗначениеЗаполнено(СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения) Тогда
			ЕдиницаИзмеренияКлючевыеСвойства = Новый Структура("Ссылка, Код", 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения, 
				СтрокаИБ.ПоказательНаработкиЕдиницаИзмерения.Код);
			ПоказательНаработкиКлючевыеСвойства = Новый Структура("Наименование, ЕдиницаИзмерения", 
				СтрокаИБ.ПоказательНаработкиНаименование, 
				ЕдиницаИзмеренияКлючевыеСвойства);
			СтрокаИБ.ПоказательНаработки = ПоказательНаработкиКлючевыеСвойства;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаИБ.ГрафикАмортизацииБУСсылка) Тогда
			ГрафикКлючевыеСвойства = Новый Структура("Наименование", СтрокаИБ.ГрафикАмортизацииБУСсылка.Наименование);
			Для ном = 1 По 12 Цикл
				ГрафикКлючевыеСвойства.Вставить("Коэффициент"+ном, 
					СтрокаИБ.ГрафикАмортизацииБУСсылка["Коэффициент"+ном]);
			КонецЦикла;
			СтрокаИБ.ГрафикАмортизацииБУ = ГрафикКлючевыеСвойства;
		КонецЕсли;
	КонецЦикла;
	ДанныеXDTO.Вставить("ОсновныеСредства", ДанныеИБ.ОсновныеСредства);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиПерерасходаПодотчетныхЛиц
Процедура ДобавитьПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиПерерасходаПодотчетныхЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_АвансовыйОтчет_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПокупателямиАвансы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПокупателямиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПокупателямиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПокупателямиДолги";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПокупателямиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиАвансы
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПоставщикамиАвансы";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиАвансы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиРасчетыСПоставщикамиДолги
Процедура ДобавитьПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиРасчетыСПоставщикамиДолги";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиРасчетовСПоставщикамиДолги";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Расчеты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Расчеты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Расчеты", ДанныеИБ.Расчеты);
	
	// Договор
	ДанныеXDTO.Расчеты.Колонки.Добавить("Договор");
	Для Каждого Строка Из ДанныеXDTO.Расчеты Цикл
		
		Инструкция = Новый Структура;
		Инструкция.Вставить("Значение", Строка.РасчетныйДокумент);
		Инструкция.Вставить("ИмяПКО", "Справочник_ДоговорыКонтрагентов_Отправка");
		Строка.Договор = Инструкция;
		
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиСобственныхТМЦ
Процедура ДобавитьПКО_Документ_ОстаткиСобственныхТМЦ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиСобственныхТМЦ";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТМЦ", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТМЦ;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Отправка";

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ТМЦ", ДанныеИБ.ТМЦ);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТараПринятая
Процедура ДобавитьПКО_Документ_ОстаткиТараПринятая(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТараПринятая";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТараПринятая";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Тара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Тара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Тара", ДанныеИБ.Тара);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПереданныхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПереданныхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОстаткиТоваровПринятыхНаКомиссию
Процедура ДобавитьПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ОбъектДанных = Неопределено;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОстаткиТоваровПринятыхНаКомиссию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КоличествоУпаковок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("Товары", ДанныеИБ.Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах_Отправка
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Товары.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ТоварыНаСкладе)
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Товары.Количество КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.НомерГТД.Код КАК НомерГТД,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Содержание КАК Содержание,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.Сумма КАК Сумма,
	|	Услуги.СтавкаНДС КАК СтавкаНДС,
	|	Услуги.СуммаНДС КАК СуммаНДС,
	|	Услуги.Контрагент КАК Принципал,
	|	Услуги.ДоговорКонтрагента КАК ДоговорСПринципалом,
	|	""Агентские"" КАК ТипУслуги
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах.АгентскиеУслуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатыЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("1.0") Тогда
		ТаблицаУслуги = РезультатыЗапроса[1].Выгрузить();
		Если ТаблицаУслуги.Количество() > 0 Тогда
			ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Отправка
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОтправитель";
	НоваяСтрока.СвойствоФормата = "ПодразделениеОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеПолучатель";
	НоваяСтрока.СвойствоФормата = "ПодразделениеПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ТоварыНаКомиссии = ДанныеИБ.ТоварыНаКомиссии.Выгрузить();
	ВозвратнаяТара = ДанныеИБ.ВозвратнаяТара.Выгрузить();
	
	Для Каждого Строка Из ТоварыНаКомиссии Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
	КонецЦикла;
	
	Для Каждого Строка Из ВозвратнаяТара Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ТипЗапасов = "ВозвратнаяТара";
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ДанныеИБ.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
	ИначеЕсли ДанныеИБ.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Расшифровка платежа
	ТабРП = Новый ТаблицаЗначений;
	ТабРП.Колонки.Добавить("СтатьяДДС");
	ТабРП.Колонки.Добавить("Сумма");
	ТабРП.Колонки.Добавить("СуммаВал");
	ТабРП.Колонки.Добавить("ВалютаКонвертации");
	ТабРП.Колонки.Добавить("КурсКонвертации");
	ТабРП.Колонки.Добавить("КратностьКонвертации");
	ТабРП.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	ТабРП.Колонки.Добавить("Договор");
	
	СтрокаРП = ТабРП.Добавить();
	СтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	//Корректность и заполненность СубконтоКт2 проверяется в ПОД
	ВалютаКонвертации = ДанныеИБ.СубконтоКт2.ВалютаВзаиморасчетов;
	СтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
	СтрокаРП.Договор = ДанныеИБ.СубконтоКт2;
	
	// КурсЦБНаДатуКонвертации
	ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
	СтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
	СтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	СтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
	
	// СуммаВал
	ПараметрыВалютыРег  = Новый Структура("Курс, Кратность, Валюта", 1, 1, ВалютаРегламентированногоУчета);
	ПараметрыВалютыКонв = Новый Структура("Курс, Кратность, Валюта",
		СтрокаРП.КурсКонвертации, СтрокаРП.КратностьКонвертации, ВалютаКонвертации);
	
	Если АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		СтрокаРП.СуммаВал = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыРег, ПараметрыВалютыКонв);
	Иначе
		СтрокаРП.СуммаВал = ДанныеИБ.СуммаДокумента;
		СтрокаРП.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ДанныеИБ.СуммаДокумента, ПараметрыВалютыКонв, ПараметрыВалютыРег);
	КонецЕсли;
		
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРП);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Отправка
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0") Тогда
		ДанныеXDTO.Вставить("ВидОперации", "ПолучениеНаличных");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	Контрагент = ДанныеИБ.Контрагент;
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			 Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение, ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	Иначе
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	ТабРасшифровка.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("СтатьяДоходов");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрока.СтатьяДоходов = ДанныеИБ.СубконтоКт1;
	КонецЕсли;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	Если Не ЗначениеЗаполнено(ДанныеИБ.ВидОперации)
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
		
		ДанныеXDTO.Вставить("ВидРасчетов", "СПокупателем");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "СПоставщиком");
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма
			Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом Тогда
		ДанныеXDTO.Вставить("ВидРасчетов", "КредитыИЗаймы");
	Иначе
		ДанныеXDTO.Вставить("ВидРасчетов", "Прочее");
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	//Расшифровка платежа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.СчетНаОплату КАК Заказ
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.КОличество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровка = Новый ТаблицаЗначений;
	ТабРасшифровка.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровка.Колонки.Добавить("Сумма");
	НоваяСтрока = ТабРасшифровка.Добавить();
	НоваяСтрока.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	НоваяСтрока.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровка);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Отправка
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыручкаСНТТ";
	НоваяСтрока.СвойствоФормата = "ВыручкаНТТ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_ПоступлениеТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	//ДанныеВзаиморасчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ИЗ Документ.ПоступлениеТоваровУслуг
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", Выборка.РасчетыВУсловныхЕдиницах);
	
	//ВидОперации
	ВидОперации = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия И
		Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидОперации = "ПриемНаКомиссию";
	Иначе
		// Возможно это закупка по импорту - страна происхождения заполнена, и это не Россия
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СтранаПроисхождения
		|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
		|ГДЕ Ссылка = &Ссылка
		|	И СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
		|	И СтранаПроисхождения <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)"; 
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		Если Запрос.Выполнить().Пустой() Тогда
			ВидОперации = "ПокупкаУПоставщика";
		Иначе
			ВидОперации = "ЗакупкаПоИмпорту";
		КонецЕсли;
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫБОР КОГДА ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка) ТОГДА
	|		Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР КОГДА СчетУчета = &Счет004 Тогда
	|		""КомиссионныеТовары""
	|	ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"" КАК ТипЗапасов,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	null,
	|	null
	|ИЗ Документ.ПоступлениеТоваровУслуг.ВозвратнаяТара
	|ГДЕ Ссылка = &Ссылка
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Номенклатура,
	|	Содержание,
	|	ВЫБОР КОГДА Количество = 0 ТОГДА
	|		1
	|	ИНАЧЕ
	|		Количество
	|	КОНЕЦ КАК Количество,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС
	|ИЗ Документ.ПоступлениеТоваровУслуг.Услуги
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НДСПоСтавкам2и4 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "НДСпоСтавкам4и2");
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаТовары, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаТовары);
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	БезНДС = Ложь;
	Для Каждого Строка Из ТаблицаТовары Цикл
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			БезНДС = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если БезНДС Тогда
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаНеОблагаетсяНДС");
	Иначе	
		ДанныеXDTO.Вставить("Налогообложение", "ПродажаОблагаетсяНДС");
	КонецЕсли;	
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ОпределитьСтавкуНДС_Отправка(ТаблицаУслуги, НДСПоСтавкам2и4);
		ЗаполнитьЦенуЕслиНеУказана(ТаблицаУслуги);
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_ПРСКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		 
		Запрос.Текст = "ВЫБРАТЬ
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаКонвертации,
		|   Ссылка.КурсНаДатуПриобретенияРеализацииВалюты КАК КурсЦБНаДатуКонвертации,
		|   КурсВзаиморасчетов КАК КурсКонвертации,
		|   КратностьВзаиморасчетов КАК КратностьКонвертации,
		|   СуммаВзаиморасчетов КАК Сумма,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК СуммаВал
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПоПлатежнымКартам_Отправка
Процедура ДобавитьПКО_Документ_ПРСПоПлатежнымКартам_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСПоПлатежнымКартам_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУслуг";
	НоваяСтрока.СвойствоФормата = "СуммаУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ЗАпрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоговорКонтрагента КАК Договор,
	|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаПлатежа КАК Сумма,
	|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|   СтавкаНДС КАК СтавкаНДС,
	|   СуммаНДС КАК СуммаНДС
	|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочееПоступление_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочееПоступление_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСПрочееПоступление_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Контрагент = Неопределено;
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			Контрагент = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			Контрагент = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			Контрагент = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			ДанныеXDTO.Вставить("Контрагент", Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	// РасшифровкаПлатежа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Если ДанныеИБ.РасшифровкаПлатежа.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчет.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчет.СуммаДокумента КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Ссылка = &Ссылка";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	ЕстьNULL(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом.Код, """") КАК СчетУчетаРасчетов,
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СуммаПлатежа КАК Сумма
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСПрочиеДоходы_Отправка
Процедура ДобавитьПКО_Документ_ПРСПрочиеДоходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСПрочиеДоходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт1);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт2);
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.СубконтоКт3);
		КонецЕсли;
	КонецЕсли;
	
	
	// РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СубконтоКт1 КАК СтатьяДоходов,
	|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|   СуммаДокумента КАК Сумма
	|ИЗ Документ.ПоступлениеНаРасчетныйСчет
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	// Вид расчетов
	
	ВидРасчетов = "Прочее";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма Тогда
		ВидРасчетов = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам Тогда
		ВидРасчетов = "Прочее";
	Иначе
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетов = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетов = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетов = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	#Область РасшифровкаПлатежа
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
		
		Контрагент = ДанныеИБ.СубконтоКт1;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|   СубконтоКт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма,
		|   Неопределено КАК Заказ
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
	Иначе
		Контрагент = ДанныеИБ.Контрагент;
		
		ТекстЗапросаРасшифровкаПлатежа = 
		"ВЫБРАТЬ
		|   ДоговорКонтрагента КАК Договор,
		|   КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|   КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|   ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаПлатежа КАК Сумма,
		|   СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|   СтавкаНДС КАК СтавкаНДС,
		|   СуммаНДС КАК СуммаНДС,
		|   СчетНаОплату КАК Заказ
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа
		|ГДЕ Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ПРСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_ПРСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПРСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ВидРасчетов = "Подотчет";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаРаботником Тогда
		ВидРасчетов = "Займы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	
	// Сотрудник
	Если ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Сотрудник = ДанныеИБ.Контрагент;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		Для Каждого СтрокаВидаСубконто Из ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
	        Субконто    = ДанныеИБ["СубконтоКт" + СтрокаВидаСубконто.НомерСтроки];
	        Если ЗначениеЗаполнено(Субконто) И ТипЗнч(Субконто) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
	        	Сотрудник = Субконто;
	        	Прервать;
	        КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	ДанныеXDTO.Вставить("Сотрудник", Сотрудник);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
		
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.ПоступлениеНаРасчетныйСчет
		|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг_Отправка
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьЧерезКого";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтпускПроизвел";
	НоваяСтрока.СвойствоФормата = "ОтпускПроизвел";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Налогообложение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоговорСПринципалом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Принципал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипУслуги";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации));
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", Неопределено);
	//ВидОперации
	ВидОперации = "РеализацияКлиенту";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		ВидОперации = "ОтгрузкаБезПереходаПравСобственности_ВПути";
		//Если есть проведенная реализация отгруженных товаров - тогда переход права собственности произошел
		ЗапросРеализация = Новый Запрос;
		ЗапросРеализация.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Дата ИЗ Документ.РеализацияОтгруженныхТоваров
								|ГДЕ ДокументОтгрузки = &Ссылка И Проведен";
		ЗапросРеализация.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
		ВыборкаРеализация = ЗапросРеализация.Выполнить().Выбрать();
		Если ВыборкаРеализация.Следующий() Тогда
			ВидОперации = "ОтгрузкаБезПереходаПравСобственности_Реализовано";
			ДанныеXDTO.Вставить("ДатаПереходаПраваСобственности", ВыборкаРеализация.Дата);
		КонецЕсли;
	
	ИначеЕсли СведенияОДоговоре.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		ВидОперации = "ПередачаНаКомиссию";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// Определяем налогообложение
	СуммаНДС = ДанныеИБ.Товары.Итог("СуммаНДС") + ДанныеИБ.Услуги.Итог("СуммаНДС") + ДанныеИБ.АгентскиеУслуги.Итог("СуммаНДС");
	Если СведенияОДоговоре.УчетАгентскогоНДС Тогда
		Налогообложение = "НалоговыйАгентПоНДС";
	Иначе
		СчетаДоходов = ДанныеИБ.Товары.ВыгрузитьКолонку("СчетДоходов");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаДоходов, ДанныеИБ.Услуги.ВыгрузитьКолонку("СчетДоходов"));
		СчетаДоходов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаДоходов);
		
		СчетаЕНВД = БухгалтерскийУчетПовтИсп.СчетаУчетаЕНВД();
		ЕстьЕНВД = Ложь;
		Для Каждого Счет Из СчетаДоходов Цикл
			Если СчетаЕНВД.Найти(Счет) <> Неопределено Тогда
				ЕстьЕНВД = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЕНВД Тогда
			Налогообложение = "ПродажаОблагаетсяЕНВД";
		Иначе
			СтавкиНДС = ДанныеИБ.Товары.ВыгрузитьКолонку("СтавкаНДС");
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.Услуги.ВыгрузитьКолонку("СтавкаНДС"));
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтавкиНДС, ДанныеИБ.АгентскиеУслуги.ВыгрузитьКолонку("СтавкаНДС"));
			СтавкиНДС = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СтавкиНДС);
			Налогообложение = "ПродажаНеОблагаетсяНДС";
			Для Каждого СтавкаНДС Из СтавкиНДС Цикл
				Если ЗначениеЗаполнено(СтавкаНДС)
					И СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
					Налогообложение = "ПродажаОблагаетсяНДС";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Налогообложение", Налогообложение);
	
	Если ЗначениеЗаполнено(ДанныеИБ.ВидЭлектронногоДокумента) Тогда
		// Проверим, что в формате есть нужное значение перечисления для конвертации значения ВидЭД
		// Если значение найдется - то заполним его.
		ПравилоКонвертацииЗначения = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.НайтиСтроки(Новый Структура("ТипДанных", Тип("ПеречислениеСсылка.ВидыЭД")));
		Если ПравилоКонвертацииЗначения.Количество() > 0
			И ПравилоКонвертацииЗначения[0].КонвертацииЗначенийПриОтправке.Получить(ДанныеИБ.ВидЭлектронногоДокумента) <> Неопределено Тогда
			ДанныеXDTO.Вставить("ВидЭД", ДанныеИБ.ВидЭлектронногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ РеализацияТоваровУслугТовары.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СчетУчета = &Счет004
	|			ТОГДА ""КомиссионныеТовары""
	|		ИНАЧЕ ""СобственныеТовары""
	|	КОНЕЦ КАК ТипЗапасов,
	|	РеализацияТоваровУслугТовары.Количество,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС,
	|	РеализацияТоваровУслугТовары.НомерГТД.Код КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура,
	|	РеализацияТоваровУслугВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	РеализацияТоваровУслугВозвратнаяТара.Количество,
	|	РеализацияТоваровУслугВозвратнаяТара.Цена,
	|	РеализацияТоваровУслугВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0,
	|	NULL,
	|	NULL
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслугВозвратнаяТара
	|ГДЕ
	|	РеализацияТоваровУслугВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугУслуги.Номенклатура,
	|	РеализацияТоваровУслугУслуги.Содержание,
	|	""Собственные"" КАК ТипУслуги,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугУслуги.Количество
	|	КОНЕЦ КАК Количество,
	|	РеализацияТоваровУслугУслуги.Цена,
	|	РеализацияТоваровУслугУслуги.Сумма,
	|	РеализацияТоваровУслугУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Принципал,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСПринципалом
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|ГДЕ
	|	РеализацияТоваровУслугУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
	|	РеализацияТоваровУслугАгентскиеУслуги.Содержание,
	|	""Агентские"",
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ РеализацияТоваровУслугАгентскиеУслуги.Количество
	|	КОНЕЦ,
	|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
	|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
	|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
	|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
	|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|ГДЕ
	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Запрос.УстановитьПараметр("Счет004", ПланыСчетов.Хозрасчетный.ТоварыНаСкладе);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Отправка
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сотрудник");
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов
		Или (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
				И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")
				И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) Тогда
		
		
		НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
		НоваяСтрокаРП.Сотрудник = ДанныеИБ.Контрагент;
		НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
		НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
		НоваяСтрокаРП.Депонент = ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Или ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
			
			РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			
			ДанныеВедомостиНаВыплатуЗП = Новый Структура("Номер,Дата");
			Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаЗаработнойПлаты.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаЗаработнойПлаты[0].Ведомость, "Дата,Номер");
			ИначеЕсли ДанныеИБ.ВыплатаДепонентов.Количество() > 0 Тогда
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ВыплатаДепонентов[0].Ведомость, "Дата,Номер");
			КонецЕсли;
				
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		КонецЕсли;
	Иначе // выплата по ведомостям
		
		РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
		РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
		
	Для Каждого Строка Из ДанныеИБ.ВыплатаЗаработнойПлаты Цикл
				
		// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер, Зарплата");
		ТаблицаЗарплатаВедомости = ДанныеВедомостиНаВыплатуЗП.Зарплата.Выгрузить();
		
		Для Каждого СтрокаВедомости Из ТаблицаЗарплатаВедомости Цикл
			
			Если ТипЗнч(Строка.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
				Сотрудник = СтрокаВедомости.Сотрудник.ФизическоеЛицо;
				Сумма     = СтрокаВедомости.КВыплате;
			ИначеЕсли ТипЗнч(Строка.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты") Тогда
				Сотрудник = СтрокаВедомости.ФизическоеЛицо;
				Сумма     = СтрокаВедомости.Сумма;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент  = Ложь;
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты  = ДанныеВедомостиНаВыплатуЗП.Дата;
			НоваяСтрокаРП.Сотрудник = Сотрудник;
			НоваяСтрокаРП.Сумма     = Сумма;
				
		КонецЦикла;
	
	КонецЦикла;
		
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Отправка
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОКонвертацияВалюты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсЦБНаДатуКонвертации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВал";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КратностьКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсЦБНаДатуКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("КурсКонвертации");
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВал");
	
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.ДоговорыКонтрагентов") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
		ВалютаКонвертации = ДанныеИБ.СубконтоДт2.ВалютаВзаиморасчетов;
		// КурсЦБНаДатуКонвертации
		ПараметрыКурсаЦБНаДатуОперацииСВалютой = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКонвертации, ДанныеИБ.Дата);
		НоваяСтрокаРП.КратностьКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Кратность;
		НоваяСтрокаРП.КурсЦБНаДатуКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.КурсКонвертации = ПараметрыКурсаЦБНаДатуОперацииСВалютой.Курс;
		НоваяСтрокаРП.ВалютаКонвертации = ВалютаКонвертации;
		НоваяСтрокаРП.СуммаВал = РаботаСКурсамиВалют.ПересчитатьВВалюту(ДанныеИБ.СуммаДокумента, ДанныеИБ.ВалютаДокумента, ВалютаКонвертации, ДанныеИБ.Дата);
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Отправка
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	// ВидОперации
	ВидОперации = "Инкассация";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.Инкассация Тогда
		ВидОперации = "Инкассация";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВидОперации = "ВзносНаличными";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидОперации", ВидОперации);
	
	// БанковскийСчет
	ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетОрганизации) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СчетОрганизации;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт1) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт1) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт2) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт2) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоКт3) = Тип("СправочникСсылка.БанковскиеСчета") И ЗначениеЗаполнено(ДанныеИБ.СубконтоКт3) Тогда
			ДанныеXDTO.БанковскийСчет = ДанныеИБ.СубконтоКт3;
		КонецЕсли;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
		
	Контрагент = Неопределено;
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.СчетУчетаРасчетов = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Отправка
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	Если ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		НоваяСтрокаРП.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Вид расчетов
	
	ВидРасчетов = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВидРасчетов = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
		ВидРасчетов = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетов = "КредитыИЗаймы";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетов);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|			ТОГДА ""Аванс""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
		|			ТОГДА ""Долг""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
		|			ТОГДА ""КраткосрочныеЗаймы""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
		|			ТОГДА ""ДолгосрочныеЗаймы""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		КОГДА РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
		|ГДЕ
		|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// ВидРасчетов
	ДанныеXDTO.Вставить("ВидРасчетов", "Подотчет");
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		ДанныеXDTO.ВидРасчетов = "Подотчет";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику Тогда
		ДанныеXDTO.ВидРасчетов = "Займы";
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ДанныеXDTO.Вставить("ДатаВыписки", ДанныеИБ.Дата);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗП_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗП_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗП_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеXDTO.Вставить("Контрагент", ДанныеИБ.Контрагент);
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.Контрагент) И ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		//В документе банковский счет физ лица и контрагент-физлицо
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
		ДанныеXDTO.Вставить("БанковскийСчет", Неопределено);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка 
		|ИЗ Справочник.Контрагенты
		|ГДЕ ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|	И Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ДанныеИБ.Контрагент.Наименование);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеXDTO.Вставить("Контрагент", Выборка.Ссылка);
			Если ЗначениеЗаполнено(ДанныеИБ.СчетКонтрагента) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Ссылка 
				|ИЗ Справочник.БанковскиеСчета
				|ГДЕ Владелец = &Ссылка
				|	И НомерСчета = &НомерСчета";
				Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
				Запрос.УстановитьПараметр("НомерСчета", ДанныеИБ.СчетКонтрагента.НомерСчета);
				ВыборкаСчет = Запрос.Выполнить().Выбрать();
				Если ВыборкаСчет.Следующий() Тогда
					ДанныеXDTO.Вставить("БанковскийСчет", ВыборкаСчет.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Поле "Контрагент" в документе не заполнено
		ДанныеXDTO.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП Тогда
		
		Для Каждого Строка Из ДанныеИБ.ПеречислениеЗаработнойПлаты Цикл
			
			Если Строка.СуммаПлатежа = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Ложь;
			
			// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
			ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
			НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
			НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
		
		КонецЦикла;
		
	Иначе
		
		// Перечисление депонентов
		Если ДанныеИБ.ПеречислениеДепонентов.Количество() > 0 Тогда
			Для Каждого Строка Из ДанныеИБ.ПеречислениеДепонентов Цикл
				
				Если Строка.СуммаПлатежа = 0 Тогда
					Продолжить;
				КонецЕсли;
			
				НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
				НоваяСтрокаРП.Сумма = Строка.СуммаПлатежа;
				НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
				НоваяСтрокаРП.Депонент = Истина;
				
				// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
				ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ведомость, "Дата,Номер");
				НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
				НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
			
			КонецЦикла;
		Иначе
			НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
			НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
			НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
			НоваяСтрокаРП.Депонент = Истина;
		КонецЕсли;	
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗПНаЛС_Отправка
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗПНаЛС_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Депонент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерВедомостиНаВыплатуЗарплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	#Область Шапка
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если ТипЗнч(ДанныеИБ.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДанныеXDTO.Вставить("Сотрудник", ДанныеИБ.Контрагент);
	КонецЕсли;
	#КонецОбласти
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	#Область РасшифровкаПлатежа
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений;
	РасшифровкаПлатежа.Колонки.Добавить("Сумма");
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	РасшифровкаПлатежа.Колонки.Добавить("Депонент");
	РасшифровкаПлатежа.Колонки.Добавить("НомерВедомостиНаВыплатуЗарплаты");
	РасшифровкаПлатежа.Колонки.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
	
	НоваяСтрокаРП = РасшифровкаПлатежа.Добавить();
	НоваяСтрокаРП.Сумма = ДанныеИБ.СуммаДокумента;
	НоваяСтрокаРП.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	НоваяСтрокаРП.Депонент = Ложь;
	
	// НомерВедомостиНаВыплатуЗарплаты, ДатаВедомостиНаВыплатуЗарплаты
	Если ЗначениеЗаполнено(ДанныеИБ.ПлатежнаяВедомость) Тогда
		ДанныеВедомостиНаВыплатуЗП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ПлатежнаяВедомость, "Дата,Номер");
		НоваяСтрокаРП.НомерВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Номер;
		НоваяСтрокаРП.ДатаВедомостиНаВыплатуЗарплаты = ДанныеВедомостиНаВыплатуЗП.Дата;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Отправка
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательДаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательКБК";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательНомера";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательОснования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПоказательТипа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатусСоставителя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, Истина);
	ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС         = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма             = ДанныеИБ.СуммаДокумента;
	Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		СтрокаРасшифровки.СчетУчетаРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом, "Код");
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
	
	Если ДанныеXDTO.ПоказательДаты = "01.01.0001" Тогда
		ДанныеXDTO.ПоказательДаты = "0";
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	// Контрагент.
	Контрагент = ДанныеИБ.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	// Уточнение вида операции.
	ВидОперации = "";
	Если ЗначениеЗаполнено(ДанныеИБ.ВидОперации) Тогда
	
		ВидПрочегоСписания = "";
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику
			ИЛИ ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеСотрудникуПоДоговоруПодряда Тогда
			//Прочее
			ВидПрочегоСписания = "ПрочееСписание";
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям Тогда
					ВидПрочегоСписания = "ВнутренняяПередача";
			КонецЕсли;
		ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
			Если Не ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
				Или ТипЗнч(ДанныеИБ.СубконтоДт1) <> Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
				ВидПрочегоСписания = "ПрочееСписание";
			КонецЕсли;
		Иначе
			ВидПрочегоСписания = "ПрочееСписание";
		КонецЕсли;
	
		ДанныеXDTO.Вставить("ВидОперации", ВидПрочегоСписания);
	Иначе
		ДанныеXDTO.Вставить("ВидОперации", "ПрочееСписание");	
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СчетУчетаРасчетов");
	
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма     = ДанныеИБ.СуммаДокумента;
	СтрокаРасшифровки.СчетУчетаРасчетов     = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Отправка
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Контрагент) Тогда
		Если ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1) Тогда
			Контрагент = ДанныеИБ.СубконтоДт1;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт2) Тогда
			Контрагент = ДанныеИБ.СубконтоДт2;
		ИначеЕсли ТипЗнч(ДанныеИБ.СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(ДанныеИБ.СубконтоДт3) Тогда
			Контрагент = ДанныеИБ.СубконтоДт3;
		КонецЕсли;
	Иначе
		Контрагент = ДанныеИБ.Контрагент;
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция = Новый Структура("Значение,ИмяПКО");
		Инструкция.Значение = Контрагент;
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
		ДанныеXDTO.Вставить("Контрагент", Инструкция);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяРасходов");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		СтатьяРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.РасходыНаУслугиБанков");
		Если ЗначениеЗаполнено(СтатьяРасходов) Тогда
			СтрокаРасшифровки.СтатьяРасходов = СтатьяРасходов;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДанныеИБ.СубконтоДт1)
		И ТипЗнч(ДанныеИБ.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		СтрокаРасшифровки.СтатьяРасходов = ДанныеИБ.СубконтоДт1;
	КонецЕсли;
	
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидРасчетовРасширенный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	
	ВидРасчетовСКонтрагентом = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Если Найти(ДанныеИБ.Комментарий, "#Таможенный платеж ")<0 Тогда
			СчетУчетаРасчетовСКонтрагентом = Неопределено;
			Если ДанныеИБ.РасшифровкаПлатежа.Количество() > 0 Тогда
				СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
			КонецЕсли;
			
			Если СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты
				И СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты 
				И ДанныеИБ.СчетУчетаРасчетовСКонтрагентом <> ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям
				И Не ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам) Тогда
				ВидРасчетовСКонтрагентом = "Прочее";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
		ВидРасчетовСКонтрагентом = "СПоставщиком";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
		ВидРасчетовСКонтрагентом = "СПокупателем";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту Тогда
		ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
	ИначеЕсли ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		Если ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам
			Или ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Родитель = ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам Тогда
			ВидРасчетовСКонтрагентом = "КредитыИЗаймы";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "60.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПоставщиком";
		ИначеЕсли	Найти(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом.Код, "62.") > 0 Тогда
			ВидРасчетовСКонтрагентом = "СПокупателем";
		КонецЕсли;
	КонецЕсли;
	Если ВидРасчетовСКонтрагентом = "" Тогда
		ВидРасчетовСКонтрагентом = "Прочее";
	КонецЕсли;
	ДанныеXDTO.Вставить("ВидРасчетов", ВидРасчетовСКонтрагентом);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Контрагент = Неопределено;
	ТекстЗапросаРасшифровкаПлатежа = "";
	Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		
		Контрагент = ДанныеИБ.СубконтоДт1;
		
		ТекстЗапросаРасшифровкаПлатежа =
		"ВЫБРАТЬ
		|	СубконтоДт2 КАК Договор,
		|   1 КАК КурсВзаиморасчетов,
		|   1 КАК КратностьВзаиморасчетов,
		|   СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|   СуммаДокумента КАК Сумма
		|ИЗ Документ.СписаниеСРасчетногоСчета
		|ГДЕ Ссылка = &Ссылка";
	Иначе
		
		Контрагент = ДанныеИБ.Контрагент;
		
		ТекстЗапросаРасшифровкаПлатежа =
		"ВЫБРАТЬ
		|	РасшифровкаПлатежа.ДоговорКонтрагента КАК Договор,
		|	РасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
		|	РасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
		|	РасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
		|	РасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
		|	РасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	РасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
		|	РасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|			ТОГДА ""Аванс""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщиками)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателями)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиВал)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ)
		|			ТОГДА ""Долг""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеКредитыВал)
		|			ТОГДА ""КраткосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КраткосрочныеЗаймыВал)
		|			ТОГДА ""КраткосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоКраткосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредиты)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеКредитыВал)
		|			ТОГДА ""ДолгосрочныеКредиты""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймы)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДолгосрочныеЗаймыВал)
		|			ТОГДА ""ДолгосрочныеЗаймы""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымКредитам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		КОГДА РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам)
		|				ИЛИ РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал)
		|			ТОГДА ""ПроцентыПоДолгосрочнымЗаймам""
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК ВидРасчетовРасширенный
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|ГДЕ
		|	РасшифровкаПлатежа.Ссылка = &Ссылка";
	КонецЕсли;
	
	ДанныеXDTO.Вставить("Контрагент", Контрагент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасшифровкаПлатежа;
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РасшифровкаПлатежа = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", Запрос.Выполнить().Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Отправка
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаВыписки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Очередность";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	ТабРасшифровкаПлатежа = Новый ТаблицаЗначений();
	ТабРасшифровкаПлатежа.Колонки.Добавить("СтатьяДДС");
	ТабРасшифровкаПлатежа.Колонки.Добавить("Сумма");
	СтрокаРасшифровки = ТабРасшифровкаПлатежа.Добавить();
	СтрокаРасшифровки.СтатьяДДС = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	СтрокаРасшифровки.Сумма = ДанныеИБ.СуммаДокумента;
	ДанныеXDTO.Вставить("РасшифровкаПлатежа", ТабРасшифровкаПлатежа);
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Отправка
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваров_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	СкладДляВыгрузки = СкладДляВыгрузки(ДанныеИБ.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	ДанныеXDTO.Вставить("Склад", СкладДляВыгрузки);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	НомерСтроки КАК НомерСтрокиДокумента,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество,
	|	Цена,
	|	Сумма,
	|	НомерГТД.Код КАК НомерГТД,
	|	СтранаПроисхождения,
	|	СчетУчета
	|ИЗ Документ.СписаниеТоваров.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	
	Товары.Колонки.Добавить("ТипЗапасов");
	
	Для Каждого Строка Из Товары Цикл
		Строка.ТипЗапасов = ОпределитьТипЗапасовПоСчетуУчета(Строка.СчетУчета);
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПоставщика_Отправка
Процедура ДобавитьПКО_Документ_СчетПоставщика_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетПоставщика_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипЗапасов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	СведенияОДоговоре = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.ДоговорКонтрагента, 
					"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора, УчетАгентскогоНДС");
	
	//ДанныеВзаиморасчетов
	ДанныеXDTO.Вставить("ВалютаВзаиморасчетов", СведенияОДоговоре.ВалютаВзаиморасчетов);
	ДанныеXDTO.Вставить("РасчетыВУсловныхЕдиницах", СведенияОДоговоре.РасчетыВУсловныхЕдиницах);
	
	//Табличные части
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	""СобственныеТовары"" КАК ТипЗапасов,
	|	СчетНаОплатуПоставщикаТовары.Количество КАК Количество,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Номенклатура.ЕдиницаИзмерения,
	|	""ВозвратнаяТара"",
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Количество,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Цена,
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Сумма,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС),
	|	0
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.ВозвратнаяТара КАК СчетНаОплатуПоставщикаВозвратнаяТара
	|ГДЕ
	|	СчетНаОплатуПоставщикаВозвратнаяТара.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПоставщикаТовары.Номенклатура КАК Номенклатура,
	|	СчетНаОплатуПоставщикаТовары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА СчетНаОплатуПоставщикаТовары.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ СчетНаОплатуПоставщикаТовары.Количество
	|	КОНЕЦ КАК Количество,
	|	СчетНаОплатуПоставщикаТовары.Цена КАК Цена,
	|	СчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
	|	СчетНаОплатуПоставщикаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика.Товары КАК СчетНаОплатуПоставщикаТовары
	|ГДЕ
	|	СчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
	|	И ЕСТЬNULL(СчетНаОплатуПоставщикаТовары.Номенклатура.Услуга, ИСТИНА) = ИСТИНА";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТовары = РезультатЗапроса[0].Выгрузить();
	Если ТаблицаТовары.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Товары", ТаблицаТовары);
	КонецЕсли;
	
	ТаблицаУслуги = РезультатЗапроса[1].Выгрузить();
	Если ТаблицаУслуги.Количество() > 0 Тогда
		ДанныеXDTO.Вставить("Услуги", ТаблицаУслуги);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Отправка
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТаможеннаяДекларация_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.СвойствоФормата = "Договор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагентаРегл";
	НоваяСтрока.СвойствоФормата = "ДоговорРегл";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйСбор";
	НоваяСтрока.СвойствоФормата = "ТаможенныйСбор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйШтраф";
	НоваяСтрока.СвойствоФормата = "ТаможенныйШтраф";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерДекларации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НДСВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ПошлинаВВалюте";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПоступлениеТоваровУслуг_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("НомерДекларации", ДанныеИБ.НомерГТД.Код);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	Количество,
	|	ФактурнаяСтоимость КАК ТаможеннаяСтоимость,
	|   СуммаПошлины,
	|   СуммаНДС,
	|   ДокументПартии КАК ДокументПоступления,
	|   НомерСтроки КАК НомерСтрокиДокумента,
	|   НомерРаздела КАК НомерРаздела,
	|   СтранаПроисхождения КАК СтранаПроисхождения
	|ИЗ Документ.ГТДИмпорт.Товары
	|ГДЕ Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Товары = Запрос.Выполнить().Выгрузить();
	ДанныеXDTO.Вставить("Товары", Товары);
	
	Разделы = ДанныеИБ.Разделы.Выгрузить();
	Разделы.Колонки.Добавить("НомерРаздела");
	Для Каждого Строка Из Разделы Цикл
		Строка.НомерРаздела = Строка.НомерСтроки;
	КонецЦикла;
	ДанныеXDTO.Вставить("Разделы", Разделы);
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Отправка
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НомерСтрокиДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Характеристика";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
	Товары = ДанныеИБ.Товары.Выгрузить();
	
	Индекс = Товары.Количество()-1;
	Пока Индекс >=0 Цикл
		Если Товары.Получить(Индекс).Цена = 0 Тогда
			Товары.Удалить(Индекс);
		КонецЕсли;
	 	Индекс = Индекс - 1;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Товары", Товары);
КонецПроцедуры
#КонецОбласти
#Область ЛицензииПоставщиковАлкогольнойПродукции_Отправка
Процедура ДобавитьПКО_ЛицензииПоставщиковАлкогольнойПродукции_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ЛицензииПоставщиковАлкогольнойПродукции_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ЛицензииПоставщиковАлкогольнойПродукции;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЛицензииПоставщиковАлкогольнойПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Отправка
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "ВалютаДенежныхСредств";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	// Владелец
	
	Инструкция = Новый Структура("Значение, ИмяПКО");
	Инструкция.Значение = ДанныеИБ.Владелец;
	Если ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Инструкция.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.Организации") Тогда
		Инструкция.ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗнч(ДанныеИБ.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Инструкция.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	КонецЕсли;
	ДанныеXDTO.КлючевыеСвойства.Вставить("Владелец", Инструкция);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_Отправка
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "ВалютаВзаиморасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,Контрагент,Наименование,Организация,ТипДоговора");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВидДоговора", ДанныеИБ.ВидДоговора);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) = ВерсияФорматаЧислом("1.0.beta") Тогда
		Если СтрДлина(СокрЛП(ДанныеИБ.Наименование)) > 50 Тогда
			ДанныеXDTO.Наименование = Лев(СокрЛП(ДанныеИБ.Наименование), 50);
		КонецЕсли;
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Отправка
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДокументыФизическихЛиц_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДатаВыдачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КемВыдан";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "КодПодразделения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Период";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Серия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Отправка";

КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.Вставить("ВидДокументаОтбор", ДанныеИБ.Отбор.ВидДокумента.Значение);
	ДанныеXDTO.Вставить("ПериодОтбор", ДанныеИБ.Отбор.Период.Значение);
	ДанныеXDTO.Вставить("ФизическоеЛицоОтбор", ДанныеИБ.Отбор.Физлицо.Значение);
	
	Записи = Новый ТаблицаЗначений;
	Записи.Колонки.Добавить("ФизическоеЛицо");
	Записи.Колонки.Добавить("ВидДокумента");
	Записи.Колонки.Добавить("Период");
	Записи.Колонки.Добавить("Серия");
	Записи.Колонки.Добавить("Номер");
	Записи.Колонки.Добавить("ДатаВыдачи");
	Записи.Колонки.Добавить("КемВыдан");
	Записи.Колонки.Добавить("КодПодразделения");
	Записи.Колонки.Добавить("СрокДействия");
	Записи.Колонки.Добавить("Представление");
	
	Для Каждого СтрокаНабора Из ДанныеИБ Цикл
		СтрокаЗаписи = Записи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗаписи, СтрокаНабора);
		СтрокаЗаписи.ФизическоеЛицо = СтрокаНабора.Физлицо;
	КонецЦикла;
	
	ДанныеXDTO.Вставить("Записи", Записи);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Отправка
Процедура ДобавитьПКО_Справочник_Контрагенты_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументУдостоверяющийЛичность";
	НоваяСтрока.СвойствоФормата = "ДокументУдЛичность";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИНН";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ГоловнойКонтрагент) И ДанныеИБ.ГоловнойКонтрагент <> ДанныеИБ.Ссылка Тогда
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", ДанныеИБ.ГоловнойКонтрагент);
	Иначе
		ДанныеXDTO.Вставить("ГоловнойКонтрагент", Неопределено);
	КонецЕсли;
	
	ДанныеXDTO.КлючевыеСвойства.Вставить("ИНН", "");
	Если ДанныеИБ.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ИНН", ДанныеИБ.ИНН);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("2.0") Тогда
		Если ДанныеИБ.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("СтранаРегистрации", ДанныеИБ.СтранаРегистрации);
		Иначе
			ДанныеXDTO.КлючевыеСвойства.Вставить("СтранаРегистрации", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтранаРегистрации = Неопределено;
	Если ДанныеИБ.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		СтранаРегистрации = ДанныеИБ.СтранаРегистрации;
		ДанныеXDTO.Вставить("НалоговыйНомерНерезидента", ДанныеИБ.ИНН);
	КонецЕсли;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("2.0") Тогда
		ДанныеXDTO.Вставить("СтранаРегистрации", СтранаРегистрации);
	КонецЕсли;
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Отправка
Процедура ДобавитьПКО_Справочник_Номенклатура_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "АлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидАлкогольнойПродукции";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ИмпортнаяАлкогольнаяПродукция";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОбъемДАЛ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПроизводительИмпортер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,НаименованиеПолное,Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,НаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.НаименованиеПолное) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("НаименованиеПолное", ДанныеИБ.Наименование);
	КонецЕсли;
	
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеИБ.ЕдиницаИзмерения) Тогда
		ДанныеXDTO.Вставить("ЕдиницаИзмерения", Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию());
	КонецЕсли;
	
	ДанныеXDTO.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.СтавкаНДС(ДанныеИБ.ВидСтавкиНДС, ТекущаяДатаСеанса()));
		
	Если Не ДанныеИБ.ЭтоГруппа Тогда
		Если Не ДанныеИБ.Услуга Тогда 
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Товар");
		Иначе
			ДанныеXDTO.Вставить("ТипНоменклатуры", "Услуга");
		КонецЕсли;
	Иначе	
		ДанныеXDTO.Вставить("ТипНоменклатуры", "");
		ДанныеXDTO.Вставить("НаименованиеПолное", "");
		Возврат;
	КонецЕсли;
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	
	#Область ДанныеАлкогольнойПродукции
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК АлкогольнаяПродукция,
		|	ВЫБОР КОГДА Таб.НаименованиеВида169 = """" ТОГДА
		|		НаименованиеВида129
		|	ИНАЧЕ Таб.НаименованиеВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Наименование,
		|	ВЫБОР КОГДА Таб.КодВида169 = """" ТОГДА
		|		КодВида129
		|	ИНАЧЕ Таб.КодВида169 КОНЕЦ КАК ВидАлкогольнойПродукции_Код,
		|	ВЫБОР КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.Пиво) ТОГДА
		|		""Пиво""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.АлкогольнаяПродукция) ТОГДА
		|		""АлкогольнаяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяПищеваяПродукция""
		|	КОГДА Таб.ВидЛицензии = ЗНАЧЕНИЕ(Перечисление.ВидыЛицензийНаПродажуАлкоголя.СпиртосодержащаяНеПищеваяПродукция) ТОГДА
		|		""СпиртосодержащаяНеПищеваяПродукция""
		|	КОНЕЦ КАК ВидАлкогольнойПродукции_ВидЛицензии,
		|	ВЫБОР
		|		КОГДА Спр.Импортер <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				И НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИмпортнаяАлкогольнаяПродукция,
		|	Таб.КоэффПересчетаДал КАК ОбъемДАЛ,
		|	ВЫБОР
		|		КОГДА НЕ Таб.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА Спр.Импортер = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|						ТОГДА Спр.Производитель
		|					ИНАЧЕ Спр.Импортер
		|				КОНЕЦ
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК ПроизводительИмпортер
		|ИЗ
		|	Справочник.Номенклатура КАК Спр
		|		СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК Таб
		|		ПО Спр.Ссылка = Таб.Номенклатура
		|ГДЕ
		|	Спр.Ссылка = &Ссылка И Таб.Номенклатура is not null");
		
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеXDTO.Вставить("АлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ИмпортнаяАлкогольнаяПродукция", Ложь);
	ДанныеXDTO.Вставить("ПроизводительИмпортер");
	ДанныеXDTO.Вставить("ОбъемДАЛ");
	ДанныеXDTO.Вставить("ВидАлкогольнойПродукции");
	Если Выборка.Следующий() И Выборка.АлкогольнаяПродукция Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, Выборка);
		ДанныеВидАК = Новый Структура("Код, Наименование, ВидЛицензии",
					Выборка.ВидАлкогольнойПродукции_Код,
					Выборка.ВидАлкогольнойПродукции_Наименование,
					Выборка.ВидАлкогольнойПродукции_ВидЛицензии);
		ДанныеXDTO.Вставить("ВидАлкогольнойПродукции", ДанныеВидАК);
		
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатурнаяГруппа_Отправка
Процедура ДобавитьПКО_Справочник_НоменклатурнаяГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатурнаяГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НоменклатурныеГруппы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ГруппыАналитическогоУчетаНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	

КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Отправка
Процедура ДобавитьПКО_Справочник_Организации_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	КодОКАТО = "";
	Если ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
		КодОКАТО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО");
	КонецЕсли;
	ДанныеXDTO.Вставить("ОКАТО", КодОКАТО);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Отправка
Процедура ДобавитьПКО_Справочник_Подразделения_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Отправка
Процедура ДобавитьПКО_Справочник_Склады_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.СвойствоФормата = "Подразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

КонецПроцедуры

Процедура ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпецификацииНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СпецификацииНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";

КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_Отправка
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРегистрации";
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоРождения";
	НоваяСтрока.СвойствоФормата = "МестоРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСлужебное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСлужебное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УточнениеНаименования";
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФИО";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДанныеФИО", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДанныеФИО;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Имя";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НачалоПериода";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Отчество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Фамилия";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "НаименованиеКонтактнойИнформации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ФИО", ДанныеИБ.ФИО);
	
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
	ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO);
	ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ШтрихкодыНоменклатуры_Отправка
Процедура ДобавитьПКО_Справочник_ШтрихкодыНоменклатуры_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ШтрихкодыНоменклатуры_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ШтрихкодыНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "НоменклатураОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ШтрихкодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Записи", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Записи;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Отправка";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоФормата = "Штрихкод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область АннулированиеПодарочныхСертификатов_Получение
Процедура ДобавитьПКО_АннулированиеПодарочныхСертификатов_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "АннулированиеПодарочныхСертификатов_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.АннулированиеПодарочныхСертификатов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКтЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КредиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КредиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("ПодарочныеСертификаты")
		И ЗначениеЗаполнено(ДанныеXDTO.ПодарочныеСертификаты) Тогда
		
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ПодарочныеСертификаты Цикл
			СуммаВсего = СуммаВсего + Строка.Сумма;
		КонецЦикла;
		ПолученныеДанные.СуммаКтЗадолженности = СуммаВсего;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	 КонецЕсли;
КонецПроцедуры

Процедура ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту
Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКтЗадолженности";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.КонтрагентКредитор = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	
	ПолученныеДанные.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокЗадолженность = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
		
		ЕстьКолонкаЭквайрер = ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("Эквайрер") <> Неопределено;
		
		СуммаВсего = 0;
		Для Каждого Строка ИЗ ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			
			СуммаВсего = СуммаВсего + Строка.СуммаОплаты;
			Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("СубконтоКт1") 
				И ЕстьКолонкаЭквайрер
				И ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				ПолученныеДанные.СубконтоКт1 = Контрагент;
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, Контрагент);
				ПолученныеДанные.СубконтоКт2 = ДоговорКонтрагента.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
			
		СтрокаЗадолженность = ПолученныеДанные.КредиторскаяЗадолженность.Добавить();
		СтрокаЗадолженность.Сумма = СуммаВсего;
		СтрокаЗадолженность.СуммаВзаиморасчетов = СуммаВсего;
	 КонецЕсли;
КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	Для Каждого СтрокаЗадолженность ИЗ ПолученныеДанные.КредиторскаяЗадолженность Цикл
		СтрокаЗадолженность.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаЗадолженность.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		СтрокаЗадолженность.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентКредитор);
	Конеццикла;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ВозвратПодарочныхСертификатов_ВозвратНаличными
Процедура ДобавитьПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ВозвратПодарочныхСертификатов_ВозвратНаличными";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратПодарочныхСертификатов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурса.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	СтрокаРасшифровка.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Прочее", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Прочее;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДокВходящий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатратНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = СчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
			    КонецЕсли;
			КонецЕсли; 
			
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПоставщикам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически);
			
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				Иначе
					ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура();
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"ДокументАванса", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				"СпособПогашенияЗадолженности, Сделка,ВидДокВходящий, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("НомерГТД");
			МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетУчета,СчетУчетаНДС, ОтражениеВУСН, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетФактура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, ОтражениеВУСН, СчетУчетаНДС, ПодразделениеЗатрат, БланкСтрогойОтчетности");
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		ПолученныеДанные = Неопределено;		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_АвансовыйОтчет_Получение_ПоляПоиска
Процедура ДобавитьПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АвансовыйОтчет_Получение_ПоляПоиска";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.АвансовыйОтчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.АвансовыйОтчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_АвансовыйОтчет";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДокументов";
	НоваяСтрока.СвойствоФормата = "КоличествоДокументов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоЛистов";
	НоваяСтрока.СвойствоФормата = "КоличествоЛистов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеАванса";
	НоваяСтрока.СвойствоФормата = "НазначениеАванса";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.СвойствоФормата = "ПодотчетноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВыданныеАвансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВыданныеАвансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументАванса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ОплатаПоставщикам", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ОплатаПоставщикам;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Прочее", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Прочее;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДокВходящий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатратНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Поставщик";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПредъявленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Номер,ВалютаДокумента,ФизЛицо");
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийАвансовыйОтчет.ПокупкаОплатаПрочее;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокПрочиеРасходы = Новый Массив;
	МассивСтрокОплатаПоставщикам = Новый Массив;
	МассивСтрокВыданныеАвансы = Новый Массив;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если  Строка.ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ПрочиеРасходы") И ЗначениеЗаполнено(ДанныеXDTO.ПрочиеРасходы) Тогда
		//Прочие расходы
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Поставщик", "Поставщик");
		ПравилаЗаполнения.Вставить("ПредъявленСФ", "ПредъявленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("НомерСФ", "НомерСФ");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		ПравилаЗаполнения.Вставить("НаименованиеВходящегоДокумента", "ВидДокВходящий");
		Для Каждого Строка Из ДанныеXDTO.ПрочиеРасходы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = СчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
			    КонецЕсли;
			КонецЕсли; 
			
			МассивСтрокПрочиеРасходы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ОплатаПоставщикам") И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПоставщикам) Тогда
		//Оплата поставщикам
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Контрагент", "Контрагент");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("НомерВходящегоДокумента", "НомерВходящегоДокумента");
		ПравилаЗаполнения.Вставить("ДатаВходящегоДокумента", "ДатаВходящегоДокумента");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаПоставщикам Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически);
			
			//Договор
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				Иначе
					ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				КонецЕсли;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
			КонецЕсли;
			 
			МассивСтрокОплатаПоставщикам.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВыданныеАвансы") И ЗначениеЗаполнено(ДанныеXDTO.ВыданныеАвансы) Тогда
		//Выданные авансы
		Для Каждого Строка Из ДанныеXDTO.ВыданныеАвансы Цикл
			Если НЕ ЗначениеЗаполнено(Строка.Документ) Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура();
			ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ТипДокумента = Строка.Документ.ТипЗначения;
			Если Найти(ТипДокумента, "РКОРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
			ИначеЕсли Найти(ТипДокумента, "СБДСРасчетыССотрудниками") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
			КонецЕсли;
			СтруктураДанныхСтроки.Вставить(
					"ДокументАванса", Новый Структура("Значение,ИмяПКО", Строка.Документ, ИмяПКО));
			МассивСтрокВыданныеАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокПрочиеРасходы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Прочее", МассивСтрокПрочиеРасходы);
	КонецЕсли;
	Если МассивСтрокОплатаПоставщикам.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОплатаПоставщикам", МассивСтрокОплатаПоставщикам);
	КонецЕсли;
	Если МассивСтрокВыданныеАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыданныеАвансы", МассивСтрокВыданныеАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		Если ПолученныеДанные.ОплатаПоставщикам.Количество() > 0 Тогда
			МассивКлючевыхПолей = Новый Массив;
	
			МассивКлючевыхПолей.Добавить("Контрагент");
			МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
			
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.ОплатаПоставщикам,
				ДанныеИБ.ОплатаПоставщикам,
				МассивКлючевыхПолей,
				"СпособПогашенияЗадолженности, Сделка,ВидДокВходящий, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
			ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
		КонецЕсли;
		ДанныеИБ.ОплатаПоставщикам.Загрузить(ПолученныеДанные.ОплатаПоставщикам.Выгрузить());
	
		Если ДанныеИБ.Товары.Количество() > 0 Тогда
			//Товары
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Количество");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("Цена");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("НомерГТД");
			МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Товары,
				ДанныеИБ.Товары,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетУчета,СчетУчетаНДС, ОтражениеВУСН, СчетФактура");
		КонецЕсли;
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		Если ДанныеИБ.Прочее.Количество() > 0 Тогда
			//Прочее
			МассивКлючевыхПолей = Новый Массив;
			МассивКлючевыхПолей.Добавить("Номенклатура");
			МассивКлючевыхПолей.Добавить("Поставщик");
			МассивКлючевыхПолей.Добавить("Содержание");
			МассивКлючевыхПолей.Добавить("Сумма");
			МассивКлючевыхПолей.Добавить("СтавкаНДС");
			МассивКлючевыхПолей.Добавить("СуммаНДС");
			МассивКлючевыхПолей.Добавить("ПредъявленСФ");
			МассивКлючевыхПолей.Добавить("ДатаСФ");
			МассивКлючевыхПолей.Добавить("НомерСФ");
			МассивКлючевыхПолей.Добавить("НомерВходящегоДокумента");
			МассивКлючевыхПолей.Добавить("ДатаВходящегоДокумента");
	
			ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
				ПолученныеДанные.Прочее,
				ДанныеИБ.Прочее,
				МассивКлючевыхПолей,
				"ВидДокВходящий, СчетФактура, СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, ОтражениеВУСН, СчетУчетаНДС, ПодразделениеЗатрат, БланкСтрогойОтчетности");
		КонецЕсли;
		ДанныеИБ.Прочее.Загрузить(ПолученныеДанные.Прочее.Выгрузить());
	
		//Выданные авансы
		ДанныеИБ.ВыданныеАвансы.Загрузить(ПолученныеДанные.ВыданныеАвансы.Выгрузить());
	
		ПолученныеДанные = Неопределено;		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_АктВыполненныхРабот
Процедура ДобавитьПКО_Документ_АктВыполненныхРабот(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_АктВыполненныхРабот";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.АктВыполненныхРабот";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплатуПокупателю";
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗачетаАвансов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Вид электронного документа заполняется если документооборот используется.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель; 
		Иначе
			ДанныеИБ.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель; 
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
					
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзПроизводства_Получение
Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзПроизводства_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратМатериаловИзПроизводства_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратМатериаловИзПроизводства";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратныеОтходы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратныеОтходы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "В");
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеЗатрат");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратныеОтходы", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
			ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратныеОтходы,
		ДанныеИБ.ВозвратныеОтходы,
		МассивКлючевыхПолей,
		"Цена, Сумма, Счет, СтатьяЗатрат, ОтражениеВУСН, НоменклатурнаяГруппа");
	ДанныеИБ.ВозвратныеОтходы.Загрузить(ПолученныеДанные.ВозвратныеОтходы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратМатериаловИзЭксплуатации_Получение
Процедура ДобавитьПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратМатериаловИзЭксплуатации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратМатериаловИзЭксплуатации;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратМатериаловИзЭксплуатации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Спецодежда", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Спецодежда;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПартияМатериаловВЭксплуатации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("ПартияМатериаловВЭксплуатации", "ДокументПередачи");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("СрокЭксплуатации", "СрокЭксплуатации");
		КонвертацииСвойствСпецоснастка.Вставить("НаименованиеНазначенияИспользования", "НаименованиеНазначенияИспользования");
		КонвертацииСвойствСпецоснастка.Вставить("НаименованиеСпособаОтраженияРасходов", "НаименованиеСпособаОтраженияРасходов");
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			
			ИмяТабличнойЧасти = "Спецодежда";
			Если ЗначениеЗаполнено(СтрокаXDTO.Номенклатура) Тогда
				// Получим номенклатуру
				ИмяПКО = "Справочник_Номенклатура_Получение";
				ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Номенклатура,
												ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
				
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
					ПолученныеДанные.Организация, Номенклатура, ПолученныеДанные.Склад, ПолученныеДанные.Дата);
				Если СчетаУчета <> Неопределено Тогда
					Если СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
						ИмяТабличнойЧасти = "Спецоснастка";
					КонецЕсли; 
				КонецЕсли;
									
			КонецЕсли;
	
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ПартияМатериаловВЭксплуатации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяДавальцу_Получение
Процедура ДобавитьПКО_Документ_ВозвратСырьяДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратСырьяДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратСырьяДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратСырьяОтПереработчика_Получение
Процедура ДобавитьПКО_Документ_ВозвратСырьяОтПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратСырьяОтПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратСырьяОтПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвращенныеМатериалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвращенныеМатериалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "В");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("СчетПередачи",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвращенныеМатериалы", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Возвращенные материалы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвращенныеМатериалы,
		ДанныеИБ.ВозвращенныеМатериалы,
		МассивКлючевыхПолей,
		"СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.ВозвращенныеМатериалы.Загрузить(ПолученныеДанные.ВозвращенныеМатериалы.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровОтПокупателя
Процедура ДобавитьПКО_Документ_ВозвратТоваровОтПокупателя(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровОтПокупателя;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратОтПокупателя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	НоваяСтрока.СвойствоФормата = "ПокупателемВыставляетсяСчетФактураНаВозврат";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтразитьВКнигеПокупок";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовПоАвансам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПереданныеСчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	// Заполнение данных шапки.
	СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		
		Если ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяЕНВД"
			Или ДанныеXDTO.Налогообложение.Значение = "ПродажаНеОблагаетсяНДС" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяНДС" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПродажаНаЭкспорт" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
		КонецЕсли;
		
	КонецЕсли;
	
	// Для всех документов на возврат с 2019 года устанавливаем признак, что покупателю выставляется корректировочный счет-фактура.
	ПолученныеДанные.ПокупателюВыставляетсяКорректировочныйСчетФактура = ПолученныеДанные.Дата >= Дата(2019,1,1)
		И Не ПолученныеДанные.ПокупателемВыставляетсяСчетФактураНаВозврат;
	
	ПолученныеДанные.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	ПолученныеДанные.ОтразитьВКнигеПокупок = ПолученныеДанные.ПокупателемВыставляетсяСчетФактураНаВозврат;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Документ реализации
	ДокументРеализации = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ДокументРеализации = ДанныеXDTO.ДокументРеализации;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "ОтчетОРозничныхПродажах") > 0 Тогда
			ИмяПКО = "Документ_ОтчетОРозничныхПродажах";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
				"Сделка", Новый Структура("Значение,ИмяПКО", ДокументРеализации, ИмяПКО));
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("Себестоимость", "Себестоимость");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	            
	            Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
				КонецЕсли;
				
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДС);
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("ПереданныеСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,ПереданныеСчетУчета,СчетДоходов,СчетРасходов,Субконто,СчетУчетаНДСПоРеализации,ОтражениеВУСН");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//ТАра
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ВозвратТоваровПоставщику
Процедура ДобавитьПКО_Документ_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВозвратТоваровПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сделка";
	НоваяСтрока.СвойствоФормата = "ДокументПоступления";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОприходования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	// Для всех документов на возврат с 2019 года устанавливаем признак, что поставщику выставляется корректировочный счет-фактура.
	ПолученныеДанные.КорректировочныйСчетФактураПолученОтПоставщика = ПолученныеДанные.Дата >= Дата(2019,1,1);
	
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = СокрЛП(Строка.ТипЗапасов.Значение);
			КонецЕсли;
			
			//ДокументОприходования
			ДокументПоступления = Неопределено;
			Если ЗначениеЗаполнено(Строка.ДокументПоступления) Тогда
				ДокументПоступления = Строка.ДокументПоступления;
			ИначеЕсли ДанныеXDTO.Свойство("ДокументПоступления") И ЗначениеЗаполнено(ДанныеXDTO.ДокументПоступления) Тогда
				ДокументПоступления = ДанныеXDTO.ДокументПоступления;
			КонецЕсли;
			Если  ДокументПоступления <> Неопределено Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
				ТипДокументаПоступления = ДокументПоступления.ТипЗначения;
				Если Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
					ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
				ИначеЕсли Найти(ТипДокументаПоступления, "ОприходованиеТоваров") > 0 Тогда
					ИмяПКО = "Документ_ОприходованиеТоваров_Получение";
				ИначеЕсли Найти(ТипДокументаПоступления, "СборкаТоваров") > 0 Тогда
					ИмяПКО = "Документ_СборкаТоваров_Получение";
				ИначеЕсли Найти(ТипДокументаПоступления, "АвансовыйОтчет") > 0 Тогда
					ИмяПКО = "Документ_АвансовыйОтчет_Получение";
				КонецЕсли;
			КонецЕсли;
			
			Если ТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
				КонецЕсли;
	
				Если ДокументПоступления <> Неопределено Тогда
					СтруктураДанныхСтроки.Вставить("ДокументОприходования",Новый Структура("Значение, ИмяПКО", ДокументПоступления, ИмяПКО)); 
				КонецЕсли;
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры

Процедура ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
		
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;
	
	#Область Мержевание
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС,СчетРасчетов,КодТНВЭД");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область Документ_ВыпускПродукции_Получение
Процедура ДобавитьПКО_Документ_ВыпускПродукции_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ВыпускПродукции_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетПроизводстваЗаСмену;
	ПравилоКонвертации.ОбъектФормата = "Документ.ВыпускПродукции";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВыпускПродукции";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоМест";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПлановаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлановая";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "Подразделение", "ПодразделениеОрганизации");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеЗатрат", "ПодразделениеЗатрат");
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	Если ДанныеXDTO.Свойство("ВидОперации") И ДанныеXDTO.ВидОперации.Значение = "ВыпускПродукцииВПодразделение" Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыпускВПодразделение", Истина);
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВыпускВПодразделение", Ложь);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "СуммаПлановая");
		ПравилаЗаполнения.Вставить("Цена", "ПлановаяСтоимость");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
			СтруктураДанныхСтроки.Вставить("КоличествоМест", Строка.Количество);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	// При необходимости пересчитать цены из валюты документа в валюту регл учета.
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВалютаДокумента") Тогда
		ДанныеВалюты = ПолученныеДанные.ДополнительныеСвойства.ВалютаДокумента;
		ВалютаДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеВалюты.Значение,
								ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ДанныеВалюты.ИмяПКО), "ПолучитьСсылку").Ссылка;
		Если ЗначениеЗаполнено(ВалютаДокумента) И ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ПолученныеДанные.Дата);
			Если ЗначениеЗаполнено(СтруктураКурса.Курс) И СтруктураКурса.Курс <> 1 Тогда
				Для Каждого Строка ИЗ ПолученныеДанные.Продукция Цикл
					Если ЗначениеЗаполнено(Строка.СуммаПлановая) ИЛИ ЗначениеЗаполнено(Строка.ПлановаяСтроимость) Тогда
						Строка.СуммаПлановая = Окр(Строка.СуммаПлановая * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2);
						Строка.ПлановаяСтроимость = Окр(Строка.ПлановаяСтроимость * СтруктураКурса.Курс / СтруктураКурса.Кратность, 2);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Склад) Тогда
		ПолученныеДанные.Склад = КомпонентыОбмена.ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	
	ПолученныеДанные.ПодразделениеОрганизации = ПолученныеДанные.ПодразделениеЗатрат;
	Если ПолученныеДанные.ДополнительныеСвойства.ВыпускВПодразделение Тогда
		// Счет учета в табличной части должен совпадать со счетом затрат.
		Для Каждого Строка ИЗ ПолученныеДанные.Продукция Цикл
			Строка.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
			ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ЗаказКлиента_Получение
Процедура ДобавитьПКО_Документ_ЗаказКлиента_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ЗаказКлиента_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПокупателю;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказКлиента";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетНаОплатуПокупателю";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОрганизацияПолучатель";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтруктурнаяЕдиница";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ИспользоватьТипыЗапасов = ДанныеXDTO.Товары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		Если ИспользоватьТипыЗапасов Тогда
			ПравилаЗаполненияТара = Новый Соответствие;
		    ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияТара.Вставить("Количество", "Количество");
			ПравилаЗаполненияТара.Вставить("Цена", "Цена");
			ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если ИспользоватьТипыЗапасов И ЗначениеЗаполнено(Строка.ТипЗапасов) И Строка.ТипЗапасов.Значение = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//Услуги - добавляются к товарам
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;
КонецПроцедуры
#КонецОбласти
#Область Документ_ИнвентаризацияТоваров_Получение
Процедура ДобавитьПКО_Документ_ИнвентаризацияТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ИнвентаризацияТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ИнвентаризацияТоваровНаСкладе;
	ПравилоКонвертации.ОбъектФормата = "Документ.ИнвентаризацияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаНачалаИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ДатаНачалаИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОкончанияИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ДатаОкончанияИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеВид";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеВид";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеДата";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснованиеНомер";
	НоваяСтрока.СвойствоФормата = "ДокументОснованиеНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтветственноеЛицо";
	НоваяСтрока.СвойствоФормата = "ОтветственноеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПричинаПроведенияИнвентаризации";
	НоваяСтрока.СвойствоФормата = "ПричинаПроведенияИнвентаризации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУчет";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("КоличествоУчет", "КоличествоУчет");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаУчет", "СуммаУчет");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
		
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
				
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоУчет");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаУчет");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаДолга_Получение
Процедура ДобавитьПКО_Документ_КорректировкаДолга_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаДолга_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаДолга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаДолга";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_КорректировкаДолга_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентДебитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентДебитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентКредитор";
	НоваяСтрока.СвойствоФормата = "КонтрагентКредитор";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДтЗадолженности";
	НоваяСтрока.СвойствоФормата = "СуммаДебиторскойЗадолженности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаКтЗадолженности";
	НоваяСтрока.СвойствоФормата = "СуммаКредиторскойЗадолженности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидАвансаЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДебиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДебиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КредиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КредиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер,Организация");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Конвертации табличных частей
	МассивСтрокДебиторскаяЗадолженность = Новый Массив;
	МассивСтрокКредиторскаяЗадолженность = Новый Массив;
	КонвертацииСвойств = Новый Соответствие;
	КонвертацииСвойств.Вставить("ДоговорКонтрагента", "Договор");
	КонвертацииСвойств.Вставить("Сумма", "Сумма");
	КонвертацииСвойств.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
	КонвертацииСвойств.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
	КонвертацииСвойств.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
	
	Если ДанныеXDTO.Свойство("ДебиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.ДебиторскаяЗадолженность) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.ДебиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(СтрокаXDTO.Договор) И ТипЗнч(СтрокаXDTO.Договор) = Тип("Структура") И
				СтрокаXDTO.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтрокаXDTO.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
	
			МассивСтрокДебиторскаяЗадолженность.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("КредиторскаяЗадолженность") И ЗначениеЗаполнено(ДанныеXDTO.КредиторскаяЗадолженность) Тогда
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КредиторскаяЗадолженность Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			Если ЗначениеЗаполнено(СтрокаXDTO.Договор) И ТипЗнч(СтрокаXDTO.Договор) = Тип("Структура") И
				СтрокаXDTO.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтрокаXDTO.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
	
			МассивСтрокКредиторскаяЗадолженность.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДебиторскаяЗадолженность.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДебиторскаяЗадолженность", МассивСтрокДебиторскаяЗадолженность);
	КонецЕсли;
	Если МассивСтрокКредиторскаяЗадолженность.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("КредиторскаяЗадолженность", МассивСтрокКредиторскаяЗадолженность);
	КонецЕсли;
	//Для операции "Списание задолженности" даже если задолженность кредиторская, на форму выводится контрагент-дебитор
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КонтрагентДебитор) Тогда
			ПолученныеДанные.КонтрагентДебитор = ПолученныеДанные.КонтрагентКредитор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	КорректировкаДолга_ПередЗаписьюПолученныхДанных(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаПоступления
Процедура ДобавитьПКО_Документ_КорректировкаПоступления(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаПоступления";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаПоступления;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаПоступленияТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаПоступления";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВосстановитьНДС";
	НоваяСтрока.СвойствоФормата = "ВосстановитьНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КорректироватьБУиНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕстьВДокументеПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕстьВДокументеПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументПоступления = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументПоступления") Тогда
		ДокументПоступления = ДанныеXDTO.ДокументПоступления;
	КонецЕсли;
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	
	Если ЗначениеЗаполнено(ДокументПоступления) Тогда
		
		ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
		ТипДокументаПоступления = ДокументПоступления.ТипЗначения;
		Если Найти(ТипДокументаПоступления, "ТаможеннаяДекларация") > 0 Тогда
			ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаПоступления, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "РеализацияТоваровУслуг") > 0 Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли Найти(ТипДокументаПоступления, "СчетФактураПолученный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураПолученный_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаПоступления, "КорректировкаПоступленияТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаПоступления";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ДокументПоступления", Новый Структура("Значение,ИмяПКО", ДокументПоступления, ИмяПКО));
		
	КонецЕсли;
	
	ИсправляемыйДокументПоступления = Неопределено;
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументПоступления") Тогда
		ИсправляемыйДокументПоступления = ДанныеXDTO.ИсправляемыйДокументПоступления;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		
		ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
		ТипДокументаПоступления = ИсправляемыйДокументПоступления.ТипЗначения;
		Если Найти(ТипДокументаПоступления, "ТаможеннаяДекларация") > 0 Тогда
			ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаПоступления, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "РеализацияТоваровУслуг") > 0 Тогда
			ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ИначеЕсли Найти(ТипДокументаПоступления, "СчетФактураПолученный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураПолученный_Получение";
		ИначеЕсли Найти(ТипДокументаПоступления, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаПоступления, "КорректировкаПоступленияТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаПоступления";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ИсправляемыйДокументПоступления", Новый Структура("Значение,ИмяПКО", ИсправляемыйДокументПоступления, ИмяПКО));
		
	КонецЕсли;
	
	
	ПолученныеДанные.КорректироватьБУиНУ = Истина;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки", "КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения", "ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки", "ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения", "СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки", "СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения", "СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСДоКорректировки", "СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации", "ЕстьВДокументеПоступления");
		
	МассивСтрокТовары = Новый Массив;
	МассивСтрокУслуги = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
		ПравилаЗаполнения.Вставить("НомерГТДДоИзменения", "НомерГТДДоИзменения");
	
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("СтранаПроисхожденияДоИзменения", "СтранаПроисхожденияДоИзменения");
	
		Для Каждого Строка ИЗ ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		// Корректируем соответствие
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
		Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			ПравилаЗаполнения.Удалить("НомерГТД");
			ПравилаЗаполнения.Удалить("НомерГТДДоИзменения");
	
			ПравилаЗаполнения.Удалить("СтранаПроисхождения");
			ПравилаЗаполнения.Удалить("СтранаПроисхожденияДоИзменения");
		КонецЕсли;
	
		Для Каждого Строка ИЗ ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);					
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("НомерГТДДоИзменения");
	
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("СтранаПроисхожденияДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеПоступления");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета, СчетУчетаНДС, ОтражениеВУСН,СчетРасчетов,СпособУчетаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СодержаниеДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеПоступления");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетЗатрат, ПодразделениеЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, СчетУчетаНДС, ОтражениеВУСН, СпособУчетаНДС");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_КорректировкаРеализации_Получение
Процедура ДобавитьПКО_Документ_КорректировкаРеализации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_КорректировкаРеализации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаРеализации;
	ПравилоКонвертации.ОбъектФормата = "Документ.КорректировкаРеализацииТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_КорректировкаРеализации";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийИсправленияПоступленияРеализации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйДокументРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КорректироватьБУиНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕстьВДокументеРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТДДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхожденияДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕстьВДокументеРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоличествоДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СодержаниеДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоИзменения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаДоКорректировки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.КорректироватьБУиНУ = Истина;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Документы реализации и исправляемый документ реализации
	ДокументРеализации = Неопределено;
	Если ДанныеXDTO.Свойство("ДокументРеализации") Тогда
		ДокументРеализации = ДанныеXDTO.ДокументРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументРеализации) Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "СчетФактураВыданный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураВыданный_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомитенту") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "КорректировкаРеализацииТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаРеализации_Получение";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ДокументРеализации", Новый Структура("Значение,ИмяПКО", ДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	ИсправляемыйДокументРеализации = Неопределено;
	
	Если ДанныеXDTO.Свойство("ИсправляемыйДокументРеализации") Тогда
		ИсправляемыйДокументРеализации = ДанныеXDTO.ИсправляемыйДокументРеализации;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
		ТипДокументаРеализации = ИсправляемыйДокументРеализации.ТипЗначения;
		Если Найти(ТипДокументаРеализации, "СчетФактураВыданный") > 0 Тогда
			ИмяПКО = "Документ_СчетФактураВыданный_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровОтПокупателя") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
		ИначеЕсли Найти(ТипДокументаРеализации, "ВозвратТоваровПоставщику") > 0 Тогда
			ИмяПКО = "Документ_ВозвратТоваровПоставщику";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомиссионера") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "ОтчетКомитенту") > 0 Тогда
			ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
		ИначеЕсли Найти(ТипДокументаРеализации, "КорректировкаРеализацииТоваров") > 0 Тогда
			ИмяПКО = "Документ_КорректировкаРеализации_Получение";
		КонецЕсли;	
	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"ИсправляемыйДокументРеализации", Новый Структура("Значение,ИмяПКО", ИсправляемыйДокументРеализации, ИмяПКО));
		
	КонецЕсли;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("КоличествоДоИзменения", "КоличествоДоИзменения");
	ПравилаЗаполнения.Вставить("КоличествоДоКорректировки", "КоличествоДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("ЦенаДоИзменения", "ЦенаДоИзменения");
	ПравилаЗаполнения.Вставить("ЦенаДоКорректировки", "ЦенаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("СуммаДоИзменения", "СуммаДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаДоКорректировки", "СуммаДоКорректировки");
	
	ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
	ПравилаЗаполнения.Вставить("СтавкаНДСДоИзменения", "СтавкаНДСДоИзменения");
	
	ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
	ПравилаЗаполнения.Вставить("СуммаНДСДоИзменения", "СуммаНДСДоИзменения");
	ПравилаЗаполнения.Вставить("СуммаНДСДоКорректировки", "СуммаНДСДоКорректировки");
	
	ПравилаЗаполнения.Вставить("ЕстьВДокументеПоступленияРеализации","ЕстьВДокументеРеализации");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
		ПравилаЗаполнения.Вставить("НомерГТДДоИзменения", "НомерГТДДоИзменения");
	
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("СтранаПроисхожденияДоИзменения", "СтранаПроисхожденияДоИзменения");
	
		Для Каждого Строка ИЗ ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.НомерГТДДоИзменения) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТДДоИзменения", Новый Структура("Код", Строка.НомерГТДДоИзменения));
			КонецЕсли;
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;	
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Услуги") И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		// Корректируем соответствие
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СодержаниеДоИзменения", "СодержаниеДоИзменения");
		Если ДанныеXDTO.Свойство("Товары") И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
			ПравилаЗаполнения.Удалить("НомерГТД");
			ПравилаЗаполнения.Удалить("НомерГТДДоИзменения");
	
			ПравилаЗаполнения.Удалить("СтранаПроисхождения");
			ПравилаЗаполнения.Удалить("СтранаПроисхожденияДоИзменения");
		КонецЕсли;
	
		Для Каждого Строка ИЗ ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.ПризнаватьЗачитыватьАванс = Истина;
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("НомерГТДДоИзменения");
	
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	МассивКлючевыхПолей.Добавить("СтранаПроисхожденияДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеРеализации");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетДоходов,СчетРасходов,Субконто, СчетУчетаНДСПоРеализации,КодТНВЭД,КодТНВЭДДоИзменения");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("КоличествоДоИзменения");
	МассивКлючевыхПолей.Добавить("КоличествоДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("ЦенаДоИзменения");
	МассивКлючевыхПолей.Добавить("ЦенаДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СтавкаНДСДоИзменения"); 
	
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоИзменения");
	МассивКлючевыхПолей.Добавить("СуммаНДСДоКорректировки");
	
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СодержаниеДоИзменения");
	
	МассивКлючевыхПолей.Добавить("ЕстьВДокументеРеализации");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетДоходов,СчетРасходов,Субконто, СчетУчетаНДСПоРеализации");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОперацияПоПлатежнойКарте_Получение
Процедура ДобавитьПКО_Документ_ОперацияПоПлатежнойКарте_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийОплатаПлатежнойКартой";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Эквайер";
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		// Расшифровка платежа.
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор)
				И ТипЗнч(Строка.Договор) = Тип("Структура")
				И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				
				Инструкция = Новый Структура("Значение, ИмяПКО",
					Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры");
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Инструкция);
			
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
		
	ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.Эквайер);
		
	ДанныеДляЗаписиВИБ.ДоговорЭквайринга = ДоговорЭквайринга;
		
	// ВидОплаты.
	ДанныеДляЗаписиВИБ.ВидОплаты = ВидОплатыОрганизации(
		КомпонентыОбмена,
		ПолученныеДанные.Организация,
		Перечисления.ТипыОплат.ПлатежнаяКарта,
		ПолученныеДанные.Эквайер,
		ДоговорЭквайринга);
	
	// СчетКасса.
	Если Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетКасса) Тогда
		ДанныеДляЗаписиВИБ.СчетКасса = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	КонецЕсли;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		// Заменяем свойства, которые получили из XDTO.
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
		// Восстанавливаем "затертые" данные.
	
		// РасшифровкаПлатежа.
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС, СуммаНДС, СпособПогашенияЗадолженности, СчетНаОплату");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		ПолученныеДанные = Неопределено;
	
	КонецЕсли;
	
	// Заполнение счетов расчетов.
	Для Каждого СтрокаТЧ Из ДанныеДляЗаписиВИБ.РасшифровкаПлатежа Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента)
			И (Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом)
			Или Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам)) Тогда
			
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				ДанныеДляЗаписиВИБ.Организация, ДанныеДляЗаписиВИБ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда		
				СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
				СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОприходованиеТоваров_Получение
Процедура ДобавитьПКО_Документ_ОприходованиеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОприходованиеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОприходованиеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяПрочихДоходовРасходов";
	НоваяСтрока.СвойствоФормата = "СтатьяДоходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДоходов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Товары
	Если НЕ (ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары)) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрокТовары = Новый Массив;
	
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	ПравилаЗаполнения.Вставить("Количество", "Количество");
	ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		
		СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
		СтруктураДанныхСтроки.Вставить("ЦенаВРознице", СтруктураДанныхСтроки.Цена);
		СтруктураДанныхСтроки.Вставить("СуммаВРознице", СтруктураДанныхСтроки.Сумма);
		
		Если Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
			СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
			СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
		КонецЕсли;
		МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	КонецЦикла;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ
Процедура ДобавитьПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КорректировкаДолга;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетБанкаПоОперациямЭквайринга";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КонтрагентДебитор";
	НоваяСтрока.СвойствоФормата = "Эквайрер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДтЗадолженности";
	НоваяСтрока.СвойствоФормата = "СуммаКомиссии";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетДт";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДебиторскаяЗадолженность", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДебиторскаяЗадолженность;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Э");
	
	Если ДанныеXDTO.Свойство("ДатаВыписки") И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
	Иначе
		ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Проведен", Ложь);
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ПолученныеДанные.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокРасшифровка = Новый Массив;
	СтруктураДанныхСтроки = Новый Структура();
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) < ВерсияФорматаЧислом("1.2") Тогда
		СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДанныеXDTO.ДоговорЭквайринга);
	Иначе
		ДоговорЭквайринга = ДоговорЭквайринга(ПолученныеДанные.Организация, ПолученныеДанные.КонтрагентДебитор);
		СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорЭквайринга.Ссылка);
	КонецЕсли;
	СтруктураДанныхСтроки.Вставить("СуммаВзаиморасчетов", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("Сумма", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("СуммаНУ", ДанныеXDTO.СуммаКомиссии);
	СтруктураДанныхСтроки.Вставить("КурсВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("КратностьВзаиморасчетов", 1);
	СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетов", ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03"));
	
	МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДебиторскаяЗадолженность", МассивСтрокРасшифровка);
КонецПроцедуры

Процедура ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетДавальцу_Получение
Процедура ДобавитьПКО_Документ_ОтчетДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияУслугПоПереработке;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РеализацияУслугПоПереработке";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("МатериалыЗаказчика", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.МатериалыЗаказчика;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("МатериалыЗаказчика")
		И ЗначениеЗаполнено(ДанныеXDTO.МатериалыЗаказчика) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		Для Каждого Строка Из ДанныеXDTO.МатериалыЗаказчика Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокМатериалы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("МатериалыЗаказчика", МассивСтрокМатериалы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Услуги.Итог("СуммаНДС") = 0;
							
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
					
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто,ПлановаяСтоимость,СуммаПлановая,СчетУчета,Спецификация");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.МатериалыЗаказчика,
		ДанныеИБ.МатериалыЗаказчика,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.МатериалыЗаказчика.Загрузить(ПолученныеДанные.МатериалыЗаказчика.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомиссионераОПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетКомиссионераОПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомиссионераОПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомиссионера";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОтчетКомиссионераОПродажах";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗачетаАвансов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Покупатели", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Покупатели;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыставленСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаСФ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КлючСтроки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаПередачи", "СуммаПередачи");
		ПравилаЗаполнения.Вставить("СуммаВознаграждения", "СуммаВознаграждения");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаПередачи", "ЦенаПередачи");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения", "СуммаНДСВознаграждения");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("КлючСтроки", "КлючСтроки");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			СтруктураДанныхСтроки.Вставить("Коэффициент",1);
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
	
	//Покупатели
	МассивСтрокПокупатели = Новый Массив;
	Если ДанныеXDTO.Свойство("Покупатели")
		И ЗначениеЗаполнено(ДанныеXDTO.Покупатели) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("ВыставленСФ", "ВыставленСФ");
		ПравилаЗаполнения.Вставить("ДатаСФ", "ДатаСФ");
		ПравилаЗаполнения.Вставить("СчетФактура", "СчетФактура");
		ПравилаЗаполнения.Вставить("КлючСтроки", "КлючСтроки");
		Для Каждого Строка Из ДанныеXDTO.Покупатели Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			ДатаСФЗаполнено = СтруктураДанныхСтроки.Свойство("ДатаСФ") И ЗначениеЗаполнено(СтруктураДанныхСтроки.ДатаСФ);
			Если НЕ ДатаСФЗаполнено
				И СтруктураДанныхСтроки.Свойство("СчетФактура")
				И ТипЗнч(СтруктураДанныхСтроки.СчетФактура) = Тип("Структура")
				И СтруктураДанныхСтроки.СчетФактура.Свойство("Дата") Тогда
				СтруктураДанныхСтроки.Вставить("ДатаСФ", НачалоДня(СтруктураДанныхСтроки.СчетФактура.Дата));
			КонецЕсли;
			
			МассивСтрокПокупатели.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокПокупатели.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Покупатели", МассивСтрокПокупатели);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0;				
							
	Если ДанныеИБ <> Неопределено Тогда
	
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
						
		//Товары
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("Цена");
		МассивКлючевыхПолей.Добавить("СтавкаНДС");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("НомерГТД");
		МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
		МассивКлючевыхПолей.Добавить("СуммаПередачи");
		МассивКлючевыхПолей.Добавить("СуммаВознаграждения");
		МассивКлючевыхПолей.Добавить("ЦенаПередачи");
		МассивКлючевыхПолей.Добавить("СуммаНДСВознаграждения");
		МассивКлючевыхПолей.Добавить("КлючСтроки");
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации, КодТНВЭД");
		ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
		//Покупатели
		ДанныеИБ.Покупатели.Загрузить(ПолученныеДанные.Покупатели.Выгрузить());
	
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	Для Каждого Строка Из ДанныеДляЗаписиВИБ.Покупатели Цикл
	
		Если Не ЗначениеЗаполнено(Строка.ДатаСФ) Тогда
			Строка.ДатаСФ = ДанныеДляЗаписиВИБ.Дата;
		КонецЕсли;	
	
		Если Не ЗначениеЗаполнено(Строка.Покупатель) Тогда
			Строка.Покупатель = ДанныеДляЗаписиВИБ.Контрагент;
		КонецЕсли;	
	
	КонецЦикла;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетКомитентуОПродажах_Получение
Процедура ДобавитьПКО_Документ_ОтчетКомитентуОПродажах_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетКомитентуОПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетКомитенту";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОтчетКомитентуОПродажах";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПроцентКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "ПроцентКомиссионногоВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.СвойствоФормата = "СпособРасчетаКомиссионногоВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВознаграждения";
	НоваяСтрока.СвойствоФормата = "СтавкаНДСВознаграждения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.СвойствоФормата = "СуммаВознаграждения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УдержатьВознаграждение";
	НоваяСтрока.СвойствоФормата = "УдержатьКомиссионноеВознаграждение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УслугаПоВознаграждению";
	НоваяСтрока.СвойствоФормата = "УслугаПоВознаграждению";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРеализации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСВознаграждения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаПоступления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОПродажах;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаПоступления", "СуммаПоступления");
		ПравилаЗаполнения.Вставить("СуммаВознаграждения", "СуммаВознаграждения");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаПоступления", "ЦенаПоступления");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДСВознаграждения", "СуммаНДСВознаграждения");
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("ДатаРеализации", "ДатаРеализации");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетОРозничныхПродажах
Процедура ДобавитьПКО_Документ_ОтчетОРозничныхПродажах(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОтчетОРозничныхПродажах;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("АгентскиеУслуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.АгентскиеУслуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Оплата", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Оплата;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаОплаты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	#Область ТоварыИУслуги
	#Область Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если  Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
	
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	#Область Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ПравилаЗаполненияАУ = Новый Соответствие;
		ПравилаЗаполненияАУ.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияАУ.Вставить("Количество", "Количество");
		ПравилаЗаполненияАУ.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияАУ.Вставить("Цена", "Цена");
		ПравилаЗаполненияАУ.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполненияАУ.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполненияАУ.Вставить("Содержание", "Содержание");
		ПравилаЗаполненияАУ.Вставить("Принципал", "Контрагент");
		ПравилаЗаполненияАУ.Вставить("ДоговорСПринципалом", "ДоговорКонтрагента");
	
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
	
			// Собственные услуги добавляются в ТЧ Товары,
			// а агентские - в ТЧ АгентскиеУслуги
			Если  Строка.ТипУслуги.Значение = "Собственные" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияАУ);
				МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("АгентскиеУслуги", МассивСтрокУслуги);
	КонецЕсли;
	#КонецОбласти
	#Область Оплата
	МассивСтрокОплата = Новый Массив;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартами) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.СуммаОплаты, Перечисления.ТипыОплат.ПлатежнаяКарта);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			Если ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("ДоговорЭквайринга") <> Неопределено
				И ЗначениеЗаполнено(Строка.ДоговорЭквайринга)
				И ТипЗнч(Строка.ДоговорЭквайринга) = Тип("Структура") 
				И Строка.ДоговорЭквайринга.Свойство("Ссылка") Тогда
				// Если указана ссылка на договор, то используем переданный договор
				// Если ДоговорЭквайринга передан, но поле Ссылка не заполнена,
				// то используем договор эквайринга по умолчанию, так как те данные, которые переданы, дублируют данные в документе.
				
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				// Конвертация договора
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ДоговорЭквайринга,
											ПКОДоговор, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			ИначеЕсли СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, СтруктураДанныхСтроки.Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартамиПодарочныхСертификатов")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов) Тогда
	
		Для Каждого Строка Из ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.СуммаОплаты, Перечисления.ТипыОплат.ПлатежнаяКарта);
			
			Если ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент);
			КонецЕсли;
			
			Если ДанныеXDTO.ОплатаПлатежнымиКартамиПодарочныхСертификатов.Колонки.Найти("ДоговорЭквайринга") <> Неопределено
				И ЗначениеЗаполнено(Строка.ДоговорЭквайринга)
				И ТипЗнч(Строка.ДоговорЭквайринга) = Тип("Структура") 
				И Строка.ДоговорЭквайринга.Свойство("Ссылка") Тогда
				// Если указана ссылка на договор, то используем переданный договор
				// Если ДоговорЭквайринга передан, но поле Ссылка не заполнена,
				// то используем договор эквайринга по умолчанию, так как те данные, которые переданы, дублируют данные в документе.
				
				ИмяПКО = "Справочник_ДоговорыКонтрагентов";
				// Конвертация договора
				ПКОДоговор = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				ДоговорКонтрагента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.ДоговорЭквайринга,
											ПКОДоговор, "ПолучитьСсылку").Ссылка;
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			ИначеЕсли СтруктураДанныхСтроки.Свойство("Контрагент") Тогда
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, СтруктураДанныхСтроки.Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("ОплатаСертификатами")
		И ЗначениеЗаполнено(ДанныеXDTO.ОплатаСертификатами) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма", "СуммаОплаты");
		
		Для Каждого Строка Из ДанныеXDTO.ОплатаСертификатами Цикл
			СтруктураДанныхСтроки = Новый Структура("СуммаОплаты, ТипОплаты", Строка.Сумма, Перечисления.ТипыОплат.ПодарочныйСертификатСобственный);
			
			// Контрагент
			Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
			СтруктураДанныхСтроки.Вставить("Контрагент", Контрагент.Ссылка);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				Договор = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, Контрагент);
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Договор.Ссылка);
			КонецЕсли;
			
			МассивСтрокОплата.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокОплата.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Оплата", МассивСтрокОплата);
	КонецЕсли;
	#КонецОбласти
КонецПроцедуры

Процедура ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	//Заполнение ВидаОплаты
	Если ЗначениеЗаполнено(ПолученныеДанные.Организация) И ПолученныеДанные.Оплата.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.Оплата Цикл
		
			СтрокаДопСвойств = ПолученныеДанные.ДополнительныеСвойства.Оплата[СтрокаТЧ.НомерСтроки - 1];
			
			ТипОплаты = СтрокаДопСвойств.ТипОплаты;
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Договор    = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
			Если СтрокаДопСвойств.Свойство("Контрагент") Тогда
				Контрагент = СтрокаДопСвойств.Контрагент;
			КонецЕсли;
			
			Если СтрокаДопСвойств.Свойство("ДоговорКонтрагента") Тогда
				Договор = СтрокаДопСвойств.ДоговорКонтрагента;
			КонецЕсли;
			
			СтрокаТЧ.ВидОплаты = ВидОплатыОрганизации(
				КомпонентыОбмена,
				ПолученныеДанные.Организация,
				ТипОплаты,
				Контрагент,
				Договор);
		КонецЦикла;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.АгентскиеУслуги.Итог("СуммаНДС") = 0;
							
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ДанныеИБ.СтатьяДвиженияДенежныхСредств) Тогда
		ПолученныеДанные.СтатьяДвиженияДенежныхСредств = ДанныеИБ.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
				
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
			
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Агентские услуги
	МассивКлючевыхПолей = Новый Массив;
	
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Контрагент");
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("Содержание");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.АгентскиеУслуги,
		ДанныеИБ.АгентскиеУслуги,
		МассивКлючевыхПолей,
		"СчетРасчетов");
	ДанныеИБ.АгентскиеУслуги.Загрузить(ПолученныеДанные.АгентскиеУслуги.Выгрузить());
	//Оплата
	ДанныеИБ.Оплата.Загрузить(ПолученныеДанные.Оплата.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ОтчетПереработчика_Получение
Процедура ДобавитьПКО_Документ_ОтчетПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ОтчетПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата = "Документ.ОтчетПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ИспользованныеМатериалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ИспользованныеМатериалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "О");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокУслуги = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокМатериалы = Новый Массив;
	Если ДанныеXDTO.Свойство("Материалы")
		И ЗначениеЗаполнено(ДанныеXDTO.Материалы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Материалы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокМатериалы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокМатериалы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИспользованныеМатериалы", МассивСтрокМатериалы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("Сумма");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДС, СтатьяЗатрат,ОтражениеВУСН,СпособУчетаНДС");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	//Материалы
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ИспользованныеМатериалы,
		ДанныеИБ.ИспользованныеМатериалы,
		МассивКлючевыхПолей,
		"СчетУчета, СтатьяЗатрат, ОтражениеВУСН");
	ДанныеИБ.ИспользованныеМатериалы.Загрузить(ПолученныеДанные.ИспользованныеМатериалы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсНаДатуПриобретенияРеализацииВалюты";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Валюта конвертации
		ВалютаКонвертации = ДанныеXDTO.РасшифровкаПлатежа[0].ВалютаКонвертации;
		ИмяПКОВалюта = "";
		Если ЗначениеЗаполнено(ВалютаКонвертации) Тогда
			
			Если ВалютаКонвертации.Свойство("Ссылка") Тогда
				ИмяПКОВалюта = "Справочник_Валюты";
			Иначе
				ИмяПКОВалюта = "Справочник_Валюты_ИзСтруктуры";
			КонецЕсли;
		КонецЕсли;
		ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюта);
		ВалютаКонвертации = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ВалютаКонвертации, ПКОВалюты,"ПолучитьСсылку").Ссылка;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаКонвертации", ВалютаКонвертации);
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсЦБНаДатуКонвертации","КурсНаДатуПриобретенияРеализацииВалюты");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если СтруктураДанныхСтроки.Свойство("КурсНаДатуПриобретенияРеализацииВалюты") Тогда
				ПолученныеДанные.КурсНаДатуПриобретенияРеализацииВалюты = СтруктураДанныхСтроки.КурсНаДатуПриобретенияРеализацииВалюты;
			КонецЕсли;
			Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
				Иначе
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Строка.Договор);
				КонецЕсли;
			КонецЕсли;	
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
		
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ВалютаКонвертации = ПолученныеДанные.ДополнительныеСвойства.ВалютаКонвертации;
	АлгоритмКонвертации = "";
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета
		И ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
		АлгоритмКонвертации = "ПриобретениеИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты;
	Иначе
		АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты";
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты;
	КонецЕсли;
	
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		ПолученныеДанные.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов = Истина;
	КонецЕсли;
	Если АлгоритмКонвертации = "ПриобретениеИностраннойВалюты" Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты; 
	ИначеЕсли АлгоритмКонвертации = "ПоступленияОтПродажиИностраннойВалюты" Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты; 
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентомПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		
		// Заменяем свойства, которые получили из XDTO
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		// Восстанавливаем "затертые" данные
		//РасшифровкаПлатежа
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсНаДатуПриобретенияРеализацииВалюты");
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
		
		ПолученныеДанные = Неопределено;				
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПоПлатежнымКартам_Получение
Процедура ДобавитьПКО_Документ_ПБДСПоПлатежнымКартам_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПоПлатежнымКартам_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПоПлатежнымКартам";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.СвойствоФормата = "СтатьяРасходов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУслуг";
	НоваяСтрока.СвойствоФормата = "СуммаУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаУслуг";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	Если ДанныеXDTO.Свойство("СчетРасходов") И ЗначениеЗаполнено(ДанныеXDTO.СчетРасходов) Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду(ДанныеXDTO.СчетРасходов);
	КонецЕсли;	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
			// Сумму услуг - в 1-ю строку расшифровки.
			Если ДанныеXDTO.Свойство("СуммаУслуг") И ЗначениеЗаполнено(ДанныеXDTO.СуммаУслуг) 
				И МассивСтрокРасшифровка.Количество() = 0 Тогда
				СтруктураДанныхСтроки.Вставить("СуммаУслуг",ДанныеXDTO.СуммаУслуг);
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
		
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда	
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
		КонецЕсли;
	КонецЦикла;
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		// Если в расшифровке платежа указан счет 51/52/55, то считаем, что это поступление с другого расчетного счета организации.
		// Во всех остальных случаях считаем, что это прочее поступление.
		СчетаБанка = ПоступлениеНаРасчетныйСчетФормы.СчетаБанка(ПолученныеДанные);
		Если ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом)
			И СчетаБанка.Найти(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) <> Неопределено Тогда 
			
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета;
			
		КонецЕсли;
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	
	// Значения субконто.
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("БанковскиеСчета", ПолученныеДанные.СчетКонтрагента);
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПБДСПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетДоходов");
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
	
		ПерваяСтрока = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрока.СтатьяДоходов) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт1", Новый Структура("Значение, ИмяПКО", ПерваяСтрока.СтатьяДоходов, "Справочник_СтатьиДоходов"));
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
			Строка.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЦикла;
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	СоответствиеСубконто.Вставить("БанковскиеСчета",      ПолученныеДанные.СчетКонтрагента);
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПБДСРасчетыСКонтрагентами";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособПогашенияЗадолженности";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплату";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область АлгоритмКонвертации
	АлгоритмКонвертации = "";
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		
		АлгоритмКонвертации = "ОплатаОтПокупателя";
		
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		
		АлгоритмКонвертации = "ВозвратОтПоставщика";
		
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		АлгоритмКонвертации = "РасчетыПоКредитамИЗаймам";
		
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		
		АлгоритмКонвертации = "ПрочиеРасчетыСКонтрагентами";
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		// СтатьяДвиженияДенежныхСредств
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС) Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств", ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
			КонецЕсли;
		КонецЕсли;
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		
		Если АлгоритмКонвертации = "ОплатаОтПокупателя"
			Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			
			// СпособПогашенияЗадолженности
			Если АлгоритмКонвертации = "ОплатаОтПокупателя"
				Или АлгоритмКонвертации = "ВозвратОтПоставщика" Тогда
				СтруктураДанныхСтроки.Вставить("СпособПогашенияЗадолженности",Перечисления.СпособыПогашенияЗадолженности.Автоматически); 
			КонецЕсли;
	
			Если ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			ИначеЕсли ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			КонецЕсли;
			
			// Заполнение счета на оплату.
			Если АлгоритмКонвертации = "ОплатаОтПокупателя"
				И ЗначениеЗаполнено(Строка.Заказ) И Строка.Заказ.ТипЗначения = "ЗаказКлиента" Тогда
				СтруктураКонвертацииЗаказа = Новый Структура("Значение, ИмяПКО",
					Строка.Заказ, "Документ_ЗаказКлиента_Получение");
				СтруктураДанныхСтроки.Вставить("СчетНаОплату", СтруктураКонвертацииЗаказа);
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если в уже существующем документе указан договор факторинга, то загружать такой документ повторно не требуется.
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации <> ПолученныеДанные.ВидОперации Тогда 
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя ИЛИ
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
		МассивКлючевыхПолей.Добавить("СуммаНДС");
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетСотрудника";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.СвойствоФормата = "СтатьяДДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетов) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетов));
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.СубконтоКт1);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		
		Если ДанныеИБ.ВидОперации <> ПолученныеДанные.ВидОперации Тогда 
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентом,СчетУчетаРасчетовПоАвансам");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
		
		ПолученныеДанные = Неопределено;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаДавальцу_Получение
Процедура ДобавитьПКО_Документ_ПередачаДавальцу_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаДавальцу_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаДавальцу";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Валюта документа
	Если ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) Тогда
		ПолученныеДанные.ВалютаДокумента = ПолученныеДанные.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	// Валюта документа
	ДанныеИБ.ВалютаДокумента = ПолученныеДанные.ВалютаДокумента;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаМатериаловВЭксплуатацию_Получение
Процедура ДобавитьПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаМатериаловВЭксплуатацию_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПередачаМатериаловВЭксплуатацию;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВЭксплуатацию";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ИнвентарьИХозяйственныеПринадлежности", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ИнвентарьИХозяйственныеПринадлежности;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Спецодежда", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Спецодежда;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФизЛицо";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Спецоснастка", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Спецоснастка;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокСпецодежда   = Новый Массив;
	МассивСтрокСпецоснастка = Новый Массив;
	МассивСтрокИнвентарь    = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		//Спецодежда
		КонвертацииСвойствСпецодежда = Новый Соответствие;
		КонвертацииСвойствСпецодежда.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецодежда.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствСпецодежда.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецодежда.Вставить("СрокЭксплуатации", "СрокЭксплуатации");
		КонвертацииСвойствСпецодежда.Вставить("НаименованиеНазначенияИспользования", "НаименованиеНазначенияИспользования");
		КонвертацииСвойствСпецодежда.Вставить("НаименованиеСпособаОтраженияРасходов", "НаименованиеСпособаОтраженияРасходов");
		
		//Спецоснастка
		КонвертацииСвойствСпецоснастка = Новый Соответствие;
		КонвертацииСвойствСпецоснастка.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствСпецоснастка.Вставить("Количество", "Количество");
		КонвертацииСвойствСпецоснастка.Вставить("СрокЭксплуатации", "СрокЭксплуатации");
		КонвертацииСвойствСпецоснастка.Вставить("НаименованиеНазначенияИспользования", "НаименованиеНазначенияИспользования");
		КонвертацииСвойствСпецоснастка.Вставить("НаименованиеСпособаОтраженияРасходов", "НаименованиеСпособаОтраженияРасходов");
		
		//Инвентарь
		КонвертацииСвойствИнвентарь = Новый Соответствие;
		КонвертацииСвойствИнвентарь.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствИнвентарь.Вставить("ФизЛицо", "ФизическоеЛицо");
		КонвертацииСвойствИнвентарь.Вставить("Количество", "Количество");
		КонвертацииСвойствИнвентарь.Вставить("НаименованиеСпособаОтраженияРасходов", "НаименованиеСпособаОтраженияРасходов");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			
			ИмяТабличнойЧасти = "Спецодежда";
			Если ЗначениеЗаполнено(СтрокаXDTO.Номенклатура) Тогда
				// Получим номенклатуру
				ИмяПКО = "Справочник_Номенклатура_Получение";
				ПКОНоменклатура = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Номенклатура    = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, СтрокаXDTO.Номенклатура,
												ПКОНоменклатура, "ПолучитьСсылку").Ссылка;
				
				// Определяем счет учета по умолчанию
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
					ПолученныеДанные.Организация, Номенклатура, ПолученныеДанные.Склад, ПолученныеДанные.Дата);
					
				Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
					// Если указан тип запасов - Инвентарь, то загружаем строку в ТЧ ИнвентарьИХозяйственныеПринадлежности.
					// Если не инвентарь - то определяем табличную часть по счету передачи, который выбран для номенклатуры.
					Если СтрокаXDTO.ТипЗапасов.Значение = "ИнвентарьИХозяйственныеПринадлежности" Тогда
					    ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности";
					ИначеЕсли СчетаУчета <> Неопределено
						И СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
						ИмяТабличнойЧасти = "Спецоснастка";
					КонецЕсли;
				ИначеЕсли СчетаУчета <> Неопределено Тогда
					Если СчетаУчета.СчетПередачи = ПланыСчетов.Хозрасчетный.СпецоснасткаВЭксплуатации Тогда
						ИмяТабличнойЧасти = "Спецоснастка";
					ИначеЕсли СчетаУчета.СчетУчета = ПланыСчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежности Тогда
						ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности";
					КонецЕсли; 
				КонецЕсли;
									
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "Спецодежда" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецодежда, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецодежда.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "Спецоснастка" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствСпецоснастка, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокСпецоснастка.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ИмяТабличнойЧасти = "ИнвентарьИХозяйственныеПринадлежности" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствИнвентарь, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокИнвентарь.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокСпецодежда.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецодежда", МассивСтрокСпецодежда);
		КонецЕсли;
		Если МассивСтрокСпецоснастка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Спецоснастка", МассивСтрокСпецоснастка);
		КонецЕсли;
		Если МассивСтрокИнвентарь.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ИнвентарьИХозяйственныеПринадлежности", МассивСтрокИнвентарь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Заполнение назначения использования
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.Спецодежда Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.Спецодежда[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("СрокЭксплуатации")
				И ЗначениеЗаполнено(СтрокаXDTO.СрокЭксплуатации) Тогда
			СтрокаТЧ.НазначениеИспользования = НайтиСоздатьНазначениеИспользованияСпецодежды(СтрокаТЧ.Номенклатура, СтрокаXDTO.СрокЭксплуатации,
					СтрокаXDTO.НаименованиеНазначенияИспользования, СтрокаXDTO.НаименованиеСпособаОтраженияРасходов);
					
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.Спецоснастка Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.Спецоснастка[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("СрокЭксплуатации")
				И ЗначениеЗаполнено(СтрокаXDTO.СрокЭксплуатации) Тогда
			СтрокаТЧ.НазначениеИспользования = НайтиСоздатьНазначениеИспользованияСпецодежды(СтрокаТЧ.Номенклатура, СтрокаXDTO.СрокЭксплуатации,
					СтрокаXDTO.НаименованиеНазначенияИспользования, СтрокаXDTO.НаименованиеСпособаОтраженияРасходов);
					
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ ИЗ ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности Цикл
		СтрокаXDTO = ПолученныеДанные.ДополнительныеСвойства.ИнвентарьИХозяйственныеПринадлежности[СтрокаТЧ.НомерСтроки - 1];
		Если СтрокаXDTO.Свойство("НаименованиеСпособаОтраженияРасходов")
				И ЗначениеЗаполнено(СтрокаXDTO.НаименованиеСпособаОтраженияРасходов) Тогда
			СтрокаТЧ.СпособОтраженияРасходов = НайтиСоздатьСпособПогашенияРасходов(СтрокаXDTO.НаименованиеСпособаОтраженияРасходов);
		КонецЕсли;
	КонецЦикла;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Спецодежда
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецодежда,
		ДанныеИБ.Спецодежда,
		МассивКлючевыхПолей,
		"НазначениеИспользования, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.Спецодежда.Загрузить(ПолученныеДанные.Спецодежда.Выгрузить());
	
	//Спецоснастка
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Спецоснастка,
		ДанныеИБ.Спецоснастка,
		МассивКлючевыхПолей,
		"НазначениеИспользования, СчетУчета, СчетПередачи, ОтражениеВУСН");
	ДанныеИБ.Спецоснастка.Загрузить(ПолученныеДанные.Спецоснастка.Выгрузить());
	
	//Инвентарь и хозяйственные принадлежности
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ФизЛицо");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности,
		ДанныеИБ.ИнвентарьИХозяйственныеПринадлежности,
		МассивКлючевыхПолей,
		"СпособОтраженияРасходов, СчетУчета, ОтражениеВУСН");
	ДанныеИБ.ИнвентарьИХозяйственныеПринадлежности.Загрузить(ПолученныеДанные.ИнвентарьИХозяйственныеПринадлежности.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПередачаПереработчику_Получение
Процедура ДобавитьПКО_Документ_ПередачаПереработчику_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПередачаПереработчику_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПередачаТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаПереработчику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетПередачи";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "П");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
	
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("СчетПередачи",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетПередачи");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПеремещениеТоваров_Получение
Процедура ДобавитьПКО_Документ_ПеремещениеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПеремещениеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПеремещениеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПеремещениеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПеремещениеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладОтправитель";
	НоваяСтрока.СвойствоФормата = "СкладОтправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СкладПолучатель";
	НоваяСтрока.СвойствоФормата = "СкладПолучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОтправитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеПолучатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НовыйСчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ТоварыНаКомиссии", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ТоварыНаКомиссии;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НовыйСчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеОтправитель", "ПодразделениеОтправитель");
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, "ПодразделениеПолучатель", "ПодразделениеПолучатель");
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокКомиссия = Новый Массив;
	МассивСтрокТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СуммаВРознице", "СуммаВРознице");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		ПравилаЗаполнения.Вставить("СтавкаНДСВРознице", "СтавкаНДСВРознице");
		
		ПравилаЗаполненияКомиссия = Новый Соответствие;
		ПравилаЗаполненияКомиссия.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияКомиссия.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполненияКомиссия.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
	
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
			Если ТипЗапасов = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияКомиссия);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				СтруктураДанныхСтроки.Вставить("НовыйСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				МассивСтрокКомиссия.Добавить(СтруктураДанныхСтроки);
			ИначеЕсли ТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияКомиссия);
				МассивСтрокТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокКомиссия.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ТоварыНаКомиссии", МассивСтрокКомиссия);
		КонецЕсли;
		Если МассивСтрокТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокТара);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	МассивКлючевыхПолей.Добавить("СтавкаНДСВРознице");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета,СпособУчетаНДС");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	//Товары на комиссии
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ТоварыНаКомиссии,
		ДанныеИБ.ТоварыНаКомиссии,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета");
	ДанныеИБ.ТоварыНаКомиссии.Загрузить(ПолученныеДанные.ТоварыНаКомиссии.Выгрузить());
	
	//Возвратная тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета,НовыйСчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_ПКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОВнутренняяПередача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	КорСчет = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	Иначе
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_ПКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
		Если ЗначениеЗаполнено(Договор) Тогда
			Если ТипЗнч(Договор) = Тип("Структура") И Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт2", Новый Структура("Значение, ИмяПКО", Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			Иначе
				ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт2",Договор);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	Иначе
		СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.СубконтоКт1);
	СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.СубконтоКт2);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанке_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанке_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// ВидОперации.
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке;
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) > ВерсияФорматаЧислом("1.0")
		И ДанныеXDTO.ВидОперации.Значение = "Инкассация" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	// СчетУчетаРасчетовСКонтрагентом.
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход
		И Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом) Тогда
		
		СчетУчетаРасчетовСКонтрагентом = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
								ПланыСчетов.Хозрасчетный.ПереводыВПути,
								ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
		
		ДанныеДляЗаписиВИБ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
	
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение
Процедура ДобавитьПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "П");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.СнятиеНаличных;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ПолученныеДанные.СчетУчетаРАсчетовСКонтрагентом = ПолученныеДанные.СчетБанк;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочееПоступление_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочееПоступление_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочееПоступление_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочееПоступление";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт3";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОПрочиеДоходы_Получение
Процедура ДобавитьПКО_Документ_ПКОПрочиеДоходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОПрочиеДоходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОПрочиеДоходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоКт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетДоходов");
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
	
		ПерваяСтрока = ДанныеXDTO.РасшифровкаПлатежа[0];
		Если ЗначениеЗаполнено(ПерваяСтрока.СтатьяДоходов) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоКт1", Новый Структура("Значение, ИмяПКО", ПерваяСтрока.СтатьяДоходов, "Справочник_СтатьиДоходов"));
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоКт1);
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКО_Расчеты";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	ИначеЕсли ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита;
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы" Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеЗайма;
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	МассивСтрокРасшифровка = Новый Массив;
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
	
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) И ТипЗнч(Строка.Договор) = Тип("Структура") И
				Строка.Договор.Свойство("Ссылка") = ЛОЖЬ Тогда
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
			КонецЕсли;
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" 
				ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата, Истина);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			ИначеЕсли ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			КонецЕсли;
	
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_ПКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	СчетУчетаРасчетовСКонтрагентомПоУмолчанию = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
			ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентомПоУмолчанию);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоКт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ПКОРозничнаяВыручка_Получение
Процедура ДобавитьПКО_Документ_ПКОРозничнаяВыручка_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПКОРозничнаяВыручка_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПКОРозничнаяВыручка";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПКОРозничнаяВыручка";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВыручкаСНТТ";
	НоваяСтрока.СвойствоФормата = "ВыручкаНТТ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерЧекаККМ";
	НоваяСтрока.СвойствоФормата = "НомерЧекаККМ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПринятоОт";
	НоваяСтрока.СвойствоФормата = "ПринятоОт";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа[0];
	КонецЕсли;
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурсаВалюты.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
	СтрокаРасшифровка.СтавкаНДС	= Перечисления.СтавкиНДС.БезНДС;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СтатьяДвиженияДенежныхСредств, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеОтПереработчика_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеОтПереработчика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеОтПереработчика_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеИзПереработки;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеОтПереработчика";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеОтПереработчика";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Продукция", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Продукция;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "П");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Продукция", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПолученныеДанные.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	// Восстанавливаем "затертые" данные
	//Продукция
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Продукция,
		ДанныеИБ.Продукция,
		МассивКлючевыхПолей,
		"Счет,СуммаПлановая,ПлановаяСтоимость,Спецификация");
	ДанныеИБ.Продукция.Загрузить(ПолученныеДанные.Продукция.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ПоступлениеСырьяОтДавальца_Получение
Процедура ДобавитьПКО_Документ_ПоступлениеСырьяОтДавальца_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ПоступлениеСырьяОтДавальца_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеСырьяОтДавальца";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПТиУ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Д");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияОтгруженныхТоваров_Получение
Процедура ДобавитьПКО_Документ_РеализацияОтгруженныхТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияОтгруженныхТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияОтгруженныхТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РеализацияОтгруженныхТоваров";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОтгрузки";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_РеализацияТоваровУслуг";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗачетаАвансов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОтгрузки", ДанныеXDTO.КлючевыеСвойства);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РеализацияТоваровУслуг
Процедура ДобавитьПКО_Документ_РеализацияТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РеализацияТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_РТиУ";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЭлектронногоДокумента";
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭД_Реализация_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьВыдана";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКемВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьДата";
	НоваяСтрока.СвойствоФормата = "ДоверенностьДата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьНомер";
	НоваяСтрока.СвойствоФормата = "ДоверенностьНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоверенностьЧерезКого";
	НоваяСтрока.СвойствоФормата = "ДоверенностьКомуВыдана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтпускПроизвел";
	НоваяСтрока.СвойствоФормата = "ОтпускПроизвел";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплатуПокупателю";
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплатуПокупателю";
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументБезНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("АгентскиеУслуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.АгентскиеУслуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПереданныеСчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				Если ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
					СтруктураДанныхСтроки.Вставить("ПереданныеСчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
				КонецЕсли;
	
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
		КонецЕсли;
	КонецЕсли;
	//Услуги
	//Для вида операции "Отгрузка без перехода права собственности" услуги загружаются по отдельному правилу
	Если ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
		МассивСтрокУслуги = Новый Массив;
		МассивСтрокАгентскиеУслуги = Новый Массив;
		Если ДанныеXDTO.Свойство("Услуги")
			И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
			ПравилаЗаполнения = Новый Соответствие;
			ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполнения.Вставить("Содержание", "Содержание");
			ПравилаЗаполнения.Вставить("Количество", "Количество");
			ПравилаЗаполнения.Вставить("Сумма", "Сумма");
			ПравилаЗаполнения.Вставить("Цена", "Цена");
			ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
			
			ПравилаЗаполненияАгентскихУслуг = Новый Соответствие;
			ПравилаЗаполненияАгентскихУслуг.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияАгентскихУслуг.Вставить("Содержание", "Содержание");
			ПравилаЗаполненияАгентскихУслуг.Вставить("Количество", "Количество");
			ПравилаЗаполненияАгентскихУслуг.Вставить("Сумма", "Сумма");
			ПравилаЗаполненияАгентскихУслуг.Вставить("Цена", "Цена");
			ПравилаЗаполненияАгентскихУслуг.Вставить("СтавкаНДС", "СтавкаНДС");
			ПравилаЗаполненияАгентскихУслуг.Вставить("СуммаНДС", "СуммаНДС");
			ПравилаЗаполненияАгентскихУслуг.Вставить("Принципал", "Контрагент");
			
			Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
				
				ТипУслуги = "";
				Если ЗначениеЗаполнено(Строка.ТипУслуги) Тогда
					ТипУслуги = Строка.ТипУслуги.Значение;
				КонецЕсли;
				
				Если ТипУслуги = "Агентские" Тогда
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияАгентскихУслуг);
					МассивСтрокАгентскиеУслуги.Добавить(СтруктураДанныхСтроки);
				Иначе
					СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
					МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если МассивСтрокУслуги.Количество() > 0 Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
			КонецЕсли;
			
			Если МассивСтрокАгентскиеУслуги.Количество() > 0 Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("АгентскиеУслуги", МассивСтрокАгентскиеУслуги);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	// Вид электронного документа не заполняется если документооборот не используется.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ПолученныеДанные.ВидЭлектронногоДокумента = Неопределено; 
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	РекомендуемыйВидОперации = Документы.РеализацияТоваровУслуг.РекомендуемыйВидОперации(ПолученныеДанные);
	Если ЗначениеЗаполнено(РекомендуемыйВидОперации) Тогда
		ПолученныеДанные.ВидОперации = РекомендуемыйВидОперации;
	КонецЕсли;
	 	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	ПолученныеДанные.ДокументБезНДС = НЕ ПлательщикНДС 
									И ПолученныеДанные.Товары.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.Услуги.Итог("СуммаНДС") = 0 
									И ПолученныеДанные.АгентскиеУслуги.Итог("СуммаНДС") = 0;
	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДСПоРеализации,СчетРасходов,ПереданныеСчетУчета,СчетДоходов,Субконто,КодТНВЭД");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Тара
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	//АгентскиеУслуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("Контрагент");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.АгентскиеУслуги,
		ДанныеИБ.АгентскиеУслуги,
		МассивКлючевыхПолей,
		"ДоговорКонтрагента,СчетРасчетов");
	ДанныеИБ.АгентскиеУслуги.Загрузить(ПолученныеДанные.АгентскиеУслуги.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВнутренняяПередача_Получение
Процедура ДобавитьПКО_Документ_РКОВнутренняяПередача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВнутренняяПередача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВнутренняяПередача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	КорСчет = ПланыСчетов.Хозрасчетный.РасчетыПоТекущимОперациям;
	Если ДанныеИБ = Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	Иначе
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = КорСчет;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОВыплатаЗарплаты_Получение
Процедура ДобавитьПКО_Документ_РКОВыплатаЗарплаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОВыплатаЗарплаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОВыплатаЗарплаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям;
	
	Если ДанныеXDTO.РасшифровкаПлатежа[0].Депонент = Истина Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов;
	ИначеЕсли ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Контрагент", ДанныеXDTO.РасшифровкаПлатежа[0].Сотрудник);
КонецПроцедуры

Процедура ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ВыплатаЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаКВыплате = ПолученныеДанные.СуммаДокумента;
		
	Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
	
		СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВКассу");
		
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_РКОКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И
		ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) И 
		ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		Договор = ДанныеXDTO.РасшифровкаПлатежа[0].Договор;
		Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("Структура") И
			Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт2",Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
		Иначе
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СубконтоДт2",Договор);
		КонецЕсли;
		
		МассивСтрокРасшифровкаПлатежа = Новый Массив;
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС", "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
	
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
			МассивСтрокРасшифровкаПлатежа.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровкаПлатежа);
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если ПолученныеДанные.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	Иначе
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетов);
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
			Строка.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЦикла;
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.СубконтоДт1);
	СоответствиеСубконто.Вставить("Договоры", ПолученныеДанные.СубконтоДт2);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ПолученныеДанные.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
	
		МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивКлючевыхПолей.Добавить("СуммаПлатежа");
		МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
		МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
		
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.РасшифровкаПлатежа,
			ДанныеИБ.РасшифровкаПлатежа,
			МассивКлючевыхПолей,
			"СчетУчетаРасчетовСКонтрагентом");
		ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	КонецЕсли;
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчет_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКОНаБанковскийСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
						ПланыСчетов.Хозрасчетный.РасчетныеСчета,
						ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	Иначе
		//Счет инкассации
		МассивСчетовОтбора = Новый Массив;
		МассивСчетовОтбора.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути_);
		
		МассивСчетовИсключений = Новый Массив;
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты);
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты);
		МассивСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам);
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивСчетовОтбора);
		Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
		Запрос.УстановитьПараметр("Валютный", ПолученныеДанные.СчетКасса.Валютный);
		Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", Истина);
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет,
		|	Хозрасчетный.Код КАК Код,
		|	Хозрасчетный.Наименование КАК Наименование
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
		|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
		|	И (НЕ &ОтбиратьПоПризнакуВалютный
		|			ИЛИ Хозрасчетный.Валютный = &Валютный)
		|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Код";
	
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = Результат.Счет;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОНаБанковскийСчетПБДС_Получение
Процедура ДобавитьПКО_Документ_РКОНаБанковскийСчетПБДС_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОНаБанковскийСчетПБДС_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеНаРасчетныйСчет;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОНаБанковскийСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКОНаБанковскийСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Р");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВзносНаличными;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочаяВыдача_Получение
Процедура ДобавитьПКО_Документ_РКОПрочаяВыдача_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочаяВыдача_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочаяВыдача";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт2";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт3";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
	// Значения субконто.
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
	СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОПрочийРасход_Получение
Процедура ДобавитьПКО_Документ_РКОПрочийРасход_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОПрочийРасход_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОПрочийРасход";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);     
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетРасходов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	// Значения субконто.
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ПрочиеДоходыИРасходы", ПолученныеДанные.СубконтоДт1);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт");
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено Тогда
		Если ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежаПоКредитамЗаймам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратЗайма;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	КонецЕсли;
	
	#КонецОбласти
	
	ПравилаКонвертации = Новый Соответствие;
	
	ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
	ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
	ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
	ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
	ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
	ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		//Расшифровка платежа
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Договор",                 "ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("Сумма",                   "СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов",     "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов",      "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтатьяДДС",               "СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СтавкаНДС",               "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС",                "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
					
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			КонецЕсли;
			Если ДанныеXDTO.ВидРасчетов.Значение = "СПоставщиком" 
				ИЛИ ДанныеXDTO.ВидРасчетов.Значение = "СПокупателем" Тогда
				ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, ПолученныеДанные.Организация, ПолученныеДанные.Дата, Ложь);
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
				
			ВидПлатежаПоКредитамЗаймам = ?(Найти(ВидРасчетовРасширенныйXDTO, "Проценты"),
				Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов,
				Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
			СтруктураДанныхСтроки.Вставить("ВидПлатежаПоКредитамЗаймам", ВидПлатежаПоКредитамЗаймам);
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокРасшифровка.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_РКОРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_РКОРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РКОРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РасходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РКОРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийРКО_РасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выдать";
	НоваяСтрока.СвойствоФормата = "Выдать";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПоДокументу";
	НоваяСтрока.СвойствоФормата = "ПоДокументу";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Приложение";
	НоваяСтрока.СвойствоФормата = "Приложение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКасса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу Тогда
		Если Не ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента)
			ИЛИ ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами;
		Иначе
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал;
		КонецЕсли;
	Иначе
		СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
	КонецЕсли;
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетовСКонтрагентом);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_РТиУБезПереходаПравСобственностиУслуги
Процедура ДобавитьПКО_Документ_РТиУБезПереходаПравСобственностиУслуги(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_РТиУБезПереходаПравСобственностиУслуги";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.РеализацияТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_РТиУ";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "АдресДоставки";
	НоваяСтрока.СвойствоФормата = "АдресДоставки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидЭлектронногоДокумента";
	НоваяСтрока.СвойствоФормата = "ВидЭД";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыЭД_Реализация_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузоотправитель";
	НоваяСтрока.СвойствоФормата = "Грузоотправитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Грузополучатель";
	НоваяСтрока.СвойствоФормата = "Грузополучатель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПереходаПраваСобственности";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Продавец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОтпускПроизвел";
	НоваяСтрока.СвойствоФормата = "ОтпускПроизвел";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплатуПокупателю";
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_ЗаказКлиента_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗачетаАвансов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "У");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги;
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	// Вид электронного документа не заполняется если документооборот не используется.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		ПолученныеДанные.ВидЭлектронногоДокумента = Неопределено; 
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
	// Восстанавливаем "затертые" данные
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Содержание");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"СчетУчетаНДСПоРеализации,СчетРасходов,СчетДоходов,Субконто");
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСКонвертацияВалюты_Получение
Процедура ДобавитьПКО_Документ_СБДСКонвертацияВалюты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСКонвертацияВалюты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСКонвертацияВалюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетовСКонтрагентом");
	
	МассивСтрокРасшифровка = Новый Массив;
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("СуммаВал","СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьКонвертации","КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсКонвертации","КурсВзаиморасчетов");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Договор = Строка.Договор;
			Если ЗначениеЗаполнено(Договор) И ТипЗнч(Договор) = Тип("Структура") И
				Договор.Свойство("Ссылка") = Ложь Тогда
				ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Новый Структура("Значение, ИмяПКО", Договор, ИмяПКО));
			Иначе
				СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента",Договор);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом));
			КонецЕсли;
			
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
		Если МассивСтрокРасшифровка.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты;
	Иначе
		СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.РеализацияИностраннойВалюты;
	КонецЕсли;
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетУчетаРасчетов);
	
	Для Каждого СтрокаТЧ Из ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетов;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПереводНаДругойСчет_Получение
Процедура ДобавитьПКО_Документ_СБДСПереводНаДругойСчет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПереводНаДругойСчет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СБДСПереводНаДругойСчет";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ПолученныеДанные.СчетУчетаРАсчетовСКонтрагентом = ПолученныеДанные.СчетБанк;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗаработнойПлаты_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗаработнойПлаты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлаты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
		
	Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
	
		СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВБанк");
		
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПеречислениеЗарПлЛицСчета_Получение
Процедура ДобавитьПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПеречислениеЗарПлЛицСчета_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПеречислениеЗаработнойПлатыНаЛицевыеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗаработнойПлатыРаботнику;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДатаВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].ДатаВедомостиНаВыплатуЗарплаты);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерВедомостиНаВыплатуЗарплаты", ДанныеXDTO.РасшифровкаПлатежа[0].НомерВедомостиНаВыплатуЗарплаты);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	Если ПолученныеДанные.ПеречислениеЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты.Добавить();
	Иначе
		СтрокаТЧ = ПолученныеДанные.ПеречислениеЗаработнойПлаты[0];
	КонецЕсли;
	СтрокаТЧ.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
		
	Если Не (ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме")
		И ПолучитьФункциональнуюОпцию("ВедетсяУчетРасчетовПоЗарплатеСводно")) Тогда
	
		СтрокаТЧ.Ведомость = ПодобратьПлатежнуюВедомость(ПолученныеДанные.ДополнительныеСвойства, "ВедомостьНаВыплатуЗарплатыВБанк");
		
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПлатежиВБюджет_Получение
Процедура ДобавитьПКО_Документ_СБДСПлатежиВБюджет_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПлатежиВБюджет_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПлатежиВБюджет";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидНалоговогоОбязательства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Налог";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйПериод";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ПоказательКБК = 0;
	Если ДанныеXDTO.Свойство("ПоказательКБК") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательКБК) Тогда
		ПоказательКБК = ДанныеXDTO.ПоказательКБК;
	КонецЕсли;
	
	ПолученныеДанные.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(ПоказательКБК);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) И ЗначениеЗаполнено(ПолученныеДанные.Налог) Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(ПолученныеДанные.Налог, ПолученныеДанные.Дата);
	КонецЕсли;
	
	
	// Вид налогового обязательства по умолчанию.
	ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;   
	
	Если ПоказательКБК <> 0 Тогда
		ВидНалоговогоОбязательства = Справочники.ВидыНалоговИПлатежейВБюджет.ВидНалоговогоОбязательстваПоКБК(ПоказательКБК, ПолученныеДанные.Дата);
	ИначеЕсли ДанныеXDTO.Свойство("ПоказательТипа") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательТипа) Тогда
		Если ДанныеXDTO.ПоказательТипа = "ПЕ" Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ПениСам;
		ИначеЕсли ДанныеXDTO.ПоказательТипа = "ПЦ" Тогда
			ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Проценты;
		КонецЕсли;
	КонецЕсли;
	
	ПолученныеДанные.ВидНалоговогоОбязательства = ВидНалоговогоОбязательства;
	
	ПериодПлатежа = '00010101';	
	Если ДанныеXDTO.Свойство("ПоказательПериода") И ЗначениеЗаполнено(ДанныеXDTO.ПоказательПериода) Тогда
		
		ОписаниеПериода = ПлатежиВБюджетКлиентСервер.РазобратьНалоговыйПериод(ДанныеXDTO.ПоказательПериода);
		Если ОписаниеПериода.Периодичность = ПлатежиВБюджетКлиентСервер.НезаполненноеЗначение() Тогда
			ПериодПлатежа = НачалоМесяца(ДобавитьМесяц(ПолученныеДанные.Дата, -1));
		Иначе
			ПериодПлатежа = ОписаниеПериода.Дата;
		КонецЕсли;
		
	КонецЕсли;
	ПолученныеДанные.НалоговыйПериод = ПериодПлатежа;
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("ВидыПлатежейВГосБюджет", ПолученныеДанные.ВидНалоговогоОбязательства);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочееСписание_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочееСписание_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочееСписание_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочееСписание";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеСРС_Прочее";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСПрочее_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	КонецЕсли;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ВидОперацииДанныхИБ = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	Если ДанныеИБ <> Неопределено Тогда
		ВидОперацииДанныхИБ = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	Если ВидОперацииДанныхИБ = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание Тогда
		// Счет учета расчетов с контрагентом.
		ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.Вспомогательный);
		// Значения субконто.
		СоответствиеСубконто = Новый Соответствие();
		СоответствиеСубконто.Вставить("БанковскиеСчета", ПолученныеДанные.СчетКонтрагента);
		СоответствиеСубконто.Вставить("СтатьиДвиженияДенежныхСредств", ПолученныеДанные.СтатьяДвиженияДенежныхСредств);
		СоответствиеСубконто.Вставить("Контрагенты", ПолученныеДанные.Контрагент);
		ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
		УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
		ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Иначе
		// Если в информационной базе уже существует документ,
		// и его вид отличается от ПрочийРасход, то не нужно затирать его свойства, кроме базовых.
		// Это требуется из-за того, что в прочий расход часто на стороне корреспондента выгружаются
		// те документы, учет которых не автоматизирован.
		// В этом случае, загруженные данные затрут наш вид операции.
		
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, 
			"Номер, Дата, Организация, Ответственный, Комментарий, ПодразделениеОрганизации, СуммаДокумента, ДатаВходящегоДокумента, НомерВходящегоДокумента");
		ПолученныеДанные = Неопределено;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСПрочиеРасходы_Получение
Процедура ДобавитьПКО_Документ_СБДСПрочиеРасходы_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСПрочиеРасходы_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСПрочиеРасходы";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеСРС_Прочее";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СубконтоДт1";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетРасходов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("ДоговорКонтрагента"))
				 И ЗначениеЗаполнено(Строка.ДоговорКонтрагента) Тогда
				Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.ДоговорКонтрагента, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			Если ДанныеXDTO.РасшифровкаПлатежа.Колонки.Найти("СчетРасходов")<> Неопределено И ЗначениеЗаполнено(Строка.СчетРасходов) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетРасходов));
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено
		И ДанныеИБ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.КомиссияБанка Тогда
		ПолученныеДанные.ВидОперации = ДанныеИБ.ВидОперации;
	КонецЕсли;
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	Для Каждого Строка ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
			Строка.СчетУчетаРасчетовСКонтрагентом = ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт");
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыСКонтрагентами_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыСКонтрагентами_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыСКонтрагентами";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеСРС_Расчеты";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидПлатежаПоКредитамЗаймам";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ВидРасчетовXDTO = ДанныеXDTO.ВидРасчетов.Значение;
	
	РасшифровкаПлатежаXDTOЗаполнена = ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа) 
		И ДанныеXDTO.РасшифровкаПлатежа.Количество();
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	#Область ВидОперации
	Если ВидРасчетовXDTO = "СПоставщиком" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	ИначеЕсли ВидРасчетовXDTO = "СПокупателем" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	ИначеЕсли ВидРасчетовXDTO = "Прочее" Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	ИначеЕсли ВидРасчетовXDTO = "КредитыИЗаймы" Тогда
		
		Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		
			ПерваяСтрокаРасшифровкиПлатежаXDTO = ДанныеXDTO.РасшифровкаПлатежа[0];
			ВидРасчетовРасширенныйXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
			
			Если ВидРасчетовРасширенныйXDTO = "ДолгосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеКредиты"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымКредитам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымКредитам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
				
			ИначеЕсли ВидРасчетовРасширенныйXDTO = "ДолгосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "КраткосрочныеЗаймы"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоДолгосрочнымЗаймам"
				Или ВидРасчетовРасширенныйXDTO = "ПроцентыПоКраткосрочнымЗаймам" Тогда
				
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма;
				
			КонецЕсли;
			
			// Определение операции по бухгалтерскому счету.
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				СчетУчетаРасчетовСКонтрагентомXDTO = ПерваяСтрокаРасшифровкиПлатежаXDTO.СчетУчетаРасчетовСКонтрагентом;
				Если Найти(СчетУчетаРасчетовСКонтрагентомXDTO, "58.03") Тогда
					ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	КонецЕсли;
	
	#КонецОбласти
	
	Если РасшифровкаПлатежаXDTOЗаполнена Тогда
		ПравилаКонвертации = Новый Соответствие;
	
		ПравилаКонвертации.Вставить("КраткосрочныеКредиты",            ПланыСчетов.Хозрасчетный.КраткосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымКредитам", ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам);
		ПравилаКонвертации.Вставить("КраткосрочныеЗаймы",              ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоКраткосрочнымЗаймам",   ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам);
		ПравилаКонвертации.Вставить("ДолгосрочныеКредиты",             ПланыСчетов.Хозрасчетный.ДолгосрочныеКредиты);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымКредитам",  ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам);
		ПравилаКонвертации.Вставить("ДолгосрочныеЗаймы",               ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
		ПравилаКонвертации.Вставить("ПроцентыПоДолгосрочнымЗаймам",    ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам);
	
		МассивСтрокРасшифровка = Новый Массив;
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("Договор","ДоговорКонтрагента");
		ПравилаЗаполнения.Вставить("СтатьяДДС","СтатьяДвиженияДенежныхСредств");
		ПравилаЗаполнения.Вставить("СуммаВзаиморасчетов", "СуммаВзаиморасчетов");
		ПравилаЗаполнения.Вставить("Сумма","СуммаПлатежа");
		ПравилаЗаполнения.Вставить("КурсВзаиморасчетов", "КурсВзаиморасчетов");
		ПравилаЗаполнения.Вставить("КратностьВзаиморасчетов", "КратностьВзаиморасчетов");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если ЗначениеЗаполнено(Строка.Договор) Тогда
				Если ТипЗнч(Строка.Договор) = Тип("Структура") И 
					Строка.Договор.Свойство("Ссылка") = Ложь Тогда
					ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
					СтруктураДанныхСтроки.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", Строка.Договор, ИмяПКО));
				КонецЕсли;
			КонецЕсли;
			
			// ВидПлатежаПоКредитамЗаймам
			ВидРасчетовРасширенныйXDTO = Строка.ВидРасчетовРасширенный;
			Если ЗначениеЗаполнено(ВидРасчетовРасширенныйXDTO) Тогда
				ВидРасчетовРасширенныйXDTO = ВидРасчетовРасширенныйXDTO.Значение;
			КонецЕсли;
				
			ВидПлатежаПоКредитамЗаймам = ?(Найти(ВидРасчетовРасширенныйXDTO, "Проценты"),
				Перечисления.ВидыПлатежейПоКредитамЗаймам.УплатаПроцентов,
				Перечисления.ВидыПлатежейПоКредитамЗаймам.ПогашениеДолга);
			СтруктураДанныхСтроки.Вставить("ВидПлатежаПоКредитамЗаймам", ВидПлатежаПоКредитамЗаймам);
			Если ЗначениеЗаполнено(Строка.СчетУчетаРасчетовСКонтрагентом) Тогда
				СчетУчетаСсылка = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка.СчетУчетаРасчетовСКонтрагентом);
				Если ЗначениеЗаполнено(СчетУчетаСсылка) Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом",СчетУчетаСсылка);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Строка.ВидРасчетовРасширенный) Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчетаРасчетовСКонтрагентом", ПравилаКонвертации.Получить(Строка.ВидРасчетовРасширенный.Значение));
			КонецЕсли;
			МассивСтрокРасшифровка.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("РасшифровкаПлатежа", МассивСтрокРасшифровка);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеИБ.ВидОперации <> ПолученныеДанные.ВидОперации Тогда 
		ПолученныеДанные = Неопределено;
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СБДСРасчетыССотрудниками_Получение
Процедура ДобавитьПКО_Документ_СБДСРасчетыССотрудниками_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СБДСРасчетыССотрудниками_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеСРасчетногоСчета;
	ПравилоКонвертации.ОбъектФормата = "Документ.СБДСРасчетыССотрудниками";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийСБДСРасчетыССотрудниками";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Сотрудник";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НазначениеПлатежа";
	НоваяСтрока.СвойствоФормата = "НазначениеПлатежа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетОрганизации";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетОрганизации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтатьяДвиженияДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтатьиДДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетБанк";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчетаРасчетовСКонтрагентом";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO);
	ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, "СчетУчетаРасчетов");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	// Счет учета расчетов с контрагентом.
	ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ);
	СоответствиеСубконто = Новый Соответствие();
	СоответствиеСубконто.Вставить("РаботникиОрганизаций", ПолученныеДанные.Контрагент);
	ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, "СубконтоДт", СоответствиеСубконто);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
КонецПроцедуры
#КонецОбласти
#Область Документ_СборкаТоваров_Получение
Процедура ДобавитьПКО_Документ_СборкаТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СборкаТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.КомплектацияНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СборкаТоваров";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_ВидыОперацийКомплектация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.СвойствоФормата = "Количество";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.СвойствоФормата = "Номенклатура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСвСтоимостиТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Комплектующие", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Комплектующие;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоляСтоимости";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	Если ДанныеXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
		ПолученныеДанные.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
	КонецЕсли;
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		//Товары
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		ПравилаЗаполнения.Вставить("ДоляСтоимости", "ДоляСтоимости");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			Если  Строка.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
				СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
			КонецЕсли;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Комплектующие", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("ДоляСтоимости");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Комплектующие,
		ДанныеИБ.Комплектующие,
		МассивКлючевыхПолей,
		"СчетУчета,СпособУчетаНДС");
	ДанныеИБ.Комплектующие.Загрузить(ПолученныеДанные.Комплектующие.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеПриСборке_Получение
Процедура ДобавитьПКО_Документ_СписаниеПриСборке_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеПриСборке_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СборкаТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "К");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("НомерГТД", "НомерГТД");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			Если Строка.ТипЗапасов.Значение <> "КомиссионныеТовары" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.Основание = "Сборка товаров № " + СокрЛП(ДанныеXDTO.КлючевыеСвойства.Номер) + " от " + ДанныеXDTO.КлючевыеСвойства.Дата;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СтавкаНДСВРознице, ОтражениеВУСН");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_СписаниеТоваров_Получение
Процедура ДобавитьПКО_Документ_СписаниеТоваров_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СписаниеТоваров_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.СписаниеТоваров";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.СвойствоФормата = "Основание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокТара = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Товары")
	И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		КонвертацииСвойствТара = Новый Соответствие;
		КонвертацииСвойствТара.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствТара.Вставить("Количество", "Количество");
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			Если ТипЗапасов = "ВозвратнаяТара" Тогда
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствТара, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.Тара);
				МассивСтрокТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				
				Если ЗначениеЗаполнено(СтрокаXDTO.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", СтрокаXDTO.НомерГТД));
				КонецЕсли;
	
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
		Если МассивСтрокТара.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокТара);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетПоставщика_Получение
Процедура ДобавитьПКО_Документ_СчетПоставщика_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетПоставщика_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетНаОплатуПоставщика;
	ПравилоКонвертации.ОбъектФормата = "Документ.ЗаказПоставщику";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетНаОплатуПокупателю";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанковскийСчетКонтрагента";
	НоваяСтрока.СвойствоФормата = "БанковскийСчетКонтрагента";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.СвойствоФормата = "Валюта";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Валюты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		
		ИспользоватьТипыЗапасов = ДанныеXDTO.Товары.Колонки.Найти("ТипЗапасов") <> Неопределено;
		Если ИспользоватьТипыЗапасов Тогда
			ПравилаЗаполненияТара = Новый Соответствие;
		    ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
			ПравилаЗаполненияТара.Вставить("Количество", "Количество");
			ПравилаЗаполненияТара.Вставить("Цена", "Цена");
			ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
		    Если ИспользоватьТипыЗапасов И Строка.ТипЗапасов <> Неопределено И Строка.ТипЗапасов.Значение = "ВозвратнаяТара" Тогда
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//Услуги - добавляются к товарам
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураВыданный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураВыданный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураВыданный_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураВыданный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураВыданный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетФактураВыданный";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыСчетаФактуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Выставлен";
	НоваяСтрока.СвойствоФормата = "Выставлен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГлавныйБухгалтер";
	НоваяСтрока.СвойствоФормата = "ГлавныйБухгалтер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВыставления";
	НоваяСтрока.СвойствоФормата = "ДатаВыставления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправляемогоКорректировочногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсправляемогоКорректировочногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерПлатежноРасчетногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерПлатежноРасчетногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчетаФактурыПродавца";
	НоваяСтрока.СвойствоФормата = "НомерСчетаФактурыКомиссионера";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Руководитель";
	НоваяСтрока.СвойствоФормата = "Руководитель";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперацииНаУменьшение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСпособаВыставления";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ПлатежноРасчетныеДокументы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ПлатежноРасчетныеДокументы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаВыставления = 2;
	Иначе
		ПолученныеДанные.КодСпособаВыставления = 1;
	КонецЕсли;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Дата и номер исходного документа: могут быть указаны 
	// - либо в шапке 
	// - либо в ТЧ в зависимости от версии формата
	//Указанные в шапке - загружаются и в шапку и в ТЧ.
	//Указанные в ТЧ - загружаются только в ТЧ.
	Если ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
		ПолученныеДанные.ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
		ПолученныеДанные.НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
	КонецЕсли;
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		КолонкиТЧ = ДанныеXDTO.ДокументыОснования.Колонки;
		ЕстьКолонкаДатаИсхДокумента = (КолонкиТЧ.Найти("ДатаИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИсхДокумента = (КолонкиТЧ.Найти("НомерИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаДатаИспрИсхДокумента = (КолонкиТЧ.Найти("ДатаИсправленияИсходногоДокумента") <> Неопределено);
		ЕстьКолонкаНомерИспрИсхДокумента = (КолонкиТЧ.Найти("НомерИсправленияИсходногоДокумента") <> Неопределено);
	
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			СтруктураДанныхСтроки = Новый Структура;
			//Дата и номер исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Указанные в шапке - загружаются и в шапку и в ТЧ.
			//Указанные в ТЧ - загружаются только в ТЧ.
			ДатаИсходногоДокумента = Неопределено;
			НомерИсходногоДокумента = Неопределено;
			Если ЕстьКолонкаДатаИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = Строка.ДатаИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("ДатаИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсходногоДокумента) Тогда
				ДатаИсходногоДокумента = ДанныеXDTO.ДатаИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаНомерИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = Строка.НомерИсходногоДокумента;
			ИначеЕсли ДанныеXDTO.Свойство("НомерИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсходногоДокумента) Тогда
				НомерИсходногоДокумента = ДанныеXDTO.НомерИсходногоДокумента;
			КонецЕсли;
			Если ЗначениеЗаполнено(НомерИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", НомерИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
			КонецЕсли;
			//Дата и номер исправления исходного документа: могут быть указаны 
			// - либо в шапке 
			// - либо в ТЧ в зависимости от версии формата
			//Загружаются в ТЧ, при загрузке из шапки - только в превую строку ТЧ.
			НомерИсправленияИсходногоДокумента = Неопределено;
			ДатаИсправленияИсходногоДокумента = Неопределено;
			Если ЭтоПерваяСтрока Тогда
				Если ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.ДатаИсправленияИсходногоДокумента) Тогда
					ДатаИсправленияИсходногоДокумента = ДанныеXDTO.ДатаИсправленияИсходногоДокумента;
				КонецЕсли;
				Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") И ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента) Тогда
					НомерИсправленияИсходногоДокумента = ДанныеXDTO.НомерИсправленияИсходногоДокумента;
				КонецЕсли;
			КонецЕсли;
			Если ЕстьКолонкаНомерИспрИсхДокумента И ЗначениеЗаполнено(Строка.НомерИсправленияИсходногоДокумента) Тогда
				НомерИсправленияИсходногоДокумента = Строка.НомерИсправленияИсходногоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаДатаИспрИсхДокумента И ЗначениеЗаполнено(Строка.ДатаИсправленияИсходногоДокумента) Тогда
				ДатаИсправленияИсходногоДокумента = Строка.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаИсправленияИсходногоДокумента) Тогда
				СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", ДатаИсправленияИсходногоДокумента);
			КонецЕсли;
			
			ТипДокументаОснования = Строка.ДокументОснование.ТипЗначения;
			Если Найти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
				ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровПоставщику";
			ИначеЕсли Найти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
				ИмяПКО = "Документ_РеализацияТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
				ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
				ИмяПКО = "Документ_АктВыполненныхРабот";
			ИначеЕсли Найти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
				ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
			ИначеЕсли Найти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
				ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
			ИначеЕсли Найти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
				ИмяПКО = "Документ_АвансовыйОтчет_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
				ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаДолга_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаПоступления";
			ИначеЕсли Найти(ТипДокументаОснования, "КорректировкаРеализацииТоваров") > 0 Тогда
				ИмяПКО = "Документ_КорректировкаРеализации_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ОтчетДавальцу") > 0 Тогда
				ИмяПКО = "Документ_ОтчетДавальцу_Получение";
			ИначеЕсли Найти(ТипДокументаОснования, "ОперацияПоПлатежнойКарте") > 0 Тогда
				ИмяПКО = "Документ_ОперацияПоПлатежнойКарте_Получение";		
			КонецЕсли;
	
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО", Строка.ДокументОснование, ИмяПКО);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
				
				Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
					ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
				КонецЕсли;
			КонецЕсли;
	
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
			ЭтоПерваяСтрока = Ложь;
			
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//Платежно-расчетные документы
	МассивСтрокДокументы = Новый Массив;
	Если ДанныеXDTO.Свойство("ПлатежноРасчетныеДокументы") И ЗначениеЗаполнено(ДанныеXDTO.ПлатежноРасчетныеДокументы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("ДатаДокумента", "ДатаДокумента");
		ПравилаЗаполнения.Вставить("НомерДокумента", "НомерДокумента");
		Для Каждого Строка Из ДанныеXDTO.ПлатежноРасчетныеДокументы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокДокументы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокДокументы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ПлатежноРасчетныеДокументы", МассивСтрокДокументы);
	КонецЕсли;
	
	//Авансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс Тогда
		ПолученныеДанные.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолученныеДанные.ДоговорКонтрагента) И ЗначениеЗаполнено(ПолученныеДанные.ДокументОснование) Тогда
		ПолученныеДанные.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолученныеДанные.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Испр_Получение
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Испр_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Испр_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетФактураПолученный";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыСчетаФактурыПолученного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПолучения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Субкомиссионер";
	НоваяСтрока.СвойствоФормата = "ДанныеРеализацииСубкомиссионер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактураВыданныйПокупателю";
	НоваяСтрока.СвойствоФормата = "ДанныеРеализацииСчетФактураВыставленный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперацииНаУменьшение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСпособаПолучения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СводныйКомиссионный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("СчетаФактурыВыданныеПокупателям", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.СчетаФактурыВыданныеПокупателям;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Субкомиссионер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,ДатаИсправления,Исправление,НомерВходящегоДокумента,НомерИсправления,Контрагент");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаИсправления) Тогда
				ПолученныеДанные.Дата = ПолученныеДанные.ДатаИсправления;
			КонецЕсли;	
		КонецЕсли;
	
		Возврат;
	КонецЕсли;
	
	СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_СчетФактураПолученный_Получение
Процедура ДобавитьПКО_Документ_СчетФактураПолученный_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_СчетФактураПолученный_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СчетФактураПолученный;
	ПравилоКонвертации.ОбъектФормата = "Документ.СчетФактураПолученный";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СчетФактураПолученный";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчетаФактуры";
	НоваяСтрока.СвойствоФормата = "ВидСчетаФактуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыСчетаФактурыПолученного";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "ДатаПолучения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправления";
	НоваяСтрока.СвойствоФормата = "ДатаИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Исправление";
	НоваяСтрока.СвойствоФормата = "Исправление";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИсправляемыйСчетФактура";
	НоваяСтрока.СвойствоФормата = "ИсправляемыйСчетФактура";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураПолученный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперации";
	НоваяСтрока.СвойствоФормата = "КодВидаОперации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправления";
	НоваяСтрока.СвойствоФормата = "НомерИсправления";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерИсходногоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Субкомиссионер";
	НоваяСтрока.СвойствоФормата = "ДанныеРеализацииСубкомиссионер";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДСДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактураВыданныйПокупателю";
	НоваяСтрока.СвойствоФормата = "ДанныеРеализацииСчетФактураВыставленный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодВидаОперацииНаУменьшение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодСпособаПолучения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СводныйКомиссионный";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Авансы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Авансы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДокументыОснования", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДокументыОснования;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОснование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсправленияИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчитыватьИсправлениеИсходногоДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("СчетаФактурыВыданныеПокупателям", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.СчетаФактурыВыданныеПокупателям;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Покупатель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Субкомиссионер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетФактура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетФактураВыданный_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаВходящегоДокумента,Исправление,НомерВходящегоДокумента,Контрагент");
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Дата) Тогда
			Если ЗначениеЗаполнено(ПолученныеДанные.ДатаВходящегоДокумента) Тогда
				ПолученныеДанные.Дата = ПолученныеДанные.ДатаВходящегоДокумента;
			КонецЕсли;	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Документ_ТаможеннаяДекларация_Получение
Процедура ДобавитьПКО_Документ_ТаможеннаяДекларация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТаможеннаяДекларация_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ГТДИмпорт;
	ПравилоКонвертации.ОбъектФормата = "Документ.ТаможеннаяДекларация";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ТаможеннаяДекларация";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьДокумента";
	НоваяСтрока.СвойствоФормата = "КратностьДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсДокумента";
	НоваяСтрока.СвойствоФормата = "КурсДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйСбор";
	НоваяСтрока.СвойствоФормата = "ТаможенныйСбор";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможенныйШтраф";
	НоваяСтрока.СвойствоФормата = "ТаможенныйШтраф";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагентаРегл";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Разделы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Разделы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТаможеннаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПартии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерРаздела";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПошлины";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФактурнаяСтоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		Если ТипЗнч(ДанныеXDTO.Договор) = Тип("Структура") И 
			ДанныеXDTO.Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагентаРегл", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеXDTO.НомерДекларации) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("НомерГТД", Новый Структура("Код", ДанныеXDTO.НомерДекларации));
	КонецЕсли;
	
	// Номера разделов явно не указываются.
	// В качестве номеров разделов используется номер строки
	// Так как во входящем сообщении номер раздела может не соответствовать номеру строки,
	// то при загрузке в табличную часть Товары нужно подменять номер раздела на номер строки в таблице Разделы
	СоответствияНомеровРазделов = Новый Соответствие;
	
	//Разделы
	МассивСтрокРазделы = Новый Массив;
	Если ДанныеXDTO.Свойство("Разделы")
		И ЗначениеЗаполнено(ДанныеXDTO.Разделы) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СтавкаПошлины", "СтавкаПошлины");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ТаможеннаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
		Для Каждого Строка Из ДанныеXDTO.Разделы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			МассивСтрокРазделы.Добавить(СтруктураДанныхСтроки);
			СоответствияНомеровРазделов.Вставить(Строка.НомерРаздела, МассивСтрокРазделы.Количество());
		КонецЦикла;
		
		Если МассивСтрокРазделы.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Разделы", МассивСтрокРазделы);
		КонецЕсли;
	КонецЕсли;
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ДокументПоступления", "ДокументПартии");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СуммаПошлины", "СуммаПошлины");
		ПравилаЗаполнения.Вставить("ТаможеннаяСтоимость", "ФактурнаяСтоимость");
		ПравилаЗаполнения.Вставить("НомерРаздела", "НомерРаздела");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			НомерСтрокиРазделов = СоответствияНомеровРазделов.Получить(СтруктураДанныхСтроки.НомерРаздела);
			СтруктураДанныхСтроки.НомерРаздела = НомерСтрокиРазделов;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
		
		Если МассивСтрокТовары.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КурсДокумента) ИЛИ НЕ ЗначениеЗаполнено(ПолученныеДанные.КратностьДокумента) Тогда
		ПолученныеДанные.КурсДокумента = ПолученныеДанные.КурсВзаиморасчетов;
		ПолученныеДанные.КратностьДокумента = ПолученныеДанные.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	КонецЦикла;
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
							
	// Порядок учета НДС по умолчанию устанавливается только для нового документа.
	// Поэтому полей НДСВключенВСтоимость и НДСПредъявленКВычету нет в ПКС.
	Документы.ГТДИмпорт.УстановитьПорядокУчетаНДСПоУмолчанию(ПолученныеДанные);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("СуммаПошлины");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
		МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
		МассивКлючевыхПолей.Добавить("ФактурнаяСтоимость");
		МассивКлючевыхПолей.Добавить("НомерРаздела");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетУчетаНДС, СчетУчетаНУ, СтатьяЗатратНУ, СпособУчетаНДС");
	КонецЕсли;
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	Для Каждого Строка Из ДанныеИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;	
	
	ДанныеИБ.Разделы.Загрузить(ПолученныеДанные.Разделы.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_ТребованиеНакладная_Получение
Процедура ДобавитьПКО_Документ_ТребованиеНакладная_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_ТребованиеНакладная_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ТребованиеНакладная;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПередачаМатериаловВПроизводство";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ТребованиеНакладная";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НДСвСтоимостиТоваров";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетаУчетаЗатратВТаблице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Материалы", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Материалы;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("МатериалыЗаказчика", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.МатериалыЗаказчика;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	ПолученныеДанные.НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
	ПолученныеДанные.СчетаУчетаЗатратВТаблице = Истина;
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары
	МассивСтрокТовары = Новый Массив;
	МассивСтрокМатериалыЗаказчика = Новый Массив;
	Заказчик = Неопределено;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("НомерГТД", "НомерГТД");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		КонвертацииСвойствМатериалыЗаказчика = Новый Соответствие;
		КонвертацииСвойствМатериалыЗаказчика.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойствМатериалыЗаказчика.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойствМатериалыЗаказчика.Вставить("Количество", "Количество");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Товары Цикл
			
			ТипЗапасов = ?(ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов), СтрокаXDTO.ТипЗапасов.Значение, ""); 
			
			Если ТипЗапасов = "КомиссионныеТовары" Тогда
				Продолжить;
			ИначеЕсли ТипЗапасов = "ДавальческиеСырьеИМатериалы" Тогда
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойствМатериалыЗаказчика, СтрокаXDTO, СтруктураДанныхСтроки);
				
				МассивСтрокМатериалыЗаказчика.Добавить(СтруктураДанныхСтроки);
			Иначе
				СтруктураДанныхСтроки = Новый Структура;
				СтруктураДанныхСтроки.Вставить("Коэффициент", 1);
				ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
				
				СчетЗатрат = СчетПоКоду(СтрокаXDTO.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат", СчетЗатрат);
				КонецЕсли;
				
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Материалы", МассивСтрокТовары);
	КонецЕсли;
	
	Если МассивСтрокМатериалыЗаказчика.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("МатериалыЗаказчика", МассивСтрокМатериалыЗаказчика);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Материалы,
		ДанныеИБ.Материалы,
		МассивКлючевыхПолей,
		"Счет, СчетЗатрат, СтатьяЗатрат, СпособУчетаНДС, ОтражениеВУСН");
	ДанныеИБ.Материалы.Загрузить(ПолученныеДанные.Материалы.Выгрузить());
	
	//МатериалыЗаказчика
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.МатериалыЗаказчика,
		ДанныеИБ.МатериалыЗаказчика,
		МассивКлючевыхПолей,
		"Счет, СчетПередачи");
	ДанныеИБ.МатериалыЗаказчика.Загрузить(ПолученныеДанные.МатериалыЗаказчика.Выгрузить());
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Документ_УстановкаЦенНоменклатуры_Получение
Процедура ДобавитьПКО_Документ_УстановкаЦенНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Документ_УстановкаЦенНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.УстановкаЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Документ.УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,ТипЦен");
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
	ПравилаЗаполнения.Вставить("Цена", "Цена");
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары 
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область ПТиУ_ПоступлениеДопРасходов
Процедура ДобавитьПКО_ПТиУ_ПоступлениеДопРасходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУ_ПоступлениеДопРасходов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеДопРасходов;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПоступлениеДопРасходов";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособЗачетаАвансов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособРаспределения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПартии";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаТовара";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Номер = ДанныеXDTO.КлючевыеСвойства.Номер;
	ПервыйСимволНомера = Сред(Номер,6,1);
	Если ПервыйСимволНомера = "0" Тогда
		ПолученныеДанные.Номер = Лев(Номер, 5) + "П" + Сред(Номер, 7);
	Иначе
		ПолученныеДанные.Номер = Номер;
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	ПолученныеДанные.СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме;
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);		
	
	Если ДанныеXDTO.Свойство("Налогообложение") И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение)
		И ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяЕНВД" Тогда
		ПолученныеДанные.НДСВключенВСтоимость = Истина;
	Иначе
		ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		ПолученныеДанные.СуммаДокумента = 0;
		Содержание = Новый Массив;
		
		ЕстьДанныеОСуммеНДС  = ДанныеXDTO.Услуги.Колонки.Найти("СуммаНДС") <> Неопределено;
		ЕстьДанныеОСтавкеНДС = ДанныеXDTO.Услуги.Колонки.Найти("СтавкаНДС") <> Неопределено;
		
		СтавкаНДС = Неопределено;
		
		Для Каждого Услуги_Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Услуги_Строка.ЭтоДопРасходы = Неопределено Тогда
				Услуги_Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;	
		
			Если Услуги_Строка.ЭтоДопРасходы Тогда
				
				Если ЗначениеЗаполнено(Услуги_Строка.Сумма) Тогда
					ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + Услуги_Строка.Сумма;
				КонецЕсли;
				
				Если ЕстьДанныеОСуммеНДС
					И ЗначениеЗаполнено(Услуги_Строка.СуммаНДС) Тогда
					ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + Услуги_Строка.СуммаНДС;
				КонецЕсли;
				
				Если ЕстьДанныеОСтавкеНДС
					И СтавкаНДС = Неопределено
					И ЗначениеЗаполнено(Услуги_Строка.СтавкаНДС) Тогда
					
					СтавкаНДС = Услуги_Строка.СтавкаНДС;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Услуги_Строка.Содержание) Тогда
					Содержание.Добавить(Услуги_Строка.Содержание);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("СтавкаНДС", СтавкаНДС);
		КонецЕсли;
		
		ПолученныеДанные.Содержание = СтрСоединить(Содержание, ", ");
		
	КонецЕсли;
	// Расшифровка допрасходов
	МассивСтрокТовары = Новый Массив;
	
	Если ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаДопРасходов) Тогда
	
		Р_КС = Новый Соответствие;
		Р_КС.Вставить("Номенклатура", "Номенклатура");
		Р_КС.Вставить("Количество", "Количество");
		Р_КС.Вставить("Сумма", "Сумма");
		Р_КС.Вставить("СуммаНДС", "СуммаНДС");
		Р_КС.Вставить("СуммаТовара", "СтоимостьТоваров");
		Р_КС.Вставить("ДокументПартии", "ДокументПоступления");
		Для Каждого СтрокаXDTO Из ДанныеXDTO.РасшифровкаДопРасходов Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Р_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	Для Каждого Строка Из ПолученныеДанные.Товары Цикл
		Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.СтавкаНДС) Тогда
		ПолученныеДанные.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПолученныеДанные.Дата);
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"НДСВключенВСтоимость,СпособЗачетаАвансов,СтавкаНДС,СуммаДокумента,СпособРаспределения,Содержание");
	
	Если ДанныеИБ.Товары.Количество() > 0 Тогда
		
		МассивКлючевыхПолей = Новый Массив;
		МассивКлючевыхПолей.Добавить("Номенклатура");
		МассивКлючевыхПолей.Добавить("Количество");
		МассивКлючевыхПолей.Добавить("Сумма");
		МассивКлючевыхПолей.Добавить("СуммаНДС");
		МассивКлючевыхПолей.Добавить("СуммаТовара");
		МассивКлючевыхПолей.Добавить("ДокументПартии");
	
		ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
			ПолученныеДанные.Товары,
			ДанныеИБ.Товары,
			МассивКлючевыхПолей,
			"СчетУчета,СчетУчетаНДС, СчетУчетаНУ, ОтражениеВУСН, СпособУчетаНДС");
	КонецЕсли;
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	Для Каждого Строка Из ДанныеИБ.Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.СпособУчетаНДС) Тогда
			Строка.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		КонецЕсли;
	КонецЦикла;
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область ПТиУ_ПоступлениеТоваровУслуг
Процедура ДобавитьПКО_ПТиУ_ПоступлениеТоваровУслуг(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПоступлениеТоваровУслуг;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ПТиУ";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.СвойствоФормата = "ВидОперации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОперацийПоступленияТоваров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "ДатаВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерВходящегоДокумента";
	НоваяСтрока.СвойствоФормата = "НомерВходящегоДокумента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетНаОплатуПоставщика";
	НоваяСтрока.СвойствоФормата = "Заказ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Документ_СчетПоставщика_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДСВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Услуги", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Услуги;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Содержание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУчетаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатрат";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетЗатратНУ";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля);
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	СпособУчетаНДС = Неопределено;
	
	// Заполнение данных шапки
	Если ДанныеXDTO.Свойство("Налогообложение")
		И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение) Тогда
		
		Если ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяЕНВД" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПродажаНеОблагаетсяНДС" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.УчитываетсяВCтоимости;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяНДС"
				ИЛИ ДанныеXDTO.Налогообложение.Значение = "НалоговыйАгентПоНДС" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПродажаНаЭкспорт" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ДляОперацийПо0;
		ИначеЕсли ДанныеXDTO.Налогообложение.Значение = "ПоФактическомуИспользованию" Тогда
			СпособУчетаНДС = Перечисления.СпособыУчетаНДС.Распределяется;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("Налогообложение") И ЗначениеЗаполнено(ДанныеXDTO.Налогообложение)
		И ДанныеXDTO.Налогообложение.Значение = "ПродажаОблагаетсяЕНВД" Тогда
		ПолученныеДанные.НДСВключенВСтоимость = Истина;
	Иначе
		ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	КонецЕсли;
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	//Товары и возвратная тара
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	Если ДанныеXDTO.Свойство("Товары")
		И ЗначениеЗаполнено(ДанныеXDTO.Товары) Тогда
	
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("ЦенаВРознице", "ЦенаВРознице");
		
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ПравилаЗаполнения.Вставить("СуммаВРознице", "СуммаВРознице");
		
		ПравилаЗаполненияТара = Новый Соответствие;
		ПравилаЗаполненияТара.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполненияТара.Вставить("Количество", "Количество");
		ПравилаЗаполненияТара.Вставить("Сумма", "Сумма");
		ПравилаЗаполненияТара.Вставить("Цена", "Цена");
		
		Для Каждого Строка Из ДанныеXDTO.Товары Цикл
			
			ТекТипЗапасов = "";
			Если ЗначениеЗаполнено(Строка.ТипЗапасов) И ТипЗнч(Строка.ТипЗапасов) = Тип("Структура") Тогда
				ТекТипЗапасов = Строка.ТипЗапасов.Значение;
			КонецЕсли;
	
			Если ТекТипЗапасов = "ВозвратнаяТара" Тогда // Заполнение ТЧ ВозвратнаяТара
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполненияТара);
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДС);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе // Заполнение ТЧ Товары
				
				СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
				СтруктураДанныхСтроки.Вставить("СпособУчетаНДС", СпособУчетаНДС);
				Если ЗначениеЗаполнено(Строка.НомерГТД) Тогда
					СтруктураДанныхСтроки.Вставить("НомерГТД", Новый Структура("Код", Строка.НомерГТД));
				КонецЕсли;
				
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТекТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
	
				УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	//Услуги
	МассивСтрокУслуги = Новый Массив;
	Если ДанныеXDTO.Свойство("Услуги")
		И ЗначениеЗаполнено(ДанныеXDTO.Услуги) Тогда
		
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("Количество", "Количество");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		ПравилаЗаполнения.Вставить("Цена", "Цена");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		Для Каждого Строка Из ДанныеXDTO.Услуги Цикл
			
			Если Строка.ЭтоДопРасходы = Неопределено Тогда
				Строка.ЭтоДопРасходы = Ложь;
			КонецЕсли;
			
			Если Строка.ЭтоДопРасходы
				И (НЕ ДанныеXDTO.Свойство("РасшифровкаДопРасходов")
			 		ИЛИ ДанныеXDTO.РасшифровкаДопРасходов.Количество() = 0)	Тогда
				Строка.ЭтоДопРасходы = Ложь; 
			КонецЕсли;
		
			Если Строка.ЭтоДопРасходы Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
			
			Если ЗначениеЗаполнено(Строка.СчетЗатрат) Тогда
				СчетЗатрат = СчетПоКоду(Строка.СчетЗатрат);
				Если ЗначениеЗаполнено(СчетЗатрат) Тогда
					СтруктураДанныхСтроки.Вставить("СчетЗатрат",   СчетЗатрат);
					СтруктураДанныхСтроки.Вставить("СчетЗатратНУ", СчетЗатрат);
			    КонецЕсли;
			КонецЕсли; 
			
			УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);
			МассивСтрокУслуги.Добавить(СтруктураДанныхСтроки);
			
		КонецЦикла;
	КонецЕсли;
	
	//ОбновимСвойствоДоговора
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	Если МассивСтрокВозвратнаяТара.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВозвратнаяТара", МассивСтрокВозвратнаяТара);
	КонецЕсли;
	Если МассивСтрокУслуги.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Услуги", МассивСтрокУслуги);
	КонецЕсли;
	
	// Уточнение вида операции в зависимости от заполенния ТЧ и наличия комиссии
	Если (ДанныеXDTO.ВидОперации.Значение = "ПокупкаУПоставщика"
		Или ДанныеXDTO.ВидОперации.Значение = "ЗакупкаПоИмпорту") 
		И МассивСтрокВозвратнаяТара.Количество() = 0 Тогда
		
		Если МассивСтрокТовары.Количество() > 0 
			И МассивСтрокУслуги.Количество() = 0 Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли МассивСтрокТовары.Количество() = 0 
			И МассивСтрокУслуги.Количество() > 0 Тогда
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ВидОперации) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры

Процедура ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	ПолученныеДанные.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
	
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	#Область Мержевание
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если в уже существующем документе указан договор факторинга, то загружать такой документ повторно не требуется.
	Если ЗначениеЗаполнено(ДанныеИБ.ДоговорКонтрагента) Тогда
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.ДоговорКонтрагента, "ВидДоговора");
		Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			ПолученныеДанные = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "НДСВключенВСтоимость");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС, СчетРасчетов, ОтражениеВУСН, СпособУчетаНДС");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	//Услуги
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Услуги,
		ДанныеИБ.Услуги,
		МассивКлючевыхПолей,
		"Содержание,СчетЗатрат,ПодразделениеЗатрат,СчетУчетаНДС, ОтражениеВУСН, СчетЗатратНУ, 
		|Субконто1, Субконто2, Субконто3, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3, СпособУчетаНДС");
	
	ДанныеИБ.Услуги.Загрузить(ПолученныеДанные.Услуги.Выгрузить());
	
	// Возвратная тара.
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ВозвратнаяТара,
		ДанныеИБ.ВозвратнаяТара,
		МассивКлючевыхПолей,
		"СчетУчета");
	
	ДанныеИБ.ВозвратнаяТара.Загрузить(ПолученныеДанные.ВозвратнаяТара.Выгрузить());
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ПолученныеДанные = Неопределено;
	
	#КонецОбласти
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ВозвратТоваровПоставщику
Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровПоставщику(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОприходования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "РП");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	
	ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	// Товары
	МассивСтрокТовары = Новый Массив;
	КонвертацииСвойств = Новый Соответствие;
	КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
	КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	КонвертацииСвойств.Вставить("Количество", "Количество");
	КонвертацииСвойств.Вставить("Цена", "Цена");
	КонвертацииСвойств.Вставить("Сумма", "Сумма");
	КонвертацииСвойств.Вставить("ЦенаВРознице", "ЦенаВРознице");
	КонвертацииСвойств.Вставить("СуммаВРознице", "СуммаВРознице");
	КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
	КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
	КонвертацииСвойств.Вставить("НомерГТД", "НомерГТД");
	КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетПоставщика" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("Излишки")
		И ЗначениеЗаполнено(ДанныеXDTO.Излишки) Тогда
	
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Излишки Цикл
			
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ВПользуПоставщика" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
			
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ВозвратТоваровСтороннейКомпании
Процедура ДобавитьПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ВозвратТоваровСтороннейКомпании";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ВозвратТоваровПоставщику;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ВозвратТоваровПоставщику";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.СвойствоФормата = "КонтрагентСтороннейКомпании";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КратностьВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.СвойствоФормата = "КурсВзаиморасчетов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "СуммаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыОпераций_ВозвратПоставщику";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОприходования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Перечисление_СтавкиНДС";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВРознице";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "РТ");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
	
	ДанныеXDTO_Организация = ?(КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta",
		ДанныеXDTO.Организация, ДанныеXDTO.КлючевыеСвойства.Организация);
	
	// Договор по совокупности ключевых свойств
	СтруктураДанныеДоговора = Новый Структура();
	СтруктураДанныеДоговора.Вставить("Организация", ДанныеXDTO_Организация);
	СтруктураДанныеДоговора.Вставить("Контрагент", ДанныеXDTO.КонтрагентСтороннейКомпании);
	СтруктураДанныеДоговора.Вставить("ВалютаВзаиморасчетов", ДанныеXDTO.Валюта);
	СтруктураДанныеДоговора.Вставить("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураДанныеДоговора.Вставить("ЭтоНаборКлючевыхСвойств", Истина);
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", СтруктураДанныеДоговора, "Справочник_ДоговорыКонтрагентов_ИзСтруктуры"));
	
	ПолученныеДанные.НДСВключенВСтоимость = НЕ УчетнаяПолитика.ПлательщикНДС(ПолученныеДанные.Организация, ПолученныеДанные.Дата);
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	НДСПоСтавкам4и2   = Ложь;
	НДСПоСтавкам18и10 = Ложь;
	
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		// Товары
		КонвертацииСвойств = Новый Соответствие;
		КонвертацииСвойств.Вставить("Номенклатура", "Номенклатура");
		КонвертацииСвойств.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		КонвертацииСвойств.Вставить("Количество", "Количество");
		КонвертацииСвойств.Вставить("Цена", "Цена");
		КонвертацииСвойств.Вставить("Сумма", "Сумма");
		КонвертацииСвойств.Вставить("ЦенаВРознице", "ЦенаВРознице");
		КонвертацииСвойств.Вставить("СуммаВРознице", "СуммаВРознице");
		КонвертацииСвойств.Вставить("СтавкаНДС", "СтавкаНДС");
		КонвертацииСвойств.Вставить("СуммаНДС", "СуммаНДС");
		КонвертацииСвойств.Вставить("НомерГТД", "НомерГТД");
		КонвертацииСвойств.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
	
			Если СтрокаXDTO.ВариантОтражения.Значение <> "ЗаСчетСтороннейКомпании" Тогда
				Продолжить;
			КонецЕсли;
	
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(КонвертацииСвойств, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
	
			// Счет учета заполняется сразу, если это комиссионный товар,
			// и автоматически после загрузки всех данных - в остальных случаях
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) И СтрокаXDTO.ТипЗапасов.Значение = "КомиссионныеТовары" Тогда
				СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
			КонецЕсли;
	
			УточнитьСтавкуНДСВСтроке(СтрокаXDTO, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10);			
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
	
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
	
		КонецЦикла;
	
	КонецЕсли;
	
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", НДСПоСтавкам4и2);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", НДСПоСтавкам18и10);
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_ОприходованиеТоваров
Процедура ДобавитьПКО_ПТиУРасх_ОприходованиеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_ОприходованиеТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОприходованиеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОприходованиеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Сумма";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Р");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку").Ссылка;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ПолученныеДанные.Основание = НСтр("ru = 'Поступление товаров и услуг № '") 
			+ НомерВходящегоДокумента
			+ НСтр("ru = ' от '")
			+ Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'");
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	// Товары
	МассивСтрокТовары = Новый Массив;
	Если ДанныеXDTO.Свойство("Излишки")
		И ЗначениеЗаполнено(ДанныеXDTO.Излишки) Тогда
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Сумма", "Сумма");
		Т_КС.Вставить("НомерГТД", "НомерГТД");
		Т_КС.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Излишки Цикл
			СтруктураДанныхСтроки = Новый Структура;
			ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
			СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
			
			ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтрокаXDTO.Сумма;
			МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
		
		Для Каждого СтрокаТовары ИЗ ПолученныеДанные.Товары Цикл
			СтрокаТовары.Цена = СтрокаТовары.Цена * КоэффициентПересчета;
			СтрокаТовары.Сумма = СтрокаТовары.Сумма * КоэффициентПересчета;
		КонецЦикла;
	КонецЕсли;		
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область ПТиУРасх_СписаниеТоваров
Процедура ДобавитьПКО_ПТиУРасх_СписаниеТоваров(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "ПТиУРасх_СписаниеТоваров";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.СписаниеТоваров;
	ПравилоКонвертации.ОбъектФормата = "Документ.ПоступлениеТоваровУслуг";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СписаниеТоваров";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Склад";
	НоваяСтрока.СвойствоФормата = "Склад";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Склады_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Основание";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПодразделениеОрганизации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ВозвратнаяТара", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ВозвратнаяТара;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("Товары", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.Товары;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументОприходования";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПТиУ_ПоступлениеТоваровУслуг";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Количество";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Коэффициент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номенклатура";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Номенклатура_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерГТД";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НомераГТДИзСтроки_Получение";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Себестоимость";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаПроисхождения";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СчетУчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Цена";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "Р");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение данных шапки
	ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	ДатаВходящегоДокумента = ?(ДанныеXDTO.Свойство("ДатаВходящегоДокумента"),ДанныеXDTO.ДатаВходящегоДокумента, Неопределено);
	НомерВходящегоДокумента = ?(ДанныеXDTO.Свойство("НомерВходящегоДокумента"),ДанныеXDTO.НомерВходящегоДокумента, Неопределено);
	Если ЗначениеЗаполнено(ДатаВходящегоДокумента) И ЗначениеЗаполнено(НомерВходящегоДокумента) Тогда
		ПолученныеДанные.Основание = НСтр("ru = 'Поступление товаров и услуг № '") 
			+ НомерВходящегоДокумента
			+ НСтр("ru = ' от '")
			+ Формат(ДатаВходящегоДокумента, "ДФ='дд ММММ гггг'");
	КонецЕсли;
	
	//Валюта
	ИмяПКОВалюты = "";	
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКОВалюты = "Справочник_Валюты";
		Иначе
			ИмяПКОВалюты = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
	КонецЕсли;
	ПКОВалюты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКОВалюты);
	Валюта = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, ДанныеXDTO.Валюта, ПКОВалюты,"ПолучитьСсылку").Ссылка;
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Валюта", Валюта);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	МассивСтрокТовары = Новый Массив;
	МассивСтрокВозвратнаяТара = Новый Массив;
	
	Если ДанныеXDTO.Свойство("Недостачи")
		И ЗначениеЗаполнено(ДанныеXDTO.Недостачи) Тогда
	
		// Товары
		Т_КС = Новый Соответствие;
		Т_КС.Вставить("Номенклатура", "Номенклатура");
		Т_КС.Вставить("Количество", "Количество");
		Т_КС.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
		
		Т_КС.Вставить("Цена", "Цена");
		Т_КС.Вставить("Себестоимость", "Сумма");
		Т_КС.Вставить("НомерГТД", "НомерГТД");
		Т_КС.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
		
		ВТ_КС = Новый Соответствие;
		ВТ_КС.Вставить("Номенклатура", "Номенклатура");
		ВТ_КС.Вставить("Количество", "Количество");
		
		СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
		КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
		Для Каждого СтрокаXDTO Из ДанныеXDTO.Недостачи Цикл
		
			Если СтрокаXDTO.ВариантОтражения.Значение <> "НаПрочиеРасходы" Тогда
				Продолжить;
			КонецЕсли;
			ТипЗапасов = "";
			Если ЗначениеЗаполнено(СтрокаXDTO.ТипЗапасов) Тогда
				ТипЗапасов = СтрокаXDTO.ТипЗапасов.Значение;
			КонецЕсли;
			СтруктураДанныхСтроки = Новый Структура;
			Если ТипЗапасов = "ВозвратнаяТара" Тогда // Заполнение ТЧ ВозвратнаяТара
				ЗаполнитьСтруктуруДанныхСтроки(ВТ_КС, СтрокаXDTO, СтруктураДанныхСтроки);
				МассивСтрокВозвратнаяТара.Добавить(СтруктураДанныхСтроки);
			Иначе // Заполнение ТЧ Товары
			
				ЗаполнитьСтруктуруДанныхСтроки(Т_КС, СтрокаXDTO, СтруктураДанныхСтроки);
				СтруктураДанныхСтроки.Вставить("Коэффициент",1); 
				СтруктураДанныхСтроки.Вставить("ДокументОприходования",ДанныеXDTO.КлючевыеСвойства); 
				// Счет учета заполняется сразу, если это комиссионный товар,
				// и автоматически после загрузки всех данных - в остальных случаях
				Если  ТипЗапасов = "КомиссионныеТовары" Тогда
					СтруктураДанныхСтроки.Вставить("СчетУчета",ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); 
				КонецЕсли;
				
				Если ДанныеXDTO.СуммаВключаетНДС Тогда
					СтруктураДанныхСтроки.Цена = ?(СтруктураДанныхСтроки.Количество = 0,
						0, Окр(СтруктураДанныхСтроки.Себестоимость / СтруктураДанныхСтроки.Количество, 2));
					СтруктураДанныхСтроки.Себестоимость = СтруктураДанныхСтроки.Себестоимость - ДанныеXDTO.СуммаНДС;
				КонецЕсли;
				МассивСтрокТовары.Добавить(СтруктураДанныхСтроки);
				
				ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента + СтруктураДанныхСтроки.Себестоимость;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокТовары.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Товары", МассивСтрокТовары);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	//Пересчет сумм по курсу валюты
	СтруктураКурсаВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ДополнительныеСвойства.Валюта, ПолученныеДанные.Дата);
	КоэффициентПересчета = ?(СтруктураКурсаВалюты.Курс = 0, 1, СтруктураКурсаВалюты.Курс)
			/ ?(СтруктураКурсаВалюты.Кратность = 0, 1, СтруктураКурсаВалюты.Кратность);
	Если КоэффициентПересчета <> 1 Тогда
		ПолученныеДанные.СуммаДокумента = ПолученныеДанные.СуммаДокумента * КоэффициентПересчета;
		
		Для Каждого СтрокаТовары ИЗ ПолученныеДанные.Товары Цикл
			СтрокаТовары.Себестоимость = СтрокаТовары.Себестоимость * КоэффициентПересчета;
			СтрокаТовары.Цена = СтрокаТовары.Цена * КоэффициентПересчета;
		КонецЦикла;
	КонецЕсли;		
	
	Если ДанныеИБ <> Неопределено Тогда
		// Переносим свойства, не указанные в ПКС
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "СуммаДокумента,Основание");
	КонецЕсли;
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область РеализацияПодарочныхСертификатов_ОплатаКартой
Процедура ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаКартой(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "РеализацияПодарочныхСертификатов_ОплатаКартой";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ОплатаПлатежнойКартой;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "Сумма";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорЭквайринга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Эквайер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);                     
	ПолученныеДанные.СчетКасса = ПланыСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	
	СуммаВсего = 0;
	Если ДанныеXDTO.Свойство("ОплатаПлатежнымиКартами") И ДанныеXDTO.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		
		ЕстьКолонкаЭквайрер = ДанныеXDTO.ОплатаПлатежнымиКартами.Колонки.Найти("Эквайрер") <> Неопределено;
		
		Для Каждого Строка ИЗ ДанныеXDTO.ОплатаПлатежнымиКартами Цикл
			СуммаВсего = СуммаВсего + Строка.СуммаОплаты;
			Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("Эквайрер") 
				И ЕстьКолонкаЭквайрер
				И ЗначениеЗаполнено(Строка.Эквайрер) Тогда
				
				ИмяПКО = "Справочник_Контрагенты_Получение";
				ПКОКонтрагент = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
				Контрагент = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, Строка.Эквайрер,
											ПКОКонтрагент, "ПолучитьСсылку").Ссылка;
				ПолученныеДанные.Эквайрер = Контрагент;
				ДоговорКонтрагента = ДоговорЭквайринга(ПолученныеДанные.Организация, Контрагент);
				ПолученныеДанные.ДоговорЭквайринга = ДоговорКонтрагента.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		СтрокаРасшифровки = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
		СтрокаРасшифровки.СуммаВзаиморасчетов = СуммаВсего;
		СтрокаРасшифровки.СуммаПлатежа = СуммаВсего;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	Для Каждого СтрокаРасшифровки ИЗ ПолученныеДанные.РасшифровкаПлатежа Цикл
	
		СтрокаРасшифровки.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
		СтрокаРасшифровки.КурсВзаиморасчетов = СтруктураКурса.Курс;
		СтрокаРасшифровки.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	
	КонецЦикла;
	
	
	ПолученныеДанные.ВидОплаты = ВидОплатыОрганизации(
		КомпонентыОбмена,
		ПолученныеДанные.Организация,
		Перечисления.ТипыОплат.ПлатежнаяКарта,
		ПолученныеДанные.Эквайер,
		ПолученныеДанные.ДоговорЭквайринга);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область РеализацияПодарочныхСертификатов_ОплатаНаличными
Процедура ДобавитьПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "РеализацияПодарочныхСертификатов_ОплатаНаличными";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Документы.ПриходныйКассовыйОрдер;
	ПравилоКонвертации.ОбъектФормата = "Документ.РеализацияПодарочныхСертификатов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Ответственный";
	НоваяСтрока.СвойствоФормата = "Ответственный";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Пользователи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаДокумента";
	НоваяСтрока.СвойствоФормата = "СуммаНаличными";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДокумента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидОперации";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Контрагент";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Проведен";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("РасшифровкаПлатежа", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.РасшифровкаПлатежа;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДоговорКонтрагента";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КратностьВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КурсВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаПлатежа";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Дата,Номер");
КонецПроцедуры

Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, "С");
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);                        
	
	ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	
	ПолученныеДанные.Контрагент = КонтрагентРозничныйПокупатель(КомпонентыОбмена);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные);
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
	
	СтрокаРасшифровка = ПолученныеДанные.РасшифровкаПлатежа.Добавить();
	СтрокаРасшифровка.СуммаПлатежа = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.СуммаВзаиморасчетов = ПолученныеДанные.СуммаДокумента;
	СтрокаРасшифровка.КурсВзаиморасчетов = СтруктураКурса.Курс;
	СтрокаРасшифровка.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	СтрокаРасшифровка.ДоговорКонтрагента = ДоговорОплатыСертификатомОтРозничногоПокупателя(ПолученныеДанные.Организация, ПолученныеДанные.Контрагент);
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//РасшифровкаПлатежа
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("СуммаПлатежа");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("СтатьяДвиженияДенежныхСредств");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.РасшифровкаПлатежа,
		ДанныеИБ.РасшифровкаПлатежа,
		МассивКлючевыхПолей,
		"Сделка, СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС");
	ДанныеИБ.РасшифровкаПлатежа.Загрузить(ПолученныеДанные.РасшифровкаПлатежа.Выгрузить());
	
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_БанковскиеСчета_Получение
Процедура ДобавитьПКО_Справочник_БанковскиеСчета_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_БанковскиеСчета_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.БанковскиеСчета;
	ПравилоКонвертации.ОбъектФормата = "Справочник.БанковскиеСчета";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Банк";
	НоваяСтрока.СвойствоФормата = "Банк";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "БанкДляРасчетов";
	НоваяСтрока.СвойствоФормата = "БанкДляРасчетов";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Банки";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаЗакрытия";
	НоваяСтрока.СвойствоФормата = "ДатаЗакрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаОткрытия";
	НоваяСтрока.СвойствоФормата = "ДатаОткрытия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МесяцПрописью";
	НоваяСтрока.СвойствоФормата = "ВыводитьМесяцПрописью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерИДатаРазрешения";
	НоваяСтрока.СвойствоФормата = "НомерИДатаРазрешения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НомерСчета";
	НоваяСтрока.СвойствоФормата = "НомерСчета";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СуммаБезКопеек";
	НоваяСтрока.СвойствоФормата = "ВыводитьСуммуБезКопеек";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстКорреспондента";
	НоваяСтрока.СвойствоФормата = "ТекстКорреспондента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекстНазначения";
	НоваяСтрока.СвойствоФормата = "ТекстНазначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаДенежныхСредств";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСчета";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("НомерСчета,Владелец");
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	// Владелец: выбираем ПКО в зависимости от типа владельца.
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("Владелец") Тогда
	
		Владелец = ДанныеXDTO.КлючевыеСвойства.Владелец;
		ИмяПКО = "Справочник_Контрагенты_Получение";
		Если Найти(Владелец.ТипЗначения, "ФизическоеЛицо") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		ИначеЕсли Найти(Владелец.ТипЗначения, "Организация") > 0 Тогда
			ИмяПКО = "Справочник_Организации_Получение";
		КонецЕсли;	
		ПолученныеДанные.ДополнительныеСвойства.Вставить(
			"Владелец", Новый Структура("Значение,ИмяПКО", Владелец, ИмяПКО));
		
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ВидСчета = "Расчетный";
	Если ДанныеXDTO.Свойство("ВидСчета")
		И ЗначениеЗаполнено(ДанныеXDTO.ВидСчета) Тогда
		ПолученныеДанные.ВидСчета = ДанныеXDTO.ВидСчета.Значение;
	КонецЕсли;
	Если ДанныеXDTO.Свойство("ВалютаДенежныхСредств")
		И ЗначениеЗаполнено(ДанныеXDTO.ВалютаДенежныхСредств) Тогда
		
		Если ДанныеXDTO.ВалютаДенежныхСредств.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаДенежныхСредств", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.ВалютаДенежныхСредств, ИмяПКО));
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
		
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ДатаОткрытия");
		ЗаполняемыеРеквизиты.Добавить("ДатаЗакрытия");
		ЗаполняемыеРеквизиты.Добавить("Наименование");
		ЗаполняемыеРеквизиты.Добавить("НомерИДатаРазрешения");
		ЗаполняемыеРеквизиты.Добавить("ТекстКорреспондента");
		ЗаполняемыеРеквизиты.Добавить("ТекстНазначения");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_Валюты_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУстановкиКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокОплаты";
	НоваяСтрока.СвойствоФормата = "СрокКонтроляОплатыВДнях";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦен";
	НоваяСтрока.СвойствоФормата = "ТипЦен";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчетАгентскогоНДС";
	НоваяСтрока.СвойствоФормата = "УчетАгентскогоНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИспользуетсяПриОбменеДанными";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДоговора,Владелец,Дата,Номер,Организация,ЭтоГруппа,ВалютаВзаиморасчетов");
	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,Наименование,Организация,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ИспользуетсяПриОбменеДанными = Истина;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		// Головная организация находится в ключевых свойствах, поэтому уже при конвертации данных она будет заполнена.
		ПолученныеДанные.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПолученныеДанные.Организация);
	КонецЕсли;
	
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("НДСПоСтавкам4и2") Тогда
		ПолученныеДанные.НДСПоСтавкам4и2 = ДанныеXDTO.НДСПоСтавкам4и2;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СрокКонтроляОплатыВДнях") Тогда
		ПолученныеДанные.УстановленСрокОплаты = ЗначениеЗаполнено(ПолученныеДанные.СрокОплаты);
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	Если ДанныеИБ = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Вставить(ПолученныеДанные.ПолучитьСсылкуНового(), Истина);
	Иначе
		Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			// Если в информационной базе найден договор с факторингом, то вид договора у него затирать не нужно.
			// Достаточно изменить ключевые свойства: номер, дата, наименование. Остальные данные не сохраняются.
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Номер,Дата,Наименование");
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДоговорыКонтрагентов_ИзСтруктуры
Процедура ДобавитьПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ДоговорыКонтрагентов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Договоры";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_ДоговорыКонтрагентов";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидДоговора";
	НоваяСтрока.СвойствоФормата = "ВидДоговора";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ВидыДоговоров";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Контрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Дата";
	НоваяСтрока.СвойствоФормата = "Дата";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Номер";
	НоваяСтрока.СвойствоФормата = "Номер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Организация";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РасчетыВУсловныхЕдиницах";
	НоваяСтрока.СвойствоФормата = "РасчетыВУсловныхЕдиницах";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СрокДействия";
	НоваяСтрока.СвойствоФормата = "СрокДействия";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УчетАгентскогоНДС";
	НоваяСтрока.СвойствоФормата = "УчетАгентскогоНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаВзаиморасчетов";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИспользуетсяПриОбменеДанными";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ВалютаВзаиморасчетов,ВидДоговора,Владелец,ИспользуетсяПриОбменеДанными,Организация,РасчетыВУсловныхЕдиницах");
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Организация) Тогда
		// Головная организация находится в ключевых свойствах, поэтому уже при конвертации данных она будет заполнена.
		ПолученныеДанные.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПолученныеДанные.Организация);
	КонецЕсли;
	
	ПолученныеДанные.Наименование = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	ПолученныеДанные.ИспользуетсяПриОбменеДанными = Истина;
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаВзаиморасчетов")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаВзаиморасчетов, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ = Неопределено Тогда
		КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Вставить(ПолученныеДанные.ПолучитьСсылкуНового(), Истина);
	Иначе
		Если ДанныеИБ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией Тогда
			// Если в информационной базе найден договор с факторингом, то вид договора у него затирать не нужно.
			// Достаточно изменить ключевые свойства: номер, дата, наименование. Остальные данные не сохраняются.
			ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные, "Номер,Дата,Наименование");
			ПолученныеДанные = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДокументыФизическихЛиц_Получение
Процедура ДобавитьПКО_Справочник_ДокументыФизическихЛиц_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДокументыФизическихЛиц_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.РегистрыСведений.ДокументыФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДокументыФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВидДокументаОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ВидыДокументовФизическихЛиц";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ПериодОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ФизическоеЛицоОтбор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛица_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("ВидДокумента,Физлицо");
КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидДокументаОтбор", ДанныеXDTO.ВидДокументаОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ПериодОтбор", ДанныеXDTO.ПериодОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("ФизическоеЛицоОтбор", ДанныеXDTO.ФизическоеЛицоОтбор);
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", Неопределено);
	
	Если ДанныеXDTO.Свойство("Записи")
		И ЗначениеЗаполнено(ДанныеXDTO.Записи) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Записи", ДанныеXDTO.Записи);
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПКО_ФизЛица = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ФизическиеЛица_Получение");
	ПКО_ВидовДокументов = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ВидыДокументовФизическихЛиц");
	
	ФизЛицоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ФизическоеЛицоОтбор, 
				ПКО_ФизЛица, 
				"ПолучитьСсылку").Ссылка;
				
	ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				ПолученныеДанные.ДополнительныеСвойства.ВидДокументаОтбор, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
		
	ПолученныеДанные.Отбор.Физлицо.Значение = ФизЛицоСсылка;
	ПолученныеДанные.Отбор.Физлицо.Использование = Истина;
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		ПолученныеДанные.Отбор.ВидДокумента.Значение = ВидДокумента;
		ПолученныеДанные.Отбор.ВидДокумента.Использование = Истина;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор) Тогда
		ПолученныеДанные.Отбор.Период.Значение = ПолученныеДанные.ДополнительныеСвойства.ПериодОтбор;
		ПолученныеДанные.Отбор.Период.Использование = Истина;		
	КонецЕсли;
	
	// Добавление записей в набор записей.		
	Если ПолученныеДанные.ДополнительныеСвойства.Записи <> Неопределено Тогда
		Для Каждого Строка Из ПолученныеДанные.ДополнительныеСвойства.Записи Цикл
			СтрокаЗаписи = ПолученныеДанные.Добавить();
			СтрокаЗаписи.Физлицо = ФизЛицоСсылка;
			СтрокаЗаписи.ВидДокумента = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
				Строка.ВидДокумента, 
				ПКО_ВидовДокументов, 
				"ПолучитьСсылку").Ссылка;
			СтрокаЗаписи.Период        = Строка.Период;
			СтрокаЗаписи.Серия         = Строка.Серия;
			СтрокаЗаписи.Номер         = Строка.Номер;
			СтрокаЗаписи.Представление = Строка.Представление;
			СтрокаЗаписи.ДатаВыдачи    = Строка.ДатаВыдачи;
			СтрокаЗаписи.СрокДействия  = Строка.СрокДействия;
			СтрокаЗаписи.КемВыдан      = Строка.КемВыдан;
			СтрокаЗаписи.КодПодразделения = Строка.КодПодразделения;
			Если СтрокаЗаписи.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
				СтрокаЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительнаяИнформация";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НалоговыйНомер";
	НоваяСтрока.СвойствоФормата = "НалоговыйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.СвойствоФормата = "ОбособленноеПодразделение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РегистрационныйНомер";
	НоваяСтрока.СвойствоФормата = "РегистрационныйНомерНерезидента";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтранаРегистрации";
	НоваяСтрока.СвойствоФормата = "СтранаРегистрации";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СтраныМира";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ОсновнойДоговор";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДоговорыКонтрагентов";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ = Неопределено
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.СтранаРегистрации) Тогда
		ПолученныеДанные.СтранаРегистрации = Справочники.СтраныМира.Россия;
	КонецЕсли;
	
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
	// не удаляются, если этих значений нет в полученных данных.
	// Если значение есть - то оно обновляется.
	
	ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Номенклатура";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВидСтавкиНДС";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Импортер";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Производитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Услуга";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеXDTO.Свойство("СтавкаНДС")
		И ЗначениеЗаполнено(ДанныеXDTO.СтавкаНДС) Тогда
		ПКПД_СтавкиНДС = КомпонентыОбмена.ПравилаКонвертацииПредопределенныхДанных.Найти("Перечисление_СтавкиНДС", "ИмяПКПД");
		СтавкаНДС = ПКПД_СтавкиНДС.КонвертацииЗначенийПриПолучении.Получить(ДанныеXDTO.СтавкаНДС.Значение);
		ПолученныеДанные.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДС);
	КонецЕсли;
	
	// Сведения об алкогольной продукции
	
	Если ДанныеXDTO.Свойство("АлкогольнаяПродукция") И ДанныеXDTO.АлкогольнаяПродукция Тогда
		Если ДанныеXDTO.Свойство("ВидАлкогольнойПродукции") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ВидАлкогольнойПродукции", ДанныеXDTO.ВидАлкогольнойПродукции);
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ОбъемДАЛ") Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ОбъемДАЛ", ДанныеXDTO.ОбъемДАЛ);
		КонецЕсли;
		
		Если ДанныеXDTO.Свойство("ПроизводительИмпортер") Тогда
			Если ДанныеXDTO.Свойство("ИмпортнаяАлкогольнаяПродукция") И ДанныеXDTO.ИмпортнаяАлкогольнаяПродукция Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Импортер", ДанныеXDTO.ПроизводительИмпортер);
			Иначе
				ПолученныеДанные.ДополнительныеСвойства.Вставить("Производитель", ДанныеXDTO.ПроизводительИмпортер);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ТипНоменклатуры
	ТипНоменклатуры = ДанныеXDTO.ТипНоменклатуры.Значение;
	Если ТипНоменклатуры = "Услуга" Или ТипНоменклатуры = "Работа" Тогда
		ПолученныеДанные.Услуга = Истина;
	КонецЕсли;
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	#Область ДанныеАлкогольнойПродукции
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ВидАлкогольнойПродукции") Тогда
		ПолученныеДанные_ВидАлкогольнойПродукции = ПолученныеДанные.ДополнительныеСвойства.ВидАлкогольнойПродукции;
		
		ВидАлкогольнойПродукции_Код = "";
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("Код") Тогда
			ВидАлкогольнойПродукции_Код = ПолученныеДанные_ВидАлкогольнойПродукции.Код;
		КонецЕсли;
		
		ВидЛицензии = Неопределено;
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("ВидЛицензии") Тогда
			ВидЛицензии = Перечисления.ВидыЛицензийНаПродажуАлкоголя[СокрЛП(ПолученныеДанные_ВидАлкогольнойПродукции.ВидЛицензии.Значение)];
		КонецЕсли;
		
		ВидАлкогольнойПродукции_Наименование = "";
		Если ПолученныеДанные_ВидАлкогольнойПродукции.Свойство("Наименование") Тогда
			ВидАлкогольнойПродукции_Наименование = ПолученныеДанные_ВидАлкогольнойПродукции.Наименование;
		Иначе
			ВидАлкогольнойПродукции_Наименование = ВидЛицензии;
		КонецЕсли;
		
		// Проверка записей регистра сведений
		СоздаватьЗаписьСведенийАК = Истина;
		Если ДанныеИБ <> Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	Номенклатура
			|ИЗ РегистрСведений.СведенияОбАлкогольнойПродукции
			|ГДЕ Номенклатура = &Номенклатура
			|	И (НаименованиеВида129 = &Наименование ИЛИ НаименованиеВида169 = &Наименование)";
			
			Запрос.УстановитьПараметр("Наименование", ВидАлкогольнойПродукции_Наименование);
			Запрос.УстановитьПараметр("Номенклатура", ДанныеИБ.Ссылка);
			Если ЗначениеЗаполнено(ВидАлкогольнойПродукции_Код) Тогда
				Запрос.Текст = Запрос.Текст + " И (КодВида129 = &Код ИЛИ КодВида169 = &Код)";
				Запрос.УстановитьПараметр("Код", ВидАлкогольнойПродукции_Код);
			КонецЕсли;
			
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОбъемДАЛ")
				И ЗначениеЗаполнено(ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ) Тогда
				Запрос.Текст = Запрос.Текст +
				"
				| И (КоэффПересчетаДал = &КоэффПересчетаДал)";
				Запрос.УстановитьПараметр("КоэффПересчетаДал", ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ);
			КонецЕсли;
	
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СоздаватьЗаписьСведенийАК = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СоздаватьЗаписьСведенийАК Тогда
			Если ДанныеИБ = Неопределено Тогда
				НоменклатураСсылка = ПолученныеДанные.ПолучитьСсылкуНового();
			Иначе
				НоменклатураСсылка = ДанныеИБ.Ссылка;
			КонецЕсли;
			СведенияАлк = РегистрыСведений.СведенияОбАлкогольнойПродукции.СоздатьНаборЗаписей();
			СведенияАлк.Отбор.Номенклатура.Установить(НоменклатураСсылка);
			ЗаписьАлк = СведенияАлк.Добавить();
			ЗаписьАлк.Номенклатура = НоменклатураСсылка;
			ЗаписьАлк.НаименованиеВида129 = ВидАлкогольнойПродукции_Наименование;
			ЗаписьАлк.НаименованиеВида169 = ВидАлкогольнойПродукции_Наименование;
			ЗаписьАлк.КодВида129 = ВидАлкогольнойПродукции_Код;
			ЗаписьАлк.КодВида169 = ВидАлкогольнойПродукции_Код;
			ЗаписьАлк.ВидЛицензии = ВидЛицензии;	
			Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ОбъемДАЛ") Тогда
				ЗаписьАлк.КоэффПересчетаДал = ПолученныеДанные.ДополнительныеСвойства.ОбъемДАЛ;
			КонецЕсли;
			СведенияАлк.Записать();
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	Если ДанныеИБ <> Неопределено Тогда
	
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ОсновнаяСпецификацияНоменклатуры");
		ЗаполняемыеРеквизиты.Добавить("СтранаПроисхождения");
		ЗаполняемыеРеквизиты.Добавить("НоменклатурнаяГруппа");
		ЗаполняемыеРеквизиты.Добавить("ВидНоменклатуры");
		ЗаполняемыеРеквизиты.Добавить("ВидСтавкиНДС");
		ЗаполняемыеРеквизиты.Добавить("Импортер");
		ЗаполняемыеРеквизиты.Добавить("Производитель");
		ЗаполняемыеРеквизиты.Добавить("Комментарий");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
	КонецЕсли;
	
	ДанныеДляЗаписиВИБ = ?(ДанныеИБ = Неопределено, ПолученныеДанные, ДанныеИБ);
	
	Если ДанныеИБ <> Неопределено Тогда
		ПризнакУслугиВСсылкеОбъекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеИБ.Ссылка, "Услуга");
		Если ПризнакУслугиВСсылкеОбъекта <> ПолученныеДанные.Услуга Тогда
			ДанныеИБ.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение номенклатурной группы по умолчанию.
	Если  Не ЗначениеЗаполнено(ДанныеДляЗаписиВИБ.НоменклатурнаяГруппа) Тогда
		ДанныеДляЗаписиВИБ.НоменклатурнаяГруппа = КомпонентыОбмена.ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_НоменклатураГруппа";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа_Получение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НомераГТДИзСтроки_Получение
Процедура ДобавитьПКО_Справочник_НомераГТДИзСтроки_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НомераГТДИзСтроки_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.НомераГТД;
	ПравилоКонвертации.ОбъектФормата = "";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	НомерГТД = "";
	Если ДанныеXDTO.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.Код;
	ИначеЕсли ДанныеXDTO.КлючевыеСвойства.Свойство("Код") Тогда
		НомерГТД = ДанныеXDTO.КлючевыеСвойства.Код;
	КонецЕсли;
	ПолученныеДанные.Код = НомерГТД;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Организации_Получение
Процедура ДобавитьПКО_Справочник_Организации_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Организации_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Организации";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКПО";
	НоваяСтрока.СвойствоФормата = "ОКПО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСокращенное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОГРН";
	НоваяСтрока.СвойствоФормата = "ОГРН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОсновнойБанковскийСчет";
	НоваяСтрока.СвойствоФормата = "ОсновнойБанковскийСчет";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_БанковскиеСчета_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоДатаВыдачи";
	НоваяСтрока.СвойствоФормата = "СвидетельствоДатаВыдачи";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СвидетельствоСерияНомер";
	НоваяСтрока.СвойствоФормата = "СвидетельствоСерияНомер";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	Если ДанныеXDTO.Свойство("ОКАТО") И ЗначениеЗаполнено(ДанныеXDTO.ОКАТО) Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ОКАТО", ДанныеXDTO.ОКАТО);
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
КонецПроцедуры

Процедура ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если Не ЗначениеЗаполнено(ПолученныеДанные.ГоловнаяОрганизация) Тогда
		ПолученныеДанные.ГоловнаяОрганизация = ПолученныеДанные.Ссылка;
	КонецЕсли;
	// Заполнение регистрации в налоговом органе.
	Если ЗначениеЗаполнено(ПолученныеДанные.КПП) И ПолученныеДанные.ДополнительныеСвойства.Свойство("ОКАТО") Тогда
		ЗаполнятьРегистрациюВНалОргане = Истина;
		// Возможно, регистрация в Нал органе уже заполнена
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.РегистрацияВНалоговомОргане) Тогда
			ДанныеРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеИБ.РегистрацияВНалоговомОргане, "КодПоОКАТО,КПП");
			Если ДанныеРегистрации.КПП = ПолученныеДанные.КПП
				И ДанныеРегистрации.КодПоОКАТО = ПолученныеДанные.ДополнительныеСвойства.ОКАТО Тогда
				ЗаполнятьРегистрациюВНалОргане = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнятьРегистрациюВНалОргане Тогда
			Если ДанныеИБ = Неопределено Тогда
				РегистрацияВНалОргане = НайтиСоздатьРегистрациюВНалоговомОргане(ПолученныеДанные.КПП, 
																ПолученныеДанные.ДополнительныеСвойства.ОКАТО,
																ПолученныеДанные.ПолучитьСсылкуНового(),
																Ложь);
				Если ЗначениеЗаполнено(РегистрацияВНалОргане) Тогда
					ПолученныеДанные.РегистрацияВНалоговомОргане = РегистрацияВНалОргане;
				КонецЕсли;
			Иначе
				РегистрацияВНалОргане = НайтиСоздатьРегистрациюВНалоговомОргане(ПолученныеДанные.КПП, 
														ПолученныеДанные.ДополнительныеСвойства.ОКАТО,
														ДанныеИБ.Ссылка,
														Истина);
				Если ЗначениеЗаполнено(РегистрацияВНалОргане) Тогда
					ДанныеИБ.РегистрацияВНалоговомОргане = РегистрацияВНалОргане;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	
	Если ДанныеИБ <> Неопределено Тогда
	
		ЗаполняемыеРеквизиты = Новый Массив;
		ЗаполняемыеРеквизиты.Добавить("ИндивидуальныйПредприниматель");
		ЗаполняемыеРеквизиты.Добавить("ФамилияИП");
		ЗаполняемыеРеквизиты.Добавить("ИмяИП");
		ЗаполняемыеРеквизиты.Добавить("ОтчествоИП");
		ЗаполняемыеРеквизиты.Добавить("ОсновнойБанковскийСчет");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеСокращенное");
		ЗаполняемыеРеквизиты.Добавить("НаименованиеПолное");
		ЗаполняемыеРеквизиты.Добавить("ОГРН");
		ЗаполняемыеРеквизиты.Добавить("Префикс");
		ЗаполняемыеРеквизиты.Добавить("СвидетельствоДатаВыдачи");
		ЗаполняемыеРеквизиты.Добавить("СвидетельствоСерияНомер");
		
		ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ЗаполняемыеРеквизиты);
	
		// Виды контактной информации и дополнительные реквизиты, которые есть в данных ИБ
		// не удаляются, если этих значений нет в полученных данных.
		// Если значение есть - то оно обновляется.
	
		ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		
		ПолученныеДанные.КонтактнаяИнформация.Загрузить(ДанныеИБ.КонтактнаяИнформация.Выгрузить());
		
		ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
		
		ПолученныеДанные.ДополнительныеРеквизиты.Загрузить(ДанныеИБ.ДополнительныеРеквизиты.Выгрузить());
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Подразделения_Получение
Процедура ДобавитьПКО_Справочник_Подразделения_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Подразделения_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПодразделенияОрганизаций;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Подразделения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Организации_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "ВышестоящееПодразделение";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Подразделения_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "РегистрацияПодразделенияВНалоговомОргане";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнаяОрганизация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОбособленноеПодразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Родитель,Наименование");
	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	КлючевыеСвойства = ДанныеXDTO.КлючевыеСвойства;
	
	Если КлючевыеСвойства.Свойство("РегистрацияПодразделенияВНалоговомОргане") Тогда
	
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("КПП") Тогда
			ПолученныеДанные.КПП = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.КПП;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("НаименованиеОбособленногоПодразделения") Тогда
			ПолученныеДанные.НаименованиеПолное = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.НаименованиеОбособленногоПодразделения;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("НаименованиеОбособленногоПодразделения") Тогда
			ПолученныеДанные.НаименованиеПолное = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.НаименованиеОбособленногоПодразделения;
		КонецЕсли;
		Если КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.Свойство("ЦифровойИндексОбособленногоПодразделения") Тогда
			ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения = КлючевыеСвойства.РегистрацияПодразделенияВНалоговомОргане.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
	
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
		
	Если ЗначениеЗаполнено(ПолученныеДанные.Владелец) Тогда
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПолученныеДанные.Владелец, "КПП, ГоловнаяОрганизация");
		Если ЗначениеЗаполнено(ПолученныеДанные.КПП)
			И ПолученныеДанные.КПП <> РеквизитыОрганизации.КПП Тогда
			ПолученныеДанные.ОбособленноеПодразделение = Истина;
		КонецЕсли;
		ПолученныеДанные.ГоловнаяОрганизация = РеквизитыОрганизации.ГоловнаяОрганизация;
	КонецЕсли;
	
	// Заполняем сведения о подразделении, если они заполнены в полученных данных.
	// Если в полученных данных эти сведения не указаны, оставляем текущие значения.
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения) Тогда
			ДанныеИБ.ЦифровойИндексОбособленногоПодразделения = ПолученныеДанные.ЦифровойИндексОбособленногоПодразделения;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные.НаименованиеПолное) Тогда
			ДанныеИБ.НаименованиеПолное = ПолученныеДанные.НаименованиеПолное;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные.КПП) Тогда
			ДанныеИБ.КПП = ПолученныеДанные.КПП;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Склады_Получение
Процедура ДобавитьПКО_Справочник_Склады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Склады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_Склады";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ТипыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипЦенРозничнойТорговли";
	НоваяСтрока.СвойствоФормата = "ТипЦенРозничнойТорговли";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ТипыЦен";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ТипСклада,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.ТипСклада)Тогда
		ПолученныеДанные.ТипСклада = ДанныеИБ.ТипСклада;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СпецификацииНоменклатуры_Получение
Процедура ДобавитьПКО_Справочник_СпецификацииНоменклатуры_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СпецификацииНоменклатуры_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СпецификацииНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Владелец,Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы
Процедура ДобавитьПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиРасходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ПослеЗагрузкиВсехДанных = "ОтложеннаяОбработка_СтатьиРасходов";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, НСтр("ru='Р'"));
	
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛица_Получение
Процедура ДобавитьПКО_Справочник_ФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРегистрации";
	НоваяСтрока.СвойствоФормата = "ДатаРегистрации";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МестоРождения";
	НоваяСтрока.СвойствоФормата = "МестоРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеСлужебное";
	НоваяСтрока.СвойствоФормата = "НаименованиеСлужебное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтраховойНомерПФР";
	НоваяСтрока.СвойствоФормата = "СтраховойНомерПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УточнениеНаименования";
	НоваяСтрока.СвойствоФормата = "УточнениеНаименования";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представление";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ДатаРождения,ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("ФИО,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
	
	ПолученныеДанные.Наименование = ДанныеXDTO.КлючевыеСвойства.ФИО;
	ПолученныеДанные.ФИО          = ДанныеXDTO.КлючевыеСвойства.ФИО;
	
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("2.0") Тогда
		
		Если ДанныеXDTO.Свойство("ДанныеФИО") И ДанныеXDTO.ДанныеФИО.Количество() > 0 Тогда
			ПолученныеДанные.ДополнительныеСвойства.Вставить("ДанныеФИО", ДанныеXDTO.ДанныеФИО);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ФизЛицоСсылка = ?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка);
	
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Наименование = ПолученныеДанные.Наименование;
		ДанныеИБ.ФИО          = ПолученныеДанные.ФИО;
		// Перезаписываем СтраховойНомерПФР только в том случае, если он заполнен в полученных данных
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтраховойНомерПФР) Тогда
			ПолученныеДанные.СтраховойНомерПФР = ДанныеИБ.СтраховойНомерПФР;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(ФизЛицоСсылка, ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка);
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_Банки
Процедура ДобавитьПКО_Справочник_Банки(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Банки";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Банки;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Банки";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Адрес";
	НоваяСтрока.СвойствоФормата = "Адрес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Город";
	НоваяСтрока.СвойствоФормата = "Город";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "БИК";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КоррСчет";
	НоваяСтрока.СвойствоФормата = "КоррСчет";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Телефоны";
	НоваяСтрока.СвойствоФормата = "Телефоны";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПолученныеДанные.Страна = Справочники.СтраныМира.Россия;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Валюты
Процедура ДобавитьПКО_Справочник_Валюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Валюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописи";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СпособУстановкиКурса";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолученныеДанные.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
КонецПроцедуры

Процедура ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено
		И ЗначениеЗаполнено(ДанныеИБ.СпособУстановкиКурса) Тогда
		ПолученныеДанные.СпособУстановкиКурса = ДанныеИБ.СпособУстановкиКурса;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ВидыДокументовФизическихЛиц
Процедура ДобавитьПКО_Справочник_ВидыДокументовФизическихЛиц(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ВидыДокументовФизическихЛиц;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ВидыДокументовФизическихЛиц";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодМВД";
	НоваяСтрока.СвойствоФормата = "КодМВД";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПФР";
	НоваяСтрока.СвойствоФормата = "КодПФР";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Должности
Процедура ДобавитьПКО_Справочник_Должности(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Должности";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Должности;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Должности";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией";
	НоваяСтрока.СвойствоФормата = "ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеКраткое";
	НоваяСтрока.СвойствоФормата = "НаименованиеКраткое";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РеквизитДопУпорядочивания";
	НоваяСтрока.СвойствоФормата = "РеквизитДопУпорядочивания";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЯвляетсяДолжностьюЛетногоЭкипажа";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяДолжностьюЛетногоЭкипажа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЯвляетсяФармацевтическойДолжностью";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяФармацевтическойДолжностью";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЯвляетсяШахтерскойДолжностью";
	НоваяСтрока.СвойствоФормата = "ЯвляетсяШахтерскойДолжностью";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецДополнительныхЗначений";
	НоваяСтрока.СвойствоФормата = "ВладелецДополнительныхЗначений";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияИспользуются";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияИспользуются";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияСВесом";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияСВесом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Заголовок";
	НоваяСтрока.СвойствоФормата = "Заголовок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыВыбораЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыВыбораЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаполнятьОбязательно";
	НоваяСтрока.СвойствоФормата = "ЗаполнятьОбязательно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МногострочноеПолеВвода";
	НоваяСтрока.СвойствоФормата = "МногострочноеПолеВвода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подсказка";
	НоваяСтрока.СвойствоФормата = "Подсказка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФорматСвойства";
	НоваяСтрока.СвойствоФормата = "ФорматСвойства";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДополнительноеСведение";
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.Заголовок) Тогда
		ПолученныеДанные.Заголовок = ПолученныеДанные.Наименование;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.КлассификаторЕдиницИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры

Процедура ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если НЕ ЗначениеЗаполнено(ДанныеИБ.Код) Тогда
	
		Код = Лев(ДанныеИБ.Наименование, 4);
		Если СтекВыгрузки.Количество() = 1 Тогда
			ДанныеXDTO.КлючевыеСвойства.Вставить("Код", Код);
		Иначе
			ДанныеXDTO.Вставить("Код", Код);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЗначенияДополнительныхРеквизитов
Процедура ДобавитьПКО_Справочник_ЗначенияДополнительныхРеквизитов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЗначенияСвойствОбъектов;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЗначенияДополнительныхРеквизитов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вес";
	НоваяСтрока.СвойствоФормата = "Вес";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Владелец";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,Владелец");
КонецПроцедуры
#КонецОбласти
#Область Справочник_КонтрагентыГруппа
Процедура ДобавитьПКО_Справочник_КонтрагентыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_КонтрагентыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.КонтрагентыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_КонтрагентыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи
Процедура ДобавитьПКО_Справочник_Пользователи(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_Пользователи_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.СвойствоФормата = "ЗначениеСвойства";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.СвойствоФормата = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
	                            
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заменяем свойства, которые получили из XDTO.
	ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Дополнительные реквизиты, которые есть в данных ИБ
	// не удаляются, если этих значений нет в полученных данных.
	
	ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ);
	
	ПолученныеДанные = Неопределено;
КонецПроцедуры
#КонецОбласти
#Область Справочник_РегистрацииВНалоговомОргане
Процедура ДобавитьПКО_Справочник_РегистрацииВНалоговомОргане(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.РегистрацииВНалоговомОргане;
	ПравилоКонвертации.ОбъектФормата = "Справочник.РегистрацииВНалоговомОргане";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДокументПредставителя";
	НоваяСтрока.СвойствоФормата = "ДокументПредставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодНалоговогоОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодПоОКАТО";
	НоваяСтрока.СвойствоФормата = "ОКАТО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "КраткоеНаименованиеНалоговогоОргана";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеИФНС";
	НоваяСтрока.СвойствоФормата = "НаименованиеИФНС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеОбособленногоПодразделения";
	НоваяСтрока.СвойствоФормата = "НаименованиеОбособленногоПодразделения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "УполномоченноеЛицоПредставителя";
	НоваяСтрока.СвойствоФормата = "УполномоченноеЛицоПредставителя";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Владелец";
	НоваяСтрока.СвойствоФормата = "Организация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Представитель";
	НоваяСтрока.СвойствоФормата = "Представитель";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("КодПоОКАТО,КПП,НаименованиеОбособленногоПодразделения");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеОбособленногоПодразделения");
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если СтекВыгрузки.Количество() = 1 Тогда
		ДанныеXDTO.Вставить("Организация", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Владелец, "Справочник_Организации_Отправка"));
		
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		Если ТипЗнч(ДанныеИБ.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		КонецЕсли;
		ДанныеXDTO.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеИБ.Представитель, ИмяПКО));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO) Тогда
		Возврат;
	КонецЕсли;
	
	ПолученныеДанные.ДополнительныеСвойства.Вставить("Владелец", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Организация, "Справочник_Организации_Получение"));
	
	ИмяПКО = "Справочник_Контрагенты_Получение";
	Если ЗначениеЗаполнено(ДанныеXDTO.Представитель) Тогда
		Если Найти(ДанныеXDTO.Представитель.ТипЗначения, "ФизическиеЛица") > 0 Тогда
			ИмяПКО = "Справочник_ФизическиеЛица_Получение";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Представитель", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Представитель, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_СкладыГруппа
Процедура ДобавитьПКО_Справочник_СкладыГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СкладыГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_СкладыГруппа";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДДС
Процедура ДобавитьПКО_Справочник_СтатьиДДС(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДДС";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДДС";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтатьиДоходов
Процедура ДобавитьПКО_Справочник_СтатьиДоходов(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтатьиДоходов";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ПрочиеДоходыИРасходы;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтатьиДоходов";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,ЭтоГруппа");
	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, НСтр("ru='Д'"));
КонецПроцедуры

Процедура ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств);
КонецПроцедуры
#КонецОбласти
#Область Справочник_СтраныМира
Процедура ДобавитьПКО_Справочник_СтраныМира(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_СтраныМира";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.СтраныМира;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СтраныМира";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа2";
	НоваяСтрока.СвойствоФормата = "КодАльфа2";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КодАльфа3";
	НоваяСтрока.СвойствоФормата = "КодАльфа3";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код,Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ТипыЦен
Процедура ДобавитьПКО_Справочник_ТипыЦен(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ТипыЦен";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ТипыЦенНоменклатуры;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ТипыЦен";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных";
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ОкруглятьВБольшуюСторону";
	НоваяСтрока.СвойствоФормата = "ОкруглятьВБольшуюСторону";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЦенаВключаетНДС";
	НоваяСтрока.СвойствоФормата = "ЦенаВключаетНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВалютаЦены";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	Если ЗначениеЗаполнено(ДанныеИБ.ВалютаЦены) Тогда
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеИБ.ВалютаЦены, "Справочник_Валюты"));
	Иначе
		ДанныеXDTO.КлючевыеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", Константы.ВалютаРегламентированногоУчета.Получить(), "Справочник_Валюты"));
	КонецЕсли;
КонецПроцедуры

Процедура ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("ВалютаЦены")
		И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.ВалютаЦены) Тогда
		
		Если ДанныеXDTO.КлючевыеСвойства.ВалютаЦены.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ВалютаЦены", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.КлючевыеСвойства.ВалютаЦены, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_ФизическиеЛицаГруппа_Отправка
Процедура ДобавитьПКО_Справочник_ФизическиеЛицаГруппа_Отправка(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ФизическиеЛицаГруппа_Отправка";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование,ЭтоГруппа");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
// Заполняет таблицу правил конвертации предопределенных данных.
//
// Параметры:
//  НаправлениеОбмена - строка ("Отправка" либо "Получение").
//  ПравилаКонвертации - таблица значений, в которую будут добавлены правила. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		// ВидыКИ_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыКИ_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Справочники.ВидыКонтактнойИнформации;
		ПравилоКонвертации.ТипXDTO = "ВидыКИ";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизаций, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица, "АдресЭлектроннойПочты");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации, "ПочтовыйАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "ТелефонДомашний");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации, "Телефон");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, "ТелефонРабочий");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизаций, "Факс");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций, "ФактическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "ЮридическийАдрес");
		ЗначенияДляОтправки.Вставить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации, "ЮридическийАдрес");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// ВидыЭД_Реализация_Отправка.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭД_Реализация_Отправка";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
		ПравилоКонвертации.ТипXDTO = "ВидыЭД";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.АктНаПередачуПрав, "АктНаПередачуПрав");
		ЗначенияДляОтправки.Вставить(Перечисления.ВидыЭД.ТОРГ12Продавец, "ТОРГ12");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	
		// Перечисление_ПорядокПогашенияСтоимостиОС.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ПорядокПогашенияСтоимостиОС";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядокПогашенияСтоимостиОС;
		ПравилоКонвертации.ТипXDTO = "ПорядокПогашенияСтоимостиОС";
	
		ЗначенияДляОтправки = Новый Соответствие;
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации, "НачислениеАмортизации");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса, "НачислениеИзноса");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ, "НачислениеИзносаПоЕНАОФ");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету, "СписаниеПриПринятииКУчету");
		ЗначенияДляОтправки.Вставить(Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается, "СтоимостьНеПогашается");
		ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	КонецЕсли;
	Если НаправлениеОбмена = "Получение" Тогда
		// ВидыОпераций_ВозвратОтПокупателя.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ВозвратОтПокупателя";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровОтПокупателя;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратОтПокупателя";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратОтКлиента", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия);
		ЗначенияДляПолучения.Вставить("ВозвратОтКомиссионера", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия);
		ЗначенияДляПолучения.Вставить("ВозвратОтРозничногоПокупателя", Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_ВозвратПоставщику.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_ВозвратПоставщику";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийВозвратТоваровПоставщику;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийВозвратПоставщику";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратКомитенту", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ВозвратПоставщику", Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_КорректировкаДолга_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_КорректировкаДолга_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКорректировкаДолга;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийКорректировкаДолга";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ПроведениеВзаимозачета", Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности);
		ЗначенияДляПолучения.Вставить("ПереносЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности);
		ЗначенияДляПолучения.Вставить("СписаниеЗадолженности", Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОпераций_РТиУ.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОпераций_РТиУ";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРеализацияТоваров;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийРеализацияТоваровУслуг";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_ВПути", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ОтгрузкаБезПереходаПравСобственности_Реализовано", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		ЗначенияДляПолучения.Вставить("ПередачаНаКомиссию", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ЗначенияДляПолучения.Вставить("РеализацияКлиенту", Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийПоступленияТоваров.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПоступленияТоваров";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПоступлениеТоваровУслуг;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоступленияТоваров";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ЗакупкаПоИмпорту", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ПокупкаУПоставщика", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ЗначенияДляПолучения.Вставить("ПриемНаКомиссию", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыОперацийСБДСПрочее_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСПрочее_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийСБДСПрочее";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВнутренняяПередача", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
		ЗначенияДляПолучения.Вставить("ПрочееСписание", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// ВидыЭД_Реализация_Получение.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "ВидыЭД_Реализация_Получение";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыЭД;
		ПравилоКонвертации.ТипXDTO = "ВидыЭД";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("АктНаПередачуПрав", Перечисления.ВидыЭД.АктНаПередачуПрав);
		ЗначенияДляПолучения.Вставить("ТОРГ12", Перечисления.ВидыЭД.ТОРГ12Продавец);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	
		// Перечисление_ВидыОперацийОплатаПлатежнойКартой.
		ПравилоКонвертации = ПравилаКонвертации.Добавить();
		ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийОплатаПлатежнойКартой";
		ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийОплатаПлатежнойКартой;
		ПравилоКонвертации.ТипXDTO = "ВидыОперацийПоПлатежнойКарте";
	
		ЗначенияДляПолучения = Новый Соответствие;
		ЗначенияДляПолучения.Вставить("ВозвратОплатыКлиентуНаПлатежнуюКарту", Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
		ЗначенияДляПолучения.Вставить("ОплатаОтКлиентаПлатежнойКартой", Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
		ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;
	КонецЕсли;

	// ВидыДоговоров.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыДоговоров";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыДоговоровКонтрагентов;
	ПравилоКонвертации.ТипXDTO = "ВидыДоговоров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером, "СКомиссионером");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку, "СКомиссионеромНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом, "СКомитентом");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку, "СКомитентомНаЗакупку");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, "СПоставщиком");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	ЗначенияДляПолучения.Вставить("СКомиссионером", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ЗначенияДляПолучения.Вставить("СКомиссионеромНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	ЗначенияДляПолучения.Вставить("СКомитентом", Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЗначенияДляПолучения.Вставить("СКомитентомНаЗакупку", Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОбъектовУчетаНМА.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОбъектовУчетаНМА";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОбъектовУчетаНМА;
	ПравилоКонвертации.ТипXDTO = "ВидыОбъектовУчетаНМА";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив, "НематериальныйАктив");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР, "РасходыНаНИОКР");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НематериальныйАктив", Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив);
	ЗначенияДляПолучения.Вставить("РасходыНаНИОКР", Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийИсправленияПоступленияРеализации.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийИсправленияПоступленияРеализации";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийИсправленияПоступленияРеализации;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийИсправленияПоступленияРеализации";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, "ИсправлениеОшибки");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение, "СогласованноеИзменение");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ИсправлениеОшибки", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	ЗначенияДляПолучения.Вставить("СогласованноеИзменение", Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ПрочийПриход, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийПКО.ПрочийПриход);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийПКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийПКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийПКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийПКО.ВозвратЗаймаРаботником);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыСКонтрагентами.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКО_РасчетыСКонтрагентами";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовСКонтрагентами";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю, "СПокупателем");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику, "СПоставщиком");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ПрочийРасход, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам, "КредитыИЗаймы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("СПокупателем", Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	ЗначенияДляПолучения.Вставить("СПоставщиком", Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыОперацийРКО.ПрочийРасход);
	ЗначенияДляПолучения.Вставить("КредитыИЗаймы", Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКО_РасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКО_РасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийРКО.ВыдачаЗаймаРаботнику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийРКОНаБанковскийСчет.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийРКОНаБанковскийСчет";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийРКО;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийРКОНаБанковскийСчет";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк, "ВзносНаличными");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийРКО.Инкассация, "Инкассация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВзносНаличными", Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк);
	ЗначенияДляПолучения.Вставить("Инкассация", Перечисления.ВидыОперацийРКО.Инкассация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыОперацийСБДСРасчетыССотрудниками.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыОперацийСБДСРасчетыССотрудниками";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийСписаниеДенежныхСредств;
	ПравилоКонвертации.ТипXDTO = "ВидыРасчетовССотрудниками";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику, "Займы");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу, "Подотчет");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Займы", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаРаботнику);
	ЗначенияДляПолучения.Вставить("Подотчет", Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСчетаФактуры.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыСчетаФактуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыВыставленного;
	ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент, "НалоговыйАгент");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию, "НаРеализацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу, "СуммовыеРазницы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыВыставленного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыВыставленного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента);
	ЗначенияДляПолучения.Вставить("НалоговыйАгент", Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент);
	ЗначенияДляПолучения.Вставить("НаРеализацию", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	ЗначенияДляПолучения.Вставить("СуммовыеРазницы", Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ВидыСчетаФактурыПолученного.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ВидыСчетаФактурыПолученного";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидСчетаФактурыПолученного;
	ПравилоКонвертации.ТипXDTO = "ВидыСчетаФактуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.Корректировочный, "Корректировочный");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаАванс, "НаАванс");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаАвансКомитента");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидСчетаФактурыПолученного.НаПоступление, "НаПоступление");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Корректировочный", Перечисления.ВидСчетаФактурыПолученного.Корректировочный);
	ЗначенияДляПолучения.Вставить("НаАванс", Перечисления.ВидСчетаФактурыПолученного.НаАванс);
	ЗначенияДляПолучения.Вставить("НаАвансКомитента", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ЗначенияДляПолучения.Вставить("НаПоступление", Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_АмортизационныеГруппы.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_АмортизационныеГруппы";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.АмортизационныеГруппы;
	ПравилоКонвертации.ТипXDTO = "АмортизационныеГруппы";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВосьмаяГруппа, "Восьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ВтораяГруппа, "Вторая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДевятаяГруппа, "Девятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ДесятаяГруппа, "Десятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа, "Отдельная");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПерваяГруппа, "Первая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ПятаяГруппа, "Пятая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.СедьмаяГруппа, "Седьмая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ТретьяГруппа, "Третья");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа, "Четвертая");
	ЗначенияДляОтправки.Вставить(Перечисления.АмортизационныеГруппы.ШестаяГруппа, "Шестая");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Восьмая", Перечисления.АмортизационныеГруппы.ВосьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Вторая", Перечисления.АмортизационныеГруппы.ВтораяГруппа);
	ЗначенияДляПолучения.Вставить("Девятая", Перечисления.АмортизационныеГруппы.ДевятаяГруппа);
	ЗначенияДляПолучения.Вставить("Десятая", Перечисления.АмортизационныеГруппы.ДесятаяГруппа);
	ЗначенияДляПолучения.Вставить("Отдельная", Перечисления.АмортизационныеГруппы.ОтдельнаяГруппа);
	ЗначенияДляПолучения.Вставить("Первая", Перечисления.АмортизационныеГруппы.ПерваяГруппа);
	ЗначенияДляПолучения.Вставить("Пятая", Перечисления.АмортизационныеГруппы.ПятаяГруппа);
	ЗначенияДляПолучения.Вставить("Седьмая", Перечисления.АмортизационныеГруппы.СедьмаяГруппа);
	ЗначенияДляПолучения.Вставить("Третья", Перечисления.АмортизационныеГруппы.ТретьяГруппа);
	ЗначенияДляПолучения.Вставить("Четвертая", Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа);
	ЗначенияДляПолучения.Вставить("Шестая", Перечисления.АмортизационныеГруппы.ШестаяГруппа);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОперацийКомплектация.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОперацийКомплектация";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыОперацийКомплектацияНоменклатуры;
	ПравилоКонвертации.ТипXDTO = "ВидыОперацийСборкаТоваров";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация, "Сборка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация, "Разборка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Сборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Комплектация);
	ЗначенияДляПолучения.Вставить("Разборка", Перечисления.ВидыОперацийКомплектацияНоменклатуры.Разукомплектация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыОтветственныхЛиц.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыОтветственныхЛиц";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ОтветственныеЛицаОрганизаций;
	ПравилоКонвертации.ТипXDTO = "ВидыОтветственныхЛиц";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, "ГлавныйБухгалтер");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель, "Исполнитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Кассир, "Кассир");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры, "ОтветственныйЗаБухгалтерскиеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры, "ОтветственныйЗаНалоговыеРегистры");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, "Руководитель");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы, "РуководительКадровойСлужбы");
	ЗначенияДляОтправки.Вставить(Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель, "УполномоченныйПредставитель");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ГлавныйБухгалтер", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ЗначенияДляПолучения.Вставить("Исполнитель", Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
	ЗначенияДляПолучения.Вставить("Кассир", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаБухгалтерскиеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаБухгалтерскиеРегистры);
	ЗначенияДляПолучения.Вставить("ОтветственныйЗаНалоговыеРегистры", Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры);
	ЗначенияДляПолучения.Вставить("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	ЗначенияДляПолучения.Вставить("РуководительКадровойСлужбы", Перечисления.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы);
	ЗначенияДляПолучения.Вставить("УполномоченныйПредставитель", Перечисления.ОтветственныеЛицаОрганизаций.УполномоченныйПредставитель);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ВидыСобытийОС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ВидыСобытийОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ВидыСобытийОС;
	ПравилоКонвертации.ТипXDTO = "ВидыСобытийОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию, "ВводВЭксплуатацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ВнутреннееПеремещение, "ВнутреннееПеремещение");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Дооборудование, "Дооборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Достройка, "Достройка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.КапитальныйРемонт, "КапитальныйРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Модернизация, "Модернизация");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.НачислениеАмортизации, "НачислениеАмортизации");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Передача, "Передача");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Переоценка, "Переоценка");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПодготовкаКПередаче, "ПодготовкаКПередаче");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПринятиеКУчету, "ПринятиеКУчету");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию, "ПринятиеКУчетуСВводомВЭксплуатацию");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Прочее, "Прочее");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Реконструкция, "Реконструкция");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.Списание, "Списание");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.СреднийРемонт, "СреднийРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ТекущийРемонт, "ТекущийРемонт");
	ЗначенияДляОтправки.Вставить(Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация, "ЧастичнаяЛиквидация");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВводВЭксплуатацию", Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	ЗначенияДляПолучения.Вставить("ВнутреннееПеремещение", Перечисления.ВидыСобытийОС.ВнутреннееПеремещение);
	ЗначенияДляПолучения.Вставить("Дооборудование", Перечисления.ВидыСобытийОС.Дооборудование);
	ЗначенияДляПолучения.Вставить("Достройка", Перечисления.ВидыСобытийОС.Достройка);
	ЗначенияДляПолучения.Вставить("КапитальныйРемонт", Перечисления.ВидыСобытийОС.КапитальныйРемонт);
	ЗначенияДляПолучения.Вставить("Модернизация", Перечисления.ВидыСобытийОС.Модернизация);
	ЗначенияДляПолучения.Вставить("НачислениеАмортизации", Перечисления.ВидыСобытийОС.НачислениеАмортизации);
	ЗначенияДляПолучения.Вставить("Передача", Перечисления.ВидыСобытийОС.Передача);
	ЗначенияДляПолучения.Вставить("Переоценка", Перечисления.ВидыСобытийОС.Переоценка);
	ЗначенияДляПолучения.Вставить("ПодготовкаКПередаче", Перечисления.ВидыСобытийОС.ПодготовкаКПередаче);
	ЗначенияДляПолучения.Вставить("ПринятиеКУчету", Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ЗначенияДляПолучения.Вставить("ПринятиеКУчетуСВводомВЭксплуатацию", Перечисления.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию);
	ЗначенияДляПолучения.Вставить("Прочее", Перечисления.ВидыСобытийОС.Прочее);
	ЗначенияДляПолучения.Вставить("Реконструкция", Перечисления.ВидыСобытийОС.Реконструкция);
	ЗначенияДляПолучения.Вставить("Списание", Перечисления.ВидыСобытийОС.Списание);
	ЗначенияДляПолучения.Вставить("СреднийРемонт", Перечисления.ВидыСобытийОС.СреднийРемонт);
	ЗначенияДляПолучения.Вставить("ТекущийРемонт", Перечисления.ВидыСобытийОС.ТекущийРемонт);
	ЗначенияДляПолучения.Вставить("ЧастичнаяЛиквидация", Перечисления.ВидыСобытийОС.ЧастичнаяЛиквидация);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_ГруппыОС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_ГруппыОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ГруппыОС;
	ПравилоКонвертации.ТипXDTO = "ГруппыОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств, "ДругиеВидыОсновныхСредств");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Здания, "Здания");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ЗемельныеУчастки, "ЗемельныеУчастки");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество, "КапитальныеВложенияВАрендованноеИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МашиныИОборудование, "МашиныИОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.МноголетниеНасаждения, "МноголетниеНасаждения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОбъектыПриродопользования, "ОбъектыПриродопользования");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ОфисноеОборудование, "ОфисноеОборудование");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПродуктивныйСкот, "ПродуктивныйСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь, "ПроизводственныйИХозяйственныйИнвентарь");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации, "ПрочееИмуществоТребующееГосударственнойРегистрации");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.РабочийСкот, "РабочийСкот");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.Сооружения, "Сооружения");
	ЗначенияДляОтправки.Вставить(Перечисления.ГруппыОС.ТранспортныеСредства, "ТранспортныеСредства");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ДругиеВидыОсновныхСредств", Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств);
	ЗначенияДляПолучения.Вставить("Здания", Перечисления.ГруппыОС.Здания);
	ЗначенияДляПолучения.Вставить("ЗемельныеУчастки", Перечисления.ГруппыОС.ЗемельныеУчастки);
	ЗначенияДляПолучения.Вставить("КапитальныеВложенияВАрендованноеИмущество", Перечисления.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество);
	ЗначенияДляПолучения.Вставить("МашиныИОборудование", Перечисления.ГруппыОС.МашиныИОборудование);
	ЗначенияДляПолучения.Вставить("МноголетниеНасаждения", Перечисления.ГруппыОС.МноголетниеНасаждения);
	ЗначенияДляПолучения.Вставить("ОбъектыПриродопользования", Перечисления.ГруппыОС.ОбъектыПриродопользования);
	ЗначенияДляПолучения.Вставить("ОфисноеОборудование", Перечисления.ГруппыОС.ОфисноеОборудование);
	ЗначенияДляПолучения.Вставить("ПродуктивныйСкот", Перечисления.ГруппыОС.ПродуктивныйСкот);
	ЗначенияДляПолучения.Вставить("ПроизводственныйИХозяйственныйИнвентарь", Перечисления.ГруппыОС.ПроизводственныйИХозяйственныйИнвентарь);
	ЗначенияДляПолучения.Вставить("ПрочееИмуществоТребующееГосударственнойРегистрации", Перечисления.ГруппыОС.ПрочееИмуществоТребующееГосударственнойРегистрации);
	ЗначенияДляПолучения.Вставить("РабочийСкот", Перечисления.ГруппыОС.РабочийСкот);
	ЗначенияДляПолучения.Вставить("Сооружения", Перечисления.ГруппыОС.Сооружения);
	ЗначенияДляПолучения.Вставить("ТранспортныеСредства", Перечисления.ГруппыОС.ТранспортныеСредства);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыНачисленияАмортизацииОС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_СпособыНачисленияАмортизацииОС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииОС;
	ПравилоКонвертации.ТипXDTO = "СпособыНачисленияАмортизацииОС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ, "ПоЕНАОФ");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега, "ПоЕНАОФНа1000кмПробега");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования, "ПоСуммеЧиселЛетИспользования");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФ", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФНа1000кмПробега", Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	ЗначенияДляПолучения.Вставить("ПоСуммеЧиселЛетИспользования", Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыПоступленияАктивов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_СпособыПоступленияАктивов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыПоступленияАктивов;
	ПравилоКонвертации.ТипXDTO = "СпособыПоступленияАктивов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.БезвозмездноеПоступление, "БезвозмездноеПоступление");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность, "ВкладВСовместнуюДеятельность");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал, "ВкладВУставныйКапитал");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество, "ВОбменНаДругоеИмущество");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.Иное, "Иное");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды, "ПоДоговоруАренды");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление, "ПоступлениеВДоверительноеУправление");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату, "ПриобретениеЗаПлату");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыПоступленияАктивов.Строительство, "Строительство");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезвозмездноеПоступление", Перечисления.СпособыПоступленияАктивов.БезвозмездноеПоступление);
	ЗначенияДляПолучения.Вставить("ВкладВСовместнуюДеятельность", Перечисления.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность);
	ЗначенияДляПолучения.Вставить("ВкладВУставныйКапитал", Перечисления.СпособыПоступленияАктивов.ВкладВУставныйКапитал);
	ЗначенияДляПолучения.Вставить("ВОбменНаДругоеИмущество", Перечисления.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество);
	ЗначенияДляПолучения.Вставить("Иное", Перечисления.СпособыПоступленияАктивов.Иное);
	ЗначенияДляПолучения.Вставить("ПоДоговоруАренды", Перечисления.СпособыПоступленияАктивов.ПоДоговоруАренды);
	ЗначенияДляПолучения.Вставить("ПоступлениеВДоверительноеУправление", Перечисления.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление);
	ЗначенияДляПолучения.Вставить("ПриобретениеЗаПлату", Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату);
	ЗначенияДляПолучения.Вставить("Строительство", Перечисления.СпособыПоступленияАктивов.Строительство);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СпособыРасчетаКомиссионногоВознагражд.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_СпособыРасчетаКомиссионногоВознагражд";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыРасчетаКомиссионногоВознаграждения;
	ПравилоКонвертации.ТипXDTO = "СпособыРасчетаКомиссионногоВознаграждения";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается, "НеРассчитывается");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления, "ПроцентОтРазницыСуммПродажиИПоступления");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи, "ПроцентОтСуммыПродажи");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеРассчитывается", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ЗначенияДляПолучения.Вставить("ПроцентОтРазницыСуммПродажиИПоступления", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтРазностиСуммПродажиИПоступления);
	ЗначенияДляПолучения.Вставить("ПроцентОтСуммыПродажи", Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// Перечисление_СтавкиНДС.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "Перечисление_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20, "НДС20");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС20_120, "НДС20_120");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ЗначенияДляПолучения.Вставить("НДС20", Перечисления.СтавкиНДС.НДС20);
	ЗначенияДляПолучения.Вставить("НДС20_120", Перечисления.СтавкиНДС.НДС20_120);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПолФизическогоЛица.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПорядокВключенияСтоимостиОСВСоставРасходовНУ.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ;
	ПравилоКонвертации.ТипXDTO = "ПорядокВключенияСтоимостиОСВСоставРасходовНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету, "ВключениеВРасходыПриПринятииКУчету");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации, "НачислениеАмортизации");
	ЗначенияДляОтправки.Вставить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы, "СтоимостьНеВключаетсяВРасходы");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ВключениеВРасходыПриПринятииКУчету", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету);
	ЗначенияДляПолучения.Вставить("НачислениеАмортизации", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	ЗначенияДляПолучения.Вставить("СтоимостьНеВключаетсяВРасходы", Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыНачисленияАмортизацииНМАБУ.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СпособыНачисленияАмортизацииНМАБУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СпособыНачисленияАмортизацииНМА;
	ПравилоКонвертации.ТипXDTO = "СпособыНачисленияАмортизацииНМАБУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции, "ПропорциональноОбъемуПродукции");
	ЗначенияДляОтправки.Вставить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка, "УменьшаемогоОстатка");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	ЗначенияДляПолучения.Вставить("ПропорциональноОбъемуПродукции", Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	ЗначенияДляПолучения.Вставить("УменьшаемогоОстатка", Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// СпособыНачисленияАмортизацииНМАНУ.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "СпособыНачисленияАмортизацииНМАНУ";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.МетодыНачисленияАмортизации;
	ПравилоКонвертации.ТипXDTO = "СпособыНачисленияАмортизацииНМАНУ";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Линейный, "Линейный");
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.Нелинейный, "Нелинейный");
	ЗначенияДляОтправки.Вставить(Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ, "ПоЕНАОФ");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Линейный", Перечисления.МетодыНачисленияАмортизации.Линейный);
	ЗначенияДляПолучения.Вставить("Нелинейный", Перечисления.МетодыНачисленияАмортизации.Нелинейный);
	ЗначенияДляПолучения.Вставить("ПоЕНАОФ", Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ТипыСкладов.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
	ПравилоКонвертации.ТипXDTO = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.ОптовыйСклад, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.ОптовыйСклад);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ЮридическоеФизическоеЛицо.
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы


Процедура АктуализироватьПодчиненностьСчетовФактурВыданных(КомпонентыОбмена)
	// Сортируем для того, чтобы упорядочить по хронологии и сгруппировать по обрабатываемому документу (счет-фактура/корректировка реализации).
	// Группировка по документу необходима для того, чтобы оптимизировать запись обрабатываемого документа в информационную базу.
	ТаблицаОбъектов = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке;
	ТаблицаОбъектов.Сортировать("ДатаДокумента, НомерИсправления, Документ");
	
	ТаблицаДляОтложенногоПроведения     = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	ОбрабатываемыйДокумент              = Документы.СчетФактураВыданный.ПустаяСсылка();
	ОбрабатываемыйДокументОбъект        = Неопределено;
	ОбрабатываемыйДокументМодифицирован = Ложь;
	ИсправляемыйДокумент                = Неопределено;
	
	УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
			Если ОбрабатываемыйДокумент <> СтрокаТаблицы.Документ Тогда
				
				Если ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный")
					И ОбрабатываемыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
					ОбрабатываемыйДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
					ОбрабатываемыйДокументМодифицирован = Истина;
				КонецЕсли;
			
				Если ОбрабатываемыйДокументМодифицирован Тогда
					ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
					ОбрабатываемыйДокументОбъект.Записать();
				КонецЕсли;
				
				ОбрабатываемыйДокумент              = СтрокаТаблицы.Документ;
				ОбрабатываемыйДокументОбъект        = СтрокаТаблицы.Документ.ПолучитьОбъект();
				ОбрабатываемыйДокументМодифицирован = Ложь;
			
			КонецЕсли;
		Иначе
			ОбрабатываемыйДокумент       = СтрокаТаблицы.Документ;
			ОбрабатываемыйДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбрабатываемыйДокументОбъект.ПометкаУдаления Тогда
			ОбрабатываемыйДокументОбъект.ПометкаУдаления = Ложь;
			ОбрабатываемыйДокументМодифицирован          = Истина;
		КонецЕсли;
		
		ИсправляемыйДокумент = СтрокаТаблицы.ИсправляемыйДокумент;	
		
		// Создавать фиктивную корректировку надо в случаях:
		//  1. Когда исправительная счет-фактура введена на основании документа реализации;
		//  2. Когда исправительная счет-фактура введена на основании корректировки реализации с видом операции по согласованию сторон;
		//  3. Когда счет-фактура является не первой введенной на основании документа корректировка реализации с видом операции "Исправление ошибок".
		// Если обрабатывается документ корректировка реализации, то создавать фиктивную корректировку не надо. Обрабатываемый документ нужно лишь
		// правильно спозиционировать в структуре подчиненности.
		
		СоздаватьКорректировку = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный");
		
		// Запросом определим ближайшую по дате корректировку реализации,
		// и находим счет-фактуру привязанную к ней.
		// Возможны следующие сценарии:
		//   1. Найденная корректировка является корректной для данного счета-фактуры;
		//   2. Найденная корректировка является корректной для данного счета-фактуры, но в счете-фактуре указан другой документ-основание,
		//      Например при повторной загрузке;
		//   3. Найденная корректировка будет использоваться как документ-основание для создаваемой фиктивной корректировки;
		//   4. Корректировка может быть не найдена, тогда в качестве документа основания создаваемой фиктивной корректировки,
		//      будет использоваться исправляемый документ реализации.
		
		ПоследняяКорректировкаВСтруктуреПодчиненности = Документы.КорректировкаРеализации.ПустаяСсылка();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка КАК КорректировкаРеализации,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|		ИНАЧЕ СчетФактураВыданныйДокументыОснования.Ссылка
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСчетФактура
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО КорректировкаРеализации.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	КорректировкаРеализации.ИсправляемыйДокументРеализации = &ИсправляемыйДокументРеализации
		|	И Не КорректировкаРеализации.ПометкаУдаления
		|	И КорректировкаРеализации.Ссылка <> &ОбрабатываемыйДокумент
		|	И КорректировкаРеализации.Дата < &ДатаСчетФактуры
		|	И КорректировкаРеализации.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.Дата УБЫВ,
		|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления");
			
		// Если вдруг дата документа, это начало дня (например програмная генерация документов на начало дня)
		// то при поиске корректировки надо к дате документа прибавить 1 секунду, иначе корректировка введеная также на начало дня
		// подбираться не будет, и при каждой загрузке будет дублироваться.
		// Использование сравнения на меньше или равно, тоже не допустимо, поскольку в других случаях корректировка может быть подобрана не корректно.
		Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
			ДатаПоискаКорректировок = СтрокаТаблицы.ДатаДокумента + 1;
		Иначе
			ДатаПоискаКорректировок = СтрокаТаблицы.ДатаДокумента;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаСчетФактуры",                ДатаПоискаКорректировок);
		Запрос.УстановитьПараметр("ИсправляемыйДокументРеализации", ИсправляемыйДокумент);
		Запрос.УстановитьПараметр("ОбрабатываемыйДокумент",         ОбрабатываемыйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПоследняяКорректировкаВСтруктуреПодчиненности = Выборка.КорректировкаРеализации;
			
			Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
				// 1. Если обрабатываемая "Счет-фактура" привязана к найденному документу "Корректировка реализации",
				//    то создавать фиктивную корректировку и изменять документы основания не требуется;
				// 2. Если у найденной корректировки отсутсвуют подчиненные счета-фактуры,
				//    тогда фиктивную корректировку создавать не нужно, нужно привязать обрабатываемый документ к найденной корректировке;
				// 3. Если у найденной корректировки есть подчиненная счет-фактура, но она не соответсвует обрабатываемому документу,
				//    тогда на основании найденной корректировки надо создать фиктивную корректировку и привязать к ней, обрабатываемый документ.
				Если Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент = Выборка.СчетФактура Тогда
					Продолжить;
				Иначе
					СоздаватьКорректировку = Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент <> Выборка.СчетФактура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Это вариант номер 4 из описанных ранее сценариев.
		Если Не ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
			ПоследняяКорректировкаВСтруктуреПодчиненности = ИсправляемыйДокумент;
		КонецЕсли;
		
		Если СоздаватьКорректировку Тогда
			
			// Создаем фиктивный документ "Корректировка реализации", на который будет ссылаться обрабатываемый документ.
			Объект = Документы.КорректировкаРеализации.СоздатьДокумент();
			Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Объект.НомерИсправления = ОбрабатываемыйДокументОбъект.НомерИсправления;
			
			// Вычисляем дату фиктивной корректировки
			// Если дата обрабатываемого документа находиться не в начале дня, 
			// то дату фиктивного документа "Корректировка реализации" сдвинем на 1 сек, раньше обрабатываемого документа
			Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
				Объект.Дата = СтрокаТаблицы.ДатаДокумента;
			Иначе
				Объект.Дата = СтрокаТаблицы.ДатаДокумента - 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				Если Объект.Метаданные().ВводитсяНаОсновании.Содержит(ПоследняяКорректировкаВСтруктуреПодчиненности.Метаданные()) Тогда
					// Заполняем фиктивную корректировку по основанию с помощью механизма конфигурации БП
					Объект.Организация        = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировкаВСтруктуреПодчиненности, "Организация");
					Объект.ДокументРеализации = ПоследняяКорректировкаВСтруктуреПодчиненности;
					Объект.ЗаполнитьСвойстваШапки();
					Документы.КорректировкаРеализации.ЗаполнитьПоДокументу(Объект);
				Иначе
					// Если маханизм автозаполнения конфигурации БП не поддерживает автозаполнение по типу исправляемого документа,
					// то заполняем фиктивную корректировку по основанию с помощью алгоритма встроенного в правила конвертации
					ЗаполнитьКорректировкуРеализацииПоОснованию(Объект, ПоследняяКорректировкаВСтруктуреПодчиненности, ИсправляемыйДокумент);
				КонецЕсли;
			КонецЕсли;
			
			Объект.КорректироватьБУиНУ       = Ложь;
			Объект.КорректироватьНДС         = Истина;
			Объект.ПризнаватьЗачитыватьАванс = Истина;
			
			// Если обрабатываемый документ внесен в таблицу отложенного проведения,
			// и в параметрах узла плана обмена выбрана настройка согласно которой,
			// полученные документы необходимо проводить, то и фиктивную корректировку надо проводить
			НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(ОбрабатываемыйДокумент, "ДокументСсылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				Объект.Проведен = Истина;
			КонецЕсли;
			
			// Запишем созданный фиктивный документ "Корректировка Реализации" в информационную базу
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, УзелОбмена);
			Объект.Записать();
			
			// Если необходимо, то занесем его в таблицу для отложенного проведения.
			Если Объект.Проведен Тогда
				НоваяСтрока = ТаблицаДляОтложенногоПроведения.Добавить();
				НоваяСтрока.ДокументСсылка = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента  = Объект.Дата;
			КонецЕсли;
			
			// Устнавливаем в качестве последней корректировки реализации в структуре подиченности, 
			// ссылку на созданную фиктивную корректировку.
			ПоследняяКорректировкаВСтруктуреПодчиненности = Объект.Ссылка;
			
		КонецЕсли;
		
		// В обратываемом документе необходимо заменить ссылку с существуюещего документа-основания
		// на последнюю корректировку реализации в структуре подчиненности определнную выше.
		
		ОбрабатываемыйДокументМодифицирован = Истина;
		
		Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
			
			// Ищем в документах основания, ссылку на исправляемый документ
			ИсправляемаяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования[СтрокаТаблицы.ИндексСтроки];
			
			// Если строку определили, то заменяем ее на последнюю корректировку реализации в структуре подчиненности определнную выше.
			Если ИсправляемаяСтрока <> Неопределено Тогда
				ИсправляемаяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
			КонецЕсли;
			
			// Если в шапку узкан заменяемый документ, то замену надо также в шапке документа;
			Если ОбрабатываемыйДокументОбъект.ДокументОснование = ИсправляемыйДокумент
				Или (ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации") 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбрабатываемыйДокументОбъект.ДокументОснование, "ИсправляемыйДокументРеализации") = ИсправляемыйДокумент) Тогда
				ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
			КонецЕсли;
			
			ДозаполнитьОснованияСчетаФактуры(ОбрабатываемыйДокументОбъект);
			
		Иначе
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				ОбрабатываемыйДокументОбъект.ДокументРеализации             = ПоследняяКорректировкаВСтруктуреПодчиненности;
				ОбрабатываемыйДокументОбъект.ИсправляемыйДокументРеализации = ИсправляемыйДокумент;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
	
		Если ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный")
			И ОбрабатываемыйДокумент.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			ОбрабатываемыйДокументОбъект.ОпределениеПараметровСчетаФактурыНаРеализацию();
			ОбрабатываемыйДокументМодифицирован = Истина;
		КонецЕсли;
						
		Если ОбрабатываемыйДокументМодифицирован Тогда
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
			ОбрабатываемыйДокументОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура АктуализироватьПодчиненностьСчетовФактурПолученных(КомпонентыОбмена)
	// Сортируем для того, чтобы упорядочить по хронологии и сгруппировать по обрабатываемому документу (счет-фактура/корректировка реализации).
	// Группировка по документу необходима для того, чтобы оптимизировать запись в информационную базу обрабатываемого документа.
	ТаблицаОбъектов = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке;
	ТаблицаОбъектов.Сортировать("ДатаДокумента, НомерИсправления, Документ");
	
	ТаблицаДляОтложенногоПроведения     = КомпонентыОбмена.ДокументыДляОтложенногоПроведения;
	ОбрабатываемыйДокумент              = Документы.СчетФактураПолученный.ПустаяСсылка();
	ОбрабатываемыйДокументОбъект        = Неопределено;
	ОбрабатываемыйДокументМодифицирован = Ложь;
	ИсправляемыйДокумент                = Неопределено;
	
	УзелОбмена = ?(КомпонентыОбмена.ЭтоОбменЧерезПланОбмена, КомпонентыОбмена.УзелКорреспондента, Неопределено);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОбъектов Цикл
		
		Если ЗначениеЗаполнено(ОбрабатываемыйДокумент) Тогда
			Если ОбрабатываемыйДокумент <> СтрокаТаблицы.Документ Тогда
	
				Если ОбрабатываемыйДокументМодифицирован Тогда
					ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
					ОбрабатываемыйДокументОбъект.Записать();
				КонецЕсли;
				
				ОбрабатываемыйДокумент              = СтрокаТаблицы.Документ;
				ОбрабатываемыйДокументОбъект        = СтрокаТаблицы.Документ.ПолучитьОбъект();
				ОбрабатываемыйДокументМодифицирован = Ложь;
			
			КонецЕсли;
		Иначе
			ОбрабатываемыйДокумент       = СтрокаТаблицы.Документ;
			ОбрабатываемыйДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		КонецЕсли;
		
		Если ОбрабатываемыйДокументОбъект.ПометкаУдаления Тогда
			ОбрабатываемыйДокументОбъект.ПометкаУдаления = Ложь;
			ОбрабатываемыйДокументМодифицирован          = Истина;
		КонецЕсли;
		
		ИсправляемыйДокумент = СтрокаТаблицы.ИсправляемыйДокумент;
	
		// Создавать фиктивную корректировку надо в случаях:
		//  1. Когда исправительная счет-фактура введена на основании документа поступления;
		//  2. Когда исправительная счет-фактура введена на основании корректировки поступления с видом операции по согласованию сторон;
		//  3. Когда счет-фактура является не первой введенной на основании документа корректировка поступления с видом операции "Исправление ошибок".
		// Если обрабатывается документ корректировка поступления, то создавать фиктивную корректировку не надо. Обрабатываемый документ нужно лишь
		// правильно спозиционировать в структуре подчиненности.
		
		СоздаватьКорректировку = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный");
		
		// Запросом определим ближайшую по дате корректировку поступления,
		// и находим счет-фактуру привязанную к ней.
		// Возможны следующие сценарии:
		//   1. Найденная корректировка является корректной для данного счета-фактуры;
		//   2. Найденная корректировка является корректной для данного счета-фактуры, но в счете-фактуре указан другой документ-основание,
		//      Например при повторной загрузке;
		//   3. Найденная корректировка будет использоваться как документ-основание для создаваемой фиктивной корректировки;
		//   4. Корректировка может быть не найдена, тогда в качестве документа основания создаваемой фиктивной корректировки,
		//      будет использоваться исправляемый документ поступления.
		
		ПоследняяКорректировкаВСтруктуреПодчиненности = Документы.КорректировкаПоступления.ПустаяСсылка();
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаПоступления.Ссылка КАК КорректировкаПоступления,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|		ИНАЧЕ СчетФактураПолученныйДокументыОснования.Ссылка
		|	КОНЕЦ КАК СчетФактура,
		|	ВЫБОР
		|		КОГДА СчетФактураПолученныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьСчетФактура
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
		|		ПО КорректировкаПоступления.Ссылка = СчетФактураПолученныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	КорректировкаПоступления.ИсправляемыйДокументПоступления = &ИсправляемыйДокументПоступления
		|	И Не КорректировкаПоступления.ПометкаУдаления
		|	И КорректировкаПоступления.Ссылка <> &ОбрабатываемыйДокумент
		|	И КорректировкаПоступления.Дата < &ДатаСчетФактуры
		|	И КорректировкаПоступления.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаПоступления.Дата УБЫВ,
		|	СчетФактураПолученныйДокументыОснования.Ссылка.НомерИсправления");
			
		Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
			Запрос.УстановитьПараметр("ДатаСчетФактуры", СтрокаТаблицы.ДатаДокумента + 1);
		Иначе
			Запрос.УстановитьПараметр("ДатаСчетФактуры", СтрокаТаблицы.ДатаДокумента);
		КонецЕсли;
		Запрос.УстановитьПараметр("ИсправляемыйДокументПоступления", ИсправляемыйДокумент);
		Запрос.УстановитьПараметр("ОбрабатываемыйДокумент",          ОбрабатываемыйДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ПоследняяКорректировкаВСтруктуреПодчиненности = Выборка.КорректировкаПоступления;
			
			Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
				// 1. Если обрабатываемая "Счет-фактура" привязана к найденному документу "Корректировка поступления",
				//    то создавать фиктивную корректировку и изменять документы основания не требуется;
				// 2. Если у найденной корректировки отсутсвуют подчиненные счета-фактуры,
				//    тогда фиктивную корректировку создавать не нужно, нужно привязать обрабатываемый документ к найденной корректировке;
				// 3. Если у найденной корректировки есть подчиненная счет-фактура, но она не соответсвует обрабатываемому документу,
				//    тогда на основании найденной корректировки надо создать фиктивную корректировку и привязать к ней, обрабатываемый документ.
				Если Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент = Выборка.СчетФактура Тогда
					Продолжить;
				Иначе
					СоздаватьКорректировку = Выборка.ЕстьСчетФактура И ОбрабатываемыйДокумент <> Выборка.СчетФактура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Это вариант номер 4 из описанных ранее сценариев.
		Если Не ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
			ПоследняяКорректировкаВСтруктуреПодчиненности = ИсправляемыйДокумент;
		КонецЕсли;
		
		Если СоздаватьКорректировку Тогда
			
			// Создаем фиктивный документ "Корректировка поступления", на который будет ссылаться обрабатываемый документ.
			Объект = Документы.КорректировкаПоступления.СоздатьДокумент();
			Объект.ВидОперации      = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
			Объект.НомерИсправления = ОбрабатываемыйДокументОбъект.НомерИсправления;
			Объект.ДатаИсправления  = ОбрабатываемыйДокументОбъект.ДатаИсправления;
			
			// Вычисляем дату фиктивной корректировки
			// Если дата обрабатываемого документа находиться не в начале дня, 
			// то дату фиктивного документа "Корректировка поступления" сдвинем на 1 сек, раньше обрабатываемого документа
			Если СтрокаТаблицы.ДатаДокумента = НачалоДня(СтрокаТаблицы.ДатаДокумента) Тогда
				Объект.Дата = СтрокаТаблицы.ДатаДокумента;
			Иначе
				Объект.Дата = СтрокаТаблицы.ДатаДокумента - 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоследняяКорректировкаВСтруктуреПодчиненности) Тогда
				Если Объект.Метаданные().ВводитсяНаОсновании.Содержит(ПоследняяКорректировкаВСтруктуреПодчиненности.Метаданные())
					И ТипЗнч(ИсправляемыйДокумент) <> Тип("ДокументСсылка.СчетФактураПолученный") Тогда
					// Заполняем фиктивную корректировку по основанию с помощью механизма конфигурации БП
					Объект.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследняяКорректировкаВСтруктуреПодчиненности, "Организация");
					Объект.ДокументПоступления = ПоследняяКорректировкаВСтруктуреПодчиненности;
					Объект.ЗаполнитьСвойстваШапки();
					Документы.КорректировкаПоступления.ЗаполнитьПоДокументу(Объект);
				Иначе
					// Если маханизм автозаполнения конфигурации БП не поддерживает автозаполнение по типу исправляемого документа,
					// то заполняем фиктивную корректировку по основанию с помощью алгоритма встроенного в правила конвертации
					ЗаполнитьКорректировкуПоступленияПоОснованию(Объект, ПоследняяКорректировкаВСтруктуреПодчиненности, ИсправляемыйДокумент);
				КонецЕсли;
			КонецЕсли;
			
			Объект.КорректироватьБУиНУ       = Ложь;
			Объект.КорректироватьНДС         = Истина;
			Объект.ПризнаватьЗачитыватьАванс = Истина;
			
			// Если обрабатываемый документ внесен в таблицу отложенного проведения,
			// и в параметрах узла плана обмена выбрана настройка согласно которой,
			// полученные документы необходимо проводить, то и фиктивную корректировку надо проводить
			НайденнаяСтрока = ТаблицаДляОтложенногоПроведения.Найти(ОбрабатываемыйДокумент, "ДокументСсылка");
			Если НайденнаяСтрока <> Неопределено Тогда
				Объект.Проведен = Истина;
			КонецЕсли;
			
			// Запишем созданный фиктивный документ "Корректировка поступления" в информационную базу
			ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(Объект, Истина, Ложь, УзелОбмена);
			Объект.Записать();
			
			// Если необходимо, то занесем его в таблицу для отложенного проведения.
			Если Объект.Проведен Тогда
				НоваяСтрока = ТаблицаДляОтложенногоПроведения.Добавить();
				НоваяСтрока.ДокументСсылка = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента  = Объект.Дата;
			КонецЕсли;
			
			// Устнавливаем в качестве последней корректировки реализации в структуре подиченности, 
			// ссылку на созданную фиктивную корректировку.
			ПоследняяКорректировкаВСтруктуреПодчиненности = Объект.Ссылка;
			
		КонецЕсли;
		
		// В обратываемом документе необходимо заменить ссылку с существуюещего документа-основания
		// на последнюю корректировку поступления в структуре подчиненности определнную выше.
		
		ОбрабатываемыйДокументМодифицирован = Истина;
		
		Если ТипЗнч(ОбрабатываемыйДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
			
			// Если строку определили, то заменяем ее на последнюю корректировку поступления
			// в структуре подчиненности определнную выше.
			Если ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
				
				ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				
				ОбрабатываемыйДокументОбъект.ДокументыОснования.Очистить();
				НоваяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				
			Иначе
				
				// Ищем в документах основания, ссылку на исправляемый документ
				ИсправляемаяСтрока = ОбрабатываемыйДокументОбъект.ДокументыОснования[СтрокаТаблицы.ИндексСтроки];
			
				Если ИсправляемаяСтрока <> Неопределено Тогда
					ИсправляемаяСтрока.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				КонецЕсли;
				
				// Если в шапке указан заменяемый документ, то замену надо также в шапке документа;
				Если ОбрабатываемыйДокументОбъект.ДокументОснование = ИсправляемыйДокумент
					Или (ТипЗнч(ОбрабатываемыйДокументОбъект.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") 
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбрабатываемыйДокументОбъект.ДокументОснование, "ИсправляемыйДокументПоступления") = ИсправляемыйДокумент) Тогда
					ОбрабатываемыйДокументОбъект.ДокументОснование = ПоследняяКорректировкаВСтруктуреПодчиненности;
				КонецЕсли;
				
			КонецЕсли;
			
			ДозаполнитьОснованияСчетаФактуры(ОбрабатываемыйДокументОбъект);
			
		Иначе
			ОбрабатываемыйДокументОбъект.ДокументПоступления             = ПоследняяКорректировкаВСтруктуреПодчиненности;
			ОбрабатываемыйДокументОбъект.ИсправляемыйДокументПоступления = ИсправляемыйДокумент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбрабатываемыйДокумент)
		И ОбрабатываемыйДокументМодифицирован = Истина Тогда
		
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ОбрабатываемыйДокументОбъект, Истина, Ложь, УзелОбмена);
		ОбрабатываемыйДокументОбъект.Записать();
		      	
	КонецЕсли;
КонецПроцедуры
Функция БанковскийСчетСписанияПриПереводеДенежныхСредств(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетОрганизации)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.НомерВходящегоДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();	
	КонецЕсли;
	
	// Попытаемся найти списание с расчетного счета по дате и номеру входящего документа.
	// Банковский счет организации из найденного документа и будет счетом списания.
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация",             Объект.Организация);
	Запрос.Параметры.Вставить("Дата",                    КонецДня(Объект.Дата));
	Запрос.Параметры.Вставить("СчетОрганизации",         Объект.СчетОрганизации);
	Запрос.Параметры.Вставить("НомерВходящегоДокумента", Объект.НомерВходящегоДокумента);
	Запрос.Параметры.Вставить("ДатаВходящегоДокумента",  Объект.ДатаВходящегоДокумента);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеСРасчетногоСчета.СчетОрганизации КАК СчетОрганизации
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.СчетКонтрагента = &СчетОрганизации
	|	И СписаниеСРасчетногоСчета.НомерВходящегоДокумента = &НомерВходящегоДокумента
	|	И СписаниеСРасчетногоСчета.ДатаВходящегоДокумента = &ДатаВходящегоДокумента
	|	И СписаниеСРасчетногоСчета.Дата <= &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеСРасчетногоСчета.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СчетОрганизации;
	КонецЕсли;
	
	Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
КонецФункции
Функция ВерсияФорматаЧислом(СтрокаВерсии)
	Если Не ЗначениеЗаполнено(СтрокаВерсии) Или СтрокаВерсии = "1.0.beta" Тогда
		Возврат 0;
	КонецЕсли;
	
	ВерсияФорматаЧислом = 0;
	
	РазрядыВерсии = СтрРазделить(СтрокаВерсии, ".");
	Если РазрядыВерсии.Количество() <> 2 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат параметра СтрокаВерсии1: %1'"), СтрокаВерсии);
	КонецЕсли;
	
	МножительРазряда = 10000;
	Для ИндексРазрядаОбратный = 0 По 1 Цикл
		ВерсияФорматаЧислом = ВерсияФорматаЧислом + Число(РазрядыВерсии[ИндексРазрядаОбратный])*МножительРазряда;
		МножительРазряда = МножительРазряда / 100;
	КонецЦикла;
	Возврат ВерсияФорматаЧислом;
КонецФункции
Функция ВидНоменклатурыПоГруппе(ГруппаНоменклатуры, ПризнакУслуги)
	ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Если ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		ВидНоменклатуры	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппаНоменклатуры, "ВидНоменклатуры");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ПризнакУслугиВидаНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга");
		Если ПризнакУслугиВидаНоменклатуры <> ПризнакУслуги Тогда
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидНоменклатуры) Тогда
		ВидНоменклатуры = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(ПризнакУслуги);
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
КонецФункции
Функция ВидОплатыОрганизации(КомпонентыОбмена, Организация, ТипОплаты, Контрагент, ДоговорКонтрагента)
	ВидыОплатПоУмолчанию = КомпонентыОбмена.ПараметрыКонвертации.ВидыОплатПоУмолчанию;
	
	НеобходимоСоздатьЭлемент = Ложь;
	Элемент = Справочники.ВидыОплатОрганизаций.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ТипОплаты)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", ГоловнаяОрганизация);
	СтруктураОтбора.Вставить("ТипОплаты",  ТипОплаты);
	СтруктураОтбора.Вставить("Контрагент", Контрагент);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(ВидыОплатПоУмолчанию) Тогда
		
		Строки = ВидыОплатПоУмолчанию.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() = 1 Тогда
			Возврат Строки[0].Элемент;
		КонецЕсли;
		
	Иначе
		
		ТаблицаВидовОплаты = Новый ТаблицаЗначений;
		ТаблицаВидовОплаты.Колонки.Добавить("Организация",        Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаВидовОплаты.Колонки.Добавить("ТипОплаты",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));
		ТаблицаВидовОплаты.Колонки.Добавить("Контрагент",         Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаВидовОплаты.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаВидовОплаты.Колонки.Добавить("Элемент",            Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций"));
		
		КомпонентыОбмена.ПараметрыКонвертации.ВидыОплатПоУмолчанию = ТаблицаВидовОплаты;
		ВидыОплатПоУмолчанию = ТаблицаВидовОплаты;
		
	КонецЕсли;
	
	НоваяСтрока = ВидыОплатПоУмолчанию.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураОтбора);
	
	Если ТипОплаты = Перечисления.ТипыОплат.Наличные Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата наличными'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата платежной картой'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата банковским кредитом'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата собственным подарочным сертификатом'");
	ИначеЕсли ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний Тогда
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата сторонним подарочным сертификатом'");
	Иначе
		НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Вид оплаты по умолчанию'");
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);	
	Запрос.УстановитьПараметр("ТипОплаты", ТипОплаты);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВидыОплатОрганизаций.Ссылка,
		|	ВЫБОР
		|		КОГДА ВидыОплатОрганизаций.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ
		|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|ГДЕ
		|	ВидыОплатОрганизаций.Организация = &Организация
		|	И ВидыОплатОрганизаций.ТипОплаты = &ТипОплаты
		|	И ВидыОплатОрганизаций.Контрагент = &Контрагент
		|	И ВидыОплатОрганизаций.ДоговорКонтрагента = &ДоговорКонтрагента
		|	И ВидыОплатОрганизаций.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
		Если НЕ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена 
			И Выборка.Следующий() Тогда
			НеобходимоСоздатьЭлемент = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьЭлемент = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами
	Если НеобходимоСоздатьЭлемент Тогда
		ВидОплатыОбъект = Справочники.ВидыОплатОрганизаций.СоздатьЭлемент();
		ВидОплатыОбъект.Наименование       = НаименованиеЭлементаДляОбменаПоУмолчанию;
		ВидОплатыОбъект.Организация        = ГоловнаяОрганизация;
		ВидОплатыОбъект.Контрагент         = Контрагент;
		ВидОплатыОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		ВидОплатыОбъект.ТипОплаты          = ТипОплаты;
		ВидОплатыОбъект.СчетУчетаРасчетов  = Справочники.ВидыОплатОрганизаций.СчетУчетаРасчетовПоУмолчанию(ВидОплатыОбъект.ТипОплаты);
	
		Попытка
			ВидОплатыОбъект.Записать();
			Элемент = ВидОплатыОбъект.Ссылка;
		Исключение
		КонецПопытки
	КонецЕсли;
	
	ВидыОплатПоУмолчанию[ВидыОплатПоУмолчанию.Количество() - 1].Элемент = Элемент;
	
	Возврат Элемент;
КонецФункции
Процедура ВыгрузитьДополнительныеРеквизитыИСведения(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO, ЕстьДопРеквизиты = Ложь)
	Если КомпонентыОбмена.ВерсияФорматаОбмена = "1.0.beta" Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
	ТаблицаДопРеквизитов.Колонки.Добавить("Свойство");
	ТаблицаДопРеквизитов.Колонки.Добавить("ЗначениеСвойства");
	
	Если ЕстьДопРеквизиты Тогда
		ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБ.ДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Свойство КАК Свойство,
	|	Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения
	|ГДЕ Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	ДанныеИБДополнительныеРеквизиты = Запрос.Выполнить().Выгрузить();
	ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов);
	Если ТаблицаДопРеквизитов.КОличество() > 0 Тогда
		ДанныеXDTO.Вставить("ДополнительныеРеквизиты", ТаблицаДопРеквизитов);
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузитьПодробныеДанныеФИО(КомпонентыОбмена, ДанныеИБ, ДанныеXDTO)
	Если ВерсияФорматаЧислом(КомпонентыОбмена.ВерсияФорматаОбмена) >= ВерсияФорматаЧислом("2.0") Тогда
		// Выгрузка данных о ФИО
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Период КАК НачалоПериода,
		|	Фамилия,
		|	Имя,
		|	Отчество
		|ИЗ РегистрСведений.ФИОФизическихЛиц
		|ГДЕ ФизическоеЛицо = &ФизическоеЛицо";
		Запрос.УстановитьПараметр("ФизическоеЛицо", ДанныеИБ.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ДанныеXDTO.Вставить("ДанныеФИО", РезультатЗапроса.Выгрузить());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО, ИмяПКОГруппа)
	ТипЗначенияСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипЗначенияСвойства = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяПКО = "Справочник_Номенклатура_Отправка";
		ИмяПКОГруппа = "Справочник_НоменклатураГруппа_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяПКО = "Справочник_Контрагенты_Отправка";
		ИмяПКОГруппа = "Справочник_КонтрагентыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Банки") Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Валюты") Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Организации") Тогда
		ИмяПКО = "Справочник_Организации_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Пользователи") Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		ИмяПКО = "Справочник_Подразделения_Отправка";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.Склады") Тогда
		ИмяПКО = "Справочник_Склады_Отправка";
		ИмяПКОГруппа = "Справочник_СкладыГруппа";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.СтраныМира") Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли ТипЗначенияСвойства = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Отправка";
		ИмяПКОГруппа = "Справочник_ФизическиеЛицаГруппа_Отправка";
	КонецЕсли;
КонецПроцедуры
Процедура ВыгрузкаДопРеквизитовИзТаблицыЗначений(ДанныеИБДополнительныеРеквизиты, ТаблицаДопРеквизитов)
	Для Каждого СтрокаТЧ ИЗ ДанныеИБДополнительныеРеквизиты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Свойство) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ТипЗначенияСвойства = ТипЗнч(СтрокаТЧ.Значение);
		ИмяПКО = "";
		ИмяПКОГруппа = "";
		Если ТипЗначенияСвойства = Тип("Число") 
			ИЛИ ТипЗначенияСвойства = Тип("Строка")
			ИЛИ ТипЗначенияСвойства = Тип("Булево")
			ИЛИ ТипЗначенияСвойства = Тип("Дата") Тогда
			НовСтрока = ТаблицаДопРеквизитов.Добавить();
			НовСтрока.Свойство = СтрокаТЧ.Свойство;
			НовСтрока.ЗначениеСвойства = СтрокаТЧ.Значение;
			Продолжить;
		КонецЕсли;
		ВыгрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.Значение, ИмяПКО, ИмяПКОГруппа);
		Если ИмяПКО = "" Тогда
			Продолжить;
		КонецЕсли; 	
		Если ИмяПКОГруппа <> "" И СтрокаТЧ.Значение.ЭтоГруппа Тогда
			ТекИмяПКО = ИмяПКОГруппа;
		Иначе
			ТекИмяПКО = ИмяПКО;
		КонецЕсли;
		НовСтрока = ТаблицаДопРеквизитов.Добавить();
		НовСтрока.Свойство = СтрокаТЧ.Свойство;
		НовСтрока.ЗначениеСвойства = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.Значение, ТекИмяПКО);
	КонецЦикла;
КонецПроцедуры
Функция ДанныеКоллекцииВВидеСтруктуры(Источник, ПравилаЗаполнения)
	Результат = Новый Структура;
	
	Для Каждого ПравилоЗаполнения Из ПравилаЗаполнения Цикл
	
		СтруктураДляПереносаЗначения = Новый Структура(ПравилоЗаполнения.Ключ, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураДляПереносаЗначения, Источник);
		
		Значение = СтруктураДляПереносаЗначения[ПравилоЗаполнения.Ключ];
		Если Значение <> Неопределено Тогда
			Результат.Вставить(ПравилоЗаполнения.Значение, Значение);
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Результат
КонецФункции
Процедура ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяДопСвойства = "ВалютаДокумента")
	Если ДанныеXDTO.Свойство("Валюта")
		И ЗначениеЗаполнено(ДанныеXDTO.Валюта) Тогда
		
		Если ДанныеXDTO.Валюта.Свойство("Ссылка") Тогда
			ИмяПКО = "Справочник_Валюты";
		Иначе
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		КонецЕсли;
		
		ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяДопСвойства, Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Валюта, ИмяПКО));
	
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("Договор") И ЗначениеЗаполнено(ДанныеXDTO.Договор) Тогда
		Если ТипЗнч(ДанныеXDTO.Договор) = Тип("Структура")
			И ДанныеXDTO.Договор.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов";
		КонецЕсли;
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДоговорКонтрагента", Новый Структура("Значение, ИмяПКО", ДанныеXDTO.Договор, ИмяПКО));
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьОрганизациюВПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO)
	ПодразделениеXDTO.Вставить("Организация", ОрганизацияXDTO);
	
	УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);
КонецПроцедуры
Процедура ДобавитьПодразделениеВДопСвойства(ПолученныеДанные, ДанныеXDTO, ИмяПоляXDTO = "Подразделение", ИмяПоляДокумента = "ПодразделениеОрганизации")
	ПодразделениеXDTO = Неопределено;
	ДанныеXDTO.Свойство(ИмяПоляXDTO, ПодразделениеXDTO);
	Если ЗначениеЗаполнено(ПодразделениеXDTO) Тогда
		
		ОрганизацияXDTO = Неопределено;
		Если ДанныеXDTO.Свойство("Организация")
			И ЗначениеЗаполнено(ДанныеXDTO.Организация) Тогда
			ОрганизацияXDTO = ДанныеXDTO.Организация;
		ИначеЕсли ДанныеXDTO.Свойство("КлючевыеСвойства")
			И ДанныеXDTO.КлючевыеСвойства.Свойство("Организация")
			И ЗначениеЗаполнено(ДанныеXDTO.КлючевыеСвойства.Организация) Тогда
			ОрганизацияXDTO = ДанныеXDTO.КлючевыеСвойства.Организация;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ОрганизацияXDTO) Тогда
	
			ДобавитьОрганизациюВПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);
			
			Подразделение = Новый Структура("Значение, ИмяПКО", ПодразделениеXDTO, "Справочник_Подразделения_Получение");
			ПолученныеДанные.ДополнительныеСвойства.Вставить(ИмяПоляДокумента, Подразделение);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Функция ДоговорОплатыСертификатомОтРозничногоПокупателя(Организация, Контрагент)
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Оплата подарочными сертификатами'");
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НаименованиеЭлементаДляОбменаПоУмолчанию);
	ПараметрыДоговора.Вставить("Организация",          Организация);
	ПараметрыДоговора.Вставить("Владелец",             Контрагент);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыДоговора.Вставить("ВидДоговора",          ВидДоговора);
	
	Договор = ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора);
	
	Возврат Договор.Ссылка;
КонецФункции
Функция ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора)
	Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если НЕ ЗначениеЗаполнено(ПараметрыДоговора.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.Владелец)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВалютаВзаиморасчетов)
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоговора.ВидДоговора) Тогда
		Возврат Договор;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ПараметрыДоговора.Организация);
	
	НеобходимоСоздатьДоговор = Ложь;
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|Ссылка,
		|ВЫБОР
		|	КОГДА Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ КАК ЭтоЭлементПоУмолчаниюДляОбмена
		|ИЗ Справочник.ДоговорыКонтрагентов
		|ГДЕ Организация = &Организация
		|	И ВидДоговора = &ВидДоговора
		|	И Владелец = &Владелец
		|	И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
		|	И ПометкаУдаления = Ложь
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоЭлементПоУмолчаниюДляОбмена УБЫВ");
		
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", ПараметрыДоговора.Наименование);
	Запрос.УстановитьПараметр("Организация",          ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Владелец",             ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ПараметрыДоговора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВидДоговора",          ПараметрыДоговора.ВидДоговора);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Договор = Выборка.Ссылка;
		Если НЕ Выборка.ЭтоЭлементПоУмолчаниюДляОбмена 
			И Выборка.Следующий() Тогда
			НеобходимоСоздатьДоговор = Истина;
		КонецЕсли;
	Иначе
		НеобходимоСоздатьДоговор = Истина;
	КонецЕсли;
	
	// Создание элемента для обмена с заданными параметрами.
	Если НеобходимоСоздатьДоговор Тогда
		
		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорОбъект.Организация = ГоловнаяОрганизация;
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ПараметрыДоговора, , "Организация");
	
		Попытка
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			Договор = ДоговорОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	Возврат Договор;
КонецФункции
Функция ДоговорЭквайринга(Организация, Контрагент)
	Если НЕ ЗначениеЗаполнено(Организация) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Договор эквайринга'");
	ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Наименование",         НаименованиеЭлементаДляОбменаПоУмолчанию);
	ПараметрыДоговора.Вставить("Организация",          Организация);
	ПараметрыДоговора.Вставить("Владелец",             Контрагент);
	ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	ПараметрыДоговора.Вставить("ВидДоговора",          ВидДоговора);
	
	Договор = ДоговорСПараметрамиПоУмолчанию(ПараметрыДоговора);
	
	Возврат Договор.Ссылка;
КонецФункции
Процедура ДозаполнитьОснованияСчетаФактуры(Объект)
	ЭтоКорректировочный = Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный
		Или Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;
	
	Если Не ЭтоКорректировочный Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСФ = УчетНДСПереопределяемый.ПараметрыСчетаФактуры(Объект);
	Объект.ДокументыОснования.Очистить();
	Объект.ДокументыОснования.Загрузить(ПараметрыСФ.РеквизитыОснований);
КонецПроцедуры
Процедура ДокументыДвиженияДС_ПолучениеСтатьиДДС(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа")
		И ЗначениеЗаполнено(ДанныеXDTO.РасшифровкаПлатежа)
		И ДанныеXDTO.РасшифровкаПлатежа.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СтатьяДвиженияДенежныхСредств",ДанныеXDTO.РасшифровкаПлатежа[0].СтатьяДДС);
	КонецЕсли;
КонецПроцедуры
Процедура ДокументыДвиженияДС_ПолучениеСчетаРасчетов(ПолученныеДанные, ДанныеXDTO, ИмяСвойстваСчетРасчетов)
	Если ДанныеXDTO.Свойство("РасшифровкаПлатежа") Тогда
		Для Каждого Строка Из ДанныеXDTO.РасшифровкаПлатежа Цикл
			Если ЗначениеЗаполнено(Строка[ИмяСвойстваСчетРасчетов]) Тогда
				ТекСчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Строка[ИмяСвойстваСчетРасчетов]);
				Если ЗначениеЗаполнено(ТекСчетУчетаРасчетов) Тогда
					ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ТекСчетУчетаРасчетов;
				
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	МетаОбъект = ПолученныеДанные.Метаданные();
	ИмяБазовогоТипа = "";
	Если Метаданные.Документы.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Документ";
	ИначеЕсли Метаданные.Справочники.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "Справочник";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаОбъект) Тогда
		ИмяБазовогоТипа = "ПланВидовХарактеристик";
	КонецЕсли;	
	
	ТипДанныхСтрокой = ИмяБазовогоТипа+"."+МетаОбъект.Имя;
	
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		
		ЭтоДопСведение = СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение;
		ДопРеквизитыСтрока = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения.Добавить();
		ДопРеквизитыСтрока.Свойство = СтрокаТЧ.Свойство;
		ДопРеквизитыСтрока.ЭтоДопСведение = ЭтоДопСведение;
		ДопРеквизитыСтрока.ТипОбъекта = ТипДанныхСтрокой;
	
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
			ДопРеквизитыСтрока.ТипЗначения = ТипЗнч(СтрокаТЧ.ЗначениеСвойства);
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			ПКО = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена, ИмяПКО);
			ДопРеквизитыСтрока.ТипЗначения = ПКО.ТипДанных;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			ЗначениеСвойства = СтрокаТЧ.ЗначениеСвойства;
			Если ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов" Тогда
				Если НЕ (ЗначениеСвойства.Свойство("Владелец") И ЗначениеЗаполнено(ЗначениеСвойства.Владелец)) Тогда
					// Ключевое свойство Владелец необходимо указать явно.
					ЗначениеСвойства.Вставить("Владелец", СтрокаТЧ.Свойство);
				КонецЕсли;
			КонецЕсли;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если ЭтоДопСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если Не СтруктураДопСвойства.Свойство("ДополнительныеСведения")
		Или СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат;
	КонецЕсли;
	
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	ДопСведенияНаборЗаписей.ОбменДанными.Загрузка = Истина;
	ДопСведенияНаборЗаписей.Прочитать();
	ТаблицаДопСведений = ДопСведенияНаборЗаписей.Выгрузить();
	
	ПКО_ДопРеквизиты = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты");
	Для Каждого СтрокаДопСведения Из СтруктураДопСвойства.ДополнительныеСведения Цикл
		
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ПКО_ДопРеквизиты, 
			"ПолучитьСсылку").Ссылка;
			
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ПКО_ЗначениеСвойства = ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО);
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ПКО_ЗначениеСвойства, 
					"ПолучитьСсылку").Ссылка;
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		
		// Если в наборе уже есть нужно доп.свойство, то заменяем значение.
		// Если нет - то добавляем новое.
		// Свойства, которые были в информационной базе, но их нет в сообщении обмена не удаляются.
		ЗаписьНабора = ТаблицаДопСведений.Найти(СвойствоСсылка, "Свойство");
		Если ЗаписьНабора = Неопределено Тогда
			ЗаписьНабора = ТаблицаДопСведений.Добавить();
			ЗаписьНабора.Объект   = ОбъектСсылка;
			ЗаписьНабора.Свойство = СвойствоСсылка;
		КонецЕсли;
		ЗаписьНабора.Значение = ЗначениеСвойства;
		
	КонецЦикла;	
	
	ДопСведенияНаборЗаписей.Загрузить(ТаблицаДопСведений);
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузитьПодробныеДанныеФИО(КомпонентыОбмена, ПолученныеДанные, ФизЛицоСсылка)
	// Если история ФИО не передана и не заполнено поле ФИО физческого лица,
	// то заполнять регистр не требуется
	Если НЕ ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО")
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.ФИО) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписейФИО.Отбор.ФизическоеЛицо.Установить(ФизЛицоСсылка);
	
	Если ПолученныеДанные.ДополнительныеСвойства.Свойство("ДанныеФИО") Тогда
		// Набор записей полностью заменяется на полученные данные
		Для Каждого СтрокаФИО Из ПолученныеДанные.ДополнительныеСвойства.ДанныеФИО Цикл
			МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
			МенеджерЗаписиФИО.Период   = СтрокаФИО.НачалоПериода;
			МенеджерЗаписиФИО.Фамилия  = СтрокаФИО.Фамилия;
			МенеджерЗаписиФИО.Имя      = СтрокаФИО.Имя;
			МенеджерЗаписиФИО.Отчество = СтрокаФИО.Отчество;
			
			// Заполнение реквизита ИнициалыИмени
			Если Не ПустаяСтрока(МенеджерЗаписиФИО.Имя) Тогда
				МенеджерЗаписиФИО.ИнициалыИмени = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыИмени(МенеджерЗаписиФИО.Имя);
			Иначе
				МенеджерЗаписиФИО.ИнициалыИмени = "";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
				Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
					МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
				Иначе
					МенеджерЗаписиФИО.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
		КонецЦикла;
	
	Иначе
		
		СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ПолученныеДанные.ФИО);
		МенеджерЗаписиФИО = НаборЗаписейФИО.Добавить();
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		
		// Заполнение реквизита ИнициалыИмени
		Если Не ПустаяСтрока(МенеджерЗаписиФИО.Имя) Тогда
			МенеджерЗаписиФИО.ИнициалыИмени = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ИнициалыИмени(МенеджерЗаписиФИО.Имя);
		Иначе
			МенеджерЗаписиФИО.ИнициалыИмени = "";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПолученныеДанные.ДатаРождения) Тогда
			МенеджерЗаписиФИО.Период = ПолученныеДанные.ДатаРождения;
		Иначе
			МенеджерЗаписиФИО.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		КонецЕсли;
		МенеджерЗаписиФИО.ФизическоеЛицо = ФизЛицоСсылка;
			
	КонецЕсли;
		
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейФИО);
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	Если Не ЗначениеЗаполнено(ЗначениеСвойства)
		Или ТипЗнч(ЗначениеСвойства) <> Тип("Структура")
		Или Не ЗначениеСвойства.Свойство("ТипЗначения") Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		ИмяПКО = "Справочник_КонтрагентыГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		ИмяПКО = "Справочник_Валюты";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		ИмяПКО = "Справочник_ДоговорыКонтрагентов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		// Подразделения в качестве доп.реквизитов и доп.сведений не загружаются.
		// В формате подразделение не связано с организацией,
		// а в "Бухгалтерии предриятия" организация для подразделения обязательна.
		// Поэтому подразделение загружается всегда в контексте документов и
		// организация определяется из документов.
		// Т.к. доп.реквизит в общем случае не связан с организацией,
		// то он и не загружается.
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДоходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТипЦен")>0 Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнениеОстатковДолговАвансовКредитовЗаймов(ПараметрыКонвертации)
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы = 
		Новый Структура("ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймы");
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность,
		|	КурсыВалют.Валюта
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ                         
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаОстатковТипДата, ) КАК КурсыВалют
		|;
		|
		|///////////////////////////////// - клиенты долги - ///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|	ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ХозрасчетныйОстатки.Организация КАК Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
		|	ВЫБОР
		|		КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) = 0
		|			ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		|		ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|	КОНЕЦ КАК Сумма,
		|	ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	&ДатаОстатковТипДата КАК ДатаПлатежа,
		|	""Активный"" КАК ПризнакКорректностиОстатков
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатковТипДата,
		|			(Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками))
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)),
		|			&ВидыСубконто,
		|			) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстатокДт > 0
		|	И НЕ (
		|			(ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ)))
		|		И 
		|			ХозрасчетныйОстатки.Субконто2.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|		)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - клиенты авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Организация КАК Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ВЫБОР
		|			КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0) = 0
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокКт
		|			ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт, 0)
		|		КОНЕЦ КАК Сумма,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		&ДатаОстатковТипДата КАК ДатаПлатежа,
		|		ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		""Пассивные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученным)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ)
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками))
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))
		|					ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ)),
		|				&ВидыСубконто,
		|				) КАК ХозрасчетныйОстатки
		|	ГДЕ ХозрасчетныйОстатки.СуммаОстатокКт > 0 ИЛИ ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт > 0
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ВЫБОР
		|			КОГДА ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0) = 0
		|				ТОГДА ХозрасчетныйОстатки.СуммаОстатокДт
		|			ИНАЧЕ ЕстьNULL(ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт, 0)
		|		КОНЕЦ,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		&ДатаОстатковТипДата,
		|		-ХозрасчетныйОстатки.СуммаОстатокДт,
		|		""Активные""
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками)),&ВидыСубконто , ) КАК ХозрасчетныйОстатки
		|	ГДЕ
		|		ХозрасчетныйОстатки.СуммаОстатокДт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики долги - /////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|	ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|	ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|	ХозрасчетныйОстатки.Организация,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|		КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|				И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|			ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатковТипДата,
		|			(Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками))
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|				И Счет <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательства))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АрендныеОбязательстваУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежи))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ)),
		|			&ВидыСубконто,
		|			) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|		ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|ГДЕ
		|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|/////////////////////////////// - поставщики авансы - /////////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокДт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Активные"" КАК ПризнакКорректностиОстатков
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&ДатаОстатковТипДата,
		|				Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданным)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал)
		|					ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ)
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежи))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))
		|			ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ)),
		|				&ВидыСубконто,
		|				) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|	ГДЕ ХозрасчетныйОстатки.СуммаОстатокДт > 0
		|		И НЕ (
		|			(ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиям))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямВал))
		|			ИЛИ ХозрасчетныйОстатки.Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ)))
		|		И 
		|			ХозрасчетныйОстатки.Субконто2.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
		|			) 
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)),
		|		""Пассивные""
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|	ГДЕ
		|		ХозрасчетныйОстатки.СуммаОстатокКт < 0) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент
		|;
		|
		|///////////////////////////////// - кредиты и займы - ///////////////////////////////////////////////
		|ВЫБРАТЬ *
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
		|		ХозрасчетныйОстатки.Субконто1 КАК Партнер,
		|		ХозрасчетныйОстатки.Субконто2 КАК РасчетныйДокумент,
		|		ХозрасчетныйОстатки.Субконто2 КАК Договор,
		|		ХозрасчетныйОстатки.Субконто2.Номер КАК НомерРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Субконто2.Дата КАК ДатаРасчетногоДокумента,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл) КАК ВалютаВзаиморасчетов,
		|		ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаРегл,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)) КАК Сумма,
		|		""Краткосрочный"" КАК ТипСрочности,
		|		ХозрасчетныйОстатки.Счет КАК ВидРасчетов
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам)),&ВидыСубконто , ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.Счет,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто1,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2,
		|		ХозрасчетныйОстатки.Субконто2.Номер,
		|		ХозрасчетныйОстатки.Субконто2.Дата,
		|		ХозрасчетныйОстатки.Организация,
		|		ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРегл),
		|		ХозрасчетныйОстатки.СуммаОстатокКт,
		|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.СуммаОстатокКт / ВЫБОР
		|			КОГДА ЕСТЬNULL(КурсыВалют.Курс, 0) > 0
		|					И ЕСТЬNULL(КурсыВалют.Кратность, 0) > 0
		|				ТОГДА КурсыВалют.Курс / КурсыВалют.Кратность
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15,2)),
		|		""Долгосрочный"",
		|		ХозрасчетныйОстатки.Счет
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатковТипДата, Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам)), &ВидыСубконто, ) КАК ХозрасчетныйОстатки
		|			ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ХозрасчетныйОстатки.Валюта = КурсыВалют.Валюта) КАК Таб
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Контрагент,
		|	РасчетныйДокумент";
		
	Запрос.УстановитьПараметр("ДатаОстатков", Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаОстатковТипДата", ДатаОстатков);
	Запрос.УстановитьПараметр("ВалютаРегл",   Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Результаты = Запрос.ВыполнитьПакет();
	СтруктураПараметров = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы;
	
	// порядок в пакете следующий: ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез
	
	СтруктураПараметров.ДолгиКлиенты     = Результаты[Результаты.Количество()-5].Выгрузить();
	СтруктураПараметров.АвансыКлиенты    = Результаты[Результаты.Количество()-4].Выгрузить();
	СтруктураПараметров.ДолгиПоставщики  = Результаты[Результаты.Количество()-3].Выгрузить();
	СтруктураПараметров.АвансыПоставщики = Результаты[Результаты.Количество()-2].Выгрузить();
	СтруктураПараметров.КредитыЗаймы     = Результаты[Результаты.Количество()-1].Выгрузить();
КонецПроцедуры
Процедура ЗаполнениеОтражениеВУСН(Объект, ТабличнаяЧасть)
	Если УчетнаяПолитика.Существует(Объект.Организация, Объект.Дата, Истина, Объект.Ссылка) Тогда
								
		ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.ДоговорКонтрагента,
			"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, УчетАгентскогоНДС, РасчетыВУсловныхЕдиницах, НДСПоСтавкам4и2");
		ЭтоКомиссия = ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
		
		ВариантОтраженияУСН	= ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(Объект.ВидОперации, ЭтоКомиссия);
		
		// Заполняем отражение в УСН для ТЧ
		Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН = ВариантОтраженияУСН;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДанныеРасшифровкиПлатежаНДС(СтруктураДанныхСтроки, Организация, ДатаДокумента, ЭтоПоступлениеДС)
	Если СтруктураДанныхСтроки.Свойство("СтавкаНДС") И ЗначениеЗаполнено(СтруктураДанныхСтроки.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) И ЭтоПоступлениеДС Тогда
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, ДатаДокумента);
	Иначе
		ПлательщикНДС = Истина;
	КонецЕсли;
	ТекСтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДатаДокумента, ПлательщикНДС);
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(ТекСтавкаНДС);
	ТекСуммаНДС = СтруктураДанныхСтроки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	СтруктураДанныхСтроки.Вставить("СтавкаНДС", ТекСтавкаНДС);
	СтруктураДанныхСтроки.Вставить("СуммаНДС", ТекСуммаНДС);
КонецПроцедуры
Процедура ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект)
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер")
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОплатаПлатежнойКартой") Тогда
		
		СпособОценкиТоваров = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
		УчетВПродажныхЦенах = (СпособОценкиТоваров = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости);
		Если (Объект.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка
				Или Объект.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка)
			И УчетВПродажныхЦенах Тогда
			ЗаполнитьЗначенияСвойств(Объект,
				НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
		КонецЕсли;
	Иначе // РеализацияТоваровУслуг, ВозвратТоваровОтПокупателя, ОтчетОРозничныхПродажах
		ЗаполнитьЗначенияСвойств(Объект,
			НалоговыйУчетУСН.ДеятельностьНаПатентеПоУмолчанию(Объект.Организация, Объект.Дата));
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МенеджерОбъекта.УстановитьДеятельностьНаТорговомСборе(Объект);
КонецПроцедуры
Процедура ЗаполнитьДоговорДаннымиЗаполнения(ДоговорОбъект, ДанныеЗаполнения)
	// Дубль обработчика заполнения справочника Договоры.
	// Исключено заполнение подписантов из-за особенностей работы в режиме сервиса.
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Новый Структура();
	КонецЕсли;
	
	// Если в договоре уже заполнен вид договора - то не нужно его перезаполнять.
	// Для этого в данные заполнения передается указанный в договоре вид.
	Если НЕ (ДанныеЗаполнения.Свойство("ВидДоговора")
			И ЗначениеЗаполнено(ДанныеЗаполнения.ВидДоговора)) Тогда
		Если ЗначениеЗаполнено(ДоговорОбъект.ВидДоговора) Тогда
			ДанныеЗаполнения.Вставить("ВидДоговора", ДоговорОбъект.ВидДоговора); 
		КонецЕсли;
	КонецЕсли;
	
	Справочники.ДоговорыКонтрагентов.УстановитьДоступныеВидыДоговора(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ДоговорОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ДоговорОбъект.ЭтоГруппа Тогда
		Если ЗначениеЗаполнено(ДоговорОбъект.Организация) Тогда
			ДоговорОбъект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДоговорОбъект.Организация);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	
		ДоговорОбъект.СпособЗаполненияСтавкиНДС =
			Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоУмолчанию(ДоговорОбъект.Владелец);
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьДополнительныеРеквизитыВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в дополнительных реквизитах, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваДополнительныхРеквизитовПолученныхДанных = ПолученныеДанные.ДополнительныеРеквизиты.Выгрузить();
	СвойстваДополнительныхРеквизитовПолученныхДанных.Свернуть("Свойство", "");
	
	Для Каждого СвойствоДополнительногоРеквизита Из СвойстваДополнительныхРеквизитовПолученныхДанных Цикл
		Если ЗначениеЗаполнено(СвойствоДополнительногоРеквизита.Свойство) Тогда
			
			СтруктураОтбора = Новый Структура("Свойство", СвойствоДополнительногоРеквизита.Свойство);	
		
			// Перед тем, как добавить реквизиты из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.ДополнительныеРеквизиты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.ДополнительныеРеквизиты.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВДанныеИБ(ПолученныеДанные, ДанныеИБ)
	// Если в контактной информации, которые получены из сообщения обмена,
	// нет значения, которое указано в базе, то сохраняем это значение в данных ИБ.
	
	СвойстваВидаКонтактнойИнформации = ПолученныеДанные.КонтактнаяИнформация.Выгрузить();
	СвойстваВидаКонтактнойИнформации.Свернуть("Вид", "");
	
	Для Каждого СвойствоВидаКонтактнойИнформации Из СвойстваВидаКонтактнойИнформации Цикл
		Если ЗначениеЗаполнено(СвойствоВидаКонтактнойИнформации.Вид) Тогда
			
			СтруктураОтбора = Новый Структура("Вид", СвойствоВидаКонтактнойИнформации.Вид);	
		
			// Перед тем, как добавить виды контактной информации из полученных данных, нужно предварительно
			// удалить строки для свойства из ДанныеИБ.
			
			СтрокиДляУдаления = ДанныеИБ.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
				ДанныеИБ.КонтактнаяИнформация.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			
			СтрокиДляКопирования = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаДляКопирования Из СтрокиДляКопирования Цикл
				ЗаполнитьЗначенияСвойств(ДанныеИБ.КонтактнаяИнформация.Добавить(), СтрокаДляКопирования);
			КонецЦикла;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформациюВПолученныхДанных(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
			
		ТипОбъекта = ПолученныеДанные.Метаданные().Имя;
		РодительВидовКИ = Справочники.ВидыКонтактнойИнформации["Справочник"+ТипОбъекта];
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			
			ТекВидКИ = Неопределено;
			
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
				ТипКИ = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
				НаименованиеКИ = СокрЛП(СтрокаXDTO.НаименованиеКонтактнойИнформации);
				
				Если ЗначениеЗаполнено(НаименованиеКИ) Тогда
					Запрос = Новый Запрос();
					Запрос.Параметры.Вставить("Родитель",     РодительВидовКИ);
					Запрос.Параметры.Вставить("Наименование", НаименованиеКИ);
					Запрос.Параметры.Вставить("Тип",          ТипКИ);
					Запрос.Текст =
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ВидыКонтактнойИнформации.Ссылка
					|ИЗ
					|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
					|ГДЕ
					|	ВидыКонтактнойИнформации.Родитель = &Родитель
					|	И ВидыКонтактнойИнформации.Наименование = &Наименование
					|	И ВидыКонтактнойИнформации.Тип = &Тип";
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ТекВидКИ = Выборка.Ссылка;
					Иначе
						ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
						ВидКИОбъект.ОбменДанными.Загрузка = Истина;
						ВидКИОбъект.Используется = Истина;
						ВидКИОбъект.Родитель     = РодительВидовКИ;
						ВидКИОбъект.Наименование = НаименованиеКИ;
						ВидКИОбъект.Тип = ТипКИ;
						ВидКИОбъект.Записать();
						ТекВидКИ = ВидКИОбъект.Ссылка;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
				ИначеЕсли ТипОбъекта = "ФизическиеЛица" Тогда
				    ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
	
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				Если ТипОбъекта = "ФизическиеЛица" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "Факс" Тогда
				Если ТипОбъекта = "Контрагенты" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
				ИначеЕсли ТипОбъекта = "Организации" Тогда
					ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекВидКИ, "Тип, РазрешитьВводНесколькихЗначений, ЗапретитьРедактированиеПользователем");
			
			// Проверим, что вид КИ не поддерживает множественные значения.
			// Если так - то нужно убедиться, что в табличной части нет такого вида КИ
			СтрокиВидаКИ = ПолученныеДанные.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Вид", ТекВидКИ));
			Если СтрокиВидаКИ.Количество() > 0 Тогда
				Если НЕ СвойстваВидаКИ.РазрешитьВводНесколькихЗначений Тогда
					Если СвойстваВидаКИ.ЗапретитьРедактированиеПользователем Тогда
						ТекстИсключения = НСтр("ru = 'Вид контактной информации %1 полученного объекта указан несколько раз. Загрузка не возможна.'");
						ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ТекВидКИ); 
				 		ВызватьИсключение ТекстИсключения;
				 	Иначе
				 		ОбъектВидаКИ = ТекВидКИ.ПолучитьОбъект();
				 		ОбъектВидаКИ.РазрешитьВводНесколькихЗначений = Истина;
				 		ОбъектВидаКИ.Записать();
				 	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ПолученныеДанные, СокрЛП(СтрокаXDTO.ЗначенияПолей), ТекВидКИ);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкуПоступленияПоОснованию(Объект, ДокументПоступления, ИсправляемыйДокументПоступления)
	Объект.ДокументПоступления = ДокументПоступления;
	Объект.ИсправляемыйДокументПоступления = ИсправляемыйДокументПоступления;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументПоступления);
	
	ТипЗнчДокументаПоступления = ТипЗнч(Объект.ДокументПоступления);
	
	Если ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровОтПокупателяТовары.СпособУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.ОтражениеВУСН,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщику.Номенклатура,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщику.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщику.Количество КАК Количество,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщику.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщику.Цена КАК Цена,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщику.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщику.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщику.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщику.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровПоставщику.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщику.СтранаПроисхождения КАК СтранаПроисхождения,
			|	ВозвратТоваровПоставщику.ЦенаВРознице КАК ЦенаВРознице,
			|	ВозвратТоваровПоставщику.СуммаВРознице КАК СуммаВРознице,
			|	ВозвратТоваровПоставщику.СтавкаНДСВРознице КАК СтавкаНДСВРознице,
			|	ВозвратТоваровПоставщику.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ВозвратТоваровПоставщику.Контрагент КАК Контрагент,
			|	ВозвратТоваровПоставщику.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ВозвратТоваровПоставщику.СчетРасчетов КАК СчетРасчетов
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
			|ГДЕ
			|	ВозвратТоваровПоставщику.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ГТДИмпорт") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	""Таможенная пошлина"" КАК СодержаниеДоИзменения,
			|	""Таможенная пошлина"" КАК Содержание,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоКорректировки,
			|	ГТДИмпортТовары.СуммаПошлины КАК СуммаДоИзменения,
			|	ГТДИмпортТовары.СуммаПошлины КАК Сумма,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ГТДИмпортРазделы.СтавкаНДС КАК СтавкаНДС,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ГТДИмпортТовары.СуммаНДС КАК СуммаНДС,
			|	ГТДИмпортТовары.ДокументПартии,
			|	ГТДИмпортТовары.СчетУчета КАК СчетЗатрат,
			|	ГТДИмпортТовары.Номенклатура КАК Субконто1,
			|	ГТДИмпортТовары.СчетУчетаНУ КАК СчетЗатратНУ,
			|	ГТДИмпортТовары.Номенклатура КАК СубконтоНУ1,
			|	ГТДИмпортТовары.СтатьяЗатратНУ,
			|	ГТДИмпортТовары.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ГТДИмпортТовары.СпособУчетаНДС
			|ИЗ
			|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Разделы КАК ГТДИмпортРазделы
			|		ПО ГТДИмпортТовары.НомерРаздела = ГТДИмпортРазделы.НомерСтроки
			|			И ГТДИмпортТовары.Ссылка = ГТДИмпортРазделы.Ссылка
			|ГДЕ
			|	ГТДИмпортТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаДокумента, СуммаВключаетНДС");
		
		Запрос.Текст = "ВЫБРАТЬ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка КАК Ссылка,
			|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаНДСВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаНДСВознаграждения, 0)) КАК СуммаНДС,
			|	СУММА(ЕСТЬNULL(ОтчетКомиссионераОПродажахТовары.СуммаВознаграждения, 0) + ЕСТЬNULL(ОтчетКомиссионераОПродажахУслуги.СуммаВознаграждения, 0)) КАК СуммаВознаграждения
			|ПОМЕСТИТЬ ТаблицаСумм
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетКомиссионераОПродажах.Услуги КАК ОтчетКомиссионераОПродажахУслуги
			|		ПО ОтчетКомиссионераОПродажахТовары.Ссылка = ОтчетКомиссионераОПродажахУслуги.Ссылка
			|ГДЕ
			|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомиссионераОПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Комиссионное вознаграждение"" КАК Содержание,
			|	""Комиссионное вознаграждение"" КАК СодержаниеДоИзменения,
			|	ОтчетКомиссионераОПродажах.СчетУчетаНДС КАК СчетУчетаНДС,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ТаблицаСумм.СуммаНДС КАК СуммаНДС,
			|	ТаблицаСумм.СуммаВознаграждения КАК СуммаДоКорректировки,
			|	ТаблицаСумм.СуммаВознаграждения КАК СуммаДоИзменения,
			|	ТаблицаСумм.СуммаВознаграждения КАК Сумма,
			|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДСДоИзменения,
			|	ОтчетКомиссионераОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ОтчетКомиссионераОПродажах.СчетУчетаЗатрат КАК СчетЗатрат,
			|	ОтчетКомиссионераОПродажах.Субконто1 КАК Субконто1,
			|	ОтчетКомиссионераОПродажах.Субконто2 КАК Субконто2,
			|	ОтчетКомиссионераОПродажах.Субконто3 КАК Субконто3,
			|	ОтчетКомиссионераОПродажах.СчетУчетаЗатрат КАК СчетЗатратНУ,
			|	ОтчетКомиссионераОПродажах.Субконто1 КАК СубконтоНУ1,
			|	ОтчетКомиссионераОПродажах.Субконто2 КАК СубконтоНУ2,
			|	ОтчетКомиссионераОПродажах.Субконто3 КАК СубконтоНУ3,
			|	ОтчетКомиссионераОПродажах.СпособУчетаНДС КАК СпособУчетаНДС
			|ИЗ
			|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСумм КАК ТаблицаСумм
			|		ПО ОтчетКомиссионераОПродажах.Ссылка = ТаблицаСумм.Ссылка
			|ГДЕ
			|	ОтчетКомиссионераОПродажах.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнчДокументаПоступления = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументПоступления, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаДокумента");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	АвансовыйОтчетТовары.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетТовары.Количество КАК Количество,
			|	АвансовыйОтчетТовары.Цена КАК Цена,
			|	АвансовыйОтчетТовары.Сумма КАК Сумма,
			|	АвансовыйОтчетТовары.СтавкаНДС КАК СтавкаНДС,
			|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетТовары.СчетУчета КАК СчетУчета,
			|	АвансовыйОтчетТовары.СчетУчетаНДС КАК СчетУчетаНДС,
			|	АвансовыйОтчетТовары.ОтражениеВУСН КАК ОтражениеВУСН,
			|	АвансовыйОтчетТовары.НомерГТД КАК НомерГТД,
			|	АвансовыйОтчетТовары.СтранаПроисхождения КАК СтранаПроисхождения,
			|	АвансовыйОтчетТовары.Количество КАК КоличествоДоИзменения,
			|	АвансовыйОтчетТовары.Цена КАК ЦенаДоИзменения,
			|	АвансовыйОтчетТовары.Сумма КАК СуммаДоИзменения,
			|	АвансовыйОтчетТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	АвансовыйОтчетТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	АвансовыйОтчетТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	АвансовыйОтчетТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения
			|ИЗ
			|	Документ.АвансовыйОтчет.Товары КАК АвансовыйОтчетТовары
			|ГДЕ
			|	АвансовыйОтчетТовары.СчетФактура = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	АвансовыйОтчетПрочее.Номенклатура КАК Номенклатура,
			|	АвансовыйОтчетПрочее.Содержание КАК Содержание,
			|	АвансовыйОтчетПрочее.Сумма КАК Сумма,
			|	АвансовыйОтчетПрочее.СтавкаНДС КАК СтавкаНДС,
			|	АвансовыйОтчетПрочее.СуммаНДС КАК СуммаНДС,
			|	АвансовыйОтчетПрочее.СчетЗатрат КАК СчетЗатрат,
			|	АвансовыйОтчетПрочее.Субконто1 КАК Субконто1,
			|	АвансовыйОтчетПрочее.Субконто2 КАК Субконто2,
			|	АвансовыйОтчетПрочее.Субконто3 КАК Субконто3,
			|	АвансовыйОтчетПрочее.СчетЗатратНУ КАК СчетЗатратНУ,
			|	АвансовыйОтчетПрочее.СубконтоНУ1 КАК СубконтоНУ1,
			|	АвансовыйОтчетПрочее.СубконтоНУ2 КАК СубконтоНУ2,
			|	АвансовыйОтчетПрочее.СубконтоНУ3 КАК СубконтоНУ3,
			|	АвансовыйОтчетПрочее.ОтражениеВУСН КАК ОтражениеВУСН,
			|	АвансовыйОтчетПрочее.СчетУчетаНДС КАК СчетУчетаНДС,
			|	АвансовыйОтчетПрочее.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
			|	АвансовыйОтчетПрочее.Содержание КАК СодержаниеДоИзменения,
			|	АвансовыйОтчетПрочее.Сумма КАК СуммаДоИзменения,
			|	АвансовыйОтчетПрочее.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	АвансовыйОтчетПрочее.СуммаНДС КАК СуммаНДСДоИзменения
			|ИЗ
			|	Документ.АвансовыйОтчет.Прочее КАК АвансовыйОтчетПрочее
			|ГДЕ
			|	АвансовыйОтчетПрочее.СчетФактура = &Ссылка";
					
			Выборка = Запрос.ВыполнитьПакет();
			
		ВыборкаТоваров = Выборка[0].Выбрать();
		
		Пока ВыборкаТоваров.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоваров);
		КонецЦикла;
			
		ВыборкаУслуг = Выборка[1].Выбрать();
		
		Пока ВыборкаУслуг.Следующий() Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаУслуг);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКорректировкуРеализацииПоОснованию(Объект, ДокументРеализации, ИсправляемыйДокументРеализации)
	Объект.ДокументРеализации = ДокументРеализации;
	Объект.ИсправляемыйДокументРеализации = ИсправляемыйДокументРеализации;
	Объект.Товары.Очистить();
	Объект.Услуги.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументРеализации);
	
	ТипЗнчДокументаРеализации = ТипЗнч(Объект.ДокументРеализации);
	
	Если ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
			
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтПокупателяТовары.Номенклатура,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Количество КАК Количество,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Цена КАК Цена,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.Сумма КАК Сумма,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровОтПокупателяТовары.СчетДоходов КАК СчетДоходов,
			|	ВозвратТоваровОтПокупателяТовары.Субконто КАК Субконто,
			|	ВозвратТоваровОтПокупателяТовары.СчетРасходов КАК СчетРасходов,
			|	ВозвратТоваровОтПокупателяТовары.СчетУчетаНДСПоРеализации КАК СчетУчетаНДС,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровОтПокупателяТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровОтПокупателя.Товары КАК ВозвратТоваровОтПокупателяТовары
			|ГДЕ
			|	ВозвратТоваровОтПокупателяТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации,
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента, 
			| Склад, СуммаДокумента, СуммаВключаетНДС");
	
		Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровПоставщикуТовары.Номенклатура,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК КоличествоДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Количество КАК Количество,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК ЦенаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Цена КАК Цена,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК СуммаДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.Сумма КАК Сумма,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоКорректировки,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДСДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СуммаНДС КАК СуммаНДС,
			|	ВозвратТоваровПоставщикуТовары.СчетУчета КАК СчетУчета,
			|	ВозвратТоваровПоставщикуТовары.СчетУчетаНДС КАК СчетУчетаНДСПоРеализации,
			|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТДДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.НомерГТД КАК НомерГТД,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхожденияДоИзменения,
			|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения КАК СтранаПроисхождения
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
			|		ПО ВозвратТоваровПоставщикуТовары.Ссылка = ВозвратТоваровПоставщику.Ссылка
			|ГДЕ
			|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка";
			
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнчДокументаРеализации = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		ЗаполнитьЗначенияСвойств(
			Объект, Объект.ДокументРеализации, 
			"Организация, Контрагент, ДоговорКонтрагента, ВалютаДокумента,
			| СуммаВключаетНДС");
			
		
		Запрос.Текст = "ВЫБРАТЬ
			|	СУММА(ОтчетКомитентуОПродажахТовары.СуммаНДСВознаграждения) КАК СуммаНДСВознаграждения,
			|	СУММА(ОтчетКомитентуОПродажахТовары.СуммаВознаграждения) КАК СуммаВознаграждения,
			|	ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка
			|ПОМЕСТИТЬ ТаблицаСумм
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
			|ГДЕ
			|	ОтчетКомитентуОПродажахТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетКомитентуОПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтчетКомитентуОПродажах.УслугаПоВознаграждению КАК Номенклатура,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаДоКорректировки,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаДоИзменения,
			|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК Сумма,
			|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДСДоИзменения,
			|	ОтчетКомитентуОПродажах.СтавкаНДСВознаграждения КАК СтавкаНДС,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДСДоКорректировки,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДСДоИзменения,
			|	ТаблицаСумм.СуммаНДСВознаграждения КАК СуммаНДС,
			|	ОтчетКомитентуОПродажах.СчетДоходов,
			|	ОтчетКомитентуОПродажах.Субконто,
			|	ОтчетКомитентуОПродажах.СчетУчетаНДСПоРеализации
			|ИЗ
			|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСумм КАК ТаблицаСумм
			|		ПО ОтчетКомитентуОПродажах.Ссылка = ТаблицаСумм.Ссылка
			|ГДЕ
			|	ОтчетКомитентуОПродажах.Ссылка = &Ссылка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Объект.СуммаДокумента = Выборка.Сумма;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.СчетРасходов) Тогда
				СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Объект.Организация,
																							Выборка.Номенклатура);
				НоваяСтрока.СчетРасходов = СчетаУчета.СчетРасходов;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьКурсИКратностьВзаиморасчетов(ПолученныеДанные)
	Если (ЗначениеЗаполнено(ПолученныеДанные.КурсВзаиморасчетов) И ЗначениеЗаполнено(ПолученныеДанные.КратностьВзаиморасчетов))
		ИЛИ НЕ ЗначениеЗаполнено(ПолученныеДанные.ВалютаДокумента) Тогда
		Возврат;
	КонецЕсли;
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ПолученныеДанные.ВалютаДокумента, ПолученныеДанные.Дата);
		
	ПолученныеДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ПолученныеДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
КонецПроцедуры
Процедура ЗаполнитьМассивВыборкиДолгиАвансыКредитыЗаймы(МассивВыборки, ПараметрыКонвертации, ИмяТаблицы)
	// "ДолгиКлиенты,АвансыКлиенты,ДолгиПоставщики,АвансыПоставщики,КредитыЗаймыРез"
	
	ДатаОстатков = ПараметрыКонвертации.ДатаОстатков;
	
	ТаблицаОстатков = ПараметрыКонвертации.ТаблицаДолгиАвансыКредитыЗаймы[ИмяТаблицы];
	
	ТекущаяОрганизация = Неопределено;
	ДанныеИБ = Неопределено;
	
	Для Каждого Строка Из ТаблицаОстатков Цикл
		Если ТекущаяОрганизация = Неопределено Или Строка.Организация <> ТекущаяОрганизация Тогда
			ТекущаяОрганизация = Строка.Организация;
			
			Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
				МассивВыборки.Добавить(ДанныеИБ);
			КонецЕсли;
					
			ДанныеИБ = Новый Структура("Дата, Организация, Расчеты");
			ДанныеИБ.Дата = ДатаОстатков;
			ДанныеИБ.Организация = Строка.Организация;
			
			ДанныеИБ.Расчеты = Новый ТаблицаЗначений;
			Колонки = ДанныеИБ.Расчеты.Колонки;
			Колонки.Добавить("Контрагент");
			Колонки.Добавить("ВалютаВзаиморасчетов");
			Колонки.Добавить("СуммаРегл");
			Колонки.Добавить("Сумма");
			Колонки.Добавить("ВидРасчетов");
			Колонки.Добавить("РасчетныйДокумент");
			Колонки.Добавить("ДатаРасчетногоДокумента");
			Колонки.Добавить("НомерРасчетногоДокумента");
		КонецЕсли;
		
		Если Строка.Сумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеИБ.Расчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Если НоваяСтрока.СуммаРегл = 0 Или Не ЗначениеЗаполнено(НоваяСтрока.СуммаРегл) Тогда
			НоваяСтрока.СуммаРегл = НоваяСтрока.Сумма;
		КонецЕсли;		
		
	КонецЦикла;
	
	Если ДанныеИБ <> Неопределено И ДанныеИБ.Расчеты.Количество()>0 Тогда
		МассивВыборки.Добавить(ДанныеИБ);
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьНеПустыеСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолученныеДанные[СвойствоИБ]) Тогда
			ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьПустыеПоляВПолученныхДанных(ПолученныеДанные, ДанныеИБ, РеквизитыОбъекта)
	Для Каждого РеквизитОбъекта Из РеквизитыОбъекта Цикл
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные[РеквизитОбъекта]) Тогда
			ПолученныеДанные[РеквизитОбъекта] = ДанныеИБ[РеквизитОбъекта];
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено)
	Для Каждого СвойствоОбъекта Из КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСтруктуруДанныхСтроки(СоответствиеРеквизитовТЧ, СтрокаXDTO, СтруктураДанныхСтроки)
	Для Каждого ЭлементСоответствия ИЗ СоответствиеРеквизитовТЧ Цикл
		ЗначениеРеквизитаТЧ = СтрокаXDTO[ЭлементСоответствия.Значение];
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизитаТЧ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураДанныхСтроки.Вставить(ЭлементСоответствия.Ключ,ЗначениеРеквизитаТЧ); 
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСубконтоВПолученныхДанных(ПолученныеДанные, ДанныеИБ, ИмяРеквизита, СоответствиеСубконто = Неопределено)
	Для Каждого СтрокаВидаСубконто Из ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом.ВидыСубконто Цикл
	    ТипСубконто = СтрокаВидаСубконто.ВидСубконто.ТипЗначения;
	    ИмяРеквизитаСубконто = ИмяРеквизита + СтрокаВидаСубконто.НомерСтроки;
	    Субконто    = ПолученныеДанные[ИмяРеквизитаСубконто];
	
	    Если ТипСубконто.ПривестиЗначение(Субконто) <> Субконто Тогда
	        ПолученныеДанные[ИмяРеквизитаСубконто] = ТипСубконто.ПривестиЗначение(Субконто);
	    КонецЕсли;
	    ТекСубконтоЗаполнено = Ложь;
		
	    // Заполнение значением, переданным явно (значение для заполнения).
		Если СоответствиеСубконто <> Неопределено Тогда
			Для Каждого СубконтоДляЗаполнения Из СоответствиеСубконто Цикл
				Если ЗначениеЗаполнено(СубконтоДляЗаполнения.Значение) Тогда
					Попытка
						ТекВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СубконтоДляЗаполнения.Ключ];
					Исключение
						Продолжить;
					КонецПопытки;
					
					Если СтрокаВидаСубконто.ВидСубконто = ТекВидСубконто Тогда
						ПолученныеДанные[ИмяРеквизитаСубконто] = СубконтоДляЗаполнения.Значение;
						ТекСубконтоЗаполнено = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	    Если ДанныеИБ <> Неопределено Тогда
	    	Если ТекСубконтоЗаполнено Тогда
	    	   // Перенос получившегося субконто в ДанныеИБ
	        	ДанныеИБ[ИмяРеквизитаСубконто] = ПолученныеДанные[ИмяРеквизитаСубконто];
	    	Иначе
		    	// Возможно этот вид субконто был заполнен в ДанныеИБ.
		    	Для Ном = 1 По 3 Цикл
					Если ТипСубконто.Типы().Найти(ТипЗнч(ДанныеИБ[ИмяРеквизита+Ном])) <> Неопределено Тогда
						ПолученныеДанные[ИмяРеквизитаСубконто] = ДанныеИБ[ИмяРеквизита+Ном];
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетаУчета(Объект)
	// Заполняем только незаполненные счета учета
	Отбор = Новый Структура;
	Отбор.Вставить("НеЗаполненныеРеквизиты", Истина);
	
	СчетаУчетаВДокументах.Заполнить(Объект, Отбор);
КонецПроцедуры
Процедура ЗаполнитьСчетаУчетаВозвратнойТары(Объект)
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли; 
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(	Объект.Организация,
																						СтрокаТаблицы.Номенклатура,
																						Объект.Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьСчетРасчетовВПолученныхДанных(ПолученныеДанные, ДанныеИБ, СчетПоУмолчанию = Неопределено)
	Если ДанныеИБ <> Неопределено Тогда
		Если ЗначениеЗаполнено(ДанныеИБ.СчетУчетаРасчетовСКонтрагентом) 
			И НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом) Тогда
			ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = ДанныеИБ.СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом)
		И СчетПоУмолчанию <> Неопределено Тогда
		ПолученныеДанные.СчетУчетаРасчетовСКонтрагентом = СчетПоУмолчанию;
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, ИмяТабличнойЧасти, ПоляДляОтбора, ПоляДляЗаполнения)
	// Заполняет ПоляДляЗаполнения табличной части значениями ДанныхЗаполнения
	
	СтруктураОтбора = Новый Структура(ПоляДляОтбора);
	СтруктураОтбора.Вставить("ТЧ", ИмяТабличнойЧасти);
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если Строка.ЕстьВДокументеРеализации Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка, ПоляДляОтбора);
			ДанныеЗаполненияСтроки = ДанныеЗаполнения.НайтиСтроки(СтруктураОтбора);
			Если ДанныеЗаполненияСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строка, ДанныеЗаполненияСтроки[0], ПоляДляЗаполнения);
				Если ДанныеЗаполненияСтроки.Количество() > 1 Тогда
					ДанныеЗаполнения.Удалить(ДанныеЗаполнения.Индекс(ДанныеЗаполненияСтроки[0]));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки, КолонкиДляВключения = "", КолонкиДляИсключения = "")
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
КонецПроцедуры
Процедура ЗаполнитьЦенуЕслиНеУказана(Таблица, ПостфиксКолонок = "")
	ИмяКолонкиЦена = "Цена" + ПостфиксКолонок;
	ИмяКолонкиКоличество = "Количество" + ПостфиксКолонок;
	ИмяКолонкиСумма = "Сумма" + ПостфиксКолонок;
	
	Для Каждого Строка Из Таблица Цикл
		Если НЕ ЗначениеЗаполнено(Строка[ИмяКолонкиЦена]) Тогда
			Если ЗначениеЗаполнено(Строка[ИмяКолонкиКоличество]) Тогда
				Строка[ИмяКолонкиЦена] = Окр(Строка[ИмяКолонкиСумма] / Строка[ИмяКолонкиКоличество], 2);
			Иначе
				Строка[ИмяКолонкиЦена] = Строка[ИмяКолонкиСумма];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена)
	Если ЗначениеЗаполнено(ПолученныеДанные.Номер) Тогда
	
		Если Не КомпонентыОбмена.ЭтоОбменЧерезПланОбмена
			Или Не КомпонентыОбмена.УзелКорреспондентаОбъект.УстанавливатьПечатьПрефиксаИБДокументов Тогда
			Возврат;
		КонецЕсли;
		
		ПрефиксИнформационнойБазы = ОбменДаннымиУТ.ПрефиксИнформационнойБазыИзНомера(ПолученныеДанные.Номер);
		Если ПрефиксИнформационнойБазы <> ""
			И КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов.Найти(ПрефиксИнформационнойБазы) = Неопределено Тогда
			КомпонентыОбмена.ПараметрыКонвертации.ПрефиксыЗагруженныхДокументов.Добавить(ПрефиксИнформационнойБазы);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Функция ЗапросПоОстаткамТоваров(МассивСчетовУчета, ДатаОстатков)
	// Сортировка счетов учета.
	СчетаУчетаН   = Новый Массив; // Cчета с суммовым учетом только по номенклатуре.
	СчетаУчетаНС  = Новый Массив; // Cчета с суммовым учетом по номенклатуре и складам.
	СчетаУчетаНП  = Новый Массив; // Cчета с суммовым учетом по номенклатуре и партиям.
	СчетаУчетаНПС = Новый Массив; // Cчета с суммовым учетом по номенклатуре, складам и партиям.
	СчетаУчетаНК  = Новый Массив; // Cчета с суммовым учетом по контрагентам, и номенклатуре.
	СчетаУчетаНПК = Новый Массив; // Cчета с суммовым учетом по контрагентам, номенклатуре и партиям.
	СчетаУчетаНКС = Новый Массив; // Cчета с суммовым учетом по контрагентам, номенклатуре и складам.
	
	СчетаУчетаН_Склад  = Новый Массив; // Cчета с суммовым учетом только по номенклатуре и количественным по складу.
	СчетаУчетаНП_Склад = Новый Массив; // Cчета с суммовым учетом по номенклатуре и партиям и количественным по складу.
	СчетаУчетаНК_Склад = Новый Массив; // Cчета с суммовым учетом по номенклатуре и контрагентам и количественным по складу.
	
	УчетТоваров.СортировкаСчетовУчета(МассивСчетовУчета,
		СчетаУчетаН,
		СчетаУчетаНС,
		СчетаУчетаНП,
		СчетаУчетаНПС,
		СчетаУчетаНК,
		СчетаУчетаНПК,
		СчетаУчетаНКС,
		СчетаУчетаН_Склад,
		СчетаУчетаНП_Склад,
		СчетаУчетаНК_Склад);
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",     Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	
	ВидыСубконтоНПС = Новый Массив;
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНПС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментВремени",      Новый Граница(ДатаОстатков, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаУчетаН",        СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",       СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",       СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПС",      СчетаУчетаНПС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",  СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад", СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("ВидысубконтоН",      ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",     ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",     ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидыСубконтоНПС",    ВидыСубконтоНПС);
	Запрос.УстановитьПараметр("ПустойСклад",        Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",       Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",     Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	
	ТекстСуммыКоличественныхСкладов = "";
	ТекстыЗапросовДляОстатков = Новый Массив;
	
	// Если не ведется суммовой учет по складам, соберем остатки без учета складов.
	Если СчетаУчетаН_Склад.Количество() > 0 Тогда
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
		"ВЫБРАТЬ
		|	Остатки.Организация КАК Организация,
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Организация,
		|	Остатки.Счет,
		|	Остатки.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаН_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН_Склад), &ВидыСубконтоНС, ) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Субконто1,
		|	ОстаткиПоСкладам.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура";
	
	КонецЕсли;
	
	Если СчетаУчетаНП_Склад.Количество() > 0 Тогда
		
		Если ТекстСуммыКоличественныхСкладов <> "" Тогда
			ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
					|;
					|";
		КонецЕсли;
		
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + 
		"ВЫБРАТЬ
		|	Остатки.Организация КАК Организация,
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(Остатки.Субконто2, &ПустаяПартия) КАК ДокументПоступления,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Организация,
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	ОстаткиПоСкладам.Счет КАК СчетУчета,
		|	ОстаткиПоСкладам.Субконто1 КАК Номенклатура,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто2, &ПустаяПартия) КАК ДокументПоступления,
		|	ЕСТЬNULL(ОстаткиПоСкладам.Субконто3, &ПустойСклад) КАК Склад,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоОстатокДт
		|ПОМЕСТИТЬ ТаблицаСчетаУчетаНП_Склад
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП_Склад), &ВидыСубконтоНПС, ) КАК ОстаткиПоСкладам
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.Счет,
		|	ОстаткиПоСкладам.Субконто1,
		|	ОстаткиПоСкладам.Субконто2,
		|	ОстаткиПоСкладам.Субконто3
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	СчетУчета,
		|	Номенклатура,
		|	ДокументПоступления";
		
	КонецЕсли;
	
	Если СчетаУчетаН.Количество() > 0 И СчетаУчетаН_Склад.Количество() = 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаН), &ВидыСубконтоН, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Организация");
	
	ИначеЕсли СчетаУчетаН.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	ОстаткиПоСкладам.Склад,
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ТаблицаСчетаУчетаН_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаН КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.Организация = СуммовыеОстатки.Организация
		|			И ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.Склад");
	
	КонецЕсли;
	
	Если СчетаУчетаНС.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	&ПустаяПартия КАК ДокументПоступления,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация");
	
	КонецЕсли;
	
	Если СчетаУчетаНП.Количество() > 0 И СчетаУчетаНП_Склад.Количество() =  0 Тогда
	
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	Остатки.Субконто2 КАК ДокументПоступления,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация");
		
	ИначеЕсли СчетаУчетаНП.Количество() > 0 Тогда
		
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	ОстаткиПоСкладам.ДокументПоступления,
		|	ОстаткиПоСкладам.Склад,
		|	ОстаткиПоСкладам.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(ОстаткиПоСкладам.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Количество, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(СуммовыеОстатки.Сумма, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	ТаблицаСчетаУчетаНП_Склад КАК ОстаткиПоСкладам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетаУчетаНП КАК СуммовыеОстатки
		|		ПО ОстаткиПоСкладам.Организация = СуммовыеОстатки.Организация
		|			И ОстаткиПоСкладам.СчетУчета = СуммовыеОстатки.СчетУчета
		|			И ОстаткиПоСкладам.Номенклатура = СуммовыеОстатки.Номенклатура
		|			И ОстаткиПоСкладам.ДокументПоступления = СуммовыеОстатки.ДокументПоступления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиПоСкладам.Организация,
		|	ОстаткиПоСкладам.СчетУчета,
		|	ОстаткиПоСкладам.Номенклатура,
		|	ОстаткиПоСкладам.ДокументПоступления,
		|	ОстаткиПоСкладам.Склад");
	
	КонецЕсли;
	
	Если СчетаУчетаНПС.Количество() > 0 Тогда
	
		ТекстыЗапросовДляОстатков.Добавить(
		"ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументПоступленияДата,
		|	Остатки.Субконто2 КАК ДокументПоступления,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК КоличествоПоСкладу,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментВремени, Счет В (&СчетаУчетаНПС), &ВидыСубконтоНПС, ) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация");
	
	КонецЕсли;
	
	// Удаляем ПОМЕСТИТЬ ВТ_Остатки из всех запросов, кроме первого
	ТекстПоместитьВТ_Остатки = "
	|ПОМЕСТИТЬ ВТ_Остатки";
	
	Для НомерЗапроса = 1 ПО ТекстыЗапросовДляОстатков.Количество() - 1 Цикл
		ТекстыЗапросовДляОстатков[НомерЗапроса] = СтрЗаменить(ТекстыЗапросовДляОстатков[НомерЗапроса], ТекстПоместитьВТ_Остатки,"");
	КонецЦикла;
	
	Если ТекстСуммыКоличественныхСкладов <> "" Тогда
		ТекстСуммыКоличественныхСкладов = ТекстСуммыКоличественныхСкладов + "
				|;
				|";
	КонецЕсли;
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	Текст = ТекстСуммыКоличественныхСкладов + СтрСоединить(ТекстыЗапросовДляОстатков, ТекстОбъединитьВсе);
	
	Запрос.Текст = Текст;
	
	Возврат Запрос;
КонецФункции
Функция ИмяПКОПоXDTOДокументаОснования(XDTOДокументаОснования)
	ИмяПКО = Неопределено;
	
	ТипДокументаОснования = XDTOДокументаОснования.ТипЗначения;
	
	Если СтрНайти(ТипДокументаОснования, "ОтчетКомиссионера") > 0 Тогда
		ИмяПКО = "Документ_ОтчетКомиссионераОПродажах_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровПоставщику") > 0 Тогда
		ИмяПКО = "Документ_ВозвратТоваровПоставщику";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураПолученный") > 0 Тогда
		ИмяПКО = "Документ_СчетФактураПолученный_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СчетФактураВыданный") > 0 Тогда
		ИмяПКО = "Документ_СчетФактураВыданный_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "РеализацияТоваровУслуг") > 0 Тогда
		ИмяПКО = "Документ_РеализацияТоваровУслуг";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетКомитенту") > 0 Тогда
		ИмяПКО = "Документ_ОтчетКомитентуОПродажах_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "АктВыполненныхРабот") > 0 Тогда
		ИмяПКО = "Документ_АктВыполненныхРабот";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ВозвратТоваровОтПокупателя") > 0 Тогда
		ИмяПКО = "Документ_ВозвратТоваровОтПокупателя";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПоступлениеТоваровУслуг") > 0 Тогда
		ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "АвансовыйОтчет") > 0 Тогда
		ИмяПКО = "Документ_АвансовыйОтчет_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "РКОРасчетыСКонтрагентами") > 0 Тогда
		ИмяПКО = "Документ_РКОРасчетыСКонтрагентами_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПКОРасчетыСКонтрагентами") > 0 Тогда
		ИмяПКО = "Документ_ПКОРасчетыСКонтрагентами_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "СБДСРасчетыСКонтрагентами") > 0 Тогда
		ИмяПКО = "Документ_СБДСРасчетыСКонтрагентами_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ПБДСРасчетыСКонтрагентами") > 0 Тогда
		ИмяПКО = "Документ_ПБДСРасчетыСКонтрагентами_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаДолга") > 0 Тогда
		ИмяПКО = "Документ_КорректировкаДолга_Получение";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "КорректировкаПоступленияТоваров") > 0 Тогда
		ИмяПКО = "Документ_КорректировкаПоступления";
	ИначеЕсли СтрНайти(ТипДокументаОснования, "ОтчетПереработчика") > 0 Тогда
		ИмяПКО = "Документ_ОтчетПереработчика_Получение";
	КонецЕсли;
	
	Возврат ИмяПКО;
КонецФункции
Функция КонтрагентРозничныйПокупатель(КомпонентыОбмена)
	ПараметрыКонвертации = КомпонентыОбмена.ПараметрыКонвертации;
	Если ЗначениеЗаполнено(ПараметрыКонвертации.КонтрагентРозничныйПокупатель) Тогда
		Возврат ПараметрыКонвертации.КонтрагентРозничныйПокупатель;
	КонецЕсли;
	
	Элемент = Справочники.Контрагенты.ПустаяСсылка();
	
	НаименованиеЭлементаДляОбменаПоУмолчанию = НСтр("ru='Розничный покупатель'");
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	НЕ Контрагенты.ПометкаУдаления
		|	И Контрагенты.Наименование = &НаименованиеЭлементаДляОбменаПоУмолчанию");
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаДляОбменаПоУмолчанию", НаименованиеЭлементаДляОбменаПоУмолчанию);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элемент = Выборка.Ссылка;
	Иначе
	
		// Создание элемента для обмена с заданными параметрами
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование = НаименованиеЭлементаДляОбменаПоУмолчанию;
		КонтрагентОбъект.НаименованиеПолное = КонтрагентОбъект.Наименование;
		КонтрагентОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонтрагентОбъект.УстановитьНовыйКод();
	
		Попытка
			КонтрагентОбъект.Записать();
			Элемент = КонтрагентОбъект.Ссылка;
		Исключение
		КонецПопытки
		
	КонецЕсли;
	
	ПараметрыКонвертации.КонтрагентРозничныйПокупатель = Элемент;
	
	Возврат Элемент
КонецФункции
Процедура КорректировкаДолга_ПередЗаписьюПолученныхДанных(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ)
	УстановитьВидОперацииКорректировкиДолга(ПолученныеДанные);
	
	// Заполним значение СуммаНУ для дебиторской и кредиторской задолженности
	Для Каждого Задолженность ИЗ ПолученныеДанные.ДебиторскаяЗадолженность Цикл
		Задолженность.СуммаНУ = Задолженность.Сумма;
	КонецЦикла;
	
	// Заполним значение СуммаНУ для дебиторской и кредиторской задолженности
	Для Каждого Задолженность ИЗ ПолученныеДанные.КредиторскаяЗадолженность Цикл
		Задолженность.СуммаНУ = Задолженность.Сумма;
	КонецЦикла;
	
	// Далее идет мержевание загруженной и существующей версии.
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Переносим те свойства, которые указаны в ПКС.
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные.
	// Дебиторская задолженность.
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("ДоговорКонтрагента");
	МассивКлючевыхПолей.Добавить("КурсВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("КратностьВзаиморасчетов");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаНУ");
	МассивКлючевыхПолей.Добавить("СуммаВзаиморасчетов");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.ДебиторскаяЗадолженность,
		ДанныеИБ.ДебиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.ДебиторскаяЗадолженность.Загрузить(ПолученныеДанные.ДебиторскаяЗадолженность.Выгрузить());
	
	// Кредиторская задолженность.
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.КредиторскаяЗадолженность,
		ДанныеИБ.КредиторскаяЗадолженность,
		МассивКлючевыхПолей,
		"СчетУчетаРасчетов,КорСчетУчетаРасчетов");
	ДанныеИБ.КредиторскаяЗадолженность.Загрузить(ПолученныеДанные.КредиторскаяЗадолженность.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция НайтиСоздатьНазначениеИспользованияСпецодежды(Номенклатура, СрокЭксплуатации, НаименованиеНазначенияИспользования, НаименованиеСпособаОтраженияРасходов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка
	|ИЗ Справочник.НазначенияИспользования
	|ГДЕ Владелец = &Номенклатура И СрокПолезногоИспользования = &СрокЭксплуатации
	|	И (Наименование = &НаименованиеНазначения ИЛИ &НаименованиеНазначения = """")";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СрокЭксплуатации", СрокЭксплуатации);
	Запрос.УстановитьПараметр("НаименованиеНазначения", СокрЛП(НаименованиеНазначенияИспользования));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	//Попытка получить способ погашения расходов
	ТекСпособОтраженияРасходов = НайтиСоздатьСпособПогашенияРасходов(НаименованиеСпособаОтраженияРасходов);
	
	НазначениеИспользованияОбъект = Справочники.НазначенияИспользования.СоздатьЭлемент();
	НазначениеИспользованияОбъект.Владелец = Номенклатура;
	НазначениеИспользованияОбъект.Наименование = НаименованиеНазначенияИспользования;
	НазначениеИспользованияОбъект.Количество = 1;
	назначениеИспользованияОбъект.СрокПолезногоИспользования = СрокЭксплуатации;
	Если СрокЭксплуатации < 12 Тогда
		НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.ПогашатьСтоимостьПриПередачеВЭксплуатацию;
	Иначе
		НазначениеИспользованияОбъект.СпособПогашенияСтоимости = Перечисления.СпособыПогашенияСтоимости.Линейный;
	КонецЕсли;
	НазначениеИспользованияОбъект.СпособОтраженияРасходов = текСпособОтраженияРасходов;
	НазначениеИспользованияОбъект.Записать();
	Возврат НазначениеИспользованияОбъект.Ссылка;
КонецФункции
Функция НайтиСоздатьРегистрациюВНалоговомОргане(КПП, ОКАТО, Владелец, ВыполнятьПоиск = Истина)
	РегистрацияНО = Неопределено;
	СоздаватьЗаписьРегистра = Истина;
	Если ВыполнятьПоиск Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Спр.Ссылка,
		|	ВЫБОР КОГДА ИсторияРегистраций.РегистрацияВНалоговомОргане ЕСТЬ NULL Тогда Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК СоздаватьЗаписьРегистра
		|ИЗ Справочник.РегистрацииВНалоговомОргане КАК Спр
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(, СтруктурнаяЕдиница = &Владелец) КАК ИсторияРегистраций
		|	ПО Спр.Ссылка = ИсторияРегистраций.РегистрацияВНалоговомОргане
		|ГДЕ Спр.Владелец = &Владелец
		|	И Спр.ПометкаУдаления = Ложь
		|	И Спр.КодПоОКАТО = &ОКАТО
		|	И Спр.Код = &Код
		|	И Спр.КПП = &КПП";
		Запрос.УстановитьПараметр("Владелец", Владелец);
		Запрос.УстановитьПараметр("ОКАТО", ОКАТО);
		Запрос.УстановитьПараметр("КПП", КПП);
		Запрос.УстановитьПараметр("Код", Лев(КПП, 4));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РегистрацияНО = Выборка.Ссылка;
			СоздаватьЗаписьРегистра = Выборка.СоздаватьЗаписьРегистра;
		КонецЕсли;
	КонецЕсли;
	Если РегистрацияНО = Неопределено Тогда
		СправочникОбъект = Справочники.РегистрацииВНалоговомОргане.СоздатьЭлемент();
		СправочникОбъект.Владелец = Владелец;
		СправочникОбъект.КПП = КПП;
		СправочникОбъект.Код = Лев(КПП, 4);
		СправочникОбъект.КодПоОКАТО = ОКАТО;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		РегистрацияНО = СправочникОбъект.Ссылка;
	КонецЕсли;
	Если СоздаватьЗаписьРегистра Тогда
		НовЗапись = РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.СоздатьМенеджерЗаписи();
		НовЗапись.СтруктурнаяЕдиница = Владелец;
		НовЗапись.РегистрацияВНалоговомОргане = РегистрацияНО;
		НовЗапись.Период = ТекущаяДатаСеанса();
		НовЗапись.Записать();
	КонецЕсли;
	Возврат РегистрацияНО;
КонецФункции
Функция НайтиСоздатьСпособПогашенияРасходов(НаименованиеСпособаОтраженияРасходов)
	//Попытка получить способ погашения расходов
	ТекСпособОтраженияРасходов = Неопределено;
	Если ЗначениеЗаполнено(НаименованиеСпособаОтраженияРасходов) Тогда
		ТекСпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию(НаименованиеСпособаОтраженияРасходов);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекСпособОтраженияРасходов) Тогда
		//Попытка найти способ отражения расходов по умолчанию
		НаименованиеПоУмолчанию = НСтр("ru='Способ отражения расходов по умолчанию'");
		ТекСпособОтраженияРасходов = Справочники.СпособыОтраженияРасходовПоАмортизации.НайтиПоНаименованию(НаименованиеПоУмолчанию);
	
		Если НЕ ЗначениеЗаполнено(ТекСпособОтраженияРасходов) Тогда
			СпособНазначенияОбъект = Справочники.СпособыОтраженияРасходовПоАмортизации.СоздатьЭлемент();
			СпособНазначенияОбъект.Наименование = НаименованиеПоУмолчанию;
			СтрокаЗатраты = СпособНазначенияОбъект.Способы.Добавить();
			СтрокаЗатраты.КОэффициент = 1;
			СтрокаЗатраты.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
			
			СпособНазначенияОбъект.Записать();
			ТекСпособОтраженияРасходов = СпособНазначенияОбъект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекСпособОтраженияРасходов;
КонецФункции
Процедура ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ)
	Если ПолученныеДанные.Организация <> ДанныеИБ.Организация
		И ПолученныеДанные.Контрагент <> ДанныеИБ.Контрагент
		И ПолученныеДанные.ДоговорКонтрагента <> ДанныеИБ.ДоговорКонтрагента Тогда
		
		ДанныеИБ.СчетУчетаРасчетовСКонтрагентом = Неопределено;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоАвансам") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоАвансам = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоПретензиям") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоПретензиям = Неопределено;
		КонецЕсли;
		
		Если ДанныеИБ.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовПоТаре") <> Неопределено Тогда
			ДанныеИБ.СчетУчетаРасчетовПоТаре = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОбработатьЗагруженныеДопРеквизитыИСведения(КомпонентыОбмена)
	ДопРеквизитыИСведения = КомпонентыОбмена.ПараметрыКонвертации.ЗагруженныеДопРеквизитыИСведения;
	Если ДопРеквизитыИСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеТипОбъектаИНабор = Новый Соответствие;
	ИменаПредопределенных = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
	Для Каждого СтрокаДопРеквизиты ИЗ ДопРеквизитыИСведения Цикл
		// Получение набора доп реквизитов.
		НаборДопРеквизитов = СоответствиеТипОбъектаИНабор.Получить(СтрокаДопРеквизиты.ТипОбъекта);
		Если НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка() Тогда
			// На прошлых итерациях не удалось найти набор доп реквизитов.
			Продолжить;
		ИначеЕсли НаборДопРеквизитов = Неопределено Тогда
			// Поиск набора еще не выполнялся.
			// 1 этап - прямой поиск.
			ИмяПредопределенногоЭлемента = СтрЗаменить(СтрокаДопРеквизиты.ТипОбъекта, ".", "_");
			Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
				НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
				Если НаборДопРеквизитов.ЭтоГруппа Тогда
					НаборДопРеквизитов = Неопределено;
				КонецЕсли;
			КонецЕсли;
			// 2 этап - поиск общего элемента.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяПредопределенногоЭлемента = ИмяПредопределенногоЭлемента + "_Общие";
				Если ИменаПредопределенных.Найти(ИмяПредопределенногоЭлемента) <> Неопределено Тогда
					НаборДопРеквизитов = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяПредопределенногоЭлемента];
					Если НаборДопРеквизитов.ЭтоГруппа Тогда
						НаборДопРеквизитов = Неопределено;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			// 3 этап - поиск по наименованию.
			Если НаборДопРеквизитов = Неопределено Тогда
				ИмяТипаОбъекта = Прав(СтрокаДопРеквизиты.ТипОбъекта, СтрДлина(СтрокаДопРеквизиты.ТипОбъекта) - Найти(СтрокаДопРеквизиты.ТипОбъекта, "."));
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка
				|ИЗ Справочник.НаборыДополнительныхРеквизитовИСведений
				|ГДЕ ЭтоГруппа = Ложь И Наименование ПОДОБНО &ИмяПоиск";
				Запрос.УстановитьПараметр("ИмяПоиск", "%"+ИмяТипаОбъекта+"%");
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					НаборДопРеквизитов = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			Если НаборДопРеквизитов = Неопределено Тогда
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
				Продолжить;
			Иначе
				СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитов);
			КонецЕсли;
		КонецЕсли; 
		// Преобразование свойства из XDTO в ссылку.
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
							СтрокаДопРеквизиты.Свойство, 
							ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"),
							"ПолучитьСсылку").Ссылка;
		Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
			// Возможно на этапе анализа данных, когда данные еще не загружены в ИБ.					
			Продолжить;
		КонецЕсли;
		
		// Проверка типа свойства.
		Если ЗначениеЗаполнено(СтрокаДопРеквизиты.ТипЗначения) Тогда
			ТипЗначенияСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ТипЗначения");
			ДопЗначенияИспользуются = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойствоСсылка, "ДополнительныеЗначенияИспользуются");
			ИсключитьТипДопЗначения = Ложь;
	
			// Для нового свойства по умолчанию автоматически может установиться тип "ЗначенияСвойствОбъектов".
			// Его надо сбросить, если этот тип не соответствует типу значения.
			Если ТипЗначенияСвойства <> Неопределено 
				// Признак "правомерно" установленного типа "ЗначенияСвойствОбъектов".
				И НЕ ДопЗначенияИспользуются 
				И ТипЗначенияСвойства.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов")) Тогда
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
					СвойствоОбъект.ОбменДанными.Загрузка = Истина;
					СвойствоОбъект.Записать();
					Продолжить;
				Иначе
					Если ТипЗначенияСвойства.Типы().Количество() = 1 Тогда
						ТипЗначенияСвойства = Неопределено;
					Иначе
						ИсключитьТипДопЗначения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если (ТипЗначенияСвойства = Неопределено) 
				ИЛИ НЕ ТипЗначенияСвойства.СодержитТип(СтрокаДопРеквизиты.ТипЗначения) Тогда
				// Следует дополнить тип свойства.
				СвойствоОбъект = СвойствоСсылка.ПолучитьОбъект();
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(СтрокаДопРеквизиты.ТипЗначения);
				Если СтрокаДопРеквизиты.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
					СвойствоОбъект.ДополнительныеЗначенияИспользуются = Истина;
				КонецЕсли;
				Если ТипЗначенияСвойства <> Неопределено 
					И ТипЗначенияСвойства.Типы().Количество() > 0 Тогда
					// Составной тип.
					Для Каждого ТекТип Из ТипЗначенияСвойства.Типы() Цикл
						Если ИсключитьТипДопЗначения И ТекТип = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
							Продолжить;
						КонецЕсли;
						МассивТипов.Добавить(ТекТип);
					КонецЦикла;
				КонецЕсли;
				СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				СвойствоОбъект.ОбменДанными.Загрузка = Истина;
				СвойствоОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
		
		// Проверка наличия в наборе доп реквизита или доп сведения.
		ИмяТабЧасти = ?(СтрокаДопРеквизиты.ЭтоДопСведение, "ДополнительныеСведения", "ДополнительныеРеквизиты");
		Если НаборДопРеквизитов[ИмяТабЧасти].Найти(СвойствоСсылка, "Свойство") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(НаборДопРеквизитов) = Тип("СправочникСсылка.НаборыДополнительныхРеквизитовИСведений") Тогда
			// Набор еще не менялся. Получение объекта и размещение его в соответствии.
			НаборДопРеквизитовОбъект = НаборДопРеквизитов.ПолучитьОбъект();
			СоответствиеТипОбъектаИНабор.Вставить(СтрокаДопРеквизиты.ТипОбъекта, НаборДопРеквизитовОбъект); 
		Иначе
			НаборДопРеквизитовОбъект = НаборДопРеквизитов;
		КонецЕсли;
		НаборДопРеквизитовОбъект.ОбменДанными.Загрузка = Истина;
		СтрокаТЧ = НаборДопРеквизитовОбъект[ИмяТабЧасти].Добавить();
		СтрокаТЧ.Свойство = СвойствоСсылка;	
	КонецЦикла;
	// Запись измененных наборов.
	Для Каждого ЭлементСоответствияНабора ИЗ СоответствиеТипОбъектаИНабор Цикл
		Если ТипЗнч(ЭлементСоответствияНабора.Значение) = Тип("СправочникОбъект.НаборыДополнительныхРеквизитовИСведений") Тогда
			НаборДопРеквизитовОбъект = ЭлементСоответствияНабора.Значение;
			НаборДопРеквизитовОбъект.КоличествоРеквизитов = Формат(НаборДопРеквизитовОбъект.ДополнительныеРеквизиты.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			
			НаборДопРеквизитовОбъект.КоличествоСведений   = Формат(НаборДопРеквизитовОбъект.ДополнительныеСведения.НайтиСтроки(
				Новый Структура("ПометкаУдаления", Ложь)).Количество(), "ЧГ=");
			НаборДопРеквизитовОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОпределитьСтавкуНДС_Отправка(ТабличнаяЧасть, НДСПоСтавкам2и4)
	ТабличнаяЧасть.Колонки.Добавить("СтавкаНДССтрокой");
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Строка.СтавкаНДССтрокой = "НДС0";
		ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			Строка.СтавкаНДССтрокой = "БезНДС";
		Иначе
			Если НДСПоСтавкам2и4 Тогда
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18
					Или Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					Строка.СтавкаНДССтрокой = "НДС4";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
					ИЛИ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
					Строка.СтавкаНДССтрокой = "НДС4_104";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС2";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС2_102";
				КонецЕсли;
			Иначе
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
					Строка.СтавкаНДССтрокой = "НДС18";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
					Строка.СтавкаНДССтрокой = "НДС18_118";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
					Строка.СтавкаНДССтрокой = "НДС20";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
					Строка.СтавкаНДССтрокой = "НДС20_120";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
					Строка.СтавкаНДССтрокой = "НДС10";
				ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
					Строка.СтавкаНДССтрокой = "НДС10_110";
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	ТабличнаяЧасть.Колонки.Удалить("СтавкаНДС");
	ТабличнаяЧасть.Колонки.СтавкаНДССтрокой.Имя = "СтавкаНДС";
КонецПроцедуры
Функция ОпределитьТипЗапасовПоСчетуУчета(СчетУчета)
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат "СобственныеТовары";
	КонецЕсли;
		
	Если СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах Или СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле Тогда
		Возврат "СобственныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеТоварыОтгруженные
		Или  СчетУчета = ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПрочиеТоварыОтгруженные 
		Или СчетУчета = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости Тогда
		
		Возврат "КомиссионныеТовары";
	ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.Тара Или СчетУчета = ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя Тогда
		Возврат "ВозвратнаяТара";
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы) Тогда
		Если СчетУчета = ПланыСчетов.Хозрасчетный.Тара Тогда
			Возврат "ПрочиеМатериалы";
		ИначеЕсли СчетУчета = ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку Тогда
			Возврат "СырьеИМатериалы";
		ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации) Тогда
			Возврат "СпецоснасткаИСпецодеждаНаСкладе";
		ИначеЕсли СчетУчета.Предопределенный Тогда
			//Все остальные предопределенные субсчета 10-го счета соответствуют именам типов запасов
			Возврат СчетУчета.ИмяПредопределенныхДанных;	
		КонецЕсли;
	КонецЕсли;
	Возврат "СобственныеТовары";
КонецФункции
Процедура ОприходованиеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, ПараметрыКонвертации);
	
	// Статья прочих доходов/расходов
	Если НЕ ЗначениеЗаполнено(ПолученныеДанные.СтатьяПрочихДоходовРасходов) Тогда
		Если ЗначениеЗаполнено(ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда 
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ПараметрыКонвертации.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров;
		Иначе
			ПолученныеДанные.СтатьяПрочихДоходовРасходов = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.ОприходованиеИзлишков");
		КонецЕсли;
	КонецЕсли;
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Заменяем свойства, которые получили из XDTO
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
					
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("ЦенаВРознице");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция ОсновнойДоговорКонтрагента(Объект, Организация, Контрагент, ВалютаВзаиморасчетов)
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		// Не заполнены ключевые свойства
		// В этом случае ничего не делаем.
		Возврат Неопределено;
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	// Найдем договор по умолчанию для данного вида договора
	ДополнительныеПараметры = Новый Структура();
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ДополнительныеПараметры.Вставить("ВалютаВзаиморасчетов", Новый Структура("ЗначениеОтбора", ВалютаВзаиморасчетов));
	КонецЕсли;
	
	ВидДоговора = РаботаСДоговорамиКонтрагентовБП.ВидДоговораПоОбъекту(Объект);
	СписокВидовДоговоров = Новый СписокЗначений();
	СписокВидовДоговоров.Добавить(ВидДоговора);
	
	ДоговорКонтрагента = Неопределено;
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента, Контрагент, ГоловнаяОрганизация, СписокВидовДоговоров, ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ДоговорКонтрагента;
	Иначе
		// Проверим, что основной договор данного вида существует, но не подходит по каким-то другим свойствам
		// (в этом случае он не будет определен в РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента).
		// Если основной договор существует, то ничего не делаем.
		// Если не существует, то создаем новый договор и назначаем его основным.
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", ГоловнаяОрганизация);
		Запрос.Параметры.Вставить("Контрагент",  Контрагент);
		Запрос.Параметры.Вставить("ВидДоговора", ВидДоговора);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеДоговорыКонтрагента.Договор
		|ИЗ
		|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
		|ГДЕ
		|	ОсновныеДоговорыКонтрагента.Организация = &Организация
		|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
		|	И ОсновныеДоговорыКонтрагента.ВидДоговора = &ВидДоговора";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Договор в ОсновныеДоговораКонтрагента установлен, новый договор не создаем, что-бы не испортить пользовательские данные
			Возврат Неопределено;
		КонецЕсли;
		
		// Основной договор не установлен - создадим новый договор и установим его основным.
		ЗначенияЗаполнения = Новый Структура();
		ЗначенияЗаполнения.Вставить("ВидДоговора", ВидДоговора);
		ЗначенияЗаполнения.Вставить("Организация", ГоловнаяОрганизация);
		ЗначенияЗаполнения.Вставить("Владелец",    Контрагент);
		Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		КонецЕсли;
		ПараметрыСозданияДоговора = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		Возврат СоздатьОсновнойДоговорКонтрагента(ПараметрыСозданияДоговора);
			
	КонецЕсли;
КонецФункции
Процедура ОтложеннаяОбработка_АвансовыйОтчет(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьСчетаУчета(Объект);
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаНоменклатура ИЗ Объект.Прочее Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаНоменклатура.ОтражениеВУСН) Тогда
			СтрокаНоменклатура.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.ВозвратМатериаловИзЭксплуатации.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	Если Объект.ПокупателюВыставляетсяКорректировочныйСчетФактура 
		И ЗначениеЗаполнено(Объект.Сделка) Тогда
		
		ДанныеОбъекта = Новый Структура("Дата, Ссылка, Сделка");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
		
		Документы.ВозвратТоваровОтПокупателя.ЗаполнитьПоказателиПоСделке(Объект.Товары, ДанныеОбъекта);
		
	КонецЕсли; 
	
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВозвратТоваровПоставщику(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ВыпускПродукции(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетЗатрат) Тогда
		Объект.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	ДанныеОбъекта = Новый Структура("Дата,Организация,Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.Вставить("ТипЦенПлановойСебестоимости", Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить());
	ДанныеОбъекта.Вставить("СпособЗаполненияПлановойСебестоимости", Перечисления.СпособыЗаполненияЦен.ПоПлановымЦенам);	
	
	Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.Спецификация)  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СуммаПлановая) Тогда
				СтрокаТаблицы.ПлановаяСтоимость		= СведенияОНоменклатуре.ПлановаяСтоимость;
				СтрокаТаблицы.СуммаПлановая		= СтрокаТаблицы.ПлановаяСтоимость * СтрокаТаблицы.Количество;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Спецификация) Тогда
				СтрокаТаблицы.Спецификация			= СведенияОНоменклатуре.ОсновнаяСпецификацияНоменклатуры;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ВозвратныеОтходы Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) ИЛИ
			НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) ИЛИ
			СтрокаТаблицы.Сумма = 0  Тогда
			
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
					СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.НоменклатурнаяГруппа) Тогда
				Если ЗначениеЗаполнено(СведенияОНоменклатуре.НоменклатурнаяГруппа) Тогда
					СтрокаТаблицы.НоменклатурнаяГруппа	= СведенияОНоменклатуре.НоменклатурнаяГруппа;
				Иначе
					СтрокаТаблицы.НоменклатурнаяГруппа	= ПараметрыКонвертации.НоменклатурнаяГруппаПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				СтрокаТаблицы.СтатьяЗатрат		= СведенияОНоменклатуре.СтатьяЗатрат;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Сумма) Тогда
				СтрокаТаблицы.Цена		= СведенияОНоменклатуре.ПлановаяСтоимость;
				СтрокаТаблицы.Сумма		= СтрокаТаблицы.Цена * СтрокаТаблицы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ДоговорыКонтрагентов(Объект, КомпонентыОбмена)
	Если КомпонентыОбмена.ПараметрыКонвертации.НовыеДоговорыКонтрагентов.Получить(Объект.Ссылка) <> Неопределено Тогда
		// Выполняем обработчик заполнения объекта для новых договоров.
		ЗаполнитьДоговорДаннымиЗаполнения(Объект, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СпособЗаполненияСтавкиНДС) Тогда
		Объект.СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаДолга(Объект)
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.ДебиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
			
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансов;
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаЗадолженность ИЗ Объект.КредиторскаяЗадолженность Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаЗадолженность.ДоговорКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаЗадолженность.ДоговорКонтрагента, "Владелец, ВидДоговора, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, РеквизитыДоговора.Владелец, СтрокаЗадолженность.ДоговорКонтрагента);
		
		Если РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
					
		ИначеЕсли РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			
			СтрокаЗадолженность.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаЗадолженность.СчетУчетаРасчетов) Тогда
			Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегл Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
			ИначеЕсли РеквизитыДоговора.РасчетыВУсловныхЕдиницах Тогда
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
			Иначе
				СтрокаЗадолженность.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	//При необходимости заполнение счета списания задолженности
	Если Объект.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности  Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СчетДт) Тогда
			Объект.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СчетКт) Тогда
			Объект.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаПоступления(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	ПрименяетсяОсобыйПорядокНалогообложения
		= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.СчетЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
				СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
			КонецЕсли;
	
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету; 
			КонецЕсли;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И 
			СтрокаСведенийОНоменклатуре <> Неопределено Тогда
			СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			Если СтрокаСведенийОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
			СтрокаТаблицы.СчетЗатрат = СтрокаСведенийОНоменклатуре.СчетРасходов;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатратНУ) Тогда
			СтрокаТаблицы.СчетЗатратНУ = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураПолученный.Ссылка.НомерИсправления КАК НомерИсправления,
			|	СчетФактураПолученный.Ссылка.ДатаИсправления КАК ДатаИсправления
			|ИЗ
			|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
			|ГДЕ
			|	СчетФактураПолученный.ДокументОснование = &ДокументОснование
			|	И СчетФактураПолученный.Ссылка.ПометкаУдаления = ЛОЖЬ
			|УПОРЯДОЧИТЬ ПО	
			|	НомерИсправления";
	
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Объект, Выборка, "НомерИсправления, ДатаИсправления");
		Иначе		
			Объект.НомерИсправления = 0;
			Объект.ДатаИсправления  = Объект.Дата;
		КонецЕсли;
	
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Объект.ДокументПоступления, Ложь);
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_КорректировкаРеализации(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
		Объект.ИсходныйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
			Объект.ДокументРеализации, Истина);
	КонецЕсли;
	
	// Заполним свойства строк с ЕстьВДокументеРеализации из документа реализации
	ДанныеЗаполнения = Документы.КорректировкаРеализации.ДанныеЗаполненияПоДокументу(Объект.ДокументРеализации);
	Если ДанныеЗаполнения <> Неопределено Тогда
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, НомерГТДДоИзменения, СтранаПроисхожденияДоИзменения";
		ПоляДляЗаполнения = "СчетУчета, СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Товары", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения";
		ПоляДляЗаполнения = "СчетДоходов, Субконто, СчетРасходов, СчетУчетаНДСПоРеализации";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "Услуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
		ПоляДляОтбора     = "Номенклатура, КоличествоДоИзменения, СуммаДоИзменения, СтавкаНДСДоИзменения, СуммаНДСДоИзменения, Контрагент, ДоговорКонтрагента";
		ПоляДляЗаполнения = "СчетРасчетов";
		ЗаполнитьТаблицуКорректировкиРеализации(Объект, ДанныеЗаполнения, "АгентскиеУслуги", ПоляДляОтбора, ПоляДляЗаполнения);
		
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
	
	// Заполняем номер исправления
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки
		И Не Объект.ПометкаУдаления Тогда
		
		ИсправляемыйДокументРеализации = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(
			Объект.ДокументРеализации, Ложь);
			
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	СчетФактураВыданный.Ссылка.НомерИсправления КАК НомерИсправления
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
			|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Объект.НомерИсправления = ?(Выборка.Следующий(), Выборка.НомерИсправления, 0);
		
		Если Объект.НомерИсправления = 0 Тогда
			ПараметрыДокументаИсправления = Документы.КорректировкаРеализации.СформироватьПараметрыИсправленияКорректировочногоДокумента(
				Объект.ВидОперации, Объект.ДокументРеализации, ИсправляемыйДокументРеализации);
			Объект.НомерИсправления = ПараметрыДокументаИсправления.НомерИсправления;
		КонецЕсли; 
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		НоваяСтрока = ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
		НоваяСтрока.Документ             = Объект.Ссылка;
		НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
		НоваяСтрока.ДатаДокумента        = Объект.Дата;
		НоваяСтрока.ИсправляемыйДокумент = ИсправляемыйДокументРеализации;
		НоваяСтрока.ИндексСтроки         = 0;
		
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Номенклатура(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		Объект.ВидНоменклатуры = ВидНоменклатурыПоГруппе(Объект.Родитель, Объект.Услуга);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_НоменклатураГруппа(Объект)
	// Заполнение вида номенклатуры по умолчанию.
	Если Не ЗначениеЗаполнено(Объект.ВидНоменклатуры)
		И ЗначениеЗаполнено(Объект.Родитель) Тогда
		Объект.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель, "ВидНоменклатуры");
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП(Объект)
	//Заполнение счетов расчетов
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам =     СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОприходованиеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Коэффициент = 1;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Организации(Объект)
	Если Не ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ГоловнаяОрганизация = Объект.Ссылка;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.РайонныйКоэффициент) Тогда
		Объект.РайонныйКоэффициент = 1;
	КонецЕсли;
	//Для организаций - ИП
	Если НЕ ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) 
		И Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ Справочник.ФизическиеЛица
		|ГДЕ Наименование = &Наименование И ИНН = &ИНН И НЕ ПометкаУдаления";
		Запрос.УстановитьПараметр("Наименование", Объект.Наименование);
		Запрос.УстановитьПараметр("ИНН", Объект.ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ФизЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФизЛицоОбъект.КонтактнаяИнформация.Очистить();
		Иначе
			//Создаем физическое лицо
			ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ФизЛицоОбъект.Наименование = Объект.Наименование;
			ФизЛицоОбъект.ФИО = Объект.Наименование;
			ФизЛицоОбъект.Пол = Перечисления.ПолФизическогоЛица.Мужской;
			ФизЛицоОбъект.ИНН = Объект.ИНН;
		КонецЕсли;
		Если Объект.КонтактнаяИнформация.Количество() > 0 Тогда
			Для Каждого СтрокаКонтакт ИЗ Объект.КонтактнаяИнформация Цикл
				ВидКИФизЛицо = Неопределено;
				Если СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
				ИначеЕсли СтрокаКонтакт.Вид = Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации Тогда
					ВидКИФизЛицо = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
				Иначе
					Продолжить;
				КонецЕсли;
				СтрокаКонтактНов = ФизЛицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактНов, СтрокаКонтакт,,"Вид");
				СтрокаКонтактНов.Вид = ВидКИФизЛицо;
			КонецЦикла;
		КонецЕсли;
		ФизЛицоОбъект.ОбменДанными.Загрузка = Истина;
		ФизЛицоОбъект.Записать();
		Объект.ИндивидуальныйПредприниматель = ФизЛицоОбъект.Ссылка;
	
	КонецЕсли
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДС)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовЗаПосредническиеУслуги) Тогда
		Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаРасчетов(, Истина, Объект);
	
	КонецЕсли;
	
	ТабСчетовДоЗаполнения = Объект.Товары.Выгрузить(,"СчетУчета,СчетДоходов,СчетУчетаНДСПоРеализации, СчетРасходов");
	Документы.ОтчетКомиссионераОПродажах.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаДоЗаполнения = ТабСчетовДоЗаполнения[СтрокаТаблицы.НомерСтроки - 1];
		
		Если ЗначениеЗаполнено(СтрокаДоЗаполнения.СчетУчета) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДоЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаЗатрат) Тогда
		Объект.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	КонецЕсли;
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетКомитентуОПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		Документы.ОтчетКомитентуОПродажах.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.УслугаПоВознаграждению) И НЕ ЗначениеЗаполнено(Объект.СчетУчетаНДСПоРеализации) Тогда
		ДанныеОбъекта = Новый Структура("Дата, Организация");
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(Объект.УслугаПоВознаграждению, ДанныеОбъекта);
		Если СведенияОНоменклатуре <> Неопределено Тогда
			
			СчетаПоУслуге = СведенияОНоменклатуре.СчетаУчета;
			Объект.СчетУчетаНДСПоРеализации	= СчетаПоУслуге.СчетУчетаНДСПродажи;
			Объект.СчетДоходов				= СчетаПоУслуге.СчетДоходов;
			
			НоменклатурнаяГруппаВознаграждения = СведенияОНоменклатуре.НоменклатурнаяГруппа;
			
			Если ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
				Объект.Субконто = Неопределено;
				ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Объект.СчетДоходов);
				Если ДанныеСчета.КоличествоСубконто >= 1 Тогда
					ЗначениеСубконто = ДанныеСчета["ВидСубконто1ТипЗначения"].ПривестиЗначение(Объект.Субконто);
					Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						Объект.Субконто = НоменклатурнаяГруппаВознаграждения;
					Иначе
						Объект.Субконто = ЗначениеСубконто;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетДоходов) Тогда
		Объект.СчетДоходов = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ОтчетОРозничныхПродажах(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Создание документа ПриходныйКассовыйОрдер
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада") <> Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			
			ДанныеОбъекта = Новый Структура(
				"Дата, ВидОперации, Организация, ДеятельностьНаПатенте, Склад,
				|ТипЦен, ВалютаДокумента, КурсДокумента, КратностьДокумента,
				|СуммаВключаетНДС, Реализация, АТТПоПродажнойСтоимости, ДокументБезНДС");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			ДанныеОбъекта.Реализация = Истина;
		
			ТипСклада	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОбъекта.Склад, "ТипСклада");
			СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ДанныеОбъекта.Организация, ДанныеОбъекта.Дата);
		
			АТТПоПродажнойСтоимости = (СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости)
				И ДанныеОбъекта.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах
				И НЕ ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
			
			ДанныеОбъекта.Вставить("АТТПоПродажнойСтоимости", АТТПоПродажнойСтоимости);
		
			Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
				ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
			КонецЕсли;
		
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
				СтрокаТаблицы.Номенклатура, ДанныеОбъекта);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТаблицы, "Товары", СведенияОНоменклатуре);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.АгентскиеУслуги Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасчетов)
			И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			
			ПараметрыОбъекта = Новый Структура("Организация");
			ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
			Документы.ОтчетОРозничныхПродажах.ЗаполнитьСчетРасчетовВСтрокеАгентскойУслуги(ПараметрыОбъекта, СтрокаТаблицы);
	
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередачаМатериаловВПереработку(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовПоТаре = СтруктураСчетов.СчетУчетаТарыПокупателя;
		КонецЕсли;
	КонецЕсли;
	
	СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
			СтрокаТаблицы.СчетПередачи = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
		КонецЕсли;
	КонецЦикла;
	
	
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(
			Объект.Организация, Объект.Склад);
	КонецЕсли;
	Объект.Местонахождение = Объект.ПодразделениеОрганизации;
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецодежда");
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Спецоснастка");
	Документы.ПередачаМатериаловВЭксплуатацию.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ИнвентарьИХозяйственныеПринадлежности");
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПеремещениеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКО_Расчеты(Объект)
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ПорядокОтраженияАванса) Тогда
			СтрокаРасшифровки.ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(Объект.Организация, Объект.Дата);	
		КонецЕсли;
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента)
			Или Объект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
		Иначе
	
			Объект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПКОРозничнаяВыручка(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДенежныхСредств(Объект)
	ЗаполнитьСчетаУчета(Объект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПереводСДругогоСчета Тогда
		Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
			Объект.СчетКонтрагента = БанковскийСчетСписанияПриПереводеДенежныхСредств(Объект);
		КонецЕсли;
	КонецЕсли;
	
	УчетУСН.ЗаполнитьПоступлениеНаРасчетныйСчет(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеДопРасходов(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, Объект.Дата);
	
	//Заполним табличную часть "Товары"
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если ПрименяетсяУСН
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		// Заполнение счетов учета номенклатуры
		Склад = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДокументПартии)
			И ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", СтрокаТаблицы.ДокументПартии.Метаданные()) Тогда
			Склад = СтрокаТаблицы.ДокументПартии.Склад;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация, СтрокаТаблицы.Номенклатура, Склад);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
			СтрокаТаблицы.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымУслугам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНУ) Тогда
			СтрокаТаблицы.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(Объект)
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ПорядокОтраженияАванса) Тогда
			СтрокаРасшифровки.ПорядокОтраженияАванса = НалоговыйУчетУСН.ПорядокОтраженияАванса(Объект.Организация, Объект.Дата);	
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = ПоступлениеНаРасчетныйСчетФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата, Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПлательщикНДС);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПоступлениеОтПереработчика(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(	Объект.Организация, 
																						Объект.Контрагент, 
																						Объект.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) Тогда
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Объект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоТаре) Тогда
		Объект.СчетУчетаРасчетовПоТаре = СчетаУчета.СчетУчетаТары;
	КонецЕсли;
	Если Объект.Продукция.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.Продукция.ВыгрузитьКолонку("Номенклатура");
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.Продукция Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Счет = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЦикла;
	КонецЕсли;
	Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
		ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
	КонецЕсли;
	Если Объект.ВозвращенныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ВозвращенныеМатериалы.ВыгрузитьКолонку("Номенклатура");
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.ВозвращенныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				Продолжить;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета =
					БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетПередачи) Тогда
				СтрокаТаблицы.СчетПередачи = СтрокаСведенийОНоменклатуре.СчетУчета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Объект.ИспользованныеМатериалы.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.ИспользованныеМатериалы.ВыгрузитьКолонку("Номенклатура");
	
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.ИспользованныеМатериалы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат)
				И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				СтатьяЗатратНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "СтатьяЗатрат");
				Если ЗначениеЗаполнено(СтатьяЗатратНоменклатуры) Тогда
					СтрокаТаблицы.СтатьяЗатрат = СтатьяЗатратНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы.СчетУчета = БухгалтерскийУчет.СчетУчетаМатериалыПереданныеВПереработку(СтрокаСведенийОНоменклатуре.СчетПередачи);
		КонецЦикла;
	КонецЕсли;
	Если Объект.Услуги.Количество() > 0 Тогда
		СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
		СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, Объект.Склад, Объект.Дата);
		Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) И ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) 
				И ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) И ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяЗатрат) Тогда
				СтатьяЗатратНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.Номенклатура, "СтатьяЗатрат");
				Если ЗначениеЗаполнено(СтатьяЗатратНоменклатуры) Тогда
					СтрокаТаблицы.СтатьяЗатрат = СтатьяЗатратНоменклатуры;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
				СтрокаТаблицы.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СтрокаСведенийОНоменклатуре.СчетУчетаНДС;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СтрокаСведенийОНоменклатуре.СпособУчетаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ПТиУ(Объект, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
		
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
	
	СпособОценкиТоваровВРознице      = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, Объект.Дата);
	УчетВПродажныхЦенах              = СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если УчетВПродажныхЦенах Тогда
		
		ДанныеСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
		ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговора");
		Если ДанныеСклада.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
			И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)
			И ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			
			СвойстваСчета4112 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(
				ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
			РазделениеПоСтавкамВРознице = СвойстваСчета4112.ВидСубконто1 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто2 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС
				ИЛИ СвойстваСчета4112.ВидСубконто3 = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС;
				
			Если РазделениеПоСтавкамВРознице И ДанныеСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					СтрокаТаблицы.СтавкаНДСВРознице = СтрокаТаблицы.СтавкаНДС;
				КонецЦикла
			КонецЕсли;
			
			// Если ЦенаВРознице не передано - необходимо заполнение
			Если Объект.Товары.Итог("ЦенаВРознице") = 0 Тогда
			
				СписокНоменклатуры = Объект.Товары.ВыгрузитьКолонку("Номенклатура");
				ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ДанныеСклада.ТипЦенРозничнойТорговли, Объект.Дата);
				ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
				Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
					ЦенаВРознице = 0;
					НайденнаяСтрока = ТаблицаЦенВРознице.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
					Если НайденнаяСтрока <> Неопределено Тогда
						
						СтрокаТаблицы.ЦенаВРознице = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
							НайденнаяСтрока.Цена,
							НайденнаяСтрока.Валюта, ВалютаРеглУчета,
							НайденнаяСтрока.Курс, 1,
							НайденнаяСтрока.Кратность, 1);
						СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.ЦенаВРознице * СтрокаТаблицы.Количество;
					КонецЕсли;
						
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	// Заполняем остальные незаполненные данные
	
	Если Объект.Товары.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Товары);
	КонецЕсли;
	
	Если Объект.Услуги.Количество()>0 Тогда
		ЗаполнениеОтражениеВУСН(Объект, Объект.Услуги);
	КонецЕсли;
	
	Если ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
		И Объект.ВозвратнаяТара.Количество() = 0 Тогда
		
		Если Объект.Товары.Количество() > 0 
			И Объект.Услуги.Количество() = 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары;
		ИначеЕсли Объект.Товары.Количество() = 0 
			И Объект.Услуги.Количество() > 0 Тогда
			Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтавкуНДС4и2ВДоговоре(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		// Заполняем счета учета
		Документы.РеализацияОтгруженныхТоваров.ЗаполнитьСчетаУчетаРасчетов(Объект);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РеализацияУслугПоПереработке(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом) 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовПоАвансам) Тогда
		Если ЗначениеЗаполнено(Объект.Организация)
				И ЗначениеЗаполнено(Объект.Контрагент)
				И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
					Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
			Объект.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
			Объект.СчетУчетаРасчетовПоАвансам = СтруктураСчетов.СчетАвансовПокупателя;
		КонецЕсли;
	КонецЕсли;
	СписокНоменклатуры = Объект.Услуги.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНоменклатуры, Объект.МатериалыЗаказчика.ВыгрузитьКолонку("Номенклатура"), Истина);
	ПрименяетсяОсобыйПорядокНалогообложения
					= УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Объект.Организация, Объект.Дата);
					
	ДанныеОбъекта = Новый Структура("Дата, Организация, ДокументБезНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
					
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
			Объект.Организация, СписокНоменклатуры, , Объект.Дата,
			ПрименяетсяОсобыйПорядокНалогообложения);
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
	
		СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
		Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СтрокаСведенийОНоменклатуре.СчетУчета;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов = СтрокаСведенийОНоменклатуре.СчетДоходов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто)
			И СтрокаСведенийОНоменклатуре.Свойство("Субконто")
			И ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.Субконто) Тогда
			
			СтрокаТаблицы.Субконто = СтрокаСведенийОНоменклатуре.Субконто;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицы.Субконто)
			И СтрокаСведенийОНоменклатуре.Свойство("ВидСубконтоТипЗначения")
				И ЗначениеЗаполнено(СтрокаСведенийОНоменклатуре.ВидСубконтоТипЗначения) Тогда
			
			СтрокаТаблицы.Субконто =
					СтрокаСведенийОНоменклатуре.ВидСубконтоТипЗначения.ПривестиЗначение(СтрокаТаблицы.Субконто);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СтрокаСведенийОНоменклатуре.СчетРасходов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СтрокаСведенийОНоменклатуре.СчетУчетаНДСПродажи;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.МатериалыЗаказчика Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда 
			СтрокаСведенийОНоменклатуре = СведенияОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СтрокаСведенийОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.РеализацияУслугПоПереработке.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТаблицы, "МатериалыЗаказчика", СтрокаСведенийОНоменклатуре);
		КонецЕсли;
			
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_РТиУ(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
	
	// Заполняем счета учета
	
	ЗаполнитьСчетаУчета(Объект);
	
	ЗаполнитьДеятельностьНаПатентеТорговомСборе(Объект);
	
	УчетНДСБП.ЗаполнитьКодТНВЭДОбъекта(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СБДСПереводНаДругойСчет(Объект)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СборкаТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если Не ЗначениеЗаполнено(Объект.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
			Объект.Организация,
			Объект.Номенклатура,
			Объект.Склад);
		Если Не ЗначениеЗаполнено(Объект.СчетУчета) Тогда
			Объект.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
			Объект.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
			Если НЕ ЗначениеЗаполнено(Объект.СпособУчетаНДС) Тогда
				Объект.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из Объект.Комплектующие Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
				СтрокаТаблицы.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС) Тогда
					СтрокаТаблицы.СпособУчетаНДС = Перечисления.СпособыУчетаНДС.ПринимаетсяКВычету;
				КонецЕсли;
	
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_Склады(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ТипЦенРозничнойТорговли) Тогда
		НаименованиеТипаЦен = НСтр("ru='Розничная цена'");
		ВидЦены = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию(НаименованиеТипаЦен);
		
		Если Не ЗначениеЗаполнено(ВидЦены) Тогда
			ВидОбъект = Справочники.ТипыЦенНоменклатуры.СоздатьЭлемент();
			ВидОбъект.Наименование = НаименованиеТипаЦен;
			ВидОбъект.Записать();
			ВидЦены = ВидОбъект.Ссылка;
		КонецЕсли;
	
		Объект.ТипЦенРозничнойТорговли = ВидЦены;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Прочее(Объект)
	// Заполняем счета учета по текущим данным объекта.
	СчетаУчетаВДокументах.ЗаполнитьПередОтображениемПользователю(Объект);
	
	УчетУСН.ЗаполнитьСписаниеСРасчетногоСчета(Объект, Истина);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеСРС_Расчеты(Объект)
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Дата);
	
	Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС) Тогда
			СтрокаРасшифровки.СтавкаНДС = СписаниеСРасчетногоСчетаФормы.СтавкаНДСРасшифровкиПлатежа(Объект.Дата, Объект.ВидОперации, СтрокаРасшифровки.ДоговорКонтрагента, ПлательщикНДС);
			
			Если ЗначениеЗаполнено(СтрокаРасшифровки.СтавкаНДС)
					И Не ЗначениеЗаполнено(СтрокаРасшифровки.СуммаНДС) Тогда
				ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
				СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СписаниеТоваров(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;	
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(
				Объект.Организация,
				СтрокаТаблицы.Номенклатура,
				Объект.Склад);
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСчетаУчетаВозвратнойТары(Объект);
КонецПроцедуры
Процедура ОтложеннаяОбработка_СтатьиРасходов(Объект)
	Если НЕ ЗначениеЗаполнено(Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
		Объект.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ВидПрочихДоходовИРасходов) Тогда
		Объект.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(Объект)
	Для Каждого СтрокаТЧ Из Объект.РасшифровкаПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СпособПогашенияЗадолженности) Тогда
			СтрокаТЧ.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			// Устанавливаем основной договор, если он не найден.
			СтрокаТЧ.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) 
			И ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			Продолжить;
		КонецЕсли;
		
		СчетУчетаРасчетовСКонтрагентом = Неопределено;
		СчетУчетаРасчетовПоАвансам = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДоговорКонтрагента) Тогда
			СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, Объект.Контрагент, СтрокаТЧ.ДоговорКонтрагента);
			
			Если Объект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
				Или Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
				Или Объект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетов;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансов;
			Иначе
				СчетУчетаРасчетовСКонтрагентом = СтруктураСчетов.СчетРасчетовПокупателя;
				СчетУчетаРасчетовПоАвансам     = СтруктураСчетов.СчетАвансовПокупателя;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТЧ.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетНаОплатуПокупателю(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		// Устанавливаем основной договор, если он не найден.
		Объект.ДоговорКонтрагента = ОсновнойДоговорКонтрагента(Объект, Объект.Организация, Объект.Контрагент, Объект.ВалютаДокумента);
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураВыданный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	ДозаполнитьОснованияСчетаФактуры(Объект);
	
	Если Объект.Исправление Тогда
		
		Если ЗначениеЗаполнено(Объект.ИсправляемыйСчетФактура)
			И ОбщегоНазначения.СсылкаСуществует(Объект.ИсправляемыйСчетФактура)
			И (Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента)
			Или Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента)) Тогда
				
			РеквизитыСчетФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ИсправляемыйСчетФактура, "Дата, Номер");
			
			ДатаИсходногоДокумента  = РеквизитыСчетФактурыОснования.Дата;
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				РеквизитыСчетФактурыОснования.Номер, Ложь, Истина);
			
			Если Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента) Тогда
				Объект.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
				Объект.НомерИсходногоДокумента = НомерИсходногоДокумента;
			КонецЕсли;
	
		КонецЕсли;
				
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 
			И Не Объект.ПометкаУдаления Тогда
			Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
				
				ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
				
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыВыданныеКОбработке.Добавить();
					НоваяСтрока.Документ             = Объект.Ссылка;
					НоваяСтрока.ДатаДокумента        = Объект.Дата;
					НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
					НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументОснование, Ложь);
					НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
				КонецЕсли;
			
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураВыданный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_СчетФактураПолученный(Объект, ОбъектМодифицирован, КомпонентыОбмена)
	//Подберем правильный тип документов основания
	Индекс = Объект.ДокументыОснования.Количество() - 1;
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяСтрока = Объект.ДокументыОснования[Индекс];
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОснование)
			И Не ОбщегоНазначения.СсылкаСуществует(ТекущаяСтрока.ДокументОснование) Тогда
			Объект.ДокументыОснования.Удалить(ТекущаяСтрока);
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Если Объект.ДокументыОснования.Количество() > 0 Тогда
		Объект.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
	Иначе
		Объект.ДокументОснование = Неопределено;
	КонецЕсли;
		
	Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс Тогда
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			И ОбщегоНазначения.СсылкаСуществует(Объект.ДоговорКонтрагента)
			И Не Документы.СчетФактураПолученный.ТребуетсяЗаполнятьДоговорВСчетеФактуреНаАванс(
				Объект.Дата, Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ЗначениеЗаполнено(Объект.ДокументОснование)
		И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", Объект.ДокументОснование.Метаданные()) Тогда
		Объект.ДоговорКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ДоговорКонтрагента");
	КонецЕсли;
	
	ДозаполнитьОснованияСчетаФактуры(Объект);
	
	Если Объект.Исправление Тогда
		
		Если ЗначениеЗаполнено(Объект.ИсправляемыйСчетФактура)
			И ОбщегоНазначения.СсылкаСуществует(Объект.ИсправляемыйСчетФактура)
			И (Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента)
			Или Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента)) Тогда
				
			РеквизитыСчетФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ИсправляемыйСчетФактура, "Дата, Номер");
			
			ДатаИсходногоДокумента  = РеквизитыСчетФактурыОснования.Дата;
			НомерИсходногоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
				РеквизитыСчетФактурыОснования.Номер, Ложь, Истина);
			
			Если Не ЗначениеЗаполнено(Объект.ДатаИсходногоДокумента) Тогда
				Объект.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.НомерИсходногоДокумента) Тогда
				Объект.НомерИсходногоДокумента = НомерИсходногоДокумента;
			КонецЕсли;
	
		КонецЕсли;
			
		// Поместим ссылку на объект для отложенного выстраивания структуры подчиненности документов исправления
		Если Объект.ДокументыОснования.Количество() > 0 И Не Объект.ПометкаУдаления Тогда
			
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Авансовый отчет",
			// то корректировку надо вводить на основании счет-фактуры.
			Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
	
				НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
				НоваяСтрока.Документ             = Объект.Ссылка;
				НоваяСтрока.ДатаДокумента        = Объект.Дата;
				НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
				НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект.ДокументОснование, Объект.Ссылка);
				НоваяСтрока.ИндексСтроки         = 0;
				
			// Если обрабатывается исправительная счет-фактура полученный введенная на основании "Отчета комитента",
			// то ее не надо переподчинять корректировкам и вводить фиктивные документы корректировка поступления.
			ИначеЕсли ТипЗнч(Объект.ДокументОснование) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
				Для СтрокаТаблицы = 0 По Объект.ДокументыОснования.Количество()-1 Цикл
					
					ДокументОснование = Объект.ДокументыОснования[СтрокаТаблицы].ДокументОснование;
					
					Если ЗначениеЗаполнено(ДокументОснование) Тогда
						
						НоваяСтрока = КомпонентыОбмена.ПараметрыКонвертации.СчетФактурыПолученныеКОбработке.Добавить();
						НоваяСтрока.Документ             = Объект.Ссылка;
						НоваяСтрока.ДатаДокумента        = Объект.Дата;
						НоваяСтрока.НомерИсправления     = Объект.НомерИсправления;
						НоваяСтрока.ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументОснование, Ложь);
						НоваяСтрока.ИндексСтроки         = СтрокаТаблицы;
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
		Объект.КодВидаОперации = Документы.СчетФактураПолученный.ПолучитьКодВидаОперации(Объект);
		Если НЕ ЗначениеЗаполнено(Объект.КодВидаОперации) Тогда
			Объект.КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТаможеннаяДекларация(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	ДоговорКонтрагента = ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента),
		Объект.ДоговорКонтрагента, Объект.ДоговорКонтрагентаРегл);
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетУчетаРасчетовСКонтрагентом)
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, Объект.Контрагент, ДоговорКонтрагента);
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	
	КонецЕсли;
	
	#Область Товары
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
			
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета   = СчетаУчета.СчетУчета;
			СтрокаТабличнойЧасти.СчетУчетаНУ = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетНДСТаможни) Тогда
			СтрокаТабличнойЧасти.СчетУчетаНДС = СчетаУчета.СчетНДСТаможни;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СчетаУчета.СпособУчетаНДС) Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = СчетаУчета.СпособУчетаНДС;
		КонецЕсли;
	
	КонецЦикла;
	#КонецОбласти
КонецПроцедуры
Процедура ОтложеннаяОбработка_ТребованиеНакладная(Объект, ПараметрыКонвертации, ОбъектМодифицирован)
	// Заполняем счета учета
	ЗаполнитьСчетаУчета(Объект);
	
	Для Каждого СтрокаТаблицы Из Объект.Материалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОтражениеВУСН) Тогда
			СтрокаТаблицы.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ОтложеннаяОбработка_УстановкаЦенНоменклатуры(Объект)
	ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ВалютаЦены");
	Если ЗначениеЗаполнено(ВалютаЦены) Тогда
		Для Каждого СтрокаТабличнойЧасти ИЗ Объект.Товары Цикл
			СтрокаТабличнойЧасти.Валюта = ВалютаЦены;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеДатаПроведен(ПолученныеДанные, ДанныеXDTO)
	Если ДанныеXDTO.Свойство("ДатаВыписки")
		И ЗначениеЗаполнено(ДанныеXDTO.ДатаВыписки) Тогда
		Если НачалоДня(ДанныеXDTO.КлючевыеСвойства.Дата) = НачалоДня(ДанныеXDTO.ДатаВыписки) Тогда
			ПолученныеДанные.Дата = ДанныеXDTO.КлючевыеСвойства.Дата;
		Иначе
			ПолученныеДанные.Дата = ДанныеXDTO.ДатаВыписки;
		КонецЕсли;
	Иначе
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Проведен", Ложь);
		ПолученныеДанные.Дата     = ДанныеXDTO.КлючевыеСвойства.Дата;
	КонецЕсли;
КонецПроцедуры
Процедура ПБДС_СБДС_ПолучениеСчетБанк(ПолученныеДанные)
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПолученныеДанные.СчетБанк = ?(ПолученныеДанные.ВалютаДокумента = ВалютаРегламентированногоУчета,
		ПланыСчетов.Хозрасчетный.РасчетныеСчета,
		ПланыСчетов.Хозрасчетный.ВалютныеСчета);
КонецПроцедуры
Процедура ПередатьОбщиеРеквизитыПлатежаИзПлатежногоПоручения(ДанныеИБ, ДанныеXDTO, ПолучатьДанныеПлатежаВБюджет = Ложь)
	//Заполняем реквизиты платежа пустыми значениями
	ДанныеXDTO.Вставить("ВидПлатежа");
	ДанныеXDTO.Вставить("Очередность");
	ДанныеXDTO.Вставить("Код");
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДанныеXDTO.Вставить("СтатусСоставителя");
		ДанныеXDTO.Вставить("ПоказательКБК");
		ДанныеXDTO.Вставить("ОКАТО");
		ДанныеXDTO.Вставить("ПоказательОснования");
		ДанныеXDTO.Вставить("ПоказательПериода");
		ДанныеXDTO.Вставить("ПоказательНомера");
		ДанныеXDTO.Вставить("ПоказательДаты");
		ДанныеXDTO.Вставить("ПоказательТипа");
	КонецЕсли;
	//Банковский счет получателя берем из реквизита документа
	ДанныеXDTO.Вставить("БанковскийСчет", ДанныеИБ.СчетКонтрагента);
	
	
	Запрос = Новый Запрос;
	
	ДополнениеЗапросаПлатежВБюджет = "";
	Если ПолучатьДанныеПлатежаВБюджет Тогда
		ДополнениеЗапросаПлатежВБюджет = ", ПлатежныеПоручения.Ссылка.СтатусСоставителя КАК СтатусСоставителя,
			|ПлатежныеПоручения.Ссылка.КодБК КАК ПоказательКБК, 
			|ПлатежныеПоручения.Ссылка.ПоказательОснования КАК ПоказательОснования, 
			|ПлатежныеПоручения.Ссылка.ПоказательПериода КАК ПоказательПериода, 
			|ПлатежныеПоручения.Ссылка.ПоказательНомера КАК ПоказательНомера, 
			|ПлатежныеПоручения.Ссылка.ПоказательДаты КАК ПоказательДаты, 
			|ПлатежныеПоручения.Ссылка.ПоказательТипа КАК ПоказательТипа, 
			|ПлатежныеПоручения.Ссылка.КодОКАТО КАК ОКАТО";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ПлатежныеПоручения
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК Док
	|ГДЕ
	|	Док.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И Док.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноеПоручение.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.ДокументОснование = &Ссылка
	|	И ПлатежноеПоручение.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежныеПоручения.Ссылка.ВидПлатежа КАК ВидПлатежа,
	|	ПлатежныеПоручения.Ссылка.ОчередностьПлатежа КАК Очередность,
	|	ПлатежныеПоручения.Ссылка.СчетКонтрагента КАК СчетКонтрагента,
	|	ПлатежныеПоручения.Ссылка.ИдентификаторПлатежа КАК Код
	|" + ДополнениеЗапросаПлатежВБюджет + "
	|ИЗ
	|	ПлатежныеПоручения КАК ПлатежныеПоручения";
	
	 
	Запрос.УстановитьПараметр("Ссылка", ДанныеИБ.Ссылка);
	РеквизитыПлатежа = Запрос.Выполнить().Выбрать();
	Если РеквизитыПлатежа.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеXDTO, РеквизитыПлатежа);
		//Если счет указан в платежке но не указан в документе - подставим счет получателя из платежки
		Если ЗначениеЗаполнено(РеквизитыПлатежа.СчетКонтрагента) 
			И НЕ ЗначениеЗаполнено(ДанныеXDTO.БанковскийСчет) Тогда
			ДанныеXDTO.Вставить("БанковскийСчет", РеквизитыПлатежа.СчетКонтрагента);
		КонецЕсли;
		Если ПолучатьДанныеПлатежаВБюджет И СтрДлина(ДанныеXDTO.ПоказательКБК) < 20 Тогда
			ДанныеXDTO.ПоказательКБК = Прав("00000000000000000000" + ДанныеXDTO.ПоказательКБК, 20);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура ПередЗаписьюПолученныхДанных_ПрочиеДоходыРасходы(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств)
	ПолученныеДанные.ПринятиеКналоговомуУчету = Истина;
	ПолученныеДанные.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
	
	Если ДанныеИБ <> Неопределено Тогда
	
		// Переносим те свойства, которые указаны в ПКС
		ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидПрочихДоходовИРасходов) Тогда
			ДанныеИБ.ВидПрочихДоходовИРасходов = ПолученныеДанные.ВидПрочихДоходовИРасходов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат) Тогда
			ДанныеИБ.ВидДеятельностиДляНалоговогоУчетаЗатрат = ПолученныеДанные.ВидДеятельностиДляНалоговогоУчетаЗатрат;
		КонецЕсли;
		
		ПолученныеДанные = Неопределено;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПКО_РКО_ПолучениеСчетКасса(ПолученныеДанные)
	ПолученныеДанные.СчетКасса = ?(ПолученныеДанные.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить(),
								ПланыСчетов.Хозрасчетный.КассаОрганизации,
								ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
КонецПроцедуры
Процедура ПодготовитьДанныеКонтактнаяИнформация(ДанныеИБ, ДанныеXDTO)
	Если ДанныеИБ.КонтактнаяИнформация.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТабКонтактнаяИнформация = Новый ТаблицаЗначений;
	ТабКонтактнаяИнформация.Колонки.Добавить("ЗначенияПолей");
	ТабКонтактнаяИнформация.Колонки.Добавить("ВидКонтактнойИнформации");
	ТабКонтактнаяИнформация.Колонки.Добавить("НаименованиеКонтактнойИнформации");
	
	Для Каждого СтрокаКИ ИЗ ДанныеИБ.КонтактнаяИнформация цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКИ.Вид)
			ИЛИ (НЕ ЗначениеЗаполнено(СтрокаКИ.ЗначенияПолей) И НЕ ЗначениеЗаполнено(СтрокаКИ.Представление)) Тогда
			Продолжить;
		КонецЕсли;
	
		СвойстваВидаКИ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКИ.Вид, "Наименование,Предопределенный");
	
		Если СвойстваВидаКИ.Предопределенный И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица
			И СтрокаКИ.Вид <> Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты Тогда
			
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = СтрокаКИ.Вид;
			
		Иначе
			
			// Получение наименования значения перечисления.
			ИндексТипаКИ = Перечисления.ТипыКонтактнойИнформации.Индекс(СтрокаКИ.Тип);
			ИмяТипаКИ = Метаданные.Перечисления.ТипыКонтактнойИнформации.ЗначенияПеречисления[ИндексТипаКИ].Имя;
			
			Если ИмяТипаКИ <> "Адрес"
				И ИмяТипаКИ <> "АдресЭлектроннойПочты"
				И ИмяТипаКИ <> "ВебСтраница"
				И ИмяТипаКИ <> "Другое"
				И ИмяТипаКИ <> "Телефон"
				И ИмяТипаКИ <> "Факс" Тогда
				Продолжить;
			КонецЕсли;
		
			СтрокаТЗКИ = ТабКонтактнаяИнформация.Добавить();
			СтрокаТЗКИ.ВидКонтактнойИнформации = "ПользовательскаяКИ"+ИмяТипаКИ;
			СтрокаТЗКИ.НаименованиеКонтактнойИнформации = СвойстваВидаКИ.Наименование;
			
		КонецЕсли;
	
		Если Лев(СокрЛ(СтрокаКИ.ЗначенияПолей),1) = "<" Тогда
		    // КИ в правильном формате.
		    СтрокаТЗКИ.ЗначенияПолей = СокрЛП(СтрокаКИ.ЗначенияПолей);
		Иначе
		    ЗначенияПолей = "";
		    // Попытка №1.
		    Если ЗначениеЗаполнено(СокрЛП(СтрокаКИ.ЗначенияПолей)) Тогда 
		    	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(СокрЛП(СтрокаКИ.ЗначенияПолей), СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    Если Лев(СокрЛ(ЗначенияПолей),1) <> "<" Тогда
		    	// Попытка №2.
		        ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(СокрЛП(СтрокаКИ.Представление), СтрокаКИ.Вид);
		    КонецЕсли;
		    СтрокаТЗКИ.ЗначенияПолей = ЗначенияПолей;
		КонецЕсли;
	
	КонецЦикла;
	
	ДанныеXDTO.Вставить("КонтактнаяИнформация", ТабКонтактнаяИнформация);
КонецПроцедуры
Функция ПодобратьПлатежнуюВедомость(СтруктураДопСвойства, ТипДокумента)
	ДатаВедомости = СтруктураДопСвойства.ДатаВедомостиНаВыплатуЗарплаты;
	НомерВедомости = СтруктураДопСвойства.НомерВедомостиНаВыплатуЗарплаты;
	ПустаяВедомость = Документы[ТипДокумента].ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ДатаВедомости) ИЛИ НЕ ЗначениеЗАполнено(НомерВедомости) Тогда
		Возврат ПустаяВедомость;
	КонецЕсли;
		
	Запрос = Новый Запрос ("
		|ВЫБРАТЬ
		|	ПлатежнаяВедомость.Ссылка КАК Ссылка,
		|	ПлатежнаяВедомость.Дата,
		|	ПлатежнаяВедомость.Номер
		|ИЗ
		|	Документ.[ТипДокумента] КАК ПлатежнаяВедомость
		|ГДЕ
		|	ПлатежнаяВедомость.Дата >= &ДатаН
		|	И ПлатежнаяВедомость.Дата <= &ДатаК
		|	И ПлатежнаяВедомость.Номер = &Номер");
	
	Запрос.УстановитьПараметр("ДатаН",НачалоДня(ДатаВедомости));
	Запрос.УстановитьПараметр("ДатаК",КонецДня(ДатаВедомости));
	Запрос.УстановитьПараметр("Номер",НомерВедомости);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ТипДокумента]",ТипДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяВедомость;
	КонецЕсли;
КонецФункции
Процедура ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTO, ПроверяемыеПоля)
	// Процедура проверяет, что поля, переданные в ПроверяемыеПоля
	// при переносе из XDTO в ПолученныеДанные не изменили своих значений.
	// Например, это может произойти из-за того, что в объекте XDTO передано значение, длина которого больше, чем
	// соответствующее поле объекта базы данных. Если такие поля участвуют в поиске, то сопоставление объектов может сломаться.
	// 
	// Передавать в структуру ПроверяемыеПоля можно только поля строковых типов.
	
	Для Каждого ОписаниеПоля Из ПроверяемыеПоля Цикл
		ЗначениеПоляXDTO = "";
		ДанныеXDTO.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		Если Не ЗначениеЗаполнено(ЗначениеПоляXDTO) Тогда
			ДанныеXDTO.КлючевыеСвойства.Свойство(ОписаниеПоля.Ключ, ЗначениеПоляXDTO);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗначениеПоляXDTO)
			И ЗначениеЗаполнено(ПолученныеДанные[ОписаниеПоля.Значение])
			И СокрЛП(ЗначениеПоляXDTO) <> СокрЛП(ПолученныеДанные[ОписаниеПоля.Значение]) Тогда
			 ТекстИсключения = НСтр("ru = 'Поле %1 полученного объекта имеет некорректное значение %2. Загрузка не возможна.'");
			 ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ОписаниеПоля.Ключ, ЗначениеПоляXDTO); 
			 ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
Процедура ПрочиеДоходыРасходы_ПолучитьКод(ДанныеXDTO, ПолученныеДанные, Префикс)
	КодВПрограмме = "";
	Если ДанныеXDTO.КлючевыеСвойства.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КлючевыеСвойства.КодВПрограмме;
	ИначеЕсли ДанныеXDTO.Свойство("КодВПрограмме") Тогда
		КодВПрограмме = ДанныеXDTO.КодВПрограмме;
	КонецЕсли; 
	
	Если КодВПрограмме <> "" Тогда
		ПолученныеДанные.Код = Лев(КодВПрограмме, 3) + Префикс + Сред(КодВПрограмме, 5);
	КонецЕсли;
КонецПроцедуры
Процедура ПТиУРасх_ВТП_ПередЗаписью(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	ПолученныеДанные.Склад = СкладДляЗагрузки(ПолученныеДанные.Склад, КомпонентыОбмена.ПараметрыКонвертации);
	
	#Область Мержевание
	Если Не ДанныеИБ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПолученныеДанные.Склад) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
	
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам4и2", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам4и2);
	ДанныеИБ.ДополнительныеСвойства.Вставить("НДСПоСтавкам18и10", ПолученныеДанные.ДополнительныеСвойства.НДСПоСтавкам18и10);
	
	ОбнулениеСчетовУчетаРасчетовВДанныхИБ(ПолученныеДанные, ДанныеИБ);
	
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Переносим свойства, не указанные в ПКС
	ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
		"Дата,ДоговорКонтрагента,ВалютаДокумента,Комментарий,
		|КратностьВзаиморасчетов,КурсВзаиморасчетов,
		|Организация,Ответственный,Склад,
		|СуммаВключаетНДС,
		|НДСВключенВСтоимость,Номер,СуммаДокумента");
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Сумма");
	МассивКлючевыхПолей.Добавить("СуммаВРознице");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("СтавкаНДС");
	МассивКлючевыхПолей.Добавить("СуммаНДС");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СчетУчетаНДС, СчетРасчетов");
	
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	
	ПолученныеДанные = Неопределено;
	
	#КонецОбласти
КонецПроцедуры
Функция РазличныеВидыДоговоров(МассивДоговоров)
	ВидыДоговоров = Новый Соответствие;
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат ВидыДоговоров;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Договоры", МассивДоговоров);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыКонтрагентов.ВидДоговора
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка В(&Договоры)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВидыДоговоров.Вставить(Выборка.ВидДоговора, Истина);
	КонецЦикла;
	
	Возврат ВидыДоговоров;
КонецФункции
Функция СкладДляВыгрузки(СкладИсходный, ПараметрыКонвертации)
	Если ПараметрыКонвертации.ВыгружатьАналитикуПоСкладам = ЛОЖЬ Тогда
		// отправляем пустой склад
		Возврат Справочники.Склады.ПустаяСсылка();
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СкладДляЗагрузки(СкладИсходный, ПараметрыКонвертации)
	Если ЗначениеЗаполнено(ПараметрыКонвертации.СкладПоУмолчанию) И НЕ ЗначениеЗаполнено(СкладИсходный) Тогда
		// Относим хозоперацию на склад по умолчанию
		Возврат ПараметрыКонвертации.СкладПоУмолчанию;
	Иначе
		Возврат СкладИсходный;
	КонецЕсли;
КонецФункции
Функция СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания)
	НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	Если ПараметрыСоздания.Свойство("ЗначенияЗаполнения") Тогда
		
		ЗаполнитьДоговорДаннымиЗаполнения(НовыйОбъект, ПараметрыСоздания.ЗначенияЗаполнения);
		
	КонецЕсли;
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		// В случае проблем при записи нового договора
		// записать предупреждение в журнал регистрации
		ШаблонСообщения = НСтр("ru = 'Не удалось записать справочник ""Договоры""
			|%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Изменение договоров контрагента'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Справочники.ДоговорыКонтрагентов, 
			НовыйОбъект.Ссылка,
			ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьОсновнойДоговорКонтрагента(НовыйОбъект.Ссылка);
	
	Возврат НовыйОбъект.Ссылка;
КонецФункции
Процедура СоздатьПКОКОтчетамОРозничныхПродажах(КомпонентыОбмена)
	МассивДокументов = КомпонентыОбмена.ПараметрыКонвертации.ОтчетыОРозничныхПродажахКОбработке;
	
	Для Каждого ОснованиеПКО Из МассивДокументов Цикл
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриходныйКассовыйОрдер.Ссылка КАК ДокументПКО
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
		|ГДЕ
		|	ПриходныйКассовыйОрдер.ДокументОснование = &ДокументОснование");
		Запрос.УстановитьПараметр("ДокументОснование", ОснованиеПКО);
		Выборка = Запрос.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			СсылкаНаПКО = Выборка.ДокументПКО;
			ДокументПКО = СсылкаНаПКО.ПолучитьОбъект();
		Иначе
			//Автоматически создадим документ ПКО отразив в нем розничную выручку
			ДокументПКО             = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ДокументПКО.Дата        = ОснованиеПКО.Дата;
			ДокументПКО.Комментарий = НСтр("ru = '#Создан автоматически при обмене '");
		КонецЕсли;
		
		НужноУстанавливатьНовыйНомер = ДокументПКО.Организация <> ОснованиеПКО.Организация;
		
		ДокументПКО.Заполнить(ОснованиеПКО);
		Если ДокументПКО.СуммаДокумента = 0 Тогда
			// Не удалось надлежащим образом заполнить документ. Не стоит его записывать.
			Продолжить;
		КонецЕсли;
		
		Если НужноУстанавливатьНовыйНомер Тогда
			ДокументПКО.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументПКО.Проведен = Истина;
		ОбменДаннымиСервер.УстановитьОбменДаннымиЗагрузка(ДокументПКО, Истина, Ложь, КомпонентыОбмена.УзелКорреспондента);
		ДокументПКО.Записать(РежимЗаписиДокумента.Запись);
		
		НоваяСтрока = КомпонентыОбмена.ДокументыДляОтложенногоПроведения.Добавить();
		НоваяСтрока.ДокументСсылка = ДокументПКО.Ссылка;
		НоваяСтрока.ДатаДокумента  = ДокументПКО.Дата;
	КонецЦикла;
КонецПроцедуры
Процедура СортировкаОбъектовПередОтложеннымЗаполнением(КомпонентыОбмена)
	// Необходимо обеспечить следующий порядок заполнения:
	// - справочники
	// - документы кроме корректировок и счетов-фактур
	// - корректировки поступления и реализации, созданные на основании исправительных счетов-фактур (в хронологическом порядке)
	// - счета-фактуры
	// - исправительные счет-фактуры
	
	ЗагруженныеОбъекты = КомпонентыОбмена.ЗагруженныеОбъекты;
	ЗагруженныеОбъекты.Колонки.Добавить("Очередность");
	ЗагруженныеОбъекты.Колонки.Добавить("ДатаДляСортировкиДокументов");
	ЗагруженныеОбъекты.Колонки.Добавить("НомерИсправленияДляСортировкиКорректировок");
	
	Для Каждого СтрокаТаблицы Из ЗагруженныеОбъекты Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Объект.МетаДанные();
		Если Метаданные.Справочники.Содержит(МетаданныеОбъекта)
			Или Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
			СтрокаТаблицы.Очередность = 1;
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
			
			СтрокаТаблицы.ДатаДляСортировкиДокументов = СтрокаТаблицы.Объект.Дата;
			
			Если ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				
				Если СтрокаТаблицы.Объект.Исправление Тогда
					СтрокаТаблицы.Очередность = 7;
				Иначе
					СтрокаТаблицы.Очередность = 6;
				КонецЕсли;
	
			ИначеЕсли ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления")
				Или ТипЗнч(СтрокаТаблицы.Объект.Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
				
				СтрокаТаблицы.Очередность = 5;
				СтрокаТаблицы.НомерИсправленияДляСортировкиКорректировок = СтрокаТаблицы.Объект.НомерИсправления;
				
			Иначе
				СтрокаТаблицы.Очередность = 4;
			КонецЕсли;
			
		Иначе
			СтрокаТаблицы.Очередность = 3;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагруженныеОбъекты.Сортировать("Очередность, ДатаДляСортировкиДокументов, НомерИсправленияДляСортировкиКорректировок");
КонецПроцедуры
Процедура СписаниеТоваров_ПередЗаписью(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации, КонвертацияСвойств)
	// Склад
	СкладИзПолученныхДанных = ПолученныеДанные.Склад;
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) Тогда
		ПолученныеДанные.Склад = ПараметрыКонвертации.СкладПоУмолчанию;
	КонецЕсли;
	
	Если ДанныеИБ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Склад
	Если Не ЗначениеЗаполнено(СкладИзПолученныхДанных) И ЗначениеЗаполнено(ДанныеИБ.Склад) Тогда
		ПолученныеДанные.Склад = ДанныеИБ.Склад;
	КонецЕсли;
			
	// Переносим те свойства, которые указаны в ПКС
	ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ);
	
	// Восстанавливаем "затертые" данные
	//Товары
	МассивКлючевыхПолей = Новый Массив;
	МассивКлючевыхПолей.Добавить("Номенклатура");
	МассивКлючевыхПолей.Добавить("ЕдиницаИзмерения");
	МассивКлючевыхПолей.Добавить("Количество");
	МассивКлючевыхПолей.Добавить("Себестоимость");
	МассивКлючевыхПолей.Добавить("Цена");
	МассивКлючевыхПолей.Добавить("НомерГТД");
	МассивКлючевыхПолей.Добавить("СтранаПроисхождения");
	
	ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ПолученныеДанные.Товары,
		ДанныеИБ.Товары,
		МассивКлючевыхПолей,
		"СчетУчета,СтавкаНДСВРознице, ОтражениеВУСН");
	ДанныеИБ.Товары.Загрузить(ПолученныеДанные.Товары.Выгрузить());
	ПолученныеДанные = Неопределено;
КонецПроцедуры
Функция СтавкаНДСЧислом(СтавкаНДС)
	СтавкиНДС = Перечисления.СтавкиНДС;
	СоответствиеСтавок = Новый Соответствие;
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20,     20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС20_120, 20);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18,     18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС18_118, 18);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10,     10);
	СоответствиеСтавок.Вставить(СтавкиНДС.НДС10_110, 10);
	
	СтавкаНДСЧислом = СоответствиеСтавок.Получить(СтавкаНДС);
	СтавкаНДСЧислом = ?(СтавкаНДСЧислом = Неопределено, 0, СтавкаНДСЧислом);
	
	Возврат СтавкаНДСЧислом;
КонецФункции
Функция СчетПоКоду(КодСчета)
	Если ЗначениеЗаполнено(КодСчета) Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("КодСчета", КодСчета);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Счет.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Счет
		|ГДЕ
		|	Счет.Код = &КодСчета";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	Иначе
		Возврат ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
КонецФункции
Процедура СчетФактураПолученный_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена)
	ЗапомнитьПрефиксДокумента(ПолученныеДанные, КомпонентыОбмена);
	
	Если ПолученныеДанные.СчетаФактурыВыданныеПокупателям.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПолученныеДанные.СчетФактураВыданныйПокупателю) Тогда
		ПолученныеДанные.СчетФактураВыданныйПокупателю = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].СчетФактура;
		ПолученныеДанные.Субкомиссионер = ПолученныеДанные.СчетаФактурыВыданныеПокупателям[0].Субкомиссионер;
	КонецЕсли;
	
	ПолученныеДанные.Дата = КонецДня(ПолученныеДанные.Дата);
	
	Если ДанныеИБ = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Дата, Организация, ВидСчетаФактуры, ДокументОснование, Исправление");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ПолученныеДанные);
		Если ЗначениеЗаполнено(СтруктураПараметров.ДокументОснование)
			И ОбщегоНазначения.СсылкаСуществует(СтруктураПараметров.ДокументОснование) Тогда
			ПолученныеДанные.НДСПредъявленКВычету = Документы.СчетФактураПолученный.ПолучитьПорядокОтраженияВычетаПоУмолчанию(СтруктураПараметров);
		КонецЕсли;
	Иначе
		Если КонецДня(ДанныеИБ.Дата) = ПолученныеДанные.Дата Тогда
			ПолученныеДанные.Дата = ДанныеИБ.Дата;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученныеДанные.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
		// Если в данных ИБ код вида операции уже указан, то его не перезатираем
		Если ДанныеИБ <> Неопределено И ЗначениеЗаполнено(ДанныеИБ.КодВидаОперацииНаУменьшение) Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = ДанныеИБ.КодВидаОперацииНаУменьшение;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.КодВидаОперацииНаУменьшение)
			И ПолученныеДанные.Дата >= '20150101' Тогда
			ПолученныеДанные.КодВидаОперацииНаУменьшение = "18";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, КомпонентыОбмена.ПараметрыКонвертации);
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
							ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
Процедура СчетФактураПолученный_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Если СокрЛП(ДанныеXDTO.СпособВыставления.Значение) = "ВЭлектронномВиде"  Тогда
		ПолученныеДанные.КодСпособаПолучения = 2;
	Иначе
		ПолученныеДанные.КодСпособаПолучения = 1;
	КонецЕсли;
	
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, КомпонентыОбмена);
	ДобавитьДоговорВДопСвойства(ПолученныеДанные, ДанныеXDTO);	
	ДобавитьВалютуВДопСвойства(ПолученныеДанные, ДанныеXDTO);
	
	//Документы-основания
	МассивСтрокДокументыОснования = Новый Массив;
	ДанныеXDTO.Вставить("ДокументОснование", Неопределено);
	Если ДанныеXDTO.Свойство("ДокументыОснования") И ЗначениеЗаполнено(ДанныеXDTO.ДокументыОснования) Тогда
		ЭтоПерваяСтрока = Истина;
		Для Каждого Строка ИЗ ДанныеXDTO.ДокументыОснования Цикл
			
			СтруктураДанныхСтроки = Новый Структура();
			
			ИмяПКО = ИмяПКОПоXDTOДокументаОснования(Строка.ДокументОснование);
			Если ЗначениеЗаполнено(ИмяПКО) Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО, УдалятьСозданныеПоКлючевымСвойствам",
					Строка.ДокументОснование, ИмяПКО, Истина);
				СтруктураДанныхСтроки.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
			
			СтруктураДанныхСтроки.Вставить("НомерИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("НомерИсходногоДокумента"), 
				ДанныеXDTO.НомерИсходногоДокумента, 0));
			СтруктураДанныхСтроки.Вставить("ДатаИсходногоДокумента",
				?(ДанныеXDTO.Свойство("ДатаИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсходногоДокумента, Дата(1, 1, 1)));
			СтруктураДанныхСтроки.Вставить("ДатаИсправленияИсходногоДокумента", 
				?(ДанныеXDTO.Свойство("ДатаИсправленияИсходногоДокумента"), 
				ДанныеXDTO.ДатаИсправленияИсходногоДокумента, Дата(1, 1, 1)));
			Если ДанныеXDTO.Свойство("НомерИсправленияИсходногоДокумента") Тогда 
				СтруктураДанныхСтроки.Вставить("НомерИсправленияИсходногоДокумента", ДанныеXDTO.НомерИсправленияИсходногоДокумента);
				СтруктураДанныхСтроки.Вставить("УчитыватьИсправлениеИсходногоДокумента", ЗначениеЗаполнено(ДанныеXDTO.НомерИсправленияИсходногоДокумента));
			КонецЕсли;
			МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтроки);
			
			Если ДанныеXDTO.ДокументыОснования.Количество() = 1 И ЭтоПерваяСтрока Тогда
				ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументОснование", ТекДокументОснование);
			КонецЕсли;
			
			Если ИмяПКО = "ПТиУ_ПоступлениеТоваровУслуг" Тогда
				ТекДокументОснование = Новый Структура("Значение, ИмяПКО, УдалятьСозданныеПоКлючевымСвойствам",
					Строка.ДокументОснование, "ПТиУ_ПоступлениеДопРасходов", Истина);
				СтруктураДанныхСтрокиДоп = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДанныхСтроки);
				СтруктураДанныхСтрокиДоп.ДокументОснование = ТекДокументОснование;
				МассивСтрокДокументыОснования.Добавить(СтруктураДанныхСтрокиДоп);
			КонецЕсли;
	
			ЭтоПерваяСтрока = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивСтрокДокументыОснования.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДокументыОснования", МассивСтрокДокументыОснования);
	КонецЕсли;
	
	//АВансы
	МассивСтрокАвансы = Новый Массив;
	Если ДанныеXDTO.Свойство("Авансы") И ЗначениеЗаполнено(ДанныеXDTO.Авансы) Тогда
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("Номенклатура", "Номенклатура");
		ПравилаЗаполнения.Вставить("Содержание", "Содержание");
		ПравилаЗаполнения.Вставить("СтавкаНДС", "СтавкаНДС");
		ПравилаЗаполнения.Вставить("СуммаНДС", "СуммаНДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
		Для Каждого Строка Из ДанныеXDTO.Авансы Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокАвансы.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	КонецЕсли;
	Если МассивСтрокАвансы.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("Авансы", МассивСтрокАвансы);
	КонецЕсли;
	// Счета фактуры выданные покупателям
	МассивСтрокСФ = Новый Массив; 
	Если ДанныеXDTO.Свойство("СчетаФактурыВыданныеПокупателям")
		И ЗначениеЗаполнено(ДанныеXDTO.СчетаФактурыВыданныеПокупателям) Тогда
		// Из табличной части
		ПравилаЗаполнения = Новый Соответствие;
		ПравилаЗаполнения.Вставить("СчетФактураВыданный", "СчетФактура");
		ПравилаЗаполнения.Вставить("Субкомиссионер", "Субкомиссионер");
		ПравилаЗаполнения.Вставить("Покупатель", "Покупатель");
		ПравилаЗаполнения.Вставить("СуммаНДС", "НДС");
		ПравилаЗаполнения.Вставить("Сумма", "Сумма");
	
		Для Каждого Строка Из ДанныеXDTO.СчетаФактурыВыданныеПокупателям Цикл
			СтруктураДанныхСтроки = ДанныеКоллекцииВВидеСтруктуры(Строка, ПравилаЗаполнения);
	
			МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
		КонецЦикла;
	ИначеЕсли ДанныеXDTO.Свойство("ДанныеРеализацииСчетФактураВыставленный") 
		И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный) Тогда
		// Из шапки
		СтруктураДанныхСтроки = Новый Структура("СчетФактура, НДС, Сумма, Субкомиссионер, Покупатель", 
				ДанныеXDTO.ДанныеРеализацииСчетФактураВыставленный,
				ПолученныеДанные.СуммаНДС, ПолученныеДанные.Сумма, 
				Неопределено, Неопределено);
		Если ДанныеXDTO.Свойство("ДанныеРеализацииСубкомиссионер") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииСубкомиссионер) Тогда
			СтруктураДанныхСтроки.Субкомиссионер = ДанныеXDTO.ДанныеРеализацииСубкомиссионер;
		КонецЕсли;
		Если ДанныеXDTO.Свойство("ДанныеРеализацииКонечныйПокупатель") 
			И ЗначениеЗаполнено(ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель) Тогда
			СтруктураДанныхСтроки.Покупатель = ДанныеXDTO.ДанныеРеализацииКонечныйПокупатель;
		КонецЕсли;
		МассивСтрокСФ.Добавить(СтруктураДанныхСтроки);
	КонецЕсли;
	Если МассивСтрокСФ.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("СчетаФактурыВыданныеПокупателям", МассивСтрокСФ);
		ПолученныеДанные.СводныйКомиссионный = (МассивСтрокСФ.Количество() > 1);
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьВидОперацииКорректировкиДолга(ПолученныеДанные)
	// Устанавливаем реквизиты ВидОперации, ВидАвансаЗадолженности, ТипАвансаЗадолженности в зависимости от состава табличных
	// частей и видов договоров в этих табличных частях
	
	ДоговорыДебиторскойЗадолженности = ПолученныеДанные.ДебиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровДебиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыДебиторскойЗадолженности);
	
	ДоговорыКредиторскойЗадолженности = ПолученныеДанные.КредиторскаяЗадолженность.ВыгрузитьКолонку("ДоговорКонтрагента");
	ВидыДоговоровКредиторскойЗадолженности = РазличныеВидыДоговоров(ДоговорыКредиторскойЗадолженности);
	
	// Если есть вид договора Прочее, то всегда используем "ВидОперации" "Прочее"
	Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено
		ИЛИ ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.Прочее) <> Неопределено Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	// В табличной части должны быть договора только одного вида - с поставщиком или с покупателем.
	// Если это не так - используем вид операции "Прочее"
	Если (ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    И ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено)
		 ИЛИ (ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено
		    	И ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено) Тогда
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		// При списании или переносе задолженности должна быть заполнена только дебиторская или только кредиторская задолженность.
		Если ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0
			И ПолученныеДанные.КредиторскаяЗадолженность.Количество() > 0 Тогда
			// Записи есть в обоих таблицах - используем вид операции Прочее
			ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
		ИначеЕсли ПолученныеДанные.ДебиторскаяЗадолженность.Количество() > 0 Тогда
		    // Заполнена только дебиторская задолженность.
		    // В табличной части могут быть только задолженность покупателя или авансы поставщику
		    Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С поставщиком", значит это аванс поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПоставщику;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		    КонецЕсли;
		Иначе
		    // Заполнена только кредиторская задолженность.
		    // В табличной части могут быть только задолженность поставщику или авансы от покупателя.
		    Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
		    	// В табличной части есть вид договора "С покупателем", значит это аванс покупателя.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		    Иначе
		    	// Во всех остальных случаях считаем, что это задолженность поставщику.
		    	ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПоставщику;
		    КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
		// При взаимозачете задолженности заполнены обе табличные части, при этом должны выполниться одно из 2-х условий:
		//  - в дебиторской задолженности должны быть только покупатели, в кредиторской - только поставщики (оставляем вид операции ЗачетЗадолженности) 
		//  - в дебиторской задолженности только поставщики, в кредиторской - только покупатели (используем вид операции ЗачетАвансов)
		
		Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
			// В дебиторской задолженности указаны покупатели, значит в кредиторской задолженности должны быть либо поставщики, либо договоры комиссии
			// Если это не так и в кредиторской задолженности есть Покупатели - то нужно использовать Прочее
			Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
			// В дебиторской задолженности указаны поставщики, значит в кредиторской задолженности должны быть либо покупатели, либо договоры комиссии
			// Если это не так и в кредиторской задолженности есть Покупатели - то нужно использовать Прочее
			// Если условие выполняется - то нужно изменить вид операции на ЗачетАвансов
			Если ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
			// В кредиторской задолженности указаны поставщики, значит в дебиторской задолженности должны быть либо покупатели, либо договоры комиссии
			// Если это не так и в дебиторской задолженности есть поставщики - то нужно использовать Прочее
			Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности;
			КонецЕсли;
		ИначеЕсли ВидыДоговоровКредиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
			// В кредиторской задолженности указаны покупатели, значит в дебиторской задолженности должны быть либо поставщики, либо договоры комиссии
			// Если это не так и в дебиторской задолженности есть Поставщики - то нужно использовать Прочее
			// Если условие выполняется - то нужно изменить вид операции на ЗачетАвансов
			Если ВидыДоговоровДебиторскойЗадолженности.Получить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) <> Неопределено Тогда
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
			Иначе
				ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов;
			КонецЕсли;
		КонецЕсли;
		
		// Так как для логики работы документа при взаимозачете не важно, какой будет вид аванса задолженности, то всегда устанавливаем покупателя.
		Если ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности Тогда
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.ЗадолженностьПокупателя;
		ИначеЕсли ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов Тогда
			ПолученныеДанные.ВидАвансаЗадолженности = Перечисления.ВидыАвансаЗадолженности.АвансыПокупателя;
		КонецЕсли;
		
	ИначеЕсли ПолученныеДанные.ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		// При переносе поддерживается только "Списание задолженности", все остальные виды операций загружаются как "Прочее"
		ПолученныеДанные.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	КонецЕсли;
	
	Если ПолученныеДанные.КонтрагентКредитор = ПолученныеДанные.КонтрагентДебитор Тогда
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.СамогоКонтрагента;
	Иначе
		ПолученныеДанные.ТипАвансаЗадолженности = Перечисления.ТипыЗадолженности.ТретьегоЛица;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьЗначенияФункциональныхОпций()
	// Использование корректировок.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКорректировочныеДокументы") Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаПоступления КАК Док
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	1 КАК Поле1
			|ИЗ
			|	Документ.КорректировкаРеализации КАК Док");
		Если Не Запрос.Выполнить().Пустой() Тогда
			Константы.ИспользоватьКорректировочныеДокументы.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ДанныеXDTO, ОрганизацияXDTO)
	ПодразделениеXDTO = Неопределено;
	ДанныеXDTO.Свойство("ВышестоящееПодразделение", ПодразделениеXDTO);
	Если ЗначениеЗаполнено(ПодразделениеXDTO)
		И ЗначениеЗаполнено(ОрганизацияXDTO) Тогда
	
		ПодразделениеXDTO.Вставить("Организация", ОрганизацияXDTO);
		
		УстановитьОрганизациюВВышестоящееПодразделениеXDTO(ПодразделениеXDTO, ОрганизацияXDTO);	
		
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьПользовательскийПрефиксНомера(ПолученныеДанные, ДанныеXDTO, ПользовательскийПрефикс)
	НомерДокумента = ?(ДанныеXDTO.Свойство("Номер"), ДанныеXDTO.Номер, ДанныеXDTO.КлючевыеСвойства.Номер);
	
	ДлинаПрефикса = СтрДлина(ПользовательскийПрефикс);
	НачалоЗамены  = 5;
	НомерДокументаСПрефиксом = Лев(НомерДокумента, НачалоЗамены) + ПользовательскийПрефикс + Сред(НомерДокумента, НачалоЗамены + ДлинаПрефикса + 1);
	
	ПолученныеДанные.Номер = НомерДокументаСПрефиксом;
	
	ДанныеXDTOДляПроверки = Новый Структура("Номер", НомерДокументаСПрефиксом);
	
	ПроверяемыеПоля = Новый Структура("Номер", "Номер");
	ПроверитьКлючевыеПоляНаНекорретныеЗначения(ПолученныеДанные, ДанныеXDTOДляПроверки, ПроверяемыеПоля);
КонецПроцедуры
Процедура УстановитьПризнакПроведенПриЗагрузке(ПолученныеДанные, ДанныеИБ, ПараметрыКонвертации)
	ПризнакПроведенПолученный = Неопределено;
	// Устанавливается в особых случаях, когда проведение документа зависит от других данных.
	// Например, если отсутствует ДатаВыписки в ПБДС и СБДС документ должен быть не проведен.
	ПолученныеДанные.ДополнительныеСвойства.Свойство("Проведен", ПризнакПроведенПолученный);
	
	// Если признак проведения не был задан явно, считается что он взведен.
	Если ПризнакПроведенПолученный = Неопределено Тогда
		ПризнакПроведенПолученный = Истина;
	КонецЕсли;
	Если НЕ ПараметрыКонвертации.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		Если ДанныеИБ = Неопределено Тогда
			ПолученныеДанные.Проведен = Ложь;
		ИначеЕсли ПризнакПроведенПолученный = Ложь Тогда
			ПолученныеДанные.Проведен = Ложь;
		Иначе
			// Если документы при загрузке не проводятся, признак проведения остается как в базе-получателе.
			ПолученныеДанные.Проведен = ДанныеИБ.Проведен;
		КонецЕсли;
	Иначе
		ПолученныеДанные.Проведен = ПризнакПроведенПолученный;
	КонецЕсли;
	Если ДанныеИБ <> Неопределено Тогда
		ДанныеИБ.Проведен = ПолученныеДанные.Проведен;
	КонецЕсли;
КонецПроцедуры
Процедура УстановитьСтавкуНДС4и2ВДоговоре(Объект)
	Если Объект.ДополнительныеСвойства.Свойство("НДСПоСтавкам4и2")
		И ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И ОбщегоНазначения.СсылкаСуществует(Объект.ДоговорКонтрагента) Тогда
		
		НДСПоСтавкам4и2ВДоговоре = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "НДСПоСтавкам4и2");
		НДСПоСтавкам4и2Новая     = Объект.ДополнительныеСвойства.НДСПоСтавкам4и2;
		ДоговорМодифицирован     = Ложь;
		
		Если НДСПоСтавкам4и2Новая
			И Не НДСПоСтавкам4и2ВДоговоре Тогда
			ДоговорМодифицирован = Истина;
		Иначе
			Если Объект.ДополнительныеСвойства.НДСПоСтавкам18и10
				И НДСПоСтавкам4и2ВДоговоре Тогда
				ДоговорМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ДоговорМодифицирован Тогда
			ДоговорОбъекта = Объект.ДоговорКонтрагента.ПолучитьОбъект();
			ДоговорОбъекта.ОбменДанными.Загрузка = Истина;
			ДоговорОбъекта.НДСПоСтавкам4и2       = НДСПоСтавкам4и2Новая;
			ДоговорОбъекта.Записать();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
Процедура УточнитьСтавкуНДСВСтроке(Строка, СтруктураДанныхСтроки, НДСПоСтавкам4и2, НДСПоСтавкам18и10)
	Если ЗначениеЗаполнено(Строка.СтавкаНДС)
		И ЗначениеЗаполнено(Строка.СтавкаНДС.Значение) Тогда
		Если Строка.СтавкаНДС.Значение = "НДС2" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС2_102" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС10_110";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4" Тогда
		    СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18";
		    НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС4_104" Тогда
			СтруктураДанныхСтроки.СтавкаНДС.Значение = "НДС18_118";
			НДСПоСтавкам4и2 = Истина;
		ИначеЕсли Строка.СтавкаНДС.Значение = "НДС18"
			Или Строка.СтавкаНДС.Значение = "НДС18_118"
			Или Строка.СтавкаНДС.Значение = "НДС20"
			Или Строка.СтавкаНДС.Значение = "НДС20_120"
			Или Строка.СтавкаНДС.Значение = "НДС10"
			Или Строка.СтавкаНДС.Значение = "НДС10_110" Тогда
			НДСПоСтавкам18и10 = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
Функция ЭтоЗагрузкаКлючевыхСвойств(ДанныеXDTO)
	// ДанныеXDTO содержат только 1 свойство, 
	// значит выполняется загрузка значения свойства, а не самого объекта. 
	Возврат ДанныеXDTO.Количество() = 1;
КонецФункции

#КонецОбласти
#Область Параметры
// Заполняет параметры конвертации.
//
// Параметры:
//  ПараметрыКонвертации - структура, в которую добавляются параметры конвертации.
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
	ПараметрыКонвертации.Вставить("ВидыОплатПоУмолчанию");
	ПараметрыКонвертации.Вставить("ВыгружатьАналитикуПоСкладам");
	ПараметрыКонвертации.Вставить("ДатаОкончанияПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("ДатаОстатков");
	ПараметрыКонвертации.Вставить("ЗагруженныеОбъекты");
	ПараметрыКонвертации.Вставить("КонтрагентРозничныйПокупатель");
	ПараметрыКонвертации.Вставить("ПравилаЗагрузкиПодразделений");
	ПараметрыКонвертации.Вставить("РазрешитьПроведениеДокументовПриЗагрузке");
	ПараметрыКонвертации.Вставить("СкладПоУмолчанию");
	ПараметрыКонвертации.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров");
	ПараметрыКонвертации.Вставить("ТаблицаДолгиАвансыКредитыЗаймы");
	ПараметрыКонвертации.Вставить("НоменклатурнаяГруппаПоУмолчанию");
	ПараметрыКонвертации.Вставить("ПрефиксыЗагруженныхДокументов");
	ПараметрыКонвертации.Вставить("ЗагруженныеДопРеквизитыИСведения");
	ПараметрыКонвертации.Вставить("ДатаНачалаПериодаВыгрузкиДокументов");
	ПараметрыКонвертации.Вставить("СчетаФактурыЗаполнитьДокументыОснования");
	ПараметрыКонвертации.Вставить("СчетФактурыПолученныеКОбработке");
	ПараметрыКонвертации.Вставить("СчетФактурыВыданныеКОбработке");
	ПараметрыКонвертации.Вставить("ОтчетыОРозничныхПродажахКОбработке");
	ПараметрыКонвертации.Вставить("НовыеДоговорыКонтрагентов");
	ПараметрыКонвертации.Вставить("СоздаватьПКОРозничнаяВыручка");
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
// Процедура-обертка, выполняет запуск указанной в параметрах процедуры модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяПроцедуры - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ИнвентаризацияТоваров_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_ПРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКО_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_РКО_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СРС_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СРС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_СчетПоставщика_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Банки_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Банки_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ДокументыФизическихЛиц_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Контрагенты_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Контрагенты_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ЛицензииПоставщиковАлкогольнойПродукции_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Номенклатура_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Номенклатура_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_НоменклатурнаяГруппа_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Склады_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_Склады_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СпецификацииНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_СтатьиДДС_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ФизическиеЛица_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке" Тогда 
		ПОД_Справочник_ШтрихкодыНоменклатуры_Отправка_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_АвансовыйОтчет_ПриОбработке" Тогда 
		ПОД_Документ_АвансовыйОтчет_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ВозвратПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ОтчетБанкаПоОперациямЭквайринга_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПередачаПереработчику_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке" Тогда 
		ПОД_Документ_ПКОРозничнаяВыручка_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_ПоступлениеТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияПодарочныхСертификатов_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке" Тогда 
		ПОД_Документ_РеализацияТоваровУслуг_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_РКОНаБанковскийСчет_Получение_ПриОбработке" Тогда 
		ПОД_Документ_РКОНаБанковскийСчет_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СборкаТоваров_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СборкаТоваров_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке" Тогда 
		ПОД_Документ_СчетФактураПолученный_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПОД_Справочник_Должности_Получение_ПриОбработке" Тогда 
		ПОД_Справочник_Должности_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиБезналичныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиКредитыЗаймы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНаличныхДенежныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиНематериальныхАктивов_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиОсновныхСредств_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПокупателямиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиРасчетыСПоставщикамиДолги_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиСобственныхТМЦ_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТараПринятая_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПереданныхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОстаткиТоваровПринятыхНаКомиссию_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПоступлениеТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПоПлатежнымКартам_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочееПоступление_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСПрочиеДоходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ПРСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗП_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗПНаЛС_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Контрагенты_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Номенклатура_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Организации_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Подразделения_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Склады_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Отправка_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_АннулированиеПодарочныхСертификатов_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаБанкКарту_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ВозвратПодарочныхСертификатов_ВозвратНаличными_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АвансовыйОтчет_Получение_ПоляПоиска_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_АктВыполненныхРабот_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_АктВыполненныхРабот_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзПроизводства_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратМатериаловИзЭксплуатации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратСырьяОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровОтПокупателя_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ВыпускПродукции_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ЗаказКлиента_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ИнвентаризацияТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаДолга_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаПоступления_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_КорректировкаРеализации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОперацияПоПлатежнойКарте_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОприходованиеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетБанкаПоЭквайрингу_КоррДолга_Получ_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомиссионераОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетКомитентуОПродажах_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетОРозничныхПродажах_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ОтчетПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПоПлатежнымКартам_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаДавальцу_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаМатериаловВЭксплуатацию_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПередачаПереработчику_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПеремещениеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПолучениеНаличныхВБанкеСБДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочееПоступление_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОПрочиеДоходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПКОРозничнаяВыручка_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеОтПереработчика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ПоступлениеСырьяОтДавальца_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияОтгруженныхТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РеализацияТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВнутренняяПередача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОВыплатаЗарплаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОНаБанковскийСчетПБДС_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочаяВыдача_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОПрочийРасход_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РКОРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_РТиУБезПереходаПравСобственностиУслуги_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСКонвертацияВалюты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПереводНаДругойСчет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗаработнойПлаты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПеречислениеЗарПлЛицСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПлатежиВБюджет_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочееСписание_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСПрочиеРасходы_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыСКонтрагентами_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СБДСРасчетыССотрудниками_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СборкаТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеПриСборке_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СписаниеТоваров_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетПоставщика_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураВыданный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Испр_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_СчетФактураПолученный_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТаможеннаяДекларация_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_ТребованиеНакладная_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Документ_УстановкаЦенНоменклатуры_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеДопРасходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУ_ПоступлениеТоваровУслуг_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровПоставщику_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ВозвратТоваровСтороннейКомпании_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_ОприходованиеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_ПТиУРасх_СписаниеТоваров_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаКартой_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_РеализацияПодарочныхСертификатов_ОплатаНаличными_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_БанковскиеСчета_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДоговорыКонтрагентов_ИзСтруктуры_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДокументыФизическихЛиц_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_НомераГТДИзСтроки_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Организации_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Организации_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Подразделения_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Склады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Склады_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиРасходов_ПрочиеДоходыИРасходы_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Банки_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Валюты_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Валюты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_ДополнительныеРеквизиты_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ЕдиницыИзмерения_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_Пользователи_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Пользователи_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Пользователи_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_РегистрацииВНалоговомОргане_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_СтатьиДоходов_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриОтправкеДанных" Тогда 
		ПКО_Справочник_ТипыЦен_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_ТипыЦен_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_АвансовыйОтчет" Тогда 
		ОтложеннаяОбработка_АвансовыйОтчет(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци" Тогда 
		ОтложеннаяОбработка_ВозвратМатериаловИзЭксплуатаци(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровОтПокупателя" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровОтПокупателя(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВозвратТоваровПоставщику" Тогда 
		ОтложеннаяОбработка_ВозвратТоваровПоставщику(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ВыпускПродукции" Тогда 
		ОтложеннаяОбработка_ВыпускПродукции(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ДоговорыКонтрагентов" Тогда 
		ОтложеннаяОбработка_ДоговорыКонтрагентов(
			Параметры.Объект, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаДолга" Тогда 
		ОтложеннаяОбработка_КорректировкаДолга(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаПоступления" Тогда 
		ОтложеннаяОбработка_КорректировкаПоступления(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_КорректировкаРеализации" Тогда 
		ОтложеннаяОбработка_КорректировкаРеализации(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Номенклатура" Тогда 
		ОтложеннаяОбработка_Номенклатура(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_НоменклатураГруппа" Тогда 
		ОтложеннаяОбработка_НоменклатураГруппа(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОперацияПоПлатежнойКарте" Тогда 
		ОтложеннаяОбработка_ОперацияПоПлатежнойКарте(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП" Тогда 
		ОтложеннаяОбработка_ОплатаПлатежнойКартой_БП(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОприходованиеТоваров" Тогда 
		ОтложеннаяОбработка_ОприходованиеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Организации" Тогда 
		ОтложеннаяОбработка_Организации(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомиссионераОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомиссионераОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетКомитентуОПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетКомитентуОПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ОтчетОРозничныхПродажах" Тогда 
		ОтложеннаяОбработка_ОтчетОРозничныхПродажах(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередачаМатериаловВПереработку" Тогда 
		ОтложеннаяОбработка_ПередачаМатериаловВПереработку(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию" Тогда 
		ОтложеннаяОбработка_ПередМатериаловВЭксплуатацию(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПеремещениеТоваров" Тогда 
		ОтложеннаяОбработка_ПеремещениеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКО_Расчеты" Тогда 
		ОтложеннаяОбработка_ПКО_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке" Тогда 
		ОтложеннаяОбработка_ПКОПолучениеНаличныхВБанке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПКОРозничнаяВыручка" Тогда 
		ОтложеннаяОбработка_ПКОРозничнаяВыручка(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДенежныхСредств" Тогда 
		ОтложеннаяОбработка_ПоступлениеДенежныхСредств(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеДопРасходов" Тогда 
		ОтложеннаяОбработка_ПоступлениеДопРасходов(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты" Тогда 
		ОтложеннаяОбработка_ПоступлениеНаРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПоступлениеОтПереработчика" Тогда 
		ОтложеннаяОбработка_ПоступлениеОтПереработчика(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ПТиУ" Тогда 
		ОтложеннаяОбработка_ПТиУ(
			Параметры.Объект, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияОтгруженныхТоваров" Тогда 
		ОтложеннаяОбработка_РеализацияОтгруженныхТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РеализацияУслугПоПереработке" Тогда 
		ОтложеннаяОбработка_РеализацияУслугПоПереработке(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_РТиУ" Тогда 
		ОтложеннаяОбработка_РТиУ(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СБДСПереводНаДругойСчет" Тогда 
		ОтложеннаяОбработка_СБДСПереводНаДругойСчет(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СборкаТоваров" Тогда 
		ОтложеннаяОбработка_СборкаТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_Склады" Тогда 
		ОтложеннаяОбработка_Склады(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Прочее" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Прочее(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеСРС_Расчеты" Тогда 
		ОтложеннаяОбработка_СписаниеСРС_Расчеты(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СписаниеТоваров" Тогда 
		ОтложеннаяОбработка_СписаниеТоваров(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СтатьиРасходов" Тогда 
		ОтложеннаяОбработка_СтатьиРасходов(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами" Тогда 
		ОтложеннаяОбработка_СчетаБУРасчетовСКонтрагентами(
			Параметры.Объект);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетНаОплатуПокупателю" Тогда 
		ОтложеннаяОбработка_СчетНаОплатуПокупателю(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураВыданный" Тогда 
		ОтложеннаяОбработка_СчетФактураВыданный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_СчетФактураПолученный" Тогда 
		ОтложеннаяОбработка_СчетФактураПолученный(
			Параметры.Объект, Параметры.ОбъектМодифицирован, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТаможеннаяДекларация" Тогда 
		ОтложеннаяОбработка_ТаможеннаяДекларация(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_ТребованиеНакладная" Тогда 
		ОтложеннаяОбработка_ТребованиеНакладная(
			Параметры.Объект, Параметры.КомпонентыОбмена.ПараметрыКонвертации, Параметры.ОбъектМодифицирован);
	ИначеЕсли ИмяПроцедуры = "ОтложеннаяОбработка_УстановкаЦенНоменклатуры" Тогда 
		ОтложеннаяОбработка_УстановкаЦенНоменклатуры(
			Параметры.Объект);
	КонецЕсли;
КонецПроцедуры
// Процедура-обертка, выполняет запуск указанной в параметрах функции модуля менеджера обмена через формат.
//
// Параметры:
//  ИмяФункции - строка.
//  СтруктураПараметров - структура, содержащая передаваемые параметры.
Функция ВыполнитьФункциюМодуляМенеджера(ИмяФункции, Параметры) Экспорт
	Если ИмяФункции = "ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровОтПокупателя_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ВозвратТоваровПоставщику_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОприходованиеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиБезналичныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиЗадолженностиПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиКредитыЗаймы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНаличныхДенежныхСредств_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиНематериальныхАктивов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиОсновныхСредств_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиПерерасходаПодотчетныхЛиц_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПокупателямиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиАвансы_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиРасчетыСПоставщикамиДолги_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиСобственныхТМЦ_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТараПринятая_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПереданныхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОстаткиТоваровПринятыхНаКомиссию_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ОтчетОРозничныхПродажах_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПеремещениеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПоступлениеТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ПРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ПРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РеализацияТоваровУслуг_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_РКО_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_РКО_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СписаниеТоваров_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_СРС_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_СРС_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_ТаможеннаяДекларация_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Документ_УстановкаЦенНоменклатуры_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_Банки_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_Банки_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяФункции = "ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных" Тогда 
		Возврат ПОД_Справочник_ДоговорыКонтрагентов_Отправка_ВыборкаДанных(
			Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецФункции

#КонецОбласти
