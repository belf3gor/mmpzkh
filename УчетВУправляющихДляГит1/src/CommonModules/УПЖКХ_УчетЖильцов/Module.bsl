
#Область СлужебныеПроцедурыИФункции

// Функция возвращает предыдущую дату для заполнения даты снятия с регистрации или даты выбытия.
//
// Параметры
//  Дата         – Дата – дата для представления.
//
// Возвращаемое значение:
//  Дата – дата в требуемом формате.
//
Функция ПолучитьДатуВыбытия(Дата) Экспорт
	
	Если ЗначениеЗаполнено(Дата) Тогда
		ДатаВыбытия = НачалоДня(Дата) - 1;
	Иначе
		ДатаВыбытия = Дата;
	КонецЕсли;
	
	Возврат ДатаВыбытия;
	
КонецФункции // ПолучитьДатуВыбытия()

// Получает период выбранного жильца из регистра сведений "Воинский учет" на момент Рабочей даты.
//
Функция ПолучитьДанныеВоинскогоУчетаФизическогоЛица(ФизическоеЛицо, ДатаПолученияСведений = Неопределено) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	Если ДатаПолученияСведений = Неопределено Тогда 
		ДатаПолученияСведений = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ДатаСреза",      ДатаПолученияСведений);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВоинскомУчете.Период,
	|	ДанныеОВоинскомУчете.ФизическоеЛицо,
	|	ДанныеОВоинскомУчете.ОтношениеКВоинскойОбязанности,
	|	ДанныеОВоинскомУчете.ОтношениеКВоинскомуУчету,
	|	ДанныеОВоинскомУчете.КатегорияЗапаса,
	|	ДанныеОВоинскомУчете.Звание,
	|	ДанныеОВоинскомУчете.Состав,
	|	ДанныеОВоинскомУчете.ВУС,
	|	ДанныеОВоинскомУчете.Годность,
	|	ДанныеОВоинскомУчете.Военкомат,
	|	ДанныеОВоинскомУчете.НаличиеМобпредписания,
	|	ДанныеОВоинскомУчете.НомерКомандыПартии,
	|	ДанныеОВоинскомУчете.ЗабронированОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_ВоинскийУчет.СрезПоследних(&ДатаСреза, ФизическоеЛицо = &ФизическоеЛицо) 
	|		КАК ДанныеОВоинскомУчете";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	СписокКолонок = ТаблицаДанных.Колонки;
	Если ТаблицаДанных.Количество() > 0 Тогда
		СтрокаДанных = ТаблицаДанных[0];
		Для Каждого ТекКолонка Из СписокКолонок Цикл
			СтруктураДанных.Вставить(ТекКолонка.Имя, СтрокаДанных[ТекКолонка.Имя]);
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Формирует представление строки данных жильца о воинском учете.
//
Функция ПолучитьПредставлениеДанныхВоинскогоУчетаФизическогоЛица(ФизическоеЛицо, ВидПредставленияПустой = "Ввести данные о воинском учете") Экспорт
	
	ДанныеВоинскогоУчетаФизЛица = ПолучитьДанныеВоинскогоУчетаФизическогоЛица(ФизическоеЛицо);
	
	Если НЕ ДанныеВоинскогоУчетаФизЛица = Неопределено Тогда 
		
		Если ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскойОбязанности = 
				Перечисления.УПЖКХ_ОтношениеКВоинскойОбязанности.НеВоеннообязанный Тогда
			ПредставлениеСтроки = Перечисления.УПЖКХ_ОтношениеКВоинскойОбязанности.НеВоеннообязанный;
		Иначе
			ПредставлениеСтроки = ?(ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскойОбязанности = "", 
									"", Строка(ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскойОбязанности));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.КатегорияЗапаса) = "",
									  "", "Категория: " + ДанныеВоинскогоУчетаФизЛица.КатегорияЗапаса),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.КатегорияЗапаса) = "",
									  "", ", Категория: " + ДанныеВоинскогоУчетаФизЛица.КатегорияЗапаса));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Звание) = "",
									  "", "Звание: " + ДанныеВоинскогоУчетаФизЛица.Звание),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Звание) = "",
									  "", ", Звание: " + ДанныеВоинскогоУчетаФизЛица.Звание));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Состав) = "",
									  "", "Состав: " + ДанныеВоинскогоУчетаФизЛица.Состав),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Состав) = "",
									  "", ", Состав: " + ДанныеВоинскогоУчетаФизЛица.Состав));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(ДанныеВоинскогоУчетаФизЛица.ВУС = "",
									  "", "ВУС: " + ДанныеВоинскогоУчетаФизЛица.ВУС),
									?(ДанныеВоинскогоУчетаФизЛица.ВУС = "",
									  "", ", ВУС: " + ДанныеВоинскогоУчетаФизЛица.ВУС));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Годность) = "",
									  "", "Годность: " + ДанныеВоинскогоУчетаФизЛица.Годность),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Годность) = "",
									  "", ", Годность: " + ДанныеВоинскогоУчетаФизЛица.Годность));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Военкомат) = "",
									  "", "Военкомат: " + ДанныеВоинскогоУчетаФизЛица.Военкомат),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.Военкомат) = "",
									  "", ", Военкомат: " + ДанныеВоинскогоУчетаФизЛица.Военкомат));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскомуУчету) = "",
									  "", ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскомуУчету),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскомуУчету) = "",
									  "", ", " + ДанныеВоинскогоУчетаФизЛица.ОтношениеКВоинскомуУчету));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(Строка(ДанныеВоинскогоУчетаФизЛица.ЗабронированОрганизацией) = "",
									  "", "Забронирован за организацией " + ДанныеВоинскогоУчетаФизЛица.ЗабронированОрганизацией),
									?(Строка(ДанныеВоинскогоУчетаФизЛица.ЗабронированОрганизацией) = "",
									  "", ", забронирован за организацией " + ДанныеВоинскогоУчетаФизЛица.ЗабронированОрганизацией));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(НЕ ДанныеВоинскогоУчетаФизЛица.НаличиеМобпредписания, "", "Имеет мобпредписание"),
									?(НЕ ДанныеВоинскогоУчетаФизЛица.НаличиеМобпредписания, "", ", имеет мобпредписание"));
			ПредставлениеСтроки = ПредставлениеСтроки
								+ ?(ПредставлениеСтроки = "",
									?(ДанныеВоинскогоУчетаФизЛица.НомерКомандыПартии = "",
									  "", "№ команды: " + ДанныеВоинскогоУчетаФизЛица.НомерКомандыПартии),
									?(ДанныеВоинскогоУчетаФизЛица.НомерКомандыПартии = "",
									  "", ", № команды: " + ДанныеВоинскогоУчетаФизЛица.НомерКомандыПартии));
		КонецЕсли;
		
	Иначе
		ПредставлениеСтроки = ВидПредставленияПустой;
	КонецЕсли;
	
	Если ПредставлениеСтроки = "" Тогда
		ПредставлениеСтроки = ВидПредставленияПустой;
	КонецЕсли;
	
	Возврат ПредставлениеСтроки;
	
КонецФункции

// Процедура осуществляет проверку дублей в справочнике ФизическиеЛица.
// Проверка происходит по паспортным данным, ИНН, ПФР и ФИО.
//
Процедура ПроверитьДублиФизлиц(Ссылка, ЗаписьПаспортныхДанных = Неопределено, ИНН, ПФР, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных	= Ложь;
	ЕстьДублиИНН				= Ложь;
	ЕстьДублиПФР				= Ложь;
	
	Если ЗаписьПаспортныхДанных <> Неопределено И (ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид)
		ИЛИ ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия)
		ИЛИ ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер)
		ИЛИ ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи)
		ИЛИ ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументКодПодразделения)) Тогда
		
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",						Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ВидДокумента",				ЗаписьПаспортныхДанных.ВидДокумента);
		ЗапросПоДублям.УстановитьПараметр("СерияДокумента",				ЗаписьПаспортныхДанных.СерияДокумента);
		ЗапросПоДублям.УстановитьПараметр("НомерДокумента",				ЗаписьПаспортныхДанных.НомерДокумента);
		ЗапросПоДублям.УстановитьПараметр("ДатаВыдачиДокумента",		ЗаписьПаспортныхДанных.ДатаВыдачиДокумента);
		ЗапросПоДублям.УстановитьПараметр("КодПодразделения",			ЗаписьПаспортныхДанных.КодПодразделения);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыФизическихЛиц.ФизЛицо КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|ГДЕ
		|	ДокументыФизическихЛиц.ФизЛицо <> &Ссылка
		|	И ДокументыФизическихЛиц.ВидДокумента = &ДокументВид
		|	И ДокументыФизическихЛиц.Серия = &ДокументСерия
		|	И ДокументыФизическихЛиц.Номер = &ДокументНомер
		|	И ДокументыФизическихЛиц.ДатаВыдачи = &ДокументДатаВыдачи
		|	И ДокументыФизическихЛиц.КодПодразделения = &ДокументКодПодразделения
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Физлицо: " + ВыборкаЗапроса.Физлицо + " имеет такие же паспортные данные как и у " + Строка(Ссылка);
			Сообщение.Сообщить();
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИНН",	ИНН);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.ИНН = &ИНН
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Физлицо: " + ВыборкаЗапроса.Физлицо + " имеет такой же ИНН как и у " + Строка(Ссылка);
			Сообщение.Сообщить();
			ЕстьДублиИНН = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Число("0"+СтрЗаменить(СтрЗаменить(ПФР, "-", ""), " ", ""))) Тогда
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ПФР",	ПФР);
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Ссылка КАК Физлицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка <> &Ссылка
		|	И ФизическиеЛица.СтраховойНомерПФР = &ПФР
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическиеЛица.Наименование";
		
		ВыборкаЗапроса = ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Физлицо: " + ВыборкаЗапроса.Физлицо + " имеет такой же страховой номер ПФР как и у " + Строка(Ссылка);
			Сообщение.Сообщить();
			ЕстьДублиПФР = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФИО)
	  И НЕ ЕстьДублиИНН
	  И НЕ ЕстьДублиПаспортныхДанных
	  И НЕ ЕстьДублиПФР Тогда
		 
		ЗапросПоДублям = Новый Запрос;
		
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО",	СтрЗаменить(ФИО, " ", ""));
		
		ЗапросПоДублям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФИОФизическихЛиц.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
		|ГДЕ
		|	ФИОФизическихЛиц.ФизическоеЛицо <> &Ссылка
		|	И ФИОФизическихЛиц.Фамилия + ФИОФизическихЛиц.Имя + ФИОФизическихЛиц.Отчество = &ФИО";
		
		ВыборкаЗапроса 				= ЗапросПоДублям.Выполнить().Выбрать();
		
		Пока ВыборкаЗапроса.Следующий() Цикл
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Физлицо с таким ФИО (" + ВыборкаЗапроса.ФизическоеЛицо +") уже есть в справочнике";
			Сообщение.Сообщить();
			ЕстьДублиПаспортныхДанных = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Считываем последнее состояние регистра сведений о физлице и заполняем переданный набор записей.
//
// Параметры
//  Физлицо - 
//  НаборЗаписей  - 
//
Процедура ПолучитьСвязанныеДанныеФизлица(Физлицо, НаборЗаписей) Экспорт

	НаборЗаписей.Очистить();
	
	Если Физлицо.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ИмяТаблицы = НаборЗаписей.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПарамФизЛицо",Физлицо);
	Запрос.УстановитьПараметр("парамДатаСреза", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвязанныеДанные.*
	|ИЗ
	|	РегистрСведений." + ИмяТаблицы + ".СрезПоследних(&парамДатаСреза, ФизическоеЛицо = &ПарамФизЛицо) 
	|		КАК СвязанныеДанные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСвязанныеДанныеФизлица()

// Функция получает паспортные данные по физлицу.
//
// Параметры:
//  Период - Дата поиска.
//  ТекФизЛицо - Ссылка на справочник ФизЛица.
//
// Возвращаемое значение:
//  Структура - Записи с паспортными данными.
// 
Функция ЗаполнитьПаспортныеДанныеФизЛица(Период, ТекФизЛицо) Экспорт
	
	ПаспортныеДанные = ПолучитьПустыеПаспортныеДанные();
	
	ЗапросПаспортныеДанные = Новый Запрос();
	ЗапросПаспортныеДанные.УстановитьПараметр("Период",  ?(НЕ ЗначениеЗаполнено(Период), '19000101', КонецДня(Период)));
	ЗапросПаспортныеДанные.УстановитьПараметр("ФизЛицо", ТекФизЛицо);
	ЗапросПаспортныеДанные.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛиц.ВидДокумента,
	|	ДокументыФизическихЛиц.Серия КАК СерияДокумента,
	|	ДокументыФизическихЛиц.Номер КАК НомерДокумента,
	|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаВыдачиДокумента,
	|	ДокументыФизическихЛиц.КемВыдан КАК КемВыданДокумент,
	|	ДокументыФизическихЛиц.КодПодразделения,
	|	ДокументыФизическихЛиц.ПричинаИзменения,
	|	ДокументыФизическихЛиц.Период
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Период, ФизЛицо = &ФизЛицо) КАК ДокументыФизическихЛиц
	|ГДЕ
	|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность";

	Выборка = ЗапросПаспортныеДанные.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПаспортныеДанные, Выборка);
	КонецЕсли;

	Возврат ПаспортныеДанные;

КонецФункции //ЗаполнитьПаспортныеДанныеФизЛица

// Функция получает пустые паспортные данные.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Структура - Записи с пустыми паспортными данными.
//
Функция ПолучитьПустыеПаспортныеДанные() Экспорт
	
	ПаспортныеДанные = Новый Структура;
	ПаспортныеДанные.Вставить("ВидДокумента",             Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка());
	ПаспортныеДанные.Вставить("СерияДокумента",           "");
	ПаспортныеДанные.Вставить("НомерДокумента",           "");
	ПаспортныеДанные.Вставить("ДатаВыдачиДокумента",      Дата(1,1,1));
	ПаспортныеДанные.Вставить("КемВыданДокумент",         "");
	ПаспортныеДанные.Вставить("КодПодразделения",         "");
	ПаспортныеДанные.Вставить("ПричинаИзменения",         "");
	ПаспортныеДанные.Вставить("Период",                   Дата(1,1,1));
	ПаспортныеДанные.Вставить("ИзменятьПаспортныеДанные", Ложь);
	
	Возврат ПаспортныеДанные;
	
КонецФункции // ПолучитьПустыеПаспортныеДанные()

#КонецОбласти