
#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетХешСумм

Процедура РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, ВключаяПодчиненные) Экспорт
	
	ДанныеДляРасчетаХешСуммы = Новый СписокЗначений();
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		ИдентификаторВДереве    = СтрокаДерева.ПолучитьИдентификатор();
	Иначе
		ПодчиненныеСтрокиДерева = СтрокаДерева.Строки;
		ИдентификаторВДереве    = СтрокаДерева.ИдентификаторСтроки;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтрокиДерева Цикл
		Если ПодчиненнаяСтрока.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			Если ВключаяПодчиненные Тогда
				РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, ВключаяПодчиненные);
			КонецЕсли;
			
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.ХешСумма);
		Иначе
			ДанныеДляРасчетаХешСуммы.Добавить(ПодчиненнаяСтрока.Штрихкод);
		КонецЕсли;
	КонецЦикла;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		СтрокаДерева.ХешСумма = Справочники.ШтрихкодыУпаковокТоваров.ХешСуммаСодержимогоУпаковки(ДанныеДляРасчетаХешСуммы);
		
		СтрокаТаблицыХешСуммы = ТаблицаХешСумм.Добавить();
		СтрокаТаблицыХешСуммы.ХешСумма             = СтрокаДерева.ХешСумма;
		СтрокаТаблицыХешСуммы.Штрихкод             = СтрокаДерева.Штрихкод;
		СтрокаТаблицыХешСуммы.ИдентификаторВДереве = ИдентификаторВДереве;
	КонецЕсли;
	
КонецПроцедуры

Функция ПустаяТаблицаХешСумм() Экспорт

	ТаблицаХешСумм = Новый ТаблицаЗначений;
	ТаблицаХешСумм.Колонки.Добавить("ХешСумма", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаХешСумм.Колонки.Добавить("Штрихкод", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаХешСумм.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ТаблицаХешСумм;

КонецФункции

#КонецОбласти

#Область Перемаркировка

Функция ТаблицаПеремаркировки(ТаблицаХешСумм) Экспорт
	
	ТаблицаПеремаркировки = ПустаяТаблицаПеремаркировки();
	
	Если ТаблицаХешСумм.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ТаблицаХешСумм", ТаблицаХешСумм);
	
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаХешСумм.ХешСумма             КАК ХешСумма,
		|	ТаблицаХешСумм.Штрихкод             КАК ЗначениеШтрихкода,
		|	ТаблицаХешСумм.ИдентификаторВДереве КАК ИдентификаторВДереве
		|ПОМЕСТИТЬ
		|	ПроверяемыеУпаковки
		|ИЗ
		|	&ТаблицаХешСумм КАК ТаблицаХешСумм
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроверяемыеУпаковки.ИдентификаторВДереве КАК ИдентификаторВДереве,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ШтрихкодыУпаковокТоваров.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ) КАК ТребуетсяПеремаркировка
		|ИЗ
		|	ПроверяемыеУпаковки КАК ПроверяемыеУпаковки
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ПроверяемыеУпаковки.ЗначениеШтрихкода = ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода
		|		 И ПроверяемыеУпаковки.ХешСумма <> ШтрихкодыУпаковокТоваров.ХешСумма
		|СГРУППИРОВАТЬ ПО
		|	ПроверяемыеУпаковки.ИдентификаторВДереве
		|";
	
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПеремаркировки.Добавить(), Выборка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПеремаркировки;
	
КонецФункции

Функция ПустаяТаблицаПеремаркировки() Экспорт

	ТаблицаПеремаркировки = Новый ТаблицаЗначений;
	ТаблицаПеремаркировки.Колонки.Добавить("ИдентификаторВДереве", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаПеремаркировки.Колонки.Добавить("ТребуетсяПеремаркировка", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПеремаркировки;

КонецФункции

#КонецОбласти

#КонецОбласти
