///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ОблачныйАрхив".
// ОбщийМодуль.ОблачныйАрхив.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФункциональныеОпции

// Можно ли технически работать с облачным архивом и включена ли опция, разрешающая работать с этой подсистемой.
// В отличие от ВозможнаРаботаСОблачнымАрхивом() проверяется наличие технической возможности
//  и результат выбора пользователя в форме настроек.
// Это результат функциональной опции "РазрешенаРаботаСОблачнымАрхивом",
//   И доступны нужные роли,
//   И это файловая база,
//   И конфигурация запущена в Windows,
//   И информационная база работает в локальном режиме,
//   И это не веб-клиент и не внешнее соединение.
// 
// Возвращаемое значение:
//  Булево - Истина, если возможна и разрешена работа с облачным архивом.
//
Функция РазрешенаРаботаСОблачнымАрхивом() Экспорт

	Возврат ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом();

КонецФункции

// Можно ли технически работать с облачным архивом.
// В отличие от РазрешенаРаботаСОблачнымАрхивом() проверяется только наличие технической возможности работы с облачным архивом.
// Это результат, что
//   доступны нужные роли,
//   И это файловая база,
//   И конфигурация запущена в Windows,
//   И информационная база работает в локальном режиме,
//   И это не веб-клиент и не внешнее соединение.
// 
// Возвращаемое значение:
//  Булево - Истина, если возможна работа с облачным архивом.
//
Функция ВозможнаРаботаСОблачнымАрхивом() Экспорт

	Возврат ОблачныйАрхивПовтИсп.ВозможнаРаботаСОблачнымАрхивом();

КонецФункции

#КонецОбласти

#Область ДлительныеОперации

// Процедура выполняет обновления подсистемы Облачный архив.
// Процедура запускается как фоновое задание и собирает все необходимые данные
//  для панели администрирования БСП и формы настроек.
// Данные сохраняются в настройках, поэтому при успешном завершении, просто необходимо прочитать данные из настроек.
//
// Параметры:
//  ДополнительныеСвойства - Структура - произвольные дополнительные свойства. Может содержать:
//    * МассивШагов - Массив - массив структур со следующими ключами
//         (см. также ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных()):
//      ** КодШага - Строка, возможные значения:
//        *** "ИнформацияОКлиенте";
//        *** "НастройкиАгентаКопированияКлиент";
//        *** "АктивацииАгентовКопирования";
//        *** "СвойстваХранилищаОблачногоАрхива";
//        *** "СписокРезервныхКопий";
//        *** "ДоступныеВерсииАгентаКопированияОблачногоАрхива".
//      ** ОписаниеШага - Строка;
//      ** СрокУстареванияСекунд - Число - число секунд, после которого считается, что данные устарели и их необходимо
//                                 собрать заново, если <= 0, то собирать данные принудительно;
//  АдресХранилища - Строка - Адрес временного хранилища. Нужно для вызова из общего модуля ДлительныеОперации.
//
Процедура СобратьДанныеПоОблачномуАрхиву(ДополнительныеСвойства, АдресХранилища = Неопределено) Экспорт

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "СобратьДанныеПоОблачномуАрхиву"; // Идентификатор

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");

	ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();

	КодРезультата      = 0;
	ОписаниеРезультата = "";
	ОписаниеОшибок = "";

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Сбор данных в фоне'"));

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
			НСтр("ru='Получение массива шагов'"));

			МассивШагов = Новый Массив;
			Если ТипЗнч(ДополнительныеСвойства)= ТипСтруктура Тогда
				Если ДополнительныеСвойства.Свойство("МассивШагов")
						И ТипЗнч(ДополнительныеСвойства.МассивШагов) = ТипМассив Тогда
					МассивШагов = ДополнительныеСвойства.МассивШагов;
				КонецЕсли;
			КонецЕсли;

			Если МассивШагов.Количество() > 0 Тогда
				КодРезультатаВложенный      = 0;
				ОписаниеРезультатаВложенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Получено %1 шагов для выполнения'"),
					МассивШагов.Количество());
			Иначе
				КодРезультатаВложенный      = 150;
				ОписаниеРезультатаВложенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Получено %1 шагов для выполнения'"),
					МассивШагов.Количество());
				КодРезультата               = КодРезультатаВложенный;
				ОписаниеРезультата          = ОписаниеРезультатаВложенный;
			КонецЕсли;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			Неопределено);

		// Фоновое задание запускается на локальном компьютере.
		// Поэтому, не смотря на то, что оно работает на сервере, можно собрать
		//  данные клиента (из реестра Windows, из файловой системы и т.п.).

		НомерШага = 0;
		Для Каждого ТекущийШаг Из МассивШагов Цикл

			КодРезультатаВложенный      = 0;
			ОписаниеРезультатаВложенный = "";

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Выполнение шага: %1'"),ТекущийШаг.ОписаниеШага));

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

			ДлительныеОперации.СообщитьПрогресс(
				(НомерШага / МассивШагов.Количество()) * 100,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Выполнение шага: %1'"), ТекущийШаг.ОписаниеШага),
				Новый Структура("КодСостояния, ОписаниеРезультата",
					0,
					Неопределено));

			// Выполнение шага
			Если ТекущийШаг.КодШага = "ИнформацияОКлиенте" Тогда

#Область ИнформацияОКлиенте

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					Настройки = ПолучитьНастройкиОблачногоАрхива(ТекущийШаг.КодШага, ИмяКомпьютера()); // Необходим КлючНастроек (ИмяКомпьютера()).
					Если Настройки.ДатаПроверки <= ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд Тогда
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					СобратьДанные_ИнформацияОКлиенте(КонтекстВыполненияВложенныйВложенный);
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			ИначеЕсли ТекущийШаг.КодШага = "НастройкиАгентаКопированияКлиент" Тогда

#Область НастройкиАгентаКопированияКлиент

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					Настройки = ПолучитьНастройкиОблачногоАрхива(ТекущийШаг.КодШага, ИмяКомпьютера()); // Необходим КлючНастроек (ИмяКомпьютера()).
					Если Настройки.ДатаПроверки <= ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд Тогда
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					СобратьДанные_НастройкиАгентаКопированияКлиент(КонтекстВыполненияВложенныйВложенный);
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			ИначеЕсли ТекущийШаг.КодШага = "АктивацииАгентовКопирования" Тогда

#Область АктивацииАгентовКопирования

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					Настройки = ПолучитьНастройкиОблачногоАрхива(ТекущийШаг.КодШага, ИмяКомпьютера()); // Необходим КлючНастроек (ИмяКомпьютера()).
					Если Настройки.ДатаПроверки <= ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд Тогда
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					// Здесь же сохранится отметка об обновлении в регистре "ВсеОбновленияОблачногоАрхива" для Вида обновления
					//  "Загрузка информации об активированных агентах копирования".
					ЗагрузитьИнформациюСтатусаАккаунта(КонтекстВыполненияВложенныйВложенный);
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			ИначеЕсли ТекущийШаг.КодШага = "СписокРезервныхКопий" Тогда

#Область СписокРезервныхКопий

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					// Это не настройки. Информация о дате последнего обновления хранится в
					//  регистре сведений "ВсеОбновленияОблачногоАрхива".
					ДатаПроверки = '00010101';
					Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.ВидОбновления = "Загрузка списка резервных копий"; // Идентификатор
					Запись.Прочитать();
					Если Запись.Выбран() Тогда
						ДатаПроверки = Запись.ДатаПоследнегоОбновления;
					КонецЕсли;
					Если ДатаПроверки <= ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд Тогда
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					// Здесь же сохранится отметка об обновлении в регистре "ВсеОбновленияОблачногоАрхива"
					//  для Вида обновления "Загрузка списка резервных копий".
					ЗагрузитьСписокРезервныхКопий(КонтекстВыполненияВложенныйВложенный);
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			ИначеЕсли ТекущийШаг.КодШага = "СвойстваХранилищаОблачногоАрхива" Тогда

#Область СвойстваХранилищаОблачногоАрхива

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					// Это не настройки. Информация о дате последнего обновления хранится в записях
					//  регистра сведений "СвойстваХранилищаОблачногоАрхива".
					// Регистр сведений заполняется несколькими веб-сервисами:
					// - getAccountInfo (количество купленных лицензий, активирован ли логин);
					// - getAccountStats (занятое место).
					// Для обработки количество купленных лицензий не нужно, будет использоваться только занятое место.
					МассивНастроекДляПроверки = Новый Массив;
					МассивНастроекДляПроверки.Добавить("Объем байт, куплено"); // Идентификатор
					МассивНастроекДляПроверки.Добавить("Объем байт, занято"); // Идентификатор
					// Если есть хотя бы одна устаревшая настройка из списка, то инициировать загрузку данных.
					Запрос = Новый Запрос;
					Запрос.Текст = "
						|ВЫБРАТЬ ПЕРВЫЕ 1
						|	Рег.ДатаПроверки,
						|	Рег.Свойство
						|ИЗ
						|	РегистрСведений.СвойстваХранилищаОблачногоАрхива КАК Рег
						|ГДЕ
						|	Рег.Свойство В (&МассивНастроекДляПроверки)
						|";
					Запрос.УстановитьПараметр("МассивНастроекДляПроверки", МассивНастроекДляПроверки);
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ РезультатЗапроса.Пустой() Тогда
						Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
						Пока Выборка.Следующий() Цикл
							Если Выборка.ДатаПроверки <= (ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд) Тогда
								ПринудительноОбновить = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе // Регистр может быть вообще пустой, тогда тоже обновить.
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					// Здесь же сохранится отметка об обновлении в регистре "ВсеОбновленияОблачногоАрхива"
					//  для Вида обновления "Загрузка информации о состоянии использования облачного архива"
					//  и в записях "СвойстваХранилищаОблачногоАрхива".
					ЗагрузитьИнформациюСостоянияИспользованияОблачногоАрхива(КонтекстВыполненияВложенныйВложенный);
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			ИначеЕсли ТекущийШаг.КодШага = "ДоступныеВерсииАгентаКопированияОблачногоАрхива" Тогда

#Область ДоступныеВерсииАгентаКопированияОблачногоАрхива

				ПринудительноОбновить = Ложь;
				Если ТекущийШаг.СрокУстареванияСекунд > 0 Тогда
					// Это не настройки. Информация о дате последнего обновления хранится в
					//  регистре сведений "ВсеОбновленияОблачногоАрхива".
					ДатаПроверки = '00010101';
					Запись= РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.ВидОбновления = "Загрузка информации об актуальных версиях агента копирования"; // Идентификатор
					Запись.Прочитать();
					Если Запись.Выбран() Тогда
						ДатаПроверки = Запись.ДатаПоследнегоОбновления;
					КонецЕсли;
					Если ДатаПроверки <= ТекущаяДатаДляРасчетов - ТекущийШаг.СрокУстареванияСекунд Тогда
						ПринудительноОбновить = Истина;
					КонецЕсли;
				Иначе
					ПринудительноОбновить = Истина;
				КонецЕсли;
				Если ПринудительноОбновить = Истина Тогда
					// Здесь же сохранится отметка об обновлении в регистре "ВсеОбновленияОблачногоАрхива"
					//  для Вида обновления "Загрузка информации об актуальных версиях агента копирования".
					ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопированияВспомогательный(КонтекстВыполненияВложенныйВложенный); // Со сторонних серверов.
					ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопирования(КонтекстВыполненияВложенныйВложенный); // С серверов 1С.
					КодРезультатаВложенный      = КонтекстВыполненияВложенныйВложенный.КодРезультата;
					ОписаниеРезультатаВложенный = КонтекстВыполненияВложенныйВложенный.ОписаниеРезультата;
					Если КодРезультатаВложенный <> 0 Тогда
						ОписаниеОшибок = ОписаниеОшибок + ОписаниеРезультатаВложенный + Символы.ПС;
					КонецЕсли;
				Иначе
					КодРезультатаВложенный      = 0;
					ОписаниеРезультатаВложенный = НСтр("ru='Собранные ранее данные еще не устарели'");
				КонецЕсли;

#КонецОбласти

			КонецЕсли;

			Если КодРезультатаВложенный > 0 Тогда
				КодРезультата = 151;
				ОписаниеРезультата = ОписаниеРезультата + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка %1 сбора данных на шаге %2:
							|%3'")
							+ Символы.ПС,
						КодРезультатаВложенный,
						ТекущийШаг.КодШага,
						ОписаниеРезультатаВложенный);
			Иначе
				ОписаниеРезультата = ОписаниеРезультата + Символы.ПС
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Сбор данных шага %1 успешно завершен'")
							+ Символы.ПС,
						ТекущийШаг.КодШага);
			КонецЕсли;

			НомерШага = НомерШага + 1;
			ДлительныеОперации.СообщитьПрогресс(
				(НомерШага / МассивШагов.Количество()) * 100,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Выполнение шага: %1. Завершено.'"),
					ТекущийШаг.ОписаниеШага),
				Новый Структура("КодСостояния, ОписаниеРезультата",
					КодРезультатаВложенный,
					Неопределено));

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КодРезультатаВложенный,
				ОписаниеРезультатаВложенный,
				КонтекстВыполненияВложенныйВложенный);

		КонецЦикла;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	ДлительныеОперации.СообщитьПрогресс(
		101, // > 100%
		НСтр("ru='СобратьДанныеПоОблачномуАрхиву. Завершено.'"),
		Новый Структура("КодСостояния, ОписаниеРезультата",
			?(КодРезультата = 0, "Завершено без ошибок", "Завершено с ошибками"), // Идентификатор.
			ОписаниеОшибок));

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));

	// Запись в журнал регистрации.
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // Имя события
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1'"),
			НаименованиеПроцедурыФункции), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Возвращает значение настроек "НастройкиОблачногоАрхива". Написана отдельной функцией специально,
//  чтобы было можно вызвать так:
// МодульСервер = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
// МодульСервер.НастройкиОблачногоАрхива(...);
// В противном случае, если подсистема не внедрена, то на код ХранилищаНастроек.НастройкиОблачногоАрхива.Загрузить("...")
//  будет выдавать ошибки синтаксический анализатор конфигуратора.
//
// Параметры:
//  КлючОбъекта  - Строка, Структура - КлючОбъекта или Структура:
//      * Ключ - Строка - КлючОбъекта;
//      * Значение - Строка - КлючНастроек.
//  КлючНастроек - Строка, Неопределено - ключ настроек.
//
// Возвращаемое значение:
//  Произвольный - результат получения настроек или структура (если передано значение КлючОбъекта типа Структура):
//   * Ключ - Строка - имя настройки;
//   * Значение - Произвольный - значение настройки.
//
Функция ПолучитьНастройкиОблачногоАрхива(КлючОбъекта, КлючНастроек = Неопределено) Экспорт

	ТипСтрока    = Тип("Строка");
	ТипСтруктура = Тип("Структура");

	Результат = Неопределено;

	Если ТипЗнч(КлючОбъекта) = ТипСтрока Тогда
		Результат = ХранилищаНастроек.НастройкиОблачногоАрхива.Загрузить(КлючОбъекта, КлючНастроек);
	ИначеЕсли ТипЗнч(КлючОбъекта) = ТипСтруктура Тогда
		Результат = Новый Структура;
		Для Каждого КлючЗначение Из КлючОбъекта Цикл
			Настройки = ХранилищаНастроек.НастройкиОблачногоАрхива.Загрузить(КлючЗначение.Ключ, КлючЗначение.Значение);
			Результат.Вставить(КлючЗначение.Ключ, Настройки);
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сохраняет значение настроек "НастройкиОблачногоАрхива".
//
// Параметры:
//  Настройки    - Произвольный - произвольные настройки;
//  КлючОбъекта  - Строка - КлючОбъекта;
//  КлючНастроек - Строка, Неопределено - ключ настроек.
//
Процедура ЗаписатьНастройкиОблачногоАрхива(Настройки, КлючОбъекта, КлючНастроек = Неопределено) Экспорт

	ХранилищаНастроек.НастройкиОблачногоАрхива.Сохранить(КлючОбъекта, КлючНастроек, Настройки);

КонецПроцедуры

#КонецОбласти

#Область ВебСервисы

#Область ВебСервисыОблачногоАрхиваПриватные

// Проверяет, возможна ли активация агента копирования на компьютере с заданным идентификатором.
// Возможности нет, если Агент копирования был ранее активирован на другой логин ВебИТС.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//                                   Кроме стандартных для контекста ключей должны присутствовать:
//    * ИдентификаторКомпьютера - Строка - Идентификатор компьютера, который необходимо проверить.
//
// Возвращаемое значение:
//   Булево - Истина, если на этом компьютере можно активировать Агента резервного копирования.
//
Функция ДоступнаАктивацияАгентаКопированияНаКомпьютере(КонтекстВыполнения = Неопределено) Экспорт

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат Ложь;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "ДоступнаАктивацияАгентаКопированияНаКомпьютере"; // Идентификатор

	ДанныеОВозможностиАктивации = Неопределено;

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполненияВложенный.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO = Тип("ОбъектXDTO");

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = Тип("WSПрокси")) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Получить данные из веб-сервисов
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
				"isMachineIDAvailable"));

			Попытка
				Результат = Прокси.isMachineIDAvailable(
					КонтекстВыполненияВложенный.КлючАвторизации, // authKey
					КонтекстВыполнения.ИдентификаторКомпьютера); // machineID
				КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 371;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполненияВложенный.КодРезультата = 372;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КонтекстВыполненияВложенный.КодРезультата = 373;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецЕсли;

			ДанныеОВозможностиАктивации = Результат;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 2. Отключиться от приватных веб-сервисов
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отключение от веб-сервиса (%1)'"),
				"logout"));

			Попытка
				Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 374;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	Результат = ДанныеОВозможностиАктивации.machineIDAvailable;

	Возврат Результат;

КонецФункции

// Обновляет информацию о состоянии использования облачного архива. Нельзя запускать чаще, чем 1 раз в 30 секунд.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ОбновитьИнформациюСостоянияИспользованияОблачногоАрхива(КонтекстВыполнения = Неопределено) Экспорт

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "ОбновитьИнформациюСостоянияИспользованияОблачногоАрхива"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO = Тип("ОбъектXDTO");
	ТипДата       = тип("Дата");
	ТипWSПрокси   = Тип("WSПрокси");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Перед тем, как вызывать методы веб-сервисов, проверим - когда последний раз вызывался этот метод веб-сервиса?
	Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
	Запись.Свойство = "Время обновления статистики"; // Идентификатор
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		ДатаПредыдущегоЗапуска = Запись.Значение;
		Если ТипЗнч(ДатаПредыдущегоЗапуска) <> ТипДата Тогда
			ДатаПредыдущегоЗапуска = '00010101';
		КонецЕсли;
	Иначе
		ДатаПредыдущегоЗапуска = '00010101';
	КонецЕсли;

	Если (ДатаПредыдущегоЗапуска + 30) <= ТекущаяДатаДляРегистров Тогда // Запускалось предыдущий раз более 30 секунд назад.

		// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
		Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

		Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

			// 1. Получить данные из веб-сервисов
			ЕстьОшибки = Ложь;

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
					"updateAccountStats"));

				Попытка
					Результат = Прокси.updateAccountStats(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
					КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
				Исключение
					Результат = Неопределено;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					КонтекстВыполненияВложенный.КодРезультата = 376;
					КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
					ЕстьОшибки = Истина;
				КонецПопытки;

				Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
						И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
					КонтекстВыполненияВложенный.КодРезультата = 377;
					КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
						ТипЗнч(Результат));
					ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
					ЕстьОшибки = Истина;
				ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
						И (Результат.errorCode <> 0) Тогда
					КонтекстВыполненияВложенный.КодРезультата = 378;
					КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
						Результат.errorCode);
					ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
					ЕстьОшибки = Истина;
				КонецЕсли;

				СостояниеИспользованияОблачногоАрхива = Результат;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата, // Уже установлено выше
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				Неопределено);

			// 2. Отключиться от приватных веб-сервисов
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Отключение от веб-сервиса (%1)'"),
					"logout"));

				Попытка
					Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
				Исключение
					Результат = Неопределено;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					КонтекстВыполненияВложенный.КодРезультата = 379;
					КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
					ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				КонецПопытки;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата, // Уже установлено выше
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				Неопределено);

			// 3. Записать данные в ИБ
			Если ЕстьОшибки <> Истина Тогда

				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
					НСтр("ru='Сохранение информации в ИБ'"));

					// 3.1. Информация
					Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
						Запись.Свойство = "Время обновления статистики"; // Идентификатор
						Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
						Запись.Значение     = ТекущаяДатаДляРегистров;
					Запись.Записать(Истина);

				ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					0,
					"",
					Неопределено);

			КонецЕсли;

		Иначе
			// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
		КонецЕсли;

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполнения,
			КонтекстВыполнения.КодРезультата, // Уже установлено выше
			КонтекстВыполнения.ОписаниеРезультата,
			КонтекстВыполненияВложенный);

	Иначе

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполнения,
			380,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Обновление не осуществлялось: предыдущее обновление было менее 30 секунд назад (было %1, сейчас %2)'"),
				Формат(ДатаПредыдущегоЗапуска, "ДЛФ=DT"),
				Формат(ТекущаяДатаДляРегистров, "ДЛФ=DT")),
			КонтекстВыполненияВложенный);

	КонецЕсли;

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интеграция подсистем библиотеки.

#Область ПанельАдминистрированияБСП

// Выполняет все действия события "ПриСозданииНаСервере" формы "ПанельАдминистрированияБСП".
//
// Параметры:
//  Форма - УправляемаяФорма - форма "ПанельАдминистрированияБСП".
//
Процедура ПанельАдминистрированияБСП_ПриСозданииНаСервере(Форма) Экспорт

	// Проверить техническую возможность работы с облачным архивом.
	Если НЕ ОблачныйАрхивПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;

	АктивнаяПодсистема = "СтандартныеПодсистемы.РезервноеКопированиеИБ";
	// Подсистема активирована?
	Если ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		АктивнаяПодсистема = "ИнтернетПоддержкаПользователей.ОблачныйАрхив";
	КонецЕсли;
	// Вывести список выбора подсистемы копирования
	Элементы.ГруппаВыборСпособаРезервногоКопирования.Видимость = Истина;
	Форма.ПараметрыОблачногоАрхива = Новый Структура("ИдентификаторФоновогоЗадания, ТекущийСчетчикПроверкиФоновогоЗадания, ОшибкиПодключения",
		Неопределено,
		0,
		"");

	Если АктивнаяПодсистема = "СтандартныеПодсистемы.РезервноеКопированиеИБ" Тогда

		Форма.СпособРезервногоКопирования = "На локальном компьютере";

		// Если подсистема была отключена не более недели назад, то вывести сообщение.
		// Проверить, остались ли есть активные агенты резервного копирования, невозможно (т.к. при отключении ФО
		//  также отключается регламентное задание по проверке активированности Агентов резервного копирования).
		//  Поэтому надпись выводить всегда.
		ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
		// ПараметрыОкруженияСервер.ПодсистемаНастроена:
		//  = 0 - подсистема не настроена;
		//  = 1 - подсистема настроена, но ни на одном компьютере не установлен агент копирования;
		//  = 2 - подсистема настроена.
		Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 0)
				И (ПараметрыОкруженияСервер.ПредыдущееСостояниеПодсистемаНастроена <> 0) Тогда // Выключили
			Если (ПараметрыОкруженияСервер.ДатаИзмененияПодсистемаНастроена + 7*24*60*60) >= ТекущаяУниверсальнаяДата() Тогда
				Элементы.ГруппаНеобходимоОтключитьОблачныйАрхив.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе // Облачный архив
		Форма.СпособРезервногоКопирования = "1С:Облачный архив";
		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхив;
		// Текущее состояние подсистемы?
		// - не подключена;
		// - настроена на другом компьютере;
		// - настроена на этом компьютере;
		// - состояние получения информации.
		Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивОжидание;

		МассивШагов = Новый Массив;

			ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
				ШагСбораДанных.КодШага               = "ИнформацияОКлиенте"; // Идентификатор.
				ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации о клиентском компьютере'");
				ШагСбораДанных.СрокУстареванияСекунд = 5*60; // Обновлять только если данные были собраны > 5 минут назад.
			МассивШагов.Добавить(ШагСбораДанных);

			ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
				ШагСбораДанных.КодШага               = "АктивацииАгентовКопирования"; // Идентификатор.
				ШагСбораДанных.ОписаниеШага          = НСтр("ru='Проверка активации Агента резервного копирования на этом компьютере'");
				ШагСбораДанных.СрокУстареванияСекунд = 5*60; // Обновлять только если данные были собраны > 5 минут назад.
			МассивШагов.Добавить(ШагСбораДанных);

		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Сбор данных для Облачного архива'");
		ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
			"ОблачныйАрхив.СобратьДанныеПоОблачномуАрхиву", // ИмяПроцедуры.
			Новый Структура("МассивШагов",
				МассивШагов), // ПараметрыПроцедуры.
			ПараметрыВыполнения); // ПараметрыВыполнения
		// ФоновоеЗадание - Структура:
		//   * Статус - Строка - "Выполняется", "Выполнено", "Ошибка", "Отменено".
		//   * ИдентификаторЗадания - УникальныйИдентификатор;
		//   * АдресРезультата - Строка;
		//   * АдресДополнительногоРезультата - Строка;
		//   * КраткоеПредставлениеОшибки   - Строка;
		//   * ПодробноеПредставлениеОшибки - Строка;
		Если ФоновоеЗадание.Статус = "Выполнено" Тогда
			// Все данные записаны в базу и их можно получить через ХранилищаНастроек.НастройкиОблачногоАрхива.
			ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(Форма, Ложь);
		Иначе
			// Текущая страница остается "СтраницаОблачныйАрхивОжидание".
			Форма.ПараметрыОблачногоАрхива.Вставить("ИдентификаторФоновогоЗадания", ФоновоеЗадание.ИдентификаторЗадания);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет переключение на правильную закладку сервиса "Облачный архив" формы "ПанельАдминистрированияБСП".
// Вызывается с сервера.
//
// Параметры:
//  Форма                 - УправляемаяФорма - форма "ПанельАдминистрированияБСП";
//  СобратьДанныеОКлиенте - Булево - если ИСТИНА, то предварительно собрать данные о клиенте.
//
Процедура ПанельАдминистрированияБСП_ПереключитьНаПравильнуюСтраницу(Форма, СобратьДанныеОКлиенте = Ложь) Экспорт

	// Проверить техническую возможность работы с облачным архивом.
	Если НЕ ОблачныйАрхивПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	Элементы = Форма.Элементы;
	ТекущаяДатаДляПроверки = ТекущаяДатаСеанса();

	ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
	// ПараметрыОкруженияСервер.ПодсистемаНастроена:
	//  = 0 - подсистема не настроена;
	//  = 1 - подсистема настроена, но ни на одном компьютере не установлен агент копирования;
	//  = 2 - подсистема настроена.

	Если Форма.СпособРезервногоКопирования = "На локальном компьютере" Тогда

		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаНаЛокальномКомпьютере;

		// Если подсистема была отключена не более недели назад, то вывести сообщение.
		// Проверить, остались ли есть активные агенты резервного копирования, невозможно (т.к. при отключении ФО
		//  также отключается регламентное задание по проверке активированности Агентов резервного копирования).
		//  Поэтому надпись выводить всегда.
		Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 0)
				И (ПараметрыОкруженияСервер.ПредыдущееСостояниеПодсистемаНастроена <> 0) Тогда // Выключили
			Если (ПараметрыОкруженияСервер.ДатаИзмененияПодсистемаНастроена + 7*24*60*60) >= ТекущаяУниверсальнаяДата() Тогда
				Элементы.ГруппаНеобходимоОтключитьОблачныйАрхив.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Форма.СпособРезервногоКопирования = "1С:Облачный архив" Тогда

		Элементы.СтраницыРезервноеКопированиеИВосстановление.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхив;

		Если СобратьДанныеОКлиенте = Истина Тогда

			МассивШагов = Новый Массив;

				ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
					ШагСбораДанных.КодШага               = "ИнформацияОКлиенте"; // Идентификатор
					ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации о клиентском компьютере'");
					ШагСбораДанных.СрокУстареванияСекунд = 5*60; // Обновлять только если данные были собраны > 5 минут назад.
				МассивШагов.Добавить(ШагСбораДанных);

				ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
					ШагСбораДанных.КодШага               = "АктивацииАгентовКопирования"; // Идентификатор.
					ШагСбораДанных.ОписаниеШага          = НСтр("ru='Проверка активации Агента резервного копирования на этом компьютере'");
					ШагСбораДанных.СрокУстареванияСекунд = 5*60; // Обновлять только если данные были собраны > 5 минут назад.
				МассивШагов.Добавить(ШагСбораДанных);

			СобратьДанныеПоОблачномуАрхиву(Новый Структура("МассивШагов", МассивШагов));

		КонецЕсли;

		ИнформацияОКлиенте = ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
		АктивацииАгентовКопирования = ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());

		// Алгоритм на клиенте и на сервере: Агент установлен и активирован?
		Если ИнформацияОКлиенте.ЭтоАдминистраторWindows Тогда
			Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 1) ИЛИ (ПараметрыОкруженияСервер.ПодсистемаНастроена = 2) Тогда
				Если (ИнформацияОКлиенте.АгентКопированияУстановлен = Истина) Тогда
					Если (ИнформацияОКлиенте.АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина)
							И (АктивацииАгентовКопирования.АгентКопированияАктивирован_ДанныеВебСервисов = Истина)
							И (АктивацииАгентовКопирования.СрокОкончанияПодписки >= ТекущаяДатаДляПроверки) Тогда
						Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивРаботает;
					Иначе
						Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключено;
					КонецЕсли;
				Иначе
					Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивПодключеноНаДругомКомпьютере;
				КонецЕсли;
			Иначе // 0
				Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивНеПодключено;
			КонецЕсли;
		Иначе
			Элементы.ДекорацияОблачныйАрхивОшибки.Заголовок = НСтр("ru='Для подключения, выполнения резервного копирования и настройки Агента резервного копирования необходимы права администратора Windows на этом компьютере.'");
			Элементы.СтраницыСостоянийОблачныйАрхив.ТекущаяСтраница = Элементы.СтраницаОблачныйАрхивОшибки;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Выполняет изменение способа резервного копирования в форме "ПанельАдминистрированияБСП".
// Вызывается на сервере.
//
// Параметры:
//  СпособРезервногоКопирования - Строка - "На локальном компьютере" или "1С:Облачный архив".
//
Процедура ПанельАдминистрированияБСП_СпособРезервногоКопированияПриИзменении(СпособРезервногоКопирования) Экспорт

	// Проверить техническую возможность работы с облачным архивом.
	Если НЕ ОблачныйАрхивПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ТекущаяДатаДляРасчетов = ТекущаяУниверсальнаяДата();
	ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");

	Если СпособРезервногоКопирования = "На локальном компьютере" Тогда // Идентификатор.
		Константы.РазрешенаРаботаСОблачнымАрхивом.Установить(Ложь);
		ОбновитьПовторноИспользуемыеЗначения();
		// Изменить признак "ПодсистемаНастроена" в настройках "ПараметрыОкруженияСервер".
		// 0 - не настроена, 1 - настроена, но не введены настройки на клиентах, 2 - настроена.
		Если (ПараметрыОкруженияСервер.ПодсистемаНастроена <> 0) Тогда
			ПараметрыОкруженияСервер.Вставить("ПредыдущееСостояниеПодсистемаНастроена", ПараметрыОкруженияСервер.ПодсистемаНастроена);
			ПараметрыОкруженияСервер.Вставить("ПодсистемаНастроена", 0);
			ПараметрыОкруженияСервер.Вставить("ДатаИзмененияПодсистемаНастроена", ТекущаяДатаДляРасчетов);
			ЗаписатьНастройкиОблачногоАрхива(ПараметрыОкруженияСервер, "ПараметрыОкруженияСервер");
		КонецЕсли;
	ИначеЕсли СпособРезервногоКопирования = "1С:Облачный архив" Тогда // Идентификатор.
		Константы.РазрешенаРаботаСОблачнымАрхивом.Установить(Истина);
		ОбновитьПовторноИспользуемыеЗначения();
		// Изменить признак "ПодсистемаНастроена" в настройках "ПараметрыОкруженияСервер".
		// 0 - не настроена, 1 - настроена, но не введены настройки на клиентах, 2 - настроена.
		Если (ПараметрыОкруженияСервер.ПодсистемаНастроена = 0) Тогда
			ПараметрыОкруженияСервер.Вставить("ПредыдущееСостояниеПодсистемаНастроена", 0);
			ПараметрыОкруженияСервер.Вставить("ПодсистемаНастроена", 1); // Настроена частично, надо нажать "Подключить".
			ПараметрыОкруженияСервер.Вставить("ДатаИзмененияПодсистемаНастроена", ТекущаяДатаДляРасчетов);
			// Чтобы точно понять, есть ли подключения на конкретных компьютерах, надо запуститься на этом компьютере и проверить:
			//  - наличие установленного Агента резервного копирования;
			//  - наличие файлов сертификатов;
			//  - веб-сервис должен сообщать, что Агент резервного копирования на компьютере подключен.
			ЗаписатьНастройкиОблачногоАрхива(ПараметрыОкруженияСервер, "ПараметрыОкруженияСервер");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОблачныйАрхив.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ОблачныйАрхив.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	// Обработчики, выполняемые при переходе на новую версию.
	//

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОблачныйАрхив.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка констант, загрузка стандартных значений, сброс регистров сведений (общих данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ОблачныйАрхив.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка настроек пользователей (разделенных данных).'");
	Обработчик.РежимВыполнения     = "Оперативно";

КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСБСП

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик").
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт

	Обработчики.Вставить("ПараметрыОкруженияБИП_ОблачныйАрхив", "ОблачныйАрхив.УстановкаПараметровСеанса");

КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт

	// При выгрузке загрузке данных коробка -> сервис и сервис -> коробка никакие данные,
	//  относящиеся к подсистеме ОблачныйАрхив не должны выгружаться и загружаться.
	Типы.Добавить(Метаданные.Константы.НастройкиОблачногоАрхива);
	Типы.Добавить(Метаданные.Константы.РазрешенаРаботаСОблачнымАрхивом);
	Типы.Добавить(Метаданные.РегистрыСведений.АктивированныеАгентыРезервногоКопирования);
	Типы.Добавить(Метаданные.РегистрыСведений.ВсеОбновленияОблачногоАрхива);
	Типы.Добавить(Метаданные.РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива);
	Типы.Добавить(Метаданные.РегистрыСведений.ЖурналРегистрацииАгентаКопированияОблачногоАрхива);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере);
	Типы.Добавить(Метаданные.РегистрыСведений.РезервныеКопииОблачногоАрхива);
	Типы.Добавить(Метаданные.РегистрыСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива);
	Типы.Добавить(Метаданные.РегистрыСведений.СвойстваХранилищаОблачногоАрхива);

КонецПроцедуры

#Область ТекущиеДела

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт

	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");

#Область ОблачныйАрхив_ОбновлениеАгентаРезервногоКопирования

	Если ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда

		ИдентификаторДела = "ОблачныйАрхив_ОбновлениеАгентаРезервногоКопирования";

		Если НЕ МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда

			ИнформацияОКлиенте = ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());

			// Проверка актуальности установленного Агента резервного копирования.
			Результат = ПроверкаАктуальностиУстановленногоАгентаРезервногоКопирования(ИнформацияОКлиенте);

			Если Результат.ТребуетсяУстановка = Истина Тогда

				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = Истина;
				Дело.Представление  = НСтр("ru = 'Для работы 1С:Облачный архив необходимо установить агента резервного копирования'");
				Дело.Форма          = "Обработка.ОблачныйАрхив.Форма.МастерОбновленияАгента";
				Дело.ПараметрыФормы = Новый Структура("ТекущийШаг", 1);
				Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;

			ИначеЕсли Результат.ТребуетсяОбновление = 1 Тогда // Доступно обновление.

				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = Ложь;
				Дело.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Доступно обновление %1 агента резервного копирования'"),
					ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(
						Результат.ВерсияНовейшегоАгентаКопирования,
						Ложь));
				Дело.Форма          = "Обработка.ОблачныйАрхив.Форма.МастерОбновленияАгента";
				Дело.ПараметрыФормы = Новый Структура("ТекущийШаг", 1);
				Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;

			ИначеЕсли Результат.ТребуетсяОбновление = 2 Тогда // Рекомендуется обновление.

				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = Ложь;
				Дело.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Рекомендуется обновление агента резервного копирования до версии %1'"),
					ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(
						Результат.ВерсияНовейшегоАгентаКопирования,
						Ложь));
				Дело.Форма          = "Обработка.ОблачныйАрхив.Форма.МастерОбновленияАгента";
				Дело.ПараметрыФормы = Новый Структура("ТекущийШаг", 1);
				Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;

			ИначеЕсли Результат.ТребуетсяОбновление = 3 Тогда // Необходимо обновление.

				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = Истина;
				Дело.Представление  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Необходимо обновить агента резервного копирования до версии %1'"),
					ИнтернетПоддержкаПользователейКлиентСервер.ПользовательскоеПредставлениеНомераВерсии(
						Результат.ВерсияНовейшегоАгентаКопирования,
						Ложь));
				Дело.Форма          = "Обработка.ОблачныйАрхив.Форма.МастерОбновленияАгента";
				Дело.ПараметрыФормы = Новый Структура("ТекущийШаг", 1);
				Дело.Владелец       = Метаданные.Подсистемы.ИнтернетПоддержкаПользователей;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область РазрешенияНаДоступ

// См. описание этой же процедуры в РаботаВБезопасномРежимеПереопределяемый
// из СтандартныеПодсистемы.БазоваяФункциональность.
//
// Параметры:
//	ЗапросыРазрешений - заполняемые разрешения.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	НовыеРазрешения = Новый Массив;

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"login.1c.ru", // https://login.1c.ru/api/public/ticket?wsdl
		443,
		НСтр("ru = 'Веб-сервисы авторизации в 1С'"));
	НовыеРазрешения.Добавить(Разрешение);

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"backup.1c.ru", // https://backup.1c.ru/api/public/v1/index.php?wsdl, https://backup.1c.ru/api/private/v1/index.php?wsdl
		443,
		НСтр("ru = 'Веб-сервисы работы с облачным архивом (публичные и приватные)'"));
	НовыеРазрешения.Добавить(Разрешение);

	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"update-api.1c.ru", // https://update-api.1c.ru/update-platform/backupAgent/v1/update/info
		443,
		НСтр("ru = 'Веб-сервисы информации об агенте копирования'"));
	НовыеРазрешения.Добавить(Разрешение);

	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСПодсистемамиБиблиотеки

// Вызывается при сохранении логина и пароля пользователя ИПП в
//  информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль) Экспорт

	ОчиститьСохраненныеЗначения();

КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
//  информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ() Экспорт

	ОчиститьСохраненныеЗначения();

КонецПроцедуры

#КонецОбласти

// Вызывается после стандартного резервного копирования БСП.
// Активирует Агента резервного копирования, чтобы он отправил указанный файл в облако.
//
// Параметры:
//  ИмяФайла             - Строка - Полное имя файла, который необходимо выгрузить;
//  ОтсрочкаСтартаСекунд - Число - число секунд, после которого начнется выгрузка архива в облако.
//
Процедура ВыгрузитьФайлВОблако(ИмяФайла, ОтсрочкаСтартаСекунд = 30) Экспорт

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	ТипСтруктура = Тип("Структура");
	СтруктураНастроекИБ = Неопределено;
	СрокЖизниСтатистики = 300;

	// Сбор информации запускается сразу, а не фоновым заданием.
	МассивШагов = Новый Массив;

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
			ШагСбораДанных.КодШага               = "ИнформацияОКлиенте"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации о клиентском компьютере'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		МассивШагов.Добавить(ШагСбораДанных);

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
			ШагСбораДанных.КодШага               = "НастройкиАгентаКопированияКлиент"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Чтение настроек Агента резервного копирования'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		МассивШагов.Добавить(ШагСбораДанных);

		ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
			ШагСбораДанных.КодШага               = "АктивацииАгентовКопирования"; // Идентификатор
			ШагСбораДанных.ОписаниеШага          = НСтр("ru='Проверка активации Агента резервного копирования на этом компьютере'");
			ШагСбораДанных.СрокУстареванияСекунд = СрокЖизниСтатистики; // Обновлять только если данные были собраны > 5 минут назад.
		МассивШагов.Добавить(ШагСбораДанных);

	СобратьДанныеПоОблачномуАрхиву(Новый Структура("МассивШагов", МассивШагов), "");

	// Проверить, что Агент резервного копирования установлен и активирован.
	ИнформацияОКлиенте = ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
	АктивацииАгентовКопирования = ПолучитьНастройкиОблачногоАрхива("АктивацииАгентовКопирования", ИмяКомпьютера());
	Если (ИнформацияОКлиенте.АгентКопированияУстановлен = Истина)
			И (ИнформацияОКлиенте.АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина)
			И (АктивацииАгентовКопирования.АгентКопированияАктивирован_ДанныеВебСервисов = Истина) Тогда
		КаталогУстановкиАгентаКопирования = ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования;
		// Текущая версия клиента не устарела? ////! Реализовать.

		ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
		ИдентификаторИБ = ПараметрыОкруженияСервер.ИдентификаторИБ;
		ИдентификаторИБ_Полный =
			ИдентификаторИБ
				+ ОблачныйАрхивКлиентСервер.ПолучитьОписаниеСуффиксовИдентификаторовИБ().РучнаяКопия.Суффикс;

		НастройкиАгентаКопированияКлиент = ПолучитьНастройкиОблачногоАрхива("НастройкиАгентаКопированияКлиент", ИмяКомпьютера());

		// Агент резервного копирования не умеет копировать один файл - он копирует каталогами.
		// Поэтому необходимо скопировать файл для выгрузки во временный каталог и выгрузить временный каталог целиком.
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла("bak");
		СоздатьКаталог(ИмяВременногоКаталога);
		ИмяВременногоКаталога = ОблачныйАрхивКлиентСервер.ПривестиИмяКаталогаКПолномуВиду(ИмяВременногоКаталога);
		ФайлДляКопирования = Новый Файл(ИмяФайла);
		КопироватьФайл(ИмяФайла, ИмяВременногоКаталога + ПолучитьРазделительПути() + ФайлДляКопирования.Имя);

		// Для ручной копии всегда брать новые настройки.
		// Создать настройки по-умолчанию.
		СтруктураНастроекИБ = ПреобразоватьФайлXMLВСтруктуру("Макет.НастройкиИБ");
		ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
			ИмяИБ = ПараметрыОкруженияСервер.ИмяИБ;
			ИмяИБ_Полный =
				ИмяИБ
					+ ОблачныйАрхивКлиентСервер.ПолучитьОписаниеСуффиксовИдентификаторовИБ().РучнаяКопия.Описание;
			ИдентификаторИБ = ПараметрыОкруженияСервер.ИдентификаторИБ;
			ИдентификаторИБ_Полный =
				ИдентификаторИБ
					+ ОблачныйАрхивКлиентСервер.ПолучитьОписаниеСуффиксовИдентификаторовИБ().РучнаяКопия.Суффикс;
		НастройкиАгентаКопированияОбщие = ПолучитьНастройкиОблачногоАрхива("НастройкиАгентаКопированияОбщие");
			КоличествоХранимыхКопий_Ежемесячные  = НастройкиАгентаКопированияОбщие.КоличествоХранимыхКопий_Ежемесячные;
			КоличествоХранимыхКопий_Еженедельные = НастройкиАгентаКопированияОбщие.КоличествоХранимыхКопий_Еженедельные;
			КоличествоХранимыхКопий_Ежедневные   = НастройкиАгентаКопированияОбщие.КоличествоХранимыхКопий_Ежедневные;

		// В настройках установить правильные параметры секции DatabaseBackupConfiguration/Database:
		// - DB_ID,
		// - DBName,
		// - DBFolder.
		// Удалить все расписания кроме BackupNow.
		// В настройках установить правильные параметры секции DatabaseBackupConfiguration/RetentionRule:
		// - Daily,
		// - Weekly,
		// - Monthly.

		// Текст, Атрибуты, Элементы.
		Если ТипЗнч(СтруктураНастроекИБ) = ТипСтруктура Тогда
			ВложенныеЭлементы = СтруктураНастроекИБ.Элементы;
			Если ВложенныеЭлементы.Свойство("DatabaseBackupConfiguration") Тогда
				ВложенныеЭлементы = ВложенныеЭлементы.DatabaseBackupConfiguration.Элементы;
				Если ВложенныеЭлементы.Свойство("Database") Тогда
					СтруктураИБ = ВложенныеЭлементы.Database;
					СтруктураИБ.Элементы.Вставить("DB_ID", Новый Структура("Текст", ИдентификаторИБ_Полный));
					СтруктураИБ.Элементы.Вставить("DBName", Новый Структура("Текст", ИмяИБ_Полный));
					СтруктураИБ.Элементы.Вставить("DBFolder", Новый Структура("Текст", ИмяВременногоКаталога));
				КонецЕсли;
				Если ВложенныеЭлементы.Свойство("RetentionRule") Тогда
					СтруктураДлительностиХраненияКопий = ВложенныеЭлементы.RetentionRule;
					СтруктураДлительностиХраненияКопий.Элементы.Вставить("Daily", Новый Структура("Текст", КоличествоХранимыхКопий_Ежедневные));
					СтруктураДлительностиХраненияКопий.Элементы.Вставить("Weekly", Новый Структура("Текст", КоличествоХранимыхКопий_Еженедельные));
					СтруктураДлительностиХраненияКопий.Элементы.Вставить("Monthly", Новый Структура("Текст", КоличествоХранимыхКопий_Ежемесячные));
				КонецЕсли;
				Если ВложенныеЭлементы.Свойство("Schedule") Тогда
					СтруктураРасписания = ВложенныеЭлементы.Schedule;
					СтруктураРасписания.Элементы = Новый Структура; // Очистка расписания.
					// При этом удалятся все остальные элементы:
					// - BackupNow;
					// - Time;
					// - BackupDaily;
					// - BackupWeekly;
					// - BackupMonthly.
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Изменить настройки.
		// Текст, Атрибуты, Элементы.
		Если ТипЗнч(СтруктураНастроекИБ) = ТипСтруктура Тогда
			ВложенныеЭлементы = СтруктураНастроекИБ.Элементы;
			Если ВложенныеЭлементы.Свойство("DatabaseBackupConfiguration") Тогда
				ВложенныеЭлементы = ВложенныеЭлементы.DatabaseBackupConfiguration.Элементы;
				Если ВложенныеЭлементы.Свойство("Schedule") Тогда
					СтруктураРасписания = ВложенныеЭлементы.Schedule;
					Если ТипЗнч(СтруктураРасписания.Элементы) <> ТипСтруктура Тогда
						СтруктураРасписания.Элементы = Новый Структура;
					КонецЕсли;
					СтруктураЗадержки  = Новый Структура("delay", ОтсрочкаСтартаСекунд);
					СтруктураАтрибутов = Новый Структура("Атрибуты", СтруктураЗадержки);
					СтруктураРасписания.Элементы.Вставить("BackupNow", СтруктураАтрибутов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Сохранить настройки.
		ИмяВременногоФайлаНастроекИБ = ПолучитьИмяВременногоФайла("xml");
		ПреобразоватьСтруктуруВФайлXML(ИмяВременногоФайлаНастроекИБ, СтруктураНастроекИБ);

		// Запустить Агент резервного копирования, чтобы он перечитал настройки.
		СтрокаКоманды =
			"BackupAgent.exe"
			+ " update_task_config -path="
				+ """"
				+ ИмяВременногоФайлаНастроекИБ
				+ """";

		ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина; // Необходимо дождаться завершения для удаления файла настроек.
		ПараметрыЗапускаПрограммы.ТекущийКаталог      = КаталогУстановкиАгентаКопирования;
		КодВозврата = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);

		Попытка
			УдалитьФайлы(ИмяВременногоФайлаНастроекИБ);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеРезультатаШага = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка удаления временного файла настроек %1 по причине:
					|%2'")
					+ Символы.ПС,
				ИмяВременногоФайлаНастроекИБ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

		Попытка
			УдалитьФайлы(ИмяВременногоКаталога);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеРезультатаШага = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка удаления временного каталога %1 по причине:
					|%2'")
					+ Символы.ПС,
				ИмяВременногоКаталога,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВебСервисы

#Область ВебСервисыАвторизации1С

Функция ПолучитьАдресWSDLАвторизации1С() Экспорт

	Возврат "https://login.1c.ru/api/public/ticket?wsdl";

КонецФункции

// Возвращает WSПрокси веб-сервисов авторизации 1С.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
// Возвращаемое значение:
//   WSПрокси, Неопределено - результат подключения к прокси веб-сервисов.
//
Функция ПолучитьПроксиВебСервисаАвторизации1С(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ПолучитьПроксиВебСервисаАвторизации1С"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Подключение к прокси веб-сервиса (авторизация 1С)'"));

	Прокси = Неопределено;

	АдресаВебСервисов  = ПолучитьНастройкиОблачногоАрхива("АдресаВебСервисов");
	МестоположениеWSDL = АдресаВебСервисов.АдресWSDLАвторизации1С;

	НастройкиВебСервисов = ПолучитьНастройкиОблачногоАрхива("НастройкиВебСервисов");
	Таймаут = НастройкиВебСервисов.Таймаут;
	ПодробноеПредставлениеОшибки = "";

	Попытка

		ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПрокси.АдресWSDL              = МестоположениеWSDL;
		ПараметрыПрокси.URIПространстваИмен    = "http://api.cas.jasig.org/";
		ПараметрыПрокси.ИмяСервиса             = "TicketApiImplService";
		ПараметрыПрокси.ИмяТочкиПодключения    = "TicketApiImplPort";
		ПараметрыПрокси.ИмяПользователя        = "";
		ПараметрыПрокси.Пароль                 = "";
		ПараметрыПрокси.Таймаут                = Таймаут;
		ПараметрыПрокси.ДелатьКонтрольныйВызов = Ложь;
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Прокси = Неопределено;

	КонецПопытки;

	Если ТипЗнч(Прокси) <> Тип("WSПрокси") Тогда

		Прокси = Неопределено;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неудачное подключение к веб-сервису (авторизация 1С) по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки);
		// Запись в журнал регистрации.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:ОблачныйАрхив.Веб-сервисы'"), // Имя события
			НСтр("ru='Облачный архив. Веб-сервисы. Подключение к серверу'"), // ИмяСобытия
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонтекстВыполнения.КодРезультата = 401;
		КонтекстВыполнения.ОписаниеРезультата = ТекстСообщения;

	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		Неопределено);

	Возврат Прокси;

КонецФункции

#КонецОбласти

#Область ВебСервисыОблачногоАрхиваПубличные

Функция ПолучитьАдресWSDLБэкап1СПубличный() Экспорт

	Возврат "https://backup.1c.ru/api/public/v1/index.php?wsdl";

КонецФункции

// Возвращает WSПрокси публичных веб-сервисов облачного архива.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
// Возвращаемое значение:
//   WSПрокси, Неопределено - результат подключения к прокси веб-сервисов.
//
Функция ПолучитьПроксиВебСервисаБэкап1СПубличный(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ПолучитьПроксиВебСервисаБэкап1СПубличный"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Подключение к прокси веб-сервиса (публичный backup.1c.ru)'"));

	Прокси = Неопределено;

	АдресаВебСервисов  = ПолучитьНастройкиОблачногоАрхива("АдресаВебСервисов");
	МестоположениеWSDL = АдресаВебСервисов.АдресWSDLБэкап1СПубличный;

	НастройкиВебСервисов = ПолучитьНастройкиОблачногоАрхива("НастройкиВебСервисов");
	Таймаут = НастройкиВебСервисов.Таймаут;
	ПодробноеПредставлениеОшибки = "";

	Попытка

		ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПрокси.АдресWSDL              = МестоположениеWSDL;
		ПараметрыПрокси.URIПространстваИмен    = "urn:backup.api";
		ПараметрыПрокси.ИмяСервиса             = "backup.api";
		ПараметрыПрокси.ИмяТочкиПодключения    = "backup.apiPort";
		ПараметрыПрокси.ИмяПользователя        = "";
		ПараметрыПрокси.Пароль                 = "";
		ПараметрыПрокси.Таймаут                = Таймаут;
		ПараметрыПрокси.ДелатьКонтрольныйВызов = Ложь;
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);

	Исключение

		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Прокси = Неопределено;

	КонецПопытки;

	Если ТипЗнч(Прокси) <> Тип("WSПрокси") Тогда

		Прокси = Неопределено;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неудачное подключение к веб-сервису (публичный, backup.1c.ru) по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки);
		// Запись в журнал регистрации.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:ОблачныйАрхив.Веб-сервисы'"), // Имя события
			НСтр("ru='Облачный архив. Веб-сервисы. Подключение к серверу'"), // ИмяСобытия
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

		КонтекстВыполнения.КодРезультата = 201;
		КонтекстВыполнения.ОписаниеРезультата = ТекстСообщения;

	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		Неопределено);

	Возврат Прокси;

КонецФункции

// Получает информацию об актуальных версиях агента резервного копирования.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопированияВспомогательный(КонтекстВыполнения = Неопределено)

	Если НЕ ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопированияВспомогательный"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ВидОбновления = "Загрузка информации об актуальных версиях агента копирования"; // Идентификатор
	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO = Тип("ОбъектXDTO");
	ТипWSПрокси   = Тип("WSПрокси");

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	Прокси = ПолучитьПроксиВебСервисаБэкап1СПубличный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Загрузить данные из веб-сервиса
		ЕстьОшибки = Ложь;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из публичного веб-сервиса (%1)'"),
				"getBackupAgentInfo"));

			Попытка
				Результат = Прокси.getBackupAgentInfo();
				КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 251;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполненияВложенный.КодРезультата = 252;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КонтекстВыполненияВложенный.КодРезультата = 253;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецЕсли;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 2. Записать данные в ИБ
		Если ЕстьОшибки <> Истина Тогда

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
				НСтр("ru='Сохранение информации в ИБ'"));

			// Считаем, что одна и та же версия агента резервного копирования подходит для Windows32 и Windows64, для всех версий ОС.

			Запись = РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВерсияПодсистемы                     = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
				Запись.ВерсияАгентаКопирования              = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Результат.info.version);
				Запись.ВерсияАгентаКопированияДляСортировки = Запись.ВерсияАгентаКопирования;
				Запись.ТипОС                                = "Windows_x86";
				Запись.ВерсияОС                             = "*";
				Запись.СрокГодностиАгентаКопирования        = '39991231235959';
				Запись.РазмерДистрибутиваБайт               = Результат.info.filesize;
				Запись.СсылкаНаСкачивание                   = Результат.info.URL;
				Запись.КонтрольнаяСумма                     = Результат.info.checksum;
				Запись.ТекстЧтоНовогоВВерсии                = "";
				Запись.ТекстПорядокОбновления               = "";
			Запись.Записать(Истина);

			Запись = РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВерсияПодсистемы                     = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
				Запись.ВерсияАгентаКопирования              = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(Результат.info.version);
				Запись.ВерсияАгентаКопированияДляСортировки = Запись.ВерсияАгентаКопирования;
				Запись.ТипОС                                = "Windows_x86_64";
				Запись.ВерсияОС                             = "*";
				Запись.СрокГодностиАгентаКопирования        = '39991231235959';
				Запись.РазмерДистрибутиваБайт               = Результат.info.filesize;
				Запись.СсылкаНаСкачивание                   = Результат.info.URL;
				Запись.КонтрольнаяСумма                     = Результат.info.checksum;
				Запись.ТекстЧтоНовогоВВерсии                = "";
				Запись.ТекстПорядокОбновления               = "";
			Запись.Записать(Истина);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				"",
				Неопределено);

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, (КонтекстВыполнения.КодРезультата = 0));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#Область ВебСервисыОблачногоАрхиваПриватные

Функция ПолучитьАдресWSDLБэкап1СПриватный() Экспорт

	Возврат "https://backup.1c.ru/api/private/v1/index.php?wsdl";

КонецФункции

// Возвращает WSПрокси приватных веб-сервисов облачного архива.
// Для получения доступа к приватным веб-сервисам эта функция автоматически проходит необходимые этапы:
// - получение тикета на веб-сервисах авторизации 1С;
// - авторизация на публичном веб-сервисе backup.1c.ru.
// В структуре КонтекстВыполнения будет возвращен КлючАвторизации ("authKey"), необходимый
//  для выполнения методов приватного веб-сервиса.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
// Возвращаемое значение:
//   WSПрокси, Неопределено - результат подключения к прокси веб-сервисов.
//
Функция ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "ПолучитьПроксиВебСервисаБэкап1СПриватный"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСтрока       = Тип("Строка");

	ПроксиЛогин1С = ПолучитьПроксиВебСервисаАвторизации1С(КонтекстВыполнения);
	ПроксиПубличныйБэкап1С = Неопределено;
	ПроксиПриватныйБэкап1С = Неопределено;

	Если (ТипЗнч(ПроксиЛогин1С) = Тип("WSПрокси")) И (КонтекстВыполнения.КодРезультата = 0) Тогда

		// 1. Получить тикет
		ЕстьОшибки = Ложь;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполнения,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПолучениеТикета",
			НСтр("ru='Получение тикета'"));

			Логин  = "";
			Пароль = "";
			// Могли предать логин и пароль в КонтекстеВыполнения. Проверить.
			Если КонтекстВыполнения.Свойство("Логин") И КонтекстВыполнения.Свойство("Пароль") Тогда
				Логин  = КонтекстВыполнения.Логин;
				Пароль = КонтекстВыполнения.Пароль;
			Иначе
				// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
				ПараметрыАвторизацииИПП = ПолучитьНастройкиОблачногоАрхива("ПараметрыАвторизацииИПП");
				Если ПараметрыАвторизацииИПП.Свойство("Логин") Тогда
					Если ТипЗнч(ПараметрыАвторизацииИПП.Логин) = ТипСтрока Тогда
						Логин = ПараметрыАвторизацииИПП.Логин;
					КонецЕсли;
				КонецЕсли;
				Если ПараметрыАвторизацииИПП.Свойство("Пароль") Тогда
					Если ТипЗнч(ПараметрыАвторизацииИПП.Пароль) = ТипСтрока Тогда
						Пароль = ПараметрыАвторизацииИПП.Пароль;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Попытка
				Результат = ПроксиЛогин1С.getTicket(Логин, Пароль, "1C-cloud-backup");
				КонтекстВыполнения.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, ПроксиЛогин1С.ФабрикаXDTO);
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполнения.КодРезультата = 451;
				КонтекстВыполнения.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипСтрока) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполнения.КодРезультата = 452;
				КонтекстВыполнения.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЕстьОшибки = Истина;
			КонецЕсли;

			Тикет = Результат;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполнения,
			КонтекстВыполнения.КодРезультата,
			КонтекстВыполнения.ОписаниеРезультата,
			Неопределено);

		// 2. По тикету подключиться к публичным сервисам backup.1c.ru
		Если ЕстьОшибки <> Истина Тогда

			ПроксиПубличныйБэкап1С = ПолучитьПроксиВебСервисаБэкап1СПубличный(КонтекстВыполнения);

			Если (ТипЗнч(ПроксиПубличныйБэкап1С) = Тип("WSПрокси")) И (КонтекстВыполнения.КодРезультата = 0) Тогда

				// 2.1. Получить данные для подключения к приватным веб-сервисам backup.1c.ru
				ЕстьОшибки = Ложь;
				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполнения,
					"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПодключениеКПубличнымВебСервисам",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Загрузка информации из публичного веб-сервиса (%1)'"),
						"login"));

					Попытка
						Результат = ПроксиПубличныйБэкап1С.login(Тикет);
						КонтекстВыполнения.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, ПроксиПубличныйБэкап1С.ФабрикаXDTO);
					Исключение
						Результат = Неопределено;
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						КонтекстВыполнения.КодРезультата = 261;
						КонтекстВыполнения.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						ЕстьОшибки = Истина;
					КонецПопытки;

					Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
							И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
						КонтекстВыполнения.КодРезультата = 262;
						КонтекстВыполнения.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
							ТипЗнч(Результат));
						ЕстьОшибки = Истина;
					ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
							И (Результат.errorCode <> 0) Тогда
						КонтекстВыполнения.КодРезультата = 263;
						КонтекстВыполнения.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
							Результат.errorCode);
						ЕстьОшибки = Истина;
					КонецЕсли;

					ДанныеДляПодключенияКПриватнымВебСервисам = Результат; // authKey, activeLogin, activePassword, errorCode

				ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполнения,
					КонтекстВыполнения.КодРезультата,
					КонтекстВыполнения.ОписаниеРезультата,
					Неопределено);

				// 3. По данным публичного веб-сервиса подключиться к приватным сервисам backup.1c.ru.
				Если ЕстьОшибки <> Истина Тогда

					ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполнения,
						"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
						НСтр("ru='Подключение к прокси веб-сервиса (приватный backup.1c.ru)'"));

					АдресаВебСервисов  = ПолучитьНастройкиОблачногоАрхива("АдресаВебСервисов");
					МестоположениеWSDL = АдресаВебСервисов.АдресWSDLБэкап1СПриватный;

					НастройкиВебСервисов = ПолучитьНастройкиОблачногоАрхива("НастройкиВебСервисов");
					Таймаут = НастройкиВебСервисов.Таймаут;
					ПодробноеПредставлениеОшибки = "";

					Попытка

						ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
						ПараметрыПрокси.АдресWSDL              = МестоположениеWSDL;
						ПараметрыПрокси.URIПространстваИмен    = "urn:backup.api";
						ПараметрыПрокси.ИмяСервиса             = "backup.api";
						ПараметрыПрокси.ИмяТочкиПодключения    = "backup.apiPort";
						ПараметрыПрокси.ИмяПользователя        = ДанныеДляПодключенияКПриватнымВебСервисам.activeLogin;
						ПараметрыПрокси.Пароль                 = ДанныеДляПодключенияКПриватнымВебСервисам.activePassword;
						ПараметрыПрокси.Таймаут                = Таймаут;
						ПараметрыПрокси.ДелатьКонтрольныйВызов = Ложь;
						ПроксиПриватныйБэкап1С = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);

						ПроксиПриватныйБэкап1С.Пользователь = ДанныеДляПодключенияКПриватнымВебСервисам.activeLogin;
						ПроксиПриватныйБэкап1С.Пароль       = ДанныеДляПодключенияКПриватнымВебСервисам.activePassword;

					Исключение

						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
						ПроксиПриватныйБэкап1С = Неопределено;

					КонецПопытки;

					Если ТипЗнч(ПроксиПриватныйБэкап1С) <> Тип("WSПрокси") Тогда

						ПроксиПриватныйБэкап1С = Неопределено;
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Неудачное подключение к веб-сервису (приватный, backup.1c.ru) по причине:
								|%1'"),
							ПодробноеПредставлениеОшибки);
						// Запись в журнал регистрации.
						ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
							НСтр("ru='БИП:ОблачныйАрхив.Веб-сервисы'"), // Имя события
							НСтр("ru='Облачный архив. Веб-сервисы. Подключение к серверу'"), // ИмяСобытия
							УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
							, // ОбъектМетаданных
							, // Данные
							ТекстСообщения, // Комментарий
							ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

						КонтекстВыполнения.КодРезультата = 301;
						КонтекстВыполнения.ОписаниеРезультата = ТекстСообщения;

					Иначе

						// Вставить ключ авторизации и логин/пароль для доступа
						//  к приватным веб-сервисам в КонтекстВыполнения.
						КонтекстВыполнения.Вставить("КлючАвторизации", ДанныеДляПодключенияКПриватнымВебСервисам.authKey);
						КонтекстВыполнения.Вставить("ЛогинДоступаКБэкап1СПриватный", ДанныеДляПодключенияКПриватнымВебСервисам.activeLogin);
						КонтекстВыполнения.Вставить("ПарольДоступаКБэкап1СПриватный", ДанныеДляПодключенияКПриватнымВебСервисам.activePassword);

					КонецЕсли;

					ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
						КонтекстВыполнения,
						КонтекстВыполнения.КодРезультата,
						КонтекстВыполнения.ОписаниеРезультата,
						Неопределено);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	Возврат ПроксиПриватныйБэкап1С;

КонецФункции

// Получает информацию об активированных агентах резервного копирования.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ЗагрузитьИнформациюСтатусаАккаунта(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ЗагрузитьИнформациюСтатусаАккаунта"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ВидОбновления = "Загрузка информации об активированных агентах копирования"; // Идентификатор
	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	ТипОбъектXDTO = Тип("ОбъектXDTO");
	ТипСписокXDTO = Тип("СписокXDTO");
	ТипWSПрокси   = Тип("WSПрокси");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Получить данные из веб-сервисов
		ЕстьОшибки = Ложь;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
				"getAccountInfo"));

			Попытка
				Результат = Прокси.getAccountInfo(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
				КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 351;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполненияВложенный.КодРезультата = 352;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КонтекстВыполненияВложенный.КодРезультата = 353;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецЕсли;

			ДанныеОбАктивированныхАгентахКопирования = Результат; // ОбъектХДТО.

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 2. Отключиться от приватных веб-сервисов
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отключение от веб-сервиса (%1)'"),
				"logout"));

			Попытка
				Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 354;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 3. Записать данные в ИБ
		Если ЕстьОшибки <> Истина Тогда

			// 3.1. Полученные данные
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
				НСтр("ru='Сохранение информации в ИБ'"));

			// ДанныеОбАктивированныхАгентахКопирования.activated - Строка - "true", если аккаунт активирован;
			// ДанныеОбАктивированныхАгентахКопирования.countAgents // Сколько всего агентов доступно (куплено);
			// ДанныеОбАктивированныхАгентахКопирования.machine // Список активированных агентов - СписокXDTO элементов item с ключами:
			//  * IDmachine  - идентификатор компьютера (из реестра);
			//  * expireDate - срок, до которого подписка на агент резервного копирования активна.

			Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.Свойство     = "Аккаунт активирован"; // Идентификатор
				Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
				Если (ВРег(ДанныеОбАктивированныхАгентахКопирования.activated) = ВРег("true")) Тогда
					Запись.Значение = Истина;
				Иначе
					Запись.Значение = Ложь;
				КонецЕсли;
			Запись.Записать(Истина);

			Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.Свойство     = "Количество купленных агентов копирования"; // Идентификатор
				Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
				Запись.Значение     = ДанныеОбАктивированныхАгентахКопирования.countAgents;
			Запись.Записать(Истина);

			// Здесь удалятся данные об агентах копирования, активированных на другие логины ВебИТС.
			НаборЗаписей = РегистрыСведений.АктивированныеАгентыРезервногоКопирования.СоздатьНаборЗаписей();

				Если ТипЗнч(ДанныеОбАктивированныхАгентахКопирования.machine) = ТипОбъектXDTO Тогда
					Если ДанныеОбАктивированныхАгентахКопирования.machine.Свойства().Получить("item") <> Неопределено Тогда
						Элемент = ДанныеОбАктивированныхАгентахКопирования.machine.item;
						Если ТипЗнч(Элемент) = ТипОбъектXDTO Тогда
							Запись = НаборЗаписей.Добавить();
							Запись.ДатаПроверки                              = ТекущаяДатаДляРегистров;
							Запись.MachineGuid                               = Элемент.IDmachine;
							Запись.АгентКопированияАктивированНаТекущийЛогин = Истина;
							Запись.АгентКопированияАктивированНаДругойЛогин  = Ложь;
							Запись.СрокОкончанияПодписки                     = XMLЗначение(тип("Дата"), Элемент.expireDate);
						ИначеЕсли ТипЗнч(Элемент) = ТипСписокXDTO Тогда
							Для Каждого ТекущаяСтрокаХДТО Из Элемент Цикл
								Запись = НаборЗаписей.Добавить();
								Запись.ДатаПроверки                              = ТекущаяДатаДляРегистров;
								Запись.MachineGuid                               = ТекущаяСтрокаХДТО.IDmachine;
								Запись.АгентКопированияАктивированНаТекущийЛогин = Истина;
								Запись.АгентКопированияАктивированНаДругойЛогин  = Ложь;
								Запись.СрокОкончанияПодписки                     = XMLЗначение(тип("Дата"), ТекущаяСтрокаХДТО.expireDate);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			НаборЗаписей.Записать(Истина);

			// 3.2. Если Аккаунт НЕ активирован, то автоматически его активировать.
			Если (ВРег(ДанныеОбАктивированныхАгентахКопирования.activated) <> ВРег("true")) Тогда
				КонтекстВыполнения2 = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов
				КонтекстВыполнения2.Вставить("КлючАвторизации", КонтекстВыполненияВложенный.КлючАвторизации);
				АктивироватьАккаунтОблачногоАрхива(КонтекстВыполнения2);
			Иначе
				КонтекстВыполнения2 = Неопределено;
			КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				"",
				КонтекстВыполнения2);

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Для регистра сведений "СвойстваХранилищаОблачногоАрхива" дата обновления значений также хранится в самом регистре.
	УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, (КонтекстВыполнения.КодРезультата = 0));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Получает информацию о состоянии использования облачного архива.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ЗагрузитьИнформациюСостоянияИспользованияОблачногоАрхива(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ЗагрузитьИнформациюСостоянияИспользованияОблачногоАрхива"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ВидОбновления = "Загрузка информации о состоянии использования облачного архива"; // Идентификатор
	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO = Тип("ОбъектXDTO");
	ТипWSПрокси   = Тип("WSПрокси");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Получить данные из веб-сервисов
		ЕстьОшибки = Ложь;

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
				"getAccountStats"));

			Попытка
				Результат = Прокси.getAccountStats(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
				КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 361; // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполненияВложенный.КодРезультата = 362; // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КонтекстВыполненияВложенный.КодРезультата = 363; // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецЕсли;

			СостояниеИспользованияОблачногоАрхива = Результат;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 2. Отключиться от приватных веб-сервисов
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отключение от веб-сервиса (%1)'"),
				"logout"));

			Попытка
				Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 364;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата,
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 3. Записать данные в ИБ
		Если ЕстьОшибки <> Истина Тогда

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
				НСтр("ru='Сохранение информации в ИБ'"));

				// СостояниеИспользованияОблачногоАрхива.stats - состояние использования:
				//  * occupied - занято, байт;
				//  * total    - всего куплено, байт.

				// 3.1. Информация
				Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.Свойство     = "Объем байт, куплено"; // Идентификатор
					Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
					Запись.Значение     = СостояниеИспользованияОблачногоАрхива.stats.total;
				Запись.Записать(Истина);

				Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.Свойство     = "Объем байт, занято"; // Идентификатор
					Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
					Запись.Значение     = СостояниеИспользованияОблачногоАрхива.stats.occupied;
				Запись.Записать(Истина);

				Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.Свойство     = "Объем байт, доступно"; // Идентификатор
					Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
					Запись.Значение     = СостояниеИспользованияОблачногоАрхива.stats.total - СостояниеИспользованияОблачногоАрхива.stats.occupied;
				Запись.Записать(Истина);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				"",
				Неопределено);

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, (КонтекстВыполнения.КодРезультата = 0));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Активирует логин Облачного архива. Активный логин ВебИТС не означает доступность сервисов
//  облачного архива - их надо активировать отдельно.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения, в который при успехе
//                                   будут вставлены ключи "ЛогинАктивации", "ПарольАктивации".
//
Процедура АктивироватьАккаунтОблачногоАрхива(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "АктивироватьАккаунтОблачногоАрхива"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипWSПрокси   = Тип("WSПрокси");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Получить данные из веб-сервисов
		ЕстьОшибки = Ложь;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".АктивацияАккаунта",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
				"activateAccount"));

			Попытка
				Результат = Прокси.activateAccount(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
				КонтекстВыполненияВложенный.ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 366;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КонтекстВыполненияВложенный.КодРезультата = 367;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КонтекстВыполненияВложенный.КодРезультата = 368;
				КонтекстВыполненияВложенный.ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецЕсли;

			РезультатАктивацииОблачногоАрхива = Результат;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата, // Уже установлено выше
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 2. Отключиться от приватных веб-сервисов
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отключение от веб-сервиса (%1)'"),
				"logout"));

			Попытка
				Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КонтекстВыполненияВложенный.КодРезультата = 369;
				КонтекстВыполненияВложенный.ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КонтекстВыполненияВложенный.КодРезультата, // Уже установлено выше
			КонтекстВыполненияВложенный.ОписаниеРезультата,
			Неопределено);

		// 3. Записать данные в ИБ
		Если ЕстьОшибки <> Истина Тогда

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
				НСтр("ru='Сохранение информации в ИБ'"));

				// РезультатАктивацииОблачногоАрхива - данные активации:
				//  * acronisLogin    - логин для активации Агента резервного копирования;
				//  * acronisPassword - пароль для активации Агента резервного копирования.

				// 3.1. Информация
				Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.Свойство     = "Логин Агента копирования"; // Идентификатор.
					Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
					Запись.Значение     = РезультатАктивацииОблачногоАрхива.acronisLogin;
				Запись.Записать(Истина);

				Запись = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьМенеджерЗаписи();
					Запись.Свойство     = "Пароль Агента копирования"; // Идентификатор.
					Запись.ДатаПроверки = ТекущаяДатаДляРегистров;
					Запись.Значение     = РезультатАктивацииОблачногоАрхива.acronisPassword;
				Запись.Записать(Истина);

				КонтекстВыполнения.Вставить("ЛогинАктивации", РезультатАктивацииОблачногоАрхива.acronisLogin);
				КонтекстВыполнения.Вставить("ПарольАктивации", РезультатАктивацииОблачногоАрхива.acronisPassword);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0, // Уже установлено выше
				"",
				Неопределено);

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#Область ВебСервисыОблачногоАрхиваПриватные_РаботаСРезервнымиКопиями

// Получает информацию о списке резервных копий.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения;
//
Процедура ЗагрузитьСписокРезервныхКопий(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ЗагрузитьСписокРезервныхКопий"; // Идентификатор

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ВидОбновления = "Загрузка списка резервных копий"; // Идентификатор
	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Для вложенных процессов

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, начало
			|Время начала (мс): %2'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Начало'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ТипОбъектXDTO = Тип("ОбъектXDTO");
	ТипСписокXDTO = Тип("СписокXDTO");
	ТипWSПрокси   = Тип("WSПрокси");

	ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

	Если (ТипЗнч(Прокси) = ТипWSПрокси) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		// 1. Получить данные из веб-сервисов
		ЕстьОшибки = Ложь;
		КодРезультата = 0;
		ОписаниеРезультата = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Загрузка информации из приватного веб-сервиса (%1)'"),
				"getFileList"));

			Попытка
				Результат = Прокси.getFileList(
					КонтекстВыполненияВложенный.КлючАвторизации, // authKey
					""); // UIDName - если пустая строка, то для всех ИБ.
				ОписаниеРезультата = Символы.ПС + ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(Результат, Прокси.ФабрикаXDTO);
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КодРезультата = 356;
				ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипОбъектXDTO) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КодРезультата = 357;
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			ИначеЕсли (ТипЗнч(Результат) = ТипОбъектXDTO)
					И (Результат.errorCode <> 0) Тогда
				КодРезультата = 358;
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул ошибку с кодом: %1'"),
					Результат.errorCode);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
				ЕстьОшибки = Истина;
			КонецЕсли;

			СписокРезервныхКопий = Результат;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			Неопределено);

		// 2. Отключиться от приватных веб-сервисов
		КодРезультата = 0;
		ОписаниеРезультата = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Отключение",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Отключение от веб-сервиса (%1)'"),
				"logout"));

			Попытка
				Результат = Прокси.logout(КонтекстВыполненияВложенный.КлючАвторизации); // authKey
			Исключение
				Результат = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КодРезультата = 359;
				ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЗаполнитьЗначенияСвойств(КонтекстВыполнения, КонтекстВыполненияВложенный, "КодРезультата, ОписаниеРезультата"); // Установить код ошибки для самого верхнего уровня Контекста выполнения.
			КонецПопытки;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			Неопределено);

		// 3. Записать данные в ИБ
		Если ЕстьОшибки <> Истина Тогда

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".СохранениеДанных",
				НСтр("ru='Сохранение информации в ИБ'"));

				// СписокРезервныхКопий.listFile.item - список элементов item:
				//  * UIDFile  - идентификатор файла;
				//  * DBName   - имя ИБ;
				//  * UIDName  - идентификатор ИБ;
				//  * date     - дата создания резервной копии;
				//  * filesize - размер резервной копии.

				// 3.1. Список резервных копий
				НаборЗаписей = РегистрыСведений.РезервныеКопииОблачногоАрхива.СоздатьНаборЗаписей();

					Если ТипЗнч(СписокРезервныхКопий.listFile) = ТипОбъектXDTO Тогда
						Если СписокРезервныхКопий.listFile.Свойства().Получить("item") <> Неопределено Тогда
							Элемент = СписокРезервныхКопий.listFile.item;
							Если ТипЗнч(Элемент) = ТипОбъектXDTO Тогда
								Запись = НаборЗаписей.Добавить();
								Запись.ИдентификаторФайла = Элемент.UIDFile;
								Запись.ИмяИБ              = Элемент.DBName;
								Запись.ИдентификаторИБ    = Элемент.UIDName;
								Запись.ДатаСоздания       = XMLЗначение(Тип("Дата"), Элемент.date);
								Запись.РазмерФайла        = Число(Элемент.filesize);
							ИначеЕсли ТипЗнч(Элемент) = ТипСписокXDTO Тогда
								Для Каждого ТекущаяСтрокаХДТО Из Элемент Цикл
									Запись = НаборЗаписей.Добавить();
									Запись.ИдентификаторФайла = ТекущаяСтрокаХДТО.UIDFile;
									Запись.ИмяИБ              = ТекущаяСтрокаХДТО.DBName;
									Запись.ИдентификаторИБ    = ТекущаяСтрокаХДТО.UIDName;
									Запись.ДатаСоздания       = XMLЗначение(Тип("Дата"), ТекущаяСтрокаХДТО.date);
									Запись.РазмерФайла        = Число(ТекущаяСтрокаХДТО.filesize);
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;

				НаборЗаписей.Записать(Истина);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				0,
				"",
				Неопределено);

		КонецЕсли;

	Иначе
		// Сообщение об ошибке уже записано в контексте выполнения подключения к веб-сервису.
	КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата, // Уже установлено выше
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, (КонтекстВыполнения.КодРезультата = 0));

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Облачный архив. Все обновления Облачного архива. %1. Конец'"),
			НаименованиеПроцедурыФункции), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Удалить резервную копию.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения. Кроме стандартных для контекста ключей должны присутствовать:
//    * ИдентификаторФайла - Строка - Идентификатор файла, который необходимо удалить.
//
Процедура УдалитьРезервнуюКопию(КонтекстВыполнения) Экспорт

	НаименованиеПроцедурыФункции = "УдалитьРезервнуюКопию"; // Идентификатор

	ТипЧисло = Тип("Число");

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КодРезультата = 0;
	ОписаниеРезультата = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Удаление резервной копии'"));

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

#Область ПолучениеПрокси

	// 1. Получение прокси.
	// Не устанавливать привилегированный режим, чтобы читать / сохранять эти настройки мог только полноправный пользователь.
	Прокси = ПолучитьПроксиВебСервисаБэкап1СПриватный(КонтекстВыполненияВложенный);

#КонецОбласти

#Область УдалениеФайла

	// 2. Удаление файла резервной копии с сервера.
	Если (ТипЗнч(Прокси) = Тип("WSПрокси")) И (КонтекстВыполненияВложенный.КодРезультата = 0) Тогда

		КодРезультата = 0;
		ОписаниеРезультата = "";

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".УдалениеФайлаССервера",
			НСтр("ru='Удаление файла с сервера'"));

			Попытка
				Результат = Прокси.deleteFiles(
					КонтекстВыполненияВложенный.КлючАвторизации,
					КонтекстВыполнения.ИдентификаторФайла);
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Результат) Тогда
					Результат = Число(Результат);
				КонецЕсли;
				КодРезультата = Результат;
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Удаление файла с UIN %1 выполнено успешно'"),
					КонтекстВыполнения.ИдентификаторФайла);
			Исключение
				Результат = -1;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				КодРезультата = 391;
				ОписаниеРезультата = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;

			Если (ТипЗнч(Результат) <> ТипЧисло) // Неправильный тип
					И (Результат <> Неопределено) Тогда // Эта ошибка уже записана
				КодРезультата = 392;
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Веб-сервис вернул значение неправильного типа: %1'"),
					ТипЗнч(Результат));
			ИначеЕсли (ТипЗнч(Результат) = ТипЧисло) Тогда
				Если Результат = 0 Тогда
					// Файл удален
					ОписаниеРезультата = НСтр("ru='Файл резервной копии с идентификатором %1 успешно удален с сервера'");
					ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Файл резервной копии с идентификатором %1 успешно удален с сервера.'"),
						КонтекстВыполнения.ИдентификаторФайла);
				Иначе // Ошибка
					ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Произошла ошибка удаления файла резервной копии с сервера:
							|Код ошибки: %1
							|Идентификатор файла: %2'"),
						Результат,
						КонтекстВыполнения.ИдентификаторФайла);
					КодРезультата = 393;
				КонецЕсли;
			КонецЕсли;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			Неопределено);

	КонецЕсли;

#КонецОбласти


	// 3. Логирование
	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Удаление файла резервной копии с сервера, итоговый отчет.
			|Время начала (мс): %1
			|Время окончания (мс): %2
			|Длительность (мс): %3
			|Результат выполнения:
			|%4'")
			+ Символы.ПС,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));

	// Запись в журнал регистрации
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Веб-сервисы'"), // Имя события
		НСтр("ru='Облачный архив. Веб-сервисы. Удаление файла резервной копии'"), // ИмяСобытия
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВебСервисыАгентаКопирования

Функция ПолучитьАдресRESTAPIВерсийАгентаКопирования() Экспорт

	Возврат "https://update-api.1c.ru/update-platform/backupAgent/v1/update/info";

КонецФункции

// Загружает из интернета список описаний агентов резервного копирования, актуальных для текущей версии библиотеки.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
Процедура ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопирования(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопирования"; // Идентификатор.

	ТипСтруктура = Тип("Структура");
	ТипМассив    = Тип("Массив");

	КодРезультатаОбщий = 0;

	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Загрузка информации об актуальной версии Агента копирования'"));

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

#Область ПолучениеСпискаОСиВерсий

	КодРезультата = 0;
	ОписаниеРезультата = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПолучениеСпискаОСиВерсий",
		НСтр("ru='Получение списка ОС и версий ОС'"));

		// Получение списка ОС и их версий для передачи REST-сервису.
		СистемнаяИнформация = Новый СистемнаяИнформация;

		// Свойства, общие для всей базы.
		ДополнительныеПараметры = Новый Массив;
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "configName", Метаданные.Имя);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "configVersion", Метаданные.Версия);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "platformVersion", СистемнаяИнформация.ВерсияПриложения);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "vendor", Метаданные.Поставщик);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "IBID", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "configLanguage", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "configMainLanguage", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "curLocalizationCode", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "systemLanguage", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "clientTimeOffsetGMT", Неопределено);
		ДобавитьПараметрKeyValue(ДополнительныеПараметры, "domainZone", "ru");

		// Свойства для каждого компьютера, подключенного к этой базе.
		// Эти свойства хранятся в регистре сведений "СвойстваЛокальныхКомпьютеровДляОблачногоАрхива",
		//  также надо явно добавить параметры текущего компьютера.
		ПараметрыПлатформВсехКомпьютеров = Новый Массив;

		// Данные всех сохраненных ранее компьютеров и этого компьютера.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Рег.ТипОС    КАК clientPlatformType,
			|	Рег.ВерсияОС КАК clientOperationSystemType,
			|	""en""       КАК programLocale
			|ПОМЕСТИТЬ
			|	ВТ_ВсеКомпьютеры
			|ИЗ
			|	РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива КАК Рег
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&clientPlatformType,
			|	&clientOperationSystemType,
			|	&programLocale
			|;
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВТ_ВсеКомпьютеры.clientPlatformType        КАК clientPlatformType,
			|	ВТ_ВсеКомпьютеры.clientOperationSystemType КАК clientOperationSystemType,
			|	ВТ_ВсеКомпьютеры.programLocale             КАК programLocale
			|ИЗ
			|	ВТ_ВсеКомпьютеры
			|";
		Запрос.УстановитьПараметр("clientPlatformType", СтрЗаменить(СокрЛП(СистемнаяИнформация.ТипПлатформы), " ", "_"));
		Запрос.УстановитьПараметр("clientOperationSystemType", СокрЛП(СистемнаяИнформация.ВерсияОС));
		Запрос.УстановитьПараметр("programLocale", "en");

		ТаблицаВсехОСиВерсий = Неопределено;
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ТаблицаВсехОСиВерсий = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КонецЕсли;

		Если ТаблицаВсехОСиВерсий <> Неопределено Тогда
			Для Каждого ТекущаяСтрока Из ТаблицаВсехОСиВерсий Цикл
				ПараметрыПлатформы = Новый Структура("clientPlatformType, clientOperationSystemType, programLocale");
				ЗаполнитьЗначенияСвойств(ПараметрыПлатформы, ТекущаяСтрока);
				ПараметрыПлатформВсехКомпьютеров.Добавить(ПараметрыПлатформы);
			КонецЦикла;
		КонецЕсли;

		ДанныеДляОтбораВерсийАгентов = Новый Структура;
		ДанныеДляОтбораВерсийАгентов.Вставить("libraryVersion", ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
		ДанныеДляОтбораВерсийАгентов.Вставить("storageType", "File");
		ДанныеДляОтбораВерсийАгентов.Вставить("manufacturerCompany", "Acronis"); // Всегда такое значение для Acronis Backup Agent.
		ДанныеДляОтбораВерсийАгентов.Вставить("domainZone", "ru");
		ДанныеДляОтбораВерсийАгентов.Вставить("userPlatformData", ПараметрыПлатформВсехКомпьютеров);
		ДанныеДляОтбораВерсийАгентов.Вставить("additionalParameters", ДополнительныеПараметры);

	ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Получен список ОС и версий:
			|%1'"),
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(
			ДанныеДляОтбораВерсийАгентов,"=",Символы.ПС));

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный,
		КодРезультата,
		ОписаниеРезультата,
		Неопределено);

#КонецОбласти

#Область ПреобразованиеСпискаОСиВерсий

	Если ТаблицаВсехОСиВерсий <> Неопределено Тогда

		КодРезультата = 0;
		ОписаниеРезультата = "";

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПреобразованиеСпискаОСиВерсий",
			НСтр("ru='Преобразование списка ОС и версий ОС'"));

			ЗаписьДанныхСообщения = Новый ЗаписьJSON;
			ЗаписьДанныхСообщения.ПроверятьСтруктуру = Истина;
			ЗаписьДанныхСообщения.УстановитьСтроку(
				Новый ПараметрыЗаписиJSON(
					ПереносСтрокJSON.Авто, // ПереносСтрок.
					Символы.Таб, // СимволыОтступа.
					Истина, // ИспользоватьДвойныеКавычки.
					ЭкранированиеСимволовJSON.СимволыВнеBMP, // ЭкранированиеСимволов.
					Истина, // ЭкранироватьУгловыеСкобки.
					Истина, // ЭкранироватьРазделителиСтрок.
					Истина, // ЭкранироватьАмперсанд.
					Истина, // ЭкранироватьОдинарныеКавычки.
					Ложь)); // ЭкранироватьСлеш.

			НастройкиСериализации = Новый НастройкиСериализацииJSON;
			НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
			НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
			НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;

			ЗаписатьJSON(ЗаписьДанныхСообщения, ДанныеДляОтбораВерсийАгентов, НастройкиСериализации);

			ТелоОтправки = ЗаписьДанныхСообщения.Закрыть();

			ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Преобразован список ОС и версий:
					|%1'"),
				ТелоОтправки);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			Неопределено);

	КонецЕсли;

#КонецОбласти

#Область ЗагрузкаДанных

	ЕстьОшибки = Ложь;
	ЗагруженныеДанные = Неопределено;

	Если ТаблицаВсехОСиВерсий <> Неопределено Тогда

		КодРезультата = 0;
		ОписаниеРезультата = "";

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаДанных",
			НСтр("ru='Загрузка данных с серверов 1С'"));

			ЗащищенноеСоединениеКэш = Неопределено;
			ПроксиПоСхемам = Новый Соответствие;

			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолучитьАдресRESTAPIВерсийАгентаКопирования());
			Если СтруктураURI.Схема <> "https" Тогда
				ЗащищенноеСоединение = Неопределено;
			Иначе
				Если ЗащищенноеСоединениеКэш = Неопределено Тогда
					ЗащищенноеСоединениеКэш = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
				КонецЕсли;
				ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
			КонецЕсли;

			Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
				ЛогинДляПолучения  = СтруктураURI.Логин;
				ПарольДляПолучения = СтруктураURI.Пароль;
			Иначе
				ЛогинДляПолучения  = "";
				ПарольДляПолучения = "";
			КонецЕсли;

			Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
				Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
			Иначе
				Порт = Число(СтруктураURI.Порт);
			КонецЕсли;

			Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
			Если Прокси = Неопределено Тогда
				Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
				ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
			КонецЕсли;

			ХТТПСоединение = Новый HTTPСоединение(
				СтруктураURI.Хост,
				Порт,
				ЛогинДляПолучения,
				ПарольДляПолучения,
				Прокси,
				30,
				ЗащищенноеСоединение);

			Заголовки = Новый Соответствие;
			Заголовки.Вставить("Content-Type", "application/json");

			ХТТПЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
			ХТТПЗапрос.УстановитьТелоИзСтроки(ТелоОтправки);

			ЛокальноеПодробноеПредставлениеОшибки = "";
			Попытка
				ХТТПОтвет = ХТТПСоединение.ВызватьHTTPМетод("POST", ХТТПЗапрос);
				КодСостояния  = ХТТПОтвет.КодСостояния;
				ТелоПолучение = ХТТПОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
				Заголовки     = ХТТПОтвет.Заголовки;
			Исключение
				ЛокальноеПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЕстьОшибки = Истина;
				КодРезультата = 501;
				КодСостояния  = -1;
				ТелоПолучение = "";
				Заголовки = Новый Соответствие;
			КонецПопытки;

			Если КодСостояния <> 200 Тогда
				ЕстьОшибки = Истина;
				КодРезультата = 501;
			Иначе // 200, значит можно прочитать код ошибки, если она есть.
				// Отформатировать текст полученный:
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТелоПолучение);
				ЗагруженныеДанные = ПрочитатьJSON(ЧтениеJSON, Ложь, , ФорматДатыJSON.ISO);
				Если ТипЗнч(ЗагруженныеДанные) <> ТипСтруктура Тогда
					ЕстьОшибки = Истина;
					КодРезультата = 501;
				Иначе
					Если ЗагруженныеДанные.Свойство("errorName")
							И (ЗагруженныеДанные.errorName <> Неопределено) Тогда
						ЕстьОшибки = Истина;
						КодРезультата = 501;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Получены данные для версий Агента резервного копирования.
					|Код состояния: %1
					|Заголовки:
					|%2
					|Результат:
					|%3
					|Подробное представление ошибки (при наличии):
					|%4'"),
				КодСостояния,
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(Заголовки, "=", Символы.ПС),
				ТелоПолучение,
				ЛокальноеПодробноеПредставлениеОшибки);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			Неопределено);

	Иначе
		ЕстьОшибки = Истина;
	КонецЕсли;

#КонецОбласти

#Область ПарсингПолученныхДанных

	Если ЕстьОшибки = Ложь Тогда

		КодРезультата = 0;
		ОписаниеРезультата = "";

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПарсингЗагруженныхДанных",
			НСтр("ru='Парсинг загруженных данных'"));

			// ЗагруженныеДанные - структура:
			//  * errorName - Строка;
			//  * errorMessage - Строка;
			//  * backupAgentInfoList - Массив структур с ключами:
			//    ** libraryVersion - Строка;
			//    ** storageType - Строка;
			//    ** clientPlatformType - Строка;
			//    ** clientOperationSystemType - Строка - обычно "*";
			//    ** manufacturerCompany - Строка - должно быть "Acronis";
			//    ** locale - Строка - должно быть "en";
			//    ** distributionFileVersion - Строка;
			//    ** comparableDistributionFileVersion - Строка;
			//    ** validTo - Строка - Дата в формате ДД.ММ.ГГГГ;
			//    ** size - Число;
			//    ** checkSum - Строка - контрольная сумма (md5), но сконвертированная в Base64;
			//    ** distributionUrl - Строка;
			//    ** newInVersionUrl - Строка;
			//    ** howToUpdateUrl - Строка;
			//    ** additionalFileInfoList - Массив структур с ключами:
			//      *** size - Число;
			//      *** checkSum - Строка;
			//      *** fileUrl - Строка;
			//      *** description - Строка;
			//      *** comment - Строка.

			Если (ЗагруженныеДанные.Свойство("backupAgentInfoList"))
					И (ТипЗнч(ЗагруженныеДанные.backupAgentInfoList) = ТипМассив) Тогда

				КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

				// Вначале загрузим и обработаем файлы newInVersionUrl и howToUpdateUrl.
				КодРезультатаВложенный = 0;
				ОписаниеРезультатаВложенный = "";

				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенныйВложенный,
					"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПарсингЗагруженныхДанных.ЗагрузкаФайловОписаний",
					НСтр("ru='Парсинг загруженных данных, загрузка файлов описаний'"));

					// Подготовка списков URL.
					СодержимоеФайлов = Новый Соответствие;
					Для Каждого ТекущееОписаниеВерсииАгентаКопирования Из ЗагруженныеДанные.backupAgentInfoList Цикл
						Если ТипЗнч(ТекущееОписаниеВерсииАгентаКопирования) = ТипСтруктура Тогда
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство("newInVersionUrl"))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования.newInVersionUrl)) Тогда
								СодержимоеФайлов.Вставить(ТекущееОписаниеВерсииАгентаКопирования.newInVersionUrl, "");
							КонецЕсли;
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство("howToUpdateUrl"))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования.howToUpdateUrl)) Тогда
								СодержимоеФайлов.Вставить(ТекущееОписаниеВерсииАгентаКопирования.howToUpdateUrl, "");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					// Загрузка и парсинг файлов.
					Для Каждого ЗагружаемыйФайл Из СодержимоеФайлов Цикл
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("html");
						ПараметрыПолучения = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
						ПараметрыПолучения.Вставить("ПутьДляСохранения", ИмяВременногоФайла);
						РезультатЗагрузки = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(ЗагружаемыйФайл.Ключ, ПараметрыПолучения, Истина);
						// Возвращаемое значение:
						//   Структура - Структура со свойствами:
						//      * Статус            - Булево - результат получения файла.
						//      * Путь              - Строка   - путь к файлу на сервере, ключ используется только если статус Истина.
						//      * СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь.
						//      * Заголовки         - Соответствие - см. описание параметра Заголовки объекта HTTPОтвет.
						//      * КодСостояния      - Число - Добавляется при возникновении ошибки.
						//                                    См. описание параметра КодСостояния объекта HTTPОтвет.
						Если РезультатЗагрузки.Статус = Истина Тогда
							ЧтениеТекста = Новый ЧтениеТекста(РезультатЗагрузки.Путь, КодировкаТекста.UTF8, Символы.ПС, , Ложь);
							ВесьФайл = ЧтениеТекста.Прочитать(); // Целиком.
							ГдеТегНачала_Начало = СтрНайти(ВРег(ВесьФайл), ВРег("<BODY"), НаправлениеПоиска.СНачала,,1);
							Если ГдеТегНачала_Начало > 0 Тогда
								ГдеТегНачала_Конец = СтрНайти(ВРег(ВесьФайл), ВРег(">"), НаправлениеПоиска.СНачала, ГдеТегНачала_Начало + 5, 1);
								ГдеТегКонца = СтрНайти(ВРег(ВесьФайл), ВРег("</BODY>"), НаправлениеПоиска.СКонца, , 1);
								Если (ГдеТегНачала_Конец > 0) И (ГдеТегКонца > 0) Тогда
									Тело = СокрЛП(Сред(ВесьФайл, ГдеТегНачала_Конец + 1, ГдеТегКонца - ГдеТегНачала_Конец - 1));
									СодержимоеФайлов.Вставить(ЗагружаемыйФайл.Ключ, Тело);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Попытка
							УдалитьФайлы(ИмяВременногоФайла);
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Ошибка удаления временного файла описания в формате html %1 по причине:
										|%2'")
										+ Символы.ПС,
									ИмяВременногоФайла,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						КонецПопытки;
					КонецЦикла;

					ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Список URL файлов описаний:
								|%1'"),
							ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(СодержимоеФайлов, "=", Символы.ПС));

				ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенныйВложенный,
					КодРезультатаВложенный,
					ОписаниеРезультатаВложенный,
					Неопределено);

				// Запись полученных данных в регистр сведений "ДоступныеВерсииАгентаКопированияОблачногоАрхива".
				КодРезультатаВложенный = 0;
				ОписаниеРезультатаВложенный = "";
				ОшибкиЗаписиВБазуДанных = "";

				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенныйВложенный,
					"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПарсингЗагруженныхДанных.СохранениеДанных",
					НСтр("ru='Парсинг загруженных данных, сохранение данных в ИБ'"));

					КоличествоЗагруженныхСтрокДанных = 0;
					КоличествоПропущенныхСтрокДанных = 0;
					Для Каждого ТекущееОписаниеВерсииАгентаКопирования Из ЗагруженныеДанные.backupAgentInfoList Цикл
						Если ТипЗнч(ТекущееОписаниеВерсииАгентаКопирования) = ТипСтруктура Тогда
							// Данные для записи в регистр сведений.
							СтруктураЗаписиРегистра = Новый Структура;
							СтруктураЗаписиРегистра.Вставить("ВерсияПодсистемы");
							СтруктураЗаписиРегистра.Вставить("ВерсияАгентаКопирования");
							СтруктураЗаписиРегистра.Вставить("ВерсияАгентаКопированияДляСортировки");
							СтруктураЗаписиРегистра.Вставить("ТипОС");
							СтруктураЗаписиРегистра.Вставить("ВерсияОС");
							СтруктураЗаписиРегистра.Вставить("СрокГодностиАгентаКопирования");
							СтруктураЗаписиРегистра.Вставить("РазмерДистрибутиваБайт");
							СтруктураЗаписиРегистра.Вставить("СсылкаНаСкачивание");
							СтруктураЗаписиРегистра.Вставить("КонтрольнаяСумма");
							СтруктураЗаписиРегистра.Вставить("ТекстЧтоНовогоВВерсии");
							СтруктураЗаписиРегистра.Вставить("ТекстПорядокОбновления");
							ЗаполненыВсеДанные = Истина;
							СписокОтсутствующихДанных = "";

							// Подготовка данных.
							ИмяСвойства = "libraryVersion";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("ВерсияПодсистемы", ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]));
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "distributionFileVersion";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("ВерсияАгентаКопирования", ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]));
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "comparableDistributionFileVersion";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("ВерсияАгентаКопированияДляСортировки", ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "clientPlatformType";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("ТипОС", ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
								// ТипОС должен соответствовать разрешенному списку:
								//  ДоступныеВерсииАгентаКопированияОблачногоАрхива.ПолучитьЗначенияДопустимыхТиповОС().
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "clientOperationSystemType";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("ВерсияОС", ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "validTo";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								ДатаСтрокой = ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства];
								ПравильныйМассивЧастейДаты = Новый Массив;
								МассивЧастейДаты = СтрРазделить(ДатаСтрокой, ".", Ложь);
								Если МассивЧастейДаты.Количество() = 3 Тогда
									Для Каждого ТекущаяЧастьДаты Из МассивЧастейДаты Цикл
										Попытка
											ПравильныйМассивЧастейДаты.Добавить(Число(ТекущаяЧастьДаты));
										Исключение
											ПравильныйМассивЧастейДаты.Добавить(1);
										КонецПопытки;
									КонецЦикла;
									ДатаОкончания = НачалоДня(Дата(ПравильныйМассивЧастейДаты[2], ПравильныйМассивЧастейДаты[1], ПравильныйМассивЧастейДаты[0]));
									Если ДатаОкончания = '00010101' Тогда
										СтруктураЗаписиРегистра.Вставить("СрокГодностиАгентаКопирования", '39991231235959');
									Иначе
										СтруктураЗаписиРегистра.Вставить("СрокГодностиАгентаКопирования", КонецДня(ДатаОкончания));
									КонецЕсли;
								Иначе
									СтруктураЗаписиРегистра.Вставить("СрокГодностиАгентаКопирования", '39991231235959');
								КонецЕсли;
							Иначе
								// Не обязательное поле.
							КонецЕсли;

							ИмяСвойства = "size";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("РазмерДистрибутиваБайт", ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "distributionUrl";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								СтруктураЗаписиРегистра.Вставить("СсылкаНаСкачивание", ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "checkSum";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								// Данные контрольной суммы передаются в формате base64.
								// Их необходимо преобразовать в двоичные данные, а затем в строку.
								ДвоичныеДанныеКонтрольнойСуммы = Base64Значение(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
								КонтрольнаяСумма = СтрЗаменить(НРег(Строка(ДвоичныеДанныеКонтрольнойСуммы)), " ", "");
								СтруктураЗаписиРегистра.Вставить("КонтрольнаяСумма", КонтрольнаяСумма);
							Иначе
								ЗаполненыВсеДанные = Ложь;
								СписокОтсутствующихДанных = СписокОтсутствующихДанных + "#" + ИмяСвойства + "#";
							КонецЕсли;

							ИмяСвойства = "newInVersionUrl";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								// Вместо URL необходимо подставить значение файла.
								НайденноеЗначение = СодержимоеФайлов.Получить(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
								Если НЕ ПустаяСтрока(НайденноеЗначение) Тогда
									СтруктураЗаписиРегистра.Вставить("ТекстЧтоНовогоВВерсии", НайденноеЗначение);
								КонецЕсли;
							Иначе
								// Не обязательное поле.
							КонецЕсли;

							ИмяСвойства = "howToUpdateUrl";
							Если (ТекущееОписаниеВерсииАгентаКопирования.Свойство(ИмяСвойства))
									И (НЕ ПустаяСтрока(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства])) Тогда
								// Вместо URL необходимо подставить значение файла.
								НайденноеЗначение = СодержимоеФайлов.Получить(ТекущееОписаниеВерсииАгентаКопирования[ИмяСвойства]);
								Если НЕ ПустаяСтрока(НайденноеЗначение) Тогда
									СтруктураЗаписиРегистра.Вставить("ТекстПорядокОбновления", НайденноеЗначение);
								КонецЕсли;
							Иначе
								// Не обязательное поле.
							КонецЕсли;

							Если ЗаполненыВсеДанные = Истина Тогда
								КоличествоЗагруженныхСтрокДанных = КоличествоЗагруженныхСтрокДанных + 1;
								Запись = РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.СоздатьМенеджерЗаписи();
									ЗаполнитьЗначенияСвойств(Запись, СтруктураЗаписиРегистра);
								Запись.Записать(Истина);
							Иначе
								СписокОтсутствующихДанных = СтрЗаменить(СписокОтсутствующихДанных, "##", ", ");
								СписокОтсутствующихДанных = СтрЗаменить(СписокОтсутствующихДанных, "#", "");
								ОшибкиЗаписиВБазуДанных = ОшибкиЗаписиВБазуДанных + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Для строки %1 не заполнены обязательные поля: %2'")
										+ Символы.ПС,
									ЗагруженныеДанные.backupAgentInfoList.Индекс(ТекущееОписаниеВерсииАгентаКопирования),
									СписокОтсутствующихДанных);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					КоличествоПропущенныхСтрокДанных = ЗагруженныеДанные.backupAgentInfoList.Количество() - КоличествоЗагруженныхСтрокДанных;

					ОписаниеРезультатаВложенный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Загружено данных: %1
							|Пропущено данных: %2
							|Ошибки записи в базу данных:
							|%3'"),
						КоличествоЗагруженныхСтрокДанных,
						КоличествоПропущенныхСтрокДанных,
						ОшибкиЗаписиВБазуДанных);

				ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенныйВложенный,
					КодРезультатаВложенный,
					ОписаниеРезультатаВложенный,
					Неопределено);

			КонецЕсли;

			ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Обработаны данные для версий Агента резервного копирования:
					|%1'")
					+ Символы.ПС,
				ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ЗагруженныеДанные, "=", Символы.ПС));

			КодРезультатаОбщий = КодРезультата;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультата,
			ОписаниеРезультата,
			КонтекстВыполненияВложенныйВложенный);

	Иначе
		КодРезультатаОбщий = 501;
	КонецЕсли;

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата,
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, результат.
				|Время начала (мс): %2
				|Время окончания (мс): %3
				|Длительность (мс): %4
				|Результат выполнения:
				|%5'")
				+ Символы.ПС,
			НаименованиеПроцедурыФункции,
			ШагВыполнения.ВремяНачала,
			ШагВыполнения.ВремяОкончания,
			ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
				КонтекстВыполнения,
				Истина, // ВключаяВложенные
				"ПодробноПоШагам",
				1));

		// Запись в журнал регистрации.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // Имя события
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Облачный архив. Все обновления Облачного архива. %1'"),
				НаименованиеПроцедурыФункции), // ИмяСобытия
			?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ТекстСообщения, // Комментарий
			ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПараметрKeyValue(МассивПараметров, Ключ, Значение)

	МассивПараметров.Добавить(Новый Структура("key, value", Ключ, Значение));

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

// Процедура выполняет все обновления подсистемы Облачный архив.
// Запускается регламентным заданием.
// Список возможных шагов:
//   1. Загрузка информации об актуальных версиях агента копирования (каждые 6 часов, веб-сервис);
//   2. Загрузка информации об активированных агентах копирования (каждые 6 часов, веб-сервис);
//   3. Загрузка списка резервных копий (каждые 6 часов, веб-сервис);
//   4. Загрузка информации о состоянии использования облачного архива (каждые 6 часов, веб-сервис).
//
Процедура ВсеОбновленияОблачногоАрхива() Экспорт

	// Если идет обновление конфигурации, то все регламентные задания блокируются.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВсеОбновленияОблачногоАрхива);

	Если НЕ ОблачныйАрхивПовтИсп.ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	НаименованиеПроцедурыФункции = "ВсеОбновленияОблачногоАрхива"; // Идентификатор.

	УстановитьПривилегированныйРежим(Истина);

	// Запись в журнал регистрации.
	ЛокальнаяСистемнаяИнформация = Новый СистемнаяИнформация;

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Выполнение регламентных заданий подсистемы Облачный архив'"));

	ТекстСообщения = НСтр("ru='Начало выполнения регламентного задания
		|Тип платформы: %ТипПлатформы%
		|Версия ОС: %ВерсияОС%
		|Строка подключения: %СтрокаСоединенияИнформационнойБазы%
		|ТекущийРежимЗапуска: %ТекущийРежимЗапуска%
		|Это разделенная конфигурация: %ЭтоРазделеннаяКонфигурация%
		|Разделение включено: %РазделениеВключено%
		|Доступно использование разделенных данных: %ДоступноИспользованиеРазделенныхДанных%
		|Сеанс запущен без разделителей: %СеансЗапущенБезРазделителей%
		|Конфигурация (метаданные): %Метаданные_Имя%, %Метаданные_Версия%
		|Функциональная опция Разрешена работа с Облачным архивом: %ОблачныйАрхивПовтИсп_РазрешенаРаботаСОблачнымАрхивом%
		|Текущий пользователь ИБ:
		|	Имя: %ТекущийПользователь_Имя%
		|	УИН: %ТекущийПользователь_УникальныйИдентификатор%
		|	Разделение данных:
		|		%ТекущийПользователь_РазделениеДанных%
		|Время начала (мс): %ТНачало%'")
		+ Символы.ПС;
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипПлатформы%", ЛокальнаяСистемнаяИнформация.ТипПлатформы);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВерсияОС%", ЛокальнаяСистемнаяИнформация.ВерсияОС);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаСоединенияИнформационнойБазы%", СтрокаСоединенияИнформационнойБазы());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийРежимЗапуска%", ТекущийРежимЗапуска());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтоРазделеннаяКонфигурация%", ИнтернетПоддержкаПользователей.ЭтоРазделеннаяКонфигурация());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РазделениеВключено%", ОбщегоНазначения.РазделениеВключено());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДоступноИспользованиеРазделенныхДанных%", ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СеансЗапущенБезРазделителей%", ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Имя%", Метаданные.Имя);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Метаданные_Версия%", Метаданные.Версия);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОблачныйАрхивПовтИсп_РазрешенаРаботаСОблачнымАрхивом%", ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом());
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_Имя%", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_УникальныйИдентификатор%", ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущийПользователь_РазделениеДанных%", ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных, "=", "; "));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТНачало%", КонтекстВыполнения.ТекущийШагВыполнения.ВремяНачала);
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Все обновления Облачного архива. Начало'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияОблачногоАрхива, // ОбъектМетаданных
		, // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	ЕстьОшибки = Ложь;

	Если МонопольныйРежим() Тогда

		// Если база работает в монопольном режиме (например, запущено фоновое задание, которое включило монопольный режим
		//  и выгружает данные из области данных для последующей загрузки в модели сервиса),
		//  то будут ошибки при всех попытках записи данных в базу.
		// Поэтому в монопольном режиме не следует выполнять никаких обновлений в подсистеме ОблачныйАрхив.
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
			НСтр("ru='Облачный архив. Все обновления Облачного архива. Конец'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
			Метаданные.РегламентныеЗадания.ВсеОбновленияОблачногоАрхива, // ОбъектМетаданных
			, // Данные
			НСтр("ru='Принудительное завершение выполнения регламентного задания: информационная база работает в монопольном режиме.'"), // Комментарий
			ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЕстьОшибки = Истина;

	КонецЕсли;

	Если ЕстьОшибки = Ложь Тогда

		// Даты последних обновлений хранятся в регистре сведений ВсеОбновленияОблачногоАрхива.
		// Измерение ВидОбновления может содержать следующие значения:
		//   * Загрузка информации об актуальных версиях агента копирования;
		//   * Загрузка информации об активированных агентах копирования;
		//   * Загрузка списка резервных копий;
		//   * Загрузка информации о состоянии использования облачного архива.

		// Все даты хранятся "по гринвичу"
		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

		Если ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() = Истина Тогда

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".

#Область ЗагрузкаИнформацииОбАктуальныхВерсияхАгентаКопирования

			// 1. Загрузка информации об актуальных версиях агента копирования (каждые 6 часов, веб-сервис);
			ВидОбновления = "Загрузка информации об актуальных версиях агента копирования"; // Идентификатор

			КонтекстВыполненияВложенный.Вставить("ВидОбновления", ВидОбновления);
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ЗагрузкаИнформацииОбАктуальныхВерсияхАгентаКопирования",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='1. %1'"),
					ВидОбновления));

				Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;

				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопированияВспомогательный(КонтекстВыполненияВложенныйВложенный); // Со сторонних серверов.
					ЗагрузитьИнформациюОбАктуальныхВерсияхАгентаКопирования(КонтекстВыполненияВложенныйВложенный); // С серверов 1С.
				КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата,
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ЗагрузкаИнформацииОбАктивированныхАгентахКопирования

			// 2. Загрузка информации об активированных агентах копирования (каждые 6 часов, веб-сервис);
			ВидОбновления = "Загрузка информации об активированных агентах копирования"; // Идентификатор

			КонтекстВыполненияВложенный.Вставить("ВидОбновления", ВидОбновления);
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ЗагрузкаИнформацииОбАктивированныхАгентахКопирования",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='2. %1'"),
					ВидОбновления));

				Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;

				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЗагрузитьИнформациюСтатусаАккаунта(КонтекстВыполненияВложенныйВложенный);
				КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата,
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ЗагрузкаСпискаРезервныхКопий

			// 3. Загрузка списка резервных копий
			ВидОбновления = "Загрузка списка резервных копий"; // Идентификатор

			КонтекстВыполненияВложенный.Вставить("ВидОбновления", ВидОбновления);
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ЗагрузкаСпискаРезервныхКопий",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='3. %1'"),
					ВидОбновления));

				Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;

				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЗагрузитьСписокРезервныхКопий(КонтекстВыполненияВложенныйВложенный);
				КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата,
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ЗагрузкаИнформацииОСостоянииИспользованияОблачногоАрхива

			// 4. Загрузка списка резервных копий
			ВидОбновления = "Загрузка информации о состоянии использования облачного архива"; // Идентификатор

			КонтекстВыполненияВложенный.Вставить("ВидОбновления", ВидОбновления);
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ЗагрузкаИнформацииОСостоянииИспользованияОблачногоАрхива",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='4. %1'"),
					ВидОбновления));

				Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
				Запись.ВидОбновления = ВидОбновления;
				Запись.Прочитать();
				Если Запись.Выбран() Тогда
					ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления;
				Иначе
					ДатаСледующегоОбновления = '00010101';
				КонецЕсли;

				Если ДатаСледующегоОбновления <= ТекущаяДатаДляРегистров Тогда
					ЗагрузитьИнформациюСостоянияИспользованияОблачногоАрхива(КонтекстВыполненияВложенныйВложенный);
				КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				КонтекстВыполненияВложенный.КодРезультата,
				КонтекстВыполненияВложенный.ОписаниеРезультата,
				КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

		КонецЕсли;

	КонецЕсли;

	// Запись в журнал регистрации.
	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		0, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		"",
		КонтекстВыполненияВложенный);

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Завершение выполнения регламентного задания
			|Время начала (мс): %1
			|Время окончания (мс): %2
			|Длительность (мс): %3
			|
			|По шагам:
			|%4'")
			+ Символы.ПС,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			0));

	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Все обновления Облачного архива'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Все обновления Облачного архива. Конец'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		Метаданные.РегламентныеЗадания.ВсеОбновленияОблачногоАрхива, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура устанавливает время следующего обновления в регистре сведений "ВсеОбновленияОблачногоАрхива".
//
// Параметры:
//  ВидОбновления           - Строка - Вид обновления, см. РегистрыСведений.ВсеОбновленияОблачногоАрхива.ПолучитьЗначенияДопустимыхВидовОбновления();
//  ТекущаяДатаДляРегистров - Дата - Дата, к которой необходимо прибавлять время отсрочки (в секундах);
//  ОшибокНеБыло            - Булево - Истина, Если ошибок не было.
//
Процедура УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, ОшибокНеБыло)

	РазрешенныеВидыОбновлений = РегистрыСведений.ВсеОбновленияОблачногоАрхива.ПолучитьЗначенияДопустимыхВидовОбновления();
	Если РазрешенныеВидыОбновлений.Найти(ВидОбновления) <> Неопределено Тогда

		// По-умолчанию:
		// Если ошибок не было, то установить дату следующего выполнения = +6..12 часов;
		// Если были ошибки, то установить дату следующего выполнения = +15 минут.
		ДатаСледующегоОбновления = '00010101';
		Если ОшибокНеБыло = Истина Тогда
			// Время следующего обновления зависит от вида обновления
			Если ВидОбновления = "Загрузка информации об актуальных версиях агента копирования" Тогда
				ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 12*60*60;
			ИначеЕсли ВидОбновления = "Загрузка информации об активированных агентах копирования" Тогда
				ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;
			ИначеЕсли ВидОбновления = "Загрузка списка резервных копий" Тогда
				ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;
			ИначеЕсли ВидОбновления = "Загрузка информации о состоянии использования облачного архива" Тогда
				ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;
			Иначе
				ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 6*60*60;
			КонецЕсли;
		Иначе
			ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 15*60;
		КонецЕсли;

		// Переопределение
		ОблачныйАрхивПереопределяемый.УстановитьВремяСледующегоОбновления(ВидОбновления, ТекущаяДатаДляРегистров, ДатаСледующегоОбновления, ОшибокНеБыло);

		Запись = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьМенеджерЗаписи();
			Запись.ВидОбновления = ВидОбновления;
			Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
			Запись.ДатаСледующегоОбновления = ДатаСледующегоОбновления;
		Запись.Записать(Истина);

	КонецЕсли;

КонецПроцедуры

// Процедура создает или удаляет регламентное задание в зависимости от настройки функциональных опций.
//
// Параметры:
//  Использовать - Булево - Ложь - отключить использование регламентного задания, Истина - включить, иначе - без изменений.
//
Процедура ИзменитьИспользованиеРегламентныхЗаданий(Использовать) Экспорт

	Если НЕ ВозможнаРаботаСОблачнымАрхивом() Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Метаданные_РегламентныеЗадания_ВсеОбновленияОблачногоАрхива = Метаданные.РегламентныеЗадания.ВсеОбновленияОблачногоАрхива;

	СтруктураОтбора = Новый Структура("Метаданные", Метаданные_РегламентныеЗадания_ВсеОбновленияОблачногоАрхива);
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(СтруктураОтбора);

	Если Использовать = Истина Тогда
		// Расписание регламентного задания.
		МассивДнейНедели = Новый Массив;
		Для С=1 По 7 Цикл
			МассивДнейНедели.Добавить(С);
		КонецЦикла;
		МассивМесяцев = Новый Массив;
		Для С=1 По 12 Цикл
			МассивМесяцев.Добавить(С);
		КонецЦикла;
		Расписание = Новый РасписаниеРегламентногоЗадания;
		Расписание.ВремяНачала              = '00010101000000';
		Расписание.ВремяКонца               = '00010101000000';
		Расписание.ДатаНачала               = '00010101000000';
		Расписание.ДатаКонца                = '00010101000000';
		Расписание.ДеньВМесяце              = 0;
		Расписание.ДеньНеделиВМесяце        = 0;
		Расписание.ДетальныеРасписанияДня   = Новый Массив;
		Расписание.ДниНедели                = МассивДнейНедели;
		Расписание.ИнтервалЗавершения       = 600;
		Расписание.Месяцы                   = МассивМесяцев;
		Расписание.ПаузаПовтора             = 0;
		Расписание.ПериодНедель             = 1;
		Расписание.ПериодПовтораВТечениеДня = 3600;
		Расписание.ПериодПовтораДней        = 1;
		// Добавить, если нет.
		Если (НайденныеЗадания.Количество() = 0) Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Метаданные", Метаданные_РегламентныеЗадания_ВсеОбновленияОблачногоАрхива);
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Наименование", НСтр("ru='Все обновления Облачного архива'"));
			ПараметрыЗадания.Вставить("Ключ", "ВсеОбновленияОблачногоАрхива"); // Идентификатор.
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 10);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("Расписание", Расписание);
			ТекущееРегламентноеЗадание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		Иначе
			Для Каждого ТекущееРегламентноеЗадание Из НайденныеЗадания Цикл
				// Настройки регламентного задания.
				ТекущееРегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
				ТекущееРегламентноеЗадание.Использование                            = Истина;
				ТекущееРегламентноеЗадание.Ключ                                     = "ВсеОбновленияОблачногоАрхива"; // Идентификатор.
				ТекущееРегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
				ТекущееРегламентноеЗадание.Наименование                             = НСтр("ru='Все обновления Облачного архива'");
				ТекущееРегламентноеЗадание.Расписание                               = Расписание;
				ТекущееРегламентноеЗадание.Записать();
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Использовать = Ложь Тогда
		// Удалить.
		Для Каждого ТекущееРегламентноеЗадание Из НайденныеЗадания Цикл
			ТекущееРегламентноеЗадание.Удалить();
		КонецЦикла;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ОблачныйАрхив.ИзменитьИспользованиеРегламентныхЗаданий:
				|в параметре Использовать передано значение неправильного типа: %1'"),
			ТипЗнч(Использовать));
		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // ИмяСобытия
			НСтр("ru='Облачный архив. Сервис и регламент. ИзменениеИспользованияРегламентныхЗаданий'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаС_XML_XDTO

// Функция возвращает структуру со всеми значениями XML из файла.
//
// Параметры:
//  ИмяФайла - Строка - имя файла. Вместо имени файла может быть передано:
//               "Макет.НастройкиАгента", "Макет.НастройкиАплоадера" или "Макет.НастройкиИБ".
//
// Возвращаемое значение:
//   Структура - структура XML.
//
Функция ПреобразоватьФайлXMLВСтруктуру(ИмяФайла) Экспорт

	СтруктураИзХМЛ = Новый Структура("Текст, Атрибуты, Элементы",
		, // Значение
		Новый Структура(), // Атрибуты
		Новый Структура()); // Элементы

	ЧтениеХМЛ = Новый ЧтениеXML;
	Если ИмяФайла = "Макет.НастройкиАгента" Тогда
		Макет = Обработки.ОблачныйАрхив.ПолучитьМакет("НастройкиАгента");
		ТекстМакета = Макет.ПолучитьТекст();
		ЧтениеХМЛ.УстановитьСтроку(ТекстМакета);
	ИначеЕсли ИмяФайла = "Макет.НастройкиАплоадера" Тогда
		Макет = Обработки.ОблачныйАрхив.ПолучитьМакет("НастройкиАплоадера");
		ТекстМакета = Макет.ПолучитьТекст();
		ЧтениеХМЛ.УстановитьСтроку(ТекстМакета);
	ИначеЕсли ИмяФайла = "Макет.НастройкиИБ" Тогда
		Макет = Обработки.ОблачныйАрхив.ПолучитьМакет("НастройкиИБ");
		ТекстМакета = Макет.ПолучитьТекст();
		ЧтениеХМЛ.УстановитьСтроку(ТекстМакета);
	Иначе
		ЧтениеХМЛ.ОткрытьФайл(ИмяФайла);
	КонецЕсли;
	ПреобразоватьУзелXMLВСтруктуру(ЧтениеХМЛ, СтруктураИзХМЛ);
	ЧтениеХМЛ.Закрыть();

	Возврат СтруктураИзХМЛ;

КонецФункции

// Процедура обрабатывает рекурсивно данные XML.
//
// Параметры:
//  ЧтениеХМЛ      - ЧтениеXML - данные для чтения;
//  СтруктураИзХМЛ - Структура - Структура, в которую рекурсивно помещаются значения из файла XML.
//
Процедура ПреобразоватьУзелXMLВСтруктуру(ЧтениеХМЛ, СтруктураИзХМЛ)

	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ВложеннаяСтруктураИзХМЛ = Новый Структура("Текст, Атрибуты, Элементы",
				"", // Текст
				Новый Структура(), // Значение
				Новый Структура()); // Элементы
			СтруктураИзХМЛ.Элементы.Вставить(ЧтениеХМЛ.ЛокальноеИмя, ВложеннаяСтруктураИзХМЛ);
			Если ЧтениеХМЛ.КоличествоАтрибутов() > 0 Тогда
				Пока ЧтениеХМЛ.ПрочитатьАтрибут() Цикл
					ВложеннаяСтруктураИзХМЛ.Атрибуты.Вставить(ЧтениеХМЛ.ЛокальноеИмя, ЧтениеХМЛ.Значение);
				КонецЦикла;
			КонецЕсли;
			ПреобразоватьУзелXMLВСтруктуру(ЧтениеХМЛ, ВложеннаяСтруктураИзХМЛ);
		ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли ЧтениеХМЛ.ТипУзла = ТипУзлаXML.Текст И ЧтениеХМЛ.ИмеетЗначение Тогда
			СтруктураИзХМЛ.Текст = ЧтениеХМЛ.Значение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Процедура записывает структуру со всеми значениями в XML файл.
//
// Параметры:
//  ИмяФайла      - Строка - имя файла;
//  СтруктураВХМЛ - Структура - структура, которую необходимо сохранить в файл xml.
//
Процедура ПреобразоватьСтруктуруВФайлXML(ИмяФайла, СтруктураВХМЛ) Экспорт

	ЗаписьХМЛ = Новый ЗаписьXML;
	ЗаписьХМЛ.ОткрытьФайл(
		ИмяФайла,
		Новый ПараметрыЗаписиXML(
			, // Кодировка (по-умолчанию "UTF-8")
			, // Версия XML (по-умолчанию "1.0")
			Истина, // Отступ
			Истина, // Отступ атрибутов
			Символы.Таб)); // Символы отступа
	ЗаписьХМЛ.ЗаписатьОбъявлениеXML();
	Для каждого ТекущийЭлемент Из СтруктураВХМЛ.Элементы Цикл
		ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ТекущийЭлемент.Ключ);
			Для каждого ТекущийАтрибут Из ТекущийЭлемент.Значение.Атрибуты Цикл
				ЗаписьХМЛ.ЗаписатьАтрибут(ТекущийАтрибут.Ключ, СокрЛП(ТекущийАтрибут.Значение));
			КонецЦикла;
			Если НЕ ПустаяСтрока(СокрЛП(ТекущийЭлемент.Значение.Текст)) Тогда
				ЗаписьХМЛ.ЗаписатьТекст(СокрЛП(ТекущийЭлемент.Значение.Текст));
			КонецЕсли;
			ПреобразоватьСтруктуруВУзелXML(ЗаписьХМЛ, ТекущийЭлемент);
		ЗаписьХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьХМЛ.Закрыть();

КонецПроцедуры

// Процедура обрабатывает рекурсивно структуру для записи в XML.
//
// Параметры:
//  ЗаписьХМЛ     - ЗаписьXML - сюда надо записать данные;
//  СтруктураВХМЛ - Структура - Структура, из которой рекурсивно получаются значения для помещения в XML.
//
Процедура ПреобразоватьСтруктуруВУзелXML(ЗаписьХМЛ, СтруктураВХМЛ)

	Если СтруктураВХМЛ.Значение.Свойство("Элементы") Тогда
		Для каждого ТекущийЭлемент Из СтруктураВХМЛ.Значение.Элементы Цикл
			ЗаписьХМЛ.ЗаписатьНачалоЭлемента(ТекущийЭлемент.Ключ);
				Если ТекущийЭлемент.Значение.Свойство("Атрибуты") Тогда
					Для каждого ТекущийАтрибут Из ТекущийЭлемент.Значение.Атрибуты Цикл
						ЗаписьХМЛ.ЗаписатьАтрибут(ТекущийАтрибут.Ключ, СокрЛП(ТекущийАтрибут.Значение));
					КонецЦикла;
				КонецЕсли;
				Если ТекущийЭлемент.Значение.Свойство("Текст") Тогда
					Если НЕ СокрЛП(ТекущийЭлемент.Значение.Текст) = "" Тогда
						ЗаписьХМЛ.ЗаписатьТекст(СокрЛП(ТекущийЭлемент.Значение.Текст));
					КонецЕсли;
				КонецЕсли;
				ПреобразоватьСтруктуруВУзелXML(ЗаписьХМЛ, ТекущийЭлемент);
			ЗаписьХМЛ.ЗаписатьКонецЭлемента();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Функция возвращает значение элемента из структуры по пути. Ищется вначале в Элементах, затем в Атрибутах.
//
// Параметры:
// - СтруктураДанныхХМЛ - Структура - структура данных ХМЛ;
// - Путь               - Строка - путь к элементу / атрибуту.
//
// Возвращаемое значение:
//   Строка, ЗначениеЕслиНеНайдено - произвольное значение.
//
Функция ПолучитьЗначениеИзСтруктурыДанныхХМЛ(СтруктураДанныхХМЛ, Путь, ЗначениеЕслиНеНайдено = Неопределено)

	Результат = ЗначениеЕслиНеНайдено;

	// 1. Разложить путь на составляющие.
	МассивОтрезков = СтрРазделить(Путь, ".", Ложь);
	Если МассивОтрезков.Количество() > 0 Тогда
		// 2. Цикл по пути
		ТекущийЭлементСтруктуры = СтруктураДанныхХМЛ;
		С = 0;
		Для С = 0 По МассивОтрезков.Количество()-1 Цикл
			ТекущийОтрезок = МассивОтрезков[С];
			Если ТекущийЭлементСтруктуры.Элементы.Свойство(ТекущийОтрезок) = Истина Тогда
				Если С = МассивОтрезков.Количество()-1 Тогда
					Результат = ТекущийЭлементСтруктуры.Элементы[ТекущийОтрезок].Текст;
				КонецЕсли;
				ТекущийЭлементСтруктуры = ТекущийЭлементСтруктуры.Элементы[ТекущийОтрезок];
			ИначеЕсли ТекущийЭлементСтруктуры.Атрибуты.Свойство(ТекущийОтрезок) = Истина Тогда
				// Атрибут - последний, внутри атрибута не может быть вложенных элементов.
				// Поэтому вернуть это значение, игнорируя оставшиеся отрезки пути.
				Результат = ТекущийЭлементСтруктуры.Атрибуты[ТекущийОтрезок];
				Прервать;
			Иначе
				Результат = Неопределено;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Преобразует строку времени в формате "99:99:99" в значение типа ДатаВремя.
//
// Параметры:
//  ТекстВремя         - Строка - преобразуемое время;
//  ОписаниеРезультата - Строка - сюда добавить описание ошибки.
//
// Возвращаемое значение:
//   ДатаВремя, Неопределено - преобразованное из строки время.
//
Функция ПолучитьВремяИзТекста(ТекстВремя, ОписаниеРезультата)

	Время = Неопределено;

	МассивЧастейВремени = СтрРазделить(ТекстВремя, ":", Истина);
	Если МассивЧастейВремени.Количество() = 3 Тогда
		Попытка
			Время = Дата(
				1, // Год
				1, // Месяц
				1, // День
				Число(МассивЧастейВремени[0]), // Часы
				Число(МассивЧастейВремени[1]), // Минуты
				Число(МассивЧастейВремени[2])); // Секунды
		Исключение
			Время = Неопределено;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Описание времени некорректное: %1
						|Произошла ошибка преобразования:
						|%2'")
						+ Символы.ПС,
					ТекстВремя,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;
	Иначе
		Время = Неопределено;
		ОписаниеРезультата = ОписаниеРезультата
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Описание времени некорректное: %1'")
					+ Символы.ПС,
				ТекстВремя);
	КонецЕсли;

	Возврат Время;

КонецФункции

// Преобразует строку списка дней недели в Массив.
//
// Параметры:
//  ТекстДниНедели     - Строка - преобразуемая строка дней недели:
//                       (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday);
//  ОписаниеРезультата - Строка - сюда добавить описание ошибки.
//
// Возвращаемое значение:
//   Массив - массив чисел, дней недели (от 1 (пнд) до 7 (вск)).
//
Функция ПолучитьДниНеделиИзТекста(ТекстДниНедели, ОписаниеРезультата)

	ДниНедели = Новый Массив;

	МассивДнейНедели = СтрРазделить(ТекстДниНедели, ",", Ложь);
	Для Каждого ТекущийДеньНедели Из МассивДнейНедели Цикл
		Если ВРег(ТекущийДеньНедели) = ВРег("Monday") Тогда
			ДниНедели.Добавить(1);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Tuesday") Тогда
			ДниНедели.Добавить(2);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Wednesday") Тогда
			ДниНедели.Добавить(3);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Thursday") Тогда
			ДниНедели.Добавить(4);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Friday") Тогда
			ДниНедели.Добавить(5);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Saturday") Тогда
			ДниНедели.Добавить(6);
		ИначеЕсли ВРег(ТекущийДеньНедели) = ВРег("Sunday") Тогда
			ДниНедели.Добавить(7);
		Иначе
			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неправильный день недели: %1'")
						+ Символы.ПС,
					ТекущийДеньНедели);
		КонецЕсли;
	КонецЦикла;

	Возврат ДниНедели;

КонецФункции

// Преобразует строку списка дней месяца в Массив.
//
// Параметры:
//  ТекстДниМесяца     - Строка - преобразуемая строка дней месяца (от 1 до 31 и 32 (последний день месяца));
//  ОписаниеРезультата - Строка - сюда добавить описание ошибки.
//
// Возвращаемое значение:
//   Массив - массив чисел, дней месяца (от 1 до 31 и 32 (last)).
//
Функция ПолучитьДниМесяцаИзТекста(ТекстДниМесяца, ОписаниеРезультата)

	ДниМесяца = Новый Массив;

	МассивДнейМесяца = СтрРазделить(ТекстДниМесяца, ",", Ложь);
	Для Каждого ТекущийДеньМесяца Из МассивДнейМесяца Цикл
		Если ВРег(ТекущийДеньМесяца) = ВРег("last") Тогда
			ДниМесяца.Добавить(32);
		Иначе

			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неправильный день месяца: %1'")
						+ Символы.ПС,
					ТекущийДеньМесяца);
		КонецЕсли;
	КонецЦикла;

	Возврат ДниМесяца;

КонецФункции

#КонецОбласти

#Область ОбновлениеИБ

// Процедура вызывается при первом запуске библиотеки БИП.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск"; // Идентификатор

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

#Область ОсновноеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление",
			НСтр("ru='Основное обновление'"));

			// Ничего не делать.

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

#Область ПереопределяемоеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПереопределяемоеОбновление",
			НСтр("ru='Переопределяемое обновление'"));

			УстановитьПривилегированныйРежим(Истина);
				ОблачныйАрхивПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск(КонтекстВыполненияВложенный);
			УстановитьПривилегированныйРежим(Ложь);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПервыйЗапуск'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск"; // Идентификатор

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

#Область ОсновноеОбновление

		КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление",
			НСтр("ru='Основное обновление'"));

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

#Область ОсновноеОбновление_ЗагрузитьВсеСтандартныеЗначения

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление.ЗагрузкаСтандартныхЗначений",
				НСтр("ru='Основное обновление, загрузка стандартных значений'"));

				// Загрузить поставляемые данные из макетов.
				УстановитьПривилегированныйРежим(Истина);
					ЗагрузитьВсеСтандартныеЗначения();
				УстановитьПривилегированныйРежим(Ложь);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				0,
				"",
				Неопределено);

#КонецОбласти

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ПереопределяемоеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПереопределяемоеОбновление",
			НСтр("ru='Переопределяемое обновление'"));

			УстановитьПривилегированныйРежим(Истина);
				ОблачныйАрхивПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск(КонтекстВыполненияВложенный);
			УстановитьПривилегированныйРежим(Ложь);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПервыйЗапуск'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию"; // Идентификатор.

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

#Область ОсновноеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление",
			НСтр("ru='Основное обновление'"));

			// Ничего не делать.

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

#Область ПереопределяемоеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПереопределяемоеОбновление",
			НСтр("ru='Переопределяемое обновление'"));

			УстановитьПривилегированныйРежим(Истина);
				ОблачныйАрхивПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию(КонтекстВыполненияВложенный);
			УстановитьПривилегированныйРежим(Ложь);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПерейтиНаВерсию'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию"; // Идентификатор

	КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Вызов процедуры / функции (%1)'"),
			НаименованиеПроцедурыФункции));

#Область ОсновноеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление",
			НСтр("ru='Основное обновление'"));

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

#Область ОсновноеОбновление_ИзменитьИспользованиеРегламентныхЗаданий

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление.УстановкаРасписания",
				НСтр("ru='Основное обновление, установка расписания'"));

				// В зависимости от текущего значения константы и возможности работы с Облачным архивом,
				//  добавить или удалить регламентное задание "ВсеОбновленияНовостей".
				УстановитьПривилегированныйРежим(Истина);
					ИзменитьИспользованиеРегламентныхЗаданий(ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом());
				УстановитьПривилегированныйРежим(Ложь);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				0,
				"",
				Неопределено);

#КонецОбласти

#Область ОсновноеОбновление_ЗагрузитьВсеСтандартныеЗначения

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ОсновноеОбновление.ЗагрузкаСтандартныхЗначений",
				НСтр("ru='Основное обновление, загрузка стандартных значений'"));

				// Загрузить поставляемые данные из макетов.
				УстановитьПривилегированныйРежим(Истина);
					ЗагрузитьВсеСтандартныеЗначения();
				УстановитьПривилегированныйРежим(Ложь);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенныйВложенный,
				0,
				"",
				Неопределено);

#КонецОбласти

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ПереопределяемоеОбновление

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПереопределяемоеОбновление",
			НСтр("ru='Переопределяемое обновление'"));

			УстановитьПривилегированныйРежим(Истина);
				ОблачныйАрхивПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию(КонтекстВыполненияВложенный);
			УстановитьПривилегированныйРежим(Ложь);

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			0,
			"",
			Неопределено);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	// Запись в журнал регистрации.
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, завершение.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполнения.ВремяНачала,
		ШагВыполнения.ВремяОкончания,
		ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1));
	ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
		НСтр("ru='БИП:ОблачныйАрхив.Сервис и регламент'"), // ИмяСобытия
		НСтр("ru='Облачный архив. Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		УровеньЖурналаРегистрации.Информация, // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ОблачныйАрхивПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура загружает все стандартные значения необходимые для подсистемы ОблачныйАрхив
//  из макетов с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры,
//      логины и пароли для доступа к веб-сервисам обновлений.
//
Процедура ЗагрузитьВсеСтандартныеЗначения()

	РегистрыСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива.ЗагрузитьСтандартныеЗначения();

КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСБСП

// Процедура устанавливает параметры сеанса для подсистемы ОблачныйАрхив.
//
// Параметры:
//  ИмяПараметра           - Неопределено;
//  УстановленныеПараметры - Неопределено.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт

	// Заполнение основной структуры настроек.
	ЭтоАдминистраторWindows = ЭтоАдминистраторWindows();
	Если ЭтоАдминистраторWindows = 2 Тогда
		ЭтоАдминистраторWindows = Ложь;
	Иначе
		// Считаем, что это администратор и может выполнять действия с Агентом резервного копирования.
		// Ошибки тогда будут видны на экране.
		ЭтоАдминистраторWindows = Истина;
	КонецЕсли;
	Результат = Новый Структура("ЭтоАдминистраторWindows", ЭтоАдминистраторWindows);

	// Преобразование в хранилище значений и вставка в параметры сеанса
	ПараметрыОкруженияБИП_ОблачныйАрхив = Новый ХранилищеЗначения(Результат, Новый СжатиеДанных(0));

	УстановитьПривилегированныйРежим(Истина);
		ПараметрыСеанса.ПараметрыОкруженияБИП_ОблачныйАрхив = ПараметрыОкруженияБИП_ОблачныйАрхив;
	УстановитьПривилегированныйРежим(Ложь);

	Если УстановленныеПараметры <> Неопределено Тогда
		УстановленныеПараметры.Добавить("ПараметрыОкруженияБИП_ОблачныйАрхив");
	КонецЕсли;

КонецПроцедуры

#Область ПриНачалеРаботыСистемы

// Процедура вызывается из модуля управляемого приложения,
//  затем ОблачныйАрхивКлиент.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхивВызовСервера.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхив.ПриНачалеРаботыСистемы,
//  затем ОблачныйАрхивПереопределяемый.ПриНачалеРаботыСистемы.
//
Процедура ПриНачалеРаботыСистемы() Экспорт

	СтандартнаяОбработка = Истина;

	// Переопределение
	ОблачныйАрхивПереопределяемый.ПриНачалеРаботыСистемы(СтандартнаяОбработка);

	Если СтандартнаяОбработка = Истина Тогда

		// Так как ОблачныйАрхив предназначен только для файловых ИБ, то клиентские настройки можно получать
		//  и на сервере - это один и тот же компьютер.
		// При старте необходимо получать следующую информацию:
		//  - Настроена ли подсистема "Облачный архив" (если НЕ настроена, то оповещать);
		//  - Не пора ли обновить клиента Агента резервного копирования? (если ПОРА, то оповещать).
		Если ОблачныйАрхивПовтИсп.РазрешенаРаботаСОблачнымАрхивом() Тогда

			МассивШагов = Новый Массив;
			ШагСбораДанных = ОблачныйАрхивКлиентСервер.ПолучитьОписаниеШагаСбораДанных();
				ШагСбораДанных.КодШага               = "ИнформацияОКлиенте"; // Идентификатор
				ШагСбораДанных.ОписаниеШага          = НСтр("ru='Сбор информации о клиентском компьютере'");
				ШагСбораДанных.СрокУстареванияСекунд = 6*60*60; // Обновлять только если данные были собраны > 6 часов назад.
			МассивШагов.Добавить(ШагСбораДанных);

			ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
			ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Сбор данных для Облачного архива'");
			ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне(
				"ОблачныйАрхив.СобратьДанныеПоОблачномуАрхиву", // ИмяПроцедуры.
				Новый Структура("МассивШагов",
					МассивШагов), // ПараметрыПроцедуры.
				ПараметрыВыполнения); // ПараметрыВыполнения
			// ФоновоеЗадание - Структура:
			//   * Статус - Строка - "Выполняется", "Выполнено", "Ошибка", "Отменено".
			//   * ИдентификаторЗадания - УникальныйИдентификатор;
			//   * АдресРезультата - Строка;
			//   * АдресДополнительногоРезультата - Строка;
			//   * КраткоеПредставлениеОшибки   - Строка;
			//   * ПодробноеПредставлениеОшибки - Строка;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВзаимодействиеСПодсистемамиБиблиотеки

// Процедура очищает все сохраненные значения. Имеет смысл вызывать при изменении логина / пароля ИТС,
//  чтобы не отображались старые значения.
//
Процедура ОчиститьСохраненныеЗначения()

	// Сброс кэшей.
	// 1. Список резервных копий.
	НаборЗаписей = РегистрыСведений.РезервныеКопииОблачногоАрхива.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);

	// 2. Свойства хранилища Облачного архива (остаток свободного места, активирован ли аккаунт и т.п.).
	НаборЗаписей = РегистрыСведений.СвойстваХранилищаОблачногоАрхива.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);

	// 3. Список последних обновлений.
	НаборЗаписей = РегистрыСведений.ВсеОбновленияОблачногоАрхива.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);

	// 4. Активированные агенты.
	НаборЗаписей = РегистрыСведений.АктивированныеАгентыРезервногоКопирования.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область Скрипты

#Область ИнформацияОбАгентеКопирования

// Функция получает все настройки компьютера, необходимые для работы с Облачным архивом.
// Последовательность получения настроек такая:
//  - в любом случае идет обращение к ХранилищеНастроек.НастройкиОблачногоАрхива;
//  - Если в Константы.НастройкиОблачногоАрхива есть блок Отладка и он актуален, то вернуть эти данные;
//    - Иначе вернется Неопределено;
//  - Если вернулось Неопределено, то получить параметры заново на клиенте
//      (для файловой ИБ - на клиенте или на сервере - не важно).
// В процессе получения настроек на клиенте (например, при обращении к реестру Windows, файловой системе и т.п.)
//  могут быть ошибки. Это может быть связано с тем, что у пользователя недостаточно прав. В таком случае просто
//  прекратить получение параметров. Функция вызывается только в каком-то контексте, но не самостоятельно,
//  поэтому запись журнала регистрации не осуществляется.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//
// Возвращаемое значение:
//   Структура с ключами:
//     * ИдентификаторКомпьютера - Строка;
//     * ТипПлатформы - Строка;
//     * ИмяКомпьютера - Строка;
//     * ВерсияПлатформы - Строка;
//     * ВерсияУстановленногоАгентаКопирования - Строка;
//     * КаталогУстановкиАгентаКопирования - Строка;
//     * АгентКопированияАктивирован_ЕстьФайлыСертификатов - Булево.
//
Функция СобратьДанные_ИнформацияОКлиенте(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "СобратьДанные_ИнформацияОКлиенте"; // Идентификатор

	ТипСтруктура = Тип("Структура");
	ТипБулево    = Тип("Булево");

	Если ТипЗнч(КонтекстВыполнения) <> ТипСтруктура Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Обновление информации о клиенте'"));

	ЛокальнаяСистемнаяИнформация = Новый СистемнаяИнформация;

	ИнформацияОКлиенте = Новый Структура;
	ИнформацияОКлиенте.Вставить("ИдентификаторКомпьютера", "");
	ИнформацияОКлиенте.Вставить("ТипОС", ""); // Windows_x86, Windows_x86_64.
	ИнформацияОКлиенте.Вставить("ВерсияОС", ЛокальнаяСистемнаяИнформация.ВерсияОС);
	ИнформацияОКлиенте.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	ИнформацияОКлиенте.Вставить("ТипПлатформы", ЛокальнаяСистемнаяИнформация.ТипПлатформы); // ТипПлатформы 1С.
	ИнформацияОКлиенте.Вставить("ВерсияПлатформы", ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ЛокальнаяСистемнаяИнформация.ВерсияПриложения));
	ИнформацияОКлиенте.Вставить("КаталогУстановкиАгентаКопирования", "c:\Program Files (x86)\Acronis\BackupAgent\");
	ИнформацияОКлиенте.Вставить("ВерсияУстановленногоАгентаКопирования", "00.00.000.0000");
	ИнформацияОКлиенте.Вставить("АгентКопированияУстановлен", Ложь);
	ИнформацияОКлиенте.Вставить("АгентКопированияАктивирован_ЕстьФайлыСертификатов", Ложь);
	ИнформацияОКлиенте.Вставить("ЭтоАдминистраторWindows", Ложь);

	КонтекстВыполненияВложенный1 = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	#Если Сервер ИЛИ ТонкийКлиент ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

	Пересчитать_ЭтоАдминистраторWindows = Истина;
	ПараметрыОкруженияБИП_ОблачныйАрхив = ПараметрыСеанса.ПараметрыОкруженияБИП_ОблачныйАрхив.Получить();
	Если ТипЗнч(ПараметрыОкруженияБИП_ОблачныйАрхив)= ТипСтруктура Тогда
		Если ПараметрыОкруженияБИП_ОблачныйАрхив.Свойство("ЭтоАдминистраторWindows") Тогда
			Если ТипЗнч(ПараметрыОкруженияБИП_ОблачныйАрхив.ЭтоАдминистраторWindows) = ТипБулево Тогда
				Пересчитать_ЭтоАдминистраторWindows = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Пересчитать_ЭтоАдминистраторWindows = Истина Тогда
		УстановкаПараметровСеанса();
	КонецЕсли;
	ЭтоАдминистраторWindows = ПараметрыСеанса.ПараметрыОкруженияБИП_ОблачныйАрхив.Получить().ЭтоАдминистраторWindows;
	ИнформацияОКлиенте.Вставить("ЭтоАдминистраторWindows", ЭтоАдминистраторWindows);

#Область Шаг_ПолучениеДанныхИзРеестраWindows

	КодРезультатаШаг1      = 0;
	ОписаниеРезультатаШаг1 = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный1,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр",
		НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows)'"));

	// 1. Проверить возможность работы с Windows Script Host и попробовать получить значения настроек агента.
	Если ЛокальнаяСистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		ИнформацияОКлиенте.Вставить("ТипПлатформы", "Windows_x86");
	ИначеЕсли ЛокальнаяСистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		ИнформацияОКлиенте.Вставить("ТипПлатформы", "Windows_x86_64");
	КонецЕсли;
	ИнформацияОКлиенте.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	ИнформацияОКлиенте.Вставить("ВерсияПлатформы", ЛокальнаяСистемнаяИнформация.ВерсияПриложения);

	ОбъектОболочка = Новый COMОбъект("WScript.Shell");

	// Создание нового вложенного контекста 2-го уровня перед первым шагом.
	КонтекстВыполненияВложенный2 = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Попытаемся получить тип операционной системы.
#Область Шаг_ПолучениеДанныхИзРеестраWindows_ТипОС

	КодРезультатаШаг2      = 0;
	ОписаниеРезультатаШаг2 = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный2,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.ТипОС",
		НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), тип ОС'"));

		АрхитектураПроцессораЭмуляция  = "";
		АрхитектураПроцессораНастоящая = "";
		// Для 32-разрядного процесса на 32 разрядной ОС:
		//  - АрхитектураПроцессораЭмуляция  (processor_architecture) = x86;
		//  - АрхитектураПроцессораНастоящая (processor_architew6432) = пусто.
		// Для 32-разрядного процесса на 64 разрядной ОС:
		//  - АрхитектураПроцессораЭмуляция  (processor_architecture) = x86;
		//  - АрхитектураПроцессораНастоящая (processor_architew6432) = AMD64 или IA64.
		// Для 64-разрядного процесса на 64 разрядной ОС:
		//  - АрхитектураПроцессораЭмуляция  (processor_architecture) = AMD64 или IA64;
		//  - АрхитектураПроцессораНастоящая (processor_architew6432) = пусто.
		Попытка
			АрхитектураПроцессораЭмуляция  = ОбъектОболочка.environment("system").item("processor_architecture");
			АрхитектураПроцессораНастоящая = ОбъектОболочка.environment("system").item("processor_architew6432");
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеРезультатаШага2 = ОписаниеРезультатаШага2
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка получения параметров агента копирования (тип операционной системы Windows) (через объекты OLE, переменные окружения) по причине:
						|%1'")
						+ Символы.ПС,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;

		ТипОС = "";
		Если СтрДлина(АрхитектураПроцессораЭмуляция) >= 3 Тогда
			Если (Прав(АрхитектураПроцессораЭмуляция, 2) = "64") ИЛИ (Прав(АрхитектураПроцессораНастоящая, 2) = "64") Тогда // AMD64 / IA64.
				ТипОС = "Windows_x86_64";
			Иначе // x86.
				ТипОС = "Windows_x86";
			КонецЕсли;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ТипОС) Тогда
			ИнформацияОКлиенте.Вставить("ТипОС", ТипОС);
		Иначе
			КодРезультатаШаг2 = 102;
			ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
				+ НСтр("ru='Ошибка получения параметров агента копирования (ТипОС). Причины были указаны выше.'")
				+ Символы.ПС;
		КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный2,
		КодРезультатаШаг2,
		ОписаниеРезультатаШаг2,
		Неопределено);

	КодРезультатаШаг1 = Макс(КодРезультатаШаг1, КодРезультатаШаг2);

#КонецОбласти

	// Попытаемся получить каталог установки агента резервного копирования и его версию.
#Область Шаг_ПолучениеДанныхИзРеестраWindows_КаталогИВерсияАгента

	КодРезультатаШаг2      = 0;
	ОписаниеРезультатаШаг2 = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный2,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.КаталогИВерсииАгента",
		НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), каталог и версии агента'"));

		КаталогУстановкиАгентаКопирования      = "";
		ВерсияУстановленногоАгентаКопирования  = "";
		КаталогУстановкиАгентаКопирования1     = "";
		ВерсияУстановленногоАгентаКопирования1 = "";
		КаталогУстановкиАгентаКопирования2     = "";
		ВерсияУстановленногоАгентаКопирования2 = "";
		Попытка
			КаталогУстановкиАгентаКопирования1 = ОбъектОболочка.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Acronis\CommonComponents\BackupAgent.exe");
			ВерсияУстановленногоАгентаКопирования1 = ОбъектОболочка.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Acronis\CommonComponents\BackupAgentVersion");
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;

		Попытка
			КаталогУстановкиАгентаКопирования2 = ОбъектОболочка.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Acronis\CommonComponents\BackupAgent.exe");
			ВерсияУстановленногоАгентаКопирования2 = ОбъектОболочка.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Acronis\CommonComponents\BackupAgentVersion");
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;

		Если (ТипОС = "Windows_x86") ИЛИ (ТипОС = "Windows_x86_64") Тогда
			Если НЕ ПустаяСтрока(КаталогУстановкиАгентаКопирования1) Тогда
				КаталогУстановкиАгентаКопирования = КаталогУстановкиАгентаКопирования1;
			ИначеЕсли НЕ ПустаяСтрока(КаталогУстановкиАгентаКопирования2) Тогда
				КаталогУстановкиАгентаКопирования = КаталогУстановкиАгентаКопирования2;
			КонецЕсли;
			ИмяПрограммы = "BackupAgent.exe";
			Если СтрЗаканчиваетсяНа(ВРег(КаталогУстановкиАгентаКопирования), ВРег(ИмяПрограммы)) Тогда
				КаталогУстановкиАгентаКопирования =
					Лев(КаталогУстановкиАгентаКопирования, СтрДлина(КаталогУстановкиАгентаКопирования) - СтрДлина(ИмяПрограммы) - 1);
			КонецЕсли;
			ИнформацияОКлиенте.Вставить("КаталогУстановкиАгентаКопирования", КаталогУстановкиАгентаКопирования);

			Если НЕ ПустаяСтрока(ВерсияУстановленногоАгентаКопирования1) Тогда
				ВерсияУстановленногоАгентаКопирования = ВерсияУстановленногоАгентаКопирования1;
			ИначеЕсли НЕ ПустаяСтрока(ВерсияУстановленногоАгентаКопирования2) Тогда
				ВерсияУстановленногоАгентаКопирования = ВерсияУстановленногоАгентаКопирования2;
			КонецЕсли;
			// В версии пишется 3 числа, а у нас требуется 4 - преобразовать.
			ВерсияУстановленногоАгентаКопирования = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ВерсияУстановленногоАгентаКопирования);
			ИнформацияОКлиенте.Вставить("ВерсияУстановленногоАгентаКопирования", ВерсияУстановленногоАгентаКопирования);

		Иначе
			КодРезультатаШаг2 = 101;
			ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не получен каталог установки и версия агента, т.к. операционная система не относится к Windows.
						|Тип платформы: %1
						|Тип ОС: %2'"),
					ЛокальнаяСистемнаяИнформация.ТипПлатформы,
					ТипОС);
		КонецЕсли;

		Если (НЕ ПустаяСтрока(КаталогУстановкиАгентаКопирования))
				И (НЕ ПустаяСтрока(ВерсияУстановленногоАгентаКопирования)) Тогда
			ИнформацияОКлиенте.Вставить("АгентКопированияУстановлен", Истина);
			ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
				+ НСтр("ru='Данные успешно получены из реестра Windows.'")
				+ Символы.ПС;
		КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный2,
		КодРезультатаШаг2,
		ОписаниеРезультатаШаг2,
		Неопределено);

	КодРезультатаШаг1 = Макс(КодРезультатаШаг1, КодРезультатаШаг2);

#КонецОбласти

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный1,
		КодРезультатаШаг1,
		ОписаниеРезультатаШаг1,
		КонтекстВыполненияВложенный2);

	// Установить код результата всего контекста как максимальный из кодов нижнего уровня.
	КонтекстВыполненияВложенный1.КодРезультата = Макс(КонтекстВыполненияВложенный1.КодРезультата, КодРезультатаШаг1);

#КонецОбласти

	// Получение идентификатора компьютера.
#Область Шаг_ПолучениеИдентификатораКомпьютера

	КодРезультатаШаг1      = 0;
	ОписаниеРезультатаШаг1 = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный1,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.ИдентификаторКомпьютера",
		НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), идентификатор компьютера'"));

		// Для 64-разрядной Windows значение MachineGuid хранится в 64-разрядной ветке реестра:
		// HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid.
		// Из 32-разрядного приложения 1С происходит обращение к 32-разрядной ветке реестра,
		//  где этого параметра MachineGuid нет:
		// HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Cryptography\.
		// Необходимо запустить из 32-разрядного приложения 64-разрядное, чтобы оно прочитало правильную ветку реестра.
		// Для этого можно использовать путь-подмену %Windir%Sysnative, но обратим внимание,
		//  что "ЗапуститьПриложение" выдаст ошибку, а "КомандаСистемы" не работает на сервере.
		// Попробуем получить разными способами.
		// На всякий случай сохраним в ИнформацияОКлиенте предыдущее значение - возможно когда-то администратор
		//  запускал 1С:Предприятие и значение идентификатора сохранилось.
		Запись = РегистрыСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива.СоздатьМенеджерЗаписи();
		Запись.ИмяКомпьютера = ИнформацияОКлиенте.ИмяКомпьютера;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			ИнформацияОКлиенте.Вставить("ИдентификаторКомпьютера", Запись.MachineGuid);
		КонецЕсли;

		// Создание нового вложенного контекста 2-го уровня перед первым шагом.
		КонтекстВыполненияВложенный2 = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

		// Идентификатор компьютера получается в некоторых случаях запуском сторонних приложений.
		// Поэтому перед получением, всегда проверять - заполнен ли он, или нет.
		Если ПустаяСтрока(ИнформацияОКлиенте.ИдентификаторКомпьютера) Тогда

			ИдентификаторКомпьютераРеестр = "";
			ИдентификаторКомпьютераФайл   = "";
			ИдентификаторКомпьютераАгент  = "";

#Область Шаг_ПолучениеИдентификатораКомпьютера_Реестр

			КодРезультатаШаг2      = 0;
			ОписаниеРезультатаШаг2 = "";

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.ТипОС",
				НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), тип ОС'"));

				Попытка
					ИдентификаторКомпьютераРеестр = ОбъектОболочка.RegRead("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid");
					ОписаниеРезультатаШаг2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Успешное получение идентификатора компьютера (MachineGuid) из реестра Windows (через объекты OLE):
							|%1'")
							+ Символы.ПС,
						ИдентификаторКомпьютераРеестр);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					КодРезультатаШаг2  = 106;
					ОписаниеРезультатаШаг2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка получения параметров агента копирования из реестра Windows (через объекты OLE) по причине:
							|%1'")
							+ Символы.ПС,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				КонецПопытки;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				КодРезультатаШаг2,
				ОписаниеРезультатаШаг2,
				Неопределено);

			КодРезультатаШаг1 = Макс(КодРезультатаШаг1, КодРезультатаШаг2);

#КонецОбласти

#Область Шаг_ПолучениеИдентификатораКомпьютера_КомандаReg

			КодРезультатаШаг2      = 0;
			ОписаниеРезультатаШаг2 = "";

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.ТипОС",
				НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), тип ОС'"));

				Попытка

					КаталогОС = ОбъектОболочка.ExpandEnvironmentStrings("%WinDir%");
					СтрокаКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						"%1\Sysnative\reg.exe query HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography /v MachineGuid",
						КаталогОС);

					ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
					ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина; // Необходимо для получения потока вывода.
					ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
					ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
					РезультатЗапускаПрограммы = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
					КодВозврата = РезультатЗапускаПрограммы.КодВозврата;
					ПотокВывода = РезультатЗапускаПрограммы.ПотокВывода;
					ПотокОшибок = РезультатЗапускаПрограммы.ПотокОшибок;

					Для С=1 По СтрЧислоСтрок(ПотокВывода) Цикл
						ТекущаяСтрокаТекста = СтрПолучитьСтроку(ПотокВывода, С);
						ТекущаяСтрокаТекста = СтрЗаменить(ТекущаяСтрокаТекста, Символ(10), "");
						ТекущаяСтрокаТекста = СтрЗаменить(ТекущаяСтрокаТекста, Символ(13), "");
						Если СтрНайти(ТекущаяСтрокаТекста, "MachineGuid") > 0 Тогда
							МассивПодстрок = СтрРазделить(ТекущаяСтрокаТекста, " ", Ложь);
							Если МассивПодстрок.Количество() >= 3 Тогда
								ИдентификаторКомпьютераФайл = МассивПодстрок[2];
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Успешное получения идентификатора компьютера (MachineGuid) из реестра Windows (через reg.exe):
								|Строка команды:
								|%1
								|Код возврата: %2
								|Поток вывода:
								|%3
								|Поток ошибок:
								|%4
								|MachineGuid: %5'")
								+ Символы.ПС,
							СтрокаКоманды,
							КодВозврата,
							ПотокВывода,
							ПотокОшибок,
							ИдентификаторКомпьютераФайл);

				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					КодРезультатаШаг2  = 107;
					ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка получения параметров агента копирования из реестра Windows (через reg.exe) по причине:
								|%1'")
								+ Символы.ПС,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				КонецПопытки;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				КодРезультатаШаг2,
				ОписаниеРезультатаШаг2,
				Неопределено);

			КодРезультатаШаг1 = Макс(КодРезультатаШаг1, КодРезультатаШаг2);

#КонецОбласти

#Область Шаг_ПолучениеИдентификатораКомпьютера_Агент

			КодРезультатаШаг2      = 0;
			ОписаниеРезультатаШаг2 = "";

			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Реестр.ТипОС",
				НСтр("ru='Получение информации об установленном агенте копирования и параметрах компьютера (из реестра Windows), тип ОС'"));

				Если НЕ ПустаяСтрока(КаталогУстановкиАгентаКопирования) Тогда

					Попытка
						СтрокаКоманды =
							""""
							+ КаталогУстановкиАгентаКопирования
							+ ПолучитьРазделительПути()
							+ "BackupAgent.exe"
							+ """"
							+ " get_machine_id";

						ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
						ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина; // Необходимо для получения потока вывода.
						ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
						ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
						РезультатЗапускаПрограммы = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
						КодВозврата = РезультатЗапускаПрограммы.КодВозврата;
						ПотокВывода = РезультатЗапускаПрограммы.ПотокВывода;
						ПотокОшибок = РезультатЗапускаПрограммы.ПотокОшибок;

						Если СтрЧислоСтрок(ПотокВывода) >= 1 Тогда
							ТекущаяСтрокаТекста = СтрПолучитьСтроку(ПотокВывода, 1);
							ТекущаяСтрокаТекста = СтрЗаменить(ТекущаяСтрокаТекста, Символ(10), "");
							ТекущаяСтрокаТекста = СтрЗаменить(ТекущаяСтрокаТекста, Символ(13), "");
							ИдентификаторКомпьютераАгент = СокрЛП(ТекущаяСтрокаТекста);
						КонецЕсли;

						ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Успешное получения идентификатора компьютера (MachineGuid) через BackupAgent.exe:
									|Строка команды:
									|%1
									|Код возврата: %2
									|Поток вывода:
									|%3
									|Поток ошибок:
									|%4
									|MachineGuid: %5'")
									+ Символы.ПС,
								СтрокаКоманды,
								КодВозврата,
								ПотокВывода,
								ПотокОшибок,
								ИдентификаторКомпьютераФайл);

					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						КодРезультатаШаг2  = 108;
						ОписаниеРезультатаШаг2 = ОписаниеРезультатаШаг2
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка получения параметров агента копирования через BackupAgent.exe по причине:
									|%1'")
									+ Символы.ПС,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					КонецПопытки;
				КонецЕсли;

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный2,
				КодРезультатаШаг2,
				ОписаниеРезультатаШаг2,
				Неопределено);

			КодРезультатаШаг1 = Макс(КодРезультатаШаг1, КодРезультатаШаг2);

#КонецОбласти

			// Если все значения (ИдентификаторКомпьютераРеестр, ИдентификаторКомпьютераФайл
			//  и ИдентификаторКомпьютераАгент) пустые, то это ошибка.
			Если (НЕ ПустаяСтрока(ИдентификаторКомпьютераРеестр)) Тогда
				ИнформацияОКлиенте.Вставить("ИдентификаторКомпьютера", ИдентификаторКомпьютераРеестр);
				// Если идентификатор компьютера получен хоть каким-то способом, то сбросить код ошибки.
				КодРезультатаШаг1 = 0;
			ИначеЕсли (НЕ ПустаяСтрока(ИдентификаторКомпьютераФайл)) Тогда
				ИнформацияОКлиенте.Вставить("ИдентификаторКомпьютера", ИдентификаторКомпьютераФайл);
				// Если идентификатор компьютера получен хоть каким-то способом, то сбросить код ошибки.
				КодРезультатаШаг1 = 0;
			ИначеЕсли (НЕ ПустаяСтрока(ИдентификаторКомпьютераАгент)) Тогда
				ИнформацияОКлиенте.Вставить("ИдентификаторКомпьютера", ИдентификаторКомпьютераАгент);
				// Если идентификатор компьютера получен хоть каким-то способом, то сбросить код ошибки.
				КодРезультатаШаг1 = 0;
			Иначе
				КодРезультатаШаг1 = 105;
				ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
					+ НСтр("ru='Ошибка получения параметров агента копирования (ИдентификаторКомпьютера). Причины были указаны выше.'")
					+ Символы.ПС;
			КонецЕсли;

		КонецЕсли;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияВложенный1,
		КодРезультатаШаг1,
		ОписаниеРезультатаШаг1,
		КонтекстВыполненияВложенный2);

	// Установить код результата всего контекста как максимальный из кодов нижнего уровня.
	КонтекстВыполненияВложенный1.КодРезультата = Макс(КонтекстВыполненияВложенный1.КодРезультата, КодРезультатаШаг1);

#КонецОбласти

	// Следующие проверки имеет смысл осуществлять только если установлен Агент резервного копирования.
	Если (ИнформацияОКлиенте.АгентКопированияУстановлен = Истина) И (КонтекстВыполненияВложенный1.КодРезультата = 0) Тогда

#Область Шаг_ПроверкаДанныхОбАгенте_Ключи

		КодРезультатаШаг1      = 0;
		ОписаниеРезультатаШаг1 = "";

		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный1,
			"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".Файлы",
			НСтр("ru='Проверка наличия файлов программы и файлов ключей'"));

			// 2. Проверить наличие файлов, необходимых для работы Агента копирования.
			// Если хоть какой-то файл отсутствует, то установить признак, что Агент копирования НЕ установлен.
			// 2.1. Каталоги Агента резервного копирования.
			КаталогУстановкиАгентаКопирования = Новый Файл(ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования);
			Если КаталогУстановкиАгентаКопирования.Существует() Тогда

				ЕстьОшибки = Ложь;

				// В каталоге установки должны быть файлы:
				// - 7za.exe;
				// - BackupAgent.exe;
				// - uploader.exe.
				ФайлыДляПроверки = Новый Массив();
				ФайлыДляПроверки.Добавить("7za.exe");
				ФайлыДляПроверки.Добавить("BackupAgent.exe");
				ФайлыДляПроверки.Добавить("uploader.exe");
				Для Каждого ТекущийФайл Из ФайлыДляПроверки Цикл
					МассивНайденныхФайлов = НайтиФайлы(ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования, ТекущийФайл, Ложь);
					Если МассивНайденныхФайлов.Количество() <= 0 Тогда
						ИнформацияОКлиенте.Вставить("АгентКопированияУстановлен", Ложь);
						ЕстьОшибки = Истина;
						ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Файл программы %1 отсутствует'")
									+ Символы.ПС,
								ТекущийФайл);
					Иначе
						ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Файл программы %1 найден'")
									+ Символы.ПС,
								ТекущийФайл);
					КонецЕсли;
				КонецЦикла;

				// В каталоге установки + "\config" должны быть файлы:
				// - private_key.pem;
				// - certificate.pem.
				ФайлыДляПроверки = Новый Массив();
				ФайлыДляПроверки.Добавить("private_key.pem");
				ФайлыДляПроверки.Добавить("certificate.pem");
				АгентКопированияАктивирован_ЕстьФайлыСертификатов = Истина;
				Для Каждого ТекущийФайл Из ФайлыДляПроверки Цикл
					МассивНайденныхФайлов = НайтиФайлы(ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования + ПолучитьРазделительПути() + "config", ТекущийФайл, Ложь);
					Если МассивНайденныхФайлов.Количество() <= 0 Тогда
						ИнформацияОКлиенте.Вставить("АгентКопированияАктивирован", Ложь);
						АгентКопированияАктивирован_ЕстьФайлыСертификатов = Ложь;
						ЕстьОшибки = Истина;
						ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Файл ключа %1 отсутствует'")
									+ Символы.ПС,
								ТекущийФайл);
					Иначе
						ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Файл ключа %1 найден'")
									+ Символы.ПС,
								ТекущийФайл);
					КонецЕсли;
				КонецЦикла;
				ИнформацияОКлиенте.Вставить("АгентКопированияАктивирован_ЕстьФайлыСертификатов", АгентКопированияАктивирован_ЕстьФайлыСертификатов);

				Если ЕстьОшибки = Истина Тогда
					КодРезультатаШаг1 = 104;
					ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
						+ НСтр("ru='Отсутствуют файлы, необходимые для работы Агента резервного копирования'");
				КонецЕсли;

			Иначе

				КодРезультатаШаг1 = 104;
				ОписаниеРезультатаШаг1 = ОписаниеРезультатаШаг1
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Отсутствует каталог установки Агента резервного копирования (%1)'"),
						ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования);

			КонецЕсли;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный1,
			КодРезультатаШаг1,
			ОписаниеРезультатаШаг1,
			Неопределено);

#КонецОбласти

	Иначе
		ИнформацияОКлиенте.Вставить("АгентКопированияАктивирован", Ложь);
	КонецЕсли;

	// Сохранить значения настроек
	ЗаписатьНастройкиОблачногоАрхива(ИнформацияОКлиенте, "ИнформацияОКлиенте", ИмяКомпьютера());

	Результат = ИнформацияОКлиенте;

	КонтекстВыполнения.КодРезультата = 0;

	#Иначе

	Результат = Неопределено;

	КонтекстВыполнения.КодРезультата = 103;

	#КонецЕсли

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ОблачныйАрхив.%1
			|Тип ОС: %2
			|Версия ОС: %3
			|Тип платформы 1С: %4
			|Версия 1С: %5
			|Строка подключения: %6
			|ТекущийРежимЗапуска: %7'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ИнформацияОКлиенте.ТипОС,
		ЛокальнаяСистемнаяИнформация.ВерсияОС,
		ЛокальнаяСистемнаяИнформация.ТипПлатформы,
		ЛокальнаяСистемнаяИнформация.ВерсияПриложения,
		СтрокаСоединенияИнформационнойБазы(),
		ТекущийРежимЗапуска());
	КонтекстВыполнения.ОписаниеРезультата = ТекстСообщения;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный1);

	Возврат Результат;

КонецФункции

// Функция получает все настройки агента резервного копирования, необходимые для работы с Облачным архивом.
// Последовательность получения настроек такая:
//  - в любом случае идет обращение к ХранилищеНастроек.НастройкиОблачногоАрхива;
//  - Если в Константы.НастройкиОблачногоАрхива есть блок Отладка и он актуален, то вернуть эти данные;
//    - Иначе вернется Неопределено;
//  - Если вернулось Неопределено, то получить параметры заново на клиенте
//      (для файловой ИБ - на клиенте или на сервере - не важно).
// В процессе получения настроек на клиенте (например, при обращении к реестру Windows, файловой системе и т.п.)
//  могут быть ошибки. Это может быть связано с тем, что у пользователя недостаточно прав. В таком случае просто
//  прекратить получение параметров. Функция вызывается только в каком-то контексте, но не самостоятельно,
//  поэтому запись журнала регистрации не осуществляется.
//
// Параметры:
//  КонтекстВыполнения - Структура - структура контекста выполнения.
//                        В него можно передать ключ "КаталогУстановкиАгентаКопирования".
//                        Если ключ "КаталогУстановкиАгентаКопирования" не будет передан,
//                        тогда будут заново получаться настройки "ИнформацияОКлиенте".
//
// Возвращаемое значение:
//   Структура с ключами:
//     * ИмяКомпьютера - Строка;
//     * РасписаниеАвтоматическогоРезервногоКопирования - Структура;
//     * КаталогСтатистики - Строка;
//     * КаталогРабочий - Строка;
//     * КаталогЛогов - Строка.
//
Функция СобратьДанные_НастройкиАгентаКопированияКлиент(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "СобратьДанные_НастройкиАгентаКопированияКлиент"; // Идентификатор

	ТекущаяДатаСеанса = ТекущаяДатаСеанса();

	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КонецЕсли;

	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		"ОблачныйАрхив." + НаименованиеПроцедурыФункции,
		НСтр("ru='Обновление информации о настройках агента копирования'"));

#Если Сервер ИЛИ ТонкийКлиент ИЛИ ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда

	ТипСтруктура = Тип("Структура");
	ТипСтрока    = Тип("Строка");
	ТипДата      = Тип("Дата");
	ТипЧисло     = Тип("Число");

	ПараметрыОкруженияСервер = ПолучитьНастройкиОблачногоАрхива("ПараметрыОкруженияСервер");
	ИдентификаторИБ = ПараметрыОкруженияСервер.ИдентификаторИБ;
	ИдентификаторИБ_Полный =
		ИдентификаторИБ
			+ ОблачныйАрхивКлиентСервер.ПолучитьОписаниеСуффиксовИдентификаторовИБ().АвтоматическаяКопия.Суффикс;

	НастройкиАгентаКопированияКлиент = Новый Структура;
	НастройкиАгентаКопированияКлиент.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	НастройкиАгентаКопированияКлиент.Вставить("РасписаниеАвтоматическогоРезервногоКопирования", Неопределено);
	НастройкиАгентаКопированияКлиент.Вставить("КаталогСтатистики", "%TEMP%\Acronis\Statistics");
	НастройкиАгентаКопированияКлиент.Вставить("КаталогРабочий", "%TEMP%\Acronis\WorkingDirectory");
	НастройкиАгентаКопированияКлиент.Вставить("КаталогЛогов", "%TEMP%\Acronis\Logs");

	УказанКаталогУстановкиАгентаКопирования = Ложь;
	Если КонтекстВыполнения.Свойство("КаталогУстановкиАгентаКопирования") Тогда
		Если ТипЗнч(КонтекстВыполнения.КаталогУстановкиАгентаКопирования) = ТипСтрока
				И НЕ ПустаяСтрока(КонтекстВыполнения.КаталогУстановкиАгентаКопирования) Тогда
			УказанКаталогУстановкиАгентаКопирования = Истина;
		КонецЕсли;
	КонецЕсли;

	Если УказанКаталогУстановкиАгентаКопирования <> Истина Тогда
		ИнформацияОКлиенте = ПолучитьНастройкиОблачногоАрхива("ИнформацияОКлиенте", ИмяКомпьютера());
		КонтекстВыполнения.Вставить("КаталогУстановкиАгентаКопирования", ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования);
		УказанКаталогУстановкиАгентаКопирования = Истина;
	КонецЕсли;

	Если УказанКаталогУстановкиАгентаКопирования = Истина Тогда

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки

		// Должен быть каталог с файлами настроек.
		ИмяКаталогаНастроек =
			ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования
			+ ПолучитьРазделительПути()
			+ "config";
		Каталог = Новый Файл(ИмяКаталогаНастроек);
		Если Каталог.Существует() Тогда

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки_Каталоги

			// Должны быть файлы настроек. Если их нет - создать со значениями по-умолчанию.
			// Сразу же прочитать значения необходимых настроек.
			ИмяФайлаНастроекАгента =
				ИмяКаталогаНастроек
				+ ПолучитьРазделительПути()
				+ "BackupAgent.xml";
			ФайлНастроекАгента = Новый Файл(ИмяФайлаНастроекАгента);
			Если НЕ ФайлНастроекАгента.Существует() Тогда
				СтруктураНастроекАгента = ПреобразоватьФайлXMLВСтруктуру("Макет.НастройкиАгента");
				ПреобразоватьСтруктуруВФайлXML(ИмяФайлаНастроекАгента, СтруктураНастроекАгента);
			Иначе
				СтруктураНастроекАгента = ПреобразоватьФайлXMLВСтруктуру(ИмяФайлаНастроекАгента);
			КонецЕсли;
			ИмяФайлаНастроекАплоадера =
				ИмяКаталогаНастроек
				+ ПолучитьРазделительПути()
				+ "uploader.xml";
			ФайлНастроекАплоадера = Новый Файл(ИмяФайлаНастроекАплоадера);
			Если НЕ ФайлНастроекАплоадера.Существует() Тогда
				СтруктураНастроекАплоадера = ПреобразоватьФайлXMLВСтруктуру("Макет.НастройкиАплоадера");
				ПреобразоватьСтруктуруВФайлXML(ИмяФайлаНастроекАплоадера, СтруктураНастроекАплоадера);
			Иначе
				СтруктураНастроекАплоадера = ПреобразоватьФайлXMLВСтруктуру(ИмяФайлаНастроекАплоадера);
				КонецЕсли;

			// Необходимо проверить и создать каталоги, обязательные для работы агента копирования:
			// КаталогЗагруженныхВерсий, КаталогЛогов, КаталогСтатистики, КаталогРабочий.
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ПроверкаНеобходимыхКаталогов",
				НСтр("ru='Проверка каталогов для работы Агента резервного копирования'"));

				ВложенноеОписаниеРезультата = "";
				ЕстьОшибки = Ложь;

				КаталогВременныхФайлов = ИнтернетПоддержкаПользователейКлиентСервер.УдалитьПоследнийСимвол(КаталогВременныхФайлов(), "\/");
				ИмяКаталогаЛогов      = ПолучитьЗначениеИзСтруктурыДанныхХМЛ(
					СтруктураНастроекАгента,
					"EnvironmentConfiguration.Log.LogPath",
					"%TEMP%\Acronis\Logs");
				ИмяКаталогаСтатистики = ПолучитьЗначениеИзСтруктурыДанныхХМЛ(
					СтруктураНастроекАгента,
					"EnvironmentConfiguration.Statistics.StatPath",
					"%TEMP%\Acronis\Statistics");
				ИмяКаталогаРабочий    = ПолучитьЗначениеИзСтруктурыДанныхХМЛ(
					СтруктураНастроекАгента,
					"EnvironmentConfiguration.OperationDirectory",
					"%TEMP%\Acronis\WorkingDirectory");

				КаталогиДляПроверки = Новый СписокЗначений;
				КаталогиДляПроверки.Добавить(ИмяКаталогаЛогов, НСтр("ru='Каталог логов'"));
				КаталогиДляПроверки.Добавить(ИмяКаталогаСтатистики, НСтр("ru='Каталог статистики'"));
				КаталогиДляПроверки.Добавить(ИмяКаталогаРабочий, НСтр("ru='Рабочий каталог'"));
				Для Каждого ТекущийКаталог Из КаталогиДляПроверки Цикл
					ИмяКаталога = СтрЗаменить(ТекущийКаталог.Значение, "%TEMP%", КаталогВременныхФайлов);
					Каталог = Новый Файл(ИмяКаталога);
					Если Каталог.Существует() Тогда
						ВложенноеОписаниеРезультата =
							ВложенноеОписаниеРезультата
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 (%2) существует.'")
									+ Символы.ПС,
								ТекущийКаталог.Представление,
								ТекущийКаталог.Значение);
					Иначе
						Попытка
							СоздатьКаталог(ИмяКаталога);
							ВложенноеОписаниеРезультата =
								ВложенноеОписаниеРезультата
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='%1 (%2) отсутствовал, но был успешно создан.'")
										+ Символы.ПС,
									ТекущийКаталог.Представление,
									ТекущийКаталог.Значение);
						Исключение
							ЕстьОшибки = Истина;
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ВложенноеОписаниеРезультата =
								ВложенноеОписаниеРезультата
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='%1 (%2) отсутствовал, создать его не удалось по причине:
										|%3'")
										+ Символы.ПС,
									ТекущийКаталог.Представление,
									ТекущийКаталог.Значение,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;

				НастройкиАгентаКопированияКлиент.Вставить("КаталогСтатистики", ИмяКаталогаСтатистики);
				НастройкиАгентаКопированияКлиент.Вставить("КаталогРабочий", ИмяКаталогаРабочий);
				НастройкиАгентаКопированияКлиент.Вставить("КаталогЛогов", ИмяКаталогаЛогов);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				?(ЕстьОшибки = Истина, 0, 125),
				ВложенноеОписаниеРезультата,
				Неопределено);

#КонецОбласти

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки_Расписание

			// Проверить и загрузить настройки ИБ (расписания)
			ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ОблачныйАрхив." + НаименованиеПроцедурыФункции + ".ЗагрузкаНастроекИБ",
				НСтр("ru='Загрузка настроек этой ИБ из рабочего каталога'"));

				ВложенноеОписаниеРезультата = "";
				ЕстьОшибки = Ложь;

				ПолучитьРасписаниеПоУмолчанию = Истина;
				РасписаниеАвтоматическогоРезервногоКопирования = Новый Структура;
				КаталогНастроекИБ =
					НастройкиАгентаКопированияКлиент.КаталогРабочий
					+ ПолучитьРазделительПути()
					+ ИдентификаторИБ_Полный;
				МаскаФайлаНастроекИБ = "*_backupConfig.xml";
				МассивНайденныхФайлов = НайтиФайлы(КаталогНастроекИБ, МаскаФайлаНастроекИБ, Ложь);
				Если МассивНайденныхФайлов.Количество() >= 1 Тогда
					// Взять самый последний файл.
					ФайлНастроекИБ = МассивНайденныхФайлов.Получить(МассивНайденныхФайлов.Количество() - 1);
					Если ФайлНастроекИБ.Существует() Тогда
						ИмяФайлаНастроекИБ = ФайлНастроекИБ.ПолноеИмя;
						ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Найден файл настроек Агента резервного копирования для ИБ (%1). Производится считывание настроек.'")
									+ Символы.ПС,
								ИмяФайлаНастроекИБ);
						ВсеНастройкиИзФайла = ПреобразоватьФайлXMLВСтруктуру(ИмяФайлаНастроекИБ);
						// Текст, Атрибуты, Элементы.
						Если ТипЗнч(ВсеНастройкиИзФайла) = ТипСтруктура Тогда
							ВложенныеЭлементы = ВсеНастройкиИзФайла.Элементы;
							Если ВложенныеЭлементы.Свойство("DatabaseBackupConfiguration") Тогда
								ВложенныеЭлементы = ВложенныеЭлементы.DatabaseBackupConfiguration.Элементы;
								Если ВложенныеЭлементы.Свойство("Schedule") Тогда
									СтруктураРасписания = ВложенныеЭлементы.Schedule;
									Если СтруктураРасписания.Элементы.Свойство("BackupNow") Тогда
										// Это свойство надо пропустить.
										ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
											+ НСтр("ru='Настройка расписания BackupNow пропущена.'")
												+ Символы.ПС;
									КонецЕсли;

									РасписаниеНайдено = Ложь;

									// Взять первое свойство расписания.
									// Брать свойства последовательно. Если при преобразовании не было ошибок,
									//  то оставить этот вариант.

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки_Расписание_Ежедневно

									Если РасписаниеНайдено = Ложь Тогда
										Если СтруктураРасписания.Элементы.Свойство("Time") Тогда
											ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
												+ НСтр("ru='Найдена настройка расписания Time.'")
												+ Символы.ПС;
											ТекущийЭлементРасписания = СтруктураРасписания.Элементы.Time;
											ТекстВремя = ТекущийЭлементРасписания.Текст;
											Время = ПолучитьВремяИзТекста(ТекстВремя, ВложенноеОписаниеРезультата);
											Если ТипЗнч(Время) = ТипДата Тогда
												// Преобразовать время:
												// В файле настроек оно хранится в GMT,
												//  а в базе оно хранится в текущем часовом поясе.
												Время = МестноеВремя(
													Дата(
														Год(ТекущаяДатаСеанса),
														Месяц(ТекущаяДатаСеанса),
														День(ТекущаяДатаСеанса),
														Час(Время),
														Минута(Время),
														Секунда(Время)));
												РасписаниеНайдено = Истина;
												ПолучитьРасписаниеПоУмолчанию = Ложь;
												РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Ежедневно_ОдинРазВДень");
												РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Время", Время);
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;

									Если РасписаниеНайдено = Ложь Тогда
										Если СтруктураРасписания.Элементы.Свойство("BackupDaily") Тогда
											ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
												+ НСтр("ru='Найдена настройка расписания BackupDaily.'")
													+ Символы.ПС;
											ТекущийЭлементРасписания = СтруктураРасписания.Элементы.BackupDaily;

											// Может быть два варианта:
											// - есть атрибут time;
											// - есть атрибуты time, endTime, repeatHours;
											Если ТекущийЭлементРасписания.Атрибуты.Свойство("time")
													И ТекущийЭлементРасписания.Атрибуты.Свойство("endTime")
													И ТекущийЭлементРасписания.Атрибуты.Свойство("repeatHours") Тогда
												ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
													+ НСтр("ru='Найдена настройка расписания BackupDaily (начало, окончание, периодичность).'")
														+ Символы.ПС;
												ТекстВремяНачала = ТекущийЭлементРасписания.Атрибуты.time;
												ВремяНачала = ПолучитьВремяИзТекста(ТекстВремяНачала, ВложенноеОписаниеРезультата);
												ТекстВремяОкончания = ТекущийЭлементРасписания.Атрибуты.endTime;
												ВремяОкончания = ПолучитьВремяИзТекста(ТекстВремяОкончания, ВложенноеОписаниеРезультата);
												КоличествоЧасовПовтора = ТекущийЭлементРасписания.Атрибуты.repeatHours;
												Если ТипЗнч(ВремяНачала) = ТипДата
														И ТипЗнч(ВремяОкончания) = ТипДата
														И ТипЗнч(КоличествоЧасовПовтора) = ТипЧисло
														И (КоличествоЧасовПовтора >= 1 И КоличествоЧасовПовтора <= 23) Тогда
													// Преобразовать время:
													// В файле настроек оно хранится в GMT, а в базе оно хранится в текущем часовом поясе.
													ВремяНачала = МестноеВремя(
														Дата(
															Год(ТекущаяДатаСеанса),
															Месяц(ТекущаяДатаСеанса),
															День(ТекущаяДатаСеанса),
															Час(ВремяНачала),
															Минута(ВремяНачала),
															Секунда(ВремяНачала)));
													ВремяОкончания = МестноеВремя(
														Дата(
															Год(ТекущаяДатаСеанса),
															Месяц(ТекущаяДатаСеанса),
															День(ТекущаяДатаСеанса),
															Час(ВремяОкончания),
															Минута(ВремяОкончания),
															Секунда(ВремяОкончания)));
													РасписаниеНайдено = Истина;
													ПолучитьРасписаниеПоУмолчанию = Ложь;
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Ежедневно_НесколькоРазВДень");
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("ВремяНачала", ВремяНачала);
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("ВремяОкончания", ВремяОкончания);
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("КоличествоЧасовПовтора", КоличествоЧасовПовтора);
												КонецЕсли;
											КонецЕсли;

											Если РасписаниеНайдено = Ложь Тогда
												Если ТекущийЭлементРасписания.Атрибуты.Свойство("time") Тогда
													ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
														+ НСтр("ru='Найдена настройка расписания BackupDaily (ежедневно).'")
															+ Символы.ПС;
													ТекстВремя = ТекущийЭлементРасписания.Атрибуты.time;
													Время = ПолучитьВремяИзТекста(ТекстВремя, ВложенноеОписаниеРезультата);
													Если ТипЗнч(Время) = ТипДата Тогда
														// Преобразовать время:
														// В файле настроек оно хранится в GMT, а в базе оно хранится в текущем часовом поясе.
														Время = МестноеВремя(
															Дата(
																Год(ТекущаяДатаСеанса),
																Месяц(ТекущаяДатаСеанса),
																День(ТекущаяДатаСеанса),
																Час(Время),
																Минута(Время),
																Секунда(Время)));
														РасписаниеНайдено = Истина;
														ПолучитьРасписаниеПоУмолчанию = Ложь;
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Ежедневно_ОдинРазВДень");
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Время", Время);
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;

										КонецЕсли;
									КонецЕсли;

#КонецОбласти

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки_Расписание_Еженедельно

									Если РасписаниеНайдено = Ложь Тогда
										Если СтруктураРасписания.Элементы.Свойство("BackupWeekly") Тогда
											ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
												+ НСтр("ru='Найдена настройка расписания BackupWeekly.'")
													+ Символы.ПС;
											ТекущийЭлементРасписания = СтруктураРасписания.Элементы.BackupWeekly;
											Если ТекущийЭлементРасписания.Атрибуты.Свойство("time")
													И ТекущийЭлементРасписания.Атрибуты.Свойство("weekDay") Тогда

												ТекстВремя = ТекущийЭлементРасписания.Атрибуты.time;
												Время = ПолучитьВремяИзТекста(ТекстВремя, ВложенноеОписаниеРезультата);
												ТекстДниНедели = ТекущийЭлементРасписания.Атрибуты.weekDay;
												ДниНедели = ПолучитьДниНеделиИзТекста(ТекстДниНедели, ВложенноеОписаниеРезультата);
												Если (ТипЗнч(Время) = ТипДата)
														И (ДниНедели.Количество() > 0) Тогда
													// Преобразовать время:
													// В файле настроек оно хранится в GMT, а в базе оно хранится в текущем часовом поясе.
													Время = МестноеВремя(
														Дата(
															Год(ТекущаяДатаСеанса),
															Месяц(ТекущаяДатаСеанса),
															День(ТекущаяДатаСеанса),
															Час(Время),
															Минута(Время),
															Секунда(Время)));
													РасписаниеНайдено = Истина;
													ПолучитьРасписаниеПоУмолчанию = Ложь;
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Еженедельно");
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Время", Время);
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("ДниНедели", ДниНедели);
												КонецЕсли;

											КонецЕсли;
										КонецЕсли;
									КонецЕсли;

#КонецОбласти

#Область Шаг_ПроверкаДанныхОбАгенте_Настройки_Расписание_Ежемесячно

									Если РасписаниеНайдено = Ложь Тогда
										Если СтруктураРасписания.Элементы.Свойство("BackupMonthly") Тогда
											ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
												+ НСтр("ru='Найдена настройка расписания BackupMonthly.'")
													+ Символы.ПС;
											ТекущийЭлементРасписания = СтруктураРасписания.Элементы.BackupMonthly;

											// Может быть два варианта:
											// - есть атрибут time, monthDay;
											// - есть атрибуты time, every, weekDay;
											Если ТекущийЭлементРасписания.Атрибуты.Свойство("time")
													И ТекущийЭлементРасписания.Атрибуты.Свойство("monthDay") Тогда
												ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
													+ НСтр("ru='Найдена настройка расписания BackupMonthly (время, дни месяца).'")
														+ Символы.ПС;
												ТекстВремя = ТекущийЭлементРасписания.Атрибуты.time;
												Время = ПолучитьВремяИзТекста(ТекстВремя, ВложенноеОписаниеРезультата);
												ТекстДниМесяца = ТекущийЭлементРасписания.Атрибуты.monthDay;
												ДниМесяца = ПолучитьДниМесяцаИзТекста(ТекстДниМесяца, ВложенноеОписаниеРезультата);
												Если ТипЗнч(Время) = ТипДата
														И (ДниМесяца.Количество() > 0) Тогда
													// Преобразовать время:
													// В файле настроек оно хранится в GMT, а в базе оно хранится в текущем часовом поясе.
													Время = МестноеВремя(
														Дата(
															Год(ТекущаяДатаСеанса),
															Месяц(ТекущаяДатаСеанса),
															День(ТекущаяДатаСеанса),
															Час(Время),
															Минута(Время),
															Секунда(Время)));
													РасписаниеНайдено = Истина;
													ПолучитьРасписаниеПоУмолчанию = Ложь;
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Ежемесячно_ПоДням");
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Время", Время);
													РасписаниеАвтоматическогоРезервногоКопирования.Вставить("ДниМесяца", ДниМесяца);
												КонецЕсли;
											КонецЕсли;

											Если РасписаниеНайдено = Ложь Тогда
												Если ТекущийЭлементРасписания.Атрибуты.Свойство("time")
														И ТекущийЭлементРасписания.Атрибуты.Свойство("every")
														И ТекущийЭлементРасписания.Атрибуты.Свойство("weekDay") Тогда
													ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
														+ НСтр("ru='Найдена настройка расписания BackupMonthly (время, дни недели).'")
															+ Символы.ПС;
													ТекстВремя = ТекущийЭлементРасписания.Атрибуты.time;
													Время = ПолучитьВремяИзТекста(ТекстВремя, ВложенноеОписаниеРезультата);
													ТекстНомерНедели = ТекущийЭлементРасписания.Атрибуты.every;
													НомерНедели = 0;
													Если ВРег(ТекстНомерНедели) = ВРег("first") Тогда
														НомерНедели = 1;
													ИначеЕсли ВРег(ТекстНомерНедели) = ВРег("second") Тогда
														НомерНедели = 2;
													ИначеЕсли ВРег(ТекстНомерНедели) = ВРег("third") Тогда
														НомерНедели = 3;
													ИначеЕсли ВРег(ТекстНомерНедели) = ВРег("fourth") Тогда
														НомерНедели = 4;
													ИначеЕсли ВРег(ТекстНомерНедели) = ВРег("last") Тогда
														НомерНедели = 5;
													КонецЕсли;
													ТекстДниНедели = ТекущийЭлементРасписания.Атрибуты.weekDay;
													ДниНедели = ПолучитьДниНеделиИзТекста(ТекстДниНедели, ВложенноеОписаниеРезультата);
													Если ТипЗнч(Время) = ТипДата
															И (НомерНедели > 0 И НомерНедели <= 5)
															И (ДниНедели.Количество() > 0) Тогда
														// Преобразовать время:
														// В файле настроек оно хранится в GMT, а в базе оно хранится в текущем часовом поясе.
														Время = МестноеВремя(
															Дата(
																Год(ТекущаяДатаСеанса),
																Месяц(ТекущаяДатаСеанса),
																День(ТекущаяДатаСеанса),
																Час(Время),
																Минута(Время),
																Секунда(Время)));
														РасписаниеНайдено = Истина;
														ПолучитьРасписаниеПоУмолчанию = Ложь;
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Вариант", "Ежемесячно_ПоДнямНедели");
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("Время", Время);
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("НомерНедели", НомерНедели);
														РасписаниеАвтоматическогоРезервногоКопирования.Вставить("ДниНедели", ДниНедели);
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;

										КонецЕсли;
									КонецЕсли;

#КонецОбласти

									Если РасписаниеНайдено = Ложь Тогда
										// До сих пор не найдено - это ошибка.
										ЕстьОшибки = Истина;
									КонецЕсли;

								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// Файл создавать не нужно, т.к. он должен записываться при настройке из окна настроек.
						//  После записи настроек в файл, необходимо вызвать BackupAgent.exe с ключами, чтобы настройки
						//    "применились" агентом резервного копирования.
						ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
							+ НСтр("ru='Файл настроек Агента резервного копирования для ИБ НЕ найден. Будет настроено расписание по-умолчанию.'")
								+ Символы.ПС;
					КонецЕсли;
				Иначе
					// Если файлов настроек нет, то расписание отключено.
				КонецЕсли;
				Если ПолучитьРасписаниеПоУмолчанию = Истина Тогда
					РасписаниеАвтоматическогоРезервногоКопирования = ХранилищаНастроек.НастройкиОблачногоАрхива.ПровестиВалидациюНастроек(
						Неопределено,
						"РасписаниеАвтоматическогоРезервногоКопирования",
						"");
					ВложенноеОписаниеРезультата = ВложенноеОписаниеРезультата
						+ НСтр("ru='Настройки расписания сгенерированы по-умолчанию.'")
							+ Символы.ПС;
				Иначе
					РасписаниеАвтоматическогоРезервногоКопирования.Вставить("РасписаниеВключено", Истина);
				КонецЕсли;

				НастройкиАгентаКопированияКлиент.Вставить("РасписаниеАвтоматическогоРезервногоКопирования", РасписаниеАвтоматическогоРезервногоКопирования);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				?(ЕстьОшибки = Истина, 0, 126),
				ВложенноеОписаниеРезультата,
				Неопределено);

#КонецОбласти

			// Сохранить значения настроек через хранилище настроек.
			ЗаписатьНастройкиОблачногоАрхива(НастройкиАгентаКопированияКлиент, "НастройкиАгентаКопированияКлиент", ИмяКомпьютера());

			Результат = НастройкиАгентаКопированияКлиент;
			КонтекстВыполнения.КодРезультата = КонтекстВыполненияВложенный.КодРезультата;

		Иначе

			ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
				КонтекстВыполненияВложенный,
				124,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Отсутствует каталог настроек установленного Агента резервного копирования (%1). Возможно, он был удален вручную.'"),
					ИнформацияОКлиенте.КаталогУстановкиАгентаКопирования + "\config"),
				Неопределено);

			Результат = НастройкиАгентаКопированияКлиент;
			КонтекстВыполнения.КодРезультата = КонтекстВыполненияВложенный.КодРезультата;

		КонецЕсли;

#КонецОбласти

	Иначе

		Результат = НастройкиАгентаКопированияКлиент;
		КонтекстВыполнения.КодРезультата = 122;

	КонецЕсли;

#Иначе

	Результат = Неопределено;

	КонтекстВыполнения.КодРезультата = 123;

#КонецЕсли

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ОблачныйАрхив.%1'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции);
	КонтекстВыполнения.ОписаниеРезультата = ТекстСообщения;

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КонтекстВыполнения.КодРезультата,
		КонтекстВыполнения.ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Возврат Результат;

КонецФункции

#КонецОбласти

// Возвращает признак, с какими привилегиями запущено приложение 1С.
//
// Возвращаемое значение:
//   Число - 0, если приложение запущено с административными привилегиями;
//           2, если приложение запущено с пользовательскими привилегиями;
//           9996, другая ошибка;
//           9997, код возврата не похож на число;
//           9998, если результат по каким-то причинам не сформирован;
//           9999, если работаем в веб-клиенте;
//           Иначе - другой код ошибки.
//
Функция ЭтоАдминистраторWindows() Экспорт

	Результат = 9999;

	Попытка

		ОбъектОболочка = Новый COMОбъект("WScript.Shell");
		КаталогОС = ОбъектОболочка.ExpandEnvironmentStrings("%WinDir%");
		// Хорошо известные идентификаторы безопасности в операционных системах Windows:
		// - S-1-5-19 = Администратор NT.
		// Платформа может запускаться в разных вариантах:
		// - 32-разрядная платформа на 32-разрядной Windows;
		// - 32-разрядная платформа на 64-разрядной Windows;
		// - 64-разрядная платформа на 64-разрядной Windows.
		// При запуске 32 разрядного приложения в 64 разрядной Windows появляется "виртуальный" каталог Sysnative,
		//  который позволяет принудительно запустить 32 разрядное приложение из каталога System32.
		// Если включен UAC, то надо запускать 1С "от имени администратора", иначе административных прав Windows не будет.
		ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1\Sysnative\reg.exe",
			КаталогОС);
		Файл = Новый Файл(ИмяФайла);
		Если НЕ Файл.Существует() Тогда
			ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1\System32\reg.exe",
				КаталогОС);
		КонецЕсли;
		СтрокаКоманды = ИмяФайла + " query HKU\S-1-5-19";

		ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
		РезультатЗапускаПрограммы = ФайловаяСистема.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
		КодВозврата = РезультатЗапускаПрограммы.КодВозврата;
		Если КодВозврата = 0 Тогда
			Результат = 0;
		ИначеЕсли КодВозврата = 1 Тогда
			Результат = 2;
		Иначе
			Результат = КодВозврата;
		КонецЕсли;

	Исключение
		Результат = 9996;
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция проверяет текущую установленную версию Агента резервного копирования и выдает рекомендации по установке / обновлению.
//
// Параметры:
//  ИнформацияОКлиенте - Структура - см. описание в ХранилищаНастроек.НастройкиОблачногоАрхива.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//    * ТребуетсяУстановка - Булево;
//    * ТребуетсяОбновление - Число - Признак необходимости обновления:
//        ** 0 - не требуется;
//        ** 1 - есть файл обновления;
//        ** 2 - рекомендуется обновление (текущая установленная версия скоро станет неактуальной);
//        ** 3 - необходимо обновление (текущая установленная версия неактуальна).
//    * ВерсияНовейшегоАгентаКопирования - Строка - версия самого актуального агента резервного копирования;
//    * СрокГодностиАгентаКопирования    - Дата;
//    * РазмерДистрибутиваБайт           - Число;
//    * СсылкаНаСкачивание               - Строка;
//    * КонтрольнаяСумма                 - Строка;
//    * ТекстЧтоНовогоВВерсии            - Строка;
//    * ТекстПорядокОбновления           - Строка.
//
Функция ПроверкаАктуальностиУстановленногоАгентаРезервногоКопирования(ИнформацияОКлиенте = Неопределено) Экспорт

	ДатаДляПроверок = ТекущаяУниверсальнаяДата();

	Если ИнформацияОКлиенте = Неопределено Тогда
		ИнформацияОКлиенте = ПолучитьНастройкиОблачногоАрхива(ИнформацияОКлиенте, ИмяКомпьютера());
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяУстановка", Ложь);
	Результат.Вставить("ТребуетсяОбновление", 0);
	Результат.Вставить("ВерсияНовейшегоАгентаКопирования", "0.0.0.0");
	Результат.Вставить("СрокГодностиАгентаКопирования", '00010101');
	Результат.Вставить("РазмерДистрибутиваБайт", 0);
	Результат.Вставить("СсылкаНаСкачивание", "");
	Результат.Вставить("КонтрольнаяСумма", "");
	Результат.Вставить("ТекстЧтоНовогоВВерсии", "");
	Результат.Вставить("ТекстПорядокОбновления", "");

	КлиентАгентКопированияУстановлен            = ИнформацияОКлиенте.АгентКопированияУстановлен;
	КлиентВерсияУстановленногоАгентаКопирования = ИнформацияОКлиенте.ВерсияУстановленногоАгентаКопирования;
	КлиентТипОС                                 = ИнформацияОКлиенте.ТипОС;
	КлиентВерсияОС                              = ИнформацияОКлиенте.ВерсияОС;
	КлиентВерсияПодсистемы                      = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	КлиентДоступныеВерсииАгентовКопирования     = Новый ТаблицаЗначений;

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.ВерсияПодсистемы              КАК ВерсияПодсистемы,
		|	Рег.ВерсияАгентаКопирования       КАК ВерсияАгентаКопирования,
		|	Рег.ТипОС                         КАК ТипОС,
		|	Рег.ВерсияОС                      КАК ВерсияОС,
		|	""              ""                КАК ВерсияАгентаКопированияДляСортировки,
		|	Рег.СрокГодностиАгентаКопирования КАК СрокГодностиАгентаКопирования,
		|	Рег.РазмерДистрибутиваБайт        КАК РазмерДистрибутиваБайт,
		|	Рег.СсылкаНаСкачивание            КАК СсылкаНаСкачивание,
		|	Рег.КонтрольнаяСумма              КАК КонтрольнаяСумма,
		|	Рег.ТекстЧтоНовогоВВерсии         КАК ТекстЧтоНовогоВВерсии,
		|	Рег.ТекстПорядокОбновления        КАК ТекстПорядокОбновления
		|ИЗ
		|	РегистрСведений.ДоступныеВерсииАгентаКопированияОблачногоАрхива КАК Рег
		|ГДЕ
		|	Рег.ВерсияПодсистемы = &ВерсияПодсистемы
		|	И Рег.ТипОС = &ТипОС
		|	И (Рег.ВерсияОС = ""*"" ИЛИ Рег.ВерсияОС = &ВерсияОС)
		|УПОРЯДОЧИТЬ ПО
		|	Рег.ВерсияАгентаКопированияДляСортировки
		|";
	Запрос.УстановитьПараметр("ВерсияПодсистемы", КлиентВерсияПодсистемы);
	Запрос.УстановитьПараметр("ТипОС", КлиентТипОС);
	Запрос.УстановитьПараметр("ВерсияОС", КлиентВерсияОС);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КлиентДоступныеВерсииАгентовКопирования = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Если КлиентДоступныеВерсииАгентовКопирования.Количество() > 0 Тогда

		СтрокаАктуальногоАгента = КлиентДоступныеВерсииАгентовКопирования[КлиентДоступныеВерсииАгентовКопирования.Количество() - 1];
		Результат.Вставить("ВерсияНовейшегоАгентаКопирования", СтрокаАктуальногоАгента.ВерсияАгентаКопирования);
		Результат.Вставить("СрокГодностиАгентаКопирования", СтрокаАктуальногоАгента.СрокГодностиАгентаКопирования);
		Результат.Вставить("РазмерДистрибутиваБайт", СтрокаАктуальногоАгента.РазмерДистрибутиваБайт);
		Результат.Вставить("СсылкаНаСкачивание", СтрокаАктуальногоАгента.СсылкаНаСкачивание);
		Результат.Вставить("КонтрольнаяСумма", СтрокаАктуальногоАгента.КонтрольнаяСумма);
		Результат.Вставить("ТекстЧтоНовогоВВерсии", СтрокаАктуальногоАгента.ТекстЧтоНовогоВВерсии);
		Результат.Вставить("ТекстПорядокОбновления", СтрокаАктуальногоАгента.ТекстПорядокОбновления);

	КонецЕсли;

	Если КлиентАгентКопированияУстановлен = Ложь Тогда
		Результат.Вставить("ТребуетсяУстановка", Истина);
	Иначе

		// Найти установленную версию в списке доступных версий.
		//  - Если она есть и она последняя, то все ОК;
		//  - Если ее нет, то указать, что надо установить новую версию;
		//  - Если она есть и она не последняя в списке, то в зависимости от срока действия:
		//    - Если срок годности установлен и меньше текущей даты, то обновить обязательно;
		//    - Если срок годности установлен и больше текущей даты или не установлен, то обновить желательно.
		КлиентАгентКопированияНайденВРазрешенных    = Ложь;
		КлиентАгентКопированияУстановленСамыйСвежий = Ложь;
		КлиентСрокГодностиТекущегоАгентаКопирования = '00010101';
		Для Каждого ТекущаяСтрока Из КлиентДоступныеВерсииАгентовКопирования Цикл
			Если СокрЛП(ТекущаяСтрока.ВерсияАгентаКопирования) = СокрЛП(КлиентВерсияУстановленногоАгентаКопирования) Тогда
				КлиентАгентКопированияНайденВРазрешенных = Истина;
				КлиентСрокГодностиТекущегоАгентаКопирования = ТекущаяСтрока.СрокГодностиАгентаКопирования;
				Если КлиентДоступныеВерсииАгентовКопирования.Индекс(ТекущаяСтрока) = КлиентДоступныеВерсииАгентовКопирования.Количество() - 1 Тогда
					КлиентАгентКопированияУстановленСамыйСвежий = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если (КлиентАгентКопированияНайденВРазрешенных = Истина)
				И (КлиентАгентКопированияУстановленСамыйСвежий = Истина) Тогда
			Результат.Вставить("ТребуетсяУстановка", Ложь);
			Результат.Вставить("ТребуетсяОбновление", 0);
		ИначеЕсли (КлиентАгентКопированияНайденВРазрешенных = Истина)
				И (КлиентАгентКопированияУстановленСамыйСвежий <> Истина) Тогда
			Если ((КлиентСрокГодностиТекущегоАгентаКопирования > '00010101')
					И (КлиентСрокГодностиТекущегоАгентаКопирования <= ДатаДляПроверок)) Тогда // Уже просрочен - НЕОБХОДИМО переустановить.
				Результат.Вставить("ТребуетсяУстановка", Ложь);
				Результат.Вставить("ТребуетсяОбновление", 3);
			ИначеЕсли ((КлиентСрокГодностиТекущегоАгентаКопирования > ДатаДляПроверок)
					И (КлиентСрокГодностиТекущегоАгентаКопирования <= (ДатаДляПроверок + 7*24*60*60))) Тогда // Просрочится через неделю - ЖЕЛАТЕЛЬНО переустановить.
				Результат.Вставить("ТребуетсяУстановка", Ложь);
				Результат.Вставить("ТребуетсяОбновление", 2);
			Иначе
				Результат.Вставить("ТребуетсяУстановка", Ложь);
				Результат.Вставить("ТребуетсяОбновление", 1);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Процедура подготавливается параметры для отправки сообщения в техническую поддержку.
//
Процедура ПодготовитьНастройкиОблачногоАрхива(Результат) Экспорт
	
	ТипСтруктура = Тип("Структура");
	Если ТипЗнч(Результат) = ТипСтруктура Тогда
		Если Результат.Свойство("ПараметрыАвторизацииИПП") = Истина Тогда
			ПараметрыАвторизацииИПП = Результат.ПараметрыАвторизацииИПП;
			ПараметрыАвторизацииИПП.Удалить("Пароль");
			Результат.Вставить("ПараметрыАвторизацииИПП", ПараметрыАвторизацииИПП);
		ИначеЕсли Результат.Свойство("Пароль") = Истина Тогда
			Результат.Удалить("Пароль");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Расписание

// Функция рассчитывает расписание создания резервных копий по данным регистра сведений "НастройкиОблачногоАрхиваНаЛокальномКомпьютере"
//  и заполняет список значений, который будет потом сохранен в глобальной переменной
//  ПараметрыПриложения["ИнтернетПоддержкаПользователей.ОблачныйАрхив.РасписаниеСозданияРезервныхКопий"].
//
// Параметры:
//  ВремяНачала - Дата - дата, от которой плюс 24 часа надо увидеть расписания создания резервных копий.
//
// Возвращаемое значение:
//   СписокЗначений - Список значений с параметрами:
//    * Представление - Строка - ИмяКомпьютера, где должно сработать расписание;
//    * Значение      - Дата - дата выполнения расписания.
//
Функция ПолучитьРасписаниеСозданияРезервныхКопий(ВремяНачала) Экспорт

	Результат = Новый СписокЗначений;

	ТипСтруктура = Тип("Структура");

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегРасписания.ИмяКомпьютера КАК ИмяКомпьютера,
		|	РегРасписания.Расписание    КАК Расписание
		|ИЗ
		|	РегистрСведений.НастройкиОблачногоАрхиваНаЛокальномКомпьютере КАК РегРасписания
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СвойстваЛокальныхКомпьютеровДляОблачногоАрхива КАК РегАгенты
		|		ПО РегРасписания.ИмяКомпьютера = РегАгенты.ИмяКомпьютера
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.АктивированныеАгентыРезервногоКопирования КАК РегАктивации
		|		ПО РегАгенты.MachineGuid = РегАктивации.MachineGuid
		|ГДЕ
		|	РегАгенты.ПрисутствуютФайлыСертификатов
		|	И РегАгенты.АгентКопированияУстановлен
		|	И РегАктивации.АгентКопированияАктивированНаТекущийЛогин
		|	И РегАктивации.СрокОкончанияПодписки >= &ВремяНачала
		|";
	Запрос.УстановитьПараметр("ВремяНачала", ВремяНачала);

	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Расписание = Выборка.Расписание.Получить();
			Если ТипЗнч(Расписание) = ТипСтруктура Тогда
				Расписание = ХранилищаНастроек.НастройкиОблачногоАрхива.ПровестиВалидациюНастроек(Расписание, "РасписаниеАвтоматическогоРезервногоКопирования", "");
				Если Расписание.РасписаниеВключено Тогда
					Если Расписание.Вариант = "Ежедневно_ОдинРазВДень" Тогда
						ТекущееРасписание = Расписание.Ежедневно_ОдинРазВДень;
						// Взять сегодня и завтра.
						ВремяСегодня = Дата(
							Год(ВремяНачала),
							Месяц(ВремяНачала),
							День(ВремяНачала),
							Час(ТекущееРасписание.Время),
							Минута(ТекущееРасписание.Время),
							Секунда(ТекущееРасписание.Время));
						ВремяЗавтра = ВремяСегодня + 1*24*60*60;
						Если ВремяНачала > ВремяСегодня Тогда
							Результат.Добавить(ВремяЗавтра, Выборка.ИмяКомпьютера);
						Иначе
							Результат.Добавить(ВремяСегодня, Выборка.ИмяКомпьютера);
						КонецЕсли;
					ИначеЕсли Расписание.Вариант = "Ежедневно_НесколькоРазВДень" Тогда
						ТекущееРасписание = Расписание.Ежедневно_НесколькоРазВДень;
						// Взять сегодня и завтра.
						Для СДень = 0 По 1 Цикл
							ВремяОТ = Дата(
								Год(ВремяНачала),
								Месяц(ВремяНачала),
								День(ВремяНачала),
								Час(ТекущееРасписание.ВремяНачала),
								Минута(ТекущееРасписание.ВремяНачала),
								Секунда(ТекущееРасписание.ВремяНачала)) + СДень*24*60*60;
							ВремяДО = Дата(
								Год(ВремяНачала),
								Месяц(ВремяНачала),
								День(ВремяНачала),
								Час(ТекущееРасписание.ВремяОкончания),
								Минута(ТекущееРасписание.ВремяОкончания),
								Секунда(ТекущееРасписание.ВремяОкончания)) + СДень*24*60*60;
							СВремя = ВремяОТ;
							Пока СВремя <= ВремяДО Цикл
								Если СВремя >= ВремяНачала Тогда
									Результат.Добавить(СВремя, Выборка.ИмяКомпьютера);
								КонецЕсли;
								СВремя = СВремя + Расписание.Ежедневно_НесколькоРазВДень.КоличествоЧасовПовтора*60*60;
							КонецЦикла;
						КонецЦикла;
					ИначеЕсли Расписание.Вариант = "Еженедельно" Тогда
						ТекущееРасписание = Расписание.Еженедельно;
						// Взять сегодня и завтра.
						Для СДень = 0 По 1 Цикл
							Если ТекущееРасписание.ДниНедели.Найти(ДеньНедели(ВремяНачала + СДень*24*60*60)) <> Неопределено Тогда
								Время = Дата(
									Год(ВремяНачала),
									Месяц(ВремяНачала),
									День(ВремяНачала),
									Час(ТекущееРасписание.Время),
									Минута(ТекущееРасписание.Время),
									Секунда(ТекущееРасписание.Время)) + СДень*24*60*60;
								Если ВремяНачала <= Время Тогда
									Результат.Добавить(Время, Выборка.ИмяКомпьютера);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Расписание.Вариант = "Ежемесячно_ПоДням" Тогда
						ТекущееРасписание = Расписание.Ежемесячно_ПоДням;
						// Взять сегодня и завтра.
						Для СДень = 0 По 1 Цикл
							Если (ТекущееРасписание.ДниМесяца.Найти(День(ВремяНачала + СДень*24*60*60)) <> Неопределено)
								ИЛИ ( // Это последний день месяца?
									КонецДня(ВремяНачала + СДень*24*60*60) = КонецМесяца(ВремяНачала + СДень*24*60*60)
									И ТекущееРасписание.ДниМесяца.Найти(32) <> Неопределено) Тогда
								Время = Дата(
									Год(ВремяНачала),
									Месяц(ВремяНачала),
									День(ВремяНачала),
									Час(ТекущееРасписание.Время),
									Минута(ТекущееРасписание.Время),
									Секунда(ТекущееРасписание.Время)) + СДень*24*60*60;
								Если ВремяНачала <= Время Тогда
									Результат.Добавить(Время, Выборка.ИмяКомпьютера);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Расписание.Вариант = "Ежемесячно_ПоДнямНедели" Тогда
						// ////! Реализовать.
						// Это расписание рассчитывается не по номерам недели
						//  и для него всегда выводятся напоминания на сегодня и завтра.
						ТекущееРасписание = Расписание.Ежемесячно_ПоДнямНедели;
						// Взять сегодня и завтра.
						ВремяСегодня = Дата(
							Год(ВремяНачала),
							Месяц(ВремяНачала),
							День(ВремяНачала),
							Час(ТекущееРасписание.Время),
							Минута(ТекущееРасписание.Время),
							Секунда(ТекущееРасписание.Время));
						ВремяЗавтра = ВремяСегодня + 1*24*60*60;
						Если ВремяНачала > ВремяСегодня Тогда
							Результат.Добавить(ВремяЗавтра, Выборка.ИмяКомпьютера);
						Иначе
							Результат.Добавить(ВремяСегодня, Выборка.ИмяКомпьютера);
						КонецЕсли;
					КонецЕсли;
					// Удалить напоминания, которые < 1 час и > 24 часов от ВремяНачала.
					БылиУдаления = Истина;
					Пока БылиУдаления Цикл
						БылиУдаления = Ложь;
						Для Каждого ТекущееНапоминание Из Результат Цикл
							Если (ТекущееНапоминание.Значение + 1*60*60 < ВремяНачала)
									ИЛИ (ТекущееНапоминание.Значение - 24*60*60 > ВремяНачала) Тогда
								Результат.Удалить(ТекущееНапоминание);
								БылиУдаления = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Результат.СортироватьПоЗначению(НаправлениеСортировки.Возр);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
