
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Формирует представление дроби.
//
// Параметры:
//  Числитель    - Число - числитель дроби.
//  Знаменатель  - Число - знаменатель дроби.
//
// Возвращаемое значение:
//  Строка - представление дроби.
//
Функция ПолучитьПредставлениеДроби(Числитель, Знаменатель) Экспорт
	
	Представление = "";
	Если Числитель = 0 Тогда
		Представление = "0";
		
	ИначеЕсли Знаменатель = 1 Тогда
		Представление = "" + Числитель;
		
	Иначе
		Представление = "" + Числитель + "/" + Знаменатель
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Функция определяет количество дней в месяце.
//
// Параметры
//  ДатаМесяца  - Дата - дата месяца, для которого необходимо определить количество дней.
//
// Возвращаемое значение:
//   Число   - количество дней в месяце.
//
Функция ВсегоДнейВМесяце(ДатаМесяца) Экспорт

	Возврат День(КонецМесяца(ДатаМесяца));

КонецФункции //ВсегоДнейВМесяце()

// Функция округляет переданное значение с точностью, указанной во втором передаваемом параметре.
// Если параметр "Точность" не указан, то значение округляется с точностью, указанной в константе УПЖКХ_ТочностьОбъемаНачислений.
//
// Параметры:
//  Значение - округляемое значение
//  Точность - необходимая точность при округлении.
//
Функция ОкруглитьОбъемНачисления(ЗначенияДляОкругления, Точность = Неопределено) Экспорт
	
	Если Точность = Неопределено Тогда
		Результат = Окр(ЗначенияДляОкругления, УПЖКХ_ОбщегоНазначенияСервер.ПолучитьТочностьОбъемовНачислений());
	Иначе
		Результат = Окр(ЗначенияДляОкругления, Точность);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает значения реквизита объекта.
Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита);
	
КонецФункции

// Определяет, используется ли измененный макет или типовой.
//
Функция ОпределитьИспользованиеПользовательскогоМакетаПечати(НаименованиеОбъекта, НаименованиеМакета) Экспорт
	
	Возврат УПЖКХ_ОбщегоНазначенияСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати(НаименованиеОбъекта, НаименованиеМакета);
	
КонецФункции

// Подготавливает текст об ошибке с технической информацией для вывода пользователю.
//
Функция ПодготовитьТекстОбОшибкеДляПользователя(СтрокаОшибкиДляПользователя, СтрокаОшибкиДляРазработчика) Экспорт
	
	Возврат СтрокаОшибкиДляПользователя + "<div>
										 |
										 |Техническая информация для разработчиков:
										 |" + СтрокаОшибкиДляРазработчика;
	
КонецФункции

// Подготавливает текст сообщения об ошибке.
//
Функция ПолучитьОписаниеОшибки(ОписаниеОшибки, СтрокаОшибкиЗаданная = "") Экспорт
	
	// Входящая строка описания ошибки может иметь вид: "<error>Текст1<div>Текст2<ref>ссылка...", где:
	//   <error> - указывает, что текст ошибки нужно показывать пользователю.
	//   <div> - разделитель между блоками текста. Для каждого блока будет формироваться
	//           своя форматированная строка. Это нужно для добавления гиперссылок в
	//           произвольном участке текста ошибки.
	//   <ref> - указывает, что для блока слева от метки нужно установить гиперссылку,
	//           ссылающуюся на блок справа от метки. Например: "моя ссылка<ref>http://моя страница".
	
	ФорматированнаяСтрокаОбОшибке = Новый ФорматированнаяСтрока("");
	
	ПозицияНачалаПереданногоОписания = Найти(ОписаниеОшибки, "<error>");
	
	Если ПозицияНачалаПереданногоОписания = 0 Тогда
		
		СтрокаСообщения = СтрокаОшибкиЗаданная;
		
		Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
			
			СтрокаСообщения = СтрокаСообщения + "<div>
												|
												|Техническая информация для разработчиков:
												|" + ОписаниеОшибки;
			
		КонецЕсли;
	Иначе
		
		// Получаем текст ошибки без метки <error>:
		СтрокаСообщения = Прав(ОписаниеОшибки, СтрДлина(ОписаниеОшибки) - ПозицияНачалаПереданногоОписания - 6);
		
	КонецЕсли;
		
		// Разделяем текст на блоки, разделенные меткой <div>:
		МассивПодстрокИзначальный = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСообщения, "<div>");
		
		// Для каждой подстроки определяем, имеется ли для нее гиперссылка, и собираем форматированную строку:
		Для каждого ТекИзначальнаПодстрока из МассивПодстрокИзначальный Цикл
			
			Если НЕ СтрНайти(ТекИзначальнаПодстрока, "<ref>") = 0 Тогда
				
				МассивПодстрокСсылки          = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекИзначальнаПодстрока, "<ref>", Ложь);
				ФорматированнаяСтрокаОбОшибке = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаОбОшибке, Новый ФорматированнаяСтрока(МассивПодстрокСсылки[0],,,, МассивПодстрокСсылки[1]));
				
			Иначе
				
				ФорматированнаяСтрокаОбОшибке = Новый ФорматированнаяСтрока(ФорматированнаяСтрокаОбОшибке, Новый ФорматированнаяСтрока(ТекИзначальнаПодстрока));
				
			КонецЕсли;
			
		КонецЦикла;
		
	Возврат ФорматированнаяСтрокаОбОшибке;
	
КонецФункции

//Квартплата+
//////////////////////////////
//ПРОЦЕДУРЫ И ФУНКЦИ ИНТЕГРИРОВАННЫЕ ИЗ УПРАВЛЕНИЯ ТОРГОВЛЕЙ

// Устанавливает значение свойства элемента формы, если находит элемент на форме
//
// Параметры
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = НРег("ТолькоПросмотр")
	И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

// Вычисляет значение идентификатора из строки соответствии с правилами именования идентификаторов.
//
// Возвращаемое значение:
// Строка
// Идентификатор, соответствующий правилам именования идентификаторов.
//
Функция ПолучитьИдентификатор(СтрНаименование) Экспорт
	
	Разделители	=  " .,+,-,/,*,?,=,<,>,(,)%!@#$%&*""№:;{}[]?()\|/`~'^_";
	
	Идентификатор = "";
	БылСпецСимвол = Ложь;
	
	Для НомСимвола = 1 По СтрДлина(СтрНаименование) Цикл
		
		Символ = Сред(СтрНаименование, НомСимвола, 1);
		
		Если СтрНайти(Разделители, Символ) <> 0 Тогда
			БылСпецСимвол = Истина;
		ИначеЕсли БылСпецСимвол Тогда
			БылСпецСимвол = Ложь;
			Идентификатор = Идентификатор + ВРег(Символ);
		Иначе
			Идентификатор = Идентификатор + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции // ПолучитьИдентификатор()

// Заполняет ключи структуры на основании другой структуры.
//
// Параметры:
//  Приемник - Структура	 - Структура, в которую добавляем ключи.
//  Источник - Структура	 - Структура, из которой добавляем ключи.
//  Очищать	 - Булево		 - Определяет, очищать или нет ключи Приемника.
//
Процедура ЗаполнитьКлючиСтруктурыНаОснованииДругойСтруктуры(Приемник, Источник, Очищать = Ложь) Экспорт
	
	Если Очищать Тогда
		Приемник.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из Источник Цикл
		Если Приемник.Свойство(ЭлементСтруктуры.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Приемник.Вставить(ЭлементСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Создает копию структуры на основании другой структуры.
//
// Параметры:
//  Источник - Структура	 - Структура, которую копируем.
//  СвойстваСтруктурыДляКопированияПоЗначению - Строка - ключи структуры, значения которых необходимо
//														 копировать по значению.
// 
// Возвращаемое значение:
//  Структура.
//
Функция СкопироватьСтруктуруЗаполнениемЗначений(Источник, СвойстваСтруктурыДляКопированияПоЗначению = "") Экспорт
	
	ВозвращаемаяСтруктура = Новый Структура(ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Источник));
	
	ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, Источник);
	
	Если НЕ ПустаяСтрока(СвойстваСтруктурыДляКопированияПоЗначению) Тогда
		
		СтруктураДляКопированияПоЗначению = Новый Структура(СвойстваСтруктурыДляКопированияПоЗначению);
		
		Для Каждого ЭлементСтруктуры Из СтруктураДляКопированияПоЗначению Цикл
			Если Источник.Свойство(ЭлементСтруктуры.Ключ) И НЕ Источник[ЭлементСтруктуры.Ключ] = Неопределено Тогда
				СтруктураДляКопированияПоЗначению[ЭлементСтруктуры.Ключ] = СкопироватьРекурсивно(Источник[ЭлементСтруктуры.Ключ]);
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ВозвращаемаяСтруктура, СтруктураДляКопированияПоЗначению);
		
	КонецЕсли;
	
	Возврат ВозвращаемаяСтруктура;
	
КонецФункции

// Создает полную копию структуры, соответствия, массива, списка или таблицы значений, рекурсивно, 
// с учетом типов дочерних элементов. При этом содержимое значений объектных типов 
// (СправочникОбъект, ДокументОбъект и т.п.) не копируются, а возвращаются ссылки на исходный объект.
// Аналог функции ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно().
//
// Параметры:
//  Источник - Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - объект, который необходимо 
//             скопировать.
//
// Возвращаемое значение:
//  Структура, Соответствие, Массив, СписокЗначений, ТаблицаЗначений - копия объекта, переданного в параметре Источник.
//
Функция СкопироватьРекурсивно(Источник) Экспорт
	
	Приемник = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Источник);
	
	Возврат Приемник;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИНТЕРНЕТ АДРЕСАМИ

#Область ПроцедурыИФункцииРаботыСИнтернетАдресами

// Функция возвращает интерент-адрес списка нормативных актов ЖКХ.
Функция ПолучитьИнтернетАдресСпискаНормативныхАктовЖКХ(ПоказыватьОбратнуюСвязь = Истина) Экспорт
	
	ИнтернетАдрес = УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресСпискаНормативныхАктовЖКХ();
	
	ДополнитьИнтернетАдресРазработчикаПараметромОтображенияОбратнойСвязи(ИнтернетАдрес, ПоказыватьОбратнуюСвязь);
	
	Возврат ИнтернетАдрес;
	
КонецФункции

// Функция дополняет интернет адрес параметром отображения обратной связи.
Процедура ДополнитьИнтернетАдресРазработчикаПараметромОтображенияОбратнойСвязи(ИнтернетАдрес, ПоказыватьОбратнуюСвязь = Истина) Экспорт
	
	Если Не ПоказыватьОбратнуюСвязь Тогда
		
		ИмяПараметраОтображенияОбратнойСвязи = "show_support";
		Если СтрНайти(ИнтернетАдрес, ИмяПараметраОтображенияОбратнойСвязи + "=") = 0 Тогда
			ИнтернетАдрес = ИнтернетАдрес
						  + ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес) // разделитель
						  + ИмяПараметраОтображенияОбратнойСвязи + "=false"; // параметр
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура дополняет адрес интернет ресурса служебными параметрами.
Процедура ДополнитьИнтернетАдресРазработчикаСлужебнымиПараметрами(ИнтернетАдрес) Экспорт
	
	// Параметры добавляются только к сайту разработчика.
	Если СтрНайти(ИнтернетАдрес, СтрЗаменить(УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресСтраницыСтарогоСайтаКомпании(), "https://", "")) > 0 Тогда
		
		// Добавим параметр легкой версии сайта.
		Если СтрНайти(ИнтернетАдрес, "lite=") = 0 Тогда
			ИнтернетАдрес = ИнтернетАдрес
						  + ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес) // разделитель
						  + "lite=Y"; // параметр
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьИнтернетАдресПараметрами()

// Процедура дополняет адрес интернет ресурса служебным параметром.
Процедура ДополнитьИнтернетАдресСлужебнымПараметром(ИнтернетАдрес, СлужебныйПараметр) Экспорт
	
	// Добавим параметр к интернет адресу.
	ИнтернетАдрес = ИнтернетАдрес
				  + ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес) // разделитель
				  + СлужебныйПараметр; // параметр
	
КонецПроцедуры // ДополнитьИнтернетАдресСлужебнымПараметром()

// Функция возвращает символ-разделитель следующего параметра интернет-адреса.
//   Возвращаемое значение:
//     "?" - если параметров в адресной строке еще нет;
//     "&" - если параметры в адресной строке уже есть.
//
Функция ПолучитьРазделительСледующегоПараметраИнтернетАдреса(ИнтернетАдрес)
	
	РазделительПараметра = "?";
	
	ПараметрыАдресаОпределен = (СтрНайти(ИнтернетАдрес, "?") > 0);
	Если ПараметрыАдресаОпределен Тогда
		РазделительПараметра = "&";
	КонецЕсли;
	
	Возврат РазделительПараметра;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОПОЛНЕНИЯ УПРАВЛЯЕМЫХ ФОРМ СВЯЗАННЫМИ ОБЪЕКТАМИ

#Область ПроцедурыИФункцииДополненияУправляемыхФормСвязаннымиОбъектами

#Если Сервер Тогда

// Процедура заполняет подменю связанных объектов для объекта.
//
// Параметры:
//  Форма - управляемая форма, на которую добавляются кнопки перехода к связанным объектам;
//  ИмяПодменю - Имя элемента управления формы типа "ГруппаКнопок", в который будут добавляться кнопки.
//
Процедура ЗаполнитьСвязанныеОбъектыНаУправляемойФорме(Форма, ИмяПодменю = Неопределено) Экспорт
	
	Если ИмяПодменю = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюКнопок = Форма.Элементы.Найти(ИмяПодменю);
	
	Если Не ТипЗнч(ПодменюКнопок) = Тип("ГруппаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Неопределено;
	
	Попытка
		СсылкаНаОбъект = Форма.Объект.Ссылка;
	Исключение
		
		Попытка
		
			ИмяФормы = Форма.ИмяФормы;
			ПозицияПодстроки = Найти(ИмяФормы, ".Форма.");
			
			Если ПозицияПодстроки > 0 Тогда
				
				ИмяТипа = Лев(ИмяФормы, ПозицияПодстроки - 1);
				ПозицияТочки = Найти(ИмяТипа, ".");
				
				Если ПозицияТочки > 0 Тогда
					ИмяТипа = Лев(ИмяТипа, ПозицияТочки - 1) + "Ссылка" + Прав(ИмяТипа, СтрДлина(ИмяТипа) - ПозицияТочки + 1);
					Описание = Новый ОписаниеТипов(ИмяТипа);
					СсылкаНаОбъект = Описание.ПривестиЗначение(Неопределено);
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			Возврат;
		КонецПопытки;
		
	КонецПопытки;
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяМетаданныхОбъекта = СсылкаНаОбъект.Метаданные().Имя;
	ТипЗначенияСсылки = ТипЗнч(СсылкаНаОбъект);
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ИмяФормы");
	ТаблицаОбъектов.Колонки.Добавить("ИмяПоляДляОтбора");
	ТаблицаОбъектов.Колонки.Добавить("ПредставлениеИмениПоля");
	ТаблицаОбъектов.Колонки.Добавить("ПредставлениеКнопки");
	
	Для Каждого ТекМетаданныеРегистра Из Метаданные.Справочники Цикл
		
		Если Найти(ТекМетаданныеРегистра.Имя, "КВП") > 0 Или Найти(ТекМетаданныеРегистра.Имя, "УПЖКХ") > 0 Тогда
			Для Каждого ТекВладелец Из ТекМетаданныеРегистра.Владельцы Цикл
				Если ТекВладелец.Имя = ИмяМетаданныхОбъекта Тогда
					НоваяСтрока = ТаблицаОбъектов.Добавить();
					НоваяСтрока.ИмяФормы               = "Справочник." + ТекМетаданныеРегистра.Имя + ".ФормаСписка";
					НоваяСтрока.ИмяПоляДляОтбора       = "Владелец";
					НоваяСтрока.ПредставлениеИмениПоля = "Владелец";
					НоваяСтрока.ПредставлениеКнопки    = ТекМетаданныеРегистра.Синоним;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекМетаданныеРегистра Из Метаданные.РегистрыСведений Цикл
		
		Если Найти(ТекМетаданныеРегистра.Имя, "КВП") > 0 Или Найти(ТекМетаданныеРегистра.Имя, "УПЖКХ") > 0 Тогда
			Для Каждого ТекИзмерение Из ТекМетаданныеРегистра.Измерения Цикл
				Если ТекИзмерение.Тип.СодержитТип(ТипЗначенияСсылки) Тогда
					НоваяСтрока = ТаблицаОбъектов.Добавить();
					НоваяСтрока.ИмяФормы               = "РегистрСведений." + ТекМетаданныеРегистра.Имя + ".ФормаСписка";
					НоваяСтрока.ИмяПоляДляОтбора       = ТекИзмерение.Имя;
					НоваяСтрока.ПредставлениеИмениПоля = ТекИзмерение.Синоним;
					НоваяСтрока.ПредставлениеКнопки    = ТекМетаданныеРегистра.Синоним;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОбъектов.Сортировать("ИмяФормы");
	ПредИмяФормы = Неопределено;
	
	Для Каждого ТекСтрокаОбъекта Из ТаблицаОбъектов Цикл
		Если ПредИмяФормы = Неопределено Тогда
			ПредИмяФормы = ТекСтрокаОбъекта.ИмяФормы;
			Продолжить;
		КонецЕсли;
		Если ПредИмяФормы = ТекСтрокаОбъекта.ИмяФормы Тогда
			ПредСтрока = ТаблицаОбъектов[ТаблицаОбъектов.Индекс(ТекСтрокаОбъекта) - 1];
			ПредСтрока.ПредставлениеКнопки = ПредСтрока.ПредставлениеКнопки + " (" + ПредСтрока.ПредставлениеИмениПоля + ")";
			ТекСтрокаОбъекта.ПредставлениеКнопки = ТекСтрокаОбъекта.ПредставлениеКнопки + " (" + ТекСтрокаОбъекта.ПредставлениеИмениПоля + ")";
		КонецЕсли;
		ПредИмяФормы = ТекСтрокаОбъекта.ИмяФормы;
	КонецЦикла;
	
	Для Каждого ТекОбъект Из ТаблицаОбъектов Цикл
		
		Если Найти(НРег(ТекОбъект.ПредставлениеКнопки), "не используется") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИмяФормы = СтрЗаменить(ТекОбъект.ИмяФормы, ".", "__");
		
		ИмяКоманды = "_КомандаОткрытияСвязанногоОбъекта__" + СтрокаИмяФормы + "000" + ТекОбъект.ИмяПоляДляОтбора;
		
		НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "_ДействиеОткрытияСвязанногоОбъекта";
		
		НоваяКнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ПодменюКнопок);
		НоваяКнопка.Заголовок = ТекОбъект.ПредставлениеКнопки;
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает размеры ставок НДС номенклатуры, по которым необходимо выполнять отражение
// начислений в регламентированном учете.
//
// Параметры:
//  СписокНоменклатуры - список значений - список номенклатуры, для которых происходит
//                                         поиск соответствия размеров ставок НДС.
//  Период - дата, на которую нужно получить размеры ставок.
//
Функция ПолучитьРазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете(СписокНоменклатуры, Период = Неопределено) Экспорт
	
	СоответствиеРазмеровСтавокНДС = Новый Соответствие;
	
	Если Период = Неопределено Тогда
		Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_РазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчетеСрезПоследних.Номенклатура,
	|	УПЖКХ_РазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчетеСрезПоследних.СтавкиНДС
	|ИЗ
	|	РегистрСведений.УПЖКХ_РазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчете.СрезПоследних(&ДатаОтбора, Номенклатура В (&СписокНоменклатуры)) КАК УПЖКХ_РазмерыСтавокНДСДляОтраженияНачисленийВРегламентированномУчетеСрезПоследних";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ДатаОтбора",         Период);
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		СоответствиеРазмеровСтавокНДС.Вставить(ВыборкаРезультата.Номенклатура, ВыборкаРезультата.СтавкиНДС.Получить());
	КонецЦикла;
	
	Возврат СоответствиеРазмеровСтавокНДС;
	
КонецФункции

#КонецЕсли

#Если Клиент Тогда

// Процедура открывает форму связанного объекта.
Процедура ОткрытьФормуСвязанногоОбъекта(Объект, Команда) Экспорт
	
	ИмяКоманды = Команда.Имя;
	ПозицияРазделителя = Найти(ИмяКоманды, "__");
	
	Если ПозицияРазделителя > 0 Тогда
		
		СтрокаИмениФормыИПоляОтбора = Прав(ИмяКоманды, СтрДлина(ИмяКоманды) - ПозицияРазделителя - 1);
		СтрокаИмениФормыИПоляОтбора = СтрЗаменить(СтрокаИмениФормыИПоляОтбора, "__", ".");
		
		ПодстрокаРазделения = "000";
		ПозицияИмениПоля = Найти(СтрокаИмениФормыИПоляОтбора, ПодстрокаРазделения);
		Если ПозицияИмениПоля > 0 Тогда
			СтрокаИмениФормы = Лев(СтрокаИмениФормыИПоляОтбора, ПозицияИмениПоля - 1);
			СтрокаИмениПоля = Прав(СтрокаИмениФормыИПоляОтбора, СтрДлина(СтрокаИмениФормыИПоляОтбора) - ПозицияИмениПоля - СтрДлина(ПодстрокаРазделения) + 1);
		КонецЕсли;
		
		
		Попытка
			ФормаОткрытия = ПолучитьФорму(СтрокаИмениФормы);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить форму объекта!");
			Возврат;
		КонецПопытки;
		
		Попытка
			ФормаОткрытия.Отбор[СтрокаИмениПоля].Значение = Объект.Ссылка;
			ФормаОткрытия.Отбор[СтрокаИмениПоля].ВидСравнения = ВидСравнения.Равно;
			ФормаОткрытия.Отбор[СтрокаИмениПоля].Использование = Истина;
		Исключение
			Попытка
				ОтборСписка = ФормаОткрытия.Список.Отбор;
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСписка, СтрокаИмениПоля, Объект.Ссылка,
										 ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
			Исключение
			КонецПопытки;
		КонецПопытки;
		
		ФормаОткрытия.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

#КонецОбласти


