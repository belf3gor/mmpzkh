
////////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ РАСПРЕДЕЛЕНИЯ ПОКАЗАНИЙ ПРИБОРОВ УЧЕТА

#Область СлужебныеПроцедурыИФункции

// Функция получает значение настройки способа распределения показаний
// коллективных счетчиков на помещения / лицевые счета.
//
Функция ПолучитьСпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета() Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	// Заполним значения по умолчанию
	СтруктураРезультат.Вставить("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета",        Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноЗарегистрированным);
	СтруктураРезультат.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	// Получим значения настроек
	СтруктураПараметров = Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Получить().Получить();
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета        = Неопределено;
		ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Неопределено;
		
		СтруктураПараметров.Свойство("СпособРаспределенияПоказанийПомещениеЛС",                            СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
		СтруктураПараметров.Свойство("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
		
		Если ЗначениеЗаполнено(СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета) Тогда
			СтруктураРезультат.Вставить("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета) Тогда
			СтруктураРезультат.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета" ,ВидПлощадиДляРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Функция получает структуру настроек способа распределения показаний
// коллективных счетчиков на подъезды / здания.
//
Функция ПолучитьСпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды() Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	// Заполним значения по умолчанию
	СтруктураРезультат.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",                          Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну);
	СтруктураРезультат.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
	
	// Получим значения настроек
	СтруктураПараметров = Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Получить().Получить();
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Неопределено;
		ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Неопределено;
		
		СтруктураПараметров.Свойство("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		СтруктураПараметров.Свойство("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		
		Если ЗначениеЗаполнено(СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды) Тогда
			СтруктураРезультат.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды", СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды) Тогда
			СтруктураРезультат.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды" ,ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УЧЕТА ПО УСЛУГАМ КАПИТАЛЬНОГО РЕМОНТА

// Функция предназначена для заполнения настроек ведения раздельного учета по услугам капремонта в организации.
//
// Параметры:
//  Организация     - текущая организация;
//  ЗаполнитьСписок - признак заполнения списка услуга по капремонту.
//
// Возвращаемое значение:
//  Структура - содержит перечень параметров ведения раздельного учета по услугам капремонта в текущей организации.
//
Функция ПолучитьНастройкиУчетаУслугКапремонта(Организация, ЗаполнитьСписок = Ложь) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкиУчетаКапремонтаСсылка",     Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПустаяСсылка());
	СтруктураНастроек.Вставить("НастройкиОпределены",                Ложь);
	СтруктураНастроек.Вставить("ВедетсяРаздельныйУчет",              Ложь);
	СтруктураНастроек.Вставить("ЗапретитьВзаимозачетАвансовИДолгов", Ложь);
	СтруктураНастроек.Вставить("НастройкаРасчетаПени",               Справочники.УПЖКХ_НастройкиРасчетаПени.ПустаяСсылка());
	СтруктураНастроек.Вставить("СписокУслуг",                        Новый СписокЗначений);
	СтруктураНастроек.Вставить("СписокНоменклатурыУслуг",            Новый СписокЗначений);
	//++Позолотина
	СтруктураНастроек.Вставить("СписокНоменклатур",                        Новый СписокЗначений);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиУчетаКапремонта.Ссылка КАК НастройкиУчетаКапремонтаСсылка,
	|	УПЖКХ_НастройкиУчетаКапремонта.ВестиРаздельныйУчетПоУслугамКапремонта КАК ВестиРаздельныйУчетПоУслугамКапремонта,
	|	УПЖКХ_НастройкиУчетаКапремонта.ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами КАК ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами,
	|	УПЖКХ_НастройкиУчетаКапремонта.НастройкаРасчетаПени КАК НастройкаРасчетаПени
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта КАК УПЖКХ_НастройкиУчетаКапремонта
	|ГДЕ
	|	УПЖКХ_НастройкиУчетаКапремонта.Владелец = &Организация
	|	И НЕ УПЖКХ_НастройкиУчетаКапремонта.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НастройкиУчетаКапремонтаУслуги.Услуга КАК Услуга
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта.Услуги КАК УПЖКХ_НастройкиУчетаКапремонтаУслуги
	|ГДЕ
	|	УПЖКХ_НастройкиУчетаКапремонтаУслуги.Ссылка.Владелец = &Организация
	|	И НЕ УПЖКХ_НастройкиУчетаКапремонтаУслуги.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_НастройкиУчетаКапремонтаУслуги.Услуга.Услуга КАК Номенклатура
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта.Услуги КАК УПЖКХ_НастройкиУчетаКапремонтаУслуги
	|ГДЕ
	|	УПЖКХ_НастройкиУчетаКапремонтаУслуги.Ссылка.Владелец = &Организация
	|	И НЕ УПЖКХ_НастройкиУчетаКапремонтаУслуги.Ссылка.ПометкаУдаления
	|	И НЕ УПЖКХ_НастройкиУчетаКапремонтаУслуги.Услуга.Услуга = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоОрганизации = МассивРезультатов[0].Выбрать();
	
	Если ВыборкаПоОрганизации.Следующий() Тогда
		
		СтруктураНастроек.НастройкиОпределены = Истина;
		
		СтруктураНастроек.ВедетсяРаздельныйУчет              = ВыборкаПоОрганизации.ВестиРаздельныйУчетПоУслугамКапремонта;
		СтруктураНастроек.ЗапретитьВзаимозачетАвансовИДолгов = ВыборкаПоОрганизации.ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами;
		СтруктураНастроек.НастройкаРасчетаПени               = ВыборкаПоОрганизации.НастройкаРасчетаПени;
		СтруктураНастроек.НастройкиУчетаКапремонтаСсылка     = ВыборкаПоОрганизации.НастройкиУчетаКапремонтаСсылка;
		
		Если ЗаполнитьСписок Тогда
			
			ВыборкаУслугКапРемонта = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУслугКапРемонта.Следующий() Цикл
				СтруктураНастроек.СписокУслуг.Добавить(ВыборкаУслугКапРемонта.Услуга);
			//++Позолотина
				СтруктураНастроек.СписокНоменклатур.Добавить(ВыборкаУслугКапРемонта.Услуга.Услуга);	
			КонецЦикла;
			
			ВыборкаНоменклатурыУслугКапРемонта = МассивРезультатов[2].Выбрать();
			Пока ВыборкаНоменклатурыУслугКапРемонта.Следующий() Цикл
				СтруктураНастроек.СписокНоменклатурыУслуг.Добавить(ВыборкаНоменклатурыУслугКапРемонта.Номенклатура);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ПолучитьНастройкиУчетаУслугКапремонта()

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ УЧЕТНОЙ ПОЛИТИКИ ЖКХ

// Получает ключ записи регистра сведений "Учетная политика (ЖКХ)", который может использоваться
// для открытия формы записи учетной политики, актуальной на указанный момент времени.
//
// Возвращаемое значение:
//  РегистрСведенийКлючЗаписи или Неопределено.
//
Функция ПолучитьКлючЗаписиУчетнойПолитикиЖКХПоОрганизацииНаДату(Период, Организация) Экспорт
	
	// Если учетная политика не найдена, вернем Неопределено.
	КлючРезультат = Неопределено;
	
	// Получим срез актуальной учетной политики на указанную дату.
	// Если срез определен, то получим период записи для ключа учетной политики.
	СрезУчетнойПолитики = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(Период, Новый Структура("Организация", Организация));
	Если СрезУчетнойПолитики.Количество() > 0 Тогда
		
		// Вернем ключ учетной политики, определенной периодом и организацией,
		// или неопределено, если учетную политику получить не удалось.
		ПараметрыКлючаЗаписи = Новый Структура;
		ПараметрыКлючаЗаписи.Вставить("Период",      СрезУчетнойПолитики[0].Период);
		ПараметрыКлючаЗаписи.Вставить("Организация", Организация);
		
		КлючРезультат = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьКлючЗаписи(ПараметрыКлючаЗаписи);
		
	КонецЕсли;
	
	Возврат КлючРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// КОНТРОЛЬ ПОКАЗАНИЙ ПРИБОРОВ УЧЕТА

// Функция возвращает признак использования контроля показаний приборов учета.
//
Функция ИспользоватьКонтрольПоказанийПриборовУчета() Экспорт
	
	Возврат Константы.УПЖКХ_ИспользоватьКонтрольПоказанийПриборовУчета.Получить();
	
КонецФункции

// Функция возвращает размер допустимого превышениясреднего расхода приборов учета.
//
Функция РазмерДопустимогоПревышенияСреднегоРасходаПрибораУчета() Экспорт
	
	Возврат Константы.УПЖКХ_РазмерДопустимогоПревышенияСреднегоРасходаПУ.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКИ УЧЕТА ПО ДОБРОВОЛЬНОМУ СТРАХОВАНИЮ

// Функция получает настройки учета начислений по добровольному страхованию.
Функция ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию() Экспорт
	
	СтруктураНастроек = Константы.УПЖКХ_НастройкиУчетаДобровольногоСтрахования.Получить().Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		ВестиУчетНачисленийПоДобровольномуСтрахованию = СтруктураНастроек.ВестиУчетНачисленийПоДобровольномуСтрахованию;
		УслугаДобровольногоСтрахования                = ?(ВестиУчетНачисленийПоДобровольномуСтрахованию, СтруктураНастроек.УслугаДобровольногоСтрахования, Справочники.КВП_Услуги.ПустаяСсылка());
	Иначе
		ВестиУчетНачисленийПоДобровольномуСтрахованию = Ложь;
		УслугаДобровольногоСтрахования                = Справочники.КВП_Услуги.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Новый Структура("ВестиУчетНачисленийПоДобровольномуСтрахованию, УслугаДобровольногоСтрахования", ВестиУчетНачисленийПоДобровольномуСтрахованию, УслугаДобровольногоСтрахования);
	
КонецФункции // ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию()

////////////////////////////////////////////////////////////////////////////////
// ОТРАЖЕНИЕ НАЧИСЛЕНИЙ В РЕГЛ. УЧЕТЕ

// Функция возвращает признак использования нового механизма отражения начислений
// в регл. учете в данной информационной базе.
//
Функция ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Период) Экспорт
	
	// Значение по умолчанию.
	ИспользоватьНовыйМеханизмОтражения = Ложь;
	
	// Новый механизм используется, если дата начала использования нового механизма
	// заполнена в настройках параметров учета, а текущий период начисления больше нее.
	ДатаНачалаИспользованияНовогоМеханизма = Константы.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете.Получить();
	Если ЗначениеЗаполнено(ДатаНачалаИспользованияНовогоМеханизма) И Период >= НачалоМесяца(ДатаНачалаИспользованияНовогоМеханизма) Тогда
		ИспользоватьНовыйМеханизмОтражения = Истина;
	КонецЕсли;
	
	Возврат ИспользоватьНовыйМеханизмОтражения;
	
КонецФункции

// Функция возвращает признак отражения корректировок в регл. учете
// с помощью бухгалтерских документов "Корректировка реализации".
//
Функция ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете(Период) Экспорт
	
	// Значение по умолчанию.
	ИспользоватьКорректировкиРеализации = Ложь;
	
	// Корректировка реализации используется, если включен новый механизм отражения начислений
	// и установлена настройка отражения с помощью корректировок реализаций.
	Если ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Период)
	   И Константы.УПЖКХ_ИспользоватьКорректировкиРеализацииПриОтраженииКорректировокВРеглУчете.Получить() Тогда
		ИспользоватьКорректировкиРеализации = Истина;
	КонецЕсли;
	
	Возврат ИспользоватьКорректировкиРеализации;
	
КонецФункции

// Функция возвращает признак отражения бухгалтерских документов в регл. учете
// с детализацией по объемам и тарифам начисленных услуг.
//
// Подробнее:
//    При реализации детального учета СТОЛКНУЛИСЬ С ПРОБЛЕМОЙ: при начислении льгот и выполнении 
//    корректировок/перерасчетов не заполняются объемы и тарифы.
//    Выполнять отражение начислений с реальными объемами, а корректировок и льгот с объемом "1" 
//    неверно, т.к. сводит на нет всю доработку по колличественному учету в БУ.
//    Выполнить доработку документов "Расчет льгот" и "Корректировка начислений" для корректного 
//    учета объемов и тарифов сейчас не представляется возможным. В т.ч. и потому, что не понятно
//    что при корректировке нужно уменьшать тариф или объем? И как учитывать ситуации, когда
//    есть и льготы, и корректировки, при этом выполняется их отражение в составе начислений?
//    Поэтому РЕШИЛИ уточнить подробности учета у клиентов и ОТЛОЖИТЬ ДОРАБОТКУ МЕХАНИЗМА. 
//    Соответствующие наработки оставить, чтобы можно было в любой момент вернуться к доработке.
//
// Что доработано в рамках настройки:
//    1. Добавлена константа УПЖКХ_ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями и настройка
//       в параметрах учета.
//    2. В документе КВП_ОтражениеНачисленийВРеглУчете добавлена ТЧ ДетализацияНачислений, куда при 
//       включеннной настройке попадает информация с деталями (сумма + объем + тариф) из РН Начисления.
//    3. В "Сведения для отражения по текущему начислению" для тек.строки документа отражения выводится
//       таблица с деталями начисления. Т.к. для начислений льгот и корректировок нет данных, то сейчас
//       выводится только суммма.
//
// Чтобы ВКЛЮЧИТЬ механизм и продолжить его доработку нужно:
//    1) Включить в конфигураторе видимость настройки (ГруппаИспользоватьОтражениеСДеталями) в настройках 
//       параметров учета, видимость настроить в зависимости от использования нового механизма отражения.
//    2) Включить настройку в пользовательском режиме.
//
Функция ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями(Период) Экспорт
	
	// ВНИМАНИЕ:
	// Механизм временно не используется. 
	// Подробнее см. в комментариях к текущей процедуре.
	
	// Значение по умолчанию.
	ИспользоватьОтражениеСДеталями = Ложь;
	
	// Корректировка реализации используется, если включен новый механизм отражения начислений
	// и установлена настройка отражения с помощью корректировок реализаций.
	Если ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Период)
	   И Константы.УПЖКХ_ИспользоватьОтражениеНачисленийВРеглУчетеСДеталями.Получить() Тогда
		ИспользоватьОтражениеСДеталями = Истина;
	КонецЕсли;
	
	Возврат ИспользоватьОтражениеСДеталями;
	
КонецФункции

#КонецОбласти