////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область БСП_ПрофилиБезопасности

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ЗащищенноеСоединение = Ложь;
	Адрес = "";
	Протокол = "";
	
	НастройкиСервисаЭДО = ОбменСКонтрагентамиВнутренний.СтруктураНастроекТакском();
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Адрес = Лев(Адрес, СтрНайти(Адрес, "/") - 1);
	Порт = ?(ВРег(Протокол) = "HTTPS", 443, 80);
	Описание = НСтр("ru = 'Сервис 1С-Такском, обмен юридически значимыми электронными документами.'");
	Разрешения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(ВРег(Протокол), Адрес, Порт, Описание));
		
	НастройкиСервисаЭДО = ОбменСКонтрагентамиВнутренний.СтруктураНастроек1СЭДО();
	ЭлектронноеВзаимодействиеСлужебный.ОпределитьПараметрыСайта(
		НастройкиСервисаЭДО.АдресВебСервиса, ЗащищенноеСоединение, Адрес, Протокол);
	Адрес = Лев(Адрес, СтрНайти(Адрес, "/") - 1);
	Порт = ?(ВРег(Протокол) = "HTTPS", 443, 80);
	Описание = НСтр("ru = 'Сервис 1С-ЭДО, обмен юридически значимыми электронными документами.'");
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(ВРег(Протокол), Адрес, Порт, Описание));
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения);
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#Область КонструкторыПараметровМетодов

// Формирует дополнительные параметры для сохранения документа учета в информационной базе.
// См. ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД, параметр ПараметрыОбработки.
Функция НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД(СсылкаНаВладельца = Неопределено, Записывать = Истина,
	СпособОбработки = "") Экспорт

	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("СсылкаНаВладельца", СсылкаНаВладельца);
	ПараметрыОбработки.Вставить("Записывать",        Записывать);
	ПараметрыОбработки.Вставить("СпособОбработки",   СпособОбработки);
	
	Возврат ПараметрыОбработки;

КонецФункции

#КонецОбласти

#Область РегистрацияОбъектовДляОбменаЭД

// Обработчик события "ПередЗаписью" владельцев электронных документов.
//
// Параметры:
//  Источник        - Объект - владелец присоединенного файла.
//  Отказ           - Булево - признак отказа от записи.
//  РежимЗаписи     - РежимЗаписиДокумента - режим записи владельца электронного документа.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения владельца электронного документа.
//
Процедура ОбменСКонтрагентамиВладелецПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", Истина);
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	
	// ЭД делаем только когда есть действующее соглашение об обмене
	Если (Не Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение") ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение)
		И Не ТипИсточника = Тип("ДокументОбъект.ПакетЭД") Тогда
		
		ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
		НастройкаЭДСуществует = ОбменСКонтрагентамиСлужебныйВызовСервера.НастройкаЭДСуществует(Источник.Ссылка, ПараметрыЭД);
		Если Не НастройкаЭДСуществует Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Источник.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ДанныеСостояния = ДанныеСостоянияЭД(Источник.Ссылка);
	ТекущееСостояние = ДанныеСостояния.СостояниеВерсииЭД;
	ПризнакИзменения = Источник.ЭтоНовый();
	ПризнакУчастияВОбмене = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоКоммерческоеПредложениеКлиенту = МодульПодсистемы.ЭтоКоммерческоеПредложениеКлиенту(Источник);
	Иначе
		ЭтоКоммерческоеПредложениеКлиенту = Ложь;
	КонецЕсли;
	
	Если ЭтоКоммерческоеПредложениеКлиенту
		И ОбщегоНазначения.ПодсистемаСуществует(
			"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульПодсистемы.ПередЗаписьюВладельцаЭлектронногоДокумента(Источник, ПризнакИзменения, ТекущееСостояние,
			ПризнакУчастияВОбмене, Отказ);
	Иначе
		ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента(
			Источник, ПризнакИзменения, ТекущееСостояние, ПризнакУчастияВОбмене, Отказ);
	КонецЕсли;
	
	Если Не Источник.ЭтоНовый()
		И Не Отказ
		И ПризнакИзменения
		И ПараметрыЭД <> Неопределено
		И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		СостоянияМожноЗакрывать = Новый Массив;
		СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияВерсийЭД.НаУтверждении);
		СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияВерсийЭД.НаПодписи);
		СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент);
		СостоянияМожноЗакрывать.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
		
		СостоянияНетЭДО = Новый Массив;
		СостоянияНетЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента);
		СостоянияНетЭДО.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
		СостоянияНетЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
		СостоянияНетЭДО.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
		СостоянияНетЭДО.Добавить(Перечисления.СостоянияВерсийЭД.НеСформирован);
		
		ШаблонСообщенияУспех =
			НСтр("ru='Электронный документ ""%1"" закрыт принудительно.
					 |Создайте новый электронный документ, чтобы выполнить документооборот.'");
		
		ШаблонСообщенияЭДОНеЗавешен =
			НСтр("ru='Электронный документ ""%1"" стал неактуальным. Так как он уже отправлен контрагенту, необходимо:
					 | - Аннулировать электронный документ (перейти к документу можно командой ""ЭДО -> Открыть электронные документы"")
					 | - Создать новый электронный документ (команда ""ЭДО -> Создать электронный документ"")'");
		
		ШаблонСообщенияЭДОЗавешен =
			НСтр("ru='Электронный документ ""%1"" стал неактуальным. Так как он уже подписан контрагентом, необходимо:
					 | - Аннулировать электронный документ (перейти к документу можно командой ""ЭДО -> Открыть электронные документы"")
					 | - Создать новую версию электронного документа (команда ""ЭДО -> Создать электронный документ"")'");
		
		// Проверяем состояние документа.
		
		СписокВладельцевЭД = Новый Массив;
		СписокВладельцевЭД.Добавить(Источник.Ссылка);
		ВладельцыЭД = ВладельцыИЭлектронныеДокументы(СписокВладельцевЭД);
		ЭлектронныйДокумент = ВладельцыЭД[Источник.Ссылка];
		
		Если СостоянияМожноЗакрывать.Найти(ТекущееСостояние) <> Неопределено Тогда
			
			// ЭДО не начат или документ отклонен получателем,
			// можно формировать новую версию ЭД.
			ФайлЭлектронногоДокумента = ПрисоединенныйФайл(ЭлектронныйДокумент);
			ПредставлениеЭлектронногоДокумента = ПредставлениеЭД(ФайлЭлектронногоДокумента);
			
			// Закрываем принудительно ЭД.
			ПричинаЗакрытия = НСтр("ru='Закрыт автоматически при изменении учетного документа.'");
			КоличествоОбработанныхЭД = 0;
			
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(ЭлектронныйДокумент);
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
			
			ТекстСообщения = СтрШаблон(ШаблонСообщенияУспех, ПредставлениеЭлектронногоДокумента);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлектронныйДокумент);
			
		ИначеЕсли ЗначениеЗаполнено(ТекущееСостояние)
			И СостоянияНетЭДО.Найти(ТекущееСостояние) = Неопределено Тогда
			
			ФайлЭлектронногоДокумента = ПрисоединенныйФайл(ЭлектронныйДокумент);
			ПредставлениеЭлектронногоДокумента = ПредставлениеЭД(ФайлЭлектронногоДокумента);
			
			// ЭДО начат, нужно его аннулировать, прежде чем создавать новую версию ЭД.
			Если ТекущееСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияЭДОЗавешен, ПредставлениеЭлектронногоДокумента);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияЭДОНеЗавешен, ПредставлениеЭлектронногоДокумента);
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭлектронныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Если ПризнакИзменения Тогда
			ТекстСообщения = НСтр("ru='Существует электронный документ. Изменение ключевых реквизитов документа запрещено.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	УстановитьСвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.ИзмененыКлючевыеРеквизиты", ПризнакИзменения);
	УстановитьСвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.УчаствуетВОбмене", ПризнакУчастияВОбмене);
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" владельцев электронных документов.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла,
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ОбменСКонтрагентамиВладелецПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ЕстьСоглашение")
		ИЛИ НЕ Источник.ДополнительныеСвойства.ЕстьСоглашение Тогда
		
		ПроверитьНаличиеИУдалитьСостояниеДокумента(Источник.Ссылка);
		Возврат;
	КонецЕсли;
	
	// При изменении ключевых реквизитов объекта устанавливается новая версия электронного документа.
	
	ПризнакИзменения = СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.ИзмененыКлючевыеРеквизиты", Ложь);
	ПризнакУчастияВОбмене = СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ОбменСКонтрагентами.УчаствуетВОбмене", Ложь);
	
	Если ПризнакИзменения ИЛИ Не ПризнакУчастияВОбмене Тогда
		
		ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(Источник.Ссылка,, Истина, ПризнакУчастияВОбмене);
		
	Иначе
		
		ОбновитьОписаниеОснованияЭлектронногоДокумента(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеЭД

// Обработчик события "ПередЗаписью" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПередЗаписьюЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		ОбработатьУдалениеЭлектронногоДокумента(Источник.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(Источник.НаправлениеЭД)
		И ЗначениеЗаполнено(Источник.ТипЭлементаВерсииЭД)
		И ЗначениеЗаполнено(Источник.ВладелецФайла) Тогда
		
		Если НЕ ЗначениеЗаполнено(Источник.Ссылка) Тогда
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
		ИначеЕсли Источник.Ссылка.СтатусЭД = Источник.СтатусЭД Тогда			
			Если Источник.Ссылка.Описание <> Источник.Описание Тогда
				Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
			Иначе
				Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Ложь);
			КонецЕсли;
		Иначе
			Источник.ДополнительныеСвойства.Вставить("ЗаписатьСобытиеЖР", Истина);
			Источник.ДополнительныеСвойства.Вставить("СостояниеВерсииЭД", ОпределитьСостояниеВерсииПоСтатусуЭД(Источник.Ссылка));
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДО
	 И Источник.ТипЭлементаВерсииЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
		// Выполнять смену состояния владельца будем перед записью, так как для формирования маршрута подписания и записи
		// представления прогресса подписания необходимо понять, находится ли он на подписании. 
		СостояниеВерсииЭД = Неопределено;
	
		Если Источник.ДополнительныеСвойства.Свойство("СоглашениеЭД") Тогда
			СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Источник);
		КонецЕсли;
		
		ВерсияЭДОбновлена = Ложь;
		ПринудительнаяСменаСостоянияВерсии = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ВерсияФорматаПакета = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ОтклонениеАннулирования = Неопределено;
		Источник.ДополнительныеСвойства.Свойство("ОтклонениеАннулирования", ОтклонениеАннулирования);

		Если Источник.ДополнительныеСвойства.Свойство("СостояниеВерсииЭД") Тогда
			
			СледСостояниеВерсииЭД = Источник.ДополнительныеСвойства.СостояниеВерсииЭД;
			СтруктураТекВерсииЭД  = ПараметрыВерсииЭлектронногоДокумента(Источник.ВладелецФайла);
			
			ОбновитьВерсию = СостояниеВерсииЭД <> СтруктураТекВерсииЭД.СостояниеВерсииЭД
				И Не ЭтоОтветныйТитул(Источник.ТипЭлементаВерсииЭД);
			Если ОбновитьВерсию Тогда
				ВерсияЭДОбновлена = Истина;
				ОбновитьВерсиюЭД(Источник, ПринудительнаяСменаСостоянияВерсии, ВерсияФорматаПакета, ОтклонениеАннулирования);
			КонецЕсли;
			
			НовоеСостояниеЭДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.ВладелецФайла, "СостояниеЭДО");
			Если ДокументОтправленНаПодпись(Источник) Тогда
				// При отправке документа на подпись заполняем маршрут подписания
				ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(Источник);	
			ИначеЕсли СтруктураТекВерсииЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаПодписи 
				И НовоеСостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент Тогда
				// При отказе от подписи очищаем маршрут подписания
				
				// Это может быть новый объект - нужно корректно получить ссылку
				СсылкаДокумента = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСсылкуОбъектаБезопасно(Источник);
				ЭлектронноеВзаимодействиеСлужебный.ОчиститьМаршрутПодписания(СсылкаДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗаписи" электронных документов.
// 
// Параметры:
//  Источник - Объект - электронный документ.
//  Отказ    - Булево - признак отказа от записи.
//
Процедура ПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписатьСобытиеЖР")
		 И Источник.ДополнительныеСвойства.ЗаписатьСобытиеЖР Тогда
		ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(Источник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

// Получение выборки элементов справочника ЭДПрисоединенныеФайлы по отбору.
//
// Параметры:
//  Параметры - Структура - ключ - название реквизита отбора, значение - значение отбора.
//
// Возвращаемое значение:
//  ОбходРезультатаЗапроса - выборка электронных документов.
//
Функция ПолучитьВыборкуЭДПоОтбору(Параметры) Экспорт
	
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") ИЛИ Параметры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ЭДПрисоединенныеФайлы.Наименование,
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ПакетЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|";
	
	ПервыйЭлемент = Истина;
	Для Каждого Элемент Из Параметры Цикл
		Запрос.Текст = Запрос.Текст + ?(НЕ ПервыйЭлемент," И ","") + " ЭДПрисоединенныеФайлы." + Элемент.Ключ + "=&" + Элемент.Ключ;
		ПервыйЭлемент = Ложь;
		Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизит "Организация" при однофирменном учете.
//
// Параметры:
//  Источник             - Ссылка - источник события
//  ДанныеЗаполнения     - Произвольный - Значение, которое используется как основание для заполнения.
//  ТекстЗаполнения      - Строка, Неопределено - Текст, используемый для заполнения документа.
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//
Процедура ЗаполнитьЗначениеРеквизитаОрганизацияПриОдноФирменномУчете(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ИспользуетсяНесколькоОрганизаций = Ложь;
	ОрганизацияПоУмолчанию = Неопределено;
	
	ИспользуетсяНесколькоОрганизаций = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если НЕ ИспользуетсяНесколькоОрганизаций И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Источник.Метаданные())
		И Не ЗначениеЗаполнено(Источник.Организация) Тогда
		
		Источник.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Источник.Организация) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось определить организацию.'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет регламентное задание по получению новых электронных документов.
//
Процедура ПолучитьНовыеЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по получению новых эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
	Попытка
		СоотвСоглашений = Неопределено;
		КоличествоПакетов = 0; КолРаспакованныхЭД = 0;
		Если ДоступныПараметрыДляАвторизацииНаСервереОператора( , СоотвСоглашений) Тогда
			
			ОбменСКонтрагентамиСлужебныйВызовСервера.ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашений);
			
		КонецЕсли;
		
		ПроверитьПриглашенияИСформироватьПакетыЭД();
		
		НовыеДокументы = ПолучитьНовыеЭД(СоотвСоглашений);
		КоличествоПакетов = НовыеДокументы.МассивПакетовЭД.Количество();
		
		ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД, НовыеДокументы.Профили);
		
		// Распаковываем принятые пакеты с электронными документами.
		РаспаковатьПакетыЭДНаСервере(НовыеДокументы.МассивПакетовЭД, КолРаспакованныхЭД);
		
		ШаблонСообщения = НСтр("ru = 'Закончено регламентное задание.
									|Получено пакетов: %1. Распаковано: %2.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КоличествоПакетов, КолРаспакованныхЭД);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения, "РегламентныеЗадания",
			УровеньЖурналаРегистрации.Информация);
	Исключение
		
		Операция = НСтр("ru = 'Регламентное получение электронных документов'");
		
		ШаблонСообщения = НСтр("ru = 'При процессе выполнении произошла ошибка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет регламентное задание по фактической отправке электронных документов.
Процедура ОтправитьЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаЭлектронныхДокументов);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		ВызватьИсключение
			НСтр("ru = 'Работа регламентного задания в режиме сервиса не предусмотрена.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Текст = НСтр("ru = 'Начато регламентное задание по отправке оформленных эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
	Попытка
		КоличествоПакетов = ОтправкаСформированныхЭД();
		Текст = НСтр("ru = 'Закончено регламентное задание. Отправлено пакетов: %КоличествоПакетов%.'");
		Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Во время регламентной отправки оформленных эл.документов произошла ошибка.
		|Дополнительное описание:
		|%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ОписаниеОшибки, "РегламентныеЗадания", УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
КонецПроцедуры

// Метод регламентного задания по управлению проверкой контрагентов в справочнике.
// Создает подчиненное регламентное задание ПроверкаКонтрагентовБЭДВыполнение.
Процедура ПроверитьКонтрагентовРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД);
	
	МетаданныеОсновногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭД;
	МетаданныеПодчиненногоЗадания = Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение;
	
	// Найдем подчиненные задания выполнения проверки, если они остались с предыдущего раза.
	// Удалим лишние задания.
	
	ОтборЗадания = Новый Структура;
	ОтборЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	
	ВсеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗадания);
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	НаУдаление = Новый Массив;
	ВыбранноеЗадание = Неопределено;
	Для каждого Задание Из ВсеЗадания Цикл
		Если РазделениеВключено Тогда
			Если ВыбранноеЗадание = Неопределено Тогда
				ВыбранноеЗадание = Задание;
			Иначе
				НаУдаление.Добавить(Задание);
			КонецЕсли;
		Иначе
			Если Задание.Предопределенное Тогда
				ВыбранноеЗадание = Задание;
			Иначе
				НаУдаление.Добавить(Задание);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Задание Из НаУдаление Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;
	
	// Настроим подчиненное задание для выполнения проверки контрагентов.
	// Запустим задание в случайный момент в интервале следующих 0,5 - 10 минут.
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СекундДоСтарта = ГСЧ.СлучайноеЧисло(30, 600);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала = ТекущаяДатаСеанса() + СекундДоСтарта;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("Метаданные", МетаданныеПодчиненногоЗадания);
	ПараметрыЗадания.Вставить("Наименование", МетаданныеПодчиненногоЗадания.Синоним);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Ключ", "1");
	
	Если ВыбранноеЗадание = Неопределено Тогда
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(ВыбранноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	КонецЕсли;
	
КонецПроцедуры

// Метод регламентного задания по проверке контрагентов в справочнике.
// 		В модели сервиса обновляет состояния контрагентов по каждой записи регистра.
// 		В локальном режима записывает недостающих контрагентов в регистр и обновляет состояния по каждой записи регистра.
Процедура ПроверитьКонтрагентовВыполнениеРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаКонтрагентовБЭДВыполнение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СостоянияКонтрагентов.Контрагент,
	|	СостоянияКонтрагентов.ИНН,
	|	СостоянияКонтрагентов.КПП,
	|	СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентов";

	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"СостоянияКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
			
	КонецЕсли;

	// Указываем дату, на которую будет выполняться проверка.
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Выполняется проверка только тех ИНН и КПП, которые записаны в регистр.
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
	// Дозаписываем недостающие ИНН и КПП в регистр в локальном режиме.
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ПроверитьНепроверенныхКонтрагентов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектроннаяПодпись

// Процедура - Сохранить вместе с последней ЭП.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//
Процедура СохранитьВместеСПоследнейЭП(ПрисоединенныйФайл, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД) Экспорт
	
	ПолноеИмяФайла = АдресКаталога + ДанныеФайла.ИмяФайла;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
	
	Файл = Новый Файл(АдресКаталога);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(АдресКаталога);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		КоличествоПодписей = МассивСтруктурПодписей.Количество();
		Для Сч = 1 По КоличествоПодписей - 1 Цикл
			МассивСтруктурПодписей.Удалить(0);
		КонецЦикла;
		СохранитьПодписи(
				ПрисоединенныйФайл,
				ПолноеИмяФайла,
				МассивСтруктурПодписей,
				АдресКаталога,
				СоответствиеФайлЭД,
				Истина);
	КонецЕсли;
	
КонецПроцедуры

// Сохранение электронного документа с электронной подписью.
//
// Параметры:
//  ПрисоединенныйФайл - Файл - файл для сохранения.
//  ДанныеФайла - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресКаталога - Строка - путь для сохранения.
//  СоответствиеФайлЭД - Соответствие - соответствие файлов и электронных подписей.
//  ЭтоПроизвольныйДокумент - Булево - признак произвольного документа.
//
Процедура СохранитьВместеСЭП(ПрисоединенныйФайл,
								ДанныеФайла,
								АдресКаталога,
								СоответствиеФайлЭД,
								ЭтоПроизвольныйДокумент = Неопределено) Экспорт
	
	// Для подтверждения необходимо в каталог формирования файлов сохранить только последнюю подпись.
	ПолноеИмяФайла = СохранитьФайлКак(ДанныеФайла, АдресКаталога, ПрисоединенныйФайл, ЭтоПроизвольныйДокумент, СоответствиеФайлЭД);
	Если ПолноеИмяФайла = "" Тогда
		Возврат;
	КонецЕсли;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	МассивСтруктурПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);

	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		СохранитьПодписи(ПрисоединенныйФайл, ПолноеИмяФайла, МассивСтруктурПодписей, АдресКаталога,
			СоответствиеФайлЭД, , ЭтоПроизвольныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификаты

// Возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр НастройкаЭДО, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных по данной настройке или профилю сертификатов.
//
// Параметры:
//  МассивОтпечатков - Массив - содержит строки отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                     (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД, СправочникСсылка.ПрофилиНастроекЭДО - объект, для
//                                                                 которого требуется получить список сертификатов.
//  ОграничиватьПоПользователям - Булево - определяет, будет ли применен фильтр по пользователям при выборе
//                                         доступных сертификатов.
//  ТолькоДействительные - Булево - если Истина, будут возвращены только непросроченные сертификаты.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица сертификатов.
//
Функция ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатков, НастройкаЭДО = Неопределено,
	ОграничиватьПоПользователям = Истина, ТолькоДействительные = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений;
	Если ТипЗнч(МассивОтпечатков) = Тип("Массив") Или ТипЗнч(МассивОтпечатков) = Тип("ФиксированныйМассив") Тогда
		ПереданыСсылки = МассивОтпечатков.Количество() > 0 
			И ТипЗнч(МассивОтпечатков[0]) = Тип("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования");
		
		ЗапросПоСертификатам = Новый Запрос;
		Если ТипЗнч(НастройкаЭДО) = Тип("Строка") Тогда
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка КАК Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток КАК Отпечаток
			|ИЗ
			|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = Сертификаты.Ссылка
			|ГДЕ
			|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
			|	И ";
			ЗапросПоСертификатам.УстановитьПараметр("ИдентификаторЭДО", НастройкаЭДО);
		Иначе
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Сертификаты.Ссылка,
			|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
			|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
			|	ЛОЖЬ КАК ПарольПолучен,
			|	Сертификаты.Отпечаток
			|ИЗ
			|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
			|ГДЕ
			|	";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "НЕ Сертификаты.ПометкаУдаления";
		
		Если ОграничиватьПоПользователям Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И (Сертификаты.Пользователь = &ТекущийПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПустойПользователь
			|			ИЛИ Сертификаты.Пользователь = &ПользовательНеУказан)";
		КонецЕсли;
		
		Если ПереданыСсылки Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И Сертификаты.Ссылка В (&МассивОтпечатков)";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	И Сертификаты.Отпечаток В (&МассивОтпечатков)"
		КонецЕсли;
		
		Если ТолькоДействительные Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ Сертификаты.Отозван
			|	И (Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
			|		ИЛИ РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0)";
		КонецЕсли;

		ЗапросПоСертификатам.Текст = ТекстЗапроса;
			
		ЗапросПоСертификатам.УстановитьПараметр("ТекущаяДата",          ТекущаяДатаСеанса());
		ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		ЗапросПоСертификатам.УстановитьПараметр("ПустойПользователь",	Справочники.Пользователи.ПустаяСсылка());
		ЗапросПоСертификатам.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",		МассивОтпечатков);
		ВозвращаемоеЗначение = ЗапросПоСертификатам.Выполнить().Выгрузить();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Функция возвращает пересечение массива сертификатов, установленных в личном хранилище
// с массивом сертификатов зарегистрированных в 1с (действующих и доступных текущему пользователю).
// В случае, если передан необязательный параметр СоглашениеЭД, то массив зарегистрированных в 1с сертификатов,
// дополнительно ограничивается условием вхождения в список зарегистрированных, по данному соглашению, сертификатов.
//
// Параметры:
//  МассивОтпечатковСертификатов - Массив - массив отпечатков сертификатов, установленных в хранилище на Клиенте/Сервере
//                                 (в зависимости от настроек работы с криптографией).
//  НастройкаЭДО - СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на соглашение об обмене ЭД через оператора ЭДО,
//                                                                список сертификатов которого требуется.
//   ОграничиватьПоПользователям - Булево - определяет, будет ли применен фильтр по пользователям при выборе
//                                          доступных сертификатов.
//
// Возвращаемое значение:
//  Массив - массив структур сертификатов.
//
Функция МассивСтруктурДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО = Неопределено, 
	ОграничиватьПоПользователям = Истина) Экспорт
	
	МассивСтруктурДоступныхСертификатов = Новый Массив;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов, НастройкаЭДО,
		ОграничиватьПоПользователям);
	Для Каждого ТекЭл Из МассивОтпечатковСертификатов Цикл
		СтрокаТаблицы = ТаблицаДоступныхСертификатов.Найти(ТекЭл, "Отпечаток");
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураСертификата = Новый Структура;
		СтруктураСертификата.Вставить("Отпечаток",                   ТекЭл);
		СтруктураСертификата.Вставить("Сертификат",                  СтрокаТаблицы.Ссылка);
		СтруктураСертификата.Вставить("ПарольПолучен",               СтрокаТаблицы.ПарольПолучен);
		СтруктураСертификата.Вставить("ПарольПользователя",          СтрокаТаблицы.ПарольПользователя);
		СтруктураСертификата.Вставить("ЗапомнитьПарольКСертификату", СтрокаТаблицы.ЗапомнитьПарольКСертификату);
		СтруктураСертификата.Вставить("Комментарий",                 "");
		
		МассивСтруктурДоступныхСертификатов.Добавить(СтруктураСертификата);
	КонецЦикла;
	
	Возврат МассивСтруктурДоступныхСертификатов;
	
КонецФункции

#КонецОбласти

#Область РаботаСВерсиямиЭД

// Получает номер текущей версии электронного документа для владельца.
// 
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на объект ИБ, номер версии электронного документа которого надо получить.
//
// Возвращаемое значение:
//  Число - номер версии.
//
Функция НомерВерсииЭДПоВладельцу(СсылкаНаВладельца) Экспорт
	
	СтруктураВерсииЭД = ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца);
	Если ЗначениеЗаполнено(СтруктураВерсииЭД.НомерВерсииЭД) Тогда
		Возврат СтруктураВерсииЭД.НомерВерсииЭД;
	КонецЕсли;

	Возврат ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаВладельца) + 1;
	
КонецФункции

// Получение первого состояния версии электронного документа для владельца.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - ссылка на владельца электронного документа.
//  ПризнакПолучения - Булево - признак получения для входящего документа.
// 
// Возвращаемое значение:
//  Перечисление.СостоянияВерсийЭД - состояние версии.
//
Функция ПолучитьПервоеСостояниеВерсииЭДДляВладельца(СсылкаНаВладельца, ПризнакПолучения = Ложь) Экспорт
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	
	СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	НаправлениеЭД = "";
	Если ПараметрыЭД.Свойство("НаправлениеЭД", НаправлениеЭД) И ЗначениеЗаполнено(НаправлениеЭД) Тогда
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован;
		ИначеЕсли НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			Если ПризнакПолучения Тогда 
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
			Иначе
				СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеПолучен;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеВерсииЭД;
	
КонецФункции

// Получение данных состояния электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - состояние электронного документа.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии.
//    * КомментарийРС - Строка - комментарий.
//
Функция ДанныеСостоянияЭД(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СостояниеЭД = Новый Структура;
	СостояниеЭД.Вставить("СостояниеВерсииЭД", Перечисления.СостоянияВерсийЭД.ПустаяСсылка());
	СостояниеЭД.Вставить("КомментарийРС", "");
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
			СостояниеЭД.Вставить("СостояниеВерсииЭД", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СсылкаНаВладельца,"СостояниеЭДО"));
				
			Если СостояниеЭД.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно Тогда 
				СостояниеЭД.Вставить("КомментарийРС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СсылкаНаВладельца,"ПричинаОтклонения"));
			КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			СостояниеЭД.Вставить("СостояниеВерсииЭД", Выборка.СостояниеВерсииЭД);
			СостояниеЭД.Вставить("КомментарийРС", Выборка.Комментарий);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеЭД;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПакетовЭД

// Формирование нового пакета электронного документа.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - сформированный документ ПакетЭД.
//
Функция СформироватьНовыйПакетЭД(СтруктураПараметров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ПакетЭД                         = Документы.ПакетЭД.СоздатьДокумент();
		ПакетЭД.Дата                    = ТекущаяДатаСеанса();
		ПакетЭД.СтатусПакета            = СтруктураПараметров.СтатусПакета;
		
		ПакетЭД.Направление             = СтруктураПараметров.НаправленияЭД;
		
		ПакетЭД.Контрагент              = СтруктураПараметров.Контрагент;
		ПакетЭД.Организация             = СтруктураПараметров.Организация;
		ПакетЭД.ДоговорКонтрагента      = СтруктураПараметров.ДоговорКонтрагента;
		
		ПакетЭД.Отправитель             = СтруктураПараметров.Отправитель;
		ПакетЭД.Получатель              = СтруктураПараметров.Получатель;
		
		ПакетЭД.СпособОбменаЭД          = СтруктураПараметров.СпособОбменаЭД;
		
		ПакетЭД.ВерсияФорматаПакета     = СтруктураПараметров.ВерсияФорматаПакета;
		
		ПакетЭД.ДанныеЗашифрованы       = СтруктураПараметров.Зашифрован;
		
		Если СтруктураПараметров.Свойство("ВнешнийУИД") Тогда
			ПакетЭД.ВнешнийУИД          = СтруктураПараметров.ВнешнийУИД;
		КонецЕсли;
		ПакетЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'создание нового ПакетаЭД'"),
																					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																					ТекстСообщения);
	КонецПопытки;
	
	Возврат ПакетЭД.Ссылка;
	
КонецФункции

// Помещение пакета электронного документа в конверт.
//
// Параметры:
//  Конверт					 - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  АдресАрхиваКонтейнера	 - Строка - имя файла.
//
Процедура ПоместитьПакетЭДВКонверт(Конверт, АдресАрхиваКонтейнера) Экспорт
	
	// Так как теперь может быть несколько документов в одном пакете, надо проверять, есть ли
	// уже присоединенные файлы к пакету. Если есть - ничего не делать.
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	
	Если ЗначениеЗаполнено(Выборка) И Выборка.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(АдресАрхиваКонтейнера);
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(АдресАрхиваКонтейнера);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", Конверт);
	ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение,".", ""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");

	ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
		ПараметрыФайла, АдресВоВременномХранилище);
	
КонецПроцедуры

#КонецОбласти

#Область РаспаковкаПакетовЭД

// Определение настройки обмена ЭД по источнику - документу базы данных или по ЭД.
//
// Параметры:
//  Источник - Ссылка - ссылка на источник.
//  ИсполняемыеПараметры - Структура - параметры определения настройки в случае их отличия от значений по умолчанию.
//   * ВыводитьСообщения - Булево - выводить сообщения об ошибках. По умолчанию Истина.
//   * МассивОтпечатковСертификатов - Массив - отпечатки сертификатов. По умолчанию Неопределено.
//   * ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа. По умолчанию Неопределено.
//   * ФлагДействующиеСоглашения - Булево - отбор по действующим настройкам ЭДО. По умолчанию Истина.
// 
// Возвращаемое значение:
//  Структура - настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭДПоИсточнику(Источник, ИсполняемыеПараметры = Неопределено) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВыводитьСообщения", Ложь);
	Параметры.Вставить("МассивОтпечатковСертификатов", Неопределено);
	Параметры.Вставить("ВидЭД", Неопределено);
	Параметры.Вставить("ФлагДействующиеСоглашения", Истина);
	Если ТипЗнч(ИсполняемыеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Параметры, ИсполняемыеПараметры);
	КонецЕсли;
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(Источник);
	
	// Заполним ВидЭД в случае непосредственного выбора пользователем.
	Если ЗначениеЗаполнено(Параметры.ВидЭД) Тогда
		ПараметрыЭД.ВидЭД = Параметры.ВидЭД;
	КонецЕсли;
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		Или ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		Результат = ОпределитьНастройкиЭДИзИсточника(Источник, ПараметрыЭД, Параметры.МассивОтпечатковСертификатов);
	Иначе
		Результат = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Параметры.МассивОтпечатковСертификатов);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Если Параметры.ВыводитьСообщения Тогда
			СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя.
//  ВидЭД - ПеречислениеСсылка - вид электронного документа.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОбменаЭДПоИД(ИДОтправителя, ИДПолучателя, ВидЭД = Неопределено, ПрикладнойВидЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка КАК НастройкаЭДО,
	|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО КАК ПрофильНастроекЭД,
	|	НастройкиЭДОИсходящиеДокументы.ПрофильНастроекЭДО.РесурсВходящихДокументов КАК ОбщийРесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументов КАК КаталогВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументов КАК КаталогИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогВходящихДокументовFTP КАК КаталогВходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.КаталогИсходящихДокументовFTP КАК КаталогИсходящихДокументовFTP,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ЭлектроннаяПочтаКонтрагента КАК ЭлектроннаяПочтаКонтрагента,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	НастройкиЭДОИсходящиеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Справочник.УдалитьСоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК НастройкиЭДОИсходящиеДокументы
	|ГДЕ
	|	ВЫБОР
	|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОрганизации = &ИдентификаторОрганизации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НастройкиЭДОИсходящиеДокументы.Ссылка.СтатусПодключения = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
	|	И ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			КОГДА &ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	|				ТОГДА НастройкиЭДОИсходящиеДокументы.ПрикладнойВидЭД = &ПрикладнойВидЭД
	|			ИНАЧЕ НастройкиЭДОИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", ПрикладнойВидЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ПрофильНастроекЭДО",  Выборка.ПрофильНастроекЭД);
		СтруктураВозврата.Вставить("НастройкаЭДО",        Выборка.НастройкаЭДО);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("СертификатОрганизацииДляРасшифровки", Выборка.СертификатОрганизацииДляРасшифровки);
		СтруктураВозврата.Вставить("СертификатКонтрагентаДляШифрования",  Выборка.СертификатКонтрагентаДляШифрования);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
		
		АдресОтправителя = Выборка.РесурсВходящихДокументов;
		АдресПолучателя  = Выборка.РесурсИсходящихДокументов;
		Если Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
			АдресОтправителя = Выборка.ОбщийРесурсВходящихДокументов;
			АдресПолучателя  = Выборка.ЭлектроннаяПочтаКонтрагента;
			
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументов);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументов);
		
		ИначеЕсли Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
			
			АдресОтправителя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогВходящихДокументовFTP);
			АдресПолучателя = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				Выборка.ОбщийРесурсВходящихДокументов, Выборка.КаталогИсходящихДокументовFTP)
			
		КонецЕсли;
		СтруктураВозврата.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураВозврата.Вставить("АдресПолучателя",  АдресПолучателя);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получение представления электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ, текстовое представление которого необходимо получить.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ПолучитьПредставлениеЭД(СсылкаНаФайлЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаНаФайлЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "ДатаФормированияЭДОтправителем,
		|НаправлениеЭД, ТипЭлементаВерсииЭД, ВладелецФайла, ДатаСоздания");
		
		РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыФайла.ВладелецФайла, "НомерВерсииЭД,
		|ВидЭД, ПрикладнойВидЭД, ДатаДокументаОтправителя, НомерДокументаОтправителя, Номер, Дата");
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаФормированияЭДОтправителем) Тогда
			Версия = РеквизитыФайла.ДатаФормированияЭДОтправителем;
		ИначеЕсли РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И ЗначениеЗаполнено(РеквизитыФайла.ДатаСоздания) Тогда
			Версия = РеквизитыФайла.ДатаСоздания;
		КонецЕсли;
		
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" " + "от" + " " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), " " + "от" + " " + Формат(РеквизитыЭД.Дата, "ДЛФ=D"));
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли  ЭтоИзвещениеОПолучении(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(РеквизитыФайла.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(РеквизитыФайла.ТипЭлементаВерсииЭД)  Тогда
			Представление = "" + РеквизитыФайла.ТипЭлементаВерсииЭД + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УПД
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ШаблонЗаголовка = НСтр("ru = '%1 № %2%3'");
			Представление = СтрШаблон(ШаблонЗаголовка, РеквизитыЭД.ПрикладнойВидЭД,
				РеквизитыЭД.НомерДокументаОтправителя, ТекстДаты);
		Иначе
			НомерДокумента = ?(ЗначениеЗаполнено(РеквизитыЭД.НомерДокументаОтправителя), РеквизитыЭД.НомерДокументаОтправителя, РеквизитыЭД.Номер);
			Представление = "" + РеквизитыЭД.ВидЭД + " "+"№"+" " + НомерДокумента + " " +ТекстДаты
			+ ТекстВерсии;
		КонецЕсли;
		
	Иначе
		СписокПолей = "НомерВерсииЭД, ВидЭД, ПрикладнойВидЭД, ТипЭлементаВерсииЭД, НаименованиеДокументаОтправителя,
			|ДатаДокументаОтправителя, НомерДокументаОтправителя, Номер, Дата, ТипДокумента";
		
		Если ТипЗнч(СсылкаНаФайлЭД) = Тип("ДанныеФормыСтруктура") Тогда 
			РеквизитыЭД = Новый Структура(СписокПолей);
			ЗаполнитьЗначенияСвойств(РеквизитыЭД, СсылкаНаФайлЭД);
		Иначе
			РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, СписокПолей);
		КонецЕсли;
		
		Версия = РеквизитыЭД.НомерВерсииЭД;
		ТекстВерсии = ?(ЗначениеЗаполнено(Версия), " (версия " + Версия + ")", "");
		ТекстДаты = ?(ЗначениеЗаполнено(РеквизитыЭД.ДатаДокументаОтправителя),
		" от " + Формат(РеквизитыЭД.ДатаДокументаОтправителя, "ДЛФ=D"), "");
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + ТекстДаты + ТекстВерсии;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			Если НЕ ЗначениеЗаполнено(РеквизитыЭД.ТипДокумента)
				ИЛИ РеквизитыЭД.ТипДокумента = Перечисления.ТипыЭД.Прочее Тогда
				ТекстЗаголовка = НСтр("ru = 'Произвольный документ %1 от %2'");
				Представление = СтрШаблон(ТекстЗаголовка, РеквизитыЭД.Номер, РеквизитыЭД.Дата);
			Иначе
				ШаблонЗаголовка = НСтр("ru = '%1 № %2%3'");
				Представление = СтрШаблон(ШаблонЗаголовка, РеквизитыЭД.ТипДокумента,
					РеквизитыЭД.НомерДокументаОтправителя, ТекстДаты);
			КонецЕсли;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ШаблонЗаголовка = НСтр("ru = '%1 № %2%3'");
			Представление = СтрШаблон(ШаблонЗаголовка, РеквизитыЭД.ПрикладнойВидЭД,
				РеквизитыЭД.НомерДокументаОтправителя, ТекстДаты);
		ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			
			Представление = НСтр("ru = 'Универсальный передаточный документ №'") + " " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
			
		ИначеЕсли РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			Представление = НСтр("ru = 'Универсальный корректировочный документ №'") + " " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты;
			
		Иначе
			Представление = "" + РеквизитыЭД.ВидЭД + " № " + РеквизитыЭД.НомерДокументаОтправителя + ТекстДаты + ТекстВерсии;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Представление;
	
КонецФункции

// Определение состояния версии электронного документа на основании статуса.
//
// Параметры:
//  ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы - ссылка на электронный 
//   документ или объект электронного документа.
//  ВерсияФорматаПакетаЭД - ПеречислениеСсылка.ВерсииФорматаПакетаЭД - версия формата пакета ЭД.
//  ПринудительнаяСменаСостояния - Булево - Устарело. Не используется.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования.
//
// Возвращаемое значение:
//  Перечисления.СостоянияВерсийЭД - значение состояния.
//
Функция ОпределитьСостояниеВерсииПоСтатусуЭД(ФайлЭД, ВерсияФорматаПакетаЭД = Неопределено, ПринудительнаяСменаСостояния = Ложь,
		ОтклонениеАннулирования = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ФайлЭД = Неопределено Или ФайлЭД = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка() Тогда
		ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Иначе
		РеквизитыФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД, 
			"ТипЭлементаВерсииЭД, СтатусЭД, ВладелецФайла, Ссылка");
		РеквизитыВладельцаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(РеквизитыФайлаЭД.ВладелецФайла, 
			"СостояниеЭДО, ВидЭД");
		Если ЗначениеЗаполнено(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД) 
			И НЕ РеквизитыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД  Тогда
			 
			ТекущийСтатус = РеквизитыФайлаЭД.СтатусЭД;
			
			НастройкиОбмена = НастройкиОбменаЭД(ФайлЭД);
			Если НастройкиОбмена = Неопределено Тогда
				Возврат ВозвращаемоеЗначение;
			КонецЕсли;
			
			Если ТекущийСтатус = Перечисления.СтатусыЭД.Подписан
				И НастройкиОбмена.СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено Тогда
					
					ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента;
					
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Подписан
				И НастройкиОбмена.СтатусПодключения <> Перечисления.СтатусыПриглашений.Принято Тогда
				
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента;
				
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
				
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОшибкаПередачи;
				
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
				ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
				Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
					ИЛИ НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
						
						// Если отклонение пришло с другой стороны, надо править документ.
						Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						// Если документ был отклонен ранее, не меняем состояние.
						ИначеЕсли РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление;
						// Если статус "отклонен" установлен на стороне отправителя, то дальнейшее поведение зависит от состояния ЭД.
						Иначе	
							// Если документ отклоняется на подписи, отправляем его на исправление.
							Если РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи Тогда
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
							// Из любого другого состояния закрываем документооборот.
							Иначе
								ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
							КонецЕсли;
						КонецЕсли;
						
					ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий
						И ТекущийСтатус = Перечисления.СтатусыЭД.Отклонен
						И НЕ ЭтоФНС(РеквизитыВладельцаЭД.ВидЭД) Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;
						
					Иначе
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИсправление;
					КонецЕсли;
					
				Иначе
					Если ТекущийСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
						ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
					Иначе
						Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
						Иначе
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Отклонен;	
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать;
			ИначеЕсли ТекущийСтатус = Перечисления.СтатусыЭД.Аннулирован Тогда
				ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.Аннулирован;
			ИначеЕсли НастройкиОбмена <> Неопределено Тогда
				
				Если ВерсияФорматаПакетаЭД = Неопределено Тогда
					ВерсияФорматаПакетаЭД = ВерсияПакетаЭД(ФайлЭД);
				КонецЕсли;
				
				Если ВерсияФорматаПакетаЭД = Перечисления.ВерсииФорматаПакетаЭД.Версия30
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
					ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
					
					// Если у документа владельца ЭД есть неотправленное подтверждение о получении, то меняем состояние версии ЭД.
					Если (ТекущийСтатус = Перечисления.СтатусыЭД.Получен 
							И НЕ ЭтоСлужебныйДокумент(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
							И ЭтоСчетНаОплату(РеквизитыФайлаЭД.ВладелецФайла))
						
						Или ЭтоОтветныйТитул(РеквизитыФайлаЭД.ТипЭлементаВерсииЭД)
						// Последний статус для фнс документов через оператора.
						И (ТекущийСтатус = Перечисления.СтатусыЭД.ПереданОператору
						// Последний статус для фнс документов через прямой обмен.
						ИЛИ ТекущийСтатус = Перечисления.СтатусыЭД.Отправлен)
						
						// Для CML документов последний статус.
						Или (ТекущийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
						И НЕ ЭтоCMLДокумент(РеквизитыФайлаЭД.ВладелецФайла)) Тогда
						
						Если ЕстьНеотправленноеПодтверждение(РеквизитыФайлаЭД.ВладелецФайла, ВозвращаемоеЗначение) Тогда
							Возврат ВозвращаемоеЗначение;
						КонецЕсли;
						
					КонецЕсли;
					
					
				КонецЕсли;
				
				МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
				Если МассивСтатусов.Количество() > 0 Тогда
					
					ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
					Если ИндексТекущегоСтатуса = Неопределено Тогда
					ИначеЕсли ИндексТекущегоСтатуса + 1 = МассивСтатусов.Количество() Тогда
						СвойстваЭлектронногоДокумента = Новый Структура;
						СвойстваЭлектронногоДокумента.Вставить("ВидЭД", НастройкиОбмена.ВидЭД);
						СвойстваЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД", НастройкиОбмена.ТипЭлементаВерсииЭД);
						Если ТекущийСтатус = Перечисления.СтатусыЭД.Утвержден 
							И НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий 
							И НастройкиОбмена.ИспользоватьПодпись
							И НастройкиОбмена.ТребуетсяПодтверждение
							И ЭтоТитулФНС(СвойстваЭлектронногоДокумента)
							И Не ВторойТитулПодписан(РеквизитыФайлаЭД.Ссылка) Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						Иначе
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
							
						КонецЕсли;
					Иначе
						СледующийСтатус = МассивСтатусов[ИндексТекущегоСтатуса + 1];
						Если СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаУтверждении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ЧастичноПодписан Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.НаПодписи;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							И Не ЭтоПрямойОбмен(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыФайлаЭД.ВладелецФайла, "СпособОбменаЭД")) Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПереданОператору Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПередачаОператору;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Отправлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.Доставлен
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ДоставленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении;
							
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует таблицу сведений о форматах электронных документов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - состав и типы колонок описаны в макете Обработка.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//                    Дополняется служебной колонкой "Действует" типа Булево.
//
Функция ФорматыЭлектронныхДокументов() Экспорт

	ТекущаяДата = ТекущаяДатаСеанса();
	
	Результат = ОбменСКонтрагентамиПовтИсп.СведенияОФорматахЭлектронныхДокументов();
	Если Результат.Колонки.Найти("Действует") = Неопределено Тогда
		Результат.Колонки.Добавить("Действует", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаФормата Из Результат Цикл
		// Проставим признак действия формата
		Если Не СтрокаФормата.Отключен
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаНачалаДействия) 
				ИЛИ СтрокаФормата.ДатаНачалаДействия <= ТекущаяДата)
			И (НЕ ЗначениеЗаполнено(СтрокаФормата.ДатаОкончанияДействия) 
				ИЛИ КонецДня(СтрокаФормата.ДатаОкончанияДействия) >= ТекущаяДата) Тогда
			СтрокаФормата.Действует = Истина;
		Иначе
			СтрокаФормата.Действует = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаЭД

// Отправка сформированных электронных документов.
//
// Параметры:
//  СоответствиеСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
// 
// Возвращаемое значение:
//  Число - количество отправленных документов.
//
Функция ОтправкаСформированныхЭД(СоответствиеСоглашенийИСтруктурСертификатов = Неопределено) Экспорт
	
	Результат = 0;
	// Создание и заполнение документов ПакетыЭД
	ГотовыеКОтправкеПакеты = ОпределитьПодготовленныеКОтправкеЭД();
	Если ЗначениеЗаполнено(ГотовыеКОтправкеПакеты) Тогда
		Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(ГотовыеКОтправкеПакеты,
			СоответствиеСоглашенийИСтруктурСертификатов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение новых электронных документов на основе заведенных соглашений об обмене.
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - соглашения и сертификаты.
//  ПовторноеПолучение - Булево - признак повторного получения.
// 
// Возвращаемое значение:
//  Структура - данные по результатам получения электронных документов.
//
Функция ПолучитьНовыеЭД(СоотвСоглашенийИСтруктурСертификатов = Неопределено, ПовторноеПолучение = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура("МассивПакетовЭД, ВызватьОповещение, Профили",
		Новый Массив, Ложь, Новый Массив);
		
	Профили = СтруктураВозврата.Профили;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получаем документы из сервисов операторов ЭДО.
	ОбменСКонтрагентамиВнутренний.ПолучитьНовыеЭДОператораЭДО(СтруктураВозврата,
		СоотвСоглашенийИСтруктурСертификатов, , ПовторноеПолучение);
		
	Если СтруктураВозврата.Свойство("ИдентификаторыЭДО") Тогда
		ОчиститьИдентификаторыЭДО(СтруктураВозврата.ИдентификаторыЭДО);
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - Объект, Ссылка - объект либо ссылка документа/справочника-источника.
//  ФорматCML - Булево - если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//              в параметрах должны быть указаны соответствующие виды ЭД.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  БыстрыйОбмен - Булево - признак того, что не будут использоваться УПД и УКД.
//
// Возвращаемое значение:
//  Структура - параметры источника, необходимые для определения
//              настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//              Контрагент, СоглашениеЭД или Организация.
//
Функция ЗаполнитьПараметрыЭДПоИсточнику(Источник, ФорматCML = Ложь, ВидЭД = Неопределено, БыстрыйОбмен = Ложь) Экспорт
	
	ПараметрыЭД = СтруктураПараметровЭД();
	
	ТипИсточника = ТипЗнч(Источник);
	
	СправочникОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульКоммерческиеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений =
			МодульКоммерческиеПредложенияСлужебный.ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений(Источник);
	Иначе
		ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоКоммерческоеПредложение = МодульПодсистемы.ЭтоКоммерческоеПредложениеКлиенту(Источник);
	Иначе
		ЭтоКоммерческоеПредложение = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		ЭтоЗапросКоммерческогоПредложенияОтКлиента = МодульПодсистемы.ЭтоЗапросКоммерческогоПредложенияОтКлиента(Источник);
	Иначе
		ЭтоЗапросКоммерческогоПредложенияОтКлиента = Ложь;
	КонецЕсли;
	
	КоммерческоеПредложениеКлиенту =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту";
	
	ЗапросКоммерческогоПредложенияОтКлиента =
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
	ЗначенияРеквизитовИсточника = Новый Структура;
	РеквизитыИсточника = Новый Массив;
	Если ТипИсточника = Тип("СправочникСсылка.НастройкиЭДО")
		ИЛИ ТипИсточника = Тип("СправочникОбъект.НастройкиЭДО") Тогда
		
		ПараметрыЭД.ВидЭД     = Перечисления.ВидыЭД.КаталогТоваров;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.СоглашениеЭД  = Источник.Ссылка;
		Если Не Источник.ЭтоИнтеркампани Тогда
			РеквизитыИсточника.Добавить("Контрагент");
			РеквизитыИсточника.Добавить("Организация");
			РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("СправочникСсылка." + СправочникОрганизации)
		Или ТипИсточника = Тип("СправочникОбъект." + СправочникОрганизации) Тогда
		
		ПараметрыЭД.ВидЭД = "РеквизитыОрганизации";
		ПараметрыЭД.Организация = Источник;
		ПараметрыЭД.Вставить("РеквизитыОрганизации", Истина);
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументВходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("ПрикладнойВидЭД");
		РеквизитыИсточника.Добавить("ТипДокумента");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыИсточника.Добавить("ВидЭД");
		РеквизитыИсточника.Добавить("ПрикладнойВидЭД");
		РеквизитыИсточника.Добавить("ТипДокумента");
		РеквизитыИсточника.Добавить("Контрагент");
		РеквизитыИсточника.Добавить("Организация");
		РеквизитыИсточника.Добавить("ДоговорКонтрагента");
		
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
	ИначеЕсли ЭтоОснованиеЭлектронногоДокументаПоЗапросуКоммерческихПредложений Тогда
		
		МодульКоммерческиеПредложенияСлужебный.ЗаполнитьПараметрыЭлектронногоДокументаПоОснованию(Источник, ПараметрыЭД);
		
	ИначеЕсли ЭтоКоммерческоеПредложение
		И ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеКлиенту) Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(Источник, ПараметрыЭД);
	ИначеЕсли ЭтоЗапросКоммерческогоПредложенияОтКлиента
		И ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
		
		МодульДокумента = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульДокумента.ЗаполнитьПараметрыЭлектронногоДокумента(Источник, ПараметрыЭД);
		
	Иначе
		ПараметрыИсточника = Новый Структура;
		ПараметрыИсточника.Вставить("ВидЭД");
		ПараметрыИсточника.Вставить("НаправлениеЭД");
		ПараметрыИсточника.Вставить("Организация");
		ПараметрыИсточника.Вставить("Контрагент");
		ПараметрыИсточника.Вставить("ДоговорКонтрагента");
		ПараметрыИсточника.Вставить("СоглашениеЭД");
		ПараметрыИсточника.Вставить("Партнер");
		
		ОбменСКонтрагентамиПереопределяемый.ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыИсточника, ФорматCML);
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, ПараметрыИсточника);
		
		Если НЕ ЗначениеЗаполнено(ПараметрыИсточника.ВидЭД) Тогда
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("ВидЭлектронногоДокумента");
			ПараметрыИсточника.Вставить("Входящий");
			ПараметрыИсточника.Вставить("Организация");
			ПараметрыИсточника.Вставить("Контрагент");
			ПараметрыИсточника.Вставить("ДоговорКонтрагента");
			ПараметрыИсточника.Вставить("Партнер");
			
			ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПараметровПрикладногоЭлектронногоДокументаПоИсточнику(
				Источник, ПараметрыИсточника);
			
			Если ЗначениеЗаполнено(ПараметрыИсточника.ВидЭлектронногоДокумента) Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЭД, ПараметрыИсточника);
				
				ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД;
				ПараметрыЭД.ПрикладнойВидЭД = ПараметрыИсточника.ВидЭлектронногоДокумента;
				Если ПараметрыИсточника.Входящий = Истина Тогда
					ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				Иначе
					ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыИсточника.Количество() Тогда
		ЗначенияРеквизитовИсточника = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(Источник, РеквизитыИсточника);
		ЗаполнитьЗначенияСвойств(ПараметрыЭД, ЗначенияРеквизитовИсточника);
		
		Если ЗначенияРеквизитовИсточника.Свойство("НастройкаЭДО") Тогда
			ПараметрыЭД.СоглашениеЭД  = ЗначенияРеквизитовИсточника.НастройкаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.Контрагент) 
		И Не ЗначениеЗаполнено(ПараметрыЭД.Организация) Тогда
		ДополнитьПараметрыЭД(Источник, ПараметрыЭД);
	КонецЕсли;
	
	Если БыстрыйОбмен Тогда
		Возврат ПараметрыЭД;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД)
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД() Тогда
	
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(?(ОбщегоНазначения.ЭтоСсылка(ТипИсточника), Источник, Источник.Ссылка));
	
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(МассивСсылок);
		Для Каждого ТекЭл Из МассивСсылок Цикл
			
			СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
			Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
				Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
					ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВладелецФайла");
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецЭД, "ВидЭД");
				Иначе
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоПередаточногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ПараметрыЭД.Вставить("ВидПервичногоДокумента", ПараметрыЭД.ВидЭД);
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УПД;
		КонецЕсли;
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УПД;
		КонецЕсли;
	КонецЕсли;
	Если ОбменСКонтрагентами.ИспользованиеУниверсальногоКорректировочногоДокумента(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента) Тогда
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УКД;
		КонецЕсли;
		
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УКД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Изменение реквизитов элемента справочника ЭДПрисоединенныеФайлы.
//
// Параметры:
//  ДобавленныйФайл - СправочникСсылка - ссылка на элемент справочника с электронным документом.
//  СтруктураЭД - Структура - структура параметров, которые необходимо заполнить в справочнике.
//  ПоверятьОбязательныеРеквизиты - Булево - требуется проверка обязательных реквизитов.
//
Процедура ИзменитьПоСсылкеПрисоединенныйФайл(
				ДобавленныйФайл,
				СтруктураЭД,
				ПоверятьОбязательныеРеквизиты = Истина) Экспорт
				
	Если Не ЗначениеЗаполнено(ДобавленныйФайл) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
	
		Если ПоверятьОбязательныеРеквизиты Тогда
			ТекстОшибки = "";
			СтруктураОбязательныхПолей = Новый Структура("ВладелецЭД, ТипЭлементаВерсииЭД, НаправлениеЭД");
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = Неопределено;
				Если СтруктураЭД.Свойство(КлючЗначение.Ключ, Значение) Тогда
					Если НЕ ЗначениеЗаполнено(Значение) Тогда
						Текст = НСтр("ru = 'Значение параметра <%1> не заполнено.'");
						Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
						ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
					КонецЕсли;
				Иначе
					Текст = НСтр("ru = 'Не передан обязательный параметр <%1>.'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КлючЗначение.Ключ);
					ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстСообщения = НСтр("ru = 'Ошибка заполнения доп.свойств электронного документа.
				|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекстОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.ПриИзмененииПрисоединенногоФайла(ДобавленныйФайл, СтруктураЭД);
		
		Блокировка = Новый БлокировкаДанных;
		МетаданныеОбъекта = ДобавленныйФайл.Метаданные();
		ЭлементБлокировки = Блокировка.Добавить(МетаданныеОбъекта.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДобавленныйФайл);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ФайлОбъект = ДобавленныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		
		ПринудительнаяСменаСостоянияВерсии = Ложь;
		
		Если СтруктураЭД.Свойство("Автор") Тогда
			ФайлОбъект.Автор = СтруктураЭД.Автор;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияСтатусаЭД = СтруктураЭД.ДатаИзмененияСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаИзмененияВнешнегоСтатусаЭД") Тогда
			ФайлОбъект.ДатаИзмененияВнешнегоСтатусаЭД = СтруктураЭД.ДатаИзмененияВнешнегоСтатусаЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаМодификацииУниверсальная") Тогда
			ФайлОбъект.ДатаМодификацииУниверсальная = СтруктураЭД.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаСоздания") Тогда
			ФайлОбъект.ДатаСоздания = СтруктураЭД.ДатаСоздания;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем") Тогда
			ФайлОбъект.ДатаФормированияЭДОтправителем = СтруктураЭД.ДатаФормированияЭДОтправителем;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительнаяИнформация") Тогда
			ФайлОбъект.ДополнительнаяИнформация = СтруктураЭД.ДополнительнаяИнформация;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ДополнительныеРеквизиты") Тогда
			Если ЗначениеЗаполнено(ФайлОбъект.ДополнительныеРеквизиты) Тогда
				ДополнительныеРеквизиты = ФайлОбъект.ДополнительныеРеквизиты.Получить();
				Если Не ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
					ДополнительныеРеквизиты = Новый Структура;
				КонецЕсли;
			Иначе
				ДополнительныеРеквизиты = СтруктураЭД.ДополнительныеРеквизиты;
			КонецЕсли;
			
			Для Каждого КлючЗначение Из СтруктураЭД.ДополнительныеРеквизиты Цикл
				ДополнительныеРеквизиты.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
			ФайлОбъект.ДополнительныеРеквизиты = Новый ХранилищеЗначения(СтруктураЭД.ДополнительныеРеквизиты);
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Изменил") Тогда
			ФайлОбъект.Изменил = СтруктураЭД.Изменил;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Наименование") Тогда
			ФайлОбъект.Наименование = СтруктураЭД.Наименование;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаименованиеФайла") Тогда
			ФайлОбъект.НаименованиеФайла = СтруктураЭД.НаименованиеФайла;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("НаправлениеЭД") Тогда
			ФайлОбъект.НаправлениеЭД = СтруктураЭД.НаправлениеЭД;
		КонецЕсли;
						
		Если СтруктураЭД.Свойство("НомерЭД") Тогда 
			ФайлОбъект.НомерЭД = СтруктураЭД.НомерЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("Описание") Тогда
			ФайлОбъект.Описание = СокрЛП(СтруктураЭД.Описание);
		Иначе
			ФайлОбъект.Описание = "";
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ОтправительЭД) И СтруктураЭД.Свойство("Отправитель") Тогда
			ФайлОбъект.ОтправительЭД = СтруктураЭД.Отправитель;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПодписанныеДанные") Тогда
			ХранилищеПодписанныхДанных = Новый ХранилищеЗначения(СтруктураЭД.ПодписанныеДанные);
			ФайлОбъект.ПодписанныеДанные = ХранилищеПодписанныхДанных;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФайлОбъект.ПолучательЭД) И СтруктураЭД.Свойство("Получатель") Тогда
			ФайлОбъект.ПолучательЭД = СтруктураЭД.Получатель;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("Расширение") Тогда
			ФайлОбъект.Расширение = СтруктураЭД.Расширение;
		КонецЕсли;
				
		Если СтруктураЭД.Свойство("СтатусЭД") Тогда
			
			Если ФайлОбъект.СтатусЭД <> СтруктураЭД.СтатусЭД Тогда
				ПринудительнаяСменаСостоянияВерсии = Истина;
			КонецЕсли;
			
			ФайлОбъект.СтатусЭД = СтруктураЭД.СтатусЭД;
			Если Не СтруктураЭД.Свойство("ДатаИзмененияСтатусаЭД") Тогда
				ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьСостояниеЭД = Неопределено;
		Если СтруктураЭД.Свойство("ОбновитьСостояниеЭД", ОбновитьСостояниеЭД)
			И Не ОбновитьСостояниеЭД = Неопределено Тогда
			ПринудительнаяСменаСостоянияВерсии = ОбновитьСостояниеЭД;
		КонецЕсли;
		
		ОтклонениеАннулирования = Ложь;
		Если СтруктураЭД.Свойство("ОтклонениеАннулирования") Тогда
			ОтклонениеАннулирования = Истина;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТекстУточнения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ТекстУточнения);
		КонецЕсли;  
		
		Если СтруктураЭД.Свойство("ПричинаОтклонения") Тогда
			ЗаписатьПричинуОтклонения(ФайлОбъект.ВладелецФайла,СтруктураЭД.ПричинаОтклонения);
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
			ФайлОбъект.ТипЭлементаВерсииЭД = СтруктураЭД.ТипЭлементаВерсииЭД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИД") Тогда
			ФайлОбъект.УникальныйИД = СтруктураЭД.УникальныйИД;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("УникальныйИДВнешний") Тогда
			ФайлОбъект.УникальныйИДВнешний = СтруктураЭД.УникальныйИДВнешний;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ЭлектронныйДокументВладелец") Тогда
			ФайлОбъект.ЭлектронныйДокументВладелец = СтруктураЭД.ЭлектронныйДокументВладелец;
		КонецЕсли;
		
		Если СтруктураЭД.Свойство("ПредставлениеПрогрессаПодписания") Тогда
			ФайлОбъект.ПредставлениеПрогрессаПодписания = СтруктураЭД.ПредставлениеПрогрессаПодписания;
		КонецЕсли;
		
		ДополнительныеСвойства = Неопределено;
		Если СтруктураЭД.Свойство("ДополнительныеСвойства", ДополнительныеСвойства) 
			И ЗначениеЗаполнено(ДополнительныеСвойства) Тогда
			Для Каждого КлючЗначение Из ДополнительныеСвойства Цикл
				ФайлОбъект.ДополнительныеСвойства.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		ВерсияФорматаПакета = Неопределено;
		СтруктураЭД.Свойство("ВерсияФорматаПакета", ВерсияФорматаПакета);
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ВерсияФорматаПакета", ВерсияФорматаПакета);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ПринудительнаяСменаСостоянияВерсии", ПринудительнаяСменаСостоянияВерсии);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОбновитьВерсиюЭД", Истина);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ОтклонениеАннулирования", ОтклонениеАннулирования);

		ФайлОбъект.Записать();
		ФайлОбъект.Разблокировать();
				
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Возвращает структуру данных файла, полученную из одноименной функции общего модуля ПрисоединенныеФайлы.
// В полученной структуре данных меняет значение элемента с ключом Наименование на полное наименование,
// хранящееся в реквизите элемента справочника НаименованиеФайла, так же заново формирует значение элемента ИмяФайла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - Ссылка на присоединенный файл.
//  ИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор формы, используется при 
//                                                 получении двоичных данных файла.
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина, если передать Ложь, то ссылка на 
//                                            двоичные данные не будет получена, что существенно ускорит выполнение
//                                            для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура - структура со свойствами:
//    * СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    * ОтносительныйПуть                  - Строка - путь к файлу.
//    * ДатаМодификацииУниверсальная       - Дата - дата изменения.
//    * ИмяФайла                           - Строка - имя файла.
//    * Наименование                       - Строка - соответствует значению реквизита элемента справочника НаименованиеФайла.
//    * Расширение                         - Строка - расширение файла.
//    * Размер                             - Число - размер файла.
//    * Редактирует                        - СправочникСсылка.Пользователи - пользователь.
//    * ПодписанЭП                         - Булево - признак подписи.
//    * Зашифрован                         - Булево - признак шифрования.
//    * ФайлРедактируется                  - Булево - признак редактирования.
//    * ФайлРедактируетТекущийПользователь - Булево - признак редактирования текущим пользователем.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл,
		ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда 
		
		СтруктураПараметров = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "ВладелецФайла, УникальныйИД, НаименованиеФайла");
		Если ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФайла) Тогда
			ДанныеФайла.Наименование = СокрЛП(СтруктураПараметров.НаименованиеФайла);
			ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
		Иначе
			ВидЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ВладелецФайла,"ВидЭД");
			Если ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Или ВидЭД = Перечисления.ВидыЭД.УКД Тогда
				СтрокаУИД = СтруктураПараметров.УникальныйИД;
				Наименование = ДанныеФайла.Наименование;
				ПозицияУИД = СтрНайти(Наименование, "_" + Лев(СтрокаУИД, 35));
				Если ПозицияУИД > 0 Тогда
					ДанныеФайла.Наименование = Лев(Наименование, ПозицияУИД) + СтрокаУИД;
					ДанныеФайла.ИмяФайла = ДанныеФайла.Наименование + "." + ДанныеФайла.Расширение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Определяет, нужно ли выводить предупреждение по формату в электронном документе, а также формирует необходимые
// для вывода предупреждения данные.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ.
// 
// Возвращаемое значение:
//  Структура - содержит ключи:
//               * Выводить - Булево;
//               * ТекстПредупреждения - Строка.
//
Функция ПараметрыВыводаПредупреждения(ЭлектронныйДокумент) Экспорт

	Результат = Новый Структура("Выводить, ТекстПредупреждения", Ложь, "");
	
	ПрисоединенныйФайлСсылка = ПрисоединенныйФайл(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		РеквизитыЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД");
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, 
			"ДатаФормированияЭДОтправителем");
		
		ВидЭД = РеквизитыЭлектронногоДокумента.ВидЭД;
		
		// Сохраним электронный документ в файл.
		ПараметрыФайла = Неопределено;
		ОбменСКонтрагентамиВнутренний.СохранитьЭДВФайл(ПрисоединенныйФайлСсылка, ПараметрыФайла);
		
		Если ЗначениеЗаполнено(ПараметрыФайла.ИмяФайла) Тогда
			ОписаниеОшибки = "";
			ДанныеФайла = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ПараметрыФайла.ИмяФайла, ОписаниеОшибки);
			
			Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
				ДанныеФайла = ДанныеФайла.ДанныеДокумента;
			КонецЕсли;
			
			Если ДанныеФайла <> Неопределено Тогда
				ПространствоИмен = ДанныеФайла.Тип().URIПространстваИмен;
				ФорматЭлектронногоДокумента = ФорматПоПространствуИмен(ВидЭД, ПространствоИмен);
				
				СведенияОФормате = СведенияОФормате(ВидЭД, ФорматЭлектронногоДокумента);
				
				Если СведенияОФормате <> Неопределено 
					И ЗначениеЗаполнено(СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента) Тогда
					
					Если Не ЗначениеЗаполнено(СведенияОФормате.УсловиеВыводаПредупреждения) Тогда
						Результат.Выводить = Истина;
					ИначеЕсли СведенияОФормате.УсловиеВыводаПредупреждения = "ДатаФормированияЭлектронногоДокумента" Тогда
						Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
							И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < РеквизитыФайла.ДатаФормированияЭДОтправителем Тогда
							Результат.Выводить = Истина;
						КонецЕсли;
					КонецЕсли;
					
					// Предупреждение нужно выводить. Будем формировать текст.
					Если Результат.Выводить Тогда
						Результат.ТекстПредупреждения = ТекстПредупрежденияДляВходящегоДокумента(СведенияОФормате);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область РаботаСФайлами

// Получение имени файла для выгрузки ФНС
//
// Параметры:
//  СтруктураИмени - Структура - параметры для формирования.
// 
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция ФНСИмяФайла(СтруктураИмени) Экспорт
	
	ИмяФайла = СтруктураИмени.Префикс + "_" + СтруктураИмени.ИДПолучателя + "_"
		+ СтруктураИмени.ИДОтправителя + "_" + СтруктураИмени.ГГГГММДД + "_" + СтруктураИмени.УникальныйИдентификатор;
	
	Возврат ИмяФайла;
	
КонецФункции

// Возврат имени временного файла.
//
// Параметры:
//  Расширение - Строка - строка расширения файла.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ТекущееИмяВременногоФайла(Расширение = "") Экспорт
	
	ИмяВременногоФайла = "";
	ОбменСКонтрагентамиПереопределяемый.ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение);
	Если НЕ ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	КонецЕсли;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

#КонецОбласти

#Область СравнениеЭД

// Готовит файлы табличных документов MXL по данным электронных документов.
//
// Параметры:
//  МассивЭД - Массив - массив ссылок на электронные документы, которые необходимо обработать.
//
// Возвращаемое значение:
//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL.
//
Функция ПодготовитьВременныеФайлыПросмотраЭД(МассивЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПереченьВременныхФайлов = Новый Массив;
	
	Для Каждого ЭД Из МассивЭД Цикл
		
		ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД, Новый УникальныйИдентификатор, Истина);
		Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
			
			ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
			Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
				ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
			Иначе
				ИмяФайла = ТекущееИмяВременногоФайла("xml");
			КонецЕсли;
			ДанныеЭД.Записать(ИмяФайла);
			
			ФайлыАрхива = Новый Массив;
			Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
				
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("proc", ЭД.УникальныйИдентификатор());
				ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(ИмяФайла, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'"));
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				
			ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
				ФайлДанных = Новый Файл(ИмяФайла);
				ФайлыАрхива.Добавить(ФайлДанных);
			КонецЕсли;
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхива Цикл
				ПараметрыПечати = Новый Структура;
				ПараметрыПечати.Вставить("ИД", ЭД.УникальныйИдентификатор());
				ТабличныйДокумент = ОбменСКонтрагентамиВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
					ЭД.НаправлениеЭД, ПараметрыПечати);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					АдресФайлаДанных = ПоместитьВоВременноеХранилище(ТабличныйДокумент, ЭД.УникальныйИдентификатор());
					НазваниеЭД = ПолучитьПредставлениеЭД(ЭД.Ссылка);
					
					СтруктураИменФайлов = Новый Структура("НазваниеЭД, АдресФайлаДанных", НазваниеЭД, АдресФайлаДанных);
					ПереченьВременныхФайлов.Добавить(СтруктураИменФайлов);
				КонецЕсли;
				
				Прервать; // Должен быть только один файл данных.
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
		КонецЕсли;
	КонецЦикла;

	Возврат ПереченьВременныхФайлов;
	
КонецФункции

// Получение дополнительных данных электронного документа.
//
// Параметры:
//  ЭДВладелец - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Функция ВыборкаДопДанныеЭД(ЭДВладелец) Экспорт
	
	// Для одного ЭД может быть сформирован один ЭД-доп.данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДополнительныйЭД)";

	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ЭДВладелец);

	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Сохранение файлов дополнительных данных электронного документа.
//
// Параметры:
//  ПрисоединенныйФайл - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//  ИмяКаталога - Строка - каталог сохранения.
//  СтруктураФайловЭД - Структура - параметры файлов электронных документов.
//
Процедура СохранитьФайлыДопДанныхЭД(ПрисоединенныйФайл, ИмяКаталога, СтруктураФайловЭД) Экспорт
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		// Для одного ЭД может быть сформирован один ЭД-доп.данных.
		Выборка = ВыборкаДопДанныеЭД(ПрисоединенныйФайл);

		Если Выборка.Следующий() Тогда
			Файл = Новый Файл(ИмяКаталога);
			Если НЕ Файл.Существует() Тогда
				СоздатьКаталог(ИмяКаталога);
			КонецЕсли;
			ДанныеФайла = ПолучитьДанныеФайла(Выборка.Ссылка);
			ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
		
			СтруктураФайловЭД.Вставить("ДополнительныйФайл", ИмяПолучаемогоФайла);
			
			// Необходимо предусмотреть заполнение подписей для дополнительного файла в дереве транспортной информации.
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для проверки имени файла на наличие некорректных символов.
// Алгоритм взят с небольшими изменениями из процедуры клиентского общего модуля "ФайловыеФункции".
//
// Параметры:
//  СтрИмяФайла - Строка - проверяемое имя файла.
//  УдалятьНекорректные - Булево - удалять или нет некорректные символы из переданной строки.
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция КорректноеИмяФайла(Знач СтрИмяФайла, УдалятьНекорректные = Ложь) Экспорт
	
	// Перечень запрещенных символов взят отсюда: http://support.microsoft.com/kb/100108/ru
	// при этом были объединены запрещенные символы для файловых систем FAT и NTFS.
	СтрИсключения = """/\[]:;|=,?*<>№";
	Результат = Истина;
	
	Для Сч = 1 По СтрДлина(СтрИсключения) Цикл
		Символ = Сред(СтрИсключения, Сч, 1);
		Если СтрНайти(СтрИмяФайла, Символ) <> 0 Тогда
			Если УдалятьНекорректные Тогда
				СтрИмяФайла = СтрЗаменить(СтрИмяФайла, Символ, "");
			Иначе
				Результат = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Результат Тогда
		Текст = НСтр("ru = 'В имени файла не должно быть следующих символов: %1
		|Имя файла: %2'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрИсключения, СтрИмяФайла);
		ВызватьИсключение ТекстОшибки;
	Иначе
		Возврат СтрИмяФайла;
	КонецЕсли;
	
КонецФункции

// Удаление лишнего слэша в пути.
//
// Параметры:
//  Путь - Строка - путь к каталогу (файлу).
//
Процедура УдалитьЛишнийСлэшВПути(Путь) Экспорт
	
	Пока СтрНайти(Путь, "\\") > 0 Цикл
		
		Путь = СтрЗаменить(Путь, "\\", "\");
		
	КонецЦикла;
	
КонецПроцедуры

// Определение настройки обмена электронными документами по параметрам.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры поиска.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов для проверки.
// 
// Возвращаемое значение:
//  Структура - данные настройки обмена.
//
Функция ОпределитьНастройкиОбменаЭД(СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено, Отказ = Ложь) Экспорт
	
	НастройкиОбменаЭД = Неопределено;
	
	НаправлениеЭД = "";
	ВидЭД = "";
	Контрагент = "";
	Если СтруктураПараметров.Свойство("НаправлениеЭД", НаправлениеЭД)
		И СтруктураПараметров.Свойство("ВидЭД", ВидЭД)
		И СтруктураПараметров.Свойство("Контрагент", Контрагент)
		И ЗначениеЗаполнено(НаправлениеЭД) И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(Контрагент) Тогда
		
		Запрос  = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("НаправлениеЭД",	НаправлениеЭД);
		
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ПроверитьСозданиеНастроекИнтеркампани(СтруктураПараметров.Организация,
				СтруктураПараметров.Контрагент, СтруктураПараметров.ВидЭД, Отказ);
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидЭД",      ВидЭД);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		ДоговорКонтрагента = "";
		Если СтруктураПараметров.Свойство("ДоговорКонтрагента", ДоговорКонтрагента) И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
		КонецЕсли;
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		
		ВидЭДВладельца = Неопределено;
		Если СтруктураПараметров.Свойство("ВидЭДВладельца", ВидЭДВладельца) Тогда
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Истина);
		Иначе
			Запрос.УстановитьПараметр("ЭтоСлужебныйЭД", Ложь);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭДВладельца",				ВидЭДВладельца);
		Запрос.УстановитьПараметр("ДокументФНС",				ЭтоФНС(ВидЭДВладельца));
		Запрос.УстановитьПараметр("ПользовательНеУказан",		Пользователи.СсылкаНеуказанногоПользователя());
		
		Организация = "";
		ВыполнятьЗапрос = Истина;
		Если СтруктураПараметров.Свойство("Организация", Организация) И ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("Организация", Организация);
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				Партнер = "";
				СтруктураПараметров.Свойство("Партнер", Партнер);
				Запрос.УстановитьПараметр("Партнер", Партнер);
			КонецЕсли;
			ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(Запрос.Текст);
			ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовЭД(Запрос);
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			Запрос.МенеджерВременныхТаблиц.Закрыть();
			ВыполнятьЗапрос = Ложь;
			Если РезультатЗапроса[2].Пустой() Тогда
				// Поищем настройку ЭДО без указания договора контрагента.
				ДоговорКонтрагента = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("ДоговорыКонтрагентов");
				Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
				ВыполнятьЗапрос = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.Текст) Тогда
			
			Если ВыполнятьЗапрос Тогда
				ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовЭД(Запрос);
				РезультатЗапроса = Запрос.ВыполнитьПакет();
			КонецЕсли;
			ТЗ = РезультатЗапроса[2].Выгрузить();
			
			Если Не ТЗ.Количество() = 0 Тогда
				ТекущаяНастройка = ТЗ[0];
				
				НастройкиОбменаЭД = Новый Структура;
				НастройкиОбменаЭД.Вставить("СертификатДоступен", Ложь);
				// Если с клиента были переданы установленные сертификаты криптографии,
				// то надо выбрать настройку с этими сертификатами.
				Если МассивОтпечатковСертификатов <> Неопределено Тогда

					Для Каждого СтрокаТЗ Из ТЗ Цикл
						Если СтрокаТЗ.Подписывать Тогда
							Если МассивОтпечатковСертификатов = Неопределено ИЛИ МассивОтпечатковСертификатов.Количество() = 0 Тогда
								Прервать;
							Иначе
								Если МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииПолучателяДляПодписи.Отпечаток) <> Неопределено
									ИЛИ МассивОтпечатковСертификатов.Найти(СтрокаТЗ.СертификатОрганизацииДляПодтверждения.Отпечаток) <> Неопределено Тогда
									
									ТекущаяНастройка = СтрокаТЗ;
									НастройкиОбменаЭД.Вставить("СертификатДоступен", Истина);
									Прервать;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
					НастройкиОбменаЭД.Вставить(ТекКолонка.Имя, ТекущаяНастройка[ТекКолонка.Имя]);
				КонецЦикла;
				
				Если НастройкиОбменаЭД.Свойство("Подписывать") Тогда
					ФлагПодписи = НастройкиОбменаЭД.Подписывать;
				Иначе
					ФлагПодписи = Ложь;
				КонецЕсли;
				НастройкиОбменаЭД.Вставить("Подписывать", ФлагПодписи);
				
				ВидПервичногоДокумента = Неопределено;
				Если СтруктураПараметров.Свойство("ВидПервичногоДокумента", ВидПервичногоДокумента) Тогда
					НастройкиОбменаЭД.Вставить("ВидПервичногоДокумента", ВидПервичногоДокумента);
				КонецЕсли;
				
				ПрикладнойВидЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ПрикладнойВидЭД");
				НастройкиОбменаЭД.Вставить("ПрикладнойВидЭД", ПрикладнойВидЭД);
				
				ПрикладнойВидЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ТипДокумента");
				НастройкиОбменаЭД.Вставить("ТипДокумента", ПрикладнойВидЭД);
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		// Если заполнены не все обязательные реквизиты, то нельзя утверждать, что нет соглашения об обмене.
		НастройкиОбменаЭД = "";
	КонецЕсли;
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка, Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
// 
// Возвращаемое значение:
//  Структура    - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Функция ЗначенияРеквизитов(Ссылка, ИменаРеквизитов) Экспорт
	
	СтруктураДанных = "";
	ОбменСКонтрагентамиПереопределяемый.ПолучитьЗначенияРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных);
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		СтруктураДанных = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Меняет состояние ЭД документа ИБ
//
// Параметры:
//   ИзменяемыеДокументы - массив - ссылка на документ ИБ
//   НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - значение нового состояния
//   ИзменяемыеСостояния - Массив- ПеречислениеСсылка.СостоянияВерсийЭД - Массив состояний, менять которые не нужно.
//
Процедура ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние, ИзменяемыеСостояния = Неопределено,
	ВыполняетсяОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	Если Не ТипЗнч(ИзменяемыеДокументы) = Тип("Массив") Тогда
		
		ДокументыИБ = Новый Массив;
		ДокументыИБ.Добавить(ИзменяемыеДокументы);
	Иначе
		ДокументыИБ = ИзменяемыеДокументы;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого ДокументИБ Из ДокументыИБ Цикл
			Если Не ИзменяемыеСостояния = Неопределено Тогда
				Если ИзменяемыеСостояния.Найти(ДокументИБ.СостояниеЭДО) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ДокументИБ);
			ДокументОбъект.СостояниеЭДО = НовоеСостояние;
			ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ДокументОбъект.ОбменДанными.Загрузка = ВыполняетсяОбновлениеИнформационнойБазы;
			ДокументОбъект.Записать();
			СводнаяИнформацияПоСтатусу = Новый Структура;
			СводнаяИнформацияПоСтатусу.Вставить("СНашейСтороны", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			СводнаяИнформацияПоСтатусу.Вставить("СоСтороныДругогоУчастника", Перечисления.СводныеСостоянияЭД.ВсеВыполнено);
			ОбновитьВерсиюЭДВРегистре(ДокументИБ, НовоеСостояние, СводнаяИнформацияПоСтатусу);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область БСП_ЭлектроннаяПодпись

// Чтение текста из файла.
//
// Параметры:
//  ИмяФайла - Строка - имя файла.
//  Кодировка - КодировкаТекста - кодировка файла.
//  АвтоОпределениеКодировкиXML - Булево - признак автоопределения кодировки.
// 
// Возвращаемое значение:
//  Строка - текстовое содержимое файла.
//
Функция ПрочитатьТекстИзФайла(ИмяФайла, Кодировка = Неопределено, АвтоОпределениеКодировкиXML = Ложь) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ИмяФайла) Тогда
		ИмяФайлаНаДиске = ПолучитьИмяВременногоФайла();
		ПолучитьИзВременногоХранилища(ИмяФайла).Записать(ИмяФайлаНаДиске);
	Иначе
		ИмяФайлаНаДиске = ИмяФайла;
	КонецЕсли;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске, Кодировка);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоОпределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли СтрНайти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаНаДиске);
	
	Возврат ТекстИзФайла;
	
КонецФункции

// Загрузка строки XML в дерево значений.
//
// Параметры:
//  СтрокаXML - Строка - строка с данными XML
//  ОписаниеОшибки - Строка - возвращаемое сообщение об ошибке.
//  ЧтениеXML - ЧтениеXML - возвращаемый объект ЧтениеXML
//  ТекущийУзел - СтрокаДереваЗначений, Неопределено - строка дерева значений.
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - загруженная строка XML.
//
Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекущийУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекущийУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекущийУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовыйУзел = ТекущийУзел.Строки.Добавить();
				НовыйУзел.Имя = ЧтениеXML.Имя;
				НовыйУзел.Тип = "Э";
				НовыйУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовыйАтрибут = НовыйУзел.Строки.Добавить();
					НовыйАтрибут.Имя = ЧтениеXML.Имя;
					НовыйАтрибут.Тип = "А";
					НовыйАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовыйУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекущийУзел) = Тип("СтрокаДереваЗначений") И ТекущийУзел.Тип = "Э" Тогда
				ТекущийУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = НСтр("ru = 'Ошибка разбора XML:'") + " " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекущийУзел;
	КонецЕсли;
	
КонецФункции

// Получение билета на сайте интернет-поддержки.
//
// Параметры:
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ПоказыватьОшибки - Булево - признак показа ошибок.
//  ПоказыватьОшибкуАутентификацииПриОтсутствииДанных - Булево - определяет, показывать ли ошибку аутентификации
//                                                      в случае, если не указан логин и пароль.
// 
// Возвращаемое значение:
//  Строка - контрольная строка для авторизации.
//
Функция БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, ПоказыватьОшибки = Истина,
	ПоказыватьОшибкуАутентификацииПриОтсутствииДанных = Истина) Экспорт
	
	Билет = "";
	ИнтернетПоддержкаПользователейПодключена = Истина;
	
	ТекстЗаголовкаСообщения = НСтр("ru = 'Невозможно подключиться к порталу интернет-поддержки по причине:'");
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
	
		Если ОбщегоНазначения.ПодсистемаСуществует("Тарификация") Тогда
			
			МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
			Если Не МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
				ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
				ОбменСКонтрагентамиКлиентСервер.ИдентификаторУслугиОбменаЭлектроннымиДокументами()) Тогда
			
				ОписаниеОшибки = НСтр("ru = 'Услуга ""Обмен электронными документами"" не подключена.
											|Необходимо:
											|Проверить наличие ИТС по рег. номеру;
											|Проверить окончание срока действия договора ИТС на портале.'");
				ТекстСообщения = "";
				Если ПоказыватьОшибки Тогда
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
					ОписаниеОшибки, ТекстСообщения);
					
				Возврат Билет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей") Тогда
		ОписаниеОшибки =
			НСтр("ru = 'Библиотека интернет поддержки пользователей не внедрена в конфигурацию.'");
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ОписаниеОшибки;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			ОписаниеОшибки, ТекстСообщения);
				
		Возврат Билет;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1C-EDO");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Результат.КодОшибки) Тогда
		Если Результат.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
			ИнтернетПоддержкаПользователейПодключена = Ложь;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если ПоказыватьОшибки Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не (Не ПоказыватьОшибкуАутентификацииПриОтсутствииДанных И Результат.КодОшибки = "НеверныйЛогинИлиПароль"
						И ДанныеАутентификации = Неопределено) Тогда
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + Результат.СообщениеОбОшибке;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			ТекстЗаголовкаСообщения, Результат.СообщениеОбОшибке);
	Иначе
		Билет = Результат.Тикет;
	КонецЕсли;
	
	Возврат Билет;
	
КонецФункции

#КонецОбласти

#Область Сервис1CЭДО

// Проверяет наличие доступа к веб-сервису 1С-ЭДО.
//
// Параметры:
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения.
//
// Возвращаемое значение:
//  Булево - наличие доступа к веб-сервису ФНС.
//
Функция ЕстьДоступКВебСервису1CЭДО(ВыводитьСообщения = Ложь) Экспорт
	
	Результат = Истина;
	
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО, 7);
	Попытка
		Соединение.Получить("GetInfo/1", ИмяФайлаРезультата);
	Исключение
		
		ТекстЗаголовкаСообщения = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка:'");
		
		ШаблонСообщения = НСтр("ru = '%1
		|Сервис 1С-ЭДО недоступен. Попробуйте чуть позже.'");
		
		ТекстСообщения = "";
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ТекстЗаголовкаСообщения
				+ Символы.ПС + СтрШаблон(ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		ПодробныйТекстОшибки = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			ПодробныйТекстОшибки, ТекстСообщения);
		
		Результат = Ложь;
		
	КонецПопытки;
	
	УдалитьФайлы(ИмяФайлаРезультата);
	
	Возврат Результат;
	
КонецФункции

// Формирует текст ошибки обращения к сервису 1С-ЭДО с рекомендациями для исправления.
//
// Параметры:
//  ТекстСообщения	 - Строка - краткая информация по ошибке. Подставляется в начало сообщения.
// 
// Возвращаемое значение:
//  Строка - полный текст с рекомендациями.
//
Функция ТекстОшибкиОбращенияКСервису(Знач ТекстСообщения) Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ШаблонСообщения = НСтр("ru = '%1
		|Необходимо:
		|Проверить наличие ИТС по рег. номеру;
		|Проверить окончание срока действия договора ИТС на сайте.'");
	Иначе
		ШаблонСообщения = НСтр("ru = '%1
		|Необходимо:
		|Проверить верность введения логина\пароля;
		|Проверить наличие ИТС по рег. номеру;
		|Проверить окончание срока действия договора ИТС на сайте;
		|Проверить актуальность платформы (доступ 80 и 443 порта);
		|Проверить авторизацию на сайте интернет-поддержки;
		|Добавить в исключения антивируса\брандмауэра платформы 1С.'");
	КонецЕсли;

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения);
		
	Возврат ТекстСообщения;

КонецФункции

#КонецОбласти

#Область Прочее

Функция СвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Если Структура.Свойство(ТекущееСвойство) Тогда
			Возврат Структура[ТекущееСвойство];
		Иначе
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			Возврат ЗначениеПоУмолчанию;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		Возврат СвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, ЗначениеПоУмолчанию);
		
	КонецЕсли;
	
КонецФункции

Процедура СформироватьДокумент(ФорматЭлектронногоДокумента, ДеревоРазбора, СтрокаОбъекта, ДокументСсылка, Контрагент, Записывать, ТекстСообщения, Отказ) Экспорт
	
	ЭтоПередачаРабот                = Ложь;
	ЭтоПередачаТоваров              = Ложь;
	УПДДокументОПередаче            = Ложь;
	УПДСчетФактура = Ложь;
	УКДДокументОбИзмененииСтоимости = Ложь;
	УКДКорректировочныйСчетФактура = Ложь;
	ЭтоФизЛицо                      = Ложь;
	ЭтоКоммерческоеПредложение       = Ложь;
	ЭтоЗапросКоммерческихПредложений = Ложь;
	
	ДанныеВыбранногоКонтрагента = Неопределено;
	
	ИмяРеквизитаКонтрагент = "Контрагент";
	Если СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаРезультатовРабот") Тогда
		
		ЭтоПередачаРабот = Истина;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		И ВРег(СтрокаОбъекта.ОписаниеОбъекта) = ВРег("ПередачаТоваров") Тогда
		
		ЭтоПередачаТоваров = Истина;
		
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		УКДДокументОбИзмененииСтоимости = Истина;
		
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
		
		УПДДокументОПередаче = Истина;
		
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД Тогда
		
		УПДСчетФактура = Истина;
		
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		
		УКДКорректировочныйСчетФактура = Истина;
		
	ИначеЕсли СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СтрокаОбъекта.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		
		ШаблонСообщения = НСтр("ru = 'Загрузка документов вида ""%1"" возможна только через оператора ЭДО.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаОбъекта.ВидЭД);
			
		Отказ = Истина;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.ЗапросКоммерческихПредложений Тогда
		
		ЭтоЗапросКоммерческихПредложений = Истина;
		
	ИначеЕсли СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.КоммерческоеПредложение Тогда
		
		ЭтоКоммерческоеПредложение = Истина;
		
	Иначе
		
		СтрокаДерева = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяРеквизитаКонтрагент);
		Если СтрокаДерева.СсылкаНаОбъект <> Контрагент Тогда
			СтрокаДерева.СсылкаНаОбъект = Контрагент;
			// Замена партнера.
			Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
				СтрокаДереваПартнер = НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, "Партнер");
				Если СтрокаДереваПартнер <> Неопределено Тогда
					РеквизитыПартнера = Новый Структура();
					РеквизитыПартнера.Вставить("Контрагент", Контрагент);
					ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Партнеры");
					СтрокаДереваПартнер.СсылкаНаОбъект = ЭлектронноеВзаимодействие.НайтиСсылку(ИмяПрикладногоСправочника, , РеквизитыПартнера);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Попытка
			Если ЭтоПередачаРабот Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаРезультатовРабот(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка);
			ИначеЕсли ЭтоПередачаТоваров Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьДокументПередачаТоваров(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка);
			ИначеЕсли УПДСчетФактура Тогда
				ОбменСКонтрагентамиВнутренний.НайтиСоздатьУПДСчетФактуру(
					ФорматЭлектронногоДокумента, СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать, "");
			ИначеЕсли УКДКорректировочныйСчетФактура Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДСчетФактуру(
					СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать, "");
			ИначеЕсли УПДДокументОПередаче Тогда
				ОбменСКонтрагентамиВнутренний.НайтиСоздатьУПДДокументОПередаче(
					ФорматЭлектронногоДокумента, СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка, Записывать, "");
			ИначеЕсли УКДДокументОбИзмененииСтоимости Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьУКДДокументОбИзмененииСтоимости(СтрокаОбъекта.ЗначениеРеквизита, 
					ДокументСсылка, Записывать);
			ИначеЕсли ЭтоЗапросКоммерческихПредложений Тогда
				
				ЗапросКоммерческогоПредложенияОтКлиента =
					"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента";
				Если ОбщегоНазначения.ПодсистемаСуществует(ЗапросКоммерческогоПредложенияОтКлиента) Тогда
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
					МодульПодсистемы.НайтиСоздатьЗапросКоммерческихПредложений(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка);
				Иначе
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьЗапросКоммерческихПредложений(СтрокаОбъекта.ЗначениеРеквизита,
						ДокументСсылка);
				КонецЕсли;
				
			ИначеЕсли ЭтоКоммерческоеПредложение Тогда
				
				КоммерческоеПредложениеПоставщика =
					"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика";
				Если ОбщегоНазначения.ПодсистемаСуществует(КоммерческоеПредложениеПоставщика) Тогда
					МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
					МодульПодсистемы.НайтиСоздатьКоммерческоеПредложение(СтрокаОбъекта.ЗначениеРеквизита, ДокументСсылка);
				Иначе
					ОбменСКонтрагентамиПереопределяемый.НайтиСоздатьКоммерческоеПредложение(СтрокаОбъекта.ЗначениеРеквизита,
						ДокументСсылка);
				КонецЕсли;
				
			Иначе
				ПараметрыОбработки = НовыеПараметрыОбработкиСохранитьДанныеОбъектаВБД(ДокументСсылка,
					Записывать);
				ОбменСКонтрагентамиПереопределяемый.СохранитьДанныеОбъектаВБД(СтрокаОбъекта, ДеревоРазбора, ПараметрыОбработки,
					ДокументСсылка);
			КонецЕсли;
			
		Исключение
			ШаблонСообщения = НСтр("ru = '%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

Функция НайтиСтрокуВДереве(ДеревоРазбора, СтрокаОбъекта, ИмяОбъектаПоиска) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	СтруктураПоиска = Новый Структура("Реквизит", ИмяОбъектаПоиска);
	МассивСтрок = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		ИндексСтрокиКонтрагента = МассивСтрок[0].ЗначениеРеквизита;
		СтруктураПоиска = Новый Структура("ИндексСтроки", ИндексСтрокиКонтрагента);
		МассивСтрок = ДеревоРазбора.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаДерева = МассивСтрок[0];
			ВозвращаемоеЗначение = СтрокаДерева;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Преобразует ссылочное значение ставки НДС в числовое.
//
// Параметры:
//  СтавкаНДС	 - ЛюбаяСсылка - ссылка на значение ставки НДС.
// 
// Возвращаемое значение:
//  Число - числовое значение ставки НДС.
//
Функция ЗначениеСтавкиНДСИзПеречисления(СтавкаНДС) Экспорт

	ПредставлениеСтавки = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, СтавкаНДС);
	
	Если ПредставлениеСтавки = "18" ИЛИ ПредставлениеСтавки = "18/118" Тогда
		Значение = 0.18;
	ИначеЕсли ПредставлениеСтавки = "10" ИЛИ ПредставлениеСтавки = "10/110" Тогда
		Значение = 0.10;
	ИначеЕсли ПредставлениеСтавки = "20" ИЛИ ПредставлениеСтавки = "20/120" Тогда
		Значение = 0.20;
	Иначе
		Значение = 0;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции

// Для полей форм, в которые выбирается договор контрагента, необходимо установить связи параметров выбора.
//
// Параметры:
//  ЭлементФормы           - ПолеФормы - Поле, в которое указывается договор контрагента.
//  ПутьКДаннымОрганизация - Строка    - Путь к реквизиту "Организация" объекта формы.
//  ПутьКДаннымКонтрагент  - Строка    - Путь к реквизиту "Контрагент"  объекта формы.
//
Процедура УстановитьСвязиПараметровВыбораДоговорКонтрагента(ЭлементФормы, ПутьКДаннымОрганизация, ПутьКДаннымКонтрагент) Экспорт

	ИмяСвязиПоОрганизации = "";
	ИмяСвязиПоКонтрагенту = "";
	
	ОбменСКонтрагентамиПереопределяемый.УстановитьИменаСвязейПараметровВыбораДоговорКонтрагента(
		ИмяСвязиПоОрганизации, ИмяСвязиПоКонтрагенту);
	
	НовыеСвязи = Новый Массив;
	
	Если ЗначениеЗаполнено(ИмяСвязиПоОрганизации) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяСвязиПоОрганизации, ПутьКДаннымОрганизация));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяСвязиПоКонтрагенту) Тогда
		НовыеСвязи.Добавить(Новый СвязьПараметраВыбора(ИмяСвязиПоКонтрагенту, ПутьКДаннымКонтрагент));
	КонецЕсли;
	
	ЭлементФормы.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыеСвязи);
	
КонецПроцедуры

// Выполняет действия, необходимые для работы механизма подписания по маршруту.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
//
Процедура ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(ЭД) Экспорт
	
	// Если документ отправили на подпись, значит нужно заполнить таблицу маршрута подписания.
	ПараметрыМаршрута = ПараметрыМаршрутаПодписанияДокумента(ЭД);
	
	// Это может быть новый объект - нужно корректно получить ссылку.
	СсылкаДокумента = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСсылкуОбъектаБезопасно(ЭД);
	
	ВесМаршрута = 0;
	ЭлектронноеВзаимодействиеСлужебный.СформироватьМаршрутПодписанияЭД(СсылкаДокумента, 
		ПараметрыМаршрута.МаршрутПодписания, ПараметрыМаршрута.УсловиеПодписания, ПараметрыМаршрута.СписокПодписантов, 
		ВесМаршрута);
		
	// Сформируем и запишем представление прогресса подписания.
	ЭД.ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания(ЭД, ВесМаршрута);
	
КонецПроцедуры

// Возвращает имя поля формы настроек, на котором нужно спозиционироваться при возникновении ошибки проверки настроек.
//
// Параметры:
//  НастройкаОбмена - СправочникСсылка.ПрофилиНастроекЭДО, СправочникСсылка.СоглашенияОбИспользованииЭД - ссылка на 
//      настройку обмена.
//  НомерСтроки		- Число - номер строки таблицы исходящих документов, на которой нужно спозиционироваться.
// 
// Возвращаемое значение:
//  Строка - имя поля для передачи в функцию ОбщегоНазначенияКлиентСервер.СообщитьПользователю.
//
Функция ИмяПоляДляОтображенияОшибкиПоМаршруту(НастройкаОбмена, НомерСтроки) Экспорт

	ИмяПоляОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ИсходящиеДокументы[%1].ДополнительныеНастройки", НомерСтроки - 1);
	
	Возврат ИмяПоляОшибки;

КонецФункции

// Получает файла ответа и читает идентификаторы абонента в фоновом процессе.
//
// Параметры:
//  Параметры - Структура - параметры выполнения задания.
//     * ИдентификаторЗапросаНаРегистрацию - Строка - уникальный идентификатор заявки 1СЭДО.
//  АдресРезультата - Строка - адрес временного хранилища для помещения результата.
//
Процедура ОбменССерверомПолучитьОтветЭДО(Параметры, АдресРезультата) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого ИдентификаторЗаявки Из Параметры.ИдентификаторыЗаявок Цикл
		
		Значение = Ложь;
		ОписаниеОшибки = "";
		ИмяФайлаОтвета = ПолучитьФайлОтветаОтСервераЭДО("GetInfo", ИдентификаторЗаявки, ОписаниеОшибки);
		Если ИмяФайлаОтвета = Неопределено Тогда
			Значение = ОписаниеОшибки;
		Иначе
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
			Если Не ПустаяСтрока(ДанныеФайла) Тогда
				ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
				Если ДеревоXML <> Неопределено Тогда
					УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
					Если УзелАбоненты <> Неопределено Тогда
						Значение = УзелАбоненты.Строки.Количество() > 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(ИдентификаторЗаявки, Значение);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Формирование XML файлов документов.
//
// Параметры:
//  МассивОбъектовДляВыгрузки - Массив - объекты для формирования.
//  ПараметрыОбмена - Структура - параметры формирования.
//  ДопПараметры - Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив - структуры возвратов.
//
Функция СформироватьXMLФайлыДокументов(МассивОбъектовДляВыгрузки, ПараметрыОбмена, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	МассивСтруктурВозврата = Новый Массив;
	СтруктураВидовЭД = Новый Соответствие;
	
	Для Каждого ТекЭлемент Из МассивОбъектовДляВыгрузки Цикл
		ВидЭД = "";
		Если НЕ ЗначениеЗаполнено(ДопПараметры) ИЛИ НЕ ДопПараметры.Свойство("ВидЭД", ВидЭД) Тогда
			ПараметрыЭД = ПараметрыОбмена.Получить(ТекЭлемент.Ссылка);
			ПараметрыЭД.Свойство("ВидЭД", ВидЭД);
		КонецЕсли;
	
		МассивОбъектовПоВидуЭД = СтруктураВидовЭД.Получить(ВидЭД);
		Если МассивОбъектовПоВидуЭД = Неопределено Тогда
			МассивОбъектовПоВидуЭД = Новый Массив;
		КонецЕсли;
		МассивОбъектовПоВидуЭД.Добавить(ТекЭлемент);
		СтруктураВидовЭД.Вставить(ВидЭД, МассивОбъектовПоВидуЭД);
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из СтруктураВидовЭД Цикл
		СформироватьXMLФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры);
	КонецЦикла;
	
	Возврат МассивСтруктурВозврата;
	
КонецФункции

// Возвращает данные классификатора валют.
// Подлежит замене после реализации в БСП интерфейсного метода.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - имеет колонки:
//    * КодВалютыЦифровой - цифровой код по классификатору.
//    * КодВалютыБуквенный - буквенный код по классификатору.
//    * Наименование - наименование по классификатору.
//
Функция ДанныеКлассификатораВалют() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеКлассификатора = Новый ТаблицаЗначений;
	ДанныеКлассификатора.Колонки.Добавить("КодВалютыЦифровой");
	ДанныеКлассификатора.Колонки.Добавить("КодВалютыБуквенный");
	ДанныеКлассификатора.Колонки.Добавить("Наименование");
	
	КлассификаторXML = Обработки.ЗагрузкаКурсовВалют.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст(); 
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Для Каждого ЗаписьОКВ Из КлассификаторТаблица Цикл
		НоваяСтрока = ДанныеКлассификатора.Добавить();
		НоваяСтрока.КодВалютыЦифровой         = ЗаписьОКВ.Code;
		НоваяСтрока.КодВалютыБуквенный        = ЗаписьОКВ.CodeSymbol;
		НоваяСтрока.Наименование              = ЗаписьОКВ.Name;
	КонецЦикла;
	
	Если Не ДанныеКлассификатора.Количество() Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить классификатор валют.'");
	КонецЕсли;
	
	Возврат ДанныеКлассификатора;

КонецФункции

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
// Параметры:
//  ФайлЭД - Ссылка, ПеречислениеСсылка.ТипыЭлементовВерсииЭД - электронный документ или перечисление.
// 
// Возвращаемое значение:
//  Булево - Истина, если это служебный документ.
//
Функция ЭтоСлужебныйДокумент(ФайлЭД) Экспорт 
	
	Если ТипЗнч(ФайлЭД) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ФайлЭД;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлЭД, "ТипЭлементаВерсииЭД"); 	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЭлементаВерсииЭД) Тогда
		
		ОсновныеТипыЭД = ОсновныеТипыЭД();
		ВозвращаемоеЗначение = ОсновныеТипыЭД.Найти(ТипЭлементаВерсииЭД) = Неопределено;
	Иначе
		ВозвращаемоеЗначение = Ложь;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВходящийТитул(СсылкаНаЭД) Экспорт
	
	Если Не ЭтоОтветныйТитул(СсылкаНаЭД) Тогда
		ПервыйТитул = Неопределено;
	Иначе
		ПервыйТитул = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ЭлектронныйДокументВладелец");
	КонецЕсли;
	
	Возврат ПервыйТитул;
	
КонецФункции

Процедура ОбновитьВерсиюЭДВРегистре(СообщениеОбмена, СостояниеВерсииЭД, СводнаяИнформацияПоСтатусу) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);

	ДействияСНашейСтороны = "";
	СводнаяИнформацияПоСтатусу.Свойство("СНашейСтороны",ДействияСНашейСтороны);
	
	ДействияСоСтороныДругогоУчастника = "";
	СводнаяИнформацияПоСтатусу.Свойство("СоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
	
	ПредставлениеСостояния = "";
	СводнаяИнформацияПоСтатусу.Свойство("ПредставлениеСостояния",ПредставлениеСостояния);
	Если Не ЗначениеЗаполнено(ПредставлениеСостояния) Тогда
		ПредставлениеСостояния = Строка(СостояниеВерсииЭД);
	КонецЕсли;
	
	Комментарий = "";
	СводнаяИнформацияПоСтатусу.Свойство("Комментарий", Комментарий);
	
	НачатьТранзакцию();
	Попытка
		
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоСсылке(СообщениеОбмена, РежимБлокировкиДанных.Разделяемый);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("СообщениеОбмена",СообщениеОбмена);
		Запрос.УстановитьПараметр("СостояниеВерсииЭД",СостояниеВерсииЭД);
		Запрос.УстановитьПараметр("ПредставлениеСостояния",ПредставлениеСостояния);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК СсылкаНаОбъект,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена
		|ПОМЕСТИТЬ втДокументыУчета
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &СообщениеОбмена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &СообщениеОбмена
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаНаОбъект,
		|	СообщениеОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДокументыУчета.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ИЗ
		|	втДокументыУчета КАК втДокументыУчета";
		
		Запрос.Текст = ТекстЗапроса;
		РезультатПоСсылкаНаОбъект = Запрос.Выполнить();
		ПоляБлокировки = Новый Структура("СсылкаНаОбъект", "СсылкаНаОбъект");
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировку(
			"РегистрСведений.СостоянияЭД", ПоляБлокировки, РезультатПоСсылкаНаОбъект);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДокументыУчета КАК втДокументыУчета
		|		ПО СостоянияЭД.СсылкаНаОбъект = втДокументыУчета.СсылкаНаОбъект
		|			И СостоянияЭД.ЭлектронныйДокумент = втДокументыУчета.СообщениеОбмена
		|ГДЕ
		|	(СостоянияЭД.СостояниеВерсииЭД <> &СостояниеВерсииЭД
		|			ИЛИ СостоянияЭД.ПредставлениеСостояния <> &ПредставлениеСостояния)";
		
		Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
			ТекстЗапроса = ТекстЗапроса + "	ИЛИ СостоянияЭД.ДействияСНашейСтороны <> &ДействияСНашейСтороны ";
			Запрос.УстановитьПараметр("ДействияСНашейСтороны",ДействияСНашейСтороны);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
			ТекстЗапроса = ТекстЗапроса + "ИЛИ СостоянияЭД.ДействияСоСтороныДругогоУчастника <> &ДействияСоСтороныДругогоУчастника";
			Запрос.УстановитьПараметр("ДействияСоСтороныДругогоУчастника",ДействияСоСтороныДругогоУчастника);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект, Истина);
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				
				ЗаписьНабора.СостояниеВерсииЭД = СостояниеВерсииЭД;
				ЗаписьНабора.ПредставлениеСостояния = ПредставлениеСостояния;
				
				Если ЗначениеЗаполнено(ДействияСНашейСтороны) Тогда
					ЗаписьНабора.ДействияСНашейСтороны = ДействияСНашейСтороны;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДействияСоСтороныДругогоУчастника) Тогда
					ЗаписьНабора.ДействияСоСтороныДругогоУчастника = ДействияСоСтороныДругогоУчастника;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Комментарий) Тогда
					ЗаписьНабора.Комментарий = Комментарий;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает статус электронного документа.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭдПрисоединенныеФайлы - ссылка на электронный документ.
//  СтатусЭД - ПеречислениеСсылка.СтатусыЭД - новый статус электронного документа.
//
Процедура УстановитьСтатусЭД(ЭД, СтатусЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтатусЭД", СтатусЭД);
	ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
	
КонецПроцедуры

Функция ПривестиСтрокуКФорматуИмени1С(ИсходнаяСтрока)

	Возврат СтрЗаменить(СокрЛП(ИсходнаяСтрока), " ", "");

КонецФункции

// Получение данных пакетов ЭД.
//
// Параметры:
//  МассивПакетовЭД - Массив - список Пакетов ЭД.
//  ВФоне           - Булево - признак выполнения функции в фоновом задании.
// 
// Возвращаемое значение:
//  Структура - данные пакетов ЭД.
//
Функция ДанныеПакетовЭД(МассивПакетовЭД, ВФоне = Ложь) Экспорт
	
	ДанныеПакетовЭД = Новый Массив;
	// Делаем перебор пакетов и распаковку их содержимого в папку
	Для каждого ПакетЭД Из МассивПакетовЭД Цикл
		СтруктураПакетаЭД = Новый Структура("ПакетЭДСсылка, МассивЭД, МассивЭП");
		
		МассивЭД = Новый Массив;
		МассивЭП = Новый Массив;
		УникальныйИдентификатор = ПакетЭД.УникальныйИдентификатор();
		
		Попытка
			
			// Необходимо получить архив пакета из присоединенных файлов к документу.
			ВыборкаПрисоединенныхФайлов = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", ПакетЭД));
			Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) 
				Или НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждого из пакетов необходимо определить файл с данными.
			ПараметрыДанных = РаботаСФайлами.ДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
			
			ФайлАрхива = ТекущееИмяВременногоФайла("zip");
			ДвоичныеДанныеФайла.Записать(ФайлАрхива);
			
			АрхивЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("ext", УникальныйИдентификатор);
			
			Если ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(АрхивЧтение) Тогда
				ТекстОшибки = НСтр("ru = '""%1"" содержит в своем архиве файлы с недопустимыми символами. Распаковка не возможна.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка(ПакетЭД));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Попытка
				АрхивЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронноеВзаимодействиеСлужебный.ВозможноИзвлечьФайлы(АрхивЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка архива пакета ЭД'"), ТекстОшибки,
					ТекстСообщения);
					
				АрхивЧтение.Закрыть();
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
				Продолжить;
			КонецПопытки;
			
			АрхивЧтение.Закрыть();
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлАрхива);
			
			МассивФайловТранспортнойИнформации = НайтиФайлы(ПапкаДляРаспаковки, "meta*.xml", Истина);
			
			Если МассивФайловТранспортнойИнформации.Количество() > 0 Тогда
				ФайлТранспортнойИнформации = МассивФайловТранспортнойИнформации[0];
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Продолжить;
			КонецЕсли;
			
			ОбъектXML = Новый ЧтениеXML;
			ОбъектXML.ОткрытьФайл(ФайлТранспортнойИнформации.ПолноеИмя);
			ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML,
				ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("ContainerDescription", "http://api-invoice.taxcom.ru/meta"));
			ОбъектXML.Закрыть();
			
			СвойстваСтруктурыПодписи = "АдресЭП, АдресСертификата, Отпечаток, КомуВыданСертификат, ДатаПроверкиПодписи, ПодписьВерна";
			Если ВФоне Тогда
				СвойстваСтруктурыПодписи = СвойстваСтруктурыПодписи + ",ДанныеСертификата";
			КонецЕсли;
			
			Для Каждого ДокОборот Из ЭД.DocFlow Цикл
				
				НомерЭДО = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(ДокОборот, "Id");
				
				Для Каждого Документ Из ДокОборот.Documents.Document Цикл
					
					СтруктураВложения = Новый Структура("ТипДанных, АдресЭД, АдресДополнительногоЭД,
						|УникальныйИД, НомерЭД, КодТранзакции, КодРегламента, ТипЭлементаВерсииЭД, МассивИдентификаторовДокументовОснований,
						|Зашифрован, СсылкаНаСертификатРасшифровки, ДополнительныеПараметры,
						|ПроизвольныйЭД, ТипДокумента, ТекстСопроводительнойЗаписки, ТребуетсяПодтверждение");
					
					КодТранзакции = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(Документ, "TransactionCode");
					КодРегламента = ОбменСКонтрагентамиВнутренний.ЗначениеСвойстваXDTO(Документ, "ReglamentCode");
					Зашифрован = Ложь;
					ТипКарточкиЭД = Перечисления.ТипыЭД.Прочее;
					ТипКарточкиЭДПолучен = Ложь;
					НомерЭДКарточки = "";
					ПроизвольныйЭД = Ложь;
					ТекстСопроводительнойЗаписки = "";
					МассивИдентификаторовДокументовОснований = Новый Массив;
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					
					// Получим карточку электронного документа
					Если ОбменСКонтрагентамиВнутренний.ЕстьСвойствоXDTO(Документ, "Files") Тогда
						Если Документ.Files.ExternalCard <> Неопределено Тогда
							
							ПолноеИмяФайлаКарточки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
								Документ.Files.ExternalCard.Path);
							СтруктураФайлаКарточки = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаКарточки);
							
							Если Прав(ПапкаДляРаспаковки, 1) = "\" Тогда
								СтруктураФайлаКарточки.ПолноеИмя = СтрЗаменить(СтруктураФайлаКарточки.ПолноеИмя, "/", "\");
							КонецЕсли;
							
							ОбъектXMLКарточки = Новый ЧтениеXML;
							ОбъектXMLКарточки.ОткрытьФайл(СтруктураФайлаКарточки.ПолноеИмя);
							КарточкаЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXMLКарточки,
							ОбменСКонтрагентамиВнутренний.ПолучитьТипЗначенияCML("Card", "http://api-invoice.taxcom.ru/card"));
							ОбъектXMLКарточки.Закрыть();
							
							НомерЭДКарточки = ОбменСКонтрагентамиВнутренний.НомерЭДВКарточкеЭД(КарточкаЭД);
							
							Если КарточкаЭД.Description <> Неопределено Тогда
								Если КарточкаЭД.Description.AdditionalData <> Неопределено
									И КарточкаЭД.Description.AdditionalData.AdditionalParameter <> Неопределено Тогда
									
									ДополнительныеПараметры = Новый Структура;
									Если ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("СписокXDTO") Тогда
										Для Каждого Свойство Из КарточкаЭД.Description.AdditionalData.AdditionalParameter Цикл
											Если Свойство.Name = "DocumentType" Тогда
												// После расширения состава типов документов, типы передаются в доп.данных
												ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(Свойство.Value);
												ТипКарточкиЭДПолучен = Истина;
											ИначеЕсли Свойство.Name = "ParentDocument" Тогда
												МассивИдентификаторовДокументовОснований.Добавить(Свойство.Value);
											ИначеЕсли Свойство.Name = "Комментарий" Тогда
												ТекстСопроводительнойЗаписки = Свойство.Value;
											Иначе
												ДополнительныеПараметры.Вставить(ПривестиСтрокуКФорматуИмени1С(Свойство.Name), Свойство.Value);
											КонецЕсли;
										КонецЦикла;
										
									ИначеЕсли ТипЗнч(КарточкаЭД.Description.AdditionalData.AdditionalParameter) = Тип("ОбъектXDTO") Тогда
										Если Свойство.Name = "ParentDocument" Тогда
											МассивИдентификаторовДокументовОснований.Добавить(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										Иначе
											ДополнительныеПараметры.Вставить(
												ПривестиСтрокуКФорматуИмени1С(КарточкаЭД.Description.AdditionalData.AdditionalParameter.Name),
												КарточкаЭД.Description.AdditionalData.AdditionalParameter.Value);
										КонецЕсли;
									КонецЕсли;
									СтруктураВложения.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
								КонецЕсли;
								
								// Определим заголовок произвольного ЭД.
								Если Не КарточкаЭД.Description = Неопределено Тогда
									Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
										Если КарточкаЭД.Description.Title <> Неопределено Тогда
											ПроизвольныйЭД = (КарточкаЭД.Description.Title = Строка(Перечисления.ВидыЭД.ПроизвольныйЭД));
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если Не ЗначениеЗаполнено(ТекстСопроводительнойЗаписки) Тогда
									ТекстСопроводительнойЗаписки = КарточкаЭД.Description.Comment;
								КонецЕсли;
								
							КонецЕсли;
							
							Если КарточкаЭД.Type <> Неопределено Тогда
								Если НЕ ТипКарточкиЭДПолучен Тогда
									ТипКарточкиЭД = ОбменСКонтрагентамиВнутренний.ТипДокументаПоСтроке(КарточкаЭД.Type.Name);
								КонецЕсли;
								ИмяТипаЭлектронногоДокумента = НРег(СокрЛП(КарточкаЭД.Type.Name));
								Если ИмяТипаЭлектронногоДокумента = "invoice"
									Или ИмяТипаЭлектронногоДокумента = "correctiveinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultvendor"
									Или ИмяТипаЭлектронногоДокумента = "formalizedtradingvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedworkresultcustomer"
									Или ИмяТипаЭлектронногоДокумента = "formalizedstatementcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "formalizedtradingcustomer"
									Или ИмяТипаЭлектронногоДокумента = "formalizedconsignmentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
									Если ОбменСКонтрагентамиВнутренний.ЕстьСвойствоXDTO(КарточкаЭД, "Description") Тогда
										Если КарточкаЭД.Description.Свойства().Получить("Title") <> Неопределено Тогда
											Если КарточкаЭД.Description.Title <> Неопределено
												И ВРег(КарточкаЭД.Description.Title) = ВРег(Строка(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)) Тогда
												ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoice" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "expinvoiceandprimaryaccountingdocumentcustomer"
									Или ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corexpinvoiceandprimaryaccountingdocumentcustomer"
									Или ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentcustomer" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "primaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД;
								ИначеЕсли ИмяТипаЭлектронногоДокумента = "corprimaryaccountingdocumentvendor" Тогда
									
									ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД;
								КонецЕсли;
								Если КарточкаЭД.Type.ResignRequired <> Неопределено Тогда
									ТребуетсяПодтверждение = Булево(КарточкаЭД.Type.ResignRequired);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					// Из ЭД
					СтруктураВложения.Вставить("УникальныйИД",                 НомерЭДО);
					СтруктураВложения.Вставить("НомерЭД",                      НомерЭДКарточки);
					СтруктураВложения.Вставить("КодТранзакции",                КодТранзакции);
					СтруктураВложения.Вставить("КодРегламента",                КодРегламента);
					СтруктураВложения.Вставить("ТипЭлементаВерсииЭД",          ТипЭлементаВерсииЭД);
					СтруктураВложения.Вставить("ПроизвольныйЭД",               ПроизвольныйЭД);
					СтруктураВложения.Вставить("ТипДокумента",                 ТипКарточкиЭД);
					СтруктураВложения.Вставить("ТекстСопроводительнойЗаписки", ТекстСопроводительнойЗаписки);
					СтруктураВложения.Вставить("ТребуетсяПодтверждение",       ТребуетсяПодтверждение);
					СтруктураВложения.Вставить("МассивИдентификаторовДокументовОснований", МассивИдентификаторовДокументовОснований);
					
					// Получим файл электронного документа
					СтруктураЭлектронногоДокумента = Новый Структура();
					Если Документ.Files.MainImage <> Неопределено Тогда
						ОтносительныйПутьКФайлу = ИсправитьРазделителиПутиКФайлу(Документ.Files.MainImage.Path);
						ПолноеИмяФайлаЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, ОтносительныйПутьКФайлу);
						СтруктураФайлаЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭД);
						
						Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
							СтруктураФайлаЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭД.ПолноеИмя, "\", "/");
						КонецЕсли;
						
						Попытка
							ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(СтруктураФайлаЭД.ПолноеИмя);
						Исключение
							// Проблема распаковки файла. Ищем по расширению, исключая служебные файлы.
							ДвоичныеДанныеФайлаЭД = ДвоичныеДанныеФайлаЭДВПакете(ПапкаДляРаспаковки, Документ.Files, СтруктураФайлаЭД);
							Если ДвоичныеДанныеФайлаЭД = Неопределено Тогда
								ВызватьИсключение;
							КонецЕсли;
						КонецПопытки;
						
						Если ВФоне Тогда
							СтруктураВложения.Вставить("ДанныеФайлаЭД", ДвоичныеДанныеФайлаЭД);
						Иначе
							АдресЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭД, УникальныйИдентификатор);
							СтруктураВложения.Вставить("АдресЭД", АдресЭД);
						КонецЕсли;
						СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
						
						// Когда приходят пакеты от оператора ЭДО без явного признака "НеФормализованный".
						Если ВРег(СтруктураФайлаЭД.Расширение) <> ".ZIP" И ВРег(СтруктураФайлаЭД.Расширение) <> ".XML" Тогда
							СтруктураВложения.Вставить("ПроизвольныйЭД", Истина);
						КонецЕсли;
						
						ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
						
						СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции));
						СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаЭД.ИмяБезРасширения);
						СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаЭД.Расширение);
						СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Зашифрован);
						
						МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
					КонецЕсли;
					
					Если Документ.Files.MainImageSignature <> Неопределено Тогда
						
						// При распаковке архива возможны нарушения в именовании файлов.
						// Поэтому определяемы файлы подписи как по данным транспортной информации, так и по расширению в архиве.
						// При совпадении работаем с данными архива, иначе по транспортной информации.
						ФайлыВАрхиве = Новый Массив;
						ФайлыВТИ = Новый Массив;
						РасширенияФайлов = Новый Массив;
						Для Каждого Подпись Из Документ.Files.MainImageSignature Цикл
							
							ОтносительныйПутьКФайлу = ИсправитьРазделителиПутиКФайлу(Подпись.Path);
							ПолноеИмяФайлаЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, ОтносительныйПутьКФайлу);
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаЭП);
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							ТекФайл = Новый Файл(СтруктураФайлаЭП.ПолноеИмя);
							ФайлыВТИ.Добавить(ТекФайл);
							
							Если РасширенияФайлов.Найти(СтруктураФайлаЭП.Расширение) = Неопределено Тогда
								РасширенияФайлов.Добавить(СтруктураФайлаЭП.Расширение);
								ФайлыВАрхивеПоРасширению = НайтиФайлы(ПапкаДляРаспаковки, "*" + СтруктураФайлаЭП.Расширение);
								ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ФайлыВАрхиве, ФайлыВАрхивеПоРасширению);
							КонецЕсли;
							
						КонецЦикла;
						
						ФайлыПодписи = ФайлыВТИ;
						Если ФайлыВАрхиве.Количество() = ФайлыВТИ.Количество() Тогда
							ФайлыПодписи = ФайлыВАрхиве;
						КонецЕсли;
						
						Для Каждого Подпись Из ФайлыПодписи Цикл
							
							СтруктураФайлаЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Подпись.ПолноеИмя);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура(СвойстваСтруктурыПодписи);
							
							ДвоичныеДанныеФайлаЭП = Новый ДвоичныеДанные(СтруктураФайлаЭП.ПолноеИмя);
							Если ВФоне Тогда
								СтруктураЭлектроннойПодписи.Вставить("ДанныеФайлаЭП", ДвоичныеДанныеФайлаЭП);
							Иначе
								АдресЭП = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаЭП, УникальныйИдентификатор);
								СтруктураЭлектроннойПодписи.Вставить("АдресЭП", АдресЭП);
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи.Вставить("УникальныйИД",     НомерЭДО);
							СтруктураЭлектроннойПодписи.Вставить("КодТранзакции",    СтруктураВложения.КодТранзакции);
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ЭП");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаЭП.Расширение);
							
							// В случае ответной подписи найдем исходный ЭД.
							Если НЕ ЗначениеЗаполнено(СтруктураЭлектронногоДокумента) Тогда
								
								СтруктураПараметровПоиска = Новый Структура;
								СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
								СтруктураПараметровПоиска.Вставить("УникальныйИД",  СтруктураВложения.УникальныйИД);
								Если КодТранзакции = "MainDocumentResign" Тогда
									ТипЭлементаВерсииЭД = Новый Массив;
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
									ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
								ИначеЕсли КодТранзакции = "CancellationOfferResign" Тогда
									СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПОА);
								КонецЕсли;
								
								ЭлектронныйДокумент = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
								Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
									
									ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭлектронныйДокумент, УникальныйИдентификатор);
									
									Если ВФоне Тогда
										СтруктураЭлектроннойПодписи.Вставить("ДанныеФайлаЭД",
											ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла));
									Иначе
										СтруктураЭлектроннойПодписи.Вставить("АдресЭД", ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
									КонецЕсли;
									СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл", ЭлектронныйДокумент);
								КонецЕсли;
							Иначе
								СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл",
									СтруктураВложения.СсылкаНаЭДПрисоединенныйФайл);
							КонецЕсли;
							
							Если СтруктураЭлектронногоДокумента.Свойство("АдресЭД") Тогда
								СтруктураЭлектроннойПодписи.Вставить("АдресЭД", СтруктураЭлектронногоДокумента.АдресЭД);
							КонецЕсли;
							Если СтруктураЭлектронногоДокумента.Свойство("ДанныеФайлаЭД") Тогда
								СтруктураЭлектроннойПодписи.Вставить("ДанныеФайлаЭД", СтруктураЭлектронногоДокумента.ДанныеФайлаЭД);
							КонецЕсли;
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
					ФайлДопДанныхОбработан = Ложь;
					Если Документ.Files.DataImage <> Неопределено Тогда
						ПолноеИмяФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки,
							Документ.Files.DataImage.Path);
						СтруктураФайлаДопДанныхЭД = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭД);
						
						Если НРег(СтруктураФайлаДопДанныхЭД.Расширение) = ".xml" Тогда
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаДопДанныхЭД.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭД.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							ДвоичныеДанныеФайлаДопДанныхЭД = Новый ДвоичныеДанные(СтруктураФайлаДопДанныхЭД.ПолноеИмя);
							Если ВФоне Тогда
								СтруктураВложения.Вставить("ДанныеФайлаЭД", ДвоичныеДанныеФайлаДопДанныхЭД);
								СтруктураЭлектронногоДокумента.Вставить("ДанныеФайлаДополнительногоЭД", ДвоичныеДанныеФайлаДопДанныхЭД);
							Иначе
								АдресДополнительногоЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлаДопДанныхЭД, УникальныйИдентификатор);
								СтруктураВложения.Вставить("АдресЭД", АдресДополнительногоЭД);
								СтруктураЭлектронногоДокумента.Вставить("АдресДополнительногоЭД", АдресДополнительногоЭД);
							КонецЕсли;
							
							СтруктураВложения.Вставить("СсылкаНаЭДПрисоединенныйФайл", Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку());
							
							СтруктураЭлектронногоДокумента = Новый Структура();
							ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураЭлектронногоДокумента, СтруктураВложения);
							
							СтруктураЭлектронногоДокумента.Вставить("ТипДанных",        "ДополнительныйЭД");
							СтруктураЭлектронногоДокумента.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭД.ИмяБезРасширения);
							СтруктураЭлектронногоДокумента.Вставить("Расширение",       СтруктураФайлаДопДанныхЭД.Расширение);
							СтруктураЭлектронногоДокумента.Вставить("Зашифрован",       Ложь);
							
							МассивЭД.Добавить(СтруктураЭлектронногоДокумента);
							ФайлДопДанныхОбработан = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Документ.Files.DataImageSignature <> Неопределено И ФайлДопДанныхОбработан Тогда
						
						Для Каждого Подпись Из Документ.Files.DataImageSignature Цикл
							ПолноеИмяФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПапкаДляРаспаковки, Подпись.Path);
							СтруктураФайлаДопДанныхЭП = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПолноеИмяФайлаДопДанныхЭП);
						
							Если Прав(ПапкаДляРаспаковки, 1) = "/" Тогда
								СтруктураФайлаДопДанныхЭП.ПолноеИмя = СтрЗаменить(СтруктураФайлаДопДанныхЭП.ПолноеИмя, "\", "/");
							КонецЕсли;
							
							СтруктураЭлектроннойПодписи = Новый Структура(СвойстваСтруктурыПодписи);
							СтруктураЭлектроннойПодписи.Вставить("КодТранзакции",    СтруктураВложения.КодТранзакции);
							СтруктураЭлектроннойПодписи.Вставить("ТипДанных",        "ПодписьДополнительногоЭД");
							СтруктураЭлектроннойПодписи.Вставить("ИмяБезРасширения", СтруктураФайлаДопДанныхЭП.ИмяБезРасширения);
							СтруктураЭлектроннойПодписи.Вставить("Расширение",       СтруктураФайлаДопДанныхЭП.Расширение);
							СтруктураЭлектроннойПодписи.Вставить("СсылкаНаЭДПрисоединенныйФайл",
								СтруктураВложения.СсылкаНаЭДПрисоединенныйФайл);
								
							
							МассивЭП.Добавить(СтруктураЭлектроннойПодписи);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
			
			СтруктураПакетаЭД.Вставить("ПакетЭДСсылка", ПакетЭД);
			СтруктураПакетаЭД.Вставить("МассивЭД",      МассивЭД);
			СтруктураПакетаЭД.Вставить("МассивЭП",      МассивЭП);
			ДанныеПакетовЭД.Добавить(СтруктураПакетаЭД);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
		КонецПопытки;
	КонецЦикла;
	
	Возврат ДанныеПакетовЭД;
	
КонецФункции

// Запись данных пакетов ЭД.
// Не рекомендуется вызывать в транзакции, так как при падении переопределяемой части, может
// возникнуть ошибка "В данной транзакции уже происходили ошибки".
//
// Параметры:
//  ДанныеПакетовЭД	          - Массив - список пакетов ЭД.
//  РаспакованныеДокументы    - Структура - служебные данные:
//    * МассивСлужебныхЭД         - Массив - служебные электронные документы.
//    * НовыеДокументы            - Массив - добавляемые электронные документы.
//  КоличествоРаспакованныхЭД - Число - количество распакованных пакетов.
//
Процедура ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	НовыеДокументы = РаспакованныеДокументы.НовыеДокументы;
	
	// Исходные данные для создания учетного документа собираем в отдельную таблицу, в транзакции распаковки пакета.
	// Используем эти данные в следующей транзакции, где создаем учетные документы.
	ПараметрыСозданияУчетныхДокументов = Новый ТаблицаЗначений;
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ВладелецЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ПараметрыПакетаЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("СтруктураЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("СтруктураПараметров");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ПрисоединенныйФайл");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("НомерЭД");
	ПараметрыСозданияУчетныхДокументов.Колонки.Добавить("ДанныеФайлаЭД");
	
	Для каждого СтруктураПакетаЭД Из ДанныеПакетовЭД Цикл
		
		ПараметрыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПакетаЭД.ПакетЭДСсылка,
			"СпособОбменаЭД, Отправитель, Получатель, Организация, Контрагент, ВерсияФорматаПакета, ДоговорКонтрагента");
		
		// Если не заполнено одно из ключевых свойств, значит, пытаются распаковать неизвестный пакет.
		Если Не ЗначениеЗаполнено(ПараметрыПакетаЭД.Отправитель) ИЛИ Не ЗначениеЗаполнено(ПараметрыПакетаЭД.Получатель)
			ИЛИ Не ЗначениеЗаполнено(ПараметрыПакетаЭД.Организация) ИЛИ Не ЗначениеЗаполнено(ПараметрыПакетаЭД.Контрагент) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не удалось распаковать %1: не заполнено одно или несколько ключевых свойств. Вероятно, пакет был загружен некорректно. Обратитесь в тех. поддержку.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, СтруктураПакетаЭД.ПакетЭДСсылка));
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка			
			МассивДобавленныхФайлов = Новый Массив;
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			
			// Записываем в базу ЭД
			Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
				
				АдресЭД = Неопределено;
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("dec", Новый УникальныйИдентификатор);
				
				ТребуетсяИзвещение = Истина;
				Если ЭлектронныйДокумент.Свойство("ДополнительныеПараметры")
					И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры) Тогда
					
					Если ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("НеТребуетсяИзвещение") Тогда
						ТребуетсяИзвещение = Ложь;
					КонецЕсли;
				КонецЕсли;
				
				// Распакуем пакет если в качестве ЭД пришел архив
				Если ВРег(ЭлектронныйДокумент.Расширение) = ВРег(".xml") Или ЭлектронныйДокумент.ПроизвольныйЭД Тогда
					
					ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
					
					ФайлДанныхЭД = Новый Файл(ФайлЭД);
					АдресЭД = ЭлектронныйДокумент.АдресЭД;
					
				ИначеЕсли ВРег(ЭлектронныйДокумент.Расширение) = ВРег(".zip") Тогда
					
					ДвоичныеДанныеАрхиваЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
					ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
					ДвоичныеДанныеАрхиваЭД.Записать(ФайлЭД);
					ФайлДанныхАрхиваЭД = Новый Файл(ФайлЭД);
					
					ФлагОшибки = НЕ ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
						ФайлДанныхАрхиваЭД.ПолноеИмя, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'"));
					
					Если ФлагОшибки Тогда
						Прервать;
					КонецЕсли;
					
					ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
					Если ФайлыЭД.Количество() > 0 Тогда
						ФайлДанныхЭД = ФайлыЭД[0];
						
						ДвоичныеДанныеФайлЭД = Новый ДвоичныеДанные(ФайлДанныхЭД.ПолноеИмя);
						АдресЭД = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайлЭД);
					Иначе // Будем считать, что пришел произвольный ЭД.
						ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
						
						ДвоичныеДанныеФайлЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
						ФайлЭД = ТекущееИмяВременногоФайла(ЭлектронныйДокумент.Расширение);
						ДвоичныеДанныеФайлЭД.Записать(ФайлЭД);
						
						ФайлДанныхЭД = Новый Файл(ФайлЭД);
						АдресЭД = ЭлектронныйДокумент.АдресЭД;
						
					КонецЕсли;
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ЭД" Тогда
					
					ВладелецЭД = Неопределено;
					ДобавленныйФайл = Неопределено;
					
					Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
						Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
						ИмяДокумента = "ЭлектронныйДокументИсходящий";
					Иначе
						ИмяДокумента = "ЭлектронныйДокументВходящий"
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныйДокументИсходящий.Ссылка
					|ИЗ
					|	Документ." + ИмяДокумента + " КАК ЭлектронныйДокументИсходящий
					|ГДЕ
					|	ЭлектронныйДокументИсходящий.УникальныйИД = &УникальныйИД";
					
					Запрос.УстановитьПараметр("УникальныйИД",ЭлектронныйДокумент.УникальныйИД);
					
					Выборка = Запрос.Выполнить().Выбрать();
					
					Если Выборка.Следующий() Тогда
						
						ВладелецЭД = Выборка.Ссылка;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ВладелецФайла", ВладелецЭД);
						Если ЭлектронныйДокумент.КодТранзакции = "CustomerTitle"
							Или ЭлектронныйДокумент.КодТранзакции = "CustomerInformation" Тогда
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						Иначе
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
							МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								МассивТипов = Новый Массив;
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТипов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
							КонецЕсли;
							СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТипов);
						КонецЕсли;
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ДобавленныйФайл = Неопределено Тогда
						
						СтруктураЭД = Новый Структура; 
						ЭлектронныйДокументВладелец = "";
						
						СтруктураФайлаЭД = Новый Структура;
						СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД", ЭлектронныйДокумент.ТипЭлементаВерсииЭД);
						
						СодержитДанныеОМаркируемыхТоварах = Ложь;
						Если НЕ ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							ОписаниеОшибки = "";
							
							ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ФайлДанныхЭД.ПолноеИмя, ОписаниеОшибки,,, Истина);
							
							Если ТипЗнч(ДанныеФайлаЭД) = Тип("Структура") Тогда
								ДанныеФайлаЭД = ДанныеФайлаЭД.ДанныеДокумента;
							КонецЕсли;
							
							ФорматЭлектронногоДокумента = ОбменСКонтрагентамиВнутренний.ФорматЭлектронногоДокументаПоОбъекту(ДанныеФайлаЭД);
							Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
								Если ЭлектронныйДокумент.КодРегламента = "Nonformalized" Тогда // неизвестный XML не удалось прочитать
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									ВызватьИсключение ОписаниеОшибки;
								КонецЕсли;
							Иначе
								
								ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуФайлаCMLПоXDTO(ДанныеФайлаЭД, СтруктураФайлаЭД, ОписаниеОшибки);
								Если Не ПустаяСтрока(ОписаниеОшибки) И Не СтруктураФайлаЭД.Свойство("ВидЭД") Тогда
									// Неизвестный XML не удалось определить ВидЭД.
									ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
									
								ИначеЕсли ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено
									И ЭлектронныйДокумент.КодРегламента = "Nonformalized" // Отправили формализованный XML через ПроизвольныйЭД
									И Не ФорматЭлектронногоДокумента.Имя = "АктОРасхождениях" Тогда // исключение для акта о расхождениях.
										ЭлектронныйДокумент.ПроизвольныйЭД = Истина;
								Иначе
									
									Если ЭтоОтветныйТитул(СтруктураФайлаЭД.ТипЭлементаВерсииЭД) Тогда
										
										ВладелецЭД = ОпределитьОбъектПривязки(СтруктураФайлаЭД);
										
										Если ВладелецЭД = Неопределено Тогда
											// Получен ответный титул ЭД ФНС. Если владелец не найден, значит либо его удалили из ИБ,
											// либо ЭД попал сюда случайно.
											ТекстОшибки = НСтр("ru = 'Для полученного ответного титула (%1) не найден исходящий ЭД.
											|Возможные причины:
											|- первичный титул был удален из текущей базы;
											|- полученный пакет не предназначен для текущей ИБ (первичный титул был сформирован в другой базе/копии текущей базы).'");
											ОписаниеОшибки = СтрШаблон(ТекстОшибки, СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
											
											ВызватьИсключение ОписаниеОшибки;
										КонецЕсли;
									КонецЕсли;
									
									СтруктураПараметров = Новый Структура;
									СтруктураПараметров.Вставить("ФайлДанныхСсылка", АдресЭД);
									СтруктураПараметров.Вставить("ФайлДопДанных",    ЭлектронныйДокумент.АдресДополнительногоЭД);
									
									СтруктураЭД = ОбменСКонтрагентамиВнутренний.ПолучитьДанныеИзФайла(СтруктураПараметров);
									
									СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
									СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
									СтруктураЭД.Вставить("НаправлениеЭД",                   ОпределитьНаправление(СтруктураФайлаЭД));
									
									СодержитДанныеОМаркируемыхТоварах = СтруктураЭД.СодержитДанныеОМаркируемыхТоварах;
									
									// Определим формат документа.
									ИдентификаторФормата = ФорматПоПространствуИмен(СтруктураЭД.ВидЭД,
										ДанныеФайлаЭД.Тип().URIПространстваИмен);
									Если ЗначениеЗаполнено(ИдентификаторФормата) Тогда
										СтруктураЭД.Вставить("ИдентификаторФормата", ИдентификаторФормата);
									КонецЕсли;
									
									Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец) Тогда
										СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
									КонецЕсли;
									
									// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
									// в этом случае возьмем НомерЭД из карточки транспортной информации.
									Если ЭлектронныйДокумент.Свойство("КодРегламента") И ЗначениеЗаполнено(ЭлектронныйДокумент.КодРегламента) Тогда
										СтруктураЭД.Вставить("НомерЭД", ЭлектронныйДокумент.НомерЭД);
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
							
							СтруктураЭД.Вставить("ВидЭД",                          Перечисления.ВидыЭД.ПроизвольныйЭД);
							СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",            Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
							СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", "");
							СтруктураЭД.Вставить("НаправлениеЭД",                  Перечисления.НаправленияЭД.Входящий);
							СтруктураЭД.Вставить("СтатусДокумента",                Перечисления.СтатусыЭД.Получен);
							
							ПараметрыФайлаЭД = ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(
								ФайлДанныхЭД.ПолноеИмя, ЭлектронныйДокумент.Расширение);
							
							Если ПараметрыФайлаЭД <> Неопределено Тогда
								ЭлектронныйДокумент.ПроизвольныйЭД = Ложь;
							ИначеЕсли ЭлектронныйДокумент.Расширение = ".xml" Тогда
								ПараметрыФайлаЭД = ПараметрыФайлаПроизвольногоДокумента(ФайлДанныхЭД.ПолноеИмя);
							КонецЕсли;
							
							Если ПараметрыФайлаЭД <> Неопределено Тогда
								СтруктураЭД.Вставить("ФайлДанныхСсылка", АдресЭД);
								СтруктураЭД.Вставить("ПрикладнойВидЭД");
								СтруктураЭД.Вставить("НаименованиеДокументаОтправителя");
								СтруктураЭД.Вставить("НомерДокументаОтправителя");
								СтруктураЭД.Вставить("ДатаДокументаОтправителя");
								СтруктураЭД.Вставить("СуммаДокумента");
								СтруктураЭД.Вставить("ТипДокумента");
								ЗаполнитьЗначенияСвойств(СтруктураЭД, ПараметрыФайлаЭД);
								
								ЗначениеСвойства = Неопределено;
								Если ПараметрыФайлаЭД.Свойство("ИсходныйФормат", ЗначениеСвойства) Тогда
									СтруктураЭД.Вставить("ИсходныйФормат", ЗначениеСвойства);
								КонецЕсли;
								
								Если ПараметрыФайлаЭД.Свойство("ВидЭДДляОтраженияВУчете", ЗначениеСвойства) Тогда
									СтруктураЭД.Вставить("ВидЭДДляОтраженияВУчете", ЗначениеСвойства);
								КонецЕсли;
								
								СтруктураПараметров = Новый Структура;
								СтруктураПараметров.Вставить("ФайлДопДанных", ЭлектронныйДокумент.АдресДополнительногоЭД);
								СтруктураПараметров.Вставить("ФайлДанныхСсылка", АдресЭД);
							КонецЕсли;
						КонецЕсли;
						
						Если ВладелецЭД = Неопределено Тогда
							
							Ответственный = Неопределено;
							ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(ПараметрыПакетаЭД.Контрагент,
								ПараметрыПакетаЭД.Организация, ПараметрыПакетаЭД.ДоговорКонтрагента, Ответственный);
							Если Не ЗначениеЗаполнено(Ответственный) Тогда 
								Ответственный = Пользователи.АвторизованныйПользователь();
							КонецЕсли;
							
							ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
							Если ЭлектронныйДокумент.КодРегламента = "Formalized" 
								Или ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
							КонецЕсли;
							
							СтруктураВладельцаЭД = Новый Структура;
							СтруктураВладельцаЭД.Вставить("Входящий",                          Истина);
							СтруктураВладельцаЭД.Вставить("Организация",                       ПараметрыПакетаЭД.Организация);
							СтруктураВладельцаЭД.Вставить("Контрагент",                        ПараметрыПакетаЭД.Контрагент);		
							СтруктураВладельцаЭД.Вставить("ВерсияФорматаПакета",               ПараметрыПакетаЭД.ВерсияФорматаПакета);
							СтруктураВладельцаЭД.Вставить("Ответственный",                     Ответственный);
							СтруктураВладельцаЭД.Вставить("УникальныйИД",                      ЭлектронныйДокумент.УникальныйИД);
							СтруктураВладельцаЭД.Вставить("ВерсияРегламентаЭДО",               ВерсияРегламентаЭДО);
							СтруктураВладельцаЭД.Вставить("ТребуетсяИзвещение",                ТребуетсяИзвещение);
							СтруктураВладельцаЭД.Вставить("ТипЭлементаВерсииЭД",               СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураВладельцаЭД.Вставить("ТребуетсяПодтверждение",            ЭлектронныйДокумент.ТребуетсяПодтверждение);
							СтруктураВладельцаЭД.Вставить("СодержитДанныеОМаркируемыхТоварах", СодержитДанныеОМаркируемыхТоварах);
							
							СтруктураВладельцаЭД.Вставить("Отправитель",            ПараметрыПакетаЭД.Отправитель);
							СтруктураВладельцаЭД.Вставить("Получатель",             ПараметрыПакетаЭД.Получатель);
							СтруктураВладельцаЭД.Вставить("СпособОбменаЭД",         ПараметрыПакетаЭД.СпособОбменаЭД);
							
							Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
								Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
								СтруктураВладельцаЭД.ТребуетсяПодтверждение = Ложь
							ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
								Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда 
								СтруктураВладельцаЭД.ТребуетсяПодтверждение = Истина
							КонецЕсли;
							
							СтруктураВладельцаЭД.Вставить("ВидЭД",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "ВидЭД", Перечисления.ВидыЭД.ПроизвольныйЭД));
							СтруктураВладельцаЭД.Вставить("ПрикладнойВидЭД",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "ПрикладнойВидЭД"));
							СтруктураВладельцаЭД.Вставить("НомерВерсииЭД",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "НомерВерсииЭД", 0));
							СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "НомерДокументаОтправителя", ""));
							СтруктураВладельцаЭД.Вставить("НомерДокумента",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "НомерДокумента", ""));
							СтруктураВладельцаЭД.Вставить("ДатаДокументаОтправителя",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "ДатаДокументаОтправителя", ""));
							СтруктураВладельцаЭД.Вставить("НаименованиеДокументаОтправителя",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "НаименованиеДокументаОтправителя",
									Строка(ЭлектронныйДокумент.ТипДокумента)));
							СтруктураВладельцаЭД.Вставить("СуммаДокумента",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "СуммаДокумента", 0));
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								Если НЕ ЗначениеЗаполнено(СтруктураВладельцаЭД.НомерДокументаОтправителя)
									И ЭлектронныйДокумент.Свойство("ДополнительныеПараметры")
									И ЗначениеЗаполнено(ЭлектронныйДокумент.ДополнительныеПараметры) Тогда
									
									НомерДокументаОтправителя = "";
									Если ЭлектронныйДокумент.ДополнительныеПараметры.Свойство("Номер", НомерДокументаОтправителя) Тогда
										СтруктураВладельцаЭД.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);
									КонецЕсли;
								КонецЕсли;
								
								ТипДокумента = Неопределено;
								Если НЕ ((СтруктураЭД.Свойство("ТипДокумента", ТипДокумента)
										И ЗначениеЗаполнено(ТипДокумента))
									ИЛИ (ЭлектронныйДокумент.Свойство("ТипДокумента", ТипДокумента)
										И ЗначениеЗаполнено(ТипДокумента))) Тогда
									
									ТипДокумента = Перечисления.ТипыЭД.Прочее;
								КонецЕсли;
								СтруктураВладельцаЭД.Вставить("ТипДокумента", ТипДокумента);
								СтруктураВладельцаЭД.Вставить("Прочитан", Ложь);
								СтруктураВладельцаЭД.Вставить("ЕстьПравилаОтраженияВУчете", СтруктураЭД.Свойство("ВидЭДДляОтраженияВУчете"));
								
								#Область ПоискДокументовОснований
								
								УникальныйИДОснования = Неопределено;
								ДокументОснование = Неопределено;
								Если ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
									И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
									
									// Актуальный алгоритм поиска документов-оснований на стороне получателя.
									СтруктураПараметровПоиска = Новый Структура;
									СтруктураПараметровПоиска.Вставить("Организация", ПараметрыПакетаЭД.Организация);
									СтруктураПараметровПоиска.Вставить("Контрагент",  ПараметрыПакетаЭД.Контрагент);
									СтруктураПараметровПоиска.Вставить("НаправлениеЭД",  Перечисления.НаправленияЭД.Входящий);
									
									ТЗПолученныхОснований = ОбменСКонтрагентамиВнутренний.ТаблицаЗначенийДокументовОснованийПоИдентификаторам(
											ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований, СтруктураПараметровПоиска);
									
									Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
										СтрокаОснования = ТЗПолученныхОснований.Найти(Идентификатор, "УникальныйИД");
										Если СтрокаОснования <> Неопределено Тогда
											ДокументОснование = СтрокаОснования.Ссылка;
										КонецЕсли;
									КонецЦикла;
									
								ИначеЕсли ЭлектронныйДокумент.ТипДокумента = Перечисления.ТипыЭД.СоглашениеОбЭДО Тогда
									// Получено соглашение об обмене ЭД
									ДокументОснование = СсылкаНаОбъектНастройкиЭДО(ПараметрыПакетаЭД.Организация, ПараметрыПакетаЭД.Контрагент,
										ПараметрыПакетаЭД.ДоговорКонтрагента);
								КонецЕсли;
								
								Если ЗначениеЗаполнено(ДокументОснование) Тогда
									ДокументыОснования = Новый Массив;
									ДокументыОснования.Добавить(ДокументОснование);
									СтруктураВладельцаЭД.Вставить("ДокументыОснования", ДокументыОснования);
								КонецЕсли;
								#КонецОбласти
								
							КонецЕсли;
							
							ТаблицаИдентификаторовОснований = Новый ТаблицаЗначений;
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторДокументаОснования");
							ТаблицаИдентификаторовОснований.Колонки.Добавить("ИдентификаторЭДДокументаОснования");
							
							Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
								НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
								НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
							КонецЦикла;
							
							Если СтруктураЭД.Свойство("ИдентификаторыОснованийУПД") Тогда
								Для Каждого Идентификатор Из СтруктураЭД.ИдентификаторыОснованийУПД Цикл
									Если ТаблицаИдентификаторовОснований.Найти(Идентификатор, "ИдентификаторДокументаОснования") = Неопределено Тогда
										НоваяСтрока = ТаблицаИдентификаторовОснований.Добавить();
										НоваяСтрока.ИдентификаторДокументаОснования = Идентификатор;
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							СтруктураВладельцаЭД.Вставить("ИдентификаторыДокументовИЭДОснований", ТаблицаИдентификаторовОснований);
							Если СтруктураФайлаЭД.Свойство("НаборДополнительныхВидовЭД") Тогда
								СтруктураВладельцаЭД.Вставить("НаборДополнительныхВидовЭД", СтруктураФайлаЭД.НаборДополнительныхВидовЭД);
							Иначе
								СтруктураВладельцаЭД.Вставить("НаборДополнительныхВидовЭД", Новый Массив);
							КонецЕсли;
							
							ВладелецЭД = СоздатьЭлектронныйДокумент(СтруктураВладельцаЭД);
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД 
								И НЕ ЗначениеЗаполнено(ДокументОснование) 
								И ЗначениеЗаполнено(ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований)
								И ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований.Количество() > 0 Тогда
								НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
								НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ВладелецЭД);
								Для Каждого Идентификатор Из ЭлектронныйДокумент.МассивИдентификаторовДокументовОснований Цикл
									НоваяЗапись = НаборЗаписей.Добавить();
									НоваяЗапись.ИдентификаторДокументаОснования = Идентификатор;
									НоваяЗапись.ЭлектронныйДокумент = ВладелецЭД;
									НоваяЗапись.ОснованиеПолучено = Ложь;
									НоваяЗапись.ДокументПотомок = ВладелецЭД;
								КонецЦикла;
								НаборЗаписей.Записать(Истина);
							КонецЕсли;
						КонецЕсли;
						
						ПараметрыФайла = Новый Структура();
						ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
						ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
						ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
						ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
						ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
						
						ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
							ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
						
						Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
							
							СтруктураЭД.Вставить("ВладелецЭД",                      ВладелецЭД);
							СтруктураЭД.Вставить("Отправитель",                     ПараметрыПакетаЭД.Отправитель);
							СтруктураЭД.Вставить("Получатель",                      ПараметрыПакетаЭД.Получатель);
							СтруктураЭД.Вставить("УникальныйИД",                    ЭлектронныйДокумент.УникальныйИД);
							СтруктураЭД.Вставить("НомерЭД",                         ЭлектронныйДокумент.НомерЭД);
							СтруктураЭД.Вставить("НаименованиеФайла",               ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураЭД.Вставить("ДополнительнаяИнформация",        ЭлектронныйДокумент.ТекстСопроводительнойЗаписки);
							
							СтатусЭД = Неопределено;
							Если НЕ (СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
								СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Получен);
							КонецЕсли;
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ЭлектронныйДокументВладелец)
							И ЭтоОтветныйТитул(ДобавленныйФайл.ТипЭлементаВерсииЭД)
							И ЭлектронныйДокументВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
							
							СтруктураПараметровЭДВладельца = Новый Структура;
							
							ДопустимыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.ПолученоПодтверждение,
								ЭлектронныйДокументВладелец);
							
							СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
							ИзменитьПоСсылкеПрисоединенныйФайл(
								ЭлектронныйДокументВладелец, СтруктураПараметровЭДВладельца, Ложь);
						КонецЕсли;
						
						Если Не ЭтоОтветныйТитул(СтруктураЭД.ТипЭлементаВерсииЭД) Тогда
							
							Если ТребуетсяИзвещение Тогда
								МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							КонецЕсли;
							
							СоздаватьУчетныйДокумент = Ложь;
							ЗначениеСвойства = Неопределено;
							Если СтруктураЭД.Свойство("ВидЭД", ЗначениеСвойства)
								И ЗначениеСвойства = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
								ПрикладныеВиды = ПрикладныеВидыЭлектронныхДокументов();
								СоздаватьУчетныйДокумент = ПрикладныеВиды.Найти(СтруктураЭД.ПрикладнойВидЭД) <> Неопределено;;
							ИначеЕсли НЕ ЭлектронныйДокумент.ПроизвольныйЭД
								ИЛИ СтруктураЭД.Свойство("ВидЭДДляОтраженияВУчете", ЗначениеСвойства) Тогда
								СоздаватьУчетныйДокумент = ВидЭДИспользуетсяПоНаправлению(ЗначениеСвойства, Перечисления.НаправленияЭД.Входящий);
							КонецЕсли;
							
							Если СоздаватьУчетныйДокумент Тогда
								// Нужно создать учетный документ.
								Если СтруктураФайлаЭД.Свойство("НаборДополнительныхВидовЭД") Тогда
									СтруктураЭД.Вставить("НаборДополнительныхВидовЭД", СтруктураФайлаЭД.НаборДополнительныхВидовЭД);
								Иначе
									СтруктураЭД.Вставить("НаборДополнительныхВидовЭД", Новый Массив);
								КонецЕсли;
								СтрокаПараметрыУчетногоДокумента = ПараметрыСозданияУчетныхДокументов.Добавить();
								СтрокаПараметрыУчетногоДокумента.ВладелецЭД          = ВладелецЭД;
								СтрокаПараметрыУчетногоДокумента.ПараметрыПакетаЭД   = ПараметрыПакетаЭД;
								СтрокаПараметрыУчетногоДокумента.СтруктураЭД         = СтруктураЭД;
								СтрокаПараметрыУчетногоДокумента.СтруктураПараметров = СтруктураПараметров;
								СтрокаПараметрыУчетногоДокумента.ПрисоединенныйФайл  = ДобавленныйФайл;
								СтрокаПараметрыУчетногоДокумента.НомерЭД             = ЭлектронныйДокумент.НомерЭД;
								СтрокаПараметрыУчетногоДокумента.ДанныеФайлаЭД       = ДанныеФайлаЭД;
							КонецЕсли;
							
							#Область ПоискДокументовПотомков
							
							Если ЭлектронныйДокумент.ПроизвольныйЭД Тогда
								ДокументОснование = ВладелецЭД;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ДокументОснование) Тогда
								НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(ЭлектронныйДокумент.НомерЭД, ДокументОснование)
							КонецЕсли;
							
							#КонецОбласти
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
					Иначе
						// Для случая перераспаковки пакета ЭД.
						Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
							Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
								Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "ДополнительныйЭД" Тогда
					
					// Поищем владельца.
					СтруктураПараметровПоиска = Новый Структура;
					СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
					СтруктураПараметровПоиска.Вставить("УникальныйИД",  ЭлектронныйДокумент.УникальныйИД);
					СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
					Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
						ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
					КонецЕсли;
					СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
					
					ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					Если ДобавленныйФайл <> Неопределено Тогда
						
						// Поищем исходный файл доп. данных.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("НомерЭД",       ЭлектронныйДокумент.НомерЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
						
						ДобавленныйДопФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйДопФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ДобавленныйФайл.ВладелецФайла);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
							
							ДобавленныйДопФайл = РаботаСФайлами.ДобавитьФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							ВспомогательнаяСтруктура = Новый Структура;
							ВспомогательнаяСтруктура.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД",         Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
							ВспомогательнаяСтруктура.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Получен);
							ВспомогательнаяСтруктура.Вставить("УникальныйИД",                ЭлектронныйДокумент.УникальныйИД);
							ВспомогательнаяСтруктура.Вставить("НомерЭД",                     ЭлектронныйДокумент.НомерЭД);
							ВспомогательнаяСтруктура.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							ВспомогательнаяСтруктура.Вставить("ВладелецЭД",                  ДобавленныйФайл.ВладелецФайла);
							ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомогательнаяСтруктура);
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭлектронныйДокумент.ТипДанных = "СлужебныйЭД" Тогда
					
					СтруктураФайлаЭД = СформироватьСтруктуруФайлаЭД();
					ОбменСКонтрагентамиВнутренний.ПрочитатьШапкуСлужебногоФайлаCMLпоXDTO(ФайлДанныхЭД.ПолноеИмя,
						ЭлектронныйДокумент.КодРегламента, ЭлектронныйДокумент.КодТранзакции, СтруктураФайлаЭД);
						
					СтруктураФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					// УИД первичного ЭД в ИБ отправителя, он же УникальныйИД в ИБ получателя.
					ГУИДПервичногоЭД = ЭлектронныйДокумент.УникальныйИД;
					
					ЭлектронныйДокументВладелец = Неопределено;
					
					// Для не формализованного документооборота служебные документы поступают только в ИБ отправителя.
					Если ЭлектронныйДокумент.КодТранзакции = "CancellationOfferReject" Тогда
						ПараметрыПоиска = Новый Соответствие;
						ПараметрыПоиска.Вставить("УникальныйИД",              ГУИДПервичногоЭД);
						ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД",       Перечисления.ТипыЭлементовВерсииЭД.ПОА);
						ПараметрыПоиска.Вставить("ВладелецФайла.Организация", ПараметрыПакетаЭД.Организация);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
						НаименованиеВладельца = СтруктураФайлаЭД.ДополнительныеДанные.НаименованиеВладельца;
						ПараметрыПоиска = Новый Соответствие;
						ПараметрыПоиска.Вставить("УникальныйИД",              ГУИДПервичногоЭД);
						ПараметрыПоиска.Вставить("НаименованиеФайла",         НаименованиеВладельца);
						ПараметрыПоиска.Вставить("ВладелецФайла.Организация", ПараметрыПакетаЭД.Организация);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
						ЭлектронныйДокументВладелец = ПервичныйЭД;
					ИначеЕсли ЭлектронныйДокумент.КодРегламента = "Nonformalized" 
						Или ЭлектронныйДокумент.КодРегламента = "Formalized"
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
						Или СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
							
							ПараметрыПоиска = Новый Соответствие;
							ПараметрыПоиска.Вставить("УникальныйИД", ГУИДПервичногоЭД);
							ПараметрыПоиска.Вставить("ВладелецФайла.Организация", ПараметрыПакетаЭД.Организация);
							
							Если ВРег(ЭлектронныйДокумент.КодРегламента) = ВРег("Invoice") Тогда
								
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							Иначе
								МассивТиповЭД = Новый Массив;
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
								МассивТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
								ПараметрыПоиска.Вставить("ТипЭлементаВерсииЭД", МассивТиповЭД);
								
							КонецЕсли;
							
							ПервичныйЭД = ОпределитьЭлектронныйДокумент(ПараметрыПоиска);
							
							ПервичныйЭДНайден = (ПервичныйЭД <> Неопределено);
							
							Если ПервичныйЭДНайден Тогда
								Если ЗначениеЗаполнено(ПервичныйЭД.ЭлектронныйДокументВладелец) Тогда
									ПервичныйЭД = ПервичныйЭД.ЭлектронныйДокументВладелец;
								КонецЕсли;
							КонецЕсли;
						Иначе
							
							ПервичныйЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДПервичногоЭД));
							ПервичныйЭДНайден = (ПервичныйЭД.ПолучитьОбъект() <> Неопределено);
							
						КонецЕсли;
						
						ЭлектронныйДокументВладелец = ПервичныйЭД;
						
					Иначе
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",  ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						
						ТипЭлементаВерсииЭД = Новый Массив;
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
						ТипЭлементаВерсииЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
						
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
						ПервичныйЭД = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						ПервичныйЭДНайден = ПервичныйЭД <> Неопределено;
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
							ЭлектронныйДокументВладелец = ПервичныйЭД;
						КонецЕсли;
						
					КонецЕсли;
					
					Если Не ПервичныйЭДНайден Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						
						Параметры = Новый Структура;
						Параметры.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
						
						Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
						Иначе
							Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ);
						КонецЕсли;
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       Параметры.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", Параметры.ТипЭлементаВерсииЭД);
						ЭлектронныйДокументВладелец = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
					КонецЕсли;
					
					Если ЭлектронныйДокументВладелец = Неопределено Тогда
						ТекстСообщения = НСтр("ru = 'Не удалось найти владельца для служебного электронного документа.'");
						ВызватьИсключение ТекстСообщения;
					КонецЕсли;
					
					ВладелецЭД = ПервичныйЭД.ВладелецФайла;
					
					Если СтруктураФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.Ошибка Тогда
						
						ШаблонСообщения = НСтр("ru = 'Возникла ошибка при передаче электронного документа %1, получатель %2.'");
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПервичныйЭД,
							ВладелецЭД.Контрагент);
						
						ПодробныйШаблонОшибки = НСтр("ru = 'При передаче электронного документа %1, возникла ошибка: %2.
							|Документ информационной базы (владелец электронного документа) - %3.'");
						ПодробныйТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодробныйШаблонОшибки, ПервичныйЭД,
						СтруктураФайлаЭД.ОписаниеОшибки, ВладелецЭД);
						
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Передача электронного документа'"),
							ПодробныйТекстОшибки, ТекстСообщения);
						
						СтруктураОбновленияПараметров = Новый Структура;
						СтруктураОбновленияПараметров.Вставить("ВладелецЭД",     ВладелецЭД);
						СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",  ПервичныйЭД.НаправлениеЭД);
						СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ОписаниеОшибки);
						СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД", ПервичныйЭД.ТипЭлементаВерсииЭД);
						СтруктураОбновленияПараметров.Вставить("СтатусЭД", ПолучитьДопустимыйСтатусЭД(
							СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
						
						ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров);
						
					Иначе
						
						// Поместим файл данных в присоединенные файлы к документу БД.
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("УникальныйИД",        ГУИДПервичногоЭД);
						СтруктураПараметровПоиска.Вставить("НаправлениеЭД",       СтруктураФайлаЭД.НаправлениеЭД);
						СтруктураПараметровПоиска.Вставить("ТипЭлементаВерсииЭД", СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
						СтруктураПараметровПоиска.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
						
						ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска);
						Если ДобавленныйФайл = Неопределено Тогда
							
							ПараметрыФайла = Новый Структура();
							ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
							ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
							ПараметрыФайла.Вставить("ИмяБезРасширения", ЭлектронныйДокумент.ИмяБезРасширения);
							ПараметрыФайла.Вставить("РасширениеБезТочки", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЭлектронныйДокумент.Расширение));
							ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		
							ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
								ПараметрыФайла, ЭлектронныйДокумент.АдресЭД, , , ЭлектронныйДокумент.СсылкаНаЭДПрисоединенныйФайл);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                  ВладелецЭД);
							СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Входящий);
							СтруктураОбновленияПараметров.Вставить("УникальныйИД",                ГУИДПервичногоЭД);
							СтруктураОбновленияПараметров.Вставить("НомерЭД",                     
								?(ЗначениеЗаполнено(ЭлектронныйДокумент.НомерЭД), ЭлектронныйДокумент.НомерЭД, ЭлектронныйДокументВладелец.НомерЭД));
							СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",               СтруктураФайлаЭД.НомерВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("Отправитель",                 ПараметрыПакетаЭД.Отправитель);
							СтруктураОбновленияПараметров.Вставить("Получатель",                  ПараметрыПакетаЭД.Получатель);
							СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭлектронныйДокументВладелец);
							СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",         СтруктураФайлаЭД.ТипЭлементаВерсииЭД);
							СтруктураОбновленияПараметров.Вставить("НаименованиеФайла",           ЭлектронныйДокумент.ИмяБезРасширения);
							СтруктураОбновленияПараметров.Вставить("СтатусЭД", ПолучитьДопустимыйСтатусЭД(
								Перечисления.СтатусыЭД.Получен, ДобавленныйФайл));
							
							ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров, Ложь);
							
							СтруктураОбновленияПараметров = Новый Структура;
							СтруктураОбновленияПараметров.Вставить("СтатусЭД",
								ПолучитьДопустимыйСтатусЭД(СтруктураФайлаЭД.СтатусЭДВладельца, ПервичныйЭД));
							
							Если ЗначениеЗаполнено(СтруктураФайлаЭД.ТекстУточнения) Тогда
								СтруктураОбновленияПараметров.Вставить("ТекстУточнения", СтруктураФайлаЭД.ТекстУточнения);
							КонецЕсли;
							
							СтатусЭДВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "СтатусЭД");
							
							Если НЕ (ЭтоСчетФактура(ПервичныйЭД)
								И СтруктураОбновленияПараметров.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
								И (СтатусЭДВладельца = Перечисления.СтатусыЭД.Сформирован
									ИЛИ СтатусЭДВладельца = Перечисления.СтатусыЭД.Утвержден))
									И НЕ (СтруктураОбновленияПараметров.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
									И СтатусЭДВладельца = Перечисления.СтатусыЭД.Аннулирован) Тогда
								ИзменитьПоСсылкеПрисоединенныйФайл(ПервичныйЭД, СтруктураОбновленияПараметров, Ложь);
							КонецЕсли;
							
							Если ЭлектронныйДокумент.КодРегламента = "Invoice" Тогда
								
							Если  ЭлектронныйДокумент.КодТранзакции <> "ReceiveNotice"
								И ЭлектронныйДокумент.КодТранзакции <> "CorrectionNoticeReceiveNotice"
								И ЭлектронныйДокумент.КодТранзакции <> "CancellationOffer"
								И ЭлектронныйДокумент.КодТранзакции <> "CancellationOfferReject" Тогда
								
								МассивДобавленныхФайловДляИзвещений.Добавить(ДобавленныйФайл);
							КонецЕсли;
								
								Если ЭлектронныйДокумент.КодТранзакции = "PostDateConfirmation" 
									Или ЭлектронныйДокумент.КодТранзакции = "SendConfirmation"
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNotice" 
									Или ЭлектронныйДокумент.КодТранзакции = "ReceiveNoticePostDateConfirmation" Тогда
									
									Для Каждого Строка Из ВладелецЭД.ДокументыОснования Цикл
										
										Если ЗначениеЗаполнено(Строка.ДокументОснование)
											И ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(Строка.ДокументОснование) Тогда
											
											ОбменСКонтрагентамиПереопределяемый.ЗаполнитьРеквизитыЭСФ(Строка.ДокументОснование, ДобавленныйФайл);
										КонецЕсли;
											
									КонецЦикла;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("ReceiveNotice") Тогда
									
									Если ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
										ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
									КонецЕсли;
								КонецЕсли;
								
								Если ВРег(ЭлектронныйДокумент.КодТранзакции) = ВРег("PostDateConfirmation") Тогда
									ВладелецДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПервичныйЭД, "ВладелецФайла");
									Если ЗначениеЗаполнено(ВладелецДокумента) Тогда
										ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецДокумента, "ТребуетсяИзвещение");
										Если Не ТребуетсяИзвещение Тогда
											ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(ПервичныйЭД, Перечисления.НаправленияЭД.Исходящий);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
						Иначе
							
							// Для случая перераспаковки пакета ЭД.
							Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
								Если Подпись.УникальныйИД = ЭлектронныйДокумент.УникальныйИД Тогда
									Подпись.СсылкаНаЭДПрисоединенныйФайл = ДобавленныйФайл;
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
						
						// Занесем информацию в пакет ЭД.
						МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Записываем ЭП в ЭД.
			Для Каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
				
				Если НЕ ЗначениеЗаполнено(Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось найти электронный документ для сохранения подписи.'");
					ВызватьИсключение ТекстСообщения;
				КонецЕсли;
				
				ДвоичныеДанныеПодписи = Неопределено;
				Если НЕ Подпись.Свойство("ДанныеФайлаЭП", ДвоичныеДанныеПодписи) Тогда
					ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
				КонецЕсли;
				
				Если ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, Подпись.СсылкаНаЭДПрисоединенныйФайл) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеСертификата = Неопределено;
				Если НЕ Подпись.Свойство("ДанныеСертификата", ДанныеСертификата) Тогда
					ДанныеСертификата = ПолучитьИзВременногоХранилища(Подпись.АдресСертификата);
					УдалитьИзВременногоХранилища(Подпись.АдресСертификата);
				КонецЕсли;
				
				СвойстваПодписи = Новый Структура;
				СвойстваПодписи.Вставить("Подпись",             ДвоичныеДанныеПодписи);
				СвойстваПодписи.Вставить("Сертификат",          ДанныеСертификата);
				СвойстваПодписи.Вставить("Отпечаток",           Подпись.Отпечаток);
				СвойстваПодписи.Вставить("КомуВыданСертификат", Подпись.КомуВыданСертификат);
				СвойстваПодписи.Вставить("ПодписьВерна",        Подпись.ПодписьВерна);
				СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Подпись.ДатаПроверкиПодписи);
				
				ЭлектроннаяПодпись.ДобавитьПодпись(Подпись.СсылкаНаЭДПрисоединенныйФайл, СвойстваПодписи);
				
				НовыйСтатусЭД = Неопределено;
				Если Подпись.КодТранзакции = "MainDocumentResign" Тогда
					
					НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ПолученоПодтверждение,
						Подпись.СсылкаНаЭДПрисоединенныйФайл);
					
				ИначеЕсли Подпись.КодТранзакции = "CancellationOfferResign" Тогда
					
					НовыйСтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыйСтатусЭД) Тогда
					СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
					ИзменитьПоСсылкеПрисоединенныйФайл(Подпись.СсылкаНаЭДПрисоединенныйФайл,
						СтруктураПараметров, Ложь);
					
					// Занесем информацию в пакет ЭД.
					МассивДобавленныхФайлов.Добавить(Подпись.СсылкаНаЭДПрисоединенныйФайл);
				КонецЕсли;
				
			КонецЦикла;
			
			// Отправим на формирование ИОП сразу на сервере.
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСлужебныхЭД,
					СформироватьСлужебныеЭД(МассивДобавленныхФайловДляИзвещений, Перечисления.ВидыЭД.ИзвещениеОПолучении));
			КонецЕсли;
			
			// Обработаем пакет ЭД
			ПакетЭДОбъект = СтруктураПакетаЭД.ПакетЭДСсылка.ПолучитьОбъект();
			
			// Добавим информацию о присоединенном файле в документ пакета электронных документов.
			Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
				
				НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
				НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
				НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
				
				НовыеДокументы.Добавить(ДобавленныйФайл);
				
			КонецЦикла;
			
			ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
			ПакетЭДОбъект.Записать();
			
			// статистика по отправленным документам
			КоличествоЭД = 0;
			Для Каждого Строка Из ПакетЭДОбъект.ЭлектронныеДокументы Цикл
				Если Не ЭтоСлужебныйДокумент(Строка.ЭлектронныйДокумент) Тогда
					КоличествоЭД = КоличествоЭД + 1
				КонецЕсли;
			КонецЦикла;
			Если КоличествоЭД Тогда
				ЗаписатьСтатистикуПоДокументообороту(
					ПараметрыПакетаЭД.СпособОбменаЭД, 
					ПараметрыПакетаЭД.Получатель, 
					"Получено", 
					КоличествоЭД)
			КонецЕсли;
			// конец статистика по отправленным документам
			
			КоличествоРаспакованныхЭД = КоличествоРаспакованныхЭД + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ЗначениеЗаполнено(ФайлЭД) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ФайлЭД);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'При распаковке пакетаЭД: %1 возникла ошибка:
			|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	// Контроль отражения в учете.
	ИсключитьНеОтражаемыеВУчетеЭлектронныеДокументы(ПараметрыСозданияУчетныхДокументов);
	НаборЭлектронныхДокументов = ПараметрыСозданияУчетныхДокументов.ВыгрузитьКолонку("ВладелецЭД");
	ВключитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов);
	
	// Создание учетных документов.
	Если ПараметрыСозданияУчетныхДокументов.Количество() Тогда
		
		Для Каждого Строка Из ПараметрыСозданияУчетныхДокументов Цикл
			
			НачатьТранзакцию();
			
			Попытка
				
				ДокументыУчета = Неопределено;
				
				ПараметрыПакетаЭД   = Строка.ПараметрыПакетаЭД;
				СтруктураЭД         = Строка.СтруктураЭД;
				СтруктураПараметров = Строка.СтруктураПараметров;
				СтруктураПараметров.Вставить("ЭлектронныйДокумент", Строка.ВладелецЭД);
				
				СпособОбработки = СпособОбработкиВходящегоДокумента(
					ПараметрыПакетаЭД, СтруктураЭД.ВидЭД, СтруктураЭД.ТипЭлементаВерсииЭД, Строка.СтруктураЭД.НаборДополнительныхВидовЭД);
				
				// Если документ обрабатывается не вручную, нужно проверить актуальность формата.
				ИдентификаторФормата = Неопределено;
				Если НЕ ВРег(СпособОбработки) = ВРег("Вручную") 
					И СтруктураЭД.Свойство("ИдентификаторФормата", ИдентификаторФормата) Тогда
					СведенияОФормате = СведенияОФормате(СтруктураЭД.ВидЭД, ИдентификаторФормата);
					
					Если ЗначениеЗаполнено(СведенияОФормате.ДатаОкончанияДействия) 
						И КонецДня(СведенияОФормате.ДатаОкончанияДействия) < СтруктураЭД.ДатаФормированияЭДОтправителем Тогда
						// Формат стал неактуальным прежде, чем был сформирован документ - автоматически документ не создаем.
						СпособОбработки = "Вручную";
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ((ТипЗнч(СпособОбработки) = Тип("Структура") 
					И (ВРег(СпособОбработки.СчетФактура) = ВРег("Вручную") ИЛИ ВРег(СпособОбработки.ПервичныйДокумент) = ВРег("Вручную")))
					ИЛИ ВРег(СпособОбработки) = ВРег("Вручную")) Тогда
					
					Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
						Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ВладелецЭД, "Организация, Контрагент, ДоговорКонтрагента");
						НастройкаЭДО = СсылкаНаОбъектНастройкиЭДО(Реквизиты.Организация, Реквизиты.Контрагент, Реквизиты.ДоговорКонтрагента);
						ВладелецКаталога = Новый Массив;
						ВладелецКаталога.Добавить(НастройкаЭДО);
						СтруктураПараметров.Вставить("ДокументыУчета", ВладелецКаталога);
						СтруктураПараметров.Вставить("ЗаполнитьДокумент");
					Иначе
						СтруктураПараметров.Удалить("ВладелецЭД");
						ДокументыУчета = ОпределитьОбъектПривязки(СтруктураЭД);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(ДокументыУчета) Тогда
						ЗначениеСвойства = Неопределено;
						Если СтруктураЭД.Свойство("ИсходныйФормат", ЗначениеСвойства) Тогда
							ПараметрыДокумента = Новый Структура;
							ПараметрыДокумента.Вставить("ИсходныйФормат", ЗначениеСвойства);
							ПараметрыДокумента.Вставить("ВариантЗаполнения",
								ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураЭД, "ВариантЗаполнения", ""));
							ДанныеXML = ПолучитьИзВременногоХранилища(СтруктураЭД.ФайлДанныхСсылка);
							ДанныеCML = ДанныеCMLПроизвольногоДокумента(ДанныеXML, ПараметрыДокумента);
							Если ДанныеCML <> Неопределено Тогда
								СтруктураПараметров.Вставить("ФайлДанныхСсылка", ПоместитьВоВременноеХранилище(ДанныеCML));
							КонецЕсли;
						КонецЕсли;
						
						Если СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
							ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъектаПрикладногоФормата(
								СтруктураПараметров, СпособОбработки);
						Иначе
							ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДокументыУчета) Тогда
						
						ПерезаполнитьЗапросКоммерческихПредложений =
							СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросКоммерческихПредложений
							И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения");
						
						Для каждого ДокументУчета Из ДокументыУчета Цикл
							
							ДокументОбъект = Строка.ВладелецЭД.ПолучитьОбъект();
							НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
							НоваяСтрока.ДокументОснование = ДокументУчета;
							
							Если ТипЗнч(СпособОбработки) = Тип("Структура") Тогда
								
								Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(ДокументУчета) Тогда
									НоваяСтрока.СпособОбработки = СпособОбработки.СчетФактура;
								Иначе
									НоваяСтрока.СпособОбработки = СпособОбработки.ПервичныйДокумент;
								КонецЕсли;
								
							Иначе
								НоваяСтрока.СпособОбработки  = СпособОбработки;
							КонецЕсли;
							
							ДокументОбъект.Записать();
							УстановитьСсылкуДляВладельцаВРегистреСостояний(ДокументУчета, Строка.ВладелецЭД);
							
							Если ПерезаполнитьЗапросКоммерческихПредложений Тогда
								МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
								МодульПодсистемы.ПерезаполнитьЗапросКоммерческихПредложений(ДокументУчета, Строка.ВладелецЭД, СпособОбработки);
							КонецЕсли;
							
						КонецЦикла;
						
						НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(Строка.НомерЭД, ДокументыУчета[0])
						
					КонецЕсли;
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ШаблонСообщения = НСтр("ru = 'При отражении в учете электронного документа: %1 возникла ошибка:
					|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения,
					ПредставлениеЭД(Строка.ПрисоединенныйФайл), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					НСтр("ru = 'Создание учетного документа'"), ТекстОшибки, ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновим данные по основаниям у владельцев ЭД.
	НайтиЗаполнитьОснованияУВладельцевЭД();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Используется для получения представления ЭД с клиента.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ЭД для которого надо получить представление.
//
// Возвращаемое значение:
//  Строка - представление электронного документа.
//
Функция ПредставлениеЭД(СсылкаНаЭД) Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Представление", ПолучитьПредставлениеЭД(СсылкаНаЭД));
	Структура.Вставить("Значение", СсылкаНаЭД);
	
	Возврат Структура.Представление;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьСлужебныеЭД(МассивФайловЭД, ВидЭД, ТекстУточнения = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭлектронногоДокумента,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.УникальныйИД КАК УникальныйИД,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
		|	ЭДПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
		|	ЭДПрисоединенныеФайлы.НаименованиеФайла КАК НаименованиеФайла,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Организация КАК Организация,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.Контрагент КАК Контрагент,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.НаименованиеДокументаОтправителя КАК НаименованиеДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.НомерДокументаОтправителя КАК НомерДокументаОтправителя,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла.ДатаДокументаОтправителя КАК ДатаДокументаОтправителя
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивФайловЭД);
	
	ПараметрыЭД = Запрос.Выполнить().Выбрать();
	Пока ПараметрыЭД.Следующий() Цикл
		
		ЭтоИзвещение = НЕ ЗначениеЗаполнено(ТекстУточнения);
		
		Если ЭтоИзвещение Тогда
			// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
			Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(ПараметрыЭД.ТипЭлементаВерсииЭД) Тогда
				
				Возврат МассивВозврата;
			КонецЕсли;

			Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
				Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД) Тогда
				
				ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПараметрыЭД.ТипЭлементаВерсииЭД);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
				Возврат МассивВозврата;
			КонецЕсли;
		КонецЕсли;
		
		АдресВоВременномХранилище = "";
		
		СтруктураЭД = ОбменСКонтрагентамиВнутренний.СформироватьФайлСлужебногоДокументаПоЭД(ПараметрыЭД, ВидЭД, ТекстУточнения);
		Если НЕ ЗначениеЗаполнено(СтруктураЭД)
			Или НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			
			Возврат МассивВозврата;
		КонецЕсли;
		ДатаСозданияФайла = ТекущаяДатаСеанса();
		
		НачатьТранзакцию();
		Попытка
			ПараметрыФайла = Новый Структура();
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", ПараметрыЭД.ВладелецФайла);
			ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураЭД.ИдФайла);
			ПараметрыФайла.Вставить("РасширениеБезТочки", "xml");
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
			ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(
				ПараметрыФайла, АдресВоВременномХранилище, , , НоваяСсылкаЭД);

			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
			СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
			СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
			СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
			СтруктураПараметров.Вставить("НомерЭД",                     Строка(ДобавленныйФайл.УникальныйИдентификатор()));
			СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
			СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
			СтруктураПараметров.Вставить("НаименованиеФайла",           СтруктураЭД.ИдФайла);
			Если ЭтоИзвещение Тогда
				ТипЭлементаВерсииЭД = ОбменСКонтрагентамиВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(ПараметрыЭД);
			ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
			Иначе
				Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
				Иначе
					
					ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ;
				КонецЕсли;
			КонецЕсли;
			СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ТипЭлементаВерсииЭД);
			СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ПараметрыЭД.ФайлЭлектронногоДокумента);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
			
			Если НЕ ЭтоИзвещение Тогда
				Если ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
					// Нужно отклонить ответные титулы, если их уже успели сформировать.
					ТипыОтветныхТитулов = ТипыОтветныхТитулов();
					ТипыОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД); // для старых форматов.
					
					НовыйСтатусЭД = Перечисления.СтатусыЭД.Отклонен;
					Запрос = Новый Запрос;
					Запрос.Текст =
						"ВЫБРАТЬ
						|	ПодчиненныеЭД.Ссылка,
						|	ПодчиненныеЭД.ВладелецФайла
						|ИЗ
						|	Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
						|		ПО (ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец)
						|ГДЕ
						|	ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭлементовВерсий)
						|	И ПодчиненныеЭД.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
						|	И ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
					Запрос.УстановитьПараметр("Ссылка", ПараметрыЭД.ФайлЭлектронногоДокумента);
					Запрос.УстановитьПараметр("ТипыЭлементовВерсий", ТипыОтветныхТитулов);
					ОтборПоВладельцу = Новый Структура("ЭлектронныйДокументВладелец", ПараметрыЭД.ФайлЭлектронногоДокумента);
					ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировку(
						"Справочник.ЭДПрисоединенныеФайлы", ОтборПоВладельцу,, РежимБлокировкиДанных.Разделяемый);
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					Пока Выборка.Следующий() Цикл
						ЭДОФайл = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(Выборка.Ссылка);
						ЭДОФайл.СтатусЭД = НовыйСтатусЭД;
						ЭДОФайл.Записать();
						
						ЗаписатьПричинуОтклонения(Выборка.ВладелецФайла,ТекстУточнения);
					КонецЦикла;
					
				Иначе
					НовыйСтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании;
					
				КонецЕсли;
				СтруктураПараметров = Новый Структура("СтатусЭД, ПричинаОтклонения", НовыйСтатусЭД, ТекстУточнения);
				ИзменитьПоСсылкеПрисоединенныйФайл(ПараметрыЭД.ФайлЭлектронногоДокумента, СтруктураПараметров, Ложь);
			КонецЕсли;
			МассивВозврата.Добавить(ДобавленныйФайл);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Проверка на тип счет-фактура.
//
// Параметры:
//  ЭлектронныйДокумент	- Ссылка - электронный документ и ли тип элемента версии.
// 
// Возвращаемое значение:
//  Булево - Истина, если это счет-фактура.
//
Функция ЭтоСчетФактура(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;

	Если ТипЗнч(ЭлектронныйДокумент) = Тип("ПеречислениеСсылка.ТипыЭлементовВерсииЭД") Тогда
		ТипЭлементаВерсииЭД = ЭлектронныйДокумент;
	Иначе
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		Или ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определение электронного документа.
//
// Параметры:
//  СтруктураПараметровПоиска - Структура - параметры поиска.
// 
// Возвращаемое значение:
//  ЭДПрисоединенныеФайлы.Ссылка - ссылка на электронный документ.
//
Функция ОпределитьЭлектронныйДокумент(СтруктураПараметровПоиска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекстЗапроса);
	
	Для Каждого Элемент Из СтруктураПараметровПоиска Цикл
		Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент.Значение) = Тип("Массив") Тогда
			ШаблонУсловия = "И ЭДПрисоединенныеФайлы.%1 В (&%2)";
		Иначе
			ШаблонУсловия = "И ЭДПрисоединенныеФайлы.%1 = &%2";
		КонецЕсли;
		
		ИмяПараметра = СтрЗаменить(Элемент.Ключ,".","");
		ТекстУсловия = СтрШаблон(ШаблонУсловия, Элемент.Ключ, ИмяПараметра);
		МассивСтрок.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр(ИмяПараметра, Элемент.Значение);
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивСтрок, Символы.ПС);
	Результат = Запрос.Выполнить().Выбрать();
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

// Создание и отправка пакетов электронных документов.
//
// Параметры:
//  ДобавленныеФайлы - Массив - список электронных документов.
//  ПризнакПодписи - Булево - признак подписи.
//  СоотвСоглашенийИПараметровСертификатов -Соответствие - соответствие соглашений и сертификатов.
// 
// Возвращаемое значение:
//  Структура - результат выполнения функции.
//
Функция СоздатьИОтправитьДокументыПЭД(Знач ДобавленныеФайлы,
									  Знач ПризнакПодписи,
									  Знач СоотвСоглашенийИПараметровСертификатов = Неопределено) Экспорт
	
	МассивСтруктурПакетовЭД = СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	МассивПакетовДляОтправкиСКлиента   = Новый Массив;
	МассивПакетовДляПовторнойОтправки  = Новый Массив;
	ТребуетсяПовторнаяОтправка = Новый Соответствие;
	Если МассивСтруктурПакетовЭД.Количество() > 0 Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.Свойство("ОтправкаСКлиента") Тогда
				МассивПакетовДляОтправкиСКлиента.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			Если НемедленнаяОтправкаЭД() Тогда
				
				ПовторнаяОтправкаПакетовПрофиляЭДО = ТребуетсяПовторнаяОтправка[СтруктураПЭД.ИдентификаторУчетнойЗаписи];
				Если ПовторнаяОтправкаПакетовПрофиляЭДО = Истина Тогда
					МассивПакетовДляПовторнойОтправки.Добавить(СтруктураПЭД.ПЭД);
				Иначе
					ПовторнаяОтправка = Ложь;
					МассивПЭД = Новый Массив;
					МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
					ОтправленоПакетов = ОтправкаПакетовЭД(МассивПЭД, СоотвСоглашенийИПараметровСертификатов,
						Неопределено, ПовторнаяОтправка);
					КолОтправленных = КолОтправленных + ОтправленоПакетов;
					
					Если ПовторнаяОтправка Тогда
						МассивПакетовДляПовторнойОтправки.Добавить(СтруктураПЭД.ПЭД);
						ТребуетсяПовторнаяОтправка.Вставить(СтруктураПЭД.ИдентификаторУчетнойЗаписи, ПовторнаяОтправка);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных",                    КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	СтруктураРезультата.Вставить("МассивПакетовДляПовторнойОтправки",  МассивПакетовДляПовторнойОтправки);
	Возврат СтруктураРезультата;
	
КонецФункции

// Создание пакетов электронных документов.
// 
// Параметры:
//  МассивЭД - Массив - ссылки на электронные документы, которые надо включить в пакет.
//  ПризнакПодписи - Булево - признак, что документы подписаны ЭП.
//
// Возвращаемое значение:
//  Массив - список структур пакетов ЭД.
//
Функция СоздатьДокументыПакетовЭД(МассивФайловЭД, ПризнакПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаПакетовЭД = Новый ТаблицаЗначений;
	ТаблицаПакетовЭД.Колонки.Добавить("ПЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("СпособОбменаЭД");
	ТаблицаПакетовЭД.Колонки.Добавить("ВерсияФорматаПакета");
	ТаблицаПакетовЭД.Колонки.Добавить("ТребуетсяИзвещениеОПолучении");
	ТаблицаПакетовЭД.Колонки.Добавить("ИдентификаторУчетнойЗаписи");
	
	МассивПодготовленныхКОтправкеЭД = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ФайлЭлектронногоДокумента,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
		|	ЭлектронныйДокументИсходящий.ИдентификаторОрганизации КАК Отправитель,
		|	ЭлектронныйДокументИсходящий.ИдентификаторКонтрагента КАК Получатель,
		|	ЭлектронныйДокументИсходящий.Организация КАК Организация,
		|	ЭлектронныйДокументИсходящий.Контрагент КАК Контрагент,
		|	ЭлектронныйДокументИсходящий.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЭлектронныйДокументИсходящий.ТребуетсяИзвещение КАК ТребуетсяИзвещениеОПолучении,
		|	ЭлектронныйДокументИсходящий.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
		|			И (ЭлектронныйДокументИсходящий.СостояниеЭДО <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
		|		ПО (ЭлектронныйДокументИсходящий.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации)
		|			И (ЭлектронныйДокументИсходящий.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента)
		|			И (ПриглашенияКОбмену.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылок)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.Ссылка,
		|	ЭДПрисоединенныеФайлы.ВладелецФайла,
		|	ЭДПрисоединенныеФайлы.СтатусЭД,
		|	ЭлектронныйДокументВходящий.ИдентификаторОрганизации,
		|	ЭлектронныйДокументВходящий.ИдентификаторКонтрагента,
		|	ЭлектронныйДокументВходящий.Организация,
		|	ЭлектронныйДокументВходящий.Контрагент,
		|	ЭлектронныйДокументВходящий.ДоговорКонтрагента,
		|	ЭлектронныйДокументВходящий.ТребуетсяИзвещение,
		|	ЭлектронныйДокументВходящий.СпособОбменаЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбмену
		|		ПО (ЭлектронныйДокументВходящий.ИдентификаторОрганизации = ПриглашенияКОбмену.ИдентификаторОрганизации)
		|			И (ЭлектронныйДокументВходящий.ИдентификаторКонтрагента = ПриглашенияКОбмену.ИдентификаторКонтрагента)
		|			И (ПриглашенияКОбмену.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято))
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивФайловЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументНеПодписан = Выборка.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
			ИЛИ Выборка.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан;
		Если (ПризнакПодписи И ДокументНеПодписан)
			ИЛИ НЕ УстановленныеПодписиВалидны(Выборка.ФайлЭлектронногоДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПакетаЭД = Новый Структура("Отправитель, Получатель, Организация, Контрагент, ДоговорКонтрагента,
			|ТребуетсяИзвещениеОПолучении, ВерсияФорматаПакета, СпособОбменаЭД, ВладельцыЭД");
		ЗаполнитьЗначенияСвойств(ПараметрыПакетаЭД, Выборка);
		ПараметрыПакетаЭД.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		ПараметрыПакетаЭД.ВладельцыЭД = Новый Соответствие;
		ПараметрыПакетаЭД.ВладельцыЭД.Вставить(Выборка.ФайлЭлектронногоДокумента, Выборка.ВладелецФайла);
		
		ПЭД = СоздатьПакетЭД(ПараметрыПакетаЭД,
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Выборка.ФайлЭлектронногоДокумента));
		
		Если ЗначениеЗаполнено(ПЭД) Тогда
			НовСтрока = ТаблицаПакетовЭД.Добавить();
			НовСтрока.ПЭД = ПЭД;
			НовСтрока.ВерсияФорматаПакета = ПараметрыПакетаЭД.ВерсияФорматаПакета;
			НовСтрока.СпособОбменаЭД = ПараметрыПакетаЭД.СпособОбменаЭД;
			НовСтрока.ИдентификаторУчетнойЗаписи = ПараметрыПакетаЭД.Отправитель;
			НовСтрока.ТребуетсяИзвещениеОПолучении = ПараметрыПакетаЭД.ТребуетсяИзвещениеОПолучении;
			МассивПодготовленныхКОтправкеЭД.Добавить(Выборка.ФайлЭлектронногоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем массив структур для обработки на клиенте.
	МассивСтруктурПЭД = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаПакетовЭД Цикл
		СтруктураПЭД = Новый Структура;
		СтруктураПЭД.Вставить("ПЭД", ТекСтрока.ПЭД);
		СтруктураПЭД.Вставить("ТребуетсяШифрованиеНаКлиенте", Ложь);
		СтруктураПЭД.Вставить("ИдентификаторУчетнойЗаписи", ТекСтрока.ИдентификаторУчетнойЗаписи);
		
		Если (ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ ТекСтрока.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО) Тогда
				
			Если ОбменСКонтрагентамиВнутренний.СформироватьЭДПрисоединенныйФайлПакетаОператораЭДО(
				ТекСтрока.ПЭД, Неопределено, ТекСтрока.ТребуетсяИзвещениеОПолучении) Тогда
				
				МассивСтруктурПЭД.Добавить(СтруктураПЭД);
			Иначе
				Для Каждого ЭД Из ТекСтрока.ПЭД.ЭлектронныеДокументы Цикл
					ЭДВМассиве = МассивПодготовленныхКОтправкеЭД.Найти(ЭД.ЭлектронныйДокумент);
					Если ЭДВМассиве <> Неопределено Тогда
						МассивПодготовленныхКОтправкеЭД.Удалить(ЭДВМассиве);
					КонецЕсли;
				КонецЦикла;
				НачатьТранзакцию();
				Попытка
					ПЭД = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ТекСтрока.ПЭД);
					ПЭД.СтатусПакета    = Перечисления.СтатусыПакетовЭД.Отменен;
					ПЭД.ПометкаУдаления = Истина;
					ПЭД.Записать();
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
		Иначе
			СформироватьЭДПрисоединенныйФайлПакета(ТекСтрока.ПЭД);
			МассивСтруктурПЭД.Добавить(СтруктураПЭД);
		КонецЕсли;
	КонецЦикла;
	ОбновитьСтатусыЭД(МассивПодготовленныхКОтправкеЭД, ПризнакПодписи);
	
	Возврат МассивСтруктурПЭД;
	
КонецФункции

// Отправка пакетов электронных документов.
//
// Параметры:
//  МассивПакетовЭД - Массив - отправляемые пакеты.
//  СоотвСоглашенийИПараметровСертификатов - Соответствие - Соответствие соглашений и сертификатов.
//  ОтправленныеДокументы - Массив - отправленные электронные документы.
//  ПовторнаяОтправка - Булево - требуется повторная отправка.
// 
// Возвращаемое значение:
//  Число - количество отправленных пакетов.
//
Функция ОтправкаПакетовЭД(Знач МассивПакетовЭД, Знач СоотвСоглашенийИПараметровСертификатов,
	ОтправленныеДокументы = Неопределено, ПовторнаяОтправка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщения = "";
	
	РезультатОтправки = 0;
	Для Каждого ПакетЭД Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
				Перечисления.СтатусыПакетовЭД.Отправлен,
				ТекущаяДатаСеанса());
				
			Если Не ПакетЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ОтменитьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			РеквизитыПакетаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД,
				"СпособОбменаЭД, ЭлектронныеДокументы, Отправитель");
			
			МассивУчетныхЗаписейЭДО = Новый Массив;
			МассивУчетныхЗаписейЭДО.Добавить(РеквизитыПакетаЭД.Отправитель);
			
			ТипОтправки = РеквизитыПакетаЭД.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				Или ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				СоотвСоглашений = Неопределено;
				Если ТипЗнч(СоотвСоглашенийИПараметровСертификатов) = Тип("Соответствие")
					И СоотвСоглашенийИПараметровСертификатов.Количество() > 0 Тогда
					ПараметрыСертификата = СоотвСоглашенийИПараметровСертификатов.Получить(Врег(РеквизитыПакетаЭД.Отправитель));
				ИначеЕсли ДоступныПараметрыДляАвторизацииНаСервереОператора(МассивУчетныхЗаписейЭДО, СоотвСоглашений) Тогда
					ПараметрыСертификата = СоотвСоглашений.Получить(РеквизитыПакетаЭД.Отправитель);
				Иначе
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				Маркер = Неопределено;
				Если Не (РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(ПараметрыСертификата)
					И ПараметрыСертификата.Свойство("МаркерРасшифрованный", Маркер) И ЗначениеЗаполнено(Маркер)) Тогда
					ОтменитьТранзакцию();
					ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				КоличествоОтправленных = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	АдресКаталогаОтправки,
																	"SendMessage",
																	РеквизитыПакетаЭД.СпособОбменаЭД,
																	ПовторнаяОтправка,
																	РеквизитыПакетаЭД.Отправитель);
																	
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					ОтменитьТранзакцию();
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
					
					ОбновитьИнформациюОбАктивностиУчетнойЗаписи(РеквизитыПакетаЭД.Отправитель);
					
				КонецЕсли;
				
				ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД);
				
			КонецЕсли;
			
			// статистика по отправленным документам
			ВыборкаЭД = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
			КоличествоЭД = 0;
			Пока ВыборкаЭД.Следующий() Цикл
				Если Не ЭтоСлужебныйДокумент(ВыборкаЭД.ЭлектронныйДокумент) Тогда
					КоличествоЭД = КоличествоЭД + 1;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоЭД Тогда
				ЗаписатьСтатистикуПоДокументообороту(ТипОтправки, РеквизитыПакетаЭД.Отправитель, "Отправлено", КоличествоЭД)
			КонецЕсли;
			// конец статистика по отправленным документам
			
			ТранзакцияЗафиксирована = Истина;
			ЗафиксироватьТранзакцию();
						
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонСообщения = НСтр("ru = 'Ошибка отправки пакета по учетной записи: %1, способ обмена: %2
									|%3'");
			КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				РеквизитыПакетаЭД.Отправитель, РеквизитыПакетаЭД.СпособОбменаЭД, КраткоеПредставлениеОшибки);
			ШаблонВидаОперации = НСтр("ru = 'отправка пакета ЭД по учетной записи: %1, способ обмена %2'");
			ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонВидаОперации, РеквизитыПакетаЭД.Отправитель, РеквизитыПакетаЭД.СпособОбменаЭД);
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
			ТранзакцияЗафиксирована = Ложь;
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована И ОтправленныеДокументы <> Неопределено Тогда
			
			ВыборкаДокументов = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				ОтправленныеДокументы.Добавить(ВыборкаДокументов.ЭлектронныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(АдресКаталогаОтправки) Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаОтправки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Функция проверяет наличие в структуре расшифрованного маркера, если его нет, то пытается расшифровать
// зашифрованный маркер, если расшифровка прошла успешно, то расшифрованный маркер помещается в структуру.
//
// Параметры:
//  СтруктураСертификата - структура - содержит сертификат ЭП и его параметры, включая расшифрованный
//    или зашифрованный маркер.
//
// Возвращаемое значение:
//  Булево - Истина - в структуре есть расшифрованный маркер, иначе - Ложь.
//
Функция РасшифроватьМаркерИзСтруктурыСертификатаНаСервере(СтруктураСертификата) Экспорт
	
	Расшифрован = Ложь;
	
	Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
		МаркерРасшифрованный = Неопределено;
		МаркерЗашифрованный = Неопределено;
		МенеджерКриптографии = Неопределено;
		Если ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере() Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
			Исключение
				МенеджерКриптографии = Неопределено;
			КонецПопытки;
		КонецЕсли;
		
		Если СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
			И ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
			Расшифрован = Истина;
		ИначеЕсли СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный)
			И ЗначениеЗаполнено(МаркерЗашифрованный) И МенеджерКриптографии <> Неопределено Тогда
			Попытка
				СтруктураСертификата.Свойство("ПарольПользователя", МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу);
				Маркер = МенеджерКриптографии.Расшифровать(МаркерЗашифрованный);
				Если ЗначениеЗаполнено(Маркер) Тогда
					Расшифрован = Истина;
					СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
				КонецЕсли;
			Исключение
				Операция = НСтр("ru = 'Расшифровка маркера'");
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					Операция, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Расшифрован;
	
КонецФункции

// Используется в случае отсутствия возможности предложить пользователю выбрать сертификат из списка доступных и/или
// ввести пароль для сертификата (например при выполнении регламентного задания).
// Возвращает Истина, если для входящих переменных найден хотя бы один сертификат с сохраненным в ИБ паролем.
//
// Параметры:
//  МассивПрофилейНастроекЭДО     - Массив - содержит ссылки на профили настроек ЭДО, по которым требуется определить сертификаты;
//  ПараметрыАвторизации - Соответствие - в этой переменной в вызывающий метод возвращается соответствие:
//    * Ключ     - СправочникСсылка.СоглашенияОбИспользованииЭД - соглашение, для которого определен сертификат авторизации.
//    * Значение - Соответствие - соответствие сертификата и его параметров:
//       ** Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//       ** Значение - Структура - структура параметров сертификата:
//           *** СертификатПодписи           - СправочникСсылка.СертификатыЭП.
//           *** ПарольПолучен               - Булево.
//           *** ПарольПользователя          - Строка.
//           *** Отпечаток                   - Строка.
//           *** Отозван                     - Булево.
//           *** ДвоичныеДанныеСертификата             - ХранилищеЗначений.
//           *** ОповещенОСрокеДействия      - Булево.
//           *** ДатаОкончания               - Дата.
//           *** ЗапомнитьПарольКСертификату - Булево.
//
// Возвращаемое значение:
//  Булево - Истина, если найдены сертификат(ы) с сохраненными в ИБ паролями, иначе Ложь.
//
Функция ДоступныПараметрыДляАвторизацииНаСервереОператора(Знач МассивПрофилейНастроекЭДО = Неопределено,
														ПараметрыАвторизации = Неопределено) Экспорт
	
	Попытка
		МассивОтпечатковСертификатов = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
	Исключение
		МассивОтпечатковСертификатов = Новый Массив;
	КонецПопытки;
	
	ДоступныПараметры = Ложь;
	Если МассивОтпечатковСертификатов.Количество() > 0 Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковСервер", МассивОтпечатковСертификатов);
		
		Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
		
		ПараметрыАвторизации = Новый Соответствие;
		СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
		СоотвСертификатовИИхСтруктур = Неопределено;
		Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
			И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
			И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
			И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
			// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
			// по данному соглашению. Функция должна вернуть (в ПараметрыАвторизации) Соответствие, в котором Ключ - Соглашение,
			// Значение - Соответствие сертификата и его параметров.
			Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
				
				ПрофильНастроекЭДО = Элемент.Ключ;
				РеквизитыПрофиляНастроекЭДО = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ПрофильНастроекЭДО);
				
				МассивСертификатов = Элемент.Значение;
				Для Каждого Сертификат Из МассивСертификатов Цикл
					КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
					ПараметрыСертификата = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
					
					Если ПараметрыСертификата.ПарольПолучен Тогда
						ПараметрыАвторизации.Вставить(Элемент.Ключ, ПараметрыСертификата);
						ДоступныПараметры = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступныПараметры;
	
КонецФункции

// Функция получает данные по сертификатам, разрешенным для использования при подписании ЭД и авторизации
// на сервере оператора ЭДО. Поиск сертификатов выполняется как пересечение массивов сертификатов установленных в
// личном хранилище (клиента либо сервера, в зависимости от настроек в 1с), с сертификатами импортированными в 1с и
// зарегистрированными у оператора ЭДО (регистрация у оператора отражается в таб.части соглашения об обмене ЭД
// "СертификатыПодписейОрганизации"). При необходимости, выборка может быть ограничена массивом соглашений, по которым
// требуется определить параметры сертификатов.
//
// Параметры:
//  МассивУчетныхЗаписей - Массив - строки с идентификаторами, по которым требуется определить сертификаты;
//  ЭлектронныеДокументы - Массив - содержит ссылки на электронные документы;
//  СтМассивовСтруктурСертификатов - Структура - может содержать 2 элемента: МассивСтруктурСертификатовСервер
//    и МассивСтруктурСертификатовКлиент, соответственно массив структур сертификатов личного хранилища с сервера и
//    то же самое с клиента.
//
// Возвращаемое значение:
//  Структура - пустая, либо содержит 3 элемента:
//    СоотвСоглашенийИСертификатовПодписи;
//    СоотвСоглашенийИСертификатовАвторизации;
//    СоотвСертификатовИИхСтруктур.
//
Функция НастройкиЭДОИСертификатыАвторизации(Знач МассивУчетныхЗаписей, Знач ЭлектронныеДокументы = Неопределено,
	Знач СтМассивовСтруктурСертификатов = Неопределено) Экспорт  
	
	СтруктураСоответствий = Новый Структура;
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере();
	// Если используется отложенная отправка, то искать сертификаты авторизации не надо.
	МассивОтпечатковКлиент = Новый Массив;
	МассивОтпечатковСервер = Новый Массив;
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	Если ТипЗнч(СтМассивовСтруктурСертификатов) = Тип("Структура") Тогда
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковСервер", МассивОтпечатковСервер);
		СтМассивовСтруктурСертификатов.Свойство("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		Если ВыполнятьКриптооперацииНаСервере И НЕ ЗначениеЗаполнено(МассивОтпечатковСервер) И ИспользоватьЭП Тогда
			Попытка
				МассивОтпечатковСервер = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
			Исключение
				ВидОперации = НСтр("ru = 'Получение данных сертификатов'");
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	МассивОтпечатковСервер = ?(ЗначениеЗаполнено(МассивОтпечатковСервер), МассивОтпечатковСервер, Новый Массив);
	МассивОтпечатковКлиент = ?(ЗначениеЗаполнено(МассивОтпечатковКлиент), МассивОтпечатковКлиент, Новый Массив);
	
	МассивОтпечатковДляАвторизации = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковКлиент);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковДляАвторизации, МассивОтпечатковСервер);
	
	Если (МассивОтпечатковСервер <> Неопределено И МассивОтпечатковСервер.Количество())
		Или (МассивОтпечатковКлиент <> Неопределено И МассивОтпечатковКлиент.Количество()) Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСертификатов.Сертификат КАК Сертификат,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя
		|ПОМЕСТИТЬ ТаблицаСертификатов
		|ИЗ
		|	&ТаблицаСертификатов КАК ТаблицаСертификатов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторОрганизации,
		|	УчетныеЗаписиЭДО.ПринятыУсловияИспользования КАК ПринятыУсловияИспользования,
		|	Сертификаты.Ссылка КАК СертификатПодписи,
		|	ТаблицаСертификатов.ПарольПользователя КАК ПарольПользователя,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗапомнитьПарольКСертификату,
		|	ВЫБОР
		|		КОГДА ТаблицаСертификатов.Сертификат ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПарольПолучен,
		|	Сертификаты.Отпечаток КАК Отпечаток,
		|	Сертификаты.Отозван КАК Отозван,
		|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
		|	Сертификаты.ПользовательОповещенОСрокеДействия КАК ОповещенОСрокеДействия,
		|	Сертификаты.ДействителенДо КАК ДатаОкончания,
		|	Сертификаты.Программа КАК Программа
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
		|				ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСертификатов КАК ТаблицаСертификатов
		|				ПО (ТаблицаСертификатов.Сертификат = Сертификаты.Ссылка)
		|			ПО СертификатыУчетныхЗаписейЭДО.Сертификат = Сертификаты.Ссылка
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|ГДЕ
		|	НЕ Сертификаты.ПометкаУдаления
		|	И НЕ Сертификаты.Отозван
		|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
		|	И Сертификаты.Отпечаток В(&МассивОтпечатковДляАвторизации)
		|	И УчетныеЗаписиЭДО.СпособОбменаЭД В (ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском), ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО))
		|	И &ИспользоватьЭП
		|	И УчетныеЗаписиЭДО.ИдентификаторЭДО В(&МассивПрофилейНастроекЭДО)
		|	И ВЫБОР
		|			КОГДА Сертификаты.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, Сертификаты.ДействителенДо, ДЕНЬ) > 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПарольПолучен УБЫВ";
		
		Запрос.УстановитьПараметр("МассивОтпечатковДляАвторизации", МассивОтпечатковДляАвторизации);
		Запрос.УстановитьПараметр("ПустойПользователь",		Справочники.Пользователи.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());
		Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
		Запрос.УстановитьПараметр("ИспользоватьЭП",			ИспользоватьЭП);
		Запрос.УстановитьПараметр("ТекущаяДата",			ТекущаяДатаСеанса());
		СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковДляАвторизации);
		ТЗ_Сертификатов = Новый ТаблицаЗначений;
		ТЗ_Сертификатов.Колонки.Добавить("Сертификат",
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ТЗ_Сертификатов.Колонки.Добавить("ПарольПользователя", Новый ОписаниеТипов("Строка"));
		Для Каждого Элемент Из СертификатыСПаролями Цикл
			НоваяСтрока = ТЗ_Сертификатов.Добавить();
			НоваяСтрока.Сертификат = Элемент.Ключ;
			НоваяСтрока.ПарольПользователя = Элемент.Значение;
		КонецЦикла;
		Запрос.УстановитьПараметр("ТаблицаСертификатов", ТЗ_Сертификатов);
		Если НЕ ЗначениеЗаполнено(МассивУчетныхЗаписей) Тогда
			МассивУчетныхЗаписей = Новый Массив;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлектронныеДокументы) И МассивУчетныхЗаписей.Количество() = 0 Тогда
			МассивУчетныхЗаписей = Новый Массив;
			Если ТипЗнч(ЭлектронныеДокументы) = Тип("Массив") И ЭлектронныеДокументы.Количество() > 0 Тогда

				СоотвЭДИСтруктурыВладельцев = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ЭлектронныеДокументы, "ВладелецФайла");
				МассивВладельцевЭД = Новый Массив;
				Для Каждого ЭлементСоответствия Из СоотвЭДИСтруктурыВладельцев Цикл
					МассивВладельцевЭД.Добавить(ЭлементСоответствия.Значение.ВладелецФайла);
				КонецЦикла;
				СоотвЭДИСтруктурыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВладельцевЭД, "ИдентификаторОрганизации");
				Для Каждого ЭДВладелец Из СоотвЭДИСтруктурыСоглашений Цикл
					ИдентификаторОрганизации = ЭДВладелец.Значение.ИдентификаторОрганизации;
					Если МассивУчетныхЗаписей.Найти(ИдентификаторОрганизации) = Неопределено Тогда
						МассивУчетныхЗаписей.Добавить(ИдентификаторОрганизации);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если МассивУчетныхЗаписей.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("МассивПрофилейНастроекЭДО", МассивУчетныхЗаписей);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И УчетныеЗаписиЭДО.ИдентификаторЭДО В(&МассивПрофилейНастроекЭДО)", "");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		СоотвСоглашенийИМассиваСертификатовАвторизации = Новый Соответствие;
		СоотвСертификатовИИхСтруктур = Новый Соответствие;
		
		// Для авторизации, помимо сертификатов, попытаемся получить маркеры, по возможности расшифрованные.
		
		МенеджерКриптографииДоступенНаСервере = Ложь;
		Если ВыполнятьКриптооперацииНаСервере Тогда
			Попытка
				МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Ложь);
				МенеджерКриптографииДоступенНаСервере = Истина;
			Исключение
				МенеджерКриптографииДоступенНаСервере = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		ТекущийИдентификаторОрганизации = Неопределено;
		Пока Выборка.Следующий() Цикл
			
			Если ТекущийИдентификаторОрганизации <> Выборка.ИдентификаторОрганизации Тогда
				МассивСертификатов = Новый Массив;
				ТекущийИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
			КонецЕсли;
			МассивСертификатов.Добавить(Выборка.СертификатПодписи);
			
			Если СоотвСоглашенийИМассиваСертификатовАвторизации.Получить(ТекущийИдентификаторОрганизации) = Неопределено Тогда
				СоотвСоглашенийИМассиваСертификатовАвторизации.Вставить(ТекущийИдентификаторОрганизации, МассивСертификатов);
			КонецЕсли;
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток, Отозван, Программа,
													|ДанныеСертификата, ОповещенОСрокеДействия, ДатаОкончания, ЗапомнитьПарольКСертификату");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, Выборка);
						// Заполняем данные для авторизации.
			Если ТипЗнч(СтруктураСертификата.ДанныеСертификата) = Тип("ХранилищеЗначения") Тогда
				ПарольПолучен = Выборка.ПарольПолучен;
				СтруктураСертификата.Вставить("ПарольПользователя", Выборка.ПарольПользователя);
				СтруктураСертификата.Вставить("ПарольПолучен", ПарольПолучен);
				Расшифровывать = (ПарольПолучен И МенеджерКриптографииДоступенНаСервере);
				
				СтруктураПараметровЗапросаМаркера = СтруктураСертификата;
				СтруктураПараметровЗапросаМаркера.Вставить("СпособОбменаЭД", Выборка.СпособОбменаЭД);
				СтруктураПараметровЗапросаМаркера.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
					
				ПараметрыОбработки = Новый Структура("Расшифровывать", Расшифровывать);
				Маркер = ОбменСКонтрагентамиВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, , ПараметрыОбработки);
				
				Если ТипЗнч(Маркер) = Тип("ДвоичныеДанные") Тогда
					Если Расшифровывать Тогда
						СтруктураСертификата.Вставить("МаркерРасшифрованный", Маркер);
					Иначе
						СтруктураСертификата.Вставить("МаркерЗашифрованный", Маркер);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			СоотвСертификатовИИхСтруктур.Вставить(Строка(Выборка.СертификатПодписи.УникальныйИдентификатор()) + "_" + Выборка.ИдентификаторОрганизации,
				СтруктураСертификата);
			
		КонецЦикла;
		
		СтруктураСоответствий.Вставить("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации);
		СтруктураСоответствий.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	КонецЕсли;
	
	Возврат СтруктураСоответствий;
	
КонецФункции

// Возвращает двоичные данные электронного документа.
//
// Параметры:
//  СсылкаНаФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  СертификатПодписи - Ссылка - ссылка на элемент справочника Сертификаты электронной подписи.
//
// Возвращаемое значение:
//  ДвоичныеДанные - двоичные данные электронного документа.
//
Функция ПолучитьДвоичныеДанныеФайла(СсылкаНаФайлЭД, СертификатПодписи) Экспорт
	
	ДвоичныеДанныеЭД = РаботаСФайлами.ДвоичныеДанныеФайла(СсылкаНаФайлЭД);
	
	Если ЗначениеЗаполнено(СертификатПодписи) Тогда
		
		ПараметрыФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаФайлЭД, "НаправлениеЭД, Расширение, ТипЭлементаВерсииЭД, ВладелецФайла");
		ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла,"ВидЭД,Организация");
		УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СсылкаНаФайлЭД);
		
		ПараметрыФайлаЭД.Вставить("Организация", ПараметрыЭД.Организация);
		
		ПолучаемДанные = Ложь;
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			ПолучаемДанные = Ложь;
		
		ИначеЕсли ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или ЭтоУведомлениеОбУточнении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
			Или (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
			Или ЭтоОтветныйТитул(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", Неопределено);
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УПД
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УКД
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				Или (ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
					И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
						Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
						ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях)) Тогда
			
			ПолучаемДанные = Истина;
			ПараметрыФайлаЭД.Вставить("ВидЭД", ПараметрыЭД.ВидЭД);
			
		КонецЕсли;
		
		// Если уже установлена хотя бы одна подпись, документ менять нельзя, иначе подпись станет недействительной.
		Если УстановленныеПодписи.Количество() > 0 Тогда
			ПолучаемДанные = Ложь;
		КонецЕсли;
			
		Если ПолучаемДанные Тогда 
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "xml") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(ПараметрыФайлаЭД.Расширение);
				ДвоичныеДанныеЭД.Записать(ИмяФайла);
				
			ИначеЕсли СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				
				ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
				ДвоичныеДанныеЭД.Записать(ИмяАрхива);
				ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("signature", СсылкаНаФайлЭД.УникальныйИдентификатор());
				
				ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(ИмяАрхива, ПапкаДляРаспаковки, НСтр("ru = 'Извлечение ЭД CML из архива при подписи'"));
				
				ФайлыЭД = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
				Если ФайлыЭД.Количество() > 0 Тогда
					ИмяФайла = ФайлыЭД[0].ПолноеИмя;
				КонецЕсли;
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяАрхива);
			КонецЕсли;
			
			// Прочитаем файл для последующего редактирования.
			ОписаниеОшибки = "";
			ДанныеФайлаЭД = ОбменСКонтрагентамиВнутренний.ДанныеФайлаЭД(ИмяФайла, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеФайлаЭД) = Тип("Структура") Тогда
				ДанныеФайлаЭД = ДанныеФайлаЭД.ДанныеДокумента;
			КонецЕсли;
			
			// Заполним тег Подписант в ЭД.
			ПространствоИменСхемы = ДанныеФайлаЭД.Тип().URIПространстваИмен;
			ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыФайлаЭД, СертификатПодписи);
			
			ДанныеФайлаЭД.Проверить();
			
			// Записываем ЭД в файл и удаляем пространство имен только у ФНС документов.
			Если ДанныеФайлаЭД.Свойства().Получить("ИдФайл") <> Неопределено Тогда
				
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла, Ложь);
				ОбменСКонтрагентамиВнутренний.УдалитьПространствоИмен(ИмяФайла, ПространствоИменСхемы);
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ВыгрузитьЭДВФайл(ДанныеФайлаЭД, ИмяФайла);
			КонецЕсли;
			
			Если СтрНайти(ПараметрыФайлаЭД.Расширение, "zip") > 0 Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла("zip");
				АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяФайла);
				
				ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
				Для Каждого Файл Из ФайлыАрхива Цикл
					АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
				КонецЦикла;
				
				Попытка
					АрхивКонтейнер.Записать();
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Формирование архива ЭД при подписи'"),
						ТекстОшибки, НСтр("ru = 'Невозможно записать архив'"));
				КонецПопытки;
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				
			КонецЕсли;
			
			ДвоичныеДанныеЭД = Новый ДвоичныеДанные(ИмяФайла);
			
			ИнформацияОФайле = Новый Структура;
			ИнформацияОФайле.Вставить("АдресФайлаВоВременномХранилище", ПоместитьВоВременноеХранилище(ДвоичныеДанныеЭД));
			ИнформацияОФайле.Вставить("АдресВременногоХранилищаТекста", "");
			
			РаботаСФайлами.ОбновитьФайл(СсылкаНаФайлЭД, ИнформацияОФайле);
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДвоичныеДанныеЭД;
	
КонецФункции

// Выполняет действия с ЭД после установки электронной подписи.
//
// Параметры:
//  СоответствиеСертификатовПодписаннымЭд - Соответствие - ключ: СправочникСсылка.СертификатыЭлектроннойПодписиИШифрования,
//														   значение: массив, элементы - СправочникСсылка.ЭДПрисоединенныеФайлы;
//  ЭДСНезавершеннойПодписью - Массив - массив документов, по которым подписание еще не завершено, 
//										элементы: СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Процедура ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд, ЭДСНезавершеннойПодписью = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭДСНезавершеннойПодписью = Неопределено Тогда
		ЭДСНезавершеннойПодписью = Новый Массив;
	КонецЕсли;
	
	Для Каждого СертификатМассивЭД Из СоответствиеСертификатовПодписаннымЭд Цикл
		Сертификат = СертификатМассивЭД.Ключ;
		МассивЭДКОбновлениюСтатуса = СертификатМассивЭД.Значение;
		
		Для Каждого ПрисоединенныйФайл Из МассивЭДКОбновлениюСтатуса Цикл
			СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "СпособОбменаЭД");
			
			НачатьТранзакцию();
			Попытка
				СтруктураПараметров = Новый Структура;
				ВесМаршрута = 0;
				ЭлектронноеВзаимодействиеСлужебный.ОбновитьМаршрутПриПодписании(ПрисоединенныйФайл, Сертификат, ВесМаршрута);
				ПредставлениеПрогрессаПодписания = ПредставлениеПрогрессаПодписания(
						ПрисоединенныйФайл, ВесМаршрута);
				СтруктураПараметров.Вставить("ПредставлениеПрогрессаПодписания", ПредставлениеПрогрессаПодписания);
								
				Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
					НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
					Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
						НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																				Перечисления.СтатусыЭД.ПолностьюПодписан,
																				ПрисоединенныйФайл);
					Иначе
						НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																				Перечисления.СтатусыЭД.Подписан,
																				ПрисоединенныйФайл);
					КонецЕсли;
					
					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
				Иначе
					ЭДСНезавершеннойПодписью.Добавить(ПрисоединенныйФайл);
					
					НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
						Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
					

					СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
					СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
					ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
					
					// Нужно принудительно обновить регистр сведений "СостоянияЭД", поскольку изменилось количество подписей.
					ОбновитьВерсиюЭДВРегистре(ПрисоединенныйФайл.ВладелецФайла, ПрисоединенныйФайл.ВладелецФайла.СостояниеЭДО,
						Новый Структура("ПредставлениеСостояния", "1"));
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
				ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
				Операция = НСтр("ru = 'установка подписи ЭП'");
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет принадлежность сертификата пользователя к облачному сервису.
//
// Параметры:
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - сертификат электронной подписи и шифрования.
//
// Возвращаемое значение:
//  Булево - Истина, если сертификат является облачным.
//
Функция ЭтоСертификатОблачногоСервиса(Сертификат) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
		|	ЕСТЬNULL(ПрограммыЭлектроннойПодписиИШифрования.ЭтоПрограммаОблачногоСервиса, ЛОЖЬ) КАК ЭтоПрограммаОблачногоСервиса
		|ИЗ
		|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|		ПО СертификатыКлючейЭлектроннойПодписиИШифрования.Программа = ПрограммыЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Сертификат);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЭтоПрограммаОблачногоСервиса Тогда
			ВозвращаемоеЗначение = Истина;
		Иначе
			Отпечатки = Новый Соответствие;
			ПолучитьЛичныеОтпечаткиВСервисе(Отпечатки);
			Если ЗначениеЗаполнено(Отпечатки)
				И Отпечатки.Получить(Выборка.Отпечаток) <> Неопределено Тогда
				ВозвращаемоеЗначение = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает отпечатки сертификатов пользователя в облачном сервисе.
//
// Параметры:
//  ОтпечаткиОблачныхСертификатов - Соответствие - Ключ - отпечаток в формате строки Base64, а Значение - Истина;
//
Процедура ПолучитьЛичныеОтпечаткиВСервисе(ОтпечаткиСертификатов) Экспорт
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	МодульХранилищеСертификатов = ОбщегоНазначения.ОбщийМодуль("ХранилищеСертификатов");
	ПерсональныеСертификаты = МодульХранилищеСертификатов.Получить("ПерсональныеСертификаты");
	Для Каждого ПерсональныйСертификат Из ПерсональныеСертификаты Цикл
		Если ПерсональныйСертификат.ДатаОкончания <= ДатаСеанса Тогда
			Продолжить; // Пропуск просроченных сертификатов.
		КонецЕсли;

		Отпечаток = Base64Строка(ПерсональныйСертификат.Отпечаток);
		ОтпечаткиСертификатов.Вставить(Отпечаток, Истина);
	КонецЦикла;
		
КонецПроцедуры

// Возвращает признак использования сертификатов пользователя в облачном сервисе.
//
// Возвращаемое значение:
//  Булево - флаг использования в сертификатов пользователя в облачном сервисе.
//
Функция ИспользованиеСертификатовОблачногоСервисаВозможно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользованиеВозможно = Константы.ИспользоватьСертификатыОблачногоСервисаВЭДО.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользованиеВозможно;
	
КонецФункции

// Определение действующей настройки ЭДО.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка - электронный документ.
//  ПараметрыЭД - Структура - параметры поиска и заполнения данными.
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  СообщатьОбОшибке - Булево - признак вывода сообщения об ошибке.
// 
// Возвращаемое значение:
//  Булево - Истина, если настройка определена.
//
Функция ОпределитьДействующуюНастройкуЭДО(СсылкаНаВладельца, ПараметрыЭД = Неопределено, ВидЭД = Неопределено, СообщатьОбОшибке = Ложь) Экспорт
	
	Результат = Истина;
	
	ПараметрыЭД = ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаВладельца);
	Если Не ЗначениеЗаполнено(ПараметрыЭД.ВидЭД) Тогда
		
		Если ЗначениеЗаполнено(ВидЭД) Тогда
			
			ПараметрыЭД.ВидЭД = ВидЭД;
		Иначе
			МассивСсылок = Новый Массив;
			МассивСсылок.Добавить(СсылкаНаВладельца);
			
			СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(МассивСсылок);
			Для Каждого ТекЭл Из МассивСсылок Цикл
				
				СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ТекЭл);
				Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
					ПараметрыЭД.ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	ПараметрыОбмена = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено, Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		
		ПроверитьИСоздатьНастройкиОбмена(ПараметрыЭД.Организация, ПараметрыЭД.Контрагент,
							ПараметрыЭД.ДоговорКонтрагента, ПараметрыЭД.ВидЭД, ПараметрыЭД.ПрикладнойВидЭД);
							
		ПараметрыОбмена = ОпределитьНастройкиОбменаЭД(ПараметрыЭД, Неопределено);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОбмена) Тогда
		Результат = Ложь;
		
		Если СообщатьОбОшибке Тогда
			ШаблонСообщения = НСтр("ru = 'Не удалось определить настройку ЭДО для параметров: 
			|организация %1, 
			|контрагент %2, 
			|договор %3.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
				ПараметрыЭД.Организация, ПараметрыЭД.Контрагент, ПараметрыЭД.ДоговорКонтрагента);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		ПараметрыЭД.Вставить("СтатусПодключения", Перечисления.СтатусыПриглашений.Отклонено);
	Иначе
		ПараметрыЭД.Вставить("СтатусПодключения", ПараметрыОбмена.СтатусПодключения);
		
	КонецЕсли;
	
	ПараметрыЭД.ЭтоАктуальныйВидЭД = ВидЭДИспользуетсяПоНаправлению(ПараметрыЭД.ВидЭД, ПараметрыЭД.НаправлениеЭД);
	
	Возврат Результат;
	
КонецФункции

// Получение соответствия документов и электронных документов.
//
// Параметры:
//  СписокВладельцев - Массив - владельцы электронных документов.
//  СписокЭлектронныхДокументов - Массив - электронные документы.
// 
// Возвращаемое значение:
//  Соответствие - ссылки на владельцев и электронных документов.
//
Функция ВладельцыИЭлектронныеДокументы(СписокВладельцев = Неопределено, СписокЭлектронныхДокументов = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если Не СписокВладельцев = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&СписокВладельцев)";
		Запрос.УстановитьПараметр("СписокВладельцев", СписокВладельцев);
	ИначеЕсли Не СписокЭлектронныхДокументов = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент В(&СписокЭлектронныхДокументов)";
		Запрос.УстановитьПараметр("СписокЭлектронныхДокументов", СписокЭлектронныхДокументов);
	Иначе
		Возврат СоответствиеВладельцевИЭД;
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭД, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

Процедура ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТаблицаЭД,
	ВыполняетсяОбновлениеИнформационнойБазы = Ложь) Экспорт
	
	ДокументыРеализации = Новый Массив;
	ДокументыОтклонения = Новый Массив;
	УтвержденныеСФ		= Новый Массив;
	ИсправляемыеДокументы = Новый Массив;
	ИсправляемыеВидыЭД = Новый Массив;
	ИсправляемыеВидыЭД.Добавить(Перечисления.ВидыЭД.АктОРасхождениях);
	Для Каждого ТекСтрока Из ТаблицаЭД Цикл
		ФайлЭлектронногоДокумента = ТекСтрока.ФайлЭлектронногоДокумента;
		ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(ФайлЭлектронногоДокумента);
		
		Если НЕ ЭтоСлужебныйДокумент Тогда 					
			// Для исходящих ЭД изменим состояние документов основания 
			Если ТекСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И (ТекСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					ИЛИ ТекСтрока.ВидЭД = Перечисления.ВидыЭД.УПД
					ИЛИ ТекСтрока.ВидЭД = Перечисления.ВидыЭД.УКД
					ИЛИ ТекСтрока.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
				УтвержденныеСФ.Добавить(ФайлЭлектронногоДокумента);
			Иначе
				Если ЭтоДокументРеализации(ТекСтрока) Тогда
					ДокументыРеализации.Добавить(ТекСтрока.ЭлектронныйДокумент);
				ИначеЕсли ИсправляемыеВидыЭД.Найти(ТекСтрока.ВидЭД) <> Неопределено Тогда
					ИсправляемыеДокументы.Добавить(ФайлЭлектронногоДокумента);
				КонецЕсли;
			КонецЕсли;
			ДокументыОтклонения.Добавить(ФайлЭлектронногоДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Меняем состояние предыдущих входящих с.ф.
	Если УтвержденныеСФ.Количество() > 0 Тогда
		ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(УтвержденныеСФ, Перечисления.НаправленияЭД.Входящий,
			ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;
		
	// Для документов вида РТУ меняем состояние их документов основания, если они есть
	Если ДокументыРеализации.Количество() > 0 Тогда
		ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеОснованийРТУ(ДокументыРеализации, ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;
	
	Если ДокументыОтклонения.Количество() > 0 Тогда
		УстановитьСостояниеЗавершенПоОтклонению(ДокументыОтклонения, ВыполняетсяОбновлениеИнформационнойБазы);
	КонецЕсли;
	
	НаправлениеДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ИсправляемыеДокументы, "НаправлениеЭД");
	Для Каждого Документ Из ИсправляемыеДокументы Цикл
		
		Направление = НаправлениеДокументов[Документ];
		УстановитьСостояниеЗавершен(Документ, Направление, ВыполняетсяОбновлениеИнформационнойБазы);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет необходимость отправки документа сразу после утверждения или подписания.
// 
// Возвращаемое значение:
// Булево - признак необходимости немедленной отправки электронных документов.
//
Функция НемедленнаяОтправкаЭД() Экспорт
	
	Настройки = НастройкиОбменаСКонтрагентами();
	
	Возврат Не Настройки.ИспользоватьОтложеннуюОтправкуЭД;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на чтение настройки ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоЧтенияНастройкиОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
	ОбъектыЭлементарнойФункции = Новый Массив;
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.РегистрыСведений.УчетныеЗаписиЭДО);
	ОбъектыЭлементарнойФункции.Добавить(Метаданные.РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам);
	
	Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
		
		Если Не ПравоДоступа("Чтение", Объект) Тогда
			ЕстьПраво = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на выполнение ЭДО.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоВыполненияОбмена(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаСКонтрагентами")
		И ЕстьПравоОбработкиЭД();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// Возвращает признак наличия у пользователя прав на добавление и изменение электронных документов.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости выводить сообщение о нарушении прав доступа.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть необходимые права, иначе Ложь.
//
Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеПраваОбработкиЭлектронныхДокументов(ЕстьПраво);
	
	Если ЕстьПраво Тогда
		
		// Основные объекты метаданных, доступ к которым определяет доступ к элементарной функции.
		ОбъектыЭлементарнойФункции = Новый Массив;
		ОбъектыЭлементарнойФункции.Добавить(Метаданные.Справочники.ЭДПрисоединенныеФайлы);
		
		Для каждого Объект Из ОбъектыЭлементарнойФункции Цикл
			
			Если Не ПравоДоступа("Изменение", Объект) Тогда
				ЕстьПраво = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

// По ссылке на документ определяет есть ли у него электронный документ счет-фактура
// или корректировочный счет-фактура.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - ссылка на документ владельца.
//
// Возвращаемое значение:
//  Булево - факт существования документа.
//
Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД В (ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура), ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура))
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Проверяет что эд счет-фактура имеет конечный статус в зависимости от направления.
//
// Параметры:
//  СсылкаСФ - ДокументСсылка - ссылка на документ счет-фактуры
//  НаправлениеЭД - Перечисления.НаправленияЭД - направление обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если обмен завершен.
//
Функция ДОСФЗавершен(СсылкаСФ, НаправлениеЭД) Экспорт
	
	ДОЗавершен = Ложь;
	СвойстваСчетФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаСФ, "СтатусЭД, ВладелецФайла");
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ДОЗавершен = (СвойстваСчетФактуры.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
	Иначе
		СтатусСФ = СвойстваСчетФактуры.СтатусЭД;
		ТребуетсяИзвещение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваСчетФактуры.ВладелецФайла, "ТребуетсяИзвещение");
		ДОЗавершен = (СтатусСФ = Перечисления.СтатусыЭД.Доставлен)
			Или (Не ТребуетсяИзвещение И (СтатусСФ = Перечисления.СтатусыЭД.Отправлен));
	КонецЕсли;
	
	Возврат ДОЗавершен;
	
КонецФункции

// Перезаполняет документ информационной базы данными электронного документа.
//
// Параметры:
//  ДокументИБ - ДокументСсылка - ссылка на перезаполняемый документ информационной базы;
//  ЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ;
//  ОбъектМетаданных - Строка - возвращает название объекта метаданных перезаполняемого документа;
//  ДокументЗагружен - Булево - если Истина, то документ успешно перезаполнен;
//  СпособОбработки - Строка - способ обработки электронного документа.
//
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, Знач ЭД, ОбъектМетаданных = Неопределено, ДокументЗагружен = Ложь, СпособОбработки = "") Экспорт
	
	// Для однократной сделки в электронном документе будет Структура.
	
	Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		Эд = ПрисоединенныйФайл(ЭД);
	КонецЕсли;
	
	Если ЭтоОтветныйТитул(ЭД.ТипЭлементаВерсииЭД) Тогда
		
		ЭД = ЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СпособОбработки) Тогда
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Эд, "ВладелецФайла");
		СвойстваВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД,
			"Контрагент, Организация, ИдентификаторОрганизации, ИдентификаторКонтрагента, ВидЭД, ТипЭлементаВерсииЭД");
		ДополнительныеВидыЭД = ДополнительныеВидыЭДПоДокументу(ВладелецЭД);
		
		НастройкиПолучения = Новый Структура;
		НастройкиПолучения.Вставить("Контрагент", СвойстваВладельцаЭД.Контрагент);
		НастройкиПолучения.Вставить("Организация", СвойстваВладельцаЭД.Организация);
		НастройкиПолучения.Вставить("Получатель", СвойстваВладельцаЭД.ИдентификаторОрганизации);
		НастройкиПолучения.Вставить("Отправитель", СвойстваВладельцаЭД.ИдентификаторКонтрагента);
		
		СпособОбработки = СпособОбработкиВходящегоДокумента(
			НастройкиПолучения, СвойстваВладельцаЭД.ВидЭД, СвойстваВладельцаЭД.ТипЭлементаВерсииЭД, ДополнительныеВидыЭД);
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен, СпособОбработки);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьДанныеЭД(СсылкаНаЭД) Экспорт
	
	СсылкаНаДанные = "";
	
	ДопИнформацияПоЭД = ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД") = Перечисления.ВидыЭД.КаталогТоваров Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ПапкаДляРаспаковки = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки, "*.*");
			
			Если Не ОбменСКонтрагентамиВнутренний.РаспаковатьАрхив(
				ИмяФайла, ПапкаДляРаспаковки, НСтр("ru = 'Распаковка пакета ЭД'")) Тогда
				
				ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
				Возврат "";
			КонецЕсли;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ДвоичныеДанныеФайла = Новый ДвоичныеДанные(РаспакованныйФайл.ПолноеИмя);
				СсылкаНаДанные = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, Новый УникальныйИдентификатор);
				Прервать;
			КонецЦикла;
			
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПапкаДляРаспаковки);
			
		ИначеЕсли СтрНайти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			СсылкаНаДанные = ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДанные;
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
//  МассивСсылокНаВладельцев - Массив - ссылки на владельцев электронных документов, данные которых необходимо получить.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица электронных документов.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника,
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция МожноОтклонитьЭтотЭД(СсылкаНаФайлЭД, ФормироватьУОУ = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаФайлЭД);
	ПараметрыОтклонения = ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ);
	
	Если ПараметрыОтклонения.Количество() > 0 Тогда
		ВозвращаемоеЗначение = Истина;
		ФормироватьУОУ = ПараметрыОтклонения[0].ФормироватьУОУ;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыОтклоненияЭД(МассивЭД, ФормироватьУОУ = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.СтатусЭД) КАК СтатусЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД) КАК ТипЭлементаВерсииЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.НаправлениеЭД) КАК НаправлениеЭД,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПОАНеЗаведено,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЭДПрисоединенныеФайлы.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|				ТОГДА ВЫБОР
	|						КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДПервичныхТитулов)
	|							ТОГДА ВЫБОР
	|									КОГДА ПодчиненныеЭД.Ссылка ЕСТЬ NULL
	|											ИЛИ ПодчиненныеЭД.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|											ИЛИ ПодчиненныеЭД.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ЛОЖЬ
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД В (&ВидыЭДСФ)
	|									ТОГДА ВЫБОР
	|											КОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыЭДСФДопускающиеОтклонение)
	|												ТОГДА ИСТИНА
	|											ИНАЧЕ ЛОЖЬ
	|										КОНЕЦ
	|								ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыВходящихПервичныхЭДДопускающиеОтклонение)
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СтатусыИсходящихПервичныхЭДДопускающиеОтклонение)
	|		КОНЕЦ) КАК СтатусДопускаетОтклонение,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ВидЭД) КАК ВидЭД,
	|	МАКСИМУМ(ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение) КАК ТребуетсяПодтверждение,
	|	МАКСИМУМ(ЕСТЬNULL(ПодчиненныеЭД.ПодписанЭП, ЛОЖЬ)) КАК ОтветПодписан
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|			И (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|			И (ЭД_ПОА.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен))
	|			И (ЭД_ПОА.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭДПрисоединенныеФайлы.Ссылка";
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	СтатусыИсходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Сформирован);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыИсходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыИсходящихПервичныхЭДДопускающиеОтклонение", СтатусыИсходящихЭДДопускающиеОтклонение);
	СтатусыВходящихЭДДопускающиеОтклонение = Новый Массив;
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыВходящихЭДДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	Запрос.УстановитьПараметр("СтатусыВходящихПервичныхЭДДопускающиеОтклонение", СтатусыВходящихЭДДопускающиеОтклонение);
	ВидыЭДОтветныхТитулов = Новый Массив;
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ВидыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ВидыЭДОтветныхТитулов);
	ВидыЭДПервичныхТитулов = Новый Массив;
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ВидыЭДПервичныхТитулов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Запрос.УстановитьПараметр("ВидыЭДПервичныхТитулов", ВидыЭДПервичныхТитулов);
	ВидыЭДСФ = Новый Массив;
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.СчетФактура);
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.УПД);
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.УКД);
	ВидыЭДСФ.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Запрос.УстановитьПараметр("ВидыЭДСФ", ВидыЭДСФ);
	СтатусыЭДСФДопускающиеОтклонение = Новый Массив;
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Получен);
	СтатусыЭДСФДопускающиеОтклонение.Добавить(Перечисления.СтатусыЭД.Утвержден);
	Запрос.УстановитьПараметр("СтатусыЭДСФДопускающиеОтклонение", СтатусыЭДСФДопускающиеОтклонение);
	
	ТипыЭлементовВерсийСчетовФактур = Новый Массив;
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыЭлементовВерсийСчетовФактур.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ФормироватьУОУТекущее = ФормироватьУОУ;
		МожноОтклонить = Ложь;
		Если НЕ ЭДОтклонен(Выборка.СтатусЭД) Тогда
			Если Выборка.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
			ИначеЕсли НЕ ЭтоСлужебныйДокумент(Выборка.ТипЭлементаВерсииЭД)
				И Выборка.ПОАНеЗаведено И Выборка.СтатусДопускаетОтклонение
				// Запрещаем отклонение исходящих произвольных документов при подписи
				И НЕ (Выборка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
					И Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий)
				// Запрещаем отклонение входящих утвержденных документов, не требующих ответной подписи или уже подписанных.
				// Исключение: счета-фактуры - их отклонение допускаем в отсутствие функционала аннулирования.
				И НЕ (Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
					И Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Выборка.ОтветПодписан ИЛИ Не Выборка.ТребуетсяПодтверждение)) Тогда
						
				МожноОтклонить = Истина;
				ФормироватьУОУТекущее = (НЕ Выборка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);
			КонецЕсли;
			
			Если МожноОтклонить Тогда
				ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования(
					Выборка.ЭД, ФормироватьУОУТекущее, ЭтоСчетФактура(Выборка.ТипЭлементаВерсииЭД), Выборка.ТребуетсяПодтверждение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

Функция ЭДОтклонен(СтатусЭД) Экспорт
	
	ЭДОтклонен = (СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					Или СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	Возврат ЭДОтклонен
	
КонецФункции

Функция МожноАннулироватьЭтотЭД(Знач СсылкаНаЭД) Экспорт
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(СсылкаНаЭД);
	ПараметрыАннулированияЭД = ПараметрыАннулированияЭД(МассивЭД);
	МожноАннулировать = ПараметрыАннулированияЭД.Количество() > 0;
	
	Возврат МожноАннулировать;
	
КонецФункции

Функция ПараметрыАннулированияЭД(МассивЭД) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭД,
	|	ПодчиненныеЭД.Ссылка КАК ПодчиненныйЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.СтатусЭД КАК СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ВладелецФайла.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ПодчиненныеЭД.СтатусЭД КАК СтатусПодчиненногоЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД_ПОА
	|		ПО (ЭД_ПОА.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПОА))
	|			И ЭДПрисоединенныеФайлы.Ссылка = ЭД_ПОА.ЭлектронныйДокументВладелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = ПодчиненныеЭД.ЭлектронныйДокументВладелец
	|			И (ПодчиненныеЭД.ТипЭлементаВерсииЭД В (&ТипыЭДОтветныхТитулов))
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД В (&СписокТиповИсключений)
	|	И НЕ ЭДПрисоединенныеФайлы.ПометкаУдаления
	|	И ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
	|	И ВЫБОР
	|			КОГДА ЭД_ПОА.Ссылка ЕСТЬ NULL
	|					ИЛИ ЭД_ПОА.Ссылка = &ЭДПрисоединенныеФайлыПустаяСсылка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ОсновныеТипыЭД)
	|ИТОГИ
	|	МАКСИМУМ(ПодчиненныйЭД),
	|	МАКСИМУМ(ТипЭлементаВерсииЭД),
	|	МАКСИМУМ(НаправлениеЭД),
	|	МАКСИМУМ(СтатусЭД)
	|ПО
	|	ЭД";
	
	Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
	Запрос.УстановитьПараметр("ЭДПрисоединенныеФайлыПустаяСсылка", Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка());
	Запрос.УстановитьПараметр("НаправлениеВходящее", Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("ОсновныеТипыЭД", ОсновныеТипыЭД());
		
	СписокТиповИсключений = Новый Массив;
	СписокТиповИсключений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Запрос.УстановитьПараметр("СписокТиповИсключений", СписокТиповИсключений);
	
	МассивСтатусовИсключений = Новый Массив;
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.Отклонен);
	МассивСтатусовИсключений.Добавить(Перечисления.СтатусыЭД.ОтклоненПолучателем);
	Запрос.УстановитьПараметр("СписокСтатусовИсключений", МассивСтатусовИсключений);
	
	ТипыЭДОтветныхТитулов = Новый Массив;
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ТипыЭДОтветныхТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("ТипыЭДОтветныхТитулов", ТипыЭДОтветныхТитулов);
	
	ВыборкаЭД = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭД.Следующий() Цикл
		
		ОбрабатываемыйЭД = ВыборкаЭД.ЭД;
		СтатусЭД = ВыборкаЭД.СтатусЭД;
		Если ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И ЗначениеЗаполнено(ВыборкаЭД.ПодчиненныйЭД) Тогда
				ВыборкаПодчиненныхЭД = ВыборкаЭД.Выбрать();
				ВыборкаПодчиненныхЭД.Следующий();
				
				ОбрабатываемыйЭД = ВыборкаПодчиненныхЭД.ПодчиненныйЭД;
				СтатусЭД = ВыборкаПодчиненныхЭД.СтатусПодчиненногоЭД;
		КонецЕсли;
		
		НастройкиОбмена = НастройкиОбменаЭД(ОбрабатываемыйЭД);
		МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
		
		Если МассивСтатусов.Количество() = 0 Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		ИндексТекущегоСтатуса = МассивСтатусов.Найти(СтатусЭД);
		ИндексСтатусаПереданОператору = МассивСтатусов.Найти(Перечисления.СтатусыЭД.ПереданОператору);
		Если (ИндексТекущегоСтатуса <> Неопределено И ИндексСтатусаПереданОператору <> Неопределено
			И ИндексТекущегоСтатуса >= ИндексСтатусаПереданОператору)
			ИЛИ ИндексТекущегоСтатуса = МассивСтатусов.ВГраница() Тогда
			
			ВозвращаемоеЗначение.Добавить(НовыеПараметрыОтклоненияАннулирования(
				ВыборкаЭД.ЭД, Истина, ЭтоСчетФактура(ВыборкаЭД.ТипЭлементаВерсииЭД), ВыборкаЭД.ТребуетсяПодтверждение));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Ищет документы основания ИБ по реквизиту документа ЭД"НомерЭД" документа и заполняет ОснованияИБ.
//
// Параметры:
//  НомераЭД - Массив ИД документов основания,
//             колонка "ИдентификаторДокументаОснования" табличной части "ИдентификаторыОснованийВладельцаФайла" ЭД;
//  НаправлениеЭД - определяет параметры поиска документа (входящий, исходящий);
//  ОснованияИБ - массив в который помещаются документы основания.
//
Процедура НайтиДокументыОснования(НомераЭД, НаправлениеЭД, ОснованияИБ) Экспорт
	
	Запрос = Новый Запрос;
	Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументВходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭД КАК втЭД
		|		ПО ЭлектронныйДокументВходящийДокументыОснования.Ссылка = втЭД.ДокументОснования";
		
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования,
		|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД
		|ПОМЕСТИТЬ втЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомераЭД)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД))
		|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования КАК ИДОснования
		|ИЗ
		|	втЭД КАК втЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ИдентификаторыОснованийВладельцаФайла КАК ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.Ссылка
		|		И втЭД.НомерЭД <> ЭлектронныйДокументИсходящийИдентификаторыОснованийВладельцаФайла.ИдентификаторДокументаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование
		|ИЗ
		|	втЭД КАК втЭД
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|		ПО втЭД.ДокументОснования = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомераЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = МассивРезультатов[2].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		ОснованияИБ.Добавить(Выборка.ДокументОснование);
	КонецЦикла;
	
	Выборка = МассивРезультатов[1].Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ИДОснования) Тогда
			МассивИД = Новый Массив;
			МассивИД.Добавить(Выборка.ИДОснования);
			
			НайтиДокументыОснования(МассивИД, НаправлениеЭД, ОснованияИБ)
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Возвращает массив проведенных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на документы.
//
// Возвращаемое значение:
//  Массив - массив ссылок на документы, которые проведены.
//
Функция МассивПроведенныхДокументов(Знач МассивДокументов) Экспорт
	
	МассивПроведенныхДокументов = Новый Массив;
	МассивПроводимыхДокументов = ЭлектронноеВзаимодействиеСлужебный.МассивПроводимыхДокументов(
		МассивДокументов);
	
	Для Каждого Документ Из МассивПроводимыхДокументов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен") Тогда
			МассивПроведенныхДокументов.Добавить(Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции

// Только для внутреннего использования
Процедура УстановитьОтветственногоЭД(Знач СписокОбъектов, Знач НовыйОтветственный, КоличествоОбработанныхЭД,
	ПричинаПеренаправления = "") Экспорт
	
	МассивЭД = Новый Массив;
	КоличествоОбработанныхЭД = 0;
	
	Для Каждого ЭлСписка Из СписокОбъектов Цикл
		Если ТипЗнч(ЭлСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		МассивЭД.Добавить(ЭлСписка.Ссылка);
	КонецЦикла;
	
	Если МассивЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для каждого СсылкаНаЭД Из МассивЭД Цикл
			ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаЭД, РежимБлокировкиДанных.Разделяемый);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивЭД", МассивЭД);
		Запрос.УстановитьПараметр("Ответственный", НовыйОтветственный);
		Запрос.УстановитьПараметр("ЗаписьОписания", ?(ЗначениеЗаполнено(ПричинаПеренаправления), Истина, Ложь));
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
		|ПОМЕСТИТЬ вт_Владельцы
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивЭД)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_Владельцы.ВладелецФайла КАК ВладелецФайла
		|ИЗ
		|	вт_Владельцы КАК вт_Владельцы";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоСсылке(Выборка.ВладелецФайла, РежимБлокировкиДанных.Разделяемый);
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
		|	ЭлектронныйДокументВходящий.Ответственный КАК Ответственный,
		|	ЭлектронныйДокументВходящий.СостояниеЭДО КАК СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|ГДЕ
		|	ЭлектронныйДокументВходящий.Ссылка В
		|			(ВЫБРАТЬ
		|				вт_Владельцы.ВладелецФайла
		|			ИЗ
		|				вт_Владельцы КАК вт_Владельцы)
		|	И (ЭлектронныйДокументВходящий.Ответственный <> &Ответственный
		|			ИЛИ &ЗаписьОписания)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящий.Ссылка,
		|	ЭлектронныйДокументИсходящий.Ответственный,
		|	ЭлектронныйДокументИсходящий.СостояниеЭДО
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|ГДЕ
		|	ЭлектронныйДокументИсходящий.Ссылка В
		|			(ВЫБРАТЬ
		|				вт_Владельцы.ВладелецФайла
		|			ИЗ
		|				вт_Владельцы КАК вт_Владельцы)
		|	И (ЭлектронныйДокументИсходящий.Ответственный <> &Ответственный
		|			ИЛИ &ЗаписьОписания)";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(Выборка.Ссылка);
			ДокументОбъект.Ответственный = НовыйОтветственный;
			ДокументОбъект.Текст = ?(ПустаяСтрока(ДокументОбъект.Текст), "", ДокументОбъект.Текст + Символы.ПС) + ПричинаПеренаправления;
			ДокументОбъект.Записать();
			КоличествоОбработанныхЭД = КоличествоОбработанныхЭД + 1;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось установить ответственного электронного документа. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
КонецПроцедуры

// Дополняет массив пакетов, которые будут распаковываться, не распакованными пакетами.
// 
// Параметры:
//  * МассивПакетовЭД          - Массив - выбранные пакеты к распаковке.
//  * УчетныеЗаписиОрганизации - Массив - Учетные записи организации.
//
Процедура ДополнитьПакетамиКРаспаковке(МассивПакетовЭД, УчетныеЗаписиОрганизации) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК Пакет
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.СтатусПакета = &СтатусПакета
	|	И ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.Получатель В(&УчетныеЗаписиОрганизации)
	|	И НЕ ПакетЭД.Ссылка В (&НовыеПакеты)";
	
	Запрос.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.КРаспаковке);
	Запрос.УстановитьПараметр("УчетныеЗаписиОрганизации", УчетныеЗаписиОрганизации);
	Запрос.УстановитьПараметр("НовыеПакеты", МассивПакетовЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПакетовЭДКРаспаковке = Результат.Выгрузить().ВыгрузитьКолонку("Пакет");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПакетовЭД, МассивПакетовЭДКРаспаковке);
	
КонецПроцедуры

// Возвращает правила редактирования регламента строки профиля (или настройки) ЭДО.
// Параметры:
//  ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ВерсияФормата - строка - версия формата электронного документа.
//  СпособОбмена - СправочникСсылка.ПрофилиНастроекЭДО - профиль ЭДО.
// Возвращаемое значение:
//  Настройки - Структура с полями РедактироватьПодпись, РедактироватьИзвещение, РедактироватьОтветнуюПодпись.
//
Функция РегламентПрофиляЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Ложь);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		И ВРег(ВерсияФормата) = ВРег("ФНС 5.01 (С 2016Г.)") Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Настройки.РедактироватьИзвещение = Истина;
		
	КонецЕсли;
	
	Если ЭтоПрямойОбмен(СпособОбменаЭДО) Тогда
		Настройки.РедактироватьПодпись = Истина;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

// Выполняет регламентное задание по пометке на удаление пакетов
// электронных документов в статусе "Распакован" или "Отправлен"
Процедура ПометкаНаУдалениеПакетовЭлектронныхДокументов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПометкаНаУдалениеПакетовЭД);
	
	Текст = НСтр("ru = 'Начато регламентное задание по пометке на удаление отработанных пакетов эл.документов.'");
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
	УстановитьПривилегированныйРежим(Истина);
	КоличествоДнейЖизниПакета = Константы.СрокХраненияПакетаЭД.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтрольнаяДата = ТекущаяДатаСеанса() - 3600 * 24 * КоличествоДнейЖизниПакета;
	
	Статусы = СтатусыОбработанногоПакетаЭД();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.СтатусПакета В(&Статусы)
	|	И НЕ ПакетЭД.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА ПакетЭД.ДатаОбработки > ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ПакетЭД.ДатаОбработки <= &КонтрольнаяДата
	|			ИНАЧЕ ПакетЭД.Дата <= &КонтрольнаяДата
	|		КОНЕЦ");
	
	Запрос.УстановитьПараметр("КонтрольнаяДата", КонтрольнаяДата);
	Запрос.УстановитьПараметр("Статусы",         Статусы);
	
	КоличествоПакетов = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Пока Не Результат.Пустой() Цикл
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПакетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПакетОбъект.УстановитьПометкуУдаления(Истина);
			
			КоличествоПакетов = КоличествоПакетов + 1;
			
		КонецЦикла;
		
		Результат = Запрос.Выполнить();
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Текст = НСтр("ru = 'Закончено регламентное задание. Помечено на удаление пакетов: %КоличествоПакетов%.'");
	Текст = СтрЗаменить(Текст, "%КоличествоПакетов%", КоличествоПакетов);
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, "РегламентныеЗадания", УровеньЖурналаРегистрации.Информация);
	
КонецПроцедуры

// Поиск пакета электронного документа по присоединенному файлу электронного документа
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка.ЭДПрисоединенныеФайлы - Присоединенный файл электронного документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД, Неопределено - найденный пакет.
//
Функция ПакетЭДПоПрисоединенномуФайлу(ПрисоединенныйФайл) Экспорт
	
	Пакет = Неопределено;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Пакет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК Пакет
		|ГДЕ
		|	Пакет.ЭлектронныйДокумент = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Пакет.Ссылка.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ПрисоединенныйФайл);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			Пакет = Выборка.Ссылка;
		КонецЕсли;
		
		Если Пакет = Неопределено Тогда
			
			РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "НаправлениеЭД, СтатусЭД");
			
			Если РеквизитыФайла.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И (РеквизитыФайла.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				Или РеквизитыФайла.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или РеквизитыФайла.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
				
				// Пакет еще не сформирован.
				Сообщение = НСтр("ru='Пакет документа еще не сформирован. Для формирования пакета необходимо отправить документ.'");
				
			Иначе
				
				// Пакет удален.
				Сообщение = НСтр("ru='Пакет не найден. Возможно он был удален как отработанный.
									 |Для получения исходного пакета обратитесь в поддержку.'");
				
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(Сообщение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Пакет
	
КонецФункции

Функция СписокТиповДокументовПоВидуЭД(ВидЭлектронногоДокумента) Экспорт
	
	СписокТипов = Новый СписокЗначений;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ДополнитьСписокТиповДокументовПоВидуЭлектронногоДокумента(ВидЭлектронногоДокумента, СписокТипов);
	КонецЕсли;
	
	ОбменСКонтрагентамиПереопределяемый.СписокТиповДокументовПоВидуЭД(ВидЭлектронногоДокумента, СписокТипов);
	Если СписокТипов.Количество() = 0 Тогда
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииТиповУчетныхДокументовПоПрикладномуВидуЭлектронногоДокумента(
			ВидЭлектронногоДокумента, СписокТипов);
	КонецЕсли;
	
	Возврат СписокТипов;
	
КонецФункции

Функция ИспользуемыеВидыЭлектронныхДокументов(Направление = Неопределено) Экспорт
	
	АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД(Направление);
	
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.Подтверждение);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.УведомлениеОбУточнении);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ИзвещениеОПолучении);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ПредложениеОбАннулировании);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	ИсключаемыеВиды.Добавить(Перечисления.ВидыЭД.ПрикладнойЭД);
	
	ИспользуемыеВидыЭД = Новый Массив;
	Для каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
		Если ИсключаемыеВиды.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ИспользуемыеВидыЭД.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИспользуемыеВидыЭД;
	
КонецФункции

Процедура ЗаполнитьНастройкуВидаЭлектронногоДокумента(Настройка, ВидЭлектронногоДокумента, СпособОбмена, ИспользоватьЭП = Ложь) Экспорт
	
	Настройка.Формировать = Истина;
	Настройка.ИсходящийДокумент = ВидЭлектронногоДокумента;
	Настройка.ИспользоватьЭП = ИспользоватьЭП;
	
	Если (ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		ИЛИ ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		И ЭтоПрямойОбмен(СпособОбмена) Тогда
		
		Настройка.Формировать = Ложь;
		Настройка.ИспользоватьЭП = Ложь;
		
	КонецЕсли;
	
	// Проставим в новые настройки ЭДО версию формата обмена.
	Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВерсияФормата = "";
	Иначе 
		ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента);
	КонецЕсли;
	Настройка.ВерсияФормата = ВерсияФормата;
	
	Настройка.Приоритет = ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента);
	
	Если Не ЗначениеЗаполнено(Настройка.ДокументУчета) Тогда
		Настройка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭлектронногоДокумента);
	КонецЕсли;
	
	Если Не (ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
		Настройка.ТребуетсяОтветнаяПодпись = Настройка.ИспользоватьЭП;
		
		Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетНаОплату Тогда
			Настройка.ТребуетсяОтветнаяПодпись = Ложь;
		ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктОРасхождениях Тогда
			Настройка.ТребуетсяОтветнаяПодпись = Ложь;
		КонецЕсли;
		
		Настройка.ТребуетсяИзвещениеОПолучении = Истина;
		
	Иначе
		Настройка.ТребуетсяОтветнаяПодпись = Ложь;
		Настройка.ТребуетсяИзвещениеОПолучении = Ложь;
		
	КонецЕсли;
	
	Если Настройка.ИспользоватьЭП Тогда
		Настройка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПрикладногоВидаЭлектронногоДокумента(Настройка, ВидЭлектронногоДокумента, ИспользоватьЭП = Ложь) Экспорт
	
	Настройка.Формировать = Истина;
	Настройка.ИспользоватьЭП = ИспользоватьЭП;
	Настройка.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД;
	Настройка.ПрикладнойВидЭД   = ВидЭлектронногоДокумента;
	ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента);
	Настройка.ВерсияФормата = ВерсияФормата;
	Настройка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭлектронногоДокумента);
	
	НастройкиРегламента = НастройкиРегламентаЭДОПрикладныхФорматов(
		ВидЭлектронногоДокумента, ВерсияФормата);
	Настройка.ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
	Настройка.ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
	
	ТаблицаФорматов = ПрикладныеФорматыЭлектронныхДокументов();
	СтрокаПрикладногоФормата = ТаблицаФорматов.Найти(ВерсияФормата, "ИдентификаторФормата");
	Если СтрокаПрикладногоФормата = Неопределено Тогда
		ИндексФормата = 0;
	Иначе
		ИндексФормата = ТаблицаФорматов.Индекс(СтрокаПрикладногоФормата);
	КонецЕсли;
	Настройка.Приоритет = ИндексФормата 
		+ ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(Перечисления.ВидыЭД.ПрикладнойЭД);
	
	Если Настройка.ИспользоватьЭП Тогда
		Настройка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыДокументовДляОтбораВСписках() Экспорт
	
	АктуальныеВидыЭД = Новый Соответствие;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	ВидыДокументов = СоответствиеАктуальныхВидовЭДВМассив(АктуальныеВидыЭД);
	
	НеОтображаемыеВиды = Новый Массив;
	НеОтображаемыеВиды.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	НеОтображаемыеВиды.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	НеОтображаемыеВиды.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	НеОтображаемыеВиды.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	ВидыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВидыДокументов, НеОтображаемыеВиды);
	
	ПрикладныеВидыЭлектронныхДокументов = ПрикладныеВидыЭлектронныхДокументов();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыДокументов, ПрикладныеВидыЭлектронныхДокументов);
	
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.ГарантийноеПисьмо);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.Договор);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.ПлатежноеПоручение);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.ПриложениеКАкту);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.Прочее);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.СоглашениеОбЭДО);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.АктСверки);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.АктВзаимозачета);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.КС11);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.КС2);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.КС3);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.Отчет);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.Уведомление);
	ВидыДокументов.Добавить(Перечисления.ТипыЭД.Ведомость);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидДокумента");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Таблица, ВидыДокументов, "ВидДокумента");
	Таблица.Сортировать("ВидДокумента");
	
	Возврат Таблица.ВыгрузитьКолонку("ВидДокумента");
	
КонецФункции

Функция ЭтоПрикладнойВидЭД(ВидЭД) Экспорт
	
	Возврат Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип.СодержитТип(ТипЗнч(ВидЭД));
	
КонецФункции

Функция ПрикладныеВидыЭлектронныхДокументов() Экспорт
	
	ВидыЭлектронныхДокументов = Новый Массив;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПрикладныхВидовЭлектронныхДокументов(ВидыЭлектронныхДокументов);
	
	Возврат ВидыЭлектронныхДокументов;
	
КонецФункции

Функция ПрикладныеФорматыЭлектронныхДокументов() Экспорт
	
	ТаблицаФорматов = Новый ТаблицаЗначений;
	
	ТаблицаФорматов.Колонки.Добавить("ВидЭлектронногоДокумента",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	
	ТаблицаФорматов.Колонки.Добавить("ПрикладнойВидЭД",
		Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип);
	
	ТаблицаФорматов.Колонки.Добавить("ИдентификаторФормата"                    , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("ПредставлениеФормата"                    , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("Отключен"                                , Новый ОписаниеТипов("Булево"));
	ТаблицаФорматов.Колонки.Добавить("ДатаНачалаДействия"                      , Новый ОписаниеТипов("Дата"));
	ТаблицаФорматов.Колонки.Добавить("ДатаОкончанияДействия"                   , Новый ОписаниеТипов("Дата"));
	ТаблицаФорматов.Колонки.Добавить("УсловиеВыводаПредупреждения"             , Новый ОписаниеТипов("Строка"));
	ТаблицаФорматов.Колонки.Добавить("ТекстПредупрежденияДляВходящегоДокумента", Новый ОписаниеТипов("Строка"));
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСведенийОПрикладныхФорматах(ТаблицаФорматов);
	
	ТаблицаФорматов.ЗаполнитьЗначения(Перечисления.ВидыЭД.ПрикладнойЭД, "ВидЭлектронногоДокумента");
	Возврат ТаблицаФорматов;
	
КонецФункции

Функция НастройкиРегламентаЭДО(ВидЭД, ВерсияФормата, СпособОбменаЭДО) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("РедактироватьПодпись", Ложь);
	Настройки.Вставить("РедактироватьИзвещение", Истина);
	Настройки.Вставить("РедактироватьОтветнуюПодпись", Ложь);
	
	Если ЭтоПрикладнойВидЭД(ВидЭД) Тогда
		НастройкиПрикладныхФорматов = НастройкиРегламентаЭДОПрикладныхФорматов(ВидЭД, ВерсияФормата);
		ЗаполнитьЗначенияСвойств(Настройки, НастройкиПрикладныхФорматов);
		Возврат Настройки;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Ложь;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
			Или ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Ложь;
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		
		Настройки.РедактироватьОтветнуюПодпись = Ложь;

	Иначе
		
		Настройки.РедактироватьОтветнуюПодпись = Истина;
		
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

Функция ОпределитьПараметрыФайлаПрикладногоЭлектронногоДокумента(ПолноеИмяФайла, РасширениеФайла) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ВидЭлектронногоДокумента");
	Параметры.Вставить("НаименованиеДокументаОтправителя");
	Параметры.Вставить("НомерДокументаОтправителя");
	Параметры.Вставить("ДатаДокументаОтправителя");
	Параметры.Вставить("СуммаДокумента");
	
	РасширениеБезТочки = СтрЗаменить(РасширениеФайла, ".", "");
	
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПараметровФайлаПрикладногоЭлектронногоДокумента(
		ДанныеФайла, РасширениеБезТочки, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Параметры.ВидЭлектронногоДокумента) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрикладнойЭД);
	Параметры.Вставить("ПрикладнойВидЭД", Параметры.ВидЭлектронногоДокумента);
	
	Возврат Параметры;
	
КонецФункции

Функция ИнформацияОТовареПрикладногоДокумента(ПолноеИмяФайла, РасширениеФайла) Экспорт
	
	ИнформацияОТоваре = Новый ТаблицаЗначений;
	ИнформацияОТоваре.Колонки.Добавить("ИД", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("НаименованиеХарактеристики", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("Артикул", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("БазоваяЕдиницаКод", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("БазоваяЕдиницаНаименование", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
	ИнформацияОТоваре.Колонки.Добавить("Сопоставление");
	
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	
	ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииИнформацииОТовареИзФайлаПрикладногоЭлектронногоДокумента(
		ДанныеФайла, РасширениеФайла, ИнформацияОТоваре);
	
	Если ИнформацияОТоваре.Количество() Тогда
		ОбменСКонтрагентамиВнутренний.ДополнитьИнформациюОТовареДаннымиДляСопоставления(ИнформацияОТоваре);
		Возврат ИнформацияОТоваре;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Проверяет готовность прикладного электронного документа к отражению в учете.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - отражаемый в учете электронный документ.
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//
Функция ПрикладнойЭлектронныйДокументГотовКОтражениюВУчете(ПараметрыОтражения) Экспорт
	
	ГотовКОтражению = Истина;
	
	Если НЕ ИспользоватьСопоставлениеНоменклатуры(ПараметрыОтражения.ЭлектронныйДокумент) Тогда
		Возврат ГотовКОтражению;
	КонецЕсли;
	
	СвойстваЭлектронногоДокумента = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	ОбменСКонтрагентамиПереопределяемый.ПриОтраженииВУчетеПрикладногоЭлектронногоДокументаСНоменклатурой(
		СвойстваЭлектронногоДокумента, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные Тогда
		ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ПараметрыОтражения.ЭлектронныйДокумент);
		ГотовКОтражению = НЕ НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	КонецЕсли;
	
	Возврат ГотовКОтражению;
	
КонецФункции

// Параметры использования сертификатов при отправке и получении электронных документов.
//
// Возвращаемое значение:
//  Структура - параметры использования сертификатов.
//
Функция ПараметрыОтправкиПолученияЭД() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьЭП", Ложь);
	Параметры.Вставить("ЕстьВозможностьОтправкиПолученияЭД", Истина);
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	
	Если НЕ ИспользоватьЭП Тогда
		Возврат Параметры;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ВЫБОР
		|		КОГДА УчетныеЗаписиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
		|				ИЛИ УчетныеЗаписиЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОбменЧерезОператораЭДО,
		|	ЕСТЬNULL(СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван, ИСТИНА) КАК СертификатОтозван,
		|	ВЫБОР
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		КОГДА СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ИСТИНА
		|		КОГДА РАЗНОСТЬДАТ(&ТекущаяДата, СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо, ДЕНЬ) > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СертификатДействителен
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ПО УчетныеЗаписиЭДО.ИдентификаторЭДО = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО (СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка)
		|ИТОГИ ПО
		|	ОбменЧерезОператораЭДО,
		|	ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	ЕстьВозможностьОтправкиПолученияЭД = Ложь;
	ПрофилиЭДОБезСертификатов = Новый Массив;
	
	ВыборкаЧерезОператораЭДО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЧерезОператораЭДО.Следующий() Цикл
		
		Если НЕ ВыборкаЧерезОператораЭДО.ОбменЧерезОператораЭДО Тогда
			ЕстьВозможностьОтправкиПолученияЭД = Истина;
			Продолжить;
		КонецЕсли;
		
		ВыборкаПрофиль = ВыборкаЧерезОператораЭДО.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПрофиль.Следующий() Цикл
			
			ЕстьВалидныйСертификат = Ложь;
			
			ВыборкаДетали = ВыборкаПрофиль.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл
				
				Если ВыборкаДетали.СертификатДействителен И Не ВыборкаДетали.СертификатОтозван Тогда
					ЕстьВалидныйСертификат = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьВалидныйСертификат Тогда
				ЕстьВозможностьОтправкиПолученияЭД = Истина
			Иначе
				ПрофилиЭДОБезСертификатов.Добавить(ВыборкаПрофиль.ИдентификаторЭДО);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИспользоватьЭП",                     ИспользоватьЭП);
	Параметры.Вставить("ЕстьВозможностьОтправкиПолученияЭД", ЕстьВозможностьОтправкиПолученияЭД);
	
	Если ПрофилиЭДОБезСертификатов.Количество() Тогда
		Параметры.Вставить("ПрофилиЭДОБезСертификатов", ПрофилиЭДОБезСертификатов);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура ПолучитьНастройкиЭДОИПараметрыСертификатовВФоне(Параметры, АдресРезультата) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	МассивУчетныхЗаписей = Неопределено;
	СтруктураОтпечатков = Новый Структура;
	
	Если Параметры.ПовторноеПолучение Тогда
		РезультатОтправкиПолучения = Параметры.РезультатОтправкиПолучения;
		МассивУчетныхЗаписей = РезультатОтправкиПолучения.МассивУчетныхЗаписей;
		СтруктураОтпечатков.Вставить("МассивОтпечатковКлиент", РезультатОтправкиПолучения.ОтпечаткиСертификатов);
	Иначе
		Параметры.Свойство("МассивУчетныхЗаписей", МассивУчетныхЗаписей);
		ПараметрыОтправкиПолучения = ПараметрыОтправкиПолученияЭД();
		СтруктураВозврата.Вставить("ПараметрыОтправкиПолучения", ПараметрыОтправкиПолучения);
		СтруктураОтпечатков.Вставить("МассивОтпечатковКлиент", Параметры.ОтпечаткиСертификатов);
	КонецЕсли;
	
	НастройкиЭДОИПараметрыСертификатов = НастройкиЭДОИСертификатыАвторизации(
		МассивУчетныхЗаписей, Неопределено, СтруктураОтпечатков);
	
	СтруктураВозврата.Вставить("НастройкиЭДОИПараметрыСертификатов", НастройкиЭДОИПараметрыСертификатов);
	
	УчетныеЗаписиЭДО = Новый Массив;
	Для Каждого КлючЗначение Из НастройкиЭДОИПараметрыСертификатов.СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
		УчетныеЗаписиЭДО.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	ПринятьУсловияИспользования = Новый Структура;
	
	УчетныеЗаписиЭДО = УчетныеЗаписиЭДОБезПринятыхУсловийСервиса(УчетныеЗаписиЭДО);
	Если ЗначениеЗаполнено(УчетныеЗаписиЭДО) Тогда
		ПринятьУсловияИспользования.Вставить("УчетныеЗаписиЭДО", УчетныеЗаписиЭДО);
	КонецЕсли;
	
	Если ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена() Тогда
		ПринятьУсловияИспользования.Вставить("ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПринятьУсловияИспользования) Тогда
		СтруктураВозврата.Вставить("ПринятьУсловияИспользования", ПринятьУсловияИспользования);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

Процедура ОтправитьПолучитьПакетыЭлектронныхДокументовВФоне(Параметры, АдресРезультата) Экспорт
	
	ФоновыеЗадания.Выполнить("ОбменСКонтрагентамиСлужебный.ОбновитьКешиОператоровЭДОИФорматов",,,
		НСтр("ru = 'Обновление данных из сервиса настроек 1С:ЭДО'"));
	
	ПовторноеПолучение = Параметры.ПовторноеПолучение;
	СоответствиеПрофилейИПараметровСертификатов = Параметры.СоответствиеПрофилейИПараметровСертификатов;
	
	ПриглашенийПолучено = ОбновитьСтатусыПодключенияНастроекЭДО(СоответствиеПрофилейИПараметровСертификатов);
	
	ПроверитьПриглашенияИСформироватьПакетыЭД();
	ОтправленоПакетов = ОтправкаСформированныхЭД(СоответствиеПрофилейИПараметровСертификатов);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПриглашенийПолучено", ПриглашенийПолучено);
	СтруктураВозврата.Вставить("ОтправленоПакетов"  , ОтправленоПакетов);
	
	НовыеДокументы = ПолучитьНовыеЭД(СоответствиеПрофилейИПараметровСертификатов, ПовторноеПолучение);
	
	СтруктураВозврата.Вставить("ПолученоПакетов", НовыеДокументы.МассивПакетовЭД.Количество());
	
	Если НЕ Параметры.ПовторноеПолучение И ПовторноеПолучение Тогда
		СтруктураВозврата.Вставить("ТребуетсяПовторноеПолучение", Истина);
		МассивУчетныхЗаписей = Новый Массив;
		ОтпечаткиСертификатов = Новый Массив;
		Для Каждого Элемент Из СоответствиеПрофилейИПараметровСертификатов Цикл
			ОбновитьИнформациюОбАктивностиУчетнойЗаписи(Элемент.Ключ);
			МассивУчетныхЗаписей.Добавить(Элемент.Ключ);
			ОтпечаткиСертификатов.Добавить(Элемент.Значение.Отпечаток);
		КонецЦикла;
		СтруктураВозврата.Вставить("МассивУчетныхЗаписей", МассивУчетныхЗаписей);
		СтруктураВозврата.Вставить("ОтпечаткиСертификатов", ОтпечаткиСертификатов);
		
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		Возврат;
	КонецЕсли;
	
	ДанныеПакетов = Неопределено;
	ДополнитьПакетамиКРаспаковке(НовыеДокументы.МассивПакетовЭД, НовыеДокументы.Профили);
	Если НовыеДокументы.МассивПакетовЭД.Количество() Тогда
		ДанныеПакетов = ДанныеПакетовЭД(НовыеДокументы.МассивПакетовЭД, НЕ Параметры.ПроверятьПодписиНаСервере);
	КонецЕсли;
	
	Если ДанныеПакетов = Неопределено Тогда
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		Возврат;
		
	ИначеЕсли НЕ Параметры.ПроверятьПодписиНаСервере Тогда
		СтруктураВозврата.Вставить("ДанныеПакетов", ДанныеПакетов);
		ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
		
		Возврат;
	КонецЕсли;
	
	ПроверитьСертификатыПодписей(ДанныеПакетов);
	
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", Новый Массив);
	РаспакованныеДокументы.Вставить("НовыеДокументы", Новый Массив);
	РаспакованоПакетов = 0;
	
	ЗаписатьДанныеПакетовЭД(ДанныеПакетов, РаспакованныеДокументы, РаспакованоПакетов);
	
	СтруктураВозврата.Вставить("РаспакованоПакетов",     РаспакованоПакетов);
	СтруктураВозврата.Вставить("РаспакованныеДокументы", РаспакованныеДокументы);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

Процедура РаспаковатьПакетыЭлектронныхДокументовВФоне(Параметры, АдресРезультата) Экспорт
	
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", Новый Массив);
	РаспакованныеДокументы.Вставить("НовыеДокументы", Новый Массив);
	РаспакованоПакетов = 0;
	
	ЗначениеСвойства = Неопределено;
	Для каждого Данные Из Параметры.ДанныеПакетовЭД Цикл
		Для каждого ДанныеЭД Из Данные.МассивЭД Цикл
			Если ДанныеЭД.Свойство("ДанныеФайлаЭД", ЗначениеСвойства) Тогда
				ДанныеЭД.АдресЭД = ПоместитьВоВременноеХранилище(ЗначениеСвойства);
			КонецЕсли;
			Если ДанныеЭД.Свойство("ДанныеФайлаДополнительногоЭД", ЗначениеСвойства) Тогда
				ДанныеЭД.АдресДополнительногоЭД = ПоместитьВоВременноеХранилище(ЗначениеСвойства);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписатьДанныеПакетовЭД(Параметры.ДанныеПакетовЭД, РаспакованныеДокументы, РаспакованоПакетов);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РаспакованоПакетов",     РаспакованоПакетов);
	СтруктураВозврата.Вставить("РаспакованныеДокументы", РаспакованныеДокументы);
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

// Перебирает отпечатки подписей полученных пакетов ЭД,
// получает из них открытую часть сертификата и проверяет ее корректность.
// 
// Параметры:
//  ДанныеПакетовЭД - Структура - данные полученных пакетов ЭД. 
//
Процедура ПроверитьСертификатыПодписей(ДанныеПакетов) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПроверкаПодписи");
	
	Для Каждого СвойстваПакетаЭД Из ДанныеПакетов Цикл
		ПодписиПакета = СвойстваПакетаЭД.МассивЭП;
		Для Каждого ДанныеПодписи Из ПодписиПакета Цикл
			
			ДвоичныеДанныеФайлаЭД = Неопределено;
			Если ДанныеПодписи.Свойство("АдресЭД") Тогда
				ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресЭД);
				
			ИначеЕсли НЕ ДанныеПодписи.Свойство("ДанныеФайлаЭД", ДвоичныеДанныеФайлаЭД) Тогда
				
				ТипДанныхПодписи = ДанныеПодписи.ТипДанных;
				
				Для Каждого СвойстваФайлаЭлектронногоДокумента Из СвойстваПакетаЭД.МассивЭД Цикл
					
					Если (ТипДанныхПодписи = "ЭП"
							И СвойстваФайлаЭлектронногоДокумента.ТипДанных <> "ДополнительныйЭД")
						ИЛИ (ТипДанныхПодписи = "ПодписьДополнительногоЭД"
							И СвойстваФайлаЭлектронногоДокумента.ТипДанных = "ДополнительныйЭД") Тогда
						
						Если НЕ СвойстваФайлаЭлектронногоДокумента.Свойство("ДанныеФайлаЭД", ДвоичныеДанныеФайлаЭД) Тогда
							ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(СвойстваФайлаЭлектронногоДокумента.АдресЭД);
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДвоичныеДанныеФайлаЭП = Неопределено;
			Если НЕ ДанныеПодписи.Свойство("ДанныеФайлаЭП", ДвоичныеДанныеФайлаЭП) Тогда
				ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(ДанныеПодписи.АдресЭП);
			КонецЕсли;
			
			ТекстОшибки = "";
			ПодписьВерна = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии,
				ДвоичныеДанныеФайлаЭД,
				ДвоичныеДанныеФайлаЭП,
				ТекстОшибки);
			ДанныеПодписи.Вставить("ДатаПроверкиПодписи", ТекущаяУниверсальнаяДата());
			ДанныеПодписи.Вставить("ПодписьВерна", ПодписьВерна);
			
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайлаЭД, ДвоичныеДанныеФайлаЭП, Сертификат);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				ДанныеСертификата = Сертификат.Выгрузить();
				ДанныеПодписи.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				ДанныеПодписи.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(ДанныеСертификата));
				ДанныеПодписи.Вставить("КомуВыданСертификат", ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Инициализирует параметры формирования электронного документа.
// 
// Возвращаемое значение:
//   - Структура - параметры формирования электронного документа
//     * НастройкиОбмена - Структура - параметры настроек обмена.
//     * ДополнительныеДанные - Структура, Неопределено - значения дополнительных полей электронного документа.
//
Функция НовыеПараметрыФормированияЭлектронногоДокумента() Экспорт
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("НастройкиОбмена");
	ПараметрыФормирования.Вставить("ДополнительныеДанные");
	ПараметрыФормирования.Вставить("ИспользоватьПомощникУстраненияОшибок", Ложь);
	Возврат ПараметрыФормирования;
	
КонецФункции

Функция ЗаменитьСимволыОтсутствующиеВКодировкеТекста(ИсходнаяСтрока, Кодировка = "windows-1251", НаЧтоМенять = "") Экспорт
	
	Поток = Новый ПотокВПамяти;
	
	ЗаписьТекста = Новый ЗаписьТекста(Поток, Кодировка);
	ЗаписьТекста.ЗаписатьСтроку(ИсходнаяСтрока);
	ЗаписьТекста.Закрыть();
	
	Поток.Перейти(0, ПозицияВПотоке.Начало);
	
	ЧтениеТекста = Новый ЧтениеТекста(Поток, Кодировка);
	СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	
	ЧтениеТекста.Закрыть();
	Поток.Закрыть();
	
	Если ЗначениеЗаполнено(СтрокаТекста) Тогда
		Возврат СтрЗаменить(СтрокаТекста, "?", НаЧтоМенять);
	Иначе
		Возврат ИсходнаяСтрока;
	КонецЕсли;
	
КонецФункции

Функция СтруктураПараметровЭД() Экспорт
	
	ПараметрыЭД = Новый Структура;
	
	ПараметрыЭД.Вставить("ВидЭД",                Неопределено);
	ПараметрыЭД.Вставить("ПрикладнойВидЭД",      Неопределено);
	ПараметрыЭД.Вставить("ТипДокумента",         Неопределено);
	ПараметрыЭД.Вставить("НаправлениеЭД",        Неопределено);
	ПараметрыЭД.Вставить("Контрагент",           Неопределено);
	ПараметрыЭД.Вставить("ДоговорКонтрагента",   Неопределено);
	ПараметрыЭД.Вставить("Организация",          Неопределено);
	ПараметрыЭД.Вставить("СоглашениеЭД",         Неопределено);
	ПараметрыЭД.Вставить("УстановленныеПодписи", Новый Массив);
	ПараметрыЭД.Вставить("ЭтоАктуальныйВидЭД",   Ложь);
	
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ПараметрыЭД.Вставить("Партнер",          Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыЭД;
	
КонецФункции

// Возвращает титулы электронных документов по перечню владельцев.
//
// Параметры:
//  ВладельцыФайлов - Массив - Документы, для которых требуется найти титулы электронных документов. Элементы массива
//    должны иметь тип ДокументСсылка.ЭлектронныйДокументИсходящий или ДокументСсылка.ЭлектронныйДокументВходящий.
//    Для владельца с типом ДокументСсылка.ЭлектронныйДокументИсходящий будет возвращен титул продавца, для типа
//    ДокументСсылка.ЭлектронныйДокументВходящий - титул покупателя.
//
// Возвращаемое значение:
//  Массив - Перечень титулов электронных документов. Элементы массива имеют тип
//    СправочникСсылка.ЭДПрисоединенныеФайлы.
//
Функция ФайлыЭлектронныхДокументовПоВладельцам(ВладельцыФайлов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументВходящий.Ссылка КАК Ссылка,
	|	ЭлектронныйДокументВходящий.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ ДокументыВладельцы
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|ГДЕ
	|	ЭлектронныйДокументВходящий.Ссылка В(&ВладельцыФайлов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка,
	|	ЭлектронныйДокументИсходящий.ТипЭлементаВерсииЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В(&ВладельцыФайлов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыВладельцы КАК ДокументыВладельцы
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ДокументыВладельцы.Ссылка
	|			И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ДокументыВладельцы.ТипЭлементаВерсииЭД";
	
	Запрос.УстановитьПараметр("ВладельцыФайлов",ВладельцыФайлов);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ФайлыДокументов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Иначе
		ФайлыДокументов = Новый Массив;
	КонецЕсли;
	
	Возврат ФайлыДокументов;
	
КонецФункции

// Возвращает настройки получения ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя  - Строка - строка с уникальный идентификатор получателя.
//  Организация   - Справочник.Организации - ссылка на справочник организаций.
//  Контрагент  - Справочник.Контрагенты - ссылка на справочник контрагенты.
//  СоздаватьНастройки - Булево - создавать настройки автоматически.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиПолученияЭДПоИД(ИДОтправителя, ИДПолучателя,
							Организация, Контрагент,
							СоздаватьНастройки = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИДОтправителя);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято) КАК Статус,
	|	УчетныеЗаписиЭДО.Организация КАК Организация,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторПолучателя
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторОтправителя";
	ТаблицаПриглашений = Запрос.Выполнить().Выгрузить();
	Присоединен = Ложь;
	
	Если ТаблицаПриглашений.Количество() > 0 Тогда
		Если ТаблицаПриглашений[0].Статус Тогда
			Присоединен = Истина;
		КонецЕсли;
		
		// Если на входе не были определены организация или контрагент (это может быть, если, например, у контрагента
		// сменился КПП), определим их из приглашения и будем использовать, пока пользователь не создаст нового контрагента
		// или не отредактирует старого.
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = ТаблицаПриглашений[0].Организация;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = ТаблицаПриглашений[0].Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Контрагент" , ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Организация,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель КАК Контрагент,
	|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	УчетныеЗаписиЭДО.ОжидатьИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30) КАК ВерсияФорматаПакета,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКонтрагента
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|		ПО НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Организация = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НастройкиПолученияЭлектронныхДокументов.Получатель = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Контрагент = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НастройкиПолученияЭлектронныхДокументов.Отправитель = &Контрагент
	|		КОНЕЦ
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
	|	УчетныеЗаписиЭДО.СпособОбменаЭД,
	|	УчетныеЗаписиЭДО.ОжидатьИзвещениеОПолучении,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30),
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов,
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Организация
	|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Контрагент
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
	|	И УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторПолучателя";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДПолучателя);
		СтруктураВозврата.Вставить("Получатель",          ИДОтправителя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ДоговорКонтрагента",  Выборка.ДоговорКонтрагента);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
	ИначеЕсли СоздаватьНастройки И Присоединен Тогда
		
		СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Неопределено, ИДПолучателя, ИДОтправителя);
		СоздатьНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, "", "");
		
		Возврат ПолучитьНастройкиПолученияЭДПоИД(ИДОтправителя, ИДПолучателя, Организация, Контрагент, Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьНастройкуПоВидуЭлектронногоДокумента(Настройка, ВидЭлектронногоДокумента) Экспорт
	
	Настройка.Формировать = Истина;
	Настройка.ВидДокумента = ВидЭлектронногоДокумента;
	
	// Проставим в новые настройки ЭДО версию формата обмена.
	Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВерсияФормата = "";
	Иначе 
		ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента);
	КонецЕсли;
	
	Настройка.ВерсияФормата     = ВерсияФормата;
	Настройка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	Настройка.Приоритет         = ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента);
	
	Если Не ЗначениеЗаполнено(Настройка.ДокументУчета) Тогда
		Настройка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭлектронногоДокумента);
	КонецЕсли;
	
	Если Не (ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
		Настройка.ТребуетсяОтветнаяПодпись = Истина;
		
		Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетНаОплату
			Или ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КаталогТоваров
			Или ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПрайсЛист Тогда
			Настройка.ТребуетсяОтветнаяПодпись = Ложь;
		КонецЕсли;
		
		Настройка.ТребуетсяИзвещениеОПолучении = Истина;
		
	Иначе
		Настройка.ТребуетсяОтветнаяПодпись = Ложь;
		Настройка.ТребуетсяИзвещениеОПолучении = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПоПрикладномуВидуЭлектронногоДокумента(Настройка, ВидЭлектронногоДокумента, ИспользоватьЭП = Истина) Экспорт
	
	Настройка.Формировать = Истина;
	Настройка.ИспользоватьЭП = ИспользоватьЭП;
	Настройка.ВидДокумента = Перечисления.ВидыЭД.ПрикладнойЭД;
	Настройка.ПрикладнойВидЭД   = ВидЭлектронногоДокумента;
	ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента);
	Настройка.ВерсияФормата = ВерсияФормата;
	Настройка.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭлектронногоДокумента);
	
	НастройкиРегламента = НастройкиРегламентаЭДОПрикладныхФорматов(
		ВидЭлектронногоДокумента, ВерсияФормата);
	Настройка.ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
	Настройка.ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
	
	ТаблицаФорматов = ПрикладныеФорматыЭлектронныхДокументов();
	СтрокаПрикладногоФормата = ТаблицаФорматов.Найти(ВерсияФормата, "ИдентификаторФормата");
	Если СтрокаПрикладногоФормата = Неопределено Тогда
		ИндексФормата = 0;
	Иначе
		ИндексФормата = ТаблицаФорматов.Индекс(СтрокаПрикладногоФормата);
	КонецЕсли;
	Настройка.Приоритет = ИндексФормата 
		+ ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(Перечисления.ВидыЭД.ПрикладнойЭД);
	
	Если Настройка.ИспользоватьЭП Тогда
		Настройка.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	КонецЕсли;
	
КонецПроцедуры

// Сохранение приглашений.
//
// Параметры:
//  ТаблицаПриглашений - ТаблицаЗначений - таблица с приглашениями.
//
Функция СохранитьПриглашения(ТаблицаПриглашений) Экспорт
	
	Если ТаблицаПриглашений.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ПолученоПриглашений = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.ТекстПриглашения КАК ТекстПриглашения,
	|	Приглашения.Идентификатор КАК Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	Приглашения.Состояние КАК Состояние,
	|	Приглашения.Наименование КАК Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки КАК ОписаниеОшибки
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.Идентификатор КАК Идентификатор,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	МАКСИМУМ(Приглашения.Изменен) КАК Изменен
	|ПОМЕСТИТЬ ПоследниеИзмененияЗаписей
	|ИЗ
	|	Приглашения КАК Приглашения
	|
	|СГРУППИРОВАТЬ ПО
	|	Приглашения.ИдентификаторОрганизации,
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.ВнешнийИД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	ВнешнийИД,
	|	Изменен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Приглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Приглашения.ТекстПриглашения КАК ТекстПриглашения,
	|	Приглашения.Идентификатор КАК Идентификатор,
	|	Приглашения.ВнешнийИД КАК ВнешнийИД,
	|	Приглашения.ИНН КАК ИНН,
	|	Приглашения.КПП КАК КПП,
	|	Приглашения.Наименование КАК Наименование,
	|	Приглашения.Изменен КАК Изменен,
	|	Приглашения.ОписаниеОшибки КАК ОписаниеОшибки,
	|	Приглашения.Состояние КАК СтатусУчастника,
	|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
	|	УчетныеЗаписиЭДО.Организация КАК Организация
	|ИЗ
	|	ПоследниеИзмененияЗаписей КАК ПоследниеИзмененияЗаписей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приглашения КАК Приглашения
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|			ПО Приглашения.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|		ПО ПоследниеИзмененияЗаписей.ИдентификаторОрганизации = Приглашения.ИдентификаторОрганизации
	|			И ПоследниеИзмененияЗаписей.Идентификатор = Приглашения.Идентификатор
	|			И ПоследниеИзмененияЗаписей.ИНН = Приглашения.ИНН
	|			И ПоследниеИзмененияЗаписей.Изменен = Приглашения.Изменен
	|			И ПоследниеИзмененияЗаписей.ВнешнийИД = Приглашения.ВнешнийИД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Изменен";
	Запрос.УстановитьПараметр("Приглашения", ТаблицаПриглашений);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		УстановитьПривилегированныйРежим(Истина); // Приглашения сохранять можно с любыми правами, а вот принимать нет.
		
		// В случае ошибки, содержащейся в запросе на присоединение контрагента,
		// Такском возвращает запись с указанием ошибки, но без КПП. В результате
		// запрос может вернуть 2 записи по одному контрагенту (ИНН и ВнешнийИД совпадают,
		// а КПП в одной записи пустой, а в другой заполнен). Чтобы не вводить в заблуждение
		// пользователей, одну запись (более раннюю) надо удалить.
		ТЗПоследнихИзменений = Результат.Выгрузить();
		Для Сч = -ТЗПоследнихИзменений.Количество() + 1 По 0 Цикл
			СтрокаТЗ = ТЗПоследнихИзменений[-Сч];
			Если СтрокаТЗ.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				Отбор = Новый Структура("ИНН, ВнешнийИД, ИдентификаторОрганизации", СтрокаТЗ.ИНН, СтрокаТЗ.ВнешнийИД,
					СтрокаТЗ.ИдентификаторОрганизации);
				МассивСтрок = ТЗПоследнихИзменений.НайтиСтроки(Отбор);
				Если МассивСтрок.Количество() > 1 Тогда
					ПервыйЭлемент = МассивСтрок[0];
					ВторойЭлемент = МассивСтрок[1];
					Если НЕ ЗначениеЗаполнено(ПервыйЭлемент.КПП) ИЛИ НЕ ЗначениеЗаполнено(ВторойЭлемент.КПП) Тогда
						Если ПервыйЭлемент.Изменен > ВторойЭлемент.Изменен Тогда
							ТЗПоследнихИзменений.Удалить(ВторойЭлемент);
						Иначе
							ТЗПоследнихИзменений.Удалить(ПервыйЭлемент);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого НовыеПриглашения Из ТЗПоследнихИзменений Цикл
			
			Контрагент = Неопределено;
			Ошибка = (НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Ошибка);
			
			Если ЗначениеЗаполнено(НовыеПриглашения.ИНН) Тогда
				ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН, НовыеПриглашения.КПП, Контрагент);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НовыеПриглашения.Идентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			// Поиск существующего приглашения
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
			|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК СтатусПодключения
			|ИЗ
			|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
			|ГДЕ
			|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
			|	И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
			|			ИЛИ ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИНН)";
			
			Запрос.УстановитьПараметр("ИНН", Строка(НовыеПриглашения.ИНН));
			Запрос.УстановитьПараметр("ИдентификаторКонтрагента", НовыеПриглашения.Идентификатор);
			Запрос.УстановитьПараметр("ИдентификаторОрганизации", НовыеПриглашения.ИдентификаторОрганизации);
			
			НачатьТранзакцию();
			Попытка
				НаборЗаписей = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторОрганизации.Установить(НовыеПриглашения.ИдентификаторОрганизации);
				ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					
					// Проверка наличия настройки ЭДО с искомым идентификатором.
					Если Выборка.СтатусПодключения = НовыеПриглашения.СтатусУчастника
						И Выборка.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписей.Отбор.ИдентификаторКонтрагента.Установить(Выборка.ИдентификаторКонтрагента);
					НаборЗаписей.Записать();
					
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(Контрагент)
					И НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Принято Тогда
					
					РеквизитыКонтрагента = Новый Структура;
					РеквизитыКонтрагента.Вставить("ИНН", НовыеПриглашения.ИНН);
					РеквизитыКонтрагента.Вставить("КПП", НовыеПриглашения.КПП);
					РеквизитыКонтрагента.Вставить("Наименование", НовыеПриглашения.Наименование);
					
					Ошибка = Ложь;
					ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Ошибка);
					
					Если Ошибка Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
					
				НаборЗаписей.Отбор.ИдентификаторКонтрагента.Установить(НовыеПриглашения.Идентификатор);
				
				ПриглашенияКОбменуЭлектроннымиДокументами = НаборЗаписей.Добавить();
				ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторОрганизации;
				ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = НовыеПриглашения.Идентификатор;
				
				Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Отклонено
					Или НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Принято
					Или НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Ошибка Тогда
					ПриглашенияКОбменуЭлектроннымиДокументами.Ознакомиться = Истина;
				КонецЕсли;
				
				// Заполнение остальных реквизитов.
				Если ЗначениеЗаполнено(НовыеПриглашения.ОписаниеОшибки) Тогда
					ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки = НовыеПриглашения.ОписаниеОшибки;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыеПриглашения.ТекстПриглашения) Тогда
					ПриглашенияКОбменуЭлектроннымиДокументами.ТекстПриглашения = НовыеПриглашения.ТекстПриглашения;
				КонецЕсли;

				
				ПриглашенияКОбменуЭлектроннымиДокументами.Статус = НовыеПриглашения.СтатусУчастника;
				ПриглашенияКОбменуЭлектроннымиДокументами.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
				
				ПриглашенияКОбменуЭлектроннымиДокументами.ИНН = НовыеПриглашения.ИНН;
				
				Если ЗначениеЗаполнено(Контрагент) Тогда
					
					Если ЗначениеЗаполнено(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент)
						 И ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент <> Контрагент Тогда
						
						ПриглашенияКОбменуЭлектроннымиДокументами.ИсходныйКонтрагент = ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент;
					КонецЕсли;
					
					ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент = Контрагент;
				Иначе
					
					ПриглашенияКОбменуЭлектроннымиДокументами.КПП = НовыеПриглашения.КПП; 
					ПриглашенияКОбменуЭлектроннымиДокументами.Наименование = НовыеПриглашения.Наименование;
					
				КонецЕсли;
				
				ТекстОписанияОшибки = "";
				Если Ошибка Тогда
					ШаблонОписанияОшибки = НСтр("ru = '%1. Повторите получение приглашений.'");
					ТекстОписанияОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписанияОшибки,
						НовыеПриглашения.ОписаниеОшибки);
				КонецЕсли;
				
				ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки = ТекстОписанияОшибки;
				НаборЗаписей.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			Если НовыеПриглашения.СтатусУчастника = Перечисления.СтатусыПриглашений.Принято Тогда
				
				Настройки = ПолучитьНастройкиОтправкиЭДПоИД( Неопределено, Неопределено, НовыеПриглашения.Организация, Контрагент, Неопределено, Неопределено, Ложь);
				
				Если Не ЗначениеЗаполнено(Настройки) Тогда
					СоздатьНастройкиОтправкиЭДО(НовыеПриглашения.Организация,
						Контрагент, Неопределено, НовыеПриглашения.ИдентификаторОрганизации, НовыеПриглашения.Идентификатор);
				КонецЕсли;
				
				ПолучитьНастройкиПолученияЭДПоИД(НовыеПриглашения.Идентификатор, НовыеПриглашения.ИдентификаторОрганизации,
					НовыеПриглашения.Организация, Контрагент, Истина);
				КонецЕсли;
				
				// Сдвиг даты проверки приглашений.
				Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
				Запись.Отбор.ИдентификаторОрганизации.Установить(НовыеПриглашения.ИдентификаторОрганизации);
				Запись.Прочитать();
				
				Если Запись.Количество() = 0  Тогда
					НоваяСтрока = Запись.Добавить();
				Иначе
					НоваяСтрока = Запись[0];
				КонецЕсли;
				
				НоваяСтрока.ИдентификаторОрганизации = НовыеПриглашения.ИдентификаторОрганизации;
				НоваяСтрока.ДатаПоследнегоПолученияПриглашений = НовыеПриглашения.Изменен + 1; // Иначе это приглашение приходит повторно
				
				Запись.Записать();
				
				ПолученоПриглашений = ПолученоПриглашений + 1;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Возврат ПолученоПриглашений;
	
КонецФункции

// Проверка наличия новых электронных документов.
//
Процедура ПроверитьНовыеЭлектронныеДокументы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаНовыхЭлектронныхДокументов);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписиЭД") Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ИдентификаторОрганизации
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
	|ГДЕ
	|	УдалитьПрофилиНастроекЭДО.СпособОбменаЭД = &СпособОбменаЭД
	|	И УдалитьПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СпособОбменаЭД", СпособОбмена);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена, 10);
	
	ИдентификаторыЕстьЭДО = Новый Массив;
	ИдентификаторыНетЭДО = Новый Массив;
	
	ВидОперации = НСтр("ru = 'Получение информации о новых электронных документах'");
	
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		
		Если Не УведомленияПодключены(ИдентификаторОрганизации) Тогда
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
			Продолжить;
		КонецЕсли;
		
		ИмяМетода = "IsMessagesExists?query=" + Выборка.ИдентификаторОрганизации;
		Запрос = Новый HTTPЗапрос(ИмяМетода);
		
		Попытка
			Ответ = Соединение.Получить(Запрос);
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
				
			Продолжить;
		КонецПопытки;
		
		Если Не Ответ.КодСостояния = 200 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Результат = Ответ.ПолучитьТелоКакСтроку();
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Результат);
		ЭДО = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		ЕстьНовыйЭД = ЗначениеСтатуса(ЭДО.Result);
		Если ЕстьНовыйЭД Тогда
			ИдентификаторыЕстьЭДО.Добавить(ИдентификаторОрганизации);
		Иначе
			ИдентификаторыНетЭДО.Добавить(ИдентификаторОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИдентификаторыЭДО(ИдентификаторыЕстьЭДО);
	ОбновитьИдентификаторыЭДО(ИдентификаторыНетЭДО, Истина);
	
КонецПроцедуры

// Получение файла ответа от сервера ЭДО.
//
// Параметры:
//  АдресРесурса - Строка - адрес ресурса.
//  ПараметрЗапросаОтветаОтСервера - Строка - суффикс адреса ресурса.
//  ОписаниеОшибки - Строка - текст ошибки.
// 
// Возвращаемое значение:
//  Строка - имя временного файла.
//
Функция ПолучитьФайлОтветаОтСервераЭДО(АдресРесурса, ПараметрЗапросаОтветаОтСервера = Неопределено, ОписаниеОшибки = "") Экспорт
	
	ВидОперации = НСтр("ru = 'Получение данных от сервиса 1С-ЭДО.'");
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО, 60);
	
	Если ПараметрЗапросаОтветаОтСервера <> Неопределено Тогда
		АдресРесурса = АдресРесурса + "/" + ПараметрЗапросаОтветаОтСервера;
	КонецЕсли;
	
	Попытка
		HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		
		ОписаниеОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису 1С-ЭДО.'")
			+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке)
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		
		ДанныеОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		ТипДанныхОтвета = HTTPОтвет.Заголовки.Получить("Content-Type");
		Если ТипДанныхОтвета <> Неопределено И СтрНайти(ТипДанныхОтвета, "json") Тогда
			СтрокаJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
			СтруктураОтвета.Свойство("Details", ОписаниеОшибки);
		КонецЕсли;
		
		ОписаниеОшибки = НСтр("ru = 'При работе с сервисом 1С-ЭДО возникла ошибка.'")
			+ ?(ПустаяСтрока(ОписаниеОшибки),"",Символы.ПС + ОписаниеОшибки)
			+ Символы.ПС + НСтр("ru ='Подробности см. в журнале регистрации.'");
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ДанныеОтвета);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяФайлаРезультата = Неопределено;
	
	ДвоичныеДанные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанные <> Неопределено Тогда
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml");
		ДвоичныеДанные.Записать(ИмяФайлаРезультата);
	КонецЕсли;
	
	Возврат ИмяФайлаРезультата;
	
КонецФункции

// Формирует список типов версий, являющихся ответными титулами.
// 
// Возвращаемое значение:
//  Массив - элементами массива являются значения перечисления "ТипыЭлементовВерсииЭД".
//
Функция ТипыОтветныхТитулов() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	Результат.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	
	Возврат Результат;

КонецФункции

// Формирует список типов основных (неслужебных) документов.
// 
// Возвращаемое значение:
//  Массив - содержит элементы типа "ПеречислениеСсылка.ТипыЭлементовВерсииЭД".
//
Функция ОсновныеТипыЭД() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
	
	Возврат Результат;

КонецФункции 

// Только для внутреннего использования
Функция ЭтоПрямойОбмен(СпособОбменаЭД) Экспорт
	
	Результат = Ложь;
	Если СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог")
		Или СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту")
		Или СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьУчетныеЗаписи(Организации) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	УчетныеЗаписиЭДО.Организация В (&Организации)";
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция ЕстьНастройкиСКонтрагентом(Контрагенты) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель В (&Контрагенты)";
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

// Обработчик обновления видов ЭД актуальными в профилях настроек ЭДО и настройках ЭДО.
// Начиная с версии 1.6 не используется. Оставлен в связи с наличием старых обработчиков обновления.
//
// Параметры:
//  ВидЭД - ЗначениеПеречисления - значение перечисления ВидыЭД.
//
Процедура ОбновитьНастройкиЭДО(ВидЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		// В справочниках показываем только главные титулы электронных документов.
		Если ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И ВидЭД <> Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПокупателя
			И ВидЭД <> Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПокупателя Тогда
			
			// Обновим элементы справочника Профили настроек ЭДО.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	УдалитьПрофилиНастроекЭДО.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
			|ГДЕ
			|	НЕ УдалитьПрофилиНастроекЭДО.ПометкаУдаления";
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				
				ИскомыйПрофильНастроек = Результат.Ссылка.ПолучитьОбъект();
				
				ЭтоПрикладнойВидЭД = ЭтоПрикладнойВидЭД(ВидЭД);
				
				Если ЭтоПрикладнойВидЭД Тогда
					СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(ВидЭД, "ПрикладнойВидЭД");
				Иначе
					СтрокаВидЭД = ИскомыйПрофильНастроек.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
				КонецЕсли;
				
				Если СтрокаВидЭД = Неопределено Тогда
				
					НоваяСтрока = ИскомыйПрофильНастроек.ИсходящиеДокументы.Добавить();
					НоваяСтрока.ИсходящийДокумент = ВидЭД;
					НоваяСтрока.ДокументУчета = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭД);
					Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
						НоваяСтрока.ИспользоватьЭП = Истина;
					КонецЕсли;
					
					ВерсияФормата = "CML 2.08";
					Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ВерсияФормата = "";
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца Тогда
						ВерсияФормата = НСтр("ru = 'ФНС 5.01 (СЧФ+ДОП)'");
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
						ВерсияФормата = НСтр("ru = 'ФНС 5.01 (КСЧФ+ДИС)'");
					Иначе
						ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭД);
					КонецЕсли;
					НоваяСтрока.ВерсияФормата = ВерсияФормата;
					
					Если ЭтоПрикладнойВидЭД Тогда
						НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД;
						НоваяСтрока.ПрикладнойВидЭД = ВидЭД;
						
						НастройкиРегламента = НастройкиРегламентаЭДОПрикладныхФорматов(
							ВидЭД, ВерсияФормата);
						НоваяСтрока.ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
						НоваяСтрока.ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
					КонецЕсли;
					
					Если НоваяСтрока.ИспользоватьЭП Тогда
						НоваяСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
					КонецЕсли;
					
					ЗаписатьОбъект = Истина;
				КонецЕсли;
				
				Если ЗаписатьОбъект Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомыйПрофильНастроек);
				КонецЕсли;
				
			КонецЦикла;
			
			// Обновим элементы справочника Настройки ЭДО.
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
			|ГДЕ
			|	НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
			|	И УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)";
			
			СпособыОбменаЭД = Новый Массив;
			СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
			СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
			СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
			СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
			СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
			Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
			
			Результат = Запрос.Выполнить().Выбрать();
			Пока Результат.Следующий() Цикл
				
				ИскомаяНастройка = Результат.Ссылка.ПолучитьОбъект();
				ЗаписатьОбъект = Ложь;
				
				Если ЭтоПрикладнойВидЭД Тогда
					СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ПрикладнойВидЭД");
				Иначе
					СтрокаВидЭД = ИскомаяНастройка.ИсходящиеДокументы.Найти(ВидЭД, "ИсходящийДокумент");
				КонецЕсли;
				
				Если СтрокаВидЭД = Неопределено Тогда
					НоваяСтрока = ИскомаяНастройка.ИсходящиеДокументы.Добавить();
					НоваяСтрока.ИсходящийДокумент = ВидЭД;
					НоваяСтрока.ДокументУчета     = ОбменСКонтрагентамиПовтИсп.ПредставлениеОснованияДляВидаЭД(ВидЭД);
					Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
						НоваяСтрока.ИспользоватьЭП = Истина;
					КонецЕсли;
					
					ВерсияФормата = "CML 2.08";
					Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
						ВерсияФормата = "";
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУПД_ИнформацияПродавца Тогда
						ВерсияФормата = НСтр("ru = 'ФНС 5.01 (СЧФ+ДОП)'");
					ИначеЕсли ВидЭД = Перечисления.ВидыЭД.УдалитьУКД_ИнформацияПродавца Тогда
						ВерсияФормата = НСтр("ru = 'ФНС 5.01 (КСЧФ+ДИС)'");
					Иначе
						ВерсияФормата = АктуальнаяВерсияФорматаЭД(ВидЭД);
					КонецЕсли;
					НоваяСтрока.ВерсияФормата = ВерсияФормата;
					
					Если ЭтоПрикладнойВидЭД Тогда
						НоваяСтрока.ИсходящийДокумент = Перечисления.ВидыЭД.ПрикладнойЭД;
						НоваяСтрока.ПрикладнойВидЭД = ВидЭД;
						
						НастройкиРегламента = НастройкиРегламентаЭДОПрикладныхФорматов(
							ВидЭД, ВерсияФормата);
						НоваяСтрока.ТребуетсяИзвещениеОПолучении = НастройкиРегламента.ТребуетсяИзвещениеОПолучении;
						НоваяСтрока.ТребуетсяОтветнаяПодпись = НастройкиРегламента.ТребуетсяОтветнаяПодпись;
					КонецЕсли;
					
					Если ИскомаяНастройка.РасширенныйРежимНастройкиСоглашения Тогда
						НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ИсходящиеДокументы[0].ПрофильНастроекЭДО;
						НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.ИсходящиеДокументы[0].СпособОбменаЭД;
						НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторОрганизации;
						НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИсходящиеДокументы[0].ИдентификаторКонтрагента;
					Иначе
						НоваяСтрока.ПрофильНастроекЭДО = ИскомаяНастройка.ПрофильНастроекЭДО;
						НоваяСтрока.СпособОбменаЭД = ИскомаяНастройка.СпособОбменаЭД;
						НоваяСтрока.ИдентификаторОрганизации = ИскомаяНастройка.ИдентификаторОрганизации;
						НоваяСтрока.ИдентификаторКонтрагента = ИскомаяНастройка.ИдентификаторКонтрагента;
					КонецЕсли;
					
					Если НоваяСтрока.ИспользоватьЭП Тогда
						НоваяСтрока.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
					КонецЕсли;
					
					ЗаписатьОбъект = Истина;
				КонецЕсли;
				
				Если ЗаписатьОбъект Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ИскомаяНастройка);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		// Обновим элементы справочника Сертификаты ЭП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат КАК Сертификат
		|ПОМЕСТИТЬ Сертификаты
		|ИЗ
		|	Справочник.УдалитьПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК ПрофилиНастроекЭДОСертификатыПодписейОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
		|		ПО (УдалитьСоглашенияОбИспользованииЭД.ПрофильНастроекЭДО = ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Ссылка)
		|ГДЕ
		|	НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.ПометкаУдаления
		|	И НЕ ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат.Отозван
		|	И НЕ УдалитьСоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И УдалитьСоглашенияОбИспользованииЭД.СпособОбменаЭД В(&СпособыОбменаЭД)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрофилиНастроекЭДОСертификатыПодписейОрганизации.Сертификат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Сертификат КАК СертификатЭП,
		|	ПодписываемыеВидыЭД.ВидЭД КАК ВидЭД,
		|	ПодписываемыеВидыЭД.Использовать КАК Использовать
		|ИЗ
		|	Сертификаты КАК Сертификаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ПодписываемыеВидыЭД
		|		ПО Сертификаты.Сертификат.Ссылка = ПодписываемыеВидыЭД.СертификатЭП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сертификаты.Сертификат КАК СертификатЭП
		|ИЗ
		|	Сертификаты КАК Сертификаты";
		
		СпособыОбменаЭД = Новый Массив;
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
		СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
		Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
		
		Результат = Запрос.ВыполнитьПакет();
		Выборка = Результат[2].Выбрать();
		ТЗ = Результат[1].Выгрузить();

		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("СертификатЭП", Выборка.СертификатЭП);
			КопияТЗ = ТЗ.Скопировать(Отбор);
			ЗаписатьОбъект = Ложь;
			
			Если ЭтоПрикладнойВидЭД(ВидЭД) Тогда
				ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД;
			КонецЕсли;
			
			СтрокаВидЭД = КопияТЗ.Найти(ВидЭД, "ВидЭД");
			Если СтрокаВидЭД = Неопределено Тогда
				НоваяСтрока = КопияТЗ.Добавить();
				НоваяСтрока.ВидЭД        = ВидЭД;
				НоваяСтрока.Использовать = Истина;
				НоваяСтрока.СертификатЭП = Выборка.СертификатЭП;
				ЗаписатьОбъект = Истина;
			ИначеЕсли НЕ СтрокаВидЭД.Использовать Тогда
				СтрокаВидЭД.Использовать = Истина;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				СохранитьПодписываемыеВидыЭД(Выборка.СертификатЭП, КопияТЗ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВидОперации = НСтр("ru = 'Обновление информационной базы'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СохранитьПодписываемыеВидыЭД(СертификатСсылка, ПодписываемыеЭД) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ПодписываемыеВидыЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СертификатЭП.Установить(СертификатСсылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Загрузить(ПодписываемыеЭД);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры



#КонецОбласти

#Область Ознакомление

// Возвращает признак использования механизма ознакомления с электронными документам.
//
// Возвращаемое значение:
//  Булево - признак использования механизма ознакомлений.
//
Функция ИспользоватьОзнакомлениеСЭД() Экспорт
	
	НастройкиОбмена = НастройкиОбменаСКонтрагентами();
	
	Возврат НастройкиОбмена.ИспользоватьОзнакомлениеСЭД;
	
КонецФункции

// Устанавливает признак необходимости ознакомиться с электронным документом.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий
//                        ДокументСсылка.ЭлектронныйДокументИсходящий - электронный документ для изменения.
//  НаОзнакомление - Булево - новое состояние ознакомления с электронным документом.
//
Процедура УстановитьНеобходимостьОзнакомленияСЭД(Знач ЭлектронныйДокумент, Знач НаОзнакомление = Истина) Экспорт
	
	Если НаОзнакомление И Не ИспользоватьОзнакомлениеСЭД() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаОзнакомлении");
	
	Если ТекущееСостояние = НаОзнакомление Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Объект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ЭлектронныйДокумент);
		Объект.НаОзнакомлении = НаОзнакомление;
		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОписаниемОснованияЭД

// Возвращает данные основания электронного документа, описывающие его в терминах подсистемы.
//
// Параметры:
//  ОснованиеЭД - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - описание основания электронного документа:
//   * Вид - Строка - представление вида объекта.
//   * Организация - ОпределяемыйТип.Организация - организация основания.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент основания.
//   * Дата - Дата - дата основания.
//   * Номер - Строка - номер основания.
//   * СуммаДокумента - Число - сумма основания.
//
Функция ОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОснованиеОбъект = Неопределено;
	ОснованиеСсылка = Неопределено;
	
	ТипОснования = ТипЗнч(ОснованиеЭД);
	Если ОбщегоНазначения.ЭтоСсылка(ТипОснования) Тогда
		ОснованиеОбъект = ОснованиеЭД.ПолучитьОбъект();
		ОснованиеСсылка = ОснованиеЭД;
	Иначе
		ОснованиеОбъект = ОснованиеЭД;
		ОснованиеСсылка = ОснованиеЭД.Ссылка;
	КонецЕсли;
	
	МетаданныеОснования = ОснованиеЭД.Метаданные();
	ИмяОснования = МетаданныеОснования.Имя;
	СинонимОснования = МетаданныеОснования.Синоним;
	
	ОписаниеОснованияЭД = Новый Структура;
	ОписаниеОснованияЭД.Вставить("Вид", СинонимОснования);
	ОписаниеОснованияЭД.Вставить("Организация", Неопределено);
	ОписаниеОснованияЭД.Вставить("Контрагент", Неопределено);
	ОписаниеОснованияЭД.Вставить("Дата", Дата(1, 1, 1));
	ОписаниеОснованияЭД.Вставить("Номер", "");
	ОписаниеОснованияЭД.Вставить("СуммаДокумента", 0);
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПриПолученииОписанияОснованияЭлектронногоДокумента(
		ОснованиеОбъект, ОписаниеОснованияЭД, СтандартнаяОбработка);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	КонецЕсли;
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	&Псевдоним.Организация КАК Организация,
	|	&Псевдоним.Контрагент КАК Контрагент,
	|	&Псевдоним.СуммаДокумента КАК СуммаДокумента,
	|	&Псевдоним.Дата КАК Дата,
	|	&Псевдоним.Номер КАК Номер
	|ИЗ
	|	&ОснованиеЭД КАК &Псевдоним
	|ГДЕ
	|	&Псевдоним.Ссылка = &Ссылка";
	
	РеквизитыОснования = Новый Массив;
	РеквизитыОснования.Добавить("Организация");
	РеквизитыОснования.Добавить("Контрагент");
	РеквизитыОснования.Добавить("СуммаДокумента");
	РеквизитыОснования.Добавить("Дата");
	РеквизитыОснования.Добавить("Номер");
	
	ПсевдонимТаблицы = "Документ";
	
	Для Каждого ИмяРеквизита Из РеквизитыОснования Цикл
			
		ЗаменяемыйШаблон = "&Псевдоним."+ ИмяРеквизита;
		
		ПрикладноеИмяРеквизита = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
			ИмяОснования + "." + ИмяРеквизита);
		
		Если ЗначениеЗаполнено(ПрикладноеИмяРеквизита) Тогда
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, ПрикладноеИмяРеквизита);
			Если ПсевдонимТаблицы = "Документ" Тогда
				СтрокиВМассиве = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрикладноеИмяРеквизита, ".");
				ПсевдонимТаблицы = СтрокиВМассиве[0];
			КонецЕсли;
		ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, МетаданныеОснования)
			И Не ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОснования.СтандартныеРеквизиты, ИмяРеквизита) Тогда 
			
			ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, ЗаменяемыйШаблон, "NULL");
		КонецЕсли;
		
	КонецЦикла;
	
	ВидОснования = ОбщегоНазначения.ВидОбъектаПоСсылке(ОснованиеСсылка);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ОснованиеЭД", ВидОснования + "." + ИмяОснования);
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&Псевдоним", ПсевдонимТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ОснованиеСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеОснованияЭД, Выборка);
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеОснованияЭД);
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

Функция ИспользоватьСопоставлениеНоменклатуры(Знач ЭлектронныйДокумент) Экспорт
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		СвойстваЭлектронногоДокумента = ЭлектронныйДокумент;
	Иначе
		СвойстваЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"ВидЭД, ПрикладнойВидЭД");
	КонецЕсли;
	
	Если СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
		Использовать = Ложь;
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользованияСопоставленияНоменклатурыКонтрагентов(
			СвойстваЭлектронногоДокумента.ПрикладнойВидЭД, Использовать);
	Иначе
		Использовать = Истина;
	КонецЕсли;
	
	Возврат Использовать;
	
КонецФункции

// См. ОбменСКонтрагентами.УстановитьСоответствиеНоменклатуры.
Процедура УстановитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента, Знач НоменклатураИБ = Неопределено, Замещать = Истина) Экспорт
	
	Если НоменклатураИБ = Неопределено Тогда
		НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
		Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
		Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Если ЗначениеЗаполнено(Набор) И Не Замещать Тогда
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Запись = Неопределено;
		Если ЗначениеЗаполнено(Набор) Тогда
			Запись = Набор[0];
		Иначе
			Запись = Набор.Добавить();
		КонецЕсли;
		
		Запись.Владелец = НоменклатураКонтрагента.Владелец;
		Запись.Идентификатор = НоменклатураКонтрагента.Идентификатор;
		Запись.Наименование = НоменклатураКонтрагента.Наименование;
		Запись.НаименованиеХарактеристики = НоменклатураКонтрагента.Характеристика;
		Запись.ЕдиницаИзмерения = НоменклатураКонтрагента.ЕдиницаИзмерения;
		Запись.ЕдиницаИзмеренияКод = НоменклатураКонтрагента.ЕдиницаИзмеренияКод;
		Запись.Артикул = НоменклатураКонтрагента.Артикул;
		Запись.СтавкаНДС = НоменклатураКонтрагента.СтавкаНДС;
		Запись.Штрихкод = НоменклатураКонтрагента.Штрихкод;
		Запись.ИдентификаторНоменклатурыСервиса = НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
		Запись.ИдентификаторХарактеристикиСервиса = НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
		Запись.Номенклатура = НоменклатураИБ.Номенклатура;
		Запись.Характеристика = НоменклатураИБ.Характеристика;
		Запись.Упаковка = НоменклатураИБ.Упаковка;
		
		Набор.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// См. ОбменСКонтрагентами.УстановитьСоответствиеНоменклатуры.
Процедура УдалитьСоответствиеНоменклатуры(Знач НоменклатураКонтрагента) Экспорт
	
	Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
	Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
	Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
	Набор.Записать();
	
КонецПроцедуры

// См. ОбменСКонтрагентами.НайтиСоответствиеНоменклатуры.
Функция НайтиСоответствиеНоменклатуры(Знач Отбор = Неопределено, Знач ТолькоСопоставленные = Ложь) Экспорт
	
	Если Отбор = Неопределено Тогда
		Отбор = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Владелец КАК Владелец,
	|	Таблица.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ втТаблицаНоменклатурыКонтрагентов
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ втТаблицаНоменклатурыИБ
	|ИЗ
	|	&ТаблицаНоменклатурыИБ КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сопоставление.Владелец КАК Владелец,
	|	Сопоставление.Идентификатор КАК Идентификатор,
	|	Сопоставление.Наименование КАК Наименование,
	|	Сопоставление.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Сопоставление.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Сопоставление.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	Сопоставление.Артикул КАК Артикул,
	|	Сопоставление.СтавкаНДС КАК СтавкаНДС,
	|	Сопоставление.Штрихкод КАК Штрихкод,
	|	Сопоставление.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	Сопоставление.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
	|	Сопоставление.Номенклатура КАК Номенклатура,
	|	Сопоставление.Характеристика КАК Характеристика,
	|	Сопоставление.Упаковка КАК Упаковка
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК Сопоставление
	|ГДЕ
	|	&УсловиеПоНоменклатуреКонтрагентов
	|	И &УсловиеПоНоменклатуреИБ
	|	И &УсловиеПоВладельцу";
	
	Если Отбор.Свойство("НоменклатураКонтрагента") Тогда
		
		Таблица = НоваяТаблицаНоменклатурыКонтрагентов(Отбор.НоменклатураКонтрагента);
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", Таблица);
		
		ТекстЗамены = "(Сопоставление.Владелец,Сопоставление.Идентификатор) В (ВЫБРАТЬ вт.Владелец,вт.Идентификатор ИЗ втТаблицаНоменклатурыКонтрагентов КАК вт)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреКонтрагентов", ТекстЗамены);
		
	Иначе
		
		Таблица = НоваяТаблицаНоменклатурыКонтрагентов();
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", Таблица);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреКонтрагентов", "ИСТИНА");
		
	КонецЕсли;
	
	Если Отбор.Свойство("НоменклатураИБ") Тогда
		
		Таблица = НоваяТаблицаНоменклатурыИнформационнойБазы(Отбор.НоменклатураИБ);
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыИБ", Таблица);
		
		ТекстЗамены = "(Сопоставление.Номенклатура,Сопоставление.Характеристика,Сопоставление.Упаковка) В (ВЫБРАТЬ вт.Номенклатура,вт.Характеристика,вт.Упаковка ИЗ втТаблицаНоменклатурыИБ КАК вт)";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреИБ", ТекстЗамены);
		
	Иначе
		
		Таблица = НоваяТаблицаНоменклатурыИнформационнойБазы();
		Запрос.УстановитьПараметр("ТаблицаНоменклатурыИБ", Таблица);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоНоменклатуреИБ", "ИСТИНА");
		
	КонецЕсли;
	
	Если Отбор.Свойство("Владелец") Тогда
		
		Запрос.УстановитьПараметр("Владелец", Отбор.Владелец);
		
		ТекстЗамены = "Сопоставление.Владелец = &Владелец";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", ТекстЗамены);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", "ИСТИНА");
		
	КонецЕсли;
	
	Соответствие = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		Если ТолькоСопоставленные И Не ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
		
		НоменклатураКонтрагента.Владелец = Выборка.Владелец;
		НоменклатураКонтрагента.Идентификатор = Выборка.Идентификатор;
		НоменклатураКонтрагента.Наименование = Выборка.Наименование;
		НоменклатураКонтрагента.Характеристика = Выборка.НаименованиеХарактеристики;
		НоменклатураКонтрагента.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		НоменклатураКонтрагента.ЕдиницаИзмеренияКод = Выборка.ЕдиницаИзмеренияКод;
		НоменклатураКонтрагента.Артикул = Выборка.Артикул;
		НоменклатураКонтрагента.СтавкаНДС = Выборка.СтавкаНДС;
		НоменклатураКонтрагента.Штрихкод = Выборка.Штрихкод;
		НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса = Выборка.ИдентификаторНоменклатурыСервиса;
		НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса = Выборка.ИдентификаторХарактеристикиСервиса;
		
		НоменклатураИБ.Номенклатура = Выборка.Номенклатура;
		НоменклатураИБ.Характеристика = Выборка.Характеристика;
		НоменклатураИБ.Упаковка = Выборка.Упаковка;
		
		ЭлементСоответствия = Новый Структура("НоменклатураКонтрагента,НоменклатураИБ",
			НоменклатураКонтрагента, НоменклатураИБ);
			
		Соответствие.Добавить(ЭлементСоответствия);
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// См. ОбменСКонтрагентами.ПриСозданииФормыНоменклатуры.
Процедура ПриСозданииФормыНоменклатуры(Форма) Экспорт
	
	НоменклатураКонтрагента = СвойствоСтруктуры(Форма.Параметры,
		"ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента");
	
	Если НоменклатураКонтрагента <> Неопределено Тогда
		
		ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииФормыНоменклатурыПоДаннымКонтрагента(
			НоменклатураКонтрагента, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОбменСКонтрагентами.ПриСозданииФормыХарактеристики.
Процедура ПриСозданииФормыХарактеристики(Форма) Экспорт
	
	НоменклатураКонтрагента = СвойствоСтруктуры(Форма.Параметры,
		"ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента");
	
	Если НоменклатураКонтрагента <> Неопределено Тогда
		
		ОбменСКонтрагентамиПереопределяемый.ПриЗаполненииФормыХарактеристикиПоДаннымКонтрагента(
			НоменклатураКонтрагента, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание и взаимосвязь объектов, составляющих номенклатуру информационной базы.
// Результат базируется на определяемых типах и переопределяемых методах.
//
// Возвращаемое значение:
//  Структура - данные о структуре номенклатуры информационной базы:
//   * ВладелецНоменклатурыПредставлениеОбъекта - Строка - представление единичного объекта владельца номенклатуры.
//   * НоменклатураПредставлениеОбъекта - Строка - представление единичного объекта номенклатуры.
//   * ХарактеристикаПредставлениеОбъекта - Строка - представление единичного объекта характеристики.
//   * УпаковкаПредставлениеОбъекта - Строка - представление единичного объекта упаковки.
//   * ИмяПараметраСвязиХарактеристики - Строка - имя параметра связи характеристики от номенклатуры.
//   * ИмяПараметраСвязиУпаковки - Строка - имя параметра связи упаковки от номенклатуры.
//
Функция МетаданныеСопоставленияНоменклатуры() Экспорт
	
	МетаданныеСопоставления = Новый Структура;
	
	Представления = Новый Структура;
	Представления.Вставить("ВладелецНоменклатурыПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип, "Владелец"));
	Представления.Вставить("НоменклатураПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип, "Номенклатура"));
	Представления.Вставить("ХарактеристикаПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип, "Характеристика"));
	Представления.Вставить("УпаковкаПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип, "Упаковка"));
	Представления.Вставить("НоменклатураКонтрагентаПредставлениеСписка",
		Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД.Синоним);
	Представления.Вставить("НоменклатураКонтрагентаПредставлениеОбъекта",
		Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД.ПредставлениеЗаписи);
		
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииПредставленийСопоставленияНоменклатуры(Представления);
	
	МетаданныеСопоставления.Вставить("ВладелецНоменклатурыПредставлениеОбъекта", Представления.ВладелецНоменклатурыПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("НоменклатураПредставлениеОбъекта", Представления.НоменклатураПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("ХарактеристикаПредставлениеОбъекта", Представления.ХарактеристикаПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("УпаковкаПредставлениеОбъекта", Представления.УпаковкаПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("НоменклатураКонтрагентаПредставлениеСписка", Представления.НоменклатураКонтрагентаПредставлениеСписка);
	МетаданныеСопоставления.Вставить("НоменклатураКонтрагентаПредставлениеОбъекта", Представления.НоменклатураКонтрагентаПредставлениеОбъекта);
	
	СтруктураНоменклатурыИБ = Новый Структура;
	СтруктураНоменклатурыИБ.Вставить("ИмяПараметраСвязиХарактеристики", "Отбор.Владелец");
	СтруктураНоменклатурыИБ.Вставить("ИмяПараметраСвязиУпаковки", "Отбор.Владелец");
	
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСтруктурыНоменклатурыИнформационнойБазы(СтруктураНоменклатурыИБ);
	
	МетаданныеСопоставления.Вставить("ИмяПараметраСвязиХарактеристики", СтруктураНоменклатурыИБ.ИмяПараметраСвязиХарактеристики);
	МетаданныеСопоставления.Вставить("ИмяПараметраСвязиУпаковки", СтруктураНоменклатурыИБ.ИмяПараметраСвязиУпаковки);
	
	Возврат МетаданныеСопоставления;
	
КонецФункции

// Возвращает свойства экземпляра номенклатуры информационной базы.
// Определяет обязательность использования характеристики и упаковки.
//
// Параметры:
//  НоменклатураИБ - Структура - номенклатура ИБ, для которой требуется определить свойства.
//                               См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
// Возвращаемое значение:
// Структура - особенности использования экземпляра номенклатуры ИБ:
//  * ИспользоватьХарактеристики - Булево - признак использования характеристик.
//  * ИспользоватьУпаковки - Булево - признак использования упаковок.
//
Функция СвойстваНоменклатурыИнформационнойБазы(Знач НоменклатураИБ) Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("ИспользоватьХарактеристики", Ложь);
	Свойства.Вставить("ИспользоватьУпаковки", Ложь);
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСвойствНоменклатурыИнформационнойБазы(НоменклатураИБ, Свойства);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Возвращает варианты сопоставления номенклатуры контрагентов номенклатуре ИБ.
// Используется переопределяемый поиск и библиотечный поиск по наименованию (если стандартная обработка не будет отключена).
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов, для которой нужно подобрать варианты сопоставления с номенклатурой ИБ.
//                                           См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
// 
// Возвращаемое значение:
//  Массив - варианты сопоставления номенклатуры. Представлены структурой:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов.
//   * НоменклатураИБ - Структура - подобранный вариант номенклатуры ИБ. См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//   * Наименование - Строка - наименование номенклатуры ИБ.
//   * Артикул - Строка - артикул номенклатуры ИБ.
//   * Штрихкод - Строка - штрихкод номенклатуры ИБ.
//
Функция ПодобратьВариантыСопоставленияНоменклатуры(Знач НаборНоменклатурыКонтрагентов) Экспорт
	
	Варианты = Новый Массив;
	
	// Переопределяемые варианты поиска.
	
	ВариантыПереопределяемые = Новый Массив;
	
	СтандартнаяОбработка = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ПриПодбореВариантовСопоставленияНоменклатуры(
		НаборНоменклатурыКонтрагентов, ВариантыПереопределяемые, СтандартнаяОбработка);
		
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Варианты, ВариантыПереопределяемые);
		
	Если Не СтандартнаяОбработка Тогда
		Возврат Варианты;
	КонецЕсли;
	
	// Стандартные варианты поиска.
	
	ВариантыПоНаименованию = ВариантыСопоставленияНоменклатурыПоНаименованию(НаборНоменклатурыКонтрагентов);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Варианты, ВариантыПоНаименованию);
	
	// Удалим дубли вариантов.
	
	ВыбранныеВарианты = Новый Массив;
	
	Для каждого ИсходныйВариант Из Варианты Цикл
		
		ИндексВыбранногоВарианта = Неопределено;
		Для Индекс = 0 По ВыбранныеВарианты.Количество() - 1 Цикл
			Вариант = ВыбранныеВарианты[Индекс];
			Если Вариант.НоменклатураКонтрагента.Владелец = ИсходныйВариант.НоменклатураКонтрагента.Владелец
				И Вариант.НоменклатураКонтрагента.Идентификатор = ИсходныйВариант.НоменклатураКонтрагента.Идентификатор
				И Вариант.НоменклатураИБ.Номенклатура = ИсходныйВариант.НоменклатураИБ.Номенклатура Тогда
				ИндексВыбранногоВарианта = Индекс;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИндексВыбранногоВарианта = Неопределено Тогда
			ВыбранныеВарианты.Добавить(ИсходныйВариант);
		Иначе
			Вариант = ВыбранныеВарианты[ИндексВыбранногоВарианта];
			Если (ЗначениеЗаполнено(ИсходныйВариант.НоменклатураИБ.Характеристика)
				И Не ЗначениеЗаполнено(Вариант.НоменклатураИБ.Характеристика))
				ИЛИ (ЗначениеЗаполнено(ИсходныйВариант.НоменклатураИБ.Упаковка)
				И Не ЗначениеЗаполнено(Вариант.НоменклатураИБ.Упаковка)) Тогда
				ВыбранныеВарианты.Вставить(ИндексВыбранногоВарианта, ИсходныйВариант);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеВарианты;
	
КонецФункции

// Подбирает недостающие данные о номенклатуре информационной базы по уже имеющимся,
// а также номенклатуре контрагента.
//
// Параметры:
//  НоменклатураКонтрагента - Структура - данные номенклатуры контрагента. 
//                                        См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
//  НоменклатураИБ - Структура - данные о номенклатуре информационной базы (имеющиеся или требующие подбора).
//                               См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Процедура ПодобратьНоменклатуруИнформационнойБазы(Знач НоменклатураКонтрагента, НоменклатураИБ) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.ПриПодбореНоменклатурыИнформационнойБазы(НоменклатураКонтрагента, НоменклатураИБ);
	
КонецПроцедуры

// Возвращает признак наличия у пользователя прав на сопоставление номенклатуры.
//
// Возвращаемое значение:
//  Булево - признак наличия прав.
//
Функция ЕстьПравоСопоставленияНоменклатуры() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НоменклатураКонтрагентовБЭД);
	
КонецФункции

// Возвращает префикс дополнительных данных, которые используются в служебных целях подсистемы, 
// но передаются в одном элементе с прикладными дополнительными данными электронного документа.
//
// Возвращаемое значение:
//  Строка - префикс служебных дополнительных данных.
//
Функция ПрефиксДополнительныхДанныхЭлектронныхДокументов() Экспорт
	
	Возврат "Для1С_";
	
КонецФункции

Функция СформироватьИдентификаторНоменклатурыИБ(Знач НоменклатураИБ) Экспорт
	
	ИдНоменклатуры = ?(ЗначениеЗаполнено(НоменклатураИБ.Номенклатура), НоменклатураИБ.Номенклатура.УникальныйИдентификатор(), "");
	ИдХарактеристики = ?(ЗначениеЗаполнено(НоменклатураИБ.Характеристика), НоменклатураИБ.Характеристика.УникальныйИдентификатор(), "");
	ИдУпаковки = ?(ЗначениеЗаполнено(НоменклатураИБ.Упаковка), НоменклатураИБ.Упаковка.УникальныйИдентификатор(), "");
	
	Результат = "";
	Если ЗначениеЗаполнено(ИдНоменклатуры) Тогда
		Результат = Строка(ИдНоменклатуры) + "#" + Строка(ИдХарактеристики) + "#" + Строка(ИдУпаковки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатуройЭлектронногоДокумента

// Выполняется перед отражением в учете электронного документа,
// содержащего данные для сопоставления номенклатуры.
// Проверяет возможность отражения в учете документа с не сопоставленной номенклатурой,
// а также добавляет информацию о имеющемся сопоставлении.
// 
// Параметры:
//  ПараметрыОтражения - Структура - данные для подготовки к отражению в учете:
//   * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - отражаемый в учете электронный документ.
//   * СпособОбработки - Строка - выбранный способ отражения в учете.
//   * ДеревоДокумента - ДеревоЗначений - дерево документа, по данным которого будет выполняться отражение в учете (изменяемый параметр).
//  Отказ - Булево - признак наличия ошибок при подготовке к отражению в учете (выходной параметр).
//  ОписаниеОшибки - Строка - описание ошибки, возникшей при подготовке к отражению в учете (выходной параметр).
//
Процедура ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(ПараметрыОтражения, Отказ = Ложь, ОписаниеОшибки = "") Экспорт
	
	Документ = Новый Структура("СпособОбработки", ПараметрыОтражения.СпособОбработки);
	Настройки = Новый Структура("ОтражатьТолькоСопоставленные", Истина);
	ОбменСКонтрагентамиПереопределяемый.ПриОтраженииВУчетеЭлектронногоДокументаСНоменклатурой(Документ, Настройки);
	Если Настройки.ОтражатьТолькоСопоставленные Тогда
		ОтборПоДокументу = Новый Структура("ЭлектронныйДокумент", ПараметрыОтражения.ЭлектронныйДокумент);
		НаКонтроле = НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
		Если ЗначениеЗаполнено(НаКонтроле) Тогда
			Отказ = Истина;
			ОписаниеОшибки = НСтр("ru = 'Для отражения в учете необходимо сопоставить номенклатуру.'");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыОтражения.ДеревоДокумента.ЗначениеРеквизита = Неопределено Тогда
		ЗаполнитьНоменклатуруИБВСтрокахДереваДокумента(
			ПараметрыОтражения.ЭлектронныйДокумент, ПараметрыОтражения.ДеревоДокумента);
	Иначе
		ЗаполнитьНоменклатуруИБВДеревеДокумента(
			ПараметрыОтражения.ЭлектронныйДокумент, ПараметрыОтражения.ДеревоДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСопоставлениеНоменклатурыВДопДанныеДереваДокументаТаблица(Дерево, ПутьКТаблицеТоваров) Экспорт
	
	ТаблицаТоваров = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(Дерево, ПутьКТаблицеТоваров);
	
	Если ТаблицаТоваров.Колонки.Найти("ДопДанныеПодписанные") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСопоставления = ИзвлечьСопоставлениеНоменклатурыИзТаблицыТоваров(ТаблицаТоваров);
	Если ТаблицаСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборСопоставленийДляВыгрузки = ПодготовитьСопоставлениеНоменклатурыДляЭлектронногоДокументаПоТаблице(ТаблицаСопоставления);
	
	Индекс = 0;
	СтрокаТаблицыТоваров = Дерево.Строки.Найти(ПутьКТаблицеТоваров, "ПолныйПуть", Истина);
	Для каждого СтрокаТовара Из СтрокаТаблицыТоваров.Строки Цикл
		
		СопоставлениеДляВыгрузки = НаборСопоставленийДляВыгрузки[Индекс];
		Индекс = Индекс + 1;
		
		СтрокаДопДанных = СтрокаТовара.Строки.Найти(СтрокаТовара.ПолныйПуть + ".ДопДанныеПодписанные", "ПолныйПуть");
		Если СтрокаДопДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, СопоставлениеДляВыгрузки, Истина);
	
		// Для обратной совместимости дублируем идентификатор в доп. данные с именем "ИД".
		Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
		Если СопоставлениеДляВыгрузки.Свойство(Префикс + "Идентификатор") Тогда
			ДляСовместимости = Новый Структура("ИД", СопоставлениеДляВыгрузки[Префикс + "Идентификатор"]);
			ЭлектронноеВзаимодействие.ДобавитьДопДанныеВДерево(СтрокаДопДанных, ДляСовместимости, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИзвлечьСопоставлениеНоменклатурыИзТаблицыТоваров(Знач ТаблицаТоваров) Экспорт
	
	Если ТаблицаТоваров.Колонки.Найти("Сопоставление") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("Идентификатор");
	ТаблицаСопоставления.Колонки.Добавить("Наименование");
	ТаблицаСопоставления.Колонки.Добавить("Характеристика");
	ТаблицаСопоставления.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаСопоставления.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаСопоставления.Колонки.Добавить("Артикул");
	ТаблицаСопоставления.Колонки.Добавить("СтавкаНДС");
	ТаблицаСопоставления.Колонки.Добавить("Штрихкод");
	ТаблицаСопоставления.Колонки.Добавить("НоменклатураИБ");
	ТаблицаСопоставления.Колонки.Добавить("ХарактеристикаИБ");
	ТаблицаСопоставления.Колонки.Добавить("УпаковкаИБ");
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		НовоеСопоставление = ТаблицаСопоставления.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеСопоставление, СтрокаТовара.Сопоставление);
		
	КонецЦикла;
	
	Возврат ТаблицаСопоставления;
	
КонецФункции

Функция ПодготовитьСопоставлениеНоменклатурыДляЭлектронногоДокументаПоТаблице(Знач ТаблицаСопоставления) Экспорт
	
	НаборСопоставлений = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСопоставления);
	НаборСопоставленийДляВыгрузки = Новый Массив;
	
	Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
	
	// Получим идентификаторы сервиса 1С:Номенклатура.
	ТаблицаСервиса = Неопределено;
	ЕстьРаботаСНоменклатурой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если ЕстьРаботаСНоменклатурой Тогда
		НаборПоиска = Новый Массив;
		Для каждого Сопоставление Из НаборСопоставлений Цикл
			ЭлементПоиска = Новый Структура;
			ЭлементПоиска.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
			ЭлементПоиска.Вставить("Характеристика", Сопоставление.ХарактеристикаИБ);
			НаборПоиска.Добавить(ЭлементПоиска);
		КонецЦикла;
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ТаблицаСервиса = МодульРаботаСНоменклатурой.ИдентификаторыНоменклатурыИХарактеристикПоСсылкам(НаборПоиска);
	КонецЕсли;
	
	Для каждого Сопоставление Из НаборСопоставлений Цикл
		
		НоменклатураИБ = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы();
		Сопоставление.Свойство("НоменклатураИБ", НоменклатураИБ.Номенклатура);
		Сопоставление.Свойство("ХарактеристикаИБ", НоменклатураИБ.Характеристика);
		Сопоставление.Свойство("УпаковкаИБ", НоменклатураИБ.Упаковка);
		// Если идентификатор не задан, то формируем его по номенклатуре ИБ.
		ЗначениеСвойства = "";
		Сопоставление.Свойство("Идентификатор", ЗначениеСвойства);
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Сопоставление.Вставить("Идентификатор", СформироватьИдентификаторНоменклатурыИБ(НоменклатураИБ));
		КонецЕсли;
		// Если передан массив штрихкодов, то преобразуем их в строку.
		Если Сопоставление.Свойство("Штрихкод") Тогда
			Если ТипЗнч(Сопоставление.Штрихкод) = Тип("Массив") Тогда
				Сопоставление.Штрихкод = СоединитьШтрихкодыВСтроку(Сопоставление.Штрихкод, 1000);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаСервиса) Тогда
			ОтборВСервисе = Новый Структура;
			ОтборВСервисе.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
			Если ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
				ОтборВСервисе.Вставить("Характеристика", Сопоставление.ХарактеристикаИБ);
			КонецЕсли;
			НайденныеСтроки = ТаблицаСервиса.НайтиСтроки(ОтборВСервисе);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				Сопоставление.Вставить("ИдентификаторНоменклатурыСервиса", НайденныеСтроки[0].ИдентификаторНоменклатуры);
				Сопоставление.Вставить("ИдентификаторХарактеристикиСервиса", НайденныеСтроки[0].ИдентификаторХарактеристики);
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем результирующую структуру для помещения в электронный документ.
		
		Результат = Новый Структура;
		
		Для Каждого Элемент Из Сопоставление Цикл
			
			Если Элемент.Ключ = "НоменклатураИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "ХарактеристикаИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "УпаковкаИБ" Тогда
				// Не выгружаем.
			ИначеЕсли Элемент.Ключ = "СтавкаНДС" Тогда
				СтавкаНДСКод = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(, Элемент.Значение);
				Если ЗначениеЗаполнено(СтавкаНДСКод) Тогда
					Результат.Вставить(Префикс + Элемент.Ключ, СтавкаНДСКод);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
				Результат.Вставить(Префикс + Элемент.Ключ, Элемент.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		НаборСопоставленийДляВыгрузки.Добавить(Результат);
		
	КонецЦикла;
	
	Возврат НаборСопоставленийДляВыгрузки;
	
КонецФункции

// Извлекает из доп. данных строки товара дерева документа информацию для сопоставления номенклатуры.
// Информация предназначенная для сопоставления определяется по специальному префиксу.
//
// Параметры:
//  ДопДанные - Структура,Соответствие - доп. данные, из которых нужно извлечь информацию для сопоставления.
//
// Возвращаемое значение:
//  Структура - информация для сопоставления товаров, переданная отправителем.
//
Функция ИзвлечьСопоставлениеНоменклатурыИзДопДанныхДереваДокумента(Знач ДопДанные, Знач СопоставлениеПоУмолчанию = Неопределено) Экспорт
	
	Если ДопДанные = Неопределено Тогда
		ДопДанные = Новый Соответствие;
	КонецЕсли;
	Если СопоставлениеПоУмолчанию = Неопределено Тогда
		СопоставлениеПоУмолчанию = Новый Структура;
	КонецЕсли;
	
	Префикс = ПрефиксДополнительныхДанныхЭлектронныхДокументов();
	ДлинаПрефикса = СтрДлина(Префикс);
	
	Сопоставление = СопоставлениеПоУмолчанию;
	
	Для Каждого Элемент Из ДопДанные Цикл
		
		Если Лев(Элемент.Ключ, ДлинаПрефикса) = Префикс Тогда
			
			Ключ = Сред(Элемент.Ключ, ДлинаПрефикса + 1);
			Сопоставление.Вставить(Ключ, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СопоставлениеДляДереваДокумента = ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Сопоставление);
	
	Возврат СопоставлениеДляДереваДокумента;
	
КонецФункции

// Подготавливает данные для сопоставления номенклатуры, полученные из доп. данных электронного документа.
// Добавляет автоматически рассчитываемую информацию.
//
// Параметры:
//  Сопоставление - Структура - данные для сопоставления извлеченные из ЭД.
//
// Возвращаемое значение:
//  Структура - данные для сопоставления, подготовленные для вставки в дерево ЭД.
//
Функция ПодготовитьСопоставлениеНоменклатурыДляДереваДокумента(Знач Сопоставление) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Наименование");
	Результат.Вставить("Характеристика");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("ЕдиницаИзмеренияКод");
	Результат.Вставить("Артикул");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("Штрихкод");
	Результат.Вставить("НоменклатураИБ");
	Результат.Вставить("ХарактеристикаИБ");
	Результат.Вставить("УпаковкаИБ");
	
	ЗаполнитьЗначенияСвойств(Результат, Сопоставление);
	
	// Проверим, что пришел наш идентификатор.
	НоменклатураИБ = НайтиНоменклатуруИБПоИдентификатору(Результат.Идентификатор);
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Результат.Вставить("Идентификатор", "");
		Результат.Вставить("НоменклатураИБ", НоменклатураИБ.Номенклатура);
		Результат.Вставить("ХарактеристикаИБ", НоменклатураИБ.Характеристика);
		Результат.Вставить("УпаковкаИБ", НоменклатураИБ.Упаковка);
		Возврат Результат;
	КонецЕсли;
	
	// Преобразуем ставку НДС в прикладное значение.
	Результат.СтавкаНДС = ОбменСКонтрагентамиПовтИсп.СтавкаНДСИзСоответствия(Результат.СтавкаНДС);
	
	// Если пришло несколько штрихкодов, то преобразуем их в массив.
	Если СтрНайти(Результат.Штрихкод, ",") > 0 Тогда
		Результат.Штрихкод = СтрРазделить(Результат.Штрихкод, ",");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НоменклатураКонтрагентаВФайле(Знач ИмяФайла, Знач Контрагент) Экспорт
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ОбменСКонтрагентамиВнутренний.ИнформацияОТовареИзФайлаXML(ИмяФайла, ТаблицаТоваров, Неопределено);
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		Сопоставление = СтрокаТовара.Сопоставление;
		Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = ВладелецНоменклатурыКонтрагента(Контрагент);
		
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Возврат НаборНоменклатурыКонтрагентов;
	
КонецФункции

// Заполняет номенклатуру информационной базы в дереве ЭД, по имеющейся в нем информации для сопоставления.
// Для случаев, когда товары в дереве ЭД подчинены одной корневой строке дерева.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, из которого получено дерево данных.
//                      - Структура - данные электронного документа. Свойства: Контрагент.
//  ДеревоДокумента - ДеревоЗначений - дерево электронного документа, в котором нужно заполнить номенклатуру ИБ, по сопоставлению.
//
Процедура ЗаполнитьНоменклатуруИБВДеревеДокумента(Знач ЭлектронныйДокумент, ДеревоДокумента) Экспорт
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		Контрагент = ЭлектронныйДокумент.Контрагент;
	Иначе
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
	КонецЕсли;
	Владелец = ВладелецНоменклатурыКонтрагента(Контрагент);
	
	ИменаТаблицТоваров = Новый Массив;
	ИменаТаблицТоваров.Добавить("СведенияОТоварах");
	ИменаТаблицТоваров.Добавить("ТаблицаТоваров");
	ИменаТаблицТоваров.Добавить("ТаблицаУслуг");
	
	Товары = Неопределено;
	Для Каждого ИмяТаблицы Из ИменаТаблицТоваров Цикл
		
		Товары = ДеревоДокумента.Строки.Найти(ИмяТаблицы, "ПолныйПуть");
		Если Товары <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Товары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаСопоставление = Новый Массив;
	ИдентификаторВСтрокеТоваров = Новый Соответствие;
	
	Для Каждого СтрокаТовара Из Товары.Строки Цикл
		
		Сопоставление = ИзвлечьСопоставлениеНоменклатурыИзДереваДокумента(СтрокаТовара);
		Если Сопоставление = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		// Проверим, что номенклатура уже заполнена.
		Если Сопоставление.Свойство("НоменклатураИБ") Тогда
			Если  ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Если не заполнено, то добавим данные к сопоставлению.
		ИдентификаторВСтрокеТоваров.Вставить(СтрокаТовара, Сопоставление.Идентификатор);
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		НаСопоставление.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Отбор = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	Соответствие = НайтиСоответствиеНоменклатуры(Отбор, Истина);
	
	Для Каждого Элемент Из ИдентификаторВСтрокеТоваров Цикл
		
		СтрокаТовара = Элемент.Ключ;
		Идентификатор = Элемент.Значение;
		ПутьКСопоставлению = СтрокаТовара.ПолныйПуть + ".Сопоставление";
		Для Каждого ЭлементСоответствия Из Соответствие Цикл
			Если Идентификатор = ЭлементСоответствия.НоменклатураКонтрагента.Идентификатор Тогда
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					СтрокаТовара, ПутьКСопоставлению + ".НоменклатураИБ", ЭлементСоответствия.НоменклатураИБ.Номенклатура);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					СтрокаТовара, ПутьКСопоставлению + ".ХарактеристикаИБ", ЭлементСоответствия.НоменклатураИБ.Характеристика);
				ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(
					СтрокаТовара, ПутьКСопоставлению + ".УпаковкаИБ", ЭлементСоответствия.НоменклатураИБ.Упаковка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет номенклатуру информационной базы в дереве ЭД, по имеющейся в нем информации для сопоставления.
// Для случаев, когда товары в дереве ЭД представлены отдельными корневыми строками с именем "СтрокаТЧ".
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, из которого получено дерево данных.
//                      - Структура - данные электронного документа. Свойства: Контрагент.
//  ДеревоДокумента - ДеревоЗначений - дерево электронного документа, в котором нужно заполнить номенклатуру ИБ, по сопоставлению.
//
Процедура ЗаполнитьНоменклатуруИБВСтрокахДереваДокумента(Знач ЭлектронныйДокумент, ДеревоДокумента) Экспорт
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		Контрагент = ЭлектронныйДокумент.Контрагент;
	Иначе
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
	КонецЕсли;
	Владелец = ВладелецНоменклатурыКонтрагента(Контрагент);
	
	НаСопоставление = Новый Массив;
	СтрокиСопоставлений = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоДокумента.Строки Цикл
		
		Если СтрокаДерева.Реквизит <> "СтрокаТЧ" Тогда
			Продолжить;
		КонецЕсли;
		Сопоставление = Неопределено;
		СтрокаКолонкиСопоставления = Неопределено;
		Для Каждого СтрокаКолонки Из СтрокаДерева.Строки Цикл
			Если СтрокаКолонки.Реквизит = "Сопоставление" Тогда
				СтрокаКолонкиСопоставления = СтрокаКолонки;
				Сопоставление = СтрокаКолонки.ЗначениеРеквизита;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Сопоставление = Неопределено Тогда
			Продолжить;
		ИначеЕсли Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		// Проверим, что номенклатура уже заполнена.
		Если Сопоставление.Свойство("НоменклатураИБ") Тогда
			Если  ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		// Если пришел не наш идентификатор, то добавим данные к сопоставлению.
		СтрокиСопоставлений.Добавить(СтрокаКолонкиСопоставления);
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		НаСопоставление.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Отбор = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	Соответствие = НайтиСоответствиеНоменклатуры(Отбор, Истина);
	
	Для Каждого СтрокаСопоставления Из СтрокиСопоставлений Цикл
		
		Идентификатор = СтрокаСопоставления.ЗначениеРеквизита.Идентификатор;
		Для Каждого ЭлементСоответствия Из Соответствие Цикл
			Если Идентификатор = ЭлементСоответствия.НоменклатураКонтрагента.Идентификатор Тогда
				
				СтрокаСопоставления.ЗначениеРеквизита.Вставить("НоменклатураИБ", ЭлементСоответствия.НоменклатураИБ.Номенклатура);
				СтрокаСопоставления.ЗначениеРеквизита.Вставить("ХарактеристикаИБ", ЭлементСоответствия.НоменклатураИБ.Характеристика);
				СтрокаСопоставления.ЗначениеРеквизита.Вставить("УпаковкаИБ", ЭлементСоответствия.НоменклатураИБ.Упаковка);
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольОтраженияВУчете

///////////////////////////////////////////////////////////////////////////////////////////
// Подписки на события, влияющие на контроль отражения в учете

// Обработчик события "При записи" электронного документа.
// Проверяется общая необходимость контроля отражения в учете данного электронного документа.
// Проверяется создание/проведение учетных документов, а также необходимость контроля сопоставления номенклатуры.
//
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиЭлектронногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектронныйДокумент = Источник.Ссылка;
	
	// Если контроль больше не требуется, то отключаем.
	Если Не ТребуетсяКонтрольОтраженияВУчете(ЭлектронныйДокумент) Тогда
		ОтключитьКонтрольОтраженияВУчете(ЭлектронныйДокумент);
		Возврат;
	КонецЕсли;
	
	ВыполнитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент);
	
	ВыполнитьКонтрольОтраженияВУчете(ЭлектронныйДокумент);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик события "При записи" учетного документ.
// Для электронных документов, связанных с данным учетным документом,
// выполняется контроль проведения учетных документов.
//
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиУчетногоДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	УчетныйДокумент = Источник.Ссылка;
	НаборЭлектронныхДокументов = ЭлектронныеДокументыПоУчетномуДокументу(УчетныйДокумент);
	
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		ВыполнитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент);
	КонецЦикла;
		
	Проверки = Новый Массив;
	Проверки.Добавить("ПровестиУчетныйДокумент");
	
	ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" регистра сведений НоменклатураКонтрагентовБЭД.
// Отключает контроль сопоставления по той номенклатуре контрагента, которой установлено соответствие с номенклатурой ИБ.
// Те электронные документы, которые содержали сопоставленные строки, проверяются повторно на наличие еще несопоставленных строк.
//
Процедура ВыполнитьКонтрольОтраженияВУчетеПриЗаписиНоменклатурыКонтрагентов(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Владелец КАК Владелец,
	|	НоменклатураКонтрагентов.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатураКонтрагентов
	|ИЗ
	|	&НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контроль.Владелец КАК Владелец,
	|	Контроль.Идентификатор КАК Идентификатор,
	|	втНоменклатураКонтрагентов.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагентов КАК втНоменклатураКонтрагентов
	|		ПО Контроль.Владелец = втНоменклатураКонтрагентов.Владелец
	|			И Контроль.Идентификатор = втНоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	&УсловиеПоВладельцу
	|	И &УсловиеПоИдентификатору";
	Запрос.УстановитьПараметр("НоменклатураКонтрагентов", Источник.Выгрузить());
	
	УсловиеПоВладельцу = "ИСТИНА";
	Если Источник.Отбор.Владелец.Использование Тогда
		УсловиеПоВладельцу = "Контроль.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", Источник.Отбор.Владелец.Значение);
	КонецЕсли;
	УсловиеПоИдентификатору = "ИСТИНА";
	Если Источник.Отбор.Идентификатор.Использование Тогда
		УсловиеПоИдентификатору = "Контроль.Идентификатор = &Идентификатор";
		Запрос.УстановитьПараметр("Идентификатор", Источник.Отбор.Идентификатор.Значение);
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоВладельцу", УсловиеПоВладельцу);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИдентификатору", УсловиеПоИдентификатору);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаОтключение = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СопоставлениеВыполнено = ЗначениеЗаполнено(Выборка.Номенклатура) ИЛИ (Выборка.Номенклатура = NULL);
		Если СопоставлениеВыполнено Тогда
			НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Выборка);
			НаОтключение.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЭлектронныхДокументов = ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(НаОтключение);
	
	Проверки = Новый Массив;
	Проверки.Добавить("СопоставитьНоменклатуру");
	
	ВыполнитьКонтрольОтраженияВУчете(НаборЭлектронныхДокументов, Проверки);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// Контроль сопоставления номенклатуры контрагентов.

// Возвращает номенклатуру контрагентов, которая числится на контроле сопоставления электронных документов.
//
// Параметры:
//  Отбор - Структура, Неопределено - критерии поиска номенклатуры на контроле:
//   * Ключ - поле отбора: Владелец, Идентификатор, ЭлектронныйДокумент.
//   * Значение - значение или коллекция значений для отбора.
//
// Возвращаемое значение:
//  Массив - номенклатура контрагента, находящаяся на контроле.
//           См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
//
Функция НоменклатураКонтрагентовНаКонтроле(Знач Отбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураКонтрагентовБЭД.Владелец КАК Владелец,
	|	НоменклатураКонтрагентовБЭД.Идентификатор КАК Идентификатор,
	|	НоменклатураКонтрагентовБЭД.Наименование КАК Наименование,
	|	НоменклатураКонтрагентовБЭД.НаименованиеХарактеристики КАК Характеристика,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НоменклатураКонтрагентовБЭД.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	НоменклатураКонтрагентовБЭД.Артикул КАК Артикул,
	|	НоменклатураКонтрагентовБЭД.СтавкаНДС КАК СтавкаНДС,
	|	НоменклатураКонтрагентовБЭД.Штрихкод КАК Штрихкод,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса
	|ИЗ
	|	РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК Контроль
	|		ПО НоменклатураКонтрагентовБЭД.Владелец = Контроль.Владелец
	|			И НоменклатураКонтрагентовБЭД.Идентификатор = Контроль.Идентификатор
	|			И (&УсловиеОтбора)";
	
	УсловиеОтбора = "ИСТИНА";
	Если Отбор <> неопределено Тогда
		Для Каждого Элемент Из Отбор Цикл
			УсловиеОтбора = УсловиеОтбора + " И Контроль." + Элемент.Ключ + " В (&" + Элемент.Ключ + ")";
			Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", УсловиеОтбора);
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Выборка);
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Возврат НаборНоменклатурыКонтрагентов;
	
КонецФункции

// Выполняет проверку электронного документа на наличие не сопоставленной номенклатуры.
// Не сопоставленная номенклатура ставится на контроль.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ на проверку.
//                                                                     Обязателен, если не задан параметр НаборНоменклатурыКонтрагентов.
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов для контроля.
//                                           Если задан, то номенклатура из электронного документа не извлекается.
//  Сохранить - Булево - признак сохранения номенклатуры контрагента в информационной базе.
//                       Если задан параметр ЭлектронныйДокумент, то сохранение будет выполнено в любом случае, т.к. необходимо для работы механизма контроля.
//
Функция ВыполнитьКонтрольСопоставленияНоменклатуры(Знач ЭлектронныйДокумент = Неопределено, Знач НаборНоменклатурыКонтрагентов = Неопределено, Знач Сохранить = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Сохранить = Истина;
	КонецЕсли;
	// Извлекаем данные о номенклатуре контрагента из электронного документа.
	Если Не ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) И ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		НаборНоменклатурыКонтрагентов = НоменклатураКонтрагентаВЭлектронномДокументе(ЭлектронныйДокумент);
	КонецЕсли;
	// Найдем номенклатуру, которую не нужно сопоставлять с номенклатурой контрагентов.
	Исключения = Новый Массив;
	//  Найдем номенклатуру, которая задана в наших идентификаторах.
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		НоменклатураИБ = НайтиНоменклатуруИБПоИдентификатору(НоменклатураКонтрагента.Идентификатор);
		Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
			Исключения.Добавить(НоменклатураКонтрагента.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	//  Найдем номенклатуру в сервисе 1С:Номенклатура.
	НаборИдентификаторовСервиса = Новый Массив;
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		Если ЗначениеЗаполнено(НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			ИдентификаторСервиса = Новый Структура("ИдентификаторНоменклатуры,ИдентификаторХарактеристики",
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			НаборИдентификаторовСервиса.Добавить(ИдентификаторСервиса);
		КонецЕсли;
	КонецЦикла;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ДанныеСервиса = МодульРаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторам(НаборИдентификаторовСервиса);
		Для каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
			ОтборИдентификатораСервиса = Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики", 
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса, НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса);
			Если ЗначениеЗаполнено(ОтборИдентификатораСервиса.ИдентификаторНоменклатуры) Тогда
				СтрокиДанныхСервиса = ДанныеСервиса.НайтиСтроки(ОтборИдентификатораСервиса);
				Если ЗначениеЗаполнено(СтрокиДанныхСервиса) Тогда
					Исключения.Добавить(НоменклатураКонтрагента.Идентификатор);
					НоменклатураИБ = ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы(
						СтрокиДанныхСервиса[0].Номенклатура, СтрокиДанныхСервиса[0].Характеристика);
					УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента, НоменклатураИБ, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Найдем сопоставление с номенклатурой контрагентов
	НаСопоставление = Новый Массив;
	НеСопоставлено = Новый Массив;
	НаОбновление = Новый Массив;
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		Если Исключения.Найти(НоменклатураКонтрагента.Идентификатор) = Неопределено Тогда
			НаСопоставление.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(НаСопоставление) Тогда
		Возврат НеСопоставлено;
	КонецЕсли;
	ОтборПоНоменклатуреКонтрагента = Новый Структура("НоменклатураКонтрагента", НаСопоставление);
	Сопоставление = НайтиСоответствиеНоменклатуры(ОтборПоНоменклатуреКонтрагента);
	// Определим не сопоставленную номенклатуру.
	Для Каждого НоменклатураКонтрагента Из НаСопоставление Цикл
		
		ЕстьСопоставление = Ложь;
		Для Каждого Элемент Из Сопоставление Цикл
			Если Не ЗначениеЗаполнено(Элемент.НоменклатураИБ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			// Очистим свойства, которые не нужно сравнивать.
			ДанныеДокумента = ОбщегоНазначения.СкопироватьРекурсивно(НоменклатураКонтрагента);
			ДанныеБазы = ОбщегоНазначения.СкопироватьРекурсивно(Элемент.НоменклатураКонтрагента);
			ИсключаемыеСвойства = СтрРазделить("СтавкаНДС,Штрихкод", ",");
			Для каждого Свойство Из ИсключаемыеСвойства Цикл
				ДанныеДокумента.Вставить(Свойство, Неопределено);
				ДанныеБазы.Вставить(Свойство, Неопределено);
			КонецЦикла;
			Если ОбщегоНазначения.ДанныеСовпадают(ДанныеДокумента, ДанныеБазы) Тогда
				ЕстьСопоставление = Истина;
				Если Не ОбщегоНазначения.ДанныеСовпадают(НоменклатураКонтрагента, Элемент.НоменклатураКонтрагента) Тогда
					ДанныеДляОбновления = ОбщегоНазначения.СкопироватьРекурсивно(Элемент);
					ЗаполнитьЗначенияСвойств(ДанныеДляОбновления.НоменклатураКонтрагента, НоменклатураКонтрагента);
					НаОбновление.Добавить(ДанныеДляОбновления);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьСопоставление Тогда
			НеСопоставлено.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	// Включаем контроль по не сопоставленной номенклатуре.
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		ВключитьКонтрольСопоставленияНоменклатуры(ЭлектронныйДокумент, НеСопоставлено);
	КонецЕсли;
	// Сохраняем не сопоставленную номенклатуру контрагента.
	Если Сохранить Тогда
		Для Каждого НоменклатураКонтрагента Из НеСопоставлено Цикл
			УстановитьСоответствиеНоменклатуры(НоменклатураКонтрагента);
		КонецЦикла;
		Для Каждого Элемент Из НаОбновление Цикл
			УстановитьСоответствиеНоменклатуры(Элемент.НоменклатураКонтрагента, Элемент.НоменклатураИБ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НеСопоставлено;
	
КонецФункции

#КонецОбласти

#Область КонвертерЭлектронныхДокументов_ПрограммныйИнтерфейс

Функция ПараметрыФайлаПроизвольногоДокумента(ФайлXML, ПроверятьПоСхемеXML = Истина) Экспорт
	
	Если ТипЗнч(ФайлXML) = Тип("Строка") Тогда
		ПотокИсходногоXML = Новый ФайловыйПоток(ФайлXML, РежимОткрытияФайла.Открыть);
	Иначе
		ПотокИсходногоXML = ФайлXML.ОткрытьПотокДляЧтения();
	КонецЕсли;
	
	ПараметрыФайлаXML = ПреобразоватьФорматЭД(ПотокИсходногоXML);
	Если ПараметрыФайлаXML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПроверятьПоСхемеXML И ПараметрыФайлаXML.Свойство("ИмяТипаXML") Тогда
		ФайлСоответствуетСхемеXML = ПроверитьЭлектронныйДокументПоСхемеXML(ПотокИсходногоXML, ПараметрыФайлаXML);
	Иначе
		ФайлСоответствуетСхемеXML = Истина;
	КонецЕсли;
	
	ПотокИсходногоXML.Закрыть();
	
	Если НЕ ФайлСоответствуетСхемеXML Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыФайлаXML;
	
КонецФункции

Функция ПредставлениеПроизвольногоДокумента(ИмяФайлаXML, ПараметрыДокумента) Экспорт
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИтоговыйФормат", "ТабличныйДокумент");
	ПараметрыПреобразования.Вставить("ИсходныйФормат", ПараметрыДокумента.ИсходныйФормат);
	ВариантЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыДокумента, "ВариантЗаполнения", "");
	ПараметрыПреобразования.Вставить("ВариантЗаполнения", ВариантЗаполнения);
	Если ПараметрыДокумента.Свойство("ПараметрыПредставления") Тогда
		ПараметрыПреобразования.Вставить("ПараметрыXSL", ПараметрыДокумента.ПараметрыПредставления);
	КонецЕсли;
	
	ПотокИсходногоXML = Новый ФайловыйПоток(ИмяФайлаXML, РежимОткрытияФайла.Открыть);
	
	ТабличныйДокумент = ПреобразоватьФорматЭД(ПотокИсходногоXML, ПараметрыПреобразования);
	
	ПотокИсходногоXML.Закрыть();
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ИнформацияОТовареПроизвольногоДокумента(ИмяФайлаXML, ИсходныйФормат = Неопределено) Экспорт
	
	ПотокИсходногоXML = Новый ФайловыйПоток(ИмяФайлаXML, РежимОткрытияФайла.Открыть);
	
	Если ИсходныйФормат = Неопределено Тогда
		ПараметрыФайлаXML = ПреобразоватьФорматЭД(ПотокИсходногоXML);;
		Если ПараметрыФайлаXML = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПараметрыФайлаXML.Свойство("ИсходныйФормат", ИсходныйФормат);
		ПотокИсходногоXML.Перейти(0, ПозицияВПотоке.Начало);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйФормат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИтоговыйФормат", "ТаблицаНоменклатуры");
	ПараметрыПреобразования.Вставить("ИсходныйФормат", ИсходныйФормат);
	
	ИнформацияОТоваре = ПреобразоватьФорматЭД(ПотокИсходногоXML, ПараметрыПреобразования);
	
	ОбменСКонтрагентамиВнутренний.ДополнитьИнформациюОТовареДаннымиДляСопоставления(ИнформацияОТоваре);
	
	ПотокИсходногоXML.Закрыть();
	
	Возврат ИнформацияОТоваре;
	
КонецФункции

Функция ДанныеCMLПроизвольногоДокумента(ДанныеXML, ПараметрыДокумента = Неопределено) Экспорт
	
	ПотокИсходногоXML = ДанныеXML.ОткрытьПотокДляЧтения();
	
	ИсходныйФормат = Неопределено;
	ВариантЗаполнения = Неопределено;
	Если ПараметрыДокумента = Неопределено 
		ИЛИ НЕ ПараметрыДокумента.Свойство("ИсходныйФормат", ИсходныйФормат)
		ИЛИ НЕ ЗначениеЗаполнено(ИсходныйФормат) Тогда
		ПараметрыФайлаXML = ПреобразоватьФорматЭД(ПотокИсходногоXML);;
		Если ПараметрыФайлаXML = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ПараметрыФайлаXML.Свойство("ИсходныйФормат", ИсходныйФормат);
		ПараметрыФайлаXML.Свойство("ВариантЗаполнения", ВариантЗаполнения);
		ПотокИсходногоXML.Перейти(0, ПозицияВПотоке.Начало);
	Иначе
		ПараметрыДокумента.Свойство("ИсходныйФормат", ИсходныйФормат);
		ПараметрыДокумента.Свойство("ВариантЗаполнения", ВариантЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИсходныйФормат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("ИтоговыйФормат", "CML");
	ПараметрыПреобразования.Вставить("ИсходныйФормат", ИсходныйФормат);
	Если ВариантЗаполнения <> Неопределено Тогда
		ПараметрыПреобразования.Вставить("ВариантЗаполнения", ВариантЗаполнения);
	КонецЕсли;

	Если ПараметрыДокумента <> Неопределено И ПараметрыДокумента.Свойство("ПараметрыОтражения") Тогда
		ПараметрыПреобразования.Вставить("ПараметрыXSL", ПараметрыДокумента.ПараметрыОтражения);
	КонецЕсли;
	
	ДанныеCML = ПреобразоватьФорматЭД(ПотокИсходногоXML, ПараметрыПреобразования);
	
	ПотокИсходногоXML.Закрыть();
	
	Возврат ДанныеCML;
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

#Область ПроверкаКонтрагентов

// Часть фонового задания по проверке контрагента из формы контрагента
Процедура ПроверитьКонтрагентаФоновоеЗадание(Параметры) Экспорт
	
	// Присвоение даты находится здесь, так как ТекущаяДатаСеанса работает только на сервере.
	Если Не Параметры.Свойство("Дата") Тогда
		Параметры.Вставить("Дата", НачалоДня(ТекущаяДатаСеанса()));
	КонецЕсли;
	
	Попытка
		ПроверитьКонтрагента(Параметры, Параметры.АдресХранилища);
	Исключение
		
		Операция = НСтр("ru = 'Проверка подключения контрагента к 1С-ЭДО из формы контрагента.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПроверитьНепроверенныхКонтрагентов(ЭтоОбновлениеИБВМоделиСервиса, Параметры = Неопределено) Экспорт
	
	// Выбираем контрагентов, которых нет в регистре сведений.
	Запрос = Новый Запрос;
	Текст = 
	"ВЫБРАТЬ %5
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.%1 КАК ИНН,
	|	Контрагенты.%2 КАК КПП,
	|	&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	&Дата КАК Дата
	|ИЗ
	|	Справочник.%3 КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО Контрагенты.Ссылка = СостоянияКонтрагентовБЭД.Контрагент
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Состояние ЕСТЬ NULL 
	|	%4";
		
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Текст = СтрЗаменить(
			Текст,
			"&ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,",
			"");
		
	КонецЕсли;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	УсловиеНаГруппу = "";
	Если СправочникКонтрагентовИерархический() Тогда
		УсловиеНаГруппу = "И Контрагенты.ЭтоГруппа = ЛОЖЬ";
	КонецЕсли;
	
	ОграничениеНаПрава = "";
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		РазмерПорции = 1000;
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ ПЕРВЫЕ " + Формат(РазмерПорции, "ЧГ=0");
	Иначе
		ОграничениеНаПрава = "РАЗЛИЧНЫЕ";
	КонецЕсли;
	
	Запрос.Текст = СтрШаблон(Текст, 
		ИмяРеквизитаИННКонтрагента, 
		ИмяРеквизитаКППКонтрагента, 
		ИмяПрикладногоСправочника, 
		УсловиеНаГруппу,
		ОграничениеНаПрава);
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Запрос.УстановитьПараметр("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	// Прерываем обновление, если не осталось необработанных данных.
	Если ЭтоОбновлениеИБВМоделиСервиса Тогда
		Параметры.ОбработкаЗавершена = ДанныеКонтрагентов.Количество() = 0;
		Если Параметры.ОбработкаЗавершена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов);
	
КонецПроцедуры

// Проверяет статус подключения организации в сервисе 1С-ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//   Результат - Булево, Строка - результат проверки организации в сервисе,
//     если передан адрес временного хранилища, то результат будет помещен по данному адресу.
//
Процедура ПроверитьОрганизациюВ1СЭДО(Организация, Результат) Экспорт

	ОрганизацияПодключена = Ложь;
	Если ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
		ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
			ИмяРеквизитаИННОрганизации + "," + ИмяРеквизитаКППОрганизации);
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации[ИмяРеквизитаИННОрганизации]) Тогда
			
			ДанныеОрганизации = Новый ТаблицаЗначений;
			ДанныеОрганизации.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
			ДанныеОрганизации.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
			ДанныеОрганизации.Колонки.Добавить("Состояние", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
			
			НоваяСтрока = ДанныеОрганизации.Добавить();
			НоваяСтрока.ИНН = РеквизитыОрганизации[ИмяРеквизитаИННОрганизации];
			НоваяСтрока.КПП = РеквизитыОрганизации[ИмяРеквизитаКППОрганизации];
			
			Отбор = Новый Структура();
			Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
			ПолучитьРезультатПроверкиВебСервисом(ДанныеОрганизации, Отбор);
			
			ОрганизацияПодключена = ДанныеОрганизации[0].Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат) Тогда
		ПоместитьВоВременноеХранилище(ОрганизацияПодключена, Результат);
	Иначе
		Результат = ОрганизацияПодключена;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентовВСправочнике

// Подписка на событие. Добавление в регистр набора ИНН и КПП для последующей проверки регламентным заданием.
//
// Параметры:
//  КонтрагентОбъект - СправочникОбъект.<Контрагенты> - записываемый контрагент.
//  Отказ			 - Булево - Параметр обработчика подписки на событие.
Процедура СохранитьРезультатПроверкиКонтрагентаПриЗаписи(Объект, Отказ) Экспорт 
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если СправочникКонтрагентовИерархический() И Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияКонтрагентовБЭД.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|ГДЕ
	|	СостоянияКонтрагентовБЭД.Контрагент = &Контрагент
	|	И СостоянияКонтрагентовБЭД.ИНН = &ИНН
	|	И СостоянияКонтрагентовБЭД.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", Объект[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП", Объект[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("Контрагент", Объект.Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = Новый Структура;
	
	ДанныеКонтрагента.Вставить("Контрагент",	Объект.Ссылка);
	ДанныеКонтрагента.Вставить("ИНН", 			Объект[ИмяРеквизитаИННКонтрагента]);
	ДанныеКонтрагента.Вставить("КПП",			Объект[ИмяРеквизитаКППКонтрагента]);
	ДанныеКонтрагента.Вставить("Дата", 			НачалоДня(ТекущаяДатаСеанса()));
	ДанныеКонтрагента.Вставить("Состояние", 	Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагента.Вставить("ОбластьДанныхВспомогательныеДанные", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Только для внутреннего использования
Функция НовыйUUID() Экспорт
	
	Возврат НРег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

Процедура ЗаполнитьТекстПриглашенияКонтрагентаКЭДО(Текст, ДокументСсылка, Контрагент) Экспорт
	
	Шаблон = НСтр("ru = 'С ""%1"" возможен обмен электронными документами'");
	
	ИмяРеализацияТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"РеализацияТоваровУслугВМетаданных");
	
	ИмяПоступлениеТоваровУслуг = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ПоступлениеТоваровУслугВМетаданных");
	
	Если ИмяРеализацияТоваровУслуг <> Неопределено
		И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка." + ИмяРеализацияТоваровУслуг) Тогда
		
		Шаблон = НСтр("ru = 'Обмен электронными документами с ""%1"" можно начать прямо сейчас'");
		
	ИначеЕсли ИмяПоступлениеТоваровУслуг <> Неопределено
		И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка." + ИмяПоступлениеТоваровУслуг) Тогда
		
		Шаблон = НСтр("ru = 'Получать электронные документы от ""%1"", а не вводить руками, можно прямо сейчас'");
		
	КонецЕсли;
	
	НаименованиеКонтрагентаДляСообщенияПользователю = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"НаименованиеКонтрагентаДляСообщенияПользователю");
	
	ИмяКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, НаименованиеКонтрагентаДляСообщенияПользователю);
	
	Текст = СтрШаблон(Шаблон, ИмяКонтрагента);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВыполнитьДействияПоЭД

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив - ссылки на электронные документы, для которых надо определить последовательность действий.
//  МассивОтпечатковСертификатов - Массив - содержит отпечатки доступных сертификатов.
//  Действия - Строка - строковое представление необходимых действий.
//  ДопПараметры - Структура - дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - ссылки на элемент справочника ЭДПрисоединенныеФайлы.
//  СоотвСертификатовИПаролей - Соответствие - ключ - СертификатЭП, значение - пароль к сертификату.
//
// Возвращаемое значение:
//  Структура, Неопределено - результат выполненных действий.
//
Функция ВыполнитьДействияПоЭД(Знач МассивСсылокНаОбъект,
							  Знач МассивОтпечатковСертификатов,
							  Знач Действия,
							  ДопПараметры,
							  Знач ЭД,
							  Знач СоотвСертификатовИПаролей) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если НЕ ЕстьПравоВыполненияОбмена() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
#Область ИнициализацияПараметров
	
	Если ЭД = Тип("Массив") Тогда
		МассивСсылокЭД = ЭД;
	ИначеЕсли Не ЗначениеЗаполнено(ЭД) Тогда
		МассивСсылокЭД = Новый Массив;
	Иначе
		МассивСсылокЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭД);
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ИспользоватьПомощникУстраненияОшибок") Тогда
		ДопПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнятьКриптооперацииНаСервере = ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере();
	НемедленнаяОтправкаЭД            = НемедленнаяОтправкаЭД();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ВыполнятьКриптооперацииНаСервере", ВыполнятьКриптооперацииНаСервере);
	СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД"           , НемедленнаяОтправкаЭД);
	СтруктураВозврата.Вставить("СообщенияПользователю"           , Новый Массив);
	
	СоотвСоглашенийИМассивовЭДКОтправке              = Новый Соответствие;
	СоотвСертификатовИИхСтруктур                     = Новый Соответствие;
	СтруктураКОтправке = Новый Структура("БезПодписи, СПодписью", Новый Массив, Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылокЭД"             , МассивСсылокЭД);
	Запрос.УстановитьПараметр("СостоянияВерсийЭД"          , ИсключенияСостоянияВерсийЭД());
	Запрос.УстановитьПараметр("МассивСсылок"               , МассивСсылокНаОбъект);
	Запрос.УстановитьПараметр("ТипыПервичныхЭД"            , ТипыПервичныхЭД());
	Запрос.УстановитьПараметр("НаправлениеВходящий"        , Перечисления.НаправленияЭД.Входящий);
	Запрос.УстановитьПараметр("НаправлениеИсходящий"       , Перечисления.НаправленияЭД.Исходящий);
	Запрос.УстановитьПараметр("МассивИсключаемыхВидовЭД"   , ИсключаемыеВидыЭД());
	Запрос.УстановитьПараметр("ТекущийПользователь"        , Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь"         , Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОрганизация"          , Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ПользовательНеУказан"       , Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ТекущаяДата"                , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СпособыОбменаСАвторизацией" , СпособыОбменаСАвторизацией());
	Запрос.УстановитьПараметр("ВидыЭДСчетаФактуры"         , ВидыЭДСчетаФактуры());
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
	
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	ВременныеТаблицы = СформироватьОбщиеВременныеТаблицы();
	
#КонецОбласти

	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		
		МассивНовыхЭД = СоздатьФайлыЭлектронныхДокументов(МассивСсылокНаОбъект, ДопПараметры);
		
		ОшибкиПриФормировании = Неопределено;
		Если ДопПараметры.Свойство("ОшибкиПриФормированииДокументов", ОшибкиПриФормировании) Тогда
			
			Если ОшибкиПриФормировании.Количество() = 1
				И ОшибкиПриФормировании[0].Свойство("ОшибкаНастройкиОтправки") Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураВозврата, ОшибкиПриФормировании[0]);
			Иначе
				АдресОшибокФормирования = ПоместитьВоВременноеХранилище(
					ОшибкиПриФормировании, Новый УникальныйИдентификатор);
				СтруктураВозврата.Вставить("ОшибкиПриФормированииДокументов", АдресОшибокФормирования);
			КонецЕсли;
			
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
		СтруктураВозврата.Вставить("КоличествоНовыхЭД", МассивНовыхЭД.Количество());
		
		Если Действия = "Сформировать" 
			Или Действия = "СформироватьПоказать" Тогда
			СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
		КонецЕсли;
		
		// Первичные документы со стороны отправителя пропускают стадию утверждения, 
		// поэтому нужно выполнить недостающие действия при формировании.
		ВыполнитьДействияПоСтатусамПриФормировании(Запрос, ВременныеТаблицы);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		КолУтвержденныхЭД = УтвердитьЭД(Запрос, ВременныеТаблицы, МассивСсылокЭД);
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	Если Не ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать")
		И Не ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
	// исключим их из последующих выборок:
	ВременныеТаблицы = СформироватьОбщиеВременныеТаблицы(Истина);
	
	МассивОтпечатковКлиент = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатковКлиент, МассивОтпечатковСертификатов);
	
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			МассивОтпечатковСертификатов, МассивОтпечатковСертификатовНаСервере, Истина);
	КонецЕсли;
	
	ТаблицаДоступныхСертификатов = ТаблицаДоступныхДляПодписиСертификатов(МассивОтпечатковСертификатов);
	МассивОтпечатков = ТаблицаДоступныхСертификатов.ВыгрузитьКолонку("Отпечаток");
	Запрос.УстановитьПараметр("МассивОтпечатков" , МассивОтпечатков);
	
	ПараметрыПодписанияИОтправки = Новый Структура;
	ПараметрыПодписанияИОтправки.Вставить("Запрос"                              , Запрос);
	ПараметрыПодписанияИОтправки.Вставить("ВременныеТаблицы"                    , ВременныеТаблицы);
	ПараметрыПодписанияИОтправки.Вставить("ДопПараметры"                        , ДопПараметры);
	ПараметрыПодписанияИОтправки.Вставить("СоотвСоглашенийИМассивовЭДКОтправке" , СоотвСоглашенийИМассивовЭДКОтправке);
	ПараметрыПодписанияИОтправки.Вставить("Действия"                            , Действия);
	ПараметрыПодписанияИОтправки.Вставить("ВыполнятьКриптооперацииНаСервере"    , ВыполнятьКриптооперацииНаСервере);
	ПараметрыПодписанияИОтправки.Вставить("НемедленнаяОтправкаЭД"               , НемедленнаяОтправкаЭД);
	ПараметрыПодписанияИОтправки.Вставить("СтруктураКОтправке"                  , СтруктураКОтправке);
	ПараметрыПодписанияИОтправки.Вставить("ЭД"                                  , ЭД);
	ПараметрыПодписанияИОтправки.Вставить("МассивСсылокНаОбъект"                , МассивСсылокНаОбъект);
	ПараметрыПодписанияИОтправки.Вставить("СоотвСертификатовИИхСтруктур"        , СоотвСертификатовИИхСтруктур);
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		
		ВыделятьЭДКОтправкеСАвторизацией = (ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") И НемедленнаяОтправкаЭД);
		
		ПараметрыПодписанияИОтправки.Вставить("ВыделятьЭДКОтправкеСАвторизацией"    , ВыделятьЭДКОтправкеСАвторизацией);
		ПараметрыПодписанияИОтправки.Вставить("МассивОтпечатковСертификатов"        , МассивОтпечатковСертификатов);
		
		Ответ = ПодписатьЭД(ПараметрыПодписанияИОтправки);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураВозврата, Ответ);
	КонецЕсли;
	
	Если ЭлектронноеВзаимодействиеКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		СтМассивовСтруктурСертификатов = Новый Структура("МассивОтпечатковКлиент", МассивОтпечатковКлиент);
		
		ПараметрыПодписанияИОтправки.Вставить("СтМассивовСтруктурСертификатов"        , СтМассивовСтруктурСертификатов);
		ПараметрыПодписанияИОтправки.Вставить("СоотвСертификатовИПаролей"             , СоотвСертификатовИПаролей);
		
		Ответ = ОтправитьЭД(ПараметрыПодписанияИОтправки);
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураВозврата, Ответ);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

#Область ПрекращениеПоддержкиПрямогоОбмена

Процедура ОзнакомленСПрекращениемПоддержкиПрямогоОбмена() Экспорт
	
	КлючНастройки = КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена();
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбменСКонтрагентами", КлючНастройки, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныеДанныеОрганизации

// Возвращает данные организации для заполнения заявки на получение уникального
// идентификатора абонента, добавления сертификата абонента.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, данные которой требуется получить.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - данные об организации:
//    * Индекс - Строка - почтовый индекс организации.
//    * Регион - Строка - регион организации.
//    * КодРегиона - Строка - код региона организации.
//    * Район - Строка - Район.
//    * Город - Строка - Город.
//    * НаселенныйПункт - Строка - населенный пункт расположения организации.
//    * Улица - Строка - Улица.
//    * Дом - Строка - Дом.
//    * Корпус - Строка - Корпус.
//    * Квартира - Строка - Квартира.
//    * Телефон - Строка - телефон организации.
//    * Наименование - Строка - наименование организации.
//    * ИНН - Строка - ИНН организации.
//    * КПП - Строка - КПП организации.
//    * ОГРН - Строка - ОГРН организации.
//    * КодИМНС - Строка - код ИМНС организации.
//    * ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо".
//    * Фамилия - Строка - фамилия руководителя.
//    * Имя - Строка - имя руководителя.
//    * Отчество - Строка - отчество руководителя.
//
Функция РегистрационныеДанныеОрганизации(Знач Организация) Экспорт
	
	ДанныеДляЗаполнения = НовыеРегистрационныеДанныеОрганизации();
	ЭлектронноеВзаимодействиеПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(
		Организация, ДанныеДляЗаполнения);
	
	ДанныеДляВозврата = НовыеРегистрационныеДанныеОрганизации();
	ЗаполнитьЗначенияСвойств(ДанныеДляВозврата, ДанныеДляЗаполнения);
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеДляВозврата);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбменДокументами

Функция СоздатьПрисоединенныйДопФайл(СтруктураПараметров, ЭДВладелец)
	
	ДопЭДСоздан = Ложь;
	ПолноеИмяФайла = СтруктураПараметров.ПолноеИмяДопФайла;
	
	Если ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		
		ВремяСозданияЭД = СтруктураПараметров.СтруктураЭД.ДатаЭД;
		ВладелецЭД = СтруктураПараметров.СтруктураЭД.ВладелецЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", ВладелецЭД);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
		ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);

		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПолноеИмяФайла);
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ДопЭДСоздан = Истина;
			ВспомогательнаяСтруктура = Новый Структура;
			ВспомогательнаяСтруктура.Вставить("Организация", СтруктураПараметров.СтруктураЭД.Организация);
			ВспомогательнаяСтруктура.Вставить("Контрагент", СтруктураПараметров.СтруктураЭД.Контрагент);
			ВспомогательнаяСтруктура.Вставить("ВладелецЭД", ВладелецЭД);
			ВспомогательнаяСтруктура.Вставить("НомерЭД", СтруктураПараметров.СтруктураЭД.НомерЭД);
			ВспомогательнаяСтруктура.Вставить("УникальныйИД", СтруктураПараметров.УникальныйИдентификатор);
			ВспомогательнаяСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
			ВспомогательнаяСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
			ВспомогательнаяСтруктура.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
			ВспомогательнаяСтруктура.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
			ВспомогательнаяСтруктура.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
			
			ДатаФормированияЭДОтправителем = "";
			Если НЕ СтруктураПараметров.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
				ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
			КонецЕсли;
			ВспомогательнаяСтруктура.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
			
			ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, ВспомогательнаяСтруктура);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДопЭДСоздан;
	
КонецФункции

Функция ПреобразоватьДатуВКаноническийВид(ИскомаяДата)
	
	Если ТипЗнч(ИскомаяДата) = Тип("Дата") Тогда
		
		ДатаКаноническогоВида = Формат(Год(ИскомаяДата),"ЧГ=0") + Формат(Месяц(ИскомаяДата), "ЧЦ=2; ЧВН=")
			+ Формат(День(ИскомаяДата), "ЧЦ=2; ЧВН=") + Формат(Час(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=")
			+ Формат(Минута(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ИскомаяДата), "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		ДатаКаноническогоВида = ИскомаяДата;
	КонецЕсли;
	
	Возврат ДатаКаноническогоВида;
	
КонецФункции

// Обновляет статусы электронных документов.
//
// Параметры:
//  МассивДокументов - Массив - массив ссылок на электронные документы, состояние которых надо обновить.
//  ПризнакПодписи - Булево - признак того, что документы подписаны ЭП.
//
Процедура ОбновитьСтатусыЭД(МассивДокументов, ПризнакПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлектронныйДокумент Из МассивДокументов Цикл
			Если ((ПризнакПодписи И ЭлектронныйДокумент.СтатусЭД <> Перечисления.СтатусыЭД.Подписан)
			
			ИЛИ (ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Подписан)
				
			ИЛИ (ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение))
			
			И Не (ЭтоУведомлениеОбУточнении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
			 		И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
			
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленКОтправке, ЭлектронныйДокумент);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПодготовленоПодтверждение, ЭлектронныйДокумент);
			КонецЕсли;
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭлектронныйДокумент, СтруктураПараметров, Ложь);
			ПринудительнаяСменаСостояния = Ложь;
			Если ЭтоИзвещениеОПолучении(ЭлектронныйДокумент.ТипЭлементаВерсииЭД)
				И ЭлектронныйДокумент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				ПринудительнаяСменаСостояния = Истина;
			КонецЕсли;
			ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостояния);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'подготовка к отправке ЭД'"),
																						ТекстОшибки,
																						ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создание дерева структуры XML.
// 
// Возвращаемое значение:
//  ДеревоЗначений - дерево с колонками Имя, Тип, Значение.
//
Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

#КонецОбласти

#Область ОбработкаДокументов

Функция ЭтоОтправкаПодтверждения(ПрисоединенныйФайл)
	
	Возврат ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Процедура ЗаписатьДатуПолучения(ЭД, ДатаИзменения)
	
	ТекСтатусЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СтатусЭД");
	
	Попытка
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ОтправленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.Отправлен) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ДоставленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Доставлен, ЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
		КонецЕсли;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты получения ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьДатуОтправки(ЭД, ДатаИзменения)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "СтатусЭД, ВладелецФайла, ТипЭлементаВерсииЭД");
	ТекСтатусЭД = РеквизитыЭД.СтатусЭД;
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЭД.ВладелецФайла, "СпособОбменаЭД");
	
	Попытка
		
		Если ЭД.Пустая() ИЛИ (ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленоПодтверждение
								И ТекСтатусЭД <> Перечисления.СтатусыЭД.ПодготовленКОтправке) Тогда
			Возврат;
		КонецЕсли;
		НовСтатусЭД = Неопределено;
		Если ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
			НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ОтправленоПодтверждение, ЭД);
		ИначеЕсли ТекСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
			Если НЕ ЭтоИзвещениеОПолучении(РеквизитыЭД.ТипЭлементаВерсииЭД)
				И НЕ ЭтоУведомлениеОбУточнении(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПереданОператору, ЭД);
				
			Иначе
				
				НовСтатусЭД = ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Отправлен, ЭД);
				
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовСтатусЭД) Тогда
			СтруктураПараметров = Новый Структура("СтатусЭД", НовСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ЭД, СтруктураПараметров, Ложь);
			
			Если ЭтоОтветныйТитул(РеквизитыЭД.ТипЭлементаВерсииЭД) Тогда
				ОбновитьВерсиюЭД(ЭД);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись даты отправки ЭД'"),
																					ТекстОшибки,
																					ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Создает документ ПакетЭД и заполняет его реквизиты.
//
// Параметры:
//  РеквизитыДокумента - Структура - значения реквизитов документа.
//  МассивЭД - Массив - содержит ссылки на справочник ЭДПрисоединенныеФайлы.
//
// Возвращаемое значение:
//  ДокументСсылка.ПакетЭД - ссылка на созданный документ.
//
Функция СоздатьПакетЭД(РеквизитыДокумента, МассивЭД, ТекстСообщения = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПЭД = Документы.ПакетЭД.СоздатьДокумент();
	ПЭД.Дата = ТекущаяДатаСеанса();
	Если РеквизитыДокумента.Свойство("Отправитель") Тогда
		ПЭД.Отправитель = РеквизитыДокумента.Отправитель;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("Получатель") Тогда
		ПЭД.Получатель = РеквизитыДокумента.Получатель;
	КонецЕсли;
	ПЭД.Контрагент = РеквизитыДокумента.Контрагент;
	ПЭД.Организация = РеквизитыДокумента.Организация;
	
	ПЭД.СтатусПакета = Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ПЭД.Направление = Перечисления.НаправленияЭД.Исходящий;
	Если РеквизитыДокумента.Свойство("ВерсияФорматаПакета") Тогда
		ПЭД.ВерсияФорматаПакета = РеквизитыДокумента.ВерсияФорматаПакета;
	КонецЕсли;
	
	Если РеквизитыДокумента.Свойство("АдресОтправителя") Тогда
		ПЭД.АдресРесурсаОрганизации = РеквизитыДокумента.АдресОтправителя;
	КонецЕсли;
	Если РеквизитыДокумента.Свойство("АдресПолучателя") Тогда
		ПЭД.АдресРесурсаКонтрагента = РеквизитыДокумента.АдресПолучателя;
	КонецЕсли;
	
	ПЭД.СпособОбменаЭД = РеквизитыДокумента.СпособОбменаЭД;
	
	ВладельцыЭД = Неопределено;
	Если Не РеквизитыДокумента.Свойство("ВладельцыЭД", ВладельцыЭД) Тогда
		ВладельцыЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЭД, "ВладелецФайла");
	КонецЕсли;
	
	Для Каждого ЭД Из МассивЭД Цикл
		НоваяСтрока = ПЭД.ЭлектронныеДокументы.Добавить();
		НоваяСтрока.ЭлектронныйДокумент = ЭД;
		НоваяСтрока.ОбъектВладелец = ВладельцыЭД.Получить(ЭД);
	КонецЦикла;
	
	Попытка
		ПЭД.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Операция = НСтр("ru = 'формирование пакета ЭД'");
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
								Операция, ПодробноеПредставлениеОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
		
	Возврат ПЭД.Ссылка;
	
КонецФункции

Процедура ОбработатьУдалениеЭлектронногоДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЭтоСлужебныйДокумент(СсылкаНаОбъект) Тогда
		ЗапросДокументовИБ = Новый Запрос;
		ЗапросДокументовИБ.УстановитьПараметр("ЭлектронныйДокумент", СсылкаНаОбъект);
		ЗапросДокументовИБ.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент";
		
		ВыборкаДокументов = ЗапросДокументовИБ.Выполнить().Выбрать();
		Пока ВыборкаДокументов.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВыборкаДокументов.СсылкаНаОбъект);
				ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() Тогда
					НоваяЗаписьНабора = НаборЗаписей.Получить(0);
					НоваяЗаписьНабора.СостояниеВерсииЭД   = ПолучитьПервоеСостояниеВерсииЭДДляВладельца(ВыборкаДокументов.СсылкаНаОбъект);
					НоваяЗаписьНабора.ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
					НаборЗаписей.Записать();
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеИУдалитьСостояниеДокумента(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СсылкаНаОбъект = СсылкаНаОбъект;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстПредупрежденияДляВходящегоДокумента(СведенияОФормате)

	Результат = СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента;
	
	// Если указаны параметры, которые нужно подставить в текст предупреждения, формируем форматированную строку.
	Если ЗначениеЗаполнено(СведенияОФормате.ПараметрыПредупрежденияДляВходящегоДокумента) Тогда
		ЭлементыШаблона = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			СведенияОФормате.ТекстПредупрежденияДляВходящегоДокумента, "%");
		НаборыПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			СведенияОФормате.ПараметрыПредупрежденияДляВходящегоДокумента, ";", Истина, Истина);
			
		НомерПараметра = 0;	
		ЭлементыФорматированнойСтроки = Новый Массив;
		Для Каждого ЭлементШаблона Из ЭлементыШаблона Цикл
			ЭлементыФорматированнойСтроки.Добавить(ЭлементШаблона);
			
			Если НаборыПараметров.Количество() > НомерПараметра Тогда
				ЭлементыПараметра = СтрРазделить(НаборыПараметров[НомерПараметра], ",", Ложь);
				ПредставлениеСсылки = СокрЛП(ЭлементыПараметра[0]);
				
				АдресСсылки = Неопределено;
				Если ЭлементыПараметра.Количество() > 1 Тогда
					АдресСсылки = ЭлементыПараметра[1];
				КонецЕсли;
				
				Если ЗначениеЗаполнено(АдресСсылки) Тогда
					ЭлементСсылка = Новый ФорматированнаяСтрока(ПредставлениеСсылки,,,, АдресСсылки);
				Иначе
					ЭлементСсылка = ПредставлениеСсылки;
				КонецЕсли;
				ЭлементыФорматированнойСтроки.Добавить(ЭлементСсылка);
				
				НомерПараметра = НомерПараметра + 1;
			КонецЕсли;
		КонецЦикла;
			
		Результат = Новый ФорматированнаяСтрока(ЭлементыФорматированнойСтроки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

Функция ДокументОтправленНаПодпись(ЭД)

	РеквизитыЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭД, 
		"ВладелецФайла, ТипЭлементаВерсииЭД, СтатусЭД");
	РеквизитыВладельцаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла, "СостояниеЭДО, ВидЭД");
	
	ВладелецЭД						= РеквизитыЭД.ВладелецФайла;
	ЭтоИзвещение 					= ЭтоИзвещениеОПолучении(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоУведомлениеОбУточнении		= ЭтоУведомлениеОбУточнении(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоПредложениеОбАннулировании	= РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА;
	ЭтоСлужебныйДокумент 			= ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоИсходящийЭД					= ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий");
	ЭтоВходящийЭД					= ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий");
	ЭтоПервичныйЭДБезТитула			= РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
										И ЭтоВидЭДБезТитула(РеквизитыВладельцаЭД.ВидЭД);
	
	Результат = ЭтоИсходящийЭД И Не ЭтоСлужебныйДокумент И РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи
					ИЛИ ЭтоИсходящийЭД И (ЭтоИзвещение ИЛИ ЭтоУведомлениеОбУточнении ИЛИ ЭтоПредложениеОбАннулировании) 
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						И НЕ ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(РеквизитыЭД.ВладелецФайла)
					ИЛИ ЭтоВходящийЭД 
						И (ЭтоОтветныйТитул(РеквизитыЭД.ТипЭлементаВерсииЭД) ИЛИ ЭтоПервичныйЭДБезТитула)
						И РеквизитыВладельцаЭД.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ ЭтоВходящийЭД И (ЭтоИзвещение ИЛИ ЭтоУведомлениеОбУточнении ИЛИ ЭтоПредложениеОбАннулировании) 
						И РеквизитыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден 
						И НЕ ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(РеквизитыЭД.ВладелецФайла);
	
	Возврат Результат;

КонецФункции

Функция ПараметрыМаршрутаПодписанияДокумента(ЭД, РеквизитыЭД = Неопределено, НастройкиОбмена = Неопределено) Экспорт
	
	Результат = Новый Структура("МаршрутПодписания, УсловиеПодписания, СписокПодписантов");
	
	Если ЭД <> Неопределено Тогда
		РеквизитыЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭД, 
			"ВладелецФайла, ТипЭлементаВерсииЭД, НаправлениеЭД");
	
		НастройкиОбмена = НастройкиОбменаЭД(ЭД);
	КонецЕсли;
	
	Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		// Если это интеркампани, нужно подготовить маршрут вручную, так как он будет нестандартный и фиксированный.
		НастройкиОбмена.Вставить("МаршрутПодписания",     Справочники.МаршрутыПодписания.УказыватьПриСоздании);
		НастройкиОбмена.Вставить("ВерсияФорматаПакета",     Неопределено);
		
		ИспользуемыеСертификаты = Новый ТаблицаЗначений;
		ИспользуемыеСертификаты.Колонки.Добавить("Подписант", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
		ИспользуемыеСертификаты.Колонки.Добавить("Сертификат", 
			Новый ОписаниеТипов("СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования"));
		ИспользуемыеСертификаты.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
		
		Если ЗначениеЗаполнено(НастройкиОбмена.Организация) Тогда
			НоваяСтрока = ИспользуемыеСертификаты.Добавить();
			НоваяСтрока.Организация = НастройкиОбмена.Организация;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиОбмена.Контрагент) Тогда
			НоваяСтрока = ИспользуемыеСертификаты.Добавить();
			НоваяСтрока.Организация = НастройкиОбмена.Контрагент;
		КонецЕсли;
	Иначе
		ИспользуемыеСертификаты = Новый Массив;
	КонецЕсли;
	
	НастройкиОбмена.Вставить("ИспользуемыеСертификаты",     ИспользуемыеСертификаты);
	
	ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД);
	ЭтоИсходящийЭД       = ТипЗнч(РеквизитыЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий");
	
	Если НастройкиОбмена <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, НастройкиОбмена);
		
		Если ЭтоИсходящийЭД Тогда 
			// Если маршрут указывается при создании, его нужно брать из документа-основания.
			РеквизитыВладельцаФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЭД.ВладелецФайла,
				"МаршрутПодписания, СписокПодписантов");
			Если ЗначениеЗаполнено(РеквизитыВладельцаФайла.МаршрутПодписания) Тогда
				Результат.МаршрутПодписания = РеквизитыВладельцаФайла.МаршрутПодписания;
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			// Для интеркампани список подписантов уже должен быть заполнен
			Результат.УсловиеПодписания = Перечисления.ТребованияКПодписаниюЭД.И;
			Результат.СписокПодписантов = НастройкиОбмена.ИспользуемыеСертификаты;
		
		ИначеЕсли НЕ ЭтоСлужебныйДокумент И ЭтоИсходящийЭД
			И Результат.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
			
			Результат.МаршрутПодписания = РеквизитыВладельцаФайла.МаршрутПодписания;
			// Если в документе выбрали вариант ручного заполнения списка подписантов, переопределим маршрут и условие.
			Если РеквизитыВладельцаФайла.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
				СписокПодписантов = Новый ТаблицаЗначений;
				СписокПодписантов.Колонки.Добавить("Подписант");
				СписокПодписантов.Колонки.Добавить("Сертификат");
				ВыборкаПодписантов = РеквизитыВладельцаФайла.СписокПодписантов.Выбрать();
				Пока ВыборкаПодписантов.Следующий() Цикл
					НоваяСтрока = СписокПодписантов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПодписантов);
				КонецЦикла;
				
				Результат.СписокПодписантов = СписокПодписантов;
				Результат.УсловиеПодписания = Перечисления.ТребованияКПодписаниюЭД.И;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоСлужебныйДокумент ИЛИ Не ЭтоИсходящийЭД Тогда
		Результат.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область НоваяАрхитектураЭДО

// Функция возвращает присоединенный файл с данными электронного документа
//
// Параметры:
//  ВладелецФайла		 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - документ, для которого требуется найти
//  присоединенный файл
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип присоединенного файла, если не указан - то найдется основной присоединенный файл
//  СообщатьОбОшибке	 - Булево - признак необходимости сообщить пользователю, если файл не будет найден.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы, Неопределено - ссылка на присоединенный файл либо неопределено, если файл не найден.
//
Функция ПрисоединенныйФайл(ВладелецФайла, ТипЭлементаВерсииЭД = Неопределено,СообщатьОбОшибке = Ложь) Экспорт
	
	Перем ПрисоединенныйФайл;
	
	Если ТипЭлементаВерсииЭД = Неопределено Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ВладелецФайла",ВладелецФайла);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД",ТипЭлементаВерсииЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		ПрисоединенныйФайл = Выборка.Ссылка;
	ИначеЕсли СообщатьОбОшибке Тогда
		Операция = НСтр("ru = 'Получение присоединенного файла'");
		ТекстОшибки = НСтр("ru = 'Не обнаружен присоединенный файл документа %1'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВладелецФайла);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		Операция, ТекстОшибки, ТекстОшибки, "ОбменСКонтрагентами", ВладелецФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом извещения о получении
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоИзвещениеОПолучении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИОП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
	
КонецФункции

// Проверяет является ли переданный тип ЭД типом уведомления об уточнении.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоУведомлениеОбУточнении(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ;
			
КонецФункции

// Проверяет является ли переданный тип ЭД типом подтверждения получения.
//
// Параметры:
//  ТипЭлементаВерсииЭД	 - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип ЭД для проверки.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭтоПодтверждение(ТипЭлементаВерсииЭД) Экспорт 
	
	Возврат ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
			ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
			
КонецФункции

// Проверяет возможность удаления электронного документа по его состоянию
//
// Параметры:
//  СостояниеЭДО - ПеречислениеСсылка.СостоянияВерсийЭД - состояние электронного документа.
// 
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ВозможноУдалениеЭД(СостояниеЭДО) Экспорт 

	Возврат СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаУтверждении
			ИЛИ СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи;
КонецФункции

// Ищет среди присоединенных файлов электронного документа отправленное уведомление об уточнении.
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - основной присоединенный файл среди связанных с которым будет происходить поиск уведомления.
// 
// Возвращаемое значение:
//  Булево - Возвращает ИСТИНА, если удалось найти уведомление об уточнении.
//
Функция ЕстьОтправленноеУведомление(СсылкаНаФайлЭД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""1"" КАК Поле1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	(ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ))
	|			И ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|			И ЭДПрисоединенныеФайлы.СтатусЭД = &СтатусЭД";
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", СсылкаНаФайлЭД);
	Запрос.УстановитьПараметр("СтатусЭД", Перечисления.СтатусыЭД.Отправлен);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ЕстьУведомление = Истина;
	Если Результат.Пустой() Тогда
		ЕстьУведомление = Ложь;
	КонецЕсли;
	
	Возврат ЕстьУведомление;
	
КонецФункции

// Проверяет наличие подписи для второго титула электронного документа
//
// Параметры:
//  СсылкаНаФайлЭД	 - СправочникСсылка.ЭДПрисоединенныеФайлы - первый титул документа.
// 
// Возвращаемое значение:
//  Булево - Истина, если для второго титула установлена подпись.
//
Функция ВторойТитулПодписан(СсылкаНаФайлЭД) Экспорт 
	
	Результат = Ложь;
	ФайлВторогоТитула = ВторойТитулДокумента(СсылкаНаФайлЭД);
	Если ФайлВторогоТитула = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлВторогоТитула, "СтатусЭД");
	Если Статус = Перечисления.СтатусыЭД.Подписан
		Или Статус = Перечисления.СтатусыЭД.ПодготовленКОтправке
		Или Статус = Перечисления.СтатусыЭД.Отправлен
		Или Статус = Перечисления.СтатусыЭД.ПереданОператору
		Или Статус = Перечисления.СтатусыЭД.Доставлен Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Удаляет запись регистра СостоянияЭД для пары документ учета и электронный документ.
//
// Параметры:
//  СсылкаНаОбъект		 - ДокументСсылка, СправочникСсылка.СоглашенияОбИспользованииЭД - объект-владелец записи в регистре
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ.
//
Процедура УдалитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект,ЭлектронныйДокумент) Экспорт 
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект,Истина);
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		МассивКУдалению = Новый Массив;
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ЭлектронныйДокумент = ЭлектронныйДокумент Тогда
				МассивКУдалению.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Запись Из МассивКУдалению Цикл
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует список способов отражения в учете входящего электронного документа определенного вида.
//
// Параметры:
//  ВидЭД							 - ПеречислениеСсылка.ВидыЭД - 
//  ДобавлятьПредопределенныеСпособы	 - Булево - признак добавления способов "Вручную" и "Автоматически"
// (последний - если в переопределяемом модуле не указаны способы отражения для вида ЭД)
//  Префикс							 - Строка - текст, который будет добавлен к представлению способа обработки.
// 
// Возвращаемое значение:
//  СписокЗначений - список способов обработки с указанием представления и отметки в списке используемого по-умолчанию способа.
//
Функция СписокОперацийВидаЭД(Знач ВидЭД, ДобавлятьПредопределенныеСпособы = Ложь, Префикс = "") Экспорт 
	
	СписокОпераций = Новый СписокЗначений;
	
	Если ВидЭД = Перечисления.ВидыЭД.УПД Тогда
		ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.УКД Тогда
		ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	КонецЕсли;
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		
		Основания = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.Типы();
		Для Каждого ТекущееОснование Из Основания Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТекущееОснование);
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокОпераций.Добавить(МетаданныеОснования.Имя,МетаданныеОснования.Синоним);
		КонецЦикла;
		
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.ЗапросКоммерческихПредложений
			Или ВидЭД = Перечисления.ВидыЭД.КоммерческоеПредложение
			И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
			МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
			МодульПодсистемы.ОпределитьСписокОперацийВходящихЭлектронныхДокументов(ВидЭД, СписокОпераций);
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.СписокОперацийВидаЭД(ВидЭД, СписокОпераций);
		
		Если СписокОпераций.Количество() = 0 Тогда
			ОбменСКонтрагентамиПереопределяемый.ПриОпределенииСпособовОбработкиПрикладногоВидаЭлектронногоДокумента(
				ВидЭД, СписокОпераций);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОпераций Цикл
		ЭлементСписка.Представление = Префикс + " " + ЭлементСписка.Представление;
	КонецЦикла;
	
	Если ДобавлятьПредопределенныеСпособы Тогда
		Если СписокОпераций.Количество() = 0 Тогда
			СписокОпераций.Добавить("Автоматически", НСтр("ru = 'Автоматически'"),Истина);
		КонецЕсли;
		
		СписокОпераций.Добавить("Вручную", НСтр("ru = 'Вручную в форме электронного документа'"));
	КонецЕсли;
	
	Возврат СписокОпераций;
	
КонецФункции

// Требуется для получения имени документа для открытия форм по способу обработки входящего документа.
//
// Параметры:
//  СпособОбработки	 - Строка - один из способов обработки входящего электронного документа.
// 
// Возвращаемое значение:
//  Строка - имя объекта метаданных (документа), соответствующего способу обработки.
//
Функция ИмяДокументаПоСпособуОбработки(СпособОбработки) Экспорт 
		
	ИмяДокумента = СпособОбработки; 
	
	ОбменСКонтрагентамиПереопределяемый.ИмяДокументаПоСпособуОбработки(СпособОбработки,ИмяДокумента);
		
	Возврат ИмяДокумента;
	
КонецФункции

Процедура СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, ВыводитьНеактуальные = Ложь) Экспорт 
	
	Если СоответствиеВладельцевИЭД.Количество() > 0 Тогда
		
		ОбъектСсылка = Неопределено;
		
		Для Каждого Элемент Из СоответствиеВладельцевИЭД Цикл
			ОбъектСсылка = Элемент.Ключ;
			АктуальныйЭД = "";
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
					ПараметрыОпределенияНастройки = Новый Структура("ВыводитьСообщения,ФлагДействующиеСоглашения", Ложь, Ложь);
					НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(Элемент.Значение, ПараметрыОпределенияНастройки);
				КонецЕсли;
				АктуальныйЭД = Элемент.Значение;
				КорневойЭлемент = Неопределено;
				ПредварительноеЗаполнениеДерева(АктуальныйЭД, ДеревоОбъект, Истина, НастройкиОбмена, КорневойЭлемент);
				Если Не КорневойЭлемент = Неопределено Тогда
					ВывестиПодчиненныеДокументы(АктуальныйЭД, КорневойЭлемент, НастройкиОбмена);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(НастройкиОбмена) Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВидЭД",               НастройкиОбмена.ВидЭД);
				СтруктураПараметров.Вставить("НаправлениеЭД",       НастройкиОбмена.НаправлениеЭД);
				СтруктураПараметров.Вставить("ВерсияРегламентаЭДО", НастройкиОбмена.ВерсияРегламентаЭДО);
				СтруктураПараметров.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
				СтруктураПараметров.Вставить("СостояниеЭДО",        Перечисления.СостоянияВерсийЭД.НеСформирован);
				
				СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
				Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура
					Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УПД
					Или НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.УКД
					ИЛИ НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
					
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
				КонецЕсли;
				
				Назначение = ОбменСКонтрагентамиВнутренний.ПолучитьВариантЗаполненияУПД(НастройкиОбмена.ИспользоватьУПД, НастройкиОбмена.ВидЭД);
				ФорматЭлектронногоДокумента = ОбменСКонтрагентамиВнутренний.ФорматЭлектронногоДокументаПоИмениИИдентификатору(
					"УПД", НастройкиОбмена.ВерсияФормата, Назначение);
			
				ЭтоУПД_ДОП_2019 = ОбменСКонтрагентамиВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", ОбменСКонтрагентамиВнутренний.ДОП());
				ЭтоУПД_СЧФДОП_2019 = ОбменСКонтрагентамиВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", "СЧФ+ДОП");
				ЭтоУПД_СЧФ_2019 = ОбменСКонтрагентамиВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "УПД", "2019", ОбменСКонтрагентамиВнутренний.СЧФ());
				
				Если (НастройкиОбмена.ВерсияФормата = "ON_SCHFDOPPR_1_995_01_05_01" И НастройкиОбмена.ИспользоватьУПД) ИЛИ ЭтоУПД_СЧФДОП_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
				ИначеЕсли (НастройкиОбмена.ВерсияФормата = "ON_SCHFDOPPR_1_995_01_05_01"
						И НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура) ИЛИ ЭтоУПД_СЧФ_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ON_SCHFDOPPR_1_995_01_05_01" ИЛИ ЭтоУПД_ДОП_2019 Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
				ИначеЕсли (НастройкиОбмена.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01" И НастройкиОбмена.ИспользоватьУКД) Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
				ИначеЕсли (НастройкиОбмена.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01"
						И НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетФактура) Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
				ИначеЕсли НастройкиОбмена.ВерсияФормата = "ON_KORSCHFDOPPR_1_996_01_05_01" Тогда
					СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
				КонецЕсли;
				
				ПредварительноеЗаполнениеДерева(СтруктураПараметров, ДеревоОбъект, Ложь, НастройкиОбмена);
				
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьНеактуальные Тогда
			ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена);
		КонецЕсли;
		
		ОбработатьДерево(ДеревоОбъект);
		
		ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект, НастройкиОбмена);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПредварительноеЗаполнениеДерева(ЭД, ДеревоОбъект, ЭтоАктуальныйЭД, НастройкиОбмена,
	КорневойЭлемент = Неопределено)
	
	Если ЗначениеЗаполнено(НастройкиОбмена) Тогда
		ОбменЧерезОператора = НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			ИЛИ НастройкиОбмена.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
		
		ВерсияФорматаПакета = НастройкиОбмена.ВерсияФорматаПакета;
		
		СписокРеквизитов = "";
		Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий")
			Или ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			СписокРеквизитов = "ВерсияРегламентаЭДО, ВидЭД, СостояниеЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокРеквизитов) Тогда
			СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, СписокРеквизитов);
		Иначе
			
			СвойстваЭД = ЭД;
			СвойстваЭД.Вставить("ТребуетсяИзвещение", НастройкиОбмена.ТребуетсяИзвещение);
			СвойстваЭД.Вставить("ТребуетсяПодтверждение", НастройкиОбмена.ТребуетсяПодтверждение);
		КонецЕсли;
		
		КорневойЭлемент = Неопределено;
		
		Если ОбменЧерезОператора
			И (ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = ЭД.ТипЭлементаВерсииЭД;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
				ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД;
			КонецЕсли;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
					СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
						СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
						СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
						НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
						НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
						
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
						
						Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
							ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
							ИПСтрока.ТипЭД            = ТипВстречногоЭД;
							ИПСтрока.ВидЭД            = ЭД.ВидЭД;
							ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
							
							Если ОбменЧерезОператора Тогда
								ПДОИПСтрока               = ИПСтрока.Строки.Добавить();
								ПДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД;
								ПДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
								ПДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
								
								ИППДОИПСтрока               = ПДОИПСтрока.Строки.Добавить();
								ИППДОИПСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД;
								ИППДОИПСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
								ИППДОИПСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
							КонецЕсли;
						
						КонецЕсли;
						
				КонецЕсли;
				
			Иначе
				
				Если ОбменЧерезОператора Тогда
					СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
					СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
					СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
				Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
					ИЛИ ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						ИПСтрока                  = СтрокаЭСФ.Строки.Добавить();
						ИПСтрока.ТипЭД            = ТипВстречногоЭД;
						ИПСтрока.ВидЭД            = ЭД.ВидЭД;
						ИПСтрока.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ОбменЧерезОператора
			И (ЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или ЭД.ВидЭД = Перечисления.ВидыЭД.УПД
				Или ЭД.ВидЭД = Перечисления.ВидыЭД.УКД
				ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура) Тогда
		
			СтрокаЭСФ                = ДеревоОбъект.Строки.Добавить();
			СтрокаЭСФ.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ;
			СтрокаЭСФ.ВидЭД          = ЭД.ВидЭД;
			СтрокаЭСФ.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаЭСФ.СтрокаДоступна = Истина;
			СтрокаЭСФ.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаЭСФ;
			
			Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				СтрокаПДО                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ;
				СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					СтрокаИП                  = СтрокаЭСФ.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					НоваяСтрока               = СтрокаПДО.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
					СтрокаПДОИП               = СтрокаИП.Строки.Добавить();
					СтрокаПДОИП.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ;
					СтрокаПДОИП.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
					СтрокаПДОИП.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
					НоваяСтрока               = СтрокаПДОИП.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПДП                 = СтрокаЭСФ.Строки.Добавить();
				СтрокаПДП.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ;
				СтрокаПДП.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
				СтрокаПДП.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
				
				НоваяСтрока               = СтрокаПДП.Строки.Добавить();
				НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ;
				НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
				НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
				
				Если СвойстваЭД.ТребуетсяИзвещение Тогда
					
					НоваяСтрока               = СтрокаЭСФ.Строки.Добавить();
					НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ;
					НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель;
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик;
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
				
				ТипВстречногоЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			КонецЕсли;
			
			ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП Тогда
				
				ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП;
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = ТипЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20
							И ОбменЧерезОператора Тогда
							
							НоваяСтрока               = СтрокаПокупатель.Строки.Добавить();
							НоваяСтрока.ТипЭД         = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
							НоваяСтрока.ВидЭД         = Перечисления.ВидыЭД.Подтверждение;
							НоваяСтрока.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
							
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
					СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					
					Если СвойстваЭД.ТребуетсяПодтверждение Тогда
						
						СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
						СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
						СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
						СтрокаПокупатель.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
						
						// Изменяется набор служебных документов в зависимости от использования версии регламента.
						Если ЗначениеЗаполнено(ЭД.ВерсияРегламентаЭДО) 
							И ЭД.ВерсияРегламентаЭДО <> Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
							СтрокаИП                  = СтрокаПокупатель.Строки.Добавить();
							СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
							СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
							СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				СтрокаПокупатель          = СтрокаПродавец.Строки.Добавить();
				СтрокаПокупатель.ТипЭД    = ТипВстречногоЭД;
				СтрокаПокупатель.ВидЭД    = ЭД.ВидЭД;
				СтрокаПокупатель.НаправлениеЭД = ?(НастройкиОбмена.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий,
					Перечисления.НаправленияЭД.Исходящий, Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
		ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
			ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда

			СтрокаГлавная                = ДеревоОбъект.Строки.Добавить();
			СтрокаГлавная.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаГлавная.ВидЭД          = ЭД.ВидЭД;
			СтрокаГлавная.НаправлениеЭД  = НастройкиОбмена.НаправлениеЭД;
			СтрокаГлавная.СтрокаДоступна = Истина;
			СтрокаГлавная.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаГлавная;
			
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
				КонецЕсли;
					
			ИначеЕсли ЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
				
				Если ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
					
					Если ОбменЧерезОператора Тогда
						// Подтверждение доставки
						СтрокаДерева                 = СтрокаГлавная.Строки.Добавить();
						СтрокаДерева.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаДерева.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаДерева.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					// Извещение о получении
					СтрокаДерева                  = СтрокаГлавная.Строки.Добавить();
					СтрокаДерева.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
					СтрокаДерева.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
					СтрокаДерева.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НаправлениеЭД = НастройкиОбмена.НаправлениеЭД;
			Если ЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				НаправлениеЭД = ?(ТипЗнч(ЭД) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий"),
					Перечисления.НаправленияЭД.Исходящий,
					Перечисления.НаправленияЭД.Входящий);
			КонецЕсли;
			
			СтрокаПродавец                = ДеревоОбъект.Строки.Добавить();
			СтрокаПродавец.ТипЭД          = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			СтрокаПродавец.ВидЭД          = ЭД.ВидЭД;
			СтрокаПродавец.НаправлениеЭД  = НаправлениеЭД;
			СтрокаПродавец.СтрокаДоступна = Истина;
			СтрокаПродавец.АктуальныйЭД   = ЭтоАктуальныйЭД;
			КорневойЭлемент = СтрокаПродавец;
			
			Если ОбменЧерезОператора
				Или ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
				
				Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
					
					Если СвойстваЭД.ТребуетсяИзвещение Тогда
						СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
						СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
						СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Исходящий;
					КонецЕсли;
					
				Иначе
					Если ОбменЧерезОператора Тогда
						СтрокаПДО                 = СтрокаПродавец.Строки.Добавить();
						СтрокаПДО.ТипЭД           = Перечисления.ТипыЭлементовВерсииЭД.ПДП;
						СтрокаПДО.ВидЭД           = Перечисления.ВидыЭД.Подтверждение;
						СтрокаПДО.НаправлениеЭД   = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
					Если СвойстваЭД.ТребуетсяИзвещение Тогда
						СтрокаИП                  = СтрокаПродавец.Строки.Добавить();
						СтрокаИП.ТипЭД            = Перечисления.ТипыЭлементовВерсииЭД.ИОП;
						СтрокаИП.ВидЭД            = Перечисления.ВидыЭД.ИзвещениеОПолучении;
						СтрокаИП.НаправлениеЭД    = Перечисления.НаправленияЭД.Входящий;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент, ДеревоРодитель, НастройкиОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.Ссылка.СтатусЭД КАК СтатусЭД,
	|	ПрисоединенныеФайлы.Ссылка.ДатаИзмененияСтатусаЭД КАК ДатаИзмененияСтатусаЭД,
	|	ПрисоединенныеФайлы.Ссылка.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ПрисоединенныеФайлы.Ссылка.НаправлениеЭД КАК НаправлениеЭД,
	|	ПрисоединенныеФайлы.Ссылка.ВладелецФайла КАК ВладелецФайла,
	|	ПрисоединенныеФайлы.Ссылка.Представление КАК Представление,
	|	ПрисоединенныеФайлы.Ссылка.НаименованиеФайла КАК ИмяФайла,
	|	ПрисоединенныеФайлы.Ссылка.Расширение КАК Расширение,
	|	ПрисоединенныеФайлы.Ссылка.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ПрисоединенныеФайлы.Ссылка.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА ПодчиненныеПрисоединенныеФайлы.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НаличиеПодчиненныхДокументов,
	|	ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД КАК ТипЭД,
	|	ВЫБОР
	|		КОГДА ПрисоединенныеФайлы.Ссылка.ТипЭлементаВерсииЭД В (&СписокТиповЭД)
	|			ТОГДА ВЫБОР
	|					КОГДА ПрисоединенныеФайлы.Ссылка.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|						ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем = ДАТАВРЕМЯ(1, 1, 1)
	|								ТОГДА ПрисоединенныеФайлы.Ссылка.ДатаСоздания
	|							ИНАЧЕ ПрисоединенныеФайлы.Ссылка.ДатаФормированияЭДОтправителем
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Версия,
	|	ПрисоединенныеФайлы.Ссылка.ИндексКартинки КАК ИндексКартинки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ВладелецФайла = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрисоединенныеФайлы.Ссылка
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|	ГДЕ
	|		ПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ОбъектВладелец
	|		И НЕ ПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения)) КАК ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПодчиненныеПрисоединенныеФайлы
	|		ПО (НЕ ПодчиненныеПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТиповЭДИсключения))
	|			И ПрисоединенныеФайлы.Ссылка = ПодчиненныеПрисоединенныеФайлы.ЭлектронныйДокументВладелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатусаЭД";
		
	Запрос.УстановитьПараметр("СписокТиповЭД", МассивТиповЭДКорневыхЭлементовДерева());
	Запрос.УстановитьПараметр("ТиповЭДИсключения", МассивТиповЭДНеОтображаемыхВДереве());
	Запрос.УстановитьПараметр("ОбъектВладелец", ТекущийДокумент);
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);

	ДатаАктуальногоЭД = Неопределено;
	
	ПараметрыПоискаСтроки = Новый Структура("ТипЭД, НаправлениеЭД");
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЭтоСлужебныйДокумент(Выборка.Ссылка) Тогда
			ЗаполнитьСтрокуДерева(ДеревоРодитель, Выборка, ДатаАктуальногоЭД, НастройкиОбмена);
			Продолжить;
		КонецЕсли;
		
		ТипЭД = ?(Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДО,
			Перечисления.ТипыЭлементовВерсииЭД.ПДП,
			Выборка.ТипЭД);
			
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
			МассивСтрокДерева = Неопределено;
		Иначе
			ПараметрыПоискаСтроки.ТипЭД = ТипЭД;
			ПараметрыПоискаСтроки.НаправлениеЭД = Выборка.НаправлениеЭД;
			МассивСтрокДерева = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоискаСтроки, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(МассивСтрокДерева) Тогда
			
			Если ЗначениеЗаполнено(Выборка.ЭлектронныйДокументВладелец) Тогда
				ПараметрыПоискаВладельца = Новый Структура("Ссылка",Выборка.ЭлектронныйДокументВладелец);
				МассивСтрокДереваВладельца = ДеревоРодитель.Строки.НайтиСтроки(ПараметрыПоискаВладельца, Ложь);
				Если МассивСтрокДереваВладельца.Количество() > 0 Тогда
					СтрокаДерева = МассивСтрокДереваВладельца[0].Строки.Добавить();
				Иначе
					СтрокаДерева = ДеревоРодитель.Строки.Добавить();
				КонецЕсли;
			Иначе
				СтрокаДерева = ДеревоРодитель.Строки.Добавить();
			КонецЕсли;
			
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД, НастройкиОбмена);
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПредложениеОбАннулировании;
			ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.УОУ Тогда
				СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД, НастройкиОбмена);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Процедура добавляет в дерево неактуальные первичные ЭД
// с полной структурой подчиненности.
Процедура ВывестиНеАктуальныеЭД(ДеревоОбъект, АктуальныйЭД, ОбъектСсылка, НастройкиОбмена)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СсылкаНаОбъект,
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка = &АктуальныйЭД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|ГДЕ
	|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &ОбъектСсылка
	|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка = &АктуальныйЭД";

	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("АктуальныйЭД", АктуальныйЭД);

	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		КорневойЭлемент = Неопределено;
		ПредварительноеЗаполнениеДерева(Выборка.СсылкаНаОбъект, ДеревоОбъект, Ложь, НастройкиОбмена, КорневойЭлемент);
		Если ЗначениеЗаполнено(КорневойЭлемент) Тогда
			ВывестиПодчиненныеДокументы(Выборка.СсылкаНаОбъект, КорневойЭлемент, НастройкиОбмена);
		КонецЕсли;
	КонецЦикла;

	ДеревоОбъект.Строки.Сортировать("Версия");
	
КонецПроцедуры

Процедура ОбработатьДерево(ДеревоОбъект)
	
	Отбор = Новый Структура("АктуальныйЭД", Истина);
	
	АктуальныеСтроки = ДеревоОбъект.Строки.НайтиСтроки(Отбор, Истина);
	
	ЭдНеСформирован = (АктуальныеСтроки.Количество()=0);
	
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		
		Если Строка.АктуальныйЭД Или ЭдНеСформирован Тогда
			
			Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
				
				Если (НЕ ЗначениеЗаполнено(Строка.Родитель) ИЛИ ЗначениеЗаполнено(Строка.Родитель.Ссылка))
					И (Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
					ИЛИ Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
					И НЕ ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
					
					Если Не Строка.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда 
						Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.Сформировать;
					КонецЕсли;
					Если ЗначениеЗаполнено(Строка.Родитель) Тогда
						Если ЗначениеЗаполнено(Строка.Родитель.Ссылка) Тогда
							
							Если ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(Строка.Родитель.Ссылка.ВладелецФайла) Тогда
								Строка.ОжидаемоеДействие = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Если НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Ссылка, "ПометкаУдаления") Тогда
					Строка.ОжидаемоеДействие = ОжидаемоеДействиеПоТекущемуСтатусу(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Ссылка) Тогда
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Строка.Ссылка.ВладелецФайла);
		Иначе
			Строка.ОжидаемоеДействиеКонтрагента = ПолучитьОжидаемоеДействиеКонтрагента(Строка,Неопределено);
		КонецЕсли;
		Строка.СтрокаДоступна = ?(ЗначениеЗаполнено(Строка.ОжидаемоеДействие), Истина, Ложь);
		Строка.Представление = СтрЗаменить(Строка.Представление, "_", " ");
		
		Если Строка.Строки.Количество() > 0 Тогда
			ОбработатьДерево(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеВПустыхСтроках(ДеревоОбъект, НастройкаОбмена)
	
	СтруктураПараметров = Новый Структура;
	Для Каждого Строка Из ДеревоОбъект.Строки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			СтруктураПараметров.Вставить("ТипЭД", Строка.ТипЭД);
			СтруктураПараметров.Вставить("ПрикладнойВидЭД", НастройкаОбмена.ПрикладнойВидЭД);
			Строка.Представление = ОпределитьПредставлениеЭД(Строка.ВидЭД, СтруктураПараметров);
			Строка.СтатусЭД = Перечисления.СтатусыЭД[?(Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий, "НеСформирован", "НеПолучен")];
		КонецЕсли;
		Если Строка.Строки.Количество() > 0 Тогда
			ЗаполнитьДанныеВПустыхСтроках(Строка, НастройкаОбмена);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуДерева(СтрокаДерева, Выборка, ДатаАктуальногоЭД, НастройкиОбмена)
	
	ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка,
		"Ссылка, СтатусЭД, ДатаИзмененияСтатусаЭД, НаправлениеЭД, Представление, ПометкаУдаления, Версия, ТипЭД,
		|ДополнительнаяИнформация, ИмяФайла, Расширение, ИндексКартинки");
	
	СтруктураПараметров = Новый Структура;
	Если Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ Выборка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Выборка.ВладелецФайла,"НомерДокументаОтправителя,ДатаДокументаОтправителя");

		СтруктураПараметров.Вставить("НомерВладельца", СвойстваЭД.НомерДокументаОтправителя);
		СтруктураПараметров.Вставить("ДатаВладельца",  СвойстваЭД.ДатаДокументаОтправителя);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипЭД", Выборка.ТипЭД);
	СтруктураПараметров.Вставить("ПрикладнойВидЭД", НастройкиОбмена.ПрикладнойВидЭД);
	СтруктураПараметров.Вставить("ТипДокумента", НастройкиОбмена.ТипДокумента);
	
	СтрокаДерева.Представление = ОпределитьПредставлениеЭД(СтрокаДерева.ВидЭД, СтруктураПараметров);
	
	// Для входящих ЭД актуальность меняется вручную. В связи с этим надо выделять в списке
	// цветом более актуальные ЭД. Для этого в дереве есть реквизит "ДатаЭДБольшеАктуального",
	// а так же для сравнивания текущей даты создания ЭД с датой актуального ЭД, существует
	// реквизит объекта "ДатаАктуальногоЭД". Необходимо заполнить их.
	СтрокаДерева.ДатаЭДБольшеАктуального = Ложь;
	Если СтрокаДерева.АктуальныйЭД Тогда
		Если НЕ ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия) Тогда
			ДатаАктуальногоЭД = Выборка.Версия;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ДатаАктуальногоЭД) И ЗначениеЗаполнено(Выборка.Версия)
		И ДатаАктуальногоЭД < Выборка.Версия Тогда
		СтрокаДерева.ДатаЭДБольшеАктуального = Истина;
	КонецЕсли;
		
КонецПроцедуры

Функция ОжидаемоеДействиеПоТекущемуСтатусу(Строка)
	
	ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
	
	СостояниеЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении Тогда
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Строка.Ссылка, "ВладелецФайла, НаправлениеЭД");
	ДОЗакрыт = ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(СвойстваЭД.ВладелецФайла);

	Если ДОЗакрыт Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ТекущийСтатусЭД = Строка.СтатусЭД;
	ЭтоСлужебныйЭД = ЭтоИзвещениеОПолучении(Строка.ТипЭД)
		ИЛИ ЭтоПодтверждение(Строка.ТипЭД)
		ИЛИ ЭтоУведомлениеОбУточнении(Строка.ТипЭД);
	
	Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
		
	ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Отклонен
		ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
	ИначеЕсли Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
		И (ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Принять;
		
	ИначеЕсли НЕ ЭтоСлужебныйЭД И ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
		И ЭтоТитулФНС(СвойстваЭД.ВладелецФайла)
		И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		НастройкиОбменаДляСтатусов = НастройкиОбменаЭД(Строка.Ссылка);
		МассивСтатусовЭД = ВернутьМассивСтатусовЭД(НастройкиОбменаДляСтатусов);
		
		Если МассивСтатусовЭД.Количество() > 0 Тогда
			ИндексТекСтатуса = МассивСтатусовЭД.Найти(ТекущийСтатусЭД);
			Если ИндексТекСтатуса <> Неопределено Тогда
				
				Если ИндексТекСтатуса + 1 < МассивСтатусовЭД.Количество() Тогда
					СледующийСтатус = МассивСтатусовЭД[ИндексТекСтатуса + 1];
					
					Если ТекущийСтатусЭД = Перечисления.СтатусыЭД.Получен
						ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус = Перечисления.СтатусыЭД.Утвержден Тогда
						
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Утвердить;
						Если НЕ (НЕ НемедленнаяОтправкаЭД()
								ИЛИ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")) Тогда
								
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.УтвердитьОтправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.Сформирован
								И СледующийСтатус <> Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Утвержден
							ИЛИ ТекущийСтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
						Если СледующийСтатус = Перечисления.СтатусыЭД.Подписан
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПолностьюПодписан Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Подписать;
							Если НемедленнаяОтправкаЭД() Тогда
								ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПодписатьОтправить;
							КонецЕсли;
						ИначеЕсли СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленКОтправке
							ИЛИ СледующийСтатус = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
							
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
						
						Если СледующийСтатус = Перечисления.СтатусыЭД.Доставлен Тогда
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.ПустаяСсылка();
						Иначе
							ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
						КонецЕсли;
						
					ИначеЕсли ТекущийСтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение
						И СледующийСтатус = Перечисления.СтатусыЭД.ОтправленоПодтверждение Тогда
						ВозвращаемоеЗначение = Перечисления.ОжидаемоеДействиеЭД.Отправить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьОжидаемоеДействиеКонтрагента(Строка,ВладелецФайла)
	
	ВозвращаемоеЗначение = "";
	
	ВерсияСтатусуЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(Строка.Ссылка);
	Если ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи
		Или ВерсияСтатусуЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;

	
	Если Строка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ Строка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		Если Строка.ВидЭД = Перечисления.ВидыЭД.Подтверждение И НЕ ЗначениеЗаполнено(Строка.Ссылка)
			И ЗначениеЗаполнено(Строка.Родитель.Ссылка)
			И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения оператора ЭДО'");
		ИначеЕсли (Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ
				ИЛИ Строка.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ)
				И Строка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И ЗначениеЗаполнено(Строка.Родитель.Ссылка) И (Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ Строка.Родитель.СтатусЭД = Перечисления.СтатусыЭД.Доставлен)
				И НЕ ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Извещения о получении'");
		КонецЕсли;
		
	Иначе
		Если Строка.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения отправки'");
			
			// Изменения в поведении дерева для версии регламента 20.
			Если ВладелецФайла.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И ЭтоОтветныйТитул(Строка.ТипЭД) Тогда
				
				ВозвращаемоеЗначение = "";
			КонецЕсли;
		ИначеЕсли Строка.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
			
			ВозвращаемоеЗначение = НСтр("ru = 'Подтверждения о доставке'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция МассивТиповЭДКорневыхЭлементовДерева()
	
	СписокТиповЭД = Новый Массив;	
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	
	Возврат СписокТиповЭД;
	
КонецФункции

Функция МассивТиповЭДНеОтображаемыхВДереве()
	
	СписокТиповЭД = Новый Массив;
	СписокТиповЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
	
	Возврат СписокТиповЭД;
	
КонецФункции

// Определение валидности электронных подписей на электронном документе.
//
// Параметры:
//  ФайлЭлектронногоДокумента - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на файл электронного документа.
//
// Возвращаемое значение:
//  Булево - результат проверки, Истина - подпись валидна.
//
Функция УстановленныеПодписиВалидны(ФайлЭлектронногоДокумента)
	
	Результат = Истина;
	
	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ФайлЭлектронногоДокумента);
	Для каждого ЭП Из ЭлектронныеПодписиЭД Цикл
		
		Если Не ЭП.ПодписьВерна Тогда
			ШаблонТекста = НСтр("ru = 'Обработка электронного документа %1.
									|Документ не обработан, так как содержит невалидные подписи.'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ФайлЭлектронногоДокумента);
			ОбщегоНазначения.СообщитьПользователю(Текст);
			Результат = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуРекурсивно(ДеревоЗначений,ТаблицаЭД)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений Цикл
		
		Если ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			НоваяСтрока = ТаблицаЭД.Добавить();
			НоваяСтрока.Ссылка = СтрокаДерева.Ссылка;
			НоваяСтрока.ТипЭД = СтрокаДерева.ТипЭД;
			НоваяСтрока.ВидЭД = СтрокаДерева.ВидЭД;
			НоваяСтрока.ИмяРеквизита = "ТабличныйДокумент" 
				+ ?(СтрокаДерева.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "Входящий", "Исходящий")
				+ ?(СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, "Произвольный", "")
				+ ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.ТипЭД);
			СтрокаДерева.ИмяРеквизита = НоваяСтрока.ИмяРеквизита;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЗаполнитьТаблицуРекурсивно(СтрокаДерева.Строки,ТаблицаЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлектронныеПодписиДвухТитулов(ФайлЭлектронногоДокумента, ЭлектронныйДокумент = Неопределено)
	
	Если ТипЗнч(ФайлЭлектронногоДокумента) = Тип("Структура") Тогда
		СвойстваФайлаЭлектронногоДокумента = ФайлЭлектронногоДокумента;
	Иначе
		СвойстваФайлаЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ФайлЭлектронногоДокумента, ИменаСвойствФайлаЭлектронногоДокумента());
	КонецЕсли;
	
	Если ЭлектронныйДокумент = Неопределено Тогда
		СвойстваЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СвойстваФайлаЭлектронногоДокумента.ВладелецФайла, "ВидЭД, ТипЭлементаВерсииЭД, ТребуетсяПодтверждение");
	ИначеЕсли ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		СвойстваЭлектронногоДокумента = ЭлектронныйДокумент;
	Иначе
		СвойстваЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭлектронныйДокумент, "ВидЭД, ТипЭлементаВерсииЭД, ТребуетсяПодтверждение");
	КонецЕсли;
	
	ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваФайлаЭлектронногоДокумента.Ссылка);
	Если ЭлектронныеПодписи.Количество() = 0 Тогда
		Возврат ЭлектронныеПодписи;
	КонецЕсли;
	
	Для Каждого Подпись Из ЭлектронныеПодписи Цикл
		Подпись.Вставить("ОтветнаяПодпись", Ложь);
		Подпись.Вставить("ПодписанныйОбъект", ФайлЭлектронногоДокумента);
	КонецЦикла;
	
	Если ЭтоТитулФНС(СвойстваЭлектронногоДокумента) Тогда
		
		ВторойТитул = ВторойТитулДокумента(СвойстваФайлаЭлектронногоДокумента.Ссылка);
		Если ЗначениеЗаполнено(ВторойТитул) Тогда
			ЭлектронныеПодписиВторогоТитула = ЭлектроннаяПодпись.УстановленныеПодписи(ВторойТитул);
			Для Каждого Подпись Из ЭлектронныеПодписиВторогоТитула Цикл
				Подпись.Вставить("ОтветнаяПодпись", Истина);
				Подпись.Вставить("ПодписанныйОбъект", ВторойТитул);
			КонецЦикла;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЭлектронныеПодписи, ЭлектронныеПодписиВторогоТитула);
		КонецЕсли;
		
	ИначеЕсли СвойстваЭлектронногоДокумента.ТребуетсяПодтверждение Тогда
		
		Если    СвойстваФайлаЭлектронногоДокумента.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение
			ИЛИ СвойстваФайлаЭлектронногоДокумента.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПодтверждение
			ИЛИ СвойстваФайлаЭлектронногоДокумента.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
			ИЛИ СвойстваФайлаЭлектронногоДокумента.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ СвойстваФайлаЭлектронногоДокумента.СтатусЭД = Перечисления.СтатусыЭД.Аннулирован Тогда
			
			ЭлектронныеПодписи[ЭлектронныеПодписи.Количество() - 1].Вставить("ОтветнаяПодпись", Истина);
			
		ИначеЕсли СвойстваФайлаЭлектронногоДокумента.СтатусЭД <> Перечисления.СтатусыЭД.Получен
			И СвойстваФайлаЭлектронногоДокумента.СтатусЭД <> Перечисления.СтатусыЭД.Утвержден Тогда
			
			ЭтоВходящийДокумент = СвойстваФайлаЭлектронногоДокумента.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Журнал.Дата КАК ДатаСтатуса
				|ИЗ
				|	РегистрСведений.ЖурналСобытийЭД КАК Журнал
				|ГДЕ
				|	Журнал.ПрисоединенныйФайл = &ПрисоединенныйФайл
				|	И Журнал.СтатусЭД = &СтатусЭД");
			
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", СвойстваФайлаЭлектронногоДокумента.Ссылка);
			Запрос.УстановитьПараметр("СтатусЭД", ?(ЭтоВходящийДокумент, Перечисления.СтатусыЭД.Утвержден, Перечисления.СтатусыЭД.Отправлен));
			
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапроса = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Для Каждого Подпись Из ЭлектронныеПодписи Цикл
					ОтветнаяПодпись = Ложь;
					Если ЭтоВходящийДокумент Тогда
						ОтветнаяПодпись = Подпись.ДатаПодписи > Выборка.ДатаСтатуса;
					Иначе
						ОтветнаяПодпись = Подпись.ДатаПодписи < Выборка.ДатаСтатуса;
					КонецЕсли;
					Подпись.Вставить("ОтветнаяПодпись", ОтветнаяПодпись);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭлектронныеПодписи;
	
КонецФункции

// Получение параметров версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - ДокументСсылка - электронный документ или владелец.
// 
// Возвращаемое значение:
//  Структура - параметры структуры:
//    * НомерВерсииЭД - Строка - номер версии
//    * СсылкаНаДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - электронный документ.
//    * СостояниеВерсииЭД - ПеречислениеСсылка.СостоянияВерсийЭД - состояние версии электронного документа.
//    * КомментарийРС - Строка - комментарий состояния.
//
Функция ПараметрыВерсииЭлектронногоДокумента(СсылкаНаВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВерсииЭД = Новый Структура;
	
	Если ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
		ИЛИ ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаВладельца,"СостояниеЭДО, НомерВерсииЭД");
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     РеквизитыДокумента.НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаВладельца);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", РеквизитыДокумента.СостояниеЭДО);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("Структура") Тогда
		// Бизнес-сеть.
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     1);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  Неопределено);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", Неопределено);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     "");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СостоянияЭД.ЭлектронныйДокумент.НомерВерсииЭД, 0) КАК НомерВерсииЭД,
		|	СостоянияЭД.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	СостоянияЭД.СостояниеВерсииЭД,
		|	СостоянияЭД.Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка КАК СообщениеОбмена,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.СостояниеЭДО КАК СообщениеОбменаСостояниеЭДО,
		|	ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_СвязанныеЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.СостояниеЭДО,
		|	ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
		|ИЗ
		|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
		|ГДЕ
		|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
		|	И НЕ ЭлектронныйДокументВходящийДокументыОснования.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(вт_СвязанныеЭД.НомерВерсииЭД) КАК НомерВерсииЭД
		|ПОМЕСТИТЬ вт_МаксимальныйНомер
		|ИЗ
		|	вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт_СвязанныеЭД.НомерВерсииЭД,
		|	вт_СвязанныеЭД.СообщениеОбмена КАК ЭлектронныйДокумент,
		|	вт_СвязанныеЭД.СообщениеОбменаСостояниеЭДО КАК СостояниеЭДО
		|ИЗ
		|	вт_МаксимальныйНомер КАК вт_МаксимальныйНомер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ вт_СвязанныеЭД КАК вт_СвязанныеЭД
		|		ПО вт_МаксимальныйНомер.НомерВерсииЭД = вт_СвязанныеЭД.НомерВерсииЭД";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаВладельца);
		
		Результат = Запрос.ВыполнитьПакет();
		КомментарийРС = "";
		ВыборкаПоРегистру = Результат[0].Выбрать();
		Если ВыборкаПоРегистру.Следующий() Тогда
			НомерВерсииЭД     = ВыборкаПоРегистру.НомерВерсииЭД;
			СостояниеВерсииЭД = ВыборкаПоРегистру.СостояниеВерсииЭД;
			СсылкаНаДокумент  = ВыборкаПоРегистру.ЭлектронныйДокумент;
			КомментарийРС     = ВыборкаПоРегистру.Комментарий;
		Иначе
			НомерВерсииЭД     = 0;
			СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
			СсылкаНаДокумент  = Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка();
		КонецЕсли;
		
		Если НомерВерсииЭД = 0 Тогда
			ВыборкаПоСправочнику = Результат[3].Выбрать();
			Если ВыборкаПоСправочнику.Количество() > 0 Тогда
				ВыборкаПоСправочнику.Следующий();
				НомерВерсииЭД     = ВыборкаПоСправочнику.НомерВерсииЭД;
				СсылкаНаДокумент  = ВыборкаПоСправочнику.ЭлектронныйДокумент;
				СостояниеВерсииЭД = ВыборкаПоСправочнику.СостояниеЭДО;
			КонецЕсли;
		КонецЕсли;
		СтруктураВерсииЭД.Вставить("НомерВерсииЭД",     НомерВерсииЭД);
		СтруктураВерсииЭД.Вставить("СсылкаНаДокумент",  СсылкаНаДокумент);
		СтруктураВерсииЭД.Вставить("СостояниеВерсииЭД", СостояниеВерсииЭД);
		СтруктураВерсииЭД.Вставить("КомментарийРС",     КомментарийРС);
		
	КонецЕсли;
	
	Возврат СтруктураВерсииЭД;
	
КонецФункции

Функция ИнформацияОФайлахИПодписях(ИменаФайлов)
	
	Результат = Новый Соответствие;
	
	ИменаФайловПодписей = Новый Массив;
	ИменаФайловДанных   = Новый Массив;
	
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		Если Прав(ИмяФайла, 3) = "p7s" Тогда
			ИменаФайловПодписей.Добавить(ИмяФайла);
		Иначе
			ИменаФайловДанных.Добавить(ИмяФайла);
		КонецЕсли;
	КонецЦикла;
	
	Для ИндексА = 1 По ИменаФайловДанных.Количество() Цикл
		ИндексМАКС = ИндексА;
		Для ИндексБ = ИндексА+1 По ИменаФайловДанных.Количество() Цикл
			Если СтрДлина(ИменаФайловДанных[ИндексМАКС - 1]) > СтрДлина(ИменаФайловДанных[ИндексБ - 1]) Тогда
				ИндексМАКС = ИндексБ;
			КонецЕсли;
		КонецЦикла;
		Своп = ИменаФайловДанных[ИндексА - 1];
		ИменаФайловДанных[ИндексА - 1] = ИменаФайловДанных[ИндексМАКС - 1];
		ИменаФайловДанных[ИндексМАКС - 1] = Своп;
	КонецЦикла;
	
	Для Каждого ИмяФайлаДанных Из ИменаФайловДанных Цикл
		Результат.Вставить(ИмяФайлаДанных, НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей));
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Результат.Вставить(ИмяФайлаПодписи, Новый Массив);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьАрхивФайлов(ИмяОсновногоФайла, МассивФайлов)
	
	Попытка
		Файл = Новый Файл(ИмяОсновногоФайла);
		ФайлАрхива = СтрЗаменить(ИмяОсновногоФайла, Файл.Расширение, ".zip");
		ЗаписьАрхива = Новый ЗаписьZIPФайла(ФайлАрхива);
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			ЗаписьАрхива.Добавить(ИмяФайла);
		КонецЦикла;
		ЗаписьАрхива.Записать();
		Возврат ФайлАрхива;
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		
		Возврат "";
	КонецПопытки;
	
КонецФункции

// Получает адрес сертификата шифрования во временном хранилище данных.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на электронный документ, адрес сертификата шифрования по которому необходимо получить.
//
Функция АдресаСертификатовШифрования(ПрисоединенныйФайл) Экспорт
	
	ПараметрыСоглашения = ОпределитьНастройкиОбменаЭДПоИсточнику(ПрисоединенныйФайл.ВладелецФайла);
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения)
		ИЛИ Не ЭтоПрямойОбмен(ПараметрыСоглашения.СпособОбменаЭД) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	СертификатКонтрагентаШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования;
	СертификатОрганизацииШифрования = ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки;
	
	Если СертификатКонтрагентаШифрования = Неопределено ИЛИ СертификатОрганизацииШифрования = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвоичныеДанныеСертификата            = СертификатКонтрагентаШифрования.Получить();
	ДвоичныеДанныеСертификатаОрганизации = СертификатОрганизацииШифрования.ДанныеСертификата.Получить();
	
	Если ДвоичныеДанныеСертификата = Неопределено ИЛИ ДвоичныеДанныеСертификатаОрганизации = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата);
	АдресСертификатаОрганизации = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификатаОрганизации);
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(АдресСертификата);
	МассивВозврата.Добавить(АдресСертификатаОрганизации);
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структуру подписей для вывода на печатную форму
Функция ПодписиЭДДляВыводаНаПечать(ФайлЭлектронногоДокумента, ЭлектронныйДокумент = Неопределено) Экспорт
	
	Если ТипЗнч(ФайлЭлектронногоДокумента) = Тип("Структура") Тогда
		СвойстваФайлаЭлектронногоДокумента = ФайлЭлектронногоДокумента;
	Иначе
		СвойстваФайлаЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлЭлектронногоДокумента,
			ИменаСвойствФайлаЭлектронногоДокумента());
	КонецЕсли;
	
	СтруктураПодписей = Новый Структура;
	
	Если СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		ИЛИ СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОП
		ИЛИ СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		ИЛИ СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		ИЛИ СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СвойстваФайлаЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		
		ЭлектронныеПодписиЭД = ЭлектронныеПодписиДвухТитулов(СвойстваФайлаЭлектронногоДокумента, ЭлектронныйДокумент);
	Иначе
		ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(СвойстваФайлаЭлектронногоДокумента.Ссылка);
	КонецЕсли;
	
	СтруктураПодписей.Вставить("Подписи", ЭлектронныеПодписиЭД);
	
	Возврат СтруктураПодписей;
	
КонецФункции

// Добавляет на форму страницы для отображения электронных документов и реквизиты для хранения табличных документов.
//
// Параметры:
//  Форма			 - УправляемаяФорма - форма, на которую требуется добавить новые элементы
//  ДеревоЗначений	 - ДеревоЗначений - дерево, содержащее ссылки на справочник ЭДПрисоединенныеФайлы которые требуется вывести на форме.
//
Процедура СоздатьРеквизитыИЭлементыДляПредставленияФайлаЭлектронногоДокумента(Форма, ДеревоФайловЭД) Экспорт 
	
	Если ТипЗнч(ДеревоФайловЭД) = Тип("ДеревоЗначений") Тогда 
		ПараметрыОтбора = Новый Структура("ИмяРеквизита", "");
		МассивСтрокДерева = ДеревоФайловЭД.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	Иначе
		МассивСтрокДерева = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоФайловЭД);
	КонецЕсли;
	
	МассивНовыхРеквизитовЭД = Новый Массив;
	
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ТабличныйДокумент" 
			+ ?(СтрокаДерева.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "Входящий", "Исходящий")
			+ ?(СтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, "Произвольный", "")
			+ ОбщегоНазначения.ИмяЗначенияПеречисления(СтрокаДерева.ТипЭД);
		
		СтрокаДерева.ИмяРеквизита = ИмяРеквизита;
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
			РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТабличныйДокумент"));
			МассивНовыхРеквизитовЭД.Добавить(РеквизитФормы);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивНовыхРеквизитовЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивНовыхРеквизитовЭД);
	
	Для Каждого РеквизитФормы Из МассивНовыхРеквизитовЭД Цикл
		
		ИмяСтраницы = "Страница" + РеквизитФормы.Имя;
		Страница = Форма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Форма.Элементы.СтраницыЭД);
		Страница.Вид = ВидГруппыФормы.Страница;
		Страница.ОтображатьЗаголовок = Ложь;
		Страница.Видимость = Истина;
		
		НовыйЭлемент = Форма.Элементы.Добавить(РеквизитФормы.Имя, Тип("ПолеФормы"), Страница);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.ПутьКДанным = РеквизитФормы.Имя;
		НовыйЭлемент.Редактирование = Ложь;
		
		НовыйЭлемент.УстановитьДействие("ОбработкаРасшифровки","Подключаемый_ТабличныйДокументОбработкаРасшифровки")
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(ПараметрыЗадания, УникальныйИдентификатор) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Обмен с контрагентами. Формирование представления файла электронного документа.'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПодготовитьПредставлениеФайлаЭлектронногоДокумента",
		ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции

Процедура ПодготовитьПредставлениеФайлаЭлектронногоДокумента(ПараметрыЗадания, АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭлектронныйДокумент",       ПараметрыЗадания.СвойстваЭлектронногоДокумента.Ссылка);
	Результат.Вставить("ФайлЭлектронногоДокумента", ПараметрыЗадания.СвойстваФайлаЭлектронногоДокумента.Ссылка);
	
	СвойстваЭлектронногоДокумента = ПараметрыЗадания.СвойстваЭлектронногоДокумента;
	СвойстваФайлаЭлектронногоДокумента = ПараметрыЗадания.СвойстваФайлаЭлектронногоДокумента;
	
	СтруктураПодписей = Новый Структура;
	Если ЗначениеЗаполнено(СвойстваФайлаЭлектронногоДокумента.Ссылка) Тогда
		СтруктураПодписей = ПодписиЭДДляВыводаНаПечать(СвойстваФайлаЭлектронногоДокумента, СвойстваЭлектронногоДокумента);
	КонецЕсли;
	
	ПараметрыПросмотра = Новый Структура;
	ПараметрыПросмотра.Вставить("УникальныйИдентификатор", ПараметрыЗадания.УникальныйИдентификатор);
	ПараметрыПросмотра.Вставить("СкрыватьИдентификаторДокумента", Ложь);
	ПараметрыПросмотра.Вставить("СтруктураПодписей",  СтруктураПодписей);
	ПараметрыПросмотра.Вставить("СкрыватьДопДанные",  ПараметрыЗадания.СкрыватьДопДанные);
	ПараметрыПросмотра.Вставить("СкрыватьКопияВерна", ПараметрыЗадания.СкрыватьКопияВерна);
	ПараметрыПросмотра.Вставить("ВыводитьБанковскиеРеквизиты", ПараметрыЗадания.ВыводитьБанковскиеРеквизиты);
	ПараметрыПросмотра.Вставить("СвойстваЭлектронногоДокумента", СвойстваЭлектронногоДокумента);
	ПараметрыПросмотра.Вставить("СвойстваФайлаЭлектронногоДокумента", СвойстваФайлаЭлектронногоДокумента);
	
	ЗначениеСвойства = Неопределено;
	Если ПараметрыЗадания.Свойство("ПараметрыПроизвольногоДокумента", ЗначениеСвойства) Тогда
		ПараметрыПросмотра.Вставить("ПараметрыПроизвольногоДокумента", ЗначениеСвойства);
	КонецЕсли;
	
	ФорматЭлектронногоДокумента = Неопределено;
	ПредставлениеФайлаЭлектронногоДокумента = ОбменСКонтрагентамиВнутренний.ФайлДанныхЭД(
		СвойстваФайлаЭлектронногоДокумента.Ссылка, ПараметрыПросмотра);
		
	ВерсияФормата = Неопределено;
	Если ПараметрыПросмотра.Свойство("ВерсияФормата", ВерсияФормата)
			И ПараметрыЗадания.Свойство("ПолучитьВерсиюФормата") Тогда
		Результат.Вставить("ВерсияФормата", ВерсияФормата);
	КонецЕсли;
	Результат.Вставить("ПредставлениеФайлаЭлектронногоДокумента", ПредставлениеФайлаЭлектронногоДокумента);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция УстановленныеПодписи(ПрисоединенныйФайлСсылка) Экспорт
	
	Если ЭтоСлужебныйДокумент(ПрисоединенныйФайлСсылка) Тогда
		ЭлектронныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
	Иначе
		ЭлектронныеПодписи = ЭлектронныеПодписиДвухТитулов(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Возврат ЭлектронныеПодписи;
	
КонецФункции

#КонецОбласти

#Область МетодыЗаполненияДереваЭД

// Версия пакета XDTO схемы CML 2.06.
//
// Возвращаемое значение:
//  Строка - версия.
//
Функция ВерсияСхемыCML2() Экспорт
	
	Возврат "CML 2.08";
	
КонецФункции

// Пространство имен используемой схемы CML.
// 
// Возвращаемое значение:
//  Строка - пространство имен.
//
Функция ПространствоИменCML() Экспорт
	
	Возврат "urn:1C.ru:commerceml_2";
	
КонецФункции

Функция ВерсияСхемыBNCommerceOffering() Экспорт
	
	Возврат "BN Commerce offering";
	
КонецФункции

Функция ПространствоИменBNCommerceOffering() Экспорт
	
	Возврат "http://1cbn.ru/bn-commerce-offering/XMLSchema";
	
КонецФункции

#КонецОбласти

#Область РаботаСОписаниемОснованияЭД

// Сохраняет изменения в описании основания электронного документа в информационной базе.
//
// Параметры:
//  ОснованиеЭД - ОпределяемыйТип.ОснованияЭлектронныхДокументов - объект или ссылка на основание электронного документа.
//
Процедура ОбновитьОписаниеОснованияЭлектронногоДокумента(Знач ОснованиеЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОснованиеОбъект = Неопределено;
	ОснованиеСсылка = Неопределено;
	
	ТипОснования = ТипЗнч(ОснованиеЭД);
	Если ОбщегоНазначения.ЭтоСсылка(ТипОснования) Тогда
		ОснованиеОбъект = ОснованиеЭД.ПолучитьОбъект();
		ОснованиеСсылка = ОснованиеЭД;
	Иначе
		ОснованиеОбъект = ОснованиеЭД;
		ОснованиеСсылка = ОснованиеЭД.Ссылка;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Набор = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		Набор.Отбор.СсылкаНаОбъект.Установить(ОснованиеСсылка);
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Описание = Неопределено;
		ОписаниеИзменено = Ложь;
		
		Для каждого Запись Из Набор Цикл
			
			Если Запись.СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				Продолжить;
			КонецЕсли;
			
			Если Описание = Неопределено Тогда
				Описание = ОписаниеОснованияЭлектронногоДокумента(ОснованиеОбъект);
			КонецЕсли;
			
			// Обновление описания.
			Если ОписаниеИзменено Тогда
				ЗаполнитьЗначенияСвойств(Запись, Описание);
				Продолжить;
			КонецЕсли;
			
			// Проверка изменения описания.
			Для каждого КлючЗначение Из Описание Цикл
				
				ТекущееЗначение = Запись[КлючЗначение.Ключ];
				НовоеЗначение = КлючЗначение.Значение;
				
				Если ТекущееЗначение <> НовоеЗначение Тогда
					ОписаниеИзменено = Истина;
					ЗаполнитьЗначенияСвойств(Запись, Описание);
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЦикла;
		
		Если ОписаниеИзменено Тогда
			Набор.Записать(Истина);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Проверяет состояние уведомлений в сервисе 1С-ЭДО
//
// Параметры:
//  ИдентификаторОрганизации - Строка - Идентификатор организации
//  Соединение				 - Http соединение - Http соединение с сервером 1С-ЭДО.
// 
// Возвращаемое значение:
//  Булево - Состояние подключения уведомлений.
//
Функция УведомленияПодключены(ИдентификаторОрганизации)
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(СпособОбмена, 10);
	
	ВидОперации = НСтр("ru = 'Получение информации о состоянии уведомлений'");
	
	ИмяМетода = "CheckSubscriptions/" + ИдентификаторОрганизации;
	Запрос = Новый HTTPЗапрос(ИмяМетода);
	
	УведомленияВключены = Ложь;
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка выполнения команды сервиса.'");
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
			
		Возврат УведомленияВключены;
		
	КонецПопытки;
		
	Если Не Ответ.КодСостояния = 200 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Код ответа сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Ответ.КодСостояния);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстСообщения);
		
		Возврат УведомленияВключены;
		
	КонецЕсли;
		
	Результат = Ответ.ПолучитьТелоКакСтроку();
	
	УведомленияВключены = ЗначениеСтатуса(Результат);
	
	Возврат УведомленияВключены;
	
КонецФункции

Функция ПриоритетВидаЭлектронногоДокументаВНастройкахЭДО(ВидЭлектронногоДокумента)
	
	Приоритет = 100;
	
	Если ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		Приоритет = 1;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель Тогда
		Приоритет = 2;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		Приоритет = 3;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура Тогда
		Приоритет = 4;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УПД Тогда
		Приоритет = 5;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УКД Тогда
		Приоритет = 6;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		Приоритет = 7;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		Приоритет = 8;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Приоритет = 9;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КаталогТоваров Тогда
		Приоритет = 10;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Приоритет = 11;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПрайсЛист Тогда
		Приоритет = 12;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Приоритет = 13;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Приоритет = 14;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		Приоритет = 15;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		Приоритет = 16;
	ИначеЕсли ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
		Приоритет = 30;
	КонецЕсли;
	
	Возврат Приоритет;
	
КонецФункции

// Определение представления электронного документа.
//
// Параметры:
//  ВидЭД - Перечисление.ВидЭД - вид электронного документа.
//  СтруктураПараметров - Структура - НомерВладельца, ДатаВладельца, ВерсияЭД.
//
// Возвращаемое значение:
//  Строка - текстовое представление электронного документа.
//
Функция ОпределитьПредставлениеЭД(ВидЭД, СтруктураПараметров)
	
	ТекстВидЭД  = "";
	ТекстНомера = "";
	ТекстДаты   = "";
	ТекстВерсии = "";
	ЗначениеСвойства = Неопределено;
	
	Если СтруктураПараметров.Свойство("НомерВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстНомера = " № " + ЗначениеСвойства;
		
	КонецЕсли;
	Если СтруктураПараметров.Свойство("ДатаВладельца", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		ТекстДаты = " от " + Формат(ЗначениеСвойства, "ДЛФ=D");
	КонецЕсли;
	
	Если ВидЭД <> Перечисления.ВидыЭД.СчетФактура И ВидЭД <> Перечисления.ВидыЭД.ИзвещениеОПолучении
		И ВидЭД <> Перечисления.ВидыЭД.Подтверждение И ВидЭД <> Перечисления.ВидыЭД.УведомлениеОбУточнении
		И СтруктураПараметров.Свойство("ВерсияЭД", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		
		ШаблонТекстаВерсии = НСтр("ru = '(версия %1)'");
		ТекстВерсии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаВерсии, ЗначениеСвойства);
		
	КонецЕсли;
	
	ТипЭД = "";
	Если СтруктураПараметров.Свойство("ТипЭД", ТипЭД)
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ДОП
		И ТипЭД <> Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
		
		Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			ТекстВидЭД = НСтр("ru = 'Информация получателя'");
		ИначеЕсли ЭтоИзвещениеОПолучении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Извещение о получении'");
		ИначеЕсли ЭтоПодтверждение(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Подтверждение'");
			
			Если ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
				ИЛИ ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДП Тогда
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты получения'");
			Иначе
				ТекстВидЭД = ТекстВидЭД + " " + НСтр("ru = 'даты отправки'");
			КонецЕсли;
			
		ИначеЕсли ЭтоУведомлениеОбУточнении(ТипЭД) Тогда
			ТекстВидЭД = НСтр("ru = 'Уведомление об уточнении'");
		ИначеЕсли ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
			ТекстВидЭД = НСтр("ru = 'Предложение об аннулировании'");
		КонецЕсли;
	Иначе
		
		Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
			ТекстВидЭД = НСтр("ru = 'Счет'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Заказ товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			ТекстВидЭД = НСтр("ru = 'Ответ на заказ'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
			ТекстВидЭД = НСтр("ru = 'Прайс-лист'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ТекстВидЭД = НСтр("ru = 'Каталог товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о продажах комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			ТекстВидЭД = НСтр("ru = 'Отчет о списании комиссионного товара'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Передача товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			ТекстВидЭД = НСтр("ru = 'Возврат товаров'");
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ТипДокумента = Неопределено;
			Если СтруктураПараметров.Свойство("ТипДокумента", ТипДокумента)
				И ЗначениеЗаполнено(ТипДокумента) Тогда
				Если ТипДокумента = Перечисления.ТипыЭД.СчетНаОплату Тогда
					ТекстВидЭД = НСтр("ru = 'Счет'");
				Иначе
					ТекстВидЭД = Строка(ТипДокумента);
				КонецЕсли;
			Иначе
				ТекстВидЭД = НСтр("ru = 'Произвольный документ'");
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД
			И СтруктураПараметров.Свойство("ПрикладнойВидЭД")
			И ЗначениеЗаполнено(СтруктураПараметров.ПрикладнойВидЭД) Тогда
			ТекстВидЭД = Строка(СтруктураПараметров.ПрикладнойВидЭД);
		Иначе
			ТекстВидЭД = НСтр("ru = 'Информация отправителя'");
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеЭД = ТекстВидЭД + ТекстНомера + ТекстДаты + ТекстВерсии;
	
	Возврат ПредставлениеЭД;
	
КонецФункции

Процедура ПрочитатьИННКППИзФайла(ИННКПП, СтрокаXML)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	
	ИННПрочитан = Ложь;
	КПППрочитан = Ложь;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Врег(ЧтениеXML.Имя) = ВРег("Abonent") Тогда
					ИНН = "";
					КПП = "";
					ЕстьКПП = Ложь;
				КонецЕсли;
				Если Врег(ЧтениеXML.Имя) = ВРег("INN") Тогда
					ЧтениеXML.Прочитать();
					ИНН = ЧтениеXML.Значение;
					ИННПрочитан = Истина;
				КонецЕсли;
				
				Если Врег(ЧтениеXML.Имя) = ВРег("KPP") Тогда
					ЧтениеXML.Прочитать();
					КПП = ЧтениеXML.Значение;
					КПППрочитан = Истина;
					ЕстьКПП = Истина;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента И Врег(ЧтениеXML.Имя) = ВРег("Abonent") Тогда 
				Если ИННПрочитан И (КПППрочитан Или Не ЕстьКПП) Тогда
					
					ИННКППКонтрагента = ИНН + ?(ЗначениеЗаполнено(КПП), "/" + КПП,"");
					Если ИННКПП.Найти(ИННКППКонтрагента) = Неопределено Тогда
						ИННКПП.Добавить(ИННКППКонтрагента);
					КонецЕсли;
					
					ИННПрочитан = Ложь;
					КПППрочитан = Ложь;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка разбора XML: %1.'"), ИнформацияОбОшибке().Описание);
		Возврат ;
	КонецПопытки;
	
КонецПроцедуры

Функция ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи)
	
	ИмяВременногоФайлаОписаниеПакетаЭДО = ТекущееИмяВременногоФайла("xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента = Новый ЗаписьXML;
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ОткрытьФайл(ИмяВременногоФайлаОписаниеПакетаЭДО, "windows-1251");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьОбъявлениеXML();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("ТрансИнф");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("ВерсПрог",
		ВРЕГ(Лев(Метаданные.Имя + " " + СокрЛП(Метаданные.Версия), 40)));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("версияФормата", "ФНС:1.0");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокументооборота",
		РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокументооборота", "Участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типТранзакции", "УчастникНП");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("отправитель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "абонент");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // отправитель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("получатель");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторСубъекта", РеквизитыПакета.ОператорЭДОИд);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСубъекта", "спецоператор");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // получатель
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("документ");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("идентификаторДокумента", НовыйUUID());
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("сжат", XMLСтрока(Ложь));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("зашифрован", XMLСтрока(Истина));
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типДокумента", "участник");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("типСодержимого", "xml");
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("содержимое");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // содержимое
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьНачалоЭлемента("подпись");
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьАтрибут("имяФайла",
		ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаПодписи).Имя);
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // подпись
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента(); // документ
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.ЗаписатьКонецЭлемента();
	
	ТранспортнаяИнформацияПакетаДляРегистрацииАбонента.Закрыть();
	
	ДвоичныеДанныеОписаниеПакетаЭДО = Новый ДвоичныеДанные(ИмяВременногоФайлаОписаниеПакетаЭДО);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаОписаниеПакетаЭДО);
	
	Возврат ДвоичныеДанныеОписаниеПакетаЭДО;
	
КонецФункции

Процедура СоздатьФайлыОписанияПакета(РеквизитыПакета)
	
	// Card
	ЭДКарточки = Новый ЗаписьXML;
	ЭДКарточки.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДКарточки, "windows-1251");
	ЭДКарточки.ЗаписатьОбъявлениеXML();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("card");
	
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДКарточки.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДКарточки.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/card");
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Identifiers");
	ЭДКарточки.ЗаписатьАтрибут("ExternalIdentifier", "packet.zip");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Type");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Registration");
	ЭДКарточки.ЗаписатьАтрибут("ResignRequired", XMLСтрока(Истина));
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Description");
	ЭДКарточки.ЗаписатьАтрибут("Title", "Регистрация");
	ЭДКарточки.ЗаписатьАтрибут("Date", XMLСтрока(ТекущаяДатаСеанса()));
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalData");
	
	// Наименование организации.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOrganisationName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Фамилия.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentSurname");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Фамилия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Имя.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentName");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// Отчество.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentPatronymic");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.Отчество);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	// ОГРН.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name",  "AbonentOGRN");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОГРНОрганизации);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	Для каждого ДанныеСертификата Из РеквизитыПакета.Сертификат Цикл
		ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
		ЭДКарточки.ЗаписатьАтрибут("Name", "Certificate");
		ЭДКарточки.ЗаписатьАтрибут("Value", ДанныеСертификата);
		ЭДКарточки.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// Электронная почта.
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "Email");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ЭлектроннаяПочта);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "OperatorID");
	ЭДКарточки.ЗаписатьАтрибут("Value", РеквизитыПакета.ОператорЭДОИд);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияБЭД");
	ЭДКарточки.ЗаписатьАтрибут("Value", ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ПрикладноеРешение");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Имя);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("AdditionalParameter");
	ЭДКарточки.ЗаписатьАтрибут("Name", "ВерсияПрикладногоРешения");
	ЭДКарточки.ЗаписатьАтрибут("Value", Метаданные.Версия);
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Sender");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Abonent");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.НаименованиеОрганизации);
	ЭДКарточки.ЗаписатьАтрибут("Inn", РеквизитыПакета.ИННОрганизации);
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.КППОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Kpp", РеквизитыПакета.КППОрганизации);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеквизитыПакета.ИдентификаторОрганизации) Тогда
		ЭДКарточки.ЗаписатьАтрибут("Id", РеквизитыПакета.ИдентификаторОрганизации);
	КонецЕсли;
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьНачалоЭлемента("Receiver");
	ЭДКарточки.ЗаписатьНачалоЭлемента("Organization");
	ЭДКарточки.ЗаписатьАтрибут("Name", РеквизитыПакета.ОператорЭДО);
	ЭДКарточки.ЗаписатьАтрибут("Type", "SpecOperator");
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.ЗаписатьКонецЭлемента();
	
	ЭДКарточки.ЗаписатьКонецЭлемента();
	ЭДКарточки.Закрыть();
	
	// meta
	ЭДТранспортнойИнформации = Новый ЗаписьXML;
	ЭДТранспортнойИнформации.ОткрытьФайл(РеквизитыПакета.ИмяВременногоФайлаЭДТранспортнойИнформации, "windows-1251");
	ЭДТранспортнойИнформации.ЗаписатьОбъявлениеXML();
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ContainerDescription");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xs", "http://www.w3.org/2001/XMLSchema");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns", "http://www.1c.ru/edo/meta");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("DocFlow");
	
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Id", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Documents");
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/card");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "card.xml");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "AccessionAgreement");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/Registration");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "packet.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Document");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("TransactionCode", "LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("ReglamentCode", "Registration");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("Files");
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("MainImage");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // MainImage
	ЭДТранспортнойИнформации.ЗаписатьНачалоЭлемента("ExternalCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("xmlns:d6p1", "http://www.1c.ru/edo/LicenseCard");
	ЭДТранспортнойИнформации.ЗаписатьАтрибут("Path", "LicenseCard.zip");
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ExternalCard
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Files
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Document
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // Documents
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // DocFlow
	
	ЭДТранспортнойИнформации.ЗаписатьКонецЭлемента(); // ContainerDescription
	ЭДТранспортнойИнформации.Закрыть();
	
КонецПроцедуры

Процедура ОбновитьИдентификаторыЭДО(ИдентификаторыЭДО, Удалить = Ложь)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Удалить Тогда
		ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО);
	Иначе
		ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Если ИдентификаторыЭДО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдалитьПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
	|ГДЕ
	|	УдалитьПрофилиНастроекЭДО.ИдентификаторОрганизации В(&ИдентификаторОрганизации)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторыЭДО);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыЭДО(ИдентификаторыЭДО)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдалитьПрофилиНастроекЭДО.Ссылка КАК ПрофильЭДО,
	|	ИСТИНА КАК ЕстьНовыеЭД
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
	|ГДЕ
	|	УдалитьПрофилиНастроекЭДО.ИдентификаторОрганизации В(&Идентификаторы)
	|	И УдалитьПрофилиНастроекЭДО.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Идентификаторы", ИдентификаторыЭДО);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НовыеДокументыВСервисеЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрофильЭДО.Установить(Выборка.ПрофильЭДО);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЭДПрисоединенныйФайлПакета(Конверт, МассивСтруктурДанных = Неопределено) Экспорт
	
	ПодготовленныеДокументы = Конверт.ЭлектронныеДокументы.ВыгрузитьКолонку("ЭлектронныйДокумент");
	
	СоответствиеФайлЭД      = Новый Соответствие;
	
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога, "*");
	Для Каждого СтрокаЭД Из Конверт.ЭлектронныеДокументы Цикл
		ДокументНаОтправку = СтрокаЭД.ЭлектронныйДокумент;
		
		ДанныеФайла = ПолучитьДанныеФайла(ДокументНаОтправку);
		
		// Шифрование ЭД
		Если Конверт.ДанныеЗашифрованы Тогда
			Если МассивСтруктурДанных <> Неопределено Тогда // шифрование произведено на клиенте
				Для Каждого ЭлементДанных Из МассивСтруктурДанных Цикл
					Если ЭлементДанных.ЭлектронныйДокумент = СтрокаЭД.ЭлектронныйДокумент Тогда
						ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ЭлементДанных.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ПараметрыШифрования = АдресаСертификатовШифрования(ДокументНаОтправку);
				Если ПараметрыШифрования <> Неопределено Тогда
					Отказ = Ложь;
					МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
					Если Отказ Тогда
						ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
						
						ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
						Возврат;
					КонецЕсли;
					
					МассивСертификатов = Новый Массив;
					Для каждого СтрокаСертификата Из ПараметрыШифрования Цикл
						
						ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(СтрокаСертификата);
						Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
						МассивСертификатов.Добавить(Сертификат);
					КонецЦикла;
					
					ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанныеФайла, МассивСертификатов);
					ДанныеФайла.СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ЗашифрованныеДанные);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоОтправкаПодтверждения(ДокументНаОтправку) Тогда
			СохранитьВместеСПоследнейЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		Иначе
			СохранитьВместеСЭП(ДокументНаОтправку, ДанныеФайла, АдресКаталога, СоответствиеФайлЭД);
		КонецЕсли;
		
	КонецЦикла;
	
	Файлы = НайтиФайлы(АдресКаталога, "*");
	Если Файлы.Количество() = 0 Тогда
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
		Возврат;
	КонецЕсли;
	
	МассивИменФайлов = Новый Массив;
	Для Каждого НайденныйФайл Из Файлы Цикл
		МассивИменФайлов.Добавить(НайденныйФайл.Имя);
	КонецЦикла;
	
	АрхивКонтейнер = Новый ЗаписьZipФайла();
	ИмяФайла = "EDI_" + Конверт.УникальныйИдентификатор();
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла);
	АрхивКонтейнер.Открыть(АдресКаталога + ИмяФайла + ".zip");
	
	Для Каждого Файл Из Файлы Цикл
		АрхивКонтейнер.Добавить(Файл.ПолноеИмя);
	КонецЦикла;
	
	СоответствиеВложений    = ИнформацияОФайлахИПодписях(МассивИменФайлов);
	ТекстОписанияУчастников = СоздатьТекстОписиЭД(
									Конверт,
									СоответствиеВложений,
									СоответствиеФайлЭД);
	
	КопироватьФайл(ТекстОписанияУчастников, АдресКаталога + "packageDescription.xml");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ТекстОписанияУчастников);
	АрхивКонтейнер.Добавить(АдресКаталога + "packageDescription.xml");
	
	АрхивКонтейнер.Записать();
	
	ПоместитьПакетЭДВКонверт(Конверт, АдресКаталога + ИмяФайла + ".zip");
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталога);
	
КонецПроцедуры

Функция ОпределитьПодготовленныеКОтправкеЭД()
	
	ЗапросПодготовленныхЭД = Новый Запрос;
	ЗапросПодготовленныхЭД.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПакетЭД.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|ГДЕ
	|	ПакетЭД.ПометкаУдаления = ЛОЖЬ
	|	И ПакетЭД.СтатусПакета = &СтатусПакета";
	ЗапросПодготовленныхЭД.УстановитьПараметр("СтатусПакета", Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке);
	
	Результат = ЗапросПодготовленныхЭД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция НайтиИменаФайловПодписей(ИмяФайлаДанных, ИменаФайловПодписей)
	
	ИменаПодписей = Новый Массив;
	
	Файл = Новый Файл(ИмяФайлаДанных);
	ИмяБезРасширения = Файл.ИмяБезРасширения;
	
	Для Каждого ИмяФайлаПодписи Из ИменаФайловПодписей Цикл
		Если СтрНайти(ИмяФайлаПодписи, ИмяБезРасширения) > 0 Тогда
			ИменаПодписей.Добавить(ИмяФайлаПодписи);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФайлаПодписи Из ИменаПодписей Цикл
		ИменаФайловПодписей.Удалить(ИменаФайловПодписей.Найти(ИмяФайлаПодписи));
	КонецЦикла;
	
	Возврат ИменаПодписей;
	
КонецФункции

Процедура СохранитьПодписи(ФайлСсылка,
							ПолноеИмяФайла,
							МассивСтруктурПодписей,
							АдресКаталога,
							СоответствиеФайлЭД,
							БезИсходногоФайла = Ложь,
							ЭтоПроизвольныйЭД = Ложь)
	
	ОсновнойФайл = Новый Файл(ПолноеИмяФайла);
	Путь = ОсновнойФайл.Путь;
	МассивИмен = Новый Массив;
	
	Если НЕ БезИсходногоФайла Тогда
		МассивИмен.Добавить(ОсновнойФайл.Имя);
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
		ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
		
		Сч = Сч + 1;
		Если ПустаяСтрока(ИмяФайлаПодписи) Тогда
			Если ЗначениеЗаполнено(ЭтоПроизвольныйЭД) И ЭтоПроизвольныйЭД И Прав(ПолноеИмяФайла, 4) = ".zip" Тогда
				ИмяФайлаПодписи = Строка(ФайлСсылка)+"ЭП" + "-" + Строка(СтруктураПодписи.КомуВыданСертификат) + ".p7s";
			Иначе
				ИмяФайлаПодписи = Строка(ФайлСсылка) + "-" + Сч + ".p7s";
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаПодписи = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(ИмяФайлаПодписи);
		ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
		ИмяФайлаПодписи = ЗаменитьСимволыОтсутствующиеВКодировкеТекста(ИмяФайлаПодписи);
		
		ПолныйПутьПодписи = Путь;
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
		ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
		
		ФайлПоИмени = Новый Файл(ПолныйПутьПодписи);
		ФайлСуществует = ФайлПоИмени.Существует();
		
		Счетчик = 0;
		ИмяФайлаПодписиБезПостфикса = ФайлПоИмени.ИмяБезРасширения;
		Пока ФайлСуществует Цикл
			Счетчик = Счетчик + 1;
			
			ИмяФайлаПодписи = ИмяФайлаПодписиБезПостфикса + " (" + Строка(Счетчик) + ")" + ".p7s";
			ИмяФайлаПодписи = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайлаПодписи, "");
			
			ПолныйПутьПодписи = Путь;
			ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолныйПутьПодписи);
			ПолныйПутьПодписи = ПолныйПутьПодписи + ИмяФайлаПодписи;
			
			ФайлДляПроверки = Новый Файл(ПолныйПутьПодписи);
			ФайлСуществует = ФайлДляПроверки.Существует();
		КонецЦикла;
		
		Файл = Новый Файл(ПолныйПутьПодписи);
		МассивИмен.Добавить(Файл.Имя);
		
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ФайлСсылка.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ФайлСсылка.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(Файл.Имя, СтруктураПараметровЭД);
		Иначе
			// СоответствиеФайлЭД - структура файлов ЭД.
			НоваяСтрока = СоответствиеФайлЭД.ГлавныйФайлПодписи.Добавить();
			НоваяСтрока.Имя = "";
			НоваяСтрока.Путь = Файл.Имя
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
		
		СтруктураПодписи.Подпись.Записать(ПолныйПутьПодписи);
	КонецЦикла;
	
КонецПроцедуры

Функция СохранитьФайлКак(ДанныеФайла,
						ИмяКаталога,
						ПрисоединенныйФайл = Неопределено,
						ЭтоПроизвольныйЭД = Неопределено,
						СоответствиеФайлЭД = Неопределено)
	
	Файл = Новый Файл(ИмяКаталога);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
	РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
	
	ИмяПолучаемогоФайла = ДанныеФайла.ИмяФайла;
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанныеФайла.Записать(ИмяКаталога + ИмяПолучаемогоФайла);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		Если ТипЗнч(СоответствиеФайлЭД) = Тип("Соответствие") Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ДанныеФайла.ИмяФайла, СтруктураПараметровЭД);
		Иначе
			СоответствиеФайлЭД.Вставить("ГлавныйФайл", ДанныеФайла.ИмяФайла);
		КонецЕсли;
		
		ПутьКФайлу = Файл.Путь;
		Если Прав(ПутьКФайлу,1) <> "\" Тогда
			ПутьКФайлу = ПутьКФайлу + "\";
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоПроизвольныйЭД = Истина Тогда
		
		ИмяФайла      = ДанныеФайла.Наименование;
		ИмяКонтейнера = ИмяКаталога + ИмяФайла + ".zip";
		ИмяАрхива     = ИмяФайла + ".zip";
		
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ИмяКонтейнера = ИмяКаталога+ИмяФайла+"ЭП.zip";
			ИмяАрхива     = ИмяФайла + "ЭП.zip";
		КонецЕсли;
		
		АрхивКонтейнер = Новый ЗаписьZipФайла(ИмяКонтейнера);
		АрхивКонтейнер.Добавить(ИмяКаталога + ИмяПолучаемогоФайла );
		
		АрхивКонтейнер.Записать();
		Если ИмяФайла + ".zip" = ИмяПолучаемогоФайла Тогда
			ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяКаталога + ИмяПолучаемогоФайла);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			СтруктураПараметровЭД = Новый Структура;
			СтруктураПараметровЭД.Вставить("НомерЭД", ПрисоединенныйФайл.НомерЭД);
			СтруктураПараметровЭД.Вставить("УникальныйИД", ПрисоединенныйФайл.УникальныйИД);
			
			СоответствиеФайлЭД.Вставить(ИмяАрхива, СтруктураПараметровЭД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяКаталога + ИмяПолучаемогоФайла;
КонецФункции

Процедура УстановитьСсылкуДляВладельцаВРегистреСостояний(СсылкаНаОбъект, ЭлектронныйДокумент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Добавить();
			НоваяЗаписьНабора.СсылкаНаОбъект = СсылкаНаОбъект;
		Иначе
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		КонецЕсли;
		
		СтруктураИнформации = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПрисоединенныйФайл(ЭлектронныйДокумент));
		
		НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
		НоваяЗаписьНабора.СостояниеВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СостояниеЭДО");
		НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураИнформации.СНашейСтороны;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураИнформации.СоСтороныДругогоУчастника;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция СоздатьТекстОписиЭД(Конверт, СоответствиеВложений, СоответствиеФайлЭД)
	
	РеквизитыКонверта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Конверт, "Отправитель, Получатель");
	ЦентрОбменаЭД =    РеквизитыКонверта.Отправитель;
	УчастникОбменаЭД = РеквизитыКонверта.Получатель;
	
	ИмяФайла = ТекущееИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайла);
	ЗаписьXML.ЗаписатьНачалоЭлемента("ТранспортнаяИнформация");
	// Имя документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДатаИВремяФормирования");
	ЗаписьXML.ЗаписатьТекст(ПреобразоватьДатуВКаноническийВид(ТекущаяДатаСеанса()));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	// Идентификатор документа
	ЗаписьXML.ЗаписатьНачалоЭлемента("Идентификатор");
	ЗаписьXML.ЗаписатьТекст(Строка(Конверт.УникальныйИдентификатор()));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	// Дата получения
	ЗаписьXML.ЗаписатьНачалоЭлемента("Отправитель");
	ЗаписьXML.ЗаписатьТекст(ЦентрОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Получатель");
	ЗаписьXML.ЗаписатьТекст(УчастникОбменаЭД);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	// Шифрование по документам
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкиШифрования");
	Для Каждого ВложениеДокумент Из Конверт.ЭлектронныеДокументы Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументШифрования");
		ЗаписьXML.ЗаписатьТекст(Строка(ВложениеДокумент.ЭлектронныйДокумент));
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Зашифрован");
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьТекст("Да");
		Иначе
			ЗаписьXML.ЗаписатьТекст("Нет");
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		Если Конверт.ДанныеЗашифрованы Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("СертификатШифрования");
			ЗаписьXML.ЗаписатьТекст(Строка(Конверт.СертификатШифрования));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДокументыИПодписи");
	Для Каждого Вложение Из СоответствиеВложений Цикл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
		ЗаписьXML.ЗаписатьТекст(Вложение.Ключ);
		
		СтруктураПараметровЭД = СоответствиеФайлЭД.Получить(Вложение.Ключ);
		НомерЭД = ""; УникальныйИД = "";
		Если СтруктураПараметровЭД.Свойство("НомерЭД", НомерЭД) И ЗначениеЗаполнено(НомерЭД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("НомерЭД");
			ЗаписьXML.ЗаписатьТекст(НомерЭД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		Если СтруктураПараметровЭД.Свойство("УникальныйИД", УникальныйИД) И ЗначениеЗаполнено(УникальныйИД) Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("УникальныйИД");
			ЗаписьXML.ЗаписатьТекст(УникальныйИД);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
		Для Каждого Подпись Из Вложение.Значение Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Подпись");
			ЗаписьXML.ЗаписатьТекст(Подпись);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПолучитьПоследнююВерсиюЭДПоВладельцу(СсылкаНаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросЭД = Новый Запрос;
	ЗапросЭД.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	ЗапросЭД.Текст =

	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НомерВерсииЭД КАК НомерВерсииЭД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭлектронныйДокументИсходящийДокументыОснования.Ссылка.НомерВерсииЭД КАК НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭлектронныйДокументВходящийДокументыОснования.Ссылка.НомерВерсииЭД
	|	ИЗ
	|		Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|	ГДЕ
	|		ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование = &СсылкаНаОбъект) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерВерсииЭД УБЫВ";
	
	Результат = ЗапросЭД.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.НомерВерсииЭД;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Записывает в журнал регистрации событие записи ЭД.
//
// Параметры:
//  СсылкаНаЭД - ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаписатьСобытиеЖурналаРегистрацииПоОбменуЭД(СсылкаНаЭД)
	
	Если ТипЗнч(СсылкаНаЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналСобытийЭД");
			ЭлементБлокировки.УстановитьЗначение("ПрисоединенныйФайл", СсылкаНаЭД);
			Блокировка.Заблокировать();
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ЖурналСобытийЭД.НомерЗаписи), 0) + 1 КАК НомерЗаписи
			|ИЗ
			|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
			|ГДЕ
			|	ЖурналСобытийЭД.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", СсылкаНаЭД);
			НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
			МенеджерЗаписи                    = РегистрыСведений.ЖурналСобытийЭД.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНаЭД;
			МенеджерЗаписи.НомерЗаписи        = НомерЗаписи;
			МенеджерЗаписи.ВладелецЭД         = СсылкаНаЭД.ВладелецФайла;
			МенеджерЗаписи.СтатусЭД           = СсылкаНаЭД.СтатусЭД;
			МенеджерЗаписи.Дата               = ТекущаяДатаСеанса();
			МенеджерЗаписи.Пользователь       = Пользователи.ТекущийПользователь();
			МенеджерЗаписи.Ответственный      = СсылкаНаЭД.Автор;
			МенеджерЗаписи.Комментарий        = СсылкаНаЭД.Описание;
			МенеджерЗаписи.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на временное хранилище двоичных данных архива с дополнительными файлами каталога.
//
// Параметры:
//  МассивФайлов - Массив - ссылки на временное хранилище дополнительного файла.
//
// Возвращаемое значение:
//  Строка - ссылка на временное хранилище.
//
Функция АрхивДополнительныхФайлов(МассивФайлов) Экспорт
	
	ВременнаяПапка = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременнаяПапка);
	Попытка
		Для Каждого Элемент Из МассивФайлов Цикл
			ВременнаяПапкаТовара = ВременнаяПапка + "\" + Элемент.ИдТовара + "\";
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Элемент.АдресВременногоХранилища);
			СоздатьКаталог(ВременнаяПапкаТовара);
			ДвоичныеДанныеФайла.Записать(ВременнаяПапкаТовара + Элемент.ИмяФайла);
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выгрузить дополнительные файлы каталога.'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла на диск'"),
			ТекстОшибки, ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	Архив = ПолучитьИмяВременногоФайла();
	Zip = Новый ЗаписьZipФайла(Архив);
	Zip.Добавить(
			ВременнаяПапка + "\*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	Попытка
		Zip.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС
			+ НСтр("ru = 'Проверьте поддержку русского языка в региональных настройках ОС для non-Unicode programs
			|и наличие доступа к каталогу временных файлов.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'запись файла архива на диск'"),
																					ТекстОшибки,
																					ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременнаяПапка);
		Возврат Неопределено;
	КонецПопытки;
	ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(Архив);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ВременнаяПапка);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Архив);
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеАрхива);
	
КонецФункции

Функция ВерсияПакетаЭД(ЭД) Экспорт
	
	Если ТипЗнч(ЭД.ВладелецФайла) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		
		ВерсияФормата = ФорматПакетаЭД(ЭД.Ссылка);
		
	Иначе
		
		ВерсияФормата = Перечисления.ВерсииФорматаПакетаЭД.Версия30;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ФорматПакетаЭД(ЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка.ВерсияФорматаПакета КАК ВерсияФорматаПакета
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		ВерсияФормата = Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВерсияФормата = Выборка.ВерсияФорматаПакета;
		
	КонецЕсли;
	
	Возврат ВерсияФормата;
	
КонецФункции

Функция ЭтоФНС(ВидЭД) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
		Или ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.УПД
		Или ВидЭД = Перечисления.ВидыЭД.УКД
		Или ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
		Или ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		Результат = Истина;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет является ли ЭД титулом.
Функция ЭтоТитулФНС(ЭлектронныйДокумент) Экспорт
	
	Результат = Ложь;
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Структура") Тогда
		СвойстваЭлектронногоДокумента = ЭлектронныйДокумент;
	Иначе
		СвойстваЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД,ТипЭлементаВерсииЭД");
	КонецЕсли;
	
	Если СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или (СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				И СвойстваЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
		ИЛИ ((СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.УПД
			ИЛИ СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.УКД
			ИЛИ СвойстваЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
			И (СвойстваЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			ИЛИ СвойстваЭлектронногоДокумента.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД)) Тогда
			
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Определяется является ли ЭД ответным титулом.
Функция ЭтоОтветныйТитул(ДанныеЭД) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(ДанныеЭД) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
		ТипЭлементаВерсииЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЭД, "ТипЭлементаВерсииЭД");
	Иначе
		ТипЭлементаВерсииЭД = ДанныеЭД;
	КонецЕсли;
	
	Если ТипыОтветныхТитулов().Найти(ТипЭлементаВерсииЭД) <> Неопределено Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ответный титул.
// Параметры:
//  ПервыйТитул - ЭД вида Торг-12 титул продавца, Акт титул исполнителя, СоглашениеОбИзмененииСтоимостиОтправитель
// Возвращаемое значение:
//  Ссылка на электронный документ вида Торг-12 титул покупателя, Акт титул заказчика, СоглашениеОбИзмененииСтоимостиПолучатель
//   если такой документ есть или неопределено, если документа нет.
//
Функция ВторойТитулДокумента(ПервыйТитул) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ВторойТитул
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&МассивТиповТитулов)";
	
	МассивТиповТитулов = Новый Массив;
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	МассивТиповТитулов.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель);
	Запрос.УстановитьПараметр("МассивТиповТитулов",МассивТиповТитулов);
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", ПервыйТитул);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		ВторойТитул = Неопределено;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ВторойТитул = Выборка.ВторойТитул;
		
	КонецЕсли;
	
	Возврат ВторойТитул
	
КонецФункции

Функция ЭтоСчетНаОплату(СсылкаНаЭД)
	
	Результат = Ложь;
	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоCMLДокумент(СсылкаНаЭД)
	
	Результат = Ложь;

	ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "ВидЭД");
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выводит сообщение пользователю об отсутствии настройки ЭДО.
// Параметры
// СтруктураЭД - структура - параметры, которыми по которым ищется настройка ЭД
// Источник - ДокументСсылка, СправочникаСсылка - объект информационной базы, которому принадлежит э.д.
//
Процедура СообщитьОбОтсутствииСоглашенияЭД(ПараметрыЭД, Источник)
	
	ПравильноЗаполнен = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД, ПравильноЗаполнен);
	
	Если НЕ ПравильноЗаполнен Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонСообщения = НСтр("ru = 'Обработка %1.
								 |Операция не выполнена.
								 |Необходимо создать ""Настройку ЭДО"" с реквизитами:'");
	
	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Источник);
	
	ТаблицаПараметров = Новый ТаблицаЗначений();
	ТаблицаПараметров.Колонки.Добавить("Ключ");
	ТаблицаПараметров.Колонки.Добавить("Значение");
	ТаблицаПараметров.Колонки.Добавить("Порядок");
	
	ЭтоСчетФактураВыданный = Ложь;
	Если ПараметрыЭД.Свойство("ЭтоСчетФактураВыданный") И ЗначениеЗаполнено(ПараметрыЭД.ЭтоСчетФактураВыданный) Тогда
		ЭтоСчетФактураВыданный = ПараметрыЭД.ЭтоСчетФактураВыданный;
	КонецЕсли;
	
	Для Каждого ТекПараметр Из ПараметрыЭД Цикл
		
		Порядок = 0;
		Если НРег(ТекПараметр.Ключ) = НРег("Организация") Тогда
			Порядок = 1;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Партнер") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 2;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
			Порядок = 3;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ДоговорКонтрагента") Тогда
			Порядок = 4;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ВидЭД") И НЕ ЭтоСчетФактураВыданный Тогда
			Порядок = 5;
		ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") И ЭтоСчетФактураВыданный Тогда
			Порядок = 0.5;
		КонецЕсли;
		
		Если Порядок > 0 Тогда
			СтрокаПараметров = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПараметров, ТекПараметр);
			Если ЭтоСчетФактураВыданный Тогда
				Если НРег(ТекПараметр.Ключ) = НРег("ЭтоСчетФактураВыданный") Тогда
					СтрокаПараметров.Ключ = НСтр("ru = 'Способ обмена'");
					СтрокаПараметров.Значение = НСтр("ru = 'через оператора ЭДО'");
				ИначеЕсли НРег(ТекПараметр.Ключ) = НРег("Контрагент") Тогда
					СтрокаПараметров.Ключ = "Участник";
				КонецЕсли;
				ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				Если ТекПараметр.Ключ = "Организация" Тогда
					СтрокаПараметров.Ключ = "Организация-отправитель";
				ИначеЕсли ТекПараметр.Ключ = "Контрагент" Тогда
					СтрокаПараметров.Ключ = "Организация-получатель";
				КонецЕсли;
			КонецЕсли;
			СтрокаПараметров.Порядок = Порядок;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПараметров.Сортировать("Порядок");
	Для Каждого СтрокаПараметров Из ТаблицаПараметров Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров.Значение) Тогда
			Текст = Текст + Символы.ПС + НСтр("ru = '<%1>: %2'");
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, СтрокаПараметров.Ключ, СтрокаПараметров.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(Текст);
	
КонецПроцедуры

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаНастроекОбменаСПриоритетами(ТекстЗапроса)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Организация,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Контрагент,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидЭД,
	|	&НаправлениеЭД КАК НаправлениеЭД,
	|	ИСТИНА КАК Подписывать,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяОтветнаяПодпись КАК ТребуетсяПодтверждение,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещение,
	|	ИСТИНА КАК ОжидатьКвитанциюОДоставке,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторКонтрагента,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОрганизации,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20) КАК ВерсияРегламентаЭДО,
	|	0 КАК Приоритет,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата КАК ВерсияФормата,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30) КАК ВерсияФорматаПакета,
	|	ИСТИНА КАК НастройкаЭДОДействует,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания КАК МаршрутПодписания,
	|	ОператорыЭДО.ИНН КАК ИННОператора,
	|	ОператорыЭДО.КПП КАК КППОператора,
	|	ОператорыЭДО.Представление КАК НаименованиеОператора,
	|	ОператорыЭДО.ИдентификаторОператора КАК КодОператора,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК ДоговорКонтрагента,
	|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУПД КАК ИспользоватьУПД,
	|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУКД КАК ИспользоватьУКД,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ОператорыЭДО.ОГРН КАК ОГРН,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Формировать КАК Формировать,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
	|	ФорматыЭлектронныхДокументов.ЭтоУПД КАК ЭтоУПД,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
	|			ПО УчетныеЗаписиЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = УчетныеЗаписиЭДО.Организация
	|			И НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = НастройкиОтправкиЭлектронныхДокументов.Отправитель
	|			И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = НастройкиОтправкиЭлектронныхДокументов.Получатель
	|			И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = НастройкиОтправкиЭлектронныхДокументов.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|		ПО НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата = ФорматыЭлектронныхДокументов.Формат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Организация
	|						И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Контрагент
	|						И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &ДоговорКонтрагента
	|			КОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Организация
	|					И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Контрагент
	|					И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &ДоговорКонтрагента
	|					И ВЫБОР
	|						КОГДА &ЭтоСлужебныйЭД
	|							ТОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидЭДВладельца
	|						ИНАЧЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидЭД
	|					КОНЕЦ
	|				ТОГДА ИСТИНА
	|			КОГДА НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|					И НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Организация
	|					И &ПартнерНастройки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНастройки.Отправитель,
	|	ДополнительныеНастройки.Получатель,
	|	ДополнительныеНастройки.ВидДокумента,
	|	&НаправлениеЭД,
	|	ИСТИНА,
	|	ДополнительныеНастройки.ТребуетсяОтветнаяПодпись,
	|	ДополнительныеНастройки.ТребуетсяИзвещениеОПолучении,
	|	ИСТИНА,
	|	ДополнительныеНастройки.ИдентификаторПолучателя,
	|	ДополнительныеНастройки.ИдентификаторОтправителя,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииРегламентаОбмена1С.Версия20),
	|	0,
	|	ДополнительныеНастройки.ВерсияФормата,
	|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30),
	|	ИСТИНА,
	|	ДополнительныеНастройки.МаршрутПодписания,
	|	ОператорыЭДО.ИНН,
	|	ОператорыЭДО.КПП,
	|	ОператорыЭДО.Представление,
	|	ОператорыЭДО.ИдентификаторОператора,
	|	ДополнительныеНастройки.Договор,
	|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУПД,
	|	НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУКД,
	|	ДополнительныеНастройки.СпособОбменаЭД,
	|	ОператорыЭДО.ОГРН,
	|	ДополнительныеНастройки.Формировать,
	|	ДополнительныеНастройки.ВыгружатьДополнительныеСведения,
	|	ФорматыЭлектронныхДокументов.ЭтоУПД,
	|	ДополнительныеНастройки.ВерсияФорматаУстановленаВручную,
	|	ДополнительныеНастройки.ЗаполнениеКодаТовара
	|ИЗ
	|	ДополнительныеНастройки КАК ДополнительныеНастройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
	|			ПО УчетныеЗаписиЭДО.ОператорЭДО = ОператорыЭДО.ИдентификаторОператора
	|		ПО ДополнительныеНастройки.Отправитель = УчетныеЗаписиЭДО.Организация
	|			И ДополнительныеНастройки.ИдентификаторОтправителя = УчетныеЗаписиЭДО.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
	|		ПО ДополнительныеНастройки.Отправитель = НастройкиОтправкиЭлектронныхДокументов.Отправитель
	|			И ДополнительныеНастройки.Получатель = НастройкиОтправкиЭлектронныхДокументов.Получатель
	|			И ДополнительныеНастройки.Договор = НастройкиОтправкиЭлектронныхДокументов.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
	|		ПО ДополнительныеНастройки.ВерсияФормата = ФорматыЭлектронныхДокументов.Формат
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ДополнительныеНастройки.Отправитель = &Организация
	|						И ДополнительныеНастройки.Получатель = &Контрагент
	|						И ДополнительныеНастройки.Договор = &ДоговорКонтрагента
	|			КОГДА ДополнительныеНастройки.Отправитель = &Организация
	|					И ДополнительныеНастройки.Получатель = &Контрагент
	|					И ДополнительныеНастройки.Договор = &ДоговорКонтрагента
	|					И ВЫБОР
	|						КОГДА &ЭтоСлужебныйЭД
	|							ТОГДА ДополнительныеНастройки.ВидДокумента = &ВидЭДВладельца
	|						ИНАЧЕ ДополнительныеНастройки.ВидДокумента = &ВидЭД
	|					КОНЕЦ
	|				ТОГДА ИСТИНА
	|			КОГДА ДополнительныеНастройки.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|					И ДополнительныеНастройки.Отправитель = &Организация
	|					И &ПартнерДополнительныеНастройки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	ВидыЭДЭП.ВидЭД КАК ВидДокумента,
	|	Сертификаты.Организация КАК Организация,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|			ПО (ВидыЭДЭП.СертификатЭП = Сертификаты.Ссылка)
	|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = Сертификаты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ПО СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = ВТ_ТЧ_Соглашения.ИдентификаторОрганизации
	|ГДЕ
	|	НЕ Сертификаты.ПометкаУдаления
	|	И НЕ Сертификаты.Отозван
	|	И ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВидыЭДЭП.ВидЭД = &ВидЭД
	|		КОНЕЦ
	|	И Сертификаты.Пользователь В (&Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), &ПользовательНеУказан)
	|	И ВидыЭДЭП.Использовать
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_ТЧ_Соглашения.Организация КАК Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ВТ_ТЧ_Соглашения.ВидЭД КАК ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД КАК НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
	|	ВТ_ТЧ_Соглашения.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
	|	ВТ_ТЧ_Соглашения.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL
	|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольПолучен,
	|	ВТ_Сертификаты.ПарольПользователя КАК ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОрганизацииПолучателя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ПарольОрганизацииПолучателяПолучен,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОрганизацииПолучателя,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ВТ_ТЧ_Соглашения.ВерсияФормата КАК ВерсияФормата,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаПакета КАК ВерсияФорматаПакета,
	|	ВТ_ТЧ_Соглашения.НастройкаЭДОДействует КАК НастройкаЭДОДействует,
	|	ВТ_ТЧ_Соглашения.МаршрутПодписания КАК МаршрутПодписания,
	|	ВТ_ТЧ_Соглашения.ИННОператора КАК ИННОператора,
	|	ВТ_ТЧ_Соглашения.КППОператора КАК КППОператора,
	|	ВТ_ТЧ_Соглашения.НаименованиеОператора КАК НаименованиеОператора,
	|	ВТ_ТЧ_Соглашения.КодОператора КАК КодОператора,
	|	ВТ_ТЧ_Соглашения.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИспользоватьУПД КАК ИспользоватьУПД,
	|	ВТ_ТЧ_Соглашения.ИспользоватьУКД КАК ИспользоватьУКД,
	|	ВТ_ТЧ_Соглашения.ОГРН КАК ОГРН,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК СтатусПодключения,
	|	ВТ_ТЧ_Соглашения.Формировать КАК Формировать,
	|	ВТ_ТЧ_Соглашения.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
	|	ВТ_ТЧ_Соглашения.ЭтоУПД КАК ЭтоУПД,
	|	ВТ_ТЧ_Соглашения.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
	|	ВТ_ТЧ_Соглашения.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ПО ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
	|			И ВТ_ТЧ_Соглашения.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
	|					И ВЫБОР
	|						КОГДА &ЭтоСлужебныйЭД
	|							ТОГДА ВЫБОР
	|									КОГДА &ДокументФНС
	|										ТОГДА ИСТИНА
	|									ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭДВладельца
	|								КОНЕЦ
	|						ИНАЧЕ ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
	|					КОНЕЦ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ВТ_ТЧ_Соглашения.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Интеркампани)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено)
	|							ИЛИ ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Ошибка)
	|						ТОГДА ЛОЖЬ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстЗапросаПартнеры = "ИСТИНА";
	ТекстЗапросаПартнерыДополнительныеНастройки = "ИСТИНА";
	Если ОбменСКонтрагентамиПовтИсп.ИспользуетсяДополнительнаяАналитикаКонтрагентовСправочникПартнеры() Тогда
		ТекстЗапросаПартнеры = "&Партнер <> НЕОПРЕДЕЛЕНО
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель.Партнер = &Партнер";
		ТекстЗапросаПартнерыДополнительныеНастройки = "&Партнер <> НЕОПРЕДЕЛЕНО
		|	И ДополнительныеНастройки.Получатель.Партнер = &Партнер";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПартнерНастройки", ТекстЗапросаПартнеры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПартнерДополнительныеНастройки", ТекстЗапросаПартнерыДополнительныеНастройки);
	
КонецПроцедуры

// Добавление нового параметра в ПараметрыКлиентаНаСервере.
//
// Параметры:
//  ИмяПараметра      - Произвольный - имя добавляемого параметра.
//  ЗначениеПараметра - Произвольный - значение добавляемого параметра.
//
Процедура ПоместитьПараметрВПараметрыКлиентаНаСервере(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ПараметрыОбменСКонтрагентами = Неопределено ИЛИ ТипЗнч(ПараметрыОбменСКонтрагентами) <> Тип("ФиксированноеСоответствие") Тогда
		// Параметр еще не установлен.
		ПараметрыОбменСКонтрагентами = Новый Соответствие;
	Иначе
		ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
	КонецЕсли;
	
	ПараметрыОбменСКонтрагентами.Вставить(ИмяПараметра, ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра));
	ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
	ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение хранящегося в ПараметрыКлиентаНаСервере параметра.
//
// Параметры:
//   ИмяПараметра                  - Произвольный - имя добавляемого параметра.
//   УдалитьПараметрПослеПолучения - Булево - признак необходимости удаления параметра из ПараметрыКлиентаНаСервере,
//                                  после получения значения.
//
// Возвращаемое значение:
//   Произвольный, Неопределено - хранимое в параметре значение, если параметра с таким именем нет, то неопределено.
//
Функция ПараметрИзПараметрыКлиентаНаСервере(ИмяПараметра, УдалитьПараметрПослеПолучения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыКлиентаНаСервере = Новый Соответствие(ПараметрыСеанса.ПараметрыКлиентаНаСервере);
	
	ЗначениеПараметра = Неопределено;
	
	ПараметрыОбменСКонтрагентами = ПараметрыКлиентаНаСервере.Получить("ОбменСКонтрагентами");
	Если ТипЗнч(ПараметрыОбменСКонтрагентами) = Тип("ФиксированноеСоответствие") Тогда
		ЗначениеПараметра = ПараметрыОбменСКонтрагентами.Получить(ИмяПараметра);
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра = ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра);
			Если УдалитьПараметрПослеПолучения И ЗначениеПараметра <> Неопределено Тогда
				ПараметрыОбменСКонтрагентами = Новый Соответствие(ПараметрыОбменСКонтрагентами);
				ПараметрыОбменСКонтрагентами.Удалить(ИмяПараметра);
				ПараметрыКлиентаНаСервере.Вставить("ОбменСКонтрагентами", Новый ФиксированноеСоответствие(ПараметрыОбменСКонтрагентами));
				ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(ПараметрыКлиентаНаСервере);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗначениеПараметра;
	
КонецФункции

Функция ПреобразоватьКоллекциюЗначенийВФиксированную(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("Соответствие") Тогда
		ВозвращаемоеЗначение = Новый ФиксированноеСоответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Структура") Тогда
		ВозвращаемоеЗначение = Новый ФиксированнаяСтруктура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		ВозвращаемоеЗначение = Новый ФиксированныйМассив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПреобразоватьФиксированнуюКоллекциюЗначенийВПростую(ЗначениеПараметра)
	
	Если ТипЗнч(ЗначениеПараметра) = Тип("ФиксированноеСоответствие") Тогда
		ВозвращаемоеЗначение = Новый Соответствие(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированнаяСтруктура") Тогда
		ВозвращаемоеЗначение = Новый Структура(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ФиксированныйМассив") Тогда
		ВозвращаемоеЗначение = Новый Массив(ЗначениеПараметра);
	Иначе
		ВозвращаемоеЗначение = ЗначениеПараметра;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Только для внутреннего использования
Функция АктуальнаяВерсияФорматаЭД(ВидЭлектронногоДокумента) Экспорт
	
	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	СтрокиДействующихФорматов = ТаблицаФорматов.НайтиСтроки(
		Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭлектронногоДокумента, Истина));
		
	Если СтрокиДействующихФорматов.Количество() Тогда
		Результат = СтрокиДействующихФорматов[СтрокиДействующихФорматов.Количество() - 1].ИдентификаторФормата;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьПараметрыЭД(ДокументИБ, ПараметрыЭД)
	
	Если Не ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИБ)) Тогда
		СсылкаНаОбъект = ДокументИБ.Ссылка;
	Иначе
		СсылкаНаОбъект = ДокументИБ
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент КАК ЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.ЭД) Тогда
		ЭД = Выборка.ЭД;
		СвойстваЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД, "Организация, Контрагент");
		
		ПараметрыЭД.Контрагент = СвойстваЭД.Контрагент;
		ПараметрыЭД.Организация = СвойстваЭД.Организация;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоВидЭДБезТитула(ВидЭД)

	ВидыЭДБезТитула = Новый Массив;
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.АктВыполненныхРабот);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.КаталогТоваров);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ТОРГ12);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ПрикладнойЭД);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.ЗапросКоммерческихПредложений);
	ВидыЭДБезТитула.Добавить(Перечисления.ВидыЭД.КоммерческоеПредложение);
	
	Возврат ВидыЭДБезТитула.Найти(ВидЭД) <> Неопределено;

КонецФункции 

Процедура СформироватьXMLФайл(ТекЭлемент, МассивСтруктурВозврата, ПараметрыОбмена, ДопПараметры)
	
	ОшибкиПриФормированииДокументов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДопПараметры, "ОшибкиПриФормированииДокументов", Новый Массив);
	
	МассивОбъектовДляВыгрузки = ТекЭлемент.Значение;
	ЕстьОшибки                = Ложь;
	
	Для Каждого ОбъектДляВыгрузки Из МассивОбъектовДляВыгрузки Цикл
		
		Начало = ОценкаПроизводительности.НачатьЗамерВремени();
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров И НЕ ДопПараметры.Свойство("БыстрыйОбмен") Тогда
			НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДляВыгрузки);
		Иначе
			НастройкиОбмена = ПараметрыОбмена.Получить(ОбъектДляВыгрузки);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
			Продолжить
		КонецЕсли;
		
		Если НастройкиОбмена.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.БыстрыйОбмен Тогда
			ОбменСКонтрагентамиСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(ОбъектДляВыгрузки, , Истина);
		КонецЕсли;
		
		ПараметрыФормирования = НовыеПараметрыФормированияЭлектронногоДокумента();
		ПараметрыФормирования.НастройкиОбмена = НастройкиОбмена;
		
		ЗначениеПараметра = Неопределено;
		
		Если ДопПараметры.Свойство("ИспользоватьПомощникУстраненияОшибок", ЗначениеПараметра) Тогда
			ПараметрыФормирования.ИспользоватьПомощникУстраненияОшибок = ЗначениеПараметра;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("ДополнительныеДанные", ЗначениеПараметра) Тогда
			ПараметрыФормирования.ДополнительныеДанные = ЗначениеПараметра;
		КонецЕсли;
		
		Если Не НастройкиОбмена.Формировать Тогда
			
			Ошибка = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки();
			
			ЗначенияКлюча = Новый Структура;
			ЗначенияКлюча.Вставить("Отправитель"     , НастройкиОбмена.Организация);
			ЗначенияКлюча.Вставить("Получатель"      , НастройкиОбмена.Контрагент);
			ЗначенияКлюча.Вставить("Договор"         , НастройкиОбмена.ДоговорКонтрагента);
			ЗначенияКлюча.Вставить("ВидДокумента"    , НастройкиОбмена.ВидЭД);
			ЗначенияКлюча.Вставить("ПрикладнойВидЭД" , НастройкиОбмена.ПрикладнойВидЭД);
			
			Ошибка.КлючСообщения = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьКлючЗаписи(ЗначенияКлюча);
			Ошибка.ТекстОшибки = НСтр("ru = 'Документ заблокирован для отправки'");
			
			Ошибки = Новый Массив;
			Ошибки.Добавить(Ошибка);
			ОшибкиЗаполнения = ОбменСКонтрагентамиВнутренний.НовыеПараметрыОшибокЗаполнения(Ошибки);
			
			Если ПараметрыФормирования.ИспользоватьПомощникУстраненияОшибок
					И ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
				Результат = ОбменСКонтрагентамиВнутренний.НовыеПараметрыПомощникаУстраненияОшибок(ОбъектДляВыгрузки, ПараметрыФормирования, ОшибкиЗаполнения);
				
			ОшибкиПриФормированииДокументов.Добавить(Результат.ОшибкиПриФормированииДокумента);
			КонецЕсли;
		
			ЕстьОшибки = Истина;
			Продолжить;
		КонецЕсли;
		
		ОшибкиЗаполнения = ОбменСКонтрагентамиВнутренний.НовыеПараметрыОшибокЗаполнения(Ошибки, "ОсновныеПоля");
		
		Если ПараметрыФормирования.ИспользоватьПомощникУстраненияОшибок
			И ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
			Результат = ОбменСКонтрагентамиВнутренний.НовыеПараметрыПомощникаУстраненияОшибок(ОбъектДляВыгрузки, ПараметрыФормирования, ОшибкиЗаполнения);
			
			ОшибкиПриФормированииДокументов.Добавить(Результат.ОшибкиПриФормированииДокумента);
		КонецЕсли;
		
		Предупреждения = ПредупрежденияПоНастройкеОбменаНаДату(НастройкиОбмена);
		ПрерватьФормирование = Ложь;
		
		ПредупрежденияПоДокументу = Неопределено;
		Если Предупреждения.Свойство("ПоДокументу", ПредупрежденияПоДокументу) Тогда
			
			Ошибки = Новый Массив;
			Для Каждого Предупреждение Из ПредупрежденияПоДокументу Цикл
				
				ДанныеОшибки = Новый Структура("ТекстОшибки, Заблокировать","", Ложь);
				
				ДанныеОшибки.ТекстОшибки = ПредставлениеПредупрежденияПоИмени(Предупреждение.Ключ, Предупреждение.Значение, ДанныеОшибки.Заблокировать);
				
				Если ДанныеОшибки.Заблокировать Тогда
					ПрерватьФормирование = Истина;
				КонецЕсли;
				
				Ошибки.Добавить(ДанныеОшибки);
			КонецЦикла;
			
			ОшибкиЗаполнения = ОбменСКонтрагентамиВнутренний.НовыеПараметрыОшибокЗаполнения(Ошибки, "ПредупрежденияПоДокументу");
			
			Если ПараметрыФормирования.ИспользоватьПомощникУстраненияОшибок
					И ЗначениеЗаполнено(ОшибкиЗаполнения) Тогда
				Результат = ОбменСКонтрагентамиВнутренний.НовыеПараметрыПомощникаУстраненияОшибок(ОбъектДляВыгрузки, ПараметрыФормирования, ОшибкиЗаполнения);
				
				ОшибкиПриФормированииДокументов.Добавить(Результат.ОшибкиПриФормированииДокумента);
			КонецЕсли;
		
			Если ПрерватьФормирование Тогда
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетФактура
			Или ТекЭлемент.Ключ = Перечисления.ВидыЭД.УПД Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КорректировочныйСчетФактура
				Или ТекЭлемент.Ключ = Перечисления.ВидыЭД.УКД Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(
				ОбъектДляВыгрузки, ПараметрыФормирования);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			
			Если Не НастройкиОбмена.ЭтоУПД Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаТоваровПродавец(
					ОбъектДляВыгрузки, ПараметрыФормирования);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(
					ОбъектДляВыгрузки, ПараметрыФормирования);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не НастройкиОбмена.ЭтоУПД Тогда
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачаРаботИсполнитель(
					ОбъектДляВыгрузки, ПараметрыФормирования);
			Иначе
				Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(
					ОбъектДляВыгрузки, ПараметрыФормирования);
			КонецЕсли;
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавцаУКД(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьИнформациюПродавца(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.СчетНаОплату Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьСчетНаОплатуПоДокументу(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрайсЛист Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьПрайсПоДокументу(
			ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗаказТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказПоставщикуПоДокументу(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗаказКлиентаПоДокументу(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КаталогТоваров Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьКаталогНоменклатуры(ПараметрыФормирования, ДопПараметры);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьПередачуТоваровМеждуОрганизациями(
				ОбъектДляВыгрузки, ПараметрыФормирования);
				
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьВозвратТоваровМеждуОрганизациями(
				ОбъектДляВыгрузки, ПараметрыФормирования);
				
		ИначеЕсли ВРег(ТекЭлемент.Ключ) = ВРег("РеквизитыОрганизации") Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьРеквизитыОрганизации(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьФайлПрикладногоЭлектронногоДокумента(
				ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.АктОРасхождениях Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьАктОРасхожденияхПоДокументу(ОбъектДляВыгрузки, ПараметрыФормирования);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.ЗапросКоммерческихПредложений Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьЗапросКоммерческихПредложений(ОбъектДляВыгрузки,
				ПараметрыФормирования, ДопПараметры);
			
		ИначеЕсли ТекЭлемент.Ключ = Перечисления.ВидыЭД.КоммерческоеПредложение Тогда
			
			Результат = ОбменСКонтрагентамиВнутренний.СформироватьКоммерческоеПредложение(ОбъектДляВыгрузки, ПараметрыФормирования);
			
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.ОбменСКонтрагентамиСлужебный.СформироватьXMLФайл", Начало);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Продолжить;
			
		ИначеЕсли Результат.Свойство("ОшибкиПриФормированииДокумента") Тогда
			ЕстьОшибки = Истина;
			ДобавитьСтроку = Истина;
			Для Каждого СтрокаМассива Из ОшибкиПриФормированииДокументов Цикл
				
				Если СтрокаМассива.ДанныеДляОбработкиОшибок.Документ = Результат.ОшибкиПриФормированииДокумента.ДанныеДляОбработкиОшибок.Документ Тогда
					ДобавитьСтроку = Ложь;
					
					Для Каждого СтрокаОшибки Из Результат.ОшибкиПриФормированииДокумента.ОшибкиЗаполнения Цикл
						Если СтрокаМассива.ОшибкиЗаполнения.Свойство(СтрокаОшибки.Ключ) Тогда
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
								СтрокаМассива.ОшибкиЗаполнения[СтрокаОшибки.Ключ], СтрокаОшибки.Значение);
						Иначе
								СтрокаМассива.ОшибкиЗаполнения.Вставить(СтрокаОшибки.Ключ, СтрокаОшибки.Значение);
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ДобавитьСтроку Тогда
				ОшибкиПриФормированииДокументов.Добавить(Результат.ОшибкиПриФормированииДокумента);
			КонецЕсли;
			
		Иначе
			ВерсияРегламентаЭДО = "";
			Если НЕ НастройкиОбмена.Свойство("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО)
				ИЛИ НЕ ЗначениеЗаполнено(ВерсияРегламентаЭДО) Тогда
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			
			Результат.СтруктураЭД.Вставить("ВерсияРегламентаЭДО", ВерсияРегламентаЭДО);
			
			ТребуетсяПодтверждение = Ложь;
			Если НастройкиОбмена.Свойство("ТребуетсяПодтверждение") Тогда
				ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
			КонецЕсли;
			Если Результат.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД")
				И (Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
				ИЛИ Результат.СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ) Тогда
				ТребуетсяПодтверждение = Ложь;
			КонецЕсли;
			Если Результат.СтруктураЭД.Свойство("ПодтверждениеОбязательно") 
				И Результат.СтруктураЭД.ПодтверждениеОбязательно Тогда
				ТребуетсяПодтверждение = Истина;
			КонецЕсли;
			Результат.СтруктураЭД.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
			
			Результат.СтруктураЭД.Вставить("ТребуетсяИзвещение", ?(НастройкиОбмена.Свойство("ТребуетсяИзвещение"),
				НастройкиОбмена.ТребуетсяИзвещение, Ложь));
				
			Если Не (Результат.СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") 
						И ЗначениеЗаполнено(Результат.СтруктураЭД.НаименованиеДокументаОтправителя))
					И Результат.СтруктураЭД.Свойство("ТипЭлементаВерсииЭД") Тогда
				Результат.СтруктураЭД.Вставить("НаименованиеДокументаОтправителя", Строка(Результат.СтруктураЭД.ТипЭлементаВерсииЭД));
			КонецЕсли;
			
			Результат.СтруктураЭД.Вставить("ВерсияФормата", НастройкиОбмена.ВерсияФормата);
			
			Если Не Результат.СтруктураЭД.Свойство("ДоговорКонтрагента") Тогда
				Результат.СтруктураЭД.Вставить("ДоговорКонтрагента", НастройкиОбмена.ДоговорКонтрагента);
			КонецЕсли;
			
			МассивСтруктурВозврата.Добавить(Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПриФормированииДокументов) И ЕстьОшибки Тогда
		ДопПараметры.Вставить("ОшибкиПриФормированииДокументов", ОшибкиПриФормированииДокументов);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСвойствоСтруктуры(Структура, Знач ИерархияСвойств, Знач Значение) 
	
	Если ТипЗнч(ИерархияСвойств) = Тип("Строка") Тогда
		ИерархияСвойств = СтрРазделить(ИерархияСвойств, ".");
	КонецЕсли;
	
	ТекущееСвойство = ИерархияСвойств[0];
	
	Если ИерархияСвойств.Количество() = 1 Тогда
		
		Структура.Вставить(ТекущееСвойство, Значение);
		
	Иначе
		
		ТекущееЗначение = Неопределено;
		Если Не Структура.Свойство(ТекущееСвойство, ТекущееЗначение) Тогда
			ТекущееЗначение = Новый Структура;
		КонецЕсли;
		ИерархияСвойств.Удалить(0);
		УстановитьСвойствоСтруктуры(ТекущееЗначение, ИерархияСвойств, Значение);
		Структура.Вставить(ТекущееСвойство, ТекущееЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы,
//                        Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево - признак смены версии, несмотря на условия.
//  ВерсияФорматаПакета - Строка - версия формата пакета.
//  ОтклонениеАннулирования - Булево - признак отклонения аннулирования документа.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь, ВерсияФорматаПакета = Неопределено, 
	ОтклонениеАннулирования = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СвойстваЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ЭлектронныйДокумент, 
		"НаправлениеЭД, ВладелецФайла, ТипЭлементаВерсииЭД, ЭлектронныйДокументВладелец");
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваЭД.ВладелецФайла,"ВидЭД,СостояниеЭДО");
	
	ТекущееСостояниеВерсииЭД = РеквизитыЭД.СостояниеЭДО;
	
	НовоеСостояниеВерсииЭД = Неопределено;
	СводнаяИнформацияПоСтатусу = Новый Структура;
	
	Если НЕ ЭтоСлужебныйДокумент(СвойстваЭД.ТипЭлементаВерсииЭД)
		Или ЭтоОтветныйТитул(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		СостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
		
		Если ТекущееСостояниеВерсииЭД = ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(СвойстваЭД.ВладелецФайла) Тогда
			// Для "Акта на передачу прав" и "с.ф." меняет состояние "Закрыт принудительно" на "Обмен завершен",
			// если для него пришла вторая подпись.
			Если Не ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УПД
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УКД
				Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен) Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать
			И СостояниеВерсииЭД <> Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
			Возврат;
		КонецЕсли;
		
		Если (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			Или СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
			Или (СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий //новый каталог делает неактуальным старый
				И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров)
			Или ПринудительнаяСменаСостоянияВерсии Тогда
			
			НовоеСостояниеВерсииЭД = СостояниеВерсииЭД;
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
			
			Если (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД)
				И СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И НЕ(СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			КонецЕсли;
			
			// Если утверждается входящий э.д. в формате "доп. УПД" без подписи, то состояние меняется
			// с ОбменЗавершен на ОжидаетсяПодтверждение.
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				И СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД 
				И Не (СводнаяИнформацияПоСтатусу.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
					И СводнаяИнформацияПоСтатусу.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено) Тогда
				НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение;
			
			КонецЕсли;
			
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
			И СвойстваЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
			И НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
			
			НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
			
		ИначеЕсли (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
			
			Или (СвойстваЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
			
			НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент,
			ВерсияФорматаПакета, ПринудительнаяСменаСостоянияВерсии, ОтклонениеАннулирования);
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
		КонецЕсли;
		
	ИначеЕсли ЭтоИзвещениеОПолучении(СвойстваЭД.ТипЭлементаВерсииЭД) Тогда
		
		Если ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(СвойстваЭД.ВладелецФайла)
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование
			ИЛИ ТекущееСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяАннулировать Тогда
			Возврат;
		КонецЕсли;
		
		ПервичныйДокумент = ПрисоединенныйФайл(СвойстваЭД.ВладелецФайла);
		Если ЗначениеЗаполнено(ПервичныйДокумент) Тогда
			
			Если ЭтоТитулФНС(СвойстваЭД.ВладелецФайла) Тогда
				ОтветныйТитул = ВторойТитулДокумента(ПервичныйДокумент);
				Если ЗначениеЗаполнено(ОтветныйТитул) Тогда
					НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ОтветныйТитул);
				Иначе
					НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
				КонецЕсли;
			Иначе
				НовоеСостояниеВерсииЭД = ОпределитьСостояниеВерсииПоСтатусуЭД(ПервичныйДокумент);
			КонецЕсли;
			
			СводнаяИнформацияПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ПервичныйДокумент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовоеСостояниеВерсииЭД) Тогда
		
		ОбновитьВерсиюЭДВРегистре(СвойстваЭД.ВладелецФайла, НовоеСостояниеВерсииЭД, СводнаяИнформацияПоСтатусу);
		
		Если НовоеСостояниеВерсииЭД <> ТекущееСостояниеВерсииЭД Тогда
			
			НаОзнакомление = ЕстьНеобходимостьОзнакомленияСИзменениемСостоянияЭД(
				ТекущееСостояниеВерсииЭД, НовоеСостояниеВерсииЭД, СвойстваЭД.НаправлениеЭД);
			
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(СвойстваЭД.ВладелецФайла);
				ДокументОбъект.СостояниеЭДО = НовоеСостояниеВерсииЭД;
				ДокументОбъект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
				ДокументОбъект.НаОзнакомлении = НаОзнакомление;
				ДокументОбъект.Записать();
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
	
			Если НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
				Или НовоеСостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
				
				ОснованияДокумента = СвойстваЭД.ВладелецФайла.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
				
				ОбменСКонтрагентамиПереопределяемый.УстановленоСостояниеОбменЗавершен(ОснованияДокумента);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  ФайлЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, СправочникОбъект.ЭДПрисоединенныеФайлы - электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(ФайлЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыФайлаЭД = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД, "СтатусЭД,
		|НаправлениеЭД, ЭлектронныйДокументВладелец, ВладелецФайла, ТипЭлементаВерсииЭД, Ссылка");
	
	СвойстваВладельца = "ВидЭД, ВерсияРегламентаЭДО, ТребуетсяИзвещение, ТребуетсяПодтверждение";
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыФайлаЭД.ВладелецФайла, СвойстваВладельца); 
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если ФайлЭД <> Неопределено Тогда
		
		Если ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыФайлаЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПодтверждение));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИПОтправлен",      Ложь);
			СтруктураФлагов.Вставить("ИППолучен",        Ложь);
			СтруктураФлагов.Вставить("ИППДОПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
					Или Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
						Или Элемент.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
						СтруктураФлагов.ИПОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППолучен = Истина;
					КонецЕсли;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИППДОПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или (СтруктураФлагов.ПДППолучен 
						И НЕ СтруктураФлагов.ИППДПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
						И (НЕ СтруктураФлагов.ПДППолучен 
							Или (НЕ СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)
							Или (НЕ СтруктураФлагов.ИППолучен И ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен)
					Или ((ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
						Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) 
						И (НЕ СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение))
					Или (НЕ СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение)
					Или (СтруктураФлагов.ИППДОПолучен И НЕ СтруктураФлагов.ИППДОИПОтправлен) Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен)
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или (СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение И НЕ СтруктураФлагов.ПДОИППолучен)
					Или (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен)
					Или (СтруктураФлагов.ИПОтправлен И ПараметрыЭД.ТребуетсяПодтверждение И НЕ СтруктураФлагов.ИППДОПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД
			ИЛИ ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ Тогда
			
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(ПараметрыФайлаЭД.Ссылка);
			МассивПодчиненныхЭД = ПолучитьПодчиненныеЭД(МассивЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыФайлаЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыФайлаЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					Или НЕ СтруктураФлагов.ЭСФОтправлен 
					Или СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
		
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
							Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (Не СтруктураФлагов.ПДППолучен 
						Или (Не СтруктураФлагов.ИПЭСФПолучен И ПараметрыЭД.ТребуетсяИзвещение)) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
			Иначе
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
					
				ИначеЕсли СтруктураФлагов.ПДОПолучен И Не СтруктураФлагов.ИППДООтправлен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (Не СтруктураФлагов.ИПЭСФОтправлен И ПараметрыЭД.ТребуетсяИзвещение)  Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
					
				КонецЕсли;
				
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен 
					Или НЕ СтруктураФлагов.ПДОПолучен
					Или СтруктураФлагов.ИПЭСФОтправлен И Не СтруктураФлагов.ПДОИППолучен
					Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И Не СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				// Для утвержденного входящего счета на оплату действий не требуется.
				Если Не (ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
						ИЛИ НЕ ПараметрыЭД.ТребуетсяПодтверждение)) Тогда
				
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыФайлаЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.ЭлектронныйДокументВладелец, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						Или СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				Или (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ЭтоИзвещениеОПолучении(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)) Тогда
				
				СостояниеЭД = Неопределено;
				Если ЕстьНеОтправленноеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ЕстьНепринятоеПодтверждение(ПараметрыФайлаЭД.ВладелецФайла, СостояниеЭД) Тогда
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
					Или ПараметрыФайлаЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен
				И ПараметрыФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				И НЕ ЭтоСлужебныйДокумент(ПараметрыФайлаЭД.ТипЭлементаВерсииЭД)
				И ПараметрыЭД.ТребуетсяПодтверждение
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
					Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			ИначеЕсли ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
				Или ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если ПараметрыФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная функция, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Функция ПолучитьПодчиненныеЭД(Знач МассивЭДВладельцев, Знач МассивЭД = Неопределено)

	Если МассивЭД = Неопределено Тогда
		МассивЭД = Новый Массив;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ПОМЕСТИТЬ Уровень1
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В (&МассивЭДВладельцев)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Уровень1.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ЭДПрисоединенныеФайлы.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьПодчиненныеЭлементы
	|ИЗ
	|	Уровень1 КАК Уровень1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО Уровень1.Ссылка = ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец";
	
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	МассивПодчиненныхЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивЭД.Добавить(Выборка.Ссылка);
		Если Выборка.ЕстьПодчиненныеЭлементы Тогда
			МассивПодчиненныхЭД.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивПодчиненныхЭД.Количество() Тогда
		МассивЭД = ПолучитьПодчиненныеЭД(МассивПодчиненныхЭД, МассивЭД);	
	КонецЕсли;
	
	Возврат МассивЭД;
	
КонецФункции

// Вызывается из асинхронной процедуры ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОчереднойПакетЭД(...), перед
// ее завершением. Выполняет запись ссылок на документы-основания в Произвольные ЭД, в которых по каким-либо
// причинам не удалось это сделать при распаковке ЭД документа основания.
//
Процедура НайтиЗаполнитьОснованияУВладельцевЭД()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументПотомок,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ИдентификаторДокументаОснования,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ЭлектронныйДокумент,
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ДокументОснование
		|ИЗ
		|	РегистрСведений.ИдентификаторыДокументовОснованийВладельцевЭД КАК ИдентификаторыДокументовОснованийВладельцевЭД
		|ГДЕ
		|	ИдентификаторыДокументовОснованийВладельцевЭД.ОснованиеПолучено";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
			НачатьТранзакцию();
			Попытка
				ДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(Выборка.ДокументПотомок);
				НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
				НоваяСтрока.ДокументОснование = Выборка.ДокументОснование;
				ДокументОбъект.Записать();
				НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
				НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ИдентификаторДокументаОснования);
				НаборЗаписей.Записать(Истина);
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ВидОперации = НСтр("ru = 'запись документа-основания ""%1"" в документ ""%2""'");
				ВидОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ВидОперации, Выборка.ДокументОснование, Выборка.ДокументПотомок);
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Распаковывает пакеты электронных документов.
//
// Параметры:
//  МассивПакетовЭД           - Массив - ссылки на распаковываемые пакеты;
//  КоличествоРаспакованныхЭД - Число - количество пакетов, которые удалось распаковать.
//
Процедура РаспаковатьПакетыЭДНаСервере(Знач МассивПакетовЭД, КоличествоРаспакованныхЭД)
	
	// Подготовим данные по пакетам ЭД.
	ДанныеПакетовЭД = ДанныеПакетовЭД(МассивПакетовЭД);
	
	КоличествоЭлементовКоллекции = ДанныеПакетовЭД.Количество();
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
		Счетчик = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		СтруктураПакетаЭД = ДанныеПакетовЭД[Счетчик];
		
		ОписаниеОшибки = "";
		
		// Расшифруем электронные документы
		Для каждого ЭлектронныйДокумент Из СтруктураПакетаЭД.МассивЭД Цикл
			
			Если ЭлектронныйДокумент.Зашифрован Тогда
				
				МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("РасшифровкаЭД", Ложь, ОписаниеОшибки);
				Если МенеджерКриптографии = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ПарольДоступаКЗакрытомуКлючу = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(
					ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
				Если ПарольДоступаКЗакрытомуКлючу = Неопределено Тогда
					ШаблонСообщения = НСтр("ru = 'Не удалось получить пароль к сертификату: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ЭлектронныйДокумент.СсылкаНаСертификатРасшифровки);
					Прервать;
				КонецЕсли;
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступаКЗакрытомуКлючу;
				
				ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(ЭлектронныйДокумент.АдресЭД);
				Попытка
					РасшифрованныеДвоичныеДанныеФайлаЭД = МенеджерКриптографии.Расшифровать(ДвоичныеДанныеФайлаЭД);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Расшифровка пакета ЭД: %1'");
					ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					Прервать;
				КонецПопытки;
				
				// Помещаем двоичные данные файла в тот же адрес хранилища.
				АдресЭД = ПоместитьВоВременноеХранилище(РасшифрованныеДвоичныеДанныеФайлаЭД, ЭлектронныйДокумент.АдресЭД);
			КонецЕсли;
		КонецЦикла;

		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтруктураПакетаЭД.ПакетЭДСсылка,
				ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения);
			
			ДанныеПакетовЭД.Удалить(Счетчик);
			Продолжить;
		КонецЕсли;
		
		// Получим сертификаты и выполним проверку подписи
		Для каждого Подпись Из СтруктураПакетаЭД.МассивЭП Цикл
			
			МенеджерКриптографии = ЭлектроннаяПодпись.МенеджерКриптографии("ПолучениеСертификатовИзПодписи", Ложь, ОписаниеОшибки);
			Если МенеджерКриптографии = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Подпись.АдресЭД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось найти исходные данные для проверки ответной подписи.'");
				Прервать;
			КонецЕсли;
			
			ПодписьПроверена = ЭлектроннаяПодпись.ПроверитьПодпись(МенеджерКриптографии, Подпись.АдресЭД, Подпись.АдресЭП, ОписаниеОшибки);
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				Прервать;
			КонецЕсли;
			
			Подпись.Вставить("ДатаПроверкиПодписи", ТекущаяДатаСеанса());
			Подпись.Вставить("ПодписьВерна",        ПодписьПроверена);
			
			// Подпись не была прочитана при записи объекта.
			ДвоичныеДанныеФайлаЭП = ПолучитьИзВременногоХранилища(Подпись.АдресЭП);
			ДвоичныеДанныеФайлаЭД = ПолучитьИзВременногоХранилища(Подпись.АдресЭД);
			Попытка
				Сертификат = Неопределено;
				МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайлаЭД, ДвоичныеДанныеФайлаЭП, Сертификат);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Получение сертификатов из подписи: %1'");
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Прервать;
			КонецПопытки;
			
			Если Сертификат <> Неопределено Тогда
				
				Подпись.Вставить("Отпечаток", Base64Строка(Сертификат.Отпечаток));
				Подпись.Вставить("КомуВыданСертификат", ЭлектроннаяПодпись.ПредставлениеСубъекта(Сертификат));
				Подпись.Вставить("АдресСертификата", ПоместитьВоВременноеХранилище(Сертификат.Выгрузить(), Новый УникальныйИдентификатор));
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ШаблонСообщения = НСтр("ru = 'При распаковке пакета %1 возникла ошибка:
			|%2.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				СтруктураПакетаЭД.ПакетЭДСсылка, ОписаниеОшибки);
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстСообщения,
				ТекстСообщения, "ЭлектронноеВзаимодействие");
			
			ДанныеПакетовЭД.Удалить(Счетчик);
		КонецЕсли;
	КонецЦикла;
		
	// Занесем данные в базу.
	МассивСлужебныхЭД = Новый Массив;
	НовыеДокументы = Новый Массив;
	
	РаспакованныеДокументы = Новый Структура;
	РаспакованныеДокументы.Вставить("МассивСлужебныхЭД", МассивСлужебныхЭД);
	РаспакованныеДокументы.Вставить("НовыеДокументы", НовыеДокументы);
	
	ЗаписатьДанныеПакетовЭД(ДанныеПакетовЭД, РаспакованныеДокументы, КоличествоРаспакованныхЭД);
	
	МассивСлужебныхЭД = РаспакованныеДокументы.МассивСлужебныхЭД;
	ВыполнитьДействияПоЭД(Новый Массив, Новый Массив, "ПодписатьОтправить", Новый Структура,
		МассивСлужебныхЭД, Новый Соответствие);
		
КонецПроцедуры

// Запись статистики отправленных и полученных документов через ЦентрМониторинга
//
// Параметры:
//  СпособОбменаЭД  - Перечисления.СпособыОбменаЭД.
//  ПрофильНастроекЭДО  - Справочники.ПрофилиНастроекЭДО.
//  ВидОперации - Строка - Срока вида "Получено" или "Отправлено".
//  КоличествоЭД - Число - Количество не служебных ЭД в пакете.
//
Процедура ЗаписатьСтатистикуПоДокументообороту(СпособОбменаЭД, УчетнаяЗапись, ВидОперации, КоличествоЭД)
	
	ИменаОпераций = Новый Соответствие;
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезКаталог,             "Каталог");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезFTP,                 "FTP");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту,    "ЭлектроннаяПочта");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском, "ОператорЭДОТакском");
	ИменаОпераций.Вставить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,         "Сервис1сЭДО");
	
	ДанныеОператора = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(УчетнаяЗапись);
	
	Если Не ЗначениеЗаполнено(ДанныеОператора) Тогда
		ВидОперации = НСтр("ru = 'Запись статистики отправленных и полученных документов через ЦентрМониторинга'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации,
			СтрШаблон(НСтр("ru = 'Для учетной записи ''%1'' не найдены данные о операторе ЭДО'"), УчетнаяЗапись));
		Возврат;
	КонецЕсли;
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(
		"ОбменСКонтрагентами.СпособОбменаЭД."+ИменаОпераций[СпособОбменаЭД]+"."+ВидОперации,
		КоличествоЭД,
		ДанныеОператора.Представление);
	
КонецПроцедуры

Функция ЭтоДокументКорректировки(ДобавленныйФайл)
	
	// Документ, основания которых должны поменять свой статус должен быть вида:
	// ТОРГ12Продавец, ТОРГ12Покупатель, СоглашениеОбИзмененииСтоимостиПолучатель, СоглашениеОбИзмененииСтоимостиОтправитель
	// АктИсполнитель, АктЗаказчик или ИзвещениеОПолучении привязанный к с.ф.,
	// АктОРасхождениях.
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(ДобавленныйФайл) Тогда
		
		Если ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
			Или ДобавленныйФайл.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
			
			Результат = Истина;
		ИначеЕсли ЭтоИзвещениеОПолучении(ДобавленныйФайл.ТипЭлементаВерсииЭД) 
			И ЗначениеЗаполнено(ДобавленныйФайл.ЭлектронныйДокументВладелец) Тогда
			
			ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
			Результат = (ВидЭД = Перечисления.ВидыЭД.СчетФактура
						Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
						Или ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
						Или ВидЭД = Перечисления.ВидыЭД.УПД
						Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
						Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
		КонецЕсли;			
	Иначе
		
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл.ВладелецФайла,"ВидЭД");
		Результат = ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			Или ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция СформироватьСтруктуруФайлаЭД()
	
	СтруктураФайлаЭД = Новый Структура();
	СтруктураФайлаЭД.Вставить("ВладелецЭД");
	СтруктураФайлаЭД.Вставить("Контрагент");
	СтруктураФайлаЭД.Вставить("НаправлениеЭД");
	
	СтруктураФайлаЭД.Вставить("СоглашениеЭД");
	СтруктураФайлаЭД.Вставить("НомерЭД");
	СтруктураФайлаЭД.Вставить("НомерВерсииЭД");
	СтруктураФайлаЭД.Вставить("ТипЭлементаВерсииЭД");
	
	СтруктураФайлаЭД.Вставить("СтатусЭДВладельца");
	СтруктураФайлаЭД.Вставить("ОписаниеОшибки");
	СтруктураФайлаЭД.Вставить("ТекстУточнения");
	СтруктураФайлаЭД.Вставить("ДополнительныеДанные");
	
	// Обязательные для заполнения параметры.
	СтруктураФайлаЭД.Вставить("ОбязательныеПараметры","ВладелецЭД, НаправлениеЭД, ТипЭлементаВерсииЭД");
	                                                                                                    
	Возврат СтруктураФайлаЭД;
	
КонецФункции

Процедура НайтиПроизвольныйЭДПотомокИУстановитьЕмуОснование(НомерЭД, ДокументОснование)
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ИдентификаторыДокументовОснованийВладельцевЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторДокументаОснования.Установить(НомерЭД);
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда
			
			МассивЗаписейКУдалению = Новый Массив;
			
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				
				ДокументПотомок = ЗаписьРегистра.ДокументПотомок;
				
				Если ЗначениеЗаполнено(ДокументПотомок)
					И ТипЗнч(ДокументПотомок) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПотомок, "ВидЭД") = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
					
					Попытка
						ДокументОбъект = ДокументПотомок.ПолучитьОбъект();
						НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить(); 
						НоваяСтрока.ДокументОснование = ДокументОснование;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						МассивЗаписейКУдалению.Добавить(ЗаписьРегистра);
					Исключение
					
						ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
							НСтр("ru = 'Добавление документа основания произвольному электронному документу.'"), ТекстОшибки);
						
						ЗаписьРегистра.ОснованиеПолучено = Истина;
						ЗаписьРегистра.ДокументОснование = ДокументОснование;
						
					КонецПопытки;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ЗаписьРегистра Из МассивЗаписейКУдалению Цикл
				НаборЗаписей.Удалить(ЗаписьРегистра);
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

Функция ОпределитьОбъектПривязки(СтруктураПараметровДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	ВозвращаемоеЗначение = Неопределено;
	
	Если ЭтоОтветныйТитул(СтруктураПараметровДокумента.ТипЭлементаВерсииЭД) Тогда
		ЭДВладелецСсылка = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(
			Новый УникальныйИдентификатор(СтруктураПараметровДокумента.ИдЭДВладельца));
		Если ЭДВладелецСсылка.ПолучитьОбъект() <> Неопределено Тогда
			СтруктураПараметровДокумента.Вставить("ЭлектронныйДокументВладелец", ЭДВладелецСсылка);
			ВозвращаемоеЗначение = ЭДВладелецСсылка.ВладелецФайла;
		КонецЕсли;
	Иначе
		
		ПозПодстроки = СтрНайти(СтруктураПараметровДокумента.НомерЭД, "##") - 1;
		Если ПозПодстроки > 0 Тогда
			ЭлектронныйНомерДокумента = Лев(СтруктураПараметровДокумента.НомерЭД, ПозПодстроки);
		Иначе
			ЭлектронныйНомерДокумента = СтруктураПараметровДокумента.НомерЭД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлектронныйНомерДокумента) Тогда
			
			Если СтруктураПараметровДокумента.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				ОбменСКонтрагентамиПереопределяемый.НайтиРанееПолученныйДокумент(ВозвращаемоеЗначение, ЭлектронныйНомерДокумента);
			КонецЕсли;
			
			Если ВозвращаемоеЗначение = Неопределено Тогда
				
				ЗапросДокументовОснований = Новый Запрос;
				ЗапросДокументовОснований.Текст =
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЭДПрисоединенныеФайлы.ВладелецФайла.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ вт_ЭД
				|ИЗ
				|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
				|ГДЕ
				|	ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
				|	И ЭДПрисоединенныеФайлы.НомерЭД ПОДОБНО &Параметр
				|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД
				|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументИсходящийДокументыОснования.ДокументОснование КАК Ссылка
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК ЭлектронныйДокументИсходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументИсходящийДокументыОснования.Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЭлектронныйДокументВходящийДокументыОснования.ДокументОснование
				|ИЗ
				|	вт_ЭД КАК вт_ЭД
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
				|		ПО вт_ЭД.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка";
				ЗапросДокументовОснований.УстановитьПараметр("НаправлениеЭД",       СтруктураПараметровДокумента.НаправлениеЭД);
				ЗапросДокументовОснований.УстановитьПараметр("Параметр",            ЭлектронныйНомерДокумента + "%");
				ЗапросДокументовОснований.УстановитьПараметр("ТипЭлементаВерсииЭД", СтруктураПараметровДокумента.ТипЭлементаВерсииЭД);
				
				НайденныеДокументы = ЗапросДокументовОснований.Выполнить().Выгрузить();
				Если ЗначениеЗаполнено(НайденныеДокументы) Тогда
					
					ВозвращаемоеЗначение = НайденныеДокументы.ВыгрузитьКолонку("Ссылка");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОпределитьТипДанныхПоКодуТранзакции(КодТранзакции)
	
	// Виды входящих ЭД и соответствующие коды транзакций:
	// ЭД       MainDocument
	// Подпись  MainDocumentResign
	// ЭД(ЭСФ)  Invoice
	// ПДПЭСФ   PostDateConfirmation
	// ИПЭСФ    ReceiveNotice
	// УУЭСФ    CorrectionNotice
	// ИПУУЭСФ  CorrectionNoticeReceiveNotice
	// ПДОЭСФ   SendConfirmation
	// ПДОИПЭСФ ReceiveNoticePostDateConfirmation
	// ПОА      CancellationOffer.
	
	ВозвращаемоеЗначение = "СлужебныйЭД";
	Если КодТранзакции = "MainDocument"
		Или КодТранзакции = "Invoice" 
		Или КодТранзакции = "CustomerInformation"
		Или КодТранзакции = "VendorTitle" 
		Или КодТранзакции = "CustomerTitle" Тогда
		
		ВозвращаемоеЗначение = "ЭД";
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДвоичныеДанныеФайлаЭДВПакете(Знач КаталогПакета, Знач ОписаниеФайловПакета, Знач ОписаниеФайлаЭД)
	
	// Определим служебные файлы пакета.
	
	СлужебныеФайлы = Новый Массив;
	
	Если ОписаниеФайловПакета.MainImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловПакета.MainImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловПакета.DataImage <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловПакета.DataImage.Path);
	КонецЕсли;
	
	Если ОписаниеФайловПакета.DataImageSignature <> Неопределено Тогда
		Для каждого Объект Из ОписаниеФайловПакета.DataImageSignature Цикл
			СлужебныеФайлы.Добавить(Объект.Path);
		КонецЦикла;
	КонецЕсли;
	
	Если ОписаниеФайловПакета.ExternalCard <> Неопределено Тогда
		СлужебныеФайлы.Добавить(ОписаниеФайловПакета.ExternalCard.Path);
	КонецЕсли;
	
	// Определим полные пути служебных файлов.
	
	Для Индекс = 1 По СлужебныеФайлы.Количество() Цикл
		
		ИмяФайла = ИсправитьРазделителиПутиКФайлу(СлужебныеФайлы[Индекс - 1]);
		СлужебныеФайлы[Индекс - 1] = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогПакета, ИмяФайла);
		
	КонецЦикла;
	
	// Добавляем к служебным файлам файл транспорта.
	
	ФайлыТранспорта = НайтиФайлы(КаталогПакета, "meta*.xml", Истина);
	Если ЗначениеЗаполнено(ФайлыТранспорта) Тогда
		СлужебныеФайлы.Добавить(ФайлыТранспорта[0].ПолноеИмя);
	КонецЕсли;
	
	// Найдем все файлы пакета.
	
	РасширениеФайлаЭД = ОписаниеФайлаЭД.Расширение;
	
	ФайлыПакета = НайтиФайлы(КаталогПакета, "*", Истина);
	
	// Берем первый неслужебный файл с заданным расширением,
	// либо единственный не служебный.
	
	ОсновныеФайлы = Новый Массив;
	
	ДвоичныеДанныеФайлаЭД = Неопределено;
	
	Для каждого Файл Из ФайлыПакета Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СлужебныеФайлы.Найти(Файл.ПолноеИмя) = Неопределено Тогда
			ОсновныеФайлы.Добавить(Файл.ПолноеИмя);
			Если Файл.Расширение = РасширениеФайлаЭД Тогда
				ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(Файл.ПолноеИмя);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДвоичныеДанныеФайлаЭД = Неопределено И ОсновныеФайлы.Количество() = 1 Тогда
		ДвоичныеДанныеФайлаЭД = Новый ДвоичныеДанные(ОсновныеФайлы[0]);
	КонецЕсли;
	
	Возврат ДвоичныеДанныеФайлаЭД;
	
КонецФункции

Функция ИсправитьРазделителиПутиКФайлу(Знач ПутьКФайлу) 
	
	ТребуемыйРазделитель = ПолучитьРазделительПути();
	
	НекорректныйРазделитель = ?(ТребуемыйРазделитель = "/", "\", "/");
	
	ИсправленныйПутьКФайлу = СтрЗаменить(ПутьКФайлу, НекорректныйРазделитель, ТребуемыйРазделитель);
	
	Возврат ИсправленныйПутьКФайлу;
	
КонецФункции

// Проверяет в транспортном архиве имена файлов (без расширения) на наличие в них недопустимых символов.
// Такие имена при распаковке обрезаются и может получиться два файла с одинаковыми именами, в результате
// один перезапишет другого.
//
// Параметры:
//  АрхивФайлов - ЧтениеZipФайла - Инициализированный объект чтения zip архива.
// 
// Возвращаемое значение - Булево - Истина, если в архиве есть файлы с недопустимыми символами в именах,
//                                  которые после обрезки становятся одинаковыми.
//
Функция ЕстьОдинаковыеИменаФайловСНедопустимымиСимволамиВАрхиве(АрхивФайлов)
	
	ФлагОшибки = Ложь;
	
	ИменаОсновныхФайлов = Новый ТаблицаЗначений;
	ИменаОсновныхФайлов.Колонки.Добавить("ИмяФайла");
	ИменаОсновныхФайлов.Колонки.Добавить("СчетчикИмен");
	ИменаОсновныхФайлов.Колонки.Добавить("ФлагНедопустимыхСимволов");
	
	Для Каждого ФайлАрхива Из АрхивФайлов.Элементы Цикл
		
		Если ФайлАрхива.ИсходноеИмяБезРасширения <> "card" И ФайлАрхива.ИсходноеИмяБезРасширения <> "meta" Тогда
			
			НеКорректныеСимволы = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(
				ФайлАрхива.ИсходноеИмяБезРасширения);
			
			СтрокаТаблицы                          = ИменаОсновныхФайлов.Добавить();
			СтрокаТаблицы.ИмяФайла                 = ФайлАрхива.Имя;
			СтрокаТаблицы.СчетчикИмен              = 1;
			СтрокаТаблицы.ФлагНедопустимыхСимволов = НеКорректныеСимволы.Количество();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИменаОсновныхФайлов.Количество() Тогда
		
		ИменаОсновныхФайлов.Свернуть("ИмяФайла", "СчетчикИмен, ФлагНедопустимыхСимволов");
		
		Для Каждого Строка Из ИменаОсновныхФайлов Цикл
			Если Строка.СчетчикИмен > 1 И Строка.ФлагНедопустимыхСимволов Тогда
				ФлагОшибки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ФлагОшибки;
	
КонецФункции

Процедура ИзменитьСостояниеЭДДокументовОснования(РеквизитыПакетаЭД)
	
	Выборка = РеквизитыПакетаЭД.ЭлектронныеДокументы.Выбрать();
	Если Выборка.Количество() > 0 И Выборка.Следующий() Тогда
		ЭлектронныйДокумент = Выборка.ОбъектВладелец;
		СсылкаНаФайлЭД = Выборка.ЭлектронныйДокумент; 
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) Тогда
				
				Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					И СсылкаНаФайлЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
					Возврат;
				ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УПД
					И ЭтоДокументКорректировки(СсылкаНаФайлЭД) Тогда
					
					ОбменСКонтрагентамиВнутренний.ИзменитьСостояниеСФОснований(СсылкаНаФайлЭД, Перечисления.НаправленияЭД.Входящий);
					
				Иначе
					
					УстановитьСостояниеЗавершен(СсылкаНаФайлЭД, Перечисления.НаправленияЭД.Входящий);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтветныйДокумент(СсылкаНаФайлЭД,ЭлектронныйДокумент) 
	
	Результат = Ложь;
	
	Если ЭтоСлужебныйДокумент(СсылкаНаФайлЭД) Тогда
		
		Результат = (СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			Или СсылкаНаФайлЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Иначе
		
		Результат = ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УПД
			Или ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Функция возвращает соответствие соглашению - структуры данных сертификата,
// содержащую ссылку на сертификат и его доп.реквизиты (запомнить пароль, пароль пользователя, маркер расшифрованный/зашифрованный).
// 
// Параметры:
//  МассивСоглашений               - Массив    - содержит ссылки на соглашения, по которым требуется определить сертификаты;
//  СтМассивовСтруктурСертификатов - Структура - содержит структуру со свойствами:
//    * МассивСтруктурСертификатовСервер - Массив - массив структур сертификатов личного хранилища с сервера.
//    * МассивСтруктурСертификатовКлиент - Массив - массив структур сертификатов личного хранилища с клиента.
//  СоотвСертификатовИПаролей      - Фиксированное соответствие:
//    * Ключ     - СправочникСсылка.СертификатыЭП - сертификат авторизации.
//    * Значение - Строка - пароль к сертификату.
//
// Возвращаемое значение:
//  Соответствие: ключ - соглашение об обмене ЭД, значение - структура параметров сертификата ЭП
//    ("СертификатДляАвторизации, ЗапомнитьПарольКСертификату, ПарольПользователя, МаркерРасшифрованный, МаркерЗашифрованный").
//
Функция СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
		Знач МассивПрофилейНастроекЭДО = Неопределено, Знач СтМассивовСтруктурСертификатов = Неопределено,
		Знач СоотвСертификатовИПаролей = Неопределено)
	
	Результат = НастройкиЭДОИСертификатыАвторизации(МассивПрофилейНастроекЭДО,, СтМассивовСтруктурСертификатов);
	
	СоотвСоглашений = Новый Соответствие;
	СоотвСоглашенийИМассиваСертификатовАвторизации = Неопределено;
	СоотвСертификатовИИхСтруктур = Неопределено;
	Если Результат.Свойство("СоотвСоглашенийИМассиваСертификатовАвторизации", СоотвСоглашенийИМассиваСертификатовАвторизации)
		И Результат.Свойство("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур)
		И ТипЗнч(СоотвСоглашенийИМассиваСертификатовАвторизации) = Тип("Соответствие")
		И ТипЗнч(СоотвСертификатовИИхСтруктур) = Тип("Соответствие") Тогда
		// В СоотвСоглашенийИМассиваСертификатовАвторизации - Ключ - Соглашение, Значение - Массив сертификатов
		// по данному соглашению. Функция должна вернуть Соответствие, в котором Ключ - Соглашение,
		// Значение - Соответствие сертификатов и их параметров.
		Для Каждого Элемент Из СоотвСоглашенийИМассиваСертификатовАвторизации Цикл
			
			ПрофильНастроекЭДО = Элемент.Ключ;
			РеквизитыПрофиляНастроекЭДО = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ПрофильНастроекЭДО);
			
			Соответствие = Новый Соответствие;
			МассивСертификатов = Элемент.Значение;
			Для Каждого Сертификат Из МассивСертификатов Цикл
				КлючПоискаСертификата = Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации;
				
				Структура = СоотвСертификатовИИхСтруктур.Получить(КлючПоискаСертификата);
				Если ЗначениеЗаполнено(Структура) И Структура.ПарольПолучен Тогда
					// Авторизоваться на сервере оператора можно любым зарегистрированным в соглашении сертификатом,
					// поэтому, если есть несколько доступных для авторизации сертификатов и среди них есть хотя бы
					// один с сохраненным (в сертификате или сеансе) паролем, то вернем именно его, чтобы не открывать
					// диалог выбора сертификата.
					Соответствие = Новый Соответствие;
					Соответствие.Вставить(Сертификат, Структура);
					Прервать;
				КонецЕсли;
				Соответствие.Вставить(Сертификат, Структура);
			КонецЦикла;
			СоотвСоглашений.Вставить(Элемент.Ключ, Соответствие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоотвСоглашений;
	
КонецФункции

Процедура ЗаполнитьДанныеПодписантаЭД(ДанныеФайлаЭД, ПространствоИменСхемы, ПараметрыЭД, СертификатПодписи)
	
	Ошибки = Неопределено; // служебная переменная для хранения списка возникших ошибок
	
	// Получим данные для заполнения Тега Подписант
	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СертификатПодписи);
	ФамилияСертификата  = ПараметрыСертификата.Фамилия;
	ИмяСертификата      = ПараметрыСертификата.Имя;
	ОтчествоСертификата = ПараметрыСертификата.Отчество;
	Фирма               = ПараметрыСертификата.Фирма;
	
	ДолжностьПоСертификату = "---";
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	
	ЭтоФизЛицо = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ПараметрыЭД.Организация, ЭтоФизЛицо);
	ДанныеЮрФизЛица = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыЭД.Организация, ДанныеЮрФизЛица);
	
	// Заполнение блока подписанта в ЭД.
	Если (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УПД
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УКД
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД)
			
		Или (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
		
		И (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
			Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД) Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
		
		Если (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
				ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД)
			И ДанныеФайлаЭД.Документ.СвПродПер <> Неопределено
			И ДанныеФайлаЭД.Документ.СвПродПер.СвПер.СвЛицПер = Неопределено Тогда
			
			СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер.РабОргПрод.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
			
			ТоварПередал = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.Документ.СвПродПер.СвПер.СвЛицПер", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТоварПередал,
				"РабОргПрод", СведенияЛица, Истина, Ошибки);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвПродПер.СвПер, "СвЛицПер",
				ТоварПередал, Истина, Ошибки);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУКД Тогда
	
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.ИнфПок.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		ИндексПодписанта = ДанныеФайлаЭД.ИнфПок.Подписант.Количество() - 1;
		Если Не ЭтоФизЛицо Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		СброситьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
		
		Если ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИнформацияПокупателяУПД 
			И ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин = Неопределено Тогда
			
			СведенияЛица = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок", ПространствоИменСхемы);
			Если ЭтоФизЛицо Тогда
				Должность = НСтр("ru = 'ИП'");
				ОснованиеПолномочий = НСтр("ru = 'Свидетельство ОГРН'");
			Иначе
				Должность = ДолжностьПоСертификату;
				ОснованиеПолномочий = НСтр("ru = 'Должностные обязанности'");
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "Должность", Должность, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ОснПолн", ОснованиеПолномочий, Истина, Ошибки);
				
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин.РабОргПок.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(СведенияЛица, "ФИО", ФИО, Истина, Ошибки);
			
			ТоварПринял = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML(
				"Файл.ИнфПок.СодФХЖ4.СвПрин.СвЛицПрин", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ТоварПринял, 
				"РабОргПок", СведенияЛица, Истина, Ошибки);
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ИнфПок.СодФХЖ4.СвПрин, "СвЛицПрин",
				ТоварПринял, Истина, Ошибки);
			
		КонецЕсли;
			
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УПД
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УКД
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		
	ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		Если Не ЭтоФизЛицо Тогда
			ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
		Иначе
			ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
			
			ДанныеСвидетельства = "";
			ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
			
			ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
		КонецЕсли;
		
		Если ПространствоИменСхемы = "TORGPR" 
			Или ПространствоИменСхемы = "RUISP" Тогда // Передача товаров, акт результатов работ (Исполнитель).
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
			
		ИначеЕсли ПространствоИменСхемы = "TORGPOK" 
			Или ПространствоИменСхемы = "RUZAK" Тогда // Передача товаров, акт результатов работ (Заказчик).
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", Фирма, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
			
		Иначе
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		КонецЕсли;
		
		// Заполнение блока ответственного в ЭД
		Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если ПространствоИменСхемы = "TORGPR" Тогда
				
				// Не заполняем, так как в соответствии с приказом, "обязателен, если лицо, отпустившее груз, 
				// не совпадает с лицом, ответственным за оформление факта хозяйственной жизни"
				
			Иначе
				ОтпускРазрешил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ОтпускРазрешил, "Должность", ДолжностьПоСертификату, , Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНО.ОтпускГруз, "ОтпускРазреш", ОтпускРазрешил, Истина, Ошибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Если ПространствоИменСхемы = "TORGPOK" Тогда // Передача товаров, акт результатов работ (Исполнитель).
				// Не заполняем, так как в соответствии с приказом, "обязателен, если лицо, принявшее товар (получившее груз),
				// не совпадает с лицом, ответственным за оформление факта хозяйственной жизни"
			Иначе
				ГрузПолучил = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ГрузПолучил, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвТНП.ПолучилГруз, "ГрузПолучил", ГрузПолучил, Истина, Ошибки);
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUISP") Тогда
				
				ПодписьИсполнителя = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ПодписьИсполн.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьИсполнителя, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Сдал, "ПодписьИсполн", ПодписьИсполнителя, Истина, Ошибки);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик Тогда
			
			Если Не ВРег(ПространствоИменСхемы) = ВРег("RUZAK") Тогда
				
				ПодписьЗаказ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ", ПространствоИменСхемы);
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ПодписьЗаказ, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.СвАктИ.Принял, "ПодписьЗаказ", ПодписьЗаказ, Истина, Ошибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоИзвещениеОПолучении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ЭтоУведомлениеОбУточнении(ПараметрыЭД.ТипЭлементаВерсииЭД)
		Или ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
		
		Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
		ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ФИО", ПространствоИменСхемы);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
		Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
		КонецЕсли;
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИО, Истина, Ошибки);
		ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ, "Подписант", Подписант, Истина, Ошибки);
		
	ИначеЕсли ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
		Или ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав) Тогда
		
		Если ДанныеФайлаЭД.ВерсияСхемы = СокрЛП(СтрЗаменить(ВерсияСхемыCML2(), "CML", "")) Тогда
			
			// Добавление шаблона подписанта для заполнения при подписи.
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Каталог.Подписанты.Подписант", ПространствоИменСхемы);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("ПакетПредложений.Подписанты.Подписант", ПространствоИменСхемы);
			Иначе
				Подписанты = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты", ПространствоИменСхемы);
				Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Документ.Подписанты.Подписант", ПространствоИменСхемы);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ФамилияСертификата, Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ИмяСертификата, Истина, Ошибки);
			Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ОтчествоСертификата, , Ошибки);
			КонецЕсли;
			
			Если ДолжностьПоСертификату <> "---" Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Должность", ДолжностьПоСертификату, Истина, Ошибки);
			КонецЕсли;
			
			Подписанты.Подписант.Добавить(Подписант);
			Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Каталог, "Подписанты", Подписанты, Ложь, Ошибки);
			ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.ПакетПредложений, "Подписанты", Подписанты, Ложь, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ[0], "Подписанты", Подписанты, Ложь, Ошибки);
			КонецЕсли;
			
		КонецЕсли;
		
		ИначеЕсли ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях Тогда
		
		ФорматЭлектронногоДокумента = ОбменСКонтрагентамиВнутренний.ФорматЭлектронногоДокументаПоОбъекту(ДанныеФайлаЭД);
		
		Если ОбменСКонтрагентамиВнутренний.ПроверитьФорматЭлектронногоДокумента(ФорматЭлектронногоДокумента, "АктОРасхождениях", "5.01") Тогда
			
			Подписант = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);
			Если Не ЭтоФизЛицо Тогда
				ЮЛ = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ИННЮЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "Должн", ДолжностьПоСертификату, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "НаимОрг", ПараметрыСертификата.Фирма, , Ошибки);
				
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ЮЛ.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ЮЛ, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ИП = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, Ошибки);
				
				ДанныеСвидетельства = "";
				ОбменСКонтрагентамиПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(ПараметрыЭД.Организация, ДанныеСвидетельства);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", ДанныеСвидетельства, , Ошибки);
				
				ФИО = ОбменСКонтрагентамиВнутренний.ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ФамилияСертификата, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ИмяСертификата, Истина, Ошибки);
				Если ЗначениеЗаполнено(ОтчествоСертификата) Тогда
					ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ОтчествоСертификата, , Ошибки);
				КонецЕсли;
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, Ошибки);
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ОблПолн", "3", Истина, Ошибки); // Лицо, ответственное за оформление события (операции).
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "Статус", "5", Истина, Ошибки); // Работник организации - покупателя.
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ОснПолн", НСтр("ru = 'Должностные обязанности'"), Истина, Ошибки);
			ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(Подписант, "ПризнОзнак", "1", Истина, Ошибки);
			
			ИндексПодписанта = ДанныеФайлаЭД.Документ.Подписант.Количество() - 1;
			Если Не ЭтоФизЛицо Тогда
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ЮЛ", ЮЛ, Истина, Ошибки);
			Иначе
				ОбменСКонтрагентамиВнутренний.ЗаполнитьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ИП", ИП, Истина, Ошибки);
			КонецЕсли;
			
			СброситьСвойствоXDTO(ДанныеФайлаЭД.Документ.Подписант[ИндексПодписанта], "ФЛ",Ошибки);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура СброситьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, Ошибки)
	
	Попытка
		ОбъектXDTO.Сбросить(ИмяСвойства);
	Исключение
		ШаблонСообщения = НСтр("ru = 'Выполнение операции: Очистка XDTO.
			|Ошибка сброса значения свойства ""%1"".'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);
		
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьОшибку(Ошибки, ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "ОбменСКонтрагентами");
	КонецПопытки

	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
//
// Параметры:
//  ДобавленныеФайлы      - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи     - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПараметрыСертификата  - Структура, содержит реквизиты сертификата,
//  МассивНеПодписанныхЭД - Массив либо Неопределено, в этой переменной в вызывающую процедуру возвращается массив ЭД,
//                          которые не были подписаны.
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПараметрыСертификата,
											МассивНеПодписанныхЭД = Неопределено)
											
	Если Не ТипЗнч(ДобавленныеФайлы) = Тип("Массив") Тогда
		ФайлыНаПодпись = Новый Массив;
		ФайлыНаПодпись.Добавить(ДобавленныеФайлы);
	Иначе
		ФайлыНаПодпись = ДобавленныеФайлы;
	КонецЕсли;
	
	Если ТипЗнч(МассивНеПодписанныхЭД) <> Тип("Массив") Тогда
		МассивНеПодписанныхЭД = Новый Массив;
	КонецЕсли;
	Отказ = Ложь;
	Программа = Неопределено;
	ПараметрыСертификата.Свойство("Программа", Программа);
	МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ, Истина, Программа);
	Если Отказ Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
			МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
		КонецЦикла;
		Возврат 0;
	КонецЕсли;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектронноеВзаимодействиеСлужебный.ПолучитьСертификатПоОтпечатку(
		ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("112");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Для Каждого НеПодписанныйЭД Из ФайлыНаПодпись Цикл
				МассивНеПодписанныхЭД.Добавить(НеПодписанныйЭД);
			КонецЦикла;
			Возврат 0;
		КонецПопытки;
		
		Для Каждого ТекДокумент Из ФайлыНаПодпись Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, ПарольПользователя, Комментарий", КриптоСертификат, ПараметрыСертификата.ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент, СертификатПодписи);
				ДанныеПодписи = ЭлектронноеВзаимодействиеСлужебный.СформироватьДанныеПодписи(
					МенеджерКриптографии, ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
				
				ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
				ОпределитьСтатусыПодписей(ТекДокумент);
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
						НСтр("ru = 'установка подписи ЭП'"),
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ТекстСообщения);
				МассивНеПодписанныхЭД.Добавить(ТекДокумент);
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	// Выполним действия после подписания.
	ПодписанныеЭД = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФайлыНаПодпись, МассивНеПодписанныхЭД);
	
	СоответствиеСертификатовПодписаннымЭд = Новый Соответствие;
	СоответствиеСертификатовПодписаннымЭд.Вставить(ПараметрыСертификата.СертификатПодписи, ПодписанныеЭД);
	ДействияПослеПодписанияЭДНаСервере(СоответствиеСертификатовПодписаннымЭд);
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(СсылкаНаФайлЭД)
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.МаршрутПодписанияЗавершен(СсылкаНаФайлЭД);
	
КонецФункции

// Выполняет добавление электронной подписи в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка - ссылка на элемент справочника, содержащего в себе электронный документ.
//  ДанныеПодписи - Структура - структура параметров электронной подписи.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл.ВладелецФайла, "СпособОбменаЭД");
	
	НачатьТранзакцию();
	Попытка
		РаботаСФайлами.ДобавитьПодписьКФайлу(ПрисоединенныйФайл, ДанныеПодписи);
		Если ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере() Тогда
			ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
		КонецЕсли;
		Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
			
			НаправлениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "НаправлениеЭД");
			Если НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.ПолностьюПодписан,
																		ПрисоединенныйФайл);
			Иначе
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
																		Перечисления.СтатусыЭД.Подписан,
																		ПрисоединенныйФайл);
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура("СтатусЭД", НовыйСтатусЭД);
			ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусПодписан(ПрисоединенныйФайл);
		Иначе
			// В рамках интеркампани, документ должен иметь 2 подписи,
			// т.к. электронный документ подписан не полностью, то достаточно проверить,
			// что количество ЭП отлично от 0.
			УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
			
			ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
													И УстановленныеПодписи.Количество() > 0);
			
			Если ДокументИнтеркампаниЧастичноПодписан Тогда
				
				НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ЧастичноПодписан, ПрисоединенныйФайл);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
				СтруктураПараметров.Вставить("Изменил", Пользователи.АвторизованныйПользователь());
				ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ШаблонСообщения = НСтр("ru = 'Ошибка подписи электронного документа %1'");
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%1", ПрисоединенныйФайл);
		ВидОперации = НСтр("ru = 'установка подписи ЭП'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ИнформацияОбОшибке, ТекстСообщения);
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Проверяет валидность подписей электронного документа и заполняет реквизиты Статус и ДатаПроверкиПодписи
// в табличной части ЭлектронныеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ВыводитьСообщения - Булево - требуется ли выводить сообщения.
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отказ = Ложь;
	Попытка
		МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	Если Отказ Тогда
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ЭД);
	
	Для каждого СтрокаЭП Из УстановленныеПодписи Цикл
		ПодписьВерна = Истина;
		Попытка
			ДвоичныеДанныеЭП = СтрокаЭП.Подпись;
			ЭлектронноеВзаимодействиеСлужебный.ПроверитьПодпись(
				МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭП);
		Исключение
			ПодписьВерна = Ложь;
			
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке("114");
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'проверка электронной подписи'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				ВидОперации, ПодробноеПредставлениеОшибки, ТекстСообщения);
		КонецПопытки;
		
		Менеджер = РегистрыСведений.ЭлектронныеПодписи.СоздатьМенеджерЗаписи();
		Менеджер.ПодписанныйОбъект = ЭД;
		Менеджер.ПорядковыйНомер = СтрокаЭП.ПорядковыйНомер;
		Менеджер.Прочитать();
		Менеджер.ПодписанныйОбъект = ЭД;
		Менеджер.ПорядковыйНомер = СтрокаЭП.ПорядковыйНомер;
		Менеджер.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		Менеджер.ПодписьВерна = ПодписьВерна;
		Менеджер.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  РеквизитыЭД - СтрокаТаблицыЗначений - текущие реквизиты утверждаемого электронного документа.
//     * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ.
//     * ФайлЭлектронногоДокумента - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на файл электронного документа.
//     * СтатусЭД - ПеречислениеСсылка.СтатусыЭД - статус электронного документа.
//     * ВидЭД - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//     * НаправлениеЭД - ПеречислениеСсылка.НаправленияЭД - направление электронного документа.
//     * ТипЭлементаВерсииЭД - ПеречислениеСсылка.ТипыЭлементовВерсииЭД - тип элемента версии электронного документа.
//     * ТребуетсяОтветнаяПодпись - Булево - признак необходимости подписывать документ на стороне получателя.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//  ПризнакУстановлен - Булево - признак успешной установки статуса.
//
Процедура УстановитьПризнакУтвержден(РеквизитыЭД, НовыйЭД, ПризнакУстановлен)
	
	ПризнакУстановлен = Истина;
	ГотовКУтверждению = Истина;
	
	ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументГотовКУтверждению(
		РеквизитыЭД.ФайлЭлектронногоДокумента, ГотовКУтверждению);
	
	// Проверим, все ли необходимые условия выполнены
	Если ГотовКУтверждению Тогда
		
		Если УстановленныеПодписиВалидны(РеквизитыЭД.ФайлЭлектронногоДокумента) Тогда
			
			НовыйСтатусЭД = ПолучитьДопустимыйСтатусЭД(
				Перечисления.СтатусыЭД.Утвержден, РеквизитыЭД.ФайлЭлектронногоДокумента);
			
			Если НовыйСтатусЭД <> Перечисления.СтатусыЭД.Утвержден Тогда
				ПризнакУстановлен = Ложь;
				Возврат;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("СтатусЭД", НовыйСтатусЭД);
			СтруктураПараметров.Вставить("Изменил",  Пользователи.АвторизованныйПользователь());
			
			ИзменитьПоСсылкеПрисоединенныйФайл(РеквизитыЭД.ФайлЭлектронногоДокумента, СтруктураПараметров, Ложь);
			ОбменСКонтрагентамиПереопределяемый.НазначенСтатусУтвержден(РеквизитыЭД.ФайлЭлектронногоДокумента);
			
		Иначе
			ПризнакУстановлен = Ложь;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РеквизитыЭД.НаправлениеЭД <> Перечисления.НаправленияЭД.Входящий
		ИЛИ ЭтоСлужебныйДокумент(РеквизитыЭД.ТипЭлементаВерсииЭД)
		ИЛИ Не РеквизитыЭД.ТребуетсяОтветнаяПодпись Тогда
		Возврат;
	КонецЕсли;
		
	Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД
		
		Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
		
		Или ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УПД)
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД)
			
		Или ((РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УКД)
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД) Тогда
		
		Если РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
		КонецЕсли;
		
		Если (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УПД)
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД Тогда
			
			НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(РеквизитыЭД.ФайлЭлектронногоДокумента);
		ИначеЕсли (РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Или РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.УКД)
			И РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
			
			НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(РеквизитыЭД.ФайлЭлектронногоДокумента);
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель Тогда
			Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(РеквизитыЭД.ФайлЭлектронногоДокумента);
			Иначе
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДТорг12Покупатель(РеквизитыЭД.ФайлЭлектронногоДокумента);
			КонецЕсли;
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктЗаказчик Тогда
			Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД Тогда
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(РеквизитыЭД.ФайлЭлектронногоДокумента);
			Иначе
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДАкт501Заказчик(РеквизитыЭД.ФайлЭлектронногоДокумента);
			КонецЕсли;
		ИначеЕсли РеквизитыЭД.ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
			НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателя(РеквизитыЭД.ФайлЭлектронногоДокумента);
		ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			Если РеквизитыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДИнформацияПокупателяУКД(РеквизитыЭД.ФайлЭлектронногоДокумента);
			Иначе
				НовыйЭД = ОбменСКонтрагентамиВнутренний.СформироватьЭДКорДокументаПолучатель(РеквизитыЭД.ФайлЭлектронногоДокумента);
			КонецЕсли;
		КонецЕсли;
		
		Если НовыйЭД = Неопределено Тогда
			ПризнакУстановлен = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСостояниеЗавершенПоОтклонению(МассивФайловЭД, ВыполняетсяОбновлениеИнформационнойБазы = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.НомерЭД КАК НомерЭД,
	|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД
	|ПОМЕСТИТЬ вт_НомераЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&МассивФайловЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	вт_НомераЭД КАК вт_НомераЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.НомерЭД = вт_НомераЭД.НомерЭД)
	|			И (вт_НомераЭД.НомерЭД <> """")
	|			И (ЭДПрисоединенныеФайлы.НаправлениеЭД = вт_НомераЭД.НаправлениеЭД)
	|			И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = вт_НомераЭД.ТипЭлементаВерсииЭД)
	|ГДЕ
	|	НЕ ЭДПрисоединенныеФайлы.Ссылка В (&МассивФайловЭД)
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла <> НЕОПРЕДЕЛЕНО
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В (ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен), ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем))
	|	И ЭДПрисоединенныеФайлы.ВладелецФайла.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно))";
	Запрос.УстановитьПараметр("МассивФайловЭД", МассивФайловЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыОснования = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ДокументОснования");
	Состояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением;
	
	ИзменитьСостояниеЭД(ДокументыОснования, Состояние, Неопределено, ВыполняетсяОбновлениеИнформационнойБазы);
	
КонецПроцедуры

Функция ЭтоДокументРеализации(СвойстваЭД)
	
	Результат = Ложь;
	
	МассивРТУ = ВидыЭлектронныхДокументовРТУ();
	
	Если Не МассивРТУ.Найти(СвойстваЭД.ВидЭД) = Неопределено Тогда
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь, СпособОбработки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ФайлДанныхСсылка) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ФайлДопДанныхСсылка = ПолучитьДанныеЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ФайлДопДанныхСсылка) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ЭлектронныйДокумент,
		|	ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
		|	ЭДПрисоединенныеФайлы.НаправлениеЭД КАК НаправлениеЭД,
		|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение,
		|	ВЫБОР
		|		КОГДА НЕ ЭлектронныйДокументВходящий.Ссылка ЕСТЬ NULL
		|			ТОГДА ЭлектронныйДокументВходящий.ВидЭД
		|		КОГДА НЕ ЭлектронныйДокументИсходящий.Ссылка ЕСТЬ NULL
		|			ТОГДА ЭлектронныйДокументИсходящий.ВидЭД
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидЭД
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЭД);
	
	Выборка = Запрос.Выполнить().Выбрать();

	СтруктураПараметров = Новый Структура("ЭлектронныйДокумент, ВидЭД, ТипЭлементаВерсииЭД,
		|НаправлениеЭД, Расширение");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
	КонецЕсли;
	
	ДокументыУчета = Новый Массив;
	Если СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		МассивСсылокНаЭД = Новый Массив;
		МассивСсылокНаЭД.Добавить(СтруктураПараметров.ЭлектронныйДокумент);
		СоответствиеВладельцевИЭД = ВладельцыИЭлектронныеДокументы(Неопределено, МассивСсылокНаЭД);
		
		Если СоответствиеВладельцевИЭД.Количество() = 0 Тогда
			ДокументыУчета.Добавить(СсылкаНаВладельца);
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из СоответствиеВладельцевИЭД Цикл
			ДокументыУчета.Добавить(ТекущаяСтрока.Ключ);
		КонецЦикла;
	
	Иначе
		ДокументыУчета.Добавить(СсылкаНаВладельца);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументыУчета", ДокументыУчета);
	
	СтруктураПараметров.Вставить("ФайлДанныхСсылка",  ФайлДанныхСсылка);
	СтруктураПараметров.Вставить("ЗаполнитьДокумент", Истина);
	
	Если ФайлДопДанныхСсылка <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ФайлДопДанныхСсылка);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ВладелецЭД, "Организация, Контрагент, ДоговорКонтрагента");
			НастройкаЭДО = СсылкаНаОбъектНастройкиЭДО(Реквизиты.Организация, Реквизиты.Контрагент, Реквизиты.ДоговорКонтрагента);
			СтруктураПараметров.Вставить("ВладелецЭД", НастройкаЭДО);
		ИначеЕсли СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И СтруктураПараметров.Расширение = "xml" Тогда
			ДанныеXML = ПолучитьИзВременногоХранилища(СтруктураПараметров.ФайлДанныхСсылка);
			ДанныеCML = ДанныеCMLПроизвольногоДокумента(ДанныеXML);
			Если ДанныеCML <> Неопределено Тогда
				СтруктураПараметров.Вставить("ФайлДанныхСсылка", ПоместитьВоВременноеХранилище(ДанныеCML));
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.ВидЭД = Перечисления.ВидыЭД.ПрикладнойЭД Тогда
			ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъектаПрикладногоФормата(
				СтруктураПараметров, СпособОбработки);
		Иначе
			ДокументыУчета = ОбменСКонтрагентамиВнутренний.СохранитьДанныеОбъекта(СтруктураПараметров, СпособОбработки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументыУчета) Тогда
			Для каждого Строка Из ДокументыУчета Цикл
				УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, СсылкаНаЭД.ВладелецФайла);	
			КонецЦикла;
		КонецЕсли;
		
		ДокЗаполнен = Истина;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Формирует структуру параметров, необходимую для работы функций аннулирования и отклонения.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ.
//  ФормироватьУОУ - Булево - признак необходимости формирования уведомления об уточнении.
//  ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
//  ТребуетсяПодтверждение - Булево - признак необходимости формирования ответного титула или ответной подписи.
// 
// Возвращаемое значение:
//  Структура - структура параметров:
//    * СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - электронный документ;
//    * ФормироватьУОУ - Булево - признак необходимости формирования уведомления;
//    * ЭтоСчетФактура - Булево - признак того, что обрабатываемый документ является счетом-фактурой.
//    * ТребуетсяПодтверждение - Булево - признак необходимости формирования ответного титула или ответной подписи.
//
Функция НовыеПараметрыОтклоненияАннулирования(ЭД, ФормироватьУОУ, ЭтоСчетФактура, ТребуетсяПодтверждение)
	
	Параметры = Новый Структура;
	Параметры.Вставить("СсылкаНаЭД", ЭД);
	Параметры.Вставить("ФормироватьУОУ", ФормироватьУОУ);
	Параметры.Вставить("ЭтоСчетФактура", ЭтоСчетФактура);
	Параметры.Вставить("ТребуетсяПодтверждение", ТребуетсяПодтверждение);
	
	Возврат Параметры;
	
КонецФункции

Функция СостояниеДокументооборота(ДокументИБ)
		
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИБ,"СостояниеЭДО");
	
КонецФункции

// Проверка подписи.
//
// Параметры:
//  ДвоичныеДанныеПроверки - ДвоичныеДанные - данные проверки.
//  ЭлектронныйДокумент - Ссылка - электронный документ.
// 
// Возвращаемое значение:
//  Булево - признак проверки подписи.
//
Функция ЕстьТакаяПодпись(ДвоичныеДанныеПроверки, ЭлектронныйДокумент)
	
	Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭлектронныеПодписиЭД = ЭлектроннаяПодпись.УстановленныеПодписи(ЭлектронныйДокумент);
	Для каждого ЭП Из ЭлектронныеПодписиЭД Цикл
	
		ДвоичныеДанныеПодписи = ЭП.Подпись;
		Если ДвоичныеДанныеПодписи = ДвоичныеДанныеПроверки Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Обновление статусов документов пакета электронного документа.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - ссылка на пакет электронного документа.
//  НовыйСтатусПакетаЭД - ПеречислениеСсылка.СтатусыПакетовЭД - новый статус.
//  ДатаИзменения - Дата - дата изменения статуса.
//
Процедура ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД, НовыйСтатусПакетаЭД, ДатаИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ПакетЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПакетЭД.ЭлектронныеДокументы.Количество() = 0 Тогда
		
		ШаблонОшибки = НСтр("ru = 'Документ %1 не был отправлен. Подробнее см. Журнал регистрации'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ШаблонОшибки = НСтр("ru = 'Некорректно заполнен документ %1.
			|Не заполнена табличная часть ""ОбменСКонтрагентами""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					ПакетЭД );
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'Отправка пакета ЭД и обновление статусов ЭД'"),
			ТекстОшибки,
			ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Документ Из ПакетЭД.ЭлектронныеДокументы Цикл
			Если НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Доставлен Тогда
				ЗаписатьДатуПолучения(Документ.ЭлектронныйДокумент, ДатаИзменения);
			ИначеЕсли НовыйСтатусПакетаЭД = Перечисления.СтатусыПакетовЭД.Отправлен Тогда
				ЗаписатьДатуОтправки(Документ.ЭлектронныйДокумент, ДатаИзменения);
			КонецЕсли;
			ОбновитьВерсиюЭД(Документ.ЭлектронныйДокумент);
		КонецЦикла;
		ПакетОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(ПакетЭД);
		ПакетОбъект.СтатусПакета = НовыйСтатусПакетаЭД;
		ПакетОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
			НСтр("ru = 'смена статуса пакета ЭД и обновление статусов ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Проверяет форматы электронных документов в настройках на актуальность и при необходимости актуализирует их.
//
// Параметры:
//  НастройкиОбмена			 - Структура - см. функцию ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику;
//  СообщенияПользователю	 - Массив - содержит элементы типа СообщениеПользователю, которые нужно вывести по результатам
//                                      работы процедуры.
//
Процедура АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена, СообщенияПользователю = Неопределено)

	Если НастройкиОбмена <> Неопределено И ТипЗнч(НастройкиОбмена) = Тип("Структура") Тогда
		
		ВерсияФорматаУстановленаВручную = Неопределено;
		ВидЭД                           = Неопределено;
		ВерсияФормата                   = Неопределено;
		
		НастройкиОбмена.Свойство("ВерсияФорматаУстановленаВручную", ВерсияФорматаУстановленаВручную);
		
		Если НастройкиОбмена.Свойство("ВидЭД", ВидЭД) И НастройкиОбмена.Свойство("ВерсияФормата", ВерсияФормата) 
				И ЗначениеЗаполнено(ВидЭД) И ЗначениеЗаполнено(ВерсияФормата) Тогда
			ТаблицаФорматов = ФорматыЭлектронныхДокументов();
			СведенияОФормате = ТаблицаФорматов.НайтиСтроки(
				Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, ВерсияФормата));
				
				Если СведенияОФормате.Количество() И Не СведенияОФормате[0].Действует
						И Не ВерсияФорматаУстановленаВручную = Истина Тогда
				ПредставлениеСтарогоФормата = СведенияОФормате[0].ПредставлениеФормата;
				
				АктуальныйФормат = АктуальнаяВерсияФорматаЭД(ВидЭД);
				СведенияОНовомФормате = ТаблицаФорматов.НайтиСтроки(
					Новый Структура("ВидЭлектронногоДокумента, ИдентификаторФормата", ВидЭД, АктуальныйФормат));
				ПредставлениеНовогоФормата = СведенияОНовомФормате[0].ПредставлениеФормата;
				
				НастройкиОбмена.Вставить("ВерсияФормата", АктуальныйФормат);
				
				// Скорректируем настройку отправки
				УстановитьПривилегированныйРежим(Истина);
				
				МенеджерЗаписи = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Отправитель     = НастройкиОбмена.Организация;
				МенеджерЗаписи.Получатель      = НастройкиОбмена.Контрагент;
				МенеджерЗаписи.Договор         = НастройкиОбмена.ДоговорКонтрагента;
				МенеджерЗаписи.ВидДокумента    = НастройкиОбмена.ВидЭД;
				МенеджерЗаписи.ПрикладнойВидЭД = НастройкиОбмена.ПрикладнойВидЭД;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ВерсияФормата = СведенияОНовомФормате[0].ИдентификаторФормата;
				МенеджерЗаписи.Записать();
				
				НастройкиОбмена.ВерсияФормата = СведенияОНовомФормате[0].ИдентификаторФормата;
				НастройкиОбмена.ЭтоУПД        = СведенияОНовомФормате[0].ВозможноИспользованиеУПД;
				
				Текст = СтрШаблон(НСтр("ru = 'В текущей настройке отправки устаревший формат (%1) был заменен на актуальный (%2).'"),
					 ПредставлениеСтарогоФормата, ПредставлениеНовогоФормата);
				
				ОбщегоНазначения.СообщитьПользователю(Текст);
				
				УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Определяет идентификатор формата электронного документа, соответствующего указанному пространству имен.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа
//  ПространствоИмен		 - Строка - пространство имен.
// 
// Возвращаемое значение:
//  Строка - идентификатор формата.
//
Функция ФорматПоПространствуИмен(ВидЭлектронногоДокумента, ПространствоИмен)

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаФормата Из СтрокиВидаЭлектронногоДокумента Цикл
		Если СтрокаФормата.ПространстваИмен.Найти(СокрЛП(ПространствоИмен)) <> Неопределено Тогда
			Результат = СтрокаФормата.ИдентификаторФормата;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Формирует структуру сведений о формате.
//
// Параметры:
//  ВидЭлектронногоДокумента - ПеречислениеСсылка.ВидыЭД - вид электронного документа.
//  ИдентификаторФормата	 - Строка - формат электронного документа.
// 
// Возвращаемое значение:
//  Структура - содержит данные о формате. Состав и типы ключей описываются в макете
//              Обработка.ОбменСКонтрагентами.ВерсииФорматовЭлектронныхДокументов.
//
Функция СведенияОФормате(ВидЭлектронногоДокумента, ИдентификаторФормата)

	Результат = Неопределено;
	
	ТаблицаФорматов = ФорматыЭлектронныхДокументов();
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	ПараметрыОтбора.Вставить("ИдентификаторФормата", ИдентификаторФормата);
	СтрокиВидаЭлектронногоДокумента = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидаЭлектронногоДокумента.Количество() Тогда
		СтрокаФормата = СтрокиВидаЭлектронногоДокумента[СтрокиВидаЭлектронногоДокумента.Количество() - 1];
		
		Результат = Новый Структура;
		Для Каждого Колонка Из ТаблицаФорматов.Колонки Цикл
			Результат.Вставить(Колонка.Имя, СтрокаФормата[Колонка.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

// Получение допустимого статуса электронного документа.
//
// Параметры:
//  НовыйСтатус - Перечисления.СтатусыЭД - устанавливаемый статус.
//  СсылкаНаЭД - ДокументСсылка.ЭлектронныйДокументВходящий, ЭлектронныйДокументИсходящий - ссылка на электронный документ.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыЭД - установленный статус.
//
Функция ПолучитьДопустимыйСтатусЭД(НовыйСтатус, СсылкаНаЭД)
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если    НовыйСтатус = Перечисления.СтатусыЭД.Отклонен
		ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОтклоненПолучателем
		ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ОшибкаПередачи
		ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.Аннулирован
		ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании
		ИЛИ НовыйСтатус = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
		
		Возврат НовыйСтатус;
	КонецЕсли;
	
	ТекущийСтатус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаЭД, "СтатусЭД");
	Если НЕ ЗначениеЗаполнено(ТекущийСтатус) Тогда
		Возврат НовыйСтатус;
	КонецЕсли;
	
	НастройкиОбмена = НастройкиОбменаЭД(СсылкаНаЭД);
	Если НастройкиОбмена = Неопределено Тогда
		Возврат ТекущийСтатус;
	КонецЕсли;
	
	МассивСтатусов = ВернутьМассивСтатусовЭД(НастройкиОбмена);
	ИндексТекущегоСтатуса = МассивСтатусов.Найти(ТекущийСтатус);
	ИндексНовогоСтатуса   = МассивСтатусов.Найти(НовыйСтатус);
	Если ИндексНовогоСтатуса <> Неопределено И ИндексТекущегоСтатуса <> Неопределено Тогда
		Если ИндексНовогоСтатуса > ИндексТекущегоСтатуса Тогда
			ТекущийСтатус = НовыйСтатус;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСтатус;
	
КонецФункции

// Формирование электронных документов и помещение в справочник присоединенных файлов.
//
// Параметры:
//  МассивОбъектов - Массив - массив ссылок на объекты, к которым надо создать электронный документ.
//  ПараметрыОбмена - Соответствие - соответствие, содержащая настройки обмена ЭД для объектов.
//  ДопПараметры - Структура - дополнительные параметры.
//
// Возвращаемое значение:
//  Массив - сформированные документы.
//
Функция СформироватьПрисоединенныеФайлы(МассивОбъектов, ПараметрыОбмена, ДопПараметры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктурОбмена = СформироватьXMLФайлыДокументов(МассивОбъектов, ПараметрыОбмена, ДопПараметры);
	МассивСформированныхЭД = Новый Массив;
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
	
		ПолноеИмяФайла = СтруктураОбмена.ПолноеИмяФайла;
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		ВремяСозданияЭД = СтруктураОбмена.СтруктураЭД.ДатаЭД;
		Файл = Новый Файл(ПолноеИмяФайла);
		ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		УникальныйИдентификаторЭД = "";
		СтруктураОбмена.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		
		Если НЕ ЗначениеЗаполнено(УникальныйИдентификаторЭД) Тогда
			СтруктураОбмена.СтруктураЭД.Свойство("УникальныйИдентификатор", УникальныйИдентификаторЭД);
		КонецЕсли;
		
		Ответственный = Неопределено;
		ОбменСКонтрагентамиПереопределяемый.ПолучитьОтветственногоПоЭД(СтруктураОбмена.СтруктураЭД.Контрагент,
			СтруктураОбмена.СтруктураЭД.Организация, СтруктураОбмена.СтруктураЭД.ДоговорКонтрагента, Ответственный);
			
		СтруктураОбмена.СтруктураЭД.Вставить("Ответственный", Ответственный);
		
		НовыйЭлектронныйДокумент = СоздатьЭлектронныйДокумент(СтруктураОбмена.СтруктураЭД, ДопПараметры);
		
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		СтруктураОбмена.СтруктураЭД.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
		
		ПараметрыФайла = Новый Структура();
		ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
		ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент);
		ПараметрыФайла.Вставить("ИмяБезРасширения", Файл.ИмяБезРасширения);
		ПараметрыФайла.Вставить("РасширениеБезТочки", СтрЗаменить(Файл.Расширение, ".", ""));
		ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
		НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(УникальныйИдентификаторЭД);
		
		ДобавленныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайла, , , НоваяСсылкаЭД);
	
		СтруктураОбмена.СтруктураЭД.Вставить("НаименованиеФайла", Файл.ИмяБезРасширения);
		
		ФлагПродолжить = Ложь;
		
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			ФлагПродолжить = Истина;
		ИначеЕсли СтруктураОбмена.Свойство("ПолноеИмяДопФайла") Тогда
			ДопФайлСоздан = СоздатьПрисоединенныйДопФайл(СтруктураОбмена, ДобавленныйФайл);
			Если НЕ ДопФайлСоздан Тогда
				ФлагПродолжить = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(Файл.Путь);
		Если ФлагПродолжить Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("МассивФайлов") И СтруктураОбмена.МассивФайлов.Количество() > 0 Тогда
			АдресАрхива = АрхивДополнительныхФайлов(СтруктураОбмена.МассивФайлов);
			Если Не АдресАрхива = Неопределено Тогда
				ПараметрыФайла = Новый Структура();
				ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
				ПараметрыФайла.Вставить("ВладелецФайлов", НовыйЭлектронныйДокумент); 
				ПараметрыФайла.Вставить("ИмяБезРасширения", НСтр("ru = 'Дополнительные файлы'"));
				ПараметрыФайла.Вставить("РасширениеБезТочки", "zip");
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
				НоваяСсылкаЭД = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку();
		
				ДопФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресАрхива, , , НоваяСсылкаЭД);
			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
				СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
				СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
				СтруктураПараметров.Вставить("Организация", СтруктураОбмена.СтруктураЭД.Организация);
				СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
				СтруктураПараметров.Вставить("СоглашениеЭД", СтруктураОбмена.СтруктураЭД.СоглашениеЭД);
				СтруктураПараметров.Вставить("ВладелецЭД", НовыйЭлектронныйДокумент);
				СтруктураПараметров.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
				ИзменитьПоСсылкеПрисоединенныйФайл(ДопФайл, СтруктураПараметров, Ложь);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураОбмена.СтруктураЭД.Вставить("УникальныйИД", УникальныйИдентификаторЭД);
		
		ДатаФормированияЭДОтправителем = "";
		Если НЕ СтруктураОбмена.СтруктураЭД.Свойство("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем) Тогда
			ДатаФормированияЭДОтправителем = ВремяСозданияЭД;
		КонецЕсли;
		СтруктураОбмена.СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);
		СтатусЭД = Неопределено;
		Если НЕ (СтруктураОбмена.СтруктураЭД.Свойство("СтатусЭД", СтатусЭД) И ЗначениеЗаполнено(СтатусЭД)) Тогда
			СтруктураОбмена.СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Сформирован);
		КонецЕсли;
		
		Если СтруктураОбмена.Свойство("СчетФактураБезФормированияЭД")
			И ЗначениеЗаполнено(СтруктураОбмена.СчетФактураБезФормированияЭД) Тогда
			
			Если ДопПараметры = Неопределено Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;
			
			Если ДопПараметры.Свойство("МассивОбработанныхСФ") Тогда
				ДопПараметры.МассивОбработанныхСФ.Добавить(СтруктураОбмена.СчетФактураБезФормированияЭД);
			Иначе
				ДопПараметры.Вставить("МассивОбработанныхСФ",
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураОбмена.СчетФактураБезФормированияЭД));
			КонецЕсли;
			
		КонецЕсли;
		
		ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбмена.СтруктураЭД);
		Для каждого Строка Из СтруктураОбмена.СтруктураЭД.ДокументыОснования Цикл
			УстановитьСсылкуДляВладельцаВРегистреСостояний(Строка, НовыйЭлектронныйДокумент);
		КонецЦикла;
		МассивСформированныхЭД.Добавить(НовыйЭлектронныйДокумент);
		
		ОбменСКонтрагентамиПереопределяемый.ЭлектронныйДокументСформирован(ДобавленныйФайл);
	КонецЦикла;
	
	Возврат МассивСформированныхЭД;
	
КонецФункции

// Формирует для электронного документа текстовое представление прогресса подписания.
//
// Параметры:
//  ЭД          - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ
//  ВесМаршрута - Число                                  - максимально возможное количество подписей по маршруту.
// 
// Возвращаемое значение:
//  Строка - текстовое представление прогресса подписания.
//
Функция ПредставлениеПрогрессаПодписания(ЭД, ВесМаршрута)

	// Определим количество уже установленных подписей
	УстановленоПодписей = 0;
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ЭД) Тогда
		СсылкаНаЭД = ЭД;
	Иначе
		СсылкаНаЭД = ЭД.Ссылка;
	КонецЕсли;
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(СсылкаНаЭД);
	УстановленоПодписей = УстановленныеПодписи.Количество();
	
	
	// Сформируем представление прогресса подписания
	Если ВесМаршрута = 0 Тогда
		ВсегоПодписей = Макс(1, УстановленоПодписей);
	Иначе
		ВсегоПодписей = ВесМаршрута + УстановленоПодписей;
	КонецЕсли;
	ЯзыкКонфигурации = ОбщегоНазначения.КодОсновногоЯзыка();
	Разделитель = ?(ЭлектронноеВзаимодействиеСлужебный.КонфигурацияИспользуетНесколькоЯзыков(), "/", НСтр("ru = 'из'", ЯзыкКонфигурации));
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(%1 %2 %3)'", ЯзыкКонфигурации), 
		УстановленоПодписей, Разделитель, ВсегоПодписей);
		
	Возврат Результат;

КонецФункции

// Определяет необходимость ознакомления с изменением состояния электронного документа.
//
// Параметры:
//  ТекущееСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - текущее состояние электронного документа.
//  НовоеСостояние - ПеречислениеСсылка.СостоянияВерсийЭД - новое состояние электронного документа.
//
// Возвращаемое значение:
//  Булево - признак необходимости ознакомления.
//
Функция ЕстьНеобходимостьОзнакомленияСИзменениемСостоянияЭД(Знач ТекущееСостояние, Знач НовоеСостояние, Знач НаправлениеЭД)
	
	Если Не ИспользоватьОзнакомлениеСЭД() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НаОзнакомление = Ложь;
	
	Если НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		ИЛИ НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением Тогда
		
		СостоянияЗавершающиесяПриОбмене = Новый Массив;
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения);
		СостоянияЗавершающиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
		
		Если СостоянияЗавершающиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
			НаОзнакомление = Истина;
		КонецЕсли;
		
	ИначеЕсли НовоеСостояние = Перечисления.СостоянияВерсийЭД.Аннулирован Тогда
		
		СостоянияАннулирующиесяПриОбмене = Новый Массив;
		СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
		Если НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			// Аннулирование входящего документа без требования ответной подписи.
			СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
			СостоянияАннулирующиесяПриОбмене.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
		КонецЕсли;
		
		Если СостоянияАннулирующиесяПриОбмене.Найти(ТекущееСостояние) <> Неопределено Тогда
			НаОзнакомление = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаОзнакомление;
	
КонецФункции

// Возвращает общие настройки обмена с контрагентами
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - настройки обмена:
//   * ИспользоватьОзнакомлениеСЭД - Булево - признак использования механизма ознакомления с электронными документам.
//   * ИспользоватьОтложеннуюОтправкуЭД - Булево - признак использования отложенной отправки электронных документов.
//
Функция НастройкиОбменаСКонтрагентами()
	
	Возврат ОбменСКонтрагентамиПовтИсп.НастройкиОбменаСКонтрагентами();
	
КонецФункции

// Возвращает электронный документ.
//
// Параметры:
//  СтруктураЭД - Структура - содержит значения реквизитов нового документа, для создания входящего документа структура 
//                            должна содержать элемент "Входящий" со значением Истина иначе будет создан исходящий документ.
//  УникальныйИдентификаторЭД - УникальныйИдентификатор - уникальный идентификатор для создания ссылки на объект.
// 
// Возвращаемое значение:
//  ДокументСсылка - ссылка на новый входящий или исходящий электронный документ.
//
Функция СоздатьЭлектронныйДокумент(СтруктураЭД = Неопределено, ДопПараметры = Неопределено)
	
	Если СтруктураЭД.Свойство("Входящий") И СтруктураЭД.Входящий Тогда
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументВходящий.СоздатьДокумент();
		НовыйЭлектронныйДокумент.ИдентификаторКонтрагента = СтруктураЭД.Отправитель;
		НовыйЭлектронныйДокумент.ИдентификаторОрганизации = СтруктураЭД.Получатель;
		НовыйЭлектронныйДокумент.СпособОбменаЭД           = СтруктураЭД.СпособОбменаЭД;
		
		Если СтруктураЭД.Свойство("НаборДополнительныхВидовЭД") Тогда
			
			Для каждого ДополнительныйВидЭД Из СтруктураЭД.НаборДополнительныхВидовЭД Цикл
				СтрокаВидаЭД = НовыйЭлектронныйДокумент.ДополнительныеВидыЭД.Добавить();
				СтрокаВидаЭД.ВидЭД = ДополнительныйВидЭД;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		НовыйЭлектронныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
		НовыйЭлектронныйДокумент.ИдентификаторОрганизации = СтруктураЭД.Отправитель;
		НовыйЭлектронныйДокумент.ИдентификаторКонтрагента = СтруктураЭД.Получатель;
		НовыйЭлектронныйДокумент.СпособОбменаЭД           = СтруктураЭД.СпособОбменаЭД;
		
		Если СтруктураЭД.Свойство("ПодтверждениеОбязательно") Тогда
			НовыйЭлектронныйДокумент.ПодтверждениеОбязательно = СтруктураЭД.ПодтверждениеОбязательно;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ДокументыОснования") Тогда
		Для каждого Строка Из СтруктураЭД.ДокументыОснования Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = Строка;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйЭлектронныйДокумент,СтруктураЭД);
	
	Если СтруктураЭД.Свойство("ДатаЭД") Тогда
		НовыйЭлектронныйДокумент.Дата = СтруктураЭД.ДатаЭД;
	Иначе
		НовыйЭлектронныйДокумент.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяПодтверждение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяПодтверждение = СтруктураЭД.ТребуетсяПодтверждение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ТребуетсяИзвещение") Тогда
		НовыйЭлектронныйДокумент.ТребуетсяИзвещение = СтруктураЭД.ТребуетсяИзвещение;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("МаршрутПодписания") Тогда
		НовыйЭлектронныйДокумент.МаршрутПодписания = СтруктураЭД.МаршрутПодписания;
	КонецЕсли;

	
	Если СтруктураЭД.Свойство("НаименованиеДокументаОтправителя") Тогда
		НовыйЭлектронныйДокумент.НаименованиеДокументаОтправителя = СтруктураЭД.НаименованиеДокументаОтправителя;
	КонецЕсли;
	
	Если СтруктураЭД.Свойство("ИдентификаторыДокументовИЭДОснований") Тогда
		Для Каждого СтрокаТаблицы Из СтруктураЭД.ИдентификаторыДокументовИЭДОснований Цикл
			НоваяСтрока = НовыйЭлектронныйДокумент.ИдентификаторыОснованийВладельцаФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
	НовыйЭлектронныйДокумент.Записать();
	НовыйЭлектронныйДокументСсылка = НовыйЭлектронныйДокумент.Ссылка; 
	
	Возврат НовыйЭлектронныйДокументСсылка;
	
КонецФункции

// Сохраняет текст причины отклонения в входящем или исходящем электронном документе.
//
// Параметры:
//  СсылкаНаЭД			 - ДокументСсылка.ЭлектронныйДокументВходящий, ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на отклоняемый документ
//  ПричинаОтклонения	 - Строка - строка, содержащая причину отклонения документа.
//
Процедура ЗаписатьПричинуОтклонения(СсылкаНаЭД,ПричинаОтклонения)
	
	НачатьТранзакцию();
	Попытка
		ОбъектЭДО = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(СсылкаНаЭД);
		ОбъектЭДО.ПричинаОтклонения = ПричинаОтклонения;
		ОбъектЭДО.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает из табличной части "Входящие электронные документы" настройки ЭДО способ обработки 
// электронного документа переданного вида.
//
// Параметры:
//  * НастройкиПолучения - Структура -настройки которые определяют способ получения
//      * Организация - Справочник.Организации - организация получатель электронного документа
//      * Контрагент - Справочник.Контрагенты  - контрагент отправитель электронного документа
//      * Отправитель - Строка  - идентификатор отправителя
//      * Получатель - Строка  - идентификатор получателя
//  * ВидЭД		 - ПеречислениеСсылка.ВидыЭД - вид ЭД для поиска.
// 
// Возвращаемое значение:
//  Строка - способ обработки из табличной части настройки ЭДО.
//
Функция СпособОбработкиВходящегоДокумента(НастройкиПолучения, ВидЭД, ТипЭлементаВерсииЭД, ДополнительныеВидыЭД = Неопределено)
	
	СпособОбработки                   = "Вручную";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки,
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
	|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
	|   НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента В(&ВидЭД)
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки,
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
	|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
	|   НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента В(&ВидЭД)
	|	И НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
	|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
	|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"";
	Запрос.УстановитьПараметр("Отправитель"             , НастройкиПолучения.Контрагент);
	Запрос.УстановитьПараметр("Получатель"              , НастройкиПолучения.Организация);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", НастройкиПолучения.Отправитель);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя" , НастройкиПолучения.Получатель);
	
	ВерныйВидЭД = ВидЭД;
	Если ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД Тогда
		
		Если ВидЭД = Перечисления.ВидыЭД.УПД Тогда
			ВерныйВидЭД = Перечисления.ВидыЭД.СчетФактура;
		ИначеЕсли  ВидЭД = Перечисления.ВидыЭД.УКД Тогда
			ВерныйВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
		КонецЕсли;
		
		МассивВидовЭД = Новый Массив;
		МассивВидовЭД.Добавить(ВерныйВидЭД);
		Если ЗначениеЗаполнено(ДополнительныеВидыЭД) Тогда
			МассивВидовЭД.Добавить(ДополнительныеВидыЭД[0]);
		Иначе
			МассивВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидЭД", МассивВидовЭД);
	Иначе
		Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	РезультатЗапроса = РезультатыЗапроса[0];
	Если РезультатЗапроса.Пустой() Тогда
		РезультатЗапроса = РезультатыЗапроса[1];
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат СпособОбработки;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СписокДоступныхСпособовОбработки  = СписокОперацийВидаЭД(Выборка.ВидДокумента);
		СпособОбработки = Выборка.СпособОбработки;
		Если СпособОбработки <> "Вручную" И СписокДоступныхСпособовОбработки.НайтиПоЗначению(СпособОбработки) = Неопределено Тогда
			Если СписокДоступныхСпособовОбработки.Количество() = 1 Тогда
				СпособОбработки = СписокДоступныхСпособовОбработки[0].Значение;
				НеПредлагатьСохранятьНастройки = Выборка.НеПредлагатьСохранятьНастройки;
			Иначе
				СпособОбработки = "Вручную";
				НеПредлагатьСохранятьНастройки = Ложь;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			ЗаписьНастройкиОтраженияВУчете = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНастройкиОтраженияВУчете, Выборка);
			ЗаписьНастройкиОтраженияВУчете.СпособОбработки                = СпособОбработки;
			ЗаписьНастройкиОтраженияВУчете.НеПредлагатьСохранятьНастройки = НеПредлагатьСохранятьНастройки;
			ЗаписьНастройкиОтраженияВУчете.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		СписокДоступныхСпособовОбработки  = СписокОперацийВидаЭД(Выборка.ВидДокумента);
		СпособОбработкиВторогоДокумента = Выборка.СпособОбработки;
		Если СпособОбработкиВторогоДокумента <> "Вручную" И СписокДоступныхСпособовОбработки.НайтиПоЗначению(СпособОбработкиВторогоДокумента) = Неопределено Тогда
			Если СписокДоступныхСпособовОбработки.Количество() = 1 Тогда
				СпособОбработкиВторогоДокумента = СписокДоступныхСпособовОбработки[0].Значение;
				НеПредлагатьСохранятьНастройки  = Выборка.НеПредлагатьСохранятьНастройки;
			Иначе
				СпособОбработкиВторогоДокумента = "Вручную";
				НеПредлагатьСохранятьНастройки  = Ложь;
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			ЗаписьНастройкиОтраженияВУчете = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьНастройкиОтраженияВУчете, Выборка);
			ЗаписьНастройкиОтраженияВУчете.СпособОбработки                = СпособОбработкиВторогоДокумента;
			ЗаписьНастройкиОтраженияВУчете.НеПредлагатьСохранятьНастройки = НеПредлагатьСохранятьНастройки;
			ЗаписьНастройкиОтраженияВУчете.Записать();
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		СтруктураСпособовОбработки = Новый Структура("ПервичныйДокумент, СчетФактура");
		Если Выборка.ВидДокумента = ВерныйВидЭД Тогда
			СтруктураСпособовОбработки.ПервичныйДокумент = СпособОбработки;
			СтруктураСпособовОбработки.СчетФактура       = СпособОбработкиВторогоДокумента;
		Иначе
			СтруктураСпособовОбработки.ПервичныйДокумент = СпособОбработкиВторогоДокумента;
			СтруктураСпособовОбработки.СчетФактура       = СпособОбработки;
		КонецЕсли;
		СпособОбработки = СтруктураСпособовОбработки;
	КонецЕсли;
	
	Возврат СпособОбработки;
	
КонецФункции

// Только для внутреннего использования
Функция ЕстьНеОтправленноеПодтверждение(ВладелецФайла, СостояниеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.СтатусЭД,
	|	ЭДПрисоединенныеФайлы.ПодписанЭП,
	|	ЕСТЬNULL(ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ) КАК ВладелецПодписанЭП
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)
	|	И ЭДПрисоединенныеФайлы.СтатусЭД В(&СтатусыНеотправленногоЭД)";
	
	СтатусыНеотправленногоЭД = Новый Массив;
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыНеотправленногоЭД.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Запрос.УстановитьПараметр("СтатусыНеотправленногоЭД", СтатусыНеотправленногоЭД);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Если Выборка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.Подписан Тогда
		
		Если Выборка.ВладелецПодписанЭП И Не Выборка.ПодписанЭП Тогда
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ИзвещениеНаПодписи;
		Иначе
			СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		КонецЕсли;
		
	ИначеЕсли Выборка.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет есть ли подтверждение о доставке для документов ФНС.
Функция ЕстьНепринятоеПодтверждение(ВладелецФайла, СостояниеЭД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (&ТипыИзвещений)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТипыИзвещений = Новый Массив;
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	ТипыИзвещений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	Запрос.УстановитьПараметр("ТипыИзвещений", ТипыИзвещений);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		СостояниеЭД = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СтатусыОбработанногоПакетаЭД() Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПакетовЭД.Распакован);
	Статусы.Добавить(Перечисления.СтатусыПакетовЭД.Отправлен);
	
	Возврат Статусы;
	
КонецФункции

// Обновляет статусы подключений настроек ЭДО
//
// Параметры:
//  СоотвСоглашенийИСтруктурСертификатов - Соответствие - параметры для обновления статусов.
//
// Возвращаемое значение:
//  Число - количество обновленных настроек ЭДО.
//
Функция ОбновитьСтатусыПодключенияНастроекЭДО(СоотвСоглашенийИСтруктурСертификатов)
	
	ТаблицаПриглашений = ОбменСКонтрагентамиВнутренний.ТаблицаДанныхУчастниковОбмена(СоотвСоглашенийИСтруктурСертификатов);
	СохранитьПриглашения(ТаблицаПриглашений);
	
	Возврат ТаблицаПриглашений.Количество();
	
КонецФункции

// ЭД владелец - первичный ЭД к которому пришла вторая подпись
// для этого ЭД необходимо найти пакет ЭД, из него извлечь доп данные - наименование эл документа на основании которого он был введен
// по наименованию найти ЭДОснования, установить у его владельца статус "Обмен завершен с исправлением".
//
Процедура УстановитьСостояниеЗавершен(ДобавленныйФайл, НаправлениеЭД, ВыполняетсяОбновлениеИнформационнойБазы = Ложь)
	
	Если Не ЭтоДокументКорректировки(ДобавленныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	ЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавленныйФайл, "ВладелецФайла");
	
	НомераЭД = ЭД.ИдентификаторыОснованийВладельцаФайла.ВыгрузитьКолонку("ИдентификаторДокументаОснования");
	
	Если НомераЭД.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла КАК ДокументОснования
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.НомерЭД В(&НомерЭД)
	|	И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД))";
	Запрос.УстановитьПараметр("НомерЭД", НомераЭД);
	Запрос.УстановитьПараметр("НаправлениеЭД", НаправлениеЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	ДокументыОснования = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументыОснования.Добавить(Выборка.ДокументОснования);
		
	КонецЦикла;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		ОбменСКонтрагентамиВнутренний.УстановитьСостояниеОбменЗавершенСИсправлением(ДокументыОснования, ВыполняетсяОбновлениеИнформационнойБазы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыЭлектронныхДокументовРТУ()
	
	МассивВидов = Новый Массив;
	МассивВидов.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивВидов.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивВидов.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	МассивВидов.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	
	Возврат МассивВидов;
	
КонецФункции

// Возвращает настройки обмена ЭД по ИД участников.
//
// Параметры:
//  ИДОтправителя - Строка - строка с уникальный идентификатор отправителя.
//  ИДПолучателя - Строка - строка с уникальный идентификатор получателя.
//  ВидЭД - ПеречислениеСсылка - вид электронного документа.
//
// Возвращаемое значение:
//  Структура - структура параметров с настройками обмена.
//
Функция ПолучитьНастройкиОтправкиЭДПоИД(ИДОтправителя, ИДПолучателя,
						Организация, Контрагент,
						ВидЭД = Неопределено, ПрикладнойВидЭД = Неопределено, СоздаватьНастройки = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВозврата = Неопределено;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято) КАК Статус,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЭДОИсходящиеДокументы.Отправитель КАК Организация,
		|	НастройкиЭДОИсходящиеДокументы.Получатель КАК Контрагент,
		|	НастройкиЭДОИсходящиеДокументы.СпособОбменаЭД КАК СпособОбменаЭД,
		|	НастройкиЭДОИсходящиеДокументы.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30) КАК ВерсияФорматаПакета,
		|	НастройкиЭДОИсходящиеДокументы.Договор КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиЭДОИсходящиеДокументы
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторПолучателя = &ИдентификаторКонтрагента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ИдентификаторОтправителя = &ИдентификаторОрганизации
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА НастройкиЭДОИсходящиеДокументы.ВидДокумента = &ВидЭД
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И НастройкиЭДОИсходящиеДокументы.Отправитель = &Организация
		|	И НастройкиЭДОИсходящиеДокументы.Получатель = &Контрагент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДополнительныеНастройки.Отправитель,
		|	ДополнительныеНастройки.Получатель,
		|	ДополнительныеНастройки.СпособОбменаЭД,
		|	ДополнительныеНастройки.ТребуетсяИзвещениеОПолучении,
		|	ЗНАЧЕНИЕ(Перечисление.ВерсииФорматаПакетаЭД.Версия30),
		|	ДополнительныеНастройки.Договор
		|ИЗ
		|	ДополнительныеНастройки КАК ДополнительныеНастройки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА НЕ &ИдентификаторКонтрагента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ИдентификаторПолучателя = &ИдентификаторКонтрагента
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ИдентификаторОрганизации = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ИдентификаторОтправителя = &ИдентификаторОрганизации
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ВидЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ДополнительныеНастройки.ВидДокумента = &ВидЭД
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ДополнительныеНастройки.Отправитель = &Организация
		|	И ДополнительныеНастройки.Получатель = &Контрагент";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", ИДПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИДОтправителя);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент" , Контрагент);
	Запрос.УстановитьПараметр("ВидЭД", ВидЭД);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", ПрикладнойВидЭД);
	
	ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовЭД(Запрос);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаПриглашений = РезультатЗапроса[0].Выгрузить();
	Присоединен = Ложь;
	
	Если ТаблицаПриглашений.Количество() > 0
		И ТаблицаПриглашений[0].Статус Тогда
	      Присоединен = Истина;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Отправитель",         ИДОтправителя);
		СтруктураВозврата.Вставить("Получатель",          ИДПолучателя);
		СтруктураВозврата.Вставить("Организация",         Выборка.Организация);
		СтруктураВозврата.Вставить("Контрагент",          Выборка.Контрагент);
		СтруктураВозврата.Вставить("ДоговорКонтрагента",  Выборка.ДоговорКонтрагента);
		СтруктураВозврата.Вставить("СпособОбменаЭД",      Выборка.СпособОбменаЭД);
		СтруктураВозврата.Вставить("ВерсияФорматаПакета", Выборка.ВерсияФорматаПакета);
		СтруктураВозврата.Вставить("ТребуетсяИзвещениеОПолучении", Выборка.ТребуетсяИзвещениеОПолучении);
	ИначеЕсли СоздаватьНастройки И Присоединен Тогда
		
		СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Неопределено, ИДОтправителя, ИДПолучателя);
		СоздатьНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, ИДПолучателя, "");
		
		Возврат ПолучитьНастройкиОтправкиЭДПоИД(ИДОтправителя, ИДПолучателя, Организация, Контрагент, ВидЭД, ПрикладнойВидЭД, Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(Знач ВладелецФайла) Экспорт
	
	СостояниеЭДО = СостояниеДокументооборота(ВладелецФайла);
	
	Результат = Ложь;
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно
		Или СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение настроек обмена по электронному документу.
//
// Параметры:
//  ФайлЭД - Ссылка, Объект - электронный документ.
// 
// Возвращаемое значение:
//  Структура - параметры обмена электронными документами.
//
Функция НастройкиОбменаЭД(ФайлЭД)
	
	Если ФайлЭД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыФайла = ЭлектронноеВзаимодействиеСлужебный.ЗначенияРеквизитовОбъектаИлиСсылки(ФайлЭД,
		"ВладелецФайла, НаправлениеЭД, ТипЭлементаВерсииЭД");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЭлектронныйДокумент.ВидЭД КАК ВидЭД,
		|	ЭлектронныйДокумент.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ЭлектронныйДокумент.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ЭлектронныйДокумент.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
		|	ЭлектронныйДокумент.Организация КАК Организация,
		|	ЭлектронныйДокумент.Контрагент КАК Контрагент,
		|	ЭлектронныйДокумент.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ЭлектронныйДокумент.ТребуетсяПодтверждение КАК ТребуетсяПодтверждение,
		|	ЭлектронныйДокумент.ТребуетсяИзвещение КАК ТребуетсяИзвещение,
		|	ЭлектронныйДокумент.МаршрутПодписания КАК МаршрутПодписания,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК СтатусПодключения
		|ИЗ
		|	&ЭлектронныйДокумент КАК ЭлектронныйДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО (ЭлектронныйДокумент.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации)
		|			И (ЭлектронныйДокумент.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента)
		|ГДЕ
		|	ЭлектронныйДокумент.Ссылка = &ВладелецФайла
		|	И (НЕ ПриглашенияКОбменуЭлектроннымиДокументами.Статус ЕСТЬ NULL
		|		ИЛИ ЭлектронныйДокумент.СпособОбменаЭД = &СпособОбменаИнтеркампани)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭлектронныйДокумент",
		ОбщегоНазначения.ИмяТаблицыПоСсылке(РеквизитыФайла.ВладелецФайла));
	Если ТипЗнч(РеквизитыФайла.ВладелецФайла) <> Тип("ДокументСсылка.ЭлектронныйДокументИсходящий") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭлектронныйДокумент.МаршрутПодписания", "НЕОПРЕДЕЛЕНО");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайла",            РеквизитыФайла.ВладелецФайла);
	Запрос.УстановитьПараметр("СпособОбменаИнтеркампани", Перечисления.СпособыОбменаЭД.Интеркампани);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ИспользоватьПодпись = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписиЭД")
		И (Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО
			ИЛИ Выборка.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("ВладелецФайла",            РеквизитыФайла.ВладелецФайла);
	НастройкиОбмена.Вставить("НаправлениеЭД",            РеквизитыФайла.НаправлениеЭД);
	НастройкиОбмена.Вставить("Направление",              РеквизитыФайла.НаправлениеЭД);
	НастройкиОбмена.Вставить("ТипЭлементаВерсииЭД",      РеквизитыФайла.ТипЭлементаВерсииЭД);
	НастройкиОбмена.Вставить("ВидЭД",                    Выборка.ВидЭД);
	НастройкиОбмена.Вставить("ПрикладнойВидЭД",          Выборка.ПрикладнойВидЭД);
	НастройкиОбмена.Вставить("Организация",              Выборка.Организация);
	НастройкиОбмена.Вставить("Контрагент",               Выборка.Контрагент);
	НастройкиОбмена.Вставить("ТребуетсяИзвещение",       Выборка.ТребуетсяИзвещение);
	НастройкиОбмена.Вставить("ТребуетсяПодтверждение",   Выборка.ТребуетсяПодтверждение);
	НастройкиОбмена.Вставить("СпособОбмена",             Выборка.СпособОбменаЭД);
	НастройкиОбмена.Вставить("ВерсияРегламентаЭДО",      Выборка.ВерсияРегламентаЭДО);
	НастройкиОбмена.Вставить("ИдентификаторОрганизации", Выборка.ИдентификаторОрганизации);
	НастройкиОбмена.Вставить("МаршрутПодписания",        Выборка.МаршрутПодписания);
	НастройкиОбмена.Вставить("СтатусПодключения",        Выборка.СтатусПодключения);
	НастройкиОбмена.Вставить("ВерсияФорматаПакета",      Перечисления.ВерсииФорматаПакетаЭД.Версия30);
	НастройкиОбмена.Вставить("ИспользоватьПодпись",      ИспользоватьПодпись);
	НастройкиОбмена.Вставить("ИспользоватьКвитанции",    Ложь);
	
	Возврат НастройкиОбмена;
	
КонецФункции

// Определение настройки обмена электронными документами по параметрам.
//
// Параметры:
//  СтруктураПараметров - Структура - параметры поиска.
//  МассивОтпечатковСертификатов - Массив - отпечатки сертификатов для проверки.
//  ФлагДействующиеСоглашения - Булево - признак поиска только действующих соглашений.
// 
// Возвращаемое значение:
//  Структура - данные настройки обмена.
//
Функция ОпределитьНастройкиЭДИзИсточника(Источник, СтруктураПараметров, МассивОтпечатковСертификатов = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОбменаЭД = Новый Структура;
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
		НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "СпособОбменаЭД, ПрикладнойВидЭД, ТипДокумента, СостояниеЭДО,
			| ИдентификаторКонтрагента, ИдентификаторОрганизации, Организация, Контрагент, ДоговорКонтрагента, ВидЭД");
		
		ДанныеОператора = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(РеквизитыОбъекта.ИдентификаторКонтрагента);
		
		Если ДанныеОператора = Неопределено Тогда
			РеквизитыОбъекта.Вставить("ВыгружатьДополнительныеСведения", Истина);
		Иначе
			РеквизитыОбъекта.Вставить("ВыгружатьДополнительныеСведения", ДанныеОператора.ОтправлятьДополнительныеСведения);
		КонецЕсли;
		
	Иначе
		НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник, "СпособОбменаЭД, ПрикладнойВидЭД, ТипДокумента, СостояниеЭДО,
			| ИдентификаторКонтрагента, ИдентификаторОрганизации, Организация, Контрагент, ДоговорКонтрагента, ВыгружатьДополнительныеСведения, ВидЭД");
		
	КонецЕсли;
	
	Если РеквизитыОбъекта.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.Интеркампани Тогда
		НастройкиОбменаЭД.Вставить("ВерсияФорматаПакета", Неопределено);
	Иначе
		НастройкиОбменаЭД.Вставить("ВерсияФорматаПакета", Перечисления.ВерсииФорматаПакетаЭД.Версия30);
	КонецЕсли;
	
	НастройкиОбменаЭД.Вставить("СпособОбменаЭД"                  , РеквизитыОбъекта.СпособОбменаЭД);
	НастройкиОбменаЭД.Вставить("ПрикладнойВидЭД"                 , РеквизитыОбъекта.ПрикладнойВидЭД);
	НастройкиОбменаЭД.Вставить("ТипДокумента"                    , РеквизитыОбъекта.ТипДокумента);
	НастройкиОбменаЭД.Вставить("НаправлениеЭД"                   , НаправлениеЭД);
	НастройкиОбменаЭД.Вставить("ИдентификаторКонтрагента"        , РеквизитыОбъекта.ИдентификаторКонтрагента);
	НастройкиОбменаЭД.Вставить("ИдентификаторОрганизации"        , РеквизитыОбъекта.ИдентификаторОрганизации);
	НастройкиОбменаЭД.Вставить("СостояниеЭДО"                    , РеквизитыОбъекта.СостояниеЭДО);
	НастройкиОбменаЭД.Вставить("Организация"                     , РеквизитыОбъекта.Организация);
	НастройкиОбменаЭД.Вставить("Контрагент"                      , РеквизитыОбъекта.Контрагент);
	НастройкиОбменаЭД.Вставить("ДоговорКонтрагента"              , РеквизитыОбъекта.ДоговорКонтрагента);
	НастройкиОбменаЭД.Вставить("ВыгружатьДополнительныеСведения" , РеквизитыОбъекта.ВыгружатьДополнительныеСведения);
	НастройкиОбменаЭД.Вставить("ВидЭД"                           , РеквизитыОбъекта.ВидЭД);
	
	Возврат НастройкиОбменаЭД;
	
КонецФункции

// Функция - Значение статуса
// Преобразует бинарное значение статуса в файле xml или xdto в значение типа булево.
// Параметры:
//  ЗначениеСтатусаВФайле - Строка - значение статуса в файле xml.
// 
// Возвращаемое значение:
//  Булево - Значение статуса в файле.
//
Функция ЗначениеСтатуса(ЗначениеСтатусаВФайле)
	
	Если ВРег(ЗначениеСтатусаВФайле) = ВРег("True") Тогда
		ЗначениеСтатуса = Истина;
	Иначе
		ЗначениеСтатуса = Ложь;
	КонецЕсли;
	
	Возврат ЗначениеСтатуса;
	
КонецФункции

// Получение массива статусов ЭД по настройке обмена.
//
// Параметры:
//  НастройкиОбмена - Структура - настройки обмена электронными документами.
// 
// Возвращаемое значение:
//  Массив - возможные статусы по настройке.
//
Функция ВернутьМассивСтатусовЭД(НастройкиОбмена)
	
	МассивСтатусов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена) Тогда
		Возврат МассивСтатусов;
	КонецЕсли;
	
	ТребуетсяИзвещение = НастройкиОбмена.ТребуетсяИзвещение;
	ТребуетсяПодтверждение = НастройкиОбмена.ТребуетсяПодтверждение;
	
	Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
		ТребуетсяПодтверждение = Ложь;
	КонецЕсли;
	
	Если НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Если ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			
		ИначеЕсли НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
					ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
			
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД 
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
				Если ТребуетсяИзвещение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				
				// Изменяется набор статусов ЭД в зависимости от использования версии регламента.
				Если НастройкиОбмена.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20 Тогда
					
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
						
						Если ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
					КонецЕсли;
				Иначе
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				
				
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
			
			Если ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)
				ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			КонецЕсли;
			
			Если НастройкиОбмена.ИспользоватьПодпись Тогда
				МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
			КонецЕсли;
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Отправлен);
			Если НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				Если ТребуетсяИзвещение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
				КонецЕсли;
				Если ТребуетсяПодтверждение Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
				КонецЕсли;
			Иначе
				Если НастройкиОбмена.ВерсияФорматаПакета = Перечисления.ВерсииФорматаПакетаЭД.Версия30 Тогда
					// Не будем для ответных титулов добавлять статус Доставлен,
					// т.к. по ним не должны приходить Уведомления.
					Если НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						Если ТребуетсяИзвещение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
						КонецЕсли;
						Если ТребуетсяПодтверждение Тогда
							МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Если формат исходящих документов 2.0
					Если НастройкиОбмена.ИспользоватьКвитанции Тогда
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Доставлен);
					КонецЕсли;
					Если НастройкиОбмена.ИспользоватьПодпись
						И НЕ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД) Тогда
						
						МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
		
		Если ОсновныеТипыЭД().Найти(НастройкиОбмена.ТипЭлементаВерсииЭД) <> Неопределено
			И ЭтоФНС(НастройкиОбмена.ВидЭД) Тогда
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			
		ИначеЕсли НЕ (ЭтоИзвещениеОПолучении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоПодтверждение(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоУведомлениеОбУточнении(НастройкиОбмена.ТипЭлементаВерсииЭД)
			ИЛИ ЭтоОтветныйТитул(НастройкиОбмена.ТипЭлементаВерсииЭД)) Тогда
			
			МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
			
			Если НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
				ИЛИ НастройкиОбмена.СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО Тогда
				
				Если ТребуетсяПодтверждение ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
				КонецЕсли;
				
			Иначе
				
				Если НастройкиОбмена.ИспользоватьПодпись
					И (ТребуетсяПодтверждение ИЛИ НастройкиОбмена.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА) Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Подписан);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПодготовленоПодтверждение);
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ОтправленоПодтверждение);
				КонецЕсли;
				
				Если НастройкиОбмена.ИспользоватьКвитанции
					И Не НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
					МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ДоставленоПодтверждение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НастройкиОбмена.Направление = Перечисления.НаправленияЭД.Интеркампани Тогда
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
		МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	КонецЕсли;
	
	Возврат МассивСтатусов;
	
КонецФункции

Функция ДополнительныеВидыЭДПоДокументу(Знач ЭлектронныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеВидыЭД.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДополнительныеВидыЭД КАК ДополнительныеВидыЭД
	|ГДЕ
	|	ДополнительныеВидыЭД.Ссылка = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЭД");
	
	Возврат Результат;
	
КонецФункции

Функция СоответствиеАктуальныхВидовЭДВМассив(АктуальныеВидыЭД)
	
	МассивАктуальныхВидовЭД = Новый Массив;
	Для каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
		МассивАктуальныхВидовЭД.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	Возврат МассивАктуальныхВидовЭД;
	
КонецФункции

Функция НовыеСвойстваЭД() Экспорт
	
	СвойстваЭД = Новый Структура;
	СвойстваЭД.Вставить("ВидЭД", "");
	СвойстваЭД.Вставить("ИспользоватьДляВходящих", Ложь);
	СвойстваЭД.Вставить("ИспользоватьДляИсходящих", Ложь);
	
	Возврат СвойстваЭД;
	
КонецФункции

Функция ВидЭДИспользуетсяПоНаправлению(ВидЭД, НаправлениеЭД, АктуальныеВидыЭД = Неопределено) Экспорт
	
	Если НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Интеркампани") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяСвойства = ИмяСвойстваДляОтбораПоНаправлениюЭД(НаправлениеЭД);
	
	Если АктуальныеВидыЭД = Неопределено Тогда
		АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	КонецЕсли;
	
	СвойстваВидаЭД = АктуальныеВидыЭД.Получить(ВидЭД);
	Возврат СвойстваВидаЭД <> Неопределено И СвойстваВидаЭД[ИмяСвойства];
	
КонецФункции

Процедура ДобавитьНастройкиПоУмолчаниюДляНеактуальныхВидовЭД(Запрос) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	НастройкиПоУмолчанию = НастройкиЭДОПоУмолчанию();
	ЗапросДополнительныеНастройки = Новый Запрос;
	ЗапросДополнительныеНастройки.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросДополнительныеНастройки.Текст = 
	"ВЫБРАТЬ
	|	&Поля1
	|ПОМЕСТИТЬ ВТНастройки
	|ИЗ
	|	&ТЗНастройкиПоУмолчанию КАК НастройкиПоУмолчанию
	|ГДЕ
	|	НЕ НастройкиПоУмолчанию.ВидДокумента В (&АктуальныеВидыЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
	|	&Поля2
	|ПОМЕСТИТЬ ДополнительныеНастройки
	|ИЗ
	|	ВТНастройки КАК ВТНастройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|		ПО (&УсловиеСоединения)
	|ГДЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	ЗапросДополнительныеНастройки.УстановитьПараметр("ТЗНастройкиПоУмолчанию", НастройкиПоУмолчанию);
	АктуальныеВидыИсходящие = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД(Перечисления.НаправленияЭД.Исходящий);
 
	ЗапросДополнительныеНастройки.УстановитьПараметр("АктуальныеВидыЭД", АктуальныеВидыИсходящие);
	
	МассивНастройкиПоУмолчанию = Новый Массив;
	МассивВТНастройки = Новый Массив;
	Для каждого Колонка Из НастройкиПоУмолчанию.Колонки Цикл
		Если Колонка.Имя = "Отправитель"
			Или Колонка.Имя = "Получатель"
			Или Колонка.Имя = "ИдентификаторОтправителя"
			Или Колонка.Имя = "ИдентификаторПолучателя" 
			Или Колонка.Имя = "Договор" Тогда
			Продолжить; 
		КонецЕсли;
		МассивНастройкиПоУмолчанию.Добавить(СтрШаблон("%1.%2 КАК %2", "НастройкиПоУмолчанию", Колонка.Имя));
		МассивВТНастройки.Добавить(СтрШаблон("%1.%2 КАК %2", "ВТНастройки", Колонка.Имя));
	КонецЦикла;
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&Поля1", Символы.ПС + СтрСоединить(МассивНастройкиПоУмолчанию, ",") + Символы.ПС);
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&Поля2", СтрСоединить(МассивВТНастройки, ","));
	ЗапросДополнительныеНастройки.Текст = СтрЗаменить(ЗапросДополнительныеНастройки.Текст, "&УсловиеСоединения", "ВТНастройки.СпособОбменаЭД = НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД");
	
	ЗапросДополнительныеНастройки.Выполнить();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
КонецПроцедуры

Функция НоваяТаблицаНастроек() 
	
	Настройки = Новый ТаблицаЗначений;
	МетаданныеРегистра = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей().Метаданные();
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Настройки.Колонки.Добавить(Измерение.Имя, Измерение.Тип);
	КонецЦикла; 
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		Настройки.Колонки.Добавить(Ресурс.Имя, Ресурс.Тип);
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		Настройки.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	КонецЦикла;
	Настройки.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	Настройки.Колонки.Добавить("ДокументУчета", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	Возврат Настройки;
	
КонецФункции 

Функция НастройкиЭДОПоУмолчанию()
	
	Настройки = НоваяТаблицаНастроек();
	ВидыЭлектронныхДокументов = ИспользуемыеВидыЭлектронныхДокументов();
	
	АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД(Перечисления.НаправленияЭД.Исходящий);
	
	Для Каждого ЗначениеПеречисления Из ВидыЭлектронныхДокументов Цикл
		Если АктуальныеВидыЭД.Получить(ЗначениеПеречисления) <> Неопределено Тогда
			Продолжить; 
		КонецЕсли;
		Для каждого СпособОбменаЭД Из Перечисления.СпособыОбменаЭД Цикл
			НоваяСтрока = Настройки.Добавить();
			ЗаполнитьНастройкуПоВидуЭлектронногоДокумента(
				НоваяСтрока, ЗначениеПеречисления);
			НоваяСтрока.СпособОбменаЭД = СпособОбменаЭД;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция ИмяСвойстваДляОтбораПоНаправлениюЭД(НаправлениеЭД)
	
	Возврат ?(НаправлениеЭД = Перечисления.НаправленияЭД.Входящий, "ИспользоватьДляВходящих", "ИспользоватьДляИсходящих");
	
КонецФункции

Функция ИменаСвойствФайлаЭлектронногоДокумента() 
	
	Возврат "Ссылка, ТипЭлементаВерсииЭД, ВладелецФайла, НаправлениеЭД, СтатусЭД";
	
КонецФункции 

Функция НастройкиРегламентаЭДОПрикладныхФорматов(ВидЭД, ВерсияФормата)
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТребуетсяИзвещениеОПолучении");
	Настройки.Вставить("ТребуетсяОтветнаяПодпись");
	Настройки.Вставить("РедактироватьПодпись");
	Настройки.Вставить("РедактироватьИзвещение");
	Настройки.Вставить("РедактироватьОтветнуюПодпись");
	
	СтандартнаяОбработка = Истина;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииНастроекРегламентаЭДО(Настройки,
		ВидЭД, ВерсияФормата, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Настройки.Вставить("ТребуетсяИзвещениеОПолучении", Истина);
		Настройки.Вставить("ТребуетсяОтветнаяПодпись",     Истина);
		Настройки.Вставить("РедактироватьПодпись",         Ложь);
		Настройки.Вставить("РедактироватьИзвещение",       Истина);
		Настройки.Вставить("РедактироватьОтветнуюПодпись", Истина);
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

// Возвращает владельца номенклатуры, которой пользуется контрагент.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, владельца номенклатуры которого нужно получить.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры контрагента.
//
Функция ВладелецНоменклатурыКонтрагента(Знач Контрагент)
	
	Владелец = Контрагент;
	ОбменСКонтрагентамиПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(Контрагент, Владелец);
	Возврат Владелец;
	
КонецФункции

// Возвращает таблицу значений с колонками, описывающими номенклатуру информационной базы.
// Таблица может быть инициализирована массивом структур с аналогичным составом свойств.
//
// Параметры
//  НаборНоменклатурыИБ - Массив, Структура - структура или массив структур, описывающих номенклатуру ИБ, для инициализации таблицы.
//                                            См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//                      - Неопределено - возвращаемая таблица не будет содержать строк.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с типизированными колонками, описывающими номенклатуру ИБ.
//                    Состав колонок аналогичен свойствам структуры, возвращаемой методом 
//                    ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Функция НоваяТаблицаНоменклатурыИнформационнойБазы(Знач НаборНоменклатурыИБ = Неопределено)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	Таблица.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	Таблица.Колонки.Добавить("Упаковка", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	
	Если ЗначениеЗаполнено(НаборНоменклатурыИБ) Тогда
		
		Если ТипЗнч(НаборНоменклатурыИБ) <> Тип("Массив") Тогда
			НаборНоменклатурыИБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыИБ);
		КонецЕсли;
		Для Каждого НоменклатураИБ Из НаборНоменклатурыИБ Цикл
			
			Запись = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, НоменклатураИБ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает таблицу значений с колонками, описывающими номенклатуру контрагента.
// Таблица может быть инициализирована массивом структур с аналогичным составом свойств.
//
// Параметры
//  НаборНоменклатурыКонтрагентов - Массив, Структура - структура или массив структур, описывающих номенклатуру контрагента, 
//                                                      для инициализации таблицы.
//                                                      См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//                                - Неопределено - возвращаемая таблица не будет содержать строк.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с типизированными колонками, описывающими номенклатуру контрагента.
//                    Состав колонок аналогичен свойствам структуры, возвращаемой методом 
//                    ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
//
Функция НоваяТаблицаНоменклатурыКонтрагентов(Знач НаборНоменклатурыКонтрагентов = Неопределено)
	
	СтруктураТаблицы = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
	
	ТипСтрока300 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300));
	
	Таблица = Новый ТаблицаЗначений;
	
	Для Каждого Элемент Из СтруктураТаблицы Цикл
		
		ИмяКолонки = Элемент.Ключ;
		ТипКолонки = ТипСтрока300;
		Если Элемент.Ключ = "Владелец" Тогда
			ТипКолонки = Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип;
		КонецЕсли;
		Таблица.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) Тогда
		
		Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
			НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
		КонецЕсли;
		Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
			
			Запись = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, НоменклатураКонтрагента);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает варианты сопоставления номенклатуры контрагентов номенклатуре ИБ по наименованию.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагентов, для которой нужно подобрать варианты сопоставления с номенклатурой ИБ.
//                                           См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
// 
// Возвращаемое значение:
//  Массив - варианты сопоставления номенклатуры. Представлены структурой:
//   * НоменклатураКонтрагента - Структура - элемент из параметра НаборНоменклатурыКонтрагентов.
//   * НоменклатураИБ - Структура - подобранный вариант номенклатуры ИБ. См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//   * Наименование - Строка - наименование номенклатуры ИБ.
//   * Артикул - Строка - артикул номенклатуры ИБ.
//   * Штрихкод - Строка - штрихкод номенклатуры ИБ.
//
Функция ВариантыСопоставленияНоменклатурыПоНаименованию(Знач НаборНоменклатурыКонтрагентов)
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	НаборВариантов = Новый Массив;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НайденнаяНоменклатура = НайтиНоменклатуруПоНаименованию(НоменклатураКонтрагента.Наименование);
		
		Для Каждого ЭлементСписка Из НайденнаяНоменклатура Цикл
			
			НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
			НоменклатураИБ.Номенклатура = ЭлементСписка.Значение;
			
			Вариант = Новый Структура();
			Вариант.Вставить("НоменклатураКонтрагента", НоменклатураКонтрагента);
			Вариант.Вставить("НоменклатураИБ", НоменклатураИБ);
			Вариант.Вставить("Наименование", ЭлементСписка.Представление);
			Вариант.Вставить("Артикул", "");
			Вариант.Вставить("Штрихкод", "");
			
			НаборВариантов.Добавить(Вариант);
			
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоПовторяющихсяДанных = НаборНоменклатурыКонтрагентов.Количество();
	КлючеваяОперация = "ОбщийМодуль.ОбменСКонтрагентамиСлужебный.ВариантыСопоставленияНоменклатурыПоНаименованию";
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала, КоличествоПовторяющихсяДанных / 10);
	
	Возврат НаборВариантов;
	
КонецФункции

// Возвращает номенклатуру найденную по наименованию.
// Используется поиск по шаблону "Наименование%".
// Если ничего не найдено, то применяется полнотекстовый поиск.
//
// Параметры:
//  Наименование - Строка - наименование для поиска.
//
// Возвращаемое значение:
//  Массив - найденные по наименованию экземпляры номенклатуры. 
//
Функция НайтиНоменклатуруПоНаименованию(Знач Наименование)
	
	НайденнаяНоменклатура = Новый СписокЗначений;
	
	// Ищем по каждому типу в отдельности.
	
	ТипыНоменклатуры = Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы();
	
	Для Каждого Тип Из ТипыНоменклатуры Цикл
		
		МетаданныеНоменклатуры = Метаданные.НайтиПоТипу(Тип);
		
		РезультатыПоиска = НайтиОбъектыПоНаименованию(Наименование, МетаданныеНоменклатуры);
		
		// Если нашли хоть что-то, то дальше не ищем.
		Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
			Для каждого Элемент Из РезультатыПоиска Цикл
				НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// Если не нашли, то пробуем полнотекстовый поиск.
		КоличествоВариантовПоиска = 20;
		РезультатыПоиска = НайтиОбъектыПолнотекстовымПоиском(
			"""" + Наименование + """", МетаданныеНоменклатуры, КоличествоВариантовПоиска, "Наименование");
		
		// Если нашли хоть что-то, то дальше не ищем.
		Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
			Для каждого Элемент Из РезультатыПоиска Цикл
				НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// Если не нашли, то пробуем полнотекстовый поиск по словам.
		КоличествоСлов = 5;
		КоличествоРезультатовНаСлово = 100;
		РезультатыПоиска = НайтиОбъектыПолнотекстовымПоискомПоСловам(
			Наименование, МетаданныеНоменклатуры, КоличествоСлов, КоличествоРезультатовНаСлово, "Наименование");
		
		// Если нашли хоть что-то, то дальше не ищем.
		Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
			Для каждого Элемент Из РезультатыПоиска Цикл
				НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// Если не нашли, то пробуем полнотекстовый поиск по синонимам.
		КоличествоСлов = 5;
		КоличествоРезультатов = 20;
		РезультатыПоиска = НайтиОбъектыПолнотекстовымПоискомПоСинонимам(
			Наименование, МетаданныеНоменклатуры, КоличествоСлов, КоличествоРезультатов, "Наименование");
		
		// Если нашли хоть что-то, то дальше не ищем.
		Если ЗначениеЗаполнено(РезультатыПоиска) Тогда
			Для каждого Элемент Из РезультатыПоиска Цикл
				НайденнаяНоменклатура.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденнаяНоменклатура;
	
КонецФункции

Функция НайтиОбъектыПоНаименованию(Знач Наименование, Знач МетаданныеОбъекта)
	
	ПроверятьИерархию = Ложь;
	Если МетаданныеОбъекта.Иерархический 
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ПроверятьИерархию = Истина;
	КонецЕсли;
	
	// Поиск в начале наименования.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 20
	|	Таблица.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.Ссылка) КАК Представление
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И &УсловиеПоИерархии";
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", МетаданныеОбъекта.ПолноеИмя());
	
	УсловиеПоИерархии = "ИСТИНА";
	Если ПроверятьИерархию Тогда
		УсловиеПоИерархии = "НЕ ЭтоГруппа";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоИерархии", УсловиеПоИерархии);
	
	НайденныеОбъекты = Новый СписокЗначений;
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат НайденныеОбъекты;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		НайденныеОбъекты.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоиском(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоРезультатов, Знач Реквизит = Неопределено)
	
	ПроверятьИерархию = Ложь;
	Если МетаданныеОбъекта.Иерархический 
		И МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		ПроверятьИерархию = Истина;
	КонецЕсли;
	
	НайденныеОбъекты = Новый СписокЗначений;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(ТекстПоиска, КоличествоРезультатов);
	СписокПоиска.ОбластьПоиска.Добавить(МетаданныеОбъекта);
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		Возврат НайденныеОбъекты;
	КонецПопытки;
	РезультатПоиска = Новый СписокЗначений;
	Для Каждого Элемент Из СписокПоиска Цикл
		Если ЗначениеЗаполнено(Реквизит) Тогда
			РеквизитРезультата = РеквизитРезультатаПолнотекстовогоПоиска(Элемент);
			Если СтрНайти(РеквизитРезультата, Реквизит) = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		РезультатПоиска.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	Если ПроверятьИерархию Тогда
		ЗначенияЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(РезультатПоиска.ВыгрузитьЗначения(), "ЭтоГруппа");
		Для каждого КлючЗначение Из ЗначенияЭтоГруппа Цикл
			Если КлючЗначение.Значение Тогда // ЭтоГруппа
				ЭлементСписка = РезультатПоиска.НайтиПоЗначению(КлючЗначение.Ключ);
				РезультатПоиска.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из РезультатПоиска Цикл
		НайденныеОбъекты.Добавить(Элемент.Значение, Элемент.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоискомПоСловам(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоСлов, Знач КоличествоРезультатовНаСлово, Знач Реквизит = Неопределено)
	
	Результаты = Новый ТаблицаЗначений;
	Результаты.Колонки.Добавить("Объект");
	Результаты.Колонки.Добавить("Представление");
	Результаты.Колонки.Добавить("Количество");
	
	НаборСлов = РазделитьТекстНаСлова(ТекстПоиска);
	
	ОбработаноСлов = 0;
	
	Для каждого Слово Из НаборСлов Цикл
		
		Если СтрДлина(Слово) <= 2 Тогда
			Продолжить;
		КонецЕсли;
		
		НайденоПоСлову = НайтиОбъектыПолнотекстовымПоиском("""" + Слово + """", МетаданныеОбъекта, КоличествоРезультатовНаСлово, Реквизит);
		
		Для каждого Элемент Из НайденоПоСлову Цикл
			СтрокаОбъекта = Результаты.Найти(Элемент.Значение, "Объект");
			Если СтрокаОбъекта = Неопределено Тогда
				СтрокаОбъекта = Результаты.Добавить();
				СтрокаОбъекта.Объект = Элемент.Значение;
				СтрокаОбъекта.Представление = Элемент.Представление;
				СтрокаОбъекта.Количество = 1;
			Иначе
				СтрокаОбъекта.Количество = СтрокаОбъекта.Количество + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбработаноСлов = ОбработаноСлов + 1;
		
		Если ОбработаноСлов >= КоличествоСлов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НайденныеОбъекты = Новый СписокЗначений;
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат НайденныеОбъекты;
	КонецЕсли;
	
	Результаты.Сортировать("Количество Убыв");
	МаксКоличество = Результаты[0].Количество;
	
	Для каждого СтрокаОбъекта Из Результаты Цикл
		Если СтрокаОбъекта.Количество < МаксКоличество Тогда
			Прервать;
		КонецЕсли;
		НайденныеОбъекты.Добавить(СтрокаОбъекта.Объект, СтрокаОбъекта.Представление);
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция НайтиОбъектыПолнотекстовымПоискомПоСинонимам(Знач ТекстПоиска, Знач МетаданныеОбъекта, Знач КоличествоСлов, Знач КоличествоРезультатов, Знач Реквизит = Неопределено)
	
	НаборСлов = РазделитьТекстНаСлова(ТекстПоиска);
	ОбработаноСлов = 0;
	СтрокаПоиска = "";
	
	Для каждого Слово Из НаборСлов Цикл
		Если СтрДлина(Слово) <= 2 Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			СтрокаПоиска = СтрокаПоиска + " ИЛИ ";
		КонецЕсли;
		СтрокаПоиска = СтрокаПоиска + "!" + Слово;
		ОбработаноСлов = ОбработаноСлов + 1;
		Если ОбработаноСлов >= КоличествоСлов Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеОбъекты = НайтиОбъектыПолнотекстовымПоиском(СтрокаПоиска, МетаданныеОбъекта, КоличествоРезультатов, Реквизит);
	
	Возврат НайденныеОбъекты;
	
КонецФункции

Функция РеквизитРезультатаПолнотекстовогоПоиска(Знач РезультатПоиска)
	
	Индекс = СтрНайти(РезультатПоиска.Описание, ":");
	Если Не ЗначениеЗаполнено(Индекс) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(РезультатПоиска.Описание, Индекс - 1);
	
КонецФункции

Функция РазделитьТекстНаСлова(Знач Текст)
	
	НаборСлов = Новый Массив;
	
	ДлинаТекста = СтрДлина(Текст);
	ИндексНачалаСлова = 1;
	
	Для Индекс = 1 По ДлинаТекста Цикл
		
		КодСимвола = КодСимвола(Текст, Индекс);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			Слово = Сред(Текст, ИндексНачалаСлова, Индекс - ИндексНачалаСлова);
			Если ЗначениеЗаполнено(Слово) Тогда
				НаборСлов.Добавить(Слово);
			КонецЕсли;
			ИндексНачалаСлова = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Слово = Сред(Текст, ИндексНачалаСлова);
	НаборСлов.Добавить(Слово);
	
	Возврат НаборСлов;
	
КонецФункции

Функция СоединитьШтрихкодыВСтроку(Знач НаборШтрихкодов, Знач МаксимальнаяДлина = 0) 
	
	Результат = "";
	ОграничиватьДлинуРезультата = (МаксимальнаяДлина > 0);
	ТекущаяДлина = 0;
	
	Для каждого Штрихкод Из НаборШтрихкодов Цикл
		
		ДлинаШтрихкода = СтрДлина(Штрихкод);
		Если ОграничиватьДлинуРезультата
			И ТекущаяДлина + ДлинаШтрихкода + 1 > МаксимальнаяДлина Тогда
			Прервать;
		КонецЕсли;
		
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), ",", "") + Штрихкод;
		ТекущаяДлина = ТекущаяДлина + ДлинаШтрихкода + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КонтрольОтраженияВУчете

///////////////////////////////////////////////////////////////////////////////////////////
// Общие методы контроля отражения в учете

// Возвращает входящие электронные документы, связанные с переданным учетным документом.
//
// Параметры:
//  УчетныйДокумент - ОпределяемыйТип.ОснованияЭлектронныхДокументов - учетный документ, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Массив - найденные электронные документы.
//
Функция ЭлектронныеДокументыПоУчетномуДокументу(Знач УчетныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основания.Ссылка КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.ДокументОснование = &УчетныйДокумент";
	Запрос.УстановитьПараметр("УчетныйДокумент", УчетныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЭлектронныйДокумент");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает учетные документы, связанные с переданным входящим электронным документом.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, по которому выполняется поиск.
//
// Возвращаемое значение:
//  Массив - найденные учетные документы.
//
Функция УчетныеДокументыПоЭлектронномуДокументу(Знач ЭлектронныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основания.ДокументОснование КАК УчетныйДокумент
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетныйДокумент");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////
// Общий контроль отражения в учете

// Возвращает необходимость контроля отражения в учете электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий, Массив - электронный документ (или массив), который требуется проверить.
//
// Возвращаемое значение:
//  Булево, Соответствие - признак того, что электронный документ требует контроля отражения в учете.
//                         Если был передан массив электронных документов, то возвращается соответствие
//                         с электронными документами в ключах и признаком необходимости контроля в значениях.
//
Функция ТребуетсяКонтрольОтраженияВУчете(Знач ЭлектронныйДокумент)
	
	СостоянияПрерывания = Новый Массив;
	СостоянияПрерывания.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяАннулирование);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияВерсийЭД.НеСформирован);
	СостоянияПрерывания.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	
	АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	ОтражаемыеВУчетеВидыЭД = ОбщегоНазначения.СкопироватьРекурсивно(АктуальныеВидыЭД, Ложь);
	ОтражаемыеВУчетеВидыЭД.Удалить(Перечисления.ВидыЭД.ПроизвольныйЭД);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ОтключитьКонтрольОтраженияВУчетеДокументовПодсистемы(ОтражаемыеВУчетеВидыЭД);
	КонецЕсли;
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ЭлектронныйДокумент, "СостояниеЭДО,ВидЭД,ЕстьПравилаОтраженияВУчете,ОтключитьКонтрольОтраженияВУчете");
		Результат = Новый Соответствие;
		Для каждого ТекущийЭлектронныйДокумент Из ЭлектронныйДокумент Цикл
			ТекущиеРеквизиты = Реквизиты[ТекущийЭлектронныйДокумент];
			ТекущееСостояние = ТекущиеРеквизиты.СостояниеЭДО;
			ТекущийВидЭД = ТекущиеРеквизиты.ВидЭД;
			ВозможноОтразитьВУчете =  ?(ТекущийВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД,
				ТекущиеРеквизиты.ЕстьПравилаОтраженияВУчете,
				ВидЭДИспользуетсяПоНаправлению(ТекущийВидЭД, Перечисления.НаправленияЭД.Входящий, ОтражаемыеВУчетеВидыЭД));
			ТребуетсяКонтроль = (СостоянияПрерывания.Найти(ТекущееСостояние) = Неопределено)
				И ВозможноОтразитьВУчете
				И Не ТекущиеРеквизиты.ОтключитьКонтрольОтраженияВУчете;
			Результат.Вставить(ТекущийЭлектронныйДокумент, ТребуетсяКонтроль);
		КонецЦикла;
		Возврат Результат;
		
	Иначе
		
		ТекущиеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент,
			"СостояниеЭДО,ВидЭД,ЕстьПравилаОтраженияВУчете,ОтключитьКонтрольОтраженияВУчете");
		ТекущееСостояние = ТекущиеРеквизиты.СостояниеЭДО;
		ТекущийВидЭД = ТекущиеРеквизиты.ВидЭД;
		ВозможноОтразитьВУчете =  ?(ТекущийВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД,
				ТекущиеРеквизиты.ЕстьПравилаОтраженияВУчете,
				ВидЭДИспользуетсяПоНаправлению(ТекущийВидЭД, Перечисления.НаправленияЭД.Входящий, ОтражаемыеВУчетеВидыЭД));
		ТребуетсяКонтроль = (СостоянияПрерывания.Найти(ТекущееСостояние) = Неопределено)
			И ВозможноОтразитьВУчете
			И Не ТекущиеРеквизиты.ОтключитьКонтрольОтраженияВУчете;
		
		Возврат ТребуетсяКонтроль;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Включает общий контроль отражения в учете для переданных электронных документов.
//
// Параметры:
//  НаборЭлектронныхДокументов - Массив - электронные документы (ДокументСсылка.ЭлектронныйДокументВходящий), 
//                                        по которым нужно включить контроль.
//
Процедура ВключитьКонтрольОтраженияВУчете(Знач НаборЭлектронныхДокументов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(НаборЭлектронныхДокументов) <> Тип("Массив") Тогда
		НаборЭлектронныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЭлектронныхДокументов);
	КонецЕсли;
	
	НаКонтроль = Новый Массив;
	ТребуетсяКонтроль = ТребуетсяКонтрольОтраженияВУчете(НаборЭлектронныхДокументов);
	
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		
		Если Не ТребуетсяКонтроль[ЭлектронныйДокумент] Тогда
			Продолжить;
		КонецЕсли;
		
		НаКонтроль.Добавить(ЭлектронныйДокумент);
		
		ВыполнитьКонтрольСопоставленияНоменклатуры(ЭлектронныйДокумент);
		ВыполнитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент);
		
	КонецЦикла;
	
	ВыполнитьКонтрольОтраженияВУчете(НаКонтроль);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Прекращает общий контроль отражения в учете для переданного электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, по которому прекращается контроль.
//
Процедура ОтключитьКонтрольОтраженияВУчете(Знач ЭлектронныйДокумент)
	
	ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентовЭД(ЭлектронныйДокумент);
	ОтключитьКонтрольПроведенияУчетныхДокументовЭД(ЭлектронныйДокумент);
	
	Изменения = Новый Структура;
	Изменения.Вставить("СопоставитьНоменклатуру", Ложь);
	Изменения.Вставить("СоздатьУчетныйДокумент", Ложь);
	Изменения.Вставить("ПровестиУчетныйДокумент", Ложь);
	
	ИзменитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, Изменения);
	
КонецПроцедуры

// Выполняет проверку на соответствие электронных документов требованиям по отражению в учете.
//
// Параметры:
//  НаборЭлектронныхДокументов - Массив - электронные документы (ДокументСсылка.ЭлектронныйДокументВходящий), 
//                                        по которым нужно выполнить проверку.
//  НаборПроверок - Массив, Неопределено - перечень проверок (строка), которые нужно выполнить:
//   * "СопоставитьНоменклатуру" - проверка на завершение сопоставления номенклатуры.
//   * "СоздатьУчетныйДокумент" - проверка на наличие учетного документа.
//   * "ПровестиУчетныйДокумент" - проверка на проведенность учетного документа.
//
Процедура ВыполнитьКонтрольОтраженияВУчете(Знач НаборЭлектронныхДокументов, Знач НаборПроверок = Неопределено)
	
	// Подготовка параметров.
	
	Если Не ЗначениеЗаполнено(НаборЭлектронныхДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НаборЭлектронныхДокументов) <> Тип("Массив") Тогда
		НаборЭлектронныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЭлектронныхДокументов);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборПроверок) Тогда
		НаборПроверок = Новый Массив;
		НаборПроверок.Добавить("СопоставитьНоменклатуру");
		НаборПроверок.Добавить("СоздатьУчетныйДокумент");
		НаборПроверок.Добавить("ПровестиУчетныйДокумент");
	КонецЕсли;
	Если ТипЗнч(НаборПроверок) = Тип("Строка") Тогда
		НаборПроверок = СтрРазделить(НаборПроверок, ",");
	КонецЕсли;
	
	// Сбор текста запроса для выполнения контроля.
	
	Контроль = Новый Соответствие;
	ИндексЗапроса = 0;
	ЧастиЗапроса = Новый Массив;
	
	Для Каждого Проверка Из НаборПроверок Цикл
		
		ТекстЗапроса = "";
		
		Если Проверка = "СопоставитьНоменклатуру" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК СопоставитьНоменклатуру
			|ИЗ
			|	РегистрСведений.КонтрольСопоставленияНоменклатурыЭДО КАК КонтрольСопоставления
			|ГДЕ
			|	КонтрольСопоставления.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольСоздания.Ссылка КАК ЭлектронныйДокумент,
			|	КонтрольСоздания.ДокументОснование КАК УчетныйДокумент
			|ИЗ
			|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК КонтрольСоздания
			|ГДЕ
			|	КонтрольСоздания.Ссылка В(&НаборЭлектронныхДокументов)";
			
		ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КонтрольПроведения.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
			|	ИСТИНА КАК ПровестиУчетныйДокумент
			|ИЗ
			|	РегистрСведений.КонтрольПроведенияУчетныхДокументовЭДО КАК КонтрольПроведения
			|ГДЕ
			|	КонтрольПроведения.ЭлектронныйДокумент В(&НаборЭлектронныхДокументов)";
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		Контроль.Вставить(Проверка, ИндексЗапроса);
		
		Если ЗначениеЗаполнено(ЧастиЗапроса) Тогда
			Разделитель =
			"
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
			ЧастиЗапроса.Добавить(Разделитель);
		КонецЕсли;
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
		ИндексЗапроса = ИндексЗапроса + 1
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	// Анализ результата запроса.
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицыПроверок = Новый Массив;
	Для Каждого Результат Из РезультатыЗапроса Цикл
		Таблица = Результат.Выгрузить();
		Таблица.Индексы.Добавить("ЭлектронныйДокумент");
		ТаблицыПроверок.Добавить(Таблица);
	КонецЦикла;
	
	Для Каждого ЭлектронныйДокумент Из НаборЭлектронныхДокументов Цикл
		
		ОтборЭД = Новый Структура("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		Изменения = Новый Структура;
		
		Для Каждого Элемент Из Контроль Цикл
			
			Проверка = Элемент.Ключ;
			Таблица = ТаблицыПроверок[Элемент.Значение];
			
			Если Проверка = "СопоставитьНоменклатуру" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СопоставитьНоменклатуру = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СопоставитьНоменклатуру", СопоставитьНоменклатуру);
				
			ИначеЕсли Проверка = "СоздатьУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				СоздатьУчетныйДокумент = Не ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("СоздатьУчетныйДокумент", СоздатьУчетныйДокумент);
				
			ИначеЕсли Проверка = "ПровестиУчетныйДокумент" Тогда
				
				НайденныеСтроки = Таблица.НайтиСтроки(ОтборЭД);
				ПровестиУчетныйДокумент = ЗначениеЗаполнено(НайденныеСтроки);
				Изменения.Вставить("ПровестиУчетныйДокумент", ПровестиУчетныйДокумент)
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИзменитьКонтрольОтраженияВУчете(ЭлектронныйДокумент, Изменения);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет наличие контроля отражения в учете по электронному документу.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, по которому изменяются данные.
//  НаборИзменений - Структура - перечень изменений. 
//   * Ключ - требование.
//    ** СопоставитьНоменклатуру - проверка на завершение сопоставления номенклатуры.
//    ** СоздатьУчетныйДокумент - проверка на наличие учетного документа.
//    ** ПровестиУчетныйДокумент - проверка на проведенность учетного документа.
//   * Значение - Булево - признак нахождения документа на контроле по данному требованию. 
//                         Т.е. если Истина, то документ еще НЕ соответствует требованию.
//
Процедура ИзменитьКонтрольОтраженияВУчете(Знач ЭлектронныйДокумент, Знач НаборИзменений)
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КонтрольОтраженияВУчетеЭДО");
		ЭлементБлокировки.УстановитьЗначение("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Набор = РегистрыСведений.КонтрольОтраженияВУчетеЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			Запись = Набор.Добавить();
			Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
		
		Записать = Ложь;
		Для Каждого Запись Из Набор Цикл
			
			Для Каждого Изменение Из НаборИзменений Цикл
				
				ТекущееЗначение = Запись[Изменение.Ключ];
				НовоеЗначение = Изменение.Значение;
				Если ТекущееЗначение <> НовоеЗначение Тогда
					Записать = Истина;
					Запись[Изменение.Ключ] = НовоеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Записать Тогда
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// Контроль сопоставления номенклатуры контрагентов.

// Ставит электронный документ на контроль сопоставления номенклатуры контрагента.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, который ставится на контроль.
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагента, по которой требуется контролировать сопоставление.
//
Процедура ВключитьКонтрольСопоставленияНоменклатуры(Знач ЭлектронныйДокумент, Знач НаборНоменклатурыКонтрагентов)
	
	Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
		НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
	КонецЕсли;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
		Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.Владелец = НоменклатураКонтрагента.Владелец;
		Запись.Идентификатор = НоменклатураКонтрагента.Идентификатор;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Прекращает контроль сопоставления номенклатуры контрагентов.
// Возвращает набор электронных документов, за которыми данный контроль был закреплен.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив - номенклатура контрагента, по которой требуется отключить контроль сопоставления.
//
Функция ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентов(Знач НаборНоменклатурыКонтрагентов)
	
	Если ТипЗнч(НаборНоменклатурыКонтрагентов) <> Тип("Массив") Тогда
		НаборНоменклатурыКонтрагентов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатурыКонтрагентов);
	КонецЕсли;
	
	НаборЭлектронныхДокументов = Новый Массив;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НачатьТранзакцию();
		Попытка
			Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
			Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
			Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
			ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
			Набор.Прочитать();
			
			Для Каждого Запись Из Набор Цикл
				Если НаборЭлектронныхДокументов.Найти(Запись.ЭлектронныйДокумент) = Неопределено Тогда
					НаборЭлектронныхДокументов.Добавить(Запись.ЭлектронныйДокумент);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Набор) Тогда
				Набор.Очистить();
				Набор.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат НаборЭлектронныхДокументов;
	
КонецФункции

// Прекращает контроль сопоставления номенклатуры контрагентов переданного электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, по которому прекращается контроль.
//
Процедура ОтключитьКонтрольСопоставленияНоменклатурыКонтрагентовЭД(Знач ЭлектронныйДокумент)
	
	Набор = РегистрыСведений.КонтрольСопоставленияНоменклатурыЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	Набор.Записать();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////
// Контроль проведения учетных документов

// Выполняет проверку электронного документа на наличие непроведенных учетных документов.
// Непроведенные документы ставится на контроль.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ на проверку.
//
Процедура ВыполнитьКонтрольПроведенияУчетныхДокументов(Знач ЭлектронныйДокумент)
	
	ОтключитьКонтрольПроведенияУчетныхДокументовЭД(ЭлектронныйДокумент);
	
	НаборУчетныхДокументов = УчетныеДокументыПоЭлектронномуДокументу(ЭлектронныйДокумент);
	
	НаКонтроль = Новый Массив;
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Если ЭтоПроводимыйДокумент(УчетныйДокумент) Тогда
			Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетныйДокумент, "Проведен");
			Если Не Проведен Тогда
				НаКонтроль.Добавить(УчетныйДокумент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ВключитьКонтрольПроведенияУчетныхДокументов(ЭлектронныйДокумент, НаКонтроль);
	
КонецПроцедуры

// Ставит электронный документ на контроль проведения связанных с ним учетных документов.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, который ставится на контроль.
//  НаборУчетныхДокументов - Массив - учетные документы, проведение которых нужно контролировать.
//
Процедура ВключитьКонтрольПроведенияУчетныхДокументов(Знач ЭлектронныйДокумент, Знач НаборУчетныхДокументов)
	
	Если ТипЗнч(НаборУчетныхДокументов) <> Тип("Массив") Тогда
		НаборУчетныхДокументов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборУчетныхДокументов);
	КонецЕсли;
	
	Для Каждого УчетныйДокумент Из НаборУчетныхДокументов Цикл
		
		Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
		Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
		Набор.Отбор.УчетныйДокумент.Установить(УчетныйДокумент);
		
		Запись = Набор.Добавить();
		Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
		Запись.УчетныйДокумент = УчетныйДокумент;
		
		Набор.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Прекращает контроль проведения учетных документов для электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - Электронный документ, который снимается с контроля.
//
Процедура ОтключитьКонтрольПроведенияУчетныхДокументовЭД(Знач ЭлектронныйДокумент)
	
	Набор = РегистрыСведений.КонтрольПроведенияУчетныхДокументовЭДО.СоздатьНаборЗаписей();
	Набор.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	
	Набор.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСМетаданными

// Возвращает представление единичного объекта заданного типа.
//
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - перечень допустимых для объекта типов.
//  ПредставлениеПоУмолчанию - Строка - представление по умолчанию, если не удалось его получить из метаданных.
//
// Возвращаемое значение:
//  Строка - полученное представление.
//
Функция ПредставлениеОбъектаПоТипу(Знач ОписаниеТипа, Знач ПредставлениеПоУмолчанию = "")
	
	Представление = "";
	
	Для каждого Тип Из ОписаниеТипа.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Представление) Тогда
			Представление = Представление + " / ";
		КонецЕсли;
		
		ПредставлениеОбъекта = МетаданныеТипа.ПредставлениеОбъекта;
		Если Не ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = МетаданныеТипа.Синоним;
		КонецЕсли;
		
		Представление = Представление + ПредставлениеОбъекта;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = ПредставлениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает признак того, что объект является документом, поддерживающим проведение.
//
// Параметры:
//  Объект - Произвольный - объект, который нужно проверить.
//
// Возвращаемое значение:
//  Булево - Истина, если объект является документом с проведением. Иначе Ложь.
//
Функция ЭтоПроводимыйДокумент(Знач Объект)
	
	Попытка
		МетаданныеОбъекта = Объект.Метаданные();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Результат = Ложь;
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Если МетаданныеОбъекта.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСНоменклатуройЭлектронногоДокумента

// Возвращает ссылку по идентификатору и описанию типа.
//
// Параметры:
//  ИдентификаторСтрокой - Строка - уникальный идентификатор ссылки строкой.
//  ОписаниеТипаСсылки - ОписаниеТипов - описание типа ссылки.
//
// Возвращаемое значение:
//  Произвольный - найденная ссылка. Если не найдена, то Неопределено.
//
Функция НайтиСсылкуПоИдентификатору(Знач ИдентификаторСтрокой, Знач ОписаниеТипаСсылки) 
	
	Идентификатор = Новый УникальныйИдентификатор(ИдентификаторСтрокой);
	НаборТипов = ОписаниеТипаСсылки.Типы();
	
	Для каждого ТипСсылки Из НаборТипов Цикл
		
		МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипСсылки);
		Если МетаданныеСсылки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеСсылки.ПолноеИмя());
		Ссылка = Менеджер.ПолучитьСсылку(Идентификатор);
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет попытку поиска номенклатуры ИБ по переданному идентификатору.
// 
// Параметры:
//  Идентификатор - Строка - идентификатор, по которому требуется найти номенклатуру ИБ.
//
// Возвращаемое значение:
//  Структура - найденная номенклатура ИБ. См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Функция НайтиНоменклатуруИБПоИдентификатору(Знач Идентификатор)
	
	НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	ОбменСКонтрагентамиПереопределяемый.ПриПоискеНоменклатурыПоИдентификатору(Идентификатор, НоменклатураИБ);
	
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	// Библиотека формирует идентификатор по шаблону:
	// <ИДНоменклатуры>#<ИДХарактеристики>#<ИДУпаковки>
	ЧастиИД = СтрРазделить(Идентификатор, "#", Истина);
	Если ЧастиИД.Количество() <> 3 Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	Упаковка = Неопределено;
	
	ЕстьОшибка = Ложь;
	
	Попытка
		
		// Номенклатура
		Если ЗначениеЗаполнено(ЧастиИД[0]) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ЧастиИД[0], Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Номенклатура = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Характеристика
		Если ЗначениеЗаполнено(ЧастиИД[1]) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ЧастиИД[1], Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Характеристика = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Упаковка
		Если ЗначениеЗаполнено(ЧастиИД[2]) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ЧастиИД[2], Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Упаковка = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	Если ЕстьОшибка Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураИБ.Номенклатура = Номенклатура;
	Иначе
		Возврат НоменклатураИБ;
	КонецЕсли;
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НоменклатураИБ.Характеристика = Характеристика;
	КонецЕсли;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		НоменклатураИБ.Упаковка = Упаковка;
	КонецЕсли;
	
	Возврат НоменклатураИБ;
	
КонецФункции

// Возвращает данные о номенклатуре контрагента, переданные в электронном документе
// для сопоставления с номенклатурой получателя. Если информация не была специально передана,
// то результат будет пустым.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящий - электронный документ, из которого нужно извлечь данные.
//
// Возвращаемое значение:
//  Массив - набор элементов, описывающих номенклатуру контрагента и переданных в ЭД специально для сопоставления номенклатуры.
//           См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
//
Функция НоменклатураКонтрагентаВЭлектронномДокументе(Знач ЭлектронныйДокумент)
	
	Если НЕ ИспользоватьСопоставлениеНоменклатуры(ЭлектронныйДокумент) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "Контрагент");
	Владелец = ВладелецНоменклатурыКонтрагента(Контрагент);
	
	ФайлЭлектронногоДокумента = ПрисоединенныйФайл(ЭлектронныйДокумент);
	НаборФайлов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФайлЭлектронногоДокумента);
	ИнформацияОТоваре = ОбменСКонтрагентамиВнутренний.ПолучитьИнформациюОТоваре(НаборФайлов);
	
	Если Не ЗначениеЗаполнено(ИнформацияОТоваре) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	
	Для Каждого СтрокаТовара Из ИнформацияОТоваре Цикл
		
		Сопоставление = СтрокаТовара.Сопоставление;
		Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		Если Не Сопоставление.Свойство("Идентификатор") Тогда
			Продолжить;
		КонецЕсли;
		
		НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Сопоставление);
		НоменклатураКонтрагента.Владелец = Владелец;
		
		НаборНоменклатурыКонтрагентов.Добавить(НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Возврат НаборНоменклатурыКонтрагентов;
	
КонецФункции

// Извлекает данные для сопоставления номенклатуры из строки товара дерева документа.
//
// Параметры:
//  СтрокаТовара - СтрокаДереваЗначений - строка товара дерева документа, из которой нужно извлечь данные.
//
// Возвращаемое значение:
//  Структура - информация для сопоставления товаров.
//
Функция ИзвлечьСопоставлениеНоменклатурыИзДереваДокумента(Знач СтрокаТовара)
	
	ПутьКСопоставлению = СтрокаТовара.ПолныйПуть + ".Сопоставление";
	
	ЕстьСопоставление = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
		СтрокаТовара, ПутьКСопоставлению, Ложь);
		
	Если ЕстьСопоставление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Сопоставление = Новый Структура;
	Сопоставление.Вставить("Идентификатор");
	Сопоставление.Вставить("Наименование");
	Сопоставление.Вставить("Характеристика");
	Сопоставление.Вставить("ЕдиницаИзмерения");
	Сопоставление.Вставить("ЕдиницаИзмеренияКод");
	Сопоставление.Вставить("Артикул");
	Сопоставление.Вставить("СтавкаНДС");
	Сопоставление.Вставить("Штрихкод");
	Сопоставление.Вставить("НоменклатураИБ");
	Сопоставление.Вставить("ХарактеристикаИБ");
	Сопоставление.Вставить("УпаковкаИБ");
	
	Для Каждого Элемент Из Сопоставление Цикл
		
		Значение = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СтрокаТовара, ПутьКСопоставлению + "." + Элемент.Ключ, Ложь);
		Если ЗначениеЗаполнено(Значение) Тогда
			Сопоставление.Вставить(Элемент.Ключ, Значение);
		Иначе
			Сопоставление.Удалить(Элемент.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сопоставление;
	
КонецФункции

#КонецОбласти

#Область КонвертерЭлектронныхДокументов

Функция ПреобразоватьФорматЭД(ПотокИсходногоXML, Параметры = Неопределено)
	
	Если Параметры = Неопределено Тогда
		Преобразователь = ОбменСКонтрагентамиСлужебныйПовтИсп.ПреобразованиеXSL_ПараметрыПроизвольногоДокумента();
		Если Преобразователь = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстПравила = ТекстПравилаПреобразованияФормата(Параметры);
		Если НЕ ЗначениеЗаполнено(ТекстПравила) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Преобразователь = Новый ПреобразованиеXSL;
		Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки(ТекстПравила);
		
		ПараметрыXSL = Неопределено;
		Если Параметры.Свойство("ПараметрыXSL", ПараметрыXSL) И ЗначениеЗаполнено(ПараметрыXSL) Тогда
			
			Для Каждого ПараметрXSL Из ПараметрыXSL Цикл
				Если ТипЗнч(ПараметрXSL.Значение) = Тип("Структура") Тогда
					ЗначениеПараметра = КонвертироватьЗначениеПоИнструкции(ПараметрXSL.Значение);
					Если ЗначениеПараметра = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Преобразователь.ДобавитьПараметр(ПараметрXSL.Ключ, ЗначениеПараметра);
				Иначе
					Преобразователь.ДобавитьПараметр(ПараметрXSL.Ключ, ПараметрXSL.Значение);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеИсходногоXML = Новый ЧтениеXML;
	ЧтениеИсходногоXML.ОткрытьПоток(ПотокИсходногоXML);
	
	ПотокИтоговогоXML = Новый ПотокВПамяти;
	
	ЗаписьИтоговогоXML = Новый ЗаписьXML;
	ЗаписьИтоговогоXML.ОткрытьПоток(ПотокИтоговогоXML);
	
	Попытка
		Преобразователь.Преобразовать(ЧтениеИсходногоXML, ЗаписьИтоговогоXML);
	Исключение
		ЧтениеИсходногоXML.Закрыть();
		ЗаписьИтоговогоXML.Закрыть();
		ПотокИтоговогоXML.Закрыть();
		
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ТекстОшибки = НСтр("ru = 'Не удалось преобразовать файл электронного документа с параметрами:'")
			+ Символы.ПС + ПараметрыПреобразованияВСтроку(Параметры)
			+ Символы.ПС + НСтр("ru = 'По причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	ЧтениеИсходногоXML.Закрыть();
	ЗаписьИтоговогоXML.Закрыть();
	
	Результат = Неопределено;
	Если Параметры = Неопределено ИЛИ Параметры.ИтоговыйФормат = "ПараметрыЭлектронногоДокумента" Тогда
		Результат = ЗначениеИзПотокаXML(ПотокИтоговогоXML, Тип("Структура"), Параметры);
		ПотокИтоговогоXML.Закрыть();
		
	ИначеЕсли Параметры.ИтоговыйФормат = "ТабличныйДокумент" Тогда
		Результат = ЗначениеИзПотокаXML(ПотокИтоговогоXML, Тип("ТабличныйДокумент"), Параметры);
		ПотокИтоговогоXML.Закрыть();
		
	ИначеЕсли Параметры.ИтоговыйФормат = "ТаблицаНоменклатуры" Тогда
		Результат = ЗначениеИзПотокаXML(ПотокИтоговогоXML, Тип("ТаблицаЗначений"), Параметры);
		ПотокИтоговогоXML.Закрыть();
		
	ИначеЕсли Параметры.ИтоговыйФормат = "CML" Тогда
		Результат = ПотокИтоговогоXML.ЗакрытьИПолучитьДвоичныеДанные();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонвертироватьЗначениеПоИнструкции(Инструкция)
	
	Результат = Неопределено;
	
	Если Инструкция.Правило = "СуммаПрописью" Тогда
		
		Если НЕ Инструкция.Свойство("СуммаДокумента")
			ИЛИ НЕ Инструкция.Свойство("КодВалюты") Тогда
			Возврат Результат;
		КонецЕсли;
		
		ОбменСКонтрагентамиПереопределяемый.СуммаПрописью(Инструкция.СуммаДокумента, Инструкция.КодВалюты, Результат);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Результат = СтрШаблон("'%1'", Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеИзПотокаXML(ПотокXML, ТипЗначения, ПараметрыПреобразования)
	
	ПотокXML.Перейти(0, ПозицияВПотоке.Начало);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ПотокXML);
	Попытка
		Результат = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗначения);
	Исключение
		Результат = Неопределено;
		
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ТекстОшибки = НСтр("ru = 'Не удалось сериализовать результат преобразования формата.'")
			+ Символы.ПС + ПараметрыПреобразованияВСтроку(ПараметрыПреобразования)
			+ Символы.ПС + НСтр("ru = 'По причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьЭлектронныйДокументПоСхемеXML(ПотокИсходногоXML, ПараметрыФайлаXML)
	
	URIПространстваИмен = Неопределено;
	Если НЕ (ПараметрыФайлаXML.Свойство("ИсходныйФормат", URIПространстваИмен)
		И ЗначениеЗаполнено(URIПространстваИмен)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяТипаXML = Неопределено;
	Если НЕ (ПараметрыФайлаXML.Свойство("ИмяТипаXML", ИмяТипаXML)
		И ЗначениеЗаполнено(ИмяТипаXML)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Фабрика = ОбменСКонтрагентамиСлужебныйПовтИсп.ФабрикаXDTOЭлектронногоДокумента(URIПространстваИмен);
	Если Фабрика = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипЗначенияXDTO = Фабрика.Тип(URIПространстваИмен, ИмяТипаXML);
	Если ТипЗначенияXDTO = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПотокКонтрольногоXML = Новый ПотокВПамяти;
	
	ПотокИсходногоXML.Перейти(0, ПозицияВПотоке.Начало);
	
	Попытка
		ЧтениеИсходногоXML = Новый ЧтениеXML;
		ЧтениеИсходногоXML.ОткрытьПоток(ПотокИсходногоXML);
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеИсходногоXML);
		ЧтениеИсходногоXML.Закрыть();
		
		ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);
		
		ЗаписьКонтрольногоXML = Новый ЗаписьXML;
		ЗаписьКонтрольногоXML.ОткрытьПоток(ПотокКонтрольногоXML);
		
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьКонтрольногоXML);
		ЗаписьКонтрольногоXML.Закрыть();
		
		ПотокКонтрольногоXML.Перейти(0, ПозицияВПотоке.Начало);
		
		ЧтениеКонтрольногоXML = Новый ЧтениеXML;
		ЧтениеКонтрольногоXML.ОткрытьПоток(ПотокКонтрольногоXML);
		
		ИсходныйЭД = Фабрика.ПрочитатьXML(ЧтениеКонтрольногоXML, ТипЗначенияXDTO);
		ЧтениеКонтрольногоXML.Закрыть();
		
		Результат = Истина;
	Исключение
		Результат = Ложь;
		
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Файл произвольного электронного документа не соответствует схеме XML.'"));
		Если ПараметрыФайлаXML.Свойство("ИдентификаторДокумента") Тогда
			МассивСтрок.Добавить(НСтр("ru = 'ИдентификаторДокумента='") + ПараметрыФайлаXML.ИдентификаторДокумента);
		КонецЕсли;
		МассивСтрок.Добавить(НСтр("ru = 'ИсходныйФормат='") + ПараметрыФайлаXML.ИсходныйФормат);
		МассивСтрок.Добавить(НСтр("ru = 'ИмяТипаXML='") + ПараметрыФайлаXML.ИмяТипаXML);
		МассивСтрок.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, СтрСоединить(МассивСтрок, Символы.ПС));
	КонецПопытки;
	
	ПотокКонтрольногоXML.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПравилаПреобразованияФормата(ПараметрыПравила) Экспорт
	ВерсияИтоговогоФормата = ПоддерживаемаяВерсияИтоговогоФормата(ПараметрыПравила.ИтоговыйФормат);
	Если ВерсияИтоговогоФормата = Неопределено Тогда
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ТекстОшибки = НСтр("ru = 'Не удалось определить версию итогового формата для преобразования.'")
			+ Символы.ПС + ПараметрыПреобразованияВСтроку(ПараметрыПравила);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПравила.Вставить("ВерсияИтоговогоФормата", ВерсияИтоговогоФормата);
	
	Если НЕ ПараметрыПравила.Свойство("ВариантЗаполнения") Тогда
		ПараметрыПравила.Вставить("ВариантЗаполнения", "");
	КонецЕсли;
	
	РазделениеВыключено = НЕ ОбщегоНазначения.РазделениеВключено();
	
	Если РазделениеВыключено Тогда
		ОбновитьОписаниеФорматовДляПреобразования();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФорматыДляПреобразования.ДатаОбновленияПравил КАК ДатаОбновленияПравил,
		|	ФорматыДляПреобразования.СсылкаНаРесурс КАК СсылкаНаРесурс,
		|	ЕСТЬNULL(ПравилаПреобразованияФорматов.ДатаЗагрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗагрузки,
		|	ЕСТЬNULL(ПравилаПреобразованияФорматов.Правило, НЕОПРЕДЕЛЕНО) КАК Правило
		|ИЗ
		|	РегистрСведений.ФорматыДляПреобразования КАК ФорматыДляПреобразования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПреобразованияФорматов КАК ПравилаПреобразованияФорматов
		|		ПО ФорматыДляПреобразования.ИсходныйФормат = ПравилаПреобразованияФорматов.ИсходныйФормат
		|			И (ПравилаПреобразованияФорматов.ВариантЗаполнения = &ВариантЗаполнения)
		|			И (ПравилаПреобразованияФорматов.ИтоговыйФормат = &ИтоговыйФормат)
		|			И (ПравилаПреобразованияФорматов.ВерсияИтоговогоФормата = &ВерсияИтоговогоФормата)
		|ГДЕ
		|	ФорматыДляПреобразования.ИсходныйФормат = &ИсходныйФормат";
	
	Запрос.УстановитьПараметр("ИсходныйФормат",         ПараметрыПравила.ИсходныйФормат);
	Запрос.УстановитьПараметр("ВариантЗаполнения",      ПараметрыПравила.ВариантЗаполнения);
	Запрос.УстановитьПараметр("ИтоговыйФормат",         ПараметрыПравила.ИтоговыйФормат);
	Запрос.УстановитьПараметр("ВерсияИтоговогоФормата", ПараметрыПравила.ВерсияИтоговогоФормата);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТекстПравила = Неопределено;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Правило = Выборка.Правило;
		Если РазделениеВыключено И Выборка.ДатаОбновленияПравил > Выборка.ДатаЗагрузки Тогда
			ПараметрыПравила.Вставить("ДатаЗагрузки", Выборка.ДатаЗагрузки);
			ПараметрыПравила.Вставить("Правило", Правило);
			ТекстПравила = ОбновитьПравилоПреобразования(Выборка.СсылкаНаРесурс, ПараметрыПравила);
			Если ТекстПравила = Неопределено И Правило <> Неопределено Тогда
				ТекстПравила = Правило.Получить();
			КонецЕсли;
		ИначеЕсли Правило = Неопределено Тогда
			ВидОперации = НСтр("ru = 'Преобразование формата.'");
			ТекстОшибки = НСтр("ru = 'Не удалось найти правило преобразования формата в информационной базе.'")
				+ Символы.ПС + ПараметрыПреобразованияВСтроку(ПараметрыПравила);
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		Иначе
			ТекстПравила = Правило.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстПравила;
	
КонецФункции

Функция ПоддерживаемаяВерсияИтоговогоФормата(ИтоговыйФормат)
	
	Если ИтоговыйФормат = "ПараметрыЭлектронногоДокумента" Тогда
		Возврат "1.0";
	ИначеЕсли ИтоговыйФормат = "СхемаXML" Тогда
		Возврат "1.0";
	ИначеЕсли ИтоговыйФормат = "ТаблицаНоменклатуры" Тогда
		Возврат "1.0";
	ИначеЕсли ИтоговыйФормат = "ТабличныйДокумент" Тогда
		Возврат "1.0";
	ИначеЕсли ИтоговыйФормат = "CML" Тогда
		Возврат ВерсияСхемыCML2();
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьОписаниеФорматовДляПреобразования();
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗагрузкиОписанияФорматов = Константы.ДатаЗагрузкиОписанияФорматовДляПреобразования.Получить();
	ТекущаяУниверсальнаяДата = НачалоДня(ТекущаяУниверсальнаяДата());
	Если ТекущаяУниверсальнаяДата = ДатаЗагрузкиОписанияФорматов Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФорматыДляПреобразования.ИсходныйФормат КАК ИсходныйФормат,
		|	ФорматыДляПреобразования.ДатаОбновленияПравил КАК ДатаОбновленияПравил,
		|	ФорматыДляПреобразования.СсылкаНаРесурс КАК СсылкаНаРесурс,
		|	ЛОЖЬ КАК Обработан
		|ИЗ
		|	РегистрСведений.ФорматыДляПреобразования КАК ФорматыДляПреобразования";
	
	ТаблицаФорматов = Запрос.Выполнить().Выгрузить();
	
	URL = АдресФайлаПравилДляПреобразованияФорматов();
	ПотокФайла = ОткрытьПотокДляЧтенияФайлаИзИнтернета(URL);
	Если ПотокФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПотокФайла, "UTF-8");
	СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		МассивЗначений = СтрРазделить(СтрокаТекста,",");
		НайденныйФормат = ТаблицаФорматов.Найти(МассивЗначений[0], "ИсходныйФормат");
		Если НайденныйФормат = Неопределено
			ИЛИ Дата(МассивЗначений[1]) > НайденныйФормат.ДатаОбновленияПравил
			ИЛИ МассивЗначений[2] <> НайденныйФормат.СсылкаНаРесурс Тогда
			
			МенеджерЗаписи = РегистрыСведений.ФорматыДляПреобразования.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИсходныйФормат       = МассивЗначений[0];
			МенеджерЗаписи.ДатаОбновленияПравил = Дата(МассивЗначений[1]);
			МенеджерЗаписи.СсылкаНаРесурс       = МассивЗначений[2];
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		Если НайденныйФормат <> Неопределено Тогда
			НайденныйФормат.Обработан = Истина;
		КонецЕсли;
		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("Обработан", Ложь);
	МассивКУдалению = ТаблицаФорматов.НайтиСтроки(ПараметрыОтбора);
	Если МассивКУдалению.Количество() Тогда
		Для Каждого СтрокаТаблицы Из МассивКУдалению Цикл
			УдалитьДанныеИсходногоФормата(СтрокаТаблицы.ИсходныйФормат);
		КонецЦикла;
	КонецЕсли;
	
	Константы.ДатаЗагрузкиОписанияФорматовДляПреобразования.Установить(ТекущаяУниверсальнаяДата);
	
КонецПроцедуры

Функция ОбновитьПравилоПреобразования(СсылкаНаОписаниеФормата, ПараметрыПравила)
	
	URL = АдресФайлаПравилДляПреобразованияФорматов(СсылкаНаОписаниеФормата);
	ПотокФайла = ОткрытьПотокДляЧтенияФайлаИзИнтернета(URL);
	Если ПотокФайла = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстПравила = Неопределено;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПотокФайла, "UTF-8");
	СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	Пока СтрокаТекста <> Неопределено Цикл
		МассивЗначений = СтрРазделить(СтрокаТекста,",");
		Если  ПараметрыПравила.ИсходныйФормат         = МассивЗначений[0]
			И ПараметрыПравила.ВариантЗаполнения      = МассивЗначений[1]
			И ПараметрыПравила.ИтоговыйФормат         = МассивЗначений[2]
			И ПараметрыПравила.ВерсияИтоговогоФормата = МассивЗначений[3] Тогда
			
			Если ПараметрыПравила.ДатаЗагрузки > Дата(МассивЗначений[5]) Тогда
				Правило = ПараметрыПравила.Правило;
				ТекстПравила = Правило.Получить();
			Иначе
				URL = АдресФайлаПравилДляПреобразованияФорматов(МассивЗначений[4]);
				ПотокФайлаПравил = ОткрытьПотокДляЧтенияФайлаИзИнтернета(URL);
				Если ПотокФайлаПравил = Неопределено Тогда
					Прервать;
				КонецЕсли;
				
				ЧтениеТекстаПравил = Новый ЧтениеТекста(ПотокФайлаПравил, "UTF-8");
				ТекстПравила = ЧтениеТекстаПравил.Прочитать();
				Правило = Новый ХранилищеЗначения(ТекстПравила, Новый СжатиеДанных());
				
				ЧтениеТекстаПравил.Закрыть();
				ПотокФайлаПравил.Закрыть();
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ПравилаПреобразованияФорматов.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИсходныйФормат         = МассивЗначений[0];
			МенеджерЗаписи.ВариантЗаполнения      = МассивЗначений[1];
			МенеджерЗаписи.ИтоговыйФормат         = МассивЗначений[2];
			МенеджерЗаписи.ВерсияИтоговогоФормата = МассивЗначений[3];
			МенеджерЗаписи.ДатаЗагрузки           = ТекущаяУниверсальнаяДата();
			МенеджерЗаписи.Правило                = Правило;
			
			УстановитьПривилегированныйРежим(Истина);
			МенеджерЗаписи.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			Прервать;
		КонецЕсли;
		
		СтрокаТекста = ЧтениеТекста.ПрочитатьСтроку();
	КонецЦикла;
	
	ЧтениеТекста.Закрыть();
	ПотокФайла.Закрыть();
	
	Если ТекстПравила = Неопределено Тогда
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ТекстОшибки = НСтр("ru = 'Не найдены правила преобразования формата для загрузки в информационную базу.'")
			+ Символы.ПС + ПараметрыПреобразованияВСтроку(ПараметрыПравила);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстПравила;
	
КонецФункции

Функция ОткрытьПотокДляЧтенияФайлаИзИнтернета(URL)
	
	РезультатПолученияФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(URL, Неопределено, Ложь);
	Если НЕ РезультатПолученияФайла.Статус Тогда
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, РезультатПолученияФайла.СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(РезультатПолученияФайла.Путь);
	УдалитьИзВременногоХранилища(РезультатПолученияФайла.Путь);
	
	Возврат ДанныеФайла.ОткрытьПотокДляЧтения();
	
КонецФункции

Процедура УдалитьДанныеИсходногоФормата(ИсходныйФормат)
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ФорматыДляПреобразования");
		ЭлементБлокировкиДанных.УстановитьЗначение("ИсходныйФормат", ИсходныйФормат);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ПравилаПреобразованияФорматов");
		ЭлементБлокировкиДанных.УстановитьЗначение("ИсходныйФормат", ИсходныйФормат);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ФорматыДляПреобразования.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИсходныйФормат = ИсходныйФормат;
		МенеджерЗаписи.Удалить();
		
		НаборЗаписей = РегистрыСведений.ПравилаПреобразованияФорматов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходныйФормат.Установить(ИсходныйФормат);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ВидОперации = НСтр("ru = 'Преобразование формата.'");
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось удалить неиспользуемые правила преобразования формата %1 из информационной базы.'"),
				ИсходныйФормат)
			+ Символы.ПС + НСтр("ru = 'По причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция АдресФайлаПравилДляПреобразованияФорматов(СсылкаНаРесурс = "")
	
	АдресСервера = "http://downloads.v8.1c.ru/content/LED/settings/format_conversion_rules/";
	
	Если ПустаяСтрока(СсылкаНаРесурс) Тогда
		СсылкаНаРесурс = "supported_formats.csv";
	КонецЕсли;
	
	Возврат АдресСервера + СсылкаНаРесурс;
	
КонецФункции

Функция ПараметрыПреобразованияВСтроку(Параметры)
	
	Если Параметры = Неопределено Тогда
		Результат = НСтр("ru = 'ИсходныйФормат=ПроизвольныйXML;
			|ИтоговыйФормат=ПараметрыЭлектронногоДокумента;
			|ВерсияИтоговогоФормата='") + ПоддерживаемаяВерсияИтоговогоФормата("ПараметрыЭлектронногоДокумента");
		Возврат Результат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	ЗначениеСвойства="";
	Если Параметры.Свойство("ИсходныйФормат", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		МассивСтрок.Добавить(НСтр("ru = 'ИсходныйФормат='") + ЗначениеСвойства);
	КонецЕсли;
	
	Если Параметры.Свойство("ВариантЗаполнения", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		МассивСтрок.Добавить(НСтр("ru = 'ВариантЗаполнения='") + ЗначениеСвойства);
	КонецЕсли;
	
	Если Параметры.Свойство("ИтоговыйФормат", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		МассивСтрок.Добавить(НСтр("ru = 'ИтоговыйФормат='") + ЗначениеСвойства);
	КонецЕсли;
	
	МассивСтрок.Добавить(НСтр("ru = 'ВерсияИтоговогоФормата='") + ПоддерживаемаяВерсияИтоговогоФормата(ЗначениеСвойства));
	
	Если Параметры.Свойство("ПараметрыXSL", ЗначениеСвойства) И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
		МассивСтрок.Добавить(НСтр("ru = 'ПараметрыXSL:'"));
		
		Для Каждого ПараметрXSL Из ЗначениеСвойства Цикл
			
			Если ТипЗнч(ПараметрXSL.Значение) = Тип("Структура") Тогда
				МассивСтрок.Добавить(ПараметрXSL.Ключ + ":");
				Для Каждого ПараметрИнструкции Из ПараметрXSL.Значение Цикл
					МассивСтрок.Добавить(Символы.Таб + СтрШаблон(НСтр("ru = '%1=%2'"),
						ПараметрИнструкции.Ключ, ПараметрИнструкции.Значение));
				КонецЦикла;
			Иначе
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = '%1=%2'"), ПараметрXSL.Ключ, ПараметрXSL.Значение));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область ПроверкаСостоянияКонтрагентовВ1СЭДО

#Область ПроверкаКонтрагентов

// Процедура - Проверка одного контрагента по ИНН, КПП и Дате.
//
// Параметры:
//  Параметры	 - Структура - Параметры запуска фонового задания. Ключи структуры:
//		"Контрагент" - СправочникСсылка.<Контрагенты> - Проверяемый контрагент.
//		"ИНН"		 - Строка - ИНН Контрагента.
//		"КПП"		 - Строка - КПП Контрагента.
//		"Дата"		 - Дата - Дата, на которую выполняется проверка контрагента. Может быть не указана,
//		                  тогда берется текущая дата.
//		"СохранятьРезультатСразуПослеПроверки" - Булево - Признак, указывающий нужно ли результат
//		                  проверки контрагента сразу сохранять в регистр.
//		"АдресХранилища" - Строка - Адрес, в который будет помещен результат проверки контрагента.
//  АдресХранилища	 - Строка - Адрес временного хранилища, в который будет помещен результат проверки контрагента.
Процедура ПроверитьКонтрагента(Параметры, АдресХранилища)
	
	// Готовим данные в нужном формате для передачи на проверку.
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	
	НоваяСтрока = ДанныеКонтрагентов.Добавить();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		НоваяСтрока.ОбластьДанныхВспомогательныеДанные = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	
	ПолучатьРезультатПроверкиВебСервисом = Неопределено;
	Если Не Параметры.Свойство("ПолучатьРезультатПроверкиВебСервисом", ПолучатьРезультатПроверкиВебСервисом) Тогда
		ПолучатьРезультатПроверкиВебСервисом = Истина;
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("СохранятьРезультатСразуПослеПроверки", Параметры.СохранятьРезультатСразуПослеПроверки);
	ПараметрыПроверки.Вставить("ПолучатьРезультатПроверкиВебСервисом", ПолучатьРезультатПроверкиВебСервисом);
	
	ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища, Истина, ПараметрыПроверки);
	
КонецПроцедуры

// Процедура - Проверка нескольких контрагентов.
//
// Параметры:
//   * ДанныеКонтрагентов					 - ТаблицаЗначений - содержит данные проверяемых контрагентов. 
//		Структуру колонок таблицы см в функции ШаблонТаблицыДанныеКонтрагента.
//  * АдресХранилища						 - Строка - адрес, в который будет помещен результат проверки контрагента.
//  * ЭтоПроверкаСправочника				 - Булево - указывает, выполняется ли проверка справочника. 
//		Для справочника результат проверки сохраняется во временное хранилище, либо записывается в регистр.
//		Для остальных объектов результат проверки заполняется в колонке Состояние таблицы ДанныеКонтрагентов.
//	* ПараметрыПроверки                    - Структура - уточняет как поступить с результатами проверки
//	   * СохранятьРезультатСразуПослеПроверки - Булево - признак, указывающий нужно ли результат проверки контрагента.
//	   * ПолучатьРезультатПроверкиВебСервисом - Булево - использовать сервис ЭДО для проверки контрагента.
//
Процедура ПроверитьКонтрагентов(ДанныеКонтрагентов, АдресХранилища = Неопределено, ЭтоПроверкаСправочника = Истина,
	ПараметрыПроверки = Неопределено)
	
	СохранятьРезультатСразуПослеПроверки = Ложь;
	ПолучатьРезультатПроверкиВебСервисом = Истина;
	
	Если ТипЗнч(ПараметрыПроверки) = Тип("Структура") Тогда
		ПараметрыПроверки.Свойство("СохранятьРезультатСразуПослеПроверки", СохранятьРезультатСразуПослеПроверки);
		ПараметрыПроверки.Свойство("ПолучатьРезультатПроверкиВебСервисом", ПолучатьРезультатПроверкиВебСервисом);
	КонецЕсли;
	
	// Если доступа к ВебСервису нет, то проверку не делаем.
	Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
		Возврат;
	КонецЕсли;
	
	// Если по некоторым контрагентам можно определить, что они не существуют, не обращаясь к сервису, то к сервису по ним
	// обращаться не будем.
	Если ЭтоПроверкаСправочника Тогда
		ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов);
	КонецЕсли;

	// Приведение данных к нужному формату, выявление записей с ошибками.
	ПодготовитьДанныеКПроверке(ДанныеКонтрагентов);
	
	// Получение результатов проверки от веб-сервиса.
	// Проверяем только тех контрагентов, у которых неопределено состояние и у которых нет ошибок.
	Отбор = Новый Структура();
	Отбор.Вставить("Состояние", Перечисления.СостоянияКонтрагентаБЭД.ПустаяСсылка());
	
	Если ПолучатьРезультатПроверкиВебСервисом <> Ложь Тогда
		ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор);
	КонецЕсли;
	
	// Сохраняем результаты проверки, если это справочник.
	Если ЭтоПроверкаСправочника Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища, СохранятьРезультатСразуПослеПроверки = Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхКПроверке

// Проверка ошибок, удаление дублей.
Процедура ПодготовитьДанныеКПроверке(ДанныеКонтрагентовДляПроверки)
	
	ДанныеКонтрагентов = ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки);
	ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов);
	СвернутьДанныеКонтрагентов(ДанныеКонтрагентов);
	
	ДанныеКонтрагентовДляПроверки = ДанныеКонтрагентов;
	
КонецПроцедуры

Функция ДанныеКонтрагентовТипизированные(ДанныеКонтрагентовДляПроверки)
	
	// Создаем таблицу
	ДанныеКонтрагентов = ШаблонТаблицыДанныеКонтрагента();
	ЕстьОбластьДанных = ДанныеКонтрагентовДляПроверки.Колонки.Найти("ОбластьДанныхВспомогательныеДанные") <> Неопределено И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса");
	
	// Копируем таблицу, сохраняя типы колонок.
	Для каждого ДанныеКонтрагентаДляПроверки Из ДанныеКонтрагентовДляПроверки Цикл
		
		// Копируем данные из таблицы с "сырыми данными" в таблицу с "типизированными" колонками.
		ДанныеКонтрагента = ДанныеКонтрагентов.Добавить();
		
		// В зависимости от наличия колонки ОбластьДанныхВспомогательныеДанные, копируем разный набор данных.
		СписокСвойств = "Контрагент, ИНН, КПП, Состояние, Дата";
		Если ЕстьОбластьДанных Тогда
			СписокСвойств = СписокСвойств + ", ОбластьДанныхВспомогательныеДанные";
		КонецЕсли;
		
		// Гарантировано контрагент не подключен, если поля не заполнены.
		Если Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.ИНН) И Не ЗначениеЗаполнено(ДанныеКонтрагентаДляПроверки.КПП) Тогда
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
		ИначеЕсли ДанныеКонтрагентаДляПроверки.НастройкиСозданы Тогда 
			ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО;
		ИначеЕсли Не ДанныеКонтрагентаДляПроверки.НастройкиСозданы
				И ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НастроенЭДО Тогда 
				
				ДанныеКонтрагентаДляПроверки.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ДанныеКонтрагентаДляПроверки, СписокСвойств);
		
	КонецЦикла;
	
	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура СвернутьДанныеКонтрагентов(ДанныеКонтрагентов)
	
	// Удаляем из таблицы дубли
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние, ОбластьДанныхВспомогательныеДанные");
	Иначе
		ДанныеКонтрагентов.Свернуть("Контрагент, ИНН, КПП, Дата, Состояние");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - В таблице ДанныеКонтрагентов оставляет только записи по контрагентам,
//		к которым есть доступ. В модели сервиса из неразделенной области проверку делать
//		не нужно, поскольку регламентное задание выполняется под администратором 
//		и нет доступа к разделенному справочнику контрагентов.
//
Процедура ОставитьРазрешенныхКонтрагентов(ДанныеКонтрагентов)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если НЕ РазделениеВключено
		ИЛИ РазделениеВключено И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДанныеКонтрагентов.Контрагент,
			|	ДанныеКонтрагентов.ИНН,
			|	ДанныеКонтрагентов.КПП,
			|	ДанныеКонтрагентов.Дата,
			|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ДанныеКонтрагентов.Состояние
			|ПОМЕСТИТЬ ВсеДанныеКонтрагентов
			|ИЗ
			|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент КАК Контрагент
			|ПОМЕСТИТЬ ВсеКонтрагенты
			|ИЗ
			|	Справочник.%1 КАК СправочникКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ПО СправочникКонтрагентов.Ссылка = ВсеДанныеКонтрагентов.Контрагент
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеКонтрагенты КАК ВсеКонтрагенты
			|		ПО (ВсеКонтрагенты.Контрагент = ВсеДанныеКонтрагентов.Контрагент)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВсеДанныеКонтрагентов.Контрагент,
			|	ВсеДанныеКонтрагентов.ИНН,
			|	ВсеДанныеКонтрагентов.КПП,
			|	ВсеДанныеКонтрагентов.Дата,
			|	ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,
			|	ВсеДанныеКонтрагентов.Состояние
			|ИЗ
			|	ВсеДанныеКонтрагентов КАК ВсеДанныеКонтрагентов
			|ГДЕ
			|	ВсеДанныеКонтрагентов.Контрагент = ЗНАЧЕНИЕ(Справочник.%1.ПустаяСсылка)";
			
		Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ВсеДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст,
				"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
				"");
				
		КонецЕсли;
			
		ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
		Запрос.Текст = СтрШаблон(Запрос.Текст, ИмяПрикладногоСправочника);
			
		Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
		ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВебСервисом

Процедура ПолучитьРезультатПроверкиВебСервисом(ДанныеКонтрагентов, Отбор)
	
	// Проверяем только тех контрагентов, которые соответствуют указанному отбору
	ДанныеКонтрагентовДляПроверкиСервисом = ДанныеКонтрагентов.НайтиСтроки(Отбор);
	КоличествоКонтрагентов = ДанныеКонтрагентовДляПроверкиСервисом.Количество();

	Если КоличествоКонтрагентов = 0 Тогда
		// Нет данных для проверки
		Возврат;
	КонецЕсли;
	
	РазмерПорции = 10000;
	
	// Разбиваем всю таблицу на блоки запросов 
	КоличествоЗапросов = ?(КоличествоКонтрагентов % РазмерПорции = 0, КоличествоКонтрагентов / РазмерПорции, Цел(КоличествоКонтрагентов / РазмерПорции) + 1);
		
	// Выполняем несколько запросов. В каждом запросе не более 10000 строк
	Для НомерПорции = 1 По КоличествоЗапросов Цикл 
		
		МинимальныйНомерКонтрагента 	= Мин(РазмерПорции * (НомерПорции - 1), КоличествоКонтрагентов);
		МаксимальныйНомерКонтрагента 	= Мин(РазмерПорции * НомерПорции, КоличествоКонтрагентов) - 1;
		
		ИмяВременногоФайлаЗапросаСостояний = ТекущееИмяВременногоФайла("xml");
		ЗапросСостояний = Новый ЗаписьXML;
		ЗапросСостояний.ОткрытьФайл(ИмяВременногоФайлаЗапросаСостояний, "windows-1251");
		ЗапросСостояний.ЗаписатьОбъявлениеXML();
		ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonents");
			
		Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
			
			ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
			
			ЗапросСостояний.ЗаписатьНачалоЭлемента("Abonent");
				ЗапросСостояний.ЗаписатьНачалоЭлемента("INN");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.ИНН);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
				ЗапросСостояний.ЗаписатьНачалоЭлемента("KPP");
					ЗапросСостояний.ЗаписатьТекст(ДанныеКонтрагента.КПП);
				ЗапросСостояний.ЗаписатьКонецЭлемента();
			ЗапросСостояний.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		ЗапросСостояний.ЗаписатьКонецЭлемента();
		ЗапросСостояний.Закрыть();
		
		ФайлЗапросаСостояний = Новый Файл(ИмяВременногоФайлаЗапросаСостояний);
		Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,
			ОбменСКонтрагентамиВнутренний.ТаймаутПоРазмеруФайла(ФайлЗапросаСостояний.Размер()));
		АдресРесурса = "GetMassInfo";
		
		// возможно будет ответ от сервера
		ИмяФайлаРезультата = ТекущееИмяВременногоФайла("xml"); ДанныеФайла = "";
		Если Не ЕстьДоступКВебСервису1CЭДО() Тогда
			Возврат;
		КонецЕсли;
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяВременногоФайлаЗапросаСостояний, АдресРесурса, ИмяФайлаРезультата);
			
			ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаРезультата, , Истина);
			ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента);
		Исключение
			ЕстьОшибки = Истина;
			
			ФайлРезультата = Новый ТекстовыйДокумент;
			ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
			Результат = ФайлРезультата.ПолучитьТекст();
			
			ШаблонСообщения = НСтр("ru = 'При проверке состояния контрагентов на сервисе 1С-ЭДО возникла ошибка:'");
			
			Файл = Новый Файл(Файл);
			ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Файл.Имя);
				
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(Результат) Тогда
				Результат = СтрЗаменить(Результат, """", "");
				Результат = СтрЗаменить(Результат, ":", ",");
				МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
				Если МассивПараметровОшибки.Количество() >= 7 Тогда
					
					КодОшибки = МассивПараметровОшибки[5];
					
					ШаблонОшибки = НСтр("ru = '%1: %2.'");
					ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
						МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
					
					ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
						КодОшибки, ТекстОшибкиЭДО);
					
					ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			КонецЕсли;
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
				Результат, ТекстСообщения);
		КонецПопытки;
		
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяВременногоФайлаЗапросаСостояний);
		ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьОтветСервиса(ДанныеФайла, ДанныеКонтрагентовДляПроверкиСервисом, МинимальныйНомерКонтрагента, МаксимальныйНомерКонтрагента)
	
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ИННКПП = Новый Массив;
		ПрочитатьИННКППИзФайла(ИННКПП, ДанныеФайла);
		
		Если ИННКПП.Количество() >0 Тогда
			
			Для ИндексТекущегоКонтрагента = МинимальныйНомерКонтрагента По МаксимальныйНомерКонтрагента Цикл
				
				ДанныеКонтрагента = ДанныеКонтрагентовДляПроверкиСервисом[ИндексТекущегоКонтрагента];
				
				КлючПоиска = ДанныеКонтрагента.ИНН + ?(ЗначениеЗаполнено(ДанныеКонтрагента.КПП), "/"+ДанныеКонтрагента.КПП, "");
				
				НайденныйКонтрагент = ИННКПП.Найти(КлючПоиска);
				Если Не НайденныйКонтрагент = Неопределено Тогда
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.Подключен;
				Иначе
					ДанныеКонтрагента.Состояние = Перечисления.СостоянияКонтрагентаБЭД.НеПодключен;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьРезультатаПроверкиВРегистрСведений

// Проверка нескольких контрагентов.
Процедура СохранитьРезультатыПроверкиСправочника(ДанныеКонтрагентов, АдресХранилища = Неопределено, СохранятьРезультатСразуПослеПроверки = Ложь)
	
	Если ДанныеКонтрагентов.Количество() = 1 Тогда
		
		ДанныеКонтрагента = ДанныеКонтрагентов[0]; 
	
		// Сохраняем во временное хранилище.
		Если ЗначениеЗаполнено(АдресХранилища)  Тогда
			ПоместитьВоВременноеХранилище(ДанныеКонтрагента.Состояние, АдресХранилища);
		КонецЕсли;
			
		// Сохраняем в регистр
		Если ЗначениеЗаполнено(ДанныеКонтрагента.Контрагент) 
			И (НЕ ЗначениеЗаполнено(АдресХранилища) ИЛИ СохранятьРезультатСразуПослеПроверки) Тогда
			
			СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
			
		КонецЕсли;
		
	Иначе
		
		СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентовВРегистр(ДанныеКонтрагентов)
	
	Для каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента);
	КонецЦикла;
	
КонецПроцедуры

Процедура СохранитьРезультатыПроверкиКонтрагентаВРегистр(ДанныеКонтрагента)
	
	Ключ = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		
		Контрагент = ДанныеКонтрагента.Контрагент;
		
		// Записываем данные в регистр.
		НаборЗаписей = РегистрыСведений.СостоянияКонтрагентовБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
			ОбластьДанныхВспомогательныеДанные = ДанныеКонтрагента.ОбластьДанныхВспомогательныеДанные;
			НаборЗаписей.Отбор.ОбластьДанныхВспомогательныеДанные.Установить(ОбластьДанныхВспомогательныеДанные);
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		// Проверим необходимость записи.
		ЕстьИзменения = Ложь;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Выбран() И ЗначениеЗаполнено(НаборЗаписей) Тогда
			ТекущиеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, НаборЗаписей[0]);
			НовыеДанные = Новый Структура("Контрагент,Состояние,ИНН,КПП");
			ЗаполнитьЗначенияСвойств(НовыеДанные, ДанныеКонтрагента);
			Для каждого Данные Из ТекущиеДанные Цикл
				Если Данные.Значение <> НовыеДанные[Данные.Ключ] Тогда
					ЕстьИзменения = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ЕстьИзменения Тогда
			НаборЗаписей.Очистить();
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеКонтрагента); 
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Запись результатов проверки подключения контрагентов к 1С-ЭДО в регистр.'");
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
	КонецПопытки;
	
	Если Ключ <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(Ключ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Функция - Шаблон таблицы, используемой для передачи данных в веб-сервис ФНС.
// Возвращаемое значение:
// ТаблицаЗначений - пустая таблица с колонками "Контрагент", "ИНН", "КПП", "Дата", "Состояние", "ДополнительныеПараметры"
//                   "ОбластьДанныхВспомогательныеДанные"(если есть подсистема РаботаВМоделиСервиса).
Функция ШаблонТаблицыДанныеКонтрагента()
	
	// Создаем таблицу
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	Тип = "СправочникСсылка." + ИмяПрикладногоСправочника;
	
	// Проверяемый контрагент
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", 	Новый ОписаниеТипов(Тип));
	// ИНН контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаИННКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	// КПП контрагента
	ДанныеКонтрагентов.Колонки.Добавить(ИмяРеквизитаКППКонтрагента, 			Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	// Дата, на которую выполняется проверка контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	// Результат проверки контрагента.
	ДанныеКонтрагентов.Колонки.Добавить("Состояние", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияКонтрагентаБЭД"));
	// Область данных
	ДобавитьКолонкуОбластьДанных(ДанныеКонтрагентов);

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура ДобавитьКолонкуОбластьДанных(Таблица)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		Таблица.Колонки.Добавить("ОбластьДанныхВспомогательныеДанные", 	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 0, ДопустимыйЗнак.Неотрицательный)));
	КонецЕсли;
	
КонецПроцедуры

Функция СправочникКонтрагентовИерархический()
	
	ИмяПрикладногоСправочника = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Возврат Метаданные.Справочники[ИмяПрикладногоСправочника].Иерархический;
	
КонецФункции

Процедура ПолучитьСостоянияКонтрагентовИзКэша(ДанныеКонтрагентов, ПолучатьВсеСостоянияИзРегистра = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Контрагент
	              	|ПОМЕСТИТЬ СозданныеНастройки
	              	|ИЗ
	              	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
	              	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	              	|	ДанныеКонтрагентов.КПП КАК КПП,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	              	|	ДанныеКонтрагентов.Дата КАК Дата
	              	|ПОМЕСТИТЬ ДанныеКонтрагентов
	              	|ИЗ
	              	|	&ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	ДанныеКонтрагентов.Контрагент КАК Контрагент,
	              	|	ДанныеКонтрагентов.ИНН КАК ИНН,
	              	|	ДанныеКонтрагентов.КПП КАК КПП,
	              	|	ДанныеКонтрагентов.Дата КАК Дата,
	              	|	ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	              	|	ВЫБОР
	              	|		КОГДА &ПолучатьВсеСостоянияИзРегистра
	              	|			ТОГДА СостоянияКонтрагентовБЭД.Состояние
	              	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.ПустаяСсылка)
	              	|	КОНЕЦ КАК Состояние,
	              	|	ВЫБОР
	              	|		КОГДА СозданныеНастройки.Контрагент ЕСТЬ NULL
	              	|			ТОГДА ЛОЖЬ
	              	|		ИНАЧЕ ИСТИНА
	              	|	КОНЕЦ КАК НастройкиСозданы
	              	|ИЗ
	              	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	              	|		ПО ДанныеКонтрагентов.Контрагент = СостоянияКонтрагентовБЭД.Контрагент
	              	|			И ДанныеКонтрагентов.ИНН = СостоянияКонтрагентовБЭД.ИНН
	              	|			И ДанныеКонтрагентов.КПП = СостоянияКонтрагентовБЭД.КПП
	              	|			И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ СозданныеНастройки КАК СозданныеНастройки
	              	|		ПО ДанныеКонтрагентов.Контрагент = СозданныеНастройки.Контрагент";
					
	Если НЕ ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные,",
			"");
		
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"И ДанныеКонтрагентов.ОбластьДанныхВспомогательныеДанные = СостоянияКонтрагентовБЭД.ОбластьДанныхВспомогательныеДанные",
			"");
		
	КонецЕсли;
				  
	Запрос.УстановитьПараметр("ПолучатьВсеСостоянияИзРегистра", ПолучатьВсеСостоянияИзРегистра); 
	
	Запрос.УстановитьПараметр("ДанныеКонтрагентов", ДанныеКонтрагентов);
	ДанныеКонтрагентов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтражениеВУчете

// См. ЗаписатьДанныеПакетовЭД.
Процедура ИсключитьНеОтражаемыеВУчетеЭлектронныеДокументы(ПараметрыСозданияУчетныхДокументов)
	
	НаУдаление = Новый Массив;
	Для каждого СтрокаПараметров Из ПараметрыСозданияУчетныхДокументов Цикл
		
		ДанныеЭД = СтрокаПараметров.ДанныеФайлаЭД;
		Если Не ВозможноСозданиеУчетногоДокумента(ДанныеЭД) Тогда
			НаУдаление.Добавить(СтрокаПараметров);
			Если ТипЗнч(СтрокаПараметров.ВладелецЭД) = Тип("ДокументСсылка.ЭлектронныйДокументВходящий") Тогда
				НачатьТранзакцию();
				Попытка
					ДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(СтрокаПараметров.ВладелецЭД);
					ДокументОбъект.ОтключитьКонтрольОтраженияВУчете = Истина;
					ДокументОбъект.Записать();
					ЗафиксироватьТранзакцию();
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаПараметров Из НаУдаление Цикл
		ПараметрыСозданияУчетныхДокументов.Удалить(СтрокаПараметров);
	КонецЦикла;
	
КонецПроцедуры

Функция ВозможноСозданиеУчетногоДокумента(Знач ДанныеЭД, Описание = "") Экспорт
	
	Если ТипЗнч(ДанныеЭД) <> Тип("ОбъектXDTO") Тогда
		Возврат Истина;
	КонецЕсли;
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ЭтоСводныйУПД", Ложь);
	Формат = ОбменСКонтрагентамиВнутренний.ФорматЭлектронногоДокументаПоОбъекту(ДанныеЭД);
	Если ОбменСКонтрагентамиВнутренний.ПроверитьФорматЭлектронногоДокумента(Формат, "УПД", "2019") Тогда
		ПараметрыПроверки.ЭтоСводныйУПД = ЭтоСводныйУПД(ДанныеЭД);
	КонецЕсли;
	
	Отказ = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ПриПроверкеВозможностиСозданияУчетногоДокумента(ПараметрыПроверки, Отказ, Описание);
	
	Возврат Не Отказ;
	
КонецФункции

Функция ЭтоСводныйУПД(Знач ДанныеЭД)
	
	Если ТипЗнч(ДанныеЭД.Документ.СвСчФакт.СвПрод) = Тип("СписокXDTO") Тогда
		Если ДанныеЭД.Документ.СвСчФакт.СвПрод.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД.Документ.СвСчФакт.СвПокуп) = Тип("СписокXDTO") Тогда
		Если ДанныеЭД.Документ.СвСчФакт.СвПокуп.Количество() > 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РегистрационныеПакеты

// Формирование архива регистрационного пакета для оператора ЭДО.
//
// Параметры:
//  РеквизитыПакета - Структура - параметры пакета.
//  ЗашифрованныеДанныеОператораЭДО - ДвоичныеДанные - данные для оператора ЭДО
//  								- Строка - адрес временного хранилища
//  ПодписанныеДвоичныеДанныеДляОператораЭДО - ДвоичныеДанные - подписанные данные для оператора.
//  ДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - данные соглашения.
//  ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО - ДвоичныеДанные - подписанные данные соглашения.
// 
// Возвращаемое значение:
//  Строка - имя файла пакета.
//
Функция РегистрационныйПакетДляОператораЭДО(РеквизитыПакета, ЗашифрованныеДанныеОператораЭДО, ПодписанныеДвоичныеДанныеДляОператораЭДО,
		ДвоичныеДанныеСоглашенияНаПодключениеЭДО, ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО)
		
	// Сформируем пакет для 1СЭДО
	ИмяФайлаПакетаДля1СЭДО = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог() + "EDI_"
		+ РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО + ".zip";
	
	АдресКаталогаРегистрации = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог(
		"reg", РеквизитыПакета.УникальныйИдентификаторЗаявки1СЭДО);
	ИмяВременногоФайлаПакетаДляОператораЭДО            = АдресКаталогаРегистрации + "packet.zip";
	ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.zip";
	ИмяВременногоФайлаЭДКарточки                       = АдресКаталогаРегистрации + "card.xml";
	ИмяВременногоФайлаЭДТранспортнойИнформации         = АдресКаталогаРегистрации + "meta.xml";
	
	// Готовим данные для ОператораЭДО
	Если ТипЗнч(ЗашифрованныеДанныеОператораЭДО) = Тип("ДвоичныеДанные") Тогда
		ЗашифрованныеДвоичныеДанныеОператораЭДО	= ЗашифрованныеДанныеОператораЭДО;
	Иначе
		ЗашифрованныеДвоичныеДанныеОператораЭДО = ПолучитьИзВременногоХранилища(ЗашифрованныеДанныеОператораЭДО);
	КонецЕсли;
	
	ИмяФайла = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ЗашифрованныеДвоичныеДанныеОператораЭДО.Записать(ИмяФайла);
	
	ИмяФайлаПодписи = АдресКаталогаРегистрации + НовыйUUID() + ".bin";
	ПодписанныеДвоичныеДанныеДляОператораЭДО.Записать(ИмяФайлаПодписи);
	
	ИмяФайлаОписанияПакетаДляОператораЭДО = АдресКаталогаРегистрации + "packageDescription.xml";
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО = ОписаниеПакетаДляОператораЭДО(РеквизитыПакета, ИмяФайла, ИмяФайлаПодписи);
	ДвоичныеДанныеОписанияПакетаДляОператораЭДО.Записать(ИмяФайлаОписанияПакетаДляОператораЭДО);
	
	МассивФайловПакетаНаПодключениеЭДО = Новый Массив;
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаОписанияПакетаДляОператораЭДО);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайла);
	МассивФайловПакетаНаПодключениеЭДО.Добавить(ИмяФайлаПодписи);
	СформироватьАрхивФайлов(ИмяВременногоФайлаПакетаДляОператораЭДО, МассивФайловПакетаНаПодключениеЭДО);
	
	// Готовим соглашение для 1СЭДО
	ИмяФайлаСоглашенияНаПодключениеЭДО       = АдресКаталогаРегистрации + "LicenseCard.xml";
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлаСоглашенияНаПодключениеЭДО);
	
	ИмяФайлПодписиСоглашенияНаПодключениеЭДО = АдресКаталогаРегистрации + "LicenseCard.p7s";
	ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО.Записать(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО = Новый Массив;
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлаСоглашенияНаПодключениеЭДО);
	МассивФайловАрхиваСоглашенияНаПодключениеЭДО.Добавить(ИмяФайлПодписиСоглашенияНаПодключениеЭДО);
	СформироватьАрхивФайлов(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО, МассивФайловАрхиваСоглашенияНаПодключениеЭДО);
	
	// Готовим описание пакета для 1СЭДО
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДКарточки", ИмяВременногоФайлаЭДКарточки);
	РеквизитыПакета.Вставить("ИмяВременногоФайлаЭДТранспортнойИнформации", ИмяВременногоФайлаЭДТранспортнойИнформации);
	СоздатьФайлыОписанияПакета(РеквизитыПакета);
	
	МассивФайловРегистрационногоПакета = Новый Массив;
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаПакетаДляОператораЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаАрхиваСоглашенияНаПодключениеЭДО);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДКарточки);
	МассивФайловРегистрационногоПакета.Добавить(ИмяВременногоФайлаЭДТранспортнойИнформации);
	СформироватьАрхивФайлов(ИмяФайлаПакетаДля1СЭДО, МассивФайловРегистрационногоПакета);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(АдресКаталогаРегистрации);
	
	Возврат ИмяФайлаПакетаДля1СЭДО;

КонецФункции

// Отправка регистрационного пакета 1С-ЭДО.
//
// Параметры:
//  ПолноеИмяФайла - Строка - полное имя файла пакета.
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ЕстьОшибки - Булево - возвращает результат отправки.
//
Процедура ОтправитьРегистрационныйПакет1СЭДО(Знач ПолноеИмяФайла, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки)
	
	Билет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена);
	Если Не ЗначениеЗаполнено(Билет) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	// Если доступа к ВебСервису нет, то работу с ним прекращаем.
	Если Не ЕстьДоступКВебСервису1CЭДО(Истина) Тогда
		ЕстьОшибки = Истина;
		Возврат;
	КонецЕсли;
	
	ФайлДляОтправки = Новый Файл(ПолноеИмяФайла);
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО,
		ОбменСКонтрагентамиВнутренний.ТаймаутПоРазмеруФайла(ФайлДляОтправки.Размер()));
	АдресРесурса = "SendRequest?ticket=" + Билет;
	
	// возможно будет ответ от сервера
	ИмяФайлаРезультата = ТекущееИмяВременногоФайла("txt");
	Попытка
		Соединение.ОтправитьДляОбработки(ПолноеИмяФайла, АдресРесурса, ИмяФайлаРезультата);
	Исключение
		ЕстьОшибки = Истина;
		
		ФайлРезультата = Новый ТекстовыйДокумент;
		ФайлРезультата.Прочитать(ИмяФайлаРезультата, КодировкаТекста.UTF8);
		Результат = ФайлРезультата.ПолучитьТекст();
		
		ШаблонЗаголовкаСообщения = НСтр("ru = 'При отправке заявления о регистрации: %1 (тикет %2) на сервисе 1С-ЭДО возникла ошибка:'");
		
		Файл = Новый Файл(ПолноеИмяФайла);
		ТекстЗаголовкаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗаголовкаСообщения, Файл.Имя, Билет);
			
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(Результат) Тогда
			Результат = СтрЗаменить(Результат, """", "");
			Результат = СтрЗаменить(Результат, ":", ",");
			МассивПараметровОшибки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат, ",");
			Если МассивПараметровОшибки.Количество() >= 7 Тогда
				
				КодОшибки = МассивПараметровОшибки[5];
				
				ШаблонОшибки = НСтр("ru = '%1: %2.'");
				ТекстОшибкиЭДО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки,
					МассивПараметровОшибки[7], МассивПараметровОшибки[1]);
				
				ТекстОшибки = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ПолучитьСообщениеОбОшибке(
					КодОшибки, ТекстОшибкиЭДО);
				
				ТекстСообщения = ТекстЗаголовкаСообщения + Символы.ПС + ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Результат = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		
		ТекстСообщения = ТекстОшибкиОбращенияКСервису(ТекстСообщения);
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ТекстЗаголовкаСообщения,
			Результат, ТекстСообщения);
		
	КонецПопытки;
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаРезультата);
	
КонецПроцедуры

#КонецОбласти

// Новая архитектура ЭДО
//

#Область ПолучениеДистрибутивовКриптоПровайдеров

// Получает дистрибутив КриптоПро CSP
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры получения торговых предложений из сервиса.
//    * Продукт - Строка - Тип продукта КриптоПро (x64/x86) для загрузки.
//    * КонтактноеЛицо - Строка - Контактное лицо запросившее дистрибутив.
//    * ЭлектроннаяПочта - Строка - Электронная почта для регистрации дистрибутива.
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//   АдресДополнительногоРезультата - Строка - Адрес дополнительного результата в хранилище значений.
//
Процедура ПолучитьДистрибутивCryptoProCSP(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	URL = "https://www.cryptopro.ru/products/csp/downloads/kontur";
	Соединение = СоединениеССерверомИнтернета(URL);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос = Новый HTTPЗапрос("/products/csp/downloads/kontur", Заголовки);
	
	СтрокаЗапроса = "product=%1&username=%2&email=%3&company=%4";
	СтрокаЗапроса = СтрШаблон(СтрокаЗапроса,
		Параметры.Продукт,
		КодироватьСтроку(Параметры.КонтактноеЛицо, СпособКодированияСтроки.URLВКодировкеURL), 
		КодироватьСтроку(Параметры.ЭлектроннаяПочта, СпособКодированияСтроки.URLВКодировкеURL),
		"");
	
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сервис получения CryptoPro CSP временно недоступен. Повторите попытку позже.'"));

		 ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение серийного номера CryptoPro CSP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, КраткоеПредставлениеОшибки(ОписаниеОшибки));
			
		Возврат;
		
	КонецПопытки;

	Если Ответ.КодСостояния = 200 И Ответ.Заголовки.Получить("Distribution-Number") <> Неопределено Тогда
		Дистрибутив = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ПараметрыДистрибутива = Новый Структура;
		ПараметрыДистрибутива.Вставить("НомерДистрибутива", Ответ.Заголовки["Distribution-Number"]);
		ПараметрыДистрибутива.Вставить("КонтрольнаяСумма", Ответ.Заголовки["GOST"]);
		ПараметрыДистрибутива.Вставить("Версия", Ответ.Заголовки["Version"]);
		
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		
		Дистрибутив.Записать(ВременныйКаталог + "Setup.exe");
		
		ТекстСкрипта = ":: setup CryptoPro CSP
		|@echo off
		|
		|""!setup.exe!""!args!";
		ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "!setup.exe!", "Setup.exe");
		Если ЗначениеЗаполнено(Параметры.СерийныйНомер) Тогда
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "!args!", СтрШаблон(" -args ""PIDKEY=%1""", Параметры.СерийныйНомер));
		Иначе
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "!args!", "");
		КонецЕсли;
		
		ТекстовыйФайл = Новый ЗаписьТекста(ВременныйКаталог + "Setup.bat", КодировкаТекста.OEM);
		ТекстовыйФайл.Записать(ТекстСкрипта);
		ТекстовыйФайл.Закрыть();
		
		Файлы = Новый Массив;
		Для каждого Файл Из НайтиФайлы(ВременныйКаталог, ПолучитьМаскуВсеФайлы()) Цикл
			ОписаниеФайла = Новый Структура;
			ОписаниеФайла.Вставить("Имя", Файл.Имя);
			ОписаниеФайла.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(Файл.ПолноеИмя));
			Файлы.Добавить(ОписаниеФайла);
		КонецЦикла; 
		ПараметрыДистрибутива.Вставить("Дистрибутив", Файлы);
	Иначе
		Ошибка = Ответ.ПолучитьТелоКакСтроку();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение серийного номер CryptoPro CSP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ошибка);
		ВызватьИсключение(Ошибка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПараметрыДистрибутива, АдресРезультата);
	
КонецПроцедуры

// Получает дистрибутив VipNet CSP
//
// Параметры:
//   ПараметрыПоиска - Структура - параметры получения торговых предложений из сервиса.
//    * Разрядность - Число - Разрядность операционной системы (x64/x86) для загрузки дистрибутива.
//    * КонтактноеЛицо - Строка - Контактное лицо запросившее дистрибутив.
//    * ЭлектроннаяПочта - Строка - Электронная почта для регистрации дистрибутива.
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//   АдресДополнительногоРезультата - Строка - Адрес дополнительного результата в хранилище значений.
//
Процедура ПолучитьДистрибутивViPNetCSP(Параметры, АдресРезультата, АдресДополнительногоРезультата) Экспорт
	
	Если Параметры.Разрядность = 64 Тогда
		ВидДистрибутива = "latest_win64bit_all";
	Иначе
		ВидДистрибутива = "latest_win32bit_all";
	КонецЕсли;
	
	URL = "https://getserial.infotecs.ru/partner/csp/service/GetSerialNumberByAbonentInfo/";
	Соединение = СоединениеССерверомИнтернета(URL);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Запрос = Новый HTTPЗапрос("/partner/csp/service/GetSerialNumberByAbonentInfo/", Заголовки);
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить(СокрЛП(ИдентификаторЗапроса) + "1594xV9dHsW7vNN");
	
	MD5 = СтрЗаменить(НРег(Хеширование.ХешСумма), " ", "");
	
	СтрокаЗапроса = "i_id_request=%1&i_id_partner=%2&i_req_sign=%3&i_contact_person=%4&i_email=%5&i_id_file=%6";
	СтрокаЗапроса = СтрШаблон(СтрокаЗапроса, 
		ИдентификаторЗапроса, "1594", MD5, 
		КодироватьСтроку(Параметры.КонтактноеЛицо, СпособКодированияСтроки.URLВКодировкеURL), 
		КодироватьСтроку(Параметры.ЭлектроннаяПочта, СпособКодированияСтроки.URLВКодировкеURL),
		КодироватьСтроку(ВидДистрибутива, СпособКодированияСтроки.URLВКодировкеURL));
	
	Запрос.УстановитьТелоИзСтроки(СтрокаЗапроса);
	
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сервис получения серийных номеров для ViPNet CSP временно недоступен. Повторите попытку позже.'"));

		 ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение серийного номер ViPNet CSP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, КраткоеПредставлениеОшибки(ОписаниеОшибки));
			
		Возврат;
		
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJson = Новый ЧтениеJSON;
		ЧтениеJson.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		
		ОтветJSON = ПрочитатьJSON(ЧтениеJson);
		ЧтениеJson.Закрыть();
		
		Если ОтветJSON.Свойство("error_code") И ОтветJSON.error_code = 100 Тогда
			ПараметрыДистрибутива = Новый Структура;
			ПараметрыДистрибутива.Вставить("СерийныйНомер", ОтветJSON.i_sn);
			
			ПараметрыПолученияФайла = ПолучениеФайловИзИнтернетаКлиентСервер.ПараметрыПолученияФайла();
			Файл = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(ОтветJSON.i_download_url, ПараметрыПолученияФайла);
			Если Не Файл.Статус Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Не удалось скачать дистрибутив VipNet CSP. Повторите попытку позже.'"));
				Возврат;
			КонецЕсли;
			Дистрибутив = ПолучитьИзВременногоХранилища(Файл.Путь);
			ПараметрыДистрибутива.Вставить("КонтрольнаяСумма", ОтветJSON.i_distr_checksum);
			
			// Версию возьмем из имени файла
			НачалоВерсии = СтрНайти(ОтветJSON.i_download_url, "_", НаправлениеПоиска.СКонца,, 2) + 1;
			ЧастьСВерсией = Сред(ОтветJSON.i_download_url, НачалоВерсии);
			Версия = Лев(ЧастьСВерсией, СтрНайти(ЧастьСВерсией, "_") - 1);
			
			ПараметрыДистрибутива.Вставить("Версия", Версия);
			
			ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
			Поток = Новый ПотокВПамяти;
			Дистрибутив.Записать(Поток);
			
			ЧтениеZip = Новый ЧтениеZipФайла(Поток);
			ЧтениеZip.ИзвлечьВсе(ВременныйКаталог);
			
			ТекстСкрипта = "Serial Number: %1
			|E-mail: %2
			|User name: %3
			|Company: %4";
			
			ТекстСкрипта = СтрШаблон(
			ТекстСкрипта,
			ПараметрыДистрибутива.СерийныйНомер,
			Параметры.ЭлектроннаяПочта,
			Параметры.КонтактноеЛицо,
			"");
			
			ТекстовыйФайл = Новый ЗаписьТекста(ВременныйКаталог + "cspreg.txt", КодировкаТекста.OEM);
			ТекстовыйФайл.Записать(ТекстСкрипта);
			ТекстовыйФайл.Закрыть();
			
			ТекстСкрипта =
			":: setup ViPNet CSP
			|@echo off
			|
			|""!setup.exe!""!args!";
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "!setup.exe!", ЧтениеZip.Элементы[0].Имя);
			ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "!args!", "");
			
			ТекстовыйФайл = Новый ЗаписьТекста(ВременныйКаталог + "Setup.bat", КодировкаТекста.OEM);
			ТекстовыйФайл.Записать(ТекстСкрипта);
			ТекстовыйФайл.Закрыть();
			
			ЧтениеZip.Закрыть();
			
			Поток.Закрыть();
			
			Файлы = Новый Массив;
			Для каждого Файл Из НайтиФайлы(ВременныйКаталог, ПолучитьМаскуВсеФайлы()) Цикл
				ОписаниеФайла = Новый Структура;
				ОписаниеФайла.Вставить("Имя", Файл.Имя);
				ОписаниеФайла.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(Файл.ПолноеИмя));
				Файлы.Добавить(ОписаниеФайла);
			КонецЦикла;
			ПараметрыДистрибутива.Вставить("Дистрибутив", Файлы);
			
		Иначе
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Получение серийного номер ViPNet CSP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			    УровеньЖурналаРегистрации.Ошибка,,, СтрШаблон("error_code: %1", ОтветJSON.error_code));
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Сервис получения серийных номеров для ViPNet CSP временно недоступен. Повторите попытку позже.'"));
		КонецЕсли;
		
	Иначе
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Получение серийного номера ViPNet CSP'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ПараметрыДистрибутива, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом1СЭДО

// Получение идентификаторов учетных записей ЭДО по ИНН/КПП из сервиса 1С:ЭДО.
//     Так-же сюда добавляются данные о известных учетных записях из сервиса настроек
//
// Параметры:
//   Организация - СправочникСсылка - Ссылка на элемент справочника Организации.
//   АдресРезультата - Строка - Адрес результат в хранилище значений. Значение результата список значений
//
Процедура ПолучитьИдентификаторыВСервисе1СЭДО(Организация, АдресРезультата) Экспорт
	
	ОбновитьКешиОператоровЭДОИФорматов();
	СписокИдентификаторов = Новый СписокЗначений;
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	Если ЗначениеЗаполнено(СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации])) Тогда
		
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("МассивИНН", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		
		Адрес = ПоместитьВоВременноеХранилище(Неопределено);
		ПолучитьДанныеАбонентаИзСервисаНастроек(ПараметрыПроцедуры, Адрес);
		
		Результат = ПолучитьИзВременногоХранилища(Адрес);
		
		Если Не ЗначениеЗаполнено(Результат) Тогда
			Возврат;
		КонецЕсли;
		
		МассивИдентификаторов = Результат.ВыгрузитьЗначения();
		
		СписокИдентификаторов = СопоставитьИдентификаторыСУжеДобавленнымиИОтфильтровать(МассивИдентификаторов,
			СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СписокИдентификаторов, АдресРезультата);
	
КонецПроцедуры

// Обновление настройки уведомлений учетных записей в сервисе 1C:ЭДО.
//
// Параметры:
//   ПараметрыУведомлений - Структура - См. ОписаниеПараметровУведомленийВСервисеЭДО
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//
Процедура ОбновитьПараметрыУведомленийВСервисе1СЭДО(ПараметрыУведомлений, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = НовоеОписаниеПараметровУведомленийВСервисеЭДО();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыУведомлений);
	
	ПараметрыКоманды = ПараметрыКомандыУстановкиУведомленийВСервисеЭДО(ПараметрыЗапроса);
	Настройка        = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	ПоместитьВоВременноеХранилище(Не Отказ, АдресРезультата);
	
КонецПроцедуры

// Получение настройки уведомлений учетной записи в сервисе 1C:ЭДО.
//
// Параметры:
//   ПараметрыУведомлений - Структура - См. ОписаниеПараметровУведомленийВСервисеЭДО
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//
Процедура ПолучитьПараметрыУведомленийВСервисе1СЭДО(ПараметрыУведомлений, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыЗапроса = НовоеОписаниеПараметровУведомленийВСервисеЭДО();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ПараметрыУведомлений);
	
	ПараметрыКоманды = ПараметрыКомандыЧтенияУведомленийВСервисеЭДО(ПараметрыЗапроса);
	Настройка        = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ
		Или Настройка = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкиОповещения = Новый Структура;
	НастройкиОповещения.Вставить("ЭлектроннаяПочта", Настройка.Mail);
	НастройкиОповещения.Вставить("УведомлятьОСобытиях",
		ЗначениеСтатуса(Настройка.Total.Status));
	НастройкиОповещения.Вставить("УведомлятьОНовыхПриглашениях",
		ЗначениеСтатуса(Настройка.NewInvitations.status));
	НастройкиОповещения.Вставить("УведомлятьОбОтветахНаПриглашения",
		ЗначениеСтатуса(Настройка.NewInvitationResults.status));
	НастройкиОповещения.Вставить("УведомлятьОНовыхДокументах",
		ЗначениеСтатуса(Настройка.NewMessages.status));
	НастройкиОповещения.Вставить("УведомлятьОНеобработанныхДокументах",
		ЗначениеСтатуса(Настройка.UnfinishedMessages.status));
	НастройкиОповещения.Вставить("УведомлятьОбОкончанииСрокаДействияСертификатов",
		ЗначениеСтатуса(Настройка.CertExpiration.status));
		
	ПоместитьВоВременноеХранилище(НастройкиОповещения, АдресРезультата);
	
КонецПроцедуры

// Заполнение пакета данных для регистрации сертификатов у оператора 1С:ЭДО
//
// Параметры:
//   ПараметрыОперации - Структура - параметры необходимы для выполнения операции.
//    * ОператорЭДО - Ссылка - Ссылка на справочник операторов ЭДО.
//    * АдресОрганизации - Строка - Представление адреса организации.
//    * Организация - Ссылка - Ссылка на справочник организации.
//    * СертификатКриптографии - Массив - Массив ссылок на справочник сертификаты
//    * ЭлектроннаяПочта - Строка - адрес электронной почты абонента.
//    * КодНалоговогоОргана -Число - Код налогового органа. 
//    * СертификатыПодписейОрганизации -массив - Список сертификатов организации
//
//  Возвращаемое значение:
//     Структура -  Регистрационный пакет 1С:ЭДО:
//
Функция ДанныеДляРегистрационногоПакета1СЭДО(ПараметрыОперации) Экспорт
	
	ДанныеОператора = РегистрыСведений.ОператорыЭДО.АктуальныеДанныеОператораЭДО(ПараметрыОперации.ОператорЭДО);
	
	РеквизитыПакета = Новый Структура;
	ДвоичныеДанныеДляОператораЭДО = Неопределено;
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = Неопределено;
	
	ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ПараметрыОперации, ДанныеОператора, ДвоичныеДанныеДляОператораЭДО);
	
	ДанныеПакета = Новый Структура;
	ДанныеПакета.Вставить("РеквизитыПакета", РеквизитыПакета);
	ДанныеПакета.Вставить("ДвоичныеДанныеДляОператораЭДО", ДвоичныеДанныеДляОператораЭДО);
	ДанныеПакета.Вставить("ДвоичныеДанныеСоглашенияНаПодключениеЭДО", ДвоичныеДанныеСоглашенияНаПодключениеЭДО);
	ДанныеПакета.Вставить("ОператорЭДОСертификат", ДанныеОператора.Сертификат);
	ДанныеПакета.Вставить("ДобавляемыйСертификат", ПараметрыОперации.СертификатКриптографии);
	
	Возврат ДанныеПакета;
	
КонецФункции

// Формирование и отправка регистрационного пакета 1С-ЭДО.
//
// Параметры:
//  Контекст - Структура - данные для формирования пакета.
//  ИнтернетПоддержкаПользователейПодключена - Булево - в данную переменную возвращается Истина, если 
//	                                                    интернет-поддержку удалось подключить
//  ЕстьОшибки - Булево - возвращает результат отправки.
//
Функция ОтправитьЗаявлениеНаРегистрациюВСервис1СЭДО(ПараметрыОперации, АдресРезультата) Экспорт
	
	Контекст = ПараметрыОперации;
	ИнтернетПоддержкаПользователейПодключена = Неопределено;
	ЕстьОшибки = Ложь;
	
	ИмяФайлаПакетаДля1СЭДО = РегистрационныйПакетДляОператораЭДО(Контекст.РеквизитыПакета,
		Контекст.ЗашифрованныеДанныеОператораЭДО, Контекст.ПодписанныеДвоичныеДанныеДляОператораЭДО,
		Контекст.ДвоичныеДанныеСоглашенияНаПодключениеЭДО, Контекст.ПодписанныеДвоичныеДанныеСоглашенияНаПодключениеЭДО);
		
	// Отправка заявления на сервис 1С-ЭДО
	ТекстЗаголовкаСообщения = НСтр("ru = 'Отправка заявления о регистрации на сервисе 1С-ЭДО'");
	
	ШаблонСообщения = НСтр("ru = 'Выполнение операции: %1
								|Заявление № %2'");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстЗаголовкаСообщения,
		Контекст.УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
		ТекстСообщения, "ОбменСКонтрагентами", УровеньЖурналаРегистрации.Информация);
		
	ОтправитьРегистрационныйПакет1СЭДО(ИмяФайлаПакетаДля1СЭДО, ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки);
	
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайлаПакетаДля1СЭДО);
	
	Ответ = Новый Структура("ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки", ИнтернетПоддержкаПользователейПодключена, ЕстьОшибки);
	
	ПоместитьВоВременноеХранилище(Ответ, АдресРезультата);
	
КонецФункции

// Получает текущее состояние заявления на регистрацию в 1С: ЭДО
Процедура ПолучениеСостоянияРегистрацииСертификатаВ1СЭДО(ПараметрыОперации, АдресРезультата) Экспорт
	
	ОписаниеОшибки = Неопределено;
	ИмяФайлаОтвета = ПолучитьФайлОтветаОтСервераЭДО("GetInfo",
			ПараметрыОперации.УникальныйИдентификаторЗаявки1СЭДО, ОписаниеОшибки);
			
	Если ИмяФайлаОтвета <> Неопределено Тогда
		ДанныеФайла = ПрочитатьТекстИзФайла(ИмяФайлаОтвета, , Истина);
		МассивИдентификаторов = ПолучитьИдентификаторыАбонента(ДанныеФайла);
		Если ЗначениеЗаполнено(МассивИдентификаторов) Тогда
			ИдентификаторОрганизации = МассивИдентификаторов[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ИдентификаторОрганизации, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборИдентификаторовЭДО

Процедура ПолучитьЛучшуюПоРейтингуСвязкуИдентификаторовЭДО(Параметры, АдресРезультата) Экспорт
	
	Результат = РейтингУчетныхЗаписей(Параметры.ИдентификаторыОтправителя, Параметры.ИдентификаторыПолучателя);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Выполняет выборку идентификаторов для отправителя и получателя
//
Функция ДоступныеИдентификаторыЭДО(Отправитель, Получатель) Экспорт
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	ПараметрыКонтрагента = Новый Структура(ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	
	Если ЗначениеЗаполнено(Получатель) Тогда
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	КонецЕсли;
		
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ПараметрыОрганизации = Новый Структура(ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	Если ЗначениеЗаполнено(Отправитель) Тогда
		ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отправитель,
			ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	КонецЕсли;
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
	|ПОМЕСТИТЬ ИДАбонентовСгруппированные
	|ИЗ
	|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|ГДЕ
	|	АбонентыЭДО.ИНН = &ИНН
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя
	|ИЗ
	|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
	|ГДЕ
	|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента
	|ИЗ
	|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|ГДЕ
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент = &Получатель
	|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента <> ПриглашенияКОбменуЭлектроннымиДокументами.ИНН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК Значение,
	|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК Представление
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	&УсловиеПоИННОрганизации = &ИННОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК Значение,
	|	УчетныеЗаписиЭДО.НаименованиеУчетнойЗаписи КАК Представление
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
	|ГДЕ
	|	&УсловиеПоИННОрганизации = &ИННОрганизации
	|	И &УсловиеПоКППОрганизации = &КППОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИДАбонентовСгруппированные.ИдентификаторЭДО КАК Значение,
	|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание,
	|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание,
	|	ИДАбонентовСгруппированные.ИдентификаторЭДО + ВЫБОР
	|		КОГДА АбонентыЭДО.КраткоеОписание ЕСТЬ NULL ИЛИ АбонентыЭДО.КраткоеОписание = &ПустаяСтрока
	|			ТОГДА """"
	|		ИНАЧЕ "" ("" + АбонентыЭДО.КраткоеОписание + "")""
	|	КОНЕЦ КАК Представление
	|ИЗ
	|	ИДАбонентовСгруппированные КАК ИДАбонентовСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
	|		ПО ИДАбонентовСгруппированные.ИдентификаторЭДО = АбонентыЭДО.ИдентификаторЭДО
	|
	|УПОРЯДОЧИТЬ ПО
	|	АбонентыЭДО.ДатаПоследнейАктивности УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИННОрганизации",
		"УчетныеЗаписиЭДО.Организация." + ИмяРеквизитаИННОрганизации);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоКППОрганизации",
		"УчетныеЗаписиЭДО.Организация." + ИмяРеквизитаКППОрганизации);

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("ИНН"            , ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	Запрос.УстановитьПараметр("КПП"            , ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	Запрос.УстановитьПараметр("ИННОрганизации" , ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	Запрос.УстановитьПараметр("КППОрганизации" , ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	Запрос.УстановитьПараметр("Получатель"     , Получатель);
	Запрос.УстановитьПараметр("ПустаяСтрока"   , "");

	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИдентификаторыОтправителя  = РезультатЗапроса[1].Выгрузить();
	ИдентификаторыОтправителяПоКПП  = РезультатЗапроса[2].Выгрузить();
	
	Если ИдентификаторыОтправителяПоКПП.Количество() = 0 Тогда
		ИдентификаторыОтправителяПоКПП = ИдентификаторыОтправителя;
	КонецЕсли;
	
	ИдентификаторыПолучателя  = РезультатЗапроса[3].Выгрузить();
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыОтправителя"           , ИдентификаторыОтправителя);
	Результат.Вставить("ИдентификаторыОтправителяДляРейтинга", ИдентификаторыОтправителяПоКПП);
	Результат.Вставить("ИдентификаторыПолучателя"            , ИдентификаторыПолучателя);
	
	Возврат Результат;
	
КонецФункции

// Проверка возможно ли установить соединение идентификаторов и какое оно будет
//
// Параметры:
//  ИдентификаторОтправителя  - Строка - Идентификатор учетной записи отправителя
//                 <продолжение описания параметра>
//  ИдентификаторПолучателя   - Строка - Идентификатор учетной записи получателя
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Произвольный   - Возможные значения Булево, неопределено.
//
Функция ЕстьВозможностьРоумингаОператоровЭДО(Знач ИдентификаторОтправителя,Знач ИдентификаторПолучателя, ДополнительныеДанные = Неопределено) Экспорт
	
	ИдентификаторОператораОтправителя    = "";
	ИдентификаторОператораПолучателя     = "";
	СсылкаНаСтраницуТехническойПоддержки = "";
	
	ТаблицаОператоровЭДО = ОбменСКонтрагентамиСлужебныйПовтИсп.ТаблицаОператоровЭДО();
	
	Для Каждого ЭлементСписка Из  ТаблицаОператоровЭДО Цикл
		ДлинаИдентификатора = СтрДлина(ЭлементСписка.ИдентификаторОператора);
		Если ПустаяСтрока(ИдентификаторОператораОтправителя) Тогда
			Если НРег(Лев(ИдентификаторОтправителя, ДлинаИдентификатора)) = НРег(ЭлементСписка.ИдентификаторОператора) Тогда
				ИдентификаторОператораОтправителя = ЭлементСписка.ИдентификаторОператора;
				СсылкаНаСтраницуТехническойПоддержки = ЭлементСписка.СсылкаНаСтраницуТехническойПоддержки;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИдентификаторОператораПолучателя) Тогда
			Если НРег(Лев(ИдентификаторПолучателя, ДлинаИдентификатора)) = НРег(ЭлементСписка.ИдентификаторОператора) Тогда
				ИдентификаторОператораПолучателя = ЭлементСписка.ИдентификаторОператора;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИдентификаторОператораОтправителя)
				И Не ПустаяСтрока(ИдентификаторОператораПолучателя) Тогда
				Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ИдентификаторОператораОтправителя)
		Или ПустаяСтрока(ИдентификаторОператораПолучателя) Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
		
		ДанныеПриглашения = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ДанныеПриглашения(
				ИдентификаторОтправителя, ИдентификаторПолучателя);
				
		ДополнительныеДанные.Вставить("ДанныеПриглашения"                   , ДанныеПриглашения);
		ДополнительныеДанные.Вставить("ИдентификаторОператораОтправителя"   , ИдентификаторОператораОтправителя);
		ДополнительныеДанные.Вставить("ИдентификаторОператораПолучателя"    , ИдентификаторОператораПолучателя);
		ДополнительныеДанные.Вставить("СсылкаНаСтраницуТехническойПоддержки", СсылкаНаСтраницуТехническойПоддержки);
	КонецЕсли;
	
	Если ИдентификаторОператораОтправителя = ИдентификаторОператораПолучателя Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СовместимостьОператоровЭДО.СвязьДоступна КАК СвязьДоступна
		|ИЗ
		|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|ГДЕ
		|	СовместимостьОператоровЭДО.Оператор1 = &ИдентификаторОператораОтправителя
		|	И СовместимостьОператоровЭДО.Оператор2 = &ИдентификаторОператораПолучателя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СовместимостьОператоровЭДО.СвязьДоступна
		|ИЗ
		|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|ГДЕ
		|	СовместимостьОператоровЭДО.Оператор2 = &ИдентификаторОператораОтправителя
		|	И СовместимостьОператоровЭДО.Оператор1 = &ИдентификаторОператораПолучателя";
	
	Запрос.УстановитьПараметр("ИдентификаторОператораОтправителя", ИдентификаторОператораОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторОператораПолучателя", ИдентификаторОператораПолучателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СвязьДоступна;
	КонецЦикла;
	
КонецФункции

// Выполняет сопоставление идентификаторов организации и контрагента и выбирает оптимальные для связи
//
// Параметры:
//  ИдентификаторыОтправителя  - Массив - Список идентификаторов организации
//  ИдентификаторыПолучателя   - Массив - Список идентификаторов контрагента
//
// Возвращаемое значение:
//   Структура   - Найденные идентификаторы
//
Функция РейтингУчетныхЗаписей(Знач ИдентификаторыОтправителя, Знач ИдентификаторыПолучателя) Экспорт
	
	Результат = Новый Структура("ИдентификаторОтправителя, ИдентификаторПолучателя");
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОтправителя) И Не ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыОтправителя) И ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторыОтправителя) И Не ЗначениеЗаполнено(ИдентификаторыПолучателя) Тогда
			Результат.ИдентификаторОтправителя = ИдентификаторыОтправителя[0];
			Возврат Результат;
	КонецЕсли;
	
	ТаблицаИдентификаторыПолучателя = Новый ТаблицаЗначений;
	ТаблицаИдентификаторыПолучателя.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(70)));
	ТаблицаИдентификаторыПолучателя.Колонки.Добавить("ОператорЭДО"  , Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(70)));
	
	ТаблицаОператоровЭДО = РегистрыСведений.ОператорыЭДО.ТаблицаОператоровЭДО();
	
	Для Каждого Идентификатор Из ИдентификаторыПолучателя Цикл
		
		НоваяСтрока = ТаблицаИдентификаторыПолучателя.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
		ОператорЭДО = Неопределено;
		
		Для Каждого Оператор Из ТаблицаОператоровЭДО Цикл
			
			Если Лев(Врег(Идентификатор), СтрДлина(Оператор.ИдентификаторОператора)) = Врег(Оператор.ИдентификаторОператора) Тогда
				ОператорЭДО = Оператор.ИдентификаторОператора;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрока.ОператорЭДО = ОператорЭДО;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторыПолучателя.Идентификатор КАК Идентификатор,
		|	ТаблицаИдентификаторыПолучателя.ОператорЭДО КАК ОператорЭДО
		|ПОМЕСТИТЬ ТаблицаИдентификаторыПолучателя
		|ИЗ
		|	&ТаблицаИдентификаторыПолучателя КАК ТаблицаИдентификаторыПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИдентификаторыПолучателя.Идентификатор КАК ИдентификаторЭДО,
		|	ТаблицаИдентификаторыПолучателя.ОператорЭДО КАК ОператорЭДО,
		|	ЕСТЬNULL(АбонентыЭДО.СрокДействияСертификатов, &ТекущаяДата) >= &ТекущаяДата КАК СертификатДействителен,
		|	ЕСТЬNULL(АбонентыЭДО.ДатаПоследнейАктивности, &ТекущаяДата) >= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2) КАК АбонентАктивен
		|ПОМЕСТИТЬ ИдентификаторыАбонента
		|ИЗ
		|	ТаблицаИдентификаторыПолучателя КАК ТаблицаИдентификаторыПолучателя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|		ПО ТаблицаИдентификаторыПолучателя.Идентификатор = АбонентыЭДО.ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорЭДО
		|ПОМЕСТИТЬ ИдентификаторыОрганизации
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО В(&ИдентификаторыОтправителя)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО КАК ИдентификаторАбонента,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО КАК ИдентификаторОрганизации,
		|	ИСТИНА КАК СвязьДоступна,
		|	ИдентификаторыАбонента.СертификатДействителен КАК СертификатДействителен,
		|	ИдентификаторыАбонента.АбонентАктивен КАК АбонентАктивен
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО ИдентификаторыАбонента.ОператорЭДО = ИдентификаторыОрганизации.ОператорЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО,
		|	СовместимостьОператоровЭДО.СвязьДоступна,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ПО СовместимостьОператоровЭДО.Оператор2 = ИдентификаторыАбонента.ОператорЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО СовместимостьОператоровЭДО.Оператор1 = ИдентификаторыОрганизации.ОператорЭДО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИдентификаторыАбонента.ИдентификаторЭДО,
		|	ИдентификаторыОрганизации.ИдентификаторЭДО,
		|	СовместимостьОператоровЭДО.СвязьДоступна,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.СовместимостьОператоровЭДО КАК СовместимостьОператоровЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыАбонента КАК ИдентификаторыАбонента
		|		ПО СовместимостьОператоровЭДО.Оператор1 = ИдентификаторыАбонента.ОператорЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыОрганизации КАК ИдентификаторыОрганизации
		|		ПО СовместимостьОператоровЭДО.Оператор2 = ИдентификаторыОрганизации.ОператорЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВременнаяТаблица.ИдентификаторАбонента КАК ИдентификаторАбонента,
		|	ВременнаяТаблица.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ВременнаяТаблица.СвязьДоступна КАК СвязьДоступна
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблица.СертификатДействителен УБЫВ,
		|	ВременнаяТаблица.АбонентАктивен УБЫВ,
		|	ВременнаяТаблица.СвязьДоступна УБЫВ";
	
	Запрос.УстановитьПараметр("ИдентификаторыОтправителя"      , ИдентификаторыОтправителя);
	Запрос.УстановитьПараметр("ТаблицаИдентификаторыПолучателя", ТаблицаИдентификаторыПолучателя);
	Запрос.УстановитьПараметр("ТекущаяДата"                    , ТекущаяДатаСеанса());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат.ИдентификаторОтправителя = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
		Результат.ИдентификаторПолучателя  = ВыборкаДетальныеЗаписи.ИдентификаторАбонента;
	Иначе
		Результат.ИдентификаторОтправителя = ИдентификаторыОтправителя[0];
		Результат.ИдентификаторПолучателя  = ИдентификаторыПолучателя[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗапускФоновыхЗаданий

Функция НачатьОбновлениеПараметровУведомленийВСервисеЭДО(Знач ПараметрыПроцедуры) Экспорт
	
	Если ПараметрыПроцедуры.Свойство("ИдентификаторЗадания")
			И ПараметрыПроцедуры.ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ПараметрыПроцедуры.ИдентификаторЗадания);
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроцедуры.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление настроек уведомлений в сервисе 1С:ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ПараметрыПроцедуры.ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция НачатьПолучениеПараметровУведомленийВСервисеЭДО(Знач ПараметрыПроцедуры) Экспорт
	
	Если ПараметрыПроцедуры.Свойство("ИдентификаторЗадания")
			И ПараметрыПроцедуры.ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ПараметрыПроцедуры.ИдентификаторЗадания);
	КонецЕсли;
	
	ИмяПроцедуры = "ОбменСКонтрагентамиСлужебный.ПолучитьПараметрыУведомленийВСервисе1СЭДО";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроцедуры.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение настроек уведомлений в сервисе 1С:ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция НачатьОтправкуДанныхАбонентаВСервисНастроек(Знач ПараметрыПроцедуры) Экспорт
	
	Если ПараметрыПроцедуры.Свойство("ИдентификаторЗадания")
			И ПараметрыПроцедуры.ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ПараметрыПроцедуры.ИдентификаторЗадания);
	КонецЕсли;
	
	ИмяПроцедуры = "ОбменСКонтрагентамиСлужебный.ОтправитьДанныеАбонентаВСервисНастроек";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыПроцедуры.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка данных абонента в сервис настроек 1С:ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция НачатьОтправкуЗаявлениеНаРегистрациюВСервис1СЭДО(Знач ПараметрыПроцедуры) Экспорт
	
	Если ПараметрыПроцедуры.Свойство("ИдентификаторЗадания")
			И ПараметрыПроцедуры.ИдентификаторЗадания <> Неопределено Тогда
		ОтменитьВыполнениеЗадания(ПараметрыПроцедуры.ИдентификаторЗадания);
	КонецЕсли;
	
	ИмяПроцедуры = "ОбменСКонтрагентамиСлужебный.ОтправитьЗаявлениеНаРегистрациюВСервис1СЭДО";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Отправка данных учетной записи в сервис 1С:ЭДО'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПолучениеДистрибутивовКриптоПровайдеров

// Устанавливает соединение с сервером Интернета по протоколу http(s).
//
// Параметры:
//  URL                 - Строка - url сервера в формате [Протокол://]<Сервер>/.
//  ПараметрыСоединения - Структура - дополнительные параметры для "тонкой" настройки.
//    * Таймаут - Число - определяет время ожидания осуществляемого соединения и операций, в секундах.
//
Функция СоединениеССерверомИнтернета(URL, ПараметрыСоединения = Неопределено)

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	Схема        = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси       = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	
	Таймаут = 60;
	Если ТипЗнч(ПараметрыСоединения) = Тип("Структура") Тогда
		Если ПараметрыСоединения.Свойство("Таймаут") Тогда
			Таймаут = ПараметрыСоединения.Таймаут;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установление соединения с сервером интернета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

#КонецОбласти

#Область РаботаССервисомНастроек

// Запускает обновление данных по операторам ЭДО и Форматам ЭД
Процедура ОбновитьКешиОператоровЭДОИФорматов() Экспорт
	
	СинхронизацияОператоровЭДО              = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияОператоровЭДО;
	СинхронизацияФорматовЭД                 = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияФорматовЭД;
	СинхронизацияСовместимостиОператоровЭДО = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
	ОбновлениеАбонентовЭДО                  = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.ОбновлениеАбонентовЭДО;
	СвязьТиповИФорматовЭД                   = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СвязьТиповИФорматовЭД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСинхронизацииСервисаНастроекЭДО.Ссылка КАК ТипСинхронизации,
		|	СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
		|	СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки КАК ДатаПоследнейПроверки
		|ИЗ
		|	Перечисление.ТипыСинхронизацииСервисаНастроекЭДО КАК ТипыСинхронизацииСервисаНастроекЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО КАК СостоянияСинхронизацииСервисНастроекЭДО
		|		ПО ТипыСинхронизацииСервисаНастроекЭДО.Ссылка = СостоянияСинхронизацииСервисНастроекЭДО.ТипСинхронизации
		|ГДЕ
		|	(СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки ЕСТЬ NULL
		|			ИЛИ СостоянияСинхронизацииСервисНастроекЭДО.ДатаПоследнейПроверки <> &ТекущаяДата)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТипСинхронизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ВерсияКонфигурации <> &ВерсияКонфигурации";
	
	Запрос.УстановитьПараметр("ВерсияКонфигурации", Метаданные.Версия);
	Запрос.УстановитьПараметр("ТекущаяДата"       , НачалоДня(ТекущаяДатаСеанса()));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			
			Если ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияОператоровЭДО Тогда
				СинхронизироватьОператоровЭДОИзСервисаНастроек(ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияСовместимостиОператоровЭДО Тогда
				СинхронизироватьСовместимостьОператоровЭДОИзСервисаНастроек(ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СинхронизацияФорматовЭД Тогда
				СинхронизироватьФорматыЭДИзСервисаНастроек(ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = СвязьТиповИФорматовЭД Тогда
				СинхронизироватьСвязьВидовИФорматовЭДИзСервисаНастроек(ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения);
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипСинхронизации = ОбновлениеАбонентовЭДО Тогда
				СинхронизироватьАбонентовЭДОИзСервисаНастроек(ВыборкаДетальныеЗаписи.ДатаПоследнегоИзменения);
			КонецЕсли;
			
		Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление кеша настроек ЭДО'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		КонецПопытки;
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Попытка
			Адрес = ПоместитьВоВременноеХранилище(Неопределено);
			ПараметрыОперации = Новый Структура;
			ПараметрыОперации.Вставить("ИдентификаторЭДО", ВыборкаДетальныеЗаписи.ИдентификаторЭДО);
			ОтправитьДанныеАбонентаВСервисНастроек(ПараметрыОперации, Адрес)
		Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ВидОперации = НСтр("ru = 'Обновление учетной записи в сервисе настроек'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(ОписаниеОшибки));
		
		КонецПопытки;
		
	КонецЦикла;
КонецПроцедуры

// Отправка данных в сервис 1C:Сервис настроек
//
// Параметры:
//   ПараметрыОперации - Структура - См. ОписаниеПараметровУведомленийВСервисеЭДО
//     * ИдентификаторЭДО  - Строка - Идентификатор учетной записи организации
//   АдресРезультата - Строка - Адрес результата в хранилище значений.
//
Процедура ОтправитьДанныеАбонентаВСервисНастроек(ПараметрыОперации, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.НазначениеУчетнойЗаписи КАК НазначениеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.ПодробноеОписаниеУчетнойЗаписи КАК ПодробноеОписаниеУчетнойЗаписи,
		|	УчетныеЗаписиЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК imprint,
		|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК expireDate
		|ИЗ
		|	РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
		|		ПО СертификатыУчетныхЗаписейЭДО.Сертификат = СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
		|ГДЕ
		|	СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО = &ИдентификаторЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаФорматов.ВидЭД КАК ВидЭД,
		|	РасшифровкаФорматов.Формат КАК Формат,
		|	РасшифровкаФорматов.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ РасшифровкаФорматов
		|ИЗ
		|	&Расшифровка КАК РасшифровкаФорматов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК formatUeid,
		|	РасшифровкаФорматов.ВариантЗаполнения КАК fillOption
		|ИЗ
		|	РасшифровкаФорматов КАК РасшифровкаФорматов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО РасшифровкаФорматов.Формат = ФорматыЭлектронныхДокументов.Формат";
	
	Расшифровка = РасшифровкаВариантовЗаполненияФорматовЭДО();
	Запрос.УстановитьПараметр("Расшифровка" , Расшифровка);
	Запрос.УстановитьПараметр("ИдентификаторЭДО", ПараметрыОперации.ИдентификаторЭДО);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ДанныеПоУчетнойЗаписи = РезультатЗапроса[0].Выгрузить()[0];
	
	Если ПараметрыОперации.Свойство("НазначениеУчетнойЗаписи") Тогда
		ДанныеПоУчетнойЗаписи.НазначениеУчетнойЗаписи = ПараметрыОперации.НазначениеУчетнойЗаписи;
	КонецЕсли;
	
	Если ПараметрыОперации.Свойство("ПодробноеОписаниеУчетнойЗаписи") Тогда
		ДанныеПоУчетнойЗаписи.ПодробноеОписаниеУчетнойЗаписи = ПараметрыОперации.ПодробноеОписаниеУчетнойЗаписи;
	КонецЕсли;
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеПоУчетнойЗаписи.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
	
	ОписаниеДанных = НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек();
	ОписаниеДанных.ИНН              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
	ОписаниеДанных.КПП              = СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	ОписаниеДанных.ИдентификаторЭДО = ПараметрыОперации.ИдентификаторЭДО;
	ОписаниеДанных.Версия           = Метаданные.Версия;
	
	СертификатыАбонента = Новый Массив;
	Для Каждого СтокаТЧ Из РезультатЗапроса[1].Выгрузить() Цикл
		
		ДатаJSON = ЗаписатьДатуJSON(СтокаТЧ.expireDate,ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.ЛокальнаяДатаСоСмещением);
		
		Сертификат = Новый Структура;
		Сертификат.Вставить("imprint"   , СтокаТЧ.imprint);
		Сертификат.Вставить("expireDate", СтрЗаменить(ДатаJSON,"+",".0+"));
		СертификатыАбонента.Добавить(Сертификат);
	КонецЦикла;
	
	ТаблицаФорматов = РезультатЗапроса[3].Выгрузить();
	ТаблицаФорматов.Сортировать("formatUeid");
	
	ОписаниеДанных.ВариантыЗаполненияФорматов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаФорматов);
	ОписаниеДанных.СертификатыАбонента        = СертификатыАбонента;
	
	ЗаполнитьЗначенияСвойств(ОписаниеДанных, ДанныеПоУчетнойЗаписи, "НазначениеУчетнойЗаписи, ПодробноеОписаниеУчетнойЗаписи");
	
	ПараметрыКоманды = ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ОписаниеДанных, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Результат = Истина Тогда
		МенеджерЗаписи = РегистрыСведений.УчетныеЗаписиЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторЭДО = ПараметрыОперации.ИдентификаторЭДО;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран()
			И МенеджерЗаписи.ВерсияКонфигурации <> ОписаниеДанных.Версия Тогда
			
			МенеджерЗаписи.ВерсияКонфигурации = ОписаниеДанных.Версия;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправка данных об активности учетной записи в сервис 1C:Сервис настроек ЭДО
//
// Параметры:
//    ИдентификаторЭДО  - Строка - Идентификатор учетной записи организации
//
Процедура ОбновитьИнформациюОбАктивностиУчетнойЗаписи(ИдентификаторЭДО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК НеОбновить
		|ИЗ
		|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	(ВЫРАЗИТЬ(СостоянияОбменовЭДЧерезОператоровЭДО.ИдентификаторОрганизации КАК СТРОКА(150))) = &ИдентификаторОрганизации
		|	И СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнейАктивности <> &ТекущаяДатаСеанса";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторЭДО);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", НачалоДня(ТекущаяДатаСеанса()));
	
	УстановитьПривилегированныйРежим(Истина);
	ОбновитьАктивность = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ОбновитьАктивность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	СтруктураJSON = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Возврат;
	КонецЕсли;
	
	AuthenticationInfo.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);

	СтруктураJSON.Вставить("id", ПреобразоватьВИдентификаторЗапросаСервисаНастроек(ИдентификаторЭДО));
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers/activity";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных об активности абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	ПоддержкаПодключена = Истина;
	БилетПоддержки = БилетНаСайтПоддержки(ПоддержкаПодключена);
	
	Если ЗначениеЗаполнено(БилетПоддержки) Тогда
		ПараметрыКоманды.Заголовки.Вставить("ticket", БилетПоддержки);
	Иначе
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		МенеджерЗаписи = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ИдентификаторОрганизации = ИдентификаторЭДО;
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ДатаПоследнейАктивности = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Подготовка и выполнение запроса данных в сервис 1C:Сервис настроек
//
// Параметры:
//   ПараметрыОперации - Структура                      - См. ОписаниеПараметровУведомленийВСервисеЭДО
//     * Контрагент    - ОпределяемыйТип.КонтрагентыБЭД - Ссылка на элемент ОпределяемыйТип.КонтрагентыБЭД
//   АдресРезультата   - Строка                         - Адрес результата в хранилище значений.
//
Процедура ПолучитьДанныеАбонентаИзСервисаНастроек(ПараметрыОперации, АдресРезультата) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Соответствие;
	МассивИНН = Новый Массив;
	
	Если ПараметрыОперации.Свойство("Контрагент") Тогда
		
		Если  ТипЗнч(ПараметрыОперации.Контрагент) <> Тип("Массив") Тогда
			Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОперации.Контрагент);
		Иначе
			Контрагенты = ПараметрыОперации.Контрагент;
		КонецЕсли;
		
		ИмяРеквизитаИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		
		ПараметрыКонтрагентов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Контрагенты, ИмяРеквизитаИНН);
		
		Для Каждого Контрагент Из Контрагенты Цикл
			ИНН = ПараметрыКонтрагентов.Получить(Контрагент);
			
			Если ПустаяСтрока(ИНН) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru = 'У контрагента ''%1'' не заполнен ИНН'"), Контрагент);
				ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Получить данные в сервисе настроек ЭДО'"), ТекстОшибки, ТекстОшибки);
				Продолжить;
			КонецЕсли;
			
			МассивИНН.Добавить(ИНН);
			
		КонецЦикла;
		
	Иначе
		ПараметрыОперации.Свойство("МассивИНН", МассивИНН);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных     = НовоеОписаниеПолученияДанныхАбонентаВСервисеНастроек();
	ОписаниеДанных.СписокИНН = МассивИНН;
	СписокИдентификаторов = ДанныеАбонентовИзСервисаНастроек(ОписаниеДанных, Отказ);
	
	ПоместитьВоВременноеХранилище(СписокИдентификаторов, АдресРезультата);
КонецПроцедуры

// Получает данные об абонентах из сервиса 1C:Сервис настроек и обновляет данные в кеше
//
// Параметры:
//   ПараметрыОперации - Структура  - Структура полей запроса к сервису настроек
//     * ИНН                - Строка - ИНН для поиска
//     * ИдентификаторыЭДО  - Массив - Массив идентификаторов для фильтрации выборки
//     * ДатаОбновления     - Дата   - Выдавать в выборке только измененных после даты
//     * Страница           - Число  - Номер станицы результата
//     * РазмерСтраницы     - Число  - Размер страницы результата
//   Отказ             - Булево  - Во время работы происходили ошибки
//
Функция ДанныеАбонентовИзСервисаНастроек(Знач ОписаниеДанных, Отказ)
	
	ПараметрыКоманды = ПараметрыКомандыПолученияДанныхАбонентовВСервисНастроек(ОписаниеДанных, Отказ);
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Абоненты = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Результат = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Абоненты) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		НачатьТранзакцию();
		Попытка
			
			Для Каждого СтрокаАбонент Из Абоненты Цикл
				
				НаборЗаписей = РегистрыСведений.АбонентыЭДО.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(СтрокаАбонент.ИдентификаторЭДО);
				СтрокаНабора = НаборЗаписей.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаАбонент);
				
				НаборЗаписей.Записать();
				
				НаборЗаписей = РегистрыСведений.ПоддерживаемыеФорматыЭлектронныхДокументов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторЭДО.Установить(СтрокаАбонент.ИдентификаторЭДО);
				
				ТаблицаФорматов = ПоддерживаемыеФорматыАбонентаЭДО(СтрокаАбонент.ИдентификаторЭДО, СтрокаАбонент.ПоддерживаемыеФорматыЭД);
				
				НаборЗаписей.Загрузить(ТаблицаФорматов);
				НаборЗаписей.Записать();
				
				Результат.Добавить(СтрокаАбонент.ИдентификаторЭДО,
					?(ПустаяСтрока(СтрокаАбонент.КраткоеОписание), СтрокаАбонент.ИдентификаторЭДО,
						СтрШаблон(НСтр("ru = '%1 (%2)'"), СтрокаАбонент.ИдентификаторЭДО, СтрокаАбонент.КраткоеОписание)));
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			Ошибка = ИнформацияОбОшибке();
			
			ВидОперации = НСтр("ru = 'Обновление абонентов из сервиса настроек 1С:ЭДО'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки(Ошибка));
			Результат = Неопределено;
			Отказ = Истина;
			
		КонецПопытки;
		
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выборка и обновление данные абонентов ЭДО
//
Процедура СинхронизироватьАбонентовЭДОИзСервисаНастроек(Знач lastChangeDate)
	
	Отказ = Ложь;
	ДатаОбновления = ТекущаяДатаСеанса();
	ОписаниеДанных = НовоеОписаниеПолученияДанныхАбонентаВСервисеНастроек();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО";
	
	Идентификаторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторЭДО");
	
	ПравильныеИдентификаторы = Новый Массив;
	Для Каждого СтрокаТЧ Из Идентификаторы Цикл 
		ПравильныеИдентификаторы.Добавить(ПреобразоватьВИдентификаторЗапросаСервисаНастроек(СтрокаТЧ));
	КонецЦикла;
	
	Если ПравильныеИдентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных.ИдентификаторыЭДО = ПравильныеИдентификаторы;
	ОписаниеДанных.ДатаОбновления = lastChangeDate;
	
	ДанныеАбонентовИзСервисаНастроек(ОписаниеДанных, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	lastChangeDate = ДатаОбновления;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСинхронизации = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.ОбновлениеАбонентовЭДО;
	МенеджерЗаписи.ДатаПоследнегоИзменения = lastChangeDate;
	МенеджерЗаписи.ДатаПоследнейПроверки    = ДатаОбновления;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение и обновление данных о операторах ЭДО 
//
Процедура СинхронизироватьОператоровЭДОИзСервисаНастроек(Знач lastChangeDate)
	
	Отказ = Ложь;
	ПараметрыЗапроса = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	
	Страница           = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ОператорыЭДО       = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		
		ПараметрыКоманды = ПараметрыПолученияДанныхОбОператорахЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ОператорыЭДО = Неопределено Тогда
			ОператорыЭДО = СписокФорматовЭД;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокФорматовЭД.СписокОператоров,
				ОператорыЭДО.СписокОператоров);
		КонецЕсли;
		
		РазмерСтраницы     = СписокФорматовЭД.РазмерСтраницы;
		КоличествоПолучено = СписокФорматовЭД.СписокОператоров.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Если ОператорыЭДО.ДатаПоследнегоИзменения <> lastChangeDate Тогда
		
		lastChangeDate = ОператорыЭДО.ДатаПоследнегоИзменения;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокОператоровЭДО.ИдентификаторОператора КАК ИдентификаторОператора,
		|	СписокОператоровЭДО.Представление КАК Представление,
		|	СписокОператоровЭДО.ИНН КАК ИНН,
		|	СписокОператоровЭДО.КПП КАК КПП,
		|	СписокОператоровЭДО.ОГРН КАК ОГРН,
		|	СписокОператоровЭДО.Сертификат КАК Сертификат,
		|	СписокОператоровЭДО.СсылкаНаСтраницуТехническойПоддержки КАК СсылкаНаСтраницуТехническойПоддержки,
		|	СписокОператоровЭДО.ОтправлятьДополнительныеСведения КАК ОтправлятьДополнительныеСведения,
		|	СписокОператоровЭДО.ДоступноПодключениеЧерез1С КАК ДоступноПодключениеЧерез1С,
		|	СписокОператоровЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ПОМЕСТИТЬ СписокОператоровЭДО
		|ИЗ
		|	&СписокОператоровЭДО КАК СписокОператоровЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокОператоровЭДО.ИдентификаторОператора ЕСТЬ NULL
		|			ТОГДА ОператорыЭДО.ИдентификаторОператора
		|		ИНАЧЕ СписокОператоровЭДО.ИдентификаторОператора
		|	КОНЕЦ КАК ИдентификаторОператора,
		|	СписокОператоровЭДО.Представление КАК Представление,
		|	СписокОператоровЭДО.ИНН КАК ИНН,
		|	СписокОператоровЭДО.КПП КАК КПП,
		|	СписокОператоровЭДО.ОГРН КАК ОГРН,
		|	СписокОператоровЭДО.Сертификат КАК ОтпечатокСертификата,
		|	СписокОператоровЭДО.СсылкаНаСтраницуТехническойПоддержки КАК СсылкаНаСтраницуТехническойПоддержки,
		|	СписокОператоровЭДО.ОтправлятьДополнительныеСведения КАК ОтправлятьДополнительныеСведения,
		|	СписокОператоровЭДО.ДоступноПодключениеЧерез1С КАК ДоступноПодключениеЧерез1С,
		|	СписокОператоровЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	(ВЫРАЗИТЬ(СписокОператоровЭДО.ИдентификаторОператора КАК СТРОКА(10))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.ИдентификаторОператора, """") КАК СТРОКА(50)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ИНН, """") КАК СТРОКА(50))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.ИНН, """") КАК СТРОКА(50)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.Представление, """") КАК СТРОКА(150))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.Представление, """") КАК СТРОКА(150)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.КПП, """") КАК СТРОКА(20))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.КПП, """") КАК СТРОКА(20)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ОГРН, """") КАК СТРОКА(20))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.ОГРН, """") КАК СТРОКА(20)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ОтпечатокСертификата, """") КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.Сертификат, """") КАК СТРОКА(1024)))
		|		ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.СсылкаНаСтраницуТехническойПоддержки, """") КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.СсылкаНаСтраницуТехническойПоддержки, """") КАК СТРОКА(1024)))
		|		ИЛИ ЕСТЬNULL(ОператорыЭДО.СпособОбменаЭД, ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка)) <> ЕСТЬNULL(СписокОператоровЭДО.СпособОбменаЭД, ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка))
		|		ИЛИ ОператорыЭДО.ДоступноПодключениеЧерез1С <> СписокОператоровЭДО.ДоступноПодключениеЧерез1С
		|		ИЛИ ОператорыЭДО.ОтправлятьДополнительныеСведения <> СписокОператоровЭДО.ОтправлятьДополнительныеСведения КАК Изменено,
		|	ЛОЖЬ КАК УдалитьСтроку
		|ИЗ
		|	СписокОператоровЭДО КАК СписокОператоровЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|		ПО ((ВЫРАЗИТЬ(СписокОператоровЭДО.ИдентификаторОператора КАК СТРОКА(10))) = ОператорыЭДО.ИдентификаторОператора)
		|ГДЕ
		|	((ВЫРАЗИТЬ(СписокОператоровЭДО.ИдентификаторОператора КАК СТРОКА(10))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ИдентификаторОператора, """") КАК СТРОКА(50)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ИНН, """") КАК СТРОКА(50))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.ИНН, """") КАК СТРОКА(50)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.Представление, """") КАК СТРОКА(150))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.Представление, """") КАК СТРОКА(150)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.КПП, """") КАК СТРОКА(20))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.КПП, """") КАК СТРОКА(20)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ОГРН, """") КАК СТРОКА(20))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.ОГРН, """") КАК СТРОКА(20)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.ОтпечатокСертификата, """") КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.Сертификат, """") КАК СТРОКА(1024)))
		|			ИЛИ (ВЫРАЗИТЬ(ЕСТЬNULL(ОператорыЭДО.СсылкаНаСтраницуТехническойПоддержки, """") КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(СписокОператоровЭДО.СсылкаНаСтраницуТехническойПоддержки, """") КАК СТРОКА(1024)))
		|			ИЛИ ЕСТЬNULL(ОператорыЭДО.СпособОбменаЭД, ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка)) <> ЕСТЬNULL(СписокОператоровЭДО.СпособОбменаЭД, ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка))
		|			ИЛИ ОператорыЭДО.ДоступноПодключениеЧерез1С <> СписокОператоровЭДО.ДоступноПодключениеЧерез1С
		|			ИЛИ ОператорыЭДО.ОтправлятьДополнительныеСведения <> СписокОператоровЭДО.ОтправлятьДополнительныеСведения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОператорыЭДО.ИдентификаторОператора,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокОператоровЭДО КАК СписокОператоровЭДО
		|		ПО ((ВЫРАЗИТЬ(СписокОператоровЭДО.ИдентификаторОператора КАК СТРОКА(10))) = ОператорыЭДО.ИдентификаторОператора)
		|ГДЕ
		|	СписокОператоровЭДО.ИдентификаторОператора ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("СписокОператоровЭДО", ОператорыЭДО.СписокОператоров);
		
		НачатьТранзакцию();
		Попытка
			
			УстановитьПривилегированныйРежим(Истина);
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СостоянияСинхронизацииСервисНастроекЭДО");
			ЭлементБлокировкиДанных.УстановитьЗначение("ТипСинхронизации", Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияОператоровЭДО);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ОператорыЭДО.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторОператора.Установить(ВыборкаДетальныеЗаписи.ИдентификаторОператора);
				
				Если ВыборкаДетальныеЗаписи.УдалитьСтроку Тогда
					НаборЗаписей.Записать();
				Иначе
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					НаборЗаписей.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ТипСинхронизации        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияОператоровЭДО;
			МенеджерЗаписи.ДатаПоследнегоИзменения = lastChangeDate;
			МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
			
			МенеджерЗаписи.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Информация = ИнформацияОбОшибке();
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Синхронизация операторов ЭДО'"),
			ПодробноеПредставлениеОшибки(Информация), НСтр("ru = 'Не удалось обновить данные операторов ЭДО'"));
			
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

// Получение и обновление данных о совместимости операторов ЭДО
//
Процедура СинхронизироватьСовместимостьОператоровЭДОИзСервисаНастроек(Знач lastChangeDate)
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	ПараметрыЗапроса = Новый Структура;
	
		
	Страница           = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	СовместимостьОператоровЭДО = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		
		ПараметрыКоманды = ПараметрыПолученияДанныхОСовместимостиОператоровЭДО(ПараметрыЗапроса);
		ОтветСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СовместимостьОператоровЭДО = Неопределено Тогда
			СовместимостьОператоровЭДО = ОтветСервиса;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ОтветСервиса.СовместимостьОператоровЭДО,
				СовместимостьОператоровЭДО.СовместимостьОператоровЭДО);
		КонецЕсли;
		
		РазмерСтраницы = ОтветСервиса.РазмерСтраницы;
		КоличествоПолучено = ОтветСервиса.СовместимостьОператоровЭДО.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Если ОтветСервиса.ДатаПоследнегоИзменения <> lastChangeDate Тогда
		
		lastChangeDate = ОтветСервиса.ДатаПоследнегоИзменения;
		
		НаборЗаписей = РегистрыСведений.СовместимостьОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ОтветСервиса.СовместимостьОператоровЭДО);
		
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСинхронизации        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияСовместимостиОператоровЭДО;
	МенеджерЗаписи.ДатаПоследнегоИзменения = lastChangeDate;
	МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение и обновление данных форматов ЭДО 
//
Процедура СинхронизироватьФорматыЭДИзСервисаНастроек(Знач lastChangeDate)
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	ПараметрыЗапроса = Новый Структура;
	
		
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ФорматыЭД = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		ПараметрыКоманды = ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ФорматыЭД = Неопределено Тогда
			ФорматыЭД = СписокФорматовЭД;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокФорматовЭД.ФорматыЭлектронныхДокументов,
				ФорматыЭД.ФорматыЭлектронныхДокументов);
		КонецЕсли;
		
		РазмерСтраницы = СписокФорматовЭД.РазмерСтраницы;
		КоличествоПолучено = СписокФорматовЭД.ФорматыЭлектронныхДокументов.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Если ФорматыЭД.ДатаПоследнегоИзменения <> lastChangeDate Тогда
		
		ФорматыЭлектронныхДокументов = ФорматыЭД.ФорматыЭлектронныхДокументов;
		ФорматыЭлектронныхДокументов.Колонки.Добавить("ПоддерживаетсяКонфигурацией", Новый ОписаниеТипов("Булево"));
		ФорматыЭлектронныхДокументов.Индексы.Добавить("Формат");
		
		ТаблицаИзМакета = ОбменСКонтрагентамиПовтИсп.СведенияОФорматахЭлектронныхДокументовИзМакета();
		ТаблицаИзМакета.Свернуть("ИдентификаторФормата");
		ПоддерживаемыеФорматы = ТаблицаИзМакета.ВыгрузитьКолонку("ИдентификаторФормата");
		
		Для Каждого Формат Из ПоддерживаемыеФорматы Цикл
			
			Отбор = Новый Структура("Формат", Формат);
			НайденныеСтроки = ФорматыЭлектронныхДокументов.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				
				СтрокаТЧ.ПоддерживаетсяКонфигурацией = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		lastChangeDate = ФорматыЭД.ДатаПоследнегоИзменения;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК ИдентификаторСервиса,
		|	ФорматыЭлектронныхДокументов.Представление КАК Представление,
		|	ФорматыЭлектронныхДокументов.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	ФорматыЭлектронныхДокументов.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	ФорматыЭлектронныхДокументов.Регламентированный КАК Регламентированный,
		|	ФорматыЭлектронныхДокументов.ПриказОВведенииФормата КАК ПриказОВведенииФормата,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК СсылкаНаПриказОВведенииФормата,
		|	ФорматыЭлектронныхДокументов.ПространстваИмен КАК ПространстваИмен,
		|	ФорматыЭлектронныхДокументов.ЭтоУПД КАК ЭтоУПД,
		|	ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией КАК ПоддерживаетсяКонфигурацией
		|ПОМЕСТИТЬ СписокФорматовЭлектронныхДокументов
		|ИЗ
		|	&ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат,
		|	NULL КАК ИдентификаторСервиса,
		|	NULL КАК Представление,
		|	NULL КАК ДатаНачалаДействия,
		|	NULL КАК ДатаОкончанияДействия,
		|	NULL КАК Регламентированный,
		|	NULL КАК ЭтоУПД,
		|	NULL КАК ПриказОВведенииФормата,
		|	NULL КАК СсылкаНаПриказОВведенииФормата,
		|	NULL КАК ПространстваИмен,
		|	NULL КАК ПоддерживаетсяКонфигурацией,
		|	ИСТИНА КАК УдалитьСтроку
		|ИЗ
		|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ СписокФорматовЭлектронныхДокументов КАК СписокФорматовЭлектронныхДокументов
		|		ПО (ФорматыЭлектронныхДокументов.ИдентификаторСервиса = (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))))
		|ГДЕ
		|	СписокФорматовЭлектронныхДокументов.Формат ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СписокФорматовЭлектронныхДокументов.Формат,
		|	СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса,
		|	СписокФорматовЭлектронныхДокументов.Представление,
		|	СписокФорматовЭлектронныхДокументов.ДатаНачалаДействия,
		|	СписокФорматовЭлектронныхДокументов.ДатаОкончанияДействия,
		|	СписокФорматовЭлектронныхДокументов.Регламентированный,
		|	СписокФорматовЭлектронныхДокументов.ЭтоУПД,
		|	СписокФорматовЭлектронныхДокументов.ПриказОВведенииФормата,
		|	СписокФорматовЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата,
		|	СписокФорматовЭлектронныхДокументов.ПространстваИмен,
		|	СписокФорматовЭлектронныхДокументов.ПоддерживаетсяКонфигурацией,
		|	ЛОЖЬ
		|ИЗ
		|	СписокФорматовЭлектронныхДокументов КАК СписокФорматовЭлектронныхДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО ((ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ФорматыЭлектронныхДокументов.ИдентификаторСервиса КАК СТРОКА(50))))
		|			И ((ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.Формат КАК СТРОКА(50))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.Формат, """") КАК СТРОКА(50)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.Представление КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.Представление, """") КАК СТРОКА(1024)))
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ДатаНачалаДействия <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ДатаНачалаДействия, """")
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ДатаОкончанияДействия <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ДатаОкончанияДействия, """")
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ПоддерживаетсяКонфигурацией <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией, ЛОЖЬ)
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ПоддерживаетсяКонфигурацией <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией, ЛОЖЬ)
		|				ИЛИ СписокФорматовЭлектронныхДокументов.ЭтоУПД <> ЕСТЬNULL(ФорматыЭлектронныхДокументов.ЭтоУПД, ЛОЖЬ)
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ПриказОВведенииФормата КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПриказОВведенииФормата, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата, """") КАК СТРОКА(1024)))
		|				ИЛИ (ВЫРАЗИТЬ(СписокФорматовЭлектронныхДокументов.ПространстваИмен КАК СТРОКА(1024))) <> (ВЫРАЗИТЬ(ЕСТЬNULL(ФорматыЭлектронныхДокументов.ПространстваИмен, """") КАК СТРОКА(1024))))";
		
		Запрос.УстановитьПараметр("ФорматыЭлектронныхДокументов", ФорматыЭД.ФорматыЭлектронныхДокументов);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		НачатьТранзакцию();
		
		Попытка
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Набор = РегистрыСведений.ФорматыЭлектронныхДокументов.СоздатьНаборЗаписей();
				Набор.Отбор.Формат.Установить(ВыборкаДетальныеЗаписи.Формат);
				
				Если ВыборкаДетальныеЗаписи.УдалитьСтроку Тогда
					Набор.Записать();
				Иначе
					НоваяСтрока = Набор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					Набор.Записать();
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Информация = ИнформацияОбОшибке();
			
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление форматов ЭДО из сервиса настроек'"),
				ПодробноеПредставлениеОшибки(Информация));
			
		КонецПопытки;
			
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСинхронизации        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СинхронизацияФорматовЭД;
	МенеджерЗаписи.ДатаПоследнегоИзменения = lastChangeDate;
	МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Получение и обновление данных видов ЭДО 
//
Функция ВидыЭДИзСервисаНастроек()
	
	Отказ = Ложь;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	ПараметрыЗапроса = Новый Структура;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	ВидыЭД = Новый Соответствие;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		ПараметрыКоманды = ПараметрыПолученияВидовЭДСервиса(ПараметрыЗапроса);
		ПорцияВидовЭД    = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ВидыЭД, ПорцияВидовЭД.Данные, Ложь);
		
		РазмерСтраницы     = ПорцияВидовЭД.РазмерСтраницы;
		КоличествоПолучено = ПорцияВидовЭД.Данные.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Возврат ВидыЭД;
	
КонецФункции

// Получение и обновление данных о связи видов и форматов ЭДО 
//
Процедура СинхронизироватьСвязьВидовИФорматовЭДИзСервисаНастроек(Знач lastChangeDate)
	
	Отказ = Ложь;
	ПараметрыЗапроса = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Ложь;
	
	Страница = 0;
	КоличествоПолучено = 0;
	РазмерСтраницы     = 0;
	СвязьВидовИФорматов = Неопределено;
	
	Пока КоличествоПолучено = РазмерСтраницы Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("Тикет", Тикет);
		ПараметрыЗапроса.Вставить("Страница", Страница);
		
		ПараметрыКоманды = ПараметрыПолученияСвязиТиповИФорматовЭДО(ПараметрыЗапроса);
		СписокФорматовЭД = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СвязьВидовИФорматов = Неопределено Тогда
			СвязьВидовИФорматов = СписокФорматовЭД;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокФорматовЭД.СвязьВидовИФорматовЭД,
				СвязьВидовИФорматов.СвязьВидовИФорматовЭД);
		КонецЕсли;
		
		РазмерСтраницы = СписокФорматовЭД.РазмерСтраницы;
		КоличествоПолучено = СписокФорматовЭД.СвязьВидовИФорматовЭД.Количество();
		
		Страница = Страница + 1;
	КонецЦикла;
	
	Если СвязьВидовИФорматов.ДатаПоследнегоИзменения <> lastChangeDate Тогда
		
		Набор = РегистрыСведений.СвязьВидовИФорматовЭД.СоздатьНаборЗаписей();
		Набор.Загрузить(СвязьВидовИФорматов.СвязьВидовИФорматовЭД);
		Набор.Записать();
		
		lastChangeDate = СвязьВидовИФорматов.ДатаПоследнегоИзменения;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииСервисНастроекЭДО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипСинхронизации        = Перечисления.ТипыСинхронизацииСервисаНастроекЭДО.СвязьТиповИФорматовЭД;
	МенеджерЗаписи.ДатаПоследнегоИзменения = lastChangeDate;
	МенеджерЗаписи.ДатаПоследнейПроверки   = ТекущаяДатаСеанса();
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьФорматПоУмолчаниюВНастройках();
КонецПроцедуры

// Выполняет обновление формата в настройка при изменении в сервисе настроек 1С или
//												при поддержке нового формата абонентом
//
Процедура ОбновитьФорматПоУмолчаниюВНастройках()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	МАКСИМУМ(СвязьВидовИФорматовЭД.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ТекущийФорматЭД
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|
		|СГРУППИРОВАТЬ ПО
		|	СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	СвязьВидовИФорматовЭД.ФорматЭлектронногоДокумента КАК ФорматЭлектронногоДокумента,
		|	ТекущийФорматЭД.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТекущиеФорматы
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущийФорматЭД КАК ТекущийФорматЭД
		|		ПО СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента = ТекущийФорматЭД.ВидЭлектронногоДокумента
		|			И СвязьВидовИФорматовЭД.Приоритет = ТекущийФорматЭД.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель КАК Отправитель,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель КАК Получатель,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор КАК Договор,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ТекущиеФорматы.ФорматЭлектронногоДокумента КАК ВерсияФормата,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ТекущиеФорматы.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ НастройкиДляОбновления
		|ИЗ
		|	ТекущиеФорматы КАК ТекущиеФорматы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО ТекущиеФорматы.ВидЭлектронногоДокумента = НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента
		|			И ТекущиеФорматы.ФорматЭлектронногоДокумента <> НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата
		|ГДЕ
		|	НЕ НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФорматаУстановленаВручную
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасшифровкаФорматов.ВидЭД КАК ВидЭД,
		|	РасшифровкаФорматов.Формат КАК Формат,
		|	РасшифровкаФорматов.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ Расшифровка
		|ИЗ
		|	&РасшифровкаФорматов КАК РасшифровкаФорматов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	Расшифровка.ВидЭД КАК ВидДокумента,
		|	Расшифровка.Формат КАК ВерсияФормата,
		|	СвязьВидовИФорматовЭД.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ДанныеКонтрагента
		|ИЗ
		|	Расшифровка КАК Расшифровка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиДляОбновления КАК НастройкиДляОбновления
		|			ПО ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторЭДО = НастройкиДляОбновления.ИдентификаторПолучателя
		|		ПО Расшифровка.Формат = ПоддерживаемыеФорматыЭлектронныхДокументов.Формат
		|			И Расшифровка.ВариантЗаполнения = ПоддерживаемыеФорматыЭлектронныхДокументов.ВариантЗаполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|		ПО Расшифровка.ВидЭД = СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента
		|			И Расшифровка.Формат = СвязьВидовИФорматовЭД.ФорматЭлектронногоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиДляОбновления.Отправитель КАК Отправитель,
		|	НастройкиДляОбновления.Получатель КАК Получатель,
		|	НастройкиДляОбновления.Договор КАК Договор,
		|	НастройкиДляОбновления.ВидДокумента КАК ВидДокумента,
		|	НастройкиДляОбновления.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ВЫБОР
		|		КОГДА ДанныеКонтрагента.Приоритет < НастройкиДляОбновления.Приоритет
		|			ТОГДА ДанныеКонтрагента.ВерсияФормата
		|		ИНАЧЕ НастройкиДляОбновления.ВерсияФормата
		|	КОНЕЦ КАК ВерсияФормата
		|ИЗ
		|	НастройкиДляОбновления КАК НастройкиДляОбновления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеКонтрагента КАК ДанныеКонтрагента
		|		ПО НастройкиДляОбновления.ИдентификаторПолучателя = ДанныеКонтрагента.ИдентификаторЭДО
		|			И НастройкиДляОбновления.ВидДокумента = ДанныеКонтрагента.ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТекущиеФорматы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеФорматы.ФорматЭлектронногоДокумента) КАК КоличествоФорматов
		|ИЗ
		|	ТекущиеФорматы КАК ТекущиеФорматы
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеФорматы.ВидЭлектронногоДокумента
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеФорматы.ФорматЭлектронногоДокумента) > 1";
	
	Запрос.УстановитьПараметр("РасшифровкаФорматов", РасшифровкаВариантовЗаполненияФорматовЭДО());
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шаблон = НСтр("ru = 'Для вида ЭД ''%1''  указан одинаковый приоритет у %2 форматов'");
	
	МассивПропускаемыхЭД = Новый Массив;
	ВыборкаДетальныеЗаписи = РезультатЗапроса[6].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = СтрШаблон(Шаблон, ВыборкаДетальныеЗаписи.ВидЭлектронногоДокумента, ВыборкаДетальныеЗаписи.КоличествоФорматов);
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление форматов в настройках отправки ЭДО'"), ТекстОшибки);
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[5].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи,, "ВерсияФормата");
		
		УстановитьПривилегированныйРежим(Истина);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ВерсияФормата = ВыборкаДетальныеЗаписи.ВерсияФормата;
		МенеджерЗаписи.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;

КонецПроцедуры

// Выполняет преобразование форматов сервиса в форматы конфигурации
//
// Параметры:
//  ИдентификаторЭДО       - Строка - Идентификатор абонента
//  МассивФорматовСервиса  - массив - Массив структур полученных от сервиса
//
// Возвращаемое значение:
//   ТаблицаЗначений   - преобразованные форматы
//
Функция ПоддерживаемыеФорматыАбонентаЭДО(ИдентификаторЭДО, МассивФорматовСервиса)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторЭДО"            , Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ИдентификаторФорматаВСервисе", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150)));
	Таблица.Колонки.Добавить("ВариантЗаполнения"           , Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаТЧ Из МассивФорматовСервиса Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИдентификаторЭДО             = ИдентификаторЭДО;
		НоваяСтрока.ИдентификаторФорматаВСервисе = СтрокаТЧ.formatUeid;
		НоваяСтрока.ВариантЗаполнения            = СтрокаТЧ.fillOption;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФорматыСервиса.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ФорматыСервиса.ИдентификаторФорматаВСервисе КАК ИдентификаторСервиса,
		|	ФорматыСервиса.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ ФорматыСервиса
		|ИЗ
		|	&ФорматыСервиса КАК ФорматыСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФорматыСервиса.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	ФорматыСервиса.ВариантЗаполнения КАК ВариантЗаполнения,
		|	ФорматыЭлектронныхДокументов.Формат КАК Формат
		|ИЗ
		|	ФорматыСервиса КАК ФорматыСервиса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО ФорматыСервиса.ИдентификаторСервиса = ФорматыЭлектронныхДокументов.ИдентификаторСервиса";
	
	Запрос.УстановитьПараметр("ФорматыСервиса", Таблица);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область ОписаниеПараметровЗапросов

// Описание параметров получения уведомлений из сервиса 1С:ЭДО
//
Функция НовоеОписаниеПараметровУведомленийВСервисеЭДО()
	
	Результат = Новый Структура;
	Результат.Вставить("РасшифрованныйМаркер"                          , "");
	Результат.Вставить("ИдентификаторЭДО"                              , "");
	Результат.Вставить("УведомлятьОСобытиях"                           , Ложь);
	Результат.Вставить("УведомлятьОНовыхПриглашениях"                  , Ложь);
	Результат.Вставить("УведомлятьОбОтветахНаПриглашения"              , Ложь);
	Результат.Вставить("УведомлятьОНовыхДокументах"                    , Ложь);
	Результат.Вставить("УведомлятьОНеОбработанныхДокументах"           , Ложь);
	Результат.Вставить("УведомлятьОбОкончанииСрокаДействияСертификата" , Ложь);
	Результат.Вставить("АдресУведомлений"                              , "");
	
	Возврат Результат;
	
КонецФункции

// Описание параметров отправки данных в сервис 1С:Сервис настроек.
//
Функция НовоеОписаниеОтправкиДанныхАбонентаВСервисеНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН"                            , "");
	Результат.Вставить("КПП"                            , "");
	Результат.Вставить("ИдентификаторЭДО"               , "");
	Результат.Вставить("НазначениеУчетнойЗаписи"        , "");
	Результат.Вставить("Версия            "             , "");
	Результат.Вставить("ПодробноеОписаниеУчетнойЗаписи" , "");
	Результат.Вставить("СертификатыАбонента"            , Новый Массив);
	Результат.Вставить("ВариантыЗаполненияФорматов"           , Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Описание параметров получения данных из сервиса 1С:Сервис настроек
//
Функция НовоеОписаниеПолученияДанныхАбонентаВСервисеНастроек()
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЭДО" , Новый Массив);
	Результат.Вставить("СписокИНН"         , Новый Массив);
	Результат.Вставить("ДатаОбновления"    , Неопределено);
	Результат.Вставить("Страница"          , 0);
	
	Возврат Результат;
	
КонецФункции

// Общие параметры вызова команд сервиса.
//
Функция НовоеОписаниеПараметровКомандыСервиса()
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Наименование",                  "");                // Полное наименование метода.
	ПараметрыКоманды.Вставить("Адрес",                         "");                // Адрес URI метода.
	ПараметрыКоманды.Вставить("Метод",                         "");                // Метод HTTP соединения, например POST.
	ПараметрыКоманды.Вставить("Таймаут",                       30);                // Длительность ожидания ответа.
	ПараметрыКоманды.Вставить("Данные",                        Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("СпособОбмена",                  Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("НастройкиСервисаЭДО",           Неопределено);      // Двоичные данные или строка.
	ПараметрыКоманды.Вставить("Аутентификация",                Неопределено);      // Требуется аутентификация.
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", Неопределено);      // Не выводить сообщения об ошибках.
	ПараметрыКоманды.Вставить("Результат",                     Неопределено);      // Свойство возврата результата, например "path[0].cat".
	ПараметрыКоманды.Вставить("Обработка",                     Неопределено);      // Описание обработки данных результата.
	ПараметрыКоманды.Вставить("Заголовки",                     Новый Соответствие);// Описание обработки данных результата.
	ПараметрыКоманды.Вставить("ДополнительныеПараметры",       Неопределено);      // Дополнительные параметры.
	ПараметрыКоманды.Вставить("Ошибки",                        Новый Соответствие);// Соответствие ошибок, например: (404, "Не найдено"). ОбработкаРезультата
	ПараметрыКоманды.Вставить("РазрешенныеСостояния",          Новый Массив);      // Соответствие ошибок, например: (404, "Не найдено"). ОбработкаРезультата
	ПараметрыКоманды.Вставить("ОбработкаРезультата",           Неопределено);      // Соответствие ошибок, например: (404, "Не найдено"). 
	ПараметрыКоманды.Вставить("Страница",                      0 );                // Номер получаемой страницы
	ПараметрыКоманды.Вставить("ПолучитьВсеСтраницы",           Ложь );             // Перебрать и получить все страницы
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПараметрыКоманд

// Получение параметров запроса для получения Форматов ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияДанныхФорматовЭДО(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-formats/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о форматах ЭДО из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения связи типов и форматов ЭД
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияСвязиТиповИФорматовЭДО(ПараметрыЗапроса)
	
	СтруктураJSON      = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-type-formats/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о связи типов и форматов ЭД из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "СвязьТиповИФорматовЭД";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения видов ЭД
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
//    * Страница        - Строка - Номер страницы ответа сервера
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияВидовЭДСервиса(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/document-types/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных видов ЭД из сервиса настроек 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "КаталогВидовЭД";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения Операторов ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияДанныхОбОператорахЭДО(ПараметрыЗапроса)
	
	СтруктураJSON         = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/operators/catalog";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о операторах ЭДО в сервисе 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "КаталогОператоров";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров запроса для получения совместимости Операторов ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//    * ЛогинПоддержки  - Строка - Логин поддержки 1С
//    * ПарольПоддержки - Строка - Пароль поддержки 1С
// 
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыПолученияДанныхОСовместимостиОператоровЭДО(ПараметрыЗапроса)
	
	СтруктураJSON      = Новый Структура;
	AuthenticationInfo = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("Логин") И ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		
		AuthenticationInfo.Вставить("login", ПараметрыЗапроса.Логин);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Пароль") И ЗначениеЗаполнено(ПараметрыЗапроса.Пароль) Тогда
		
		AuthenticationInfo.Вставить("password", ПараметрыЗапроса.Пароль);
		
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Тикет") И ЗначениеЗаполнено(ПараметрыЗапроса.Тикет) Тогда
		
		AuthenticationInfo.Вставить("authToken", ПараметрыЗапроса.Тикет);
		
	КонецЕсли;
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/operators/services-compatibilities";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных о совместимости операторов ЭДО в сервисе 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "СовместимостьОператоровЭДО";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров для установки уведомлений в сервисе 1С:ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыУстановкиУведомленийВСервисеЭДО(ПараметрыЗапроса)
	
	ПараметрыУведомления = Новый Структура();
	ПараметрыУведомления.Вставить("Total"                , XMLСтрока(ПараметрыЗапроса.УведомлятьОСобытиях));
	ПараметрыУведомления.Вставить("NewInvitations"       , XMLСтрока(ПараметрыЗапроса.УведомлятьОНовыхПриглашениях));
	ПараметрыУведомления.Вставить("NewInvitationResults" , XMLСтрока(ПараметрыЗапроса.УведомлятьОбОтветахНаПриглашения));
	ПараметрыУведомления.Вставить("NewMessages"          , XMLСтрока(ПараметрыЗапроса.УведомлятьОНовыхДокументах));
	ПараметрыУведомления.Вставить("UnfinishedMessages"   , XMLСтрока(ПараметрыЗапроса.УведомлятьОНеОбработанныхДокументах));
	ПараметрыУведомления.Вставить("CertExpiration"       , XMLСтрока(ПараметрыЗапроса.УведомлятьОбОкончанииСрокаДействияСертификата));
	ПараметрыУведомления.Вставить("Mail"                 , ПараметрыЗапроса.АдресУведомлений);
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Установка информации о свойствах подписки ЭДО'");
	ПараметрыКоманды.Адрес               = "SetSubscriptions?"+СформироватьАдресДляУстановкиУведомленийВСервисе1СЭДО(ПараметрыУведомления);
	ПараметрыКоманды.Метод               = "GET";
	ПараметрыКоманды.СпособОбмена        = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	
	ПараметрыКоманды.Заголовки.Вставить("Assistant-Key", ПараметрыЗапроса.РасшифрованныйМаркер);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров для чтения настроек уведомлений из сервиса 1С:ЭДО
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыЧтенияУведомленийВСервисеЭДО(ПараметрыЗапроса)
	
	ПараметрыКоманды                     = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.СпособОбмена        = Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО;
	ПараметрыКоманды.Адрес               = "GetSubscriptions/?query=" + ПараметрыЗапроса.ИдентификаторЭДО;
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение информации о свойствах подписки ЭДО'");
	ПараметрыКоманды.Метод               = "GET";
	ПараметрыКоманды.ОбработкаРезультата = "ЧтениеУведомленийВСервисе1СЭДО";
	
	ПараметрыКоманды.Заголовки.Вставить("Assistant-Key", ПараметрыЗапроса.РасшифрованныйМаркер);
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров для отправки данные в сервис 1С:Сервис настроек
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыОтправкаДанныхАбонентаВСервисНастроек(ПараметрыЗапроса, Отказ)
	
	СтруктураJSON      = Новый Структура;
	AuthenticationInfo = Новый Структура;
	identifierInfo     = Новый Структура;
	ИнтернетПоддержкаПользователейПодключена = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Тикет = БилетНаСайтПоддержки(ИнтернетПоддержкаПользователейПодключена, Ложь, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ЗначениеЗаполнено(Тикет) Или Не ИнтернетПоддержкаПользователейПодключена Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	AuthenticationInfo.Вставить("authToken", Тикет);
	
	СтруктураJSON.Вставить("authenticationInfo", AuthenticationInfo);
	
	Идентификатор = ПреобразоватьВИдентификаторЗапросаСервисаНастроек(ПараметрыЗапроса.ИдентификаторЭДО);
	
	identifierInfo.Вставить("inn"                     , ПараметрыЗапроса.ИНН);
	identifierInfo.Вставить("kpp"                     , ПараметрыЗапроса.КПП);
	identifierInfo.Вставить("id"                      , Идентификатор);
	identifierInfo.Вставить("name"                    , ПараметрыЗапроса.НазначениеУчетнойЗаписи);
	identifierInfo.Вставить("description"             , ПараметрыЗапроса.ПодробноеОписаниеУчетнойЗаписи);
	identifierInfo.Вставить("configurationName"       , Метаданные.Имя);
	identifierInfo.Вставить("programVersionName"      , ПараметрыЗапроса.Версия);
	identifierInfo.Вставить("certificates"            , ПараметрыЗапроса.СертификатыАбонента);
	identifierInfo.Вставить("documentTypes"           , ПараметрыЗапроса.ВариантыЗаполненияФорматов);
	
	СтруктураJSON.Вставить("identifierInfo", identifierInfo);
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Отправка данных абонента в сервис 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = Неопределено;
	ПараметрыКоманды.Данные              = ТекстJSON;
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	ПоддержкаПодключена = Истина;
	БилетПоддержки = БилетНаСайтПоддержки(ПоддержкаПодключена);
	
	Если ЗначениеЗаполнено(БилетПоддержки) Тогда
		ПараметрыКоманды.Заголовки.Вставить("ticket", БилетПоддержки);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Получение параметров для получения данные о абоненте из сервиса 1С:Сервис настроек
//
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//   
// Возвращаемое значение:
//  Структура - параметры команды ВыполнитьКомандуСервиса.
//
Функция ПараметрыКомандыПолученияДанныхАбонентовВСервисНастроек(ПараметрыЗапроса, Отказ)
	
	СтруктураJSON       = Новый Структура;
	
	Если ПараметрыЗапроса.Свойство("СписокИНН")
		И ЗначениеЗаполнено(ПараметрыЗапроса.СписокИНН) И ПараметрыЗапроса.СписокИНН.Количество() > 0 Тогда
		СтруктураJSON.Вставить("innList"          , ПараметрыЗапроса.СписокИНН);
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("ИдентификаторыЭДО") И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЭДО) Тогда
		СтруктураJSON.Вставить("ids"              , ПараметрыЗапроса.ИдентификаторыЭДО);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("ДатаОбновления") И ЗначениеЗаполнено(ПараметрыЗапроса.ДатаОбновления) Тогда
		СтруктураJSON.Вставить("changedAfterDate" , ПараметрыЗапроса.ДатаОбновления);
	КонецЕсли;
	
	Если ПараметрыЗапроса.Свойство("Страница") Тогда
		СтруктураJSON.Вставить("page"             , ПараметрыЗапроса.Страница);
	Иначе
		СтруктураJSON.Вставить("page"             , 0);
	КонецЕсли;
	
	ОбъектЗаписьJSON = Новый ЗаписьJSON;
	ОбъектЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ОбъектЗаписьJSON, СтруктураJSON);
	ТекстJSON = ОбъектЗаписьJSON.Закрыть();
	
	ПараметрыКоманды = НовоеОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес               = "api/edo-settings/identifiers/search";
	ПараметрыКоманды.Наименование        = НСтр("ru = 'Получение данных абонента в сервисе 1С:ЭДО'");
	ПараметрыКоманды.Метод               = "POST";
	ПараметрыКоманды.ОбработкаРезультата = "ПолученияДанныхАбонентовВСервисНастроек";
	ПараметрыКоманды.Данные              = ТекстJSON;
	
	ПараметрыКоманды.Заголовки.Вставить("Content-Type", "application/json");
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ВыполнитьДействияПоЭД

// Выполняет подготовку к отправке и отправку электронного документа
//
Функция ОтправитьЭД(ПараметрыПодписанияИОтправки)
	
	СтМассивовСтруктурСертификатов       = ПараметрыПодписанияИОтправки.СтМассивовСтруктурСертификатов;
	СоотвСоглашенийИМассивовЭДКОтправке  = ПараметрыПодписанияИОтправки.СоотвСоглашенийИМассивовЭДКОтправке;
	Запрос                               = ПараметрыПодписанияИОтправки.Запрос;
	ВременныеТаблицы                     = ПараметрыПодписанияИОтправки.ВременныеТаблицы;
	СоотвСертификатовИПаролей            = ПараметрыПодписанияИОтправки.СоотвСертификатовИПаролей;
	СоотвСертификатовИИхСтруктур         = ПараметрыПодписанияИОтправки.СоотвСертификатовИИхСтруктур;
	Действия                             = ПараметрыПодписанияИОтправки.Действия;
	ВыполнятьКриптооперацииНаСервере     = ПараметрыПодписанияИОтправки.ВыполнятьКриптооперацииНаСервере;
	НемедленнаяОтправкаЭД                = ПараметрыПодписанияИОтправки.НемедленнаяОтправкаЭД;
	СтруктураКОтправке                   = ПараметрыПодписанияИОтправки.СтруктураКОтправке;
	МассивСсылокНаОбъект                 = ПараметрыПодписанияИОтправки.МассивСсылокНаОбъект;
	ЭД                                   = ПараметрыПодписанияИОтправки.ЭД;
	ДопПараметры                         = ПараметрыПодписанияИОтправки.ДопПараметры;
	
	СтруктураВозврата = Новый Структура;
	
	СоотвСоглашенийИСертификатовАвторизации = Новый Соответствие;
	СтруктураВозврата.Вставить("СоотвСоглашенийИСертификатовАвторизации", СоотвСоглашенийИСертификатовАвторизации);
	
	Отправлено = 0;
	Подготовлено = 0;
	
	Если СоотвСоглашенийИМассивовЭДКОтправке.Количество() > 0 Тогда
		МассивИдентификаторовОтправителя = Новый Массив;
		Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
			МассивИдентификаторовОтправителя.Добавить(Элемент.Ключ);
		КонецЦикла;
		СоотвСоглашенийИСоответствийСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
				МассивИдентификаторовОтправителя,
				СтМассивовСтруктурСертификатов,
				СоотвСертификатовИПаролей);
		// Если есть сертификат авторизации, то попытаемся, после подписания массива ЭД на клиенте,
		// сразу же отправить ЭД, иначе, после подписания, ЭД упакуем в ПЭД и поместим в очередь на отправку.
		Для Каждого Элемент Из СоотвСоглашенийИМассивовЭДКОтправке Цикл
			ИдентификаторОтправителя = Элемент.Ключ;
			
			СоотвСертификатовИПараметров = СоотвСоглашенийИСоответствийСертификатовИПараметров.Получить(ИдентификаторОтправителя);
			Если Не ЗначениеЗаполнено(СоотвСертификатовИПараметров) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из СоотвСертификатовИПараметров Цикл
				Сертификат           = КлючИЗначение.Ключ;
				СтруктураСертификата = КлючИЗначение.Значение;
				
				МаркерРасшифрованный = Неопределено;
				МаркерЗашифрованный = Неопределено;
				
				Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
					И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
					Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
					И (ЗначениеЗаполнено(МаркерРасшифрованный) 
					Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
					
					СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + ИдентификаторОтправителя,
					СтруктураСертификата);
					
					МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ИдентификаторОтправителя);
					Если МассивСертификатов = Неопределено Тогда
						МассивСертификатов = Новый Массив;
						СоотвСоглашенийИСертификатовАвторизации.Вставить(ИдентификаторОтправителя, МассивСертификатов);
					КонецЕсли;
					МассивСертификатов.Добавить(Сертификат);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураВозврата.Вставить("СоотвСертификатовИИхСтруктур", СоотвСертификатовИИхСтруктур);
	
	Запрос.Текст = ТекстЗапросаОтправкиДокументов(ВременныеТаблицы);
	
	МассивСтатусовСПодписью = Новый Массив;
	МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Подписан);
	
	МассивСтатусовБезПодписи = Новый Массив;
	МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Сформирован);
	МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Утвержден);
	МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
	
	Если Действия = "ОтправитьПовторно" Тогда
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПодготовленКОтправке);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Отправлен);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Отправлен);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.Доставлен);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.Доставлен);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
		МассивСтатусовСПодписью.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
		МассивСтатусовБезПодписи.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждениеОператора);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтатусыКОтправкеБезПодписи", МассивСтатусовБезПодписи);
	Запрос.УстановитьПараметр("СтатусыКОтправкеСПодписью" , МассивСтатусовСПодписью);
	Запрос.УстановитьПараметр("ПустаяСсылкаНаСертификат"  , Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка());
	
	ДокументыКОтправке = Запрос.Выполнить().Выгрузить();
	
	Отправлено = 0;
	Подготовлено = 0;
	Если ДокументыКОтправке.Количество() > 0 Тогда
		ДокументыСШифрованием = ДокументыКОтправке.СкопироватьКолонки();
		Если НЕ ВыполнятьКриптооперацииНаСервере Тогда
			// Скопируем в отдельную таблицу ЭД, которые надо шифровать на клиенте
			// и удалим эти строки из таблицы ЭД к отправке:
			Отбор = Новый Структура("ТребуетсяШифрование", Истина);
			ДокументыСШифрованием = ДокументыКОтправке.Скопировать(Отбор);
			Отбор = Новый Структура("ТребуетсяШифрование", Ложь);
			ДокументыКОтправке = ДокументыКОтправке.Скопировать(Отбор);
		КонецЕсли;
		Отбор = Новый Структура("ТребуетсяПодпись", Ложь);
		ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
		СтруктураКОтправке.Вставить("БезПодписи", ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД"));
		
		Если Не НемедленнаяОтправкаЭД Тогда
			// Если используется отложенная отправка, то авторизация на сервере ОЭДО, на текущем этапе, не нужна.
			// Следовательно, ЭД передаваемые через ОЭДО, передаются на формирование ПЭД без сертификатов авторизации.
			Отбор = Новый Структура("ТребуетсяПодпись", Истина);
			ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
			МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
			Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
				СтруктураКОтправке.СПодписью.Добавить(Элемент);
			КонецЦикла;
			
		Иначе
			Отбор = Новый Структура("ТребуетсяАвторизация, ТребуетсяПодпись", Ложь, Истина);
			ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
			МассивПодписанныхЭДКОтправке = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
			Для Каждого Элемент Из МассивПодписанныхЭДКОтправке Цикл
				Если СтруктураКОтправке.СПодписью.Найти(Элемент) = Неопределено Тогда
					СтруктураКОтправке.СПодписью.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
			Отбор = Новый Структура("ТребуетсяАвторизация", Истина);
			ВременнаяТаблица = ДокументыКОтправке.Скопировать(Отбор);
			ТзИдентификаторОтправителя = ВременнаяТаблица.Скопировать();
			ТзИдентификаторОтправителя.Свернуть("ИдентификаторОтправителя");
			МассивИдентификаторОтправителя= ТзИдентификаторОтправителя.ВыгрузитьКолонку("ИдентификаторОтправителя");
			Если МассивИдентификаторОтправителя.Количество() > 0 Тогда
				СоотвСоглашенийИСоответствийСертификатов = СоотвСоглашенийИСоответствийСертификатовИПараметровДляАвторизацииСервер(
							МассивИдентификаторОтправителя,
							СтМассивовСтруктурСертификатов,
							СоотвСертификатовИПаролей);
			КонецЕсли;
			// Если есть расшифрованные маркеры по сертификатам авторизации,
			// то здесь же отправим ЭД по данным сертификатам.
			МассивЭДКОтправкеССервера = Новый Массив;
			ЛокальноеСоотвСоглашенийИСтруктур = Новый Соответствие;
			
			Для Каждого ИдентификаторОтправителя Из МассивИдентификаторОтправителя Цикл
				РеквизитыПрофиляНастроекЭДО = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ИдентификаторОтправителя);
				
				СоответствиеСертификатов = СоотвСоглашенийИСоответствийСертификатов.Получить(ИдентификаторОтправителя);
				Отбор = Новый Структура("ИдентификаторОтправителя", ИдентификаторОтправителя);
				ПрофилиНастроекЭДО = ВременнаяТаблица.Скопировать(Отбор);
				Если ПрофилиНастроекЭДО.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				МассивЭД = ПрофилиНастроекЭДО.ВыгрузитьКолонку("СсылкаНаЭД");
				Если Не ЗначениеЗаполнено(СоответствиеСертификатов)
					Или СоответствиеСертификатов.Количество() = 0 Тогда
					// Если нет сертификата авторизации, то передадим массив ЭД на формирование ПЭД,
					// далее, ПЭД встанет в очередь на отправку (отложенная отправка).
					Для Каждого СсылкаНаЭД Из МассивЭД Цикл
						СтруктураКОтправке.СПодписью.Добавить(СсылкаНаЭД);
					КонецЦикла;
					Продолжить;
				КонецЕсли;
				
				ОтправкаССервера = Ложь;
				Для Каждого КлючИЗначение Из СоответствиеСертификатов Цикл
					Сертификат           = КлючИЗначение.Ключ;
					СтруктураСертификата = КлючИЗначение.Значение;
					
					МаркерРасшифрованный = Неопределено;
					МаркерЗашифрованный = Неопределено;
					Если ТипЗнч(СтруктураСертификата) = Тип("Структура")
						И (СтруктураСертификата.Свойство("МаркерРасшифрованный", МаркерРасшифрованный)
						Или СтруктураСертификата.Свойство("МаркерЗашифрованный", МаркерЗашифрованный))
						И (ЗначениеЗаполнено(МаркерРасшифрованный) Или ЗначениеЗаполнено(МаркерЗашифрованный)) Тогда
						
						Если ЗначениеЗаполнено(МаркерРасшифрованный) Тогда
							Для Каждого СсылкаНаЭД Из МассивЭД Цикл
								МассивЭДКОтправкеССервера.Добавить(СсылкаНаЭД);
							КонецЦикла;
							ЛокальноеСоотвСоглашенийИСтруктур.Вставить(ИдентификаторОтправителя, СтруктураСертификата);
							ОтправкаССервера = Истина;
							Прервать;
						Иначе
							СоотвСертификатовИИхСтруктур.Вставить(Строка(Сертификат.УникальныйИдентификатор()) + "_" + РеквизитыПрофиляНастроекЭДО.ИдентификаторОрганизации,
							СтруктураСертификата);
							
							МассивСертификатов = СоотвСоглашенийИСертификатовАвторизации.Получить(ИдентификаторОтправителя);
							Если МассивСертификатов = Неопределено Тогда
								МассивСертификатов = Новый Массив;
								СоотвСоглашенийИСертификатовАвторизации.Вставить(ИдентификаторОтправителя, МассивСертификатов);
							КонецЕсли;
							МассивСертификатов.Добавить(Сертификат);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ОтправкаССервера Тогда
					Продолжить;
				Иначе
					// По данному соглашению может быть массив, ожидающих подписи на клиенте, ЭД.
					// Данная ситуация может получиться, когда в журнале документов выбрана группа документов ИБ
					// с разными статусами ЭД (утвержден и подписан), тогда с предыдущего этапа (Подписание ЭД)
					// в соответствии соглашений и массивов придет массив ЭД на подпись, а на текущем этапе
					// будет сформирован массив ЭД к отправке.
					// Чтобы не затереть массив ЭД на подпись, добавим ЭД к отправке в существующий массив:
					МассивЭДОжидающихПодписи = СоотвСоглашенийИМассивовЭДКОтправке.Получить(ИдентификаторОтправителя);
					Если МассивЭДОжидающихПодписи = Неопределено Тогда
						МассивЭДОжидающихПодписи = Новый Массив;
					КонецЕсли;
					Для Каждого ЭлементКОтправке Из МассивЭД Цикл
						МассивЭДОжидающихПодписи.Добавить(ЭлементКОтправке);
					КонецЦикла;
					СоотвСоглашенийИМассивовЭДКОтправке.Вставить(ИдентификаторОтправителя, МассивЭДОжидающихПодписи);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивЭДКОтправкеССервера.Количество() > 0 Тогда
				СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭДКОтправкеССервера, Истина, ЛокальноеСоотвСоглашенийИСтруктур);
				Отправлено = Отправлено + СтРезультата.КолОтправленных;
				Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Элемент Из СтруктураКОтправке Цикл
			Если ВРег(Элемент.Ключ) = ВРег("САвторизацией") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивКОтправке = Новый Массив;
			СтруктураКОтправке.Свойство(Элемент.Ключ, МассивКОтправке);
			ПризнакПодписи = (Элемент.Ключ = "СПодписью");
			МассивЭД = Элемент.Значение;
			Если ТипЗнч(МассивЭД) = Тип("Массив") И МассивЭД.Количество() > 0 Тогда
				СтРезультата = СоздатьИОтправитьДокументыПЭД(МассивЭД, ПризнакПодписи);
				Отправлено = Отправлено + СтРезультата.КолОтправленных;
				Подготовлено = Подготовлено + СтРезультата.КолПодготовленных;
				МассивКОтправке = СтРезультата.МассивПакетовДляОбработкиНаКлиенте;
			КонецЕсли;
			МассивЭД = Новый Массив;
			// Добавим в структуру ЭД, которые надо шифровать на клиенте:
			Если ДокументыСШифрованием.Количество() > 0 Тогда
				Отбор = Новый Структура("ТребуетсяПодпись", ПризнакПодписи);
				ВременнаяТаблица = ДокументыСШифрованием.Скопировать(Отбор);
				МассивЭД = ВременнаяТаблица.ВыгрузитьКолонку("СсылкаНаЭД");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКОтправке, МассивЭД, Истина);
			СтруктураКОтправке.Вставить(Элемент.Ключ, МассивКОтправке);
		КонецЦикла;
	КонецЕсли;
	
	СтруктураКОтправке.Вставить("САвторизацией", СоотвСоглашенийИМассивовЭДКОтправке);
	СтруктураВозврата.Вставить("КолОтправленных", Отправлено);
	СтруктураВозврата.Вставить("КолПодготовленных", Подготовлено);
	СтруктураВозврата.Вставить("СтруктураКОтправке", СтруктураКОтправке);
	
	Если НЕ ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		
		Если ТипЗнч(ЭД) = Тип("Массив") И ЭД.Количество() > 0 Тогда
			Если ТипЗнч(ЭД[0]) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") Тогда
				ВладельцыДокументов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭД,"ВладелецФайла");
				ДокументыУчета = Новый Массив;
				Для Каждого КлючЗначение Из ВладельцыДокументов Цикл
					
					ОснованияРезультат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючЗначение.Значение,"ДокументыОснования");
					Если ОснованияРезультат.Пустой() Тогда
						Продолжить;
					КонецЕсли;
					
					ОснованияВыборка = ОснованияРезультат.Выбрать();
					
					Пока ОснованияВыборка.Следующий() Цикл
						ДокументыУчета.Добавить(ОснованияВыборка.ДокументОснование);
					КонецЦикла;
					
				КонецЦикла;
				
				СтруктураВозврата.Вставить("ДокументыУчета", ДокументыУчета);
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры)= Тип("Структура") Тогда
			ДопПараметры.Вставить("ЕстьОбработанныеЭД", Истина);
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураВозврата;
КонецФункции

// Выполняет подготовку к подписанию и подписание электронного документа
//
Функция ПодписатьЭД(ПараметрыПодписанияИОтправки)
	
	МассивОтпечатковСертификатов        = ПараметрыПодписанияИОтправки.МассивОтпечатковСертификатов;
	Запрос                              = ПараметрыПодписанияИОтправки.Запрос;
	ВременныеТаблицы                    = ПараметрыПодписанияИОтправки.ВременныеТаблицы;
	ДопПараметры                        = ПараметрыПодписанияИОтправки.ДопПараметры;
	ВыделятьЭДКОтправкеСАвторизацией    = ПараметрыПодписанияИОтправки.ВыделятьЭДКОтправкеСАвторизацией;
	СоотвСоглашенийИМассивовЭДКОтправке = ПараметрыПодписанияИОтправки.СоотвСоглашенийИМассивовЭДКОтправке;
	СоотвСертификатовИИхСтруктур        = ПараметрыПодписанияИОтправки.СоотвСертификатовИИхСтруктур;
	СтруктураКОтправке                  = ПараметрыПодписанияИОтправки.СтруктураКОтправке;
	
	СтруктураВозврата = Новый Структура;
	СоотвСертификатовИМассивовЭД                     = Новый Соответствие;
	СоотвСоглашенийИМассивовЭДКОтправкеСАвторизацией = Новый Соответствие;
	
	КолПодписанных = 0;
	
	СертификатыСПаролями = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ПарольКСертификату(,МассивОтпечатковСертификатов);
	
	Для Каждого Элемент Из СертификатыСПаролями Цикл
		Структура = Новый Структура("ПарольПользователя, ПарольПолучен, ЗапомнитьПарольКСертификату",
			Элемент.Значение, Истина, Ложь);
		СоотвСертификатовИИхСтруктур.Вставить(Элемент.Ключ, Структура);
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаДоступныхСертификатов(ВременныеТаблицы);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ПрофилиЭДОБезСертификатов = РезультатыЗапроса[5];
	ДоступныеСертификаты = РезультатыЗапроса[2].Выгрузить();
	ТЗ_Сертификатов = РезультатыЗапроса[10].Выгрузить();
	ТЗ_УстановленныхПодписей = РезультатыЗапроса[11].Выгрузить();
	Выборка = РезультатыЗапроса[9].Выбрать();
	
	Если НЕ ПрофилиЭДОБезСертификатов.Пустой() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(ПрофилиЭДОБезСертификатов.Выгрузить(),
			Новый УникальныйИдентификатор);
		СтруктураВозврата.Вставить("ПрофилиЭДОБезСертификатов", АдресХранилища);
	КонецЕсли;
	
	ПодписатьЭДВыполнитьПроверкиДоступностиСертификатов(Выборка, ДопПараметры, ДоступныеСертификаты, ТЗ_Сертификатов);
	
	СоотвЭДИСоглашений = Новый Соответствие;
	СтруктураСтруктурМассивовЭДИСертификатов = Новый Структура;
	СоотвСообщенийОбменаИОшибокПодписи = Новый Соответствие;
	
	ТЗ_ЭД = Новый ТаблицаЗначений;
	ТЗ_ЭД.Колонки.Добавить("СсылкаНаЭД");
	ТЗ_ЭД.Колонки.Добавить("ИдентификаторОтправителя");
	ТЗ_ЭД.Колонки.Добавить("СертификатыПодписи");
	ТЗ_ЭД.Колонки.Добавить("ТребуетсяАвторизация");
	
	МассивЭД = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СсылкаНаЭД = Выборка.СсылкаНаЭД;
		Отбор = Новый Структура("СсылкаНаЭД", СсылкаНаЭД);
		КопияТЗ = ТЗ_Сертификатов.Скопировать(Отбор);
		МассивОтпечатковИсключения = Новый Массив;
		МассивСертификатов = Новый Массив;
		
		Если Выборка.ЭтоИнтеркампани Тогда
			ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
			Если ТЗ_Отпечатков.Количество() = 0 Тогда
				Если КопияТЗ.Количество() > 0 Тогда
					Для Каждого СтрокаСертификата Из КопияТЗ Цикл
						СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя, Отпечаток,
						|Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату, Программа");
						ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
						МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
						ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
						Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
							ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
						КонецЕсли;
						СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
					КонецЦикла;
					НоваяСтрока = ТЗ_ЭД.Добавить();
					НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
					НоваяСтрока.СертификатыПодписи = МассивСертификатов;
					НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
					Организация2Стороны = ?(СтрокаСертификата.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
					Отбор.Вставить("Организация", Организация2Стороны);
					КопияТЗ = КопияТЗ.Скопировать(Отбор);
				КонецЕсли;
			Иначе
				МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
				ТЗ_Отпечатков.Свернуть("Организация");
				СтрокаОтпечатка = ТЗ_Отпечатков[0];
				Если ЗначениеЗаполнено(СтрокаОтпечатка.Организация) Тогда
					Организация2Стороны = ?(СтрокаОтпечатка.Организация = Выборка.Организация, Выборка.Контрагент, Выборка.Организация);
					Отбор.Вставить("Организация", Организация2Стороны);
					КопияТЗ = КопияТЗ.Скопировать(Отбор);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТЗ_Отпечатков = ТЗ_УстановленныхПодписей.Скопировать(Отбор);
			Если ТЗ_Отпечатков.Количество() > 0 Тогда
				МассивОтпечатковИсключения = ТЗ_Отпечатков.ВыгрузитьКолонку("УстановленныеПодписи");
			КонецЕсли;
		КонецЕсли;
		
		ЭтоСлужебный = ЭтоСлужебныйДокумент(СсылкаНаЭД);
		ИДМассиваЭД = "й";
		ПарольПолучен = Ложь;
		ПодозрениеНаОшибкиМаршрутаПодписания = Ложь;
		
		Для Каждого СтрокаСертификата Из КопияТЗ Цикл
			Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено
				Или МассивСертификатов.Найти(СтрокаСертификата.СертификатПодписи) <> Неопределено Тогда
				Если МассивОтпечатковИсключения.Найти(СтрокаСертификата.Отпечаток) <> Неопределено Тогда
					ПодозрениеНаОшибкиМаршрутаПодписания = Истина;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
			ИДМассиваЭД = ИДМассиваЭД + Строка(СтрокаСертификата.СертификатПодписи.УникальныйИдентификатор());
			
			СтруктураСертификата = Новый Структура("СертификатПодписи, ПарольПолучен, ПарольПользователя,
			|Отпечаток, Отозван, ДанныеСертификата, ЗапомнитьПарольКСертификату, Программа");
			ЗаполнитьЗначенияСвойств(СтруктураСертификата, СтрокаСертификата);
			ПараметрыВСоотв = СоотвСертификатовИИхСтруктур.Получить(СтрокаСертификата.СертификатПодписи);
			Если ПараметрыВСоотв <> Неопределено И ПараметрыВСоотв.ПарольПолучен Тогда
				ПарольПолучен = Истина;
				ЗаполнитьЗначенияСвойств(СтруктураСертификата, ПараметрыВСоотв, "ПарольПолучен, ПарольПользователя");
			КонецЕсли;
			СоотвСертификатовИИхСтруктур.Вставить(СтрокаСертификата.СертификатПодписи, СтруктураСертификата);
			// Если обрабатывается служебный документ, то его можно подписать любым сертификатом,
			// в котором сохранен пароль.
			Если ЭтоСлужебный И ПарольПолучен Тогда
				МассивСертификатов = Новый Массив;
				МассивСертификатов.Добавить(СтрокаСертификата.СертификатПодписи);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСертификатов.Количество() > 0 Тогда
			Подписан = 0;
			
			Если НЕ Выборка.ЭДВладелецПодписан Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПарольПолучен И ЭлектронноеВзаимодействиеСлужебный.ВыполнятьКриптооперацииНаСервере() Тогда
				Подписан = ПодписатьЭДОпределеннымСертификатом(СсылкаНаЭД, МассивСертификатов[0], СтруктураСертификата);
				Если Подписан > 0 Тогда
					КолПодписанных = КолПодписанных + Подписан;
					// Если ЭД подписаны, то для определения сертификата авторизации и последующей отправки,
					// они будут получены запросом, на следующем этапе (Отправка ЭД).
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТЗ_ЭД.Добавить();
			НоваяСтрока.СсылкаНаЭД = СсылкаНаЭД;
			НоваяСтрока.ИдентификаторОтправителя = Выборка.ИдентификаторОтправителя;
			НоваяСтрока.СертификатыПодписи = МассивСертификатов;
			НоваяСтрока.ТребуетсяАвторизация = Выборка.ТребуетсяАвторизация;
			
			СоотвЭДИСоглашений.Вставить(СсылкаНаЭД, Выборка.ИдентификаторОтправителя);
			СтруктураМассивов = "";
			ИДМассиваЭД = СтрЗаменить(ИДМассиваЭД, "-", "_");
			
			Если НЕ СтруктураСтруктурМассивовЭДИСертификатов.Свойство(ИДМассиваЭД, СтруктураМассивов)
					Или ТипЗнч(СтруктураМассивов) <> Тип("Структура") Тогда
					
				СтруктураСтруктурМассивовЭДИСертификатов.Вставить(ИДМассиваЭД,
						Новый Структура("МассивСертификатов", МассивСертификатов));
				
				СтруктураМассивов = СтруктураСтруктурМассивовЭДИСертификатов[ИДМассиваЭД];
			КонецЕсли;
			
			СоответствиеЭДИДД = Неопределено;
			Если НЕ СтруктураМассивов.Свойство("СоответствиеЭДИДД", СоответствиеЭДИДД)
				Или ТипЗнч(СоответствиеЭДИДД) <> Тип("Соответствие") Тогда
				СтруктураМассивов.Вставить("СоответствиеЭДИДД", Новый Соответствие);
				СоответствиеЭДИДД = СтруктураМассивов.СоответствиеЭДИДД;
			КонецЕсли;
			
			Если МассивСертификатов.Количество() = 1 Тогда
				Значение = ПоместитьВоВременноеХранилище(ПолучитьДвоичныеДанныеФайла(СсылкаНаЭД, МассивСертификатов[0]),
				СсылкаНаЭД.УникальныйИдентификатор());
			Иначе
				Значение = Неопределено;
			КонецЕсли;
			
			СоответствиеЭДИДД.Вставить(СсылкаНаЭД, Значение);
			
			Если ВыделятьЭДКОтправкеСАвторизацией И Выборка.ТребуетсяАвторизация Тогда
				// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
				// надо будет попытаться их отправить, предварительно получив сертификат аутентификации по настройке ЭДО.
				МассивЭД = СоотвСоглашенийИМассивовЭДКОтправке.Получить(Выборка.ИдентификаторОтправителя);
				Если МассивЭД = Неопределено Тогда
					МассивЭД = Новый Массив;
				КонецЕсли;
				Если МассивЭД.Найти(СсылкаНаЭД) = Неопределено Тогда
					МассивЭД.Добавить(СсылкаНаЭД);
				КонецЕсли;
				СоотвСоглашенийИМассивовЭДКОтправке.Вставить(Выборка.ИдентификаторОтправителя, МассивЭД);
			Иначе
				// Подписание массива ЭД по текущему сертификату будет выполняться на клиенте, поэтому, после подписания
				// надо будет подготовить их к отправке и при необходимости отправить.
				Для Каждого Элемент Из СоответствиеЭДИДД Цикл
					Если СтруктураКОтправке.СПодписью.Найти(Элемент.Ключ) = Неопределено Тогда
						СтруктураКОтправке.СПодписью.Добавить(Элемент.Ключ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе 
			Если ПодозрениеНаОшибкиМаршрутаПодписания Тогда
				СоотвСообщенийОбменаИОшибокПодписи.Вставить(СсылкаНаЭД, "ОшибкиВМаршруте");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КолПодписанных > 0 Тогда
		СтруктураВозврата.Вставить("КолПодписанных", КолПодписанных);
	КонецЕсли;
	
	Если СоотвСообщенийОбменаИОшибокПодписи.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("СоотвСообщенийОбменаИОшибокПодписи", СоотвСообщенийОбменаИОшибокПодписи);
	КонецЕсли;
	
	Если СоотвЭДИСоглашений.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("СоотвЭДИСоглашений", СоотвЭДИСоглашений);
	КонецЕсли;
	Если СтруктураСтруктурМассивовЭДИСертификатов.Количество() > 0 Тогда
		СтруктураВозврата.Вставить("СтруктураСтруктурМассивовЭДИСертификатов", СтруктураСтруктурМассивовЭДИСертификатов);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Выполняет подготовку к подписанию и подписание электронного документа
//
Процедура ПодписатьЭДВыполнитьПроверкиДоступностиСертификатов(Знач Выборка, Знач ДопПараметры, Знач ДоступныеСертификаты, Знач ТЗ_Сертификатов)
	
	Перем ВидОперации, ЛокальныеСертификаты, МассивУдаления, МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер, ОблачныеСертификаты, ОблачныйСертификат, ОшибкаНастройкиКриптографии, ПодробныйТекст, СтрокаДляУдаления, СтрокаСертификат, ТекстСообщения;
	
	Если ТЗ_Сертификатов.Количество() = 0 Тогда
		ОшибкаНастройкиКриптографии = Ложь;
		Если ДоступныеСертификаты[0].Количество = 0 И Выборка.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'В процессе подписания электронного документа не найден ни один из доступных сертификатов ЭП.
			|Проверьте настройки сертификатов в учетных записях ЭДО.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли ДопПараметры.Свойство("ОшибкаНастройкиКриптографии", ОшибкаНастройкиКриптографии)
			И ОшибкаНастройкиКриптографии Тогда
			ТекстСообщения = НСтр("ru = 'Ошибка подписания электронного документа.
			|Проверьте настройки криптографии.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
		МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
		Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
			И НЕ ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
			МассивУдаления = Новый Массив;
			ЛокальныеСертификаты = Новый Массив;
			ОблачныеСертификаты  = Новый Соответствие;
			Для Каждого СтрокаСертификат Из ТЗ_Сертификатов Цикл
				Если ОблачныеСертификаты.Получить(СтрокаСертификат.СертификатПодписи) <> Неопределено Тогда
					МассивУдаления.Добавить(СтрокаСертификат);
				ИначеЕсли ЛокальныеСертификаты.Найти(СтрокаСертификат.СертификатПодписи) <> Неопределено Тогда
					Продолжить;
				ИначеЕсли ЭтоСертификатОблачногоСервиса(СтрокаСертификат.СертификатПодписи) Тогда
					МассивУдаления.Добавить(СтрокаСертификат);
					ОблачныеСертификаты.Вставить(СтрокаСертификат.СертификатПодписи, СтрокаСертификат.НаименованиеСертификата);
				Иначе
					ЛокальныеСертификаты.Добавить(СтрокаСертификат.СертификатПодписи);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаДляУдаления Из МассивУдаления Цикл
				ТЗ_Сертификатов.Удалить(СтрокаДляУдаления);
			КонецЦикла;
			Если ТЗ_Сертификатов.Количество() = 0 Тогда
				Для Каждого ОблачныйСертификат Из ОблачныеСертификаты Цикл 
					ПодробныйТекст = НСтр("ru = 'Сертификат ""%1"" связан с недопустимым средством ""облачной"" электронной подписи.
					|Согласно приказу Минфина РФ от 10.11.2015 № 174Н электронные документы должны быть подписаны
					|усиленной квалифицированной электронной подписью с использованием средств электронной подписи,
					|имеющих подтверждение (сертификат) соответствия требованиям, установленным в соответствии с Федеральным законом от 06.04.2011 N 63-ФЗ.'");
					ПодробныйТекст = СтрШаблон(ПодробныйТекст, ОблачныйСертификат.Значение);
					
					ТекстСообщения = НСтр("ru = 'Сертификат ""%1"" связан с недопустимым средством ""облачной"" электронной подписи.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, ОблачныйСертификат.Значение);
					
					ВидОперации = НСтр("ru = 'Подписание электронного документа'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
					ВидОперации, ПодробныйТекст, ТекстСообщения, , ОблачныйСертификат.Ключ);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет Утверждение ЭД
//
Функция УтвердитьЭД(Запрос,Знач ВременныеТаблицы, МассивСсылокЭД)
	
	МассивНовыхЭД        = Новый Массив;
	КолУтвержденныхЭД    = 0;
	ТекстыЗапросовПакета = Новый Массив(ВременныеТаблицы);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ЭД.ВладелецФайла КАК ЭлектронныйДокумент,
	|	ВТ_ЭД.Ссылка КАК ФайлЭлектронногоДокумента,
	|	ВТ_ЭД.СтатусЭД,
	|	ВТ_ЭД.ВидЭД,
	|	ВТ_ЭД.НаправлениеЭД,
	|	ВТ_ЭД.ТипЭлементаВерсииЭД,
	|	ВТ_ЭД.ТребуетсяОтветнаяПодпись
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|ГДЕ
	|	ВТ_ЭД.СтатусЭД В(&МассивСтатусов)";
	
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Сформирован);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Утвержден);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.Получен);
	МассивСтатусов.Добавить(Перечисления.СтатусыЭД.ЧастичноПодписан);
	
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	Запрос.УстановитьПараметр("МассивСсылокЭД", МассивСсылокЭД);
	
	Запрос.Текст = СоединитьТекстЗапроса(ТекстыЗапросовПакета);
	ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
	КолУтвержденныхРанее = 0;
	
	УтвержденныеСФ = Новый Массив;
	ВерсииЭДОДляЗакрытия = Новый Массив;
	
	Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
		
		НовыйЭД = Неопределено;
		ФайлЭлектронногоДокумента = ТекСтрока.ФайлЭлектронногоДокумента;
		
		ЭтоСлужебныйДокумент = ЭтоСлужебныйДокумент(ТекСтрока.ТипЭлементаВерсииЭД);
		
		Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
			
			НачатьТранзакцию();
			Попытка
				ПризнакУстановлен = Ложь;
				УстановитьПризнакУтвержден(ТекСтрока, НовыйЭД, ПризнакУстановлен);
				Если ПризнакУстановлен = Неопределено Тогда
					ВызватьИсключение "";
				КонецЕсли;
				Если ЗначениеЗаполнено(НовыйЭД) Тогда
					МассивНовыхЭД.Добавить(НовыйЭД);
				КонецЕсли;
				Если ПризнакУстановлен Тогда
					ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Если ЗначениеЗаполнено(ТекстСообщения) Тогда
					Операция = НСтр("ru = 'Утверждение ЭД'");
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(Операция, ТекстОшибки, ТекстСообщения);
				КонецЕсли;
			КонецПопытки;
			
		Иначе
			КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
		КонецЕсли;
		
		// В массив новых ЭД добавляем Ответный титул
		Если НЕ ЭтоСлужебныйДокумент Тогда
			Если ЭтоТитулФНС(ТекСтрока.ЭлектронныйДокумент) Тогда
				ОтветныйТитул = ВторойТитулДокумента(ФайлЭлектронногоДокумента);
				Если ЗначениеЗаполнено(ОтветныйТитул)
					И МассивНовыхЭД.Найти(ОтветныйТитул) = Неопределено Тогда
					МассивНовыхЭД.Добавить(ОтветныйТитул);
				КонецЕсли;
			Иначе
				МассивНовыхЭД.Добавить(ФайлЭлектронногоДокумента);
			КонецЕсли;
		КонецЕсли;
		
		// В массив новых ЭД добавляем служебные ЭД
		Если ЭтоСлужебныйДокумент Тогда
			МассивНовыхЭД.Добавить(ФайлЭлектронногоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивНовыхЭД) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСсылокЭД, МассивНовыхЭД, Истина);
	КонецЕсли;
	
	ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТЗ_ЭД);
	
	Возврат КолУтвержденныхЭД;
	
	
КонецФункции

// Выполняет формирование электронного документа
//
Функция СоздатьФайлыЭлектронныхДокументов(МассивСсылокНаОбъект, ДопПараметры)
	
	Если ДопПараметры.Свойство("ПараметрыОбмена") Тогда
		НастройкиОбъектов = ДопПараметры.ПараметрыОбмена;
	Иначе
		МассивОснований = ОснованияБезЭлектронныхДокументов(МассивСсылокНаОбъект);
		Если Не ЗначениеЗаполнено(МассивОснований) Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеПереопределяемый.ПроверитьГотовностьИсточников(МассивОснований);
		
		НастройкиОбъектов = ПолучитьНастройкиОбмена(МассивОснований, ДопПараметры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиОбъектов) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МассивНовыхЭД = НовыйПрисоединенныеФайлыДляЭД(НастройкиОбъектов, ДопПараметры);
	
	Возврат МассивНовыхЭД;
	
КонецФункции

Функция ОснованияБезЭлектронныхДокументов(МассивСсылокНаОбъект)
	
	Если Не ЗначениеЗаполнено(МассивСсылокНаОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаОснований = Новый ТаблицаЗначений;
	ТаблицаОснований.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаОснований, МассивСсылокНаОбъект, "Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОснований.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ТаблицаОснований
		|ИЗ
		|	&ТаблицаОснований КАК ТаблицаОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаОснований.Ссылка КАК ВладелецЭД
		|ИЗ
		|	ВТ_ТаблицаОснований КАК ВТ_ТаблицаОснований
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|		ПО ВТ_ТаблицаОснований.Ссылка = СостоянияЭД.СсылкаНаОбъект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
		|		ПО ВТ_ТаблицаОснований.Ссылка = ЭлектронныйДокументВходящий.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|		ПО ВТ_ТаблицаОснований.Ссылка = ЭлектронныйДокументИсходящий.Ссылка
		|ГДЕ
		|	(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
		|		И ЭлектронныйДокументВходящий.Ссылка ЕСТЬ NULL
		|		И ЭлектронныйДокументИсходящий.Ссылка ЕСТЬ NULL)
		|	ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
		|	ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно)
		|	ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПолученОтказОтКонтрагента)
		|	ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент)";
	
	Запрос.УстановитьПараметр("ТаблицаОснований", ТаблицаОснований);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ВладелецЭД");
	
КонецФункции

// Выполняет получение настроек обмена для формирования ЭД
//
Функция ПолучитьНастройкиОбмена(МассивОснований, ДопПараметры)
	
	Если Не ЗначениеЗаполнено(МассивОснований) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыводитьСообщение = Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДопПараметры, "ИспользоватьПомощникУстраненияОшибок", Ложь);
	НастройкиОбъектов = Новый Соответствие;
	КэшНастроекОбмена = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "НастройкиОбмена");
	ВидЭД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ВидЭД", "");
	МассивОшибок = Новый Массив;
	ЕстьОшибки = Ложь;
	
	ОтправкаПоОднойНастройке = Ложь;
	КлючНастройкиОтправки = НовыйКлючНастройкиОтправки();
	
	Для Каждого СсылкаНаОбъект Из МассивОснований Цикл
		НастройкиОбмена = Неопределено;
		ПараметрыЭД = Неопределено;
		
		Если КэшНастроекОбмена <> Неопределено Тогда
			НастройкиОбмена = КэшНастроекОбмена.Получить(СсылкаНаОбъект);
			
		ИначеЕсли ОпределитьДействующуюНастройкуЭДО(СсылкаНаОбъект, ПараметрыЭД, ВидЭД, ВыводитьСообщение)
			И ПараметрыЭД.ЭтоАктуальныйВидЭД Тогда
			
			НастройкиОбмена = ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
			ДобавитьПредупрежденияПоНастройкеОбменаНаДату(СсылкаНаОбъект, НастройкиОбмена, МассивОшибок);
			
		ИначеЕсли Не ВыводитьСообщение Тогда
			
			ЕстьОшибки = Истина;
			ДобавитьОшибкуПолученияНастроекОбмена(СсылкаНаОбъект, ПараметрыЭД, МассивОшибок);
			
			Если ПараметрыЭД.ЭтоАктуальныйВидЭД Тогда
				
				Если КлючНастройкиОтправки.Отправитель = Неопределено Тогда
					КлючНастройкиОтправки.Отправитель = ПараметрыЭД.Организация;
					КлючНастройкиОтправки.Получатель  = ПараметрыЭД.Контрагент;
					КлючНастройкиОтправки.Договор     = ПараметрыЭД.ДоговорКонтрагента;
					
					ОтправкаПоОднойНастройке = Истина;
					
				ИначеЕсли КлючНастройкиОтправки.Отправитель <> ПараметрыЭД.Организация
					Или КлючНастройкиОтправки.Получатель <> ПараметрыЭД.Контрагент
					Или КлючНастройкиОтправки.Договор <> ПараметрыЭД.ДоговорКонтрагента Тогда
					
					ОтправкаПоОднойНастройке = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НастройкиОбмена = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена);
		НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		Возврат НастройкиОбъектов;
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ОшибкиПриФормированииДокументов") Тогда
		ДопПараметры.Вставить("ОшибкиПриФормированииДокументов", Новый Массив);
	КонецЕсли;
	
	Если ОтправкаПоОднойНастройке Тогда
		ОшибкаНастройкиОтправки = Новый Структура("ОшибкаНастройкиОтправки",
			Новый Структура("КлючНастройкиОтправки, ПараметрыЭД", КлючНастройкиОтправки, ПараметрыЭД));
		ДопПараметры.ОшибкиПриФормированииДокументов.Добавить(ОшибкаНастройкиОтправки);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопПараметры.ОшибкиПриФормированииДокументов, МассивОшибок);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьОшибкуПолученияНастроекОбмена(Ссылка, ПараметрыЭД, МассивОшибок)
	
	ДанныеОшибки = ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.НовыеПараметрыОшибки();
	Если ПараметрыЭД.ЭтоАктуальныйВидЭД Тогда
		ТекстОшибки = НСтр("ru = 'Не найдены настройки обмена'");
		ИмяРаздела = "НастройкиОтправки";
	Иначе
		ТекстОшибки = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТекстСообщенияВидЭДНеПоддерживается(ПараметрыЭД.ВидЭД,
			НСтр("ru = 'Отправка документа невозможна.'"));
		ИмяРаздела = "ОсновныеПоля";
	КонецЕсли;
	
	ДанныеОшибки.ТекстОшибки = ТекстОшибки;
	ОшибкиЗаполнения = ОбменСКонтрагентамиВнутренний.НовыеПараметрыОшибокЗаполнения(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеОшибки), ИмяРаздела);
	
	ПараметрыЭД.Вставить("ВерсияФормата", Неопределено);
	ПараметрыФормирования = Новый Структура("НастройкиОбмена", ПараметрыЭД);
	
	Ошибки = ОбменСКонтрагентамиВнутренний.НовыеПараметрыПомощникаУстраненияОшибок(Ссылка,
		ПараметрыФормирования, ОшибкиЗаполнения);
	
	МассивОшибок.Добавить(Ошибки.ОшибкиПриФормированииДокумента);
	
КонецПроцедуры

Процедура ДобавитьПредупрежденияПоНастройкеОбменаНаДату(Ссылка, НастройкиОбмена, МассивОшибок)
	
	Результат = ПредупрежденияПоНастройкеОбменаНаДату(НастройкиОбмена);
	
	СписокПредупреждений = Неопределено;
	Если Не ЗначениеЗаполнено(Результат) 
		ИЛИ Не Результат.Свойство("ПоИдентификатору", СписокПредупреждений) Тогда
		Возврат;
	КонецЕсли;
	
	СписокОшибок = Новый Массив;
	Для Каждого СтрокаТЧ Из СписокПредупреждений Цикл
		ДанныеОшибки = Новый Структура("ТекстОшибки, Заблокировать","", Ложь);
		ДанныеОшибки.ТекстОшибки = ПредставлениеПредупрежденияПоИмени(СтрокаТЧ.Ключ, СтрокаТЧ.Значение, ДанныеОшибки.Заблокировать);
		СписокОшибок.Добавить(ДанныеОшибки);
	КонецЦикла;
	
	ОшибкиЗаполнения = ОбменСКонтрагентамиВнутренний.НовыеПараметрыОшибокЗаполнения(
		СписокОшибок , "ПредупрежденияПоИдентификатору");
	ПараметрыФормирования = Новый Структура("НастройкиОбмена", НастройкиОбмена);
	Ошибки = ОбменСКонтрагентамиВнутренний.НовыеПараметрыПомощникаУстраненияОшибок(Ссылка,
		ПараметрыФормирования, ОшибкиЗаполнения, Истина);
	
	МассивОшибок.Добавить(Ошибки.ОшибкиПриФормированииДокумента);
	
КонецПроцедуры

Функция НовыйПрисоединенныеФайлыДляЭД(НастройкиОбъектов, ДопПараметры)
	
	МассивНовыхЭД = Новый Массив;
	
	МассивПД = Новый Массив;
	МассивСФ = Новый Массив;
	
	Для Каждого Элемент Из НастройкиОбъектов Цикл
		Если Не Элемент.Значение.Формировать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбменСКонтрагентамиВнутренний.ДокументЯвляетсяСчетомФактурой(Элемент.Ключ) Тогда
			МассивСФ.Добавить(Элемент.Ключ);
		Иначе 
			МассивПД.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КолНовыхЭД = 0;
	Если МассивПД.Количество() > 0 Тогда
		МассивНовыхЭД = СформироватьПрисоединенныеФайлы(МассивПД, НастройкиОбъектов, ДопПараметры);
		КолНовыхЭД = МассивНовыхЭД.Количество();
	КонецЕсли;
	
	// Исключение обработанных счетов-фактур при формировании УПД статус 1 (СЧФДОП).
	МассивОбработанныхСФ = Неопределено;
	Если КолНовыхЭД > 0
		И ДопПараметры.Свойство("МассивОбработанныхСФ", МассивОбработанныхСФ)
		И ЗначениеЗаполнено(МассивОбработанныхСФ) Тогда
		
		Счетчик = МассивСФ.Количество() - 1;
		Пока Счетчик >= 0 Цикл
			СтрокаТаблицы = МассивСФ[Счетчик];
			Если МассивОбработанныхСФ.Найти(МассивСФ[Счетчик]) <> Неопределено Тогда
				МассивСФ.Удалить(Счетчик);
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;
	КонецЕсли;
	
	// Если с.ф. формировались отдельно, занесем их в общий массив ЭД
	// для дальнейшей обработки.
	Если МассивСФ.Количество() > 0 Тогда
		МассивНовыхСФ = СформироватьПрисоединенныеФайлы(МассивСФ, НастройкиОбъектов, ДопПараметры);
		КолНовыхЭД = КолНовыхЭД + МассивНовыхСФ.Количество();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивНовыхЭД, МассивНовыхСФ);
	КонецЕсли;
	
	Возврат МассивНовыхЭД;
	
КонецФункции

// Выполняет формирование временных таблиц для подписания и отправки ЭД
//
Функция СформироватьОбщиеВременныеТаблицы(ИспользоватьМассивИсключаемыхВидовЭД = Ложь)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭД.Ссылка КАК Ссылка,
	|	ЭД.ВладелецФайла КАК ВладелецФайла,
	|	ЭД.НаправлениеЭД КАК НаправлениеЭД,
	|	ЭД.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ЭД.ПодписанЭП КАК ПодписанЭП,
	|	ЭД.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ЭД.СтатусЭД КАК СтатусЭД
	|ПОМЕСТИТЬ ВТ_ЭДВременнаяИтоговая
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭД
	|		ПО СостоянияЭД.ЭлектронныйДокумент = ЭД.ВладелецФайла
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И ЭД.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)
	|	И НЕ СостоянияЭД.СостояниеВерсииЭД В (&СостоянияВерсийЭД)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЭД.Ссылка,
	|	ЭД.ВладелецФайла,
	|	ЭД.НаправлениеЭД,
	|	ЭД.ЭлектронныйДокументВладелец,
	|	ЭД.ПодписанЭП,
	|	ЭД.ТипЭлементаВерсииЭД,
	|	ЭД.СтатусЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭД
	|ГДЕ
	|	ЭД.Ссылка В(&МассивСсылокЭД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭДВременная.Ссылка КАК Ссылка,
	|	ВТ_ЭДВременная.ВладелецФайла КАК ВладелецФайла,
	|	ВТ_ЭДВременная.НаправлениеЭД КАК НаправлениеЭД,
	|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец КАК ЭлектронныйДокументВладелец,
	|	ВТ_ЭДВременная.ПодписанЭП КАК ПодписанЭП,
	|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД КАК ТипЭлементаВерсииЭД,
	|	ВТ_ЭДВременная.СтатусЭД КАК СтатусЭД,
	|	ЭлектронныйДокументВходящий.Организация КАК Организация,
	|	ЭлектронныйДокументВходящий.Контрагент КАК Контрагент,
	|	ЭлектронныйДокументВходящий.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЭлектронныйДокументВходящий.ВидЭД КАК ВидЭД,
	|	ЭлектронныйДокументВходящий.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
	|	ЭлектронныйДокументВходящий.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ЭлектронныйДокументВходящий.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Интеркампани) КАК ЭтоИнтеркампани,
	|	ЭлектронныйДокументВходящий.ИдентификаторОрганизации КАК ИдентификаторОтправителя,
	|	ЭлектронныйДокументВходящий.ТребуетсяПодтверждение КАК ТребуетсяОтветнаяПодпись,
	|	ЭлектронныйДокументВходящий.ТребуетсяИзвещение КАК ТребуетсяИзвещениеОПолучении,
	|	NULL КАК МаршрутПодписания,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято) КАК Присоединен
	|ПОМЕСТИТЬ ВТ_ЭД
	|ИЗ
	|	ВТ_ЭДВременнаяИтоговая КАК ВТ_ЭДВременная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументВходящий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ПО (ЭлектронныйДокументВходящий.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации)
	|			И (ЭлектронныйДокументВходящий.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента)
	|ГДЕ
	|	НЕ ПриглашенияКОбменуЭлектроннымиДокументами.Статус ЕСТЬ NULL
	|		ИЛИ ЭлектронныйДокументВходящий.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Интеркампани)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЭДВременная.Ссылка,
	|	ВТ_ЭДВременная.ВладелецФайла,
	|	ВТ_ЭДВременная.НаправлениеЭД,
	|	ВТ_ЭДВременная.ЭлектронныйДокументВладелец,
	|	ВТ_ЭДВременная.ПодписанЭП,
	|	ВТ_ЭДВременная.ТипЭлементаВерсииЭД,
	|	ВТ_ЭДВременная.СтатусЭД,
	|	ЭлектронныйДокументИсходящий.Организация,
	|	ЭлектронныйДокументИсходящий.Контрагент,
	|	ЭлектронныйДокументИсходящий.ДоговорКонтрагента,
	|	ЭлектронныйДокументИсходящий.ВидЭД,
	|	ЭлектронныйДокументИсходящий.ПрикладнойВидЭД,
	|	ЭлектронныйДокументИсходящий.СпособОбменаЭД,
	|	ЭлектронныйДокументИсходящий.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Интеркампани),
	|	ЭлектронныйДокументИсходящий.ИдентификаторОрганизации,
	|	ЭлектронныйДокументИсходящий.ТребуетсяПодтверждение,
	|	ЭлектронныйДокументИсходящий.ТребуетсяИзвещение,
	|	ЭлектронныйДокументИсходящий.МаршрутПодписания,
	|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято)
	|ИЗ
	|	ВТ_ЭДВременнаяИтоговая КАК ВТ_ЭДВременная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|		ПО ВТ_ЭДВременная.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
	|		ПО (ЭлектронныйДокументИсходящий.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации)
	|			И (ЭлектронныйДокументИсходящий.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента)
	|ГДЕ
	|	НЕ ПриглашенияКОбменуЭлектроннымиДокументами.Статус ЕСТЬ NULL
	|		ИЛИ ЭлектронныйДокументИсходящий.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.Интеркампани)";
	
	Если ИспользоватьМассивИсключаемыхВидовЭД Тогда
		// Входящие ЭД вида ТОРГ12Продавец и АктИсполнитель - никогда не подписываются и не отправляются,
		// исключим их из последующих выборок:
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЭД.Ссылка В(&МассивСсылокЭД)",
		"ЭД.Ссылка В(&МассивСсылокЭД)
		|И (Выбор Когда ЭД.НаправлениеЭД = &НаправлениеВходящий
		|		И Выразить(ЭД.ВладелецФайла КАК Документ.ЭлектронныйДокументВходящий).ВидЭД В (&МассивИсключаемыхВидовЭД) 
		|		И ЭД.ТипЭлементаВерсииЭД = Значение(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
		|	Тогда Ложь
		|	Иначе Истина
		|	Конец)");
	КонецЕсли;
	
	МассивЗапросов = Новый Массив;
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	Возврат Новый ФиксированныйМассив(МассивЗапросов);
	
КонецФункции

Функция ИсключенияСостоянияВерсийЭД()
	
	СостоянияВерсийЭД = Новый Массив;
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяПодтверждение);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.Отклонен);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	СостоянияВерсийЭД.Добавить(Перечисления.СостоянияВерсийЭД.ПолученОтказОтКонтрагента);
	
	Возврат СостоянияВерсийЭД;
	
КонецФункции

Функция ТипыПервичныхЭД() Экспорт
	
	ТипыПервичныхЭД = Новый Массив;
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.СЧФУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ДОП);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	ТипыПервичныхЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	
	Возврат ТипыПервичныхЭД;
	
КонецФункции

Функция ИсключаемыеВидыЭД()

	МассивИсключаемыхВидовЭД = Новый Массив;
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав);
	МассивИсключаемыхВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	
	Возврат МассивИсключаемыхВидовЭД;

КонецФункции

Функция СпособыОбменаСАвторизацией()
	
	ОбменСАвторизацией = Новый Массив;
	ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
	ОбменСАвторизацией.Добавить(Перечисления.СпособыОбменаЭД.ЧерезСервис1СЭДО);
	Возврат ОбменСАвторизацией;
	
КонецФункции

Функция ВидыЭДСчетаФактуры()
	
	МассивВидовЭД = Новый Массив;
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.СчетФактура);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УКД);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.УПД);
	МассивВидовЭД.Добавить(Перечисления.ВидыЭД.КорректировочныйСчетФактура);
	Возврат МассивВидовЭД;
	
КонецФункции

// Меняет статуты у сформированных ЭД
//
Процедура ВыполнитьДействияПоСтатусамПриФормировании(Запрос,Знач ВременныеТаблицы)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ЭД.ВладелецФайла КАК ЭлектронныйДокумент,
	|	ВТ_ЭД.Ссылка КАК ФайлЭлектронногоДокумента,
	|	ВТ_ЭД.СтатусЭД,
	|	ВТ_ЭД.ВидЭД,
	|	ВТ_ЭД.НаправлениеЭД,
	|	ВТ_ЭД.ТипЭлементаВерсииЭД
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|ГДЕ
	|	ВТ_ЭД.СтатусЭД = &СтатусСформирован";
	
	Запрос.УстановитьПараметр("СтатусСформирован", Перечисления.СтатусыЭД.Сформирован);
	
	ТекстыЗапросовПакета = Новый Массив(ВременныеТаблицы);
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	Запрос.Текст = СоединитьТекстЗапроса(ТекстыЗапросовПакета);
	
	ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
	
	ВыполнитьДействияПоСтатусамПриФормированииИлиУтверждении(ТЗ_ЭД);
	
КонецПроцедуры

// Заполняет текст запроса доступных сертификатов
//
Функция ТекстЗапросаДоступныхСертификатов(ВременныеТаблицы)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сертификаты.Ссылка КАК Ссылка,
	|	Сертификаты.Наименование КАК Наименование,
	|	Сертификаты.Организация КАК Организация,
	|	Сертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	Сертификаты.Отозван КАК Отозван,
	|	Сертификаты.Отпечаток КАК Отпечаток,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	ЛОЖЬ КАК ЗапомнитьПарольКСертификату,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	Сертификаты.Программа КАК Программа
	|ПОМЕСТИТЬ ВТ_ДоступныеСертификаты
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|ГДЕ
	|	НЕ Сертификаты.Отозван
	|	И Сертификаты.Отпечаток В(&МассивОтпечатков)
	|	И НЕ Сертификаты.ПометкаУдаления
	|	И Сертификаты.Пользователь В (&ПустойПользователь, &ТекущийПользователь, &ПользовательНеУказан)
	|	И Сертификаты.ДействителенДо > &ТекущаяДата
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сертификаты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоступныеСертификаты.Ссылка КАК СертификатПодписи,
	|	ВТ_ДоступныеСертификаты.Отпечаток КАК Отпечаток,
	|	ВТ_ДоступныеСертификаты.Отозван КАК Отозван,
	|	ВТ_ДоступныеСертификаты.ДанныеСертификата КАК ДанныеСертификата,
	|	ВТ_ДоступныеСертификаты.Организация КАК ОрганизацияВСертификате,
	|	ВТ_ДоступныеСертификаты.Наименование КАК Наименование,
	|	ВТ_ДоступныеСертификаты.Программа КАК Программа,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|		ИНАЧЕ ВТ_ЭД.ВидЭД
	|	КОНЕЦ КАК ВидДокумента,
	|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
	|	ВТ_ЭД.ВладелецФайла КАК ВладелецФайла,
	|	ВТ_ЭД.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_ДоступныеСертификаты.Ссылка ЕСТЬ NULL
	|				ИЛИ ВидыЭДЭП.СертификатЭП ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СертификатДоступен,
	|	ВТ_ЭД.ИдентификаторОтправителя КАК ИдентификаторОтправителя
	|ПОМЕСТИТЬ ВТ_СертификатыПоЭД
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СертификатыУчетныхЗаписейЭДО КАК СертификатыУчетныхЗаписейЭДО
	|		ПО ВТ_ЭД.ИдентификаторОтправителя = СертификатыУчетныхЗаписейЭДО.ИдентификаторЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоступныеСертификаты КАК ВТ_ДоступныеСертификаты
	|		ПО (ВТ_ДоступныеСертификаты.Ссылка = СертификатыУчетныхЗаписейЭДО.Сертификат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО (ВидыЭДЭП.Использовать)
	|			И (ВЫБОР
	|				КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
	|					ТОГДА ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|				КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ)
	|					ТОГДА ВидыЭДЭП.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
	|				ИНАЧЕ ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|			КОНЕЦ)
	|			И (ВидыЭДЭП.СертификатЭП = СертификатыУчетныхЗаписейЭДО.Сертификат)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|		ПО ВТ_ЭД.Ссылка = СостояниеПодписанияЭД.Объект
	|			И (СостояниеПодписанияЭД.Текущий)
	|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
	|			И (СостояниеПодписанияЭД.Сертификат = ВТ_ДоступныеСертификаты.Ссылка
	|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДоступныеСертификаты.Ссылка,
	|	ВТ_ДоступныеСертификаты.Отпечаток,
	|	ВТ_ДоступныеСертификаты.Отозван,
	|	ВТ_ДоступныеСертификаты.ДанныеСертификата,
	|	ВТ_ДоступныеСертификаты.Организация,
	|	ВТ_ДоступныеСертификаты.Наименование,
	|	ВТ_ДоступныеСертификаты.Программа,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|		ИНАЧЕ ВТ_ЭД.ВидЭД
	|	КОНЕЦ,
	|	ВТ_ЭД.Ссылка,
	|	ВТ_ЭД.ВладелецФайла,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ПустаяСсылка),
	|	ИСТИНА,
	|	NULL
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДоступныеСертификаты КАК ВТ_ДоступныеСертификаты
	|		ПО (ВТ_ЭД.ЭтоИнтеркампани)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПодписываемыеВидыЭД КАК ВидыЭДЭП
	|		ПО (ВидыЭДЭП.Использовать)
	|			И ВТ_ЭД.ВидЭД = ВидыЭДЭП.ВидЭД
	|			И (ВидыЭДЭП.СертификатЭП = ВТ_ДоступныеСертификаты.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|		ПО ВТ_ЭД.Ссылка = СостояниеПодписанияЭД.Объект
	|			И (СостояниеПодписанияЭД.Текущий)
	|			И (СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, &ПустойПользователь))
	|			И (СостояниеПодписанияЭД.Сертификат = ВТ_ДоступныеСертификаты.Ссылка
	|				ИЛИ СостояниеПодписанияЭД.Сертификат = ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)
	|					И (СостояниеПодписанияЭД.Организация = ВТ_ДоступныеСертификаты.Организация
	|						ИЛИ СостояниеПодписанияЭД.Организация = &ПустаяОрганизация))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДоступныеСертификаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СертификатыПоЭД.ВладелецФайла КАК ВладелецФайла,
	|	ВТ_СертификатыПоЭД.ИдентификаторОтправителя КАК ИдентификаторОтправителя
	|ИЗ
	|	ВТ_СертификатыПоЭД КАК ВТ_СертификатыПоЭД
	|ГДЕ
	|	(ВТ_СертификатыПоЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|			ИЛИ ВТ_СертификатыПоЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СертификатыПоЭД.ВладелецФайла,
	|	ВТ_СертификатыПоЭД.ИдентификаторОтправителя
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ВТ_СертификатыПоЭД.СертификатДоступен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СертификатыПоЭД.СертификатПодписи КАК СертификатПодписи,
	|	ВТ_СертификатыПоЭД.Отпечаток КАК Отпечаток,
	|	ВТ_СертификатыПоЭД.Отозван КАК Отозван,
	|	ВТ_СертификатыПоЭД.ДанныеСертификата КАК ДанныеСертификата,
	|	ВТ_СертификатыПоЭД.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
	|	ВТ_СертификатыПоЭД.ВидДокумента КАК ВидДокумента,
	|	ВТ_СертификатыПоЭД.Наименование КАК Наименование,
	|	ВТ_СертификатыПоЭД.СсылкаНаЭД КАК СсылкаНаЭД,
	|	ВТ_СертификатыПоЭД.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВТ_СертификатыПоЭД.Программа КАК Программа
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	ВТ_СертификатыПоЭД КАК ВТ_СертификатыПоЭД
	|ГДЕ
	|	ВТ_СертификатыПоЭД.СертификатДоступен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВТ_СертификатыПоЭД.СсылкаНаЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СертификатыПоЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭД_ЭП.Отпечаток КАК УстановленныеПодписи,
	|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
	|	ВТ_Сертификаты.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВТ_Сертификаты.СертификатПодписи КАК СертификатПодписи,
	|	ВТ_Сертификаты.Отпечаток КАК Отпечаток,
	|	ВТ_Сертификаты.Отозван КАК Отозван,
	|	ВТ_Сертификаты.Программа КАК Программа,
	|	ВТ_ЭД.Организация КАК Организация,
	|	ВТ_ЭД.Контрагент КАК Контрагент,
	|	ВТ_Сертификаты.ОрганизацияВСертификате КАК ОрганизацияВСертификате,
	|	ВТ_ЭД.ЭтоИнтеркампани КАК ЭтоИнтеркампани,
	|	ВТ_ЭД.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.СпособОбменаЭД В (&СпособыОбменаСАвторизацией)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяАвторизация,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ЭД.ЭлектронныйДокументВладелец.ПодписанЭП, ЛОЖЬ)
	|	КОНЕЦ КАК ЭДВладелецПодписан,
	|	ВТ_Сертификаты.Наименование КАК НаименованиеСертификата,
	|	ВТ_ЭД.ВидЭД КАК ВидЭД,
	|	ВТ_Сертификаты.ДанныеСертификата КАК ДанныеСертификата
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭД КАК ВТ_ЭД
	|		ПО ВТ_Сертификаты.СсылкаНаЭД = ВТ_ЭД.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭлектронныеПодписи КАК ЭД_ЭП
	|		ПО (ВТ_ЭД.Ссылка = ЭД_ЭП.ПодписанныйОбъект)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ЭД.ЭтоИнтеркампани
	|				ТОГДА ИСТИНА
	|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
	|				ТОГДА ВТ_ЭД.ПодписанЭП
	|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
	|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|				ТОГДА ИСТИНА
	|			КОГДА НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|				ТОГДА ВЫБОР
	|						КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
	|							ТОГДА ВТ_Сертификаты.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|						ИНАЧЕ ВТ_ЭД.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВТ_ЭД.СтатусЭД В(&МассивСтатусов)
	|	И ВЫБОР
	|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
	|					И (ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ)
	|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД)
	|						ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД))
	|					И ВТ_ЭД.ВидЭД В (&ВидыЭДСчетаФактуры)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
	|	ВТ.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВТ.Организация КАК Организация,
	|	ВТ.Контрагент КАК Контрагент,
	|	ВТ.ЭтоИнтеркампани КАК ЭтоИнтеркампани,
	|	ВТ.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
	|	ВТ.ЭДВладелецПодписан КАК ЭДВладелецПодписан,
	|	ВТ.ВидЭД КАК ВидЭД,
	|	ВТ.ИдентификаторОтправителя КАК ИдентификаторОтправителя
	|ИЗ
	|	ВТ КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
	|	ВТ.СертификатПодписи КАК СертификатПодписи,
	|	ВТ.Отпечаток КАК Отпечаток,
	|	ВТ.Отозван КАК Отозван,
	|	ВТ.ОрганизацияВСертификате КАК Организация,
	|	ВТ.ДанныеСертификата КАК ДанныеСертификата,
	|	ВТ.НаименованиеСертификата КАК НаименованиеСертификата,
	|	ВТ.ВидЭД КАК ВидЭД,
	|	ЛОЖЬ КАК ПарольПолучен,
	|	НЕОПРЕДЕЛЕНО КАК ПарольПользователя,
	|	ВТ.Программа КАК Программа
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеСертификата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.СсылкаНаЭД КАК СсылкаНаЭД,
	|	ВТ.УстановленныеПодписи КАК УстановленныеПодписи,
	|	Сертификаты.Организация КАК Организация
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК Сертификаты
	|		ПО ВТ.УстановленныеПодписи = Сертификаты.Отпечаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ";
	
	ТекстыЗапросовПакета = Новый Массив(ВременныеТаблицы);
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	Возврат СоединитьТекстЗапроса(ТекстыЗапросовПакета);

КонецФункции

// Заполняет текст запроса готовых к отправке ЭД
//
Функция ТекстЗапросаОтправкиДокументов(ВременныеТаблицы)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИСТИНА КАК ИспользоватьЭП,
	|	ВТ_ЭД.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВТ_ЭД.ВидЭД КАК ВидДокумента,
	|	ВТ_ЭД.Ссылка КАК ЭД
	|ПОМЕСТИТЬ ВТ_НастройкиОбмена
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭД.Ссылка КАК СсылкаНаЭД,
	|	ВТ_ЭД.СтатусЭД КАК СтатусЭД,
	|	ВТ_ЭД.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|				ИЛИ ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяАвторизация,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|				ИЛИ ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|				ИЛИ ВТ_ЭД.ЭтоИнтеркампани
	|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
	|					И ВТ_ЭД.ПодписанЭП
	|				ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
	|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|					И ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УОУ)
	|				ИЛИ ВТ_ЭД.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ЭДВладелецЭД.ПодписанЭП, ЛОЖЬ)
	|						ТОГДА НЕ ВТ_ЭД.ПодписанЭП
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПодпись,
	|	ВЫБОР
	|		КОГДА ВТ_ЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|				И ВТ_ЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|				И НЕ ВТ_ЭД.ЭтоИнтеркампани
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяШифрование,
	|	ВТ_ЭД.ИдентификаторОтправителя КАК ИдентификаторОтправителя
	|ИЗ
	|	ВТ_ЭД КАК ВТ_ЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ВТ_ЭД.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|					ИЛИ ВТ_ЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО)
	|					ИЛИ ВТ_ЭД.ЭтоИнтеркампани
	|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеВходящий
	|						И ВТ_ЭД.ПодписанЭП
	|					ИЛИ ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
	|						И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|						И ИСТИНА
	|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
	|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
	|					И ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|				ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
	|			КОГДА ВТ_ЭД.НаправлениеЭД = &НаправлениеИсходящий
	|					И НЕ ВТ_ЭД.ТипЭлементаВерсииЭД В (&ТипыПервичныхЭД)
	|				ТОГДА ВЫБОР
	|						КОГДА ЭДВладелецЭД.ПодписанЭП
	|							ТОГДА ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеСПодписью)
	|						ИНАЧЕ ВТ_ЭД.СтатусЭД В (&СтатусыКОтправкеБезПодписи)
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА ВТ_ЭД.ЭтоИнтеркампани
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ЭД.Присоединен
	|		КОНЕЦ";
	
	ТекстыЗапросовПакета = Новый Массив(ВременныеТаблицы);
	ТекстыЗапросовПакета.Добавить(ТекстЗапроса);
	Возврат СоединитьТекстЗапроса(ТекстыЗапросовПакета);
	
КонецФункции

// Формирует структуру со свойствами, являющиеся ключом настройки отправки электронных документов.
// 
// Возвращаемое значение:
//   - Структура - параметры настройки обмена.
//     * Отправитель - ОпределяемыйТип.Организация, Неопределено - Ссылка на отправителя электронного документа.
//     * Получатель  - ОпределяемыйТип.УчастникЭДО, Неопределено - Ссылка на получателя электронного документа.
//     * Договор     - ОпределяемыйТип.ДоговорСКонтрагентом, Неопределено - Ссылка на договор.
//
Функция НовыйКлючНастройкиОтправки() Экспорт
	
	Возврат Новый Структура("Отправитель, Получатель, Договор");
	
КонецФункции

#КонецОбласти

#Область ПрочиеСлужебныеПроцедурыИФункции

// Находит ссылку на оператора по Идентификатору ЭДО
//
// Параметры:
//   ИдентификаторЭДО  - Строка - Идентификатор ЭДО.
//   ТаблицаОператоров - Строка - Таблица со всеми операторами для последующих поисков.
//
//  Возвращаемое значение:
//     СправочникСсылка - ссылка на справочник Операторы ЭДО.
//
Функция НайтиОператораЭДОПоИдентификатору(Знач ИдентификаторЭДО, ТаблицаОператоров = Неопределено)
	
	Результат = Неопределено;
	
	Если Не ЗначениеЗаполнено(ТаблицаОператоров) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОператорыЭДО.ИдентификаторОператора КАК Код
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО";
		
		ТаблицаОператоров = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого Оператор Из ТаблицаОператоров Цикл
		
		КодОператора = Оператор.Код;
		ДлинаКодаОператора = СтрДлина(КодОператора);
		
		Если Лев(ИдентификаторЭДО, ДлинаКодаОператора) = КодОператора Тогда
			
			Результат = Оператор.Код;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Отмена выполнения фонового задания.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор задания.
//
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует адрес для запроса установки уведомлений в 1С:ЭДО.
//
// Параметры:
//  ПараметрыУведомления - Структура - Значения уведомлений для установки.
//
Функция СформироватьАдресДляУстановкиУведомленийВСервисе1СЭДО(ПараметрыУведомления)
	
	Адрес = "";
	
	Для Каждого КлючЗначение Из ПараметрыУведомления Цикл
		
		Если ВРег(КлючЗначение.Ключ) = ВРег("Mail") Тогда
			Продолжить;
		КонецЕсли;
		
		Адрес = Адрес + ""+КлючЗначение.Ключ + "="+КлючЗначение.Значение + "&";
		
	КонецЦикла;
	
	Адрес = Адрес + "mail=" + ПараметрыУведомления.Mail;
	
	Возврат Адрес;
	
КонецФункции

// Выполняет соединение массива с текстами запросов
//
Функция СоединитьТекстЗапроса(ТекстыЗапросовПакета)
	
	Разделитель =
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	Возврат СтрСоединить(ТекстыЗапросовПакета, Разделитель);
	
КонецФункции

// Типы получаемых данных.
// 
// Возвращаемое значение:
//  Структура - описание типов:
//   * Простой         - простой тип.
//   * Строка          - тип Строка.
//   * Число           - тип Число.
//   * Булево          - тип Булево.
//   * Структура       - тип Структура.
//   * Дата            - тип Дата.
//   * ТаблицаЗначений - тип ТаблицаЗначений.
//
Функция Типы()
	
	Результат = Новый Структура;
	Результат.Вставить("Булево"         , Новый ОписаниеТипов("Булево"));
	Результат.Вставить("Число"          , Новый ОписаниеТипов("Число"));
	Результат.Вставить("Дата"           , Новый ОписаниеТипов("Дата"));
	Результат.Вставить("Строка"         , Новый ОписаниеТипов("Строка"));
	Результат.Вставить("Структура"      , Новый ОписаниеТипов("Структура"));
	Результат.Вставить("Массив"         , Новый ОписаниеТипов("Массив"));
	Результат.Вставить("Таблица"        , Новый ОписаниеТипов("ТаблицаЗначений"));
	Результат.Вставить("СпособыОбменаЭД", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	Результат.Вставить("ВидЭД"          , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	
	Возврат Результат;
	
КонецФункции

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды.
//   Отказ - Булево - признак ошибки выполнения.
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ)
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка данных.
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	ДвоичныеДанныеТела = Запрос.ПолучитьТелоКакДвоичныеДанные();
	Если ДвоичныеДанныеТела = Неопределено Тогда
		Таймаут = 10;
	Иначе 
		Таймаут = ОбменСКонтрагентамиВнутренний.ТаймаутПоРазмеруФайла(ДвоичныеДанныеТела.Размер());
	КонецЕсли;
	
	// Получение соединения для способа обмена
	Соединение = ОбменСКонтрагентамиВнутренний.ПолучитьСоединение(ПараметрыКоманды.СпособОбмена, Таймаут);
	
	// Выполнение запроса HTTP к сервису.
	Попытка
		
		Ответ = Соединение.ВызватьHTTPМетод(ПараметрыКоманды.Метод, Запрос);
		
		КодСостояния = Ответ.КодСостояния;
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ПараметрыКоманды.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Результат = ОбработатьРезультатОтветаСервиса(ПараметрыКоманды, Ответ, Отказ);
	
	Возврат Результат;
	

КонецФункции

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура - параметры команды.
//  Ответ			 - HTTPОтвет - возвращаемые данные сервиса.
//  Отказ			 - Булево - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьРезультатОтветаСервиса(Знач ПараметрыКоманды, Ответ, Отказ)
	
	ПолученныеДанные = Новый Структура;
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = Ответ.КодСостояния;
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		ПараметрыКоманды.Ошибки.Вставить(КодСостояния, СтрШаблон(НСтр("ru = 'Внутренняя ошибка сервиса: %1'"), Ответ.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		
		ТекстОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
		
		Если ТекстОшибки = Ложь Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Отказ = Истина;
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
			Если ПараметрыКоманды.ОбработкаРезультата = "КаталогОператоров" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ, Ложь);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаКаталогОператоров(ПолученныеДанные, Отказ);
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "ЧтениеУведомленийВСервисе1СЭДО" Тогда
			
				ЧтениеXML = Новый ЧтениеXML;
				ЧтениеXML.ОткрытьПоток(Ответ.ПолучитьТелоКакПоток());
				
				Попытка
					ПолученныеДанные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
				Исключение
					
					Отказ = Истина;
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'")+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
					
					ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ТекстСообщения);
							
					Возврат Неопределено;
				КонецПопытки;
				
				Результат = ПолученныеДанные;
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "СовместимостьОператоровЭДО" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаСовместимостьОператоров(ПолученныеДанные, Отказ);
				
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "КаталогФорматовЭД" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаКаталогФорматовЭД(ПолученныеДанные, Отказ);
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "КаталогВидовЭД" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаКаталогВидовЭД(ПолученныеДанные, Отказ);
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "СвязьТиповИФорматовЭД" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаСвязьТиповИФорматовЭД(ПолученныеДанные, Отказ);
				
			ИначеЕсли ПараметрыКоманды.ОбработкаРезультата = "ПолученияДанныхАбонентовВСервисНастроек" Тогда
				
				ПолученныеДанные = ОбъектИзJSONПоПотокуВПамяти(ПараметрыКоманды, Ответ.ПолучитьТелоКакПоток(), Отказ);
				
				Если Отказ Тогда
					Возврат Неопределено;
				КонецЕсли;
				
				Результат = ОбработкаРезультатаПолученияДанныхАбонентов(ПолученныеДанные, Отказ);
				
				
			КонецЕсли;
			
		Иначе
			
			Результат = КодСостояния = 200 Или Не ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено;
			
		КонецЕсли;
			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ОбъектИзJSONПоПотокуВПамяти(Знач ПараметрыКоманды, Знач Поток, Отказ, ПрочитатьВСоответствие = Ложь)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(Поток);
	
	Попытка
		ПолученныеДанные = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие,,
			, "ПреобразоватьВИдентификаторЗапросаОператораЭДО", ОбменСКонтрагентамиСлужебный,
			, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("id"),);
	Исключение
		
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Не удалось прочитать ответ от сервиса по причине:'") + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ТекстСообщения);
		
	КонецПопытки;
	
	Возврат ПолученныеДанные;
КонецФункции

// преобразует дату из тестового формата json с проверкой на отсутствие даты
//
// Параметры:
//  Строка          - Строка         - Строка Json
//  ФорматДаты  - ФорматДатыJson - Формат даты в строке JSON
//
// Возвращаемое значение:
//   Дата   - прочитанная Дата
//
Функция ДатаИзJsonСПроверкой(Строка, ФорматДаты)
	
	Результат = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Результат = ПрочитатьДатуJSON(Строка , ФорматДаты);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует идентификатор в формат используемый в сервисе настроек
//
// Параметры:
//  ИдентификаторЭДО  - Строка - Идентификатор учетной записи ЭДО
//
// Возвращаемое значение:
//   Строка   - Идентификатор учетной записи ЭДО в формате сервиса настроек
//
Функция ПреобразоватьВИдентификаторЗапросаСервисаНастроек(Знач ИдентификаторЭДО)
	
	ТаблицаОператоровЭДО = ОбменСКонтрагентамиСлужебныйПовтИсп.ТаблицаОператоровЭДО();
	
	ОператорЭДО = "";
	Для Каждого Оператор Из ТаблицаОператоровЭДО Цикл
		
		Если Лев(Врег(ИдентификаторЭДО), СтрДлина(Оператор.ИдентификаторОператора)) = Врег(Оператор.ИдентификаторОператора) Тогда
			ОператорЭДО = Оператор.ИдентификаторОператора;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ОператорЭДО)
		Или ВРег(ОператорЭДО) <> "2AE" Тогда
		Возврат ИдентификаторЭДО;
	КонецЕсли;
	
	Результат = ИдентификаторЭДО;
	
	Если Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1, 1) <> "-" Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ОператорЭДО);
		МассивСтрок.Добавить("-");
		МассивСтрок.Добавить(Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1));
		
		Результат = СтрСоединить(МассивСтрок, "");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует идентификатор в формат используемый Оператором ЭДО
//
// Параметры:
//  ИдентификаторЭДО  - Строка - Идентификатор учетной записи ЭДО в сервисе настроек
//
// Возвращаемое значение:
//   Строка   - Идентификатор учетной записи ЭДО в формате оператора ЭДО
//
Функция ПреобразоватьВИдентификаторЗапросаОператораЭДО(Свойство, ИдентификаторЭДО, ДополнительныеПараметры) Экспорт
	
	ТаблицаОператоровЭДО = ОбменСКонтрагентамиСлужебныйПовтИсп.ТаблицаОператоровЭДО();
	
	ОператорЭДО = "";
	Для Каждого Оператор Из ТаблицаОператоровЭДО Цикл
		
		Если Лев(ВРег(ИдентификаторЭДО), СтрДлина(Оператор.ИдентификаторОператора)) = ВРег(Оператор.ИдентификаторОператора) Тогда
			ОператорЭДО = Оператор.ИдентификаторОператора;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ОператорЭДО) Тогда
		Возврат ИдентификаторЭДО;
	КонецЕсли;
	
	Результат = ИдентификаторЭДО;
	
	Если Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 1, 1) = "-"
			И ВРег(ОператорЭДО) = "2AE" Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ОператорЭДО);
		МассивСтрок.Добавить(Сред(ИдентификаторЭДО, СтрДлина(ОператорЭДО) + 2));
		
		Результат = СтрСоединить(МассивСтрок, "");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработкиОтветаОтСервера

Функция ОбработкаРезультатаКаталогОператоров(Знач ПолученныеДанные, Отказ)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторОператора"              , Типы().Строка);
	Таблица.Колонки.Добавить("Представление"                        , Типы().Строка);
	Таблица.Колонки.Добавить("ИНН"                                 , Типы().Строка);
	Таблица.Колонки.Добавить("КПП"                                 , Типы().Строка);
	Таблица.Колонки.Добавить("ОГРН"                                , Типы().Строка);
	Таблица.Колонки.Добавить("Сертификат"                          , Типы().Строка);
	Таблица.Колонки.Добавить("СсылкаНаСтраницуТехническойПоддержки", Типы().Строка);
	Таблица.Колонки.Добавить("ОтправлятьДополнительныеСведения"    , Типы().Булево);
	Таблица.Колонки.Добавить("ДоступноПодключениеЧерез1С"          , Типы().Булево);
	Таблица.Колонки.Добавить("СпособОбменаЭД"                      , Типы().СпособыОбменаЭД);
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.operators Цикл
		
		СпособыОбменаЭД = Перечисления.СпособыОбменаЭД.ПустаяСсылка();
		Мета = Метаданные.Перечисления.СпособыОбменаЭД.ЗначенияПеречисления.Найти(ОператорЭДО.ExchangeMethod);
		
		Если Мета <> Неопределено Тогда
			СпособыОбменаЭД = Перечисления.СпособыОбменаЭД[ОператорЭДО.ExchangeMethod];
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.СсылкаНаСтраницуТехническойПоддержки = ОператорЭДО.additionalInfoUrl;
		НоваяСтрока.ИдентификаторОператора               = ОператорЭДО.id;
		НоваяСтрока.Представление                        = ОператорЭДО.name;
		НоваяСтрока.ИНН                                  = ОператорЭДО.inn;
		НоваяСтрока.КПП                                  = ОператорЭДО.kpp;
		НоваяСтрока.ОГРН                                 = ОператорЭДО.ogrn;
		НоваяСтрока.Сертификат                           = ОператорЭДО.certificateImprint;
		НоваяСтрока.СпособОбменаЭД                       = СпособыОбменаЭД;
		НоваяСтрока.ОтправлятьДополнительныеСведения     = ОператорЭДО.isSendAdditionalData;
		НоваяСтрока.ДоступноПодключениеЧерез1С           = ОператорЭДО.isConnectionAvailable;
		
	КонецЦикла;
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	
	Ответ = Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, СписокОператоров");
	Ответ.ДатаПоследнегоИзменения = lastChangeDate;
	Ответ.РазмерСтраницы          = ПолученныеДанные.pageSize;
	Ответ.СписокОператоров        = Таблица;
	
	Возврат Ответ;
	
КонецФункции

Функция ОбработкаРезультатаСовместимостьОператоров(Знач ПолученныеДанные, Отказ)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Оператор1"     , Типы().Строка);
	Таблица.Колонки.Добавить("Оператор2"     , Типы().Строка);
	Таблица.Колонки.Добавить("СвязьДоступна" , Типы().Булево);
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.servicesCompatibilities Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Оператор1     = ОператорЭДО.operatorId1;
		НоваяСтрока.Оператор2     = ОператорЭДО.operatorId2;
		НоваяСтрока.СвязьДоступна = ОператорЭДО.isAutomaticConnection;
		
	КонецЦикла;
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, СовместимостьОператоровЭДО", lastChangeDate, ПолученныеДанные.pageSize, Таблица);
	
КонецФункции

Функция ОбработкаРезультатаПолученияДанныхАбонентов(Знач ПолученныеДанные, Отказ)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИдентификаторЭДО"         , Типы().Строка);
	Таблица.Колонки.Добавить("ИНН"                      , Типы().Строка);
	Таблица.Колонки.Добавить("КПП"                      , Типы().Строка);
	Таблица.Колонки.Добавить("КраткоеОписание"          , Типы().Строка);
	Таблица.Колонки.Добавить("ПодробноеОписание"        , Типы().Строка);
	Таблица.Колонки.Добавить("СрокДействияСертификатов" , Типы().Дата);
	Таблица.Колонки.Добавить("ДатаПоследнейАктивности"  , Типы().Дата);
	Таблица.Колонки.Добавить("ОператорЭДО"              , Типы().Строка);
	Таблица.Колонки.Добавить("ПоддерживаемыеФорматыЭД"  , Типы().Массив);
	Таблица.Колонки.Добавить("ЭтоПользователь1С"        , Типы().Булево);
	
	ТаблицаОператоровЭДО = Неопределено;
	
	Для Каждого Абонент Из ПолученныеДанные.identifierInfos Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ИдентификаторЭДО         = Абонент.id;
		НоваяСтрока.ИНН                      = Абонент.inn;
		НоваяСтрока.КПП                      = Абонент.kpp;
		НоваяСтрока.КраткоеОписание          = Абонент.name;
		НоваяСтрока.ПодробноеОписание        = Абонент.description;
		
		Если ЗначениеЗаполнено(Абонент.certificateExpireDate) Тогда
			НоваяСтрока.СрокДействияСертификатов = ПрочитатьДатуJSON(Абонент.certificateExpireDate, ФорматДатыJSON.ISO);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Абонент.lastActivityDate) Тогда
			НоваяСтрока.ДатаПоследнейАктивности  = ПрочитатьДатуJSON(Абонент.lastActivityDate, ФорматДатыJSON.ISO);
		КонецЕсли;
		
		НоваяСтрока.ПоддерживаемыеФорматыЭД  = Абонент.documentTypes;
		НоваяСтрока.ЭтоПользователь1С        = Абонент.isUser1c;
		НоваяСтрока.ОператорЭДО              = НайтиОператораЭДОПоИдентификатору(Абонент.id, ТаблицаОператоровЭДО);
		
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции

Функция ОбработкаРезультатаКаталогФорматовЭД(Знач ПолученныеДанные, Отказ)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Формат"                , Типы().Строка);
	Таблица.Колонки.Добавить("ИдентификаторСервиса"  , Типы().Строка);
	Таблица.Колонки.Добавить("Представление"         , Типы().Строка);
	Таблица.Колонки.Добавить("ДатаНачалаДействия"    , Типы().Дата);
	Таблица.Колонки.Добавить("ДатаОкончанияДействия" , Типы().Дата);
	Таблица.Колонки.Добавить("Регламентированный"    , Типы().Булево);
	Таблица.Колонки.Добавить("ЭтоУПД"                , Типы().Булево);
	Таблица.Колонки.Добавить("ПространстваИмен"      , Типы().Строка);
	Таблица.Колонки.Добавить("ПриказОВведенииФормата", Типы().Строка);
	Таблица.Колонки.Добавить("СсылкаНаПриказОВведенииФормата"        , Типы().Строка);
	
	Для Каждого ОператорЭДО Из ПолученныеДанные.documentFormats Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Формат                = ОператорЭДО.nick;
		НоваяСтрока.Представление         = ОператорЭДО.name;
		НоваяСтрока.ИдентификаторСервиса  = ОператорЭДО.ueid;
		НоваяСтрока.Регламентированный    = ОператорЭДО.isRegulated;
		НоваяСтрока.ЭтоУПД                = ОператорЭДО.isUpd;
		НоваяСтрока.ПространстваИмен      = ОператорЭДО.namespace;
		НоваяСтрока.СсылкаНаПриказОВведенииФормата        = ОператорЭДО.descriptionLink;
		НоваяСтрока.ДатаНачалаДействия    = ДатаИзJsonСПроверкой(ОператорЭДО.startDate , ФорматДатыJSON.ISO);
		НоваяСтрока.ДатаОкончанияДействия = ДатаИзJsonСПроверкой(ОператорЭДО.expireDate, ФорматДатыJSON.ISO);
	КонецЦикла;
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, ФорматыЭлектронныхДокументов", lastChangeDate, ПолученныеДанные.pageSize, Таблица);
	
КонецФункции

Функция ОбработкаРезультатаСвязьТиповИФорматовЭД(Знач ПолученныеДанные, Отказ)
	
	СоответствиеВидовЭД = ВидыЭДИзСервисаНастроек();
	
	Если Не ЗначениеЗаполнено(СоответствиеВидовЭД) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидЭлектронногоДокумента"    , Типы().ВидЭД);
	Таблица.Колонки.Добавить("ФорматЭлектронногоДокумента" , Типы().Строка);
	Таблица.Колонки.Добавить("Приоритет"                   , Типы().Число);
	
	Для Каждого documentTypeFormats Из ПолученныеДанные.documentTypeFormats Цикл
		
		ВидЭД = СоответствиеВидовЭД.Получить(documentTypeFormats.typeUeid);
		
		Если Не ЗначениеЗаполнено(ВидЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ВидЭлектронногоДокумента    = ВидЭД;
		НоваяСтрока.ФорматЭлектронногоДокумента = documentTypeFormats.formatUeid;
		НоваяСтрока.Приоритет                   = documentTypeFormats.rank;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписокСвязейСервиса.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	СписокСвязейСервиса.ФорматЭлектронногоДокумента КАК ФорматЭлектронногоДокумента,
		|	СписокСвязейСервиса.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ СписокСвязейСервиса
		|ИЗ
		|	&СписокСвязейСервиса КАК СписокСвязейСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСвязейСервиса.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		|	ФорматыЭлектронныхДокументов.Формат КАК ФорматЭлектронногоДокумента,
		|	СписокСвязейСервиса.Приоритет КАК Приоритет
		|ИЗ
		|	СписокСвязейСервиса КАК СписокСвязейСервиса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО ((ВЫРАЗИТЬ(СписокСвязейСервиса.ФорматЭлектронногоДокумента КАК СТРОКА(40))) = ФорматыЭлектронныхДокументов.ИдентификаторСервиса)";
	
	Запрос.УстановитьПараметр("СписокСвязейСервиса", Таблица);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выгрузить();
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, СвязьВидовИФорматовЭД", lastChangeDate, ПолученныеДанные.pageSize, ВыборкаДетальныеЗаписи);
	
КонецФункции

Функция ОбработкаРезультатаКаталогВидовЭД(Знач ПолученныеДанные, Отказ)
	
	Данные = Новый Соответствие;
	
	Для Каждого documentTypes Из ПолученныеДанные.documentTypes Цикл
		
		ВидЭД = Неопределено;
		Мета = Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления.Найти(documentTypes.type);
		Если Мета <> Неопределено Тогда
			ВидЭД = Перечисления.ВидыЭД[documentTypes.type];
		КонецЕсли;
		
		Данные.Вставить(documentTypes.ueid, ВидЭД);
		
	КонецЦикла;
	
	lastChangeDate = ДатаИзJsonСПроверкой(ПолученныеДанные.lastChangeDate, ФорматДатыJSON.ISO);
	Возврат Новый Структура("ДатаПоследнегоИзменения, РазмерСтраницы, Данные", lastChangeDate, ПолученныеДанные.pageSize, Данные);
	
КонецФункции

#КонецОбласти

#Область ПрочиеЭкспортныеСлужебныеПроцедурыИФункции

// Преобразует представление адреса в структуру полей адреса
//
// Параметры:
//   АдресОрганизации - Строка - Представление адреса
//
//  Возвращаемое значение:
//     Структура -  Структура полей адреса:
//
Функция СведенияОбАдресеПоПредставлению(АдресОрганизации) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Истина, Истина, Истина);
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(АдресXML, ДополнительныеПараметры);
	
	Если АдресСтруктурой.Свойство("Индекс") Тогда
		ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Регион") Тогда
		ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("КодРегиона") Тогда
		ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Район") Тогда
		ДанныеОрганизации.Район = АдресСтруктурой.Район;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Город") Тогда
		ДанныеОрганизации.Город = АдресСтруктурой.Город;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
		ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Улица") Тогда
		ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
		ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
		ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
		ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

Функция СведенияОбАдресеПоЗначению(Знач ЗначениеАдреса)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("Индекс"         , "");
	ДанныеОрганизации.Вставить("Регион"         , "");
	ДанныеОрганизации.Вставить("КодРегиона"     , "");
	ДанныеОрганизации.Вставить("Район"          , "");
	ДанныеОрганизации.Вставить("Город"          , "");
	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
	ДанныеОрганизации.Вставить("Улица"          , "");
	ДанныеОрганизации.Вставить("Дом"            , "");
	ДанныеОрганизации.Вставить("Корпус"         , "");
	ДанныеОрганизации.Вставить("Квартира"       , "");
	
	ДополнительныеПараметры = Новый Структура("БезПредставлений, ПроверитьАдрес, КодыАдреса", Истина, Истина, Истина);
	АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдреса, ДополнительныеПараметры);
	
	Если АдресСтруктурой.Свойство("Индекс") Тогда
		ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Регион") Тогда
		ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("КодРегиона") Тогда
		ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Район") Тогда
		ДанныеОрганизации.Район = АдресСтруктурой.Район;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Город") Тогда
		ДанныеОрганизации.Город = АдресСтруктурой.Город;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
		ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Улица") Тогда
		ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
		ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
		ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
	КонецЕсли;
	Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
		ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
	КонецЕсли;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

// Возвращает измерения для поиска настроек по договору
//
// Параметры:
//   Договор - ОпределяемыйТип.ДоговорСКонтрагентом - Договор контрагента
//
//  Возвращаемое значение:
//     Структура -  Структура измерений:
//
Функция НастройкаПоДоговоруКонтрагента(Знач Договор) Экспорт
	
	ИмяРеквизитаДоговора = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ВладелецДоговораКонтрагента");
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИмяРеквизитаДоговора);
	КлючЗаписи = Новый Структура;

	КлючЗаписи.Вставить("Владелец", РеквизитыДоговора[ИмяРеквизитаДоговора]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	НастройкиОтправкиЭлектронныхДокументов.Отправитель КАК Отправитель,
		|	НастройкиОтправкиЭлектронныхДокументов.Получатель КАК Получатель,
		|	НастройкиОтправкиЭлектронныхДокументов.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументов.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КлючЗаписи.Владелец = Неопределено;
		КлючЗаписи.Вставить("Отправитель", ВыборкаДетальныеЗаписи.Отправитель);
		КлючЗаписи.Вставить("Получатель" , ВыборкаДетальныеЗаписи.Получатель );
		КлючЗаписи.Вставить("Договор"    , ВыборкаДетальныеЗаписи.Договор    );
	КонецЦикла;
	
	Возврат КлючЗаписи;
	
КонецФункции

// Формирует таблицу способов отражения входящих документов по имени профиля.
//
// Параметры:
//  Профиль	 - Строка - имя профиля настроек: "Автоматически", "Вручную", "Поставщик", "Покупатель".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая колонки "ВходящийДокумент" и "СпособОбработки".
//
Функция ТаблицаПредопределенногоПрофиля(Профиль) Экспорт 
	
	ТаблицаПрофиля = Новый ТаблицаЗначений;
	ТаблицаПрофиля.Колонки.Добавить("ВидДокумента"      , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	ТаблицаПрофиля.Колонки.Добавить("ПрикладнойВидЭД"   , Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип);
	ТаблицаПрофиля.Колонки.Добавить("СпособОбработки"   , Новый ОписаниеТипов("Строка"));
	ТаблицаПрофиля.Колонки.Добавить("ВидЭДДляСортировки", Новый ОписаниеТипов("Строка"));
	
	АктуальныеВидыЭД = Новый Соответствие; 
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАктуальныеВидыЭД(АктуальныеВидыЭД);
	
	АктуальныеВидыЭД.Удалить(Перечисления.ВидыЭД.УПД);
	АктуальныеВидыЭД.Удалить(Перечисления.ВидыЭД.УКД);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.КоммерческиеПредложения") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("КоммерческиеПредложенияСлужебный");
		МодульПодсистемы.ИспользуемыеВидыЭлектронныхДокументов(АктуальныеВидыЭД);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
		ВидЭД = КлючИЗначение.Ключ;
		Если ВидЭДИспользуетсяПоНаправлению(ВидЭД, Перечисления.НаправленияЭД.Входящий, АктуальныеВидыЭД)
			И ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И ВидЭД <> Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			И ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			СписокОпераций = СписокОперацийВидаЭД(ВидЭД,Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВРег(Профиль) = ВРег("Вручную") Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("ПервоначальноеЗаполнение") И СписокОпераций.Количество() > 2 Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("Поставщик") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			ИначеЕсли ВРег(Профиль) = ВРег("Покупатель") Тогда
				Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетФактура 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.УПД 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.УКД 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СчетНаОплату 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктИсполнитель 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.АктНаПередачуПрав 
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
					ИЛИ ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
					ИЛИ ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
					
					СпособОбработки = "Вручную";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ВидДокумента   = ВидЭД;
			НоваяСтрока.ВидЭДДляСортировки = ВидЭД;
			НоваяСтрока.СпособОбработки    = СпособОбработки;
			
		КонецЕсли;
	КонецЦикла;
	
	ПрикладныеВиды = ПрикладныеВидыЭлектронныхДокументов();
	Если ЗначениеЗаполнено(ПрикладныеВиды) Тогда
		Для Каждого ПрикладнойВид Из ПрикладныеВиды Цикл
			
			СписокОпераций = СписокОперацийВидаЭД(ПрикладнойВид, Истина);
			
			Для Каждого ЭлементСписка Из СписокОпераций Цикл
				Если ЭлементСписка.Пометка Тогда
					СпособОбработки = ЭлементСписка.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВРег(Профиль) = ВРег("Вручную") Тогда
				СпособОбработки = "Вручную";
			ИначеЕсли ВРег(Профиль) = ВРег("ПервоначальноеЗаполнение") И СписокОпераций.Количество() > 2 Тогда
				СпособОбработки = "Вручную";
			КонецЕсли;
			
			НоваяСтрока = ТаблицаПрофиля.Добавить();
			НоваяСтрока.ВидДокумента   = Перечисления.ВидыЭД.ПрикладнойЭД;;
			НоваяСтрока.ПрикладнойВидЭД    = ПрикладнойВид;
			НоваяСтрока.ВидЭДДляСортировки = ПрикладнойВид;
			НоваяСтрока.СпособОбработки    = СпособОбработки;
			
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПрофиля.Сортировать("ВидЭДДляСортировки");
	ТаблицаПрофиля.Колонки.Удалить("ВидЭДДляСортировки");
	
	Возврат ТаблицаПрофиля;
	
КонецФункции

// Формирует ЭД сохраняет его на диск и заполняет структуру параметры файла
//
Функция СформироватьЭДПоОснованиюИСохранитьВФайл(Знач ДокументОснования, Знач ТекущиеНастройкиОбмена, ДопПараметры) Экспорт
	
	МассивСсылокНаОбъект = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДокументОснования);
	
	ПараметрыОпределенияНастройки = Новый Структура("ВыводитьСообщения,ФлагДействующиеСоглашения", Ложь, Ложь);
	НастройкиОбмена = ОпределитьНастройкиОбменаЭДПоИсточнику(ДокументОснования, ПараметрыОпределенияНастройки);
	
	АктуализироватьФорматыЭДВНастройкахОбмена(НастройкиОбмена);
	Если НастройкиОбмена = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НастройкиОбмена, ТекущиеНастройкиОбмена);
	
	Результат = Новый Структура;
	Результат.Вставить("Успех"                , Неопределено);
	Результат.Вставить("МассивСсылокНаОбъект" , МассивСсылокНаОбъект);
	Результат.Вставить("НастройкиОбмена"      , НастройкиОбмена);
	Результат.Вставить("ДополнительныеДанные" , Неопределено);
	
	ПараметрыОбмена = Новый Соответствие;
	ПараметрыОбмена.Вставить(ДокументОснования, НастройкиОбмена);
	
	СформированныеЭД = СформироватьXMLФайлыДокументов(МассивСсылокНаОбъект, ПараметрыОбмена, ДопПараметры);
	Если ДопПараметры.Свойство("ДополнительныеДанные") Тогда
		Результат.Вставить("ДополнительныеДанные"      , ДопПараметры.ДополнительныеДанные);
	КонецЕсли;
	
	Успех = Истина;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		
		Если ДопПараметры.Свойство("ОшибкиПриФормированииДокументов") Тогда
			
			АдресОшибокФормирования = ПоместитьВоВременноеХранилище(
				ДопПараметры.ОшибкиПриФормированииДокументов, Новый УникальныйИдентификатор);
				
				Для Каждого СтрокаТЧ Из ДопПараметры.ОшибкиПриФормированииДокументов Цикл
					Если СтрокаТЧ.ОшибкиЗаполнения.Количество() = 1
						И СтрокаТЧ.ОшибкиЗаполнения.Свойство("Предупреждения") Тогда
						
					Иначе
						Успех = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Результат.Вставить("АдресОшибокФормирования", АдресОшибокФормирования);
			Результат.Вставить("Успех"                  , Успех И СформированныеЭД.Количество());
		КонецЕсли;
	КонецЕсли;
	
	Если СформированныеЭД.Количество() > 0 Тогда
		
		Результат.Вставить("Успех"  , Истина);
		Файлы = Новый Соответствие;
		
		Для Каждого Файл Из СформированныеЭД Цикл
			
			ОписаниеФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Файл.ПолноеИмяФайла);
			ЭД = Новый Структура;
			ЭД.Вставить("Наименование", ОписаниеФайла.ИмяБезРасширения);
			ЭД.Вставить("Расширение"  , ОписаниеФайла.Расширение);
			
			ЭД.Вставить("ДвоичныеДанныеФайла", Новый ДвоичныеДанные(Файл.ПолноеИмяФайла));
			
			Если Файл.Свойство("ПолноеИмяДопФайла") Тогда
				ЭД.Вставить("ДвоичныеДанныеФайлаДопДанных", Новый ДвоичныеДанные(Файл.ПолноеИмяДопФайла));
			Иначе
				ЭД.Вставить("ДвоичныеДанныеФайлаДопДанных", Неопределено);
			КонецЕсли;
			
			ЭД.Вставить("СтруктураЭД"      , Файл.СтруктураЭД);
			
			Файлы.Вставить(Файл.СтруктураЭД.ВидЭД, ЭД);
		КонецЦикла;
		
		АдресФайловЭД = ПоместитьВоВременноеХранилище(Файлы, Новый УникальныйИдентификатор);
		Результат.Вставить("АдресФайловЭД"  , АдресФайловЭД);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура ПроверитьИСоздатьНастройкиОбмена(Отправитель, Получатель, Договор, ВидДокумента, ПрикладнойВидЭД)
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена(Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ПустойДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК НастройкаСоздана
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокумента
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &ПустойДоговорКонтрагента
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокумента
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (УчетныеЗаписиЭДО.Организация = &Отправитель)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент = &Получатель)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента <> ПриглашенияКОбменуЭлектроннымиДокументами.ИНН)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено))";
	
	Запрос.УстановитьПараметр("ВидДокумента"   , ВидДокумента);
	Запрос.УстановитьПараметр("Отправитель"    , Отправитель);
	Запрос.УстановитьПараметр("Получатель"     , Получатель);
	Запрос.УстановитьПараметр("Договор"        , Договор);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", ПрикладнойВидЭД);
	Запрос.УстановитьПараметр("ПустойДоговорКонтрагента", ПустойДоговорКонтрагента);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатыЗапроса[0].Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = РезультатыЗапроса[1].Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СоздатьНастройкиОтправкиЭДО(Отправитель, Получатель, Договор,
				ВыборкаДетальныеЗаписи.ИдентификаторОрганизации, ВыборкаДетальныеЗаписи.ИдентификаторКонтрагента);
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СоздатьКонтрагентовДляПриглашений(ВыделенныеСтроки, Отказ) Экспорт
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторОрганизации", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(70)));
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторКонтрагента", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(70)));
	
	Для Каждого СтрокаТЧ Из ВыделенныеСтроки Цикл
		
		Если СтрокаТЧ.НовыйКонтрагент = 1 Тогда
			НоваяСтрока = ТаблицаИдентификаторов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаИдентификаторов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Идентификаторы.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	Идентификаторы.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента
		|ПОМЕСТИТЬ Идентификаторы
		|ИЗ
		|	&ТаблицаИдентификаторов КАК Идентификаторы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК ИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК Наименование
		|ИЗ
		|	Идентификаторы КАК Идентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ПО Идентификаторы.ИдентификаторОрганизации = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации
		|			И Идентификаторы.ИдентификаторКонтрагента = ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент) Тогда
			Возврат;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами";
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторОрганизации", ВыборкаДетальныеЗаписи.ИдентификаторОрганизации);
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторКонтрагента", ВыборкаДетальныеЗаписи.ИдентификаторКонтрагента);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ИдентификаторОрганизации = ВыборкаДетальныеЗаписи.ИдентификаторОрганизации;
			МенеджерЗаписи.ИдентификаторКонтрагента = ВыборкаДетальныеЗаписи.ИдентификаторКонтрагента;
			МенеджерЗаписи.Прочитать();
			
			Если МенеджерЗаписи.Выбран() Тогда
				
				РеквизитыКонтрагента = Новый Структура;
				РеквизитыКонтрагента.Вставить("Наименование", ВыборкаДетальныеЗаписи.Наименование);
				РеквизитыКонтрагента.Вставить("ИНН"         , ВыборкаДетальныеЗаписи.ИНН);
				РеквизитыКонтрагента.Вставить("КПП"         , ВыборкаДетальныеЗаписи.КПП);
				
				Контрагент = НовыйКонтрагентПоРеквизитам(РеквизитыКонтрагента);
				
				Если Не ЗначениеЗаполнено(Контрагент) Тогда
					ОтменитьТранзакцию();
					Возврат;
				КонецЕсли;
				
				МенеджерЗаписи.Контрагент = Контрагент;
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			
			Шаблон = НСтр("ru = 'Не удалось создать контрагента %1. Прием приглашения не возможен.'");
			ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание нового контрагента при принятии приглашения'"), ОписаниеОшибки(),
				СтрШаблон(Шаблон, ВыборкаДетальныеЗаписи.Наименование));
				
			Возврат;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создает нового контрагента по переданным реквизитам
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты контрагента для создания
//     * ИНН          - Строка - ИНН контрагента
//     * КПП          - Строка - КПП контрагента
//     * Наименование - Строка - Наименование контрагента
//
//  Возвращаемое значение:
//     СправочникСсылка.Контрагенты, Неопределено - Созданный контрагент, неопределено в случае возникновения ошибки
//
Функция НовыйКонтрагентПоРеквизитам(РеквизитыКонтрагента) Экспорт
	
	Отказ = Ложь;
	Контрагент = Неопределено;
	
	ОбменСКонтрагентамиПереопределяемый.СоздатьКонтрагентаПоРеквизитам(РеквизитыКонтрагента, Контрагент, Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось создать контрагента'"));
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Проверяет статус приглашений и формирует пакет ЭД или закрывает ЭД
Процедура ПроверитьПриглашенияИСформироватьПакетыЭД()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
		|	ЭДПрисоединенныеФайлы.Ссылка КАК ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|				ПО СостоянияЭД.ЭлектронныйДокумент = ЭДПрисоединенныеФайлы.ВладелецФайла
		|			ПО ЭлектронныйДокументИсходящий.Ссылка = СостоянияЭД.ЭлектронныйДокумент
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = ЭлектронныйДокументИсходящий.ИдентификаторОрганизации
		|			И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = ЭлектронныйДокументИсходящий.ИдентификаторКонтрагента
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Принято), ЗНАЧЕНИЕ(Перечисление.СтатусыПриглашений.Отклонено))
		|	И СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента)
		|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)";
	
	Запрос.Параметры.Вставить("ТипыПервичныхЭД", ТипыПервичныхЭД());
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивКОтправке = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбновитьВерсиюЭД(ВыборкаДетальныеЗаписи.ЭлектронныйДокумент, Истина);
		
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыПриглашений.Принято Тогда
			МассивКОтправке.Добавить(ВыборкаДетальныеЗаписи.ЭлектронныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКОтправке.Количество() > 0 Тогда
		СоздатьДокументыПакетовЭД(МассивКОтправке, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МастерНачальногоПодключения

// Выполнение проверок мастера начального подключения
Процедура ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(Параметры, АдресРезультата) Экспорт
	
	СтруктураВозврата = Новый Структура("ПроверкаСертификатов, УчетныеЗаписи, Приглашения, ОсновныеИдентификаторы, ОтпечаткиСертификатов");
	
	Если Параметры.ВариантПроверки = Неопределено Тогда
		
		Отпечатки = Параметры.ОтпечаткиНаКлиенте;
		Если ТипЗнч(Отпечатки) <> Тип("Соответствие") Тогда
			Отпечатки = Новый Соответствие;
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.РаботаВМоделиСервиса.ЭлектроннаяПодписьВМоделиСервиса") Тогда
			
			МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодписьВМоделиСервисаКлиентСервер");
			Если МодульЭлектроннаяПодписьВМоделиСервисаКлиентСервер.ИспользованиеВозможно()
				И ИспользованиеСертификатовОблачногоСервисаВозможно() Тогда
			
			ПолучитьЛичныеОтпечаткиВСервисе(Отпечатки);
			
			КонецЕсли;
			
		КонецЕсли;
		
		МассивОтпечатков = Новый Массив;
		Для Каждого Элемент Из Отпечатки Цикл
			
			МассивОтпечатков.Добавить(Элемент.Ключ);
			
		КонецЦикла;
		
		Попытка
			МассивОтпечатковСертификатовНаСервере = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов();
		Исключение
			МассивОтпечатковСертификатовНаСервере = Новый Массив;
		КонецПопытки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОтпечатков, МассивОтпечатковСертификатовНаСервере, Истина);
		
		СтруктураВозврата.ОтпечаткиСертификатов = МассивОтпечатков;
		
		ДоступныеСертификаты = ПользователюДоступенСертификатИлиЗаявлениеНаВыпуск(Параметры, МассивОтпечатков);
		СтруктураВозврата.Вставить("ПроверкаСертификатов", ДоступныеСертификаты);
		
	КонецЕсли;
	
	Если Параметры.ВариантПроверки = Неопределено Или Параметры.ВариантПроверки = "УчетныеЗаписи" Тогда
		
		ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Контрагент, 
			ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
			
		ОписаниеДанных           = НовоеОписаниеПолученияДанныхАбонентаВСервисеНастроек();
		ОписаниеДанных.СписокИНН = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]);
		
		Отказ = Ложь;
		ДанныеАбонентовИзСервисаНастроек(ОписаниеДанных, Отказ);
		
		Ответ = ДоступныеИдентификаторыЭДО(Параметры.Организация, Параметры.Контрагент);
		СтруктураВозврата.Вставить("УчетныеЗаписи", Ответ);
		
		РейтингУчетныхЗаписей = РейтингУчетныхЗаписей(Ответ.ИдентификаторыОтправителяДляРейтинга.ВыгрузитьКолонку("Значение"),
			Ответ.ИдентификаторыПолучателя.ВыгрузитьКолонку("Значение"));
		СтруктураВозврата.Вставить("РейтингУчетныхЗаписей", РейтингУчетныхЗаписей);
		
	КонецЕсли;
	
	Если Параметры.ВариантПроверки = Неопределено Или Параметры.ВариантПроверки = "Приглашения" Тогда
		
		Приглашения = ВсеПриглашенияКОбмену(Параметры.Организация, Параметры.Контрагент);
		СтруктураВозврата.Вставить("Приглашения", Приглашения);
		
	КонецЕсли;
	
	
	ПоместитьВоВременноеХранилище(СтруктураВозврата, АдресРезультата);
	
КонецПроцедуры

// Возвращает все отправленные приглашения к обмену ЭД между организацией и контрагентом
Функция ВсеПриглашенияКОбмену(Организация, Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (УчетныеЗаписиЭДО.Организация = &Организация)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент = &Контрагент)";
	
	Запрос.УстановитьПараметр("Контрагент"               , Контрагент);
	Запрос.УстановитьПараметр("Организация"              , Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторОрганизации");
	
КонецФункции

// Определяет есть ли доступный пользователю сертификат или заявление на выпуск сертификата
//
Функция ПользователюДоступенСертификатИлиЗаявлениеНаВыпуск(Параметры, МассивОтпечатков)
	
	КонечныеСостоянияЗаявления = Новый Массив;
	КонечныеСостоянияЗаявления.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.Исполнено);
	КонечныеСостоянияЗаявления.Добавить(Перечисления.СостоянияЗаявленияНаВыпускСертификата.ПустаяСсылка());
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	
	ПараметрыОрганизаций = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Организация,
		ИмяРеквизитаИННОрганизации);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДоступныхПользователюСертификатов();
	Запрос.УстановитьПараметр("МассивОтпечатков"           , МассивОтпечатков);
	Запрос.УстановитьПараметр("ТекущийПользователь"        , Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь"         , Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОрганизация"          , Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ТекущаяОрганизацияИНН"      , ПараметрыОрганизаций[ИмяРеквизитаИННОрганизации]);
	Запрос.УстановитьПараметр("ПользовательНеУказан"       , Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса"          , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("КонечныеСостоянияЗаявления" , КонечныеСостоянияЗаявления);
	ДоступныеСертификаты = Запрос.Выполнить().Выгрузить();
	
	Ответ                           = Новый Структура("Результат, ОжидаетсяВыпускСертификата", Ложь, Ложь);
	
	ОтборОптимистичный              = Новый Структура("Действует", Истина);
	ОтборОжидаетсяВыпускСертификата = Новый Структура("ОжидаетсяВыпускСертификата", Истина);
	
	Если ДоступныеСертификаты.НайтиСтроки(ОтборОптимистичный).Количество() > 0 Тогда
		Ответ.Результат = Истина;
	ИначеЕсли ДоступныеСертификаты.НайтиСтроки(ОтборОжидаетсяВыпускСертификата).Количество() > 0 Тогда
		Ответ.ОжидаетсяВыпускСертификата = Истина;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает текст запроса для поиска сертификатов
Функция ТекстЗапросаДоступныхПользователюСертификатов()
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток КАК Отпечаток,
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДатаСеанса КАК Действует,
	|	НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.СостояниеЗаявления В (&КонечныеСостоянияЗаявления) КАК ОжидаетсяВыпускСертификата
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	((СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ТекущийПользователь
	|				ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПустойПользователь
	|				ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПользовательНеУказан)
	|				И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
	|				И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|				И (СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток В (&МассивОтпечатков)
	|					ИЛИ НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.СостояниеЗаявления В (&КонечныеСостоянияЗаявления))
	|				И &ИмяРеквизитаИННОрганизации = &ТекущаяОрганизацияИНН
	|			ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &ПустаяОрганизация)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРеквизитаИННОрганизации", "СертификатыКлючейЭлектроннойПодписиИШифрования.Организация." + ИмяРеквизитаИННОрганизации);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область РаботаСПриглашениями

Функция ОтправитьПриглашенияОператоруЭДО(Параметры) Экспорт
	
	ТаблицаПриглашений    = Параметры.ТаблицаПриглашений;
	Маркер                = Параметры.Маркер;
	СпособОбменаЭД        = Параметры.СпособОбменаЭД;
	
	НеСоздаватьНастройкиАвтоматически = Неопределено;
	Параметры.Свойство("НеСоздаватьНастройкиАвтоматически", НеСоздаватьНастройкиАвтоматически);
	НеСоздаватьНастройкиАвтоматически = НеСоздаватьНастройкиАвтоматически = Истина;
	
	Если Не ЗначениеЗаполнено(ТаблицаПриглашений) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ИмяФайла = ОбменСКонтрагентамиВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТаблицаПриглашений, ДопПараметры);
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПутьДляПриглашений = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог("invite", Новый УникальныйИдентификатор);
	ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
	КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ИмяФайла);
	РезультатОтправки = ОбменСКонтрагентамиВнутренний.ОтправитьЧерезОператораЭДО(
																	Маркер,
																	ПутьДляПриглашений,
																	"SendContacts",
																	СпособОбменаЭД,,
																	ТаблицаПриглашений[0].ИдентификаторОрганизации);
	ЭлектронноеВзаимодействиеСлужебный.УдалитьВременныеФайлы(ПутьДляПриглашений);
	
	Если РезультатОтправки <> 0 Тогда
		
		СтатусПодключения = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
		
		Для каждого СтрокаТаблицы Из ТаблицаПриглашений Цикл
			ОбновитьПриглашенияЭДО(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы), СтатусПодключения, НеСоздаватьНастройкиАвтоматически);
		КонецЦикла;
		
		// Определим сколько отправлено приглашений.
		ОтправленоПриглашений = ТаблицаПриглашений.Количество();
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

Процедура ПринятьОтклонитьКонтактЧерезОператораЭДО(Знач Параметры, АдресРезультата) Экспорт
	
	ИмяРеквизитаИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Получатель, ИмяРеквизитаИНН + ", "+ ИмяРеквизитаКПП);

	Параметры.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИНН]);
	Параметры.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКПП]);
	Результат = ОбменСКонтрагентамиВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(Параметры.Идентификатор,
			Параметры.ПриглашениеПринято, Параметры.Маркер, Параметры.ИдентификаторОрганизации);
			
	Если Результат
			И Параметры.ПриглашениеПринято Тогда
		
		ОбновитьПриглашенияЭДО(Параметры , ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято"));
		
	ИначеЕсли Результат
			И Не Параметры.ПриглашениеПринято Тогда
		
		ОбновитьПриглашенияЭДО(Параметры , ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено"));
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ОбновитьПриглашенияЭДО(СтрокаТаблицы, СтатусПодключения, НеСоздаватьНастройкиАвтоматически = Ложь)
	
	МенеджерЗаписи = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.СоздатьМенеджерЗаписи();
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторКонтрагента) Тогда
		
		МенеджерЗаписи.ИдентификаторОрганизации = СтрокаТаблицы.ИдентификаторОрганизации;
		МенеджерЗаписи.ИдентификаторКонтрагента = Строка(СтрокаТаблицы.ИНН);
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
	МенеджерЗаписи.ИдентификаторОрганизации = СтрокаТаблицы.ИдентификаторОрганизации;
	МенеджерЗаписи.ИдентификаторКонтрагента = СтрокаТаблицы.ИдентификаторКонтрагента;
	
	МенеджерЗаписи.Прочитать();
	
	Если Не МенеджерЗаписи.Выбран() Тогда 
		МенеджерЗаписи.ИдентификаторОрганизации = СтрокаТаблицы.ИдентификаторОрганизации;
		МенеджерЗаписи.ИдентификаторКонтрагента = СтрокаТаблицы.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторКонтрагента) Тогда
		
		МенеджерЗаписи.ИдентификаторКонтрагента = Строка(СтрокаТаблицы.ИНН);
		МенеджерЗаписи.ИНН = СтрокаТаблицы.ИНН;
		МенеджерЗаписи.КПП = СтрокаТаблицы.КПП;
		
	КонецЕсли;
	МенеджерЗаписи.Контрагент               = СтрокаТаблицы.Получатель;
	МенеджерЗаписи.Статус               = СтатусПодключения;
	
	Если СтрокаТаблицы.Свойство("АдресЭП") Тогда
		МенеджерЗаписи.Email                = СтрокаТаблицы.АдресЭП;
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("ТекстПриглашения") Тогда
		МенеджерЗаписи.ТекстПриглашения     = СтрокаТаблицы.ТекстПриглашения;
	КонецЕсли;
	
	МенеджерЗаписи.ОписаниеОшибки       = "";
	МенеджерЗаписи.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
	МенеджерЗаписи.Ознакомиться         = Ложь;
	МенеджерЗаписи.Записать();
	
	ДанныеИД = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(МенеджерЗаписи.ИдентификаторОрганизации);
	
	Если ЗначениеЗаполнено(МенеджерЗаписи.Контрагент) Тогда
		ИННКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МенеджерЗаписи.Контрагент, "ИНН");
	Иначе
		ИННКонтрагента = МенеджерЗаписи.ИНН;
	КонецЕсли;
	
	Если МенеджерЗаписи.ИдентификаторКонтрагента <> ИННКонтрагента И Не НеСоздаватьНастройкиАвтоматически Тогда
		СоздатьНастройкиОтправкиЭДО(ДанныеИД.Организация, МенеджерЗаписи.Контрагент, Неопределено,
		МенеджерЗаписи.ИдентификаторОрганизации, МенеджерЗаписи.ИдентификаторКонтрагента);
		
		СоздатьНастройкиОтраженияВУчетеЭДО(ДанныеИД.Организация, МенеджерЗаписи.Контрагент, "", "");
	КонецЕсли;
КонецПроцедуры

Функция СтандартныйШаблонПриглашения() Экспорт

	Возврат НСтр("ru = 'Здравствуйте %1. Компания %2 предлагает начать обмен электронными документами.'");

КонецФункции

#КонецОбласти

#Область РаботаСПредупреждениями

// Получение текста предупреждений отправки документа по выбранным настройкам обмена ЭДО
//
// Параметры:
//  ТекущиеНастройкиОбмена  - Структура - настройки обмена выбранные в документе 
//    * ИдентификаторОтправителя - Строка - Идентификатор учетной записи ЭДО отправителя
//    * ИдентификаторПолучателя  - Строка - Идентификатор учетной записи ЭДО получателя
//    * ВерсияФормата            - Строка - Идентификатор версии формата ЭД
//    * ВидЭД                    - ПеречислениеСсылка - Вид электронного документа
// Возвращаемое значение:
//  Структура   - Найденные предупреждения.
//
Функция ПредупрежденияПоНастройкеОбменаНаДату(Знач ТекущиеНастройкиОбмена, ДатаПроверки = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаПроверки) Тогда
		ДатаПроверки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Результат = Новый Структура;
	
	ВариантыЗаполнения = ОбменСКонтрагентамиСлужебныйПовтИсп.РасшифровкаВариантовЗаполненияФорматовЭДО();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыЗаполнения.Формат КАК Формат,
		|	ВариантыЗаполнения.ВидЭД КАК ВидЭД,
		|	ВариантыЗаполнения.ВариантЗаполнения КАК ВариантЗаполнения
		|ПОМЕСТИТЬ ВариантыЗаполнения
		|ИЗ
		|	&ВариантыЗаполнения КАК ВариантыЗаполнения
		|ГДЕ
		|	ВариантыЗаполнения.ВидЭД = &ВидЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФорматыЭлектронныхДокументов.Представление КАК Отправитель_НовыйФормат_Представление,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК Отправитель_НовыйФормат_СсылкаНаПриказ
		|ПОМЕСТИТЬ ТекущийФормат
		|ИЗ
		|	РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов
		|		ПО СвязьВидовИФорматовЭД.ФорматЭлектронногоДокумента = ФорматыЭлектронныхДокументов.Формат
		|ГДЕ
		|	СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента = &ВидЭД
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвязьВидовИФорматовЭД.Приоритет УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВариантыЗаполнения.ВидЭД КАК ВидЭД,
		|	ФорматыЭлектронныхДокументовКонтрагента.Представление КАК Получатель_Формат_Представление,
		|	ФорматыЭлектронныхДокументовКонтрагента.СсылкаНаПриказОВведенииФормата КАК Получатель_Формат_СсылкаНаПриказ,
		|	ФорматыЭлектронныхДокументовКонтрагента.ДатаОкончанияДействия < &ДатаПроверки
		|		И ФорматыЭлектронныхДокументовКонтрагента.ДатаОкончанияДействия <> &ПустаяДата КАК Устарел,
		|	ФорматыЭлектронныхДокументовМой.Представление КАК Отправитель_Формат_Представление,
		|	ФорматыЭлектронныхДокументовМой.СсылкаНаПриказОВведенииФормата КАК Отправитель_Формат_СсылкаНаПриказ
		|ИЗ
		|	РегистрСведений.ПоддерживаемыеФорматыЭлектронныхДокументов КАК ПоддерживаемыеФорматыЭлектронныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВариантыЗаполнения КАК ВариантыЗаполнения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязьВидовИФорматовЭД КАК СвязьВидовИФорматовЭД
		|			ПО ВариантыЗаполнения.Формат = СвязьВидовИФорматовЭД.ФорматЭлектронногоДокумента
		|				И ВариантыЗаполнения.ВидЭД = СвязьВидовИФорматовЭД.ВидЭлектронногоДокумента
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументовКонтрагента
		|			ПО ВариантыЗаполнения.Формат = ФорматыЭлектронныхДокументовКонтрагента.Формат
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументовМой
		|			ПО (&Формат = ФорматыЭлектронныхДокументовМой.Формат)
		|		ПО ПоддерживаемыеФорматыЭлектронныхДокументов.Формат = ВариантыЗаполнения.Формат
		|			И ПоддерживаемыеФорматыЭлектронныхДокументов.ВариантЗаполнения = ВариантыЗаполнения.ВариантЗаполнения
		|ГДЕ
		|	ПоддерживаемыеФорматыЭлектронныхДокументов.ИдентификаторЭДО = &ИдентификаторПолучателя
		|	И НЕ ФорматыЭлектронныхДокументовКонтрагента.Регламентированный
		|
		|УПОРЯДОЧИТЬ ПО
		|	СвязьВидовИФорматовЭД.Приоритет УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////3
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФорматыЭлектронныхДокументов.Представление КАК Отправитель_Формат_Представление,
		|	ФорматыЭлектронныхДокументов.СсылкаНаПриказОВведенииФормата КАК Отправитель_Формат_СсылкаНаПриказ,
		|	ФорматыЭлектронныхДокументов.Регламентированный КАК Регламентированный,
		|	ТекущийФормат.Отправитель_НовыйФормат_Представление КАК Отправитель_НовыйФормат_Представление,
		|	ТекущийФормат.Отправитель_НовыйФормат_СсылкаНаПриказ КАК Отправитель_НовыйФормат_СсылкаНаПриказ,
		|	&ВидЭД КАК ВидЭД,
		|	ФорматыЭлектронныхДокументов.ПоддерживаетсяКонфигурацией КАК ПоддерживаетсяКонфигурацией
		|ИЗ
		|	РегистрСведений.ФорматыЭлектронныхДокументов КАК ФорматыЭлектронныхДокументов,
		|	ТекущийФормат КАК ТекущийФормат
		|ГДЕ
		|	ФорматыЭлектронныхДокументов.Формат = &Формат
		|	И ФорматыЭлектронныхДокументов.ДатаОкончанияДействия < &ДатаПроверки
		|	И ФорматыЭлектронныхДокументов.ДатаОкончанияДействия <> &ПустаяДата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////4
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АбонентыЭДО.СрокДействияСертификатов <= &ТекущаяДата
		|		И АбонентыЭДО.СрокДействияСертификатов <> &ПустаяДата КАК СрокДействияСертификатов,
		|	АбонентыЭДО.ДатаПоследнейАктивности <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2)
		|		И АбонентыЭДО.ДатаПоследнейАктивности <> &ПустаяДата КАК ДатаПоследнейАктивности,
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО,
		|	АбонентыЭДО.КраткоеОписание КАК КраткоеОписание
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО = &ИдентификаторПолучателя
		|	И АбонентыЭДО.ЭтоПользователь1С";
	
	Запрос.УстановитьПараметр("ВидЭД"                  , ТекущиеНастройкиОбмена.ВидЭД);
	Запрос.УстановитьПараметр("Формат"                 , ТекущиеНастройкиОбмена.ВерсияФормата);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ТекущиеНастройкиОбмена.ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ТекущаяДата"            , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаПроверки"           , ДатаПроверки);
	Запрос.УстановитьПараметр("ПустаяДата"             , Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ВариантыЗаполнения"     , ВариантыЗаполнения);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Записи = Новый Структура;
	
	АбонентыЭДО = РезультатыЗапроса[4].Выбрать();
	Пока АбонентыЭДО.Следующий() Цикл
		
		Если ЗначениеЗаполнено(АбонентыЭДО.КраткоеОписание) Тогда
			ТекстИдентификатора = СтрШаблон(НСтр("ru = '%1 (%2)'"), АбонентыЭДО.ИдентификаторЭДО, АбонентыЭДО.КраткоеОписание);
		Иначе
			ТекстИдентификатора = АбонентыЭДО.ИдентификаторЭДО;
		КонецЕсли;
		
		Если АбонентыЭДО.СрокДействияСертификатов Тогда
			Записи.Вставить("СрокДействияСертификатов", ТекстИдентификатора);
		КонецЕсли;
		
		Если АбонентыЭДО.ДатаПоследнейАктивности Тогда
			Записи.Вставить("ДатаПоследнейАктивности" , ТекстИдентификатора);
		КонецЕсли;
	КонецЦикла;
	
	Если Записи.Количество() Тогда
		Результат.Вставить("ПоИдентификатору", Записи);
	КонецЕсли;
	
	МойФормат = РезультатыЗапроса[3].Выгрузить();
	Записи = Новый Структура;
	
	Если МойФормат.Количество() > 0 Тогда
		Запись = МойФормат[0];
		
		УстаревшийФорматКонтрагента = Новый Структура;
		УстаревшийФорматКонтрагента.Вставить("ВидЭД"                                   , Запись.ВидЭД);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_НовыйФормат_Представление"  , Запись.Отправитель_НовыйФормат_Представление);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_НовыйФормат_СсылкаНаПриказ" , Запись.Отправитель_НовыйФормат_СсылкаНаПриказ);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_Представление"       , Запись.Отправитель_Формат_Представление);
		УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_СсылкаНаПриказ"       , Запись.Отправитель_Формат_СсылкаНаПриказ);
		УстаревшийФорматКонтрагента.Вставить("ПоддерживаетсяКонфигурацией"             , Запись.ПоддерживаетсяКонфигурацией);
		
		Если Запись.Регламентированный Тогда
			Записи.Вставить("УстаревшийФорматОтправителяРегламент", УстаревшийФорматКонтрагента);
		Иначе
			Записи.Вставить("УстаревшийФорматОтправителя", УстаревшийФорматКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	ФорматыАбонента = РезультатыЗапроса[2].Выгрузить();
	
	Если ФорматыАбонента.Количество() > 0 Тогда
		Запись = ФорматыАбонента[0];
		Если Запись.Устарел Тогда
			УстаревшийФорматКонтрагента = Новый Структура;
			УстаревшийФорматКонтрагента.Вставить("ВидЭД"                             , Запись.ВидЭД);
			УстаревшийФорматКонтрагента.Вставить("Получатель_Формат_Представление"   , Запись.Получатель_Формат_Представление);
			УстаревшийФорматКонтрагента.Вставить("Получатель_Формат_СсылкаНаПриказ"  , Запись.Получатель_Формат_СсылкаНаПриказ);
			УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_Представление" , Запись.Отправитель_Формат_Представление);
			УстаревшийФорматКонтрагента.Вставить("Отправитель_Формат_СсылкаНаПриказ" , Запись.Отправитель_Формат_СсылкаНаПриказ);
			
			Записи.Вставить("УстаревшийФорматКонтрагента", УстаревшийФорматКонтрагента);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Записи.Количество() Тогда
		Результат.Вставить("ПоДокументу", Записи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу с данными для расшифровки формата и вида ЭД в Формат, вариант заполнения и
//																				и в обратном направлении
//
// Возвращаемое значение:
//  ТаблицаЗначений   - Расшифровка вариантов заполнения.
//
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	ВариантыЗаполнения = Новый ТаблицаЗначений;
	ВариантыЗаполнения.Колонки.Добавить("Формат"            , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ВариантыЗаполнения.Колонки.Добавить("ВидЭД"             , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	
	//Перечисления.ВидыЭД.АктИсполнитель
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_REZRUISP_1_990_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
	НоваяСтрока.ВариантЗаполнения = "ПередачаРезультатовРабот";
	///////////////////////////////////////////////////////////////////////////////////
	
	//Перечисления.ВидыЭД.УПД
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.УПД;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.ДОП();
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.УПД;
	НоваяСтрока.ВариантЗаполнения = "ДОП2019";
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.УПД;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФДОП();
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.УПД;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФДОП();
	///////////////////////////////////////////////////////////////////////////////////

	
	// Перечисления.ВидыЭД.ТОРГ12Продавец
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_TOVTORGPR_1_992_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
	НоваяСтрока.ВариантЗаполнения = "ПередачаТоваров";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СчетФактура
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_SCHFDOPPR_1_995_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФ();
	
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_NSCHFDOPPR_1_997_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФ();
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.КорректировочныйСчетФактура
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФ();
	
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.ДОП();
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.УКД
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "ON_KORSCHFDOPPR_1_996_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.УКД;
	НоваяСтрока.ВариантЗаполнения = ОбменСКонтрагентамиВнутренний.СЧФДОП();
	///////////////////////////////////////////////////////////////////////////////////

	// Перечисления.ВидыЭД.КаталогТоваров
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	НоваяСтрока.ВариантЗаполнения = "Каталог";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.СчетНаОплату
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;
	НоваяСтрока.ВариантЗаполнения = "СчетНаОплату";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ПрайсЛист
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
	НоваяСтрока.ВариантЗаполнения = "Контрагент";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ЗаказТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
	НоваяСтрока.ВариантЗаполнения = "ЗаказТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтветНаЗаказ
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
	НоваяСтрока.ВариантЗаполнения = "ЗаказКлиента";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОПродажахКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "CML_2_08";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
	НоваяСтрока.ВариантЗаполнения = "ОтчетОСписанииКомиссионногоТовара";
	///////////////////////////////////////////////////////////////////////////////////
	
	// Перечисления.ВидыЭД.АктОРасхождениях
	НоваяСтрока = ВариантыЗаполнения.Добавить();
	НоваяСтрока.Формат = "DP_PRIRASXPRIN_1_994_01_05_01";
	НоваяСтрока.ВидЭД = Перечисления.ВидыЭД.АктОРасхождениях;
	НоваяСтрока.ВариантЗаполнения = "ДокументОПриемкеИРасхождениях";
	///////////////////////////////////////////////////////////////////////////////////
	
	ВариантыЗаполнения.Индексы.Добавить("Формат, ВидЭД");
	ВариантыЗаполнения.Индексы.Добавить("Формат, ВариантЗаполнения");
	
	Возврат ВариантыЗаполнения;
	
КонецФункции

Функция ПредставлениеПредупрежденияСрокДействияСертификатов(ПараметрПредупреждения)
	
	Возврат СтрШаблон(НСтр("ru = 'У учетной записи %1 отсутствуют действующие сертификаты. Документ можно отправить, но он не будет получен, пока контрагент не перевыпустит хотя бы один сертификат. Рекомендуем связаться с контрагентом и сообщить о данной проблеме.'"), ПараметрПредупреждения);
	
КонецФункции

Функция ПредставлениеПредупрежденияДатаПоследнейАктивности(ПараметрПредупреждения)
	
	Возврат СтрШаблон(НСтр("ru = 'Контрагент последний раз использовал  учетную запись %1  более 2 месяцев назад. Возможно он ей уже не пользуется'"), ПараметрПредупреждения);
	
КонецФункции

Функция ПредставлениеПредупрежденияУстаревшийФорматКонтрагента(УстаревшийФорматКонтрагента, Шрифт)
	
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(НСтр("ru = 'Контрагент использует для обмена документами'"));
	МассивСтрок.Добавить(" '");
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(УстаревшийФорматКонтрагента.ВидЭД),
		Новый Шрифт(Шрифт,,,Истина)));
		
	МассивСтрок.Добавить("' ");
	МассивСтрок.Добавить(НСтр("ru = 'устаревший формат'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматКонтрагента.Получатель_Формат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматКонтрагента.Получатель_Формат_Представление,
		,,, УстаревшийФорматКонтрагента.Получатель_Формат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматКонтрагента.Получатель_Формат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""" .");
	МассивСтрок.Добавить(НСтр("ru = 'Документ будет отправлен в формате'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматКонтрагента.Получатель_Формат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматКонтрагента.Отправитель_Формат_Представление,
			,,, УстаревшийФорматКонтрагента.Отправитель_Формат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматКонтрагента.Отправитель_Формат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""", ");
	МассивСтрок.Добавить(НСтр("ru = 'вследствие чего у получателя могут возникнуть проблемы при отображении документа. По возможности свяжитесь контрагентом и порекомендуйте обновить программное обеспечение.'"));
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ПредставлениеПредупрежденияУстаревшийФорматОтправителя(УстаревшийФорматОтправителя, Шрифт)
	
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(НСтр("ru = 'Для обмена документами'"));
	МассивСтрок.Добавить(" """);
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(УстаревшийФорматОтправителя.ВидЭД),
		Новый Шрифт(Шрифт,,,Истина)));
		
	МассивСтрок.Добавить(""" ");
	МассивСтрок.Добавить(НСтр("ru = 'используется устаревший формат'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматОтправителя.Отправитель_Формат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_Формат_Представление,
		,,, УстаревшийФорматОтправителя.Отправитель_Формат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_Формат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""". ");
	МассивСтрок.Добавить(НСтр("ru = 'Актуальным является формат'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_Представление,
			,,, УстаревшийФорматОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""". ");
	
	Если УстаревшийФорматОтправителя.ПоддерживаетсяКонфигурацией Тогда
		МассивСтрок.Добавить(НСтр("ru = 'Измените настройки отправки документа и повторите создание документ'"));
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'По возможности обновите конфигурацию.'"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ПредставлениеПредупрежденияУстаревшийФорматОтправителяРегламент(УстаревшийФорматОтправителя, Шрифт)
	
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(НСтр("ru = 'Для обмена документами'"));
	МассивСтрок.Добавить(" """);
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(УстаревшийФорматОтправителя.ВидЭД),
		Новый Шрифт(Шрифт,,,Истина)));
		
	МассивСтрок.Добавить(""" ");
	МассивСтрок.Добавить(НСтр("ru = 'используется устаревший формат'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматОтправителя.Отправитель_Формат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_Формат_Представление,
		,,, УстаревшийФорматОтправителя.Отправитель_Формат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_Формат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""". ");
	МассивСтрок.Добавить(НСтр("ru = 'Актуальным является формат'"));
	МассивСтрок.Добавить(" """);
	
	Если ЗначениеЗаполнено(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ) Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_Представление,
			,,, УстаревшийФорматОтправителя.Отправитель_НовыйФормат_СсылкаНаПриказ));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(УстаревшийФорматОтправителя.Отправитель_НовыйФормат_Представление));
	КонецЕсли;
		
	МассивСтрок.Добавить(""". ");
	Если УстаревшийФорматОтправителя.Свойство("КоличествоДокументов")
			И ЗначениеЗаполнено(УстаревшийФорматОтправителя.КоличествоДокументов) Тогда
			
		МассивСтрок.Добавить(НСтр("ru = '%1 отправить не возможно'"));
		МассивСтрок.Добавить(""". ");
		
	КонецЕсли;
	
	МассивСтрок.Добавить(НСтр("ru = 'Чтобы отправка документов стала возможна'"));
	МассивСтрок.Добавить(", ");
	
	Если УстаревшийФорматОтправителя.ПоддерживаетсяКонфигурацией Тогда
		МассивСтрок.Добавить(НСтр("ru = 'необходимо изменить настройки отправки документа'"));
	Иначе
		МассивСтрок.Добавить(НСтр("ru = 'необходимо обновить конфигурацию.'"));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ПредставлениеПредупрежденияПоИмени(Знач ИмяПредупреждения, Знач ПараметрПредупреждения, Блокирующее, Знач Шрифт = Неопределено) Экспорт
	
	Если Шрифт = Неопределено Тогда
		Шрифт = Новый Шрифт;
	КонецЕсли;
	
	Блокирующее = Ложь;
	
	Если ИмяПредупреждения = "СрокДействияСертификатов" Тогда
		Возврат ПредставлениеПредупрежденияСрокДействияСертификатов(ПараметрПредупреждения);
	ИначеЕсли ИмяПредупреждения = "ДатаПоследнейАктивности" Тогда
		Возврат ПредставлениеПредупрежденияДатаПоследнейАктивности(ПараметрПредупреждения);
	ИначеЕсли ИмяПредупреждения = "УстаревшийФорматКонтрагента" Тогда
		Возврат ПредставлениеПредупрежденияУстаревшийФорматКонтрагента(ПараметрПредупреждения, Шрифт);
	ИначеЕсли ИмяПредупреждения = "УстаревшийФорматОтправителя" Тогда
		Возврат ПредставлениеПредупрежденияУстаревшийФорматОтправителя(ПараметрПредупреждения, Шрифт);
	ИначеЕсли ИмяПредупреждения = "УстаревшийФорматОтправителяРегламент" Тогда
		Блокирующее = Истина;
		Возврат ПредставлениеПредупрежденияУстаревшийФорматОтправителяРегламент(ПараметрПредупреждения, Шрифт);
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СозданиеНастройкиОбмена

Процедура СоздатьНастройкиОтправкиЭДО(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента, Знач ИдентификаторОрганизации, Знач ИдентификаторКонтрагента, Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "Организация",
		Организация, Метаданные.ОпределяемыеТипы.Организация.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "Контрагент",
		Организация, Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "ИдентификаторОрганизации",
		ИдентификаторОрганизации, Новый ОписаниеТипов("Строка"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтправкиЭДО", "ИдентификаторКонтрагента",
		ИдентификаторКонтрагента, Новый ОписаниеТипов("Строка"));
		
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда 
		ДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение();
	КонецЕсли;
	
	ТекущаяТаблица = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНастройкиОтправкиДокументов();
	
	Данные            = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ИдентификаторОрганизации);
	ДанныеКонтрагента = РегистрыСведений.ОператорыЭДО.ИнформацияОбОператореЭДОУчетнойЗаписи(ИдентификаторКонтрагента);
	
	ВыгружатьДополнительныеСведения = Ложь;
	Если ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
		ВыгружатьДополнительныеСведения = ДанныеКонтрагента.ОтправлятьДополнительныеСведения;
	КонецЕсли;
	
	ТекущаяТаблица.ЗаполнитьЗначения(Организация                     , "Отправитель");
	ТекущаяТаблица.ЗаполнитьЗначения(Контрагент                      , "Получатель");
	ТекущаяТаблица.ЗаполнитьЗначения(ДоговорКонтрагента              , "ДоговорКонтрагента");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторОрганизации        , "ИдентификаторОтправителя");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторКонтрагента        , "ИдентификаторПолучателя");
	ТекущаяТаблица.ЗаполнитьЗначения(Данные.СпособОбменаЭД           , "СпособОбменаЭД");
	ТекущаяТаблица.ЗаполнитьЗначения(ВыгружатьДополнительныеСведения , "ВыгружатьДополнительныеСведения");
	
	ТекущаяТаблица = ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(Организация, Контрагент, ДоговорКонтрагента, ТекущаяТаблица);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам");
		ЭлементБлокировкиДанных.УстановитьЗначение("Отправитель", Организация);
		ЭлементБлокировкиДанных.УстановитьЗначение("Получатель" , Контрагент);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НастройкиОтправкиЭД = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
		НастройкиОтправкиЭД.Отбор.Отправитель.Установить(Организация);
		НастройкиОтправкиЭД.Отбор.Получатель.Установить(Контрагент);
		НастройкиОтправкиЭД.Загрузить(ТекущаяТаблица);
		НастройкиОтправкиЭД.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание настроек отправки электронных документов'"),
			ПодробноеПредставлениеОшибки(Информация), КраткоеПредставлениеОшибки(Информация));
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
		ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
	
	Параметры = Новый Структура();
	Параметры.Вставить("Контрагент", Контрагент);
	Параметры.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
	Параметры.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
	Параметры.Вставить("АдресХранилища", Неопределено);
	Параметры.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
	
	ПроверитьКонтрагентаФоновоеЗадание(Параметры);
КонецПроцедуры

Функция ТекущиеНастройкиОтправкиЭлектронныхДокументовПоВидам(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента, Знач ТаблицаНастроек) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация)
		Или Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат ТаблицаНастроек;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.ДоговорКонтрагента КАК Договор,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ТаблицаНастроек.ВерсияФормата КАК ВерсияФормата,
		|	ТаблицаНастроек.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаНастроек.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.МаршрутПодписания КАК МаршрутПодписания,
		|	ТаблицаНастроек.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	ТаблицаНастроек.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	ТаблицаНастроек.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	ТаблицаНастроек.Формировать КАК Формировать,
		|	ТаблицаНастроек.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
		|	ТаблицаНастроек.Приоритет КАК Приоритет,
		|	ТаблицаНастроек.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ПОМЕСТИТЬ ТаблицаНастроек
		|ИЗ
		|	&ТаблицаНастроек КАК ТаблицаНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента КАК ВидДокумента,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФормата КАК ВерсияФормата,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяОтветнаяПодпись КАК ТребуетсяОтветнаяПодпись,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ТребуетсяИзвещениеОПолучении КАК ТребуетсяИзвещениеОПолучении,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВыгружатьДополнительныеСведения КАК ВыгружатьДополнительныеСведения,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Формировать КАК Формировать,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ВерсияФорматаУстановленаВручную КАК ВерсияФорматаУстановленаВручную,
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаполнениеКодаТовара КАК ЗаполнениеКодаТовара
		|ПОМЕСТИТЬ ГотовыеНастройки
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.Договор КАК ДоговорКонтрагента,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ЕСТЬNULL(ГотовыеНастройки.ВерсияФормата, ТаблицаНастроек.ВерсияФормата) КАК ВерсияФормата,
		|	ЕСТЬNULL(ГотовыеНастройки.СпособОбменаЭД, ТаблицаНастроек.СпособОбменаЭД) КАК СпособОбменаЭД,
		|	ЕСТЬNULL(ГотовыеНастройки.ИдентификаторОтправителя, ТаблицаНастроек.ИдентификаторОтправителя) КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(ГотовыеНастройки.ИдентификаторПолучателя, ТаблицаНастроек.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	ЕСТЬNULL(ГотовыеНастройки.МаршрутПодписания, ТаблицаНастроек.МаршрутПодписания) КАК МаршрутПодписания,
		|	ЕСТЬNULL(ГотовыеНастройки.ТребуетсяОтветнаяПодпись, ТаблицаНастроек.ТребуетсяОтветнаяПодпись) КАК ТребуетсяОтветнаяПодпись,
		|	ЕСТЬNULL(ГотовыеНастройки.ТребуетсяИзвещениеОПолучении, ТаблицаНастроек.ТребуетсяИзвещениеОПолучении) КАК ТребуетсяИзвещениеОПолучении,
		|	ЕСТЬNULL(ГотовыеНастройки.ВыгружатьДополнительныеСведения, ТаблицаНастроек.ВыгружатьДополнительныеСведения) КАК ВыгружатьДополнительныеСведения,
		|	ЕСТЬNULL(ГотовыеНастройки.Формировать, ТаблицаНастроек.Формировать) КАК Формировать,
		|	ЕСТЬNULL(ГотовыеНастройки.ВерсияФорматаУстановленаВручную, ТаблицаНастроек.ВерсияФорматаУстановленаВручную) КАК ВерсияФорматаУстановленаВручную,
		|	ТаблицаНастроек.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ГотовыеНастройки.ЗаполнениеКодаТовара, ТаблицаНастроек.ЗаполнениеКодаТовара) КАК ЗаполнениеКодаТовара
		|ИЗ
		|	ТаблицаНастроек КАК ТаблицаНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГотовыеНастройки КАК ГотовыеНастройки
		|		ПО ТаблицаНастроек.ВидДокумента = ГотовыеНастройки.ВидДокумента
		|			И ТаблицаНастроек.ПрикладнойВидЭД = ГотовыеНастройки.ПрикладнойВидЭД";
	
	Запрос.УстановитьПараметр("Договор"         , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Отправитель"     , Организация);
	Запрос.УстановитьПараметр("Получатель"      , Контрагент);
	Запрос.УстановитьПараметр("ТаблицаНастроек" , ТаблицаНастроек);
	
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();
	ТаблицаНастроек.Сортировать("Приоритет");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		СтрокаТаблицы.ИдентификаторОтправителя = ВРег(СтрокаТаблицы.ИдентификаторОтправителя);
		СтрокаТаблицы.ИдентификаторПолучателя  = ВРег(СтрокаТаблицы.ИдентификаторПолучателя);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Процедура СформироватьЭлектронныеДокументыИВернутьСписокОшибок(Знач Параметры, АдресРезультата) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
	Если Параметры.Свойство("ДополнительныеДанные") Тогда
		ДопПараметры.Вставить("ДополнительныеДанные", Параметры.ДополнительныеДанные);
	КонецЕсли;
	
	Результат = ВыполнитьДействияПоЭД( Параметры.МассивДокументов,
		Новый Массив, "Сформировать", ДопПараметры, Неопределено, Новый Соответствие);
	
	Ответ = Новый Структура("Документы, ОшибкиПриФормированииДокументов");
	Ответ.Вставить("Документы", Параметры.МассивДокументов);
	
	Если Результат.Свойство("ОшибкиПриФормированииДокументов") Тогда
		
		ОшибкиПриФормированииДокументов = ПолучитьИзВременногоХранилища(Результат.ОшибкиПриФормированииДокументов);
		Ответ.Вставить("ОшибкиПриФормированииДокументов", ОшибкиПриФормированииДокументов);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Ответ, АдресРезультата);
	
КонецПроцедуры

Функция СсылкаНаОбъектНастройкиЭДО(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиЭДО КАК НастройкиЭДО
		|ГДЕ
		|	НастройкиЭДО.Организация = &Организация
		|	И НастройкиЭДО.Контрагент = &Контрагент
		|	И НастройкиЭДО.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	НовыйЭлемент = Справочники.НастройкиЭДО.СоздатьЭлемент();
	НовыйЭлемент.Организация        = Организация;
	НовыйЭлемент.Контрагент         = Контрагент;
	НовыйЭлемент.ДоговорКонтрагента = ДоговорКонтрагента;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Процедура СоздатьНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента, Отказ = Ложь) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтраженияВУчетеЭДО", "Организация",
		Организация, Метаданные.ОпределяемыеТипы.Организация.Тип);
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("СоздатьНастройкиОтраженияВУчетеЭДО", "Контрагент",
		Контрагент, Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
		
	ТекущаяТаблица = ТаблицаПредопределенногоПрофиля("ПервоначальноеЗаполнение");
	ТекущаяТаблица.Колонки.Добавить("Отправитель"              , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ТекущаяТаблица.Колонки.Добавить("Получатель"               , Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТекущаяТаблица.Колонки.Добавить("ИдентификаторОтправителя" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТекущаяТаблица.Колонки.Добавить("ИдентификаторПолучателя"  , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	ТекущаяТаблица.ЗаполнитьЗначения(Контрагент               , "Отправитель");
	ТекущаяТаблица.ЗаполнитьЗначения(Организация              , "Получатель");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторКонтрагента , "ИдентификаторОтправителя");
	ТекущаяТаблица.ЗаполнитьЗначения(ИдентификаторОрганизации , "ИдентификаторПолучателя");
	
	НоваяТаблица = ТекущиеНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента, ТекущаяТаблица);
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Отправитель" , Контрагент  );
		ЭлементБлокировки.УстановитьЗначение("Получатель"  , Организация );
		
		Блокировка.Заблокировать();
		
		НастройкиОтправкиЭД = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьНаборЗаписей();
		НастройкиОтправкиЭД.Отбор.Отправитель.Установить(Контрагент);
		НастройкиОтправкиЭД.Отбор.Получатель.Установить(Организация);
		НастройкиОтправкиЭД.Загрузить(НоваяТаблица);
		НастройкиОтправкиЭД.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Создание настроек отправки электронных документов'"),
			ПодробноеПредставлениеОшибки(Информация), КраткоеПредставлениеОшибки(Информация));
		Отказ = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ТекущиеНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, ИдентификаторОрганизации, ИдентификаторКонтрагента, ТаблицаНастроек)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ТаблицаНастроек.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ТаблицаНастроек.СпособОбработки КАК СпособОбработки
		|ПОМЕСТИТЬ ТаблицаНастроек
		|ИЗ
		|	&ТаблицаНастроек КАК ТаблицаНастроек
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНастроек.Отправитель КАК Отправитель,
		|	ТаблицаНастроек.Получатель КАК Получатель,
		|	ТаблицаНастроек.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(ТаблицаНастроек.ИдентификаторПолучателя, НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	ТаблицаНастроек.ВидДокумента КАК ВидДокумента,
		|	ТаблицаНастроек.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	ЕСТЬNULL(НастройкиПолученияЭлектронныхДокументов.СпособОбработки, ТаблицаНастроек.СпособОбработки) КАК СпособОбработки,
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки
		|ИЗ
		|	ТаблицаНастроек КАК ТаблицаНастроек
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|		ПО ТаблицаНастроек.Отправитель = НастройкиПолученияЭлектронныхДокументов.Получатель
		|			И ТаблицаНастроек.Получатель = НастройкиПолученияЭлектронныхДокументов.Отправитель
		|			И ТаблицаНастроек.ИдентификаторОтправителя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
		|			И (ТаблицаНастроек.ИдентификаторПолучателя = НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
		|				ИЛИ НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """")";
	
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторКонтрагента);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Отправитель", Контрагент);
	Запрос.УстановитьПараметр("Получатель", Организация);
	Запрос.УстановитьПараметр("ТаблицаНастроек", ТаблицаНастроек);
	
	РезультатыЗапроса = Запрос.Выполнить();
	
	ТаблицаНастроек = РезультатыЗапроса.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		СтрокаТаблицы.ИдентификаторОтправителя = ВРег(СтрокаТаблицы.ИдентификаторОтправителя);
		СтрокаТаблицы.ИдентификаторПолучателя  = ВРег(СтрокаТаблицы.ИдентификаторПолучателя);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

Функция ПредставлениеНастройкиОтправкиЭлектронныхДокументов(КлючНастройки) Экспорт

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(КлючНастройки.Получатель);
	МассивСтрок.Добавить(КлючНастройки.Отправитель);
	Если ЗначениеЗаполнено(КлючНастройки.Договор) Тогда
		МассивСтрок.Добавить(КлючНастройки.Договор);
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, " • ");

КонецФункции


#КонецОбласти

#Область Интеркампани

// Проверяет и создает настройки для интеркампани
//
// Параметры:
//  ОрганизацияОтправитель  - ОпределяемыйТип.УчастникЭДО - организация отправитель
//  ОрганизацияПолучатель   - ОпределяемыйТип.УчастникЭДО - организация получатель
//  ВидЭД  - Перечисление.ВидыЭД - Вид ЭД для проверки
//
Процедура ПроверитьСозданиеНастроекИнтеркампани(ОрганизацияОтправитель, ОрганизацияПолучатель, ВидЭД, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИСТИНА КАК Результат
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокумента";
	
	Запрос.УстановитьПараметр("ВидДокумента", ВидЭД);
	Запрос.УстановитьПараметр("Отправитель", ОрганизацияОтправитель);
	Запрос.УстановитьПараметр("Получатель", ОрганизацияПолучатель);
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	УстановитьПривилегированныйРежим(Истина);
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьПравоНастройкиОбмена Тогда
		ШаблонСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
			|Отправитель - %1.
			|Получатель - %2.
			|Обратитесь к администратору, так как у Вас недостаточно прав для выполнения операции.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОрганизацияОтправитель, ОрганизацияПолучатель);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	АктуальныеВидыЭД = ОбменСКонтрагентамиПовтИсп.ПолучитьАктуальныеВидыЭД();
	
	ИсходящиеДокументы = Новый ТаблицаЗначений;
	ИсходящиеДокументы.Колонки.Добавить("Отправитель"              , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ИсходящиеДокументы.Колонки.Добавить("Получатель"               , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ИсходящиеДокументы.Колонки.Добавить("ВидДокумента"             , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	ИсходящиеДокументы.Колонки.Добавить("ИдентификаторОтправителя" , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ИсходящиеДокументы.Колонки.Добавить("ИдентификаторПолучателя"  , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ИсходящиеДокументы.Колонки.Добавить("СпособОбменаЭД"           , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	ИсходящиеДокументы.Колонки.Добавить("МаршрутПодписания"        , Новый ОписаниеТипов("СправочникСсылка.МаршрутыПодписания"));
	ИсходящиеДокументы.Колонки.Добавить("Формировать"              , Новый ОписаниеТипов("Булево"));
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(ОрганизацияОтправитель);
	МассивОрганизаций.Добавить(ОрганизацияПолучатель);
	
	ПараметрыОрганизаций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОрганизаций,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации);
		
	ИдентификаторОрганизации = ИдентификаторОрганизацииИнтеркампани(
		ПараметрыОрганизаций.Получить(ОрганизацияОтправитель), ИмяРеквизитаИННОрганизации, ИмяРеквизитаКППОрганизации);
				
	ИдентификаторКонтрагента = ИдентификаторОрганизацииИнтеркампани(
		ПараметрыОрганизаций.Получить(ОрганизацияПолучатель), ИмяРеквизитаИННОрганизации, ИмяРеквизитаКППОрганизации);
					
	Для Каждого КлючИЗначение Из АктуальныеВидыЭД Цикл
		ЗначениеПеречисления = КлючИЗначение.Ключ;
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями
			Или ЗначениеПеречисления = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
			
				НоваяСтрока = ИсходящиеДокументы.Добавить();
				НоваяСтрока.Отправитель              = ОрганизацияОтправитель;
				НоваяСтрока.Получатель               = ОрганизацияПолучатель;
				НоваяСтрока.ВидДокумента             = ЗначениеПеречисления;
				НоваяСтрока.ИдентификаторОтправителя = ИдентификаторОрганизации;
				НоваяСтрока.ИдентификаторПолучателя  = ИдентификаторКонтрагента;
				
				НоваяСтрока.МаршрутПодписания        = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;
				НоваяСтрока.СпособОбменаЭД           = Перечисления.СпособыОбменаЭД.Интеркампани;
				НоваяСтрока.Формировать              = Истина;
				
			КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЭДО.Отправитель КАК Отправитель,
		|	НастройкиЭДО.Получатель КАК Получатель,
		|	НастройкиЭДО.ВидДокумента КАК ВидДокумента,
		|	НастройкиЭДО.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиЭДО.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	НастройкиЭДО.МаршрутПодписания КАК МаршрутПодписания,
		|	НастройкиЭДО.Формировать КАК Формировать
		|ПОМЕСТИТЬ НастройкиЭДО
		|ИЗ
		|	&НастройкиЭДО КАК НастройкиЭДО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЭДО.Отправитель КАК Отправитель,
		|	НастройкиЭДО.Получатель КАК Получатель,
		|	НастройкиЭДО.ВидДокумента КАК ВидДокумента,
		|	ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторОтправителя, НастройкиЭДО.ИдентификаторОтправителя) КАК ИдентификаторОтправителя,
		|	ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументовПоВидам.ИдентификаторПолучателя, НастройкиЭДО.ИдентификаторПолучателя) КАК ИдентификаторПолучателя,
		|	НастройкиЭДО.СпособОбменаЭД КАК СпособОбменаЭД,
		|	ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументовПоВидам.МаршрутПодписания, НастройкиЭДО.МаршрутПодписания) КАК МаршрутПодписания,
		|	ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументовПоВидам.Формировать, НастройкиЭДО.Формировать) КАК Формировать
		|ИЗ
		|	НастройкиЭДО КАК НастройкиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|		ПО НастройкиЭДО.Отправитель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель
		|			И НастройкиЭДО.Получатель = НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель
		|			И НастройкиЭДО.ВидДокумента = НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента";
	
	Запрос.УстановитьПараметр("НастройкиЭДО", ИсходящиеДокументы);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ИдентификаторОрганизацииИнтеркампани(ПараметрыОрганизации, ИмяРеквизитаИННОрганизации, ИмяРеквизитаКППОрганизации) Экспорт
	
	Ответ = ПараметрыОрганизации[ИмяРеквизитаИННОрганизации];
	
	Если ЗначениеЗаполнено(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]) Тогда
		Ответ = СтрШаблон(НСтр("ru = '%1_%2'"), ПараметрыОрганизации[ИмяРеквизитаИННОрганизации],
			ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область РаботаСНастройкамиОтраженияВУчете

Функция ПредложитьСохранитьНастройкуОтраженияВУчете(Отправитель, Получатель,
							ИдентификаторОтправителя, ИдентификаторПолучателя,
							ВидДокумента, ПрикладнойВидЭД) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД";
	
	Запрос.УстановитьПараметр("ВидДокумента"             , ВидДокумента);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя" , ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя"  , ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("Получатель"               , Получатель);
	Запрос.УстановитьПараметр("Отправитель"              , Отправитель);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Не ВыборкаДетальныеЗаписи.НеПредлагатьСохранятьНастройки;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьНастройкиПолученияДокументов(ТекущаяГранула, СпособОбработки, НеПредлагатьСохранятьНастройки, Отказ) Экспорт
	
	Если ТекущаяГранула = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиПолученияЭлектронныхДокументов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Получатель"              , ТекущаяГранула.Получатель);
		ЭлементБлокировки.УстановитьЗначение("Отправитель"             , ТекущаяГранула.Отправитель);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторОтправителя", ТекущаяГранула.ИдентификаторОтправителя);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПолучателя" , ТекущаяГранула.ИдентификаторПолучателя);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента"            , ТекущаяГранула.ВидДокумента);
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойВидЭД"         , ТекущаяГранула.ПрикладнойВидЭД);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяГранула);
		МенеджерЗаписи.Прочитать();
		
		Записать = Ложь;
		Если СпособОбработки <> Неопределено Тогда
			Записать = Истина;
			МенеджерЗаписи.СпособОбработки = СпособОбработки;
		КонецЕсли;
		
		Если НеПредлагатьСохранятьНастройки <> Неопределено Тогда
			Записать = Истина;
			МенеджерЗаписи.НеПредлагатьСохранятьНастройки = НеПредлагатьСохранятьНастройки;
		КонецЕсли;
		
		Если Записать Тогда
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Отказ = Истина;
		
		Информация = ИнформацияОбОшибке();
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление настроек отражения в учете'"),
			ПодробноеПредставлениеОшибки(Информация),
			НСтр("ru = 'Не удалось обновить настройки отражения в учете'"));
	КонецПопытки;
	
КонецПроцедуры

Функция ГранулаНастройкиОтраженияВУчете(Знач ПолучательЭД, Знач ОтправительЭД, Знач Организация,
														   Знач Контрагент, Знач ВидЭД, Знач ПрикладнойВидЭД) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки КАК НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель КАК Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель КАК Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента КАК ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД КАК ПрикладнойВидЭД,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки КАК СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = &ИдентификаторОтправителя
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = &ИдентификаторПолучателя
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПолученияЭлектронныхДокументов.НеПредлагатьСохранятьНастройки,
		|	НастройкиПолученияЭлектронныхДокументов.Получатель,
		|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
		|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
		|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента,
		|	НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД,
		|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки
		|ИЗ
		|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
		|ГДЕ
		|	НастройкиПолученияЭлектронныхДокументов.Получатель = &Получатель
		|	И НастройкиПолученияЭлектронныхДокументов.Отправитель = &Отправитель
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя = """"
		|	И НастройкиПолученияЭлектронныхДокументов.ВидДокумента = &ВидДокумента
		|	И НастройкиПолученияЭлектронныхДокументов.ПрикладнойВидЭД = &ПрикладнойВидЭД";
	
	Запрос.УстановитьПараметр("ВидДокумента"            , ВидЭД);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ОтправительЭД);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя" , ПолучательЭД);
	Запрос.УстановитьПараметр("Получатель"              , Организация);
	Запрос.УстановитьПараметр("Отправитель"             , Контрагент);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД"         , ПрикладнойВидЭД);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Таблица[0]);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаССервисом1СЭДО

// Сопоставление полученных от сервиса идентификаторов с уже созданными в учетной системе записями
Функция СопоставитьИдентификаторыСУжеДобавленнымиИОтфильтровать(Знач МассивИдентификаторов, Знач КПП)
	
	СписокИдентификаторов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АбонентыЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ПОМЕСТИТЬ ИдентификаторыПоКПП
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО В(&ИдентификаторыЭДО)
		|	И АбонентыЭДО.КПП = &КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА УчетныеЗаписиЭДО.ИдентификаторЭДО ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Существует,
		|	ИдентификаторыПоКПП.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	ИдентификаторыПоКПП КАК ИдентификаторыПоКПП
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ИдентификаторыПоКПП.ИдентификаторЭДО = УчетныеЗаписиЭДО.ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторыЭДО", МассивИдентификаторов);
	Запрос.УстановитьПараметр("КПП",               КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Существует Тогда
			Представление = Новый ФорматированнаяСтрока(ВыборкаДетальныеЗаписи.ИдентификаторЭДО,,ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
			Пометка       = Истина;
		Иначе 
			Представление = ВыборкаДетальныеЗаписи.ИдентификаторЭДО;
			Пометка       = Ложь;
		КонецЕсли;
		СписокИдентификаторов.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторЭДО, Представление, Пометка);
	КонецЦикла;
	
	Возврат СписокИдентификаторов;
	
КонецФункции

// Формирование двоичного файла соглашения с оператором ЭДО
Процедура ПодготовитьДанныеПоСоглашениюНаПодключениеКЭДО(ДвоичныеДанныеСоглашенияНаПодключениеЭДО)
	
	// Подготовим данные для соглашения с оператором ЭДО
	НовыйПоток = Новый ПотокВПамяти;
	
	// LicenseCard
	СоглашениеЭДО = Новый ЗаписьXML;
	СоглашениеЭДО.ОткрытьПоток(НовыйПоток, "windows-1251");
	СоглашениеЭДО.ЗаписатьОбъявлениеXML();
	
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("LicenseCard");
	СоглашениеЭДО.ЗаписатьНачалоЭлемента("info");
	СоглашениеЭДО.ЗаписатьАтрибут("EDOAgreed", XMLСтрока(Истина));
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // info
	СоглашениеЭДО.ЗаписатьКонецЭлемента(); // LicenseCard
	
	СоглашениеЭДО.Закрыть();
	
	ДвоичныеДанныеСоглашенияНаПодключениеЭДО = НовыйПоток.ЗакрытьИПолучитьДвоичныеДанные();
	
КонецПроцедуры

// Формирование регистрационной информации для регистрационного пакета ЭДО
Процедура ПодготовитьДанныеПоРегистрационнойИнформации(РеквизитыПакета, ПараметрыОперации, ДанныеОператора, ДвоичныеДанныеДляОператораЭДО)
	
	УникальныйИдентификаторЗаявки1СЭДО = НовыйUUID();
	
	Если ПараметрыОперации.Свойство("АдресОрганизацииЗначение") 
		И ЗначениеЗаполнено(ПараметрыОперации.АдресОрганизацииЗначение) Тогда
		СтруктураАдреса = СведенияОбАдресеПоЗначению(ПараметрыОперации.АдресОрганизацииЗначение);
	Иначе
		СтруктураАдреса = СведенияОбАдресеПоПредставлению(ПараметрыОперации.АдресОрганизации);
	КонецЕсли;
	// Подготовим данные для 1СЭДО
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	ИмяРеквизитаКППОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	ИмяРеквизитаОГРНОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ОГРНОрганизации");
	ИмяРеквизитаНаименованиеОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	
	ПараметрыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОперации.Организация,
		ИмяРеквизитаИННОрганизации + ", " + ИмяРеквизитаКППОрганизации + ", " + ИмяРеквизитаНаименованиеОрганизации+ ", " + ИмяРеквизитаОГРНОрганизации);

	ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(ПараметрыОперации.СертификатКриптографии);
	
	РеквизитыПакета.Вставить("УникальныйИдентификаторЗаявки1СЭДО", УникальныйИдентификаторЗаявки1СЭДО);
	РеквизитыПакета.Вставить("НаименованиеОрганизации",  ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
	РеквизитыПакета.Вставить("ИННОрганизации",           СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
	РеквизитыПакета.Вставить("КППОрганизации",           СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
	РеквизитыПакета.Вставить("ОГРНОрганизации",          СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
	РеквизитыПакета.Вставить("ИдентификаторОрганизации", ?(ПараметрыОперации.Свойство("ИдентификаторОрганизации") И ЗначениеЗаполнено(ПараметрыОперации.ИдентификаторОрганизации),ПараметрыОперации.ИдентификаторОрганизации,""));
	РеквизитыПакета.Вставить("ОператорЭДО",              ДанныеОператора.Наименование);
	РеквизитыПакета.Вставить("ОператорЭДОИд",            ДанныеОператора.Код);
	РеквизитыПакета.Вставить("Сертификат",               Новый Массив);
	РеквизитыПакета.Вставить("ЭлектроннаяПочта",         ПараметрыОперации.ЭлектроннаяПочта);
	РеквизитыПакета.Вставить("Фамилия",                  ПараметрыСертификата.Фамилия);
	РеквизитыПакета.Вставить("Имя",                      ПараметрыСертификата.Имя);
	РеквизитыПакета.Вставить("Отчество",                 ПараметрыСертификата.Отчество);
	
	// Подготовим данные для оператора ЭДО
	ДеревоРегистрационнойИнформации = ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента("ОбменСКонтрагентами.РегистрационнаяИнформация");
	
	// Служебные данные
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ИдФайл",   "registration_" + УникальныйИдентификаторЗаявки1СЭДО);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсПрог", "1С:Предприятие 8");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ВерсФорм", "5.02");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КНД",      "1115109");
	
	// Данные по налоговому органу
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "КодНО", ПараметрыОперации.КодНалоговогоОргана);
	
	// Данные по оператору ЭДО
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.НаимОрг",   ДанныеОператора.Наименование);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИдОперЭДО", ДанныеОператора.Код);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ИННЮЛ",     ДанныеОператора.ИНН);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.КПП",       ДанныеОператора.КПП);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "ОперЭДО.ОГРН",      ДанныеОператора.ОГРН);
	
	// Данные по абоненту
	Если ЗначениеЗаполнено(РеквизитыПакета.ИдентификаторОрганизации) Тогда 
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "2");
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ИдУчастЭДО", РеквизитыПакета.ИдентификаторОрганизации);
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипЗаявления", "1");
	КонецЕсли;
	
	ЭтоФизЛицо = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ЭтоФизЛицо(ПараметрыОперации.Организация, ЭтоФизЛицо);
	Если Не ЭтоФизЛицо Тогда
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.НаимОрг", ПараметрыОрганизации[ИмяРеквизитаНаименованиеОрганизации]);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ИННЮЛ",   СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.КПП",     СокрЛП(ПараметрыОрганизации[ИмяРеквизитаКППОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ОГРН",    СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Индекс",     СтруктураАдреса.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.КодРегион",  СтруктураАдреса.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Район",      СтруктураАдреса.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Город",      СтруктураАдреса.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.НаселПункт", СтруктураАдреса.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Улица",      СтруктураАдреса.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Дом",        СтруктураАдреса.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Корпус",     СтруктураАдреса.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.АдрРФ.Кварт",      СтруктураАдреса.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ЮЛ.ФИООтв.Отчество", ПараметрыСертификата.Отчество);
		
	Иначе
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ИННФЛ",  СокрЛП(ПараметрыОрганизации[ИмяРеквизитаИННОрганизации]));
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ОГРНИП", СокрЛП(ПараметрыОрганизации[ИмяРеквизитаОГРНОрганизации]));
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ДатаПодклЭДО", ТекущаяДатаСеанса());
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Индекс",     СтруктураАдреса.Индекс);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.КодРегион",  СтруктураАдреса.КодРегиона);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Район",      СтруктураАдреса.Район);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Город",      СтруктураАдреса.Город);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.НаселПункт", СтруктураАдреса.НаселенныйПункт);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Улица",      СтруктураАдреса.Улица);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Дом",        СтруктураАдреса.Дом);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Корпус",     СтруктураАдреса.Корпус);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.АдрРФ.Кварт",      СтруктураАдреса.Квартира);
		
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Имя",      ПараметрыСертификата.Имя);
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "УчастЭДО.ТипУчастника.ИП.ФИО.Отчество", ПараметрыСертификата.Отчество);
	КонецЕсли;
	
	СертификатыПользователя = Новый ТаблицаЗначений;
	СертификатыПользователя.Колонки.Добавить("ДатаНачСертиф");
	СертификатыПользователя.Колонки.Добавить("ДатаКонСертиф");
	СертификатыПользователя.Колонки.Добавить("ОтпСертиф");
	СертификатыПользователя.Колонки.Добавить("Сертификат");
	СертификатыПользователя.Колонки.Добавить("Фамилия");
	СертификатыПользователя.Колонки.Добавить("Имя");
	СертификатыПользователя.Колонки.Добавить("Отчество");
	
	ТекущаяДата = ТекущаяДатаСеанса();
	МассивСертификатов = Новый Массив;
	Для каждого СтрокаТаблицы Из ПараметрыОперации.СертификатыПодписейОрганизации Цикл
		ПараметрыСертификата = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.РеквизитыСертификата(СтрокаТаблицы);
		
		Если ПараметрыСертификата.ДействителенДо < ТекущаяДата Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СертификатыПользователя.Добавить();
		
		ТекущийСертификат = Новый СертификатКриптографии(ПараметрыСертификата.ДвоичныеДанныеСертификата);
		НоваяСтрока.ДатаНачСертиф = ТекущийСертификат.ДатаНачала;
		НоваяСтрока.ДатаКонСертиф = ПараметрыСертификата.ДействителенДо;
		
		Отпечаток = НРег(СТРЗаменить(Строка(Base64Значение(ПараметрыСертификата.Отпечаток))," ",""));
		НоваяСтрока.ОтпСертиф = Отпечаток;
		
		СертификатТекст = Base64Строка(ПараметрыСертификата.ДвоичныеДанныеСертификата);
		НоваяСтрока.Сертификат = "-----BEGIN CERTIFICATE-----" + символы.пс
								+ СертификатТекст + символы.пс
								+ "-----END CERTIFICATE-----";
	
		РеквизитыПакета.Сертификат.Добавить(СертификатТекст);
		
		НоваяСтрока.Фамилия  = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Фамилия, " ");
		НоваяСтрока.Имя      = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Имя, " ");
		НоваяСтрока.Отчество = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("_", ПараметрыСертификата.Отчество, " ");
		
		Если МассивСертификатов.Найти(СертификатТекст) = Неопределено Тогда
			МассивСертификатов.Добавить(СертификатТекст);
		КонецЕсли;
		
	КонецЦикла;
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоРегистрационнойИнформации, СертификатыПользователя, "УчастЭДО.СертифДолжн");
	
	// Данные по подписанту
	ДолжностьПоСертификату = НСтр("ru = 'не указана'");
	Если ЗначениеЗаполнено(ПараметрыСертификата.Должность) Тогда
		ДолжностьПоСертификату = ПараметрыСертификата.Должность;
	КонецЕсли;
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.Должность",    ДолжностьПоСертификату);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Фамилия",  ПараметрыСертификата.Фамилия);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Имя",      ПараметрыСертификата.Имя);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоРегистрационнойИнформации, "Подписант.ФИО.Отчество", ПараметрыСертификата.Отчество);
	
	ДвоичныеДанныеДляОператораЭДО = ОбменСКонтрагентамиВнутренний.РегистрационныеДанныеДляОператораЭДО(ДеревоРегистрационнойИнформации);
	
КонецПроцедуры


// Разбор полученного файла с идентификаторами абонента
Функция ПолучитьИдентификаторыАбонента(ДанныеФайла)
	
	МассивИдентификаторов = Новый Массив;
	Если НЕ ПустаяСтрока(ДанныеФайла) Тогда
		
		ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеФайла);
		Если ДеревоXML <> Неопределено Тогда
			
			УзелАбоненты = ДеревоXML.Строки.Найти("Abonents", "Имя");
			Если УзелАбоненты <> Неопределено Тогда
				Для каждого УзелАбонент Из УзелАбоненты.Строки Цикл
					УзелИдентификаторАбонента = УзелАбонент.Строки.Найти("Identifier", "Имя");
					Если УзелИдентификаторАбонента <> Неопределено Тогда
						МассивИдентификаторов.Добавить(УзелИдентификаторАбонента.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

#КонецОбласти

#Область УсловияИспользования

Функция УчетныеЗаписиЭДОБезПринятыхУсловийСервиса(ИдентификаторыОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО КАК ИдентификаторЭДО
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО В (&ИдентификаторыОрганизаций)
		|	И НЕ УчетныеЗаписиЭДО.ПринятыУсловияИспользования";
	
	Запрос.УстановитьПараметр("ИдентификаторыОрганизаций", ИдентификаторыОрганизаций);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ИдентификаторЭДО");
	
КонецФункции

#КонецОбласти

#Область ПрекращениеПоддержкиПрямогоОбмена

Функция КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена()
	Возврат "ОзнакомленСПрекращениемПрямогоОбмена";
КонецФункции

Функция ОзнакомитьСПрекращениемПоддержкиПрямогоОбмена()
	
	КлючНастройки = КлючНастройкиОзнакомленияСПрекращениемПоддержкиПрямогоОбмена();
	Ознакомлен = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбменСКонтрагентами", КлючНастройки);
	Если Ознакомлен = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УдалитьПрофилиНастроекЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УдалитьПрофилиНастроекЭДО КАК УдалитьПрофилиНастроекЭДО
		|ГДЕ
		|	УдалитьПрофилиНастроекЭДО.СпособОбменаЭД В (&СпособыОбменаЭД)";
	
	СпособыОбменаЭД = Новый Массив;
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезКаталог);
	СпособыОбменаЭД.Добавить(Перечисления.СпособыОбменаЭД.ЧерезFTP);
	Запрос.УстановитьПараметр("СпособыОбменаЭД", СпособыОбменаЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		ОзнакомленСПрекращениемПоддержкиПрямогоОбмена();
		Возврат Ложь;
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РегистрационныеДанныеОрганизации

Функция НовыеРегистрационныеДанныеОрганизации()
	
	Данные = Новый Структура;
	Данные.Вставить("Индекс", "");
	Данные.Вставить("КодРегиона", "");
	Данные.Вставить("Регион", "");
	Данные.Вставить("Район", "");
	Данные.Вставить("Город", "");
	Данные.Вставить("НаселенныйПункт", "");
	Данные.Вставить("Улица", "");
	Данные.Вставить("Дом", "");
	Данные.Вставить("Корпус", "");
	Данные.Вставить("Квартира", "");
	Данные.Вставить("Телефон", "");
	Данные.Вставить("Наименование", "");
	Данные.Вставить("ИНН", "");
	Данные.Вставить("КПП", "");
	Данные.Вставить("ОГРН", "");
	Данные.Вставить("КодИМНС", "");
	Данные.Вставить("ЮрФизЛицо", "");
	Данные.Вставить("Фамилия", "");
	Данные.Вставить("Имя", "");
	Данные.Вставить("Отчество", "");
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти

