#Область ПрограммныйИнтерфейс

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сопоставления информации об упаковках с товарной частью.
//   Для транспортных упаковок номенклатура (характеристика, серия)- это номенклатура (характеристика, серия)
//   первого вложенного (на любом уровне) индивидуального штрихкода.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров
// Возвращаемое значение - ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Штрихкод           - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на индивидуальный штрихкод содержимого
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
//
Функция ЧастичноеСодержимое(ТаблицаУпаковок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ТаблицаУпаковок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка   КАК Ссылка,
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ШтрихкодыВходящие
	|ИЗ
	|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Штрихкод
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыВходящие.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ШтрихкодыВходящие.Штрихкод          КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия             КАК Серия,
	|	ЛОЖЬ                                КАК Обработан
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
	|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
	|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
	|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
	|		И ШтрихкодыУпаковок.НомерСтроки = 1";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[1].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[2].Выгрузить();
	
	Результат.Индексы.Добавить("Ссылка,Штрихкод");
	СтруктураПоиска = Новый Структура("Ссылка,Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить();
		ВложенныеЗаписи.Индексы.Добавить("Ссылка,Штрихкод");
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
			ДанныеРодителя = ВложенныеЗаписи.НайтиСтроки(СтруктураПоиска)[0];
			СтруктураПоиска.Штрихкод = ДанныеРодителя.Родитель;
			СтрокаЗаполнения = Результат.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, ДанныеШтрихКода,"Штрихкод,Номенклатура,Характеристика,Серия");
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[2].Выгрузить();
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сравнения информации об упаковках с товарной частью.
// 
// Параметры:
//   ШтрихкодыУпаковок - Массив - исходный массив элементов типа "СправочникСсылка.ШтрихкодыУпаковокТоваров"
//   ВидыПродукцииИС   - (см. ИнтеграцияИСУТ.ШтрихкодыСодержащиеВидыПродукции) - виды продукции для отбора штрихкодов
// Возвращаемое значение - ТаблицаЗначений - таблица состава упаковок:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
//   * Количество         - Число - количество единиц содержимого
//
Функция Содержимое(Знач ШтрихкодыУпаковок, Знач ВидыПродукцииИС) Экспорт
	
	Запрос = Новый Запрос;
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Номенклатура             КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика           КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия                    КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                                      КАК Количество
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|		ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И Вложенные.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[0].Выбрать();
		Пока ДочерниеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДочерниеЗаписи);
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика, Серия", "Количество");
	
	Возврат Результат;
	
КонецФункции

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеМОТППереопределяемый.ЗаполнитьСведенияОМаркировке(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодУпаковки");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("КодыИндивидуальныхУпаковок", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если (Количество<=0) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.КодУпаковки = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаКодов,
		"КодУпаковки", Источник.Ссылка, ПутьКДаннымДляОшибки);

КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеМОТППереопределяемый.ЗаполнитьСведенияОМаркировке_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если (Количество<=0) Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		Количество = Количество - 1;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаКодов,
		"Код", Источник.Ссылка, ПутьКДаннымДляОшибки);

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеМОТП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок.НомерСтроки.КодУпаковки");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеМОТП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки.НомерСтроки.Код");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Создает новую таблицу значений для штрихкодов упаковок.
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки
// * ЗначениеШтрихкода
Функция НоваяТаблицаШтрихкодыУпаковок() Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки");
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода");	
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Сворачивает таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов упаковок.
Процедура СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, ШтрихкодУпаковки");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть   - Строка         - значение поиска.
// 
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть)
	
	СтандартнаяОбработка = Истина;
	ЗначениеРеквизита = "";
	ЭлектронноеВзаимодействиеМОТППереопределяемый.ПриОпределенииЗначенияРеквизитаВДереве(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ЗначениеРеквизита = Модуль.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

#КонецОбласти
