////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПредопределенныеСпискиЭлементов

// Возвращает перечень видов договоров с поставщиком.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с поставщиком.
//
Функция ВидыДоговоровПоставщиков() Экспорт
	
	ВидыДоговоров = Новый Массив;
	
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
		
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает перечень видов договоров с покупателем.
//
// Возвращаемое значение:
//	Массив - Содержит виды договоров с покупателем.
//
Функция ВидыДоговоровПокупателей() Экспорт
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	
	Возврат ВидыДоговоров;
	
КонецФункции

// Возвращает списки счетов расчетов с поставщиками.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПоставщиков() Экспорт

	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2));

КонецФункции

// Возвращает списки счетов расчетов с покупателями.
//
// Параметры:
//	Структура - Содержит ключи:
//		* СчетаСДокументомРасчетов - СписокЗначений - Список счетов с субконто документы расчетов.
//		* СчетаБезДокументаРасчетов - СписокЗначений - Список счетов без субконто документы расчетов.
//
Функция СчетаУчетаРасчетовПокупателей() Экспорт

	Возврат СчетаУчетаРасчетов(БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));

КонецФункции

// Возвращает список счетов учета товаров.
//
// Параметры:
// ИсключаемыеСчета - Массив - Счета, которые нужно исключить из итогового списка.
//
// Возвращаемое значение:
// Массив - счета и субсчета учета товаров.
//
Функция СчетаУчетаТоваров(ИсключаемыеСчета = Неопределено) Экспорт
	
	Если ИсключаемыеСчета = Неопределено Тогда
		
		ИсключаемыеСчета = ИсключаемыеСчетаУчетаТоваров();
		
	КонецЕсли;
	
	СчетаУчетаТоваровПредопределенные = Новый Массив;
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Материалы);                           // 10
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);                       // 21
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.Товары);                              // 41
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);                    // 43
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);                   // 45
	СчетаУчетаТоваровПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);    // 20.02
	
	СчетаУчетаТоваров = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаТоваровПредопределенные);
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(СчетаУчетаТоваров, ИсключаемыеСчета);
	
КонецФункции

// Возвращает список счетов расчтетов с покупателями с их субсчетами.
// В данной функции не учитывается список счетов исключенных из расчета задложенности,
// подробнее см. БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности().
// 
// Возвращаемое значение:
// Массив - счета и субсчета расчетов с покупателями.
//
Функция СчетаРасчетовСПокупателямиССубсчетами() Экспорт
	
	СчетаРасчетовСПокупателями = Новый Массив;
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);
	СчетаРасчетовСПокупателями.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРасчетовСПокупателями);
	
КонецФункции

// Определяет значения по умолчанию, общие для всех отчетов.
//
// Возвращаемое значение:
//  Структура - базовые значения: НачалоПериода, КонецПериода, Организация.
//
Функция БазовыеРеквизитыЗначенияПоУмолчанию() Экспорт
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить("НачалоПериода", '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("КонецПериода",  '0001-01-01');
	ЗначенияПоУмолчанию.Вставить("Организация",   Справочники.Организации.ПустаяСсылка());
	
	ЗначенияПоУмолчанию.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	ЗначенияПоУмолчанию.КонецПериода  = КонецМесяца(ЗначенияПоУмолчанию.НачалоПериода);
	ЗначенияПоУмолчанию.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

// Получает из менеджера отчета сведения о свойствах отчета - манифест, декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
// Для проверки свойств рекомендуется использовать ЗначениеПараметраИсполненияОтчета.
//
// Параметры:
//  ИмяОтчета	 - Строка - имя отчета.
// 
// Возвращаемое значение:
//  Структура - может содержать свойства, значения которых проверяются в подсистеме.
//  Неопределено - отчет не поддерживает программный интерфейс подсистемы.
//
Функция ПараметрыИсполненияОтчета(ИмяОтчета) Экспорт
	
	Попытка
		Возврат Отчеты[ИмяОтчета].ПолучитьПараметрыИсполненияОтчета();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции
 
// Позволяет проверить наличие в программном интерфейсе отчета наличие поддержки того или иного элемента.
//
// Параметры:
//  ОписаниеОтчета		 - Строка - Имя отчета.
//                       - Структура - Параметры исполнения (манифест) отчета.
//  ИмяСвойства			 - Строка - имя проверямой возможности.
//  ЗначениеПоУмолчанию	 - Булево - значение по-умолчанию; будет возвращено, если манифест отчета не содержит запрошенного свойства.
// 
// Возвращаемое значение:
//  Булево - значение свойства.
//
Функция ЗначениеПараметраИсполненияОтчета(ОписаниеОтчета, ИмяСвойства, ЗначениеПоУмолчанию = Ложь) Экспорт
	
	Если ТипЗнч(ОписаниеОтчета) = Тип("Строка") Тогда
		Манифест = ПараметрыИсполненияОтчета(ОписаниеОтчета);
	Иначе
		Манифест = ОписаниеОтчета;
	КонецЕсли;
	
	Значение = ЗначениеПоУмолчанию;
	
	Если Манифест <> Неопределено И Манифест.Свойство(ИмяСвойства) Тогда
		Значение = Манифест[ИмяСвойства];
	КонецЕсли;
	
	Возврат Значение;
		
КонецФункции

// Проверяет нужен ли для переданного типа сложный подбор
//
// Параметры:
//	ТипЭлемента - Тип - Тип, котороый нужно проверить.
// Возвращаемое значение:
//	Булево - Истина если нужна сложная обработка подбора, ложь - в противном случае.
//
Функция ЭтоТипЭлементаСоСложнымПодбором(ТипЭлемента) Экспорт
	
	Если ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() 
		ИЛИ ТипЭлемента = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() 
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Конструктор, создающий структуру параметров для проверки контрольной суммы по ячейкам отчета.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - может содержать формат представления чисел в области.
//
// Возвращаемое значение:
//   Структура   - информация для алгоритма проверки итогов в отчетах.
//
Функция ОбластьЧтенияИтогов(ПараметрыОтчета) Экспорт
	
	ОбластьИтогов = Новый Структура;
	
	// Инициализируем значения заведомо непересекающимся интервалом строк.
	ОбластьИтогов.Вставить("ПерваяИзСтрокИтогов", 1);
	ОбластьИтогов.Вставить("ПоследняяИзСтрокИтогов", 0);
	
	// Символ, являющийся разделителем дробной части для представления чисел.
	ОбластьИтогов.Вставить("РазделительДробнойЧасти",
		РазделительДробнойЧастиПоУсловномуОформлению(ПараметрыОтчета.НастройкиКомпоновкиДанных.УсловноеОформление));
	
	// Ключ = номер колонки, значение = знак, с которым учитываются суммы из колонки.
	ОбластьИтогов.Вставить("ФлагиОбщегоИтога", Новый Соответствие);

	// Если Истина, то слева от колонки суммы будет анализироваться колонка со значениями:
	// "К" = инвертировать знак в колонке итога, "Д" = оставить знак из колонки итога.
	ОбластьИтогов.Вставить("ИскатьФлагУчета", Ложь);

	// Если указан номер строки, то строка с таким номером будет пропущена.
	ОбластьИтогов.Вставить("НомерСтрокиПоказателяКонтрольОтносительный", ПозицияПоказателяКонтроль(ПараметрыОтчета));
	ОбластьИтогов.Вставить("НомерСтрокиПоказателяКонтрольАбсолютный", Неопределено);
	
	Возврат ОбластьИтогов;
	
КонецФункции

#КонецОбласти 

#Область ПреобразованиеТекстаСКД

// Возвращает строковое представление уникального идентификатора ссылки. Используется при выводе УИДа ссылки в СКД.
//
// Параметры:
//   Ссылка - СправочникСсылка.* - Ссылка на элемент справочника.
//
Функция ПолучитьУИДСсылкиСтрокой(Ссылка) Экспорт
	Возврат Строка(Ссылка.УникальныйИдентификатор());
КонецФункции

// Устанавливает свойства связанных наборов данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;

				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
				
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если СтрНайти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Анализирует, используется ли корреспондирующие поля в условиях отборов.
//
// Параметры:
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируемые условия.
//
// Возвращаемое значение:
//   Булево      - Истина, если отбор по кор.полю используется в одном из условий; иначе Ложь.
//
Функция ЕстьОтборПоКорполю(Отбор) Экспорт
	
	УсловиеПодбораВыполняется = Ложь;
	
	ИменаИскомыхПолей = Новый Массив;
	ИменаИскомыхПолей.Добавить("КорСчет");
	ИменаИскомыхПолей.Добавить("КорВалюта");
	ИменаИскомыхПолей.Добавить("КорПодразделение");
	
	Для каждого ИмяИскомогоПоля Из ИменаИскомыхПолей Цикл
	
		ДлинаИскомогоПоля = СтрДлина(ИмяИскомогоПоля);
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				Если ЕстьОтборПоКорполю(ЭлементОтбора.Элементы) Тогда

					УсловиеПодбораВыполняется = Истина;
					Прервать;

				КонецЕсли;
				
			Иначе
				
				ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
				Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля)
				   И (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля Или Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1) = ".") Тогда
					
					УсловиеПодбораВыполняется = Истина;
					Прервать;

				КонецЕсли;
				
				ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
				Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля)
				   И (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля Или Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1) = ".") Тогда
					
					УсловиеПодбораВыполняется = Истина;
					Прервать;

				КонецЕсли;

			КонецЕсли;
		
		КонецЦикла;
		
		Если УсловиеПодбораВыполняется Тогда
			Возврат УсловиеПодбораВыполняется;
		КонецЕсли;
	
	КонецЦикла; 

	Возврат УсловиеПодбораВыполняется;
	
КонецФункции

// Получает список номеров субконто, которые используются в условиях отборов.
//
// Параметры:
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируемые условия.
//  ОтбираемыеСубконто - Массив - заполняемый список номеров субконто.
//  СпособПодбора - Строка - "ТолькоДопСвойства" - учитывать только отборы по доп.свойствам;
//                           "РеквизитыСубконто" - учитывать только отборы через точку от субконто;
//                           "ВсеСубконто" - учитывать любые отборы по субконто.
//  КорСубконто  - Булево - если Ложь, то ищем в отборах "Субконто"; если Истина, то ищем "КорСубконто".
//
Процедура СписокОтборовПоСубконто(Отбор, ОтбираемыеСубконто, СпособПодбора = "ВсеСубконто", КорСубконто = Ложь) Экспорт

	ИмяИскомогоПоля = ?(КорСубконто, "КорСубконто", "Субконто");
	ДлинаИскомогоПоля = СтрДлина(ИмяИскомогоПоля);
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			СписокОтборовПоСубконто(ЭлементОтбора.Элементы, ОтбираемыеСубконто, СпособПодбора, КорСубконто);
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля) Тогда
				
				Если СпособПодбора = "ТолькоДопСвойства" Тогда
					// Дополнительные свойства могут быть назначены не только для самого объекта субконто,
					// но и для справочника, которые используется как реквизит в объектах субконто.
					// Поэтому ищем на любом уровне в пути к данным.
					УсловиеПодбораВыполняется = СтрНайти(Сред(ИмяПоля, ДлинаИскомогоПоля + 2), ".[") > 0;
				ИначеЕсли СпособПодбора = "РеквизитыСубконто" Тогда
					УсловиеПодбораВыполняется = Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".";
				Иначе
					УсловиеПодбораВыполняется = (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля + 1
						Или Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".");
				КонецЕсли;
				Если УсловиеПодбораВыполняется Тогда
			   
					НомерСубконто = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1));
					Если ОтбираемыеСубконто.Найти(НомерСубконто) = Неопределено Тогда
						ОтбираемыеСубконто.Добавить(НомерСубконто);
					КонецЕсли;
					
				КонецЕсли;
			   
			КонецЕсли;
			
			ИмяПоля = Строка(ЭлементОтбора.ПравоеЗначение);
			Если СтрНачинаетсяС(ИмяПоля, ИмяИскомогоПоля) Тогда
				
				Если СпособПодбора = "ТолькоДопСвойства" Тогда
					// Дополнительные свойства могут быть назначены не только для самого объекта субконто,
					// но и для справочника, которые используется как реквизит в объектах субконто.
					// Поэтому ищем на любом уровне в пути к данным.
					УсловиеПодбораВыполняется = СтрНайти(Сред(ИмяПоля, ДлинаИскомогоПоля + 2), ".[") > 0;
				ИначеЕсли СпособПодбора = "РеквизитыСубконто" Тогда
					УсловиеПодбораВыполняется = Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".";
				Иначе
					УсловиеПодбораВыполняется = (СтрДлина(ИмяПоля) = ДлинаИскомогоПоля + 1
						Или Сред(ИмяПоля, ДлинаИскомогоПоля + 2, 1) = ".");
				КонецЕсли;
				Если УсловиеПодбораВыполняется Тогда
			   
					НомерСубконто = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Сред(ИмяПоля, ДлинаИскомогоПоля + 1, 1));
					Если ОтбираемыеСубконто.Найти(НомерСубконто) = Неопределено Тогда
						ОтбираемыеСубконто.Добавить(НомерСубконто);
					КонецЕсли;
					
				КонецЕсли;
			   
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Преобразует текст запроса остатков в объединение подзапросов: основного и сторнирующего Контроль по счетам без НУ.
// Простое добавление условия "Счет.НалоговыйУчет" не даст корректного результата, т.к. приводит получению остатков
// в разрезе счетов, а не сводного остатка по группе счетов.
//
// Параметры:
//  ПараметрыОтчета - см. модуль формы отчета, функция ПодготовитьПараметрыОтчета() .
//  ОписаниеТекстаЗапроса - ЗапросВыбораСхемыЗапроса - описание запроса, который нужно дополнить.
//
Процедура ДобавитьСторноДляПоказателяКонтроль(ПараметрыОтчета, ОписаниеТекстаЗапроса) Экспорт

	ЭталонныйОператор = ОписаниеТекстаЗапроса.Операторы[0];
	ЭталонныйПсевдоним = ЭталонныйОператор.Источники[0].Источник.Псевдоним;
	
	СводныйОператор = ОписаниеТекстаЗапроса.Операторы.Добавить();
	СводныйВложенный = СводныйОператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"), "Сводный");
	СводныйЗапрос = СводныйВложенный.Источник.Запрос;
	
	ОсновнойОператор = СводныйЗапрос.Операторы.Добавить(ЭталонныйОператор);
	СторнирующийОператор = СводныйЗапрос.Операторы.Добавить(ОсновнойОператор);
	Если СводныйЗапрос.Операторы.Количество() > 2 Тогда // удаляем оператор по-умолчанию
		СводныйЗапрос.Операторы.Удалить(0);
	КонецЕсли;
	
	// Устанавливаем отбор по счетам, на которых не ведется налоговый учет.
	ВыражениеПараметр = СторнирующийОператор.Источники[0].Источник.Параметры[1];
	ТекстВыражения = Строка(ВыражениеПараметр.Выражение);
	ВыражениеПараметр.Выражение = Новый ВыражениеСхемыЗапроса(ТекстВыражения
		+ ?(ПустаяСтрока(ТекстВыражения) , "", " И ") + "НЕ Счет.НалоговыйУчет");
	
	// Устанавливаем представления полей сводного запроса как в эталонном запросе.
	КоличествоКолонок = ОписаниеТекстаЗапроса.Колонки.Количество();
	ЭталонныйПоля = ЭталонныйОператор.ВыбираемыеПоля;
	ОсновнойПоля = ОсновнойОператор.ВыбираемыеПоля;
	СторнирующийПоля = СторнирующийОператор.ВыбираемыеПоля;
	Для ИндексПоля = 0 По КоличествоКолонок - 1 Цикл

		ПсевдонимПоля = ОписаниеТекстаЗапроса.Колонки[ИндексПоля].Псевдоним;

		// Обработка основного запроса.
		Если ОсновнойПоля[ИндексПоля].СодержитАгрегатнуюФункцию() Тогда
			
			ТекстВыражения = Строка(ОсновнойПоля[ИндексПоля]);
			ПозицияВТексте = СтрНайти(ТекстВыражения, "(");
			ТекстВыражения = Сред(ТекстВыражения, ПозицияВТексте + 1, СтрДлина(ТекстВыражения) - ПозицияВТексте - 1);
			ОсновнойПоля.Установить(ИндексПоля, Новый ВыражениеСхемыЗапроса(ТекстВыражения));
			
		КонецЕсли;
		
		// Обработка сторнирующего запроса.
		Если Лев(ПсевдонимПоля, 8) = "Контроль" Тогда
			
			ТекстВыражения = Строка(СторнирующийПоля[ИндексПоля]);
			Если СторнирующийПоля[ИндексПоля].СодержитАгрегатнуюФункцию() Тогда
				
				ПозицияВТексте = СтрНайти(ТекстВыражения, "(");
				ТекстВыражения = Сред(ТекстВыражения, ПозицияВТексте + 1, СтрДлина(ТекстВыражения) - ПозицияВТексте - 1);
				
			КонецЕсли;
			ТекстВыражения = "-(" + ТекстВыражения + ")";
			
		Иначе
			
			ТекстВыражения = "0";
			
		КонецЕсли;
		СторнирующийПоля.Установить(ИндексПоля, Новый ВыражениеСхемыЗапроса(ТекстВыражения));
		
		// Обработка объединения запросов.
		СводныйЗапрос.Колонки[ИндексПоля].Псевдоним = ПсевдонимПоля;
		Если ЭталонныйПоля[ИндексПоля].СодержитАгрегатнуюФункцию() Тогда
			ТекстВыражения = "СУММА(Сводный." + ПсевдонимПоля + ")";
		Иначе
			ТекстВыражения = Строка(ЭталонныйПоля[ИндексПоля]);
			ТекстВыражения = СтрЗаменить(ТекстВыражения, ЭталонныйПсевдоним + ".", "Сводный.");
		КонецЕсли;
		СводныйОператор.ВыбираемыеПоля.Добавить(ТекстВыражения, ИндексПоля);
		
	КонецЦикла;	
	
	ОписаниеТекстаЗапроса.Операторы.Удалить(0);	// удаляем исходный запрос
	
КонецПроцедуры

// Для случая, когда установлены отборы по доп.свойствам субконто, будет произведена замена в тексте схемы
// компоновки данных. Отборы по дополнительным свойствам невозможны в параметрах виртуальной таблицы.
// Поэтому в текст набора данных Проводки в СКД к запросам по остаткам добавляется секция ГДЕ.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПодготовитьПараметрыОтчета() в ФормаОтчета.
//  Схема        - СхемаКомпоновкиДанных - описание получаемых данных.
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ИзменитьСхемуДляОтборовПоДопСвойствамСубконто(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	ОтбираемыеВидыСубконто = Новый Массив;
	СписокОтборовПоСубконто(КомпоновщикНастроек.Настройки.Отбор.Элементы, ОтбираемыеВидыСубконто, "ТолькоДопСвойства");
	Если ОтбираемыеВидыСубконто.Количество() = 0 Тогда // нет отборов по доп.свойствам субконто
		Возврат;
	КонецЕсли;
	
	Если Не КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ИзмененТекстЗапросаСКД") Тогда
		Схема = Отчеты[ПараметрыОтчета.ИдентификаторОтчета].ПолучитьМакет("СхемаКомпоновкиДанных");
	КонецЕсли;		
	
	ОписаниеЗапроса = Новый СхемаЗапроса;
	ОписаниеЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных.Проводки.Запрос);
	ПакетЗапросов = ОписаниеЗапроса.ПакетЗапросов;
	
	ТекстыЗапросов = Новый Массив;	
	Для каждого ЗапросПакета Из ПакетЗапросов Цикл

		// При отборе по оборотному субконто, используя секцию ГДЕ, возможно появление строк, где есть только остатки
		// и строк, где есть только обороты (период/регистратор/номер одинаковые). Требуется сгруппировать такие строки.
		Если ЗапросПакета.ТаблицаДляПомещения = "ХозрасчетныйОстаткиИОбороты" Тогда
			
			ВыбираемыеПоля = ЗапросПакета.Операторы[0].ВыбираемыеПоля;
			Группировка = ЗапросПакета.Операторы[0].Группировка;
			Для каждого ВыбираемоеПоле Из ВыбираемыеПоля Цикл
				
				ИмяРесурса = Сред(ВыбираемоеПоле, 29); // убираем имя таблицы
				Если СтрНачинаетсяС(ИмяРесурса, "Сумма")
				 Или СтрНачинаетсяС(ИмяРесурса, "ВалютнаяСумма")
				 Или СтрНачинаетсяС(ИмяРесурса, "Количество") Тогда
				 
					ИмяРесурса = "СУММА(" + ИмяРесурса + ")";
					ВыбираемыеПоля.Установить(ВыбираемыеПоля.Индекс(ВыбираемоеПоле), Новый ВыражениеСхемыЗапроса(ИмяРесурса));
					
				Иначе
					
					Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ИмяРесурса));
				 
			 	КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстЗапроса = ЗапросПакета.ПолучитьТекстЗапроса();
		
		Если ЗапросПакета.ТаблицаДляПомещения = "ОстаткиНаНачало"
		 Или ЗапросПакета.ТаблицаДляПомещения = "ОстаткиНаКонец"
		 Или ЗапросПакета.ТаблицаДляПомещения = "ХозрасчетныйОстаткиИОбороты" Тогда

			ПозицияСимвола = СтрНайти(ТекстЗапроса, "{ГДЕ", НаправлениеПоиска.СКонца);
			Если ПозицияСимвола = 0 Тогда // добавляем секцию {ГДЕ
				
				ТекстЗапроса = ТекстЗапроса
					+ СтрЗаменить("
					|{ГДЕ
					|	#ТаблицаОстатков.Субконто1.* КАК Субконто1,
					|	#ТаблицаОстатков.Субконто2.* КАК Субконто2,
					|	#ТаблицаОстатков.Субконто3.* КАК Субконто3}",
					"#ТаблицаОстатков",
					ЗапросПакета.ТаблицаДляПомещения);
				
			Иначе // добавляем поля в секцию {ГДЕ
				
				ПозицияСимвола = СтрНайти(ТекстЗапроса, "}", НаправлениеПоиска.СКонца);
				ТекстЗапроса = Лев(ТекстЗапроса, ПозицияСимвола - 1)
					+ СтрЗаменить(",
					|	#ТаблицаОстатков.Субконто1.* КАК Субконто1,
					|	#ТаблицаОстатков.Субконто2.* КАК Субконто2,
					|	#ТаблицаОстатков.Субконто3.* КАК Субконто3",
					"#ТаблицаОстатков",
					ЗапросПакета.ТаблицаДляПомещения)
					+ Сред(ТекстЗапроса, ПозицияСимвола);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	КонецЦикла;
	Для Индекс = 0 По ПакетЗапросов.Количество() - 1 Цикл
		ПакетЗапросов[Индекс].УстановитьТекстЗапроса(ТекстыЗапросов[Индекс]);
	КонецЦикла;
	
	Схема.НаборыДанных.Проводки.Запрос = ОписаниеЗапроса.ПолучитьТекстЗапроса();
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИзмененТекстЗапросаСКД", Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область НастройкиОтчета

// Выполняет отложенную инициализацию компоновщика настроек при загрузке пользовательских настроек.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма отчета
//  Настройки			 - ПользовательскиеНастройкиКомпоновкиДанных - загружаемые настройки
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриЗагрузкеПользовательскихНастроек(Форма, Настройки, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПользовательскиеНастройки = ПоместитьВоВременноеХранилище(Настройки, Форма.УникальныйИдентификатор);
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
		БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет отложенную инициализацию компоновщика настроек при формировании отчета.
//
// Параметры:
//  Форма                - УправляемаяФорма - форма отчета
//  ИмяВариантаНастроек	 - Строка - Имя варианта настроек.
//                         Допустимо передавать пустую строку для основного варианта.
//
Процедура ИнициализироватьКомпоновщикНастроекПриФормированииОтчета(Форма, ИмяВариантаНастроек = "") Экспорт
	
	Если БухгалтерскиеОтчетыКлиентСервер.КомпоновщикНастроекИнициализирован(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияИзменилась = БухгалтерскиеОтчетыКлиентСервер.ПроверитьОтложеннаяИнициализацияКомпоновщикаВызванаИзменениемОрганизации(Форма);
	// выше убедились, что отложенная инициализация используется, поэтому ОрганизацияИзменилась отлична от Неопределено
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(Форма, ОрганизацияИзменилась, ИмяВариантаНастроек);
	
КонецПроцедуры

// В отчетах по видам субконто анализирует наличие признаков учета на счетах, содержащих выбранные субконто.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//
Процедура ЗаполнитьПризнакиУчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	
	МассивСубконто = Новый Массив;
	Для Каждого ЭлементСписка Из Отчет.СписокВидовСубконто Цикл 
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			МассивСубконто.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСубконто.Количество() = 0 Тогда
		
		Форма.ЕстьВалюта               = Истина;
		Форма.ЕстьКоличество           = Истина;
		Форма.ЕстьНалоговыйУчет        = Истина;
		Форма.ЕстьУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();
		Форма.ЕстьСчета                = Истина;
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Хозрасчетный.Ссылка) КАК КоличествоСчетов,
	|	МАКСИМУМ(Хозрасчетный.Количественный) КАК Количественный,
	|	МАКСИМУМ(Хозрасчетный.Валютный) КАК Валютный,
	|	МАКСИМУМ(Хозрасчетный.НалоговыйУчет) КАК НалоговыйУчет,
	|	МАКСИМУМ(Хозрасчетный.УчетПоПодразделениям) КАК УчетПоПодразделениям
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный&УсловиеСоединения
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = Новый Запрос;
	НомерСубконто = 1;
	УсловиеСоединения = "";
	УсловиеОтбора = "";
	Для каждого ВидСубконто Из МассивСубконто Цикл
		
		УсловиеСоединения = УсловиеСоединения + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто" + НомерСубконто + "
		|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто" + НомерСубконто + ".Ссылка";
		УсловиеОтбора = УсловиеОтбора 
			+ ?(НомерСубконто = 1, "", "
		|	И ") + "ХозрасчетныйВидыСубконто" + НомерСубконто + ".ВидСубконто = &ВидСубконто" + НомерСубконто;

		Запрос.УстановитьПараметр("ВидСубконто" + НомерСубконто, ВидСубконто);

		НомерСубконто = НомерСубконто + 1;
		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", УсловиеСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Запрос.Текст = ТекстЗапроса;
	
	Форма.ЕстьВалюта               = Ложь;
	Форма.ЕстьКоличество           = Ложь;
	Форма.ЕстьНалоговыйУчет        = Ложь;
	Форма.ЕстьУчетПоПодразделениям = Ложь;
	Форма.ЕстьСчета                = Ложь;
	
	ВыборкаСчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСчета.Следующий() Цикл
		
		Форма.ЕстьВалюта               = ?(ВыборкаСчета.Валютный             = Истина, Истина, Ложь);
		Форма.ЕстьКоличество           = ?(ВыборкаСчета.Количественный       = Истина, Истина, Ложь);
		Форма.ЕстьНалоговыйУчет        = ?(ВыборкаСчета.НалоговыйУчет        = Истина, Истина, Ложь);
		Форма.ЕстьУчетПоПодразделениям = ?(ВыборкаСчета.УчетПоПодразделениям = Истина,
			БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения(), Ложь);
		Форма.ЕстьСчета                = ?(ВыборкаСчета.КоличествоСчетов     = 0, Ложь, Истина);  
		
	КонецЦикла;
	
	Отчет.ПоказательВалютнаяСумма = Отчет.ПоказательВалютнаяСумма И Форма.ЕстьВалюта;
	Отчет.ПоказательКоличество = Отчет.ПоказательКоличество И Форма.ЕстьКоличество;
	Отчет.ПоказательНУ = Отчет.ПоказательНУ И Форма.ЕстьНалоговыйУчет;
	Отчет.ПоказательПР = Отчет.ПоказательПР И Форма.ЕстьНалоговыйУчет;
	Отчет.ПоказательВР = Отчет.ПоказательВР И Форма.ЕстьНалоговыйУчет;
	Если Отчет.Свойство("ПоказательКонтроль") Тогда
		Отчет.ПоказательКонтроль = Отчет.ПоказательКонтроль И Форма.ЕстьНалоговыйУчет;
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет структуру опций, используемых для указания настроек отчета.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//
Процедура СохранитьОписаниеНастроек(Форма, Разделитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = ИмяОтчета(Форма);
	Отчет = Форма.Отчет;
	
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		Если Отчет.СписокВидовСубконто.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СписокВидовСубконто = Отчет.СписокВидовСубконто.Скопировать();
		СписокВидовСубконто[0].Значение = Разделитель;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		КоличествоСубконтоМаксимум = БухгалтерскийУчет.МаксимальноеКоличествоСубконто();
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			ИндексСКонца = КоличествоСубконто - НомерСубконто;
			Если ИндексСКонца > КоличествоСубконтоМаксимум - 1
			 Или Не ЗначениеЗаполнено(СписокВидовСубконто[ИндексСКонца].Значение) Тогда
				СписокВидовСубконто.Удалить(ИндексСКонца);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Подготавливаем структуру настроек.
	ОписаниеНастройки = Новый Структура;
	
	// Управление показателями.
	ТипБулево = Тип("Булево");
	КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
	КоллекцияВключенныхНастроек = Новый Структура;
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Отчет[Показатель]) <> ТипБулево Или Отчет[Показатель] Тогда
			КоллекцияВключенныхНастроек.Вставить(Показатель, Отчет[Показатель]);
		КонецЕсли;
	КонецЦикла;
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
	   И КоллекцияВключенныхНастроек.Свойство("СписокВидовСубконто") Тогда
		КоллекцияВключенныхНастроек.СписокВидовСубконто = СписокВидовСубконто;
	КонецЕсли;
	ОписаниеНастройки.Вставить("Показатели", КоллекцияВключенныхНастроек);
	
	// Группировки.
	Если Отчет.Свойство("Группировка") Тогда
		КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
		ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Отбор.
	// Фиксируем сам факт, что отбор нужно перезаполнять. Однако используем не сохраненные ранее настройки,
	// а алгоритмическим преобразованием. См. ПреобразоватьОтборыПоСчету()
	ОписаниеНастройки.Вставить("Отбор", Неопределено);
	
	// Дополнительные поля.
	Если Отчет.Свойство("ДополнительныеПоля") Тогда
		КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
		ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Сортировка.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетИсходноеЗначение);
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы, ДанныеСчета);
	Иначе
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
	КонецЕсли;
	ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
	
	// Подготавливаем и сохраняем контейнер.
	
	КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(
		КлючиОписанияНастройки.КлючОбъекта,
		КлючиОписанияНастройки.КлючНастроек,
		ОписаниеНастройки,
		КлючиОписанияНастройки);
	
КонецПроцедуры

// Задает структуру опций, используемых для указания настроек отчета. Если нет ранее сохраненных настроек,
// то устанавливаются настройки по-умолчанию.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//  ТолькоОбновление - Строка - если Ложь, то читается ранее сохраненная настройка; если Истина, то только проверяется
//                              корректность текущей настройки.
//
Процедура ПрочитатьОписаниеНастроек(Форма, Разделитель, ТолькоОбновление = Ложь) Экспорт
	
	Перем КоллекцияВключенныхНастроек;
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = ИмяОтчета(Форма);
	Отчет = Форма.Отчет;
	
	// Получаем источник применяемых настроек.
	Если ТолькоОбновление Тогда // лишь обновить настройки
		
		Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			// Используем заданный сейчас в отчете список видов субконто. Для случая изменения одного из неосновных субконто.
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
			ЗаполнитьПризнакиУчета(Форма);
			СписокВидовСубконто = Отчет.СписокВидовСубконто;
			
		Иначе
			
			ТекстИсключения = НСтр("ru = 'Разделитель настроек ""%1"" не используется для обновления настроек.'");
			ВызватьИсключение СтрШаблон(ТекстИсключения, ИмяРазделителя);
			
		КонецЕсли;
		
		// Подготавливаем текущие настройки к преобразованию.
		ОписаниеНастройки = Новый Структура;
		Если Отчет.Свойство("Группировка") Тогда
			КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
			ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
		КонецЕсли;
		ОписаниеНастройки.Вставить("Отбор", Неопределено);
		Если Отчет.Свойство("ДополнительныеПоля") Тогда
			КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
			ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
		КонецЕсли;
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
		ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
		
	Иначе // прочитать ранее сохраненные
		
		КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);
		ОписаниеНастройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить(
			КлючиОписанияНастройки.КлючОбъекта,
			КлючиОписанияНастройки.КлючНастроек);
		
		Если ОписаниеНастройки = Неопределено Тогда // нет ранее сохраненного описания
		
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
			КонецЕсли;
			
			ЗаполняемыеНастройки = Новый Структура;
			ЗаполняемыеНастройки.Вставить("Показатели",         Истина);
			ЗаполняемыеНастройки.Вставить("Группировка",        Отчет.Свойство("Группировка"));
			ЗаполняемыеНастройки.Вставить("Отбор",              Истина);
			ЗаполняемыеНастройки.Вставить("ДополнительныеПоля", Отчет.Свойство("ДополнительныеПоля"));
			ЗаполняемыеНастройки.Вставить("Порядок",            Истина);
			ЗаполняемыеНастройки.Вставить("ВыводимыеДанные",    ИмяОтчета = "ОборотыСчета");

			Форма.ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
			БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма);
			Возврат;
			
		Иначе // используем ранее сохраненное описание настроек
			
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			
				СписокВидовСубконто = Неопределено;
				Если Не ОписаниеНастройки.Свойство("Показатели")
				 Или Не ОписаниеНастройки.Показатели.Свойство("СписокВидовСубконто", СписокВидовСубконто) Тогда
					// Используем заданный сейчас в отчете список видов субконто.
					СписокВидовСубконто = Отчет.СписокВидовСубконто;
				Иначе
					// Используем ранее сохраненный список видов субконто.
					Отчет.СписокВидовСубконто = СписокВидовСубконто;
				КонецЕсли;
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
				
			ИначеЕсли ИмяРазделителя <> "Хозрасчетный" Тогда
				
				ТекстИсключения = НСтр("ru = 'Разделитель настроек ""%1"" не используется для хранения настроек.'");
				ВызватьИсключение СтрШаблон(ТекстИсключения, ИмяРазделителя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получаем параметры, влияющие на настройки отчета.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Отчет.Счет);
		КоличествоСубконто       = ДанныеСчета.КоличествоСубконто;
		ЕстьУчетПоПодразделениям = ДанныеСчета.УчетПоПодразделениям И БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();
			
	ИначеЕсли ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		ДанныеСчета = Новый Структура;
		ДанныеСчета.Вставить("Вид",            ?(Форма.ЕстьСчета, ВидСчета.АктивноПассивный, Неопределено));
		ДанныеСчета.Вставить("Валютный",       Форма.ЕстьВалюта);
		ДанныеСчета.Вставить("Количественный", Форма.ЕстьКоличество);
		
		НомерСубконто = 1;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		Для каждого ВидСубконто Из СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				ДанныеСчета.Вставить("ВидСубконто" + НомерСубконто, ВидСубконто.Значение);
				НомерСубконто = НомерСубконто + 1;
			Иначе
				КоличествоСубконто = КоличествоСубконто - 1;
			КонецЕсли;
		КонецЦикла;

		ЕстьУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения();
		
	КонецЕсли;
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
	
	Если ОписаниеНастройки.Свойство("Показатели", КоллекцияВключенныхНастроек) Тогда
		
		ТипБулево = Тип("Булево");
		КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
		// Сбрасываем все флаги.
		Для каждого Показатель Из КоллекцияНастроек Цикл
			Если ТипЗнч(Отчет[Показатель]) = ТипБулево И Отчет[Показатель] Тогда // только для типа Булево
				Отчет[Показатель] = Ложь;
			КонецЕсли;
		КонецЦикла;
		// Устанавливаем нужные флаги и свойства.
		ОдинИзПоказателейОтмечен = Ложь;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			Если Не Отчет.Свойство(Показатель.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Показатель.Ключ = "ПоказательВалютнаяСумма" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Валютный;
			ИначеЕсли Показатель.Ключ = "ПоказательКоличество" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Количественный;
			ИначеЕсли Показатель.Ключ = "РазвернутоеСальдо" Тогда
				Отчет[Показатель.Ключ] = (ДанныеСчета.Вид = ВидСчета.АктивноПассивный);
			Иначе
				Отчет[Показатель.Ключ] = Показатель.Значение;
			КонецЕсли;
			Если Не ОдинИзПоказателейОтмечен
			   И ТипЗнч(Показатель.Значение) = ТипБулево И Показатель.Значение
			   И Лев(Показатель.Ключ, 10) = "Показатель" Тогда
				ОдинИзПоказателейОтмечен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		Если Не ОдинИзПоказателейОтмечен Тогда
			Отчет.ПоказательБУ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеПоляГруппировок = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Если ОписаниеНастройки.Свойство("Группировка", КоллекцияВключенныхНастроек) Тогда
		
		// Удаляем сохраненные группировки, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
		Если Не ЕстьУчетПоПодразделениям Тогда
			ИсключаемыеНастройки.Добавить("Подразделение");
		КонецЕсли;
		Если Не ДанныеСчета.Валютный Тогда
			ИсключаемыеНастройки.Добавить("Валюта");
		КонецЕсли;
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			Если ИспользоватьОднуНоменклатурнуюГруппу 
				И ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
			ИначеЕсли НЕ ВестиУчетПоДоговорам 
				И ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
			Иначе // проверяем, что состав субконто на счете не изменился
				ОписаниеПоля = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных("Субконто" + НомерСубконто));
				Если ОписаниеПоля = Неопределено Тогда
					ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
				Иначе
					ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто);
					Если ИндексПоля <> Неопределено Тогда // ранее была группировка для этого субконто
						ПредставлениеПоля = КоллекцияВключенныхНастроек[ИндексПоля].Представление;
						ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
						Если ОписаниеПоля.Заголовок <> Лев(ПредставлениеПоля, ДлинаПредставленияПоля) Тогда
							// Субконто сдвинулись.
							ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		Для НомерСубконто = КоличествоСубконто + 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
		КонецЦикла;
		Для каждого ИмяПоля Из ИсключаемыеНастройки Цикл
			ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			Пока ИндексПоля <> Неопределено Цикл
				КоллекцияВключенныхНастроек.Удалить(ИндексПоля);
				ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			КонецЦикла;
		КонецЦикла; 

		Отчет.Группировка.Загрузить(КоллекцияВключенныхНастроек);
		
		// Добавляем отсутствующие группировки.
		Если ЕстьУчетПоПодразделениям
		   И ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Подразделение") = Неопределено Тогда
			
			ПоследняяГруппировка = ДобавитьГруппировкуОтчета(Отчет.Группировка,
										ДоступныеПоляГруппировок,
										"Подразделение");
			
		КонецЕсли;
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			Если ИспользоватьОднуНоменклатурнуюГруппу 
				И ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
				Продолжить;
			ИначеЕсли НЕ ВестиУчетПоДоговорам 
				И ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				Продолжить;
			ИначеЕсли ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПоследняяГруппировка = ДобавитьГруппировкуОтчета(Отчет.Группировка,
										ДоступныеПоляГруппировок,
										"Субконто" + НомерСубконто);
				
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
			   И ПоследняяГруппировка <> Неопределено Тогда
				ПоследняяГруппировка.Использование = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		Если ДанныеСчета.Валютный
		   И ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Валюта") = Неопределено Тогда
			ДобавитьГруппировкуОтчета(Отчет.Группировка, ДоступныеПоляГруппировок, "Валюта");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеНастройки.Свойство("Отбор") Тогда
		Форма.ЗаполнитьНастройкамиПоУмолчанию(Новый Структура("Отбор", Истина));
		БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма);
	КонецЕсли;
	
	ДоступныеПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора;
	Если ОписаниеНастройки.Свойство("ДополнительныеПоля", КоллекцияВключенныхНастроек) Тогда
		
		Отчет.ДополнительныеПоля.Очистить();
		ШаблонСпискаПолей = Отчет.ДополнительныеПоля.Выгрузить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			ПозицияТочки = СтрНайти(Показатель.Поле, ".");
			Если ПозицияТочки = 0 Тогда
				ИмяПоля = Показатель.Поле;
			Иначе
				ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
			КонецЕсли;
			Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли СтрНачинаетсяС(ИмяПоля, "Субконто") Тогда // проверяем, что состав субконто на счете не изменился
				ОписаниеПоля = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
				Если ОписаниеПоля = Неопределено Тогда
					ИсключаемыеНастройки.Добавить(ИмяПоля);
				Иначе
					ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
					Если ОписаниеПоля.Заголовок <> Лев(Показатель.Представление, ДлинаПредставленияПоля) Тогда
						// Субконто сдвинулись.
						ИсключаемыеНастройки.Добавить(Показатель);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			КонецЕсли; 
			
		КонецЦикла;
		Для каждого Показатель Из ИсключаемыеНастройки Цикл
			КоллекцияВключенныхНастроек.Удалить(Показатель);
		КонецЦикла;
		
		// Заполняем ранее включавшиеся дополнительные поля.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Показатель.Использование;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
		
		КонецЦикла;
		
		// Заполняем невключенные дополнительные поля. 
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, ШаблонСпискаПолей, Отчет.Группировка);
		Для каждого Показатель Из ШаблонСпискаПолей Цикл
			
			Если КоллекцияВключенныхНастроек.Найти(Показатель.Поле, "Поле") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сортировка.
	Если ОписаниеНастройки.Свойство("Порядок", КоллекцияВключенныхНастроек) Тогда
		
		Порядок = Отчет.КомпоновщикНастроек.Настройки.Порядок;
		Порядок.Элементы.Очистить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		Если ИмяРазделителя = "Хозрасчетный" Тогда 
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета);
		Иначе
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто);
		КонецЕсли;
		
		// Заполняем ранее включавшуюся сортировку.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяСтрока.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			НоваяСтрока.Использование     = Показатель.Использование;
			НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(Показатель.Поле);
			НоваяСтрока.ТипУпорядочивания = Показатель.ТипУпорядочивания;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует отборы, ранее применявшиеся по счету РазделительИсходноеЗначение к отборам по счету Разделитель,
// удаляя неподходящие. Сопоставление производится по видам субконто.
//
// Параметры:
//  Отбор        - ОтборКомпоновкиДанных - набор преобразуемых отборов.
//  ИсходныйСчет - ПланСчетовСсылка - ранее использовавшийся счет.
//  НовыйСчет    - ПланСчетовСсылка - новый счет, который будет использоваться.
//
Процедура ПреобразоватьОтборыПоСчету(Отбор, ИсходныйСчет, НовыйСчет) Экспорт
	
	Если ИсходныйСчет = НовыйСчет Тогда
		Возврат;
 	КонецЕсли; 
	
	// Определяем правила преобразования аналитик одного счета в аналитики другого.
	
	ДанныеИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ИсходныйСчет);
	ДанныеНовогоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НовыйСчет);
	ИспользоватьОднуНоменклатурнуюГруппу = БухгалтерскийУчетВызовСервераПовтИсп.ИспользоватьОднуНоменклатурнуюГруппу();
	ВестиУчетПоДоговорам = РаботаСДоговорамиКонтрагентовБПВызовСервера.ВестиУчетПоДоговорам();
	
	// Правила преобразования будут описаны в виде соответствия.
	// Ключ = имя поля в исходном отборе.
	// Значение = имя поля в новом отборе. Если задано пустое значение, то отбор по полю нужно удалить.
	КартаПолей = Новый Соответствие;
	
	// Проекция измерений.
	Если ДанныеНовогоСчета.УчетПоПодразделениям
	   И БухгалтерскийУчетПереопределяемый.ИспользоватьПодразделения() Тогда
		КартаПолей.Вставить("Подразделение", "Подразделение");
	Иначе
		КартаПолей.Вставить("Подразделение", "");
	КонецЕсли;
	Если ДанныеНовогоСчета.Валютный Тогда
		КартаПолей.Вставить("Валюта", "Валюта");
	Иначе
		КартаПолей.Вставить("Валюта", "");
	КонецЕсли;
	
	// Проекция субконто.
	НовыеСубконто = Новый Массив;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		НовыеСубконто.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
	Для НомерСубконтоИсходного = 1 По ДанныеИсходногоСчета.КоличествоСубконто Цикл
		
		ЦелевоеСубконто = 0;
		Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
			Если ДанныеИсходногоСчета["ВидСубконто" + НомерСубконтоИсходного] = ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] Тогда
				
				Если (Не ИспользоватьОднуНоменклатурнуюГруппу 
					Или ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
				   И (ВестиУчетПоДоговорам 
					Или ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры) Тогда
					ЦелевоеСубконто = НомерСубконто;
				Иначе // Это субконто существует на счете, но не должно использоваться.
					НовыеСубконто.Удалить(НовыеСубконто.Найти("Субконто" + НомерСубконто));
				КонецЕсли;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		КартаПолей.Вставить("Субконто" + НомерСубконтоИсходного,
			?(ЦелевоеСубконто = 0, "", "Субконто" + ЦелевоеСубконто));
	
	КонецЦикла;	
		
	// Проекция ресурсов. Задаем только те ресурсы, которые необходимо удалить.
	ДоступныеПоляОтбора = Отбор.ДоступныеПоляОтбора.Элементы;
	ГруппыРесурсов = Новый Структура;
	Если ДоступныеПоляОтбора.Найти("ОборотыЗаПериод") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("ОборотыЗаПериод", "Оборот");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаКонецПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаКонецПериода",  "Конечный");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаНачалоПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаНачалоПериода", "Начальный");
	КонецЕсли;
	ГруппыПоказателей = Новый Массив;
	ГруппыПоказателей.Добавить("БУ");
	ГруппыПоказателей.Добавить("НУ");
	ГруппыПоказателей.Добавить("ПР");
	ГруппыПоказателей.Добавить("ВР");
	ГруппыПоказателей.Добавить("Контроль");
	ГруппыПоказателей.Добавить("ВалютнаяСумма");
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	Если Не ДанныеНовогоСчета.Валютный И ДанныеИсходногоСчета.Валютный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ДанныеНовогоСчета.Количественный И ДанныеИсходногоСчета.Количественный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ДанныеНовогоСчета.НалоговыйУчет И ДанныеИсходногоСчета.НалоговыйУчет Тогда
		
		Для каждого ГруппаПоказателей Из ГруппыПоказателей Цикл
			Если ГруппаПоказателей <> "НУ"
			   И ГруппаПоказателей <> "ПР"
			   И ГруппаПоказателей <> "ВР"
			   И ГруппаПоказателей <> "Контроль" Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СторонаПроводки Из СтороныПроводки Цикл
			
				Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
					
					Если ГруппаРесурсов.Значение = "Оборот" Тогда
						
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						
					Иначе
						
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ДанныеНовогоСчета.Вид <> ВидСчета.АктивноПассивный И ДанныеИсходногоСчета.Вид = ВидСчета.АктивноПассивный Тогда
		
		Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
			Если ГруппаРесурсов.Значение = "Оборот" Тогда
				Продолжить;
			КонецЕсли;
		
			Для каждого СторонаПроводки Из СтороныПроводки Цикл
				
				Для каждого ГруппаПоказателей Из ГруппыПоказателей Цикл
				
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
				
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Применяем проекцию аналитик. Удаляем неподходящие отборы.
	
	КоллекцияОтборов = Отбор.Элементы;
	ИспользуемыеПоля = Новый Соответствие;
	ПрименитьКартуПолей(КартаПолей, КоллекцияОтборов, ИспользуемыеПоля);
	
	// Добавляем отсутствующие отборы по-умолчанию, упорядочиваем имеющиеся.
	
	// Сдвигаем группы отборов вверх.
	ТекущийИндексУпорядоченных = 0;
	Для ТекущийИндексАнализируемых = 0 По КоллекцияОтборов.Количество() - 1 Цикл
		
		Если ТипЗнч(КоллекцияОтборов[ТекущийИндексАнализируемых]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ТекущийИндексУпорядоченных < ТекущийИндексАнализируемых Тогда
				КоллекцияОтборов.Сдвинуть(КоллекцияОтборов[ТекущийИндексАнализируемых],
					ТекущийИндексУпорядоченных - ТекущийИндексАнализируемых);
			КонецЕсли;
			ТекущийИндексУпорядоченных = ТекущийИндексУпорядоченных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(КартаПолей["Подразделение"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Подразделение",
			ТекущийИндексУпорядоченных);
	КонецЕсли;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		
		Если НовыеСубконто.Найти("Субконто" + НомерСубконто) = Неопределено Тогда
			// Это субконто существует на счете, но не должно использоваться.
			Продолжить;
		КонецЕсли;
		
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Субконто" + НомерСубконто,
			ТекущийИндексУпорядоченных);		
			
	КонецЦикла;
	Если Не ПустаяСтрока(КартаПолей["Валюта"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Валюта",
			ТекущийИндексУпорядоченных);
	КонецЕсли; 
	
КонецПроцедуры

// Удаляет некорректные поля сортировки.
//
// Параметры:
//  ПоляСортировки - ПорядокКомпоновкиДанных, ТаблицаЗначений - набор обрабатываемых полей сортировки.
//  ДоступныеПоляПорядка - ДоступныеПоляКомпоновкиДанных - проверка на доступность полей.
//  КоличествоСубконто - Число - количество субконто, которые можно использовать.
//  ДанныеСчета  - Структура - если заполнено, то сверяются виды субконто.
//
Процедура УдалитьНедоступныеПоля(ПоляСортировки, ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета = Неопределено) Экспорт
	
	// Удаляем сохраненные поля, которые стали некорректными.
	ИсключаемыеНастройки = Новый Массив;
	Для каждого Показатель Из ПоляСортировки Цикл
		
		ПозицияТочки = СтрНайти(Показатель.Поле, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоля = Показатель.Поле;
		Иначе
			ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
		КонецЕсли;
		Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДанныеСчета <> Неопределено И СтрНачинаетсяС(ИмяПоля, "Субконто")
		   И Показатель.ВидСубконто <> ДанныеСчета["Вид" + ИмяПоля] Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДоступныеПоляПорядка.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		КонецЕсли; 
		
	КонецЦикла;
	Для каждого Показатель Из ИсключаемыеНастройки Цикл
		ПоляСортировки.Удалить(Показатель);
	КонецЦикла;
	
КонецПроцедуры

// Процедуру необходимо вызывать для отчетов, в которых используются группировки по дополнительным реквизитам или
// свойствам субконто. В случае, когда группировка по доп.реквизиту выше группировки по самому субконто, суммы с
// незаполненными значениями доп.реквизита (и подчиненные им) не выводятся в отчет. Чтобы они выводились, данная
// процедура для полей-реквизитов (или доп.свойств) сбрасывает флаг ИгнорироватьЗначенияNULL .
//
// Параметры:
//  ПоляНабораДанных - ПоляНабораДанныхМакетаКомпоновкиДанных - коллекция полей.
//
Процедура ОтключитьИгнорированиеNull(ПоляНабораДанных) Экспорт
	
	Для Каждого Поле Из ПоляНабораДанных Цикл
			
		Если СтрНачинаетсяС(Поле.ПутьКДанным, "Субконто")
		   И Сред(Поле.ПутьКДанным, 10, 1) = "." Тогда
			
			Поле.Роль.ИгнорироватьЗначенияNULL = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Находит в таблицах, входящих в состав структуры настроек отчета, группировку строк с заданным именем.
//
// Параметры:
//  Структура	 - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - элементы структуры настроек, в составе которых нужно искать. 
//  Имя			 - Строка - имя группировки.
// 
// Возвращаемое значение:
//  ГруппировкаТаблицыКомпоновкиДанных - найденная группировка.
//  Неопределено - не найдена группировка с указанным именем.
//
Функция НайтиГруппировкуТаблицы(Структура, Имя) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя",         Имя);
	Отбор.Вставить("Лимит",       1);
	Отбор.Вставить("Направление", "Строки");
	
	НайденныеГруппировки = Новый Массив;
	НайтиГруппировкиТаблицы(НайденныеГруппировки, Структура, Отбор);
	
	Если Не ЗначениеЗаполнено(НайденныеГруппировки) Тогда
		Возврат Неопределено;
	Иначе
		Возврат НайденныеГруппировки[0];
	КонецЕсли;
	
КонецФункции

// Ищет в структуре отчета (структуре настроек) группировки по заданному отбору.
//
// Параметры:
//  НайденныеГруппировки - Массив - будет дополнен найденными группировками - значениями типа ГруппировкаТаблицыКомпоновкиДанных.
//  Группировки			 - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - элементы структуры настроек.
//  Отбор				 - Структура - отбор. Допустимые свойства:
//                         * Имя             - Строка - Имя группировки.
//                         * ИмяТаблицы      - Строка - Имя таблицы, в которой находится группировка.
//                         * КоличествоПолей - Число - количество полей, выбранных в группировке. 
//                                             Например, могут быть нужны только группировки, содержащие одно поле.
//                         * Состояние       - СостояниеЭлементаНастройкиКомпоновкиДанных - состояние группировки.
//                         * Лимит           - Максимальное количество искомых группировок.
//                                             Например, предполагается, что под отбор попадет не более одной группировки.
//  ТаблицаНайдена		 - Булево - служебный параметр, используемый при рекурсивном вызове.
//
Процедура НайтиГруппировкиТаблицы(НайденныеГруппировки, Группировки, Отбор, ТаблицаНайдена = Ложь) Экспорт
	
	Если Отбор.Свойство("Лимит") И НайденныеГруппировки.Количество() >= Отбор.Лимит Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Группировка Из Группировки Цикл
		
		Если Не Группировка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(Группировка);
		
		Если ТаблицаНайдена Тогда
			
			Если ТипЭлемента = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				Если Не Отбор.Свойство("КоличествоПолей") Или Группировка.Выбор.Элементы.Количество() = Отбор.КоличествоПолей Тогда
					
					Если (Не Отбор.Свойство("Состояние") Или Группировка.Состояние = Отбор.Состояние)
						И (Не Отбор.Свойство("Имя") Или Группировка.Имя = Отбор.Имя) Тогда
						НайденныеГруппировки.Добавить(Группировка);
					КонецЕсли;
					
					НайтиГруппировкиТаблицы(НайденныеГруппировки, Группировка.Структура, Отбор, Истина);
					
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			Если Не Отбор.Свойство("ИмяТаблицы") Или Группировка.Имя = Отбор.ИмяТаблицы Тогда
				
				Если Не Отбор.Свойство("Направление") Или Отбор.Направление = "Строки" Тогда
					НайтиГруппировкиТаблицы(НайденныеГруппировки, Группировка.Строки, Отбор, Истина);
				КонецЕсли;
				
				Если Не Отбор.Свойство("Направление") Или Отбор.Направление = "Колонки" Тогда
					НайтиГруппировкиТаблицы(НайденныеГруппировки, Группировка.Колонки, Отбор, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЭлемента = Тип("ГруппировкаКомпоновкиДанных") Тогда
			
			НайтиГруппировкиТаблицы(НайденныеГруппировки, Группировка.Структура, Отбор);
			
		КонецЕсли;
		
		Если Отбор.Свойство("Лимит") И НайденныеГруппировки.Количество() >= Отбор.Лимит Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с группировками отчета, в которых каждый счет встречается только один раз.
// Возвращаются только те строки, у которых в исходной таблице заполнен Счет и установлен признак Использование.
//
// Параметры:
//	ГруппировкиОтчета - ТаблицаЗначений - Исходные группировки отчета по счетам. Обязательные колонки:
//		* Счет - ПланСчетовСсылка.Хозрасчетный - Счет учета, для которого заданы настройки.
//		* Использование - Булево - Признак "включения" строки настройки для отчета.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Совпадает по структуре с исходной таблицей ГруппировкиОтчета,
//  но не содержит повторяющихся строк для одного и того же счета. Дополнительно включает колонки:
//		* СчетаВИерархии - Массив - Массив субсчетов, которые необходимо учитывать по строке группировки.
//
Функция УникальныеНастройкиОтчетаПоСчетам(ГруппировкиОтчета) Экспорт
	
	// Создаем таблицу, из которой дальше будем считывать настройки группировки.
	ГруппировкиПоСубсчетам = ГруппировкиОтчета.СкопироватьКолонки();
	
	// Для счетов-групп развернем каждую строку таблицы по субсчетам.
	ГруппировкиПоСубсчетам.Колонки.Добавить("Субсчет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ГруппировкиПоСубсчетам.Колонки.Добавить("НомерИсходнойГруппировки",        ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ГруппировкиПоСубсчетам.Колонки.Добавить("ЭтоСобственнаяНастройкаСубсчета", Новый ОписаниеТипов("Булево"));
	
	НомерИсходнойГруппировки = 0;
	Для каждого СтрокаГруппировки Из ГруппировкиОтчета Цикл

		НомерИсходнойГруппировки = НомерИсходнойГруппировки + 1;
		Если НЕ СтрокаГруппировки.Использование ИЛИ НЕ ЗначениеЗаполнено(СтрокаГруппировки.Счет) Тогда
			Продолжить;
		КонецЕсли;
	
		Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(СтрокаГруппировки.Счет);
		Для каждого Субсчет Из Субсчета Цикл
			НоваяСтрока = ГруппировкиПоСубсчетам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
			НоваяСтрока.Субсчет                         = Субсчет;
			НоваяСтрока.НомерИсходнойГруппировки        = НомерИсходнойГруппировки;
			// Признак того, что настройка задана для самого субсчета, а не вычислена через счет верхнего уровня.
			НоваяСтрока.ЭтоСобственнаяНастройкаСубсчета = (СтрокаГруппировки.Счет = Субсчет);
		КонецЦикла;
		
	КонецЦикла;

	// Оставим по одной строке по каждому субсчету.
	ГруппировкиПоСубсчетам.Сортировать("Субсчет, ЭтоСобственнаяНастройкаСубсчета УБЫВ", Новый СравнениеЗначений);
	
	СтрокиКУдалению = Новый Массив;
	ТекущийСубсчет  = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
		
		Если СтрокаГруппировки.Субсчет <> ТекущийСубсчет Тогда
			// Новый субсчет, первую строку по нему оставляем, остальные удалим.
			ТекущийСубсчет = СтрокаГруппировки.Субсчет;
		Иначе
			СтрокиКУдалению.Добавить(СтрокаГруппировки);
		КонецЕсли;
	
	КонецЦикла;
	
	// Удаляем дублирующиеся строки.
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ГруппировкиПоСубсчетам.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Оставляем исходные колонки и формируем список субсчетов, которые относятся к конкретной строке.
	Результат = ГруппировкиПоСубсчетам.СкопироватьКолонки();
	Результат.Колонки.Добавить("СчетаВИерархии", Новый ОписаниеТипов("Массив"));
	
	ГруппировкиПоСубсчетам.Сортировать("НомерИсходнойГруппировки", Новый СравнениеЗначений);
	ТекущаяСтрока = Неопределено;
	
	Для каждого СтрокаГруппировки Из ГруппировкиПоСубсчетам Цикл
	
		Если ТекущаяСтрока = Неопределено 
			ИЛИ ТекущаяСтрока.НомерИсходнойГруппировки <> СтрокаГруппировки.НомерИсходнойГруппировки Тогда
			// Добавляем новую строку в результирующую таблицу группировок.
			ТекущаяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаГруппировки);
		КонецЕсли;
		
		// Заполняем массив субсчетов, входящих в строку группировки.
		ТекущаяСтрока.СчетаВИерархии.Добавить(СтрокаГруппировки.Субсчет);
	
	КонецЦикла;

	// Удалим вспомогательные колонки.
	Результат.Колонки.Удалить("Субсчет");
	Результат.Колонки.Удалить("НомерИсходнойГруппировки");
	Результат.Колонки.Удалить("ЭтоСобственнаяНастройкаСубсчета");
	
	Возврат Результат;
	
КонецФункции

// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

#КонецОбласти 

#Область Оформление

// Определяет имя отчета (объекта метаданных), отображаемого в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма объекта.
//
// Возвращаемое значение:
//	Строка - Имя объекта метаданных.
//
Функция ИмяОтчета(Форма) Экспорт
	
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ИмяОтчетаПоИмениФормы(Форма);
	Если ИмяОтчета <> Неопределено Тогда
		Возврат ИмяОтчета;
	КонецЕсли;
	
	// Основной реквизит формы должен называться Отчет
	ОтчетОбъект = Форма.РеквизитФормыВЗначение("Отчет");
	Возврат ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

// Устанавливает в настройках отчета заголовки групп колонок с ресурсами.
//
// Группы колонок должны быть помещены в именованные наборы колонок с уровнем группировки "детальные записи".
//
// Другими словами, настройки схемы компоновки должны быть выполнены так:
// - колонки кросс-таблицы содержат на верхнем уровне несколько наборов уровня группировки "Детальные записи";
// - каждый такой набор:
// -- соответствует группе колонок, которые в отчете объединены дополнительной шапкой;
// -- имеет имя;
// -- в выбранных полях содержит одну группу верхнего уровня;
// -- в составе группы содержит несколько выбранных полей (ресурсов), входящих в эту группу.
//
// Параметры:
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - настраиваемый объект.
//  ТекстыЗаголовков	 - Структура - 
//                         * Ключ - имя набора колонок, заданное в схеме;
//                         * Значение - Строка - заголовок колонки.
//
Процедура УстановитьЗаголовкиГруппКолонок(КомпоновщикНастроек, ТекстыЗаголовков) Экспорт
	
	Для Каждого Таблица Из КомпоновщикНастроек.Настройки.Структура Цикл
		
		Если ТипЗнч(Таблица) <> Тип("ТаблицаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ГруппаКолонок Из Таблица.Колонки Цикл
			
			Если ПустаяСтрока(ГруппаКолонок.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ТекстыЗаголовков.Свойство(ГруппаКолонок.Имя) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Поле Из ГруппаКолонок.Выбор.Элементы Цикл
				
				Если ТипЗнч(Поле) <> Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не Поле.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				Поле.Заголовок = ТекстыЗаголовков[ГруппаКолонок.Имя];
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает заголовок, помещающийся без переноса при установленной в процедуре УстановитьШиринуПоказателей() ширине.
//
// Возвращаемое значение:
//	Строка - Текст заголовка для группы "Показатели".
//
Функция ЗаголовокГруппыПоказателей() Экспорт
	
	Возврат НСтр("ru = 'Показа-" + Символы.ПС + "тели'");
	
КонецФункции

// Устанавливает минимальную ширину полей с показателями,
// при которой умещается заголовок, заданный в функции ЗаголовокГруппыПоказателей().
//
// Параметры:
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	НаборПоказателей - Массив - Содержит имена показателей отчета.
//
Процедура УстановитьМинимальнуюШиринуПоказателей(Схема, НаборПоказателей) Экспорт
	
	ВычисляемыеПоля = Схема.ВычисляемыеПоля;
	
	Для Каждого Показатель Из НаборПоказателей Цикл
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "НачальныйОстаток"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "Оборот"));
		УстановитьЗначениеМинимальнойШириныПоля(ВычисляемыеПоля.Найти("Показатели." + Показатель + "КонечныйОстаток"));
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает условное оформление для поля ТипГруппировки табличной части Группировка настроек отчета.
//
// Параметры:
//   Форма - УправляемаяФорма - форма отчета.
//
Процедура УстановитьУсловноеОформлениеТипГруппировки(Форма) Экспорт

	УсловноеОформление = Форма.УсловноеОформление;


	// Тип группировки "Без групп"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без групп'"));


	// Тип группировки "С группами"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 1);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'С группами'"));


	// Тип группировки "Только группы"

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГруппировкаТипГруппировки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Отчет.Группировка.ТипГруппировки", ВидСравненияКомпоновкиДанных.Равно, 2);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Только группы'"));

КонецПроцедуры

// Удаляем из переданной коллекции настроек условного оформления автоотступ.
//
// Параметры:
//	УсловноеОформление - УсловноеОформление - Коллекция условного оформления.
//
Процедура УдалитьАвтоотступИзУсловногоОформления(УсловноеОформление) Экспорт

	// Удалим автоотступ из условного оформления.
	ЭлементыДляУдаления = Новый Массив;
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		ПараметрОформления = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПараметр(ЭлементУсловногоОформления.Оформление, "Автоотступ");
		Если ПараметрОформления <> Неопределено И ПараметрОформления.Использование = Истина Тогда
			ЭлементыДляУдаления.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из ЭлементыДляУдаления Цикл
		УсловноеОформление.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

// Определяем символ, являющийся разделителем дробной части для представления чисел: если он явно не указан в условном
// оформлении, то берется из представления числа с учетом региональных настроек базы.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - может содержать формат представления чисел в области.
//  КонтрольСдвигаРазрядов - Булево - если условное оформление задает округление или сдвиг разрядов, т.е. возможно
//                                    несоответствие числа и представления, то функция возвращает Неопределено .
//
// Возвращаемое значение:
//   Строка      - значение, указываемое в ЧРД (NDS) функции Формат().
//   Неопределено - в условном оформлении задан формат, приводящий к неоднозначности между числом и его представлением.
//
Функция РазделительДробнойЧастиПоУсловномуОформлению(УсловноеОформление, КонтрольСдвигаРазрядов = Истина)
	
	ФорматРазделителяДробнойЧасти = "";
	
	ПараметрФормат = Новый ПараметрКомпоновкиДанных("Формат");
	Для каждого ЭлементУО Из УсловноеОформление.Элементы Цикл
		
		Если Не ЭлементУО.Использование Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Оформляемое Из ЭлементУО.Оформление.Элементы Цикл
		
			Если Не Оформляемое.Использование
			 Или Оформляемое.Параметр <> ПараметрФормат Тогда
				Продолжить;
			КонецЕсли;
			
			Если КонтрольСдвигаРазрядов
			   И (СтрНайти(Оформляемое.Значение, "ЧС=") <> 0 Или СтрНайти(Оформляемое.Значение, "ЧДЦ=") <> 0) Тогда
				// Нулевой разряд представления не соответствует нулевому разряду числа, или количество разрядов в числе не равно
				// количеству разрядов в его представлении.
				// Например, явно заданное округление ЧДЦ=2 может привести к погрешностям при выводе количества.
				Возврат Неопределено;
			КонецЕсли;

			ФорматЧРД = "";
			
			// Анализируем, заданы ли для чисел параметры форматирования, определяемые отдельным языком (страной).
			ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "Л=");
			Если ЛеваяГраницаВыражения = 0 Тогда
				ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "L=");
			КонецЕсли;
			Если ЛеваяГраницаВыражения <> 0 Тогда
				
				ФорматЧРД = ФорматЧРД + ";";
				ПраваяГраницаВыражения = СтрНайти(Оформляемое.Значение, ";", НаправлениеПоиска.СНачала, ЛеваяГраницаВыражения + 3);
				Если ПраваяГраницаВыражения = 0 Тогда
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения);
				Иначе
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения,
						ПраваяГраницаВыражения - ЛеваяГраницаВыражения);
				КонецЕсли;
				
			КонецЕсли;
			
			// Анализируем, задан ли для чисел особый разделитель дробной части.
			ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "ЧРД=");
			Если ЛеваяГраницаВыражения = 0 Тогда
				ЛеваяГраницаВыражения = СтрНайти(Оформляемое.Значение, "NDS=");
			КонецЕсли;
			Если ЛеваяГраницаВыражения <> 0 Тогда
				
				Если Не ПустаяСтрока(ФорматЧРД) Тогда
					ФорматЧРД = ФорматЧРД + ";";
				КонецЕсли;
				ПраваяГраницаВыражения = СтрНайти(Оформляемое.Значение, ";", НаправлениеПоиска.СНачала, ЛеваяГраницаВыражения + 3);
				Если ПраваяГраницаВыражения = 0 Тогда
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения);
				Иначе
					ФорматЧРД = ФорматЧРД + Сред(Оформляемое.Значение, ЛеваяГраницаВыражения,
						ПраваяГраницаВыражения - ЛеваяГраницаВыражения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ФорматЧРД) Тогда // условное оформление не учитываем, т.к. не влияет на разделитель дробной части
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ФорматРазделителяДробнойЧасти) Тогда  // ранее уже находили формат в условном оформлении
				Возврат Неопределено;
			КонецЕсли;
			
			ФорматРазделителяДробнойЧасти = ФорматЧРД;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	ЭталонноеЧисло = Формат(1.1, ФорматРазделителяДробнойЧасти);
	
	Если СтрДлина(ЭталонноеЧисло) > 3 Тогда // разделитель из нескольких символов
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(ЭталонноеЧисло, 2, 1);
	
КонецФункции

#КонецОбласти

#Область КонтрольИтогов

// Записывает событие расхождения итогов в журналы логов.
//
// Параметры:
//  МестоРасхождения - Структура - см. БухгалтерскиеОтчетыКлиентСервер.МестоРасхожденияИтогов() .
//  ТипСобытия   - Строка - "Ошибка" = зафиксирована проблема, "Пересчет" = попытка исправления проблемы.
//
// Возвращаемое значение:
//   Структура   - ключ = идентификатор журнала-получателя, значение = имя события, записанного в этот журнал.
//
Функция ЗаписьВЖурналОРасхожденииИтогов(МестоРасхождения, ТипСобытия) Экспорт
	
	ЗарегистрированныеСобытия = Новый Структура;
	
	// Регистрируем событие журнала регистрации.
	ИмяСобытия = ИмяСобытияЖурнала("ЖурналРегистрации", ТипСобытия);
	УровеньВажности = ?(ТипСобытия = "Ошибка", УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Предупреждение);
	
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		МестоРасхождения.НачалоПериода, МестоРасхождения.КонецПериода);
	ПредставлениеОрганизации = ?(ЗначениеЗаполнено(МестоРасхождения.Организация), " " + МестоРасхождения.Организация, "");
	Если ТипСобытия = "Ошибка" Тогда
		КомментарийСобытия = НСтр("ru = 'Обнаружено расхождение между остатками и оборотами в отчете %1%2%3'");
	Иначе
		КомментарийСобытия = НСтр("ru = 'Пересчет итогов%2 после обнаружения проблемы в отчете %1.%3'");
	КонецЕсли;
	КомментарийСобытия = СтрШаблон(КомментарийСобытия,
		МестоРасхождения.ИмяОтчета, ПредставлениеПериода, ПредставлениеОрганизации);
		
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		УровеньВажности,
		Метаданные.РегистрыБухгалтерии.Хозрасчетный,
		,
		КомментарийСобытия);
	ЗарегистрированныеСобытия.Вставить("ЖурналРегистрации", ИмяСобытия);
	
	// Регистрируем событие технологического журнала.
	ИмяСобытия = ИмяСобытияЖурнала("ТехнологическийЖурнал", ТипСобытия) + "." + МестоРасхождения.ИмяОтчета;
	
	ОбщегоНазначенияБТС.ЗаписьТехнологическогоЖурнала(ИмяСобытия, МестоРасхождения);
	ЗарегистрированныеСобытия.Вставить("ТехнологическийЖурнал", ИмяСобытия);
	
	// Регистрируем инцидент в pult.1c.ru или в ЦКК.
	ИмяСобытия = ИмяСобытияЖурнала("ЦентрКонтроляКачества", ТипСобытия) + "." + МестоРасхождения.ИмяОтчета;
	
	ПредставлениеПериода = Формат(МестоРасхождения.НачалоПериода, "ДФ=ггггММдд")
		+ Формат(МестоРасхождения.КонецПериода, "ДФ=ггггММдд");
	ПредставлениеОрганизации = ?(ЗначениеЗаполнено(МестоРасхождения.Организация),
		Строка(МестоРасхождения.Организация.УникальныйИдентификатор()), "");
	КлючУникальности = МестоРасхождения.ИмяОтчета + ПредставлениеПериода + ПредставлениеОрганизации + ТипСобытия;
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистикиСутки(ИмяСобытия, КлючУникальности, 1, (ТипСобытия <> "Ошибка"));
	ЗарегистрированныеСобытия.Вставить("ЦентрКонтроляКачества", ИмяСобытия);
	
	Возврат ЗарегистрированныеСобытия;
	
КонецФункции

// Читает из РезультатОтчета суммы итогов и прибавляет их к КонтрольноеСоотношение.
//
// Параметры:
//  РезультатОтчета - ТабличныйДокумент - сформированный отчет (без области "Подписи");
//  ОбластьИтогов - Структура - см. ОбластьЧтенияИтогов() .
//  КонтрольноеСоотношение - Число - сумма, к которой добавляются читаемые значения итогов.
//
Процедура ДополнитьКонтрольноеСоотношение(РезультатОтчета, ОбластьИтогов, КонтрольноеСоотношение) Экспорт
	
	ИскатьФлагУчета = ОбластьИтогов.ИскатьФлагУчета;
	Если ИскатьФлагУчета Тогда
		ФлагКт = НСтр("ru = 'К'");
	КонецЕсли;

	Для НомерСтроки = ОбластьИтогов.ПерваяИзСтрокИтогов По ОбластьИтогов.ПоследняяИзСтрокИтогов Цикл
		
		Если НомерСтроки = ОбластьИтогов.НомерСтрокиПоказателяКонтрольАбсолютный Тогда
			Продолжить;
		КонецЕсли;
		Для каждого КолонкаИтога Из ОбластьИтогов.ФлагиОбщегоИтога Цикл
			
			Если ИскатьФлагУчета Тогда
				ЗнакИтога = ?(РезультатОтчета.Область(НомерСтроки, КолонкаИтога.Ключ - 1).Текст = ФлагКт, -1, 1);
			Иначе
				ЗнакИтога = 1;
			КонецЕсли;
			ЗнакИтога = ЗнакИтога * КолонкаИтога.Значение;
			
			ЯчейкаИтога = РезультатОтчета.Область(НомерСтроки, КолонкаИтога.Ключ);
			СуммаИтога = БухгалтерскиеОтчетыКлиентСервер.СтрокаСФорматомВЧисло(ЯчейкаИтога.Текст, ОбластьИтогов.РазделительДробнойЧасти);
			
			КонтрольноеСоотношение = КонтрольноеСоотношение	+ ЗнакИтога * СуммаИтога;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Анализирует, был ли отчет сформирован на основании оборотных субконто, что может привести к невыполнению
// контрольного соотношения "нач.остатки + ДО - КО = кон.остатки".
//
// Параметры:
//  ИсточникВидовСубконто - Массив, СписокЗначений - конкретные субконто, которые анализируются.
//               - ПланСчетовСсылка.Хозрасчетный - счет, список субконто которого анализируется.
//  Отбор        - КоллекцияЭлементовОтбораКомпоновкиДанных - анализируем субконто, использованные в этом отборе;
//                 Если отбор не указан, анализируем все виды субконто.
// 
// Возвращаемое значение:
//   Булево      - Истина, если установлен отбор хотя бы по одному оборотному субконто.
//
Функция ИспользуютсяОборотныеСубконто(ИсточникВидовСубконто, Отбор = Неопределено) Экспорт
	
	Перем ОтбираемыеСубконто, Счет;
	
	Если Отбор <> Неопределено Тогда
		// Составляем список видов субконто, использованных в отборе.
		ОтбираемыеСубконто = Новый Массив;
		СписокОтборовПоСубконто(Отбор, ОтбираемыеСубконто);
		Если ОтбираемыеСубконто.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ТипСпискаСубконто = ТипЗнч(ИсточникВидовСубконто);
	Если ТипСпискаСубконто = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда

		Счет = ИсточникВидовСубконто;
		ВидыСубконто = Новый Массив;
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
			ВидыСубконто.Добавить(СвойстваСчета["ВидСубконто" + НомерСубконто]);
		КонецЦикла;
		
	ИначеЕсли ТипСпискаСубконто = Тип("СписокЗначений") Тогда
		
		ВидыСубконто = ИсточникВидовСубконто.ВыгрузитьЗначения();
		
	Иначе // массив
		
		ВидыСубконто = ИсточникВидовСубконто;
		
	КонецЕсли;

	Если ОтбираемыеСубконто <> Неопределено Тогда
		// Анализируем только виды субконто, использованные в отборе.
		ВидыСубконтоДляАнализа = Новый Массив;
		Для каждого НомерСубконто Из ОтбираемыеСубконто Цикл
			ВидыСубконтоДляАнализа.Добавить(ВидыСубконто[НомерСубконто - 1]);
		КонецЦикла;
		
	Иначе
		// Анализируем все виды субконто.
		ВидыСубконтоДляАнализа = ВидыСубконто;
		
	КонецЕсли;
	
	// Проверяем, есть ли счет, на котором хотя бы один из видов субконто является оборотным.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоДляАнализа);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В(&ВидыСубконто)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты";
	Если Счет <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.Текст = Запрос.Текст + "
	|	И ХозрасчетныйВидыСубконто.Ссылка = &Счет";
		
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Выполняет пересчет итогов регистра бухгалтерии.
//
// Параметры:
//  МестоРасхождения - Структура - см. БухгалтерскиеОтчетыКлиентСервер.МестоРасхожденияИтогов()
//  АдресРезультата - Строка - временное хранилище для помещения результата процедуры.
//
Процедура ПересчитатьИтоги(МестоРасхождения, АдресРезультата) Экспорт

	РезультатПересчета = Новый Структура;
	РезультатПересчета.Вставить("ПересчетУспешноЗавершен", Ложь);
	РезультатПересчета.Вставить("СообщениеОбОшибке", "");
	РезультатПересчета.Вставить("ЗарегистрированныеСобытия", Новый Структура);

	РегистрСИтогами = РегистрыБухгалтерии.Хозрасчетный;
	Если Не РегистрСИтогами.ПолучитьИспользованиеИтогов() Тогда
		
		РезультатПересчета.ПересчетУспешноЗавершен = Истина;
		РезультатПересчета.СообщениеОбОшибке = НСтр("ru = 'Для регистра бухгалтерии отключено использование итогов.'");
		ПоместитьВоВременноеХранилище(РезультатПересчета, АдресРезультата);
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		// Установим узкий интервал рассчитанных итогов, чтобы минимизировать время пересчета.
		
		ЦелевойМинимальныйПериодРассчитанныхИтогов = НачалоГода(ДобавитьМесяц(ОбщегоНазначения.ТекущаяДатаПользователя(), -24));
		НачалоВеденияУчета = Справочники.Организации.ДатаНачалаВеденияУчета(Неопределено);
		Если НачалоВеденияУчета <> Неопределено
		   И НачалоВеденияУчета > ЦелевойМинимальныйПериодРассчитанныхИтогов Тогда
			ЦелевойМинимальныйПериодРассчитанныхИтогов = НачалоМесяца(НачалоВеденияУчета);
		КонецЕсли;
			
		ЦелевойМаксимальныйПериодРассчитанныхИтогов = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
		Если ЦелевойМаксимальныйПериодРассчитанныхИтогов < ЦелевойМинимальныйПериодРассчитанныхИтогов Тогда
			ЦелевойМаксимальныйПериодРассчитанныхИтогов = КонецМесяца(ЦелевойМинимальныйПериодРассчитанныхИтогов);
		КонецЕсли;
		
		КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
		ИсходныйМинимальныйПериодРассчитанныхИтогов = РегистрСИтогами.ПолучитьМинимальныйПериодРассчитанныхИтогов();
		Если КорректныйПериод.НачалоКорректногоПериода > ИсходныйМинимальныйПериодРассчитанныхИтогов Тогда
			ИсходныйМинимальныйПериодРассчитанныхИтогов = КорректныйПериод.НачалоКорректногоПериода;
		КонецЕсли;
		ИсходныйМаксимальныйПериодРассчитанныхИтогов = РегистрСИтогами.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
		Если Не ЗначениеЗаполнено(ИсходныйМаксимальныйПериодРассчитанныхИтогов)
		 Или КорректныйПериод.КонецКорректногоПериода < ИсходныйМаксимальныйПериодРассчитанныхИтогов Тогда
			ИсходныйМаксимальныйПериодРассчитанныхИтогов = КорректныйПериод.КонецКорректногоПериода;
		КонецЕсли;
		
		Если ЦелевойМинимальныйПериодРассчитанныхИтогов > ИсходныйМинимальныйПериодРассчитанныхИтогов
		   И ЦелевойМаксимальныйПериодРассчитанныхИтогов < ИсходныйМаксимальныйПериодРассчитанныхИтогов Тогда
			РегистрСИтогами.УстановитьМинимальныйИМаксимальныйПериодыРассчитанныхИтогов(
				ЦелевойМинимальныйПериодРассчитанныхИтогов, ЦелевойМаксимальныйПериодРассчитанныхИтогов);
		ИначеЕсли ЦелевойМинимальныйПериодРассчитанныхИтогов > ИсходныйМинимальныйПериодРассчитанныхИтогов Тогда
			РегистрСИтогами.УстановитьМинимальныйПериодРассчитанныхИтогов(ЦелевойМинимальныйПериодРассчитанныхИтогов);
		ИначеЕсли ЦелевойМаксимальныйПериодРассчитанныхИтогов < ИсходныйМаксимальныйПериодРассчитанныхИтогов Тогда
			РегистрСИтогами.УстановитьМаксимальныйПериодРассчитанныхИтогов(ЦелевойМаксимальныйПериодРассчитанныхИтогов);
		КонецЕсли;
		
		// Пересчитаем как итоги за периоды, так и текущие итоги.
		РегистрСИтогами.ПересчитатьИтоги();
		
		РезультатПересчета.ПересчетУспешноЗавершен = Истина;
		МестоРасхождения.НачалоПериода = ЦелевойМинимальныйПериодРассчитанныхИтогов;
		МестоРасхождения.КонецПериода = ЦелевойМаксимальныйПериодРассчитанныхИтогов;
		РезультатПересчета.ЗарегистрированныеСобытия = ЗаписьВЖурналОРасхожденииИтогов(МестоРасхождения, "Пересчет");
	
	Исключение
		
		РезультатПересчета.СообщениеОбОшибке = ИнформацияОбОшибке();
		
	КонецПопытки;

	ПоместитьВоВременноеХранилище(РезультатПересчета, АдресРезультата);
		
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

// Проверяет, если ли в данных расшифровки отчета сведения о валюте.
//
// Параметры:
//	ДанныеРасшифровки - Структура - Структура, формируемая БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет() с ключами:
//		* Объект - Структура - Реквизиты отчета-объекта
//		* ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - сами данные расшифровки СКД
//
// Возвращаемое значение:
//	Булево - Истина, если в данных расшифровки отчета есть информация о валюте.
//
Функция ОтчетСодержитДанныеПоВалюте(ДанныеРасшифровки) Экспорт

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТипВалюты = Тип("СправочникСсылка.Валюты");

	// Ищем, начиная с конца списка элементов расшифровки, т.к. чаще всего валютные счета идут по номеру 
	// после рублевых, и отчеты по умолчанию добавляют группировку по валюте в конец списка группировок.

	ЭлементыРасшифровки = ДанныеРасшифровки.ДанныеРасшифровки.Элементы;
	Сч = ЭлементыРасшифровки.Количество();
	
	// Отчеты типа карточка счета выводят детальные записи, не группировки, 
	// по их расшифровке нельзя определить наличие валюты в данных отчетах.
	ТолькоДетальныеЗаписиВОтчете = Истина;

	Пока Сч > 0 Цикл
	
		Сч = Сч - 1;
		ЭлементРасшифровки = ЭлементыРасшифровки[Сч];

		Если ТипЗнч(ЭлементРасшифровки) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Продолжить;
		КонецЕсли;

		// Для ссылочных полей основным действием по умолчанию является "Открыть значение", в т.ч. и для валюты,
		// поэтому из всего списка элементов расшифровки анализируем только такие. 
		Если ЭлементРасшифровки.ОсновноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			Продолжить;
		КонецЕсли;
		
		ТолькоДетальныеЗаписиВОтчете = Ложь;

		ЗначенияПолейРасшифровки = ЭлементРасшифровки.ПолучитьПоля();

		Для Каждого Поле Из ЗначенияПолейРасшифровки Цикл
			Если ТипЗнч(Поле.Значение) = ТипВалюты И ЗначениеЗаполнено(Поле.Значение) Тогда
				Если Поле.Значение <> ВалютаРегламентированногоУчета Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТолькоДетальныеЗаписиВОтчете;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеМинимальнойШириныПоля(Поле)
	
	Если Поле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 8);
	
КонецПроцедуры

Функция СчетаУчетаРасчетов(ИсключенныеСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто_Контрагенты.Ссылка КАК Счет,
	               |	ХозрасчетныйВидыСубконто_Договоры.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный КАК ЕстьДоговор
	               |ПОМЕСТИТЬ СчетаКонтрагентыИДоговоры
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Контрагенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Договоры
	               |		ПО ХозрасчетныйВидыСубконто_Контрагенты.Ссылка = ХозрасчетныйВидыСубконто_Договоры.Ссылка
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто_Контрагенты.ВидСубконто = &ВидСубконтоКонтрагенты
	               |	И ХозрасчетныйВидыСубконто_Договоры.ВидСубконто = &ВидСубконтоДоговоры
	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка В (&ИсключенныеСчета)
	               |	И НЕ ХозрасчетныйВидыСубконто_Контрагенты.Ссылка.Забалансовый
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХозрасчетныйВидыСубконто_Документы.Ссылка
	               |ПОМЕСТИТЬ СчетаДокументыРасчетов
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто_Документы
	               |ГДЕ
	               |	ХозрасчетныйВидыСубконто_Документы.ВидСубконто = &ВидСубконтоДокументРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СчетаКонтрагентыИДоговоры.Счет КАК Счет,
	               |	ЕСТЬNULL(СчетаДокументыРасчетов.Ссылка ССЫЛКА ПланСчетов.Хозрасчетный, ЛОЖЬ) КАК ЕстьДокументРасчетов
	               |ПОМЕСТИТЬ Счета
	               |ИЗ
	               |	СчетаКонтрагентыИДоговоры КАК СчетаКонтрагентыИДоговоры
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СчетаДокументыРасчетов КАК СчетаДокументыРасчетов
	               |		ПО СчетаКонтрагентыИДоговоры.Счет = СчетаДокументыРасчетов.Ссылка
	               |ГДЕ
	               |	СчетаКонтрагентыИДоговоры.ЕстьДоговор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Счета.Счет
	               |ИЗ
	               |	Счета КАК Счета
	               |ГДЕ
	               |	Счета.ЕстьДокументРасчетов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Счета.Счет
	               |ИЗ
	               |	Счета КАК Счета
	               |ГДЕ
	               |	НЕ Счета.ЕстьДокументРасчетов";
	
	Запрос.УстановитьПараметр("ИсключенныеСчета", 					ИсключенныеСчета);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", 			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры", 				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидСубконтоДокументРасчетов", 		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Счета = Новый Структура("СчетаСДокументомРасчетов, СчетаБезДокументаРасчетов", Новый СписокЗначений, Новый СписокЗначений);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат.Количество() = 5 Тогда
		
		Счета.Вставить("СчетаСДокументомРасчетов", Результат[3].Выгрузить().ВыгрузитьКолонку("Счет"));
		Счета.Вставить("СчетаБезДокументаРасчетов", Результат[4].Выгрузить().ВыгрузитьКолонку("Счет"));
		
	КонецЕсли;

	Возврат Счета;
	
КонецФункции

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

Функция ИсключаемыеСчетаУчетаТоваров()
	
	Счета_1011 = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.СпецоснасткаИСпецодеждаВЭксплуатации);
	СчетаИсключаемые = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Счета_1011);
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);            // 10.07
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ); // 41.11
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ); // 41.12
	СчетаИсключаемые.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода);        // 41.К
	
	Возврат СчетаИсключаемые;
	
КонецФункции

// Формируем ключи, идентифицирующие описание сохраняемых настроек.
//
// Параметры:
//  ИмяОтчета    - Строка - имя объекта метаданных.
//  ИмяРазделителя - Строка - вариант разделения настроек.
//  Разделитель  - ПланСчетовСсылка, ПланВидовХарактеристикСсылка - значение, разделяющее сохраняемые настройки.
//
// Возвращаемое значение:
//   ОписаниеНастроек - содержит ключи-идентификаторы.
//
Функция КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель)
	
	ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Разделитель, "ИмяПредопределенныхДанных");
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.КлючОбъекта = "Отчет." + ИмяОтчета + "/" + ИмяРазделителя;
	ОписаниеНастроек.КлючНастроек = ?(ПустаяСтрока(ИмяПредопределенныхДанных),
		Строка(Разделитель.УникальныйИдентификатор()),
		ИмяПредопределенныхДанных);
	ОписаниеНастроек.Представление = ИмяОтчета + " " + Разделитель;
		
	Возврат ОписаниеНастроек;
	
КонецФункции

// Формирует список настроек сортировки.
//
// Параметры:
//  КоллекцияНастроек - ПорядокКомпоновкиДанных - список полей сортировки.
//  ДанныеСчета  - Структура - если заполнено, то запоминаются виды субконто.
//
// Возвращаемое значение:
//  ТаблицаЗначение - список настроек сортировки в отчете.
//
Функция ОписаниеСортировки(КоллекцияНастроек, ДанныеСчета = Неопределено)

	КоллекцияВключенныхНастроек = Новый ТаблицаЗначений;
	КоллекцияВключенныхНастроек.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ВидСубконто",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ТипУпорядочивания", Новый ОписаниеТипов("НаправлениеСортировкиКомпоновкиДанных"));
	
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Показатель) <> Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = Неопределено;
		Если ДанныеСчета <> Неопределено
		   И СтрНачинаетсяС(Показатель.Поле, "Субконто") Тогда
		   
			Если СтрДлина(Показатель.Поле) = 9 Тогда
				ВидСубконто = ДанныеСчета["Вид" + Показатель.Поле];
			ИначеЕсли Сред(Показатель.Поле, 10, 1) = "." Тогда
				ВидСубконто = ДанныеСчета["Вид" + Лев(Показатель.Поле, 9)];
			КонецЕсли;
			 
		КонецЕсли;
		ЭлементПорядка = КоллекцияВключенныхНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПорядка, Показатель);
		ЭлементПорядка.ВидСубконто = ВидСубконто;
		
	КонецЦикла;
	
	Возврат КоллекцияВключенныхНастроек;
	
КонецФункции

// Добавляет группировку в список настроек отчета.
//
// Параметры:
//  Группировки  - ТабличнаяЧасть - список группировок отчета.
//  ДоступныеГруппировки - ДоступныеПоляКомпоновкиДанных - источник информации о полях группировок.
//  ИмяПоля      - Строка - имя поля группировки.
//
// Возвращаемое значение:
//   СтрокаТабличнойЧасти - последняя добавленная строка.
//
Функция ДобавитьГруппировкуОтчета(Группировки, ДоступныеГруппировки, ИмяПоля)
	
	Поле = ДоступныеГруппировки.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Группировки.Добавить();
	НоваяСтрока.Использование  = Ложь;
	НоваяСтрока.Поле           = Поле.Поле;
	НоваяСтрока.Представление  = Поле.Заголовок;
	НоваяСтрока.ТипГруппировки = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет отбор в список настроек отчета. Если ВключенныеОтборы не содержит признак использования отбора
// (или его реквизита), то создается неиспользуемый отбор по-умолчанию.
//
// Параметры:
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - список отборов отчета.
//  ДоступныеОтборы - ДоступныеПоляКомпоновкиДанных - источник информации о полях отборов.
//  ВключенныеОтборы - Соответствие - отборы, которые уже включены.
//  ИмяПоля      - Строка - имя поля отбора.
//  ИндексВставки - Число - индекс строки, на которую нужно переместить отбор.
//
Процедура ДобавитьОтборОтчета(Отборы, ДоступныеОтборы, ВключенныеОтборы, ИмяПоля, ИндексВставки)
	
	Если ВключенныеОтборы[ИмяПоля] <> Неопределено Тогда // было по крайней мере одно использование
		
		ДлинаИмениПоля = СтрДлина(ИмяПоля);
		КоличествоОтборов = Отборы.Количество() - 1;
		Для ИндексОтбора = ИндексВставки По КоличествоОтборов Цикл
			
			ИмяОтбора = Лев(Отборы[ИндексОтбора].ЛевоеЗначение, ДлинаИмениПоля);
			Если ИмяПоля <> ИмяОтбора Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИндексОтбора <> ИндексВставки Тогда
				Отборы.Сдвинуть(Отборы[ИндексОтбора], ИндексВставки - ИндексОтбора);
			КонецЕсли;
			ИндексВставки = ИндексВставки + 1;
		
		КонецЦикла; 
		
	Иначе // нужно добавить неиспользуемый отбор
		
		ПолеЦель = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Поле = ДоступныеОтборы.Найти(ПолеЦель);
		НовыйЭлемент = Отборы.Вставить(ИндексВставки, Тип("ЭлементОтбораКомпоновкиДанных"));
		ИндексВставки = ИндексВставки + 1;
		НовыйЭлемент.ЛевоеЗначение  = ПолеЦель;
		НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = Поле.Тип.ПривестиЗначение(Неопределено);
		НовыйЭлемент.Использование  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, входит ли в коллекцию поле или один из его реквизитов.
//
// Параметры:
//  КоллекцияПолей - ТаблицаЗначений - содержит колонку "Поле", по которой выполняется проверка.
//  Поле         - Строка - имя поля, вхождение которого проверяется.
//
// Возвращаемое значение:
//   Число       - индекс строки с полем или Неопределено, если вхождения не нашли.
//
Функция ИндексПоляВКоллекции(КоллекцияПолей, Поле)
	
	ИндексПоля = 0;
	
	ДлинаИмениПоля = СтрДлина(Поле);
	Для каждого СтрокаКоллекции Из КоллекцияПолей Цикл
		
		ИмяПоля = Лев(СтрокаКоллекции.Поле, ДлинаИмениПоля + 1);
		Если ИмяПоля = Поле
		 Или Прав(ИмяПоля, 1) = "." И Лев(ИмяПоля, ДлинаИмениПоля) = Поле Тогда
			Возврат ИндексПоля;
		КонецЕсли;
		ИндексПоля = ИндексПоля + 1;
		
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет лишние отборы или преобразует значение одного субконто в другое.
//
// Параметры:
//  КартаПолей   - Соответствие - правила преобразования отборов.
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - набор преобразуемых отборов.
//  ИспользуемыеПоля - Соответствие - список полей отборов обработанных (и неудаленных) при проецировании.
//
Процедура ПрименитьКартуПолей(КартаПолей, Отборы, ИспользуемыеПоля)
	
	УдаляемыеОтборы = Новый Массив;
	
	Для каждого ЭлементОтбора Из Отборы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПрименитьКартуПолей(КартаПолей, ЭлементОтбора.Элементы, ИспользуемыеПоля);
			Если ЭлементОтбора.Элементы.Количество() = 0 Тогда
				УдаляемыеОтборы.Добавить(ЭлементОтбора);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ИмяИсходногоПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
		ИмяПоля = ИмяИсходногоПоля;
		ИмяНовогоПоля = КартаПолей[ИмяИсходногоПоля];
		Если ИмяНовогоПоля = Неопределено Тогда // возможно ИмяИсходногоПоля содержит реквизит через точку
			ПозицияТочки = СтрНайти(ИмяИсходногоПоля, ".");
			Если ПозицияТочки <> 0 Тогда
				ИмяПоля = Лев(ИмяИсходногоПоля, ПозицияТочки - 1);
				ИмяНовогоПоля = КартаПолей[ИмяПоля];
			КонецЕсли;
			Если ИмяНовогоПоля = Неопределено Тогда
				
				// Если раньше был некий отбор, а сейчас в карте преобразований этого поля нет, то может быть две ситуации:
				// * Это субконто, которое могло быть, но отсутствует на этом счете (например, Партии). Удалить отбор по нему.
				// * Это поле, отбор по которому всегда допустим (например, Организация). Оставить неизменным.
				Если СтрНачинаетсяС(ИмяПоля, "Субконто") И СтрДлина(ИмяПоля) = 9 Тогда
					ИмяНовогоПоля = ""; // субконто больше нет на счёте
				Иначе // ничего делать не нужно
					ИспользуемыеПоля.Вставить(ИмяИсходногоПоля, Истина);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяНовогоПоля) Тогда // удалить
			УдаляемыеОтборы.Добавить(ЭлементОтбора);
			Продолжить;
		КонецЕсли;
		
		// Заменяем одно субконто на другое.
		ИспользуемыеПоля.Вставить(ИмяНовогоПоля, Истина);
		Если ИмяНовогоПоля = ИмяПоля Тогда // отбор не меняется
			Продолжить;
		КонецЕсли;
		ИмяПоляЦели = ИмяНовогоПоля + ?(ИмяИсходногоПоля = ИмяПоля, "", Сред(ИмяИсходногоПоля, СтрДлина(ИмяПоля) + 1));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляЦели);
	
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из УдаляемыеОтборы Цикл
		Отборы.Удалить(ЭлементОтбора);
	КонецЦикла; 
	
КонецПроцедуры

// Локализованное имя события - обнаружены расхождения в итогах сформированного отчета.
// Будет использовано при записи в журнал логов.
//
// Параметры:
//  ПолучательСобытия - Строка - "ЖурналРегистрации", "ТехнологическийЖурнал" или "ЦентрКонтроляКачества".
//  ТипСобытия   - Строка - "Ошибка" = зафиксирована проблема, "Пересчет" = попытка исправления проблемы.
//
// Возвращаемое значение:
//   Строка      - идентификатор события.
//
Функция ИмяСобытияЖурнала(ПолучательСобытия, ТипСобытия)
	
	Если ПолучательСобытия = "ЦентрКонтроляКачества" Тогда
		
		ИмяСобытия = НСтр("ru = 'СтатистикаБП.Ошибки.РасхожденияИтогов'", ОбщегоНазначения.КодОсновногоЯзыка());
		// Тип события используется в ключе уникальности.
		
	ИначеЕсли ПолучательСобытия = "ТехнологическийЖурнал" Тогда
		
		Если ТипСобытия = "Ошибка" Тогда
			ИмяСобытия = НСтр("ru = 'РасхождениеИтогов.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ИмяСобытия = НСтр("ru = 'РасхождениеИтогов.Пересчет'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
	Иначе
		
		Если ТипСобытия = "Ошибка" Тогда
			ИмяСобытия = НСтр("ru = 'Расхождение итогов.Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка());
		Иначе
			ИмяСобытия = НСтр("ru = 'Расхождение итогов.Пересчет'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяСобытия;
	
КонецФункции

// Находит номер по порядку показателя "Контроль" среди выбранных пользователем показателей.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. модуль формы отчета, функция ПодготовитьПараметрыОтчета() .
//
// Возвращаемое значение:
//   Число       - номер по порядку; или 0, если Контроль - единственный выбранный показатель.
//   Неопределено - если показатель "Контроль" не выбран.
//
Функция ПозицияПоказателяКонтроль(ПараметрыОтчета)
	
	Если Не ПараметрыОтчета.ПоказательКонтроль Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерПоказателяКонтроль = 0;
	КоличествоПоказателей = 0;
	Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
		
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
		Если НомерПоказателяКонтроль = 0 И ИмяПоказателя = "Контроль" Тогда
			НомерПоказателяКонтроль = КоличествоПоказателей;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПоказателей = 1 Тогда
		Возврат 0;
	Иначе
		Возврат НомерПоказателяКонтроль;
	КонецЕсли;

КонецФункции

#КонецОбласти
