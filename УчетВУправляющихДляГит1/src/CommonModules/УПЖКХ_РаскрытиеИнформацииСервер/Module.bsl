#Область ПроцедурыИФункцииСбораДанных

// Формирует таблицу соответствия показателей раскрытия, 
// представленных в макете.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица соответствия.
//
Функция ПолучитьТаблицуПоказателейРаскрытияИзМакета(ВидЗдания) Экспорт
	
	ТаблицаПоказателейРаскрытия = Новый ТаблицаЗначений;
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("НазваниеПоказателя",      Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("ПредставлениеПоказателя", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("ТипПоказателя",           Новый ОписаниеТипов("ОписаниеТипов"));
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("ВыполняемыйКод",          Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("ОтборПоВладельцу",        Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателейРаскрытия.Колонки.Добавить("ОбъектИсточник",          Новый ОписаниеТипов("Строка"));
	
	ИмяМакета = ?(ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ЖилойДом"), "ПоказателиЖД_Форма", "ПоказателиМКД_Форма");
	
	Макет = Документы.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПолучитьМакет(ИмяМакета);
	
	НомерСтроки = 2;
	Пока НЕ ПустаяСтрока(Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
		НоваяСтрока = ТаблицаПоказателейРаскрытия.Добавить();
		
		НоваяСтрока.НазваниеПоказателя      = Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НоваяСтрока.ПредставлениеПоказателя = Макет.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		НоваяСтрока.ВыполняемыйКод          = Макет.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
		
		ЗначениеТипаПоказателя = Макет.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		Квалификатор           = Макет.Область(НомерСтроки, 5, НомерСтроки, 5).Текст;
		Если НоваяСтрока.ОтборПоВладельцу = "Истина" Тогда
			НоваяСтрока.ОбъектИсточник = СтрЗаменить(ЗначениеТипаПоказателя, "Ссылка", "");
		КонецЕсли;
		
		Если ЗначениеТипаПоказателя = "Строка" Тогда
			
			НоваяСтрока.ТипПоказателя = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(Число(Квалификатор));
			
		ИначеЕсли ЗначениеТипаПоказателя = "Число" Тогда
			ПозицияЗапятой = Найти(Квалификатор, ",");
			РазрядностьЧисла = Сред(Квалификатор, 1, ПозицияЗапятой - 1);
			РазрядностьДроби = Сред(Квалификатор, ПозицияЗапятой + 1, СтрДлина(Квалификатор) - ПозицияЗапятой);
			
			НоваяСтрока.ТипПоказателя = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(РазрядностьЧисла, РазрядностьДроби);
			
		ИначеЕсли ЗначениеТипаПоказателя = "Дата" Тогда
			
			НоваяСтрока.ТипПоказателя = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
			
		Иначе
			
			НоваяСтрока.ТипПоказателя = Новый ОписаниеТипов(ЗначениеТипаПоказателя,);
			
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ТаблицаПоказателейРаскрытия;
	
КонецФункции // ПолучитьТаблицуПоказателейРаскрытияИзМакета()

// Формирует таблицу с названиями таблиц, в которых должны быть фиксированные
// данные.
Функция ПолучитьТаблицыСфиксированнымиПоказателямиИзМакета() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НазваниеТаблицы");
	Таблица.Колонки.Добавить("ФиксированныйПоказатель");
	Таблица.Колонки.Добавить("ТипФиксированногоПоказателя");
	
	Макет = Документы.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПолучитьМакет("ТаблицыСФиксированнымиДанными");
	
	НомерСтроки = 2;
	Пока НЕ ПустаяСтрока(Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
		НоваяСтрока = Таблица.Добавить();
		
		НоваяСтрока.НазваниеТаблицы             = Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НоваяСтрока.ФиксированныйПоказатель     = Макет.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		НоваяСтрока.ТипФиксированногоПоказателя = Макет.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицыСфиксированнымиПоказателямиИзМакета()

// Формирует таблицу показателей для сайта и печатной формы.
//
Функция ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы(ВидЗдания) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("МестоХранения");
	Таблица.Колонки.Добавить("ОсновныеДанные", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НазваниеПоказателя");
	Таблица.Колонки.Добавить("НазваниеАтрибута", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МассивКолонокТаблицы", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("МассивКолонокВложеннойТаблицы", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("МассивНазванийКолонокТаблицы", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("МассивНазванийКолонокВложеннойТаблицы", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("ТипПоказателя");
	Таблица.Колонки.Добавить("ДлинаКолонокТаблицы", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ДлинаКолонокВложеннойТаблицы", Новый ОписаниеТипов("Число"));
	
	ИмяМакета = ?(ВидЗдания = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЗданий.ЖилойДом"), "ПоказателиЖД_СайтПФ", "ПоказателиМКД_СайтПФ");
	
	Макет = Документы.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПолучитьМакет(ИмяМакета);
	
	НомерСтроки = 2;
	
	Пока НЕ ПустаяСтрока(Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
		НоваяСтрока = Таблица.Добавить();
		
		НоваяСтрока.МестоХранения      = Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НоваяСтрока.ОсновныеДанные     = ?(Макет.Область(НомерСтроки, 2, НомерСтроки, 2).Текст = "Да", Истина, Ложь);
		НоваяСтрока.НазваниеПоказателя = Макет.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		НоваяСтрока.НазваниеАтрибута   = Макет.Область(НомерСтроки, 4, НомерСтроки, 4).Текст;
		
		ПереченьКолонокТаблицы = Макет.Область(НомерСтроки, 5, НомерСтроки, 5).Текст;
		Если Не ПустаяСтрока(ПереченьКолонокТаблицы) Тогда
			НоваяСтрока.МассивКолонокТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПереченьКолонокТаблицы, ",");
		КонецЕсли;
		
		ПереченьКолонокВложеннойТаблицы = Макет.Область(НомерСтроки, 6, НомерСтроки, 6).Текст;
		Если Не ПустаяСтрока(ПереченьКолонокВложеннойТаблицы) Тогда
			НоваяСтрока.МассивКолонокВложеннойТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПереченьКолонокВложеннойТаблицы, ",");
		КонецЕсли;
		
		ПереченьНазванийКолонокТаблицы = Макет.Область(НомерСтроки, 7, НомерСтроки, 7).Текст;
		Если Не ПустаяСтрока(ПереченьНазванийКолонокТаблицы) Тогда
			НоваяСтрока.МассивНазванийКолонокТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПереченьНазванийКолонокТаблицы, ",");
		КонецЕсли;
		
		ПереченьНазванийКолонокВложеннойТаблицы = Макет.Область(НомерСтроки, 8, НомерСтроки, 8).Текст;
		Если Не ПустаяСтрока(ПереченьНазванийКолонокВложеннойТаблицы) Тогда
			НоваяСтрока.МассивНазванийКолонокВложеннойТаблицы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПереченьНазванийКолонокВложеннойТаблицы, ",");
		КонецЕсли;
		
		НоваяСтрока.ДлинаКолонокТаблицы          = Макет.Область(НомерСтроки, 9, НомерСтроки, 9).Текст;
		НоваяСтрока.ДлинаКолонокВложеннойТаблицы = Макет.Область(НомерСтроки, 10, НомерСтроки, 10).Текст;
		
		НоваяСтрока.ТипПоказателя = ОпределитьТипПоказателя(НоваяСтрока);
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции //ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы()

// Формирует таблицу основных и не основных показателей.
//
Функция ПолучитьТаблицаОсновныхНеОсновныхПоказателей(ТаблицаПоказателей, ОсновныеДанные = Истина) Экспорт
	
	СтрокиПоказателей = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ОсновныеДанные", ОсновныеДанные));
	
	Возврат ТаблицаПоказателей.Скопировать(СтрокиПоказателей);
	
КонецФункции // ПолучитьТаблицаОсновныхНеОсновныхПоказателей()

// Формирует таблицу с элементами, которые должны быть в XML-файле.
//
// Параметры:
//  ТипЗдания - Строка - тип здания (МКД или ЖД).
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с элементами файла.
//
Функция ПолучитьТаблицуЭлементовФайла(ТипЗдания)
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("НазваниеПоказателя",         Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("НазваниеЭлемента",           Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Родитель",                   Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("РодительДляТаблицы",         Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("РодительДляВторойТаблицы",   Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("Раздел",                     Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("МестоХранения",              Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("МестоХраненияВторойТаблицы", Новый ОписаниеТипов("Строка"));
	ТаблицаЭлементов.Колонки.Добавить("ПорядокЭлемента",            Новый ОписаниеТипов("Число"));
	ТаблицаЭлементов.Колонки.Добавить("ОбходВЦикле",                Новый ОписаниеТипов("Булево"));
	ТаблицаЭлементов.Колонки.Добавить("ДвойнойЦикл",                Новый ОписаниеТипов("Булево"));
	ТаблицаЭлементов.Колонки.Добавить("СтрокаОбработана",           Новый ОписаниеТипов("Булево"));
	
	ИмяМакета = ?(ТипЗдания = "МКД", "ПоказателиМКД_Файл", "ПоказателиЖД_Файл");
	
	Макет = Документы.УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПолучитьМакет(ИмяМакета);
	
	НомерСтроки = 2;
	Пока НЕ ПустаяСтрока(Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
		Если ПустаяСтрока(Макет.Область(НомерСтроки, 3, НомерСтроки, 3).Текст) Тогда
			НомерСтроки = НомерСтроки + 1;
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		
		НоваяСтрока.НазваниеПоказателя         = Макет.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НоваяСтрока.НазваниеЭлемента           = Макет.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		НоваяСтрока.Родитель                   = ПолучитьСтроковоеПредставлениеРодителяТекущегоЭлемента(НоваяСтрока.НазваниеЭлемента);
		НоваяСтрока.РодительДляТаблицы         = ПолучитьРодителяДляТаблицы(НоваяСтрока.НазваниеЭлемента, "Х");
		НоваяСтрока.РодительДляВторойТаблицы   = ПолучитьРодителяДляТаблицы(НоваяСтрока.НазваниеЭлемента, "У");
		НоваяСтрока.Раздел                     = ПолучитьСтроковоеПредставлениеРазделаТекущегоЭлемента(НоваяСтрока.НазваниеЭлемента);
		НоваяСтрока.ПорядокЭлемента            = СтрЧислоВхождений(НоваяСтрока.НазваниеЭлемента, ".");
		НоваяСтрока.ОбходВЦикле                = ?(Найти(НоваяСтрока.НазваниеЭлемента, "Х") = 0, Ложь, Истина);
		НоваяСтрока.ДвойнойЦикл                = ?(Найти(НоваяСтрока.НазваниеЭлемента, "У") = 0, Ложь, Истина);
		НоваяСтрока.МестоХранения              = ПолучитьМестоХраненияИзМакета(Макет, НомерСтроки, НоваяСтрока.ДвойнойЦикл);
		НоваяСтрока.МестоХраненияВторойТаблицы = Макет.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Возврат ТаблицаЭлементов;
	
КонецФункции // ПолучитьТаблицуЭлементовФайла()

// Формирует таблицу с данными, которые нужны для основного тега XML-файла.
//
// Параметры:
//  МассивДокументов - Массив - документы, для которых надо формировать файлы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными.
//
Функция ПолучитьТаблицуДанныхДляКорневыхТегов(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ПодготовкаЭлектронныхПаспортов.Номер) КАК НомерДокумента,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Дата,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.ИНН КАК ИНН,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.КПП КАК КПП,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.ОГРН КАК ОГРН,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Здание.Код КАК КодЗдания,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ПодготовкаЭлектронныхПаспортов.ВидЗдания = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЗданий.МКД)
	|			ТОГДА ""MKD""
	|		ИНАЧЕ ""GD""
	|	КОНЕЦ КАК ВидЗдания
	|ИЗ
	|	Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов КАК УПЖКХ_ПодготовкаЭлектронныхПаспортов
	|ГДЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("Год",   Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("День",  Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.Год   = Формат(Строка.Дата, "ДФ=yyyy");
		Строка.Месяц = Формат(Строка.Дата, "ДФ=MM");
		Строка.День  = Формат(Строка.Дата, "ДФ=dd");
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуДанныхДляКорневыхТегов()

// Формирует таблицу с данными, которые нужны для XML-файла.
//
// Параметры:
//  МассивДокументов - Массив - документы, для которых надо формировать файлы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с данными.
//
Функция ПолучитьТаблицуДанныхДляЭлементовФайла(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка КАК Документ,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.ИНН КАК ИННОрганизации,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.Наименование КАК НазваниеОрганизации,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Здание.Наименование КАК НазваниеЗдания,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Здание.Код КАК КодЗдания,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Здание КАК ЗданиеСсылка,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.ВидЗдания,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СведенияОЛицахОказывающихУслуги.(
	|		Наименование,
	|		ВидРабот,
	|		КПП,
	|		ИНН,
	|		ТелефонФакс,
	|		АдресФактический,
	|		АдресЮридический,
	|		ДатаНачалаОбслуживания
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.РСО.(
	|		Ресурс,
	|		Наименование,
	|		КПП,
	|		ИНН,
	|		ТелефонФакс,
	|		АдресФактический,
	|		АдресЮридический,
	|		ДатаНачалаОбслуживания
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.ЛицаОказывающиеКУ.(
	|		КоммунальнаяУслуга,
	|		Наименование,
	|		КПП,
	|		ИНН,
	|		ТелефонФакс,
	|		АдресФактический,
	|		АдресЮридический,
	|		ДатаНачалаОбслуживания
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СведенияОЦенахНаУслугиПоСодержаниюИРемонту.(
	|		ВидРабот,
	|		Тариф
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СведенияОЦенахНаКоммунальныеУслуги.(
	|		Наименование,
	|		КоммунальнаяУслуга,
	|		Тариф,
	|		ПоНормативу
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СобственникиЖилогоДома.(
	|		Собственник,
	|		КонтактыСобственника
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СведенияОЦенахНаКоммунальныеУслугиЖилойДом.(
	|		КоммунальнаяУслуга,
	|		Тариф
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СтатичныеПоказатели.(
	|		ПоказательРаскрытия,
	|		ЗначениеПоказателя
	|	),
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.СтруктураДанныхИзОтчетов КАК СтруктураДанныхИзОтчетовХранилище,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка) КАК НаименованиеДокумента,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.ПаспортЗаполнен
	|ИЗ
	|	Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов КАК УПЖКХ_ПодготовкаЭлектронныхПаспортов
	|ГДЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("СтруктураДанныхИзОтчетов", Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("ДокументСодержитДанные",   Новый ОписаниеТипов("Булево"));
	
	Для Каждого Строка Из Таблица Цикл
		ДанныеИзОтчетов = Строка.СтруктураДанныхИзОтчетовХранилище.Получить();
		Если ДанныеИзОтчетов = Неопределено ИЛИ НЕ ТипЗнч(ДанныеИзОтчетов) = Тип("Структура") ИЛИ ДанныеИзОтчетов.Количество() = 0 Тогда
			Строка.ДокументСодержитДанные = Ложь;
		Иначе
			Строка.СтруктураДанныхИзОтчетов = ДанныеИзОтчетов;
			Строка.ДокументСодержитДанные   = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуДанныхДляЭлементовФайла()

// Формирует таблицу адресов зданий.
//
Функция ПолучитьТаблицуАдресовЗданий(МассивЗданий)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивКИ = Новый Массив;
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивКИ, МассивЗданий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом КАК НомерДома,
	|	втКонтактнаяИнформация.Корпус КАК КорпусДома,
	|	втКонтактнаяИнформация.Регион,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Город,
	|	втКонтактнаяИнформация.НаселенныйПункт
	|ПОМЕСТИТЬ втЗданияБД
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗданияБД.Здание,
	|	втЗданияБД.Улица,
	|	втЗданияБД.НомерДома,
	|	втЗданияБД.КорпусДома,
	|	втЗданияБД.Регион,
	|	втЗданияБД.Район,
	|	втЗданияБД.Город,
	|	втЗданияБД.НаселенныйПункт
	|ИЗ
	|	втЗданияБД КАК втЗданияБД";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("НомерЗдания");
	Таблица.Колонки.Добавить("ПолныйАдресЗдания");
	
	Для Каждого Строка ИЗ Таблица Цикл
		Строка.НомерЗдания       = Строка.НомерДома + ?(ПустаяСтрока(Строка.КорпусДома), "", "/" + Строка.КорпусДома);
		Строка.ПолныйАдресЗдания = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СформироватьПолныйАдресЗданияДляВыгрузки(Строка.Регион,
																														  Строка.Район,
																														  Строка.Город,
																														  Строка.НаселенныйПункт,
																														  Строка.Улица,
																														  Строка.НомерДома,
																														  Строка.КорпусДома);
	КонецЦикла;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуАдресовЗданий()

// Формирует таблицу с настройками электронных паспортов.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица с данными документов.
//
// Возврат:
//  ТаблицаЗначений - таблица с настройками.
//
Функция ПолучитьТаблицуНастроекЭП(ТаблицаДанных)
	
	ТаблицаДанных.Свернуть("Организация");
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Организация");
	ТаблицаНастроек.Колонки.Добавить("НастройкиЭП");
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НоваяСтрока = ТаблицаНастроек.Добавить();
		
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		НоваяСтрока.НастройкиЭП = РегистрыСведений.УПЖКХ_НастройкиЭлектронныхПаспортов.ПолучитьНастройкиЭлектронныхПаспортов(НоваяСтрока.Организация);
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции // ПолучитьТаблицуНастроекЭП()

// Ищет настройки формирования ЭП.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - текущая организация.
//  ТаблицаНастроекЭП - ТаблицаЗначений - таблица с настройками ЭП.
//
// Возвращаемое значение:
//  Структура - настройки ЭП.
//
Функция ПолучитьНастройкиЭП(Организация, ТаблицаНастроекЭП)
	
	СтрокаНастроек = ТаблицаНастроекЭП.Найти(Организация, "Организация");
	
	Если СтрокаНастроек = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаНастроек.НастройкиЭП;
	
КонецФункции // ПолучитьНастройкиЭП()

// Получает из макета документа строку, в которой хранится ссылка на место хранения значения для элементов.
//
// Параметры:
//  Макет - Макет - текущий макет с данными;
//  НомерСтроки - Число - номер строки в макете;
//  ДвойнойЦикл - Булево - факт того, что текущие данные соответствуют циклу второго порядка.
// 
// Возвращаемое значение:
//  Строка - строковое представление места хранения.
//
Функция ПолучитьМестоХраненияИзМакета(Макет, НомерСтроки, ДвойнойЦикл)

	ДанныеИзМакета = Макет.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
	
	Если Не ДвойнойЦикл Тогда
		Возврат ДанныеИзМакета;
	Иначе
		МестоХранения = ПолучитьСтроковоеПредставлениеРодителяТекущегоЭлемента(ДанныеИзМакета);
		МестоХранения = Лев(МестоХранения, СтрДлина(МестоХранения) - 1);
		Возврат МестоХранения;
	КонецЕсли;
	
КонецФункции // ПолучитьМестоХраненияИзМакета()

// Получает таблицу настроек отправки паспортов на сайт.
//
Функция ПолучитьТаблицуНастроекОтправкиПаспортовНаСайт(МассивДокументов) Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаНастроек.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("ИННОрганизации", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("МассивДокументов", Новый ОписаниеТипов("Массив"));
	ТаблицаНастроек.Колонки.Добавить("НастройкиЭП");
	ТаблицаНастроек.Колонки.Добавить("НастройкаПодключенияКСайту");
	ТаблицаНастроек.Колонки.Добавить("ХранитьПароль", Новый ОписаниеТипов("Булево"));
	ТаблицаНастроек.Колонки.Добавить("Пароль", Новый ОписаниеТипов("Строка"));
	ТаблицаНастроек.Колонки.Добавить("МожноОтправитьНаСайт", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОрганизаций = ПолучитьТаблицуОрганизаций(МассивДокументов);
	
	Для Каждого Строка ИЗ ТаблицаОрганизаций Цикл
		НастройкиЭПТекОрганизации = РегистрыСведений.УПЖКХ_НастройкиЭлектронныхПаспортов.ПолучитьНастройкиЭлектронныхПаспортов(Строка.Организация);
		
		Если НастройкиЭПТекОрганизации = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для " + Строка.НаименованиеОрганизации + " не указаны настройки отправки паспортов на сайт.
															 |Перейдите в меню настроек в верхней части формы.");
			Продолжить;
		КонецЕсли;
		
		ОтправлятьНаСайт =  НастройкиЭПТекОрганизации.ОтправлятьНаСайт;
		
		Если Не ОтправлятьНаСайт Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для " + Строка.НаименованиеОрганизации + " установлено, что электронные паспорта не надо отправлять на сайт.
															 |Перейдите в меню настроек в верхней части формы.");
			
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаНастроек.Добавить();
		НоваяСтрока.Организация             = Строка.Организация;
		НоваяСтрока.НаименованиеОрганизации = Строка.НаименованиеОрганизации;
		НоваяСтрока.ИННОрганизации          = Строка.ИННОрганизации;
		НоваяСтрока.МассивДокументов        = Строка.МассивДокументов;
		НоваяСтрока.НастройкиЭП             = НастройкиЭПТекОрганизации;
		
		НоваяСтрока.НастройкаПодключенияКСайту = Справочники.УПЖКХ_НастройкиДоступаКСайту.ПолучитьСтруктуруНастроекДоступа(НоваяСтрока.НастройкиЭП.НастройкаДоступаКСайту);
		Если НоваяСтрока.НастройкаПодключенияКСайту = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для " + Строка.НаименованиеОрганизации + " не указаны настройки отправки паспортов на сайт.
															 |Перейдите в меню настроек в верхней части формы.");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока.ХранитьПароль        = НоваяСтрока.НастройкаПодключенияКСайту.ХранитьПароль;
		НоваяСтрока.Пароль               = НоваяСтрока.НастройкаПодключенияКСайту.Пароль;
		НоваяСтрока.МожноОтправитьНаСайт = Истина;
	КонецЦикла;
	
	Возврат ТаблицаНастроек;
	
КонецФункции // ПолучитьСтруктуруНастроекОтправкиПаспортовНаСайт()

// Получает таблицу организаций.
//
Функция ПолучитьТаблицуОрганизаций(МассивЭП)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация КАК Организация,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка КАК Документ,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.Наименование КАК НаименованиеОрганизации,
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Организация.ИНН КАК ИННОрганизации
	|ИЗ
	|	Документ.УПЖКХ_ПодготовкаЭлектронныхПаспортов КАК УПЖКХ_ПодготовкаЭлектронныхПаспортов
	|ГДЕ
	|	УПЖКХ_ПодготовкаЭлектронныхПаспортов.Ссылка В(&МассивЭП)
	|ИТОГИ ПО
	|	Организация";
	Запрос.УстановитьПараметр("МассивЭП", МассивЭП);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация");
	ТаблицаОрганизаций.Колонки.Добавить("НаименованиеОрганизации");
	ТаблицаОрганизаций.Колонки.Добавить("ИННОрганизации");
	ТаблицаОрганизаций.Колонки.Добавить("МассивДокументов");
	
	Для Каждого СтрокаОрганизации ИЗ Дерево.Строки Цикл
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		НоваяСтрока.Организация             = СтрокаОрганизации.Организация;
		НоваяСтрока.НаименованиеОрганизации = СтрокаОрганизации.НаименованиеОрганизации;
		НоваяСтрока.ИННОрганизации          = СтрокаОрганизации.ИННОрганизации;
		
		МассивДокументов = Новый Массив;
		
		Для Каждого СтрокаДокумента ИЗ СтрокаОрганизации.Строки Цикл
			МассивДокументов.Добавить(СтрокаДокумента.Документ);
		КонецЦикла;
		НоваяСтрока.МассивДокументов = МассивДокументов;
	КонецЦикла;
		
	Возврат ТаблицаОрганизаций;
	
КонецФункции // ПолучитьМассивОрганизаций()

#КонецОбласти

#Область ПроцедурыИФункцииФормированияXMLФайлов

// Формирует файлы с паспортами.
//
// Параметры:
//  МассивДокументов - Массив - документ, для которых надо сформировать паспорта.
//
Процедура СформироватьXMLФайлы(МассивДокументов, ПомещениеВАрхив, СчетчикСформированныхДокументов) Экспорт
	
	ТаблицаЭлементовФайлаМКД = ПолучитьТаблицуЭлементовФайла("МКД");
	ТаблицаЭлементовФайлаЖД  = ПолучитьТаблицуЭлементовФайла("ЖД");
	
	МассивИменФайлов                = Новый Массив;
	СчетчикСформированныхДокументов = 0;
	
	ТаблицаДанныхДляКорневыхТегов  = ПолучитьТаблицуДанныхДляКорневыхТегов(МассивДокументов);
	ТаблицаДанныхДляЭлементовФайла = ПолучитьТаблицуДанныхДляЭлементовФайла(МассивДокументов);
	ТаблицаНастроекЭП              = ПолучитьТаблицуНастроекЭП(ТаблицаДанныхДляЭлементовФайла.Скопировать());
	
	Для Каждого Документ Из МассивДокументов Цикл
		СтрокаДанныхДокумента = ТаблицаДанныхДляЭлементовФайла.Найти(Документ, "Документ");
		
		Если СтрокаДанныхДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаДанныхДокумента.ДокументСодержитДанные Или Не СтрокаДанныхДокумента.ПаспортЗаполнен Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ " + СтрокаДанныхДокумента.НаименованиеДокумента + " не заполнен.");
			Продолжить;
		КонецЕсли;
		
		НастройкиЭП = ПолучитьНастройкиЭП(СтрокаДанныхДокумента.Организация, ТаблицаНастроекЭП);
		Если НастройкиЭП = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для организации " + СтрокаДанныхДокумента.Организация + " не указаны настройки формирования электронных паспортов.");
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(НастройкиЭП.КаталогСохранения) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для организации " + СтрокаДанныхДокумента.Организация + " не указан каталог сохранения электронных паспортов.");
			Продолжить;
		КонецЕсли;
		
		ТаблицаЭлементов = ?(Документ.ВидЗдания = Перечисления.УПЖКХ_ВидыЗданий.МКД, ТаблицаЭлементовФайлаМКД.Скопировать(), ТаблицаЭлементовФайлаЖД.Скопировать());
		
		ИмяФайла = ПолучитьИмяФайла(Документ, ТаблицаДанныхДляКорневыхТегов, НастройкиЭП);
		
		Если ИмяФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(ИмяФайла);
		
		ДокументDOM = Новый ДокументDOM("", "data");
		КорневойЭлемент = ДокументDOM.ЭлементДокумента;
		
		ЗаполнитьТегСОсновнымиДанными(ДокументDOM, КорневойЭлемент, Документ, ТаблицаДанныхДляКорневыхТегов);
		
		ЗаполнитьВсеРазделыФайла(ДокументDOM, КорневойЭлемент, ТаблицаЭлементов);
		
		ЗаполнитьЭлементыФайла(ДокументDOM, КорневойЭлемент, Документ, СтрокаДанныхДокумента, ТаблицаЭлементов);
		
		МассивИменФайлов.Добавить(ИмяФайла);
		
		ЗаписьDOM = Новый ЗаписьDOM();
		ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
		
		ЗаписьXML.Закрыть();
		
		СчетчикСформированныхДокументов = СчетчикСформированныхДокументов + 1;
	КонецЦикла;
	
	// Если надо архивировать.
	Если Не МассивИменФайлов.Количество() = 0 И ПомещениеВАрхив Тогда
		ИмяАрхива = ПолучитьИмяАрхиваСФайлами(МассивИменФайлов, НастройкиЭП.КаталогСохранения);
			
		ЗаписьZIP = Новый ЗаписьZipФайла(ИмяАрхива);
		Для Каждого Файл ИЗ МассивИменФайлов Цикл
			ЗаписьZIP.Добавить(Файл);
		КонецЦикла;
		ЗаписьZIP.Записать();
	КонецЕсли;
	
КонецПроцедуры // СформироватьXMLФайлы()

// Формирует имя файла-ЭП.
//
// Параметры:
//  Документ - ДокументСсылка.УПЖКХ_ПодготовкаЭлектронныхПаспортов - текущий документ;
//  ТаблицаДанных - ТаблицаЗначений - таблица с данными для формирования файлов.
//
// Возвращаемое значение:
//  Строка - имя файла.
//
Функция ПолучитьИмяФайла(Документ, ТаблицаДанных, НастройкиЭП)
	
	СтрокаДокумента = ТаблицаДанных.Найти(Документ, "Документ");
	
	КаталогСохранения = НастройкиЭП.КаталогСохранения;
	
	Имяфайла = КаталогСохранения;
	
	ИмяФайла = ИмяФайла + "\" + СтрокаДокумента.ВидЗдания + "_" + СтрокаДокумента.ИНН + "_" + СтрокаДокумента.Год + СтрокаДокумента.Месяц + СтрокаДокумента.День
			   + "_" + СтрокаДокумента.НомерДокумента + ".xml";
			   
	Возврат ИмяФайла;
	
КонецФункции // ПолучитьИмяФайла()

// Формирует имя, которое будет присвоено архиву с файлами.
Функция ПолучитьИмяАрхиваСФайлами(Знач МассивИменФайлов, КаталогСохранения)
	
	Если МассивИменФайлов.Количество() = 1 Тогда
		ИмяАрхива = МассивИменФайлов.Получить(0);
		ИмяАрхива = СтрЗаменить(ИмяАрхива, ".xml", ".zip");
	Иначе
		ИмяАрхива = КаталогСохранения + "\" + "Архив электронных паспортов от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm'") + ".zip";
	КонецЕсли;
	
	Возврат ИмяАрхива;
	
КонецФункции // ПолучитьИмяАрхиваСФайлами()

// Заполняет тег с основными данными об ЭП.
//
// Параметры:
//  ДокументDOM - ДокументDOM - схема XML-файла;
//  КорневойЭлемент - ЭлементDOM - корневой элемент XML-файла;
//  Документ - ДокументСсылка.УПЖКХ_ПодготовкаЭлектронныхПаспортов - текущий документ;
//  ТаблицаДанных - ТаблицаЗначений - таблица с данными текущего документа.
//
Процедура ЗаполнитьТегСОсновнымиДанными(ДокументDOM, КорневойЭлемент, Документ, ТаблицаДанных)
	
	СтрокаДокумента = ТаблицаДанных.Найти(Документ, "Документ");
	
	Если СтрокаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеДанные = ДокументDOM.СоздатьЭлемент("meta_data");
	КорневойЭлемент.ДобавитьДочерний(ОсновныеДанные);
	
	ОсновныеДанные.УстановитьАтрибут("year",      СтрокаДокумента.Год);
	ОсновныеДанные.УстановитьАтрибут("month",     СтрокаДокумента.Месяц);
	ОсновныеДанные.УстановитьАтрибут("inn",       СтрокаДокумента.ИНН);
	ОсновныеДанные.УстановитьАтрибут("kpp",       СтрокаДокумента.КПП);
	ОсновныеДанные.УстановитьАтрибут("ogrn",      СтрокаДокумента.ОГРН);
	ОсновныеДанные.УстановитьАтрибут("adr_code",  СтрокаДокумента.КодЗдания);
	ОсновныеДанные.УстановитьАтрибут("doc_type",  "2");
	ОсновныеДанные.УстановитьАтрибут("vers_form", "1.01");
	
КонецПроцедуры // ЗаполнитьТегСОсновнымиДанными()

// Создает основные теги файла: С_ЭП_МКД, C_1., C_2. итд.
//
// Параметры:
//  ДокументDOM - документ XML-файла;
//  КорневойЭлемент - ЭлементDOM - корневой элемент файла;
//  ТаблицаЭлементов - ТаблицаЗначений - таблица элементов, считанных из макета.
//
Процедура ЗаполнитьВсеРазделыФайла(ДокументDOM, КорневойЭлемент, ТаблицаЭлементов)
	
	ТаблицаЭлементов.Колонки.Добавить("РазделЭлемент");
	
	РазделыПаспорта = ДокументDOM.СоздатьЭлемент("С_ЭП_МКД");
	КорневойЭлемент.ДобавитьДочерний(РазделыПаспорта);
	
	ТаблицаРазделов = ТаблицаЭлементов.Скопировать();
	ТаблицаРазделов.Свернуть("Раздел");
	
	Для Каждого СтрокаРаздела Из ТаблицаРазделов Цикл
		НовыйРаздел = ДокументDOM.СоздатьЭлемент(СтрокаРаздела.Раздел);
		КорневойЭлемент.ДобавитьДочерний(НовыйРаздел);
		
		СтрокиТекРаздела = ТаблицаЭлементов.НайтиСтроки(Новый Структура("Раздел", СтрокаРаздела.Раздел));
		Для Каждого СтрокаТекРаздела Из СтрокиТекРаздела Цикл
			СтрокаТекРаздела.РазделЭлемент = НовыйРаздел;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВсеРазделыФайла()

// Заполняет XML-файл всеми остальными элементами.
//
// Параметры:
//  ДокументDOM - ДокументDOM - документ XML-файла;
//  КорневойЭлемент - ЭлементDOM - корневой элемент XML-файла;
//  Документ - ДокументСсылка.УПЖКХ_ПодготовкаЭлектронныхПаспортов - текущий документ;
//  СтрокаДанных - СтрокаТаблицыЗначений - строка с данными текущего документа "Подготовка ЭП";
//  ТаблицаЭлементов - ТаблицаЗначений - таблица с описанием структуры XML-файла.
//  
Процедура ЗаполнитьЭлементыФайла(ДокументDOM, КорневойЭлемент, Документ, СтрокаДанных, ТаблицаЭлементов)
	
	РазделыПаспорта = ДокументDOM.ПолучитьЭлементыПоИмени("С_ЭП_МКД").Элемент(0);
	
	// Массив с названиями тегов, предполагающих наличие цилических данных, которые уже добавлены в файл.
	МассивДобавленныхТаблиц    = Новый Массив;
	// Массив с названиям всех добавленных элементов.
	МассивДобавленныхЭлементов = Новый Массив;
	
	Для Каждого СтрокаЭлемента ИЗ ТаблицаЭлементов Цикл
		ТекущийРодитель = СтрокаЭлемента.РазделЭлемент;
		
		// Циклические элементы (т.е. те, имена которых формируются в зависимости от их порядкового
		// номера в таблице).
		Если СтрокаЭлемента.ОбходВЦикле Тогда
			
			ОбработатьЦиклическиеЭлементы(ДокументDOM, ТекущийРодитель, СтрокаЭлемента, ТаблицаЭлементов,
										  СтрокаДанных, МассивДобавленныхЭлементов, МассивДобавленныхТаблиц);
			
		Иначе
			// Добавляем всех родителей для текущего элемента
			ДобавитьВсехРодителей(ДокументDOM, СтрокаЭлемента, ТекущийРодитель, МассивДобавленныхЭлементов);
			
			// Добавляем нециклические элементы, т.е. элементы вида C_1.1.2.
			НовыйЭлемент = ДокументDOM.СоздатьЭлемент(ПолучитьНазваниеЭлемента(СтрокаЭлемента.НазваниеЭлемента));
			НовыйЭлемент.УстановитьАтрибут("значение", XMLСтрока(ПолучитьЗначениеТекущегоЭлемента(СтрокаЭлемента, СтрокаДанных)));
			ТекущийРодитель.ДобавитьДочерний(НовыйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЭлементыФайла()

// Добавляет в файл циклические элементы.
// 
// Параметры:
//  ДокументDOM - ДокументDOM - документ XML-файла;
//  ТекущийРодитель - ЭлементDOM - родительский элемент для всех текущих циклических элементов;
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, считанной из макета;
//  ТаблицаЭлементов - ТаблицаЗначений - таблица элементов, считанная из макета;
//  СтрокаДанных - СтрокаТаблицыЗначений - строка, содержащая данные текущего документа "Подготовка ЭП";
//  МассивДобавленныхЭлементов - Массив - названия элементов, которые уже добавлены в файл;
//  МассивДобавленныхТаблиц - Массив - названия элементов, которые являются родительскими для циклических элементов,
//                                     и которые уже добавлены в файл.
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//                                   элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый номер текущих элементов
//                     в рамках первого цикла.
//
Процедура ОбработатьЦиклическиеЭлементы(ДокументDOM, ТекущийРодитель, СтрокаЭлемента, ТаблицаЭлементов,
										СтрокаДанных, МассивДобавленныхЭлементов, МассивДобавленныхТаблиц,
										ЭтоВторойПорядокЦикла = Ложь, СчетчикХ = 0)
										
	// Если элементы, которые относятся к текущему родителю, уже обрабатывали, второй раз их не обрабатываем.
	Если Не ЭтоВторойПорядокЦикла И Не МассивДобавленныхТаблиц.Найти(СтрокаЭлемента.РодительДляТаблицы) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем все элементы, которые должны отоносится к текущему родителю
	Если ЭтоВторойПорядокЦикла Тогда
		// Если обрабатываем второй порядок цикла, берем элементы, соответствующие именно второму порядоку, 
		// т.е. элементы вида C_1.1.Х.1.У.1.
		ЭлементыТекущейТаблицы  = ТаблицаЭлементов.Скопировать(ТаблицаЭлементов.НайтиСтроки(Новый Структура("РодительДляВторойТаблицы",
																							СтрокаЭлемента.РодительДляВторойТаблицы)));
	Иначе
		ЭлементыТекущейТаблицы  = ТаблицаЭлементов.Скопировать(ТаблицаЭлементов.НайтиСтроки(Новый Структура("РодительДляТаблицы",
																							СтрокаЭлемента.РодительДляТаблицы)));
	КонецЕсли;
	// Ищем таблицу, хранящую данные для текущих циклических элементов
	ДанныеДляТекущейТаблицы = НайтиДанныеДляТекущейТаблицы(СтрокаДанных, СтрокаЭлемента, ЭтоВторойПорядокЦикла, СчетчикХ - 1);
	
	Счетчик = 1;
	
	Для Каждого СтрокаТекущейТаблицы Из ДанныеДляТекущейТаблицы Цикл
		НазваниеРодителя = ПолучитьНазваниеРодителя(СтрокаЭлемента, ЭтоВторойПорядокЦикла, СчетчикХ);
		НовыйЭлемент     = ДокументDOM.СоздатьЭлемент(НазваниеРодителя);
		// Для элементов-родителей циклических элементов добавляется атрибут "номер_в_спике", значение
		// которого равно порядковому номеру соответствующей строки в таблице.
		НовыйЭлемент.УстановитьАтрибут("номер_в_списке", XMLСтрока(Счетчик));
		ТекущийРодитель.ДобавитьДочерний(НовыйЭлемент);
		
		// Добавляем циклические элементы
		РекурсияПоПорядкуЭлемента(ЭлементыТекущейТаблицы.Скопировать(), СтрокаТекущейТаблицы, ДокументDOM, НовыйЭлемент,
		Счетчик, СтрокаДанных, МассивДобавленныхЭлементов, МассивДобавленныхТаблиц, ЭтоВторойПорядокЦикла, СчетчикХ);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	МассивДобавленныхТаблиц.Добавить(СтрокаЭлемента.РодительДляТаблицы);
	
КонецПроцедуры // ОбработатьЦиклическиеЭлементы()

// Обходит все элементы текущей таблицы и добавляет в файл соответствующие значения.
// Для реализации иерархии элементов используется рекурсия по порядоку элементов (количество родительских элементов).
//
// Параметры:
//  ЭлементыТекущейТаблицы - ТаблицаЗначений - таблица, полученная из макета, с элементами,
//                                             которые соответствуют текущему циклу;
//  СтрокаТекущейТаблицы - СтрокаТаблицыЗначений - текущая строка с данными для файла;
//  ДокументDOM - ДокументDOM - документ XML-файла;
//  НовыйЭлемент - ЭлементDOM - родитель для текущих элементов;
//  Счетчик - Число - порядковый номер текущих элементов в цикле (либо в циклах второго порядка);
//  СтрокаДанных - СтрокаТаблицыЗначений - строка с данными текущего документа "Подготовка ЭП";
//  МассивДобавленныхЭлементов - Массив - названия элементов, которые уже добавлены в файл;
//  МассивДобавленныхТаблиц - Массив - названия элементов, которые являются родительскими для циклических элементов,
//  								   и которые уже добавлены в файл.
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый номер
//                     текущих элементов в рамках первого цикла.
//
Процедура РекурсияПоПорядкуЭлемента(ЭлементыТекущейТаблицы, СтрокаТекущейТаблицы, ДокументDOM, НовыйЭлемент,
									Счетчик, СтрокаДанных, МассивДобавленныхЭлементов, МассивДобавленныхТаблиц,
									ЭтоВторойПорядокЦикла, СчетчикX)
	
	Если ЭлементыТекущейТаблицы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПорядок = ЭлементыТекущейТаблицы.Получить(0).ПорядокЭлемента;
	
	НовыйЭлементБуффер     = НовыйЭлемент;
	ДополнительныйРодитель = Неопределено;
	
	Для Каждого ЭлементТекущейТаблицы Из ЭлементыТекущейТаблицы Цикл
		// Текущая строка уже могла быть обработана при использовании рекурсии по
		// элементам с более высоким порядком.
		Если ЭлементТекущейТаблицы.СтрокаОбработана = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		// Обрабатываем элементы с циклом второго порядка.
		Если Не ЭтоВторойПорядокЦикла И ЭлементТекущейТаблицы.ДвойнойЦикл Тогда
			ОбработатьЦиклическиеЭлементы(ДокументDOM, НовыйЭлементБуффер, ЭлементТекущейТаблицы, ЭлементыТекущейТаблицы, СтрокаДанных,
										  МассивДобавленныхЭлементов, МассивДобавленныхТаблиц, Истина, Счетчик);
			
			ОбработатьСменуПорядкаЭлементов(ЭлементыТекущейТаблицы, ЭлементТекущейТаблицы.ПорядокЭлемента);
			Продолжить;
		КонецЕсли;
		// Если порядок текущего элемента равен порядку предыдущего, просто добавляем новый элемент, не меняя родителя.
		Если ЭлементТекущейТаблицы.ПорядокЭлемента = ТекущийПорядок Тогда
			
			Если Не ЭтоВторойПорядокЦикла Тогда
				// Добавляем дополнительных родителей. Если элемент имеет вид C_1.1.Х.1.2.3, дополнительными родителями
				// являются элементы C_1.1.Х.1., C_1.1.Х.1.2.
				ДобавитьДополнительныеЭлементы(ДокументDOM, НовыйЭлемент, ЭлементТекущейТаблицы, Счетчик, МассивДобавленныхЭлементов, ДополнительныйРодитель);
			КонецЕсли;
			
			НазваниеЭлемента = ПолучитьНазваниеЭлемента(ЭлементТекущейТаблицы.НазваниеЭлемента, Счетчик, ЭтоВторойПорядокЦикла, СчетчикX);
			
			ТекЭлемент = ДокументDOM.СоздатьЭлемент(НазваниеЭлемента);
			ТекЭлемент.УстановитьАтрибут("значение", XMLСтрока(ПолучитьЗначениеТекущегоЭлемента(ЭлементТекущейТаблицы, СтрокаДанных, Счетчик - 1,
													 ЭтоВторойПорядокЦикла, СчетчикX)));
			НовыйЭлемент.ДобавитьДочерний(ТекЭлемент);
			
			МассивДобавленныхЭлементов.Добавить(НазваниеЭлемента);
			ЭлементТекущейТаблицы.СтрокаОбработана = Истина;
			
		// Если порядок текущего элемента меньше порядка предыдущего, используем рекурсию с порядком текущего элемента.
		ИначеЕсли ЭлементТекущейТаблицы.ПорядокЭлемента > ТекущийПорядок Тогда
			// Формируем список элементов, который состоит из элементов текущего порядка, которые еще не были обработаны.
			НовыйСписокЭлементов = УдалитьЭлементыТекущегоПорядкаИзТаблицы(ЭлементыТекущейТаблицы.Скопировать(), ТекущийПорядок);
			
			РекурсияПоПорядкуЭлемента(НовыйСписокЭлементов, СтрокаТекущейТаблицы, ДокументDOM, НовыйЭлемент, Счетчик, СтрокаДанных,
									  МассивДобавленныхЭлементов, МассивДобавленныхТаблиц, ЭтоВторойПорядокЦикла, СчетчикX);
									  
			// Строки текущего порядка помечаем как обработанные
			ОбработатьСменуПорядкаЭлементов(ЭлементыТекущейТаблицы, ЭлементТекущейТаблицы.ПорядокЭлемента);
			
		// Если порядок текущего элемента больше порядка предыдущего, возвращаемся к элементам с меньшим порядком (на верхний уровень рекурсии).
		Иначе
			Возврат;
		КонецЕсли;
		НовыйЭлемент = НовыйЭлементБуффер;
		
	КонецЦикла;
	
КонецПроцедуры // РекурсияПоПорядкуЭлемента()

// Удаляем из таблицы строки текущего порядка для перехода к рекурсии по элементам с более
// высоким порядком.
//
// Парметры:
//  ЭлементыТекущейТаблицы - ТаблицаЗначений - таблица, полученная из макета, с элементами,
//                                             которые соответствуют текущему циклу;
//  ПорядокЭлемента - Число - текущий порядок элементов.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с удаленными строками.
//
Функция УдалитьЭлементыТекущегоПорядкаИзТаблицы(ЭлементыТекущейТаблицы, ТекущийПорядок)
	
	СтрокиПорядка = ЭлементыТекущейТаблицы.НайтиСтроки(Новый Структура("ПорядокЭлемента", ТекущийПорядок));
	
	// Удаляем строки с текущим порядком.
	Для Каждого СтрокаПорядка Из СтрокиПорядка Цикл
		ЭлементыТекущейТаблицы.Удалить(СтрокаПорядка);
	КонецЦикла;
	
	// Удаляем строки, которые уже были обработаны.
	МассивСтрокУдаления = Новый Массив;
	Для Каждого СтрокаТекущейТаблицы Из ЭлементыТекущейТаблицы Цикл
		Если СтрокаТекущейТаблицы.СтрокаОбработана Тогда
			МассивСтрокУдаления.Добавить(СтрокаТекущейТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивСтрокУдаления Цикл
		ЭлементыТекущейТаблицы.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Возврат ЭлементыТекущейТаблицы;
	
КонецФункции // УдалитьЭлементыТекущегоПорядкаИзТаблицы()

// Добавляет дополнительных родителей. Если элемент имеет вид C_1.1.Х.1.2.3, дополнительными родителями
// являются элементы C_1.1.Х.1., C_1.1.Х.1.2.
//
// Параметры:
//  ДокументDOM - ДокументDOM - документ XML-файла;
//  НовыйЭлемент - ЭлементDOM - родитель для текущих элементов;
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, считанной из макета;
//  Счетчик - Число - порядковый номер текущих элементов в цикле (либо в циклах второго порядка);
//  МассивДобавленныхЭлементов - Массив - названия элементов, которые уже добавлены в файл;
//  ДополнительныйРодитель - ЭлементDOM - родитель, добавленный ранее в рамках выполнения текущей процедуры.
//                                        Передается в процедуру для обработки следующих элементов, которые
//										  должны иметь такого же родителя.
//  
Процедура ДобавитьДополнительныеЭлементы(ДокументDOM, НовыйЭлемент, СтрокаЭлемента, Счетчик,
										 МассивДобавленныхЭлементов, ДополнительныйРодитель)
	
	СчетчикСтрока = Строка(Счетчик);
	
	НазваниеЭлемента = СтрокаЭлемента.НазваниеЭлемента;
	// Подставляем нужные значения для циклических элементов
	НазваниеЭлемента = СтрЗаменить(НазваниеЭлемента, "Х", СчетчикСтрока);
	НазваниеРодителя = СтрокаЭлемента.РодительДляТаблицы + СчетчикСтрока + ".";
	
	МассивРодителей = ПолучитьМассивРодителейТекущегоЭлемента(Новый Структура("НазваниеЭлемента, РодительДляТаблицы, ОбходВЦикле",
																 НазваниеЭлемента, "", Ложь));
	МассивДопРодителей = Новый Массив;
	
	// Берем только тех родителей, которых не добавляли ранее.
	Для Каждого Родитель Из МассивРодителей Цикл
		Если СтрДлина(НазваниеРодителя) < СтрДлина(Родитель) Тогда
			МассивДопРодителей.Добавить(Родитель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДопРодитель Из МассивДопРодителей Цикл
		// Если текущего родителя ранее не добавляли, добавляем.
		Если МассивДобавленныхЭлементов.Найти(ДопРодитель) = Неопределено Тогда
			НовыйРодитель = ДокументDOM.СоздатьЭлемент(ДопРодитель);
			НовыйЭлемент.ДобавитьДочерний(НовыйРодитель);
			
			МассивДобавленныхЭлементов.Добавить(ДопРодитель);
			
			НовыйЭлемент           = НовыйРодитель;
			ДополнительныйРодитель = НовыйРодитель;
		Иначе
			// Если добавляли, используем его.
			НовыйЭлемент = ДополнительныйРодитель;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьДополнительныеЭлементы()

// Добавляет всех ролителей текущего элемента, которые не были добавлены ранее.
//
// Параметры:
//  ДокументDOM - ДокументDOM - документ XML-файла;
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, полученной из макета;
//  ТекущийРодитель - ЭлементDOM - родитель для текущих элементов;
//  МассивДобавленныхЭлементов - Массив - строковые представления всех уже добавленных элементов.
//
Процедура ДобавитьВсехРодителей(ДокументDOM, СтрокаЭлемента, ТекущийРодитель, МассивДобавленныхЭлементов)
	
	МассивРодителей = ПолучитьМассивРодителейТекущегоЭлемента(СтрокаЭлемента);
	
	Для Каждого Родитель Из МассивРодителей Цикл
		СписокТекущихРодителей = ДокументDOM.ПолучитьЭлементыПоИмени(Родитель);
		Если СписокТекущихРодителей.Количество() = 0 Тогда
			НовыйРодитель = ДокументDOM.СоздатьЭлемент(Родитель);
			ТекущийРодитель.ДобавитьДочерний(НовыйРодитель);
			
			МассивДобавленныхЭлементов.Добавить(Родитель);
			
			ТекущийРодитель = НовыйРодитель;
		Иначе
			ТекущийРодитель = СписокТекущихРодителей.Элемент(0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьВсехРодителей()

#КонецОбласти

#Область ОтправкаНаСайтИПечатнаяФорма

// Получает данные для сайта и печатной формы.
//
Функция ПолучитьДанныеДляСайтаИПечатнойФормы(МассивДокументов) Экспорт
	
	ПоказателиМКД = ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы(Перечисления.УПЖКХ_ВидыЗданий.МКД);
	ПоказателиЖД  = ПолучитьТаблицуПоказателейДляСайтаИПечатнойФормы(Перечисления.УПЖКХ_ВидыЗданий.ЖилойДом);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Документ");
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("ИННОрганизации");
	ТаблицаДанных.Колонки.Добавить("Здание");
	ТаблицаДанных.Колонки.Добавить("СсылкаНаЗдание");
	ТаблицаДанных.Колонки.Добавить("ВидЗдания");
	ТаблицаДанных.Колонки.Добавить("УлицаЗдания");
	ТаблицаДанных.Колонки.Добавить("НомерЗдания");
	ТаблицаДанных.Колонки.Добавить("ПолныйАдресЗдания");
	ТаблицаДанных.Колонки.Добавить("КодЗдания");
	ТаблицаДанных.Колонки.Добавить("ТаблицаПоказателей");
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	
	ТаблицаПоказателей.Колонки.Добавить("ТипПоказателя", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателей.Колонки.Добавить("ОсновныеДанные", Новый ОписаниеТипов("Булево"));
	ТаблицаПоказателей.Колонки.Добавить("НазваниеПоказателя", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателей.Колонки.Добавить("НазваниеАтрибута", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателей.Колонки.Добавить("ЗначениеПоказателя");
	ТаблицаПоказателей.Колонки.Добавить("МассивКолонокТаблицы", Новый ОписаниеТипов("Массив"));
	ТаблицаПоказателей.Колонки.Добавить("МассивКолонокВложеннойТаблицы", Новый ОписаниеТипов("Массив"));
	ТаблицаПоказателей.Колонки.Добавить("МассивНазванийКолонокТаблицы", Новый ОписаниеТипов("Массив"));
	ТаблицаПоказателей.Колонки.Добавить("МассивНазванийКолонокВложеннойТаблицы", Новый ОписаниеТипов("Массив"));
	ТаблицаПоказателей.Колонки.Добавить("ДлинаКолонокТаблицы", Новый ОписаниеТипов("Строка"));
	ТаблицаПоказателей.Колонки.Добавить("ДлинаКолонокВложеннойТаблицы", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДанныхДляЭлементовФайла = ПолучитьТаблицуДанныхДляЭлементовФайла(МассивДокументов);
	ТаблицаАдресовЗданий           = ПолучитьТаблицуАдресовЗданий(ТаблицаДанныхДляЭлементовФайла.ВыгрузитьКолонку("ЗданиеСсылка"));
	ТаблицаНастроекЭП              = ПолучитьТаблицуНастроекЭП(ТаблицаДанныхДляЭлементовФайла.Скопировать());
	
	Для Каждого Документ Из МассивДокументов Цикл
		СтрокаДанныхДокумента = ТаблицаДанныхДляЭлементовФайла.Найти(Документ, "Документ");
		
		Если СтрокаДанныхДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаДанныхДокумента.ДокументСодержитДанные Или НЕ СтрокаДанныхДокумента.ПаспортЗаполнен Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ " + СтрокаДанныхДокумента.НаименованиеДокумента + " не заполнен.");
			Продолжить;
		КонецЕсли;
		
		НастройкиЭП = ПолучитьНастройкиЭП(СтрокаДанныхДокумента.Организация, ТаблицаНастроекЭП);
		Если НастройкиЭП = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для организации " + СтрокаДанныхДокумента.Организация + " не указаны настройки формирования электронных паспортов.");
			Продолжить;
		КонецЕсли;
		
		ТаблицаЭлементов = ?(Документ.ВидЗдания = Перечисления.УПЖКХ_ВидыЗданий.МКД, ПоказателиМКД.Скопировать(), ПоказателиЖД.Скопировать());
		
		ТаблицаПоказателей.Очистить();
		
		ЗаполнитьТаблицуПоказателей(ТаблицаЭлементов, ТаблицаПоказателей, СтрокаДанныхДокумента);
		
		Если ТекущийДокументЯвляетсяНеактуальным(ТаблицаПоказателей) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данные документа " + Документ + " неактуальны. Необходимо его перезаполнить.");
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Документ           = Документ;
		НоваяСтрока.Организация        = СтрокаДанныхДокумента.НазваниеОрганизации;
		НоваяСтрока.ИННОрганизации     = СтрокаДанныхДокумента.ИННОрганизации;
		НоваяСтрока.Здание             = СтрокаДанныхДокумента.НазваниеЗдания;
		НоваяСтрока.СсылкаНаЗдание     = СтрокаДанныхДокумента.ЗданиеСсылка;
		НоваяСтрока.КодЗдания          = СтрокаДанныхДокумента.КодЗдания;
		НоваяСтрока.ВидЗдания          = СтрокаДанныхДокумента.ВидЗдания;
		НоваяСтрока.ТаблицаПоказателей = ТаблицаПоказателей.Скопировать();
		
		СтрокаАдреса = ТаблицаАдресовЗданий.Найти(СтрокаДанныхДокумента.ЗданиеСсылка, "Здание");
		Если НЕ СтрокаАдреса = Неопределено Тогда
			НоваяСтрока.УлицаЗдания       = СтрокаАдреса.Улица;
			НоваяСтрока.НомерЗдания       = СтрокаАдреса.НомерЗдания;
			НоваяСтрока.ПолныйАдресЗдания = СтрокаАдреса.ПолныйАдресЗдания;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьДанныеДляСайтаИПечатнойФормы()

// Получает данные по зданиям без электронных паспортов.
//
Функция ПолучитьДанныеПоЗданиямБезЭлектронныхПаспортов(ТаблицаДанныхЭП) Экспорт
	
	МассивЗданийЭП = ТаблицаДанныхЭП.ВыгрузитьКолонку("СсылкаНаЗдание");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка,
	|	КВП_Здания.Наименование КАК НаименованиеЗдания,
	|	КВП_Здания.Многоквартирное,
	|	КВП_Здания.Код КАК УникальныйИдентификатор,
	|	КВП_Здания.ГодПостройки,
	|	КВП_Здания.Этажей,
	|	КВП_Здания.Подъездов,
	|	КВП_Здания.ПлощадьЗданияОбщая,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Регион, """") КАК Регион,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Район, """") КАК Район,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Индекс, """") КАК Индекс
	|ПОМЕСТИТЬ втЗдания
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО КВП_Здания.Ссылка = втКонтактнаяИнформация.Объект
	|ГДЕ
	|	НЕ КВП_Здания.ЭтоГруппа
	|	И НЕ КВП_Здания.ПометкаУдаления
	|	И НЕ КВП_Здания.Ссылка В (&МассивЗданийЭП)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_Помещения.ВидПомещения.ЭтоЖилойФонд
	|				ТОГДА УПЖКХ_Помещения.Ссылка
	|		КОНЕЦ) КАК КоличествоЖилыхПомещений,
	|	УПЖКХ_Помещения.Владелец КАК Здание,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА НЕ УПЖКХ_Помещения.ВидПомещения.ЭтоЖилойФонд
	|				ТОГДА УПЖКХ_Помещения.Ссылка
	|		КОНЕЦ) КАК КоличествоНеЖилыхПомещений
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Владелец В
	|			(ВЫБРАТЬ
	|				втЗдания.Ссылка
	|			ИЗ
	|				втЗдания КАК втЗдания)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Помещения.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗдания.Ссылка,
	|	втЗдания.НаименованиеЗдания,
	|	втЗдания.Многоквартирное,
	|	втЗдания.УникальныйИдентификатор,
	|	втЗдания.ГодПостройки,
	|	втЗдания.Этажей,
	|	втЗдания.Подъездов,
	|	втЗдания.ПлощадьЗданияОбщая,
	|	втЗдания.Регион,
	|	втЗдания.Район,
	|	втЗдания.Город,
	|	втЗдания.НаселенныйПункт,
	|	втЗдания.Улица,
	|	втЗдания.Дом,
	|	втЗдания.Корпус,
	|	втЗдания.Индекс,
	|	ЕСТЬNULL(втПомещения.КоличествоЖилыхПомещений, 0) КАК КоличествоЖилыхПомещений,
	|	ЕСТЬNULL(втПомещения.КоличествоНеЖилыхПомещений, 0) КАК КоличествоНежилыхПомещений
	|ИЗ
	|	втЗдания КАК втЗдания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещения КАК втПомещения
	|		ПО втЗдания.Ссылка = втПомещения.Здание";
	Запрос.УстановитьПараметр("МассивЗданийЭП", МассивЗданийЭП);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Колонки.Добавить("НомерЗдания",       Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПолныйАдресЗдания", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Строка Из Таблица Цикл
		Строка.НомерЗдания       = "" + Строка.Дом + ?(Строка.Корпус = "", "", "/" + Строка.Корпус);
		Строка.ПолныйАдресЗдания = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СформироватьПолныйАдресЗданияДляВыгрузки(Строка.Регион,
																														  Строка.Район,
																														  Строка.Город,
																														  Строка.НаселенныйПункт,
																														  Строка.Улица,
																														  Строка.Дом,
																														  Строка.Корпус);
	КонецЦикла;
							   
	Возврат Таблица;
	
КонецФункции // ПолучитьДанныеПоЗданиямБезЭлектронныхПаспортов()

// Заполняет таблицу показателей.
//
Процедура ЗаполнитьТаблицуПоказателей(ТаблицаЭлементов, ТаблицаПоказателей, СтрокаДанныхДокумента)
	
	Для Каждого СтрокаЭлемента Из ТаблицаЭлементов Цикл
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		
		НоваяСтрока.ТипПоказателя                         = СтрокаЭлемента.ТипПоказателя;
		НоваяСтрока.ОсновныеДанные                        = СтрокаЭлемента.ОсновныеДанные;
		НоваяСтрока.НазваниеПоказателя                    = СтрокаЭлемента.НазваниеПоказателя;
		НоваяСтрока.МассивКолонокТаблицы                  = СтрокаЭлемента.МассивКолонокТаблицы;
		НоваяСтрока.МассивКолонокВложеннойТаблицы         = СтрокаЭлемента.МассивКолонокВложеннойТаблицы;
		НоваяСтрока.МассивНазванийКолонокТаблицы          = СтрокаЭлемента.МассивНазванийКолонокТаблицы;
		НоваяСтрока.МассивНазванийКолонокВложеннойТаблицы = СтрокаЭлемента.МассивНазванийКолонокВложеннойТаблицы;
		НоваяСтрока.ДлинаКолонокТаблицы                   = СтрокаЭлемента.ДлинаКолонокТаблицы;
		НоваяСтрока.ДлинаКолонокВложеннойТаблицы          = СтрокаЭлемента.ДлинаКолонокВложеннойТаблицы;
		
		Если СтрокаЭлемента.ТипПоказателя = "группа" Тогда
			НоваяСтрока.ЗначениеПоказателя = ПолучитьНазваниеГруппыПодгруппыТаблицы(СтрокаЭлемента.МестоХранения, "ГРУППА");
		ИначеЕсли СтрокаЭлемента.ТипПоказателя = "подгруппа" Тогда
			НоваяСтрока.ЗначениеПоказателя = ПолучитьНазваниеГруппыПодгруппыТаблицы(СтрокаЭлемента.МестоХранения, "ПОДГРУППА");
		ИначеЕсли СтрокаЭлемента.ТипПоказателя = "статичные данные"
		 ИЛИ СтрокаЭлемента.ТипПоказателя = "таблица" Тогда
			НоваяСтрока.ЗначениеПоказателя = ПолучитьЗначениеПоказателя(СтрокаЭлемента.МестоХранения, СтрокаДанныхДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуПоказателей()

// Определяет тип показателя.
//
Функция ОпределитьТипПоказателя(НоваяСтрока)
	
	Если Не Найти(НоваяСтрока.МестоХранения, "ПОДГРУППА") = 0 Тогда
		Возврат "подгруппа";
	ИначеЕсли Не Найти(НоваяСтрока.МестоХранения, "ГРУППА") = 0 Тогда
		Возврат "группа";
	ИначеЕсли Не Найти(НоваяСтрока.НазваниеПоказателя, "Таблица") = 0 Тогда
		Возврат "таблица";
	ИначеЕсли НоваяСтрока.ОсновныеДанные = "Да" Тогда
		Возврат "основные данные";
	Иначе
		Возврат "статичные данные"
	КонецЕсли;
	
КонецФункции // ОпределитьТипПоказателя()

// Получает название группы/подгруппы таблицы.
//
Функция ПолучитьНазваниеГруппыПодгруппыТаблицы(Знач ПолноеНазвание, СтрокаУдаления)
	
	Название = СтрЗаменить(ПолноеНазвание, СтрокаУдаления, "");
	Название = Сред(Название, 3, СтрДлина(Название) - 3);
	
	Возврат Название;
	
КонецФункции // ПолучитьНазваниеГруппыПодгруппыТаблицы()

// Получает значение показателя.
//
Функция ПолучитьЗначениеПоказателя(МестоХранения, СтрокаДанных) Экспорт
	
	МассивСоставныхЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МестоХранения, ".");
	
	Если МассивСоставныхЧастей.Количество() = 1 Тогда
		// Если в массиве один элемент, значит данные храняться в ТЧ документа, отличной от "СтатичныеДанные".
		КонечныйПоказатель = МассивСоставныхЧастей.Получить(0);
		
		Если ВТекущемМестеХраненияЕстьНужныеДанные(СтрокаДанных, КонечныйПоказатель) Тогда
			Возврат СтрокаДанных[КонечныйПоказатель];
		Иначе
			Возврат "";
		КонецЕсли;
		
	Иначе
		ТекущееМестоХранения = СтрокаДанных;
		КонечныйПоказатель   = МассивСоставныхЧастей.Получить(МассивСоставныхЧастей.Количество() - 1);
		
		МассивСоставныхЧастей.Удалить(МассивСоставныхЧастей.Количество() - 1);
		
		Для Каждого СоставнаяЧасть Из МассивСоставныхЧастей Цикл
			Если ВТекущемМестеХраненияЕстьНужныеДанные(ТекущееМестоХранения, СоставнаяЧасть) Тогда
				ТекущееМестоХранения = ТекущееМестоХранения[СоставнаяЧасть];
			Иначе
				Возврат "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВТекущемМестеХраненияЕстьНужныеДанные(ТекущееМестоХранения, КонечныйПоказатель) Тогда
		
		// Если данные храняться в ТЧ "СтатичныеДанные".
		Если ТипЗнч(ТекущееМестоХранения) = Тип("ТаблицаЗначений") Тогда
			СтрокаПоказателя = ТекущееМестоХранения.Найти(КонечныйПоказатель, "ПоказательРаскрытия");
			ЗначениеПоказателя = СтрокаПоказателя.ЗначениеПоказателя;
		Иначе
			ЗначениеПоказателя = ТекущееМестоХранения[КонечныйПоказатель];
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции // ПолучитьЗначениеПоказателя()

// В текущем месте хранения есть нужные данные.
//
Функция ВТекущемМестеХраненияЕстьНужныеДанные(ТекущееМестоХранения, СоставнаяЧасть)
	
	Если ТипЗнч(ТекущееМестоХранения) = Тип("СтрокаТаблицыЗначений") Тогда
		Возврат (Не ТекущееМестоХранения.Владелец().Колонки.Найти(СоставнаяЧасть) = Неопределено);
	ИначеЕсли ТипЗнч(ТекущееМестоХранения) = Тип("ТаблицаЗначений") Тогда
		Возврат (Не ТекущееМестоХранения.Найти(СоставнаяЧасть, "ПоказательРаскрытия") = Неопределено);
	ИначеЕсли ТипЗнч(ТекущееМестоХранения) = Тип("Структура") Тогда
		Возврат ТекущееМестоХранения.Свойство(СоставнаяЧасть);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВТекущемМестеХраненияНетНужныхДанных()

// Текущий документ является неактуальным.
//
Функция ТекущийДокументЯвляетсяНеактуальным(ТаблицаПоказателей) Экспорт
	
	СтрокиТаблицы = ТаблицаПоказателей.НайтиСтроки(Новый Структура("ТипПоказателя", "таблица"));
	
	Для Каждого СтрокаТаблицы ИЗ СтрокиТаблицы Цикл
		Если СтрокаТаблицы.ЗначениеПоказателя = "" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ТекущийДокументЯвляетсяНеактуальным()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииФормированияФайлов

// Ищет таблицу (или структуру), хранящую данные для текущих циклических элементов.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - строка с данными текущего документа "Подготовка ЭП";
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, считанной из макета;
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый
//                     номер текущих элементов в рамках первого цикла.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Структура.
//
Функция НайтиДанныеДляТекущейТаблицы(СтрокаДанных, СтрокаЭлемента, ЭтоВторойПорядокЦикла, СчетчикХ)
	
	МестоХранения = ?(ЭтоВторойПорядокЦикла, СтрокаЭлемента.МестоХраненияВторойТаблицы, СтрокаЭлемента.МестоХранения);
	
	МассивСоставныхЧастей = РазложитьСтрокуВПодстроки(МестоХранения);
	
	ТекущееМестоХранения = СтрокаДанных;
	
	СчетчикТаблиц = 1;
	
	// По назначению поля "МестоХранения" пытаемся найти таблицу в данных документа.
	Для Каждого СоставнаяЧасть ИЗ МассивСоставныхЧастей Цикл
		ТекущееМестоХранения = ТекущееМестоХранения[СоставнаяЧасть];
		
		Если ТипЗнч(ТекущееМестоХранения) = Тип("ТаблицаЗначений") Тогда
			Если Не ЭтоВторойПорядокЦикла Тогда
				Возврат ТекущееМестоХранения;
			Иначе
				// Для циклических элементов второго порядка (цикл в цикле) возвращаем вторую найденную таблицу.
				// А в первой найденной таблице берем строку, которая соответствует значению СчетчикХ.
				Если СчетчикТаблиц = 2 Тогда
					Возврат ТекущееМестоХранения;
				Иначе
					Если ТекущееМестоХранения.Количество() - 1 < СчетчикХ Тогда
						Возврат Неопределено;
					Иначе
						ТекущееМестоХранения = ТекущееМестоХранения.Получить(СчетчикХ);
					КонецЕсли;
					
					СчетчикТаблиц = СчетчикТаблиц + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиДанныеДляТекущейТаблицы()

// По строке, указанной в макете, ищет в документе место, в котором хранятся нужные данные.
//
// Параметры:
//  СтрокаДанных - СтрокаТаблицыЗначений - строка с данными текущего документа "Подготовка ЭП";
//  МестоХранения - Строка - Строковое представление места хранения в виде "ДанныеИзОтчетов.ТаблицаПомещений.СтруктураГВС.Начислено".
//                           Для циклов вторых порядков: всегда хранится ссылка на таблицу,
//                           которая соответствует циклу первого порядка.
//  СчетчикДляЦикла - Число - порядковый номер текущего элемента в цикле (либо в цикле второго порядка);
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый
//                     номер текущих элементов в рамках первого цикла;
//  МестоХраненияВторойТаблицы - Строка - Строковое представление места хранения таблицы, в которой хранятся данные для циклов
//                                        второго порядка.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Структура - место, в котором хранятся данные.
//
Функция ПолучитьМестоХраненияЗначения(СтрокаДанных, МестоХранения, СчетчикДляЦикла, ЭтоВторойПорядокЦикла, СчетчикХ, МестоХраненияВторойТаблицы)
	
	Если НЕ ЭтоВторойПорядокЦикла Тогда
		МассивСоставныхЧастей = РазложитьСтрокуВПодстроки(МестоХранения);
	Иначе
		МассивСоставныхЧастей = РазложитьСтрокуВПодстроки(МестоХраненияВторойТаблицы);
	КонецЕсли;
	
	ТекущееМестоХранения = СтрокаДанных;
	СчетчикТаблиц        = 1;
	
	Для Каждого СоставнаяЧасть ИЗ МассивСоставныхЧастей Цикл
		Если ТипЗнч(ТекущееМестоХранения) = Тип("ТаблицаЗначений") Тогда
			Если Не ЭтоВторойПорядокЦикла Тогда
				Если СчетчикДляЦикла > ТекущееМестоХранения.Количество() - 1 Тогда
					Возврат Неопределено;
				Иначе
					ТекущаяСтрока        = ТекущееМестоХранения.Получить(СчетчикДляЦикла);
					ТекущееМестоХранения = ТекущаяСтрока[СоставнаяЧасть];
				КонецЕсли;
			Иначе
				// Подразумеваем, что счетчик может принимать только 2 значения: "1" или "2"
				// Цикл первого порядка.
				Если СчетчикТаблиц = 1 Тогда
					Если СчетчикХ > ТекущееМестоХранения.Количество() - 1 Тогда
						Возврат Неопределено;
					Иначе
						ТекущаяСтрока        = ТекущееМестоХранения.Получить(СчетчикХ - 1);
						ТекущееМестоХранения = ТекущаяСтрока[СоставнаяЧасть];
					КонецЕсли;
				Иначе
					// Цикл второго порядка.
					Если СчетчикДляЦикла > ТекущееМестоХранения.Количество() - 1 Тогда
						Возврат Неопределено;
					Иначе
						ТекущаяСтрока        = ТекущееМестоХранения.Получить(СчетчикДляЦикла);
						ТекущееМестоХранения = ТекущаяСтрока[СоставнаяЧасть];
					КонецЕсли;
				КонецЕсли;
				
				СчетчикТаблиц = СчетчикТаблиц + 1; 
			КонецЕсли;
		Иначе
			ТекущееМестоХранения = ТекущееМестоХранения[СоставнаяЧасть];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущееМестоХранения;
	
КонецФункции // ПолучитьМестоХраненияЗначения()

// Получает значение текущего элемента по месту хранения, указанному в макете.
//
// Параметры:
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, считанной из макета;
//  СтрокаДанных - СтрокаТаблицыЗначений - строка с данными текущего документа "Подготовка ЭП";
//  СчетчикДляЦикла - Число - порядковый номер текущего элемента в цикле (либо в цикле второго порядка);
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.;
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый
//                      номер текущих элементов в рамках первого цикла.
//
// Возвращаемое значение:
//  Строка - Строковое представление значения в формате XMLСтрока.
//
Функция ПолучитьЗначениеТекущегоЭлемента(СтрокаЭлемента, СтрокаДанных, СчетчикДляЦикла = 0, ЭтоВторойПорядокЦикла = Ложь, СчетчикХ = 0)
	
	// Определяем объект, в котором хранится значение
	МестоХранения    = ПолучитьМестоХраненияЗначения(СтрокаДанных, СтрокаЭлемента.МестоХранения, СчетчикДляЦикла,
													 ЭтоВторойПорядокЦикла, СчетчикХ, СтрокаЭлемента.МестоХраненияВторойТаблицы);
	ТипМестоХранения = ТипЗнч(МестоХранения);
	
	ВозвращаемоеЗначение = "";
	
	Если Не СтрокаЭлемента.ОбходВЦикле Тогда
		Если ТипМестоХранения = Тип("Структура") Тогда
			Если МестоХранения.Свойство(СтрокаЭлемента.НазваниеПоказателя) Тогда
				ВозвращаемоеЗначение = Строка(МестоХранения[СтрокаЭлемента.НазваниеПоказателя]);
			КонецЕсли;
		ИначеЕсли ТипМестоХранения = Тип("ТаблицаЗначений") Тогда
			Если ЭтоТаблицаСтатичныхПоказателей(МестоХранения) Тогда
				// Для хранения ряда статичных данных в документе "Подготовка ЭП" предусмотрена табица "СтатичныеПоказатели".
				// Данная таблица состоит из двух колонок: "ПоказательРаскрытия" (название - ключ для поиска) и "ЗначениеПоказателя".
				СтрокаСоЗначением = МестоХранения.Найти(СтрокаЭлемента.НазваниеПоказателя, "ПоказательРаскрытия");
				Если Не СтрокаСоЗначением = Неопределено Тогда
					ВозвращаемоеЗначение = Строка(СтрокаСоЗначением.ЗначениеПоказателя);
				КонецЕсли;
			Иначе
				// Если данные храняться в таблице, отличное от таблицы "СтатичныеПоказатели", должен быть указан номер строки таблицы, 
				// из которой надо брать данные.
				ВозвращаемоеЗначение = ПолучитьЗначениеИзСтрокиТаблицы(МестоХранения, СтрокаЭлемента.НазваниеПоказателя);
			КонецЕсли;
		Иначе
			ВозвращаемоеЗначение = "";
		КонецЕсли;
		
	Иначе
		// Если текушая строка предполагает наличие циклических данных, ищем конкретную строку таблицы, индекс которой
		// равен счетчикам циклов.
		Если ТипМестоХранения = Тип("ТаблицаЗначений") Тогда
			Если МестоХранения.Количество() - 1 < СчетчикДляЦикла Тогда
				ВозвращаемоеЗначение = "";
			Иначе
				СтрокаТаблицы = МестоХранения.Получить(СчетчикДляЦикла);
				ВозвращаемоеЗначение = СтрокаТаблицы[СтрокаЭлемента.НазваниеПоказателя];
			КонецЕсли;
		ИначеЕсли ТипМестоХранения = Тип("Структура") Тогда
			ВозвращаемоеЗначение = МестоХранения[СтрокаЭлемента.НазваниеПоказателя];
		Иначе
			ВозвращаемоеЗначение = "";
		КонецЕсли;
		
		СчетчикДляЦикла = СчетчикДляЦикла + 1;
	КонецЕсли;
	
	Возврат ПолучитьСтроковоеПредставление(ВозвращаемоеЗначение);
	
КонецФункции // ПолучитьЗначениеТекущегоЭлемента()

// Формирует строковое представление значения для вывода в XML-файл.
//
// Параметры:
//  ВозвращаемоеЗначение - Строка, Число, Дата - Значение, которое надо преобразовать в строку.
//
// Возвращаемое значение:
//  Строка - строка для XML-файла.
//
Функция ПолучитьСтроковоеПредставление(ВозвращаемоеЗначение)
	
	Если ТипЗнч(ВозвращаемоеЗначение) = Тип("Дата")
	 ИЛИ ТипЗнч(ВозвращаемоеЗначение) = Тип("Число") Тогда
		Возврат XMLСтрока(ВозвращаемоеЗначение);
	ИначеЕсли ТипЗнч(ВозвращаемоеЗначение) = Тип("Строка") Тогда
		Возврат ВозвращаемоеЗначение;
	Иначе
		Возврат Строка(ВозвращаемоеЗначение);
	КонецЕсли;
	
КонецФункции // ПолучитьСтроковоеПредставление()

// Отмечает строки, уже обработанные на нижнем уровне рекурсии.
//
// Параметры:
//  ЭлементыТекущейТаблицы - ТаблицаЗначений - таблица, полученная из макета, с элементами,
//                                             которые соответствуют текущему циклу;
//  ПорядокЭлемента - Число - текущий порядок элементов.
// 
Процедура ОбработатьСменуПорядкаЭлементов(ЭлементыТекущейТаблицы, ПорядокЭлемента)
	
	СтрокиПорядка = ЭлементыТекущейТаблицы.НайтиСтроки(Новый Структура("ПорядокЭлемента", ПорядокЭлемента));
	
	Если СтрокиПорядка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обрабатываем все элементы, начиная с первого элемента текущего индекса
	ТекущийИндекс = ЭлементыТекущейТаблицы.Индекс(СтрокиПорядка.Получить(0));
	
	Пока ТекущийИндекс <= ЭлементыТекущейТаблицы.Количество() - 1 Цикл
		ТекущаяСтрока = ЭлементыТекущейТаблицы.Получить(ТекущийИндекс);
		Если ТекущаяСтрока.ПорядокЭлемента > ПорядокЭлемента Тогда
			Возврат;
		ИначеЕсли ТекущаяСтрока.ПорядокЭлемента < ПорядокЭлемента Тогда
			ТекущийИндекс = ТекущийИндекс + 1;
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.СтрокаОбработана = Истина;
		
		ТекущийИндекс = ТекущийИндекс + 1;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСменуПорядкаЭлементов()

// Определяет, является ли текущая таблица документа таблицей со статичными показателями.
//
// Параметры:
//  МестоХранения - ТаблицаЗначений - текущая таблица.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоТаблицаСтатичныхПоказателей(МестоХранения)
	
	Если МестоХранения.Колонки.Найти("ПоказательРаскрытия") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ЭтоТаблицаСтатичныхПоказателей()

// Формирует название элемента-родителя текущих циклических элементов.
//
// Параметры:
//  СтрокаЭлемента - СтрокаТаблицыЗначений - текущая строка таблицы, считанной из макета;
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый
//                     номер текущих элементов в рамках первого цикла.
//
Функция ПолучитьНазваниеРодителя(СтрокаЭлемента, ЭтоВторойПорядокЦикла, СчетчикХ)
	
	Если Не ЭтоВторойПорядокЦикла Тогда
		Возврат СтрокаЭлемента.РодительДляТаблицы;
	Иначе
		Возврат СтрЗаменить(СтрокаЭлемента.РодительДляВторойТаблицы, "Х", Строка(СчетчикХ));
	КонецЕсли;
	
КонецФункции // ПолучитьНазваниеРодителя()

// По значению, указанному в макете, находит нужное значение конкретной строки таблицы.
//  
// Параметры:
//  МестоХранения - ТаблицаЗначений - таблица, в которой надо найти данные;
//  НазваниеПоказателя - Строка - строка, указанная в макете.
//								  Имеет вид "1 строка, НазваниеУслуги".
//
Функция ПолучитьЗначениеИзСтрокиТаблицы(МестоХранения, НазваниеПоказателя)
	
	ПозицияЗапятой = Найти(НазваниеПоказателя, ",");
	
	Если ПозицияЗапятой = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПервыйПробел = Найти(НазваниеПоказателя, " ");
	
	НомерСтроки = Число(Лев(НазваниеПоказателя, ПервыйПробел - 1));
	
	Если НомерСтроки > МестоХранения.Количество() Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаТаблицы = МестоХранения.Получить(НомерСтроки - 1);
	
	ТекНазваниеПоказателя = Сред(НазваниеПоказателя, ПозицияЗапятой + 2);
	
	Возврат СтрокаТаблицы[ТекНазваниеПоказателя];
	
КонецФункции // ПолучитьЗначениеИзСтрокиТаблицы()

// Раскладывает текущую строку на подстроки. В качестве разделителя подстрок в строке служит точка ".".
// 
// Параметры:
//  Строка - Строка - строковое представление места хранения значения для текущего элемента.
//
// Возвращаемое значение:
//  Массив - массив с подстроками.
// 
Функция РазложитьСтрокуВПодстроки(Знач Строка)
	
	МассивПодстрок = Новый Массив;
	
	ПозицияТочки = Найти(Строка, ".");
	Пока НЕ ПозицияТочки = 0 Цикл
		Подстрока = Лев(Строка, ПозицияТочки - 1);
		МассивПодстрок.Добавить(Подстрока);
		
		Строка = Сред(Строка, ПозицияТочки + 1);
		ПозицияТочки = Найти(Строка, ".");
	КонецЦикла;
	
	МассивПодстрок.Добавить(Строка);
	
	Возврат МассивПодстрок;
	
КонецФункции // РазложитьСтрокуВПодстроки()

// Формирует название текущего элемента. Данная фунцкия необходима для циклических элементов, которые имеют в своем
// представление символы циклов: Х или У.
//
// Параметры:
//  НазваниеЭлемента - Строка - представление текущего элемента;
//  СчетчикДляЦикла - Число - порядковый номер текущего элемента в цикле (либо в цикле второго порядка);
//  ЭтоВторойПорядокЦикла - Булево - отражает факт того, что сейчас обрабатываются циклы, вложенные в циклы, т.е.
//									 элементы вида C_1.1.Х.1.У.1.
//  СчетчикХ - Число - (имеет место только для циклов второго порядка) порядковый
//                     номер текущих элементов в рамках первого цикла.
//
// Возвращаемое значение:
//  Строка - строковое представление названия текущего элемента.
//
Функция ПолучитьНазваниеЭлемента(НазваниеЭлемента, СчетчикДляЦикла = 1, ЭтоВторойПорядокЦикла = Ложь, СчетчикX = 0)
	
	Если Не ЭтоВторойПорядокЦикла Тогда
		Возврат СтрЗаменить(НазваниеЭлемента, "Х", Строка(СчетчикДляЦикла));
	Иначе
		Название = СтрЗаменить(НазваниеЭлемента, "Х", Строка(СчетчикX));
		Возврат СтрЗаменить(Название, "У", СчетчикДляЦикла);
	КонецЕсли;
	
КонецФункции // ПолучитьНазваниеЭлемента()

// Формирует массив со строковым представлением родителей текущего элемента. 
// Если элемент имеет вид C_1.2.3.4, то родителями являются C_1.2, C_1.2.3.
//
// Параметры:
//  СтрокаЭлемента - текущая строка таблицы, полученная из макета.
//
// Возвращаемое значение:
//  Массив - массив родителей.
//
Функция ПолучитьМассивРодителейТекущегоЭлемента(СтрокаЭлемента)
	
	НазваниеЭлемента   = СтрокаЭлемента.НазваниеЭлемента;
	РодительДляТаблицы = СтрокаЭлемента.РодительДляТаблицы;
	ОбходВЦикле        = СтрокаЭлемента.ОбходВЦикле;
	
	ТекущееНазваниеЭлемента = Лев(НазваниеЭлемента, СтрДлина(НазваниеЭлемента) - 1);
	ПозицияТочки            = Найти(ТекущееНазваниеЭлемента, ".");
	МассивРодителей         = Новый Массив;
	ПредставлениеРодителя   = "";
	
	Пока Не ПозицияТочки = 0 Цикл
		СоставнаяЧасть = Лев(ТекущееНазваниеЭлемента, ПозицияТочки);
		ПредставлениеРодителя = ПредставлениеРодителя + СоставнаяЧасть;
		
		Если СтрДлина(ПредставлениеРодителя) > 4 И Не ОбходВЦикле И Не ПредставлениеРодителя = РодительДляТаблицы Тогда
			
			МассивРодителей.Добавить(ПредставлениеРодителя);
		КонецЕсли;
		
		ТекущееНазваниеЭлемента = Сред(ТекущееНазваниеЭлемента, ПозицияТочки + 1);
		
		ПозицияТочки = Найти(ТекущееНазваниеЭлемента, ".");
	КонецЦикла;
	
	Возврат МассивРодителей;
	
КонецФункции // ПолучитьМассивРодителейТекущегоЭлемента()

// Формирует название ролителя текущего циклического элемента.
//
// Параметры:
//  НазваниеЭлемента - Строка - строковое представление текущего циклического элемента.
//								Содержит "Х" и "У" - символы циклов первого и второго порядков.
//  СимволДляЦикла - Строка - "Х" или "У" - символ, опираясь на который ищшем текущего родителя.
//
// Возвращаемое значение:
//  Строка - название родителя
//
Функция ПолучитьРодителяДляТаблицы(НазваниеЭлемента, СимволДляЦикла)
	
	ПозицияСимвола = Найти(НазваниеЭлемента, СимволДляЦикла);
	Если ПозицияСимвола = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Лев(НазваниеЭлемента, ПозицияСимвола - 1);
	
КонецФункции // ПолучитьРодителяДляТаблицы

// Формирует строковое представление родителя текущего элемента.
//
// Параметры:
//  НазваниеЭлемента - Строка - название текущего элемента.
//
// Возвращаемое значение:
//  Строка - название родителя.
//
Функция ПолучитьСтроковоеПредставлениеРодителяТекущегоЭлемента(НазваниеЭлемента)
	
	ТекущееНазваниеЭлемента = Лев(НазваниеЭлемента, СтрДлина(НазваниеЭлемента) - 1);
	ПозицияТочки            = Найти(ТекущееНазваниеЭлемента, ".");
	ПредставлениеРодителя   = "";
	
	Пока Не ПозицияТочки = 0 Цикл
		СоставнаяЧасть = Лев(ТекущееНазваниеЭлемента, ПозицияТочки);
		ПредставлениеРодителя = ПредставлениеРодителя + СоставнаяЧасть;
		
		ТекущееНазваниеЭлемента = Сред(ТекущееНазваниеЭлемента, ПозицияТочки + 1);
		
		ПозицияТочки = Найти(ТекущееНазваниеЭлемента, ".");
	КонецЦикла;
	
	Возврат ПредставлениеРодителя;
	
КонецФункции // ПолучитьСтроковоеПредставлениеРодителяТекущегоЭлемента()

// Формирует строковое представление раздела текущего элемента.
// Если элемент имеет вид C_1.2.3, разделом является первый родитель - C_1.
//
// Параметры:
//
// Возвращаемое значение:
//  Строка - строковое представление раздела.
//
Функция ПолучитьСтроковоеПредставлениеРазделаТекущегоЭлемента(НазваниеЭлемента)
	
	ПозицияТочки = Найти(НазваниеЭлемента, ".");
	
	Возврат Лев(НазваниеЭлемента, ПозицияТочки);
	
КонецФункции // ПолучитьСтроковоеПредставлениеРазделаТекущегоЭлемента()

#КонецОбласти