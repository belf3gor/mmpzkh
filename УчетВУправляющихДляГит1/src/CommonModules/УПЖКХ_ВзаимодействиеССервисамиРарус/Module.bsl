
#Область ПолезнаяИнформация

// ТЗ по обмену с производителями счетчиков https://docs.google.com/document/d/1sY-Dm88FYVfuRbq4eVVxoblYPieZtQtC3wWlTTm6N8Q

#КонецОбласти


#Область ПолучениеИУстановкаЗначенийКонстант

// Возвращает параметры доступа из константы ОТР_ПараметрыАккаунтаИнтернетСервисов.
//
Функция ПараметрыДоступаБазыКСервисамРарус() Экспорт
	
	СохраненныеНастройки = Константы.ОТР_ПараметрыАккаунтаИнтернетСервисов.Получить().Получить();
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Возврат СохраненныеНастройки;
	Иначе
		Возврат Новый Структура("Логин, Пароль, Email, ИспользоватьSSL", "", "", "", Ложь);
	КонецЕсли;
	
КонецФункции

// Устанавливает в значение константы ОТР_ПараметрыАккаунтаИнтернетСервисов параметры доступа.
//
Процедура УстановитьПараметрыДоступаБазыКСервисамРарус(ПараметрыДоступа) Экспорт
	
	СтруктураДляСохранения = Новый Структура("Логин, Пароль, Email, ИспользоватьSSL", "", "", "", Ложь);
	
	ЗаполнитьЗначенияСвойств(СтруктураДляСохранения, ПараметрыДоступаБазыКСервисамРарус());
	ЗаполнитьЗначенияСвойств(СтруктураДляСохранения, ПараметрыДоступа);
	
	ПараметрыДляСохранения = Новый ХранилищеЗначения(СтруктураДляСохранения);
	
	Константы.ОТР_ПараметрыАккаунтаИнтернетСервисов.Установить(ПараметрыДляСохранения);
	
КонецПроцедуры

// Возвращает токен из константы УПЖКХ_ТокенДляСоединенияССервисамиРарус.
//
Функция ТокенДляСоединенияССервисамиРарус() Экспорт
	
	Возврат Константы.УПЖКХ_ТокенДляСоединенияССервисамиРарус.Получить();
	
КонецФункции

// Устанавливает в значение константы УПЖКХ_ТокенДляСоединенияССервисамиРарус токен.
//
Процедура УстановитьТокенДляСоединенияССервисамиРарус(Токен) Экспорт
	
	Константы.УПЖКХ_ТокенДляСоединенияССервисамиРарус.Установить(Токен);
	
КонецПроцедуры

#КонецОбласти


#Область ВзаимодействиеССервисами

// Получает объект соединения к веб-сервису обмена сведениями по счетчикам.
Функция ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ()
	
	Попытка
		// IP для пользователей (недоступен из офиса разработчиков).
		мHTTPСоединение = Новый HTTPСоединение("ws-metersexchange.otr-soft.ru/WS_MetersExchange/hs/MetersExchange",, "Обмен данными",,,, Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
		Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/isavailable", "");
	Исключение
		Попытка
			// IP для разработчиков (недоступен для пользователей).
			мHTTPСоединение = Новый HTTPСоединение("192.168.112.2:8080/WS_MetersExchange/hs/MetersExchange", , "Обмен данными", , , 180);
			Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/isavailable", "");
		Исключение
			// Если нет интернета.
			мHTTPСоединение = Неопределено;
		КонецПопытки;
	КонецПопытки;
	
	Возврат мHTTPСоединение;
	
КонецФункции

// Отправляет запрос на регистрацию аккаунта.
Функция ЗарегистрироватьсяНаСервисе(СтруктураРегистрации, СведенияОбОшибке) Экспорт
	
	СтрокаПередачи = СформироватьСтрокуПередачиПараметровДоступа(СтруктураРегистрации);
	
	РегистрацияПрошлаУспешно = Ложь;
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось создать учетную запись: возможно, нет подключения к сети Интернет.";
		Иначе
			Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/register", СтрокаПередачи);
			СтруктураОтвета = ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "success" Тогда
					СтруктураПараметровДоступа = Новый Структура("Логин, Пароль, Email", СтруктураРегистрации.Логин, СтруктураРегистрации.Пароль, СтруктураРегистрации.Email);
					УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
					РегистрацияПрошлаУспешно = Истина;
					
				ИначеЕсли СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось создать учетную запись.";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				Иначе
					СведенияОбОшибке = "Не удалось создать учетную запись: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось создать учетную запись: исключительная ошибка.";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегистрацияПрошлаУспешно;
	
КонецФункции

// Отправляет повторно кодовое словое, необходимое для регистрации, на электронный ящик пользователя.
Процедура ОтправитьКодовоеСловоПовторно(СведенияОбОшибке) Экспорт
	
	СтрокаПередачи = СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail();
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: возможно, нет подключения к сети Интернет.";
		Иначе
			
			Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/resend", СтрокаПередачи);
			СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова.";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				ИначеЕсли Не СтруктураОтвета.status = "success" Тогда
					СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Отпрвляет запрос на изменение email'а и отправку на него кодового слова.
//
Процедура ИзменитьEmailИОтправитьКодовоеСловоПовторно(НовыйEmail, СведенияОбОшибке) Экспорт
	
	СтрокаПередачи = СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail(НовыйEmail);
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось изменить адрес электронной почты: возможно, нет подключения к сети Интернет.";
		Иначе
			
			Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/resend", СтрокаПередачи);
			СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "success" Тогда
					СтруктураПараметровДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
					СтруктураПараметровДоступа.Email = НовыйEmail;
					УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
					
				ИначеЕсли СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось изменить адрес электронной почты";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				Иначе
					СведенияОбОшибке = "Не удалось изменить адрес электронной почты: исключительная ошибка.";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет верификацию аккаунта.
//
Функция ПровестиВерификациюАккаунта(СтруктураВерификации, СведенияОбОшибке) Экспорт
	
	ВерификацияПрошлаУспешно = Ложь;
	
	СтрокаПередачи = СформироватьСтрокуПередачиПараметровДоступаВерификация(СтруктураВерификации);
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось подтвердить учетную запись: возможно, нет подключения к сети Интернет.";
		Иначе
			
			Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/verification", СтрокаПередачи);
			СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "success" Тогда
					СтруктураПараметровДоступа = Новый Структура("Логин, Пароль, Email", СтруктураВерификации.Логин, СтруктураВерификации.Пароль, СтруктураВерификации.Email);
					УПЖКХ_ВзаимодействиеССервисамиРарус.УстановитьПараметрыДоступаБазыКСервисамРарус(СтруктураПараметровДоступа);
					ВерификацияПрошлаУспешно = Истина;
					
				ИначеЕсли СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось подтвердить учетную запись.";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				Иначе
					СведенияОбОшибке = "Не удалось подтвердить учетную запись: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось подтвердить учетную запись: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерификацияПрошлаУспешно;
	
КонецФункции

// Отправляет кодовое слово на сервис.
//
Функция ОтправитьКодовоеСловоНаСервер(КодовоеСлово, СведенияОбОшибке) Экспорт
	
	РегистрацияПрошлаУспешно = Ложь;
	
	СтрокаПередачи = СформироватьСтрокуПередачиКодовогоСлова(КодовоеСлово);
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: возможно, нет подключения к сети Интернет.";
		Иначе
			
			Ответ           = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/checkpin", СтрокаПередачи);
			СтруктураОтвета = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "success" Тогда
					РегистрацияПрошлаУспешно = Истина;
					
				ИначеЕсли СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи.";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				Иначе
					СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РегистрацияПрошлаУспешно;
	
КонецФункции

// Отправляет параметры доступа на сервис.
//
Функция ПолучитьТокенДляРаботыССервисом(СведенияОбОшибке) Экспорт
	
	Токен = "";
	
	СтрокаПередачи = СформироватьСтрокуДляПолученияТокена();
	
	Если Не ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке) Тогда
		мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: возможно, нет подключения к сети Интернет.";
		Иначе
			
			Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/token", СтрокаПередачи);
			СтруктураОтвета = ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
			
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "success" И СтруктураОтвета.Свойство("token") И Не ПустаяСтрока(СтруктураОтвета.token) Тогда
					Токен = СтруктураОтвета.token;
					
				ИначеЕсли СтруктураОтвета.Свойство("errors") Тогда
					СведенияОбОшибке = "Не удалось получить токен для работы с сервисом.";
					ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					
				Иначе
					СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТокенДляСоединенияССервисамиРарус(Токен);
	
	Если Не ПустаяСтрока(СведенияОбОшибке) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СведенияОбОшибке);
	КонецЕсли;
	
	Возврат Токен;
	
КонецФункции

// Выполняет получение сведений о подписке.
Функция ПолучитьСведенияОПодписке(СведенияОбОшибке = "") Экспорт
	
	СведенияОПодписке = Новый Структура("УдалосьПолучитьСведенияОПодписке, ПодпискаОформлена, СрокОкончанияДействияПодписки, ТипЛицензии", Ложь, Ложь, Дата(1, 1, 1, 0, 0, 0), "");
	
	// Проверяем есть ли у пользователя токен.
	Токен = ТокенДляСоединенияССервисамиРарус();
	Если ПустаяСтрока(Токен) Тогда
		Токен = ПолучитьТокенДляРаботыССервисом(СведенияОбОшибке);
		Если ПустаяСтрока(Токен) Тогда
			Возврат СведенияОПодписке;
		КонецЕсли;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
	
	Если мHTTPСоединение = Неопределено Тогда
		СведенияОбОшибке = "Не удалось получить сведения о подписке: возможно, нет подключения к сети Интернет.";
	Иначе
		
		СтрокаПередачи = СформироватьСтрокуДляПолученияСведенийОПодписке(Токен);
		
		Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/data/license", СтрокаПередачи);
		СтруктураОтвета = ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
		
		// Если токен неактуален, отправляем запрос на получение нового токена и после этого - запрос на получение сведений по счетчикам.
		Если ТокенПользователяНеактуален(СтруктураОтвета) Тогда
			Токен = ПолучитьТокенДляРаботыССервисом(СведенияОбОшибке);
			Возврат ПолучитьСведенияОПодписке(СведенияОбОшибке);
			
		Иначе
			Если СтруктураОтвета.Свойство("status") И СтруктураОтвета.Свойство("IsSubscribed") И СтруктураОтвета.Свойство("IsSubscriptionActive") И СтруктураОтвета.Свойство("SubscriptionEndDate")
			 И СтруктураОтвета.Свойство("LicenseType") Тогда
				Если СтруктураОтвета.status = "success" Тогда
					СведенияОПодписке.УдалосьПолучитьСведенияОПодписке = Истина;
					Если СтруктураОтвета.IsSubscribed = "Y" И СтруктураОтвета.IsSubscriptionActive = "Y" Тогда
						СведенияОПодписке.ПодпискаОформлена             = Истина;
						СведенияОПодписке.СрокОкончанияДействияПодписки = XMLЗначение(Тип("Дата"), СтруктураОтвета.SubscriptionEndDate);
						СведенияОПодписке.ТипЛицензии                   = СтруктураОтвета.LicenseType;
					КонецЕсли;
					
				ИначеЕсли СтруктураОтвета.status = "fail" Тогда
					СведенияОбОшибке = "Не удалось получить сведения о подписке.";
					Если СтруктураОтвета.Свойство("errors") Тогда
						ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось получить сведения о подписке: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СведенияОПодписке;
	
КонецФункции

&НаСервере
// Отправляет запрос на отправку сведений о параметрах доступа на почту, указанную при регистрации.
//
Функция ОтправитьПарольНаПочту() Экспорт
	
	// 1. Устанавливаем значения выходных данных по умолчанию.
	СообщениеПользователю = "Не удалось установить соединение с сервисом: исключительная ошибка.";
	
	// 2. Отправляем запрос на отправку параметров доступа на почту.
	ПараметрыДоступа = ПараметрыДоступаБазыКСервисамРарус();
	мHTTPСоединение  = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьHTTPСоединение();
	Ответ            = "";
	
	Попытка
		ТекстЗапроса   = "api/clients/remind_account";
		СтрокаПередачи = СтрШаблон("&login=%1&email=%2&pass=%3", ПараметрыДоступа.Логин, ПараметрыДоступа.Email, ПараметрыДоступа.Пароль);
		Ответ          = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, ТекстЗапроса, СтрокаПередачи);
	Исключение
		СообщениеПользователю = "Не удалось установить соединение с сервисом. Пожалуйста, проверьте соединение с сетью Интернет.";
	КонецПопытки;
	
	// 3. Обрабатываем ответ.
	СтруктураОтвета = ПрочитатьJsonИзОтветаСервера(Ответ);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
		Если СтруктураОтвета.success = Истина И СтруктураОтвета.Свойство("data") И ТипЗнч(СтруктураОтвета.data) = Тип("Структура")
		   И СтруктураОтвета.data.Свойство("result") И СтруктураОтвета.data.result = 1 Тогда
			СообщениеПользователю = "На вашу почту отправлено письмо с параметрами доступа.";
		ИначеЕсли СтруктураОтвета.success = Ложь И СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура")
				И СтруктураОтвета.error.Свойство("code") И СтруктураОтвета.error.code = "100" Тогда
			СообщениеПользователю = "Пользователь не найден на сервисе.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СообщениеПользователю;
	
КонецФункции

// Функция отправки стандартных POST-запросов на сервис.
//
Функция ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, ТекстЗапроса, ТелоЗапроса) Экспорт
	
	Возврат УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ОтправитьPOSTЗапрос(мHTTPСоединение, ПолучитьЗаголовкиДляHTTPЗапроса(мHTTPСоединение), ТекстЗапроса, ТелоЗапроса, КодировкаТекста.UTF8);
	
КонецФункции

// Отправляет запрос на сервис и забирает сведения по счетчикам.
Процедура ПолучитьДанныеССервисаПроизводителейСчетчиков(СтрокаОрганизации, ОписаниеПроблемы, НазваниеСистемы) Экспорт
	
	СведенияОбОшибке = "";
	
	// Проверяем есть ли у пользователя токен.
	Токен = ТокенДляСоединенияССервисамиРарус();
	Если ПустаяСтрока(Токен) Тогда
		Токен = ПолучитьТокенДляРаботыССервисом(СведенияОбОшибке);
		Если ПустаяСтрока(Токен) Тогда
			СтрокаОрганизации.НеУдалосьПолучитьДанные = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мHTTPСоединение = ПолучитьHTTPСоединениеССервисомОбменаСведенийПУ();
	
	Если мHTTPСоединение = Неопределено Тогда
		СведенияОбОшибке = "Не удалось получить данные с сервиса по организации " + СтрокаОрганизации.НаименованиеОрганизации + ": возможно, нет подключения к сети Интернет.";
	Иначе
		КоличествоЛицевыхСчетовВБД = УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьКоличествоЛицевыхСчетовВБазеДанных();
		
		СтрокаПередачи = СформироватьСтрокуДляПолученияСведенийОтПроизводителейСчетчиков(Токен, СтрокаОрганизации.ИНН, НазваниеСистемы, КоличествоЛицевыхСчетовВБД);
		
		Ответ           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/data/meters", СтрокаПередачи);
		СтруктураОтвета = ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ);
		
		// Если токен неактуален, отправляем запрос на получение нового токена.
		Если ТокенПользователяНеактуален(СтруктураОтвета) Тогда
			Токен = ПолучитьТокенДляРаботыССервисом(СведенияОбОшибке);
			ПолучитьДанныеССервисаПроизводителейСчетчиков(СтрокаОрганизации, ОписаниеПроблемы, НазваниеСистемы);
			
		Иначе
			ВременныйФайлДляСохраненияВЖурнале = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.СформироватьТекстовыйФайл(Ответ);
			СтрокаОрганизации.ФайлОбмена       = ВременныйФайлДляСохраненияВЖурнале;
			
			СтрокаОрганизации.СтруктураСведений = СтруктураОтвета;
			
			Если СтруктураОтвета.Свойство("status") Тогда
				Если СтруктураОтвета.status = "someproblems" Тогда
					СведенияОбОшибке = "Обмен по организации " + СтрокаОрганизации.НаименованиеОрганизации + " выполнен, но есть некоторые проблемы, на которые следует обратить внимание.";
					Если СтруктураОтвета.Свойство("errors") Тогда
						ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					КонецЕсли;
					
				ИначеЕсли СтруктураОтвета.status = "fail" Тогда
					СтрокаОрганизации.НеУдалосьПолучитьДанные = Истина;
					Если СтруктураОтвета.Свойство("errors") Тогда
						ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, СтруктураОтвета.errors);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				СтрокаОрганизации.НеУдалосьПолучитьДанные = Истина;
				СведенияОбОшибке = "Не удалось получить данные с сервиса по организации " + СтрокаОрганизации.НаименованиеОрганизации + ": исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СведенияОбОшибке) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СведенияОбОшибке);
	КонецЕсли;
	
	// Если не удалось выполнить обмен, надо записать соответствующую информацию в журнал обмена.
	Если СтрокаОрганизации.НеУдалосьПолучитьДанные Тогда
		ОписаниеПроблемы = СведенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

// Проверяет ответ от сервиса на наличие кода ответа "104", который символизирует то, что токен пользователя неактуален.
Функция ТокенПользователяНеактуален(СтруктураОтвета)
	
	Возврат ?(СтруктураОтвета.Свойство("code") И СтруктураОтвета.code = "104", Истина, Ложь);
	
КонецФункции

// Записывает в переменную текстовое описание ошибок, которые пришли с сервиса.
Процедура ОбработатьОписаниеОшибокПолученныхОтСервиса(СведенияОбОшибке, МассивОшибок)
	
	Для Каждого ОписаниеОшибки Из МассивОшибок Цикл
		Если Не СтрНайти(ОписаниеОшибки, "Код ошибки:") = 0 Тогда
			// Ошибки вида "Код ошибки: 115" предназначены для разработчиков. Не выводим их пользователю.
			Продолжить;
		КонецЕсли;
		СведенияОбОшибке = СведенияОбОшибке + ?(ПустаяСтрока(СведенияОбОшибке), "", Символы.ПС) + ОписаниеОшибки;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет строку передачи на отсутствие параметров доступа.
Функция ВСтрокеПередачиНетПараметровДоступа(СтрокаПередачи, СведенияОбОшибке)
	
	Если СтрокаПередачи = "" Тогда
		СведенияОбОшибке = "Не обнаружены параметры доступа. Пожалуйста, пройдите регистрацию повторно.";
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Формирует структуру с объектами для регистрации.
Функция ПодготовитьСтруктуруРегистрации(Логин, Пароль, Email, Телефон = "") Экспорт
	
	СтруктураРегистрации = Новый Структура;
	СтруктураРегистрации.Вставить("Логин",           Логин);
	СтруктураРегистрации.Вставить("Пароль",          Пароль);
	СтруктураРегистрации.Вставить("Email",           Email);
	СтруктураРегистрации.Вставить("ИспользоватьSSL", Ложь);
	
	Если НЕ Телефон = Неопределено И НЕ Телефон = "" Тогда
		СтруктураРегистрации.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	Возврат СтруктураРегистрации;
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на передачу параметров доступа.
//
Функция СформироватьСтрокуПередачиПараметровДоступа(СтруктураРегистрации) Экспорт
	
	ДополнитьСтруктуруСтатистическимиДанными(СтруктураРегистрации);
	
	СтруктураЗаписейИнфо = Новый Структура("config_name, config_version, platform_version, company_number, edition",
								СтруктураРегистрации.НаименованиеКонфигурации, СтруктураРегистрации.ВерсияКонфигурации, СтруктураРегистрации.ВерсияПлатформы,
								СтруктураРегистрации.КолВоОрганизаций, СтруктураРегистрации.ПоставкаКонфигурации);
	
	ЗаписьJsonИнфо = Новый ЗаписьJSON;
	ЗаписьJsonИнфо.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJsonИнфо, СтруктураЗаписейИнфо);
	СтрокаМассиваИнфо = ЗаписьJsonИнфо.Закрыть();
	
	ИмяФайла     = ПолучитьИмяВременногоФайла();
	ФайлОтправки = Новый ТекстовыйДокумент();
	ФайлОтправки.УстановитьТипФайла(КодировкаТекста.UTF8);
	ФайлОтправки.УстановитьТекст(СтрокаМассиваИнфо);
	ФайлОтправки.Записать(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС);
	
	Двоичные     = Новый ДвоичныеДанные(ИмяФайла);
	СтрокаBase64 = Base64Строка(Двоичные);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "/", "_");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "+", "-");
	
	Пока Прав(СтрокаBase64, 1) = "=" Цикл
		СтрокаBase64 = Сред(СтрокаBase64, 1, СтрДлина(СтрокаBase64) - 1);
	КонецЦикла;
	
	СтрокаПередачи = "&login=" + СтруктураРегистрации.Логин + "&pass=" + СтруктураРегистрации.Пароль + "&email=" + СтруктураРегистрации.Email +
					 ?(СтруктураРегистрации.Свойство("Телефон"), "&phone=" + СтруктураРегистрации.Телефон, "") + "&info=" + СтрокаBase64;
	
	Возврат СтрокаПередачи;
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на повторную отправку кодового слова на email.
//
Функция СформироватьСтрокуПовторнойОтправкиКодовогоСловаНаEmail(НовыйEmail = "") Экспорт
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Логин") Тогда
		Возврат "&login=" + ПараметрыДоступа.Логин + ?(НовыйEmail = "", "", "&email=" + НовыйEmail);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на верификацию аккаунта.
//
Функция СформироватьСтрокуПередачиПараметровДоступаВерификация(СтруктураВерификации) Экспорт
	
	СтрокаПередачи = "&login=" + СтруктураВерификации.Логин + "&pass=" + СтруктураВерификации.Пароль + "&email=" + СтруктураВерификации.Email;
	
	Возврат СтрокаПередачи;
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на передачу кодового слова.
//
Функция СформироватьСтрокуПередачиКодовогоСлова(КодовоеСлово) Экспорт
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Логин") Тогда
		Возврат "&login=" + ПараметрыДоступа.Логин + "&pin=" + КодовоеСлово;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса для получения токена.
Функция СформироватьСтрокуДляПолученияТокена()
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Логин") И ПараметрыДоступа.Свойство("Пароль") Тогда
		Возврат "&login=" + ПараметрыДоступа.Логин + "&pass=" + ПараметрыДоступа.Пароль;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса для получения сведений о подписке.
Функция СформироватьСтрокуДляПолученияСведенийОПодписке(Токен)
	
	Возврат "&token=" + Токен;
	
КонецФункции

// Дополняет структуру данных статистическими показателями.
Процедура ДополнитьСтруктуруСтатистическимиДанными(СтруктураДанных) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КолВоОрганизаций
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КолВоОрганизаций = Выборка.КолВоОрганизаций;
	Иначе
		КолВоОрганизаций = 0;
	КонецЕсли;
	
	СтруктураДанных.Вставить("НаименованиеКонфигурации", Метаданные.Имя);
	СтруктураДанных.Вставить("ВерсияКонфигурации",       Метаданные.Версия);
	СтруктураДанных.Вставить("ВерсияПлатформы",          СистемнаяИнформация.ВерсияПриложения);
	СтруктураДанных.Вставить("КолВоОрганизаций",         КолВоОрганизаций);
	СтруктураДанных.Вставить("ПоставкаКонфигурации",     ?(Найти(Метаданные.Имя, "ПРОФ") > 0, "проф", "базовая"));
	
КонецПроцедуры

// Считывает значение из JSON-ответа и возвращает значение.
Функция ПрочитатьJsonИзОтветаСервера(Ответ) Экспорт
	
	ПозицияНачалаТекстаJSON = СтрНайти(Ответ, "{""success"":");
	
	Если ПозицияНачалаТекстаJSON = 0 Тогда
		Возврат "";
	Иначе
		ТекстJSON = Прав(Ответ, СтрДлина(Ответ) - ПозицияНачалаТекстаJSON + 1);
	КонецЕсли;
	
	ЧтениеJson = Новый ЧтениеJSON;
	ЧтениеJson.УстановитьСтроку(ТекстJSON);
	ПрочитанноеЗначение = ПрочитатьJSON(ЧтениеJson);
	ЧтениеJson.Закрыть();
	
	Возврат ПрочитанноеЗначение;
	
КонецФункции

// Считывает значение из JSON-ответа и возвращает значение.
//
Функция ПолучитьСтруктуруОтветаОтВебСервера1С(Ответ) Экспорт
	
	СтруктураСведений = Новый Структура;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		
		СтруктураСведений = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат СтруктураСведений;
	
КонецФункции

// Функция для подготовки HTTP-заголовков для стандартных запросов на сервис.
Функция ПолучитьЗаголовкиДляHTTPЗапроса(мHTTPСоединение) Экспорт
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Host",         мHTTPСоединение.Сервер);
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	Возврат ЗаголовкиHTTP;
	
КонецФункции

// Подготавливает форматированный документ с нашими контактными данными.
Функция ПолучитьФорматированныйДокументСНашимиКонтактнымиДанными() Экспорт
	
	КонтактнаяИнформацияДокумент = Новый ФорматированныйДокумент;
	
	КонтактнаяИнформацияДокумент.УстановитьФорматированнуюСтроку(Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("                       - Телефон: " + УПЖКХ_ИнформацияОРазработчикеИПрограмме.НомерТелефонаДляМосквыИМосковскойОбласти()
																+ ", " + УПЖКХ_ИнформацияОРазработчикеИПрограмме.НомерТелефонаДляРегионов() + Символы.ПС
																													   + "                       - E-mail: ", Новый Шрифт(, 10)),
																Новый ФорматированнаяСтрока(УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресТехническойПоддержки(),Новый Шрифт(, 10),,,"mailto:" + УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресТехническойПоддержки()),
																Новый ФорматированнаяСтрока(Символы.ПС + "                       - Skype: " + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыSkypeДляОбратнойСвязи() + Символы.ПС
																									   + "                       - WhatsApp, Viber и Telegram: " + УПЖКХ_ИнформацияОРазработчикеИПрограмме.НомерТелефонаДляWhatsAppViberTelegram(),Новый Шрифт(, 10))));
	Возврат КонтактнаяИнформацияДокумент;
	
КонецФункции

// Получает адрес страницы с пользовательстким соглашением.
Функция ПолучитьАдресСтраницыСУсловиямиПользованияСервисами() Экспорт
	
	Возврат "https://vgkh.ru/polzovatelskoe-soglashenie-servisy-integracii/?lite=Y";
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса для получения сведений по счетчикам Саурес.
Функция СформироватьСтрокуДляПолученияСведенийОтПроизводителейСчетчиков(Токен, ИННОрганизации, НазваниеСистемы, КоличествоЛицевыхСчетовВБД)
	
	Возврат "&token=" + Токен + "&system=" + НазваниеСистемы + "&inn=" + ИННОрганизации + "&accounts=" + КоличествоЛицевыхСчетовВБД;
	
КонецФункции

#КонецОбласти