
#Область ОбработчикиОбновленияБиблиотекиСМС

// Процедура заполняет регистр накопления "Статистика отправки сообщений" по данным документа "СМС сообщение".
//
Процедура ЗаполнитьРегистрНакопления_смсСтатистикаОтправкиСообщений_1_0_2_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	смсСообщение.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ врДокументыОтправки
	|ИЗ
	|	Документ.смсСообщение КАК смсСообщение
	|ГДЕ
	|	(смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьНаСервисе)
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.Отправлено)
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьДоставлено)
	// Квартплата +
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьДоставленоЖКХ))
	// Квартплата -
	|	И НЕ смсСообщение.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	смсСтатистикаОтправкиСообщений.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ врСтатистикаОтправки
	|ИЗ
	|	РегистрНакопления.смсСтатистикаОтправкиСообщений КАК смсСтатистикаОтправкиСообщений
	|
	|СГРУППИРОВАТЬ ПО
	|	смсСтатистикаОтправкиСообщений.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДокументыОтправки.Ссылка КАК Ссылка,
	|	врСтатистикаОтправки.Регистратор КАК Регистратор
	|ИЗ
	|	врДокументыОтправки КАК врДокументыОтправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСтатистикаОтправки КАК врСтатистикаОтправки
	|		ПО врДокументыОтправки.Ссылка = врСтатистикаОтправки.Регистратор
	|ГДЕ
	|	врСтатистикаОтправки.Регистратор ЕСТЬ NULL";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		смсСервер.смсПриЗаписиДокументаОтправкиСообщенийПриЗаписи(ДокументОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Выполняет переход со старого механизма отбора получателей на использование СКД путём переноса имеющихся настроек
// отбора в настройки отбора компоновщика настроек.
Процедура ЗаполнитьОтборКомпоновщикаНастроекСМСВСправочникеПравилаОтбораПолучателейИДокументеСообщение_1_0_2_9() Экспорт
	
	// 1. Обработка элементов справочника смсПравилаОтбораПолучателей.
	
	// Получаем список элементов справочника смсПравилаОтбораПолучателей, не являющихся группой,
	// и для которых указано поле отбора (Наименование отбора).
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	смсПравилаОтбораПолучателей.Ссылка КАК Ссылка,
	|	смсПравилаОтбораПолучателей.УдалитьНаименованиеПараметра КАК НаименованиеПараметра,
	|	смсПравилаОтбораПолучателей.УдалитьВидСравнения КАК ВидСравнения,
	|	смсПравилаОтбораПолучателей.УдалитьЗначение КАК Значение
	|ИЗ
	|	Справочник.смсПравилаОтбораПолучателей КАК смсПравилаОтбораПолучателей
	|ГДЕ
	|	НЕ смсПравилаОтбораПолучателей.ЭтоГруппа
	|	И НЕ (ВЫРАЗИТЬ(смсПравилаОтбораПолучателей.УдалитьНаименованиеПараметра КАК СТРОКА(1))) = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Получим схему компоновки данных, используемую в новом механизме отбора.
	СхемаПравилаОтбора = Справочники.смсПравилаОтбораПолучателей.ПолучитьМакет("СхемаПравилОтбораПереопределяемый");
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НастройкиКомпоновкиОбъекта = СправочникОбъект.КомпоновщикНастроек.Получить();
		
		Если ЗначениеЗаполнено(НастройкиКомпоновкиОбъекта) И НастройкиКомпоновкиОбъекта.Отбор.Элементы.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОтбора));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаПравилаОтбора.НастройкиПоУмолчанию);
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		
		ПеренестиКритерииОтбораПолучателейВКоллекциюЭлементовОтбораКомпоновкиДанных(Выборка, НастройкиКомпоновкиДанных);
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		СправочникОбъект.КомпоновщикНастроек = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		// Если какие-то элементы не удалось обработать, то обновление не будет завершено успешно.
		Если Не ЗаписатьОбъект(СправочникОбъект) Тогда
			ВызватьИсключение "Обработчик обновления ""ЗаполнитьОтборКомпоновщикаНастроекСМСВСправочникеПравилаОтбораПолучателейИДокументеСообщение_1_0_2_9"" не выполнен или выполнен с ошибками!";
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Обработка документов смсСообщение.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	смсСообщениеУдалитьПравилаОтбора.Ссылка КАК Ссылка,
	|	смсСообщениеУдалитьПравилаОтбора.УдалитьНаименованиеПараметра КАК НаименованиеПараметра,
	|	смсСообщениеУдалитьПравилаОтбора.УдалитьВидСравнения КАК ВидСравнения,
	|	смсСообщениеУдалитьПравилаОтбора.УдалитьЗначение КАК Значение
	|ИЗ
	|	Документ.смсСообщение.УдалитьПравилаОтбора КАК смсСообщениеУдалитьПравилаОтбора
	|ГДЕ
	|	смсСообщениеУдалитьПравилаОтбора.УдалитьИспользование
	|	И НЕ (ВЫРАЗИТЬ(смсСообщениеУдалитьПравилаОтбора.УдалитьНаименованиеПараметра КАК СТРОКА(1))) = """"
	|ИТОГИ ПО
	|	Ссылка";
	ВыборкаПоСсылке = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСсылке.Следующий() Цикл
		
		ДокументОбъект = ВыборкаПоСсылке.Ссылка.ПолучитьОбъект();
		НастройкиКомпоновкиОбъекта = ДокументОбъект.КомпоновщикНастроек.Получить();
		
		Если ЗначениеЗаполнено(НастройкиКомпоновкиОбъекта) И НастройкиКомпоновкиОбъекта.Отбор.Элементы.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обход табличной части документа.
		Выборка = ВыборкаПоСсылке.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОтбора));
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаПравилаОтбора.НастройкиПоУмолчанию);
		
		НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
		
		Пока Выборка.Следующий() Цикл
			
			ПеренестиКритерииОтбораПолучателейВКоллекциюЭлементовОтбораКомпоновкиДанных(Выборка, НастройкиКомпоновкиДанных);
			
		КонецЦикла;
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
		
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		
		ДокументОбъект.КомпоновщикНастроек = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		// Если какие-то элементы не удалось обработать, то обновление не будет завершено успешно.
		Если Не ЗаписатьОбъект(ДокументОбъект) Тогда
			ВызватьИсключение "Обработчик обновления ""ЗаполнитьОтборКомпоновщикаНастроекСМСВСправочникеПравилаОтбораПолучателейИДокументеСообщение_1_0_2_9"" не выполнен или выполнен с ошибками!";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет статусы всех текущих документов, со статуса "Проверено" на "Редактирование",
// со статусов "На сервисе" и "Доставлено" на "Отправлено".
Процедура ИзменитьСтатусыДокументовВДокументеСМССообщение_1_0_2_11() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	смсСообщение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.смсСообщение КАК смсСообщение
	|ГДЕ
	|	(смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьПроверено)
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьНаСервисе)
	// Квартплата +
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.УдалитьДоставленоЖКХ)
	// Квартплата -
	|			ИЛИ смсСообщение.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.смсСтатусДокументаСообщение.ПустаяСсылка))";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Если ДокументОбъект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.УдалитьНаСервисе
		 // Квартплата +
		 ИЛИ ДокументОбъект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.УдалитьДоставленоЖКХ
		 // Квартплата -
		 ИЛИ ДокументОбъект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.УдалитьДоставлено Тогда
			
			ДокументОбъект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.Отправлено;
		Иначе
			ДокументОбъект.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.ВРедакции;
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Если Не ЗаписатьОбъект(ДокументОбъект) Тогда
			ВызватьИсключение "Обработчик обновления ""ИзменитьСтатусыДокументовВДокументеСМССообщение_1_0_2_11"" не выполнен или выполнен с ошибками!";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Пытается записать обработанный объект.
// В случае, если записать не удалось, производит добавление сообщения пользователю с его записью в журнал регистрации.
//
// Параметры
//  Объект   - объект, который нужно записать.
//  Параметр - параметр записи.
//
// Возвращаемое значение:
//  Булево - удалось ли произвести запись.
//
Функция ЗаписатьОбъект(Объект, Параметр = Неопределено) Экспорт
	
	Записан = Ложь;
	
	Попытка
		Если Параметр = Неопределено Тогда
			Объект.Записать();
		Иначе
			Объект.Записать(Параметр);
		КонецЕсли;
		Записан = Истина;
	Исключение
		
	КонецПопытки;
	
	Возврат Записан;
	
КонецФункции

// Выполняет заполнение коллекции элементов отбора настроек компоновки данных критериями отбора,
// ранее использовавшимися для отбора получателей.
//
// Параметры
//  Выборка                   - ВыборкаИзРезультатаЗапроса - выборка из результатов запроса,
//                              содержащая параметры критериев отбора получателей.
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - насттройки компоновки данных,
//                              в свойство Отбор которых необходимо добавить новые элементы.
//
Процедура ПеренестиКритерииОтбораПолучателейВКоллекциюЭлементовОтбораКомпоновкиДанных(Выборка, НастройкиКомпоновкиДанных)
	
	// Установим отбор в настройках компоновки данных.
	НовыйОтбор               = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.Использование = Истина;
	
	// Для заполнения отбора необходимо указывать левое значение отбора.
	НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Выборка.НаименованиеПараметра);
	
	// Определение вида сравнения основывается на сопоставлении используемого в устаревшем механизме вида сравнения,
	// хранящегося в перечислениии УдалитьсмсВидСравнения с соответствующим Видом сравнения компоновки данных.
	
	// Если значение является группой, тогда в качестве вида сравнения нужно использовать не Равно, а ВИерархии.
	// Для определения, является ли объект группой, необходимо в конфигурациях использовать типовые методы
	// ЗначениеСсылочногоТипа(Выборка.Ссылка), ОбъектЯвляетсяГруппой(Выборка.Ссылка).
	ЗначениеОтбораЯвляетсяГруппой = Ложь;
	
	Если смсТиповыеМетодыСервер.ЗначениеСсылочногоТипа(Выборка.Значение)
		И смсТиповыеМетодыСервер.ОбъектЯвляетсяГруппой(Выборка.Значение) Тогда
		
		ЗначениеОтбораЯвляетсяГруппой = Истина;
		
	КонецЕсли;
	
	Если Выборка.ВидСравнения = Перечисления.УдалитьсмсВидСравнения.Равно Тогда
		Если ЗначениеОтбораЯвляетсяГруппой Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	ИначеЕсли Выборка.ВидСравнения = Перечисления.УдалитьсмсВидСравнения.НеРавно Тогда
		Если ЗначениеОтбораЯвляетсяГруппой Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		КонецЕсли;
	ИначеЕсли Выборка.ВидСравнения = Перечисления.УдалитьсмсВидСравнения.Больше Тогда
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли Выборка.ВидСравнения = Перечисления.УдалитьсмсВидСравнения.Меньше Тогда
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	КонецЕсли;
	
	НовыйОтбор.ПравоеЗначение = Выборка.Значение;
	
КонецПроцедуры // ПеренестиКритерииОтбораПолучателейВКоллекциюЭлементовОтбораКомпоновкиДанных()

#КонецОбласти