// Общие процедуры и функции; глобальный модуль.
// Изменения в модуле запрещены, текст включается.

#Область ПроцедурыИФункцииПолученияДанных

//// Функция возвращает ссылку на текущего пользователя базы данных,
//// установленного по учетной записи пользователя конфигурации.
////
//// Возвращаемое значение:
////  СправочникСсылка.Пользователи - пользователь текущего сеанса.
//
//Функция ТекущийПользователь() Экспорт
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	Возврат ПараметрыСеанса.ТекущийПользователь;
//	
//КонецФункции // ТекущийПользователь()

// Функция пытается получить значение переменной из кэша.
//
// Параметры:
//  ИмяПараметра - Строка - наименование переменной.
//  Значение     - переменная, куда будет передано найденное значение.
//
// Возвращаемое значение:
//  Булево - удалось ли получить.
//
Функция КВП_ПолучитьПеременнуюИзКэша(ИмяПараметра, Значение) Экспорт
	
	Значение = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(ИмяПараметра);
	
	Возврат Не (Значение = Неопределено);
	
КонецФункции // КВП_ПолучитьПеременнуюИзКэша()

// Функция записывает значение переменной в кэш.
//
// Параметры:
//  ИмяПараметра - Строка - наименование переменной.
//  Значение     - переменная, куда будет передано найденное значение.
//
Процедура КВП_ЗаписатьПеременнуюВКэш(ИмяПараметра, Значение) Экспорт
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяПараметра, , Значение);
	
КонецПроцедуры // КВП_ЗаписатьПеременнуюВКэш()

// Предназначена для получения пустого значения заданного типа: примитивного
// или ссылочного.
//
// Параметры:
//  ЗаданныйТип - тип, пустое значение которого нужно получить.
//
// Возвращаемое значение:
//  Пустое значение указанного типа.
//
Функция КВП_ПустоеЗначениеТипа(ЗаданныйТип) Экспорт
	
	Если ЗаданныйТип = Тип("Число") Тогда
		Возврат 0;
		
	ИначеЕсли ЗаданныйТип = Тип("Строка") Тогда
		Возврат "";
		
	ИначеЕсли ЗаданныйТип = Тип("Дата") Тогда
		Возврат '00010101000000';
		
	ИначеЕсли ЗаданныйТип = Тип("Булево") Тогда
		Возврат Ложь;
		
	ИначеЕсли ЗаданныйТип = Тип("ХранилищеЗначения") Тогда
		Возврат Новый ХранилищеЗначения(Неопределено);
		
	Иначе
		Возврат Новый (ЗаданныйТип);
		
	КонецЕсли;
	
КонецФункции // ПустоеЗначениеТипа();

// Функция возвращает количество собственников по указанному помещению.
//
// Параметры
//  Помещение   – <СправочникСсылка.УПЖКХ_Помещения>  - указанное помещение.
//  Период      – <Дата>                              - дата среза.
//  ЛицевойСчет - <СправочникСсылка.КВП_ЛицевыеСчета> - текущий лицевой счет.
//
// Возвращаемое значение:
//  Число – количество собственников.
//
Функция ПолучитьКоличествоСобственников(Помещение, Период, ЛицевойСчет) Экспорт
	
	// Независимо от того какой вариант учета собственников (упрощенный или нет) установлен 
	// в настройках параметров учета ЖКХ, данные о кол-ве собственников берутся 
	// из РС "УПЖКХ_СобственникиПомещений".
	
	// В зависимости от того, сколько л/с привязано к текущему помещению зависит алгоритм
	// подсчета кол-ва собственников. Если л/с один, то считаем кол-во собственников помещения.
	// Если л/с более одного, то считаем кол-во собственников для текущего л/с среди физ. лиц и контрагентов.
	// Подсчет кол-ва собственников среди физ. лиц происходит следующим образом:
	// - Отбираем всех физ. лиц, которые являются жильцами-собственниками текущего л/с.
	// Подсчет кол-ва собственников среди контрагентов реализован следующим образом:
	// - Отбирается контрагент, который является собственником-нанимателем лицевого счета.
	//   Если данный контрагент является собственником текущего л/с, то считаем его за собственника.
	//   Т.е. на данный момент, если контрагент не является собственником-нанимателем л/с, то его не считаем.
	
	// Получение кол-ва л/с, закрепленных за текущим помещением.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",    Период);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	КолЛСнаПомещении = Запрос.Выполнить().Выбрать().Количество();
	
	// Получение кол-ва собственников.
	Если КолЛСнаПомещении = 1 Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственники
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
		|ГДЕ
		|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
		
	ИначеЕсли КолЛСнаПомещении > 1 Тогда
		
		// Подсчет кол-ва собственников (кол. собственников физ. лиц + кол. собственников контрагентов).
		
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ врФизЛицаПоТекущемуЛС
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтветственныйСобственникНанимательЛС.ОтветственныйВладелец КАК Контрагент
		|ПОМЕСТИТЬ врКонтрагенты
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета КАК ОтветственныйСобственникНанимательЛС
		|ГДЕ
		|	ОтветственныйСобственникНанимательЛС.ЛицевойСчет = &ЛицевойСчет
		|	И ОтветственныйСобственникНанимательЛС.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врФизЛицаПоТекущемуЛС.ФизЛицо КАК Собственник
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК СобственникиПомещений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врФизЛицаПоТекущемуЛС КАК врФизЛицаПоТекущемуЛС
		|		ПО СобственникиПомещений.Собственник = врФизЛицаПоТекущемуЛС.ФизЛицо
		|ГДЕ
		|	СобственникиПомещений.Действует
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СобственникиПомещений.Собственник
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК СобственникиПомещений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врКонтрагенты КАК врКонтрагенты
		|		ПО СобственникиПомещений.Собственник = врКонтрагенты.Контрагент
		|ГДЕ
		|	СобственникиПомещений.Действует";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции // ПолучитьКоличествоСобственников()

// Функция возвращает количество льготников по указанному лицевому счету.
//
// Параметры
//  ЛицевойСчет – <СправочникСсылка.КВП_ЛицевыеСчета> - указываемый лицевой счет.
//  Период      – <Дата>                              - дата среза.
//
// Возвращаемое значение:
//  Число – количество льготников.
//
Функция ПолучитьКоличествоЛьготников(ЛицевойСчет, 
									 Период = Неопределено,
									 Знач ПараметрыОтбораПоЛьготникам = Неопределено) Экспорт
	
	ОтборЛьготниковПоВидуЖильцов    = Неопределено;
	ОтборЛьготниковСредиПолучателей = Неопределено;
	
	Если ТипЗнч(ПараметрыОтбораПоЛьготникам) = Тип("Структура") Тогда
		ПараметрыОтбораПоЛьготникам.Свойство("ОтборПоВидуЖильцов",          ОтборЛьготниковПоВидуЖильцов);
		ПараметрыОтбораПоЛьготникам.Свойство("ОтборСредиПолучателейЛьготы", ОтборЛьготниковСредиПолучателей);
	КонецЕсли;
	
	УчитыватьТолькоЗарегистрированных = ОтборЛьготниковПоВидуЖильцов = 
													ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные");
	УчитыватьТолькоПроживающих        = ОтборЛьготниковПоВидуЖильцов = 
													ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие");
	УчитыватьТолькоСобственников      = ОтборЛьготниковПоВидуЖильцов = 
													ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Собственники");
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",                     КонецДня(Период));
	Запрос.УстановитьПараметр("ЛицевойСчет",              ЛицевойСчет);
	Запрос.УстановитьПараметр("ПолучателиЛьготы",         ОтборЛьготниковСредиПолучателей);
	Запрос.УстановитьПараметр("ОтбиратьСредиПолучателей", ТипЗнч(ОтборЛьготниковСредиПолучателей) = Тип("Массив")
														  И ОтборЛьготниковСредиПолучателей.Количество() > 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Льготник
	|ПОМЕСТИТЬ втЛьготников
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&Дата,
	|			Проживающий.Владелец = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|	И ВЫБОР
	|			КОГДА &ОтбиратьСредиПолучателей
	|				ТОГДА КВП_НазначенныеЛьготыСрезПоследних.Проживающий В(&ПолучателиЛьготы)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|&ТаблицаЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Льготников.Льготник) КАК Количество
	|ИЗ
	|	втЛьготников КАК Льготников";
	
	Если УчитыватьТолькоСобственников Тогда
		
		Запрос.УстановитьПараметр("Помещение", ЛицевойСчет.Адрес);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЖильцов",
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СобственникиПомещений.Собственник КАК ФизЛицо
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
		|			&Дата,
		|			Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещений
		|ГДЕ
		|	УПЖКХ_СобственникиПомещений.Действует");
		
		Запрос.Текст = Запрос.Текст
		+ "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцов КАК Жильцы
		|		ПО Льготников.Льготник.ФизЛицо = Жильцы.ФизЛицо";
		
	Иначе // Если УчитыватьТолькоЗарегистрированных ИЛИ УчитыватьТолькоПроживающих Тогда
		
		// ОСОБЕННОСТЬ:
		// Если "Параметры отбора по льготникам" не переданы, значит выполняется расчет 
		// услуги по количеству льготников. В этом случае по умолчанию берется количество 
		// зарегистрированных льготников.
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЖильцов",
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец КАК Жилец
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&Дата,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированных
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован");
		
		Если УчитыватьТолькоПроживающих Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_СведенияОЗарегистрированных", "УПЖКХ_СведенияОПроживающих");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Зарегистрирован", ".Проживает");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст
		+ "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцов КАК Жильцы
		|		ПО Льготников.Льготник = Жильцы.Жилец";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоЛьготников()

// Получает количество проживающих человек по указанному лицевому счету.
//
// Параметры
//  ЛицевойСчет  – лицевой счет или список лицевых счетов для анализа.
//  Дата         – дата изменений, на которую получаются данные.
//  Период       – дата документа начисления, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество проживающих.
//
Функция ПолучитьКоличествоПроживающих(ЛицевойСчет, Дата, Период = Неопределено) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = Дата;
	КонецЕсли;
	
	// Если в учетной политике ЖКХ стоит указывать кол-во проживающих и зарегистрированных 
	// готовыми числами, то данные о кол-ве проживающих жильцов берутся из РС "КВП_УчетКоличестваЖильцовПоЛицевымСчетам",
	// если не готовыми числами, то из РС "УПЖКХ_СведенияОПроживающих".
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоПроживающих) КАК Количество
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_УчетКоличестваЖильцовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В (&ЛицевойСчет)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	КоличествоИзСведений КАК КоличествоИзСведений,
	|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоПроживающих()

// Получает количество человек, зарегистрированных на указанном лицевом счете.
//
// Параметры
//  ЛицевойСчет  – лицевой счет или список лицевых счетов для анализа.
//  Дата         – дата изменений, на которую получаются данные.
//  Период       – дата документа начисления, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество зарегистрированных.
//
Функция ПолучитьКоличествоЗарегистрированных(ЛицевойСчет, Дата, Период = Неопределено) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = Дата;
	КонецЕсли;
	
	// Если в учетной политике ЖКХ стоит указывать кол-во проживающих и зарегистрированных 
	// готовыми числами, то данные о кол-ве зарегистрированных жильцов берутся из РС "КВП_УчетКоличестваЖильцовПоЛицевымСчетам",
	// если не готовыми числами, то из РС "УПЖКХ_СведенияОЗарегистрированных".
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоЗарегистрированных) КАК Количество
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_УчетКоличестваЖильцовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В (&ЛицевойСчет)
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	КоличествоИзСведений КАК КоличествоИзСведений,
	|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;

КонецФункции // ПолучитьКоличествоЗарегистрированных()

// Получает количество человек, зарегистрированных на указанном лицевом счете,
// которые являются владельцами единственного жилья.
//
// Параметры
//  ЛицевойСчет  – лицевой счет для анализа.
//  Дата         – дата изменений, на которую получаются данные.
//  Организация  - наименование организации для получения учетной политики.
//  Период       – дата документа начисления, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество зарегистрированных.
//
Функция ПолучитьКоличествоВладельцевЕдинственногоЖилья(ЛицевойСчет, Дата = Неопределено) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР
	|			КОГДА КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) 
	|		КАК КВП_СведенияОЖильцахСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) 
	|				КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ГДЕ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован) КАК ТаблицаЗарегистрированных
	|		ПО КВП_СведенияОЖильцахСрезПоследних.Объект = ТаблицаЗарегистрированных.Жилец
	|			И КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет = ТаблицаЗарегистрированных.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_СведенияОЖильцахСрезПоследних.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;

КонецФункции // ПолучитьКоличествоВладельцевЕдинственногоЖилья()

// Функция получает количество жильцов для расчета по Постановлению Правительства Москвы № 848-ПП от 13.12.2016
// при расчете начислений услуг по содержанию жилого помещения.
// По сути аналогична получению значения основания, т.к. для нормы с признаком
// "Норма для владельцев (нанимателей) единственного жилья" поле основание скрывается.
//
// Параметры
//  ЛицевойСчет  – лицевой счет для анализа.
//  Дата         – дата изменений, на которую получаются данные.
//
// Возвращаемое значение:
//  Число: Количество зарегистрированных жильцов при условии наличия на лицевом счете хотя бы одного
//         жильца с корректно установленным признаком "Владелец (наниматель) единственного жилья".
// 
// ПРИМЕЧАНИЕ:
//  Признак "Владелец (наниматель) единственного жилья" жильца считается установленным корректно, если:
//  - жилец зарегистрирован и является собственником помещения для частной собственности;
//  - жилец зарегистрирован, при этом помещение находится в муниципальной, государственной или ведомственной
//     собственности, а жилец является ответственным нанимателем лицевого счета.
//
Функция ПолучитьКоличествоЖильцовДляРасчетаВЕЖ(ЛицевойСчет, Дата = Неопределено) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	// Логика запроса следующая:
	//  1. Если на лицевом счете нет ни одного жильца с флагом ВЕЖ, то запрос вернет 0.
	//  2. Если на лицевом счете есть хотя бы один жилец с флагом ВЕЖ, то запрос возвращает
	//  количество зарегистрированных жильцов ЗА ИСКЛЮЧЕНИЕМ жильцов-собственников, у которых
	//  флаг ВЕЖ отсутствует.
	//  Смысл этого в следующем: при наличии хотя бы одного жильца с флагом ВЕЖ нас интересуют
	//  все зарегистрированные на лицевом счете жильцы. Но жильцы, являющиеся собственниками
	//  и при этом владеющие более чем одним помещением (у которых флаг ВЕЖ не стоит), не подпадают
	//  под требуемую категорию.
	// 
	// В запросе это реализовано так:
	//  1. В первом пакете получаем только зарегистрированных жильцов.
	//  2. Во втором пакете получаем всех собственников помещения.
	//  3. В третьем пакете получаем зарегистрированных собственников помещения.
	//  4. В четвертом пакете получаем ответственного владельца, нанимателя лицевого счета.
	//  5. В пятом пакете получаем признак "ЭтоНеЧастнаяСобственность" - он потребуется для определения
	//     корректности флага ВЕЖ у жильца-нанимателя, не являющегося собственником помещения.
	//     Флаг корректен для муниципальной, государственной и ведомственной собственности.
	//  6. В шестом пакете получаем сведения о наличии признака ВЕЖ жильцов.
	//  7. В седьмом пакете соединяем данные предыдущих пакетов
	//     к зарегистрированным жильцам первого пакета, определяя при этом, корректно ли установлен признак ВЕЖ.
	//  8. В последнем пакете
	//      а) в первом множителе суммой получаем количество зарегистрированных жильцов,
	//         исключая собственников без признака ВЕЖ;
	//      б) во втором множителе определяем, имеются ли вообще на ЛС жильцы с корректно установленным признаком ВЕЖ.
	//         В случае если количество жильцов с корректно установленным флагом ВЕЖ = 0, происходит умножение на 0,
	//         в противном случае на 1.
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК ФизЛицо,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Собственник
	|ПОМЕСТИТЬ СобственникиПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобственникиПомещения.ФизЛицо КАК ФизЛицо,
	|	СобственникиПомещения.Собственник КАК Собственник
	|ПОМЕСТИТЬ ЗарегистрированныеСобственникиПомещения
	|ИЗ
	|	СобственникиПомещения КАК СобственникиПомещения
	|ГДЕ
	|	СобственникиПомещения.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ТаблицаЗарегистрированных.Жилец.ФизЛицо
	|			ИЗ
	|				ТаблицаЗарегистрированных КАК ТаблицаЗарегистрированных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец
	|ПОМЕСТИТЬ ТаблицаОтветственногоВладельца
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНеЧастнаяСобственность
	|ПОМЕСТИТЬ ТаблицаСобственностиНаПомещение
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|	И НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Жилец,
	|	ВЫБОР
	|		КОГДА КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВладелецЕдинственногоЖилья
	|ПОМЕСТИТЬ ТаблицаВЕЖ
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_СведенияОЖильцахСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗарегистрированных.Жилец КАК Жилец,
	|	ВЫБОР
	|		КОГДА ЗарегистрированныеСобственникиПомещения.Собственник = ИСТИНА
	|				И ТаблицаВЕЖ.ВладелецЕдинственногоЖилья
	|			ТОГДА 1
	|		КОГДА НЕ ТаблицаОтветственногоВладельца.ОтветственныйВладелец ЕСТЬ NULL
	|				И ТаблицаВЕЖ.ВладелецЕдинственногоЖилья
	|				И ТаблицаСобственностиНаПомещение.ЭтоНеЧастнаяСобственность
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КорректныйВЕЖ
	|ПОМЕСТИТЬ ВспомогательнаяТаблица
	|ИЗ
	|	ТаблицаЗарегистрированных КАК ТаблицаЗарегистрированных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗарегистрированныеСобственникиПомещения КАК ЗарегистрированныеСобственникиПомещения
	|		ПО (ЗарегистрированныеСобственникиПомещения.ФизЛицо = ТаблицаЗарегистрированных.Жилец.ФизЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВЕЖ КАК ТаблицаВЕЖ
	|		ПО (ТаблицаВЕЖ.Жилец = ТаблицаЗарегистрированных.Жилец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственногоВладельца КАК ТаблицаОтветственногоВладельца
	|		ПО (ТаблицаОтветственногоВладельца.ОтветственныйВладелец = ТаблицаЗарегистрированных.Жилец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобственностиНаПомещение КАК ТаблицаСобственностиНаПомещение
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ВспомогательнаяТаблица.Жилец) * ВЫБОР
	|			КОГДА СУММА(ВспомогательнаяТаблица.КорректныйВЕЖ) = 0
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ, 0) КАК Количество
	|ИЗ
	|	ВспомогательнаяТаблица КАК ВспомогательнаяТаблица";
	
	Запрос.УстановитьПараметр("Дата",        КонецДня(Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   ЛицевойСчет.Адрес);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;

КонецФункции // ПолучитьКоличествоЖильцовДляРасчетаВЕЖ()

// Дополняет запрос временной таблицей с информацией о количестве
// проживающих и зарегистрированных жильцов.
//
// Параметры
//  Запрос  - запрос для дополнения.
//
Процедура ДополнитьЗапросКоличествомЖильцов(Запрос, Дата, СписокЛицевыхСчетов = Неопределено) Экспорт
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЖильцахСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ ДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, &ДопУсловия) КАК УПЖКХ_СведенияОЖильцахСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЖильцахСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					ДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					ДействующиеЛС КАК ДействующиеЛС)) КАК КВП_УчетКоличестваЖильцовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(СведенияОЗарегистрированных.ЛицевойСчет, СведенияОПроживающих.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(СведенияОЗарегистрированных.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(СведенияОПроживающих.КоличествоПроживающих, 0) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	(ВЫБРАТЬ
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|	ИЗ
	|		РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ДатаИзменения <= &Дата
	|					И &ДопУсловия) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|	ГДЕ
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет) КАК СведенияОПроживающих
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|		ИЗ
	|			РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|					,
	|					ДатаИзменения <= &Дата
	|						И &ДопУсловия) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ГДЕ
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|		
	|		СГРУППИРОВАТЬ ПО
	|			УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет) КАК СведенияОЗарегистрированных
	|		ПО СведенияОПроживающих.ЛицевойСчет = СведенияОЗарегистрированных.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
	|		ИНАЧЕ КоличествоИзСведений.ЛицевойСчет
	|	КОНЕЦ КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ врТаблицаКоличеств
	|ИЗ
	|	КоличествоИзСведений КАК КоличествоИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО КоличествоИзСведений.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет";
	
	СтрокаДопУсловий = "ИСТИНА";
	Если Не СписокЛицевыхСчетов = Неопределено Тогда
		СтрокаДопУсловий = СтрокаДопУсловий + " И ЛицевойСчет В (&СпЛицевыхСчетов)"
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", СтрокаДопУсловий);
	
	Запрос.УстановитьПараметр("Дата",            Дата);
	Запрос.УстановитьПараметр("СпЛицевыхСчетов", СписокЛицевыхСчетов);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Выполнить();
	
КонецПроцедуры // ДополнитьЗапросКоличествомЖильцов()

// Получает количество близких родственников для указанного человека.
//
// Параметры
//  Проживающий  – льготник, для которого ищутся родственники.
//  Период       – дата, на которую получаются данные.
//
// Возвращаемое значение:
//  Число – количество близких родственников.
//
Функция ПолучитьКоличествоБлизкихРодственников(Проживающий,
											   Период,
											   Знач ПараметрыОтбораПоБлизкимРодственникам = Неопределено) Экспорт
	// Для информации:
	// Функция используется для определения близких родственников льготника при расчете льгот.
	// Если настроить начисление услуги по нормативу, зависящему от близких, то при этом жилец
	// в качестве параметра не передается, а функция вернет всегда значение 1. 
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтборБлизкихРодственниковПоВидуЖильцов          = Неопределено;
	ОтборБлизкихРодственниковСредиПолучателейЛьготы = Неопределено;
	
	Если ТипЗнч(ПараметрыОтбораПоБлизкимРодственникам) = Тип("Структура") Тогда
		ПараметрыОтбораПоБлизкимРодственникам.Свойство("ОтборПоВидуЖильцов",          ОтборБлизкихРодственниковПоВидуЖильцов);
		ПараметрыОтбораПоБлизкимРодственникам.Свойство("ОтборСредиПолучателейЛьготы", ОтборБлизкихРодственниковСредиПолучателейЛьготы);
	КонецЕсли;
	
	УчитыватьТолькоЗарегистрированных = ОтборБлизкихРодственниковПоВидуЖильцов = 
											ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные");
	УчитыватьТолькоПроживающих        = ОтборБлизкихРодственниковПоВидуЖильцов = 
											ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие");
	УчитыватьТолькоСобственников      = ОтборБлизкихРодственниковПоВидуЖильцов = 
											ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Собственники");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Дата",                     КонецДня(Период));
	Запрос.УстановитьПараметр("Проживающий",              Проживающий.ФизЛицо);
	Запрос.УстановитьПараметр("ПолучателиЛьготы",         ОтборБлизкихРодственниковСредиПолучателейЛьготы);
	Запрос.УстановитьПараметр("ОтбиратьСредиПолучателей", ТипЗнч(ОтборБлизкихРодственниковСредиПолучателейЛьготы) = Тип("Массив")
														  И ОтборБлизкихРодственниковСредиПолучателейЛьготы.Количество() > 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втФизлицаПолучателейЛьгот
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Ссылка В(&ПолучателиЛьготы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное КАК ФизЛицо
	|ПОМЕСТИТЬ втРодственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицоОсновное = &Проживающий) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|ГДЕ
	|	СтепеньРодства.БлизкоеРодство
	|		И ВЫБОР
	|			КОГДА &ОтбиратьСредиПолучателей
	|				ТОГДА УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное В
	|						(ВЫБРАТЬ
	|							ПолучателиЛьгот.ФизЛицо
	|						ИЗ
	|							втФизлицаПолучателейЛьгот КАК ПолучателиЛьгот)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|&ТаблицаЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Родственники.ФизЛицо) КАК Количество
	|ИЗ
	|	втРодственников КАК Родственники";
	
	
	Если УчитыватьТолькоЗарегистрированных ИЛИ УчитыватьТолькоПроживающих Тогда
		
		Запрос.УстановитьПараметр("ЛицевойСчет", Проживающий.Владелец);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЖильцов",
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Жилец.ФизЛицо КАК ФизЛицо
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&Дата,
		|			ЛицевойСчет = &ЛицевойСчет
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированных
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован");
		
		Если УчитыватьТолькоПроживающих Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_СведенияОЗарегистрированных", "УПЖКХ_СведенияОПроживающих");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Зарегистрирован", ".Проживает");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст
		+ "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцов КАК Жильцы
		|		ПО Родственники.ФизЛицо = Жильцы.ФизЛицо";
		
	ИначеЕсли УчитыватьТолькоСобственников Тогда
		
		Запрос.УстановитьПараметр("Помещение", Проживающий.Владелец.Адрес);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЖильцов",
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СобственникиПомещений.Собственник КАК ФизЛицо
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
		|			&Дата,
		|			Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещений
		|ГДЕ
		|	УПЖКХ_СобственникиПомещений.Действует");
		
		Запрос.Текст = Запрос.Текст
		+ "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцов КАК Жильцы
		|		ПО Родственники.ФизЛицо = Жильцы.ФизЛицо";
		
	Иначе
		
		// ОСОБЕННОСТЬ:
		// Если "Параметры отбора по близким родственникам" не переданы, то по умолчанию
		// берется общее количество различных близких родственников переданного жильца (без отбора).
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаЖильцов", "");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	// Добавляем самого льготника в список.
	Количество = Количество + 1;
	
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоБлизкихРодственников()

// Получает степень родства физлица по отношению к другому физлицу.
//
// Параметры
//  ФизическоеЛицоСвязанное – ФизЛицо, для которого ищется родственная связь.
//  ФизическоеЛицоОсновное – ФизЛицо, с которым связано основное физлицо.
//  Дата                   – дата, на которую получаются данные.
//
// Возвращаемое значение:
//  Ссылка                 – элемент справочника КВП_ТипыРодственныхСвязей.
//
Функция ПолучитьСтепеньРодстваДляФизЛица(ФизическоеЛицоСвязанное, ФизическоеЛицоОсновное, Дата = Неопределено) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&Дата,
	|			ФизическоеЛицоСвязанное = &ФизическоеЛицоСвязанное
	|				И ФизическоеЛицоОсновное = &ФизическоеЛицоОсновное) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",                    Дата);
	Запрос.УстановитьПараметр("ФизическоеЛицоСвязанное",  ФизическоеЛицоСвязанное);
	Запрос.УстановитьПараметр("ФизическоеЛицоОсновное", ФизическоеЛицоОсновное);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтепеньРодства;
	КонецЕсли;
	
	Возврат Справочники.КВП_ТипыРодственныхСвязей.ПустаяСсылка();
	
КонецФункции // ПолучитьСтепеньРодстваДляФизЛица()

// Функция получает данные о степенях родства жильцов по отношении к ответственному владельцу лицевого счета.
//
// Параметры:
//  СписокДанных    – Список Значений - список жильцов, для которого ищется степень родства.
//  Дата            – дата, на которую получаются данные.
//
// Возвращаемое значение:
//  ТаблицаЗначений – таблица, содержащая физлица и степени их родства к ответственному собственнику.
//
Функция ПолучитьПараметрыСтепенейРодстваЖильцовДляВыводаВТаблицах(СписокДанных, Дата = Неопределено) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		ПараметрыСтепенейРодстваЖильцов = Новый ТаблицаЗначений();
		ПараметрыСтепенейРодстваЖильцов.Колонки.Добавить("ЛицевойСчет");
		ПараметрыСтепенейРодстваЖильцов.Колонки.Добавить("ФизическоеЛицоСвязанное");
		ПараметрыСтепенейРодстваЖильцов.Колонки.Добавить("СтепеньРодства");
		Возврат ПараметрыСтепенейРодстваЖильцов;
	КонецЕсли;
	
	// определим дату получения данных
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.ФизЛицо
	|ПОМЕСТИТЬ врСписокЖильцов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Ссылка В(&СписокЖильцов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо КАК ОтветственноеФизЛицо
	|ПОМЕСТИТЬ врОтветственныеФизЛица
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					врСписокЖильцов.ЛицевойСчет
	|				ИЗ
	|					врСписокЖильцов)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтветственныеФизЛица.ЛицевойСчет,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
	|ИЗ
	|	врОтветственныеФизЛица КАК ОтветственныеФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|				&Дата,
	|				ФизическоеЛицоСвязанное В
	|					(ВЫБРАТЬ
	|						врСписокЖильцов.ФизЛицо
	|					ИЗ
	|						врСписокЖильцов)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО ОтветственныеФизЛица.ОтветственноеФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтветственныеФизЛица.ЛицевойСчет,
	|	ОтветственныеФизЛица.ОтветственноеФизЛицо,
	|	&ПредставлениеОтвСобственника
	|ИЗ
	|	врОтветственныеФизЛица КАК ОтветственныеФизЛица";
	
	Запрос.УстановитьПараметр("Дата",                         Дата);
	Запрос.УстановитьПараметр("ПредставлениеОтвСобственника", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника());
	Запрос.УстановитьПараметр("СписокЖильцов",                СписокДанных);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает норму потребления услуги по лицевому счету или зданию.
//
// Параметры
//  Объект – лицевой счет или здание для анализа.
//  Услуга – услуга, норму по которой необходимо получить.
//  Период – дата, на которую получаются данные.
//
// Возвращаемое значение:
//  Ссылка на справочник норм потребления.
//
Функция ПолучитьНормуПотребления(Объект, Услуга, Период) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Справочники.КВП_НормыПотребленияУслуг.ПустаяСсылка();
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет = &Объект
	|				И Услуга = &Услуга) КАК КВП_НормыПотребленияУслугЛССрезПоследних";
	
	Запрос.УстановитьПараметр("Объект",  Объект);
	Запрос.УстановитьПараметр("Услуга",  Услуга);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НормаПотребления;
	КонецЕсли;
	
	Возврат Справочники.КВП_НормыПотребленияУслуг.ПустаяСсылка();
	
КонецФункции // ПолучитьНормуПотребления()

// Получает владельца указанного л/с или паркоместа.
//
// Параметры:
//  Объект – лицевой счет или паркоместо.
//  Дата   – дата, на которую получаются данные.
//
// Возвращаемое значение:
//  Владелец указанного объекта.
//
Функция ПолучитьВладельцаОбъекта(Объект, Дата = Неопределено, Организация) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Владелец = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") И Не Объект.ЭтоГруппа Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Жилец
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Период, 
		|																						ЛицевойСчет = &ЛицевойСчет) 
		|		КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних";
		
		Запрос.УстановитьПараметр("Период",          Дата);
		Запрос.УстановитьПараметр("ЛицевойСчет",     Объект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Владелец = Выборка.Жилец;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		
		Если Объект.ВидПомещения.ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо Тогда
			
			СтруктураДанных = КВП_ПолучитьСведенияОПарковочномМесте(Объект, Организация, Дата);
			Владелец = СтруктураДанных.ВладелецМеста;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Владелец;
	
КонецФункции // ПолучитьВладельцаОбъекта()

// Формирует описание указанного лицевого счета.
//
// Параметры:
//  ЛицевойСчет     – лицевой счет.
//  Дата            – дата, на которую получаются данные.
//  УчетнаяПолитика – текущие настройки учетной политики.
//  Организация     – организация для получения настроек учетной политики, если они не переданы.
//
// Возвращаемое значение:
//  Структура       - описание лицевого счета.
//
Функция СформироватьДанныеПоЛицевомуСчету(ЛицевойСчет,
										  Дата, 
										  УчетнаяПолитика = Неопределено, 
										  Организация = Неопределено) Экспорт
	
	ДанныеПоЛС = Новый Структура();
	
	Если УчетнаяПолитика = Неопределено Тогда
		УчетнаяПолитика = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);
	КонецЕсли;
	
	Период = Дата;
	УказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	
	// Проверяем, открыт ли лицевой счет на указанную дату.
	// Если не открыт, ищем дату открытия в текущем месяце.
	Если УказыватьКоличествоПрожИЗарегЧислами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(КВП_ЛицевыеСчетаСрезПоследнихТекДата.Период, КВП_ЛицевыеСчетаСрезПоследнихНовДата.Период) КАК Дата
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПоследнихТекДата
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&КонецМесяца, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПоследнихНовДата
		|		ПО КВП_ЛицевыеСчетаСрезПоследнихТекДата.ЛицевойСчет = КВП_ЛицевыеСчетаСрезПоследнихНовДата.ЛицевойСчет";
		Запрос.УстановитьПараметр("Дата", Период);
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Период = ?(Выборка.Дата > Период, Выборка.Дата, Период);
		КонецЕсли;
	КонецЕсли;
	
	Квартира            = ЛицевойСчет.Адрес;
	ОбщаяПлощадь        = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира,
																			   Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь, ЛицевойСчет, Период);
	ОбщаяПлощадьБезДоли = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира,
																			   Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь, ЛицевойСчет, Период, Ложь);
	ЖилаяПлощадь        = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира,
																			   Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь, ЛицевойСчет, Период);
	ЖилаяПлощадьБезДоли = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Квартира,
																			   Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь, ЛицевойСчет, Период, Ложь);
	КоличествоКомнат    = Квартира.КоличествоКомнат;
	Этаж                = Квартира.Этаж;
	АдресДома           = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Квартира.Владелец);
	
	ДанныеПоЛС.Вставить("ОбщаяПлощадь",        ОбщаяПлощадь);
	ДанныеПоЛС.Вставить("ОбщаяПлощадьБезДоли", ОбщаяПлощадьБезДоли);
	ДанныеПоЛС.Вставить("ЖилаяПлощадь",        ЖилаяПлощадь);
	ДанныеПоЛС.Вставить("ЖилаяПлощадьБезДоли", ЖилаяПлощадьБезДоли);
	ДанныеПоЛС.Вставить("КоличествоКомнат",    КоличествоКомнат);
	ДанныеПоЛС.Вставить("Этаж",                Этаж);
	ДанныеПоЛС.Вставить("Адрес",               ПолучитьАдресПомещения(АдресДома, Квартира));
	ДанныеПоЛС.Вставить("Ответственный",       УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, Период));
	
	ЗапросДанныхПоЛС = Новый Запрос();
	ЗапросДанныхПоЛС.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросДанныхПоЛС.УстановитьПараметр("Дата",        Период);
	ЗапросДанныхПоЛС.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросДанныхПоЛС.УстановитьПараметр("Помещение",   Квартира);
	ЗапросДанныхПоЛС.УстановитьПараметр("Организация", Организация);
	
	// Получим параметры для отбора сведений по льготным категориям:
	// "УчетЖильцовГотовымиЧислами"       - параметр, возвращающий настройку ведения учета жильцов готовыми числами,
	//                                      если "Истина", тогда в сведения передаются все льготники по данному лицевому счету,
	//                                      если "Ложь", тогда проверяется настройка отбора по зарегистрированным;
	ЗапросДанныхПоЛС.УстановитьПараметр("УчетЖильцовГотовымиЧислами", УказыватьКоличествоПрожИЗарегЧислами);
	
	// 1. Получим общие данные о составе проживающих и собственниках помещения.
	ЗапросДанныхПоЛС.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец, УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Проживающий,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет, УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает, ЛОЖЬ) КАК Проживает
	|ПОМЕСТИТЬ врТаблЖильцов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ЛицевойСчет = &ЛицевойСчет
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|			И УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблЖильцов.Проживающий,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственностиЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственностиЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК УчастиеВСовместнойСобственности,
	|	врТаблЖильцов.ЛицевойСчет
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	врТаблЖильцов КАК врТаблЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО врТаблЖильцов.Проживающий.ФизЛицо = УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовСрезПоследних.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_УчетКоличестваЖильцовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Проживающий,
	|	втДанные.ДоляСобственностиЧислитель,
	|	втДанные.ДоляСобственностиЗнаменатель,
	|	втДанные.УчастиеВСовместнойСобственности,
	|	ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0) КАК КоличествоПроживающихЧислом,
	|	ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированныхЧислом
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втДанные.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет";
	
	СведенияОЖильцахИПомещении = ЗапросДанныхПоЛС.Выполнить().Выгрузить();
	
	// 2. Сформируем список услуг, исходя из полученных льготных категорий.
	//    Для этого обратимся к регистру сведений скидки и для каждой льготной категории,
	//    относящейся к лицевому счету, получим список услуг.
	//    Также получим временную таблицу данных о льготниках, где будет отражена
	//    информация о регистрации/проживании льготника. Эта таблица понадобится нам
	//    при получении сведений по составу и количеству льготников в п.4.
	ЗапросДанныхПоЛС.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий
	|ПОМЕСТИТЬ втЛьготники
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			,
	|			Проживающий.Владелец = &ЛицевойСчет
	|				И ДатаИзменения <= &Дата) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготники.ЛьготнаяКатегория,
	|	втЛьготники.Проживающий,
	|	ЕСТЬNULL(врТаблЖильцов.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(врТаблЖильцов.Проживает, ЛОЖЬ) КАК Проживает
	|ПОМЕСТИТЬ втДанныеПоЛьготникам
	|ИЗ
	|	втЛьготники КАК втЛьготники
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблЖильцов КАК врТаблЖильцов
	|		ПО втЛьготники.Проживающий = врТаблЖильцов.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.Услуга,
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|ПОМЕСТИТЬ ВрСписокУслугПоКатегориям
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(
	|			&Дата,
	|			ЛьготнаяКатегория В
	|				(ВЫБРАТЬ
	|					втЛьготники.ЛьготнаяКатегория
	|				ИЗ
	|					втЛьготники КАК втЛьготники)) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВрСписокУслугПоКатегориям.Услуга
	|ИЗ
	|	ВрСписокУслугПоКатегориям КАК ВрСписокУслугПоКатегориям";
	
	МассивУслуг = ЗапросДанныхПоЛС.Выполнить().Выгрузить().ВыгрузитьКолонку("Услуга");
	
	// 3. Дополним запрос данными по настрокам предоставления льгот в разрезе услуг.
	УПЖКХ_РасчетЛьгот.ДополнитьЗапросНастройкамиПредоставленияИРасчетаЛьготДляСпискаУслуг(ЗапросДанныхПоЛС, Период, Организация, МассивУслуг);
	
	// 4. Получим данные по составу и количеству льготных категорий по лицевому счету.
	//    Для этого проверим фактический статус льготника - проживает/зарегистрирован,
	//    и сравним его с настройками услуги - предоставляется проживающему или зарегистрированному.
	//    При совпадении статуса с настройкой (дают в результате истину) выводим данные по льготе.
	//    При получении признака предоставления услуги, проверяем каждую услугу как на предоставление
	//    зарегистрированным, так и проживающим, чтобы впоследствии при группировке не "потерять"
	//    признак предоставления для проживающих.
	//    В случае, если учет ведется готовыми числами, выводим данные по льготникам независимо от настроек.
	
	// Считается, что на зарегистрированного жильца действует льгота, когда хотя бы одна услуга для
	// льготной категории предоставляется зарегистрированным. То же самое с проживающими, если хотя
	// бы одна услуга для льготной категории предоставляется проживающим, то в таком случае считается,
	// что льгота действует на жильца.
	// Поле ВидЖильцовКоторымПредоставляютсяЛьготы имеет тип ПеречислениеСсылка. Во втором пакете запроса
	// записи группируются по льготной категории, и для того, чтобы учесть вышеописанные ситуации, поле
	// ВидЖильцовКоторымПредоставляютсяЛьготы разделяется на два поля с типом Булево, для которых при
	// группировке берется максимум.
	
	ЗапросДанныхПоЛС.Текст =
	"ВЫБРАТЬ
	|	НастройкиРасчетаЛьготПоУслугам.Услуга КАК Услуга,
	|	НастройкиРасчетаЛьготПоУслугам.ВидЖильцовКоторымПредоставляютсяЛьготы КАК ВидЖильцовКоторымПредоставляютсяЛьготы
	|ПОМЕСТИТЬ втНастройкиРасчетаЛьготПоУслугам
	|ИЗ
	|	НастройкиРасчетаЛьготПоУслугам КАК НастройкиРасчетаЛьготПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрСписокУслугПоКатегориям.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНастройкиРасчетаЛьготПоУслугам.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготуПредоставлятьЗарегистрированным,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втНастройкиРасчетаЛьготПоУслугам.ВидЖильцовКоторымПредоставляютсяЛьготы = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготуПредоставлятьПроживающим
	|ПОМЕСТИТЬ втНастройкиЛьготПоКатегориям
	|ИЗ
	|	ВрСписокУслугПоКатегориям КАК ВрСписокУслугПоКатегориям
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиРасчетаЛьготПоУслугам КАК втНастройкиРасчетаЛьготПоУслугам
	|		ПО ВрСписокУслугПоКатегориям.Услуга = втНастройкиРасчетаЛьготПоУслугам.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	ВрСписокУслугПоКатегориям.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоЛьготникам.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втДанныеПоЛьготникам.Проживающий КАК Проживающий,
	|	втДанныеПоЛьготникам.Зарегистрирован КАК Зарегистрирован,
	|	втДанныеПоЛьготникам.Проживает КАК Проживает,
	|	ЕСТЬNULL(втНастройкиЛьготПоКатегориям.ЛьготуПредоставлятьЗарегистрированным, ЛОЖЬ) КАК ЛьготуПредоставлятьЗарегистрированным,
	|	ЕСТЬNULL(втНастройкиЛьготПоКатегориям.ЛьготуПредоставлятьПроживающим, ЛОЖЬ) КАК ЛьготуПредоставлятьПроживающим
	|ПОМЕСТИТЬ втДанныеПоЛьготникамСНастройкамиЛьгот
	|ИЗ
	|	втДанныеПоЛьготникам КАК втДанныеПоЛьготникам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиЛьготПоКатегориям КАК втНастройкиЛьготПоКатегориям
	|		ПО втДанныеПоЛьготникам.ЛьготнаяКатегория = втНастройкиЛьготПоКатегориям.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(1) КАК Количество,
	|	втДанныеПоЛьготникамСНастройкамиЛьгот.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ИЗ
	|	втДанныеПоЛьготникамСНастройкамиЛьгот КАК втДанныеПоЛьготникамСНастройкамиЛьгот
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &УчетЖильцовГотовымиЧислами
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ втДанныеПоЛьготникамСНастройкамиЛьгот.Зарегистрирован
	|						И втДанныеПоЛьготникамСНастройкамиЛьгот.ЛьготуПредоставлятьЗарегистрированным
	|					ИЛИ втДанныеПоЛьготникамСНастройкамиЛьгот.Проживает
	|						И втДанныеПоЛьготникамСНастройкамиЛьгот.ЛьготуПредоставлятьПроживающим
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоЛьготникамСНастройкамиЛьгот.ЛьготнаяКатегория";
	
	ВыборкаДанныхПоЛьготам = ЗапросДанныхПоЛС.Выполнить().Выбрать();
	
	// Данные о составе проживающих и собственниках помещения.
	КоличествоЗарегистрированных = ПолучитьКоличествоЗарегистрированных(ЛицевойСчет, Период);
	КоличествоПроживающих        = ПолучитьКоличествоПроживающих(ЛицевойСчет, Период);
	
	// В настоящий момент количество временно проживающих и временно отсутствующих считается следующим, образом:
	// если количество проживающих превышает количество зарегистрированных, в таком случае их разница - временно проживающие жильцы,
	// в обратном случае, разница - временно отсутствующие жильцы.
	// При равном значении, считается, что нет ни временно присутствующих, ни временно отсутствующих.
	// Это актуально и правильно, в случае, если ведется учет готовыми числами, так как нет возможности получить информацию
	// в разрезе каждого жильца в отдельности.
	// НА БУДУЩЕЕ:
	// Если возникнет потребность, для детального учета (не готовыми числами) можно считать конкретного жильца
	// временно проживающим, если он в настоящий момент проживает и не зарегистрирован и
	// временно отсутствующим, если он в настоящий момент зарегистрирован, но не проживает.
	ВременноОтсутствующих = 0;
	ВременноПроживающих   = 0;
	Если КоличествоЗарегистрированных - КоличествоПроживающих > 0 Тогда
		ВременноОтсутствующих = КоличествоЗарегистрированных - КоличествоПроживающих;
	Иначе
		ВременноПроживающих = КоличествоПроживающих - КоличествоЗарегистрированных;
	КонецЕсли;
	
	ТаблицаСобственников = Новый ТаблицаЗначений();
	ТаблицаСобственников.Колонки.Добавить("Проживающий", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственностиЧислитель",
										  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(7, 0));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственностиЗнаменатель",
										  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(7, 0));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственностиПредст",
										  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(15));
	
	Для Каждого ТекСтрока Из СведенияОЖильцахИПомещении Цикл
		
		Если ТекСтрока.УчастиеВСовместнойСобственности = Истина Тогда
			СтрокаСобственника = ТаблицаСобственников.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСобственника, ТекСтрока);
			СтрокаСобственника.ДоляСобственностиПредст = 
				УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель,
																				ТекСтрока.ДоляСобственностиЗнаменатель);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеПоЛС.Вставить("КоличествоЗарегистрированных", КоличествоЗарегистрированных);
	ДанныеПоЛС.Вставить("КоличествоПроживающих",        КоличествоПроживающих);
	ДанныеПоЛС.Вставить("ВременноПроживающих",          ВременноПроживающих);
	ДанныеПоЛС.Вставить("ВременноОтсутствующих",        ВременноОтсутствующих);
	ДанныеПоЛС.Вставить("ТаблицаСобственников",         ТаблицаСобственников);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СостояниеПомещения.Состояние,
	|	КВП_СостояниеПомещения.КатегорияКвартиры
	|ИЗ
	|	РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|ГДЕ
	|	КВП_СостояниеПомещения.Объект = &Квартира";
	
	Запрос.УстановитьПараметр("Квартира", Квартира);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДанныеПоЛС.Вставить("СостояниеКвартиры",        Выборка.Состояние);
	ДанныеПоЛС.Вставить("КатегорияКвартиры",        Выборка.КатегорияКвартиры);
	
	// Собственность помещения.
	МассивСобственников = Новый Массив;
	МассивСобственников.Добавить(Тип("СправочникСсылка.Контрагенты"));
	МассивСобственников.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	
	ТаблицаСобственников = Новый ТаблицаЗначений();
	ТаблицаСобственников.Колонки.Добавить("Собственник", Новый ОписаниеТипов(МассивСобственников));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственникаЧислитель",
											УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(7, 0));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственникаЗнаменатель",
											УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(7, 0));
	ТаблицаСобственников.Колонки.Добавить("ДоляСобственностиПредст",
											УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(15));
	
	ДанныеОСобственности = ПолучитьДанныеОСобственностиПомещенияПоЛицевомуСчету(Квартира, ЛицевойСчет, Период);
	
	ДанныеПоЛС.Вставить("ТипСобственностиКвартиры",   ?(ДанныеОСобственности.Количество() > 0, 
														ДанныеОСобственности[0].ВидСобственности, ""));
	ДанныеПоЛС.Вставить("ПодвидЧастнойСобственности", ?(ДанныеОСобственности.Количество() > 0, 
														ДанныеОСобственности[0].ПодвидЧастнойСобственности, ""));

	Для Каждого ТекСтр Из ДанныеОСобственности Цикл
		СтрокаСобственника = ТаблицаСобственников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСобственника, ТекСтр);
		СтрокаСобственника.ДоляСобственностиПредст = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтр.ДоляСобственникаЧислитель,
																			ТекСтр.ДоляСобственникаЗнаменатель);
	КонецЦикла;
	
	ДанныеПоЛС.Вставить("ТаблицаСобственников",  ТаблицаСобственников);
	
	// Льготы.
	// Получим данные о количестве льготников и представление состава льготных категорий по лицевому счету.
	
	ДанныеОЛьготах       = "";
	КоличествоЛьготников = 0;
	
	Пока ВыборкаДанныхПоЛьготам.Следующий() Цикл
		ДанныеОЛьготах  = ДанныеОЛьготах 
						+ "; " 
						+ ВыборкаДанныхПоЛьготам.ЛьготнаяКатегория 
						+ ?(ВыборкаДанныхПоЛьготам.Количество = 1, "", " (" + ВыборкаДанныхПоЛьготам.Количество
						+ ")");
		КоличествоЛьготников = КоличествоЛьготников + ВыборкаДанныхПоЛьготам.Количество;
	КонецЦикла;
	
	Если ПустаяСтрока(ДанныеОЛьготах) Тогда
		ДанныеОЛьготах = "-";
	Иначе
		ДанныеОЛьготах = Сред(ДанныеОЛьготах, СтрДлина("; ") + 1);
	КонецЕсли;
	
	ДанныеПоЛС.Вставить("ДанныеОЛьготах", ДанныеОЛьготах);
	ДанныеПоЛС.Вставить("КоличествоЛьготников", КоличествоЛьготников);
	
	Возврат ДанныеПоЛС;
	
КонецФункции // СформироватьДанныеПоЛицевомуСчету()

// Получает дату открытия/закрытия лицевого счета.
Функция ПолучитьДатуОткрытияЗакрытияЛС(ЛицевойСчет, ДопСтруктураПараметров = Неопределено) Экспорт

	мСтруктураЛС = Новый Структура;
	
	Запрос = Новый Запрос;
	
	// Если есть закэшированная таблица дат открытия/закрытия лицевых счетов,
	// то выполнять запрос будем к не к регистру сведений, а к передаваемой таблице значений.
	ЕстьКэшДат = Не ДопСтруктураПараметров = Неопределено
				 И ДопСтруктураПараметров.Свойство("ДатыОткрытияЗакрытияЛС")
				 И ТипЗнч(ДопСтруктураПараметров.ДатыОткрытияЗакрытияЛС) = Тип("ТаблицаЗначений");
	
	ИсточникСведений = Неопределено;
	
	Если ЕстьКэшДат Тогда
		НайденнаяСтрока = ДопСтруктураПараметров.ДатыОткрытияЗакрытияЛС.Найти(ЛицевойСчет, "ЛицевойСчет");
		Если Не НайденнаяСтрока = Неопределено Тогда
			// В качестве источника сведений используем найденную строку в "закэшированной" таблице дат открытия/закрытия лицевых счетов.
			ИсточникСведений = НайденнаяСтрока;
		КонецЕсли;
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДОБАВИТЬКДАТЕ(КВП_ЗакрытиеЛС.Период, ДЕНЬ, -1) КАК ДатаЗакрытия,
		|	КВП_ЗакрытиеЛС.Регистратор КАК ДокументЗакрытия,
		|	КВП_ОткрытиеЛС.Период КАК ДатаОткрытия,
		|	КВП_ОткрытиеЛС.Регистратор КАК ДокументОткрытия
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
		|			,
		|			Действует
		|				И ЛицевойСчет = &ЛицевойСчет
		|				И Регистратор ССЫЛКА Документ.КВП_ОткрытиеЛицевогоСчета) КАК КВП_ОткрытиеЛС
		|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
		|				,
		|				НЕ Действует
		|					И ЛицевойСчет = &ЛицевойСчет
		|					И Регистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета) КАК КВП_ЗакрытиеЛС
		|		ПО (КВП_ЗакрытиеЛС.ЛицевойСчет = КВП_ОткрытиеЛС.ЛицевойСчет)";
		
		Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// В качестве источника сведений используем данные выборки запроса.
			ИсточникСведений = Выборка;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ИсточникСведений = Неопределено Тогда
		мСтруктураЛС.Вставить("ДатаОткрытия",     ИсточникСведений.ДатаОткрытия);
		мСтруктураЛС.Вставить("ДатаЗакрытия",     ИсточникСведений.ДатаЗакрытия);
		мСтруктураЛС.Вставить("ДокументОткрытия", ИсточникСведений.ДокументОткрытия);
		мСтруктураЛС.Вставить("ДокументЗакрытия", ИсточникСведений.ДокументЗакрытия);
	Иначе
		мСтруктураЛС.Вставить("ДатаОткрытия",     '00010101');
		мСтруктураЛС.Вставить("ДатаЗакрытия",     '00010101');
		мСтруктураЛС.Вставить("ДокументОткрытия", Неопределено);
		мСтруктураЛС.Вставить("ДокументЗакрытия", Неопределено);
	КонецЕсли;
	
	Возврат мСтруктураЛС;
	
КонецФункции // ПолучитьДатуОткрытияЗакрытияЛС()

// Получает данные о собственности помещения.
Функция ПолучитьДанныеОСобственностиПомещения(Помещение, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Регистратор КАК ДокументИзмененияСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Период,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Период, Помещение = &Помещение) 
	|		КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) 
	|			КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|			И (УПЖКХ_СобственникиПомещенийСрезПоследних.Действует)
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Период",    Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеОСобственностиПомещения()

// Получает данные о собственности помещения на данный лицевой счет.
Функция ПолучитьДанныеОСобственностиПомещенияПоЛицевомуСчету(Помещение, ЛицевойСчет, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = КонецДня(ТекущаяДата());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность КАК ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента КАК НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента КАК ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Период, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСобственникиПомещений.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСобственникиПомещений.Собственник) КАК КоличествоСобственников
	|ПОМЕСТИТЬ втКоличествоСобственников
	|ИЗ
	|	втСобственникиПомещений КАК втСобственникиПомещений
	|
	|СГРУППИРОВАТЬ ПО
	|	втСобственникиПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Регистратор КАК ДокументИзмененияСобственности,
	|	втСобственникиПомещений.Собственник,
	|	втСобственникиПомещений.ОснованиеПолученияВСобственность,
	|	втСобственникиПомещений.ВидДокумента,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая)
	|						ТОГДА 1
	|					ИНАЧЕ втСобственникиПомещений.ДоляСобственникаЧислитель
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоляСобственникаЧислитель,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная)
	|						ТОГДА втКоличествоСобственников.КоличествоСобственников
	|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная)
	|						ТОГДА 1
	|					ИНАЧЕ втСобственникиПомещений.ДоляСобственникаЗнаменатель
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ДоляСобственникаЗнаменатель,
	|	втСобственникиПомещений.НомерДокумента,
	|	втСобственникиПомещений.ДатаДокумента
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&Период,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втСобственникиПомещений.Помещение
	|				ИЗ
	|					втСобственникиПомещений КАК втСобственникиПомещений)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСобственникиПомещений КАК втСобственникиПомещений
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = втСобственникиПомещений.Помещение
	|		ПОЛНОЕ СОЕДИНЕНИЕ втКоличествоСобственников КАК втКоличествоСобственников
	|		ПО УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = втКоличествоСобственников.Помещение
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",  Помещение);
	Запрос.УстановитьПараметр("Период",     Дата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеОСобственностиПомещения()

// Получает данные по собственнику помещения.
Функция ПолучитьДанныеПоСобственникуПомещения(Знач СписокСобственников, Помещение, Дата = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(СписокСобственников) = Тип("СписокЗначений") Тогда
		СпСобственников = Новый СписокЗначений;
		СпСобственников.Добавить(СписокСобственников);
	Иначе
		СпСобственников = СписокСобственников;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Регистратор КАК ДокументИзмененияСобственности,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ВидДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.НомерДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДатаДокумента,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Дата,
	|			Собственник В (&Собственник)
	|				И Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) 
	|			КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|		ПО (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение = УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение)
	|			И (УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует)
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует";
	
	Если Дата = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Дата", "");
	Иначе
		Запрос.УстановитьПараметр("Дата",    Дата);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Помещение",   Помещение);
	Запрос.УстановитьПараметр("Собственник", СпСобственников);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоСобственникуПомещения()

// Получает данные о собственности здания.
Функция ПолучитьДанныеОСобственностиЗдания(Здание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение
	|ПОМЕСТИТЬ СписокПомещений
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Владелец = &Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					Помещения.Помещение
	|				ИЗ
	|					СписокПомещений КАК Помещения)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Здание", Здание);
	
	//	Тип собственности здания определяется по виду собственности помещений данного здания:
	//	если в квартирах здания все квартиры муниципальные – дом муниципальный;
	//	если в квартирах здания все квартиры государственные – дом государственный;
	//	в противном случае дом общий.
	
	ВидСобственностиЗдания = "Общая";
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Муниципальная Тогда
				ВидСобственностиЗдания = "Общая";
			ИначеЕсли Выборка.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Государственная Тогда
				ВидСобственностиЗдания = "Государственная";
			ИначеЕсли Выборка.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Ведомственная Тогда
				ВидСобственностиЗдания = "Ведомственная";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидСобственностиЗдания;
	
КонецФункции // ПолучитьДанныеОСобственностиЗдания()

// Получает сумму долей владельцев единственного жилья.
//
// Параметры
//  Лицевой счет - ссылка, анализируемый лицевой счет.
//  Дата - дата, на которую необходимо получить данные.
//
// Возвращаемое значение
//  Число - сумма долей.
//
Функция ПолучитьСуммуДолейВладельцевЕдинственногоЖилья(ЛицевойСчет, Дата) Экспорт
	
	СуммаДолей = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Жилец
	|ПОМЕСТИТЬ ТаблицаВЕЖ
	|ИЗ
	|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК КВП_СведенияОЖильцахСрезПоследних
	|ГДЕ
	|	КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец КАК Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.Владелец.Адрес КАК Помещение,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ТаблицаЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ ТаблицаСобственностиНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник
	|ПОМЕСТИТЬ ТаблицаСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК Количество
	|ПОМЕСТИТЬ ТаблицаКоличествоСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(&Дата, Помещение = &Помещение) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ТаблицаСобственников.ДоляСобственникаЧислитель, 0) КАК ДоляСобственникаЧислитель,
	|	ЕСТЬNULL(ТаблицаСобственников.ДоляСобственникаЗнаменатель, 0) КАК ДоляСобственникаЗнаменатель,
	|	ТаблицаСобственностиНаПомещения.ВидСобственности КАК ВидСобственности,
	|	ТаблицаСобственностиНаПомещения.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности,
	|	ТаблицаКоличествоСобственников.Количество КАК Количество
	|ИЗ
	|	ТаблицаВЕЖ КАК ТаблицаВЕЖ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗарегистрированных КАК ТаблицаЗарегистрированных
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобственностиНаПомещения КАК ТаблицаСобственностиНаПомещения
	|			ПО ТаблицаЗарегистрированных.Помещение = ТаблицаСобственностиНаПомещения.Помещение
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСобственников КАК ТаблицаСобственников
	|			ПО ТаблицаЗарегистрированных.ФизЛицо = ТаблицаСобственников.Собственник
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоСобственников КАК ТаблицаКоличествоСобственников
	|			ПО ТаблицаЗарегистрированных.Помещение = ТаблицаКоличествоСобственников.Помещение
	|		ПО ТаблицаВЕЖ.Жилец = ТаблицаЗарегистрированных.Жилец
	|ИТОГИ
	|	МАКСИМУМ(ПодвидЧастнойСобственности),
	|	МАКСИМУМ(Количество)
	|ПО
	|	ВидСобственности";
	
	Запрос.УстановитьПараметр("Дата",        Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   ЛицевойСчет.Адрес);
	
	ВыборкаПоСобственности = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаПоСобственности.Следующий() Тогда
		
		Если ВыборкаПоСобственности.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная
		   И ВыборкаПоСобственности.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная Тогда
			
			// Получим количество владельцев единственного жилья.
			КоличествоВЕЖ = ВыборкаПоСобственности.Выбрать().Количество();
			// Для совместной собственности коэффициент равен отношению количеств ВЕЖ к количеству собственников.
			СуммаДолей = КоличествоВЕЖ / ВыборкаПоСобственности.Количество;
			
		ИначеЕсли ВыборкаПоСобственности.ВидСобственности = Перечисления.УПЖКХ_ВидыСобственности.Частная
		   И ВыборкаПоСобственности.ПодвидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая Тогда
			
			// Если собственность долевая, то необходимо сложить доли владельцев единственного жилья.
			ВыборкаДеталей = ВыборкаПоСобственности.Выбрать();
			СуммаДолейЧислитель   = 1;
			СуммаДолейЗнаменатель = 1;
			
			Пока ВыборкаДеталей.Следующий() Цикл
				СложитьДроби(СуммаДолейЧислитель, СуммаДолейЗнаменатель,
							 ВыборкаДеталей.ДоляСобственникаЧислитель, ВыборкаДеталей.ДоляСобственникаЗнаменатель,
							 СуммаДолейЧислитель, СуммаДолейЗнаменатель); // Результат.
			КонецЦикла;
			
			Если СуммаДолейЗнаменатель = 0 Тогда
				СуммаДолей = 0;
			Иначе
				СуммаДолей = (СуммаДолейЧислитель / СуммаДолейЗнаменатель) - 1;
			КонецЕсли;
			
		Иначе
			// Для частной индивидуальной собственности, муниципальной и государственной.
			СуммаДолей = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СуммаДолей;
	
КонецФункции // ПолучитьСуммуДолейВладельцевЕдинственногоЖилья()

// Формирует таблицу параметров лицевых счетов для облегчения вывода в
// табличных полях.
//
// Параметры:
//  СписокЛицевыхСчетов - Массив или Список значений - список лицевых счетов, по которым необходимы данные.
//  Период              - Дата   - дата получения данных.
//  ЗапросПараметровЛС  - Запрос - переменная для хранения запроса - для избежания множественной инициализации.
//
// Возвращаемое значение:
//  Таблица значений с колонками: "ЛицевойСчет", "Помещение" и "Владелец", проиндексированная по колонке "ЛицевойСчет".
//
Функция ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах(СписокЛицевыхСчетов,
														 Период, 
														 ЗапросПараметровЛС = Неопределено) Экспорт
	
	Если ЗапросПараметровЛС = Неопределено Тогда
		ЗапросПараметровЛС = Новый Запрос();
		ЗапросПараметровЛС.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеЛС.ЛицевойСчет,
		|	ДанныеЛС.Здание КАК Здание,
		|	ДанныеЛС.Помещение КАК Помещение,
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец,
		|	ДанныеЛС.Помещение.Представление КАК ПомещениеПредставление,
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Представление КАК ВладелецПредставление
		|ИЗ
		|	(ВЫБРАТЬ
		|		КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|		КВП_ЛицевыеСчета.Адрес КАК Помещение,
		|		КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
		|	ИЗ
		|		Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|	ГДЕ
		|		КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)) КАК ДанныеЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(&Дата, ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|		ПО ДанныеЛС.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет";
	КонецЕсли;
	
	ЗапросПараметровЛС.УстановитьПараметр("СписокЛС", СписокЛицевыхСчетов);
	ЗапросПараметровЛС.УстановитьПараметр("Дата",     Период);
	
	ТаблицаДанныхЛС = ЗапросПараметровЛС.Выполнить().Выгрузить();
	ТаблицаДанныхЛС.Индексы.Добавить("ЛицевойСчет");
	
	Возврат ТаблицаДанныхЛС;
	
КонецФункции // ПолучитьПараметрыЛицевыхСчетовДляВыводаВТаблицах()

// Получает первый попавшийся вид помещения соответствующего типа.
//
// Параметры:
//  Тип_Помещения - ПеречислениеСсылка.КВП_ТипыПомещений.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыПомещений.
//
Функция ПолучитьВидПомещенияПоТипуПомещения(ТипПомещения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыПомещений.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК ВидыПомещений
	|ГДЕ
	|	ВидыПомещений.ТипПомещения = &ТипПомещения";
	
	Запрос.УстановитьПараметр("ТипПомещения", ТипПомещения);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат ?(Результат.Количество() > 0, Результат[0].Ссылка, Справочники.УПЖКХ_ВидыПомещений.ПустаяСсылка());
	
КонецФункции

// Формирует список видов помещений по указанному типу помещения.
//
// Параметры:
//  Тип_Помещения - ПеречислениеСсылка.КВП_ТипыПомещений.
//
// Возвращаемое значение:
//  СписокЗначений - список элементов справочника ВидыПомещений с соответствующим значением реквизита ТипПомещения.
//
Функция ПолучитьСписокВидыПомещенийПоТипуПомещения(ТипПомещения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПомещений.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК ВидыПомещений
	|ГДЕ
	|	ВидыПомещений.ТипПомещения = &ТипПомещения";
	
	Запрос.УстановитьПараметр("ТипПомещения", ТипПомещения);
	Результат = Запрос.Выполнить().Выгрузить();
	массив_ВидыПомещений = Результат.ВыгрузитьКолонку("Ссылка");
	СписокВидыПомещений = Новый СписокЗначений;
	СписокВидыПомещений.ЗагрузитьЗначения(массив_ВидыПомещений);
	
	Возврат СписокВидыПомещений;
	
КонецФункции

// Формирует список видов помещений по указанному списку типов помещений.
//
// Параметры:
//  СписокТипыПомещений - список типов помещений (каждый элемент - ПеречислениеСсылка.КВП_ТипыПомещений).
//
// Возвращаемое значение:
//  СписокЗначений - список элементов справочника ВидыПомещений с соответствующими значениями реквизита ТипПомещения.
//
Функция ПолучитьСписокВидыПомещенийПоСпискуТиповПомещений(СписокТипыПомещений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПомещений.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК ВидыПомещений
	|ГДЕ
	|	ВидыПомещений.ТипПомещения В(&ТипыПомещений)";
	
	Запрос.УстановитьПараметр("ТипыПомещений", СписокТипыПомещений);
	Результат = Запрос.Выполнить().Выгрузить();
	массив_Виды_Помещений = Результат.ВыгрузитьКолонку("Ссылка");
	СписокВидыПомещений = Новый СписокЗначений;
	СписокВидыПомещений.ЗагрузитьЗначения(массив_Виды_Помещений);
	
	Возврат СписокВидыПомещений;
	
КонецФункции

// Функция получает значение константы УПЖКХ_УпрощенныйВариантУчетаСобственников.
//
Функция ИспользуетсяУпрощенныйВариантУчетаСобственников() Экспорт
	
	Возврат Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Получить();
	
КонецФункции

//
//
Функция ПолучитьСтруктуруПредставленияОтветственногоСобственника() Экспорт
	
	ПредставлениеСобственника = Новый Структура;
	
	ПредставлениеСобственника.Вставить("ЧастныйСобственник",       "Ответственный собственник");
	ПредставлениеСобственника.Вставить("МуниципальныйСобственник", "Наниматель");
	ПредставлениеСобственника.Вставить("ПрочийСобственник",        "Ответственный собственник, наниматель");
	
	Возврат ПредставлениеСобственника;
	
КонецФункции

// Функция возвращает для списка объектов таблицу услуг, действовавших на начало периода
//  и назначенных в месяце начисления.
//
// Параметры:
//  Дата - дата, на которую происходит поиск действующих услуг.
//  Параметры - структура с параметрами запроса.
//  ДополнительныеУсловия - строка - дополнительные условия запроса.
//
// Возвращаемое значение:
//  Таблица значений - таблица лицевых счетов с действующими услугами.
//
Функция КВП_ПолучитьТаблицуДействующихУслугВПериоде(Период, СписокОбъектов, СписокУслуг = Неопределено,
													Параметры = Неопределено, ДополнительныеУсловия = "", ТекстФильтраНаОбъект = "") Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		
		ПустаяТаблица = Новый ТаблицаЗначений;
		ПустаяТаблица.Колонки.Добавить("Объект",            Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ПустаяТаблица.Колонки.Добавить("ОбъектАдрес",       Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
		ПустаяТаблица.Колонки.Добавить("ОбъектНаименование",УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ПустаяТаблица.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ПустаяТаблица.Колонки.Добавить("СпособРасчета",     Новый ОписаниеТипов("ПеречислениеСсылка.КВП_СпособыРасчета"));
		Возврат ПустаяТаблица;
		
	КонецЕсли;
	
	// Получим действующие начисления на начало месяца и установленные назначение в месяце начисления.
	// Т.е. запрос возвращает список объектов и услуг, которые действовали хотя бы один день в периоде расчета.
	//
	// АЛГОРИТМ ВЫПОЛНЕНИЯ ЗАПРОСА:
	// 1. Получаем настройки услуг.
	// 2. Получаем данные об изменениях действия услуг в течение месяца,
	//    сворачиваем их по максимуму Периода, тем самым получая наиболее актуальные данные по датам изменения.
	// 3. Из данных изменения действия п.2 отбираем объекты и услуги, которые были назначены в течение периода.
	// 4. Получаем данные об отключениях услуг первого числа месяца, чтобы далее исключить действующие на начало месяца услуги.
	// 5. Получаем действие услуг на начало месяца, и при этом отбираем только те объекты и услуги, по которым
	//    не было отключения услуги первого числа месяца, например, на 31.01 услуга действовала, а с 01.02 была отменена.
	//    Для этого соединяем таблицу среза с таблицей п.4 и отбираем только те, для которых нет данных об отключении
	//    услуги первого числа месяца.
	// 6. Объединяем результаты п.3 и п.6, получив в итоге список услуг и объектов, по которым услуга
	//    действовала хотя бы один день.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	МАКСИМУМ(ЕСТЬNULL(КВП_УслугиСоставныеУслуги.Услуга.СпособРасчета, КВП_Услуги.СпособРасчета)) КАК СпособРасчета,
	|	МАКСИМУМ(ЕСТЬNULL(КВП_УслугиСоставныеУслуги.Услуга.ВидПлощади, КВП_Услуги.ВидПлощади)) КАК ВидПлощади
	|ПОМЕСТИТЬ ВрТблУслуг
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги
	|		ПО (КВП_УслугиСоставныеУслуги.Ссылка = КВП_Услуги.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_Услуги.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрТблУслуг.Услуга,
	|	ВрТблУслуг.СпособРасчета,
	|	ВрТблУслуг.ВидПлощади
	|ПОМЕСТИТЬ ВрТаблУслуг
	|ИЗ
	|	ВрТблУслуг КАК ВрТблУслуг
	|ГДЕ
	|	&ТекстУсловия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисления.Период КАК Период,
	|	КВП_НазначенныеНачисления.Объект КАК Объект,
	|	ВрТаблУслуг.Услуга КАК Услуга,
	|	КВП_НазначенныеНачисления.Действует,
	|	КВП_НазначенныеНачисления.ДатаИзменения
	|ПОМЕСТИТЬ втНазначенияВПериоде
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрТаблУслуг КАК ВрТаблУслуг
	|		ПО КВП_НазначенныеНачисления.Услуга = ВрТаблУслуг.Услуга
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период <= &Дата
	|	И КВП_НазначенныеНачисления.Объект В(&Объекты)
	|	И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ)
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И &ТекстФильтраНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втНазначенияВПериоде.Период) КАК Период,
	|	втНазначенияВПериоде.Объект,
	|	втНазначенияВПериоде.Услуга,
	|	втНазначенияВПериоде.ДатаИзменения
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втНазначенияВПериоде КАК втНазначенияВПериоде
	|
	|СГРУППИРОВАТЬ ПО
	|	втНазначенияВПериоде.Объект,
	|	втНазначенияВПериоде.Услуга,
	|	втНазначенияВПериоде.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенияВПериоде.Объект,
	|	втНазначенияВПериоде.Услуга,
	|	втНазначенияВПериоде.ДатаИзменения,
	|	втНазначенияВПериоде.Действует
	|ПОМЕСТИТЬ втИзмененныеНачисленияВПериоде
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенияВПериоде КАК втНазначенияВПериоде
	|		ПО втПериоды.Период = втНазначенияВПериоде.Период
	|			И втПериоды.Объект = втНазначенияВПериоде.Объект
	|			И втПериоды.Услуга = втНазначенияВПериоде.Услуга
	|			И втПериоды.ДатаИзменения = втНазначенияВПериоде.ДатаИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзмененныеНачисленияВПериоде.Объект,
	|	втИзмененныеНачисленияВПериоде.Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисленияВПериоде
	|ИЗ
	|	втИзмененныеНачисленияВПериоде КАК втИзмененныеНачисленияВПериоде
	|ГДЕ
	|	втИзмененныеНачисленияВПериоде.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИзмененныеНачисленияВПериоде.Объект КАК ОбъектНазначения,
	|	втИзмененныеНачисленияВПериоде.Услуга
	|ПОМЕСТИТЬ втНачисленияОтмененныеВПервыйДеньПериода
	|ИЗ
	|	втИзмененныеНачисленияВПериоде КАК втИзмененныеНачисленияВПериоде
	|ГДЕ
	|	втИзмененныеНачисленияВПериоде.ДатаИзменения = НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)
	|	И НЕ втИзмененныеНачисленияВПериоде.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	ВрТаблУслуг.Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ),
	|			Организация = &Организация
	|				И Объект В (&Объекты)
	|				И ДатаИзменения <= НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрТаблУслуг КАК ВрТаблУслуг
	|		ПО КВП_НазначенныеНачисленияСрезПоследних.Услуга = ВрТаблУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияОтмененныеВПервыйДеньПериода КАК втНачисленияОтмененныеВПервыйДеньПериода
	|		ПО КВП_НазначенныеНачисленияСрезПоследних.Объект = втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения
	|			И КВП_НазначенныеНачисленияСрезПоследних.Услуга = втНачисленияОтмененныеВПервыйДеньПериода.Услуга
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|	И ЕСТЬNULL(втНачисленияОтмененныеВПервыйДеньПериода.ОбъектНазначения, ИСТИНА) = ИСТИНА
	|	И &ТекстФильтраНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеНачисления.Объект КАК Объект,
	|	втНазначенныеНачисления.Услуга КАК Услуга
	|ПОМЕСТИТЬ втДействующиеНачисления
	|ИЗ
	|	втНазначенныеНачисления КАК втНазначенныеНачисления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втНазначенныеНачисленияВПериоде.Объект,
	|	втНазначенныеНачисленияВПериоде.Услуга
	|ИЗ
	|	втНазначенныеНачисленияВПериоде КАК втНазначенныеНачисленияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисленияВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДействующиеНачисления.Объект КАК Объект,
	|	втДействующиеНачисления.Объект.Адрес КАК ОбъектАдрес,
	|	втДействующиеНачисления.Объект.Наименование КАК ОбъектНаименование,
	|	втДействующиеНачисления.Услуга,
	|	втДействующиеНачисления.Услуга.СпособРасчета КАК СпособРасчета
	|ИЗ
	|	втДействующиеНачисления КАК втДействующиеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектНаименование";
	
	Если НЕ Параметры = Неопределено Тогда
		Для Каждого Параметр ИЗ Параметры Цикл
			Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",    Период);
	Запрос.УстановитьПараметр("Объекты", СписокОбъектов);
	
	// сформируем тексты условий запроса
	ТекстУсловия = "ИСТИНА";
	Если НЕ СписокУслуг = Неопределено Тогда
		ТекстУсловия = "Услуга В ИЕРАРХИИ (&Услуги)";
		Запрос.УстановитьПараметр("Услуги", СписокУслуг);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
		ТекстУсловия = ТекстУсловия + " И " + ДополнительныеУсловия;
	КонецЕсли;
	
	ТекстФильтраНаОбъект = ?(ПустаяСтрока(ТекстФильтраНаОбъект), "ИСТИНА", ТекстФильтраНаОбъект);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия",         ТекстУсловия);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстФильтраНаОбъект", ТекстФильтраНаОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // КВП_ПолучитьТаблицуДействующихУслугВПериоде()

// Дополняет запрос временной таблицей с информацией о назначенных услугах для списка объектов.
//
// Параметры
//  Запрос         - запрос для дополнения.
//  Дата           - дата, на которую происходит поиск действующих услуг.
//  Организация    - организация, для которой происходит поиск действующих услуг.
//  СписокОбъектов - объект или список объектов.
//  СписокУслуг    - услуга или список услуг.
//
Процедура ДополнитьЗапросНазначеннымиУслугами(Запрос, Дата, Организация = Неопределено, СписокОбъектов = Неопределено, 
												СписокУслуг = Неопределено, ДополнительныеУсловия = "", СтруктураНастроекКапРемонта = Неопределено) Экспорт
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Регистратор,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.ДатаИзменения КАК Период,
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация
	|ПОМЕСТИТЬ врТаблицаДействующихУслуг
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&Дата,
	|			ДатаИзменения <= &Дата
	|				И &ТекстУсловия) КАК КВП_НазначенныеНачисленияСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Дата);
	
	ТекстУсловия = "ИСТИНА";
	Если НЕ СписокОбъектов = Неопределено Тогда
		ТекстУсловия = "Объект В (&Объекты)";
		Запрос.УстановитьПараметр("Объекты", СписокОбъектов);
	КонецЕсли;
	
	Если НЕ Организация = Неопределено Тогда
		ТекстУсловия = ТекстУсловия + " И Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если НЕ СписокУслуг = Неопределено Тогда
		ТекстУсловия = ТекстУсловия + " И Услуга В (&Услуги)";
		Запрос.УстановитьПараметр("Услуги", СписокУслуг);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДополнительныеУсловия) Тогда
		ТекстУсловия = ТекстУсловия + " И " + ДополнительныеУсловия;
	КонецЕсли;
	
	Если НЕ СтруктураНастроекКапРемонта = Неопределено Тогда
		Если СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			Если СтруктураНастроекКапРемонта.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт Тогда
				ТекстУсловия = ТекстУсловия + " И Услуга НЕ В (&УслугиКапРемонта)";
			ИначеЕсли СтруктураНастроекКапРемонта.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
				ТекстУсловия = ТекстУсловия + " И Услуга В (&УслугиКапРемонта)";
			КонецЕсли;
		Запрос.УстановитьПараметр("УслугиКапРемонта", СтруктураНастроекКапРемонта.СписокУслуг);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловия", ТекстУсловия);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ДополнитьЗапросНазначеннымиУслугами()

#КонецОбласти

#Область ФормированиеСписковДанных

// Формирует список элементов справочника, иерархически принадлежащих
// указанному элементу.
//
// Параметры
//  Элемент      – группа справочника.
//  ВыбиратьПодчиненныеГруппы – Булево – следует ли выбирать группы.
//
// Возвращаемое значение:
//  СписокЗначений – список элементов справочника.
//
Функция ПолучитьЭлементыСправочникаПоГруппе(Элемент, ВыбиратьПодчиненныеГруппы = Ложь) Экспорт
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("СписокЗначений") Тогда
		Возврат Элемент;
	КонецЕсли;
	
	СписокЭлементов = Новый СписокЗначений();
	
	Попытка
		ИмяОбъектаМетаданных = Элемент.Метаданные().ПолноеИмя();
	Исключение
		Возврат СписокЭлементов;
	КонецПопытки;
	
	Если Не Найти(ИмяОбъектаМетаданных, "Справочник.") = 1 Тогда
		Возврат СписокЭлементов;
	КонецЕсли;
	
	Если Элемент.ЭтоГруппа Тогда
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Справочник.Ссылка
		|ИЗ
		|	" + ИмяОбъектаМетаданных + " КАК Справочник
		|ГДЕ
		|	Справочник.Ссылка В ИЕРАРХИИ(&Элемент)
		|	" + ?(ВыбиратьПодчиненныеГруппы, "", " И Справочник.ЭтоГруппа = ЛОЖЬ") + "
		|УПОРЯДОЧИТЬ ПО
		|	Справочник.Наименование";
		
		Запрос.УстановитьПараметр("Элемент", Элемент);
		
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		СписокЭлементов.ЗагрузитьЗначения(МассивСсылок);
		
	Иначе
		СписокЭлементов.Добавить(Элемент);
		
	КонецЕсли;
	
	Возврат СписокЭлементов;
	
КонецФункции // ПолучитьЭлементыСправочникаПоГруппе()

// Формирует список счетчиков, установленных на указанный объект.
//
// Параметры:
//  Объект						 - Ссылка - объект, на который установлены счетчики;
//  Период						 - Дата   - дата, на которую получаются данные;
//  Услуга						 - Ссылка - услуга или коммунальный ресурс, для кот. установлены счетчики. Значение по умолчанию "Неопределено";
//  ТолькоДействующиеСчетчики	 - Булево - "Истина", если необходимо получить только действующие счетчики,
//                                          "Ложь", если необходимо получить все счетчики;
//  ВключатьГраницу				 - Булево - "Истина", если необходимо включить в отбор дату документа,
//                                          "Ложь", если дата документа в отбор не включается.
// 
// Возвращаемое значение:
//  СписокЗначений – список счетчиков.
//
Функция ПолучитьСписокУстановленныхСчетчиков(Объект, Период, Услуга = Неопределено, ТолькоДействующиеСчетчики = Истина, ВключатьГраницу = Истина) Экспорт
	
	СписокСчетчиков = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокСчетчиков;
	КонецЕсли;
	
	СписокОбъектов = ПолучитьЭлементыСправочникаПоГруппе(Объект);
	
	ИспользуемыйВидГраницы = ?(ВключатьГраницу, ВидГраницы.Включая, ВидГраницы.Исключая);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период",                    Период);
	Запрос.УстановитьПараметр("КонГраница",                Новый Граница(Период, ИспользуемыйВидГраницы));
	Запрос.УстановитьПараметр("СписокОбъектов",            СписокОбъектов);
	Запрос.УстановитьПараметр("ТолькоДействующиеСчетчики", ТолькоДействующиеСчетчики);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&КонГраница,
	|			Объект В (&СписокОбъектов)
	|			И ДатаИзменения <= &Период";
	
	Если Услуга <> Неопределено Тогда
		Запрос.УстановитьПараметр("Услуга", Услуга);
		ТекстЗапроса = ТекстЗапроса + "
		|	И Счетчик.ВидУслуги = &Услуга";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|		ИЛИ НЕ &ТолькоДействующиеСчетчики";
	
	Запрос.Текст = ТекстЗапроса;
	
	СписокСчетчиков.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счетчик"));
	
	Возврат СписокСчетчиков;
	
КонецФункции // ПолучитьСписокУстановленныхСчетчиков()

// Формирует список зданий, содержащих указанные подъезды.
//
// Параметры:
//  СписокПодъездов - СписокЗначений - список подъездов.
//
// Возвращаемое значение:
//  СписокЗначений - список зданий.
//
Функция КВП_ПолучитьСписокЗданийПоПодъездам(СписокПодъездов) Экспорт
	
	СписокЗданий = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЗданий;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Подъезды.Владелец КАК Здание
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Ссылка В(&СписокПодъездов)";
	
	Запрос.УстановитьПараметр("СписокПодъездов", СписокПодъездов);
	
	СписокЗданий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Здание"));
	
	Возврат СписокЗданий;
	
КонецФункции // КВП_ПолучитьСписокПодъездовПоЗданиям()

// Формирует список зданий, содержащих указанные помещения.
//
// Параметры:
//  СписокПомещений - СписокЗначений - список помещений.
//
// Возвращаемое значение:
//  СписокЗначений - список зданий.
//
Функция КВП_ПолучитьСписокЗданийПоПомещениям(СписокПомещений) Экспорт
	
	СписокЗданий = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЗданий;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_Помещения.Владелец КАК Здание
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Ссылка В(&СписокПомещений)";
	
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);

	СписокЗданий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Здание"));
	
	Возврат СписокЗданий;
	
КонецФункции // КВП_ПолучитьСписокЗданийПоПомещениям()

// Формирует список зданий по указанным лицевым счетам.
//
// Параметры:
//  СписокЛицевыхСчетов - СписокЗначений - список лицевых счетов.
//
// Возвращаемое значение:
//  СписокЗначений - список зданий.
//
Функция КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокЛицевыхСчетов) Экспорт
	
	СписокЗданий = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЗданий;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛицевыхСчетов)";
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	СписокЗданий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Здание"));
	
	Возврат СписокЗданий;
	
КонецФункции // КВП_ПолучитьСписокПодъездовПоЗданиям()

// Формирует список подъездов, находящихся в указанных зданиях.
//
// Параметры:
//  СписокЗданий - СписокЗначений - список подъездов.
//
// Возвращаемое значение:
//  СписокЗначений - список подъездов.
//
Функция КВП_ПолучитьСписокПодъездовПоЗданиям(СписокЗданий) Экспорт
	
	СписокПодъездов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПодъездов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Подъезды.Ссылка КАК Подъезд
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Владелец В(&СписокЗданий)";
	
	Запрос.УстановитьПараметр("СписокЗданий", СписокЗданий);
	
	СписокПодъездов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подъезд"));
	
	Возврат СписокПодъездов;
	
КонецФункции // КВП_ПолучитьСписокПодъездовПоЗданиям()

// Формирует список подъездов по указанным лицевым счетам.
//
// Параметры:
//  СписокЛицевыхСчетов - СписокЗначений - список лицевых счетов.
//
// Возвращаемое значение:
//  СписокЗначений - список подъездов.
//
Функция КВП_ПолучитьСписокПодъездовПоЛицевымСчетам(СписокЛицевыхСчетов) Экспорт
	
	СписокПодъездов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПодъездов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Владелец,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчета.Адрес.Код КАК Код
	|ПОМЕСТИТЬ врЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛицевыхСчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Подъезды.Ссылка КАК Подъезд
	|ИЗ
	|	врЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ПО КВП_ЛицевыеСчета.Владелец = КВП_Подъезды.Владелец
	|			И (ВЫБОР
	|				КОГДА НЕ КВП_ЛицевыеСчета.Подъезд = ЗНАЧЕНИЕ(Справочник.КВП_Подъезды.ПустаяСсылка)
	|					ТОГДА КВП_ЛицевыеСчета.Подъезд = КВП_Подъезды.Ссылка
	|				ИНАЧЕ КВП_ЛицевыеСчета.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	СписокПодъездов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подъезд"));
	
	Возврат СписокПодъездов;
	
КонецФункции // КВП_ПолучитьСписокПодъездовПоЗданиям()

// Формирует список лицевых счетов по указанным подъездам.
//
// Параметры:
//  СписокПодъездов - СписокЗначений - список подъездов.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
Функция КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокПодъездов, НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЛицевыхСчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.Ссылка КАК Ссылка,
	|	КВП_Подъезды.НомерПервойКвартиры КАК НомерПервойКвартиры,
	|	КВП_Подъезды.НомерПоследнейКвартиры КАК НомерПоследнейКвартиры,
	|	КВП_Подъезды.Владелец КАК Здание
	|ПОМЕСТИТЬ врПодъезды
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Ссылка В ИЕРАРХИИ(&СписокПодъездов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Объект.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчета.Объект.Код КАК Код,
	|	КВП_ЛицевыеСчета.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ врЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&НачПериода, ) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	&УсловиеДействия";
	
	Если НЕ КонПериода = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет,
		|	КВП_ЛицевыеСчета.Объект.Подъезд КАК Подъезд,
		|	КВП_ЛицевыеСчета.Объект.Код КАК Код,
		|	КВП_ЛицевыеСчета.Объект.Владелец КАК Здание
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
		|	И &УсловиеДействия";
		Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	врЛицевыеСчета КАК КВП_ЛицевыеСчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ врПодъезды КАК КВП_Подъезды
	|		ПО КВП_ЛицевыеСчета.Здание = КВП_Подъезды.Здание
	|			И (ВЫБОР
	|				КОГДА НЕ КВП_ЛицевыеСчета.Подъезд = ЗНАЧЕНИЕ(Справочник.КВП_Подъезды.ПустаяСсылка)
	|					ТОГДА КВП_ЛицевыеСчета.Подъезд = КВП_Подъезды.Ссылка
	|				ИНАЧЕ КВП_ЛицевыеСчета.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("НачПериода",      НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокПодъездов", СписокПодъездов);
	
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов по списку подъездов.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам()

// Формирует список лицевых счетов по указанным зданиям.
//
// Параметры:
//  СписокЗданий - СписокЗначений - список зданий.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
Функция КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЗданий, НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина, ВыгружатьТаблицуВКачествеРезультата = Ложь) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		
		Если ВыгружатьТаблицуВКачествеРезультата = Истина Тогда
			СписокЛицевыхСчетов = Новый ТаблицаЗначений;
			СписокЛицевыхСчетов.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
			СписокЛицевыхСчетов.Колонки.Добавить("Здание", Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
		КонецЕсли;
		
		Возврат СписокЛицевыхСчетов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Здание
	|ПОМЕСТИТЬ втЗдания
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В ИЕРАРХИИ(&СписокЗданий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Владелец В
	|			(ВЫБРАТЬ
	|				втЗдания.Здание
	|			ИЗ
	|				втЗдания КАК втЗдания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачПериода,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втПомещения.Помещение
	|				ИЗ
	|					втПомещения КАК втПомещения)) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	&УсловиеДействия";
	
	Если НЕ КонПериода = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Здание
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
		|	И КВП_ЛицевыеСчета.Объект В
		|			(ВЫБРАТЬ
		|				втПомещения.Помещение
		|			ИЗ
		|				втПомещения КАК втПомещения)
		|	И &УсловиеДействия";
		Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода",   НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокЗданий", СписокЗданий);
	
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов по списку зданий.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	// Выгружаем таблицу, если требуется. Иначе выгружаем список.
	Если ВыгружатьТаблицуВКачествеРезультата Тогда
		СписокЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
		
		СписокЛицевыхСчетов.Индексы.Добавить("Здание");
	Иначе
		СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	КонецЕсли;
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям()

// Формирует список лицевых счетов по указанным группам.
//
// Параметры:
//  СписокГруппЛС - СписокЗначений - список групп лицевых счетов.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
Функция КВП_ПолучитьСписокЛицевыхСчетовПоГруппам(СписокГруппЛС, НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина, НеПомеченныеНаУдаление = Ложь) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЛицевыхСчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачПериода,
	|			ЛицевойСчет В ИЕРАРХИИ (&СписокГруппЛС)
	|				И &УсловиеПометкиНаУдаление) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	&УсловиеДействия";
	
	Если НЕ КонПериода = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
		|	И &УсловиеПометкиНаУдаление
		|	И &УсловиеДействия
		|	И КВП_ЛицевыеСчета.ЛицевойСчет В ИЕРАРХИИ(&СписокГруппЛС)";
		Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода",    НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокГруппЛС", СписокГруппЛС);
	
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов по списку групп лицевых счетов.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	Если НеПомеченныеНаУдаление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПометкиНаУдаление", "НЕ ЛицевойСчет.ПометкаУдаления");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПометкиНаУдаление", "ИСТИНА");
	КонецЕсли;
	
	СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовПоГруппам()

// Функция - Получить список лицевых счетов с отбором.
//
// Параметры:
//  НачПериода        - Дата           - дата начала периода отбора;
//  КонПериода        - Дата           - дата окончания периода отбора;
//  ТолькоДействующие - Булево         - признак отбора действующих лицевых счетов;
//  СписокЛС          - СписокЗначений - список лицевых счетов для отбора.
// 
// Возвращаемое значение:
//  Список значений - Список лицевых счетов.
//
Функция КВП_ПолучитьСписокЛицевыхСчетовСОтбором(НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина, СписокЛС = Неопределено) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&НачПериода, &УсловиеНаЛицевыеСчета) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	&УсловиеДействия";
	
	Если НЕ КонПериода = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
		|	И &УсловиеНаЛицевыеСчета
		|	И &УсловиеДействия";
		Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокЛС",   СписокЛС);
	
	// Если необходимо получить только действующие счета - установим отбор по ним.
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	// Если задан список л/с - установим его в качестве дополнительного параметра отбора.
	Если СписокЛС = Неопределено Тогда
		// Для получения всех лицевых счетов по списку зданий.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛицевыеСчета", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛицевыеСчета", "ЛицевойСчет В (&СписокЛС)");
	КонецЕсли;
	
	СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовСОтбором()

// Формирует список лицевых счетов по указанным помещениям.
//
// Параметры:
//  СписокПомещений - СписокЗначений - список помещений.
//
// Возвращаемое значение:
//  СписокЗначений - список лицевых счетов.
//
Функция КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СписокПомещений, НачПериода, КонПериода = Неопределено, ТолькоДействующие = Истина) Экспорт
	
	СписокЛицевыхСчетов = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокЛицевыхСчетов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&НачПериода,
	|					Объект В ИЕРАРХИИ (&СписокПомещений)) КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	&УсловиеДействия";
	Если НЕ КонПериода = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КВП_ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Период МЕЖДУ &НачПериода И &КонПериода
		|	И КВП_ЛицевыеСчета.Объект В ИЕРАРХИИ (&СписокПомещений)
		|	И &УсловиеДействия";
		Запрос.УстановитьПараметр("КонПериода", КонецДня(КонПериода));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачПериода",      НачалоДня(НачПериода));
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);
	
	Если ТолькоДействующие Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "КВП_ЛицевыеСчета.Действует");
	Иначе
		// Для получения всех лицевых счетов по списку помещений.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДействия", "ИСТИНА");
	КонецЕсли;
	
	СписокЛицевыхСчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	
	Возврат СписокЛицевыхСчетов;
	
КонецФункции // КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям()

// Формирует список помещений по указанным зданиям.
//
// Параметры:
//  СписокЗданий - СписокЗначений - список зданий.
//
// Возвращаемое значение:
//  СписокЗначений - список помещений.
//
Функция КВП_ПолучитьСписокПомещенийПоЗданиям(СписокЗданий) Экспорт
	
	СписокПомещений = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПомещений;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Квартиры.Ссылка КАК Помещение
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК КВП_Квартиры
	|ГДЕ
	|	КВП_Квартиры.Владелец В ИЕРАРХИИ(&СписокЗданий)
	|	И КВП_Квартиры.Родитель = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("СписокЗданий", СписокЗданий);
	
	СписокПомещений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Помещение"));
	
	Возврат СписокПомещений;
	
КонецФункции // КВП_ПолучитьСписокПомещенийПоЗданиям()

// Формирует список помещений по указанным подъездам.
//
// Параметры:
//  СписокПодъездов - СписокЗначений - список подъездов.
//
// Возвращаемое значение:
//  СписокЗначений - список помещений.
//
Функция КВП_ПолучитьСписокПомещенийПоПодъездам(СписокПодъездов) Экспорт
	
	СписокПомещений = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПомещений;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.Ссылка КАК Ссылка,
	|	КВП_Подъезды.Владелец КАК Владелец,
	|	КВП_Подъезды.НомерПервойКвартиры КАК НомерПервойКвартиры,
	|	КВП_Подъезды.НомерПоследнейКвартиры КАК НомерПоследнейКвартиры
	|ПОМЕСТИТЬ врПодъезды
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Ссылка В ИЕРАРХИИ(&СписокПодъездов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Квартиры.Ссылка КАК Помещение
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК КВП_Квартиры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врПодъезды КАК КВП_Подъезды
	|		ПО КВП_Квартиры.Владелец = КВП_Подъезды.Владелец
	|			И (ВЫБОР
	|				КОГДА НЕ КВП_Квартиры.Подъезд = ЗНАЧЕНИЕ(Справочник.КВП_Подъезды.ПустаяСсылка)
	|					ТОГДА КВП_Квартиры.Подъезд = КВП_Подъезды.Ссылка
	|				ИНАЧЕ КВП_Квартиры.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("СписокПодъездов", СписокПодъездов);
	
	СписокПомещений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Помещение"));
	
	Возврат СписокПомещений;
	
КонецФункции // КВП_ПолучитьСписокПомещенийПоПодъездам()

// Формирует список помещений по указанным лицевым счетам.
//
// Параметры:
//  СписокЛицевыхСчетов - СписокЗначений - список лицевых счетов.
//
// Возвращаемое значение:
//  СписокЗначений - список помещений.
//
Функция КВП_ПолучитьСписокПомещенийПоЛицевымСчетам(СписокЛицевыхСчетов) Экспорт
	
	СписокПомещений = Новый СписокЗначений();
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПомещений;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В ИЕРАРХИИ(&СписокЛицевыхСчетов)";
	
	Запрос.УстановитьПараметр("СписокЛицевыхСчетов", СписокЛицевыхСчетов);
	
	СписокПомещений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Помещение"));
	
	Возврат СписокПомещений;
	
КонецФункции // КВП_ПолучитьСписокПомещенийПоЛицевымСчетам()

// Формирует список подъездов по указанным помещениям.
//
// Параметры:
//  СписокПомещений - СписокЗначений - список помещений.
//
// Возвращаемое значение:
//  СписокЗначений - список подъездов.
//
Функция КВП_ПолучитьСписокПодъездовПоПомещениям(СписокПомещений) Экспорт
	
	СписокПодъездов = Новый СписокЗначений();

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокПодъездов;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Ссылка,
	|	УПЖКХ_Помещения.Владелец КАК Владелец,
	|	УПЖКХ_Помещения.Подъезд,
	|	УПЖКХ_Помещения.Код КАК Код
	|ПОМЕСТИТЬ врПомещения
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Ссылка В(&СписокПомещений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_Подъезды.Ссылка КАК Подъезд
	|ИЗ
	|	врПомещения КАК УПЖКХ_Помещения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ПО УПЖКХ_Помещения.Владелец = КВП_Подъезды.Владелец
	|			И (ВЫБОР
	|				КОГДА НЕ УПЖКХ_Помещения.Подъезд = ЗНАЧЕНИЕ(Справочник.КВП_Подъезды.ПустаяСсылка)
	|					ТОГДА УПЖКХ_Помещения.Подъезд = КВП_Подъезды.Ссылка
	|				ИНАЧЕ УПЖКХ_Помещения.Код МЕЖДУ КВП_Подъезды.НомерПервойКвартиры И КВП_Подъезды.НомерПоследнейКвартиры
	|			КОНЕЦ)";
	Запрос.УстановитьПараметр("СписокПомещений", СписокПомещений);

	СписокПодъездов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подъезд"));

	Возврат СписокПодъездов;
	
КонецФункции  //КВП_ПолучитьСписокПодъездовПоПомещениям()

// Формирует таблицу привязанных комнат по указанному списку л/с.
//
// Параметры:
//  Период - Дата.
//  СписокЛС - СписокЗначений - список л/с.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица привязанных комнат.
//
Функция ПолучитьСписокПривязанныхКомнат(Период, СписокЛС) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	Запрос.УстановитьПараметр("ЖилаяПлощадь", Справочники.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь,
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(&Период, 
	|			ЛицевойСчет В (&СписокЛС)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(&Период, 
	|			 ВидПлощади = &ЖилаяПлощадь) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка";
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Формирует список комнат по указанным помещениям.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка - лицевой счет,
//  Период - Дата - период.
//  СписокТиповКомнат - Список - список типов помещений.
//
// Возвращаемое значение:
//  СписокЗначений - список комнат.
//
Функция КВП_ПолучитьСписокКомнатПоЛицевомуСчету(ЛицевойСчет, Период, СписокТиповКомнат = Неопределено) Экспорт

	СписокКомнат = Новый СписокЗначений();

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокКомнат;
	КонецЕсли;

	// Попытка получить комнаты из регистра для коммуналок.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И &ДопУсловия) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната";

	СтрокаДопУсловий = "ИСТИНА";
	Если Не СписокТиповКомнат = Неопределено Тогда
		СтрокаДопУсловий = СтрокаДопУсловий + " И Комната.ВидПомещения.ТипПомещения В (&СписокТиповКомнат)"
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", СтрокаДопУсловий);

	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("ЛицевойСчет",       ЛицевойСчет);
	Запрос.УстановитьПараметр("Квартира",          ЛицевойСчет.Адрес);
	Запрос.УстановитьПараметр("СписокТиповКомнат", СписокТиповКомнат);

	СписокКомнат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комната"));

	Если СписокКомнат.Количество() = 0 Тогда
		// Попытка получить комнаты из справочника помещений.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Помещения.Ссылка КАК Комната
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Родитель = &Квартира
		|	И &ДопУсловия";
		
		СтрокаДопУсловий = "ИСТИНА";
		Если Не СписокТиповКомнат = Неопределено Тогда
			СтрокаДопУсловий = СтрокаДопУсловий + " И УПЖКХ_Помещения.ВидПомещения.ТипПомещения В (&СписокТиповКомнат)"
		КонецЕсли;

		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия", СтрокаДопУсловий);

		СписокКомнат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Комната"));

	КонецЕсли;

	Возврат СписокКомнат;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСИнтерфейсом

#Если Клиент Тогда
// Процедура переключает интерфейс ЖКХ.
Процедура ПереключитьИнтерфейсЖКХ() Экспорт
	
	ГлавныйИнтерфейс.ПереключитьИнтерфейс("КВП_ТСЖ");
	
	Оповестить("ПереключениеИнтерфейса");
	
КонецПроцедуры // ПереключитьИнтерфейсЖКХ()

#КонецЕсли

#КонецОбласти

#Область РаботаСоШтрихкодом

// Возвращает индекс для вставки контрольной строки в строку для ШК.
Функция ИндексВставкиКСШК() Экспорт

	Возврат 6;

КонецФункции // ИндексВставкиКСШК()

// Проверяет корректность заполнения логина (идентификатора) л/с для WEB-приложения.
//
// Параметры
//  ИдентификаторЛС  - логин (идентификатор) л/с.
//
// Возвращаемое значение:
//   Булево   - флаг корректности заполнения идентификатора.
//
Функция ПроверитьКорректностьИдентификатораЛС(ИдентификаторЛС) Экспорт
	
	НастройкиИД = Константы.УПЖКХ_НастройкиИдентификатораЛицевогоСчета.Получить();
	ПрефиксИдЛС = Лев(НастройкиИД, Найти(НастройкиИД, ";") - 1);
	
	мСтрока = Сред(НастройкиИД, Найти(НастройкиИД, ";") + 1);
	Попытка
		ИспользоватьРучнойФормат = Булево(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ИспользоватьРучнойФормат = Ложь;
	КонецПопытки;
	
	мСтрока = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	Попытка
		ДлинаУникЧастиИдЛС = Число(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ДлинаУникЧастиИдЛС = 0;
	КонецПопытки;
	
	СоставУникЧастиИдЛС = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	
	Если СтрДлина(ИдентификаторЛС) < 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрефиксИдЛС) Тогда
		ДлинаПрефиксаИдЛС = СтрДлина(ПрефиксИдЛС);
		Если НЕ Лев(ИдентификаторЛС, ДлинаПрефиксаИдЛС) = ПрефиксИдЛС Тогда
			Возврат Ложь;
		КонецЕсли;
		УникЧастьИдЛС = Сред(ИдентификаторЛС, ДлинаПрефиксаИдЛС + 1);
	Иначе
		УникЧастьИдЛС = ИдентификаторЛС;
	КонецЕсли;
	
	Если УникЧастьИдЛС = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИспользоватьРучнойФормат Тогда
		Если НЕ ДлинаУникЧастиИдЛС = СтрДлина(УникЧастьИдЛС) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СоставУникЧастиИдЛС = СоставУникЧастиИдЛС + ",";
		НаборСимволов = "";
		Если Найти(СоставУникЧастиИдЛС, "ВР,") > 0 Тогда
			НаборСимволов = НаборСимволов + "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
			СоставУникЧастиИдЛС = СтрЗаменить(СоставУникЧастиИдЛС, "ВР,", "");
		КонецЕсли;
		Если Найти(СоставУникЧастиИдЛС, "НР,") > 0 Тогда
			НаборСимволов = НаборСимволов + "abcdefghijklmnopqrstuvwxyz";
			СоставУникЧастиИдЛС = СтрЗаменить(СоставУникЧастиИдЛС, "НР,", "");
		КонецЕсли;
		Если Найти(СоставУникЧастиИдЛС, "Цифры,") > 0 Тогда
			НаборСимволов = НаборСимволов + "0123456789";
			СоставУникЧастиИдЛС = СтрЗаменить(СоставУникЧастиИдЛС, "Цифры,", "");
		КонецЕсли;
		СоставУникЧастиИдЛС = СтрЗаменить(СоставУникЧастиИдЛС, ",", "");
		НаборСимволов = НаборСимволов + СоставУникЧастиИдЛС;
		
		Для Индекс = 1 По СтрДлина(УникЧастьИдЛС) Цикл
			ТекСимвол = Сред(УникЧастьИдЛС, Индекс, 1);
			Если Найти(НаборСимволов, ТекСимвол) = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДлинуЗначенияПоля()

// Проверяет корректность заполнения пароля доступа для WEB-приложения.
//
// Параметры
//  ПарамУчетнойПолитики  - параметры учетной политики.
//  ПарольДоступа  - пароль доступа для WEB-приложения.
//
// Возвращаемое значение:
//   Булево   - флаг корректности заполнения пароля.
//
Функция ПроверитьКорректностьПароляДоступаВеб(ПарольДоступа) Экспорт
	
	СтрокаНастроек = Константы.УПЖКХ_НастройкиПароляДоступаВеб.Получить();
	
	ДлинаПароля  = 0;
	СоставПароля = "";
	
	Если Не СтрокаНастроек = "" Тогда
		ПозицияРазделителя = Найти(СтрокаНастроек, ";");
		
		Если Не ПозицияРазделителя = 0 Тогда
			ДлинаПароля  = ЧИСЛО(Лев(СтрокаНастроек, ПозицияРазделителя - 1));
			СоставПароля = Сред(СтрокаНастроек, ПозицияРазделителя + 1);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрДлина(ПарольДоступа) = ДлинаПароля Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоотвНаборовСимволов = Новый Соответствие;
	Если Найти(СоставПароля, "ВР") > 0 Тогда
		ТекНаборСимволов = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		СоотвНаборовСимволов.Вставить(ТекНаборСимволов, Ложь);
	КонецЕсли;
	Если Найти(СоставПароля, "НР") > 0 Тогда
		ТекНаборСимволов = "abcdefghijklmnopqrstuvwxyz";
		СоотвНаборовСимволов.Вставить(ТекНаборСимволов, Ложь);
	КонецЕсли;
	Если Найти(СоставПароля, "Цифры") > 0 Тогда
		ТекНаборСимволов = "0123456789";
		СоотвНаборовСимволов.Вставить(ТекНаборСимволов, Ложь);
	КонецЕсли;
	Если Найти(СоставПароля, "ЗП") > 0 Тогда
		ТекНаборСимволов = ",.<>/?;:'[]""{}\|`~!@#$%^&*()-_+=";
		СоотвНаборовСимволов.Вставить(ТекНаборСимволов, Ложь);
	КонецЕсли;
	
	Для Индекс = 1 По СтрДлина(ПарольДоступа) Цикл
		ТекСимвол = Сред(ПарольДоступа, Индекс, 1);
		Для Каждого ТекНабор Из СоотвНаборовСимволов Цикл
			Если ТекНабор.Значение = Истина Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(ТекНабор.Ключ, ТекСимвол) > 0 Тогда
				СоотвНаборовСимволов.Вставить(ТекНабор.Ключ, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекНабор Из СоотвНаборовСимволов Цикл
		Если ТекНабор.Значение = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ПроверитьКорректностьПароляДоступаВеб()

// Удаляет из строки фрагмент заключенный в скобки
//
// Параметры
//  СтрокаДляОбработки  – Строка – строка из которой необходимо удалить фрагмент.
//
// Возвращаемое значение:
//   Строка   – строка без фрагмента заключенного в скобки.
//
Функция УдалениеСимволовСкобок(СтрокаДляОбработки)
	
	НачальнаяПозиция = Найти(СтрокаДляОбработки, "(");
	КонечнаяПозиция  = Найти(СтрокаДляОбработки, ")");
	ДлинаСтроки      = СтрДлина(СтрокаДляОбработки);
	
	Если НачальнаяПозиция > 0 Тогда
		Возврат Лев(СтрокаДляОбработки, НачальнаяПозиция - 1)
		      + ?(КонечнаяПозиция > 0, Прав(СтрокаДляОбработки, ДлинаСтроки - КонечнаяПозиция), "")
	Иначе
		Возврат СтрокаДляОбработки
	КонецЕсли;
	
КонецФункции // УдалениеСимволовСкобок()

// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента  – табличная часть документа, по которой происходит
//                 заполнение реквизита
//  ИмяРеквизита – Строка - 
//  ИмяРеквизита2 – Строка - 
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокументаПоТЧ(ТЧДокумента,
											ИмяРеквизита = "Проживающий",
											ИмяРеквизита2 = Неопределено) Экспорт
	
	КраткийСоставДокумента = "";
	
	Если ТЧДокумента.Количество() = 0 Тогда
		Возврат КраткийСоставДокумента;
	КонецЕсли;
	
	Режим = "общий";
	Если ТипЗнч(ТЧДокумента.Получить(0)[ИмяРеквизита]) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
		Режим = "проживающие";
	ИначеЕсли ТипЗнч(ТЧДокумента.Получить(0)[ИмяРеквизита]) = Тип("ПеречислениеСсылка.КВП_ВидыТарифов") Тогда
		Режим = "тарифы";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТЧДокумента Цикл
		
		Если Режим = "проживающие" Тогда
			ФИОФизЛица = УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
			
		ИначеЕсли Режим = "тарифы" Тогда
			ЗначениеТарифа = СтрокаТЧ[ИмяРеквизита2];
			ФИОФизЛица = СокрЛП(СтрокаТЧ[ИмяРеквизита]) + " - " + ЗначениеТарифа;
			
		Иначе
			ФИОФизЛица = СокрЛП(СтрокаТЧ[ИмяРеквизита]);
			
		КонецЕсли;
		
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			Если СтрДлина(КраткийСоставДокумента) < 200 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ?(Режим = "тарифы", "; ", ", ") + ФИОФизЛица;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 195) + "...";
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Лев(КраткийСоставДокумента,2) = ", " ИЛИ Лев(КраткийСоставДокумента,2) = "; " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 200 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента, 3, 195) + "...";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Проверяет, может ли указанный Объект иметь подчиненные элементы.
//
// Параметры
//  Владельцы    – КоллекцияЗначенийСвойстваОбъектаМетаданных – список владельцев подчиненного справочника.
//  Объект       – СправочникСсылка – ссылка на объект, проверяемый на родительство.
//
// Возвращаемое значение:
//  Булево – возможно ли подчинение указанному элементу.
//
Функция КорректноеПодчинение(Владельцы, Объект) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Ложь;
	КонецЕсли;

	Подчинение = Неопределено;
	Для Каждого Владелец Из Владельцы Цикл
		Если Владелец.Имя = Объект.Метаданные().Имя Тогда
			Подчинение = Владелец.ИспользованиеПодчинения;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Подчинение = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Ошибка получения подчиненного справочника.");
		Возврат Ложь;
	КонецЕсли;

	Если Строка(Подчинение) = "Элементам" И Объект.ЭтоГруппа Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Владелец не может быть группой.");
		Возврат Ложь;
	КонецЕсли;

	Если Строка(Подчинение) = "Группам" И Не Объект.ЭтоГруппа Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Владелец не может быть элементом.");
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // КорректноеПодчинение()

// Функция предназначена для возврата списка отбора.
//
// Параметры:
//  СписокНастроек - список значений, хранящий параметры отбора;
//  ОбъектПолученный - Объект, ссылка на который определяет параметры
//                 формирования списка значений для возврата.
//
// Возвращаемое значение:
//  СписокРезультата - Возвращает список отобранных полей.
//
Функция СформироватьСписокДляОтбора(СписокНастроек, ОбъектПолученный) Экспорт

	СписокРезультата = Новый СписокЗначений;

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат СписокРезультата;
	КонецЕсли;

	Если ОбъектПолученный = "Здания" Тогда
		
		ЗапросНаименований = Новый Запрос;
		ЗапросНаименований.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Здания.Наименование,
		|	КВП_Здания.Ссылка
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания";
		ТаблицаЗапроса = ЗапросНаименований.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаб ИЗ ТаблицаЗапроса Цикл
			
			ИспользоватьСтроку = Истина;
			Для Каждого ЭлементСписка ИЗ СписокНастроек Цикл
				
				Если Не Найти(СтрокаТаб.Наименование, ЭлементСписка.Значение) > 0 Тогда
					ИспользоватьСтроку = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИспользоватьСтроку Тогда
				СписокРезультата.Добавить(СтрокаТаб.Наименование);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРезультата;
	
КонецФункции

// Функция формирует строку порядка для запроса по данным построителя отчетов.
//
// Параметры
//  ПостроительОтчета - построитель отчета.
//
// Возвращаемое значение:
//  Строка - строка порядка построителя отчета для запроса.
//
Функция ПолучитьТекстПорядкаПоПостроителюОтчета(ПостроительОтчета) Экспорт

	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат "";
	КонецЕсли;

	ТекстПорядка = "";
	Разделитель  = ", ";

	Для Каждого ТекПоле Из ПостроительОтчета.Порядок Цикл
		ТекстПорядка = ТекстПорядка + Разделитель
		             + ТекПоле.ПутьКДанным + ?(ТекПоле.Направление = НаправлениеСортировки.Возр, " ВОЗР", " УБЫВ");
	КонецЦикла;

	Возврат Сред(ТекстПорядка, СтрДлина(Разделитель) + 1);

КонецФункции // ПолучитьТекстПорядкаПоПостроителюОтчета()

// Пытается записать указанный объект.
//
// Параметры
//  Объект       - объект, который нужно записать.
//  Параметр     - параметр записи.
//  ТекстОшибки  - текст ошибки, если записать не удалось.
//
// Возвращаемое значение:
//  Булево - удалось ли произвести запись.
//
Функция КВП_ЗаписатьОбъект(Объект, Параметр = Неопределено, ТекстОшибки = "") Экспорт
	
	Записан = Ложь;
	Попытка
		Если Параметр = Неопределено Тогда
			Объект.Записать();
		Иначе
			Объект.Записать(Параметр);
		КонецЕсли;
		Записан = Истина;
	Исключение
		ТекстОшибки = "Возникла ошибка записи объекта: " + Объект + Символы.ПС
					+ "Описание ошибки: " + ОписаниеОшибки();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, , , , Ложь);
	КонецПопытки;
	
	Возврат Записан;
	
КонецФункции // КВП_ЗаписатьОбъект()

// Получает счет учета услуг по умолчанию.
//
// Параметры
//  Форма        - форма документа.
//
// Возвращаемое значение:
//  Ссылка на план счетов хозрасчетный.
//
Функция ПолучитьСчетУчетаУслугПоУмолчанию(Форма) Экспорт

	Возврат ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;

КонецФункции // ПолучитьСчетУчетаУслугПоУмолчанию()

// Устанавливает счетом учета услуг указанное значение. Если оно не заполнено, то значением по умолчанию.
//
// Параметры
//  Форма        - форма документа.
//  Значение     - счет учета для установки.
//
Процедура УстановитьСчетУчетаУслуг(Форма, Значение = Неопределено) Экспорт

	Если Значение = Неопределено Тогда
		НовЗначение = ПолучитьСчетУчетаУслугПоУмолчанию(Форма);
	Иначе
		НовЗначение = Значение;
	КонецЕсли;

	Если Не Форма.СчетУслуг = НовЗначение Тогда
		Форма.СчетУслуг = НовЗначение;
		Форма.СчетУслугПриИзменении(Форма.ЭлементыФормы.СчетУслуг);
	КонецЕсли;

КонецПроцедуры // УстановитьСчетУчетаУслуг()

// Очищает в табличной части указанный реквизит.
//
// Параметры
//  ДокументОбъект    - документ, в котором необходимо произвести очистку.
//  ИмяТабличнойЧасти - наименование табличной части, в которой необходимо очистить реквизит.
//  ИмяРеквизита      - наименование реквизита для очистки.
//
Процедура ОчиститьРеквизитТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ИмяРеквизита) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	МетаданныеРеквизита = МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяРеквизита];

	МассивТипов = МетаданныеРеквизита.Тип.Типы();

	ПустоеЗначение = ?(МассивТипов.Количество() = 1, Новый(МассивТипов.Получить(0)), Неопределено);
	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		СтрокаТабличнойЧасти[ИмяРеквизита] = ПустоеЗначение;
	КонецЦикла;

КонецПроцедуры // ОчиститьСчетаУчетаТабличнойЧасти()

// Получает номенклатурную группу для указанного объекта учета.
//
// Параметры:
//  Объект       – лицевой счет / квартира / здание, для которого необходимо найти номенклатурную группу.
//  Номенклатура – номенклатура, из которой будет взята ном. группа, если не будет найдена.
//
// Возвращаемое значение:
//  Ссылка на справочник "Номенклатурные группы" – искомая группа.
//
Функция ПолучитьНоменклатурнуюГруппуДляОбъектаУчета(Объект, Номенклатура = Неопределено) Экспорт
	
	ПустаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
	 ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.КВП_ЛицевыеСчета") Тогда
		ТекЗдание = Объект.Адрес.Владелец;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения")
	      ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.УПЖКХ_Помещения") Тогда
		ТекЗдание = Объект.Владелец;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		ТекЗдание = Объект;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КВП_Здания") Тогда
		ТекЗдание = Объект.Ссылка;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ДоговорыКонтрагентов") 
	 ИЛИ ТипЗнч(Объект) = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда
		ТекЗдание = Справочники.КВП_Здания.ПустаяСсылка();
	Иначе
		Возврат ПустаяГруппа;
	КонецЕсли;
	
	// Пробегаем по справочнику зданий от элемента по группам вверх, пока
	// не будет указана НГ, либо не "упремся" в корень.
	Пока ТекЗдание.НоменклатурнаяГруппа.Пустая() Цикл
		Если ТекЗдание.Родитель.Пустая() Тогда
			Прервать;
		КонецЕсли;
		ТекЗдание = ТекЗдание.Родитель;
	КонецЦикла;
	Если Не ТекЗдание.НоменклатурнаяГруппа.Пустая() Тогда
		Возврат ТекЗдание.НоменклатурнаяГруппа;
	КонецЕсли;
	
	// Если дошли сюда - значит в здании НГ не заполнена.
	Если Не Номенклатура = Неопределено И ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Номенклатура.НоменклатурнаяГруппа;
	КонецЕсли;
	
	// Если нигде ничего не указано - возвращаем пустую.
	Возврат ПустаяГруппа;
	
КонецФункции // ПолучитьНоменклатурнуюГруппуДляОбъектаУчета()

// Сохраняет переданное значение с переданным идентификатором
Процедура КВП_СохранитьЗначение(Идентификатор, Значение, Отказ = Истина) Экспорт
	
	#Если Клиент Тогда
		
		СохранитьЗначение(Идентификатор, Значение);
		Отказ = Ложь;
		
	#КонецЕсли
	
КонецПроцедуры

// Формируем полное наименование помещения
Функция ПолноеНаименованиеСправочника(СсылкаНаЭлемент) Экспорт
	
	Возврат СтрЗаменить(СсылкаНаЭлемент.ПолноеНаименование(), "/", ", ");
	
КонецФункции

// Формируем номер лицевого счета без символов "л/с №".
//
// Параметры:
//  ЛицевойСчет  - Строка, ссылка на лицевой счет - лицевой счет, для которого
//                 необходимо определить номер.
//  ВозвращатьНаименованиеВСлучаеОтсутствияНомера  - Булево, признак, в зависимости
//                 от которого будет возвращаться наименование лицевого счета в случае,
//                 если лицевой счет задан без числовых значений (например, как ФИО собственника).
//
// Возвращаемое значение:
//  Срока - номер указанного лицевого счета.
//
Функция НомерЛицевогоСчета(ЛицевойСчет, ВозвращатьНаименованиеВСлучаеОтсутствияНомера = Ложь) Экспорт
	
	СписокЦифр = Новый СписокЗначений();
	Для Сч = 0 По 9 Цикл
		СписокЦифр.Добавить("" + Сч);
	КонецЦикла;
	
	СтрокаЛС = Строка(ЛицевойСчет);
	Для Сч = 1 По СтрДлина(СтрокаЛС) Цикл
		Если Не СписокЦифр.НайтиПоЗначению(Сред(СтрокаЛС, Сч, 1)) = Неопределено Тогда
			Возврат Сред(СтрокаЛС, Сч);
		КонецЕсли;
	КонецЦикла;
	
	// Если числовых значений в номере не нашли, возвратим наименование л/с без
	// пробелов при установленном соответствующем признаке.
	Если ВозвращатьНаименованиеВСлучаеОтсутствияНомера Тогда
		Возврат СтрЗаменить(СтрокаЛС, " ", "");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // НомерЛицевогоСчета()

// Формирует краткое наименование помещения.
//
// Параметры:
//  ТипПомещения - тип помещения.
//
// Возвращаемое значение:
//  Наименование - краткое наименование помещения.
//
Функция КраткоеНаименованиеПомещения(ТипПомещения) Экспорт
	
	Если ТипПомещения = Перечисления.КВП_ТипыПомещений.Квартира 
		ИЛИ ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом Тогда
		Наименование = "Кв.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Офис Тогда
		Наименование = "Оф.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.ПодсобноеПомещение Тогда
		Наименование = "П/п";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо Тогда
		Наименование = "А/м";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.МестоОбщегоПользования Тогда
		Наименование = "МОП";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Комната Тогда
		Наименование = "Комн.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Кабинет Тогда
		Наименование = "Каб.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Кухня Тогда
		Наименование = "Кух.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Коридор Тогда
		Наименование = "Кор.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Санузел Тогда
		Наименование = "С/у";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Подвал Тогда
		Наименование = "Подв.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Чердак Тогда
		Наименование = "Чер.";
	ИначеЕсли ТипПомещения = Перечисления.КВП_ТипыПомещений.Апартамент Тогда
		Наименование = "Апарт.";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Рассчитывает сумму документа по колонке табличной части.
//
Функция КВП_ПолучитьСуммуДокументаНачисленияОплаты(ДокументОбъект, ИмяТабличнойЧасти = Неопределено, ИмяКолонки) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СуммаДокумента = 0;
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог(ИмяКолонки);
	Иначе
		Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
			Если УПЖКХ_ТиповыеМетодыВызовСервера.ЕстьРеквизитТабЧастиДокумента(ИмяКолонки, МетаданныеДокумента, ТЧОбъекта.Имя) Тогда
				СуммаДокумента = СуммаДокумента + ДокументОбъект[ТЧОбъекта.Имя].Итог(ИмяКолонки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СуммаДокумента;
	
КонецФункции // КВП_ПолучитьСуммуДокументаНачисленияОплаты()

// Рассчитывает сумму документа по колонке табличной части с отбором.
// Например, только по зависимым услугам, или только по основным.
//
Функция КВП_ПолучитьСуммуДокументаНачисленияСОтбором(ДокументОбъект, ИмяТабличнойЧасти, ИмяКолонки, СтруктураОтбора) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	СтрокиСОтбором  = ДокументОбъект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	ТаблицаСОтбором = ДокументОбъект[ИмяТабличнойЧасти].Выгрузить(СтрокиСОтбором);
	
	Возврат ТаблицаСОтбором.Итог(ИмяКолонки);
	
КонецФункции // КВП_ПолучитьСуммуДокументаНачисленияСОтбором()

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДробями

// Возвращает наибольший общий делитель указанных чисел.
//
// Параметры:
//  Парам1       - Число - первое число.
//  Парам2       - Число - второе число.
//  Отсортированы - необязательный - Булево - отсортированы ли переданные числа;
//                 значение Истина означает, что Парам1 больше или равно Парам2.
//
// Возвращаемое значение:
//  Число - НОД указанных чисел.
//
Функция ПолучитьНОД(Парам1, Парам2, Отсортированы = Ложь)
	
	Если Отсортированы = Истина Тогда
		БольшееЧисло = Парам1;
		МеньшееЧисло = Парам2;
	Иначе
		БольшееЧисло = Макс(Парам1, Парам2);
		МеньшееЧисло = Парам1 + Парам2 - БольшееЧисло;
	КонецЕсли;
	
	Если МеньшееЧисло = 0 Тогда
		Возврат БольшееЧисло;
	КонецЕсли;
	
	// согласно правилу Евклида, НОД(x; y) = НОД(x mod y; y)
	Возврат ПолучитьНОД(МеньшееЧисло, БольшееЧисло % МеньшееЧисло, Истина);
	
КонецФункции // ПолучитьНОД()

// Производит упрощение указанной дроби.
//
// Параметры:
//  Числитель    - Число - числитель дроби.
//  Знаменатель  - Число - знаменатель дроби.
//
Процедура УпроститьДробь(Числитель, Знаменатель) Экспорт
	
	НОД = ПолучитьНОД(Числитель, Знаменатель);
	Числитель   = ?(НОД = 0, 0, Числитель / НОД);
	Знаменатель = ?(НОД = 0, 0, Знаменатель / НОД);
	
КонецПроцедуры

// Приводит указанные дроби к общему знаменателю.
//
// Параметры:
//  Дробь1Ч      - Число - числитель 1-й дроби.
//  Дробь1З      - Число - знаменатель 1-й дроби.
//  Дробь2Ч      - Число - числитель 2-й дроби.
//  Дробь2З      - Число - знаменатель 2-й дроби.
//
Процедура ПривестиДробиКОбщемуЗнаменателю(Дробь1Ч, Дробь1З, Дробь2Ч, Дробь2З)
	
	НОД = ПолучитьНОД(Дробь1З, Дробь2З);
	
	ОбщийЗнаменатель = Дробь1З * Дробь2З / НОД; // в произведении знаменателей НОД будет в квадрате, поэтому делим на НОД
	
	Дробь1Ч = Дробь1Ч * (Дробь2З / НОД); // домножаем на коэффициент от второй дроби
	Дробь2Ч = Дробь2Ч * (Дробь1З / НОД); // домножаем на коэффициент от первой дроби
	
	Дробь1З = ОбщийЗнаменатель;
	Дробь2З = ОбщийЗнаменатель;
	
КонецПроцедуры // ПривестиДробиКОбщемуЗнаменателю()

// Производит сложение указанных дробей.
//
// Параметры:
//  Дробь1Ч      - Число - числитель 1-й дроби.
//  Дробь1З      - Число - знаменатель 1-й дроби.
//  Дробь2Ч      - Число - числитель 2-й дроби.
//  Дробь2З      - Число - знаменатель 2-й дроби.
//  ДробьРезЧ    - Число - числитель результирующей дроби.
//  ДробьРезЗ    - Число - знаменатель результирующей дроби.
//
Процедура СложитьДроби(Знач Дробь1Ч, Знач Дробь1З, Знач Дробь2Ч, Знач Дробь2З, ДробьРезЧ, ДробьРезЗ) Экспорт
	
	Если Не Дробь1З = Дробь2З Тогда
		// если знаменатели разные - надо привести к одному
		ПривестиДробиКОбщемуЗнаменателю(Дробь1Ч, Дробь1З, Дробь2Ч, Дробь2З);
	КонецЕсли;
	
	// присваиваем общий знаменатель, складываем числители
	ДробьРезЗ = Дробь1З;
	ДробьРезЧ = Дробь1Ч + Дробь2Ч;
	
	// упрощаем полученную дробь
	УпроститьДробь(ДробьРезЧ, ДробьРезЗ);
	
КонецПроцедуры // СложитьДроби()

#КонецОбласти

#Область ПроцедурыИФункцииДокументовРаспределенияЗатрат

// Формирует список способов распределения по зданиям.
Процедура ЗаполнитьСписокСпособовРаспределенияПоЗданиям(Элемент) Экспорт
	
	СписокСпособов = Новый СписокЗначений();
	
	СписокСпособов.Добавить("по площади");
	СписокСпособов.Добавить("пропорционально количеству домов");
	СписокСпособов.Добавить("пропорционально количеству проживающих");
	СписокСпособов.Добавить("пропорционально количеству лицевых счетов");
	
	МассивХарактеристикЗданий = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
	
	Для Каждого ХарактеристикаЗданий Из МассивХарактеристикЗданий Цикл
		ТипХарактеристики = ХарактеристикаЗданий.ТипЗначения;
		Если ТипХарактеристики.Типы().Количество() = 1
		   И ТипХарактеристики.СодержитТип(ТипЗнч(1)) Тогда
			СписокСпособов.Добавить(ХарактеристикаЗданий.Наименование,
									"по характеристике """ + ХарактеристикаЗданий.Наименование + """");
		КонецЕсли;
	КонецЦикла;
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлемент Из СписокСпособов Цикл
		Элемент.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокСпособовРаспределенияПоЗданиям()

// Формирует список видов площадей для здания.
//
// Параметры:
//  Элемент - <ЭлементыФормы>
//          - Элемент формы.
//
Процедура ЗаполнитьСписокВидовПлощадей(Элемент) Экспорт 
	
	СписокСпособов = Новый СписокЗначений();
	
	СписокСпособов.Добавить("Общая площадь здания");
	
	Выборка = Справочники.КВП_ТипыПлощадейЗдания.Выбрать();
	Пока Выборка.Следующий() Цикл 
		СписокСпособов.Добавить(Выборка.Наименование);
	КонецЦикла;
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлемент Из СписокСпособов Цикл
		Элемент.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВидовПлощадей()

// Заполняет таблицу коэффициентов согласно указанному способу.
//
// Параметры
//  ТаблицаКоэффициентов  – ТаблицаЗначений – исходная таблица с колонками "Объект" и "Показатель".
//  СпособРаспределения   - Строка          - способ заполнения таблицы.
//
Процедура ЗаполнитьТаблицуКоэффициентовРаспределенияПоЗданиям(ТаблицаКоэффициентов, СпособРаспределения, Дата,
																ТипПлощади = Неопределено) Экспорт
	
	Если НРег(СпособРаспределения) = "по площади" Тогда
		
		Если НЕ ЗначениеЗаполнено(ТипПлощади)
			ИЛИ ТипПлощади = "Общая площадь здания" Тогда
			
			Для Каждого СтрокаТЧ Из ТаблицаКоэффициентов Цикл
				СтрокаТЧ.Показатель = СтрокаТЧ.Объект.ПлощадьЗданияОбщая;
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаКоэффициентов.НомерСтроки,
			|	ТаблицаКоэффициентов.Объект,
			|	ТаблицаКоэффициентов.Показатель
			|ПОМЕСТИТЬ вт_ТаблицаКоэффициентов
			|ИЗ
			|	&ТаблицаКоэффициентов КАК ТаблицаКоэффициентов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	вт_ТаблицаКоэффициентов.НомерСтроки,
			|	вт_ТаблицаКоэффициентов.Объект,
			|	КВП_ПлощадиЗдания.Площадь КАК Показатель
			|ПОМЕСТИТЬ вт_ИтоговаяТаблица
			|ИЗ
			|	вт_ТаблицаКоэффициентов КАК вт_ТаблицаКоэффициентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадиЗдания КАК КВП_ПлощадиЗдания
			|		ПО вт_ТаблицаКоэффициентов.Объект = КВП_ПлощадиЗдания.Объект
			|ГДЕ
			|	КВП_ПлощадиЗдания.Тип.Наименование = &ТипПлощади
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	вт_ТаблицаКоэффициентов.НомерСтроки,
			|	вт_ТаблицаКоэффициентов.Объект,
			|	вт_ИтоговаяТаблица.Показатель
			|ИЗ
			|	вт_ТаблицаКоэффициентов КАК вт_ТаблицаКоэффициентов
			|		ЛЕВОЕ СОЕДИНЕНИЕ вт_ИтоговаяТаблица КАК вт_ИтоговаяТаблица
			|		ПО вт_ТаблицаКоэффициентов.НомерСтроки = вт_ИтоговаяТаблица.НомерСтроки
			|			И вт_ТаблицаКоэффициентов.Объект = вт_ИтоговаяТаблица.Объект";
			
			Запрос.УстановитьПараметр("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
			Запрос.УстановитьПараметр("ТипПлощади",           ТипПлощади);
			
			Результат = Запрос.Выполнить().Выгрузить();
			
			ТаблицаКоэффициентов.Очистить();
			
			Для Каждого СтрокаРезультат Из Результат Цикл
				ЗаполнитьЗначенияСвойств(ТаблицаКоэффициентов.Добавить(), СтрокаРезультат);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли НРег(СпособРаспределения) = "пропорционально количеству домов" Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаКоэффициентов Цикл
			СтрокаТЧ.Показатель = 1;
		КонецЦикла;
		
	ИначеЕсли НРег(СпособРаспределения) = "пропорционально количеству проживающих" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Объект,
		|	КОЛИЧЕСТВО(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК Показатель
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			,
		|			ЛицевойСчет.Адрес.Владелец В (&СписокЗданий)
		|				И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Владелец";
		
		Запрос.УстановитьПараметр("Дата",         Дата);
		Запрос.УстановитьПараметр("СписокЗданий", ТаблицаКоэффициентов.ВыгрузитьКолонку("Объект"));
		
		ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
		
	ИначеЕсли НРег(СпособРаспределения) = "пропорционально количеству лицевых счетов" Тогда
		
		Запрос = Новый Запрос();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЛицевыеСчета.ЛицевойСчет) КАК Показатель,
		|	КВП_ЛицевыеСчета.Объект.Владелец КАК Объект
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&НачПериода, Объект.Владелец В ИЕРАРХИИ (&СписокЗданий)) 
		|		КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	КВП_ЛицевыеСчета.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ЛицевыеСчета.Объект.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Объект";
		
		Запрос.УстановитьПараметр("НачПериода",   Дата);
		Запрос.УстановитьПараметр("СписокЗданий", ТаблицаКоэффициентов.ВыгрузитьКолонку("Объект"));
		
		ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
		
	Иначе // по характеристике
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект,
		|	ДополнительныеСведения.Значение КАК Показатель
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Объект В(&Объекты)
		|	И ДополнительныеСведения.Свойство.Наименование = &НаименованиеХарактеристики";
		
		Запрос.УстановитьПараметр("Объекты",                    ТаблицаКоэффициентов.ВыгрузитьКолонку("Объект"));
		Запрос.УстановитьПараметр("НаименованиеХарактеристики", СпособРаспределения);
		
		ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ТаблицаКоэффициентов.Индексы.Добавить("Объект");
	
КонецПроцедуры // ЗаполнитьТаблицуКоэффициентовРаспределенияПоЗданиям()

#КонецОбласти

#Область ПроцедурыИФункцииДокументовВводаФактическихЗатратНаОбъекты

// Формирует список способов распределения по лицевым счетам.
Процедура ЗаполнитьСписокСпособовРаспределенияПоЛицевымСчетам(Элемент) Экспорт
	
	СписокСпособов = Новый СписокЗначений();
	
	СписокСпособов.Добавить("поровну");
	СписокСпособов.Добавить("пропорционально площади");
	СписокСпособов.Добавить("пропорционально количеству жильцов");
	СписокСпособов.Добавить("пропорционально объему потребления услуги");
	СписокСпособов.Добавить("пропорционально количеству комнат");
	
	МассивХарактеристикПомещений = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
	Для Каждого ХарактеристикаПомещений Из МассивХарактеристикПомещений Цикл
		ТипХарактеристики = ХарактеристикаПомещений.ТипЗначения;
		Если ТипХарактеристики.Типы().Количество() = 1
		   И ТипХарактеристики.СодержитТип(ТипЗнч(1)) Тогда
			СписокСпособов.Добавить(ХарактеристикаПомещений.Наименование,
									"по характеристике """ + ХарактеристикаПомещений.Наименование + """");
		КонецЕсли;
	КонецЦикла;
	
	МассивХарактеристикЛС = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_ЛицевыеСчета.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
	Для Каждого ХарактеристикаЛС Из МассивХарактеристикЛС Цикл
		ТипХарактеристики = ХарактеристикаЛС.ТипЗначения;
		Если ТипХарактеристики.Типы().Количество() = 1
		   И ТипХарактеристики.СодержитТип(ТипЗнч(1)) Тогда
			СписокСпособов.Добавить(ХарактеристикаЛС.Наименование,
									"по характеристике """ + ХарактеристикаЛС.Наименование + """");
		КонецЕсли;
	КонецЦикла;
	
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого ТекЭлемент Из СписокСпособов Цикл
		Элемент.СписокВыбора.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокСпособовРаспределенияПоЛицевымСчетам()

// Формирует список типов распределения для способов расчета "по площади" и "пропорционально количеству жильцов".
//
Функция ЗаполнитьСтруктуруТиповРаспределенияПоЛицевымСчетам() Экспорт
	
	СтруктураТиповРаспределения = Новый Структура;
	
	МассивКатегорииЖильцов = Новый Массив;
	МассивКатегорииЖильцов.Добавить("Проживающие");
	МассивКатегорииЖильцов.Добавить("Зарегистрированные");
	
	СтруктураТиповРаспределения.Вставить("ПропорциональноКоличествуЖильцов", МассивКатегорииЖильцов);
	
	Возврат СтруктураТиповРаспределения;
	
КонецФункции // ЗаполнитьСтруктуруТиповРаспределенияПоЛицевымСчетам()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Проверяет дату на корректность заполнения.
//
// Параметры:
//  Дата         - Дата, которую необходимо проверить.
//
// Возвращаемое значение:
//  Булево       - признак корректности даты.
//
Функция ДатаКорректна(Дата) Экспорт
	
	ДатаКорректна = Истина;
	Если ТипЗнч(Дата) = Тип("Дата") Тогда
		Если Год(Дата) > 3999 Тогда
			ДатаКорректна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДатаКорректна;
КонецФункции // ДатаКорректна()

// Формирует строковое представление документа собственности.
Функция ПолучитьПредставлениеДокументаСобственности(НомерДокумента, ДатаДокумента, ВидДокумента = Неопределено) Экспорт
	
	ПредставлениеДокумента = ?(ВидДокумента = Неопределено Или ВидДокумента = Справочники.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка(), "", "" + ВидДокумента);
	ПредставлениеДокумента = ?(ПустаяСтрока(ПредставлениеДокумента), "", ПредставлениеДокумента + " ")
							 + ?(Не ДатаДокумента = Дата(1, 1, 1), НомерДокумента + " от " + Формат(ДатаДокумента, "ДФ=dd.MM.yyyy"), НомерДокумента);
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

#КонецОбласти