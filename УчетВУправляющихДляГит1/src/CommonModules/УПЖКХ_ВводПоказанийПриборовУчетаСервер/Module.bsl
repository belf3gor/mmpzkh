
#Область ПроцедурыИФункцииОбщегоНазначения

// Получает максимальное значение показания счетчика в зависимости от разрядности.
//
Функция ПолучитьМаксЗначениеПоказанияСчетчика(Счетчик) Экспорт
	
	Возврат Pow(10, Счетчик.Разрядность) - 1;
	
КонецФункции // ПолучитьМаксЗначениеПоказанияСчетчика()

// Функция получает введенные показания по счетчику на указанную дату, а также даты последних введенных показаний.
//
// Параметры:
//  Счетчик	 - Ссылка	 - Ссылка на текущий счетчик.
//  Период	 - Дата		 - Дата, на которую бдет производится выборка показаний по счетчикам. По умолчанию "Неопределено".
// 
// Возвращаемое значение:
//  Последние - показания по счетчику
//
Функция ПолучитьПоследниеВведенныеПоказанияСчетчика(Счетчик, Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК ДатаПоказаний,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&Период, Счетчик = &Счетчик) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|ГДЕ
	|	НЕ КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание";
	
	Запрос.УстановитьПараметр("Счетчик", Счетчик);
	Запрос.УстановитьПараметр("Период",  Период);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьПоследниеВведенныеПоказанияСчетчика()

// Функция возвращает количество месяцев между двумя датами.
//
// Параметры:
//  ДатаНачала    - Дата - дата начала определяемого периода;
//  ДатаОкончания - Дата - дата окончания определяемого периода.
// 
// Возвращаемое значение:
//  Количество месяцев между датами - Число.
//
Функция РазностьДатМесяц(ДатаНачала, ДатаОкончания)
	
	РазностьДат = 0;
	
	НачалоНачальногоМесяца = НачалоМесяца(ДатаНачала);
	НачалоКонечногоМесяца  = НачалоМесяца(ДатаОкончания);
	
	Пока НачалоКонечногоМесяца > НачалоНачальногоМесяца Цикл
		
		РазностьДат           = РазностьДат + 1;
		НачалоКонечногоМесяца = НачалоМесяца(НачалоКонечногоМесяца - 1);
		
	КонецЦикла;
	
	Возврат РазностьДат;
	
КонецФункции // РазностьДатМесяц()

// Функция определяет средний расход по счетчику за указанное количество месяцев.
//
Функция ПолучитьСреднийРасход(Счетчик, ДатаПоказания, КоличествоМесяцевДляПолученияСреднего) Экспорт
	
	// Если дата показания не задана, будем брать текущую дату
	// и средний расход получать за 6 месяцев от этой даты.
	Если ДатаПоказания = Дата("00010101") Тогда
		ДатаПоказания = ТекущаяДата();
	КонецЕсли;
	
	// Определим начало месяца для даты документа, чтобы в последствии не учитыват показания, введенные в текущем месяце.
	МесяцДокумента = НачалоМесяца(ДатаПоказания);
	
	// Получим начало периода расчета, дату с которой начнем получать показания для определения среднего.
	ДатаНачалаПериодаРасчета = НачалоМесяца(ДобавитьМесяц(МесяцДокумента, -КоличествоМесяцевДляПолученияСреднего));
	
	// Получим дату включения счетчика, для определения нижней границы получения среднего.
	// Если счетчик был подключен позже нижней границы периода, тогда обновим нижню границу и определим
	// количество месяцев в границе.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.ДатаИзменения
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Счетчик = &Счетчик
	|				И Действует) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", ДатаПоказания);
	Запрос.УстановитьПараметр("Счетчик", Счетчик);
	
	ВыборкаДата = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДата.Следующий() Тогда
		
		ДатаПодключенияСчетчика = ВыборкаДата.ДатаИзменения;
		
		Если ДатаНачалаПериодаРасчета < ДатаПодключенияСчетчика Тогда
			ДатаНачалаПериодаРасчета = НачалоМесяца(ДатаПодключенияСчетчика);
			КоличествоМесяцевДляПолученияСреднего = ?(ДатаНачалаПериодаРасчета = МесяцДокумента, 1, РазностьДатМесяц(ДатаНачалаПериодаРасчета, МесяцДокумента));
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим общий расход за количество месяцев по тек. счетчику.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Счетчик,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				ТОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоказанийДневной,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				ТОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоказанийНочной,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый)
	|				ТОГДА УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПоказанийПиковый
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(&ДатаНач, &ДатаКон, , Счетчик = &Счетчик) КАК УПЖКХ_РасчетПриборовУчетаОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_РасчетПриборовУчетаОбороты.Счетчик";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаПериодаРасчета);
	Запрос.УстановитьПараметр("ДатаКон", МесяцДокумента);
	Запрос.УстановитьПараметр("Счетчик", Счетчик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СредниеПоказанияПоСчетчику = Новый Структура;
	
	СредниеПоказанияПоСчетчику.Вставить("Дневной", 0);
	СредниеПоказанияПоСчетчику.Вставить("Ночной",  0);
	СредниеПоказанияПоСчетчику.Вставить("Пиковый", 0);
	
	Если Выборка.Следующий() Тогда
		
		СредниеПоказанияПоСчетчику.Дневной = Выборка.СуммаПоказанийДневной / ?(КоличествоМесяцевДляПолученияСреднего = 0, 1, КоличествоМесяцевДляПолученияСреднего);
		СредниеПоказанияПоСчетчику.Ночной  = Выборка.СуммаПоказанийНочной  / ?(КоличествоМесяцевДляПолученияСреднего = 0, 1, КоличествоМесяцевДляПолученияСреднего);
		СредниеПоказанияПоСчетчику.Пиковый = Выборка.СуммаПоказанийПиковый / ?(КоличествоМесяцевДляПолученияСреднего = 0, 1, КоличествоМесяцевДляПолученияСреднего);
		
	КонецЕсли;
	
	Возврат СредниеПоказанияПоСчетчику;
	
КонецФункции

// Функция возвращает единицу измерения прибора учета, определяется по услуге.
//
Функция ПолучитьЕдиницуИзмеренияСчетчикаНаСервере(Счетчик) Экспорт
	
	Возврат Счетчик.ВидУслуги.ВидУслуги.ЕдиницаИзмерения;
	
КонецФункции

// Заполняет структуру показаний по текущей строке счетчика.
//
Процедура ЗаполнитьОбщуюСтруктуруПоказаний(СтруктураПоказаний, СтрокаСчетчика) Экспорт
	
	СтруктураПоказаний.Вставить("Счетчик",                    СтрокаСчетчика.Счетчик);
	СтруктураПоказаний.Вставить("ДневноеПоказание",           СтрокаСчетчика.ДневноеПоказание);
	СтруктураПоказаний.Вставить("НочноеПоказание",            СтрокаСчетчика.НочноеПоказание);
	СтруктураПоказаний.Вставить("ПиковоеПоказание",           СтрокаСчетчика.ПиковоеПоказание);
	СтруктураПоказаний.Вставить("ДневноеПоказаниеПредыдущее", СтрокаСчетчика.ДневноеПоказаниеПредыдущее);
	СтруктураПоказаний.Вставить("НочноеПоказаниеПредыдущее",  СтрокаСчетчика.НочноеПоказаниеПредыдущее);
	СтруктураПоказаний.Вставить("ПиковоеПоказаниеПредыдущее", СтрокаСчетчика.ПиковоеПоказаниеПредыдущее);
	СтруктураПоказаний.Вставить("СпособРегистрацииПоказаний", СтрокаСчетчика.СпособРегистрацииПоказаний);
	СтруктураПоказаний.Вставить("Тарифность",                 СтрокаСчетчика.Тарифность);
	СтруктураПоказаний.Вставить("Разрядность",                СтрокаСчетчика.Разрядность);
	
КонецПроцедуры // ЗаполнитьОбщуюСтруктуруПоказаний()

// Возвращает ссылку на документ "Корректировка начислений", введенный на основании документа "Ввод показаний счетчика".
Функция НайтиПодчиненныйДокументКорректировкаНачислений(СсылкаВводПоказанийСчетчика) Экспорт
	
	СсылкаКорректировкаНачислений = ПредопределенноеЗначение("Документ.КВП_КорректировкаНачислений.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаВводПоказанийСчетчика);
	Запрос.Текст = "ВЫБРАТЬ
					|	КВП_КорректировкаНачислений.Ссылка КАК СсылкаВводПоказанийСчетчика
					|ИЗ
					|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
					|ГДЕ
					|	КВП_КорректировкаНачислений.ДокументОснование.Ссылка = &Ссылка";

	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		СсылкаКорректировкаНачислений = ВыборкаЗапроса.СсылкаВводПоказанийСчетчика;
	КонецЦикла;
	
	Возврат СсылкаКорректировкаНачислений;
	
КонецФункции

// Получает дату последнего показания счетчика.
//
Функция ПолучитьДатуПоследнегоПоказанияСчетчика(Счетчик, Период) Экспорт
	
	ДатаПоследнихПоказаний = Дата(1, 1, 1);
	
	Выборка = ПолучитьПоследниеВведенныеПоказанияСчетчика(Счетчик, Новый Граница(Период, ВидГраницы.Исключая));
	
	Если Выборка.Следующий() Тогда
		ДатаПоследнихПоказаний = Выборка.ДатаПоказаний;
	КонецЕсли;
	
	Возврат ДатаПоследнихПоказаний;
	
КонецФункции

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Функция формирует табличный документ с информацией о показаниях в текущей строке документа.
//
Функция СформироватьТабличныйДокументСИнформациейПоТекущейСтрокеПоказаний(ЕстьОшибкиВСтроке, ПоказанияПодтверждены, МассивТекстовИнформации) Экспорт
	
	Макет = ПолучитьОбщийМакет("УПЖКХ_ИнформацияОПоказанияхСчетчика");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Если Не ЕстьОшибкиВСтроке Тогда
		ОбластьСтатуса = Макет.ПолучитьОбласть("ОбластьБезОшибок");
	ИначеЕсли Не ПоказанияПодтверждены Тогда
		ОбластьСтатуса = Макет.ПолучитьОбласть("ОбластьЕстьОшибки");
	Иначе
		ОбластьСтатуса = Макет.ПолучитьОбласть("ОбластьЕстьОшибкиПодтверждено");
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьСтатуса);
	
	Для Каждого ТекстИнформации Из МассивТекстовИнформации Цикл
		
		Если Не ПустаяСтрока(ТекстИнформации) Тогда
			ОбластьИнформации = Макет.ПолучитьОбласть("ОбластьИнформацияОПоказаниях");
			ОбластьИнформации.Параметры.ТекстИнформации = ТекстИнформации;
			ДокументРезультат.Вывести(ОбластьИнформации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДокументРезультат);
	
КонецФункции

#КонецОбласти

#Область УсловноеОформлениеФормы

// Процедура устанавливает условное офрмление формы для полей, связанных с контролем введенных показаний.
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	// 1. Отображать строки с ошибками:
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ОтображатьТолькоСтрокиСОшибками",  ВидСравненияКомпоновкиДанных.Равно, Истина);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиДневной", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиНочной",  ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиПиковый", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний");
	
	// 2. Цветовое оформление ошибочно введенных показаний.
	// 2.1. Для тарифа Дневной:
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ПоказанияКорректны", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиДневной",   ВидСравненияКомпоновкиДанных.Заполнено);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийДневноеПоказание");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийДневноеПоказаниеРасход");
	
	// 2.2. Для тарифа Ночной:
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ПоказанияКорректны", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиНочной",    ВидСравненияКомпоновкиДанных.Заполнено);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийНочноеПоказание");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийНочноеПоказаниеРасход");
	
	// 2.3. Для тарифа Пиковый:
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ПоказанияКорректны", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиПиковый",   ВидСравненияКомпоновкиДанных.Заполнено);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийПиковоеПоказание");
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийПиковоеПоказаниеРасход");
	
	// 3. Не отображать признак корректности показаний для строк без ошибок:
	ЭлементОформления = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиДневной", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиНочной",  ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказаний.ТипОшибкиПиковый", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, "ДеревоПоказанийПоказанияКорректны");
	
КонецПроцедуры

// Процедура добавляет элемент отбора в для оформления в условном оформлении формы.
//
// Параметры:
//  ЭлементОформления		 - ЭлементУсловногоОформленияКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных
//                           - Текущий элемент условного формления или группа элементов;
//  ИмяПоляКомпоновкиДанных	 - Строка - Имя поля, по которому станавливается отбор;
//  ВидСравнения			 - Перечисление ВидСравненияКомпоновкиДанных - вид для сравнения значений для отбора;
//  ПравоеЗначение			 - Тип поля левого значения - Значение, которое должно принимать поле компоновки 
//                                                        данных для использования оформления.
//
Процедура ДобавитьЭлементОтбораВЭлементУсловногоОформления(ЭлементОформления, ИмяПоляКомпоновкиДанных, ВидСравнения, ПравоеЗначение = Неопределено)
	
	Если ТипЗнч(ЭлементОформления) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементОтбора = ЭлементОформления.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Иначе
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения  = ВидСравнения;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	Если Не ПравоеЗначение = Неопределено Тогда
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет элемент формы в оформляемые поля условного оформления.
//
Процедура ДобавитьОформляемоеПолеВЭлементУсловногоОформления(ЭлементОформления, ИмяПоля)
	
	ПолеОформление = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформление.Использование = Истина;
	ПолеОформление.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриВеденииУчетаПУПоСтоякам

// Функция возвращает таблицу значений со стояками, на которые установлены приборы учета.
Функция ПолучитьТаблицуСтояковУстановкиПриборовУчета(Дата, СписокПриборУчета) Экспорт
	
	Если НЕ (ТипЗнч(СписокПриборУчета) = Тип("СписокЗначений") 
	 ИЛИ ТипЗнч(СписокПриборУчета) = Тип("Массив")) Тогда
		
		ТаблицаСтояков = Новый ТаблицаЗначений;
		ТаблицаСтояков.Колонки.Добавить("Счетчик", Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
		
		Возврат ТаблицаСтояков;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Стояк КАК Стояк
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаСреза,
	|			Счетчик В (&СписокПриборУчета)
	|				И ДатаИзменения <= &ДатаПо) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("ДатаСреза",         Новый Граница(Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ДатаПо",            Дата);
	Запрос.УстановитьПараметр("СписокПриборУчета", СписокПриборУчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСтояковУстановкиПриборовУчета()

// Функция возвращает список доступных для выбора стояков по ресурсу.
//
// Параметры:
//  ОбъектУстановкиПрибораУчета        - Элемент справочника "Здания, соружения", "Подъезды", "Помещения" или "Лицевые счета".
//  ОбъектОтбораПоКоммунальномуРесурсу - Элемент справочника "Счетчики", "Услуги" или значение перечисления "Виды ресурса".
//
// Возвращаемое значение:
//  Список значений - список доступных для выбора стояков по объекту.
//
Функция ПолучитьСписокДоступныхСтояков(ОбъектУстановкиПрибораУчета, ОбъектОтбораПоКоммунальномуРесурсу = Неопределено) Экспорт
	
	СписокСтояков = Новый СписокЗначений;
	
	Если ТипЗнч(ОбъектУстановкиПрибораУчета) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		Помещение = ОбъектУстановкиПрибораУчета;
	ИначеЕсли ТипЗнч(ОбъектУстановкиПрибораУчета) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		Помещение = ОбъектУстановкиПрибораУчета.Адрес;
	Иначе
		// Пока со стояками зданий и подъездов не решено как быть.
		Возврат СписокСтояков;
	КонецЕсли;
	
	// Для помещений доступны стояки только из выбранного для него проекта.
	Если НЕ ЗначениеЗаполнено(Помещение.ПроектПомещения) Тогда
		Возврат СписокСтояков;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Стояки.Ссылка КАК Стояк,
	|	УПЖКХ_Стояки.Владелец.Владелец КАК Здание,
	|	УПЖКХ_Стояки.Владелец КАК ПроектПомещения,
	|	УПЖКХ_Стояки.КоммунальныйРесурс КАК КоммунальныйРесурс
	|ИЗ
	|	Справочник.УПЖКХ_Стояки КАК УПЖКХ_Стояки
	|ГДЕ
	|	УПЖКХ_Стояки.Владелец = &ПроектПомещения
	|	И &УсловиеОтбораПоВидуКоммунальногоРесурса
	|	И НЕ УПЖКХ_Стояки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ПроектПомещения", Помещение.ПроектПомещения);
	
	УсловиеОтбораПоВидуКоммунальногоРесурса = "ИСТИНА";
	Если ЗначениеЗаполнено(ОбъектОтбораПоКоммунальномуРесурсу) Тогда
		УсловиеОтбораПоВидуКоммунальногоРесурса = "УПЖКХ_Стояки.КоммунальныйРесурс = &КоммунальныйРесурс";
		Если ТипЗнч(ОбъектОтбораПоКоммунальномуРесурсу) = Тип("СправочникСсылка.КВП_Счетчики") Тогда
			Запрос.УстановитьПараметр("КоммунальныйРесурс", ОбъектОтбораПоКоммунальномуРесурсу.ВидУслуги.КоммунальныйРесурс);
		ИначеЕсли ТипЗнч(ОбъектОтбораПоКоммунальномуРесурсу) = Тип("СправочникСсылка.КВП_Услуги") Тогда
			Запрос.УстановитьПараметр("КоммунальныйРесурс", ОбъектОтбораПоКоммунальномуРесурсу.КоммунальныйРесурс);
		Иначе //Если ТипЗнч(ОбъектОтбораПоКоммунальномуРесурсу) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыРесурсов") Тогда
			Запрос.УстановитьПараметр("КоммунальныйРесурс", ОбъектОтбораПоКоммунальномуРесурсу);
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораПоВидуКоммунальногоРесурса", УсловиеОтбораПоВидуКоммунальногоРесурса);
	
	СписокСтояков.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Стояк"));
	
	Возврат СписокСтояков;
	
КонецФункции // ПолучитьСписокДоступныхСтояков()

// Функция возвращает Истина, если в конфигурации ведется учет по стоякам.
//
Функция ИспользоватьФункционалУчетаПУПоСтоякам() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьФункционалУчетаПУПоСтоякам");
	
КонецФункции // ИспользоватьФункционалУчетаПУПоСтоякам()

#КонецОбласти
