#Область ПрограммныйИнтерфейс

#Область ОбработкаСобытий

// Вызывается при получении нового транспортного контейнера, его распаковки
// и записи на основании него элемента справочника ТранзакцииОбменаСБанками,
// но до расшифровки и проверки подписи. Также вызывается в случае ошибки.
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* ИдентификаторТранзакции  - Строка - идентификатор транзакции.
//		* Документооборот  - СправочникСсылка.ДокументооборотыОбменаСБанками - документооборот, в рамках которого была получена транзакция.
//
Процедура ПриПолученииТранзакции(Транзакция, Результат) Экспорт
	
	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	ЗаявкаНаКредит = РеквизитыТранзакции.Документооборот.Предмет;
	
	// Если транзакция связана с каким-то событием по заявке на кредит, то обновляем состояние соответствующей заявки.
	// В этом случае по типу транзакции можно определить событие по заявке.
	Если ТипЗнч(РеквизитыТранзакции.ТипТранзакции) = Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит")
		И ТипЗнч(ЗаявкаНаКредит) = Тип("ДокументСсылка.ЗаявкаНаКредит")
		И ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		
		Если Результат.Выполнено Тогда
			РегистрыСведений.СостояниеЗаявокНаКредит.ОбновитьСостояниеЗаявкиПриПолученииСообщения(
				ЗаявкаНаКредит,
				РеквизитыТранзакции);
		Иначе
			РегистрыСведений.СостояниеЗаявокНаКредит.ЗаписатьОшибку(
				ЗаявкаНаКредит,
				РеквизитыТранзакции.Организация,
				РеквизитыТранзакции.Банк,
				Результат.ОписаниеОшибки);
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после расшифровки всех файлов транспортного контейнера, если криптография происходит на сервере или в случае ошибки.
// Для поддержки случая криптографии на клиенте необходимо переопределить
// УниверсальныйОбменСБанкамиКлиентПереопределяемый.ПослеРасшифровкиТранспортногоКонтейнера().
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
//		* Предупреждения  - Строка - Предупреждения, возникшие при расшифровке и проверке подписи.
//		* ОтмененоПользователем  - Булево - признак отмены пользователем.
//		* ПодписьНеДействительна  - Булево - Истина, если подпись под одним из документов неверна.
//		* НеизвестныйСертификатПодписи  - Булево - Истина, если подпись выполнена неизвестным сертификатом.
Процедура ПриРасшифровкеТранзакции(Транзакция, Результат) Экспорт
	
	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	ЗаявкаНаКредит = РеквизитыТранзакции.Документооборот.Предмет;
	
	// Если транзакция связана с каким-то событием по заявке на кредит, то обновляем состояние соответствующей заявки.
	// В этом случае по типу транзакции можно определить событие по заявке.
	Если ТипЗнч(РеквизитыТранзакции.ТипТранзакции) = Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит")
		И ТипЗнч(ЗаявкаНаКредит) = Тип("ДокументСсылка.ЗаявкаНаКредит")
		И ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		
		Если Результат.Выполнено Тогда
			РегистрыСведений.СостояниеЗаявокНаКредит.ОбновитьСостояниеЗаявкиПриРасшифровкеСообщения(
				ЗаявкаНаКредит,
				РеквизитыТранзакции);
		Иначе
			РегистрыСведений.СостояниеЗаявокНаКредит.ЗаписатьОшибку(
				ЗаявкаНаКредит,
				РеквизитыТранзакции.Организация,
				РеквизитыТранзакции.Банк,
				Результат.ОписаниеОшибки);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после отправки транзакции или при ошибке отправки.
// 
// Параметры:
//  Транзакция - СправочникСсылка.ТранзакцииОбменаСБанками - Элемент справочника, созданный на основании данных контейнера.
//  Результат - Структура - Содержит ключи:
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
Процедура ПриОтправкеТранзакции(Транзакция, Результат) Экспорт

	РеквизитыТранзакции = УниверсальныйОбменСБанками.РеквизитыТранзакции(Транзакция);
	ЗаявкаНаКредит = РеквизитыТранзакции.Документооборот.Предмет;
	
	// Если транзакция связана с каким-то событием по заявке на кредит, то обновляем состояние соответствующей заявки.
	// В этом случае по типу транзакции можно определить событие по заявке.
	Если ТипЗнч(РеквизитыТранзакции.ТипТранзакции) = Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит")
		И ТипЗнч(ЗаявкаНаКредит) = Тип("ДокументСсылка.ЗаявкаНаКредит") И ЗначениеЗаполнено(ЗаявкаНаКредит) Тогда
		
		Если Результат.Выполнено Тогда
			РегистрыСведений.СостояниеЗаявокНаКредит.ОбновитьСостояниеЗаявкиПриОтправкеСообщения(
				ЗаявкаНаКредит,
				РеквизитыТранзакции);
		Иначе
			РегистрыСведений.СостояниеЗаявокНаКредит.ЗаписатьОшибкуПоАктуальномуСостоянию(
				ЗаявкаНаКредит,
				РеквизитыТранзакции,
				Результат.ОписаниеОшибки);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после создания транзакции или при ошибке создания.
//  Результат - Структура - Содержит ключи:
//		* Организация - СправочникСсылка.Организации - организация из транзакции.
//		* Предмет - ОпределяемыеТипы.ПредметОбменаСБанками - предмет транзакции.
//		* ТипТранзакции - ОпределяемыеТипы.ТипыТранзакцийОбменаСБанками - предмет транзакции.
//		* Банки - Массив - Массив, содержащий банки получатели или банк отправитель. В текущей версии сервиса в массиве всегда 1 банк.
//		* Выполнено - Булево - признак успешности выполения операции.
//		* ОписаниеОшибки  - Строка - Текст ошибки, если возникла, или пустая строка, если нет ошибок.
Процедура ПриСозданииТранзакции(Результат) Экспорт 
	
	// Если в связи с каким-то событием по заявке на кредит возникла ошибка, то запишем эту информацию в актуальную запись состояния этой заявки.
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки)
		И ТипЗнч(Результат.ТипТранзакции) = Тип("ПеречислениеСсылка.ТипыТранзакцийОбменаСБанкамиЗаявкиНаКредит")
		И ТипЗнч(Результат.Предмет) = Тип("ДокументСсылка.ЗаявкаНаКредит") И ЗначениеЗаполнено(Результат.Предмет) Тогда
		
		РеквизитыТранзакции = Новый Структура;
		РеквизитыТранзакции.Вставить("ТипТранзакции", Результат.ТипТранзакции);
		РеквизитыТранзакции.Вставить("Организация",   Результат.Организация);
		РеквизитыТранзакции.Вставить("Банк",          Результат.Банки[0]);
		
		РегистрыСведений.СостояниеЗаявокНаКредит.ЗаписатьОшибкуПоАктуальномуСостоянию(
			Результат.Предмет,
			РеквизитыТранзакции,
			Результат.ОписаниеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращеает тип перечисления характеристик сервиса.
// Возвращаемые перечисления должны быть включены в состав определяемого типа ХарактеристикиСервисовУниверсальногоОбменаСБанками
//
// Параметры:
//  Сервис - Значение перечисления - значение, определяющее сервис для которого необходимо получить тип перечисления характеристик
Процедура ПеречислениеХарактеристикСервиса(Сервис, Перечисление) Экспорт
	
	Перечисление = Неопределено;
	
	// Возвращаемые перечисления должны быть включены в состав определяемого типа ХарактеристикиСервисовУниверсальногоОбменаСБанками.
	Если Сервис = ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ЗаявкиНаКредит") Тогда
		Перечисление = Перечисления.ХарактеристикиСервисаЗаявкиНаКредит;
	Иначе
		ВызватьИсключение "Неизвестный сервис: " + Сервис;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при получении и расшифровке транзакций.
//
// Параметры:
//  Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - набор взаимодействий с банком по определенному
//                                                                      предмету обмена (например, заявке на кредит).
//
// Возвращаемое значение:
//   Структура   - см. УниверсальныйОбменСБанками.ОписаниеСтатусаДокументооборота()
//
Процедура СтатусДокументооборота(Документооборот, ОписаниеСтатуса) Экспорт
	
	Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
	
	Если Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит Тогда

		ЗаявкиНаКредит.СтатусДокументооборота(Документооборот, ОписаниеСтатуса);

	КонецЕсли;
	
КонецПроцедуры

// Возвращает спискок сервисов обмена с банками, для которых проверяется
// наличие входящих транзакций на сервере.
// Параметры:
//   Сервисы - Массив - в параметре возвращается список сервисов для проверки входящих транзакций в регламентном задании.
Процедура СписокСервисовДляАвтоматическойПроверкиВходящихТранзакций(Сервисы) Экспорт
	
	Сервисы = Новый Массив;
	Сервисы.Добавить(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	
КонецПроцедуры

// Процедура возвращает краткое название конфигурации.
// Длина возвращаемого значения не должна превышать 30 символов.
//
// Параметры:
//   ИмяПрограммы - Строка - в параметре возвращается краткое название конфигурации.
//
Процедура КраткоеНазваниеПрограммы(ИмяПрограммы) Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятия" 
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая1"
		ИЛИ МетаданныеИмя = "БухгалтерияПредприятияУчебная" Тогда
		ИмяПрограммы = "1С:Бухгалтерия";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		ИмяПрограммы = "1С:Бухгалтерия КОРП";
	Иначе
		ИмяПрограммы = МетаданныеИмя;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя сервиса, которое используется при получении тикета на портале ИТС.
// Если возвращается пустая строка, то будет использовано значение по умолчанию.
// Параметры:
//   Сервис - Значение перечисления - значение, определяющее сервис для которого необходимо получить имя сервиса на портале
//   Имя - Строка - имя сервиса на портале ИТС
//
Процедура ИмяСервисаНаПорталеИТС(Сервис, Имя) Экспорт
	
КонецПроцедуры

Процедура МакетСервиса(Сервис, Макет) Экспорт
	
	Если Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит Тогда
		Макет = ПолучитьОбщийМакет("ОписаниеДокументооборотовСервисаЗаявкиНаКредит");
	Иначе
		ВызватьИсключение НСтр("ru='Макет для сервиса не определен.'");
	КонецЕсли;
	
КонецПроцедуры

// В параметре Сервис возвращает значение перечисления СервисыОбменаСБанками на основании анализа параметра ИдентификаторСервиса.
// Параметры:
//   ИдентификаторСервиса - Строка - строковый идентификатор сервиса.
//   Сервис - Перечисление.СервисыОбменаСБанками - в параметре возвращается
//     значение перечисления после анализа параметра ИдентификаторСервиса.
Процедура ОпределитьСервисПоСтроке(ИдентификаторСервиса, Сервис) Экспорт
	
	Сервисы = Новый Соответствие;
	Сервисы.Вставить(ВРег("ЗаявкиНаКредит"), Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	Сервис = Сервисы.Получить(СокрЛП(ВРег(ИдентификаторСервиса)));
	
	Если Сервис = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный сервис: " + ИдентификаторСервиса + "'");
	КонецЕсли;
	
КонецПроцедуры

// В параметре Сервис возвращает строковый идентификатор сервиса на основании анализа параметра СсылкаНаСервис.
// Параметры:
//   СсылкаНаСервис - Перечисление.СервисыОбменаСБанками - значение перечисления СервисыОбменаСБанками.
//   Сервис - Строка - в этот параметр возвращается строковый идентификатор сервиса после анализа параметра СсылкаНаСервис.
Процедура ОпределитьСервисПоСсылке(СсылкаНаСервис, Сервис) Экспорт
	
	Сервисы = Новый Соответствие;
	Сервисы.Вставить(Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит, "ЗаявкиНаКредит");
	Сервис = Сервисы.Получить(СсылкаНаСервис);
	
	Если Сервис = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Текстовое представление сервиса " + СсылкаНаСервис + " не задано.'");
	КонецЕсли;
	
КонецПроцедуры

// В параметре Сервис возвращает значение перечисления СервисыОбменаСБанками на основании анализа параметра ИдентификаторСервиса.
// Параметры:
//   ИдентификаторСервиса - Строка - строковый идентификатор сервиса.
//   Сервис - Перечисление.СервисыОбменаСБанками - в параметре возвращается
//     значение перечисления после анализа параметра ИдентификаторСервиса.
Процедура ОпределитьСервисПоИдентификаторуНаСервере(ИдентификаторСервиса, Сервис) Экспорт
	
	Сервисы = Новый Соответствие;
	Сервисы.Вставить(ВРег("ЗаявкиНаКредит"), Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит);
	Сервис = Сервисы.Получить(СокрЛП(ВРег(ИдентификаторСервиса)));
	
	Если Сервис = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Неизвестный сервис: " + ИдентификаторСервиса + "'");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную таблицу этапов отправки.
// 
// Параметры:
//	Документооборот - СправочникСсылка.ДокументооборотыОбменаСБанками - Документооборот обмена с банками.
//	ДополнительныеПараметры - Структура - Дополнительные параметры для формы состояния обмена.
//	ТаблицаЭтаповОтправки - ТаблицаЗначений - см. УниверсальныйОбменСБанками.ЗаготовкаТаблицыЭтаповОтправки().
//
Процедура ТаблицаЭтаповОтправки(Документооборот, ДополнительныеПараметры, ТаблицаЭтаповОтправки) Экспорт
	
	РеквизитыДокументооборота = УниверсальныйОбменСБанками.РеквизитыДокументооборота(Документооборот);
	
	Если РеквизитыДокументооборота.Сервис = Перечисления.СервисыОбменаСБанками.ЗаявкиНаКредит Тогда
		ЗаявкиНаКредит.ЗаполнитьТаблицуЭтаповОтправки(РеквизитыДокументооборота, ДополнительныеПараметры, ТаблицаЭтаповОтправки);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заданные реквизиты организации в параметре Результат.
// Параметры:
//   Организация - СправочникСсылка.Организации - ссылка на организацию;
//   Реквизиты   - Строка - список реквизитов, разделенные запятыми.
//   Результат   - Структура - структура с полями, заданными в параметре реквизиты.
// Возвращаемое значение:
//   Структура - структура с ключами, определяемыми строкой Реквизиты.
//
Процедура РеквизитыОрганизации(Организация, Реквизиты, Результат) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Организация);
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Массив, Реквизиты, Истина);
	Для каждого КлючЗначение Из ЗначенияРеквизитов.Получить(Организация) Цикл
		Результат.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти