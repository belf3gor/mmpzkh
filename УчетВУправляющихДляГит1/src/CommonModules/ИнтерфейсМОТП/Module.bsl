#Область ПрограммныйИнтерфейс

// Построить дерево упаковок на основании данных о кодах маркировки.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - Коды маркировки для которых необходимо построить дерево упаковок.
// 	Детализация - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП, Неопределено - Детализация хранения табачной продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// * ТекстОшибки                    - Строка - Текст ошибки.
// * ДеревоУпаковок                 - ДеревоЗначений, Неопределено - Дерево упаковок, построенное по переданным кодам маркировки.
// * GTIN - ТаблицаЗначений - Список GTIN в разрезе МРЦ:
//  ** GTIN - Строка - GTIN.
//  ** МРЦ - Число - МРЦ.
Функция ДеревоУпаковок(Значение, Детализация = Неопределено) Экспорт
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",         Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("GTIN",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ДеревоУпаковок.Колонки.Добавить("Статус",           Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));
	ДеревоУпаковок.Колонки.Добавить("ИННВладельца",     Новый ОписаниеТипов("Строка"));
	ДеревоУпаковок.Колонки.Добавить("МРЦ",              Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("КоличествоБлоков", Новый ОписаниеТипов("Число"));
	ДеревоУпаковок.Колонки.Добавить("КоличествоПачек",  Новый ОписаниеТипов("Число"));
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДеревоУпаковок",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("GTIN",                           Неопределено);
	
	ТабачныеПачки         = Новый Соответствие;
	Блоки                 = Новый Соответствие;
	ЛогистическиеУпаковки = Новый Соответствие;
	
	ПакетыКодовМаркировки = Новый Массив;
	ПакетКодовМаркировки  = Неопределено;
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		ЭтоЛогистическаяУпаковка = Ложь;
		GTIN                     = Неопределено;
		МРЦ                      = Неопределено;
		КодМаркировкиБезСкобок   = Неопределено;
		Если ШтрихкодированиеМОТП.ЭтоКодМаркировкиТабачнойПачки(Значение, GTIN) Тогда
			ТабачныеПачки.Вставить(Значение, Новый Структура("GTIN", GTIN));
		ИначеЕсли ШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(Значение, GTIN, МРЦ) Тогда
			Блоки.Вставить(Значение, Новый Структура("GTIN, МРЦ", GTIN, МРЦ));
		Иначе
			ЭтоЛогистическаяУпаковка = Истина;
			КодМаркировкиБезСкобок   = КодМаркировкиБезСкобок(Значение);
			ЛогистическиеУпаковки.Вставить(КодМаркировкиБезСкобок, Значение);
		КонецЕсли;
		
		ПакетКодовМаркировки = Новый Массив;
		Если ЭтоЛогистическаяУпаковка И КодМаркировкиБезСкобок <> Значение Тогда
			ПакетКодовМаркировки.Добавить(КодМаркировкиБезСкобок);
		КонецЕсли;
		ПакетКодовМаркировки.Добавить(Значение);
		ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		
		Для Каждого КодМаркировки Из Значение Цикл
			
			ЭтоЛогистическаяУпаковка = Ложь;
			GTIN                     = Неопределено;
			МРЦ                      = Неопределено;
			КодМаркировкиБезСкобок   = Неопределено;
			Если ШтрихкодированиеМОТП.ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, GTIN) Тогда
				ТабачныеПачки.Вставить(КодМаркировки, Новый Структура("GTIN", GTIN));
			ИначеЕсли ШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(КодМаркировки, GTIN, МРЦ) Тогда
				Блоки.Вставить(КодМаркировки, Новый Структура("GTIN, МРЦ", GTIN, МРЦ));
			Иначе
				ЭтоЛогистическаяУпаковка = Истина;
				КодМаркировкиБезСкобок   = КодМаркировкиБезСкобок(КодМаркировки);
				ЛогистическиеУпаковки.Вставить(КодМаркировкиБезСкобок, КодМаркировки);
			КонецЕсли;
			
			Если ПакетКодовМаркировки = Неопределено
				Или ПакетКодовМаркировки.Количество() >= 100 Тогда
				ПакетКодовМаркировки = Новый Массив();
				ПакетыКодовМаркировки.Добавить(ПакетКодовМаркировки);
			КонецЕсли;
			
			Если ЭтоЛогистическаяУпаковка И КодМаркировкиБезСкобок <> КодМаркировки Тогда
				ПакетКодовМаркировки.Добавить(КодМаркировкиБезСкобок);
			КонецЕсли;
			ПакетКодовМаркировки.Добавить(КодМаркировки);
			
		КонецЦикла;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	СтатусыКодовМаркировки = Новый Соответствие;
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл
		
		РезультатЗапросаСтатусовКодовМаркировок = ЗапроситьСтатусыКодовМаркировки(ПакетКодовМаркировки, СтатусыКодовМаркировки);
		
		Если РезультатЗапросаСтатусовКодовМаркировок.ТребуетсяОбновлениеКлючаСессии Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатЗапросаСтатусовКодовМаркировок.СтатусыКодовМаркировки = Неопределено Тогда
			
			ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаСтатусовКодовМаркировок.ТекстОшибки;
			
			Возврат ВозвращаемоеЗначение;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Соответствие кодов маркировки и строк дерева
	КешКодовМаркировки = Новый Соответствие;
	КешGTIN = Новый ТаблицаЗначений;
	КешGTIN.Колонки.Добавить("GTIN", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	КешGTIN.Колонки.Добавить("МРЦ",  Новый ОписаниеТипов("Число"));
	КешGTIN.Индексы.Добавить("GTIN, МРЦ");
	
	Для Каждого ПакетКодовМаркировки Из ПакетыКодовМаркировки Цикл 
		
		Для Каждого КодМаркировки Из ПакетКодовМаркировки Цикл
			
			СтрокаДереваИзКеша = КешКодовМаркировки[КодМаркировки];
			Если СтрокаДереваИзКеша <> Неопределено Тогда
				// Код маркировки уже добавлен в упаковку
				Продолжить;
			КонецЕсли;
			
			РеквизитыПачки = ТабачныеПачки.Получить(КодМаркировки);
			ЭтоКодМаркировкиТабачнойПачки = РеквизитыПачки <> Неопределено;
			
			Если ЭтоКодМаркировкиТабачнойПачки Тогда
				
				ДанныеСтатуса = СтатусыКодовМаркировки[КодМаркировки];
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод        = КодМаркировки;
				СтрокаДерева.Статус          = ДанныеСтатуса.Статус;
				СтрокаДерева.ИННВладельца    = ДанныеСтатуса.ИННВладельца;
				СтрокаДерева.GTIN            = РеквизитыПачки.GTIN;
				СтрокаДерева.МРЦ             = ШтрихкодированиеМОТП.МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
				СтрокаДерева.КоличествоПачек = 1;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.МРЦ) Тогда
					РезультатЗапросаМРЦ = ЗапроситьМРЦДляКодаМаркировки(КодМаркировки);
					Если РезультатЗапросаМРЦ.ДанныеПродукции <> Неопределено Тогда
						СтрокаДерева.МРЦ = РезультатЗапросаМРЦ.ДанныеПродукции.МРЦ;
					КонецЕсли;
				КонецЕсли;
				
				КешКодовМаркировки.Вставить(КодМаркировки, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, КешGTIN);
				
			Иначе
				
				РеквизитыБлока = Блоки.Получить(КодМаркировки);
				ЭтоКодМаркировкиБлока       = РеквизитыБлока <> Неопределено;
				ЭтоКодЛогистическойУпаковки = Не ЭтоКодМаркировкиБлока;
				
				Если ЭтоКодМаркировкиБлока Тогда
					
					// Блоки - всегда в формате со скобками
					Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировки);
					
					ДанныеСтатуса = СтатусыКодовМаркировки[КодМаркировки];
					
				Иначе
					
					КодМаркировкиБезСкобок     = КодМаркировкиБезСкобок(КодМаркировки);
					КодМаркировкиСоСкобками    = ЛогистическиеУпаковки.Получить(КодМаркировкиБезСкобок);
					
					ЭтоПроверкаПарыКодов       = (КодМаркировкиСоСкобками <> КодМаркировкиБезСкобок);
					ЭтоКодМаркировкиСоСкобками = (КодМаркировкиБезСкобок <> КодМаркировки);
					
					Если ЭтоПроверкаПарыКодов Тогда
						
						Если Не ЭтоКодМаркировкиСоСкобками Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеСтатусаБезСкобок  = СтатусыКодовМаркировки[КодМаркировкиБезСкобок];
						ДанныеСтатусаСоСкобками = СтатусыКодовМаркировки[КодМаркировкиСоСкобками];
						
						Если ДанныеСтатусаСоСкобками.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
							ДанныеСтатуса = ДанныеСтатусаСоСкобками;
							Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировкиСоСкобками);
						ИначеЕсли ДанныеСтатусаБезСкобок.Статус <> Перечисления.СтатусыКодовМаркировкиМОТП.Неопределен Тогда
							ДанныеСтатуса = ДанныеСтатусаБезСкобок;
							Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировкиБезСкобок);
						Иначе
							ДанныеСтатуса = ДанныеСтатусаБезСкобок;
							Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировкиСоСкобками);
						КонецЕсли;
						
					Иначе
						
						ДанныеСтатуса = СтатусыКодовМаркировки[КодМаркировки];
						Результат = ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировки);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Результат.ДанныеОбАгрегации <> Неопределено
					И Результат.ДанныеОбАгрегации.Количество() > 0 Тогда
					
					ДанныеСтроки = Новый Структура;
					Если ЭтоКодМаркировкиБлока Тогда
						ДанныеСтроки.Вставить("GTIN",             РеквизитыБлока.GTIN);
						ДанныеСтроки.Вставить("МРЦ",              РеквизитыБлока.МРЦ);
						ДанныеСтроки.Вставить("КоличествоБлоков", 1);
						ДанныеСтроки.Вставить("КоличествоПачек",  0);
					Иначе
						ДанныеСтроки.Вставить("GTIN",             Неопределено);
						ДанныеСтроки.Вставить("МРЦ",              Неопределено);
						ДанныеСтроки.Вставить("КоличествоБлоков", 0);
						ДанныеСтроки.Вставить("КоличествоПачек",  0);
					КонецЕсли;
					ДанныеСтроки.Вставить("ИННВладельца",     ДанныеСтатуса.ИННВладельца);
					ДанныеСтроки.Вставить("Статус",           ДанныеСтатуса.Статус);
					
					Если Детализация = Неопределено
						Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ПустаяСсылка()
						Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
						Или (Не ЭтоКодМаркировкиБлока И Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки)
						Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
						Или (ЭтоКодМаркировкиБлока И Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками) Тогда
						
						СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
						СтрокаДерева.Штрихкод         = КодМаркировки;
						СтрокаДерева.Статус           = ДанныеСтроки.Статус;
						СтрокаДерева.ИННВладельца     = ДанныеСтроки.ИННВладельца;
						СтрокаДерева.GTIN             = ДанныеСтроки.GTIN;
						СтрокаДерева.МРЦ              = ДанныеСтроки.МРЦ;
						СтрокаДерева.КоличествоБлоков = ДанныеСтроки.КоличествоБлоков;
						СтрокаДерева.КоличествоПачек  = ДанныеСтроки.КоличествоПачек;
						
						ЗаполнитьДеревоУпаковокРекурсивно(
							СтрокаДерева, СтрокаДерева,
							Результат.ДанныеОбАгрегации, КешКодовМаркировки, КешGTIN, Детализация);
						
						ОбновитьКешGTIN(СтрокаДерева, КешGTIN);
						
					Иначе
						
						ЗаполнитьДеревоУпаковокРекурсивно(
							ДеревоУпаковок, ДанныеСтроки,
							Результат.ДанныеОбАгрегации, КешКодовМаркировки, КешGTIN, Детализация);
						
						ОбновитьКешGTIN(ДанныеСтроки, КешGTIN);
						
					КонецЕсли;
					
				Иначе
					
					Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
						
						ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
						
						Возврат ВозвращаемоеЗначение;
						
					ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
						
						ВозвращаемоеЗначение.ТекстОшибки = Результат.ТекстОшибки;
						
						Возврат ВозвращаемоеЗначение;
						
					Иначе
						
						// Коробка без вложений?
						СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
						СтрокаДерева.Штрихкод     = КодМаркировки;
						СтрокаДерева.Статус       = ДанныеСтатуса.Статус;
						СтрокаДерева.ИННВладельца = ДанныеСтатуса.ИННВладельца;
						
						Если ЭтоКодМаркировкиБлока Тогда
							СтрокаДерева.GTIN             = РеквизитыБлока.GTIN;
							СтрокаДерева.МРЦ              = РеквизитыБлока.МРЦ;
							СтрокаДерева.КоличествоБлоков = 1;
						КонецЕсли;
						
						КешКодовМаркировки.Вставить(КодМаркировки, СтрокаДерева);
						ОбновитьКешGTIN(СтрокаДерева, КешGTIN);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение.GTIN           = КешGTIN;
	ВозвращаемоеЗначение.ДеревоУпаковок = ДеревоУпаковок;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные продукции по штрихкоду EAN.
// 
// Параметры:
// 	Значение - Массив Из Строка, Строка - GTIN для которых необходимо получить представление и прочие данные.
// Возвращаемое значение:
// 	Структура - Описание:
// 	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
// 	* ДанныеПродукцииПоШтрихкодуEAN - Соответствие Из КлючИЗначение, Неопределено - Соответствие штрихкода EAN и данных продукции из сервиса ИС МОТП:
// 	 ** Ключ - Строка - Штрихкод EAN.
// 	 ** Значение - Структура - Реквизиты продукции:
// 		*** Идентификатор - Строка - Идентификатор продукции.
// 		*** Наименование - Строка - Идентификатор продукции.
// 		*** НаименованиеПолное - Строка - Идентификатор продукции.
// 		*** GTIN - Строка - Идентификатор продукции.
// 		*** ТорговаяМарка - Строка - Идентификатор продукции.
// 		*** ТипУпаковки - Строка - Идентификатор продукции.
// 		*** КоличествоВложенныхЕдиниц - Строка - Идентификатор продукции.
// 		*** Производители - Массив Из Структура - Массив производителей:
// 			**** Наименование - Строка - Наименование производителя.
// 			**** НаименованиеПолное - Строка - Полное наименование организации.
// 			**** ИНН - Строка - ИНН.
// 			**** КПП - Строка - КПП.
// 			**** ФИО - Строка - ФИО.
// 			**** Адрес - Строка - Фактический адрес организации.
// 		*** ВыполненаСинхронизацияGS1 - Булево - Признак выполненной синхронизации с GS1.
// 	* ТекстОшибки                    - Строка - Текст ошибки.
Функция ДанныеПродукцииПоШтрихкодуEAN(Значение) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукцииПоШтрихкодуEAN",  Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ДанныеПродукцииПоШтрихкодуEAN = Новый Соответствие;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ДанныеПродукцииПоШтрихкодуEAN.Вставить(Значение, Неопределено);
	ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
		Для Каждого Штрихкод Из Значение Цикл
			ДанныеПродукцииПоШтрихкодуEAN.Вставить(Штрихкод, Неопределено);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	РезультатЗапросаСпискаПродукции = ЗапроситьСписокПродукции();
	
	ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = РезультатЗапросаСпискаПродукции.ТребуетсяОбновлениеКлючаСессии;
	ВозвращаемоеЗначение.ТекстОшибки                    = РезультатЗапросаСпискаПродукции.ТекстОшибки;
	
	Если РезультатЗапросаСпискаПродукции.ПродукцияОрганизации <> Неопределено Тогда
		
		ТаблицаПродукции = РезультатЗапросаСпискаПродукции.ПродукцияОрганизации;
		
		Для Каждого КлючИЗначение Из ДанныеПродукцииПоШтрихкодуEAN Цикл
			
			ШтрихкодEAN = КлючИЗначение.Ключ;
			
			НайденнаяСтрока = ТаблицаПродукции.Найти(ШтрихкодированиеИС.GTINПоШтрихкодуEAN(ШтрихкодEAN), "GTIN");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				РезультатЗапросаКарточкиПродукции = ЗапроситьКарточкуПродукции(НайденнаяСтрока.Идентификатор);
				
				Если РезультатЗапросаКарточкиПродукции.ДанныеПродукции <> Неопределено Тогда
					
					ДанныеПродукцииПоШтрихкодуEAN.Вставить(ШтрихкодEAN, РезультатЗапросаКарточкиПродукции.ДанныеПродукции);
					
				ИначеЕсли РезультатЗапросаКарточкиПродукции.ТребуетсяОбновлениеКлючаСессии Тогда
					
					ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
					Возврат ВозвращаемоеЗначение;
					
				Иначе
					
					ВозвращаемоеЗначение.ТекстОшибки = РезультатЗапросаКарточкиПродукции.ТекстОшибки;
					Возврат ВозвращаемоеЗначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДанныеПродукцииПоШтрихкодуEAN = ДанныеПродукцииПоШтрихкодуEAN;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область РеестрКодовМаркировки

// Запрос статусов кодов маркировки (включая владельца).
// В результате успешного выполнения запроса в ответе вернется список кодов маркировки,
// их статус и владелец на момент запроса. Статусы могут принимать следующие значение:
// 	EMITTED - Эмитирован,
// 	APPLIED - Нанесён,
// 	INTRODUCED - Введён в оборот,
// 	WRITTEN_OFF - Выведен из оборота, списан,
// 	WITHDRAWN - Выведен из оборота, продан,
// 	UNDEFINED - Неопределен.
// 
// Параметры:
// 	КодыМаркировки - Массив - Массив кодов маркировки.
// 	СтатусыКодовМаркировкиКеш - Соответствие, Неопределено - Кеш статусов кодов маркировки.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* СтатусыКодовМаркировки - Соответствие кодов маркировки и структур:
//		* Статус       - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//		* ИННВладельца - Строка                                        - ИНН владельца кода маркировки.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусыКодовМаркировки(КодыМаркировки, СтатусыКодовМаркировкиКеш = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("ids", КодыМаркировки);
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос("private-office-api/private/v2/cis/status", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения статусов кодов маркировки из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Данные статусах кодов маркировки не получены из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Если ТипЗнч(ДанныеОбработки) = Тип("Массив") Тогда
					
					Если СтатусыКодовМаркировкиКеш = Неопределено Тогда
						ВозвращаемоеЗначение.СтатусыКодовМаркировки = Новый Соответствие;
					Иначе
						ВозвращаемоеЗначение.СтатусыКодовМаркировки = СтатусыКодовМаркировкиКеш;
					КонецЕсли;
					
					Для Каждого Элемент Из ДанныеОбработки Цикл
						
						ПараметрыСтатусаКодаМаркировки = ИнтерфейсМОТПСлужебный.ПараметрыСтатусаКодаМаркировки();
						ПараметрыСтатусаКодаМаркировки.Статус = ИнтерфейсМОТПСлужебный.СтатусКодаМаркировки(Элемент.status);
						Если Элемент.Свойство("ownerInn") Тогда
							ПараметрыСтатусаКодаМаркировки.ИННВладельца = Элемент.ownerInn;
						КонецЕсли;
						
						ВозвращаемоеЗначение.СтатусыКодовМаркировки.Вставить(
							Элемент.cis, ПараметрыСтатусаКодаМаркировки);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Данные статусах кодов маркировки не получены из ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Данные о статусах кодов маркировки не получены из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос данных об агрегации кодов маркировки в ИС МОТП.
// В результате успешного выполнения запроса в ответе вернется информация о составе кода агрегата.
// В запросе следует указывать один код маркировки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//	 Структура - Вложенные коды упаковок:
//		* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//		* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//		* ТекстОшибки - Строка - Текст ошибки
//		* ДанныеОбАгрегации - Массив из Структура:
//			* КодМаркировки - Строка                                        - Код маркировки.
//			* Статус        - ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП - Статус кода маркировки.
//			* ИНН           - Строка                                        - ИНН владельца кода маркировки.
Функция ЗапроситьДанныеОбАгрегацииКодовМаркировки(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	ВозвращаемоеЗначение.Вставить("ДанныеОбАгрегации",              Неопределено);
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/private/v2/cis/aggregated?cis=%1", КодироватьСтроку(КодМаркировки, СпособКодированияСтроки.КодировкаURL)),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			180, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(
				НСтр("ru='Ошибка получения вложенных кодов маркировки по коду упаковки %1 из сервиса ИС МОТП'"),
				КодМаркировки) + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON, Истина);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Данные об агрегации кодов маркировки не получены из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ДанныеОбАгрегации = ДанныеОбработки;
				
			КонецЕсли;
		
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 404 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Данные об агрегации кодов маркировки не получены из ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Данные об агрегации кодов маркировки не получены из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// В результате успешного выполнения запроса в ответе вернется информация о максимальной
// розничной цене табачной продукции, если она установлена.
// Если в запросе код маркировки является агрегат, то информация
// о цене будет предоставлена минимальной единице товара, то есть пачки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ДанныеПродукции - Структура - Данные о МРЦ, GTIN и наименовании:
//		** GTIN - Строка - GTIN продукции.
//		** МРЦ  - Число  - МРЦ для кода маркировки. Если указано -1, то МРЦ не ограничено.
//		** Наименование - Строка - Наименование продукции.
// * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьМРЦДляКодаМаркировки(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/private/v2/cis/mrp?cis=%1", КодироватьСтроку(КодМаркировки, СпособКодированияСтроки.КодировкаURL)),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения МРЦ для кода маркировки из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			МассивДанныхОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если МассивДанныхОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='МРЦ для кода маркировки не получена из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеОбработки = МассивДанныхОбработки[0];
				
				ДанныеПродукции = Новый Структура;
				ДанныеПродукции.Вставить("GTIN",         ДанныеОбработки.gtin);
				Если ДанныеОбработки.Свойство("mrp") Тогда
					ДанныеПродукции.Вставить("МРЦ", Число(ДанныеОбработки.mrp));
				Иначе
					ДанныеПродукции.Вставить("МРЦ", -1);
				КонецЕсли;
				ДанныеПродукции.Вставить("Наименование", ДанныеОбработки.productName);
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='МРЦ для кода маркировки не получена из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='МРЦ для кода маркировки не получена из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запрос списка кодов происходит в несколько этапов:
// 1. Формирование заказа на список кодов.
// Фильтр указания типа упаковки:
// 	Короб - box
// 	Блок  - block
// 	Пачка - pack
// 2. Проверка статуса заказа на формирование списка кодов маркировки участника.
// 3. Получение результата заказа на формирование списка кодов маркировки участника.
// 
// После успешного завершения по адресу результата заказа будет доступен архив со списком кодов,
// принадлежащих участнику, сформировавший запрос.
// Файл будет доступен для скачивание в течение часа, после чего будет удален.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипУпаковки - Строка - Для получения списка логистических упаковок: "box", для блоков: "black", для пачек "pack".
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ИдентификаторЗапроса - Строка - Идентификатор запроса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СоздатьЗаказНаФормированиеСпискаКодовМаркировкиУчастника(Организация, ТипУпаковки = "box") Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии(Организация);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаказа",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	Если ТипУпаковки <> Неопределено Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("packageType", ТипУпаковки);
		ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос = Новый HTTPЗапрос("private-office-api/api/v2/cis/my", ЗаголовокHTTP);
	Если ТелоЗапросаJSON <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка запроса списка кодов маркировки, принадлежащих участнику из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИдентификаторЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru='Идентификатор запроса списка кодов маркировки, принадлежащих участнику не получен из ИС МОТП.
					     |Код состояния HTTP: %1.
					     |Текст ошибки: %2'"),
				РезультатОтправкиЗапроса.КодСостояния,
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Идентификатор запроса списка кодов маркировки, принадлежащих участнику не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрУчастников

// Выполнить запрос статуса регистрации в МОТП по ИНН.
// В результате успешного выполнения запроса в ответе вернется
// информация о статусе регистрации в ИС МОТП, запрошенного ИНН.
// Сценарий использования: Проверка статуса регистрации перед передачей заявки о регистрации участника.
// 
// Параметры:
// 	ИНН - Строка - ИНН участника.
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* Статус                         - ПеречислениеСсылка.СтатусыУчастниковМОТП - Статус участника.
//  * ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусРегистрацииУчастника(ИНН) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ПустаяСтрока(ИНН) Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка: В метод ЗапроситьСтатусРегистрацииУчастника не передан ИНН'");
	КонецЕсли;
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/private/v2/participants/%1/status", ИНН),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения статуса участника по ИНН из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					СтрШаблон(НСтр("ru='Статус участника с ИНН %1 не получен из ИС МОТП.'"), ИНН),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Статус = ИнтерфейсМОТПСлужебный.СтатусУчастника(ДанныеОбработки.status);
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				СтрШаблон(НСтр("ru='Статус участника с ИНН %1 не получен из ИС МОТП.'"), ИНН),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Статус участника с ИНН %1 не получен из ИС МОТП.
				     |Текст ошибки: %2'"),
			ИНН,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос списка ИНН контрагентов организации.
// В результате успешного выполнения запроса в ответе вернется список, состоящий из ИНН контрагентов.
// Организация должна быть авторизована в ИС МОТП.
// 
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой запрашивается список ИНН контрагентов.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево    - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ИННКонтрагентов                - Массив    - Список ИНН контрагентов.
//  * ТекстОшибки                    - Строка    - Текст сообщения об ошибке.
Функция ЗапроситьСписокКонтрагентовУчастника(Организация) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии(Организация);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИННКонтрагентов",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос("private-office-api/private/v2/partner/", ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения списка ИНН контрагентов организации из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					СтрШаблон(НСтр("ru='Список ИНН контрагентов организации %1 не получен из ИС МОТП.'"), Организация),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ИННКонтрагентов = ДанныеОбработки;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				СтрШаблон(НСтр("ru='Список ИНН контрагентов организации %1 не получен из ИС МОТП.'"), Организация),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Список ИНН контрагентов организации %1 не получен из ИС МОТП.
				     |Текст ошибки: %2'"),
			Организация,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрПродукции

// Выполнить запрос списка продукции.
// В результате успешного выполнения запроса в ответе вернется список продукции,
// содержащие id – идентификатор продукта, gtin - международный товарный идентификатор и producerINN – ИНН производителя. 
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево          - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ПродукцияОрганизации           - ТаблицаЗначений - Список продукции организации:
//		** Идентификатор    - Строка - Идентификатор товара.
//		** GTIN             - Строка - GTIN товара.
//		** ИННПроизводителя - Строка - ИНН производителя.
//  * ТекстОшибки                    - Строка          - Текст сообщения об ошибке.
Функция ЗапроситьСписокПродукции() Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПродукцияОрганизации",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Сообщить("РасширениеТестовыйКонтурМОТП_ЗапроситьСписокПродукции");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос("private-office-api/private/v2/products/", ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения реестра продукции из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Реестр продукции не получен из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ПродукцияОрганизации = Новый ТаблицаЗначений();
				ПродукцияОрганизации.Колонки.Добавить("Идентификатор",    Новый ОписаниеТипов("Строка"));
				ПродукцияОрганизации.Колонки.Добавить("GTIN",             Новый ОписаниеТипов("Строка"));
				ПродукцияОрганизации.Колонки.Добавить("ИННПроизводителя", Новый ОписаниеТипов("Строка"));
				
				Для Каждого ЭлементМассива Из ДанныеОбработки.results Цикл
					
					СтрокаТЧ = ПродукцияОрганизации.Добавить();
					СтрокаТЧ.Идентификатор    = ЭлементМассива.id;
					СтрокаТЧ.GTIN             = ЭлементМассива.gtin;
					СтрокаТЧ.ИННПроизводителя = ЭлементМассива.producerINN;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ПродукцияОрганизации = ПродукцияОрганизации;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Реестр продукции не получен из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Реестр продукции не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполнить запрос карточки продукции по идентификатору.
// В результате успешного выполнения запроса в ответе вернется информация о продукте и ее производителе.
// Адрес URL запроса заканчивается идентификатором продукта из реестра продукции 
// 
// Параметры:
//	Идентификатор - Строка - Идентификатор продукции в ИС МОТП.
// 
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//	* ТребуетсяОбновлениеКлючаСессии - Булево          - Необходимость обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ДанныеПродукции - Структура - Реквизиты продукции:
//		** Идентификатор - Строка - Идентификатор продукции.
//		** Наименование - Строка - Идентификатор продукции.
//		** НаименованиеПолное - Строка - Идентификатор продукции.
//		** GTIN - Строка - Идентификатор продукции.
//		** ТорговаяМарка - Строка - Идентификатор продукции.
//		** ТипУпаковки - Строка - Идентификатор продукции.
//		** КоличествоВложенныхЕдиниц - Строка - Идентификатор продукции.
//		** Производители - Массив Из Структура - Массив производителей:
//			*** Наименование - Строка - Наименование производителя.
//			*** НаименованиеПолное - Строка - Полное наименование организации.
//			*** ИНН - Строка - ИНН.
//			*** КПП - Строка - КПП.
//			*** ФИО - Строка - ФИО.
//			*** Адрес - Строка - Фактический адрес организации.
//		** ВыполненаСинхронизацияGS1 - Булево - Признак выполненной синхронизации с GS1.
//  * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьКарточкуПродукции(Идентификатор) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/private/v2/products/%1", Идентификатор),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения карточки продукции из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					СтрШаблон(НСтр("ru='Карточка продукции с идентификатором %1 не получена из ИС МОТП.'"), Идентификатор),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукции = Новый Структура;
				ДанныеПродукции.Вставить("Идентификатор",             ДанныеОбработки.id);
				ДанныеПродукции.Вставить("Наименование",              ДанныеОбработки.shortName);
				ДанныеПродукции.Вставить("НаименованиеПолное",        ДанныеОбработки.name);
				ДанныеПродукции.Вставить("GTIN",                      ДанныеОбработки.gtin);
				ДанныеПродукции.Вставить("ТорговаяМарка",             ДанныеОбработки.brand);
				ДанныеПродукции.Вставить("ТипУпаковки",               ДанныеОбработки.packageType);
				ДанныеПродукции.Вставить("КоличествоВложенныхЕдиниц", ДанныеОбработки.innerUnitCount);
				ДанныеПродукции.Вставить("Производители",             Новый Массив);
				ДанныеПродукции.Вставить("ВыполненаСинхронизацияGS1", ДанныеОбработки.gs1Synced);
				
				Для Каждого ДанныеОбработкиПроизводитель Из ДанныеОбработки.producers Цикл
					
					ДанныеПроизводителя = Новый Структура;
					ДанныеПроизводителя.Вставить("Наименование",       ДанныеОбработкиПроизводитель.name);
					ДанныеПроизводителя.Вставить("НаименованиеПолное", ДанныеОбработкиПроизводитель.fullName);
					ДанныеПроизводителя.Вставить("ИНН",                ДанныеОбработкиПроизводитель.inn);
					ДанныеПроизводителя.Вставить("КПП",                ДанныеОбработкиПроизводитель.kpp);
					ДанныеПроизводителя.Вставить("ФИО",                ДанныеОбработкиПроизводитель.fio);
					ДанныеПроизводителя.Вставить("Адрес",              ДанныеОбработкиПроизводитель.legalAddress);
					
					ДанныеПродукции.Производители.Добавить(ДанныеПроизводителя);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					СтрШаблон(НСтр("ru='Карточка продукции с идентификатором %1 не получена из ИС МОТП.'"), Идентификатор),
					РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Карточка продукции с идентификатором %1 не получена из ИС МОТП.
				     |Текст ошибки: %2'"),
			Идентификатор,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РеестрДокументов

// В результате успешного выполнения запрос в ответе вернется содержание документа.
// В качестве идентификатора следует указывать имя файла документа без расширени
// 
// Параметры:
// 	Идентификатор - Строка - Имя файла документа без расширения.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ИмяФайла                       - Строка - Имя временного файла с содержимым документа.
//	* ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьДокументПоИдентификатору(Идентификатор, ИмяВременногоФайла) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяФайла",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/api/v2/documents/my/%1/body", Идентификатор),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения документа по идентификатору из ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИмяФайла = РезультатОтправкиЗапроса.ИмяФайла;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru='Документ по идентификатору не получен из ИС МОТП.
					     |Код состояния HTTP: %1.
					     |Текст ошибки: %2'"),
				РезультатОтправкиЗапроса.КодСостояния,
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Документ по идентификатору не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запрос списка кодов происходит в несколько этапов:
// 1. Формирование заказа на список кодов.
// Фильтр по типу документа:
// 	Чек - receipt
// 2. Проверка статуса заказа на формирование списка документов участника.
// 3. Получение результата заказа на формирование списка документов участника.
// 
// После успешного завершения по адресу результата заказа будет доступен
// архив со списком документов, в которых упоминался участник, выполнивший запрос.
// Файл будет доступен для скачивание в течение часа, после чего будет удален.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - Организация.
// 	ТипДокумента - ПеречислениеСсылка.ТипыДокументовМОТП - Тип документа МОТП.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ИдентификаторЗапроса - Строка - Идентификатор запроса.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция СоздатьЗаказНаФормированиеСпискаДокументовУчастника(Организация, ТипДокумента = Неопределено) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии(Организация);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаказа",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	Если ТипДокумента <> Неопределено Тогда
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("documentType", ТипДокумента);
		ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос = Новый HTTPЗапрос("private-office-api/api/v2/documents/my", ЗаголовокHTTP);
	Если ТелоЗапросаJSON <> Неопределено Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка запроса списка документов участника из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.ИдентификаторЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru='Идентификатор запроса списка документов участника не получен из ИС МОТП.
					     |Код состояния HTTP: %1.
					     |Текст ошибки: %2'"),
				РезультатОтправкиЗапроса.КодСостояния,
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Идентификатор запроса списка документов участника не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Проверка статуса заказа участника.
// 	В процессе выполнения          - IN PROGRESS
// 	Задание выполнено              - SUCCESS
// 	При выполнении возникла ошибка - ERROR
// 	Результат устарел              - RESULT_EXPIRED
// 
// Параметры:
// 	ИдентификаторЗаказа - Строка - Идентификатор заказа.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* СтатусЗаказа - Строка - Статус заказа.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьСтатусЗаказа(ИдентификаторЗаказа) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусЗаказа",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/api/v2/orders/%1/status", ИдентификаторЗаказа),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения статуса заказа на формирование списка кодов маркировки участника ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.СтатусЗаказа = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru='Статус заказа на формирование списка кодов маркировки участника не получен из ИС МОТП.
					     |Код состояния HTTP: %1.
					     |Текст ошибки: %2'"),
				РезультатОтправкиЗапроса.КодСостояния,
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Статус заказа на формирование списка кодов маркировки участника не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получение результата заказа на формирование списка кодов маркировки участника.
// 
// Параметры:
// 	ИдентификаторЗаказа - Строка - Идентификатор заказа на формирование списка кодов маркировки участника.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса       - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* РезультатЗаказа - Строка       - Имя файла с результатом заказа.
//	* ТекстОшибки                    - Строка - Текст сообщения об ошибке.
Функция ЗапроситьРезультатЗаказа(ИдентификаторЗаказа, ИмяВременногоФайла) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатЗаказа",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/api/v2/orders/%1/result", ИдентификаторЗаказа),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос, ИмяВременногоФайла);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения результата заказа на формирование списка кодов маркировки участника ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакФайл(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ВозвращаемоеЗначение.РезультатЗаказа = РезультатОтправкиЗапроса.ИмяФайла;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru='Результат заказа на формирование списка кодов маркировки участника не получен из ИС МОТП.
					     |Код состояния HTTP: %1.
					     |Текст ошибки: %2'"),
				РезультатОтправкиЗапроса.КодСостояния,
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Результат заказа на формирование списка кодов маркировки участника не получен из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Запросить цепочки движения кода маркировки.
// В результате успешного выполнения запроса в ответе вернется информация
// о движении кода маркировки. Каждый участник видит производителя продукции,
// своего продавца и текущего владельца. Если данных участника, сформировавшего запрос,
// нет в цепочки движения, то будет виден только производитель и текущий владелец.
// Если код выведен из оборота, то вместо текущего владельца будет соответствующая информация.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// Возвращаемое значение:
//	Структура - Описание:
//	* ТребуетсяОбновлениеКлючаСессии - Булево - Признак необходимости обновления ключа сессии.
//	* РезультатОтправкиЗапроса - (См. ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапроса) - Результат отправки запроса.
//	* ИсторияДвижения - Массив Из Структра - История движения кода маркировки в МОТП:
//		** ДатаОперации                 - Дата - Дата операции
//		** ТипОперации                  - ПеречислениеСсылка.ТипыОперацийДвиженияКодовМаркировкиМОТП - Тип операции движения в МОТП
//		** ГрузоотправительИНН          - Строка - ИНН грузоотправителя
//		** ГрузоотправительНаименование - Строка - Наименование грузоотправителя
//		** ГрузополучательИНН           - Строка  - ИНН грузополучателя
//		** ГрузополучательНаименование  - Строка - Наименование грузополучателя
//		** ИдентификаторДокумента       - Строка - Идентификатор документа
//		** ТипДокумента                 - ПеречислениеСсылка.ТипыДокументовМОТП - Тип документа
//		** СтатусДокумента              - Строка - Статус документа
//	* ДанныеПродукции - Структура - Сведения о продукции:
//		** ИННПроизводителя - Строка - ИНН производителя.
//		** НаименованиеПроизводителя - Строка - Наименование производителя продукции.
//		** ИННВладельца - Строка - ИНН владельца продукции.
//		** НаименованиеВладельца - Строка - Наименование владельца продукции.
//	* ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ЗапроситьИсториюДвиженияКодаМаркировки(КодМаркировки) Экспорт
	
	КлючСессии = ИнтерфейсМОТПСлужебный.ПроверитьОбновитьКлючСессии();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", КлючСессии = Неопределено);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсторияДвижения",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	Если ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("Authorization",  СтрШаблон("Bearer %1", КлючСессии));
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("private-office-api/api/v2/cis/history?cis=%1", КодироватьСтроку(КодМаркировки, СпособКодированияСтроки.КодировкаURL)),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	ЗащищенноеСоединение = ИнтеграцияИСПовтИсп.ЗащищенноеСоединение();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ИнтерфейсМОТПСлужебный.АдресСервера(),
			443,,,
			ИнтернетПрокси,
			60, ЗащищенноеСоединение);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения цепочки движения кода маркировки из сервиса ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Цепочка движений кода маркировки не получена из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПродукции = Новый Структура;
				ДанныеПродукции.Вставить("ИННПроизводителя",          ДанныеОбработки.producerInn);
				ДанныеПродукции.Вставить("НаименованиеПроизводителя", ДанныеОбработки.producerName);
				ДанныеПродукции.Вставить("ИННВладельца",              ДанныеОбработки.ownerInn);
				ДанныеПродукции.Вставить("НаименованиеВладельца",     ДанныеОбработки.ownerName);
				
				ВозвращаемоеЗначение.ДанныеПродукции = ДанныеПродукции;
				
				ИсторияДвижения = Новый ТаблицаЗначений();
				ИсторияДвижения.Колонки.Добавить("ДатаОперации",                 Новый ОписаниеТипов("Дата"));
				ИсторияДвижения.Колонки.Добавить("ТипОперации",                  Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОперацийДвиженияКодовМаркировкиМОТП"));
				ИсторияДвижения.Колонки.Добавить("ГрузоотправительИНН",          Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузоотправительНаименование", Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузополучательИНН",           Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ГрузополучательНаименование",  Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ИдентификаторДокумента",       Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ТипДокумента",                 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовМОТП"));
				ИсторияДвижения.Колонки.Добавить("СтатусДокумента",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыДокументовМОТП"));
				
				ИсторияДвижения.Колонки.Добавить("КодРодительскойУпаковки",      Новый ОписаниеТипов("Строка"));
				ИсторияДвижения.Колонки.Добавить("ТипРодительскойУпаковки",      Новый ОписаниеТипов("Строка"));
				
				Для Каждого ЭлементИстории Из ДанныеОбработки.history Цикл
					
					СтрокаТЧ = ИсторияДвижения.Добавить();
					
					СтрокаТЧ.ДатаОперации = МестноеВремя('19700101' + Цел(ЭлементИстории.operationDate / 1000));
					СтрокаТЧ.ТипОперации  = ИнтерфейсМОТПСлужебный.ТипОперацииДвиженияКодаМаркировки(ЭлементИстории.type);
					
					Если ЭлементИстории.Свойство("participant1Inn") Тогда
						СтрокаТЧ.ГрузоотправительИНН          = Формат(ЭлементИстории.participant1Inn, "ЧГ=0");
						СтрокаТЧ.ГрузоотправительНаименование = ЭлементИстории.participant1Name;
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("participant2Inn") Тогда
						СтрокаТЧ.ГрузополучательИНН           = Формат(ЭлементИстории.participant2Inn, "ЧГ=0");
						СтрокаТЧ.ГрузополучательНаименование  = ЭлементИстории.participant2Name;
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("docId") Тогда
						
						СтрокаТЧ.ИдентификаторДокумента = ЭлементИстории.docId;
						СтрокаТЧ.ТипДокумента           = ИнтерфейсМОТПСлужебный.ТипДокумента(ЭлементИстории.documentType);
						СтрокаТЧ.СтатусДокумента        = ИнтерфейсМОТПСлужебный.СтатусДокумента(ЭлементИстории.documentStatus);
					
					КонецЕсли;
					
					Если ЭлементИстории.Свойство("aggregationCis") Тогда
						
						СтрокаТЧ.ИдентификаторДокумента = ЭлементИстории.aggregationCis;
						СтрокаТЧ.ТипДокумента           = ЭлементИстории.parentCisPackageType;
					
					КонецЕсли;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ИсторияДвижения = ИсторияДвижения;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Цепочка движений кода маркировки не получена из ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Цепочка движений кода маркировки не получена из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область СтанцияУправленияЗаказами

Функция СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки(ТелоЗапроса, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБизнесЗаказа",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	HTTPЗапрос  = Новый HTTPЗапрос("/api/orders", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыСУЗ.Сервер,
			ПараметрыСУЗ.Порт,,,
			ИнтернетПрокси,
			60);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка создания нового бизнес-заказ на эмиссию кодов маркировки СУЗ ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Новый бизнес-заказ на эмиссию кодов маркировки не создан.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ПроверятьПосле = ТекущаяДатаСеанса() + Окр(ДанныеОбработки.expectedCompleteTimestamp / 1000, 0, РежимОкругления.Окр15как20);
				
				ДанныеБизнесЗаказа = Новый Структура;
				ДанныеБизнесЗаказа.Вставить("Идентификатор",  ДанныеОбработки.orderId);
				ДанныеБизнесЗаказа.Вставить("ПроверятьПосле", ПроверятьПосле);
				
				ВозвращаемоеЗначение.ДанныеБизнесЗаказа = ДанныеБизнесЗаказа;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Новый бизнес-заказ на эмиссию кодов маркировки не создан.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Новый бизнес-заказ на эмиссию кодов маркировки не создан.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусПулаКодовМаркировкиИзБизнесЗаказа(ИдентификаторБизнесЗаказа, ИдентификаторСтрокиБизнесЗаказа, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеПула",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("/api/poolStatus?orderId=%1&orderLineId=%2",
			КодироватьСтроку(ИдентификаторБизнесЗаказа,       СпособКодированияСтроки.КодировкаURL),
			КодироватьСтроку(ИдентификаторСтрокиБизнесЗаказа, СпособКодированияСтроки.КодировкаURL)),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыСУЗ.Сервер,
			ПараметрыСУЗ.Порт,,,
			ИнтернетПрокси,
			60);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения статуса пула кодов маркировки из СУЗ ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Статусы пула кодов маркировки не получены из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеПула = Новый Структура;
				ДанныеПула.Вставить("GTIN",       ДанныеОбработки.gtin);
				ДанныеПула.Вставить("Статус",     ДанныеОбработки.status);
				ДанныеПула.Вставить("Количество", ДанныеОбработки.quantity);
				ДанныеПула.Вставить("Остаток",    ДанныеОбработки.left);
				
				ВозвращаемоеЗначение.ДанныеПула = ДанныеПула;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Статусы пула кодов маркировки не получены из ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Статусы пула кодов маркировки не получены из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа(ИдентификаторБизнесЗаказа, ИдентификаторСтрокиБизнесЗаказа, КоличествоКодовМаркировки, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	ВозвращаемоеЗначение.Вставить("КодыМаркировки",           Неопределено);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("/api/codes?orderId=%1&orderLineId=%2&quantity=%3",
			ИдентификаторБизнесЗаказа,
			ИдентификаторСтрокиБизнесЗаказа,
			КоличествоКодовМаркировки),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыСУЗ.Сервер,
			ПараметрыСУЗ.Порт,,,
			ИнтернетПрокси,
			60);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения кодов маркировки из бизнес-заказа СУЗ ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Коды маркировки из бизнес-заказа СУЗ не получены из ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.КодыМаркировки = ДанныеОбработки;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Коды маркировки из бизнес-заказа СУЗ не получены из ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Коды маркировки из бизнес-заказа СУЗ не получены из ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьОтчетОбИспользованииКодовМаркировкиБизнесЗаказа(ТелоЗапроса, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	ВозвращаемоеЗначение.Вставить("ИдентификаторОтчета",      Неопределено);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	HTTPЗапрос  = Новый HTTPЗапрос("/api/reports", ЗаголовокHTTP);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапросаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);	
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыСУЗ.Сервер,
			ПараметрыСУЗ.Порт,,,
			ИнтернетПрокси,
			60);
		
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка передачи отчета об использовании кодов маркировки СУЗ ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Отчет об использовании кодов маркировки не передан в СУЗ.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.ИдентификаторОтчета = ДанныеОбработки;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отчет об использовании кодов маркировки не передан в СУЗ.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Отчет об использовании кодов маркировки не передан в СУЗ.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьОтчетОбИспользовании(Идентификатор, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ДанныеОтчетаОбИспользовании", Неопределено);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTP");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	HTTPЗапрос  = Новый HTTPЗапрос(
		СтрШаблон("/api/usage?productionOrderId=%1",
			Идентификатор),
		ЗаголовокHTTP);
	HTTPОтвет   = Неопределено;
	ТекстОшибки = "";
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			ПараметрыСУЗ.Сервер,
			ПараметрыСУЗ.Порт,,,
			ИнтернетПрокси,
			60);
		
		HTTPОтвет = Соединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru='МОТП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("ru='Ошибка получения отчета об использовании кодов маркировки из СУЗ ИС МОТП'") + Символы.ПС +
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(
		HTTPОтвет, ТекстОшибки);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					НСтр("ru='Отчет об использовании не получен из СУЗ ИС МОТП.'"),
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеОтчетаОбИспользовании = Новый ТаблицаЗначений();
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторЗаказа", Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("КодМаркировки",       Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("Статус",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ"));
				
				ВозвращаемоеЗначение.ДанныеОтчетаОбИспользовании = Неопределено;
				Для Каждого БизнесЗаказ Из ДанныеОбработки Цикл 
					
					Для Каждого Элемент Из БизнесЗаказ.businessOrderReports Цикл
						
						Для Каждого ЭлементСтатуса Из Элемент.codeStatuses  Цикл
							
							СтрокаТЧ = ДанныеОтчетаОбИспользовании.Добавить();
							СтрокаТЧ.ИдентификаторЗаказа = Элемент.orderId;
							СтрокаТЧ.ИдентификаторСтроки = Элемент.orderLineId;
							СтрокаТЧ.КодМаркировки       = ЭлементСтатуса.sntin;
							СтрокаТЧ.Статус              = ИнтерфейсСУЗСлужебный.СтатусКодаМаркировки(ЭлементСтатуса.codeStatus);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.ДанныеОтчетаОбИспользовании = ДанныеОтчетаОбИспользовании;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				НСтр("ru='Отчет об использовании не получен из СУЗ ИС МОТП.'"),
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru='Отчет об использовании не получен из СУЗ ИС МОТП.
				     |Текст ошибки: %1'"),
			РезультатОтправкиЗапроса.ТекстОшибки);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьДеревоУпаковокРекурсивно(ДеревоУпаковок, ДанныеВерхнегоУровня, КодыМаркировкиУпаковок, КешКодовМаркировки, КешGTIN, Детализация)
	
	ДанныеСтроки = Новый Структура;
	ДанныеСтроки.Вставить("GTIN",         NULL);
	ДанныеСтроки.Вставить("ИННВладельца", NULL);
	ДанныеСтроки.Вставить("МРЦ",          NULL);
	
	КоличествоПачек  = 0;
	КоличествоБлоков = 0;
	
	Для Каждого КлючИЗначение Из КодыМаркировкиУпаковок Цикл
		
		Если ТипЗнч(КлючИЗначение) <> Тип("Строка") Тогда // Логистическая упаковка или блок
			
			КодМаркировкиУпаковки   = КлючИЗначение.Ключ;
			ВложенныеКодыМаркировки = КлючИЗначение.Значение;
			
			GTIN = Неопределено;
			МРЦ  = Неопределено;
			ЭтоКодМаркировкиБлока = ШтрихкодированиеМОТП.ЭтоКодМаркировкиБлока(КодМаркировкиУпаковки, GTIN, МРЦ);
			
			Если Детализация = Неопределено
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ПустаяСсылка()
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная Тогда
				
				ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировкиУпаковки, КешКодовМаркировки);
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод     = КодМаркировкиУпаковки;
				СтрокаДерева.Статус       = ДанныеВерхнегоУровня.Статус;
				СтрокаДерева.ИННВладельца = ДанныеВерхнегоУровня.ИННВладельца;
				
				Если Не ПустаяСтрока(ДанныеВерхнегоУровня.GTIN) Тогда
					СтрокаДерева.GTIN = ДанныеВерхнегоУровня.GTIN;
				ИначеЕсли ЭтоКодМаркировкиБлока Тогда
					СтрокаДерева.GTIN = GTIN;
				КонецЕсли;
				Если ДанныеВерхнегоУровня.МРЦ <> 0 Тогда
					СтрокаДерева.МРЦ = ДанныеВерхнегоУровня.МРЦ;
				ИначеЕсли ЭтоКодМаркировкиБлока Тогда
					СтрокаДерева.МРЦ = МРЦ;
				КонецЕсли;
				
				ЗаполнитьДеревоУпаковокРекурсивно(СтрокаДерева, СтрокаДерева, ВложенныеКодыМаркировки, КешКодовМаркировки, КешGTIN, Детализация);
				
				Если ПустаяСтрока(ДанныеВерхнегоУровня.GTIN) Тогда
					ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
				КонецЕсли;
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
				Если ДанныеВерхнегоУровня.МРЦ = 0 Тогда
					ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "МРЦ");
				КонецЕсли;
				
				Если ЭтоКодМаркировкиБлока Тогда
					СтрокаДерева.КоличествоБлоков = СтрокаДерева.КоличествоБлоков + 1;
				КонецЕсли;
				
				КоличествоПачек  = КоличествоПачек  + СтрокаДерева.КоличествоПачек;
				КоличествоБлоков = КоличествоБлоков + СтрокаДерева.КоличествоБлоков;
				
				КешКодовМаркировки.Вставить(КодМаркировкиУпаковки, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, КешGTIN);
				
			Иначе
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("GTIN",             ?(ЭтоКодМаркировкиБлока, GTIN, ""));
				ДанныеСтроки.Вставить("МРЦ",              ?(ЭтоКодМаркировкиБлока, МРЦ,  ""));
				ДанныеСтроки.Вставить("ИННВладельца",     ДанныеВерхнегоУровня.ИННВладельца);
				ДанныеСтроки.Вставить("Статус",           ДанныеВерхнегоУровня.Статус);
				ДанныеСтроки.Вставить("КоличествоПачек",  0);
				ДанныеСтроки.Вставить("КоличествоБлоков", 0);
				
				ЗаполнитьДеревоУпаковокРекурсивно(ДеревоУпаковок, ДанныеСтроки, ВложенныеКодыМаркировки, КешКодовМаркировки, КешGTIN, Детализация);
				
				КоличествоПачек  = КоличествоПачек  + ДанныеСтроки.КоличествоПачек;
				КоличествоБлоков = КоличествоБлоков + ДанныеСтроки.КоличествоБлоков + ?(ЭтоКодМаркировкиБлока, 1, 0);
				
				ОбновитьКешGTIN(ДанныеСтроки, КешGTIN);
				
			КонецЕсли;
			
		Иначе // Табачная пачка
			
			ПроверитьИсправитьДублиСтрокДереваУпаковок(КлючИЗначение, КешКодовМаркировки);
			
			GTIN = ШтрихкодированиеМОТП.ШтрихкодEANИзКодаМаркировкиПачки(КлючИЗначение);
			МРЦ  = ШтрихкодированиеМОТП.МРЦКодаМаркировкиТабачнойПачки(КлючИЗначение);
			
			Если Не ЗначениеЗаполнено(МРЦ) И ДанныеВерхнегоУровня.МРЦ = 0 Тогда
				РезультатЗапросаМРЦ = ЗапроситьМРЦДляКодаМаркировки(КлючИЗначение);
				Если РезультатЗапросаМРЦ.ДанныеПродукции <> Неопределено Тогда
					МРЦ = РезультатЗапросаМРЦ.ДанныеПродукции.МРЦ;
					ДанныеВерхнегоУровня.МРЦ = МРЦ;
				КонецЕсли;
			КонецЕсли;
			
			Если Детализация = Неопределено
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
				Или Детализация = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
				
				СтрокаДерева = ДеревоУпаковок.Строки.Добавить();
				СтрокаДерева.Штрихкод = КлючИЗначение;
				СтрокаДерева.Статус   = ДанныеВерхнегоУровня.Статус;
				
				СтрокаДерева.ИННВладельца = ДанныеВерхнегоУровня.ИННВладельца;
				Если ЗначениеЗаполнено(GTIN) Тогда
					СтрокаДерева.GTIN = GTIN;
				Иначе
					СтрокаДерева.GTIN = ДанныеВерхнегоУровня.GTIN;
				КонецЕсли;
				Если ЗначениеЗаполнено(МРЦ) Тогда
					СтрокаДерева.МРЦ = МРЦ;
				Иначе
					СтрокаДерева.МРЦ = ДанныеВерхнегоУровня.МРЦ;
				КонецЕсли;
				
				СтрокаДерева.КоличествоПачек = 1;
				
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "ИННВладельца");
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "GTIN");
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, "МРЦ");
				
				КешКодовМаркировки.Вставить(КлючИЗначение, СтрокаДерева);
				ОбновитьКешGTIN(СтрокаДерева, КешGTIN);
				
			Иначе
				
				СтрокаДереваВременная = Новый Структура;
				СтрокаДереваВременная.Вставить("МРЦ",          МРЦ);
				СтрокаДереваВременная.Вставить("GTIN",         GTIN);
				СтрокаДереваВременная.Вставить("ИННВладельца", ДанныеВерхнегоУровня.ИННВладельца);
				
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "ИННВладельца");
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "GTIN");
				ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДереваВременная, "МРЦ");
				
				ОбновитьКешGTIN(СтрокаДереваВременная, КешGTIN);
				
			КонецЕсли;
			
			КоличествоПачек = КоличествоПачек + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеВерхнегоУровня.ИННВладельца = ДанныеСтроки.ИННВладельца;
	Если ПустаяСтрока(ДанныеВерхнегоУровня.GTIN) Тогда
		ДанныеВерхнегоУровня.GTIN = ДанныеСтроки.GTIN;
	КонецЕсли;
	Если ДанныеВерхнегоУровня.МРЦ = 0 Тогда
		ДанныеВерхнегоУровня.МРЦ = ДанныеСтроки.МРЦ;
	КонецЕсли;
	
	ДанныеВерхнегоУровня.КоличествоПачек  = КоличествоПачек;
	ДанныеВерхнегоУровня.КоличествоБлоков = КоличествоБлоков;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтроки(ДанныеСтроки, СтрокаДерева, ИмяПоля, ТолькоЗаполненность = Ложь)
	
	Значение = ДанныеСтроки[ИмяПоля];
	ЗначениеДерева = СтрокаДерева[ИмяПоля];
	
	Если Значение = NULL Тогда
		Значение = ЗначениеДерева;
	ИначеЕсли Значение <> Неопределено
		И Значение <> ЗначениеДерева Тогда
		Значение = ?(ТолькоЗаполненность, Ложь, Неопределено);
	КонецЕсли;
	
	ДанныеСтроки[ИмяПоля] = Значение;
	
КонецПроцедуры

Процедура ПроверитьИсправитьДублиСтрокДереваУпаковок(КодМаркировки, КешКодовМаркировки)
	
	СтрокаДереваИзКеша = КешКодовМаркировки[КодМаркировки];
	Если СтрокаДереваИзКеша <> Неопределено Тогда
		Если СтрокаДереваИзКеша.Родитель = Неопределено Тогда
			// Код маркировки уже был добавлен в корень дерева упаковок.
			// Требуется удаление упаковки-дубля из дерева упаковок.
			СтрокаДереваИзКеша.Владелец().Строки.Удалить(СтрокаДереваИзКеша);
			КешКодовМаркировки.Удалить(КодМаркировки);
		Иначе
			ВызватьИсключение
				СтрШаблон(
					НСтр("ru = 'В процессе построения дерева упаковок произошла внутренняя ошибка при обработке кода маркировки %1'"),
					КодМаркировки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКешGTIN(СтрокаДерева, КешGTIN)
	
	Если ПустаяСтрока(СтрокаДерева.GTIN) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("GTIN", СтрокаДерева.GTIN);
	ПараметрыОтбора.Вставить("МРЦ",  СтрокаДерева.МРЦ);
	НайденныеСтроки = КешGTIN.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрокаКешаGTIN = КешGTIN.Добавить();
		НоваяСтрокаКешаGTIN.GTIN = СтрокаДерева.GTIN;
		НоваяСтрокаКешаGTIN.МРЦ  = СтрокаДерева.МРЦ;
	КонецЕсли;
	
КонецПроцедуры

Функция КодМаркировкиБезСкобок(КодМаркировки)
	
	Возврат СтрЗаменить(СтрЗаменить(КодМаркировки, "(", ""), ")", "");
	
КонецФункции

#КонецОбласти