#Область ИнициализацияСоединенияССервером

// Функция возвращает параметры соединения с сервисом смс рассылки.
//
Функция ПолучитьПараметрыСоединения(СтруктураПараметров, ОписаниеОшибки, Аккаунт = Неопределено)

	ТекущийАккаунт = Аккаунт;
	
	Если ЗначениеЗаполнено(ТекущийАккаунт) Тогда
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Пользователь", ТекущийАккаунт.Пользователь);
		СтруктураПараметров.Вставить("ИмяПользователяПоУмолчанию", ТекущийАккаунт.ИмяПользователяПоУмолчанию);
		СтруктураПараметров.Вставить("Пароль", ТекущийАккаунт.Пароль);
		СтруктураПараметров.Вставить("ИспользоватьПроксиСервер", ТекущийАккаунт.ИспользоватьПроксиСервер);
		СтруктураПараметров.Вставить("ПроксиСервер", ТекущийАккаунт.ПроксиСервер);
		СтруктураПараметров.Вставить("ПроксиПорт", ТекущийАккаунт.ПроксиПорт);
		СтруктураПараметров.Вставить("ПроксиПользователь", ТекущийАккаунт.ПроксиПользователь);
		СтруктураПараметров.Вставить("ПроксиПароль", ТекущийАккаунт.ПроксиПароль);
		Возврат Истина;
	Иначе
		ОписаниеОшибки = НСтр("ru=""Нет настроенных аккаунтов для подключения к сервису.""");
		Возврат Ложь;
	КонецЕсли;

КонецФункции // ПолучитьПараметрыСоединения()

// Функция создает HTTP-соединение с сервером смс рассылки.
//
Функция СоздатьHttpСоединение(HTTP_Клиент, ПараметрыСоединения, ОписаниеОшибки)
	
	ПроксиСервер = Неопределено;
	
	Если ПараметрыСоединения.ИспользоватьПроксиСервер Тогда
	
		ПроксиСервер = Новый ИнтернетПрокси;
		ПроксиСервер.Пользователь = ПараметрыСоединения.ПроксиПользователь;
		ПроксиСервер.Пароль       = ПараметрыСоединения.ПроксиПароль;
		ПроксиСервер.Установить("http", ПараметрыСоединения.ПроксиСервер, ПараметрыСоединения.ПроксиПорт);
	
	КонецЕсли;
	
	// Адрес сервера для отправки СМС-сообщений:
	//SMSServer = "1cgw.szk-info.ru"; // устарел
	SMSServer = "gateway.api.sc/1c/";
	
	Попытка
		SSLОбъект = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
		HTTP_Клиент = Новый HTTPСоединение(SMSServer,, ПараметрыСоединения.Пользователь, ПараметрыСоединения.Пароль, ?(ПроксиСервер = Неопределено, Неопределено, ПроксиСервер),, SSLОбъект);
	Исключение
		ОписаниеОшибки = НСтр("ru=""Соединение с текущими параметрами не установлено!" + Символы.ПС + ОписаниеОшибки() + """");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // СоздатьHttpСоединение()

#КонецОбласти

#Область ПроцедурыИФункцииОбменаДаннымиПоHTTP

// Функция отправки смс сообщения.
//
Функция SMS_Отправка(НТТР_клиент, SMS_Server, SMS_User, SMS_Pass, SMS_To, SMS_From, SMS_Flash, SMS_Text, ОписаниеОшибки, СообщениеОбОтправке)
	
	SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	
	SMS_send = "1c_s.php"; // скрипт отправки СМСки
	Ответ    = "";
	ID  = -1; // SMS_ID - не удалось получить
	КодОшибки = 0; // операция выполнена успешно
	
	Запись = Новый Структура;
	
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапроса.Вставить("SMS_User", SMS_User);
	ЗаголовкиЗапроса.Вставить("SMS_Pass", SMS_Pass);
	ЗаголовкиЗапроса.Вставить("SMS_To",   SMS_To);
	ЗаголовкиЗапроса.Вставить("SMS_From", SMS_From);
	
	Если SMS_Flash<>0 Тогда
		ЗаголовкиЗапроса.Вставить("SMS_Flash", SMS_Flash);
	КонецЕсли; 
	
	ЗаголовкиЗапроса.Вставить("SMS_Text", SMS_Text_ToGo);
	
	// Отправка SMS, получение ответа от сервера
	Попытка 
		НТТР_клиент.Получить(SMS_send, ПолучитьИмяФайлаВходящее(), ЗаголовкиЗапроса); 
	Исключение
		ОписаниеОшибки = НСтр("ru=""Неудачная попытка интернет-соединения." + Символы.ПС + ОписаниеОшибки() + """");
		Запись.Вставить("ID", ID);
		Запись.Вставить("КодОшибки", -16);
		Возврат Запись;
	КонецПопытки;
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(ПолучитьИмяФайлаВходящее());
	
	// Обработка ответа от сервера
	Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	
	Если (Кол_воСтрокОтвета=0) ИЛИ (Кол_воСтрокОтвета>2) Тогда
		ОписаниеОшибки = НСтр("ru=""Ошибка! Ответ от сервера не распознан!""");
		Запись.Вставить("ID", ID);
		Запись.Вставить("КодОшибки", -9999);
		Возврат Запись;
	КонецЕсли;
	
	// Предполагается что ответ от сервера был, обработаем его.
	// Разобьем ответ на отдельные строки.
	Строка1_Result=Ответ.ПолучитьСтроку(1); // Проверить наличие "Result: OK_Operation_Completed"
	Строка2_SMS_ID=Ответ.ПолучитьСтроку(2); // SMS_ID: 12345678
	
	Если Строка1_Result="Result: OK_Operation_Completed"  Тогда
		// Выделить SMS_ID и вернуть
		ID = Сред(Строка2_SMS_ID,9); // Выделение SMS_ID
		СообщениеОбОтправке = НСтр("ru=""Сообщение успешно отправлено! ID: " + ID + """");
	Иначе // Если выполняется эта ветка, значит в запросе была ошибка, сообщить ошибку
		ОписаниеОшибки = НСтр("ru=""" + СтрЗаменить(Строка1_Result, "Result: ", "") + """");
		КодОшибки = ПолучитьКодОшибкиПоСтатусу(Строка1_Result);
	КонецЕсли;
	
	Запись.Вставить("ID",        ID);
	Запись.Вставить("КодОшибки", КодОшибки);
	Возврат Запись;
	
КонецФункции

// Функция отложенной отправки смс сообщения.
//
Функция SMS_Отправка_Отложенная(НТТР_клиент, SMS_Server, SMS_User, SMS_Pass, SMS_To, SMS_From, SMS_Flash, SMS_Text, SMS_Time, ОписаниеОшибки, РезультатОтправки)
	
	SMS_Text_ToGo = ОбработатьТекстСМСПередОтправкой(SMS_Text);
	SMS_Time1     = ОбработатьВремяСМСПередОтправкой(SMS_Time);
	
	SMS_send   = "1c_s_t.php"; // скрипт отправки СМСки
	
	Ответ   = "";                         
	ID  = -1; // SMS_ID - не удалось получить
	КодОшибки = 0; // операция выполнена успешно
	
	Запись = Новый Структура;
	
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапроса.Вставить("SMS_User", SMS_User);
	ЗаголовкиЗапроса.Вставить("SMS_Pass", SMS_Pass);
	ЗаголовкиЗапроса.Вставить("SMS_To",   SMS_To);
	ЗаголовкиЗапроса.Вставить("SMS_From", SMS_From);
	Если SMS_Flash<>0 Тогда
		ЗаголовкиЗапроса.Вставить("SMS_Flash" , SMS_Flash);
	КонецЕсли; 
	ЗаголовкиЗапроса.Вставить("SMS_Text", SMS_Text_ToGo);
	ЗаголовкиЗапроса.Вставить("SMS_Time", SMS_Time1);
	
	// Отправка SMS, получение ответа от сервера
	Попытка 
		НТТР_клиент.Получить(SMS_send, ПолучитьИмяФайлаВходящее(), ЗаголовкиЗапроса); 
	Исключение
		ОписаниеОшибки = НСтр("ru = ""Неудачная попытка интернет-соединения." + Символы.ПС + ОписаниеОшибки() + """");
		Запись.Вставить("ID", ID);
		Запись.Вставить("КодОшибки", -16);
		Возврат Запись;
	КонецПопытки;
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(ПолучитьИмяФайлаВходящее());
	
	// Обработка ответа от сервера
	Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	Если (Кол_воСтрокОтвета=0) ИЛИ (Кол_воСтрокОтвета>2) Тогда
		ОписаниеОшибки = НСтр("ru=""Ошибка! Ответ от сервера не распознан!""");
		Запись.Вставить("ID", ID);
		Запись.Вставить("КодОшибки", -9999);
		Возврат Запись;
	КонецЕсли;
	
	// Предполагается что ответ от сервера был, обработаем его.
	// Разобьем ответ на отдельные строки.
	Строка1_Result=Ответ.ПолучитьСтроку(1); // Проверить наличие "Result: OK_Operation_Completed"
	Строка2_SMS_ID=Ответ.ПолучитьСтроку(2); // SMS_ID: 12345678
	
	Если Строка1_Result="Result: OK_Operation_Completed"
	И НЕ СтрДлина(Строка2_SMS_ID) = 8 Тогда
		// Выделить SMS_ID и вернуть
		ID = Сред(Строка2_SMS_ID,9); // Выделение SMS_ID
		СообщениеОбОтправке = НСтр("ru=""Сообщение успешно отправлено! ID: " + ID + """");
	Иначе // Если выполняется эта ветка, значит в запросе была ошибка, сообщить ошибку
		ОписаниеОшибки = НСтр("ru=""Сообщение не удалось отправить! " + Строка1_Result + """");
		КодОшибки = ПолучитьКодОшибкиПоСтатусу(Строка1_Result);
	КонецЕсли;
	
	Запись.Вставить("ID", ID);
	Запись.Вставить("КодОшибки", КодОшибки);
	Возврат Запись;
	
КонецФункции

// Функция SMS_УзнатьБаланс возвращает:
//  При успешном выполнении операции - число кредитов на отправку SMS
//  При ошибке запроса_числа_кредитов возвращается строка вида "Result: Error_...." с кодом ошибки
//  При ошибке функции возврат: "Error".
Функция SMS_УзнатьБаланс(НТТР_клиент, ПараметрыСоединения, Баланс, ОписаниеОшибки)
	
	SMS_bal    = "1c_b.php"; // скрипт получения балланса           
	
	ЗаголовкиЗапроса = "SMS_User:"+ ПараметрыСоединения.Пользователь + Символы.ВК + Символы.ПС 
					   + "SMS_Pass:"+ ПараметрыСоединения.Пароль;
	
	// Получение ответа от сервера
	Попытка 
		НТТР_клиент.Получить(SMS_bal, ПолучитьИмяФайлаВходящее(), ЗаголовкиЗапроса);  
	Исключение
		ОписаниеОшибки = НСтр("ru=""Неудачная попытка интернет-соединения." + Символы.ПС + ОписаниеОшибки() + """"); 
		Возврат Ложь;
	КонецПопытки;
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(ПолучитьИмяФайлаВходящее());
	
	// Обработка ответа от сервера
	Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	
	// Обработка ответа от сервера
	Если ((Кол_воСтрокОтвета=0) или (Кол_воСтрокОтвета>2)) Тогда
		ОписаниеОшибки = НСтр("ru=""Ошибка! Ответ от сервера не распознан!""");
	Иначе
		Строка1_Result  = Ответ.ПолучитьСтроку(1); // Проверить наличие Result: OK_Operation_Completed
		Строка2_Balance = СокрЛП(Ответ.ПолучитьСтроку(2)); // Balance: 98765
		Если (СтрДлина(Строка1_Result)<10) Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		// Если операция выполнена
		Если Строка1_Result="Result: OK_Operation_Completed" Тогда
			Баланс = СокрЛП(Сред(Строка2_Balance,9,130)); // Выделение Balance
		Иначе
			КодОшибки = ПолучитьКодОшибкиПоСтатусу(Строка1_Result);
			ТекстОшибки = ПолучитьОписаниеОшибкиПоКоду(КодОшибки);
			ОписаниеОшибки = НСтр("ru=""" + ТекстОшибки + """"); // Выдать сообщение об ошибке 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Функция получает статус отправки смс сообщения.
//
Функция SMS_Статус(НТТР_клиент, SMS_Server, SMS_User, SMS_Pass, SMS_ID, ОписаниеОшибки, РезультатЗапроса)
	
	SMS_info = "1c_i.php"; // скрипт получения информации о СМС
	
	Ответ   = "";
	Вернуть = "-1";
	
	ЗаголовкиЗапроса = Новый Соответствие();
	ЗаголовкиЗапроса.Вставить("SMS_User", SMS_User);
	ЗаголовкиЗапроса.Вставить("SMS_Pass", SMS_Pass);
	ЗаголовкиЗапроса.Вставить("SMS_ID", SMS_ID);
	
	// Получение ответа от сервера
	Попытка 
		НТТР_клиент.Получить(SMS_info, ПолучитьИмяФайлаВходящее(), ЗаголовкиЗапроса);
	Исключение
		ОписаниеОшибки = НСтр("ru=""Неудачная попытка интернет-соединения." + Символы.ПС + ОписаниеОшибки() + """"); 
		Возврат Вернуть;
	КонецПопытки;
	
	Ответ = Новый ТекстовыйДокумент;
	Ответ.Прочитать(ПолучитьИмяФайлаВходящее());
	
	// Обработка ответа от сервера
	Кол_воСтрокОтвета=Ответ.КоличествоСтрок();
	
	// Обработка ответа от сервера
	Если ((Кол_воСтрокОтвета=0) или (Кол_воСтрокОтвета>3)) Тогда
		ОписаниеОшибки = НСтр("ru=""Ошибка! Ответ от сервера не распознан!""");
	Иначе
		Строка1_Result  = Ответ.ПолучитьСтроку(1); // Проверить наличие Result: OK_Operation_Completed
		Строка2_Time    = Ответ.ПолучитьСтроку(2); // SMS_Time: 2008-06-02 13:31:24
		Строка3_Status  = Ответ.ПолучитьСтроку(3); // SMS_Status: Delivered_To_Gateway
		
		Если Строка1_Result="Result: OK_Operation_Completed" Тогда
			Вернуть = СокрЛП(Сред(Строка3_Status,12,130)); // Выделение SMS_Status
			РезультатЗапроса = НСтр("ru=""Время сообщения: " + Строка2_Time + " статус: " + Строка3_Status + """"); 
		Иначе
			ОписаниеОшибки = НСтр("ru=""Не удалось получить статус. " + Строка1_Result + """"); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Вернуть;
	
КонецФункции

#КонецОбласти

#Область ЭкспортныеМетодыРаботыССервисомРассылки

// Процедура отправки и проверки статусов сообщений.
//
Процедура ПроверкаСМС(Документ, Аккаунт) Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("Сообщение");
	Таблица.Колонки.Добавить("НомерПолучателя");
	Таблица.Колонки.Добавить("GUID");
	Таблица.Колонки.Добавить("ТекстСообщения");
	Таблица.Колонки.Добавить("КодОшибки");
	Таблица.Колонки.Добавить("ИсходноеОписаниеОшибки");
	Таблица.Колонки.Добавить("НомерСтрокиДокумента");
	
	РезультатЗапроса = ПолучитьСообщенияДляОтправки(Документ);
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаДокумента = Выборка.Выбрать();
		Таблица.Очистить();
		
		Пока ВыборкаДокумента.Следующий() Цикл
			НовСтрока = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ВыборкаДокумента,,);
		КонецЦикла;
		
		// Заполняем параметры отправки сообщений
		СписокСообщений = ТаблицаЗначенийВМассивСтруктур(Таблица);
		ДокументСсылка  = Документ;
		
		Если Аккаунт.ТранслитерацияКириллицыВЛатиницу Тогда
			ПроизвестиТранслитерацию(СписокСообщений);
		КонецЕсли;
		
		ОписаниеОшибки = "";
		
		ПараметрыСоединения = Новый Структура();
		
		HTTP_Клиент = Неопределено;
		
		ОтложеннаяОтправка = ПроверитьДатуОтправки(ДокументСсылка.Дата, ДокументСсылка.ДатаИВремяОтправки);
		
		Если ПолучитьПараметрыСоединения(ПараметрыСоединения, ОписаниеОшибки, Аккаунт)
			И СоздатьHTTPСоединение(HTTP_Клиент, ПараметрыСоединения, ОписаниеОшибки) Тогда
			ОтправитьСообщения(СписокСообщений, HTTP_Клиент, ПараметрыСоединения, ?(ОтложеннаяОтправка, ДокументСсылка.ДатаИВремяОтправки, Неопределено))
		КонецЕсли;
		
		// Может быть что отправились не все сообщения, а только часть из них
		КолОтправленных=0;
		ВсегоСообщений = СписокСообщений.Количество();
		
		Для Каждого Строка Из СписокСообщений Цикл
			
			СтрокаДокумента = ДокументОбъект.Получатели.Найти(Строка.НомерСтрокиДокумента, "НомерСтроки");
			
			// Считаем, что сообщение отправлено, если ИД сообщения получен и он не пустой.
			// Если он пустой, то это значит, что баланс аккаунта нулевой, поэтому смс не отправлено.
			Если ТипЗнч(Строка.GUID) = Тип("Строка") И Не ПустаяСтрока(Строка.GUID) Тогда // Отправленное(ые) сообщение(я), части сообщений
				
				КолОтправленных = КолОтправленных + 1;
				
				// Обновим статус сообщения в документе и его ID.
				СтрокаДокумента.ИдентификаторСообщения = Строка.GUID;
				СтрокаДокумента.ПереданоНаСервис = Истина;
				СтрокаДокумента.СостояниеСообщения = Перечисления.смсСостоянияСообщений.ВОчереди;
				СтрокаДокумента.ОписаниеОшибки = "";
				
			Иначе
				
				СтрокаДокумента.ПереданоНаСервис = Ложь;
				СтрокаДокумента.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Ошибка;
				СтрокаДокумента.ОписаниеОшибки = ПолучитьОписаниеОшибкиПоКоду(Строка.КодОшибки);
				
				// Если кош ошибки неизвестен, то в описание ошибки
				// добавим исходное техническое описание ошибки.
				Если Строка.КодОшибки < -8 Тогда
					СтрокаДокумента.ОписаниеОшибки = СтрокаДокумента.ОписаниеОшибки + Символы.ПС + Строка.ИсходноеОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		смсОбщегоНазначения.СообщитьПользователю(" Отправлено: "+КолОтправленных+" из "+ВсегоСообщений + ".");
		
	КонецЦикла;
	
	// Обновление статусов сообщений.
	ПроверитьСообщения(, Аккаунт, Документ);
	ОбновитьСтатусДокумента(Документ);
КонецПроцедуры

// Процедура обновляет статус документа по состояниям сообщений.
//
Процедура ОбновитьСтатусДокумента(Документ)
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	// Проверим, все ли сообщения отправлены.
	Для Каждого Строка Из ДокументОбъект.Получатели Цикл
		
		Если Строка.ПереданоНаСервис
			Или Строка.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.смсСостоянияСообщений.Отправлено")
			Или Строка.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.смсСостоянияСообщений.Доставлено") Тогда
			
			ДокументОбъект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.смсСтатусДокументаСообщение.Отправлено");
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Запишем документ перед отражением расхода СМС.
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры

// Функция возвращает данные о балансе смс аккаунта.
//
Функция ПолучитьБаланс(Аккаунт, Баланс, ОписаниеОшибки = Неопределено) Экспорт
	
	ОписаниеОшибки = "";
	
	ПараметрыСоединения = Новый Структура();
	Если Не ПолучитьПараметрыСоединения(ПараметрыСоединения, ОписаниеОшибки, Аккаунт) Тогда
		Возврат Ложь;
	КонецЕсли;

	HTTP_Клиент = Неопределено;
	
	Если НЕ СоздатьHTTPСоединение(HTTP_Клиент, ПараметрыСоединения, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Баланс = "";
	
	Если НЕ SMS_УзнатьБаланс(HTTP_Клиент, ПараметрыСоединения, Баланс, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьБаланс()

// Функция проверяет возможность отправки сообщений с учетной записи, в зависимости от её баланса.
//
// Параметры:
//  Аккаунт - СправочникСсылка.смсНастройкиАккаунтов - ссылка на учетную запись
//            из справочника "смсНастройкиАккаунтов".
//  ОписаниеОшибки - Строка - Текст ошибки, полученный при проверке.
//
// Возвращаемое значение:
//   Булево - Баланс на учетной записи позволяет отправлять сообщения или нет.
//
Функция БалансПозволяетОтправитьСообщения(Аккаунт, ОписаниеОшибки) Экспорт
	
	ЕстьВозможностьОтправкиСообщений = Ложь;
	
	БалансСтрокой = "";
	
	Если ПолучитьБаланс(Аккаунт, БалансСтрокой, ОписаниеОшибки) Тогда
		
		БалансЧислом  = 0;
		БалансПолучен = Истина;
		
		Попытка
			БалансЧислом = Число(БалансСтрокой);
		Исключение
			БалансПолучен = Ложь;
		КонецПопытки;
		
		Если БалансПолучен И БалансЧислом >= 10 Тогда
			ЕстьВозможностьОтправкиСообщений = Истина;
		Иначе
			ОписаниеОшибки = "Доступные смс на балансе заканчиваются или уже закончились. Некоторые сообщения могут быть не отправлены!";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьВозможностьОтправкиСообщений;
	
КонецФункции

// Обработчик события "ПриЗаписи" документа.
Процедура смсПриЗаписиДокументаОтправкиСообщенийПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Если Источник.ПометкаУдаления Тогда
			
			// Удаление движений при пометке документа на удаление.
			НаборЗаписей = РегистрыНакопления.смсСтатистикаОтправкиСообщений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				смсОбщегоНазначения.СообщитьПользователю("Не удалось записать сведения о статистике отправки смс!");
			КонецПопытки;
			
		Иначе
			
			// Добавление движений по документу.
			Если Источник.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.УдалитьНаСервисе
			 Или Источник.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.Отправлено
			 Или Источник.СтатусДокумента = Перечисления.смсСтатусДокументаСообщение.УдалитьДоставлено Тогда
				
				НаборЗаписей = РегистрыНакопления.смсСтатистикаОтправкиСообщений.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
				
				Для Каждого ТекСтрокаОтправки Из Источник.Получатели Цикл
					
					Если ТекСтрокаОтправки.ПереданоНаСервис Тогда
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Период      = Источник.Дата;
						НоваяЗапись.Аккаунт     = Источник.Аккаунт;
						
						НоваяЗапись.Получатель              = ТекСтрокаОтправки.Получатель;
						НоваяЗапись.НомерТелефонаПолучателя = ТекСтрокаОтправки.НомерТелефона;
						
						// Получим количество смс в сообщении.
						КоличествоСообщений = смсРаботаССообщениями.ПолучитьДлинуИКоличествоСМС(ТекСтрокаОтправки.ТекстовоеСообщение).КоличествоСМС;
						
						// Количество переданных на сервис смс.
						НоваяЗапись.ПереданоНаСервис = КоличествоСообщений;
						
						Если ТекСтрокаОтправки.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Отправлено
						 Или ТекСтрокаОтправки.СостояниеСообщения = Перечисления.смсСостоянияСообщений.НеДоставлено Тогда
							
							// Количество отправленных смс.
							НоваяЗапись.ОтправленоПолучателю = КоличествоСообщений;
							
						ИначеЕсли ТекСтрокаОтправки.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Доставлено Тогда
							
							// Количество доставленных смс.
							НоваяЗапись.ОтправленоПолучателю = КоличествоСообщений;
							НоваяЗапись.ДоставленоПолучателю = КоличествоСообщений;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Попытка
					НаборЗаписей.Записать();
				Исключение
					смсОбщегоНазначения.СообщитьПользователю("Не удалось записать сведения о статистике отправки смс!");
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет отправку сообщений.
//
Процедура ОтправитьСообщения(СписокСообщений, HTTP_Клиент, ПараметрыСоединения, ВремяОтправки = Неопределено)
	
	Для Каждого Сообщение Из СписокСообщений Цикл
		
		ОписаниеОшибки      = "";
		СообщениеОбОтправке = "";
		
		Попытка
			Если ВремяОтправки = Неопределено Тогда
			РезультатОтправки = SMS_Отправка(HTTP_Клиент, HTTP_Клиент.Сервер, ПараметрыСоединения.Пользователь, ПараметрыСоединения.Пароль,
				Сообщение.НомерПолучателя, ПараметрыСоединения.ИмяПользователяПоУмолчанию, Ложь, Сообщение.ТекстСообщения, ОписаниеОшибки, СообщениеОбОтправке);
			Иначе
			РезультатОтправки = SMS_Отправка_Отложенная(HTTP_Клиент, HTTP_Клиент.Сервер, ПараметрыСоединения.Пользователь, ПараметрыСоединения.Пароль,
				Сообщение.НомерПолучателя, ПараметрыСоединения.ИмяПользователяПоУмолчанию, Ложь, Сообщение.ТекстСообщения, ВремяОтправки,  ОписаниеОшибки, СообщениеОбОтправке);
			КонецЕсли;
		Исключение
			РезультатОтправки = Новый Структура;
			РезультатОтправки.Вставить("ID", -1);
			РезультатОтправки.Вставить("КодОшибки", -9999);
		КонецПопытки;
		
		// Записываем результат отправки каждого из сообщений
		Сообщение.КодОшибки = РезультатОтправки.КодОшибки;
		
		// Исходное описание ошибки.
		Сообщение.ИсходноеОписаниеОшибки = ОписаниеОшибки;
		
		// Записываем идентификатор
		Сообщение.GUID = РезультатОтправки.ID;
		
	КонецЦикла;
	
КонецПроцедуры // ОтправитьСообщения

// Функция получает код ошибки по статусу операции
// 
// Параметры:
//	СтатусСтрока	- Текст статуса операции.
//
// Возвращаемое значение:
//	Число	- Код ошибки.
//
Функция ПолучитьКодОшибкиПоСтатусу(СтатусСтрока)
	
	Если      Найти(НРег(СтатусСтрока), НРег("Invalid_Login")) > 0 Тогда
		КодОшибки = -1;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("SMS_User_Disabled")) > 0 Тогда
		КодОшибки = -2;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("Not_Enough_Credits")) > 0 Тогда
		КодОшибки = -3;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("Invalid_Source_Address")) > 0 Тогда
		КодОшибки = -4;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("No_SMS_TEXT")) > 0 Тогда
		КодОшибки = -5;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("Invalid_Destination_Address")) > 0 Тогда
		КодОшибки = -6;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("SMS_User_Not_Activated")) > 0 Тогда
		КодОшибки = -7;
	ИначеЕсли Найти(НРег(СтатусСтрока), НРег("Flood_SMS")) > 0 Тогда
		КодОшибки = -8;
	Иначе
		КодОшибки = -9999;
	КонецЕсли;
	
	Возврат КодОшибки;
	
КонецФункции // ПолучитьКодОшибкиПоСтатусу()

// Функция получает описание ошибки по ее коду
// 
// Параметры:
//	КодОшибки	- Число	- Код ошибки.
//
// Возвращаемое значение:
//	Строка	- Текст сообщения об ошибке.
//
Функция ПолучитьОписаниеОшибкиПоКоду(КодОшибки)
	
	Если КодОшибки = -1 Тогда
		ТекстСообщить = "Введен неправильный логин или пароль!";
	ИначеЕсли КодОшибки = -2 Тогда
		ТекстСообщить = "Ваш аккаунт заблокирован!";
	ИначеЕсли КодОшибки = -3 Тогда
		ТекстСообщить = "У вас закончились деньги по данному направлению!";
	ИначеЕсли КодОшибки = -4 Тогда
		ТекстСообщить = "Указано неверное имя отправителя!";
	ИначеЕсли КодОшибки = -5 Тогда
		ТекстСообщить = "Не введен текст сообщения!";
	ИначеЕсли КодОшибки = -6 Тогда
		ТекстСообщить = "Указан некорректный номер получателя!";
	ИначеЕсли КодОшибки = -7 Тогда
		ТекстСообщить = "СМС-пользователь не активирован!";
	ИначеЕсли КодОшибки = -8 Тогда
		ТекстСообщить = "Множественная отправка смс на один номер с одинаковым текстом!";
	Иначе
		ТекстСообщить = "Неизвестная ошибка!";
	КонецЕсли;
	
	Возврат ТекстСообщить;
	
КонецФункции // ПолучитьОписаниеОшибкиПоКоду()

// Функция определяет имя временного файла для входящих данных.
//
Функция ПолучитьИмяФайлаВходящее()
	
	Возврат КаталогВременныхФайлов() + "SMSInput.txt";
	
КонецФункции // ПолучитьИмяФайлаВходящее()

// Функция обработки текста сообщения перед отправкой.
Функция ОбработатьТекстСМСПередОтправкой(Text)
	
	Text1 = Text;
	CrLf = Символ(13) + Символ(10);
	
	// Подготовка текста SMS к отправке - преобразование к HTML форме
	Text1=СтрЗаменить(Text1,"&"     ,"&amp;" ); // Обработка  &
	Text1=СтрЗаменить(Text1,"<"     ,"&lt;"  ); // Обработка  <
	Text1=СтрЗаменить(Text1,">"     ,"&gt;"  ); // Обработка  >
	Text1=СтрЗаменить(Text1,Символы.ПС    ,"<br>"  ); // Обработка символов переноса
	
	Возврат Text1;
	
КонецФункции

// Функция обработки времени отправки сообщения.
Функция ОбработатьВремяСМСПередОтправкой(Time) Экспорт
	
	Time1 = Формат(Time, "ДФ=""гггг-ММ-дд'T'ЧЧ:мм:сс""");
	Возврат Time1;
	
КонецФункции

// Проверяет необходимость выполнения отложенной отправки
Функция ПроверитьДатуОтправки(ДатаДокумента, ДатаИВремяОтправки)
	
	Если НЕ ЗначениеЗаполнено(ДатаИВремяОтправки)
		ИЛИ ДатаИВремяОтправки = ДатаДокумента Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Процедура проверки сообщений.
Процедура ПроверитьСообщения(HTTP_Клиент = Неопределено, Аккаунт, Документ, ПроверкаИзРегламентногоЗадания = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПараметрыСоединения = Новый Структура();
	ПараметрыПолучены = Ложь;
	
	Если ПолучитьПараметрыСоединения(ПараметрыСоединения, ОписаниеОшибки, Аккаунт) Тогда
		ПараметрыПолучены = Истина;
	КонецЕсли;
	
	Если HTTP_Клиент = Неопределено Тогда
				
		Если ПараметрыПолучены Тогда
			СоздатьHTTPСоединение(HTTP_Клиент, ПараметрыСоединения, ОписаниеОшибки);
		Иначе
			ОписаниеОшибки = "Не удалось проверить статусы сообщений. Нет настроенных аккаунтов для подключения к сервису.";
			смсОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ДокументОбъект = Документ.ПолучитьОбъект();
	
	ЕстьИзмененияСтатусов = Ложь;
	
	Для Каждого Строка Из ДокументОбъект.Получатели Цикл
		
		Если (Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.ВОчереди
		  Или Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Отправлено
		  Или Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Ошибка)
				И СтрДлина(Строка.ИдентификаторСообщения) > 0 Тогда
			
			ОписаниеОшибки = "";
			РезультатЗапроса = "";
			
			СтатусСМС = SMS_Статус(HTTP_Клиент, HTTP_Клиент.Сервер, ПараметрыСоединения.Пользователь, ПараметрыСоединения.Пароль, Строка.ИдентификаторСообщения, ОписаниеОшибки, РезультатЗапроса);
			
			СтатусСМС_ВерхнийРегистр = ВРег(СтатусСМС);
			
			Если СтатусСМС_ВерхнийРегистр = ВРег("Доставлено")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Delivered_To_Recipient")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Deliver") Тогда
				
				Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Доставлено;
				
			ИначеЕсли СтатусСМС_ВерхнийРегистр = ВРег("Отправлено")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Delivered_To_Gateway")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Sent")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Send") Тогда
				
				Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Отправлено;
				
			ИначеЕсли СтатусСМС_ВерхнийРегистр = ВРег("Ожидает отправки")
				ИЛИ СтатусСМС_ВерхнийРегистр = ВРег("Enqueued") Тогда
				
				Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.ВОчереди;
				
			ИначеЕсли СтатусСМС_ВерхнийРегистр = ВРег("Не доставлено") Тогда
				
				Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.НеДоставлено;
				
			Иначе
				
				Строка.СостояниеСообщения = Перечисления.смсСостоянияСообщений.Ошибка;
				
			КонецЕсли;
			
			ЕстьИзмененияСтатусов = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзмененияСтатусов Тогда
		// Меняем дату обновления статусов доставки сообщений только когда обратились к документу через регламентное задание,
		// потому что сообщения только что отправленные получают статус "Отправлено" и при автоматическом обновлении статусов
		// данный документ не попадёт в список для обновления статуса.
		Если ПроверкаИзРегламентногоЗадания Тогда
			ДокументОбъект.ДатаПоследнегоОбновленияСтатусовДоставкиСообщений = НачалоДня(ТекущаяДата());
		КонецЕсли;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСообщения

// Функция подготовки сообщений к отправке.
Функция ПолучитьСообщенияДляОтправки(Документ)
	
	СостояниеСообщения = Новый Массив();
	СостояниеСообщения.Добавить(Перечисления.смсСостоянияСообщений.ПустаяСсылка());
	СостояниеСообщения.Добавить(Перечисления.смсСостоянияСообщений.Ошибка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("СостояниеСообщения", СостояниеСообщения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	смсСообщение.Ссылка КАК Сообщение,
	|	смсСообщение.НомерСтроки КАК НомерСтрокиДокумента,
	|	смсСообщение.НомерТелефона КАК НомерПолучателя,
	|	смсСообщение.ТекстовоеСообщение КАК ТекстСообщения,
	|	смсСообщение.ИдентификаторСообщения КАК GUID,
	|	0 КАК КодОшибки,
	|	"""" КАК ИсходноеОписаниеОшибки
	|ИЗ
	|	Документ.смсСообщение.Получатели КАК смсСообщение
	|ГДЕ
	|	смсСообщение.Ссылка = &Ссылка
	|	И смсСообщение.СостояниеСообщения В (&СостояниеСообщения)
	|	И смсСообщение.ПереданоНаСервис = ЛОЖЬ
	|ИТОГИ ПО
	|	Сообщение";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Функция преобразует таблицу значений в массив структур.
//
Функция ТаблицаЗначенийВМассивСтруктур(ТаблицаЗначений) Экспорт
	
	Результат = Новый Массив;
	// Обходим таблицу значений
	Для Каждого Строка Из ТаблицаЗначений Цикл
		// Создаем структуру
		Свойства = Новый Структура;
		// Заполняем структуру колонками таблицы значений
		Для каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			Свойства.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		// Добавляем созданную структуру в таблицу значений
		Результат.Добавить(Свойства);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ТаблицаЗначенийВМассивСтруктур()

// Процедура производит транслитерацию списка сообщений.
Процедура ПроизвестиТранслитерацию(СписокСообщений)
	
	Для Каждого СтрокаСписка Из СписокСообщений Цикл
		ТранслитСтрока =  ТранслитерацияНаЛатиницу(СтрокаСписка.ТекстСообщения);
		СтрокаСписка.ТекстСообщения = ТранслитСтрока;
	КонецЦикла;

КонецПроцедуры

// Функция преобразует строку текста на кириллице в строку текста на латинице по ГОСТу.
// Использован ГОСТ 7.79-2000 Система стандартов по информации, библиотечному и издательскому делу.
// Правила транслитерации кирилловского письма латинским алфавитом.
Функция ТранслитерацияНаЛатиницу(СтрокаТекста)
    стрРус = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
    стрEng = "A/B/V/G/D/E/Yо/Zh/Z/I/J/K/L/M/N/O/P/R/S/T/U/F/H/C/Ch/Sh/Shh/''/Y/'/E'/Yu/Ya/a/b/v/g/d/e/yo/zh/z/i/j/k/l/m/n/o/p/r/s/t/u/f/h/c/ch/sh/shh/''/y/'/e'/yu/ya";
    Масс = СтрокаВМассив(стрEng,"/");
    Результат = "";
    Для Сч = 1 по СтрДлина(СтрокаТекста) Цикл
        Символ = Сред(СтрокаТекста, Сч, 1);
        Позиция = Найти(стрРус, Символ);
        Если Позиция = 0 Тогда
            Результат = Результат + Символ
        Иначе
            Результат = Результат + Масс[Позиция - 1];
        КонецЕсли
    КонецЦикла;
    Возврат Результат
КонецФункции

// Функция возвращает переданную строку в виде массива.
Функция СтрокаВМассив(Стр, Разделитель = "|")Экспорт 
	
	МассивСтрок = Новый Массив();
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	Пока Истина Цикл
		Поз = Найти(Стр, Разделитель);
		Если Поз=0 Тогда
			МассивСтрок.Добавить(Стр);
			Возврат МассивСтрок;
		КонецЕсли;
		МассивСтрок.Добавить(Лев(Стр,Поз-1));
		Стр = Сред(Стр,Поз+ДлинаРазделителя);
	КонецЦикла;
	
КонецФункции

// Выполняет проверку корректности номера телефона.
//
// Параметры:
//  НомерТелефона - Строка - номер телефона который необходимо проверить на корректность.
//
// Возвращаемое значение:
//   Булево - истина, если номер телефона коректен.
//
Функция НомерТелефонаКорректен(НомерТелефона) Экспорт
	
	ТелефонКорректен = Истина;
	
	Если Не ПустаяСтрока(НомерТелефона)
		И (Не СтрДлина(НомерТелефона) = 11 Или Не смсОбщегоНазначенияСервер.ТолькоЦифрыВСтроке(НомерТелефона)) Тогда
		
		ТелефонКорректен = Ложь;
		
	КонецЕсли;
	
	Возврат ТелефонКорректен;
	
КонецФункции

#КонецОбласти