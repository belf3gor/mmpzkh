// ЗАЧЕТ АВАНСОВ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПустаяТаблицаВзаиморасчетовЗачетАвансов() Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Подразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("ПодразделениеРасчетов", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетАвансов",           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_ЕНВД",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_Патент",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_Комитента",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_ТорговыйСбор",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ПустаяТаблица.Колонки.Добавить("ВидДоговора");
	ПустаяТаблица.Колонки.Добавить("РасчетыВВалюте",           Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("УчетАгентскогоНДС",        Новый ОписаниеТипов("Булево"));

	Возврат ПустаяТаблица;

КонецФункции

// Очищаются значения колонок специальных режимов, т.к. в связи с реализацией функционала по оплате платежной картой
// эти движения должны выполнятся отдельно от формирования основной проводки по взаиморасчетам, в силу того,
// что в проводках по счетам УСН может быть иная аналитика. Применяется только в тех случаях, когда возможен
// зачет аванса по платежной карте.
Функция ОчиститьСуммыСпециальныхРежимовЗачетАвансов(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.УчитыватьЗадолженностьУСН
	   И Не Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
		
	ОбнуляемыеКолонки = ""
	+"СуммаВзаиморасчетовЕНВД,"
	+"СуммаВзаиморасчетовКомитента,"
	+"СуммаВзаиморасчетовПатент,"
	+"СуммаВзаиморасчетовТорговыйСбор,"
	+"СуммаРуб_ЕНВД,"
	+"СуммаРуб_Комитента,"
	+"СуммаРуб_Патент,"
	+"СуммаРуб_ТорговыйСбор";
	
	ТаблицаВзаиморасчетов.ЗаполнитьЗначения(0, ОбнуляемыеКолонки);
	
	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции	

// Готовится таблица для формирования проводок зачета авансов по расчетам с поставщиками и покупателями
// на основании подготовленных функцией ПодготовитьПараметрыЗачетАванса данных документа
// и остатков по счету авансов на момент проведения.
// Таблица содержит как данные по зачтенным авансам, так и данные о возникшей по документу-регистратору задолженности.
// Вызывается при проведении документов поступления и реализации.
//
// Параметры
//  ТаблицаДокумента  - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//  ТаблицаДокументыАвансов - <ТаблицаЗначений> - данные документа о документах расчетов, авансы по которым зачитываются, и о суммах зачета.
//                      Используется только при способе зачета авансов "По документу".
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаДокументыАвансов, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовЗачетАвансов();
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаДокумента) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаДокументыАвансов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиАвансов = ПолучитьОстаткиАвансов(Параметры.ТаблицаДокумента, Реквизиты, Отказ);

	ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
		Параметры.ТаблицаДокумента, 
		Параметры.ДокументыАвансов, 
		Реквизиты, 
		ТаблицаВзаиморасчетов, 
		ОстаткиАвансов, 
		Ложь,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Заполняет таблицу взаиморасчетов по зачету авансов.
//
// Параметры:
//	ТаблицаДокумента - ТаблицаЗначений - см. результат ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов().
//	ДокументыАвансов - ТаблицаЗначений - см. результат ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов().
//	Реквизиты - СтрокаТаблицыЗначений - см. таблицу Реквизиты в ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов().
//	ТаблицаВзаиморасчетов - ТаблицаЗначений - см. результат ПустаяТаблицаВзаиморасчетовЗачетАвансов().
//	ОстаткиАвансов - ТаблицаЗначений - см. результат ПустаяТаблицаОстаткиАвансов().
//	ЭтоОтложенноеПроведение - Булево - Истина, если вызов выполняется в ходе актуализации отложенных расчетов.
//	Отказ - Булево - Истина, если в ходе выполнения процедуры обнаружена ошибка и требуется откатить транзакцию записи движений.
//
Процедура ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
	ТаблицаДокумента,
	ДокументыАвансов,
	Реквизиты,
	ТаблицаВзаиморасчетов,
	ОстаткиАвансов,
	ЭтоОтложенноеПроведение,
	Отказ) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаВзаиморасчетов;

		Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда

			ОстаткиАвансовПоДоговору = ОстаткиАвансов.НайтиСтроки(
				Новый Структура("Счет,Контрагент,ДоговорКонтрагента",
				СтрокаДокумента.СчетАвансов,
				СтрокаДокумента.Контрагент,
				СтрокаДокумента.ДоговорКонтрагента));

			ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаВзаиморасчетов,
				НераспределенныйОстаток,
				ОстаткиАвансовПоДоговору,
				СтрокаДокумента,
				Реквизиты);

		Иначе //.ПоДокументу

			Если ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
				Если НЕ ЭтоОтложенноеПроведение И СтрокаДокумента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
					// В момент оперативного проведения не контролируем сумму остатка аванса по рублевым взаиморасчетам, 
					// т.к. ее не получали из остатков регистра бухгалтерии.
					// Считаем, что все суммы, которые указаны в табличной части есть фактически в остатках.
					Для Каждого СтрокаТаблицыАвансов Из ДокументыАвансов Цикл
						СтрокаОстатка = ОстаткиАвансов.Добавить();
						СтрокаОстатка.Счет 		= СтрокаТаблицыАвансов.СчетАвансов;
						СтрокаОстатка.Валюта 	= СтрокаДокумента.ВалютаВзаиморасчетов;
						СтрокаОстатка.Контрагент= СтрокаТаблицыАвансов.Контрагент;
						СтрокаОстатка.ДоговорКонтрагента	= СтрокаТаблицыАвансов.ДоговорКонтрагента;
						СтрокаОстатка.ДокументРасчетов		= СтрокаТаблицыАвансов.ДокументАванса;
						// СтрокаОстатка.ДатаДокументаРасчетов не заполняем, она нужна только для сортировки остатков, 
						// а в данном случае в качестве остатка авансов принимаем те суммы, 
						// которые указаны в табличной части ЗачетАвансов.
						СтрокаОстатка.Подразделение			= СтрокаДокумента.Подразделение;
						СтрокаОстатка.СуммаВзаиморасчетов	= СтрокаТаблицыАвансов.СуммаЗачета;
						СтрокаОстатка.СуммаБУ				= СтрокаТаблицыАвансов.СуммаЗачета;
						СтрокаОстатка.СуммаНУ				= СтрокаТаблицыАвансов.СуммаЗачета;
						// Суммы взаиморасчетов ЕНВД, комитента, при патенте, при торговом сборе 
						// при оперативном проведении не заполняем, они будут рассчитаны в момент отложенного проведения.
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			Для каждого СтрокаТаблицыАвансов Из ДокументыАвансов Цикл

				Если СтрокаТаблицыАвансов.СуммаЗачета > 0 Тогда
					НераспределенныйОстатокПоДокументу = СтрокаТаблицыАвансов.СуммаЗачета;
					НераспределенныйОстаток = НераспределенныйОстаток - СтрокаТаблицыАвансов.СуммаЗачета;
				Иначе
					НераспределенныйОстатокПоДокументу = НераспределенныйОстаток;
				КонецЕсли;

				ОстаткиАвансовПоДокументуРасчетов = ОстаткиАвансов.НайтиСтроки(
					Новый Структура("Счет,Контрагент,ДоговорКонтрагента,ДокументРасчетов",
					СтрокаТаблицыАвансов.СчетАвансов,
					СтрокаТаблицыАвансов.Контрагент,
					СтрокаТаблицыАвансов.ДоговорКонтрагента,
					СтрокаТаблицыАвансов.ДокументАванса));

				ДобавитьСтрокиЗачтенныхАвансов(
					ТаблицаВзаиморасчетов,
					НераспределенныйОстатокПоДокументу,
					ОстаткиАвансовПоДокументуРасчетов,
					СтрокаДокумента,
					Реквизиты);

				ПроверитьНехваткуОстаткаАванса(
					НераспределенныйОстатокПоДокументу,
					СтрокаТаблицыАвансов,
					СтрокаДокумента.ВалютаВзаиморасчетов,
					Реквизиты.Регистратор,
					Реквизиты.ЭтоВозврат,
					Отказ);

				Если СтрокаТаблицыАвансов.СуммаЗачета = 0 Тогда
					НераспределенныйОстаток = НераспределенныйОстатокПоДокументу;
				ИначеЕсли ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") и Реквизиты.ЭтоВозврат ТОгда
					НераспределенныйОстаток = НераспределенныйОстаток + НераспределенныйОстатокПоДокументу;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		ДобавитьСтрокуЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты);

	КонецЦикла;

КонецПроцедуры

// Формируются проводки зачета авансов по расчетам с поставщиками и покупателями.
// Вызывается при проведении документов поступления и реализации.
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - таблица с данными по зачету авансов в разрезе документов расчетов.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Структура таблицы описана в функции ПодготовитьПараметрыЗачетАвансов
//  Движения              - коллекция движений документа
//  Отказ                 - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Дт", "Кт");
	ДтКтАвансов  = ?(ДтКтРасчетов = "Дт", "Кт", "Дт");

	ЭтоВозвратОтПокупателя = Реквизиты.ЭтоВозврат И (Реквизиты.НаправлениеДвижения = "Поступление");

	// Для проводок по вспомогательным счетам задолженности УСН
	ДтКтУСН     = ?(ЭтоВозвратОтПокупателя, ?(ДтКтАвансов = "Дт", "Кт", "Дт"), ДтКтАвансов);
	ЗнакСуммУСН = ?(ЭтоВозвратОтПокупателя, -1, 1);

	// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
	НУПоКурсуАвансов = ('20100101' <= Реквизиты.Период);
	
	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		СодержаниеОперации = СодержаниеПроводокПоЗачетуАвансов(
			Реквизиты.НаправлениеДвижения, Реквизиты.ЭтоВозврат, СтрокаВзаиморасчетов.ВидДоговора, СтрокаВзаиморасчетов.СчетРасчетов);

		// Основная проводка по зачету аванса

		Если (СтрокаВзаиморасчетов.ДокументРасчетов <> Реквизиты.Регистратор) И (НЕ ЭтоВозвратОтПокупателя) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = СодержаниеОперации;

			Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", 
																															ДокументРасчетовПоЗачетуАвансов(Реквизиты.Регистратор));

			СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.ПодразделениеРасчетов;
			КонецЕсли;

			Проводка["Счет" + ДтКтАвансов] = СтрокаВзаиморасчетов.СчетАвансов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаАвансов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтАвансов]);
			Если СвойстваСчетаАвансов.Валютный Тогда
				Проводка["Валюта" + ДтКтАвансов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтАвансов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Конецесли;
			Если СвойстваСчетаАвансов.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтАвансов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;

			Если ОтражатьВНалоговомУчете Тогда
				
				Если (СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах ИЛИ НУПоКурсуАвансов)
					И НЕ Реквизиты.ЭтоВозврат Тогда
					СуммаНУ = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
				Иначе
					СуммаНУ = СтрокаВзаиморасчетов.СуммаРуб;
				КонецЕсли;
				Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
				КонецЕсли;
				Если СвойстваСчетаАвансов.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтАвансов] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтАвансов, ОсновнойВидРазниц);
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		// Проводки по вспомогательным счетам задолженности УСН
		СформироватьПроводкуПоСчетамУСНЗачетАвансов(СтрокаВзаиморасчетов, Реквизиты, ДтКтУСН, ЗнакСуммУСН, Движения, Отказ);
		
	КонецЦикла;	

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Формируются проводки зачета авансов по расчетам с комитентами.
// Вызывается при проведении документов реализации, которыми реализуются товары и услуги комитентов
// после определения списанных партий комиссионных товаров процедурой списания партий.
//
// Параметры
//  ТаблицаТоварыУслугиКомитентов - <ТаблицаЗначений> - таблица реализованных товаров и услуг комитентов.
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Структура таблицы описана в функции ПодготовитьПараметрыЗачетАвансов
//  Движения  - коллекция движений документа
//  Отказ     - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаТоварыУслугиКомитентов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	// Готовим из таблицы товаров и услуг комитентов стандартную таблицу расчетов по документу

    Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоварыУслугиКомитентов", Параметры.ТоварыУслугиКомитентов);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ВидДоговораСКомитентом", БухгалтерскийУчетПереопределяемый.ПолучитьВидДоговораСКомитентом());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоварыУслугиКомитентов.Подразделение КАК Подразделение,
	|	ТаблицаТоварыУслугиКомитентов.Комитент КАК Контрагент,
	|	ТаблицаТоварыУслугиКомитентов.ДоговорКомиссии КАК ДоговорКонтрагента,
	|	ТаблицаТоварыУслугиКомитентов.ВалютаРасчетовСКомитентом КАК ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаТоварыУслугиКомитентов.ВалютаРасчетовСКомитентом = &ВалютаРеглУчета
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетыВВалюте,
	|	ТаблицаТоварыУслугиКомитентов.СчетРасчетовСКомитентом КАК СчетРасчетов,
	|	ТаблицаТоварыУслугиКомитентов.СчетАвансовСКомитентом КАК СчетАвансов,
	|	ТаблицаТоварыУслугиКомитентов.СуммаРасчетовСКомитентом КАК СуммаВзаиморасчетов,
	|	ТаблицаТоварыУслугиКомитентов.СуммаРуб КАК СуммаРуб
	|ПОМЕСТИТЬ ТаблицаТоварыУслугиКомитентов
	|ИЗ
	|	&ТаблицаТоварыУслугиКомитентов КАК ТаблицаТоварыУслугиКомитентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоварыУслугиКомитентов.Подразделение,
	|	ТаблицаТоварыУслугиКомитентов.Контрагент,
	|	ТаблицаТоварыУслугиКомитентов.ДоговорКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаТоварыУслугиКомитентов.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).УчетАгентскогоНДС КАК УчетАгентскогоНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически) КАК СпособЗачетаАвансов,
	|	&ВидДоговораСКомитентом КАК ВидДоговора,
	|	ТаблицаТоварыУслугиКомитентов.ВалютаВзаиморасчетов,
	|	ТаблицаТоварыУслугиКомитентов.РасчетыВВалюте,
	|	&Регистратор КАК ДокументРасчетов,
	|	ЛОЖЬ КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаТоварыУслугиКомитентов.СчетРасчетов,
	|	ТаблицаТоварыУслугиКомитентов.СчетАвансов,
	|	СУММА(ТаблицаТоварыУслугиКомитентов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаВзаиморасчетовЕНВД,
	|	0 КАК СуммаВзаиморасчетовПатент,
	|	0 КАК СуммаВзаиморасчетовТорговыйСбор,
	|	0 КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ТаблицаТоварыУслугиКомитентов.СуммаРуб) КАК СуммаРуб
	|ИЗ
	|	ТаблицаТоварыУслугиКомитентов КАК ТаблицаТоварыУслугиКомитентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоварыУслугиКомитентов.Подразделение,
	|	ТаблицаТоварыУслугиКомитентов.Контрагент,
	|	ТаблицаТоварыУслугиКомитентов.ДоговорКонтрагента,
	|	ТаблицаТоварыУслугиКомитентов.ВалютаВзаиморасчетов,
	|	ТаблицаТоварыУслугиКомитентов.РасчетыВВалюте,
	|	ТаблицаТоварыУслугиКомитентов.СчетРасчетов,
	|	ТаблицаТоварыУслугиКомитентов.СчетАвансов";

	ТаблицаДокумента = Запрос.Выполнить().Выгрузить();

	// Формирование таблицы взаиморасчетов и движений по зачету авансов происходит стандартным образом

	ТаблицаДокументовАванса = Неопределено; // Для способа зачета "Автоматически" не используется

	ТаблицаВзаиморасчетыКомитентов = ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(
		ТаблицаДокумента, ТаблицаДокументовАванса, ТаблицаРеквизиты, Отказ);

	СформироватьДвиженияЗачетАвансов(ТаблицаВзаиморасчетыКомитентов, ТаблицаРеквизиты, Движения, Отказ);

КонецПроцедуры

// Формируются проводки только по специальным счетам УСН. При реализации функционала по оплате платежной картой
// аналитика по счетам УСН может отличаться от аналитики по основной проводке взаиморасчетов
Процедура СформироватьТолькоДвиженияПоСчетамУСНЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Дт", "Кт");
	ДтКтАвансов  = ?(ДтКтРасчетов = "Дт", "Кт", "Дт");

	ЭтоВозвратОтПокупателя = Реквизиты.ЭтоВозврат И (Реквизиты.НаправлениеДвижения = "Поступление");

	// Для проводок по вспомогательным счетам задолженности УСН
	ДтКтУСН     = ?(ЭтоВозвратОтПокупателя, ?(ДтКтАвансов = "Дт", "Кт", "Дт"), ДтКтАвансов);
	ЗнакСуммУСН = ?(ЭтоВозвратОтПокупателя, -1, 1);
	
	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл

		// Проводки по вспомогательным счетам задолженности УСН
		СформироватьПроводкуПоСчетамУСНЗачетАвансов(СтрокаВзаиморасчетов, Реквизиты, ДтКтУСН, ЗнакСуммУСН, Движения, Отказ);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// ПОГАШЕНИЕ ЗАДОЛЖЕННОСТИ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента = Неопределено) Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если НЕ ВидДокумента = Неопределено Тогда
		ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетовСПолучателем",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	КонецЕсли;
	
	ПустаяТаблица.Колонки.Добавить("Подразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ПустаяТаблица.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("Разница",                  ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС",                Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ПустаяТаблица.Колонки.Добавить("КорСчет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("КорПодразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконто" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;
	ПустаяТаблица.Колонки.Добавить("СчетАвансов_ОтгрузкаВУЕ",         Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ЕНВД",                    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Патент",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Комитента",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ТорговыйСбор",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ОтгрузкаВУЕ",             ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	ПустаяТаблица.Колонки.Добавить("Содержание",					ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ПустаяТаблица.Колонки.Добавить("ТипОплаты",						Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));

	Возврат ПустаяТаблица;

КонецФункции

// Очищаются значения колонок специальных режимов, т.к. в связи с реализацией функционала по оплате платежной картой
// эти движения должны выполнятся отдельно от формирования основной проводки по взаиморасчетам, в силу того,
// что в проводках по счетам УСН может быть иная аналитика. Применяется только в тех случаях, когда возможен
// зачет оплаты по платежной карте.
Функция ОчиститьСуммыСпециальныхРежимовПогашениеЗадолженности(ТаблицаРеквизиты, ТаблицаВзаиморасчетов, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Реквизиты.УчитыватьЗадолженностьУСН Или Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		
		ОбнуляемыеКолонки = ""
		+"СуммаВзаиморасчетовЕНВД,"
		+"СуммаВзаиморасчетовКомитента,"
		+"СуммаВзаиморасчетовТорговыйСбор,"
		+"СуммаВзаиморасчетовПатент,"
		+"СуммаБУ_ЕНВД,"
		+"СуммаБУ_Комитента,"
		+"СуммаБУ_ТорговыйСбор,"
		+"СуммаБУ_Патент";
		
		ТаблицаВзаиморасчетов.ЗаполнитьЗначения(0, ОбнуляемыеКолонки);
		
	КонецЕсли;
	
	Возврат ТаблицаВзаиморасчетов;
	
КонецФункции

// Готовится таблица для формирования проводок погашения задолженности по расчетам с поставщиками и покупателями,
// на основании данных документа и остатков по счету расчетов на момент проведения.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ, ВидДокумента = Неопределено) Экспорт

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента);
	
	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, ВидДокумента);
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры.РасшифровкаПлатежа, Реквизиты, Отказ);
	
	ЗаполнитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		Параметры.РасшифровкаПлатежа, 
		Реквизиты, 
		ТаблицаВзаиморасчетов, 
		ОстаткиЗадолженности,
		Ложь,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Заполняет таблицу взаиморасчетов при погашении задолженности при расчетах с контрагентами.
//
// Параметры:
//	РасшифровкаПлатежа - ТаблицаЗначений - см. результат ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности().
//	Реквизиты - СтрокаТаблицыЗначений - см. таблицу Реквизиты из результата ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности().
//	ТаблицаВзаиморасчетов - ТаблицаЗначений - см. результат ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности().
//	ОстаткиЗадолженности - ТаблицаЗначений - см. результат ПустаяТаблицаОстаткиЗадолженности().
//	ЭтоОтложенноеПроведение - Булево - Истина, если вызов выполняется в ходе актуализации отложенных расчетов с контрагентами.
//	Отказ - Булево - Истина, если в ходе выполнения обнаружена ошибка и требуется откатить транзакцию записи движений.
//
Процедура ЗаполнитьТаблицуВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, Реквизиты, ТаблицаВзаиморасчетов, ОстаткиЗадолженности, ЭтоОтложенноеПроведение, Отказ) Экспорт

	СоответствиеКратностиВалютыПлатежа = Новый Соответствие;

	Для Каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл

		НераспределенныйОстаток   = СтрокаПлатежа.СуммаВзаиморасчетов;
		НераспределенныйОстатокБУ = СтрокаПлатежа.СуммаРуб;
		
		КратностьВзаиморасчетов = СоответствиеКратностиВалютыПлатежа.Получить(СтрокаПлатежа.ВалютаВзаиморасчетов);
		
		Если КратностьВзаиморасчетов = Неопределено Тогда
			
			СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
				СтрокаПлатежа.ВалютаВзаиморасчетов, Реквизиты.Период);
			
			КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
			
			СоответствиеКратностиВалютыПлатежа.Вставить(СтрокаПлатежа.ВалютаВзаиморасчетов, КратностьВзаиморасчетов);
			
		КонецЕсли;
		
		ДобавитьСтрокиПогашенияЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			НераспределенныйОстатокБУ,
			КратностьВзаиморасчетов,
			ОстаткиЗадолженности,
			СтрокаПлатежа,
			Реквизиты,
			Отказ);

		ДобавитьСтрокуАванса(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			НераспределенныйОстатокБУ,
			СтрокаПлатежа,
			Реквизиты,
			ЭтоОтложенноеПроведение);

	КонецЦикла;

	ТаблицаВзаиморасчетов.Индексы.Добавить("СчетРасчетов, Контрагент, ДоговорКонтрагента, ДокументРасчетов");

	Для Каждого СтрокаОстатка Из ОстаткиЗадолженности Цикл

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетРасчетов",       СтрокаОстатка.СчетРасчетов);
		СтруктураОтбора.Вставить("Контрагент",         СтрокаОстатка.Контрагент);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаОстатка.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("ДокументРасчетов",   СтрокаОстатка.ДокументРасчетов);

		СтрокиРаспределения = ТаблицаВзаиморасчетов.НайтиСтроки(СтруктураОтбора);
		ИтогоСуммаВзаиморасчетов = 0;
		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			ИтогоСуммаВзаиморасчетов = ИтогоСуммаВзаиморасчетов + СтрокаРаспределения.СуммаВзаиморасчетов;
		КонецЦикла;

		Для Каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			СтрокаРаспределения.ОстатокВзаиморасчетов = Окр(
				СтрокаОстатка.ОстатокВзаиморасчетов * СтрокаРаспределения.СуммаВзаиморасчетов / ИтогоСуммаВзаиморасчетов, 2);
			СтрокаОстатка.ОстатокВзаиморасчетов = СтрокаОстатка.ОстатокВзаиморасчетов - СтрокаРаспределения.ОстатокВзаиморасчетов;
			ИтогоСуммаВзаиморасчетов            = ИтогоСуммаВзаиморасчетов - СтрокаРаспределения.СуммаВзаиморасчетов;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

// Формируются проводки погашения задолженности по расчетам с поставщиками и покупателями.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - таблица с данными по погашению задолженности в разрезе документов расчетов.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
//                          Используются колонки, описанные в функции ПодготовитьПараметрыПогашениеЗадолженности
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Структура таблицы описана в функции ПодготовитьПараметрыПогашениеЗадолженности
//  Движения              - коллекция движений документа
//  Отказ                 - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);
	
	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл

		Если СтрокаВзаиморасчетов.СчетРасчетов = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ Тогда
			
			СформироватьПроводкиПогашениеЗадолженностиПриОплатеПоОтгрузкеВУЕ(
				СтрокаВзаиморасчетов,
				Реквизиты,
				Движения,
				ОтражатьВНалоговомУчете,
				ОсновнойВидРазниц);
			
		Иначе
			
			Если СтрокаВзаиморасчетов.СчетРасчетов.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыСУчредителями)
				ИЛИ СтрокаВзаиморасчетов.СчетРасчетов.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.УставныйКапитал)
				ИЛИ СтрокаВзаиморасчетов.СчетРасчетов.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.СобственныеАкции) Тогда
				ВидСубконтоРасчетов = "Учредители";
			Иначе
				ВидСубконтоРасчетов = "Контрагенты";
			КонецЕсли;
		
			// Основная проводка по счету расчетов
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;
			
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;
			
			Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				ВидСубконтоРасчетов, СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
			
			СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;
			
			Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;
			
			Для Ном = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
					Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
			КонецЦикла;
			
			СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
			Если СвойстваКорСчета.Валютный Тогда
				Проводка["Валюта" + ДтКтКорСчета]        = Реквизиты.ВалютаДокумента;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваКорСчета.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
				Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
				КонецЕсли;
				Если СвойстваКорСчета.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтКорСчета] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц);
				КонецЕсли;
			КонецЕсли;
			// Проводки по вспомогательным счетам задолженности УСН
			СформироватьПроводкуПоСчетамУСНПогашениеЗадолженности(СтрокаВзаиморасчетов, Реквизиты, ДтКтРасчетов, СвойстваСчетаРасчетов, Движения, Отказ);
		КонецЕсли;
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Формируются проводки только по специальным счетам УСН. При реализации функционала по оплате платежной картой
// аналитика по счетам УСН может отличаться от аналитики по основной проводке взаиморасчетов
Процедура СформироватьТолькоДвиженияПоСчетамУСНЗачетВозврата(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНЗачетВозврата(
		ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл
	
		// Проводки по вспомогательным счетам задолженности УСН
		СформироватьПроводкуПоСчетамУСНЗачетОбязательствВСчетВозврата(СтрокаВзаиморасчетов, Реквизиты, Движения, Отказ);
	
	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// Формируются проводки только по специальным счетам УСН. При реализации функционала по оплате платежной картой
// аналитика по счетам УСН может отличаться от аналитики по основной проводке взаиморасчетов
Процедура СформироватьТолькоДвиженияПоСчетамУСНПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНПогашениеЗадолженности(
					ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");
	
	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл

		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаВзаиморасчетов.СчетРасчетов);

		// Проводки по вспомогательным счетам задолженности УСН
		СформироватьПроводкуПоСчетамУСНПогашениеЗадолженности(СтрокаВзаиморасчетов, Реквизиты, ДтКтРасчетов, СвойстваСчетаРасчетов, Движения, Отказ);

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// РОЗНИЧНАЯ ТОРГОВЛЯ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьДвиженияПоступленияОтРозничныхПокупателей(ТаблицаБезналичныеОплаты, ТаблицаНаличнаяОплата, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не (ЗначениеЗаполнено(ТаблицаБезналичныеОплаты) Или ЗначениеЗаполнено(ТаблицаНаличнаяОплата)) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступленияОтРозничныхПокупателей(ТаблицаБезналичныеОплаты, ТаблицаНаличнаяОплата, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);

	// В НУ оценка доходов и расходов осуществляется по курсу авансов начиная с 01.01.2010.
	НУПоКурсуАвансов = ('20100101' <= Реквизиты.Период);
	
	Для каждого СтрокаВзаиморасчетов Из Параметры.БезналичныеОплаты Цикл

		СодержаниеОперации = СодержаниеПроводкиБезналичнаяРозничнаяОплата(СтрокаВзаиморасчетов, Реквизиты);
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СодержаниеОперации;

		Проводка.СчетДт = СтрокаВзаиморасчетов.СчетРасчетов;

		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетовДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаРасчетовДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		Конецесли;
		Если СвойстваСчетаРасчетовДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"Склады", Реквизиты.Склад);
		
		СвойстваСчетаРасчетовКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаРасчетовКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеОрганизации;
		КонецЕсли;

		Если СтрокаВзаиморасчетов.РасчетыВВалюте Тогда
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
		Иначе
			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
		КонецЕсли;

		Если ОтражатьВНалоговомУчете Тогда
			
			Если СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах 
				ИЛИ НУПоКурсуАвансов Тогда
				СуммаНУ = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				СуммаНУ = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;
			Если СвойстваСчетаРасчетовКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, "Кт", ОсновнойВидРазниц);
			КонецЕсли;
			Если СвойстваСчетаРасчетовДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, "Дт", ОсновнойВидРазниц);
			КонецЕсли;

		КонецЕсли;

		// Проводки по вспомогательным счетам задолженности УСН
		СформироватьПроводкуПоСчетамУСНЗачетАвансов(СтрокаВзаиморасчетов, Реквизиты, "Дт", 1, Движения, Отказ);

	КонецЦикла;

	// оплата наличными
	Для каждого СтрокаОплаты Из Параметры.НаличнаяОплата Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = "Реализация в розницу за наличную оплату";
		
		Проводка.СчетДт = СтрокаОплаты.СчетУчетаДенежныхСредств;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"СтатьиДвиженияДенежныхСредств", СтрокаОплаты.СтатьяДвиженияДенежныхСредств);
			
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеОрганизации;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаОплаты.СчетУчетаРасчетовСРозничнымПокупателем;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", СтрокаОплаты.Склад);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеОрганизации;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаОплаты.СуммаРуб;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

// Таблица для формирования проводок зачета авансов по безналичным оплатам, поступившим от розничных покупателей
// на основании данных о полученных безналичных оплатах по видам и остатков по аналитике оплат на момент проведения.
// Таблица содержит как данные по зачтенным авансам, так и данные о возникшей по документу-регистратору задолженности.
// Вызывается при проведении документов получения оплаты от розничных покупателей
//
// Параметры
//  ТаблицаБезналичныхОплат  - <ТаблицаЗначений> - данные об оплатах, по которым определяется, какие движения будут сформированы.
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(ТаблицаБезналичныхОплат, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовБезналичнаяРозничнаяВыручка();
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаБезналичныхОплат) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовБезналичнаяРозничнаяВыручка(ТаблицаБезналичныхОплат, ТаблицаРеквизиты);
	Реквизиты    = Параметры.Реквизиты[0];
	ТаблицаОплат = Параметры.ТаблицаОплат;
	
	// остатки взаиморасчетов получаем только для оплат, по которым это явно указано
	Отбор = Новый Структура("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
	АналитикаАвансов = ТаблицаОплат.Скопировать(Отбор, "СчетАвансов,Контрагент,ДоговорКонтрагента,ВидДоговора,РасчетыВВалюте");
	
	ОстаткиАвансов = ПолучитьОстаткиАвансов(АналитикаАвансов, Реквизиты, Отказ);

	ЗаполнитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(
		ТаблицаОплат,
		Реквизиты,
		ТаблицаВзаиморасчетов,
		ОстаткиАвансов,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Заполняет таблицу взаиморасчетов по зачету авансов.
//
// Параметры:
//	ТаблицаОплат - ТаблицаЗначений - см. таблицу ТаблицаОплат в ПодготовитьПараметрыТаблицыВзаиморасчетовБезналичнаяРозничнаяВыручка().
//	Реквизиты - СтрокаТаблицыЗначений - см. таблицу Реквизиты в ПодготовитьПараметрыТаблицыВзаиморасчетовБезналичнаяРозничнаяВыручка().
//	ТаблицаВзаиморасчетов - ТаблицаЗначений - см. результат ПустаяТаблицаВзаиморасчетовЗачетАвансов().
//	ОстаткиАвансов - ТаблицаЗначений - см. результат ПустаяТаблицаОстаткиАвансов().
//	ЭтоОтложенноеПроведение - Булево - Истина, если вызов выполняется в ходе актуализации отложенных расчетов.
//	Отказ - Булево - Истина, если в ходе выполнения процедуры обнаружена ошибка и требуется откатить транзакцию записи движений.
//
Процедура ЗаполнитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(ТаблицаОплат, Реквизиты, ТаблицаВзаиморасчетов, ОстаткиАвансов, Отказ) Экспорт

	Для каждого СтрокаДокумента Из ТаблицаОплат Цикл

		НераспределенныйОстаток = СтрокаДокумента.СуммаВзаиморасчетов;

		Если СтрокаДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
		
			ОстаткиАвансовПоДоговору = ОстаткиАвансов.НайтиСтроки(
				Новый Структура("Счет,Контрагент,ДоговорКонтрагента",
				СтрокаДокумента.СчетАвансов,
				СтрокаДокумента.Контрагент,
				СтрокаДокумента.ДоговорКонтрагента));

			ДобавитьСтрокиЗачтенныхАвансов(
				ТаблицаВзаиморасчетов,
				НераспределенныйОстаток,
				ОстаткиАвансовПоДоговору,
				СтрокаДокумента,
				Реквизиты);
		
		КонецЕсли;
		
		ДобавитьСтрокуЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаДокумента,
			Реквизиты);

	КонецЦикла;

КонецПроцедуры

// ВЗАИМОЗАЧЕТ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьСтруктуруТаблицВзаимозачета(ТаблицаДебиторскаяЗадолженность,	ТаблицаДебиторскаяЗадолженностьВозвратАванса,
	ТаблицаКредиторскаяЗадолженность, ТаблицаКредиторскаяЗадолженностьВозвратАванса, ТаблицаРеквизиты, Отказ, ЭтоОтложенноеПроведение = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВзаимозачета(ТаблицаДебиторскаяЗадолженность, ТаблицаДебиторскаяЗадолженностьВозвратАванса,
		ТаблицаКредиторскаяЗадолженность, ТаблицаКредиторскаяЗадолженностьВозвратАванса, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаДебиторскаяЗадолженностьВзаимозачет = ПустаяТаблицаВзаимозачет();
	ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет = ПустаяТаблицаВзаимозачет();
	ТаблицаКредиторскаяЗадолженностьВзаимозачет = ПустаяТаблицаВзаимозачет();
	ТаблицаКредиторскаяЗадолженностьВозвратАвансаВзаимозачет = ПустаяТаблицаВзаимозачет();

	// Обход таблицы дебиторской задолженности.
	Для каждого СтрокаДебиторскойЗадолженности Из Параметры.ТаблицаДебиторскаяЗадолженность Цикл

		Если ЗначениеЗаполнено(СтрокаДебиторскойЗадолженности.КорСчет) Тогда

			СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

			// Обнулим перенесенную строку, чтобы второй раз не учитывать 
			// ниже при повтором обходе таблицы в случае отложенного проведения.
			СтрокаДебиторскойЗадолженности.СуммаБУ = 0;
			СтрокаДебиторскойЗадолженности.СуммаНУ = 0;
			СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = 0;
			
		Иначе

			// Обход таблицы кредиторской задолженности.
			Для каждого СтрокаКредиторскойЗадолженности Из Параметры.ТаблицаКредиторскаяЗадолженность Цикл

				Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0 Тогда
				    Продолжить;
				КонецЕсли;

			    Если ЗначениеЗаполнено(СтрокаКредиторскойЗадолженности.КорСчет) Тогда

					СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

					СтрокаКредиторскойЗадолженности.СуммаБУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаНУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0;

				Иначе

					СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности,
						СтрокаКредиторскойЗадолженности, Реквизиты);

				КонецЕсли;
					
				Если СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов <= 0 Тогда
					Прервать;
				КонецЕсли;
					
			КонецЦикла;

			// Обход таблицы кредиторской задолженности (возврат аванса).
			Для каждого СтрокаКредиторскойЗадолженности Из ТаблицаКредиторскаяЗадолженностьВозвратАванса Цикл

				Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0 Тогда
				    Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаКредиторскойЗадолженности.КорСчет) Тогда

					СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВозвратАванса.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

					СтрокаКредиторскойЗадолженности.СуммаБУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаНУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0;

				Иначе

					СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности,
						СтрокаКредиторскойЗадолженности, Реквизиты);

				КонецЕсли;
					
				Если СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов <= 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	// Обход таблицы дебиторской задолженности (возврат аванса).
	Для каждого СтрокаДебиторскойЗадолженности Из Параметры.ТаблицаДебиторскаяЗадолженностьВозвратАванса Цикл

		Если ЗначениеЗаполнено(СтрокаДебиторскойЗадолженности.КорСчет) Тогда

			СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

			СтрокаДебиторскойЗадолженности.СуммаБУ = 0;
			СтрокаДебиторскойЗадолженности.СуммаНУ = 0;
			СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = 0;

		Иначе

			// Обход таблицы кредиторской задолженности.
			Для каждого СтрокаКредиторскойЗадолженности Из Параметры.ТаблицаКредиторскаяЗадолженность Цикл

				Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0 Тогда
				    Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаКредиторскойЗадолженности.КорСчет) Тогда

					СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВзаимозачет.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

					СтрокаКредиторскойЗадолженности.СуммаБУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаНУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0;

				Иначе

					СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет.Добавить();
					ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности,
						СтрокаКредиторскойЗадолженности, Реквизиты);

				КонецЕсли;
					
				Если СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов <= 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

			// Обход таблицы кредиторской задолженности (возврат аванса).
			Для каждого СтрокаКредиторскойЗадолженности Из ТаблицаКредиторскаяЗадолженностьВозвратАванса Цикл

				Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0 Тогда
					Прервать;
				КонецЕсли;

				Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0 Тогда
				    Продолжить;
				КонецЕсли;

				Если ЗначениеЗаполнено(СтрокаКредиторскойЗадолженности.КорСчет) Тогда

					СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВозвратАванса.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

					СтрокаКредиторскойЗадолженности.СуммаБУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаНУ = 0;
					СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0;

				Иначе

					СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет.Добавить();
					ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности,
						СтрокаКредиторскойЗадолженности, Реквизиты);

				КонецЕсли;
					
				Если СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов <= 0 Тогда
					Прервать;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ЭтоОтложенноеПроведение Тогда

		// При актуализации отложенных расчетов по одному договору возможна ситуация, когда по договору суммы
		// дебиторской и кредиторской задолженности не совпадают, если одним документом
		// производят зачет между разными договорами.
		//
		// При обычном режиме проведения в таблицах могут оставаться рублевые суммы по договорам в валюте,
		// которые будут закрыты при переоценке, их включать в таблицы взаимозачета не надо.

		// Обход оставшейся дебиторской задолженности.
		Для каждого СтрокаДебиторскойЗадолженности Из Параметры.ТаблицаДебиторскаяЗадолженность Цикл

			Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0
			И СтрокаДебиторскойЗадолженности.СуммаНУ = 0
			И СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВзаимозачет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

		КонецЦикла;

		// Обход оставшейся дебиторской задолженности (возврат аванса).
		Для каждого СтрокаДебиторскойЗадолженности Из Параметры.ТаблицаДебиторскаяЗадолженностьВозвратАванса Цикл

			Если СтрокаДебиторскойЗадолженности.СуммаБУ = 0
			И СтрокаДебиторскойЗадолженности.СуммаНУ = 0
			И СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда
				Продолжить;
			КонецЕсли;

			СтрокаВзаимозачета = ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

		КонецЦикла;
		
	КонецЕсли;

	// Обход оставшейся кредиторской задолженности.
	Для каждого СтрокаКредиторскойЗадолженности Из Параметры.ТаблицаКредиторскаяЗадолженность Цикл

		Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0
		И СтрокаКредиторскойЗадолженности.СуммаНУ = 0
		И СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВзаимозачет.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

	КонецЦикла;

	// Обход таблицы оставшейся кредиторской задолженности (возврат аванса).
	Для каждого СтрокаКредиторскойЗадолженности Из ТаблицаКредиторскаяЗадолженностьВозвратАванса Цикл

		Если СтрокаКредиторскойЗадолженности.СуммаБУ = 0
		И СтрокаКредиторскойЗадолженности.СуммаНУ = 0
		И СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВзаимозачета = ТаблицаКредиторскаяЗадолженностьВозвратАвансаВзаимозачет.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаКредиторскойЗадолженности);

	КонецЦикла;

	СтруктураТаблицВзаимозачета = Новый Структура;
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаДебиторскаяЗадолженность", ТаблицаДебиторскаяЗадолженностьВзаимозачет);
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаДебиторскаяЗадолженностьВозвратАванса", ТаблицаДебиторскаяЗадолженностьВозвратАвансаВзаимозачет);
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаКредиторскаяЗадолженность", ТаблицаКредиторскаяЗадолженностьВзаимозачет);
	СтруктураТаблицВзаимозачета.Вставить("ТаблицаКредиторскаяЗадолженностьВозвратАванса", ТаблицаКредиторскаяЗадолженностьВозвратАвансаВзаимозачет);

	Возврат СтруктураТаблицВзаимозачета;

КонецФункции

// ПЕРЕНОС ЗАДОЛЖЕННОСТИ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьТаблицуВзаиморасчетовПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ТаблицаПереносЗадолженности = ПустаяТаблицаВзаиморасчетовПереносЗадолженности(Реквизиты.УчитыватьЗадолженностьУСН);

	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Для каждого СтрокаВзаиморасчетов Из Параметры.Взаиморасчеты Цикл
		
		Если СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем = ВалютаРеглУчета Тогда
			КурсВалюты = 1;
			КратностьВалюты = 1;
		Иначе
			ПараметрыКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем, Реквизиты.Период);
			КурсВалюты = ПараметрыКурса.Курс;
			КратностьВалюты = ПараметрыКурса.Кратность;
		КонецЕсли;

		СтрокаПереносЗадолженности = ТаблицаПереносЗадолженности.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаПереносЗадолженности, СтрокаВзаиморасчетов);

		Если СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов Тогда

			СтрокаПереносЗадолженности.КорВалютаВзаиморасчетов = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			СтрокаПереносЗадолженности.КорСуммаВзаиморасчетов = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;

		Иначе

			СтрокаПереносЗадолженности.КорВалютаВзаиморасчетов = СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем;
			СтрокаПереносЗадолженности.КорСуммаВзаиморасчетов = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаВзаиморасчетов.СуммаБУ,
				ВалютаРеглУчета, СтрокаВзаиморасчетов.ВалютаВзаиморасчетовСПолучателем,
				1, КурсВалюты,
				1, КратностьВалюты);

		КонецЕсли;

	КонецЦикла;

	Возврат ТаблицаПереносЗадолженности;

КонецФункции

Процедура СформироватьДвиженияПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл

		// Основная проводка по счету расчетов

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;

		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;

		Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;

		Для Ном = 1 по 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
		КонецЦикла;

		СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
		Если СвойстваКорСчета.Валютный Тогда
			Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.КорВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваКорСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
		КонецЕсли;

		Если ОтражатьВНалоговомУчете Тогда
			СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
			Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
			КонецЕсли;
			Если СвойстваКорСчета.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтКорСчета] = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц);
			КонецЕсли;
		КонецЕсли;

		// Проводки по вспомогательным счетам задолженности УСН

		// Проводка Дт УСН.01 (УСН.21) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.01 (УСН.21)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности ЕНВД";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			Для Ном = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
			КонецЦикла;
			
			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;

		КонецЕсли;

		// Проводка Дт УСН.02 (УСН.22) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.02 (УСН.22)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности за товары и услуги комитента";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			Для Ном = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
			КонецЦикла;
			
			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Комитента;

		КонецЕсли;
		
		// Проводка Дт УСН.03 (УСН.31) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.03 (УСН.31)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСНПатент
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности ЕНВД";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
			Для Ном = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
			КонецЦикла;

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Патент;

		КонецЕсли;
		
		// Проводка Дт УСН.04 (УСН.24) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.04 (УСН.24)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности облагаемой торговым сбором";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				Проводка["Счет" + ДтКтКорСчета] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
			Для Ном = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
			КонецЦикла;

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
				Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// СПИСАНИЕ ЗАДОЛЖЕННОСТИ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности();

	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыВзаиморасчетовСписаниеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры.РасшифровкаПлатежа, Реквизиты, Отказ);

	ЗаполнитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		Параметры.РасшифровкаПлатежа,
		Реквизиты,
		ТаблицаВзаиморасчетов,
		ОстаткиЗадолженности,
		Ложь,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Заполняет таблицу взаиморасчетов при списании задолженности контрагента.
//
// Параметры:
//	РасшифровкаПлатежа - ТаблицаЗначений - см. результат ПодготовитьПараметрыТаблицыВзаиморасчетовСписаниеЗадолженности().
//	Реквизиты - СтрокаТаблицыЗначений - см. таблицу Реквизиты из результата ПодготовитьПараметрыТаблицыВзаиморасчетовСписаниеЗадолженности().
//	ТаблицаВзаиморасчетов - ТаблицаЗначений - см. результат ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности().
//	ОстаткиЗадолженности - ТаблицаЗначений - см. результат ПустаяТаблицаОстаткиЗадолженности().
//	ЭтоОтложенноеПроведение - Булево - Истина, если вызов выполняется в ходе актуализации отложенных расчетов с контрагентами.
//	Отказ - Булево - Истина, если в ходе выполнения процедуры обнаружена ошибка и требуется откатить транзакцию записи движений.
//
Процедура ЗаполнитьТаблицуВзаиморасчетовСписаниеЗадолженности(РасшифровкаПлатежа, Реквизиты, ТаблицаВзаиморасчетов, ОстаткиЗадолженности, ЭтоОтложенноеПроведение, Отказ) Экспорт

	Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл

		НераспределенныйОстаток = СтрокаПлатежа.СуммаВзаиморасчетов;

		ДобавитьСтрокиСписанияЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			ОстаткиЗадолженности,
			СтрокаПлатежа,
			Реквизиты,
			Отказ);

		ДобавитьСтрокуАвансаСписаниеЗадолженности(
			ТаблицаВзаиморасчетов,
			НераспределенныйОстаток,
			СтрокаПлатежа,
			Реквизиты,
			ЭтоОтложенноеПроведение);

	КонецЦикла;

КонецПроцедуры

Процедура СформироватьДвиженияСписаниеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;

	Параметры = ПодготовитьПараметрыПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);
	
	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл

		// Основная проводка по счету расчетов

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;

		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;

		Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;

		Для Ном = 1 по 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
		КонецЦикла;

		СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
		Если СвойстваКорСчета.Валютный Тогда
			Проводка["Валюта" + ДтКтКорСчета]        = Реквизиты.ВалютаДокумента;
			Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваКорСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
		КонецЕсли;

		Если ОтражатьВНалоговомУчете Тогда
			СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
			Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
			КонецЕсли;
			Если СвойстваКорСчета.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтКорСчета] = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц);
			КонецЕсли;
		КонецЕсли;

		// Проводки по вспомогательным счетам задолженности УСН

		// Проводка Дт УСН.01 (УСН.21) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.01 (УСН.21)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности ЕНВД";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;

		КонецЕсли;

		// Проводка Дт УСН.02 (УСН.22) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.02 (УСН.22)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности за товары и услуги комитента";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Комитента;

		КонецЕсли;
		
		// Проводка Дт УСН.03 (УСН.31) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.03 (УСН.31)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСНПатент
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности ЕНВД";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Патент;

		КонецЕсли;
		
		// Проводка Дт УСН.04 (УСН.24) - если ДтКтРасчетов = "Дт"
		// или Кт УСН.04 (УСН.24)  - если ДтКтРасчетов = "Кт"
		Если Реквизиты.УчитыватьЗадолженностьУСН
			И СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 Тогда

			Проводка = Движения.Хозрасчетный.Добавить();

			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Погашение задолженности по деятельности облагаемой торговым сбором";

			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
			Иначе
				Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаУСН.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

// КОМИССИОННОЕ ВОЗНАГРАЖДЕНИЕ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьДвиженияПоКомиссионномуВознаграждению(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаРеквизиты)
	 Или Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.УдержатьВознаграждение 
	 Или Не ЗначениеЗаполнено(Реквизиты.СчетАвансов)
	 Или ТаблицаВзаиморасчетов.Найти(Реквизиты.Регистратор, "ДокументРасчетов") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоКомиссионномуВознаграждению(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Отбор = Новый Структура("ДокументРасчетов", Реквизиты.Регистратор);
	ТаблицаКомиссионноеВознаграждение = Параметры.КомиссионноеВознаграждение.Скопировать(Отбор);	
	ТаблицаКомиссионноеВознаграждение.ЗаполнитьЗначения(Реквизиты.СчетАвансов, "СчетАвансов");
	
	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Дт", "Кт");
	ДтКтАвансов  = ?(ДтКтРасчетов = "Дт", "Кт", "Дт");
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);
	
	Для каждого СтрокаВзаиморасчетов Из ТаблицаКомиссионноеВознаграждение Цикл
		
		Если СтрокаВзаиморасчетов.СчетРасчетов <> СтрокаВзаиморасчетов.СчетАвансов Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период       = Реквизиты.Период;
			Проводка.Организация  = Реквизиты.Организация;
			Проводка.Содержание   = "Оказание услуг по договору комиссии";

			Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
				"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);

			СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
			Если СвойстваСчетаРасчетов.Валютный Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			КонецЕсли;
			Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.ПодразделениеРасчетов;
			КонецЕсли;

			Проводка["Счет" + ДтКтАвансов] = СтрокаВзаиморасчетов.СчетАвансов;

			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов],
				"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов],
				"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов],
				"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

			СвойстваСчетаАвансов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтАвансов]);
			Если СвойстваСчетаАвансов.Валютный Тогда
				Проводка["Валюта" + ДтКтАвансов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтАвансов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Конецесли;
			Если СвойстваСчетаАвансов.УчетПоПодразделениям Тогда
				Проводка["Подразделение" + ДтКтАвансов] = СтрокаВзаиморасчетов.Подразделение;
			КонецЕсли;

			Если СтрокаВзаиморасчетов.РасчетыВВалюте
				И НЕ Реквизиты.ЭтоВозврат Тогда
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
			Иначе
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб;
			КонецЕсли;

			Если ОтражатьВНалоговомУчете Тогда

				Если СтрокаВзаиморасчетов.РасчетыВУсловныхЕдиницах
					И НЕ Реквизиты.ЭтоВозврат Тогда
					СуммаНУ = СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;
				Иначе
					СуммаНУ = СтрокаВзаиморасчетов.СуммаРуб;
				КонецЕсли;
				Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
				КонецЕсли;
				Если СвойстваСчетаАвансов.НалоговыйУчет Тогда
					Проводка["СуммаНУ" + ДтКтАвансов] = СуммаНУ;
					ЗаполнитьРазницыВПроводке(Проводка, ДтКтАвансов, ОсновнойВидРазниц);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоКомиссионномуВознаграждению(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "УдержатьВознаграждение,"    // <Булево> - Удержать вознаграждение
	+ "ЭтоВозврат,"                // <Булево>
	+ "СчетАвансов,"               // <ПланСчетовСсылка.Хозрасчетный> - счет, на котором будет учтено комиссионное вознаграждение
	+ "НаправлениеДвижения"        // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "Контрагент,"                   // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"           // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументРасчетов,"             // <ДокументСсылка>
		+ "ВидДоговора,"                  //
		+ "ВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты> - валюта расчетов по договору
		+ "РасчетыВУсловныхЕдиницах,"     // <Булево> - флаг расчетов в условных единицах
		+ "СчетРасчетов,"                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
		+ "СчетАвансов,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
		+ "Подразделение,"                // <Ссылка на справочник подразделений> - подразделение по счету авансов
		+ "ПодразделениеРасчетов,"        // <Ссылка на справочник подразделений> - подразделение по счету расчетов
		+ "РасчетыВВалюте,"               // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
		+ "СуммаВзаиморасчетов,"          // <Число,15,2> - сумма в валюте взаиморасчетов
		+ "СуммаРубПоКурсуАванса,"        // <Число,15,2> - сумма в рублях по курсу на дату аванса
		+ "СуммаРуб,"                     // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
		+ "СуммаВзаиморасчетовЕНВД,"      // <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
		+ "СуммаРуб_ЕНВД,"                // <Число,15,2> - сумма в рублях по деятельности ЕНВД
		+ "СуммаВзаиморасчетовКомитента," // <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
		+ "СуммаРуб_Комитента";           // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов

	Параметры.Вставить("КомиссионноеВознаграждение", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

	
КонецФункции

// ПОСТУПЛЕНИЕ ЗАКУПЛЕННЫХ ТОВАРОВ И УСЛУГ КОМИТЕНТОВ - ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьДвиженияПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ПоддержкаПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);

	Для каждого СтрокаТаблицы Из Параметры.Взаиморасчеты Цикл
		
		// Проводка по формированию задолженности комитента по договору комиссии на закупку перед нами 
		// и нашей задолженности перед поставщиком
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;

		Проводка.СчетДт = СтрокаТаблицы.СчетРасчетовКомитента;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаТаблицы.Комитент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаТаблицы.ДоговорКомитента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.ДокументРасчетовКомитента);

		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = СтрокаТаблицы.ДоговорКомитента.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТаблицы.СуммаВзаиморасчетовКомитент;
		КонецЕсли;

		Проводка.СчетКт = СтрокаТаблицы.СчетРасчетовПоставщика;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТаблицы.ДоговорПоставщика);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаТаблицы.ДокументРасчетовПоставщика);

		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);

		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;

		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = СтрокаТаблицы.ВалютаВзаиморасчетовПоставщика;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаБУ;

		Если ОтражатьВНалоговомУчете Тогда

			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					ЗаполнитьРазницыВПроводке(Проводка, "Дт", ОсновнойВидРазниц);
				КонецЕсли;
			КонецЕсли;

			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Если ПоддержкаПБУ18 Тогда
					ЗаполнитьРазницыВПроводке(Проводка, "Кт", ОсновнойВидРазниц);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеЗакупленныхТоваровУслугКомитентов(ТаблицаВзаиморасчеты, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "СчетРасчетовКомитента,"          // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов с комитентом по договору на закупку
	+ "Комитент,"                       // <СправочникСсылка.Контрагенты> - комитент, для которого закупаются товары и услуги
	+ "ДоговорКомитента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор с комитентом, по которому закупаются товары и услуги
	+ "ДокументРасчетовКомитента,"      // <ДокументСсылка> - документ расчетов, по которому увеличивается задолженность комитента
	+ "СчетРасчетовПоставщика,"         // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов с поставщиком
	+ "Поставщик,"                      // <СправочникСсылка.Контрагенты> - поставщик, у которого закупаются товары и услуги для комитента
	+ "ДоговорПоставщика,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор с поставщиком, по которому закупаются товары и услуги для комитента
	+ "ВалютаВзаиморасчетовПоставщика," // <СправочникСсылка.Валюты> - валюта расчетов по договору с поставщиком
	+ "ДокументРасчетовПоставщика,"     // <ДокументСсылка> - документ расчетов, по которому увеличивается наша задолженность перед поставщиком
	+ "СуммаВзаиморасчетов,"            // <Число,15,2> - сумма в валюте расчетов с поставщиком
	+ "СуммаВзаиморасчетовКомитент,"    // <Число,15,2> - сумма в валюте расчетов с комитентом
	+ "СуммаБУ,"                        // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"                        // <Число,15,2> - сумма в рублях (НУ)
	+ "Содержание";                     // <Строка,150> - содержание проводки

	Параметры.Вставить("Взаиморасчеты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация документа
	+ "Подразделение,";                 // <Ссылка на справочник подразделений> - подразделение документа

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// БЕЗНАЛИЧНЫЕ РАСЧЕТЫ ДЛЯ УСН и ИП

// Функция возвращает таблицу остатков регистра "ПрочиеРасчеты", отобранных по переданным видам отбора и значениям таблицы-источника,
// отсортированную по хронологии расчетных документов (по ФИФО)
//
// Параметры:
//  ТаблицаИсточник         - <ТаблицаЗначений> - таблица с данными для отбора остатков расчетов
//  Реквизиты               - <Структура|СтрокаТаблицыЗначений> - реквизиты документа, на момент которого получаются остатки
//  ВидыОтборов             - <Структура> - структура, определяющая отбор.
//                            В ключах - имена колонок источника, в значениях - имена соответствующих измерений регистра, по которым необходимо отбирать остатки
//  УстанавливатьБлокировку - <Булево> - если Истина, то необходимо установить управляемую блокировку таблицы регистра
// Возвращаемое значение:
//   <ТаблицаЗначений>      - таблица остатков регистра накопления ПрочиеРасчеты
Функция ПолучитьОстаткиПрочихРасчетов(ТаблицаИсточник, ВидыОтборов, Реквизиты, УстанавливатьБлокировку = Ложь) Экспорт

	КолонкиИсточника = Новый Массив;
	Для каждого КлючИЗначение Из ВидыОтборов Цикл
		КолонкиИсточника.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	СтрокаКолонкиИсточника = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(КолонкиИсточника, ",");
	
	ТаблицаАналитики = ТаблицаИсточник.Скопировать(, СтрокаКолонкиИсточника);
	ТаблицаАналитики.Свернуть(СтрокаКолонкиИсточника);
	
	Если УстанавливатьБлокировку Тогда
		
		// Установка управляемой блокировки РегистрНакопления.ПрочиеРасчеты
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасчеты");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.ИсточникДанных = ТаблицаАналитики;
		Для каждого КлючИЗначение Из ВидыОтборов Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		КонецЦикла;
		Блокировка.Заблокировать();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.ДоговорКонтрагента,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК РасчетныйДокументДата,
	|	ПрочиеРасчетыОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(
	|			&ГраницаОстатка,
	|			Организация = &Организация
	|				И &УсловиеОтбораИзмерений) КАК ПрочиеРасчетыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПрочиеРасчетыОстатки.РасчетныйДокумент = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата,
	|	РасчетныйДокумент"
	;
	
	Запрос.УстановитьПараметр("ГраницаОстатка", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	ТекстУсловияОтбора = "";
	Для каждого КлючИЗначение Из ВидыОтборов Цикл
		
		ЗначенияОтбора = ТаблицаАналитики.ВыгрузитьКолонку(КлючИЗначение.Ключ);
		Запрос.УстановитьПараметр(КлючИЗначение.Значение, ЗначенияОтбора);
		
		ТекстУсловияОтбора = ТекстУсловияОтбора
			+ " И " + КлючИЗначение.Значение + " В (&" + КлючИЗначение.Значение + ")";
		
	КонецЦикла;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеОтбораИзмерений", ТекстУсловияОтбора);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ПодготовитьТаблицуПрочихРасчетовОплатаПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизиты) Экспорт

	ТаблицаПрочихРасчетов = ПустаяТаблицаПоПрочимРасчетам();
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат ТаблицаПрочихРасчетов;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетАвансов
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ЗачетЗадолженности
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
		И Не Реквизиты.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.Прочее Тогда
		Возврат ТаблицаПрочихРасчетов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат ТаблицаПрочихРасчетов;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыТаблицыПрочихРасчетовОплатаПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	// Прочие расчеты формируются только для расчетов с эмитентами сторонних подарочных сертификатов
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВзаиморасчетов", Параметры.Взаиморасчеты);
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("Регистратор",           Реквизиты.Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВзаиморасчетов.Контрагент,
	|	ТаблицаВзаиморасчетов.ДоговорКонтрагента,
	|	ТаблицаВзаиморасчетов.СчетРасчетов,
	|	ТаблицаВзаиморасчетов.ДокументРасчетов,
	|	ТаблицаВзаиморасчетов.ДатаДокументаРасчетов,
	|	ТаблицаВзаиморасчетов.СуммаБУ
	|ПОМЕСТИТЬ ВТ_Взаиморасчеты
	|ИЗ
	|	&ТаблицаВзаиморасчетов КАК ТаблицаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Взаиморасчеты.Контрагент,
	|	ВТ_Взаиморасчеты.ДоговорКонтрагента,
	|	ВТ_Взаиморасчеты.ДокументРасчетов,
	|	ВТ_Взаиморасчеты.СчетРасчетов,
	|	ВТ_Взаиморасчеты.ДатаДокументаРасчетов,
	|	СУММА(ВТ_Взаиморасчеты.СуммаБУ) КАК СуммаБУ
	|ИЗ
	|	ВТ_Взаиморасчеты КАК ВТ_Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|		ПО ВТ_Взаиморасчеты.Контрагент = ВидыОплатОрганизаций.Контрагент
	|			И ВТ_Взаиморасчеты.ДоговорКонтрагента = ВидыОплатОрганизаций.ДоговорКонтрагента
	|			И ВТ_Взаиморасчеты.СчетРасчетов = ВидыОплатОрганизаций.СчетУчетаРасчетов
	|			И (ВидыОплатОрганизаций.Организация = &Организация)
	|ГДЕ
	|	ВТ_Взаиморасчеты.ДокументРасчетов <> &Регистратор
	|	И ВТ_Взаиморасчеты.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Взаиморасчеты.Контрагент,
	|	ВТ_Взаиморасчеты.ДоговорКонтрагента,
	|	ВТ_Взаиморасчеты.ДатаДокументаРасчетов,
	|	ВТ_Взаиморасчеты.СчетРасчетов,
	|	ВТ_Взаиморасчеты.ДокументРасчетов"
	;
	
	ВзаиморасчетыПоСертификатам = Запрос.Выполнить().Выгрузить();
	
	Если ВзаиморасчетыПоСертификатам.Количество() = 0 Тогда
		Возврат ТаблицаПрочихРасчетов;
	КонецЕсли;
	
	// подбираем остатки "Прочих расчетов"
	ИменаОтборов = Новый Структура;
	ИменаОтборов.Вставить("Контрагент",         "Контрагент");
	ИменаОтборов.Вставить("ДоговорКонтрагента", "ДоговорКонтрагента");
	ИменаОтборов.Вставить("ДокументРасчетов",   "РасчетныйДокумент");
	ИменаОтборов.Вставить("СчетРасчетов",       "СчетУчета");
	
	ОстаткиПрочихРасчетов = ПолучитьОстаткиПрочихРасчетов(ВзаиморасчетыПоСертификатам, ИменаОтборов, Реквизиты, Истина);
	
	Для каждого СтрокаОплаты Из ВзаиморасчетыПоСертификатам Цикл
		
		СуммаДляСписания = СтрокаОплаты.СуммаБУ;
		
		Отбор = Новый Структура();
		Отбор.Вставить("Контрагент",         СтрокаОплаты.Контрагент);
		Отбор.Вставить("ДоговорКонтрагента", СтрокаОплаты.ДоговорКонтрагента);
		Отбор.Вставить("РасчетныйДокумент",  СтрокаОплаты.ДокументРасчетов);
		Отбор.Вставить("СчетУчета",          СтрокаОплаты.СчетРасчетов);
		
		НайденныеОстатки = ОстаткиПрочихРасчетов.Скопировать(Отбор);
		НайденныеОстатки.Сортировать("РасчетныйДокументДата, РасчетныйДокумент", Новый СравнениеЗначений);
		
		Для каждого СтрокаОстатка Из НайденныеОстатки Цикл
			
			Если СтрокаОстатка.СуммаОстаток <=0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписать = Мин(СуммаДляСписания, СтрокаОстатка.СуммаОстаток);
			
			СтрокаРасход = ТаблицаПрочихРасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасход, Реквизиты);
			ЗаполнитьЗначенияСвойств(СтрокаРасход, СтрокаОстатка);
			
			СтрокаРасход.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаРасход.Сумма       = СуммаСписать;
			
			СуммаДляСписания = СуммаДляСписания - СуммаСписать;
			Если СуммаДляСписания <=0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаПрочихРасчетов;

КонецФункции

Функция ПустаяТаблицаПоПрочимРасчетам() Экспорт
	
	НаборЗаписейПрочихРасчетов = РегистрыНакопления.ПрочиеРасчеты.СоздатьНаборЗаписей();
	
	ТаблицаПрочихРасчетов = НаборЗаписейПрочихРасчетов.ВыгрузитьКолонки();
	
	ТаблицаПрочихРасчетов.Колонки.Удалить("Активность");
	
	Возврат ТаблицаПрочихРасчетов;
	
КонецФункции

Процедура СформироватьДвиженияПоПрочимРасчетам(ТаблицаОстатковПоПрочимРасчетам, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОстатковПоПрочимРасчетам) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = Движения.ПрочиеРасчеты;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковПоПрочимРасчетам Цикл
		
		НоваяСтрока = ТаблицаДвижений.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
	КонецЦикла;
	
	Движения.ПрочиеРасчеты.Записывать = Истина;
	
КонецПроцедуры

// ЗАЧЕТ АВАНСОВ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаДокумента  - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//                      Создается в модуле менеджера документа
//  ТаблицаДокументыАвансов - <ТаблицаЗначений> - данные документа о документах расчетов, авансы по которым зачитываются, и о суммах зачета.
//                      Используется только при способе зачета авансов "По документу", для других способов может быть передана пустая таблица
//                      Создается в модуле менеджера документа
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 3 таблиц: ТаблицаДокумента, ДокументыАвансов, Реквизиты
//
Функция ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов(ТаблицаДокумента, ТаблицаДокументыАвансов, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаДокумента

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, аванс по которому зачитывается
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор, аванс по которому зачитывается
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВидДоговора,"                     //
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - Истина для договора с расчетами в условных единицах
	+ "УчетАгентскогоНДС,"               // <Булево> - Истина договор предусматривает исполнение обязанностей налогового агента по НДС
	+ "РасчетыВВалюте,"                  // <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ-регистратор
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма поступления или реализации в валюте взаиморасчетов
	+ "СуммаРуб,"                        // <Число,15,2> - сумма поступления или реализации в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг комитентов по организации на УСН
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовЕНВД";         // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деятельности ЕНВД по организации на УСН

	Параметры.Вставить("ТаблицаДокумента", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокумента, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "СпособЗачетаАвансов,"       // <ПеречислениеСсылка.СпособыЗачетаАвансов>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.ДокументыАвансов

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число,6,0> - номер строки таб.части ДокументыАвансов документа поступления или реализации
	+ "СчетАвансов,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "Контрагент,"          // <СправочникСсылка.Контрагенты> - контрагент, аванс по которому зачитывается
	+ "ДоговорКонтрагента,"  // <СправочникСсылка.ДоговорыКонтрагентов> - договор, аванс по которому зачитывается
	+ "ДокументАванса,"      // <ДокументСсылка> - документ расчетов, аванс по которому зачитывается
	+ "СуммаЗачета";         // <Число,15,2> - сумма зачитываемого аванса в валюте взаиморасчетов,
	                             // если СуммаЗачета = 0 - зачитывается масимально возможная сумма

	Параметры.Вставить("ДокументыАвансов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДокументыАвансов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Подготовка параметров для процедуры СформироватьДвиженияЗачетАвансов
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//
// Возвращаемое значение:
//   <Структура> - структура из 2 таблиц: Взаиморасчеты, Реквизиты
//
Функция ПодготовитьПараметрыЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументРасчетов,"                // <ДокументСсылка>
		+ "ВидДоговора,"                     //
		+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
		+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - флаг расчетов в условных единицах
		+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
		+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
		+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
		+ "ПодразделениеРасчетов,"           // <Ссылка на справочник подразделений> - подразделение по счету расчетов
		+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
		+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
		+ "СуммаРубПоКурсуАванса,"           // <Число,15,2> - сумма в рублях по курсу на дату аванса
		+ "СуммаРуб,"                        // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
		+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
		+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
		+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
		+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
		+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на торговом сборе
		+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
		+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
		+ "СуммаРуб_Комитента";              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНЗачетАвансов(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
		+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументРасчетов,"                // <ДокументСсылка>
		+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
		+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
		+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
		+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте расчетов по договору
		+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по договору по деятельности ЕНВД
		+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
		+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на патенте
		+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
		+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по договору по деятельности на торговом сборе
		+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
		+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов по договору при реализации товаров и услуг комитентов
		+ "СуммаРуб_Комитента";              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	ГруппируемыеКолонки = ""
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ДокументРасчетов,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение,"
	+ "РасчетыВВалюте";
	
	СуммируемыеКолонки = ""
	+ "СуммаВзаиморасчетов,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаРуб_ЕНВД,"
	+ "СуммаВзаиморасчетовПатент,"
	+ "СуммаРуб_Патент,"
	+ "СуммаВзаиморасчетовТорговыйСбор,"
	+ "СуммаРуб_ТорговыйСбор,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаРуб_Комитента";
	
	Параметры.Взаиморасчеты.Свернуть(ГруппируемыеКолонки, СуммируемыеКолонки);

	Возврат Параметры;

КонецФункции

// Подготовка параметров для процедуры СформироватьДвиженияЗачетАвансовКомитентов
//
// Параметры
//  ТаблицаТоварыУслугиКомитентов - <ТаблицаЗначений> - данные о реализованных товарах и услугах комитентов
//
// Возвращаемое значение:
//   <Структура> - структура из 1 таблицы: ТоварыУслугиКомитентов
//
Функция ПодготовитьПараметрыЗачетАвансовКомитентов(ТаблицаТоварыУслугиКомитентов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Реквизиты

	СписокОбязательныхКолонок = ""
		+ "Регистратор";             // <ДокументСсылка>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы ТоварыУслугиКомитентов

	СписокОбязательныхКолонок = ""
		+ "Подразделение,"             // <Ссылка на справочник подразделений>
		+ "Комитент,"                  // <СправочникСсылка.Контрагенты>
		+ "ДоговорКомиссии,"           // <СправочникСсылка.ДоговорыКонтрагентов> - договор с комитентом
		+ "ВалютаРасчетовСКомитентом," // <СправочникСсылка.Валюты> - валюта расчетов по договору с комитентом
		+ "СчетРасчетовСКомитентом,"   // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с комитентом
		+ "СчетАвансовСКомитентом,"    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
		+ "СуммаРасчетовСКомитентом,"  // <Число,15,2> - сумма в валюте расчетов с комитентом
		+ "СуммаРуб";                  // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)

	Параметры.Вставить("ТоварыУслугиКомитентов", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаТоварыУслугиКомитентов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаОстаткиАвансов() Экспорт

	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();

	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Счет",					Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("Валюта", 				Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("Контрагент",			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",		Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Подразделение", 		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов", 	ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ", 				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаНУ", 				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД", 		ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ЕНВД", 					ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент", 	ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Патент",				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента", 	ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Комитента", 			ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", 	ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ТорговыйСбор", 				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПоВсемСчетамУСН",ОписаниеТиповЧисло);

	Возврат ПустаяТаблица;

КонецФункции

Функция ПолучитьОстаткиАвансов(ТаблицаДокумента, Реквизиты, Отказ)

	Если ТаблицаДокумента.Количество() = 0
			ИЛИ Реквизиты.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Возврат ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период);

	ТаблицаДоговоров = ТаблицаДокумента.СкопироватьКолонки("СчетАвансов,Контрагент,ДоговорКонтрагента");
	Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
	
		НадоПолучатьОстатки = Истина;
	
		Если ИспользуетсяОтложенноеПроведение Тогда
			НадоПолучатьОстатки = Ложь;
			// Отложенное проведение не поддерживается для договоров в валюте и у.е.,
			// а также при расчетах с комитентами и комиссионерами.
			Если СтрокаДокумента.РасчетыВВалюте
				ИЛИ ЭтоВидДоговораРасчетыПоКомиссии(СтрокаДокумента.ВидДоговора) Тогда
				НадоПолучатьОстатки = Истина;
			КонецЕсли;
		КонецЕсли;
	
		Если НадоПолучатьОстатки Тогда
			НоваяСтрока = ТаблицаДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
		КонецЕсли;
	КонецЦикла;
	ТаблицаДоговоров.Свернуть("СчетАвансов,Контрагент,ДоговорКонтрагента");

	СтрокиСПустымСчетом = Новый Массив;
	Для каждого СтрокаДоговора Из ТаблицаДоговоров Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДоговора.СчетАвансов) 
			ИЛИ (НЕ БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СтрокаДоговора.СчетАвансов) 
			И НЕ БухгалтерскийУчет.НаСчетеВедетсяУчетПоДоговорам(СтрокаДоговора.СчетАвансов)) Тогда
			СтрокиСПустымСчетом.Добавить(СтрокаДоговора);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаСПустымСчетом Из СтрокиСПустымСчетом Цикл
		ТаблицаДоговоров.Удалить(СтрокаСПустымСчетом);
	КонецЦикла;

	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	ТаблицаДоговоров.Индексы.Добавить("СчетАвансов");
	ТаблицаСчетов = ТаблицаДоговоров.Скопировать(, "СчетАвансов");
	ТаблицаСчетов.Свернуть("СчетАвансов");
	
	// Блокируем регистр Хозрасчетный для получения остатков
	Блокировка = Новый БлокировкаДанных;
	
	Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
	
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.СчетАвансов);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СтрокаСчета.СчетАвансов);
		
		ОтборПоСчету = Новый Структура("СчетАвансов", СтрокаСчета.СчетАвансов);
		ТаблицаДоговоровПоСчету = ТаблицаДоговоров.Скопировать(ОтборПоСчету, "Контрагент,ДоговорКонтрагента");
		ЭлементБлокировки.ИсточникДанных = ТаблицаДоговоровПоСчету;
		
		Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			Если ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
			ИначеЕсли ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла; 
	
	// Счета УСН для получения остатков
	СубсчетаВзаиморасчетовУСН = Новый Массив;
	СубсчетаУСН = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	Для каждого СубсчетУСН Из СубсчетаУСН Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СубсчетУСН)
			И БухгалтерскийУчет.НаСчетеВедетсяУчетПоДоговорам(СубсчетУСН) Тогда
			СубсчетаВзаиморасчетовУСН.Добавить(СубсчетУСН);
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.УчитыватьЗадолженностьУСН И Реквизиты.ЭтоВозврат Тогда
		
		// Дополнительные блокировки по вспомогательным счетам задолженности УСН
		ТаблицаИсточникДанных = ТаблицаДоговоров.Скопировать(, "Контрагент,ДоговорКонтрагента");
		ТаблицаИсточникДанных.Свернуть("Контрагент,ДоговорКонтрагента");

		Для каждого СубсчетУСН Из СубсчетаВзаиморасчетовУСН Цикл
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
			ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СубсчетУСН);
			ЭлементБлокировки.ИсточникДанных = ТаблицаИсточникДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
		КонецЦикла;

	КонецЕсли;
	
	Блокировка.Заблокировать();
	
	// Получаем остатки
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментВремениОстатков", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов",  ВидыСубконтоРасчетов());
	Запрос.УстановитьПараметр("СчетаАвансов",          РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "СчетАвансов"));
	Запрос.УстановитьПараметр("Множитель",           ?(Реквизиты.НаправлениеДвижения = "Выбытие", -1, 1));
	Запрос.УстановитьПараметр("ПустоеПодразделение",   БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	МассивКонтрагенты = ТаблицаДокумента.ВыгрузитьКолонку("Контрагент");
	МассивКонтрагенты = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКонтрагенты);
	Запрос.УстановитьПараметр("МассивКонтрагенты", МассивКонтрагенты);
	МассивДоговоры    = ТаблицаДокумента.ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоры    = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоры);
	Запрос.УстановитьПараметр("МассивДоговоры", МассивДоговоры);
	Запрос.УстановитьПараметр("СубсчетаУСН", СубсчетаВзаиморасчетовУСН);

	Запрос.Текст = ТекстЗапросаОстаткиАвансов(Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент);

	ОстаткиАвансов = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиАвансов, "ДокументРасчетов", "ДатаДокументаРасчетов");
	// Индекc используется функцией ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
	Если Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		ОстаткиАвансов.Индексы.Добавить("Счет,Контрагент,ДоговорКонтрагента");
	Иначе
		ОстаткиАвансов.Индексы.Добавить("Счет,Контрагент,ДоговорКонтрагента,ДокументРасчетов");
	КонецЕсли;

	Возврат ОстаткиАвансов;

КонецФункции

Функция ТекстЗапросаОстаткиАвансов(УчитыватьЗадолженностьУСН)

	Если УчитыватьЗадолженностьУСН Тогда

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Счет КАК Счет,
		|	Остатки.Валюта КАК Валюта,
		|	Остатки.Субконто1 КАК Субконто1,
		|	Остатки.Субконто2 КАК Субконто2,
		|	Остатки.Субконто3 КАК Субконто3,
		|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Остатки.Счет.Валютный
		|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	Остатки.СуммаОстаток * &Множитель КАК СуммаБУ,
		|	Остатки.СуммаНУОстаток * &Множитель КАК СуммаНУ
		|ПОМЕСТИТЬ ОстаткиАвансов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СчетаАвансов),
		|			&ВидыСубконтоРасчетов,
		|			Организация = &Организация
		|				И Субконто1 В (&МассивКонтрагенты)
		|				И Субконто2 В (&МассивДоговоры)) КАК Остатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиУСН.Субконто1 КАК Субконто1,
		|	ОстаткиУСН.Субконто2 КАК Субконто2,
		|	ОстаткиУСН.Субконто3 КАК Субконто3,
		|	ЕСТЬNULL(ОстаткиУСН.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Патент,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитента,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Комитента,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовТорговыйСбор,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ТорговыйСбор
		|ПОМЕСТИТЬ ОстаткиАвансовУСН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СубсчетаУСН),
		|			&ВидыСубконтоРасчетов,
		|			Организация = &Организация
		|				И Субконто1 В (&МассивКонтрагенты)
		|				И Субконто2 В (&МассивДоговоры)) КАК ОстаткиУСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиУСН.Субконто1,
		|	ОстаткиУСН.Субконто2,
		|	ОстаткиУСН.Субконто3,
		|	ЕСТЬNULL(ОстаткиУСН.Подразделение, &ПустоеПодразделение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиАвансов.Счет КАК Счет,
		|	ОстаткиАвансов.Валюта КАК Валюта,
		|	ОстаткиАвансов.Субконто1 КАК Контрагент,
		|	ОстаткиАвансов.Субконто2 КАК ДоговорКонтрагента,
		|	ОстаткиАвансов.Субконто3 КАК ДокументРасчетов,
		|	ОстаткиАвансов.Подразделение КАК Подразделение,
		|	СУММА(ОстаткиАвансов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ОстаткиАвансов.СуммаБУ) КАК СуммаБУ,
		|	СУММА(ОстаткиАвансов.СуммаНУ) КАК СуммаНУ,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовЕНВД, 0)) КАК СуммаВзаиморасчетовЕНВД,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаБУ_ЕНВД, 0)) КАК СуммаБУ_ЕНВД,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовПатент, 0)) КАК СуммаВзаиморасчетовПатент,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаБУ_Патент, 0)) КАК СуммаБУ_Патент,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовКомитента, 0)) КАК СуммаВзаиморасчетовКомитента,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаБУ_Комитента, 0)) КАК СуммаБУ_Комитента,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовТорговыйСбор, 0)) КАК СуммаВзаиморасчетовТорговыйСбор,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаБУ_ТорговыйСбор, 0)) КАК СуммаБУ_ТорговыйСбор,
		|	СУММА(ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовЕНВД, 0) + ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовПатент, 0) + ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовКомитента, 0) + ЕСТЬNULL(ОстаткиАвансовУСН.СуммаВзаиморасчетовТорговыйСбор, 0)) КАК СуммаВзаиморасчетовПоВсемСчетамУСН
		|ИЗ
		|	ОстаткиАвансов КАК ОстаткиАвансов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАвансовУСН КАК ОстаткиАвансовУСН
		|		ПО ОстаткиАвансов.Субконто1 = ОстаткиАвансовУСН.Субконто1
		|			И ОстаткиАвансов.Субконто2 = ОстаткиАвансовУСН.Субконто2
		|			И ОстаткиАвансов.Субконто3 = ОстаткиАвансовУСН.Субконто3
		|			И ОстаткиАвансов.Подразделение = ОстаткиАвансовУСН.Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиАвансов.Счет,
		|	ОстаткиАвансов.Валюта,
		|	ОстаткиАвансов.Субконто1,
		|	ОстаткиАвансов.Субконто2,
		|	ОстаткиАвансов.Субконто3,
		|	ОстаткиАвансов.Подразделение";

	Иначе

		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Счет КАК Счет,
		|	Остатки.Валюта КАК Валюта,
		|	Остатки.Субконто1 КАК Контрагент,
		|	Остатки.Субконто2 КАК ДоговорКонтрагента,
		|	Остатки.Субконто3 КАК ДокументРасчетов,
		|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Остатки.Счет.Валютный
		|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	Остатки.СуммаОстаток * &Множитель КАК СуммаБУ,
		|	Остатки.СуммаНУОстаток * &Множитель КАК СуммаНУ,
		|	0 КАК СуммаВзаиморасчетовЕНВД,
		|	0 КАК СуммаБУ_ЕНВД,
		|	0 КАК СуммаВзаиморасчетовПатент,
		|	0 КАК СуммаБУ_Патент,
		|	0 КАК СуммаВзаиморасчетовКомитента,
		|	0 КАК СуммаБУ_Комитента
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СчетаАвансов),
		|			&ВидыСубконтоРасчетов,
		|			Организация = &Организация
		|				И Субконто1 В (&МассивКонтрагенты)
		|				И Субконто2 В (&МассивДоговоры)) КАК Остатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ > 0";

	КонецЕсли;

	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьСтрокиЗачтенныхАвансов(ТаблицаВзаиморасчетов, НераспределеннаяСумма, ОстаткиАвансов, СтрокаДокумента, Реквизиты)

	Если (Реквизиты.УчитыватьЗадолженностьУСН или Реквизиты.УчитыватьЗадолженностьУСНПатент) И Реквизиты.ЭтоВозврат Тогда
		СуммаВзаиморасчетовЕНВД         = СтрокаДокумента.СуммаВзаиморасчетовЕНВД;
		СуммаВзаиморасчетовПатент       = СтрокаДокумента.СуммаВзаиморасчетовПатент;
		СуммаВзаиморасчетовКомитента    = СтрокаДокумента.СуммаВзаиморасчетовКомитента;
		СуммаВзаиморасчетовТорговыйСбор = СтрокаДокумента.СуммаВзаиморасчетовТорговыйСбор;
	КонецЕсли;

	Для каждого СтрокаОстатка Из ОстаткиАвансов Цикл

		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;

		ЗачитываемыйАванс = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);

		Если ЗачитываемыйАванс <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
			"СчетРасчетов,СчетАвансов,Контрагент,ДоговорКонтрагента,ВидДоговора,
			|ВалютаВзаиморасчетов,РасчетыВВалюте,РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС");
		СтрокаВзаиморасчетов.ПодразделениеРасчетов = СтрокаДокумента.Подразделение;

		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка,
			"Подразделение,ДокументРасчетов,ДатаДокументаРасчетов");

		Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
			СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
		КонецЕсли;

		СтрокаВзаиморасчетов.ОстатокВзаиморасчетов 		= СтрокаОстатка.СуммаВзаиморасчетов;
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов 		= ЗачитываемыйАванс;

		КоэффициентКурсаАванса = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
			?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов));

		КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
			?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

		КоэффициентЗачтенногоАванса = СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов;
		
		СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = Окр(ЗачитываемыйАванс * КоэффициентКурсаАванса, 2);
		СтрокаВзаиморасчетов.СуммаРуб              = Окр(ЗачитываемыйАванс * КоэффициентРуб, 2);

		Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			ВсегоВзаиморасчетовСпецрежимы = СтрокаОстатка.СуммаВзаиморасчетовЕНВД + СтрокаОстатка.СуммаВзаиморасчетовПатент
				+ СтрокаОстатка.СуммаВзаиморасчетовКомитента + СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор;
			
			Если ВсегоВзаиморасчетовСпецрежимы > 0 Тогда
				
				ПределВзаиморасчетовСпецрежимы = Мин(ВсегоВзаиморасчетовСпецрежимы, СтрокаОстатка.СуммаВзаиморасчетов);
				
				СписатьВзаиморасчетыЕНВД = ?(Реквизиты.ЭтоВозврат,
					Мин(СуммаВзаиморасчетовЕНВД, СтрокаОстатка.СуммаВзаиморасчетовЕНВД),
					СтрокаОстатка.СуммаВзаиморасчетовЕНВД * КоэффициентЗачтенногоАванса);
				СписатьВзаиморасчетыЕНВД = Макс(СписатьВзаиморасчетыЕНВД * ПределВзаиморасчетовСпецрежимы / ВсегоВзаиморасчетовСпецрежимы, 0);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = Окр(СписатьВзаиморасчетыЕНВД, 2);

				СписатьВзаиморасчетыКомитента = ?(Реквизиты.ЭтоВозврат,
					Мин(СуммаВзаиморасчетовКомитента, СтрокаОстатка.СуммаВзаиморасчетовКомитента),
					СтрокаОстатка.СуммаВзаиморасчетовКомитента * КоэффициентЗачтенногоАванса);
				СписатьВзаиморасчетыКомитента = Макс(СписатьВзаиморасчетыКомитента * ПределВзаиморасчетовСпецрежимы / ВсегоВзаиморасчетовСпецрежимы, 0);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Окр(СписатьВзаиморасчетыКомитента, 2);
				
				СписатьВзаиморасчетыПатент = ?(Реквизиты.ЭтоВозврат,
					Мин(СуммаВзаиморасчетовПатент, СтрокаОстатка.СуммаВзаиморасчетовПатент),
					СтрокаОстатка.СуммаВзаиморасчетовПатент * КоэффициентЗачтенногоАванса);
				СписатьВзаиморасчетыПатент = Макс(СписатьВзаиморасчетыПатент * ПределВзаиморасчетовСпецрежимы / ВсегоВзаиморасчетовСпецрежимы, 0);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент = Окр(СписатьВзаиморасчетыПатент, 2);
				
				СписатьВзаиморасчетыТорговыйСбор = ?(Реквизиты.ЭтоВозврат,
					Мин(СуммаВзаиморасчетовТорговыйСбор, СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор),
					СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор * КоэффициентЗачтенногоАванса);
				СписатьВзаиморасчетыТорговыйСбор = Макс(СписатьВзаиморасчетыТорговыйСбор * ПределВзаиморасчетовСпецрежимы / ВсегоВзаиморасчетовСпецрежимы, 0);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор = Окр(СписатьВзаиморасчетыТорговыйСбор, 2);

				КоэффициентЕНВД = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
					?(СтрокаОстатка.СуммаВзаиморасчетовЕНВД = 0, 0,
					СтрокаОстатка.СуммаБУ_ЕНВД / СтрокаОстатка.СуммаВзаиморасчетовЕНВД));
					
				КоэффициентПатент = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
					?(СтрокаОстатка.СуммаВзаиморасчетовПатент = 0, 0,
					СтрокаОстатка.СуммаБУ_Патент / СтрокаОстатка.СуммаВзаиморасчетовПатент));

				КоэффициентКомитента = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
					?(СтрокаОстатка.СуммаВзаиморасчетовКомитента = 0, 0,
					СтрокаОстатка.СуммаБУ_Комитента / СтрокаОстатка.СуммаВзаиморасчетовКомитента));
				
				КоэффициентТорговыйСбор = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
					?(СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор = 0, 0,
					СтрокаОстатка.СуммаБУ_ТорговыйСбор / СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор));

				СтрокаВзаиморасчетов.СуммаРуб_ЕНВД      = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД * КоэффициентЕНВД, 2);
				СтрокаВзаиморасчетов.СуммаРуб_Патент    = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент * КоэффициентПатент, 2);
				СтрокаВзаиморасчетов.СуммаРуб_Комитента = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента * КоэффициентКомитента, 2);
				СтрокаВзаиморасчетов.СуммаРуб_ТорговыйСбор    = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор * КоэффициентТорговыйСбор, 2);

				СтрокаОстатка.СуммаВзаиморасчетовЕНВД = СтрокаОстатка.СуммаВзаиморасчетовЕНВД - СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				СтрокаОстатка.СуммаБУ_ЕНВД = СтрокаОстатка.СуммаБУ_ЕНВД - СтрокаВзаиморасчетов.СуммаРуб_ЕНВД;

				СтрокаОстатка.СуммаВзаиморасчетовПатент = СтрокаОстатка.СуммаВзаиморасчетовПатент - СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
				СтрокаОстатка.СуммаБУ_Патент = СтрокаОстатка.СуммаБУ_Патент - СтрокаВзаиморасчетов.СуммаРуб_Патент;

				СтрокаОстатка.СуммаВзаиморасчетовКомитента = СтрокаОстатка.СуммаВзаиморасчетовКомитента - СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				СтрокаОстатка.СуммаБУ_Комитента = СтрокаОстатка.СуммаБУ_Комитента - СтрокаВзаиморасчетов.СуммаРуб_Комитента;

				СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор = СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор - СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
				СтрокаОстатка.СуммаБУ_ТорговыйСбор = СтрокаОстатка.СуммаБУ_ТорговыйСбор - СтрокаВзаиморасчетов.СуммаРуб_ТорговыйСбор;
			КонецЕсли;
		КонецЕсли;

		НераспределеннаяСумма = НераспределеннаяСумма - ЗачитываемыйАванс;

		СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СтрокаОстатка.СуммаБУ             = СтрокаОстатка.СуммаБУ - СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСтрокуЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаДокумента, Реквизиты)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента,
		"СчетРасчетов,СчетАвансов,Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,РасчетыВВалюте,РасчетыВУсловныхЕдиницах, УчетАгентскогоНДС, Подразделение");

	Если ТаблицаВзаиморасчетов.Колонки.Найти("ТипОплаты") <> Неопределено Тогда
		СтрокаВзаиморасчетов.ТипОплаты = СтрокаДокумента.ТипОплаты;
	КонецЕсли;

	СтрокаВзаиморасчетов.ПодразделениеРасчетов = СтрокаДокумента.Подразделение;
	СтрокаВзаиморасчетов.ДокументРасчетов      = Реквизиты.Регистратор;
	СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;

	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));

	СтрокаВзаиморасчетов.СуммаРуб              = Окр(НераспределеннаяСумма * КоэффициентРуб, 2);
	СтрокаВзаиморасчетов.СуммаРубПоКурсуАванса = СтрокаВзаиморасчетов.СуммаРуб;

	Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		
		КоэффициентЕНВД = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
			СтрокаДокумента.СуммаВзаиморасчетовЕНВД / СтрокаДокумента.СуммаВзаиморасчетов);

		КоэффициентПатент = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
			СтрокаДокумента.СуммаВзаиморасчетовПатент / СтрокаДокумента.СуммаВзаиморасчетов);
			
		КоэффициентКомитента = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
			СтрокаДокумента.СуммаВзаиморасчетовКомитента / СтрокаДокумента.СуммаВзаиморасчетов);

		КоэффициентТорговыйСбор = ?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0,
			СтрокаДокумента.СуммаВзаиморасчетовТорговыйСбор / СтрокаДокумента.СуммаВзаиморасчетов);

		СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД      = Окр(НераспределеннаяСумма * КоэффициентЕНВД, 2);
		СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент    = Окр(НераспределеннаяСумма * КоэффициентПатент, 2);
		СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Окр(НераспределеннаяСумма * КоэффициентКомитента, 2);
		СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор = Окр(НераспределеннаяСумма * КоэффициентТорговыйСбор, 2);

		СтрокаВзаиморасчетов.СуммаРуб_ЕНВД      = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД * КоэффициентРуб, 2);
		СтрокаВзаиморасчетов.СуммаРуб_Патент    = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент * КоэффициентРуб, 2);
		СтрокаВзаиморасчетов.СуммаРуб_Комитента = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента * КоэффициентРуб, 2);
		СтрокаВзаиморасчетов.СуммаРуб_ТорговыйСбор = Окр(СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор * КоэффициентРуб, 2);

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНехваткуОстаткаАванса(НераспределенныйОстаток, СтрокаТаблицыАвансов, ВалютаВзаиморасчетов, Регистратор, ЭтоВозврат, Отказ)

	Если СтрокаТаблицыАвансов.СуммаЗачета > 0
		И НераспределенныйОстаток > 0
		И ЗначениеЗаполнено(СтрокаТаблицыАвансов.СчетАвансов)
		И НЕ (ТипЗнч(Регистратор) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") и ЭтоВозврат)Тогда

		ТекстОшибки = НСтр("ru='Указана сумма зачета, превышающая остаток незачтенного аванса.
			|Документ аванса: ""%1""
			|Указана сумма зачета: %2 %3; Остаток аванса: %4 %3; Превышение: %5 %3'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			СтрокаТаблицыАвансов.ДокументАванса,
			СтрокаТаблицыАвансов.СуммаЗачета,
			ВалютаВзаиморасчетов,
			СтрокаТаблицыАвансов.СуммаЗачета - НераспределенныйОстаток,
			НераспределенныйОстаток);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Регистратор, , , Отказ);

	КонецЕсли;

КонецПроцедуры

Функция СодержаниеПроводокПоЗачетуАвансов(НаправлениеДвижения, ЭтоВозврат, ВидДоговора, СчетРасчетов) Экспорт

	Если НаправлениеДвижения = "Поступление" Тогда

		Если ЭтоВозврат Тогда
			Содержание = "Выделение аванса. Оплаченная часть.";
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПоставщиком(ВидДоговора) Тогда
			Содержание= "Зачет аванса поставщику";
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионером(ВидДоговора) 
			ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговора) Тогда
			Содержание = "Зачет аванса комиссионеру (агенту)";
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(ВидДоговора) 
			ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговора) Тогда
			Содержание = "Зачет аванса комитенту (принципалу)";
		Иначе
			Содержание = "Зачет аванса";
		КонецЕсли;

	Иначе //"Выбытие"

		Если ЭтоВозврат Тогда
			Если БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПоставщиком(ВидДоговора) Тогда
				Содержание = "Возврат поставщику. Неоплаченная часть.";
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионером(ВидДоговора) 
				ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговора) Тогда
				Содержание = "Возврат комиссионеру (агенту). Неоплаченная часть.";
			ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(ВидДоговора)
				ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговора) Тогда
				Содержание = "Возврат комитенту (принципалу). Неоплаченная часть.";
			Иначе
				Содержание = "Возврат. Неоплаченная часть.";
			КонецЕсли;
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПокупателем(ВидДоговора) Тогда
			Если СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕВСчетОтгрузки Тогда
				Содержание = "Аванс по отгрузке без перехода права собственности";
			Иначе
				Содержание = "Зачет аванса покупателя";
			КонецЕсли;
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионером(ВидДоговора)
			ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионеромНаЗакупку(ВидДоговора) Тогда
			Содержание = "Зачет аванса комиссионера (агента)";
		ИначеЕсли БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(ВидДоговора) 
			ИЛИ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентомНаЗакупку(ВидДоговора) Тогда
			Содержание = "Зачет аванса комитента (принципала)";
		Иначе
			Содержание = "Зачет аванса";
		КонецЕсли;

	КонецЕсли;

	Возврат Содержание;

КонецФункции

Функция ДокументРасчетовПоЗачетуАвансов(ДокументРасчетов)
	
	Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		ИсходныйДокументРасчетов = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(ДокументРасчетов, Истина);
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		ИсходныйДокументРасчетов = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументРеализации(ДокументРасчетов, Истина);
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ИсходныйДокументРасчетов = ДокументРасчетов.ДокументОтгрузки;
	ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда 
		// Это зачет аванса по счету-фактуре налогового агента, перевыставленного комитенту,
		// получим документ-основание счета-фактуры, которым был начислен налог.
		ИсходныйДокументРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРасчетов, "ДокументОснование.ДокументОснование");
	Иначе
		ИсходныйДокументРасчетов = ДокументРасчетов;
	КонецЕсли;

	Возврат ИсходныйДокументРасчетов;
	
КонецФункции

// Формируется проводка по специальным счетам УСН
Процедура СформироватьПроводкуПоСчетамУСНЗачетАвансов(СтрокаВзаиморасчетов, Реквизиты, ДтКтУСН, ЗнакСуммУСН, Движения, Отказ)

	Если Не Реквизиты.УчитыватьЗадолженностьУСН 
	   И Не Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		Возврат;
	КонецЕсли;
		
	ФормироватьПроводкиУСН			= Реквизиты.УчитыватьЗадолженностьУСН;
	ФормироватьПроводкиУСНПатент	= Реквизиты.УчитыватьЗадолженностьУСНПатент; 
	
	ДокументРасчетовВПроводку = СтрокаВзаиморасчетов.ДокументРасчетов;
	Если СтрокаВзаиморасчетов.ДокументРасчетов = Реквизиты.Регистратор Тогда
		ДокументРасчетовВПроводку = ДокументРасчетовПоЗачетуАвансов(СтрокаВзаиморасчетов.ДокументРасчетов);
	КонецЕсли;
	
	// Проводка по вспомогательному счету УСН по задолженности ЕНВД
	
	Если ФормироватьПроводкиУСН 
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты по деятельности ЕНВД";
		
		Если СтрокаВзаиморасчетов.РасчетыВВалюте Тогда
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
			Проводка["Валюта" + ДтКтУСН]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД * ЗнакСуммУСН;
		Иначе
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
		Конецесли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВПроводку);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтУСН]);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтУСН] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб_ЕНВД * ЗнакСуммУСН;
		
	КонецЕсли;
	
	Если ФормироватьПроводкиУСНПатент 
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = ?(Реквизиты.Период < УчетУСН.ДатаНачалаДействияПатентнойСистемы(),
		НСтр("ru = 'Расчеты по деятельности УСН на патенте'"),
		НСтр("ru = 'Расчеты по деятельности на патенте'"));
		
		Если СтрокаВзаиморасчетов.РасчетыВВалюте Тогда
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
			Проводка["Валюта" + ДтКтУСН]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент * ЗнакСуммУСН;
		Иначе
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
		Конецесли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВПроводку);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтУСН]);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтУСН] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб_Патент * ЗнакСуммУСН;
		
	КонецЕсли;
	
	// Проводка по вспомогательному счету УСН по задолженности перед комитентом
	
	Если ФормироватьПроводкиУСН 
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты за товары и услуги комитента";
		
		Если СтрокаВзаиморасчетов.РасчетыВВалюте Тогда
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
			Проводка["Валюта" + ДтКтУСН]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента * ЗнакСуммУСН;
		Иначе
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
		Конецесли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВПроводку);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтУСН]);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтУСН] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб_Комитента * ЗнакСуммУСН;
		
	КонецЕсли;
	
	// Проводка по вспомогательному счету УСН по задолженности за товары,
	// реализованные в рамках деятельности на торговом сборе
	
	Если ФормироватьПроводкиУСН
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты по деятельности, облагаемой торговым сбором";
		
		Если СтрокаВзаиморасчетов.РасчетыВВалюте Тогда
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
			Проводка["Валюта" + ДтКтУСН]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор * ЗнакСуммУСН;
		Иначе
			Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
		Конецесли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", ДокументРасчетовВПроводку);
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтУСН]);
		Если СвойстваСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтУСН] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб_ТорговыйСбор * ЗнакСуммУСН;
		
	КонецЕсли;

КонецПроцедуры

// ПОГАШЕНИЕ ЗАДОЛЖЕННОСТИ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
// на основании переданных документом таблиц.
//
// Параметры
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 2 таблиц: РасшифровкаПлатежа и Реквизиты
//
Функция ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты, ВидДокумента) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.РасшифровкаПлатежа

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                      // <Число, 6,0> - номер строки документа
	+ "Подразделение,"                    // <Ссылка на справочник подразделений>
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ВидДоговора,"             		  // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - вид договора, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ ?(ВидДокумента = Неопределено,"","ВалютаВзаиморасчетовСПолучателем,") // <СправочникСсылка.Валюты> - валюта расчетов по договору	
	+ "РасчетыВУсловныхЕдиницах,"         // <Булево> - Истина для договора с расчетами в условных единицах
	+ "РасчетыВВалюте,"                   // <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "СпособПогашенияЗадолженности,"     // <ПеречислениеСсылка.СпособыПогашенияЗадолженности>
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается при способе "По документу"
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "ПорядокОтраженияАванса,"           // <ПеречислениеСсылка.ПорядокОтраженияАвансов, СправочникСсылка.Патенты> - Порядок отражения аванса для УСН
	+ "КорСчет,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет, коррекспондирующий со счетом расчетов с контрагентом
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 1 по корсчету
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 2 по корсчету
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 3 по корсчету
	+ "КорПодразделение,"                 // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма погашения задолженности в валюте взаиморасчетов
	+ "СуммаРуб,"                         // <Число,15,2> - сумма погашения задолженности в рублях
	+ "Содержание";                    // <Строка,150>

	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РасшифровкаПлатежа, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате денежных средств (покупателю или от поставщика)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Подготовка параметров для процедуры СформироватьДвиженияПогашениеЗадолженности
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 2 таблиц: Взаиморасчеты и Реквизиты
//
Функция ПодготовитьПараметрыПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                         // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СчетАвансов_ОтгрузкаВУЕ,"         // <ПланСчетовСсылка.Хозрасчетный> - счет авансов, для переквалификации в аванс для отгрузки
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                         // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                         // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                    // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                  // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"            // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"
	+ "СуммаБУ_ОтгрузкаВУЕ,"             // <Число,15,2> - сумма по курсу остатка отгрузки в УЕ
	+ "Содержание";                   // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНЗачетВозврата(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент"; // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты>
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный>
	+ "КорСчет,"                         // <ПланСчетовСсылка.Хозрасчетный>
	+ "КорПодразделение,"                // <Ссылка на справочник подразделений>
	+ "КорСубконто1,"                    // <СправочникСсылка.Контрагенты>
	+ "КорСубконто2,"                    // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "КорСубконто3,"                    // <ДокументСсылка>
	+ "Содержание,"                      // <Строка>
	+ "СуммаВзаиморасчетов,"             // <Число,15,2>
	+ "СуммаРуб";                        // <Число,15,2>
	
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	ГруппируемыеКолонки = ""
	+ "Подразделение,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ДокументРасчетов,"
	+ "ВалютаВзаиморасчетов,"
	+ "СчетРасчетов,"
	+ "КорСчет,"
	+ "КорПодразделение,"
	+ "КорСубконто1,"
	+ "КорСубконто2,"
	+ "КорСубконто3,"
	+ "Содержание,"
	;
	
	СуммируемыеКолонки = ""
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб";
	
	Параметры.Взаиморасчеты.Свернуть(ГруппируемыеКолонки, СуммируемыеКолонки);
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыТолькоДвиженияПоСчетамУСНПогашениеЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                    // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                  // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"            // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента";               // <Число,15,2> - сумма за товары и услуги комитентов в рублях

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	ГруппируемыеКолонки = ""
	+ "Подразделение,"
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ДокументРасчетов,"
	+ "ВалютаВзаиморасчетов,"
	+ "СчетРасчетов";
	
	СуммируемыеКолонки = ""
	+ "СуммаВзаиморасчетов,"
	+ "СуммаВзаиморасчетовЕНВД,"
	+ "СуммаБУ_ЕНВД,"
	+ "СуммаВзаиморасчетовПатент,"
	+ "СуммаБУ_Патент,"
	+ "СуммаВзаиморасчетовТорговыйСбор,"
	+ "СуммаБУ_ТорговыйСбор,"
	+ "СуммаВзаиморасчетовКомитента,"
	+ "СуммаБУ_Комитента";
	
	Параметры.Взаиморасчеты.Свернуть(ГруппируемыеКолонки, СуммируемыеКолонки);

	Возврат Параметры;
	
КонецФункции

Функция ПолучитьОстаткиЗадолженности(РасшифровкаПлатежа, Реквизиты, Отказ)
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиЗадолженности();
	КонецЕсли;

	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период);
	
	ТаблицаДоговоров = РасшифровкаПлатежа.СкопироватьКолонки("СчетРасчетов,Контрагент,ДоговорКонтрагента");
	Для каждого СтрокаПлатежа Из РасшифровкаПлатежа Цикл

		НадоПолучатьОстатки = СтрокаПлатежа.СпособПогашенияЗадолженности <> Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
		
		Если НадоПолучатьОстатки И ИспользуетсяОтложенноеПроведение Тогда
			НадоПолучатьОстатки = Ложь;
			
			// Отложенное проведение не поддерживается для договоров в валюте или у.е.
			// и при расчета с комитентами или комиссионерами.
			Если СтрокаПлатежа.РасчетыВВалюте 
				ИЛИ ЭтоВидДоговораРасчетыПоКомиссии(СтрокаПлатежа.ВидДоговора) Тогда
				НадоПолучатьОстатки = Истина;
			КонецЕсли;
		КонецЕсли;
	
		Если НадоПолучатьОстатки Тогда
			
			НоваяСтрока = ТаблицаДоговоров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлатежа);
			// Добавим служебный счет расчетов ОТ, если договор в условных единицах
			// Это нужно для учета авансов по отгрузке без перехода права собственности в у.е.
			Если СтрокаПлатежа.РасчетыВУсловныхЕдиницах Тогда
				НоваяСтрока = ТаблицаДоговоров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПлатежа, , "СчетРасчетов");
				НоваяСтрока.СчетРасчетов = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	ТаблицаДоговоров.Свернуть("СчетРасчетов,Контрагент,ДоговорКонтрагента");
	
	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат ПустаяТаблицаОстаткиЗадолженности();
	КонецЕсли;
	
	ТаблицаДоговоров.Индексы.Добавить("СчетРасчетов");
	ТаблицаСчетов = ТаблицаДоговоров.Скопировать(, "СчетРасчетов");
	ТаблицаСчетов.Свернуть("СчетРасчетов");
	
	// Блокируем регистр Хозрасчетный для получения остатков
	
	Блокировка = Новый БлокировкаДанных;
	
	Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
	
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.СчетРасчетов);
		
		// Основная блокировка по счетам задолженности
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Счет",        СтрокаСчета.СчетРасчетов);
		
		ОтборПоСчету = Новый Структура("СчетРасчетов", СтрокаСчета.СчетРасчетов);
		ТаблицаДоговоровПоСчету = ТаблицаДоговоров.Скопировать(ОтборПоСчету, "Контрагент,ДоговорКонтрагента");
		ЭлементБлокировки.ИсточникДанных = ТаблицаДоговоровПоСчету;
		
		Для НомерСубконто = 1 По ДанныеСчета.КоличествоСубконто Цикл
			Если ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
			ИначеЕсли ДанныеСчета["ВидСубконто" + НомерСубконто] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры Тогда
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Счета УСН для получения остатков
	СубсчетаВзаиморасчетовУСН = Новый Массив;
	СубсчетаУСН = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
	Для каждого СубсчетУСН Из СубсчетаУСН Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоКонтрагентам(СубсчетУСН)
			И БухгалтерскийУчет.НаСчетеВедетсяУчетПоДоговорам(СубсчетУСН) Тогда
			СубсчетаВзаиморасчетовУСН.Добавить(СубсчетУСН);
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент
		И НЕ Реквизиты.ЭтоВозврат Тогда
		
		// Дополнительные блокировки по вспомогательным счетам задолженности УСН
		ТаблицаИсточникДанных = ТаблицаДоговоров.Скопировать(, "Контрагент,ДоговорКонтрагента");
		ТаблицаИсточникДанных.Свернуть("Контрагент,ДоговорКонтрагента");
		
		Для каждого СубсчетУСН Из СубсчетаВзаиморасчетовУСН Цикл
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
			ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
			ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
			ЭлементБлокировки.УстановитьЗначение("Счет",        СубсчетУСН);
			ЭлементБлокировки.ИсточникДанных = ТаблицаИсточникДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
		КонецЦикла;
		
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
	// Получаем остатки
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментВремениОстатков", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов",  ВидыСубконтоРасчетов());
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры());
	
	СчетаРасчетов = РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "СчетРасчетов");
	СчетаРасчетовПоДокументам = Новый Массив;
	СчетаКонтрагентыДоговоры  = Новый Массив;
	Для каждого СчетРасчетов Из СчетаРасчетов Цикл
		Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоДокументамРасчетов(СчетРасчетов) Тогда
			СчетаРасчетовПоДокументам.Добавить(СчетРасчетов);
		Иначе
			СчетаКонтрагентыДоговоры.Добавить(СчетРасчетов);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СчетаРасчетовПоДокументам", СчетаРасчетовПоДокументам);
	Запрос.УстановитьПараметр("СчетаКонтрагентыДоговоры",  СчетаКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("Контрагенты", РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "Контрагент"));
	Запрос.УстановитьПараметр("Договоры",    РазличныеЗначенияКолонкиТаблицы(ТаблицаДоговоров, "ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("Множитель", ?(Реквизиты.НаправлениеДвижения = "Выбытие", -1, 1));
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("СубсчетаУСН", СубсчетаВзаиморасчетовУСН);
	
	Запрос.Текст = ТекстЗапросаОстаткиЗадолженности(Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент);
	
	ОстаткиЗадолженности = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиЗадолженности, "НомерСтроки");
	ОбщегоНазначенияБПВызовСервера.УпорядочитьТаблицуПоДокументу(ОстаткиЗадолженности, "ДокументРасчетов", "ДатаДокументаРасчетов");
	// Индексы используются в процедуре ДобавитьСтрокиПогашенияЗадолженности
	ОстаткиЗадолженности.Индексы.Добавить("НомерСтроки");
	ОстаткиЗадолженности.Индексы.Добавить("СчетРасчетов,Контрагент,ДоговорКонтрагента");
	
	Возврат ОстаткиЗадолженности;
	
КонецФункции

Функция ПустаяТаблицаОстаткиЗадолженности() Экспорт

	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();

	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("НомерСтроки", 						ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов", 						Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("Валюта", 							Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("Контрагент", 						Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента", 				Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов");
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", 			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Подразделение", 					Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", 			ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ", 							ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаНУ", 							ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД", 			ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ЕНВД", 						ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент", 		ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Патент", 					ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента", 		ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Комитента", 				ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", 	ОписаниеТиповЧисло);
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ТорговыйСбор",				ОписаниеТиповЧисло);

	Возврат ПустаяТаблица;

КонецФункции

Функция ТекстЗапросаОстаткиЗадолженности(УчитыватьЗадолженностьУСН)
	
	Если УчитыватьЗадолженностьУСН Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.Счет КАК Счет,
		|	Остатки.Субконто1 КАК Субконто1,
		|	Остатки.Субконто2 КАК Субконто2,
		|	Остатки.Субконто3 КАК Субконто3,
		|	ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	ВЫБОР
		|		КОГДА Остатки.Счет.Валютный
		|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|	КОНЕЦ КАК СуммаВзаиморасчетов,
		|	Остатки.СуммаОстаток * &Множитель КАК СуммаБУ,
		|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &Множитель КАК СуммаНУ
		|ПОМЕСТИТЬ ОстаткиЗадолженности
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СчетаРасчетовПоДокументам),
		|			&ВидыСубконтоРасчетов,
		|			Организация = &Организация
		|				И Субконто1 В (&Контрагенты)
		|				И Субконто2 В (&Договоры)) КАК Остатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	НЕОПРЕДЕЛЕНО,
		|	ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
		|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение),
		|	ВЫБОР
		|		КОГДА Остатки.Счет.Валютный
		|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|		ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|	КОНЕЦ,
		|	Остатки.СуммаОстаток * &Множитель,
		|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &Множитель
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СчетаКонтрагентыДоговоры),
		|			&ВидыСубконтоКонтрагентыДоговоры,
		|			Организация = &Организация
		|				И Субконто1 В (&Контрагенты)
		|				И Субконто2 В (&Договоры)) КАК Остатки
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиУСН.Субконто1 КАК Субконто1,
		|	ОстаткиУСН.Субконто2 КАК Субконто2,
		|	ОстаткиУСН.Субконто3 КАК Субконто3,
		|	ЕСТЬNULL(ОстаткиУСН.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ЕНВД,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовПатент,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Патент,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовКомитента,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_Комитента,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
		|				ТОГДА ОстаткиУСН.ВалютнаяСуммаОстаток * &Множитель
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаВзаиморасчетовТорговыйСбор,
		|	СУММА(ВЫБОР
		|			КОГДА ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор)
		|					ИЛИ ОстаткиУСН.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор)
		|				ТОГДА ОстаткиУСН.СуммаОстаток * &Множитель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБУ_ТорговыйСбор
		|ПОМЕСТИТЬ ОстаткиЗадолженностиУСН
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&МоментВремениОстатков,
		|			Счет В (&СубсчетаУСН),
		|			&ВидыСубконтоРасчетов,
		|			Организация = &Организация
		|				И Субконто1 В (&Контрагенты)
		|				И Субконто2 В (&Договоры)) КАК ОстаткиУСН
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиУСН.Субконто1,
		|	ОстаткиУСН.Субконто2,
		|	ОстаткиУСН.Субконто3,
		|	ЕСТЬNULL(ОстаткиУСН.Подразделение, &ПустоеПодразделение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Субконто1,
		|	Субконто2,
		|	Субконто3,
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиЗадолженности.Счет КАК СчетРасчетов,
		|	ОстаткиЗадолженности.Валюта КАК Валюта,
		|	ОстаткиЗадолженности.Субконто1 КАК Контрагент,
		|	ОстаткиЗадолженности.Субконто2 КАК ДоговорКонтрагента,
		|	ОстаткиЗадолженности.Субконто3 КАК ДокументРасчетов,
		|	ОстаткиЗадолженности.Подразделение КАК Подразделение,
		|	СУММА(ОстаткиЗадолженности.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
		|	СУММА(ОстаткиЗадолженности.СуммаВзаиморасчетов) КАК ОстатокВзаиморасчетов,
		|	СУММА(ОстаткиЗадолженности.СуммаБУ) КАК СуммаБУ,
		|	СУММА(ОстаткиЗадолженности.СуммаНУ) КАК СуммаНУ,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаВзаиморасчетовЕНВД, 0)) КАК СуммаВзаиморасчетовЕНВД,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаБУ_ЕНВД, 0)) КАК СуммаБУ_ЕНВД,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаВзаиморасчетовПатент, 0)) КАК СуммаВзаиморасчетовПатент,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаБУ_Патент, 0)) КАК СуммаБУ_Патент,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаВзаиморасчетовКомитента, 0)) КАК СуммаВзаиморасчетовКомитента,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаБУ_Комитента, 0)) КАК СуммаБУ_Комитента,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаВзаиморасчетовТорговыйСбор, 0)) КАК СуммаВзаиморасчетовТорговыйСбор,
		|	СУММА(ЕСТЬNULL(ОстаткиЗадолженностиУСН.СуммаБУ_ТорговыйСбор, 0)) КАК СуммаБУ_ТорговыйСбор
		|ИЗ
		|	ОстаткиЗадолженности КАК ОстаткиЗадолженности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиЗадолженностиУСН КАК ОстаткиЗадолженностиУСН
		|		ПО ОстаткиЗадолженности.Субконто1 = ОстаткиЗадолженностиУСН.Субконто1
		|			И ОстаткиЗадолженности.Субконто2 = ОстаткиЗадолженностиУСН.Субконто2
		|			И ОстаткиЗадолженности.Субконто3 = ОстаткиЗадолженностиУСН.Субконто3
		|			И ОстаткиЗадолженности.Подразделение = ОстаткиЗадолженностиУСН.Подразделение
		|
		|СГРУППИРОВАТЬ ПО
		|	ОстаткиЗадолженности.Счет,
		|	ОстаткиЗадолженности.Валюта,
		|	ОстаткиЗадолженности.Субконто1,
		|	ОстаткиЗадолженности.Субконто2,
		|	ОстаткиЗадолженности.Субконто3,
		|	ОстаткиЗадолженности.Подразделение";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СчетРасчетов КАК СчетРасчетов,
		|	ВложенныйЗапрос.Контрагент КАК Контрагент,
		|	ВложенныйЗапрос.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВложенныйЗапрос.ДокументРасчетов КАК ДокументРасчетов,
		|	ВложенныйЗапрос.Валюта КАК Валюта,
		|	ВложенныйЗапрос.Подразделение КАК Подразделение,
		|	ВложенныйЗапрос.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ВложенныйЗапрос.СуммаВзаиморасчетов КАК ОстатокВзаиморасчетов,
		|	ВложенныйЗапрос.СуммаБУ КАК СуммаБУ,
		|	ВложенныйЗапрос.СуммаНУ КАК СуммаНУ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Остатки.Счет КАК СчетРасчетов,
		|		Остатки.Субконто1 КАК Контрагент,
		|		Остатки.Субконто2 КАК ДоговорКонтрагента,
		|		Остатки.Субконто3 КАК ДокументРасчетов,
		|		ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|		ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК Подразделение,
		|		ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ КАК СуммаВзаиморасчетов,
		|		Остатки.СуммаОстаток * &Множитель КАК СуммаБУ,
		|		ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &Множитель КАК СуммаНУ
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&МоментВремениОстатков,
		|				Счет В (&СчетаРасчетовПоДокументам),
		|				&ВидыСубконтоРасчетов,
		|				Организация = &Организация
		|					И Субконто1 В (&Контрагенты)
		|					И Субконто2 В (&Договоры)) КАК Остатки
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА Остатки.Счет.Валютный
		|					ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|				ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|			КОНЕЦ > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Остатки.Счет,
		|		Остатки.Субконто1,
		|		Остатки.Субконто2,
		|		НЕОПРЕДЕЛЕНО,
		|		ЕСТЬNULL(Остатки.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)),
		|		ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение),
		|		ВЫБОР
		|			КОГДА Остатки.Счет.Валютный
		|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|			ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|		КОНЕЦ,
		|		Остатки.СуммаОстаток * &Множитель,
		|		ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &Множитель
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&МоментВремениОстатков,
		|				Счет В (&СчетаКонтрагентыДоговоры),
		|				&ВидыСубконтоКонтрагентыДоговоры,
		|				Организация = &Организация
		|					И Субконто1 В (&Контрагенты)
		|					И Субконто2 В (&Договоры)) КАК Остатки
		|	ГДЕ
		|		ВЫБОР
		|				КОГДА Остатки.Счет.Валютный
		|					ТОГДА Остатки.ВалютнаяСуммаОстаток * &Множитель
		|				ИНАЧЕ Остатки.СуммаОстаток * &Множитель
		|			КОНЕЦ > 0) КАК ВложенныйЗапрос";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьСтрокиПогашенияЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, НераспределеннаяСуммаБУ, КратностьВзаиморасчетов, ОстаткиЗадолженности, СтрокаПлатежа, Реквизиты, Отказ)
	
	Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыВВалюте           = СтрокаПлатежа.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	РасчетыВУсловныхЕдиницах = СтрокаПлатежа.РасчетыВУсловныхЕдиницах;
	Регистратор              = Реквизиты.Регистратор;
	
	ОстаткиЗадолженностиСОтбором = ОстаткиЗадолженности.СкопироватьКолонки();
	Отбор = Новый Структура("Контрагент, ДоговорКонтрагента");
	Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		Отбор.Вставить("ДокументРасчетов");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаПлатежа);
	МассивСтрокОтбор = ОстаткиЗадолженности.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из МассивСтрокОтбор Цикл
		Если СтрокаТаблицы.СчетРасчетов = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ 
		 ИЛИ СтрокаТаблицы.СчетРасчетов = СтрокаПлатежа.СчетРасчетов Тогда
			СтрокаСОтбором = ОстаткиЗадолженностиСОтбором.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСОтбором, СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоДокументамРасчетов(СтрокаПлатежа.СчетРасчетов) Тогда
		ОстаткиЗадолженностиСОтбором.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	Иначе
		ОстаткиЗадолженностиСОтбором.Сортировать("НомерСтроки");
	КонецЕсли;
	
	// С 01.01.2015 в налоговом учете упразднены "Суммовые разницы" для активов и обязательств, выраженных в
	// иностранной валюте, оплата по которым предусмотренна в рублях (у.е.) и принятых к учету после 01.01.2015.
	// Для этих объектов учета с 01.01.2015 действует порядок переоценки, аналогичный порядку переоценки активов и обязательств,
	// выраженных в иностранной валюте и оплата которых предусмотрена также в иностранной валюте.
	// Для активов и обязательств, принятых к учету до 01.01.2015 действует старый порядок.
	
	ДатаОтменыСуммовыхРазниц = '20150101';
	Для каждого СтрокаОстатка Из ОстаткиЗадолженностиСОтбором Цикл
		
		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;
	
		ПогашеннаяСумма = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);
		Если ПогашеннаяСумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоПолноеПогашение = СтрокаОстатка.СуммаВзаиморасчетов = ПогашеннаяСумма;
	
		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаПлатежа);
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка);
		
		КурсВзаиморасчетов = Окр(?(НераспределеннаяСумма = 0, 0, (НераспределеннаяСуммаБУ / НераспределеннаяСумма) * КратностьВзаиморасчетов), 4);
		
		КоэффициентРуб = ?(НЕ РасчетыВВалюте, 1,
			?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, СтрокаПлатежа.СуммаРуб / СтрокаПлатежа.СуммаВзаиморасчетов));
		
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ПогашеннаяСумма;
		СтрокаВзаиморасчетов.СуммаРуб            = Окр(ПогашеннаяСумма * КоэффициентРуб, 2);
		
		Если РасчетыВВалюте Тогда
			
			// Погашение долга в валюте производится в БУ и НУ по курсу тек.документа
			// Погашение долга в условных единицах производятся в БУ по курсу тек.документа, в НУ формируется суммовая разница,
			// 	для ПБУ 18 образуется постоянная разница, равная суммовой.
			
			// Возвраты в валюте производятся в БУ по курсу остатка, в НУ по курсу тек.документа, для ПБУ 18 образуется постоянная разница.
			// Возвраты в условных единицах производятся в БУ и НУ только по курсу остатка,
			// 	если курс остатка БУ отличается от курса тек.документа - сообщается об ошибке и документ возврата не проводится.
			
			Если РасчетыВУсловныхЕдиницах И (ПогашеннаяСумма = НераспределеннаяСумма) Тогда
				СуммаПоКурсуДокумента = НераспределеннаяСуммаБУ;
				// Погашаемая сумма (в условных единицах) в этом случае - расчетная, без округления до 2 знаков
				// Это помогает обойти ошибки округления при расчете сумм по курсу остатка
				ПогашаемаяСуммаВзаиморасчетов = НераспределеннаяСуммаБУ * КратностьВзаиморасчетов / КурсВзаиморасчетов;
			Иначе
				СуммаПоКурсуДокумента = Окр(ПогашеннаяСумма * КурсВзаиморасчетов / КратностьВзаиморасчетов, 2);
				ПогашаемаяСуммаВзаиморасчетов = ПогашеннаяСумма;
			КонецЕсли;
			
			КурсОстаткаБУ = Окр(?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, (СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов) * КратностьВзаиморасчетов), 4);
			КурсОстаткаНУ = Окр(?(СтрокаОстатка.СуммаВзаиморасчетов = 0, 0, (СтрокаОстатка.СуммаНУ / СтрокаОстатка.СуммаВзаиморасчетов) * КратностьВзаиморасчетов), 4);
			
			СуммаБУпоКурсуОстатка = Окр(?(КратностьВзаиморасчетов = 0, 0, ПогашеннаяСумма * КурсОстаткаБУ / КратностьВзаиморасчетов), 2);
			СуммаНУпоКурсуОстатка = Окр(?(КратностьВзаиморасчетов = 0, 0, ПогашеннаяСумма * КурсОстаткаНУ / КратностьВзаиморасчетов), 2);
			
			Если Реквизиты.ЭтоВозврат Тогда
				
				// Возвраты предоплаты в валюте и в условных единицах производятся в БУ и НУ по курсу предоплаты
				СтрокаВзаиморасчетов.СуммаБУ = СуммаБУпоКурсуОстатка;
				СтрокаВзаиморасчетов.СуммаНУ = СуммаБУпоКурсуОстатка;
				
				Если РасчетыВУсловныхЕдиницах Тогда
					
					Если ЭтоПолноеПогашение Тогда
						КурсОстаткаОтличаетсяОтКурсаДокумента = КурсОстаткаБУ <> КурсВзаиморасчетов;
					Иначе
						КурсОстаткаОтличаетсяОтКурсаДокумента = СуммаПоКурсуДокумента <> СуммаБУпоКурсуОстатка;
					КонецЕсли;
					
					Если КурсОстаткаОтличаетсяОтКурсаДокумента Тогда
						ТекстОшибки = НСтр("ru = 'Рублевая сумма возврата по договору в условных единицах отличается от суммы по курсу остатка долга.
							|	Договор: ""%1"", документ расчетов: ""%2"":
							|	Сумма возврата: %3 %4, по курсу остатка: %5 руб.
							|	Возврат по документу: %6 руб.
							|	Возвраты по договору в условных единицах должны производиться по курсу остатка долга!'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстОшибки,
							СтрокаОстатка.ДоговорКонтрагента,
							СтрокаОстатка.ДокументРасчетов,
							ПогашеннаяСумма,
							СтрокаПлатежа.ВалютаВзаиморасчетов,
							СуммаБУпоКурсуОстатка,
							СуммаПоКурсуДокумента);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Регистратор, , , Отказ);
					КонецЕсли;
					
					//Скорректируем суммы в проводках из-за ошибок округления
					//Если мы зачитываем весь остаток по строке, то и суммы НУ в проводку должны пойти все,
					//т.к. этот счет и договор вообще не переоценивается по НУ, 
					//а вот в БУ должны пойти именно те суммы, которые указаны в документа
					Если ЭтоПолноеПогашение Тогда
						
						СтрокаВзаиморасчетов.СуммаБУ = СуммаПоКурсуДокумента;
						СтрокаВзаиморасчетов.СуммаНУ = СтрокаОстатка.СуммаНУ;
						
					КонецЕсли;
					
				Иначе
					// При расчетах в валюте дополнительно передается отдельная сумма
					// для "обратной" переоценки в НУ возвращаемой суммы до курса поступления предоплаты
					СтрокаВзаиморасчетов.Разница = СуммаПоКурсуДокумента - СуммаБУпоКурсуОстатка;
					
				КонецЕсли;
				
			Иначе
				
				// Погашение долга в валюте и в условных единицах производятся в БУ и НУ по курсу тек.документа.
				СтрокаВзаиморасчетов.СуммаБУ = СуммаПоКурсуДокумента;
				// При расчетах в у.е дополнительно передается отдельная сумма для формирования в НУ суммовой разницы
				Если РасчетыВУсловныхЕдиницах и (СтрокаОстатка.ДатаДокументаРасчетов < ДатаОтменыСуммовыхРазниц) Тогда
					СтрокаВзаиморасчетов.СуммаНУ = СуммаНУпоКурсуОстатка;
					СтрокаВзаиморасчетов.Разница = СуммаПоКурсуДокумента - СуммаНУпоКурсуОстатка;
				Иначе
					СтрокаВзаиморасчетов.СуммаНУ = СуммаПоКурсуДокумента;
				КонецЕсли;
				Если СтрокаОстатка.СчетРасчетов = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ Тогда
					СтрокаВзаиморасчетов.СчетАвансов_ОтгрузкаВУЕ = СтрокаПлатежа.СчетАвансов;
					Если ЭтоПолноеПогашение Тогда
						СтрокаВзаиморасчетов.СуммаБУ_ОтгрузкаВУЕ = СтрокаОстатка.СуммаБУ;
					Иначе
						СтрокаВзаиморасчетов.СуммаБУ_ОтгрузкаВУЕ = СуммаБУпоКурсуОстатка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Расчеты в рублях
			СтрокаВзаиморасчетов.СуммаБУ = ПогашеннаяСумма;
			СтрокаВзаиморасчетов.СуммаНУ = ПогашеннаяСумма;
		КонецЕсли;
		
		Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			// Ограничим сумму по счетам УСн, чтобы не получилось, что по счетам УСН
			// сумма прошла больше, чем по балансовому счету.
			
			ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке = СтрокаОстатка.СуммаВзаиморасчетовЕНВД
				+ СтрокаОстатка.СуммаВзаиморасчетовПатент
				+ СтрокаОстатка.СуммаВзаиморасчетовКомитента
				+ СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор;
				
			Если ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке > 0 Тогда
				
				МаксимальнаяСуммаВзаиморасчетовДляУСН = Мин(ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке, СтрокаОстатка.СуммаВзаиморасчетов);
				
				СуммаВзаиморасчетовЕНВД      =
				МаксимальнаяСуммаВзаиморасчетовДляУСН * СтрокаОстатка.СуммаВзаиморасчетовЕНВД / ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке;
				СуммаВзаиморасчетовПатент    =
				МаксимальнаяСуммаВзаиморасчетовДляУСН * СтрокаОстатка.СуммаВзаиморасчетовПатент / ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке;
				СуммаВзаиморасчетовКомитента =
				МаксимальнаяСуммаВзаиморасчетовДляУСН * СтрокаОстатка.СуммаВзаиморасчетовКомитента / ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке;
				СуммаВзаиморасчетовТорговыйСбор    =
				МаксимальнаяСуммаВзаиморасчетовДляУСН * СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор / ВсегоСуммаВзаиморасчетовПоСчетамУСНПоСтроке;
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = Окр(СуммаВзаиморасчетовЕНВД
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент = Окр(СуммаВзаиморасчетовПатент
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Окр(СуммаВзаиморасчетовКомитента
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор = Окр(СуммаВзаиморасчетовТорговыйСбор
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
				
				Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовЕНВД <> 0) Тогда
					СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = Окр(СтрокаОстатка.СуммаБУ_ЕНВД
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД / СтрокаОстатка.СуммаВзаиморасчетовЕНВД, 2);
				Иначе
					СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				КонецЕсли;
				
				Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовПатент <> 0) Тогда
					СтрокаВзаиморасчетов.СуммаБУ_Патент = Окр(СтрокаОстатка.СуммаБУ_Патент
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент / СтрокаОстатка.СуммаВзаиморасчетовПатент, 2);
				Иначе
					СтрокаВзаиморасчетов.СуммаБУ_Патент = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
				КонецЕсли;
				
				Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовКомитента <> 0) Тогда
					СтрокаВзаиморасчетов.СуммаБУ_Комитента = Окр(СтрокаОстатка.СуммаБУ_Комитента
						* СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента / СтрокаОстатка.СуммаВзаиморасчетовКомитента, 2);
				Иначе
					СтрокаВзаиморасчетов.СуммаБУ_Комитента = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				КонецЕсли;
				
				Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор <> 0) Тогда
					СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор = Окр(СтрокаОстатка.СуммаБУ_ТорговыйСбор
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор / СтрокаОстатка.СуммаВзаиморасчетовТорговыйСбор, 2);
				Иначе
					СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НераспределеннаяСумма   = НераспределеннаяСумма   - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		НераспределеннаяСуммаБУ = НераспределеннаяСуммаБУ - СтрокаВзаиморасчетов.СуммаБУ;
		
		// Остатки уменьшаем в строке основной таблицы остатков
		СтрокаОстаткаБезОтбора = ОстаткиЗадолженности.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки");
		
		СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов
			- СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		
		СтрокаОстаткаБезОтбора.СуммаБУ = СтрокаОстаткаБезОтбора.СуммаБУ - СтрокаВзаиморасчетов.СуммаБУ;
		СтрокаОстаткаБезОтбора.СуммаНУ = СтрокаОстаткаБезОтбора.СуммаНУ - СтрокаВзаиморасчетов.СуммаНУ;
		
		Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовЕНВД      = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовЕНВД
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовПатент    = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовПатент
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовКомитента = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовКомитента
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовТорговыйСбор = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовТорговыйСбор
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
				
			СтрокаОстаткаБезОтбора.СуммаБУ_ЕНВД      = СтрокаОстаткаБезОтбора.СуммаБУ_ЕНВД
				- СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;
			СтрокаОстаткаБезОтбора.СуммаБУ_Патент    = СтрокаОстаткаБезОтбора.СуммаБУ_Патент
				- СтрокаВзаиморасчетов.СуммаБУ_Патент;
			СтрокаОстаткаБезОтбора.СуммаБУ_Комитента = СтрокаОстаткаБезОтбора.СуммаБУ_Комитента
				- СтрокаВзаиморасчетов.СуммаБУ_Комитента;
			СтрокаОстаткаБезОтбора.СуммаБУ_ТорговыйСбор    = СтрокаОстаткаБезОтбора.СуммаБУ_ТорговыйСбор
				- СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуАванса(ТаблицаВзаиморасчетов, НераспределеннаяСумма, НераспределеннаяСуммаБУ, СтрокаДокумента, Реквизиты, ЭтоОтложенноеПроведение)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	РасчетыВВалюте = СтрокаДокумента.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();

	Если ЭтоОтложенноеПроведение Тогда
		// В сам момент отложенного проведения формируем уже окончательные проводки.
		ОпределятьСостояниеРасчетов = Истина;
	Иначе
		Если ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
			ОпределятьСостояниеРасчетов = РасчетыВВалюте // в валюте или у.е.
				ИЛИ ЭтоВидДоговораРасчетыПоКомиссии(СтрокаДокумента.ВидДоговора);
		Иначе
			ОпределятьСостояниеРасчетов = Истина;
		КонецЕсли;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента);

	Если ОпределятьСостояниеРасчетов Тогда
		СтрокаВзаиморасчетов.СчетРасчетов          = СтрокаДокумента.СчетАвансов;
		СтрокаВзаиморасчетов.ДокументРасчетов      = Реквизиты.Регистратор;
		СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;
	Иначе
		// Если используется отложенное проведение, то в момент оперативного проведения
		// документа относим всегда на счет расчетов, если он задан, и пустой документ расчетов.
		СчетРасчетов = ?(ЗначениеЗаполнено(СтрокаДокумента.СчетРасчетов), СтрокаДокумента.СчетРасчетов, СтрокаДокумента.СчетАвансов);
		СтрокаВзаиморасчетов.СчетРасчетов          = СчетРасчетов;
		СтрокаВзаиморасчетов.ДокументРасчетов      = Неопределено;
		СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;
	КонецЕсли;

	// Для нераспределенных сумм подразделение определяется по кор.счету,
	// если оно не было явно задано в колонке "Подразделение" таблицы документа
	// (как, например, для операции "Поступление от продаж по платежным картам")
	Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Подразделение) Тогда
		СтрокаВзаиморасчетов.Подразделение = СтрокаДокумента.КорПодразделение;
	КонецЕсли;
	
	КоэффициентРуб = ?(НЕ СтрокаДокумента.РасчетыВВалюте, 1,
		?(СтрокаДокумента.СуммаВзаиморасчетов = 0, 0, СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов));
	СтрокаВзаиморасчетов.СуммаРуб              = Окр(НераспределеннаяСумма * КоэффициентРуб, 2);
	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;
	
	СтрокаВзаиморасчетов.СуммаБУ = НераспределеннаяСуммаБУ;
	СтрокаВзаиморасчетов.СуммаНУ = НераспределеннаяСуммаБУ;
	
	Если (Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент) 
		И ЗначениеЗаполнено(СтрокаДокумента.ПорядокОтраженияАванса) Тогда
		Если СтрокаДокумента.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД Тогда
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = СтрокаВзаиморасчетов.СуммаБУ;
		ИначеЕсли СтрокаДокумента.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходКомитента Тогда
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			СтрокаВзаиморасчетов.СуммаБУ_Комитента = СтрокаВзаиморасчетов.СуммаБУ;
		ИначеЕсли СтрокаДокумента.ПорядокОтраженияАванса = Перечисления.ПорядокОтраженияАвансов.ДоходТорговыйСбор Тогда
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор = СтрокаВзаиморасчетов.СуммаБУ;
		ИначеЕсли ТипЗнч(СтрокаДокумента.ПорядокОтраженияАванса) = Тип("СправочникСсылка.Патенты") Тогда
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			СтрокаВзаиморасчетов.СуммаБУ_Патент = СтрокаВзаиморасчетов.СуммаБУ;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формируется проводка по специальным счетам УСН
Процедура СформироватьПроводкуПоСчетамУСНЗачетОбязательствВСчетВозврата(СтрокаВзаиморасчетов, Реквизиты, Движения, Отказ)

	Если Не Реквизиты.УчитыватьЗадолженностьУСН
	   И Не Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		Возврат;
	КонецЕсли;
		
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;
	
	Проводка.СчетДт = СтрокаВзаиморасчетов.СчетРасчетов;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
	
	СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	Если СвойстваСчетаУСН.Валютный Тогда
		Проводка.ВалютаДт        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаДт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = СтрокаВзаиморасчетов.Подразделение;
	КонецЕсли;
	
	Проводка.СчетКт = СтрокаВзаиморасчетов.КорСчет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаВзаиморасчетов.КорСубконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаВзаиморасчетов.КорСубконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.КорСубконто3);
	
	СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	Если СвойстваСчетаУСН.Валютный Тогда
		Проводка.ВалютаКт        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаКт = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = СтрокаВзаиморасчетов.КорПодразделение;
	КонецЕсли;
	
	Проводка.Сумма = СтрокаВзаиморасчетов.СуммаРуб;

КонецПроцедуры

// Формируется проводка по специальным счетам УСН
Процедура СформироватьПроводкуПоСчетамУСНПогашениеЗадолженности(СтрокаВзаиморасчетов, Реквизиты, ДтКтРасчетов, СвойстваСчетаРасчетов, Движения, Отказ)

	Если Не Реквизиты.УчитыватьЗадолженностьУСН
	   И Не Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
		Возврат;
	КонецЕсли;
		
	// Проводка Дт УСН.01 (УСН.21) - если ДтКтРасчетов = "Дт"
	// или Кт УСН.01 (УСН.21)  - если ДтКтРасчетов = "Кт"
	Если Реквизиты.УчитыватьЗадолженностьУСН
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты по деятельности ЕНВД";
		
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
		Иначе
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
		
		СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУСН.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
		КонецЕсли;
		Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;
		
	КонецЕсли;
	
	// Проводка Дт УСН.02 (УСН.22) - если ДтКтРасчетов = "Дт"
	// или Кт УСН.02 (УСН.22)  - если ДтКтРасчетов = "Кт"
	Если Реквизиты.УчитыватьЗадолженностьУСН
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты за товары и услуги комитента";
		
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
		Иначе
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
		
		СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУСН.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
		КонецЕсли;
		Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Комитента;
		
	КонецЕсли;
	
	// Проводка Дт УСН.03 (УСН.23) - если ДтКтРасчетов = "Дт"
	// или Кт УСН.03 (УСН.23)  - если ДтКтРасчетов = "Кт"
	Если Реквизиты.УчитыватьЗадолженностьУСНПатент 
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = ?(Реквизиты.Период < УчетУСН.ДатаНачалаДействияПатентнойСистемы(),
		НСтр("ru = 'Расчеты по деятельности УСН на патенте'"),
		НСтр("ru = 'Расчеты по деятельности на патенте'"));
		
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
		Иначе
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
		
		СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУСН.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
		КонецЕсли;
		Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Патент;
		
	КонецЕсли;
	
	// Проводка Дт УСН.04 (УСН.24) - если ДтКтРасчетов = "Дт"
	// или Кт УСН.04 (УСН.24)  - если ДтКтРасчетов = "Кт"
	Если Реквизиты.УчитыватьЗадолженностьУСН
		И СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 Тогда
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = "Расчеты по деятельности, облагаемой торговым сбором";
		
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
		Иначе
			Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
		
		СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУСН.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
		КонецЕсли;
		Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор;
		
	КонецЕсли;

КонецПроцедуры

// БЕЗНАЛИЧНЫЕ РАСЧЕТЫ ДЛЯ УСН И ИП - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицыПрочихРасчетовОплатаПокупателя(ТаблицаВзаиморасчетов, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Взаиморасчеты
	
	СписокОбязательныхКолонок = ""
		+ "СчетРасчетов,"          // <ПланСчетовСсылка.Хозрасчетный>
		+ "Контрагент,"            // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"    // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументРасчетов,"      // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
		+ "ДатаДокументаРасчетов," // <Дата>
		+ "СуммаБУ";               // <Число,15,2> - сумма оплаты в рублях
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));
		
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
		+ "Период,"      // <Дата> - период движений - дата документа
		+ "Регистратор," // <ДокументСсылка.*> - документ-регистратор движений
		+ "Организация," // <СправочникСсылка.Организации>
		+ "ВидОперации"; // <ПеречислениеСсылка.*> - вид операции документа
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// РОЗНИЧНАЯ ТОРГОВЛЯ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка параметров для процедуры СформироватьДвиженияПоступленияОтРозничныхПокупателей
//
// Параметры
//  ТаблицаБезналичныеОплаты - <ТаблицаЗначений> - данные документа по полученным от рознчного покупателя безналичным оплатам,
//                                            по которым определяется, какие движения будут сформированы.
//  ТаблицаНаличнаяОплата -    <ТаблицаЗначений> - данные документа по полученным от рознчного покупателя наличным средствам
//
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//
// Возвращаемое значение:
//   <Структура> - структура из 3 таблиц: БезналичныеОплаты, НаличнаяОплата, Реквизиты
//
Функция ПодготовитьПараметрыПоступленияОтРозничныхПокупателей(ТаблицаБезналичныеОплаты, ТаблицаНаличнаяОплата, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                          // <Дата> - период движений - дата документа
	+ "Регистратор,"                     // <ДокументСсылка>
	+ "ВидОперации,"                     // <ПеречислениеСсылка> - вид операции документа; Неопределено, если отсутствует
	+ "Организация,"                     // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"        // <СправочникСсылка.ПодразделенияОрганизации>
	+ "УчитыватьЗадолженностьУСН,"       // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "Склад";                           // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.БезналичныеОплаты

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"                // <ДокументСсылка>
	+ "ВидДоговора,"                     //
	+ "ТипОплаты,"                       // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - флаг расчетов в условных единицах
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов по авансам
	+ "Подразделение,"                   // <Ссылка на справочник подразделений> - подразделение по счету авансов
	+ "ПодразделениеРасчетов,"           // <Ссылка на справочник подразделений> - подразделение по счету расчетов
	+ "РасчетыВВалюте,"                  // <Булево>  - флаг расчетов в валюте (в т.ч. и в условных единицах)
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаРубПоКурсуАванса,"           // <Число,15,2> - сумма в рублях по курсу на дату аванса
	+ "СуммаРуб,"                        // <Число,15,2> - сумма в рублях (для валютных расчетов - по курсу на дату документа)
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма в валюте расчетов по деятельности ЕНВД
	+ "СуммаРуб_ЕНВД,"                   // <Число,15,2> - сумма в рублях по деятельности ЕНВД
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте расчетов по деятельности на патенте
	+ "СуммаРуб_Патент,"                 // <Число,15,2> - сумма в рублях по деятельности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте расчетов по деятельности на торговом сборе
	+ "СуммаРуб_ТорговыйСбор,"           // <Число,15,2> - сумма в рублях по деятельности на торговом сборе
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте расчетов при реализации товаров и услуг комитентов
	+ "СуммаРуб_Комитента";              // <Число,15,2> - сумма в рублях при реализации товаров и услуг комитентов

	Параметры.Вставить("БезналичныеОплаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаБезналичныеОплаты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.НаличнаяОплата:
	СписокОбязательныхКолонок = ""
	+ "Склад,"
	+ "СчетУчетаРасчетовСРозничнымПокупателем,"
	+ "СчетУчетаДенежныхСредств,"
	+ "СтатьяДвиженияДенежныхСредств,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб";
	;
	
	Параметры.Вставить("НаличнаяОплата", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаНаличнаяОплата, СписокОбязательныхКолонок));
		
	Возврат Параметры;

КонецФункции

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовЗачетАвансов
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаОплат      - <ТаблицаЗначений> - данные о полученной выручке по видам оплаты, по которым определяются остатки полученных ранее авансов.
//                      Создается в модуле менеджера документ
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   <Структура>   - структура из 2 таблиц: ТаблицаДокумента, Реквизиты
//
Функция ПодготовитьПараметрыТаблицыВзаиморасчетовБезналичнаяРозничнаяВыручка(ТаблицаОплат, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаДокумента

	СписокОбязательныхКолонок = ""
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент (эквайер, эмитент, ...), аванс по которому зачитывается
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор, аванс по которому зачитывается
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВидДоговора,"                     // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - вид договора контрагента
	+ "ТипОплаты,"                       // <ПеречислениеСсылка.ТипыОплат> - тип оплаты (плат. карта, кредит, сертификат и т.п.)
	+ "СпособЗачетаАвансов,"             // <ПеречислениеСсылка.СпособыЗачетаАвансов> - порядок зачета авансов по строке платежа; если "автоматически" - будет произведен анализ остатков авансов
	+ "РасчетыВУсловныхЕдиницах,"        // <Булево> - Истина для договора с расчетами в условных единицах
	+ "УчетАгентскогоНДС,"               // <Булево> - Истина договор предусматривает исполнение обязанностей налогового агента по НДС
	+ "РасчетыВВалюте,"                  // <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ-регистратор
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма поступления или реализации в валюте взаиморасчетов
	+ "СуммаРуб,"                        // <Число,15,2> - сумма поступления или реализации в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг комитентов по организации на УСН
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деяетльности на патенте
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров по деяетльности, облагаемой торговым сбором
	+ "СуммаВзаиморасчетовЕНВД";         // <Число,15,2> - сумма в валюте взаиморасчетов реализованных товаров и услуг по деятельности ЕНВД по организации на УСН

	Параметры.Вставить("ТаблицаОплат", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОплат, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "СпособЗачетаАвансов,"       // <ПеречислениеСсылка.СпособыЗачетаАвансов>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при зачете авансов, выданных поставщикам
	                               //          - "Выбытие" при зачете авансов, полученных от покупателей
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате материальных ценностей (от покупателя или поставщику)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаВзаиморасчетовБезналичнаяРозничнаяВыручка() Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("Подразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("ПодразделениеРасчетов", БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетАвансов",           Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("СчетАвансов_ОтгрузкаВУЕ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРубПоКурсуАванса", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ПустаяТаблица.Колонки.Добавить("ТипОплаты",             Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплат"));
	
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_ЕНВД",                   ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_Патент",                 ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_Комитента",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб_ТорговыйСбор",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ОтгрузкаВУЕ",             ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ПустаяТаблица.Колонки.Добавить("ВидДоговора");
	ПустаяТаблица.Колонки.Добавить("РасчетыВВалюте",           Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("УчетАгентскогоНДС",        Новый ОписаниеТипов("Булево"));

	Возврат ПустаяТаблица;

КонецФункции

Функция СодержаниеПроводкиБезналичнаяРозничнаяОплата(СтрокаОплаты, Реквизиты)

	Содержание = "";
	
	ТекстЗачетАванса = ?(СтрокаОплаты.ДокументРасчетов = Реквизиты.Регистратор,
		"",
		НСтр("ru = ' (зачтен аванс)'"));
	
	Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПлатежнаяКарта Тогда
		Содержание = НСтр("ru = 'Реализация в розницу: учтена оплата платежной картой'");
	ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.БанковскийКредит Тогда
		Содержание = НСтр("ru = 'Реализация в розницу: учтена оплата банковским кредитом'");
	ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСобственный Тогда
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Реализация в розницу: учтена оплата собственным подарочным сертификатом%1'"),
			ТекстЗачетАванса);
	ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплат.ПодарочныйСертификатСторонний Тогда
		Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Реализация в розницу: учтена оплата подарочным сертификатом стороннего эмитента%1'"),
			ТекстЗачетАванса);
	Иначе
		Содержание = НСтр("ru = 'Учтена безналичная оплата'");
	КонецЕсли;

	Возврат Содержание;

КонецФункции

// ВЗАИМОЗАЧЕТ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицыВзаимозачета(ТаблицаДебиторскаяЗадолженность, ТаблицаДебиторскаяЗадолженностьВозвратАванса,
	ТаблицаКредиторскаяЗадолженность, ТаблицаКредиторскаяЗадолженностьВозвратАванса, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента";           // <СправочникСсылка.Валюты>

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                    // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ДатаДокументаРасчетов,"            // <Дата> - дата документа расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                 // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "ОстатокВзаиморасчетов,"            // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                          // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                          // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"          // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаВзаиморасчетовПатент,"        // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                     // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаБУ_Патент,"                   // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовКомитента,"     // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"                // <Число,15,2> - сумма за товары и услуги комитентов в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор,"  // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"             // <Число,15,2> - сумма за товары и услуги комитента в рублях
	+ "РасчетыВУсловныхЕдиницах,"         // <Булево> - признак ведения расчетов в условных единицах
	+ "Разница,"                          // <Число,15,2> - суммовая разница при расчетах в условных единицах
	+ "СтавкаНДС,"                        // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "Содержание";                       // <Строка,150>

	Параметры.Вставить("ТаблицаДебиторскаяЗадолженность", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДебиторскаяЗадолженность, СписокОбязательныхКолонок));

	Параметры.Вставить("ТаблицаДебиторскаяЗадолженностьВозвратАванса", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаДебиторскаяЗадолженностьВозвратАванса, СписокОбязательныхКолонок));

	Параметры.Вставить("ТаблицаКредиторскаяЗадолженность", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКредиторскаяЗадолженность, СписокОбязательныхКолонок));

	Параметры.Вставить("ТаблицаКредиторскаяЗадолженностьВозвратАванса", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаКредиторскаяЗадолженностьВозвратАванса, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ЗаполнитьПараметрыВзаимозачета(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности, СтрокаКредиторскойЗадолженности, Реквизиты)

	РасчетыВВалюте = Реквизиты.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить();

	СуммаСоответствия = ?(РасчетыВВалюте,
		Мин(СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов, СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов),
		Мин(СтрокаДебиторскойЗадолженности.СуммаБУ, СтрокаКредиторскойЗадолженности.СуммаБУ));

	Если СуммаСоответствия = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтрокаВзаимозачета, СтрокаДебиторскойЗадолженности);

	Если НЕ ЗначениеЗаполнено(СтрокаВзаимозачета.КорСчет) Тогда
		СтрокаВзаимозачета.КорСчет                 = СтрокаКредиторскойЗадолженности.СчетРасчетов;
		СтрокаВзаимозачета.КорПодразделение        = СтрокаКредиторскойЗадолженности.Подразделение;
		СтрокаВзаимозачета.КорСубконто1            = СтрокаКредиторскойЗадолженности.Контрагент;
		СтрокаВзаимозачета.КорСубконто2            = СтрокаКредиторскойЗадолженности.ДоговорКонтрагента;
		СтрокаВзаимозачета.КорСубконто3            = СтрокаКредиторскойЗадолженности.ДокументРасчетов;
		СтрокаВзаимозачета.КорВалютаВзаиморасчетов = СтрокаКредиторскойЗадолженности.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если РасчетыВВалюте Тогда

		СтрокаВзаимозачета.СуммаВзаиморасчетов    = СуммаСоответствия;
		СтрокаВзаимозачета.КорСуммаВзаиморасчетов = СуммаСоответствия;

		Коэффициент = ?(СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0, 0, СуммаСоответствия /
			СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов);
			
		СтрокаВзаимозачета.СуммаБУ    = Окр(СтрокаКредиторскойЗадолженности.СуммаБУ * Коэффициент, 2);
			
		Если СтрокаВзаимозачета.ДатаДокументаРасчетов > '20150101' Тогда
			// Начиная с 01.01.2015 года суммовая разница в налоговом учете не возникает.
			КоэффициентДляСуммыНУ = ?(СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = 0, 0, СуммаСоответствия /
				СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов);
			
			СтрокаВзаимозачета.СуммаНУ = Окр(СтрокаКредиторскойЗадолженности.СуммаНУ * КоэффициентДляСуммыНУ, 2);
			СтрокаВзаимозачета.КорСуммаНУ = Окр(СтрокаКредиторскойЗадолженности.СуммаНУ * Коэффициент, 2);
		Иначе
			КоэффициентДляСуммыНУ = ?(СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = 0, 0, СуммаСоответствия /
				СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов);
			
			СтрокаВзаимозачета.СуммаНУ    = Окр(СтрокаДебиторскойЗадолженности.СуммаНУ  * КоэффициентДляСуммыНУ, 2);
			СтрокаВзаимозачета.КорСуммаНУ = Окр(СтрокаКредиторскойЗадолженности.СуммаНУ * Коэффициент, 2);
			
			СтрокаВзаимозачета.Разница    = СтрокаВзаимозачета.СуммаБУ - СтрокаВзаимозачета.СуммаНУ;
			СтрокаВзаимозачета.КорРазница = СтрокаВзаимозачета.СуммаБУ - СтрокаВзаимозачета.КорСуммаНУ;
		КонецЕсли;
	Иначе

		СтрокаВзаимозачета.СуммаБУ = СуммаСоответствия;
		
		Коэффициент = ?(СтрокаКредиторскойЗадолженности.СуммаБУ = 0, 0, СуммаСоответствия /
			СтрокаКредиторскойЗадолженности.СуммаБУ);
		
		КоэффициентДляСуммыНУ = ?(СтрокаДебиторскойЗадолженности.СуммаБУ = 0, 0, СуммаСоответствия /
			СтрокаДебиторскойЗадолженности.СуммаБУ);
			
			
		СтрокаВзаимозачета.СуммаНУ = Окр(СтрокаДебиторскойЗадолженности.СуммаНУ * КоэффициентДляСуммыНУ, 2);
		СтрокаВзаимозачета.КорСуммаНУ = Окр(СтрокаКредиторскойЗадолженности.СуммаНУ * Коэффициент, 2);
		
		СтрокаВзаимозачета.Разница    = СтрокаВзаимозачета.СуммаБУ - СтрокаВзаимозачета.СуммаНУ;
		СтрокаВзаимозачета.КорРазница = СтрокаВзаимозачета.СуммаБУ - СтрокаВзаимозачета.КорСуммаНУ;
		
		СтрокаВзаимозачета.КорСуммаВзаиморасчетов = Окр(СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов * Коэффициент, 2);
		
		Если Коэффициент = 1 Тогда
			
			КоэффициентДляСуммыВзаиморасчетов = ?(СтрокаДебиторскойЗадолженности.СуммаБУ = 0, 0, СуммаСоответствия /
			СтрокаДебиторскойЗадолженности.СуммаБУ);
			
			СтрокаВзаимозачета.СуммаВзаиморасчетов    = Окр(СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов * КоэффициентДляСуммыВзаиморасчетов, 2);
			
		Иначе
			СтрокаВзаимозачета.СуммаВзаиморасчетов    = СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов;
		КонецЕсли;	
		
	КонецЕсли;

	СтрокаДебиторскойЗадолженности.СуммаБУ = СтрокаДебиторскойЗадолженности.СуммаБУ -
		СтрокаВзаимозачета.СуммаБУ;
	СтрокаДебиторскойЗадолженности.СуммаНУ = СтрокаДебиторскойЗадолженности.СуммаНУ -
		СтрокаВзаимозачета.СуммаНУ;
	СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаДебиторскойЗадолженности.СуммаВзаиморасчетов -
		СтрокаВзаимозачета.СуммаВзаиморасчетов;

	СтрокаКредиторскойЗадолженности.СуммаБУ = СтрокаКредиторскойЗадолженности.СуммаБУ -
		СтрокаВзаимозачета.СуммаБУ;
	СтрокаКредиторскойЗадолженности.СуммаНУ = СтрокаКредиторскойЗадолженности.СуммаНУ -
		СтрокаВзаимозачета.КорСуммаНУ;
	СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов = СтрокаКредиторскойЗадолженности.СуммаВзаиморасчетов -
		СтрокаВзаимозачета.КорСуммаВзаиморасчетов;

КонецПроцедуры

// ПЕРЕНОС ЗАДОЛЖЕННОСТИ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицыВзаиморасчетовПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                           // <Дата> - период движений - дата документа
	+ "Регистратор,"                      // <ДокументСсылка>
	+ "Организация,"                      // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"                  // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН,"        // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент,"  // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";              // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                                      //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                    // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВалютаВзаиморасчетовСПолучателем," // <СправочникСсылка.Валюты>
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                 // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "ОстатокВзаиморасчетов,"
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                          // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                          // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"          // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                     // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"        // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                   // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовКомитента,"     // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"
	+ "СуммаВзаиморасчетовТорговыйСбор,"  // <Число,15,2> - сумма по деятельности облагаемой торговым сбором в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"             // <Число,15,2> - сумма по деятельности облагаемой торговым сбором в рублях
	+ "РасчетыВУсловныхЕдиницах,"         // <Булево> - признак ведения расчетов в условных единицах
	+ "Разница,"                          // <Число,15,2> - суммовая разница при расчетах в условных единицах
	+ "СтавкаНДС,"                        // <ПеречислениеСсылка.СтавкиНДС> - ставка НДС
	+ "Содержание";                       // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПереносЗадолженности(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                    // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                       // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"               // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                 // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"             // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "ВалютаВзаиморасчетовСПолучателем," // <СправочникСсылка.Валюты>
	+ "СчетРасчетов,"                     // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                          // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                     // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                 // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "КорВалютаВзаиморасчетов,"          // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "КорСуммаВзаиморасчетов,"           // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаВзаиморасчетов,"              // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                          // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                          // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "СуммаВзаиморасчетовЕНВД,"          // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                     // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"        // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                   // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовКомитента,"     // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"                // <Число,15,2> - сумма за товары и услуги комитентов в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор,"  // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"             // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "Содержание";                       // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаВзаиморасчетовПереносЗадолженности(УчитыватьЗадолженностьУСН)

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетовСПолучателем",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("Подразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",    БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",              ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаНУ",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ПустаяТаблица.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("Разница",                  ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС",                Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ПустаяТаблица.Колонки.Добавить("КорСчет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("КорПодразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконто" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;
	ПустаяТаблица.Колонки.Добавить("КорВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("КорСуммаВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));

	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ЕНВД",                    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Патент",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Комитента",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ТорговыйСбор",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("Содержание",                      ОбщегоНазначения.ОписаниеТипаСтрока(150));

	Возврат ПустаяТаблица;

КонецФункции

// СПИСАНИЕ ЗАДОЛЖЕННОСТИ - ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПодготовитьПараметрыТаблицыВзаиморасчетовСписаниеЗадолженности(РасшифровкаПлатежа, ТаблицаРеквизиты) Экспорт

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.РасшифровкаПлатежа

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                   // <Число, 6,0> - номер строки документа
	+ "Подразделение,"                 // <Ссылка на справочник подразделений>
	+ "Контрагент,"                    // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"            // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ВидДоговора,"            	   // <Перечисление.ВидыДоговоровКонтрагентов> - вид договора, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"          // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "РасчетыВУсловныхЕдиницах,"      // <Булево> - Истина для договора с расчетами в условных единицах
	+ "РасчетыВВалюте,"                // <Булево> - Истина для договора с расчетами в любой валюте, кроме рублей (в т.ч и в условных единицах)
	+ "СпособПогашенияЗадолженности,"  // <ПеречислениеСсылка.СпособыПогашенияЗадолженности>
	+ "ДокументРасчетов,"              // <ДокументСсылка> - документ расчетов, задолженность по которому погашается при способе "По документу"
	+ "СчетРасчетов,"                  // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом
	+ "СчетАвансов,"                   // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с контрагентом по авансам
	+ "КорСчет,"                       // <ПланСчетовСсылка.Хозрасчетный> - счет, коррекспондирующий со счетом расчетов с контрагентом
	+ "КорСубконто1,"                  // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 1 по корсчету
	+ "КорСубконто2,"                  // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 2 по корсчету
	+ "КорСубконто3,"                  // <Характеристика.ВидыСубконтоХозрасчетные> - субконто 3 по корсчету
	+ "КорПодразделение,"              // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СуммаВзаиморасчетов,"           // <Число,15,2> - сумма погашения задолженности в валюте взаиморасчетов
	+ "СуммаРуб,"                      // <Число,15,2> - сумма погашения задолженности в рублях
	+ "СуммаНУ,"                       // <Число,15,2> - сумма признания доходов (расходов) в рублях
	+ "Содержание";                    // <Строка,150>

	Параметры.Вставить("РасшифровкаПлатежа", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		РасшифровкаПлатежа, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)
	+ "ЭтоВозврат";                // <Булево> - Истина при возврате денежных средств (покупателю или от поставщика)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура ДобавитьСтрокиСписанияЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, ОстаткиЗадолженности, СтрокаПлатежа, Реквизиты, Отказ)
	
	Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыВВалюте           = СтрокаПлатежа.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();
	РасчетыВУсловныхЕдиницах = СтрокаПлатежа.РасчетыВУсловныхЕдиницах;
	Регистратор              = Реквизиты.Регистратор;
	
	КоэффициентНУ = ?(СтрокаПлатежа.СуммаНУ = 0, 0, СтрокаПлатежа.СуммаНУ / СтрокаПлатежа.СуммаРуб);
	
	Отбор = Новый Структура("СчетРасчетов, Контрагент, ДоговорКонтрагента");
	Если СтрокаПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу Тогда
		Отбор.Вставить("ДокументРасчетов");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаПлатежа);
	ОстаткиЗадолженностиСОтбором = ОстаткиЗадолженности.Скопировать(Отбор);
	Если БухгалтерскийУчет.НаСчетеВедетсяУчетПоДокументамРасчетов(Отбор.СчетРасчетов) Тогда
		ОстаткиЗадолженностиСОтбором.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	Иначе
		ОстаткиЗадолженностиСОтбором.Сортировать("НомерСтроки");
	КонецЕсли;
	
	Для каждого СтрокаОстатка Из ОстаткиЗадолженностиСОтбором Цикл
		
		Если НераспределеннаяСумма <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПогашеннаяСумма = Мин(НераспределеннаяСумма, СтрокаОстатка.СуммаВзаиморасчетов);
		Если ПогашеннаяСумма <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоПолноеСписание = СтрокаОстатка.СуммаВзаиморасчетов = ПогашеннаяСумма;
		
		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаПлатежа);
		ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаОстатка);
		
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов = ПогашеннаяСумма;
		
		Если РасчетыВВалюте Тогда
			
			// Погашение долга в валюте производится в БУ и НУ по курсу тек.документа
			// Погашение долга в условных единицах производятся в БУ по курсу тек.документа.
			// Если операция совершается до 01.01.2015, то в НУ формируется суммовая разница,
			// для ПБУ 18 образуется постоянная разница, равная суммовой.
			// Начиная с 01.01.2015 года суммовая разница при расчетах в у.е. не возникает.
			
			// Возвраты в валюте производятся в БУ по курсу остатка, в НУ по курсу тек.документа, для ПБУ 18 образуется постоянная разница.
			// Возвраты в условных единицах производятся в БУ и НУ только по курсу остатка,
			// если курс остатка БУ отличается от курса тек.документа - сообщается об ошибке и документ возврата не проводится.
			
			КурсВзаиморасчетов = Окр(СтрокаПлатежа.СуммаРуб / СтрокаПлатежа.СуммаВзаиморасчетов, 4);
			КурсОстаткаБУ      = Окр(СтрокаОстатка.СуммаБУ  / СтрокаОстатка.СуммаВзаиморасчетов, 4);
			КурсОстаткаНУ      = Окр(СтрокаОстатка.СуммаНУ  / СтрокаОстатка.СуммаВзаиморасчетов, 4);
			
			СуммаПоКурсуДокумента = Окр(ПогашеннаяСумма * КурсВзаиморасчетов, 2);
			
			СуммаБУпоКурсуОстатка = Окр(ПогашеннаяСумма * КурсОстаткаБУ, 2);
			СуммаНУпоКурсуОстатка = Окр(ПогашеннаяСумма * КурсОстаткаНУ, 2);
			
			Если Реквизиты.ЭтоВозврат Тогда
				
				// Возвраты предоплаты в валюте и в условных единицах производятся в БУ и НУ по курсу предоплаты
				СтрокаВзаиморасчетов.СуммаБУ = СуммаБУпоКурсуОстатка;
				СтрокаВзаиморасчетов.СуммаНУ = Окр(СуммаБУпоКурсуОстатка * КоэффициентНУ, 2);
				
				Если РасчетыВУсловныхЕдиницах Тогда
					
					Если ЭтоПолноеСписание Тогда
						КурсОстаткаОтличаетсяОтКурсаДокумента = КурсОстаткаБУ <> КурсВзаиморасчетов;
					Иначе
						КурсОстаткаОтличаетсяОтКурсаДокумента = СуммаПоКурсуДокумента <> СуммаБУпоКурсуОстатка;
					КонецЕсли;
					
					КурсОстаткаОтличаетсяОтКурсаДокумента = СуммаПоКурсуДокумента <> СуммаБУпоКурсуОстатка;
					Если КурсОстаткаОтличаетсяОтКурсаДокумента Тогда
						ТекстОшибки = НСтр("ru='Рублевая сумма возврата по договору в условных единицах отличается от суммы по курсу остатка долга.
							|	Договор: ""%1"", документ расчетов: ""%2"":
							|	Сумма возврата: %3 %4, по курсу остатка: %5 руб.
							|	Возврат по документу: %6 руб.
							|	Возвраты по договору в условных единицах должны производиться по курсу остатка долга!'");
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ТекстОшибки,
							СтрокаОстатка.ДоговорКонтрагента,
							СтрокаОстатка.ДокументРасчетов,
							ПогашеннаяСумма,
							СтрокаОстатка.Валюта,
							СуммаБУпоКурсуОстатка,
							СуммаПоКурсуДокумента);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Регистратор, , , Отказ);
					КонецЕсли;
					
					//Скорректируем суммы в проводках из-за ошибок округления
					//Если мы зачитываем весь остаток по строке, то и суммы в проводку должны пойти все
					Если ЭтоПолноеСписание Тогда
						
						СтрокаВзаиморасчетов.СуммаБУ = СтрокаОстатка.СуммаБУ;
						СтрокаВзаиморасчетов.СуммаНУ = СтрокаОстатка.СуммаНУ;
						
					КонецЕсли;
					
				Иначе
					// При расчетах в валюте дополнительно передается отдельная сумма
					// для "обратной" переоценки в НУ возвращаемой суммы до курса поступления предоплаты
					СтрокаВзаиморасчетов.Разница = СуммаПоКурсуДокумента - СуммаБУпоКурсуОстатка;
					
				КонецЕсли;
				
			Иначе
				
				// Погашение долга в валюте и в условных единицах производятся в БУ и НУ по курсу тек.документа.
				СтрокаВзаиморасчетов.СуммаБУ = СуммаПоКурсуДокумента;
				СтрокаВзаиморасчетов.СуммаНУ = Окр(СуммаПоКурсуДокумента * КоэффициентНУ, 2);
				
				// При расчетах в у.е дополнительно передается отдельная сумма для формирования в НУ суммовой разницы,
				// если это операция до 01.01.2015 года. С 01.01.2015 года суммовые разницы по расчетам в у.е. не образуются.
				ДатаОтменыСуммовыхРазниц = '20150101';
				Если РасчетыВУсловныхЕдиницах И СтрокаВзаиморасчетов.ДатаДокументаРасчетов < ДатаОтменыСуммовыхРазниц Тогда
					СтрокаВзаиморасчетов.Разница = СуммаПоКурсуДокумента - СуммаНУпоКурсуОстатка;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			// Расчеты в рублях
			СтрокаВзаиморасчетов.СуммаБУ = ПогашеннаяСумма;
			СтрокаВзаиморасчетов.СуммаНУ = Окр(ПогашеннаяСумма * КоэффициентНУ, 2);
		КонецЕсли;
		
		Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = Окр(СтрокаОстатка.СуммаВзаиморасчетовЕНВД
				* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
				
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент = Окр(СтрокаОстатка.СуммаВзаиморасчетовПатент
				* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Окр(СтрокаОстатка.СуммаВзаиморасчетовКомитента
				* СтрокаВзаиморасчетов.СуммаВзаиморасчетов / СтрокаОстатка.СуммаВзаиморасчетов, 2);
			
			Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовЕНВД <> 0) Тогда
				СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = Окр(СтрокаОстатка.СуммаБУ_ЕНВД
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД / СтрокаОстатка.СуммаВзаиморасчетовЕНВД, 2);
			Иначе
				СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			КонецЕсли;
			
			Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовПатент <> 0) Тогда
				СтрокаВзаиморасчетов.СуммаБУ_Патент = Окр(СтрокаОстатка.СуммаБУ_Патент
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент / СтрокаОстатка.СуммаВзаиморасчетовПатент, 2);
			Иначе
				СтрокаВзаиморасчетов.СуммаБУ_Патент = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			
			Если РасчетыВВалюте И (СтрокаОстатка.СуммаВзаиморасчетовКомитента <> 0) Тогда
				СтрокаВзаиморасчетов.СуммаБУ_Комитента = Окр(СтрокаОстатка.СуммаБУ_Комитента
					* СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента / СтрокаОстатка.СуммаВзаиморасчетовКомитента, 2);
			Иначе
				СтрокаВзаиморасчетов.СуммаБУ_Комитента = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			КонецЕсли;
			
		КонецЕсли;
		
		НераспределеннаяСумма = НераспределеннаяСумма - ПогашеннаяСумма;
		
		// Остатки уменьшаем в строке основной таблицы остатков
		СтрокаОстаткаБезОтбора = ОстаткиЗадолженности.Найти(СтрокаОстатка.НомерСтроки, "НомерСтроки");
		
		СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетов
			- СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СтрокаОстаткаБезОтбора.СуммаБУ = СтрокаОстаткаБезОтбора.СуммаБУ - СтрокаВзаиморасчетов.СуммаБУ;
		СтрокаОстаткаБезОтбора.СуммаНУ = СтрокаОстаткаБезОтбора.СуммаНУ - СтрокаВзаиморасчетов.СуммаНУ;
		Если РасчетыВУсловныхЕдиницах Тогда
			СтрокаОстаткаБезОтбора.СуммаНУ = СтрокаОстаткаБезОтбора.СуммаНУ + СтрокаВзаиморасчетов.Разница;
		КонецЕсли;
		
		Если Реквизиты.УчитыватьЗадолженностьУСН ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовЕНВД      = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовЕНВД
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовПатент    = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовПатент
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
			СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовКомитента = СтрокаОстаткаБезОтбора.СуммаВзаиморасчетовКомитента
				- СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			СтрокаОстаткаБезОтбора.СуммаБУ_ЕНВД      = СтрокаОстаткаБезОтбора.СуммаБУ_ЕНВД
				- СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;
			СтрокаОстаткаБезОтбора.СуммаБУ_Патент    = СтрокаОстаткаБезОтбора.СуммаБУ_Патент
				- СтрокаВзаиморасчетов.СуммаБУ_Патент;
			СтрокаОстаткаБезОтбора.СуммаБУ_Комитента = СтрокаОстаткаБезОтбора.СуммаБУ_Комитента
				- СтрокаВзаиморасчетов.СуммаБУ_Комитента;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуАвансаСписаниеЗадолженности(ТаблицаВзаиморасчетов, НераспределеннаяСумма, СтрокаДокумента, Реквизиты, ЭтоОтложенноеПроведение)

	Если НераспределеннаяСумма <= 0 Тогда
		Возврат;
	КонецЕсли;

	РасчетыВВалюте = СтрокаДокумента.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета.Получить();

	Если ЭтоОтложенноеПроведение Тогда
		// В сам момент отложенного проведения формируем уже окончательные проводки.
		ОпределятьСостояниеРасчетов = Истина;
	Иначе
		Если ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
			ОпределятьСостояниеРасчетов = РасчетыВВалюте // в валюте или у.е.
				ИЛИ ЭтоВидДоговораРасчетыПоКомиссии(СтрокаДокумента.ВидДоговора);
		Иначе
			ОпределятьСостояниеРасчетов = Истина;
		КонецЕсли;
	КонецЕсли;

	СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();

	ЗаполнитьЗначенияСвойств(СтрокаВзаиморасчетов, СтрокаДокумента);

	Если ОпределятьСостояниеРасчетов Тогда
		СтрокаВзаиморасчетов.СчетРасчетов          = СтрокаДокумента.СчетАвансов;
		СтрокаВзаиморасчетов.ДокументРасчетов      = Реквизиты.Регистратор;
		СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;
	Иначе
		СтрокаВзаиморасчетов.СчетРасчетов          = СтрокаДокумента.СчетАвансов;
		СтрокаВзаиморасчетов.ДокументРасчетов      = Неопределено;
		СтрокаВзаиморасчетов.ДатаДокументаРасчетов = Реквизиты.Период;
	КонецЕсли;

	// Для нераспределенных сумм подразделение определяется по кор.счету,
	// если оно не было явно задано в колонке "Подразделение" таблицы документа
	// (как, например, для операции "Поступление от продаж по платежным картам")
	Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.Подразделение) Тогда
		СтрокаВзаиморасчетов.Подразделение = СтрокаДокумента.КорПодразделение;
	КонецЕсли;

	СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределеннаяСумма;

	Если РасчетыВВалюте Тогда
		СтрокаВзаиморасчетов.СуммаБУ = Окр(НераспределеннаяСумма
			* СтрокаДокумента.СуммаРуб / СтрокаДокумента.СуммаВзаиморасчетов, 2);
	Иначе
		СтрокаВзаиморасчетов.СуммаБУ = НераспределеннаяСумма;
	КонецЕсли;

	КоэффициентНУ = ?(СтрокаДокумента.СуммаНУ = 0, 0, СтрокаДокумента.СуммаНУ / СтрокаДокумента.СуммаРуб);

	СтрокаВзаиморасчетов.СуммаНУ = Окр(СтрокаВзаиморасчетов.СуммаБУ * КоэффициентНУ, 2);

КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ И ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ 

// Возвращает таблицу значений со счетами, используемыми для учета взаиморсчетов
//
// Параметры
//  <ВключатьГруппыСчетов>  	- <Булево> - нужно ли в таблицу включать группы счетов?
//  <РаскрыватьГруппыСчетов>  	- <Булево> - нужно ли в таблицу включать субсчета групп счетов?
//								Если первый параметр установлен в ЛОЖЬ, второй параметр не учитывается (всегда ИСТИНА)
//
// Возвращаемое значение:
//   <ТаблицаЗначений>   - таблица значений с единственной колонкой "СчетУчета"
//
Функция ПолучитьТаблицуСчетовУчетаВзаиморасчетов(ВключатьГруппыСчетов = Ложь, РаскрыватьГруппыСчетов = Истина) Экспорт

	СписокСчетов = Новый Массив;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеВложения);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);

	СписокСчетовИсключить = Новый Массив;
	СписокСчетовИсключить.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", 	СписокСчетов);
	Запрос.УстановитьПараметр("СписокСчетовИсключить", СписокСчетовИсключить);
	Запрос.УстановитьПараметр("Контрагенты", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("Договоры", 	  	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Если ВключатьГруппыСчетов=Истина Тогда
		Если РаскрыватьГруппыСчетов=Истина Тогда
			ТекстУсловия = "";	// и группы счетов и субсчета
		Иначе
			ТекстУсловия = "И Хозрасчетный.ЗапретитьИспользоватьВПроводках=Истина"; // только группы счетов
		КонецЕсли;
	Иначе
		ТекстУсловия = "И Хозрасчетный.ЗапретитьИспользоватьВПроводках=Ложь"; // только счета
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК СчетРасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И (НЕ Хозрасчетный.Ссылка В (&СписокСчетовИсключить))
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Контрагенты
	|	И Хозрасчетный.ВидыСубконто.ВидСубконто = &Договоры
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	" + ТекстУсловия + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Порядок";
						 
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьСчетаВзаиморасчетовПоУмолчанию()
 
// Проверяет возможность проведения в регламентированном учете в зависимости от договора взаиморасчетов.
//
Функция ПроверитьВозможностьПроведенияВРеглУчете(ДокументОбъект, ДоговорКонтрагента, ТекстСообщения = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", ДокументОбъект.Ссылка.Метаданные()) Тогда
		ВидОперации = ДокументОбъект.ВидОперации;
	Иначе
		ВидОперации = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", ДокументОбъект.Ссылка.Метаданные()) Тогда
		ВалютаДокумента = ДокументОбъект.ВалютаДокумента;
	Иначе
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		ЭтоДокументОплаты = Ложь;
	Иначе
		ЭтоДокументОплаты = 
		УчетВзаиморасчетов.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ДокументОбъект, ВидОперации).Направление <> Неопределено;
	КонецЕсли; 	
	
	ВалютаВзаиморасчетов     = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ВалютаВзаиморасчетов <> ВалютаДокумента 
		И ВалютаРегламентированногоУчета <> ВалютаДокумента Тогда
		//Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. Возможно только в документах оплаты.
		ТекстСообщения = НСтр("ru = 'Валюта документа (%1) отличается 
							   |от валюты регламентированного учета (%2) 
							   |и валюты расчетов по договору ""%3"" (%4).'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВалютаДокумента, 
		                                                                         ВалютаРегламентированногоУчета,
		                                                                         ДоговорКонтрагента, ВалютаВзаиморасчетов);
		Возврат Ложь;
	ИначеЕсли ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		Если ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета И НЕ РасчетыВУсловныхЕдиницах Тогда
			//Документ выписан в валюте регламентированного учета. Валюта расчетов иная. Договор не в у.е. 
			ТекстСообщения = НСтр("ru = 'Валюта расчетов по договору ""%1"" (%2) отличается 
								   |от валюты регламентированного учета (%3).
								   |В этом случае документы могут быть выписаны в валюте регламентированного учета
								   |только при расчетах в условных единицах.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДоговорКонтрагента, 
			                                                                         ВалютаВзаиморасчетов,
			                                                                         ВалютаРегламентированногоУчета);
			Возврат Ложь;
		КонецЕсли;
	Иначе
		//Валюта документа равна валюте взаиморасчетов (отличной от валюты  рег. учета)	
		Если РасчетыВУсловныхЕдиницах И ЭтоДокументОплаты Тогда 
			//При расчетах в у.е. документы оплаты могут выписываться только в валюте рег.учета
			ТекстСообщения = НСтр("ru = 'Документ оплаты при расчете по договору (%1) в условных единицах
								   |может быть выписан только в валюте регламентированного учета (%2).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДоговорКонтрагента, 
			                                                                         ВалютаРегламентированногоУчета);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьВозможностьПроведенияВРеглУчете()

// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ

Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Знач ВидДокумента,ВидОперации = неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	ВидыДокументовДДС.Вставить("СписаниеСРасчетногоСчета", "Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер", "Выбытие");
	ВидыДокументовДДС.Вставить("ПоступлениеНаРасчетныйСчет", "Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер", "Поступление");

	ВидыДокументовДДС.Вставить("АвансовыйОтчет", "Выбытие");
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", "Поступление");
	ВидыДокументовДДС.Вставить("ДокументРасчетовСКонтрагентом", "Поступление");
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика,ВидОперацииВозврат);

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ВидДокумента="ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	ИначеЕсли ВидДокумента="ДокументРасчетовСКонтрагентом" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

Процедура ПодготовкаТаблицыЗначенийДляЦелейПриобретенияИРеализации(ТаблицаЗначений, Реквизиты, ВключитьНДСВОсновнуюСумму = Истина) Экспорт
	
	Перем СуммаВключаетНДС,ВидРасчетовПоДоговору;
	
	ВалютаРегламентированногоУчета = Реквизиты.ВалютаРеглУчета;
	
	ЕстьНДС = ТаблицаЗначений.Колонки.Найти("НДС") <> Неопределено;
	ЕстьСтавкаНДС = ТаблицаЗначений.Колонки.Найти("СтавкаНДС") <> Неопределено;
	ЕстьВалюта = Реквизиты.Свойство("ВалютаДокумента");
	
	Если ТипЗнч(Реквизиты.Ссылка) = Тип("ДокументСсылка.ГТДИмпорт") Тогда 
		// Для документа ГТДИмпорт передается специфическая структура таблицы, суммы НДС разделены по строкам 
		// с суммами без НДС. Расчет может производиться только пересчетом по курсу.
		РасчетСуммыНДСПоСтавке = Ложь;
	ИначеЕсли ЕстьВалюта И ЕстьНДС И ЕстьСтавкаНДС И Реквизиты.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		РасчетСуммыНДСПоСтавке =  Истина;
	Иначе
		РасчетСуммыНДСПоСтавке = Ложь;
	КонецЕсли; 
	
	Реквизиты.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	СуммаВключаетНДС = (СуммаВключаетНДС = Истина);
	
	Если Реквизиты.Свойство("ДоговорКонтрагента") тогда
		Если Реквизиты.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ВалютаВзаиморасчетов) Тогда
			
			ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
			
		ИначеЕсли Реквизиты.РасчетыВУсловныхЕдиницах Тогда
			
			ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
			
		Иначе
			
			ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
			
		Конецесли;

	КонецЕсли;
	
	// Дополним колонки ТЗ при необходимости
	СтруктураОбязательныхКолонок = Новый Структура("Сумма" + ?(ЕстьНДС, ",НДС,СуммаБезНДС", "") + ?(ЕстьВалюта, ",СуммаВал" + ?(ЕстьНДС, ",НДСВал,СуммаБезНДСВал", ""), ""));
	
	СтруктураОбязательныхКолонок.Вставить("СуммаБУ");
	Если ЕстьНДС Тогда
		СтруктураОбязательныхКолонок.Вставить("СуммаБУБезНДС");
	КонецЕсли;
	
	Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл
		
		Если ТаблицаЗначений.Колонки.Найти(Колонка.Ключ) = Неопределено тогда
			ТаблицаЗначений.Колонки.Добавить(Колонка.Ключ, ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		КонецЕсли;
		
	КонецЦикла;
	
	//Дополним колонки ТЗ при необходимости нечисловыми полями
	Если ТаблицаЗначений.Колонки.Найти("СчетУчетаЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("СчетУчетаЦенности");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("ВидЦенности") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("ВидЦенности");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Ценность") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Ценность");
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти("Тара") = Неопределено тогда
		ТаблицаЗначений.Колонки.Добавить("Тара", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	// Определим суммы по документу (Сумму без НДС и корректную основную сумму)
	Если ЕстьНДС тогда
		
		Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(СуммаВключаетНДС, СтрокаТаблицы.НДС, 0);
			
			Если РасчетСуммыНДСПоСтавке Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
			Иначе
				СтрокаТаблицы.Сумма = СтрокаТаблицы.СуммаБезНДС + ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьВалюта тогда
		
		// Заполним валютные колонки суммами документа
		Для каждого Колонка Из СтруктураОбязательныхКолонок Цикл
			
			Если Прав(Колонка.Ключ, 3) = "Вал" Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку(Лев(Колонка.Ключ, СтрДлина(Колонка.Ключ) - 3)), Колонка.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ (Реквизиты.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
			
			Если НЕ Реквизиты.Свойство("КурсДокумента") ИЛИ НЕ Реквизиты.Свойство("КратностьДокумента") тогда
				КоэффициентПересчета = 1;
			ИначеЕсли Число(Реквизиты.КурсДокумента) = 0 ИЛИ Число(Реквизиты.КратностьДокумента) = 0 тогда
				КоэффициентПересчета = 1;
			Иначе
				КоэффициентПересчета = Реквизиты.КурсДокумента/Реквизиты.КратностьДокумента;
			КонецЕсли;
			
			// Распределение суммы по таблице
			СуммаРег = Окр(ТаблицаЗначений.Итог("СуммаВал") * КоэффициентПересчета, 2);
			
			РаспределениеРег = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаРег, ТаблицаЗначений.ВыгрузитьКолонку("Сумма"));
			Если РаспределениеРег <> Неопределено Тогда
				ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег,"Сумма");
			КонецЕсли; 
			
			Если ЕстьНДС Тогда
				Если РасчетСуммыНДСПоСтавке Тогда
					Если БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализациейОтгруженныхТоваров(Реквизиты.Ссылка) Тогда
						Если Реквизиты.НачислятьНДСПоОтгрузке Тогда
							
							Если Реквизиты.РасчетыВУсловныхЕдиницах 
							   И Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
								// Определим сумму НДС с учетом зачтенных при отгрузке авансов
								ИменаКолонок = Новый Структура("СуммаБезНДС,НДС", "СуммаБезНДС", "НДС");
								УчетНДС.РаспределитьНачисленныйПриОтгрузкеНДСПоТаблице(ТаблицаЗначений, Реквизиты, ИменаКолонок);
							Иначе
								Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
									ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
									Если СтрокаТаблицы.НДС = 0 Тогда
										СтрокаТаблицы.НДС = 0;
									Иначе
										СтрокаТаблицы.НДС = (СтрокаТаблицы.СуммаВал * ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС)) 
											* Реквизиты.КурсДокументаОтгрузки/Реквизиты.КратностьДокументаОтгрузки;
									КонецЕсли;
									СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
								КонецЦикла;
							КонецЕсли;
							
							// Корректировка таблицы в случае если не ВключитьНДСВОсновнуюСумму
							Если НЕ ВключитьНДСВОсновнуюСумму Тогда
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"),"Сумма");
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"),"СуммаВал");
							КонецЕсли;
							
						Иначе
							// Выделение суммы НДС, Расчет суммы без НДС
							Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
								ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
								Если СтрокаТаблицы.НДС = 0 Тогда
									СтрокаТаблицы.НДС = 0;
								Иначе
									СтрокаТаблицы.НДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТаблицы.Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС), 2));
								КонецЕсли;
								
								СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
							КонецЦикла;
							НДСРег = ТаблицаЗначений.Итог("НДС");
							
							// Корректировка таблицы в случае если не ВключитьНДСВОсновнуюСумму
							Если НЕ ВключитьНДСВОсновнуюСумму Тогда
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "Сумма");
								ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"), "СуммаВал");
							КонецЕсли;							
						КонецЕсли;	
                    Иначе
						// Выделение суммы НДС, Расчет суммы без НДС
						Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
							
							ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
							Если СтрокаТаблицы.НДС = 0 Тогда
								СтрокаТаблицы.НДС = 0;
							Иначе
								СтрокаТаблицы.НДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаТаблицы.Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС), 2));
							КонецЕсли;
							
							СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - СтрокаТаблицы.НДС;
							
						КонецЦикла;
						НДСРег = ТаблицаЗначений.Итог("НДС");
						
						// Корректировка таблицы
						Если НЕ ВключитьНДСВОсновнуюСумму Тогда
							ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "Сумма");
							ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДСВал"), "СуммаВал");
						КонецЕсли; 
                    КонецЕсли; 
				Иначе
					НДСРег = Окр(ТаблицаЗначений.Итог("НДСВал") * КоэффициентПересчета, 2);
					// Распределение суммы по таблице
					РаспределениеРег = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСРег,ТаблицаЗначений.выгрузитьКолонку("НДС"));
					Если РаспределениеРег <> Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеРег, "НДС");
					КонецЕсли; 
					
					// Расчет суммы без НДС
					Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДС = СтрокаТаблицы.Сумма - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДС, 0);
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			
			// Документ в национальной валюте
			Если ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах 
				ИЛИ ((ТипЗнч(Реквизиты.Ссылка) = Тип("ДокументСсылка.ОтражениеНДСКВычету")
				ИЛИ ТипЗнч(Реквизиты.Ссылка) = Тип("ДокументСсылка.ОтражениеНачисленияНДС"))
				И Реквизиты.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета) Тогда
				
				// Необходимо определить сумму расчетов с контрагентом в валюте договора
				Если НЕ Реквизиты.Свойство("КурсВзаиморасчетов") ИЛИ НЕ Реквизиты.Свойство("КратностьВзаиморасчетов") Тогда
					КоэффициентПересчета = 1;
				ИначеЕсли Число(Реквизиты.КурсВзаиморасчетов) = 0 ИЛИ Число(Реквизиты.КратностьВзаиморасчетов) = 0 Тогда
					КоэффициентПересчета = 1;
				Иначе
					КоэффициентПересчета = Реквизиты.КратностьВзаиморасчетов / Реквизиты.КурсВзаиморасчетов;
				КонецЕсли;
				
				СуммаВал = Окр(ТаблицаЗначений.Итог("Сумма") * КоэффициентПересчета, 2);
				// Распределение суммы по таблице
				РаспределениеВал = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаВал,ТаблицаЗначений.ВыгрузитьКолонку("СуммаВал"));
				Если РаспределениеВал <> Неопределено Тогда
					ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал, "СуммаВал");
				КонецЕсли; 
				
				
				Если ЕстьНДС Тогда
					
					НДСВал = Окр(ТаблицаЗначений.Итог("НДС") * КоэффициентПересчета, 2);
					// Распределение суммы по таблице
					РаспределениеВал = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСВал,ТаблицаЗначений.ВыгрузитьКолонку("НДСВал"));
					Если РаспределениеВал <> Неопределено Тогда
						ТаблицаЗначений.ЗагрузитьКолонку(РаспределениеВал, "НДСВал");
					КонецЕсли; 
					
					// Расчет суммы без НДС
					Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
						СтрокаТаблицы.СуммаБезНДСВал = СтрокаТаблицы.СуммаВал - ?(ВключитьНДСВОсновнуюСумму, СтрокаТаблицы.НДСВал, 0);
					КонецЦикла;
					
					
				КонецЕсли;
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	// На этапе подготовки таблицы суммы для БУ совпадают с суммами для остальных видов учета (НУ, НДС...).
	// При зачете авансов в иностранной валюте в 2008 году суммы БУ будут корректироваться с учетом курсов зачтенных авансов,
	// а суммы для других видов учета остаются прежними
	
	ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("Сумма"), "СуммаБУ");
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБезНДС"), "СуммаБУБезНДС");
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Если ЕстьНДС Тогда
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУБезНДС"), "СуммаНУ");
	Иначе
		ТаблицаЗначений.ЗагрузитьКолонку(ТаблицаЗначений.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("СчетЗатрат,Субконто1,Субконто2,Субконто3");
		
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ВидЦенности) Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПараметров, СтрокаТаблицы);
			СтрокаТаблицы.ВидЦенности = 
				УчетНДС.ОпределитьВидЦенности(СтруктураПараметров.СчетЗатрат, СтруктураПараметров.Субконто1, СтруктураПараметров.Субконто2, СтруктураПараметров.Субконто3);
		КонецЕсли; 
	КонецЦикла;	
		
КонецПроцедуры

Процедура ПодготовитьТаблицуДокументаРасчетыВВалюте(ТаблицаСуммДокумента, Реквизиты) Экспорт
	
	Если Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРеглУчета Тогда // Документ оформлен в валюте расчетов
		
		ИтогСуммаРуб = ?(Реквизиты.КратностьВзаиморасчетов = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("СуммаВзаиморасчетов") * Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов, 2));
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаРуб, ТаблицаСуммДокумента, "СуммаРуб", "СуммаВзаиморасчетов");
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
			
			ЭлектронныеУслугиПоСтавке1667 = Ложь;
			
			Если Реквизиты.Свойство("ЭлектронныеУслуги") И Реквизиты.ЭлектронныеУслуги
				И Реквизиты.Свойство("УчетАгентскогоНДС") И НЕ Реквизиты.УчетАгентскогоНДС 
				И Реквизиты.Период >= '20190101' Тогда
				ЭлектронныеУслугиПоСтавке1667 = Истина;
			КонецЕсли;
				
			// Сумма НДС в рублях рассчитывается построчно исходя из общей рублевой суммы по этой строке и ставки НДС
			Для каждого СтрокаТаблицы Из ТаблицаСуммДокумента Цикл
				
				ВидСтавки = Перечисления.ВидыСтавокНДС.ВидСтавки(СтрокаТаблицы.СтавкаНДС);
				
				Если ЭлектронныеУслугиПоСтавке1667 
				   И (ВидСтавки = Перечисления.ВидыСтавокНДС.ОбщаяРасчетная
				      ИЛИ ВидСтавки = Перечисления.ВидыСтавокНДС.Общая) Тогда
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * 0.1667, 2);
				Иначе
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * ПроцентНДС / (100 + ПроцентНДС), 2);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе // Договор в у.е., документ оформлен в рублях
		
		КурсИКратностьНаДатуДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
		КурсНаДатуДокумента           = КурсИКратностьНаДатуДокумента.Курс;
		КратностьНаДатуДокумента      = КурсИКратностьНаДатуДокумента.Кратность;
		
		Курс      = Реквизиты.КурсВзаиморасчетов;
		Кратность = Реквизиты.КратностьВзаиморасчетов;
		
		Если Реквизиты.КурсВзаиморасчетов = 1 и Реквизиты.КратностьВзаиморасчетов = 1 Тогда
			Курс      = КурсНаДатуДокумента;
			Кратность = КратностьНаДатуДокумента;
		КонецЕсли;
		
		ИтогСуммаВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("СуммаРуб") / (Курс / Кратность), 2));
		ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаВзаиморасчетов, ТаблицаСуммДокумента, "СуммаВзаиморасчетов", "СуммаРуб");
		
		Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСВзаиморасчетов") <> Неопределено 
			И ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
			// Сумма НДС в валюте рассчитывается в целом по документу и распределяется по строкам
			ИтогСуммаНДСВзаиморасчетов = ?(Курс = 0 ИЛИ Кратность = 0, 0,
				Окр(ТаблицаСуммДокумента.Итог("СуммаНДСРуб") / (Курс / Кратность), 2));
			ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
				ИтогСуммаНДСВзаиморасчетов, ТаблицаСуммДокумента, "СуммаНДСВзаиморасчетов", "СуммаНДСРуб");
		КонецЕсли;
		
		Если Курс <> КурсНаДатуДокумента И Реквизиты.Свойство("СпособЗачетаАвансов") 
			И Реквизиты.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			// Пересчитаем рублевые суммы по курсу на текущий день, чтобы выполнить корректировку при зачете аванса.
			ИтогСуммаРуб = ?(КратностьНаДатуДокумента = 0, 0,
			Окр(ТаблицаСуммДокумента.Итог("СуммаВзаиморасчетов") * КурсНаДатуДокумента / КратностьНаДатуДокумента, 2));
				ОбщегоНазначенияБПВызовСервера.РаспределитьСуммуПоКолонкеТаблицы(
			ИтогСуммаРуб, ТаблицаСуммДокумента, "СуммаРуб", "СуммаВзаиморасчетов");
	
			Если ТаблицаСуммДокумента.Колонки.Найти("СуммаНДСРуб") <> Неопределено Тогда
				// Сумма НДС в рублях рассчитывается построчно исходя из общей рублевой суммы по этой строке и ставки НДС
				Для каждого СтрокаТаблицы Из ТаблицаСуммДокумента Цикл
					ПроцентНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
					СтрокаТаблицы.СуммаНДСРуб = Окр(СтрокаТаблицы.СуммаРуб * ПроцентНДС / (100 + ПроцентНДС), 2);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРазницыВПроводке(Проводка, СуффиксДтКт, ОсновнойВидРазниц)
	
	Если Не ЗначениеЗаполнено(ОсновнойВидРазниц) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаНУ = Проводка["СуммаНУ" + СуффиксДтКт];
	Разница = Проводка.Сумма - СуммаНУ;
	
	Если Разница = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОсновнойВидРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
		Проводка["СуммаПР" + СуффиксДтКт] = Разница;
		Проводка["СуммаВР" + СуффиксДтКт] = 0;
	Иначе
		Проводка["СуммаВР" + СуффиксДтКт] = Разница;
		Проводка["СуммаПР" + СуффиксДтКт] = 0;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ

#Область УстаревшиеПроцедурыИФункции

// Процедуры и функции этой области используются для документов, в которых нет УстановитьПравилаЗаполненияСчетовУчета()
// Для документов с УстановитьПравилаЗаполненияСчетовУчета() следует использовать процедуры и функции из УчетВзаиморасчетовФормы.

// Функция возвращает текст надписи для счетов расчетов для вывода на форме.
//
// Параметры:
//	СчетРасчетов - ПланСчетовСсылка.Хозрасчетный
//	СчетАвансов - ПланСчетовСсылка.Хозрасчетный
//	СпособЗачетаАвансов - ПеречислениеСсылка.СпособыЗачетаАвансов
//
// Возвращаемое значение:
//	Строка
//
Функция СформироватьНадписьПорядокУчетаРасчетов(СчетРасчетов, СчетАвансов, СпособЗачетаАвансов, ТекстСрокОплаты="", ОсобенностиВзаиморасчетов = Неопределено) Экспорт

	ТекстНадписи      = "";
	ТекстСчета        = "";
	ТекстСчетРасчетов = "";
	ТекстСчетАвансов  = "";
	ТекстЗачетАвансов = "";

	Если ЗначениеЗаполнено(СчетРасчетов) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасчетов);
		ТекстСчетРасчетов = СвойствоСчета.Код;
	Иначе
		ТекстСчетРасчетов = "<...>";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СчетАвансов) Тогда
		СвойствоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетАвансов);
		ТекстСчетАвансов = СвойствоСчета.Код;
	Иначе
		ТекстСчетАвансов = "<...>";
	КонецЕсли;
	
	Если ТипЗнч(ОсобенностиВзаиморасчетов) = Тип("Структура")
		И ОсобенностиВзаиморасчетов.Свойство("СкрытьСчетАванса")
		И ОсобенностиВзаиморасчетов.СкрытьСчетАванса Тогда
		
		СкрытьСчетАванса = Истина;
		
	Иначе
		СкрытьСчетАванса = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		
		Если СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически Тогда
			ТекстЗачетАвансов = НСтр("ru = 'зачет аванса автоматически'");
			ТекстСчета = ТекстСчетРасчетов + ", " + ТекстСчетАвансов;
		ИначеЕсли СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			ТекстЗачетАвансов = НСтр("ru = 'зачет аванса по документам'");
			ТекстСчета = ТекстСчетРасчетов + ", " + ТекстСчетАвансов;
		ИначеЕсли СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
			ТекстЗачетАвансов = НСтр("ru = 'аванс не зачитывается'");
			ТекстСчета = ТекстСчетРасчетов;
		КонецЕсли;
		
		Если СкрытьСчетАванса Тогда
			ТекстСчета = ТекстСчетРасчетов;
		КонецЕсли;
		
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1, %2", ТекстСчета, ТекстЗачетАвансов);
	Иначе
		
		// Зачетом авансов пользователь не управляет и использует всегда "Автоматически"
		Если СкрытьСчетАванса Тогда
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1", ТекстСчетРасчетов);
		Иначе
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1, %2", ТекстСчетРасчетов, ТекстСчетАвансов);
		КонецЕсли;
	
	КонецЕсли;
	
	Если ТекстСрокОплаты <> "" Тогда
		ТекстНадписи = ТекстСрокОплаты + ", " + ТекстНадписи;
	КонецЕсли;
	
	Возврат ТекстНадписи;

КонецФункции

// Процедура обновляет текст надписи ПорядокУчетаРасчетов на форме
// и устанавливает необходимые свойства элемента управления 
// в зависимости от заполненности счетов учета.
//
Процедура УстановитьПорядокУчетаРасчетов(Форма, ЕстьУчетСроковОплаты = Ложь) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЕстьУчетСроковОплаты И Форма.ИспользуетсяПланированиеПлатежей Тогда
		
		Если НЕ Форма.Модифицированность Тогда
			
			СтруктураСрокОплаты = СрокиОплатыДокументов.СрокОплатыДокументаРасчетов(
									Объект.Организация, Объект.Ссылка, Объект.Дата, Объект.ДоговорКонтрагента);
			ЗаполнитьЗначенияСвойств(Форма, СтруктураСрокОплаты);
			
		ИначеЕсли Форма.АвторасчетСрокаОплаты Тогда
			
			Форма.СрокОплаты = СрокиОплатыДокументов.СрокОплатыДокументаРасчетовАвторасчет(
									Объект.Ссылка, Объект.Дата, Объект.ДоговорКонтрагента);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.СрокОплаты) Тогда
			ТекстСрокОплаты = СрокиОплатыДокументов.ПредставлениеСрокаОплаты(Форма.СрокОплаты);
		Иначе
			ТекстСрокОплаты = "";
		КонецЕсли;
		
	Иначе
		
		ТекстСрокОплаты = "";
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОсобенностиВзаиморасчетов") Тогда
		ОсобенностиВзаиморасчетов = Форма.ОсобенностиВзаиморасчетов;
	Иначе
		ОсобенностиВзаиморасчетов = Неопределено;
	КонецЕсли;
	
	Форма.ПорядокУчетаРасчетов = СформироватьНадписьПорядокУчетаРасчетов(Объект.СчетУчетаРасчетовСКонтрагентом,
		Объект.СчетУчетаРасчетовПоАвансам,
		Объект.СпособЗачетаАвансов,
		ТекстСрокОплаты,
		ОсобенностиВзаиморасчетов);
		
	Если СтрНайти(Форма.ПорядокУчетаРасчетов, "<...>") = 0 Тогда
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Истина;
		Форма.СчетаРасчетовЗаполнены = Истина;
	Иначе
		Элементы.ПорядокУчетаРасчетов.ПропускатьПриВводе = Ложь;
		Форма.СчетаРасчетовЗаполнены = Ложь;
	КонецЕсли;

КонецПроцедуры

// Процедура сохраняет в документе счета учета и способ зачета авансов,
// выбранные в форме ВыборПорядкаУчетаРасчетов.
//
Процедура ОбработкаВыбораПорядокУчетаРасчетов(Форма, ВыбранноеЗначение) Экспорт

	Объект = Форма.Объект;
	
	Если ВыбранноеЗначение.ИспользуетсяСрокОплаты И Форма.СрокОплаты <> ВыбранноеЗначение.СрокОплаты Тогда
		Форма.СрокОплаты            = ВыбранноеЗначение.СрокОплаты;
		Форма.АвторасчетСрокаОплаты = Ложь;
	КонецЕсли;

	ТаблицаЗачетАвансов = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресХранилищаЗачетАвансов);
	
	Объект.ЗачетАвансов.Загрузить(ТаблицаЗачетАвансов);
	Объект.СпособЗачетаАвансов 				= ВыбранноеЗначение.СпособЗачетаАвансов;
	Объект.СчетУчетаРасчетовСКонтрагентом 	= ВыбранноеЗначение.СчетУчетаРасчетовСКонтрагентом;
	Объект.СчетУчетаРасчетовПоАвансам 		= ВыбранноеЗначение.СчетУчетаРасчетовПоАвансам;
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

// ОБЩИЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВидыСубконтоРасчетов()

	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);

	Возврат ВидыСубконтоРасчетов;

КонецФункции

Функция ВидыСубконтоКонтрагентыДоговоры()

	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	Возврат ВидыСубконтоКонтрагентыДоговоры;

КонецФункции

Функция РазличныеЗначенияКолонкиТаблицы(ТаблицаЗначений, ИмяКолонки)

	ВсеЗначенияКолонки = ТаблицаЗначений.ВыгрузитьКолонку(ИмяКолонки);
	РазличныеЗначения  = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(ВсеЗначенияКолонки);
	Возврат РазличныеЗначения;

КонецФункции

// Возвращает договор контрагента, если организация, указанная в данном договоре, доступна пользователю
//
Функция ДоступныйДоговорКонтрагента(ДоговорСсылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорСсылка", ДоговорСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Организация
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &ДоговорСсылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДоговорКонтрагента = Выборка.Договор;

	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

	Возврат ДоговорКонтрагента;

КонецФункции // ДоступныйДоговорКонтрагента()

// Формируются проводки погашения задолженности по расчетам с поставщиками и покупателями.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//  ТаблицаВзаиморасчетов - <ТаблицаЗначений> - таблица с данными по погашению задолженности в разрезе документов расчетов.
//                          Создается функцией ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности
//                          Используются колонки, описанные в функции ПодготовитьПараметрыПогашениеЗадолженности
//  ТаблицаРеквизиты      - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                          Структура таблицы описана в функции ПодготовитьПараметрыПогашениеЗадолженности
//  Движения              - коллекция движений документа
//  Отказ                 - <Булево> - флаг отказа от проведения
//
Процедура СформироватьДвиженияВзаимозачет(ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВзаимозачета(ТаблицаВзаиморасчетов, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ОсновнойВидРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Реквизиты.Период, Реквизиты.Организация);

	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");

	Для каждого СтрокаВзаиморасчетов из Параметры.Взаиморасчеты Цикл

		// Основная проводка по счету расчетов

		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;

		Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетРасчетов;

		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
			"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);

		СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
		КонецЕсли;

		Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;

		Для Ном = 1 по 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
				Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
		КонецЦикла;

		СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
		Если СвойстваКорСчета.Валютный Тогда
			Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.КорВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваКорСчета.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
		КонецЕсли;

		Если ОтражатьВНалоговомУчете Тогда
			
			СуммаНУ    = СтрокаВзаиморасчетов.СуммаНУ;
			КорСуммаНУ = СтрокаВзаиморасчетов.КорСуммаНУ;
			
			Разница    = СтрокаВзаиморасчетов.Разница;
			КорРазница = СтрокаВзаиморасчетов.КорРазница;
			
			Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
			КонецЕсли;
			
			Если СвойстваКорСчета.НалоговыйУчет Тогда
				Проводка["СуммаНУ" + ДтКтКорСчета] = КорСуммаНУ;
				ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц)
			КонецЕсли;
			
		КонецЕсли;

		// Проводки по вспомогательным счетам задолженности УСН
		Если Реквизиты.УчитыватьЗадолженностьУСН
			ИЛИ Реквизиты.УчитыватьЗадолженностьУСНПатент Тогда
			
			// Проводка Дт УСН.01 (УСН.21) - если ДтКтРасчетов = "Дт"
			// или Кт УСН.01 (УСН.21)  - если ДтКтРасчетов = "Кт"
			Если Реквизиты.УчитыватьЗадолженностьУСН
				И СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = "Расчеты по деятельности ЕНВД";
				
				Если СвойстваСчетаРасчетов.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
				Если СвойстваСчетаУСН.Валютный Тогда
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				КонецЕсли;
				Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
					Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;
				
			КонецЕсли;
			
			// Проводка Дт УСН.02 (УСН.22) - если ДтКтРасчетов = "Дт"
			// или Кт УСН.02 (УСН.22)  - если ДтКтРасчетов = "Кт"
			Если Реквизиты.УчитыватьЗадолженностьУСН
				И СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = "Расчеты за товары и услуги комитента";
				
				Если СвойстваСчетаРасчетов.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
				Если СвойстваСчетаУСН.Валютный Тогда
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				КонецЕсли;
				Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
					Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Комитента;
				
			КонецЕсли;
			
			Если Реквизиты.УчитыватьЗадолженностьУСНПатент И СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = ?(Реквизиты.Период < УчетУСН.ДатаНачалаДействияПатентнойСистемы(),
					НСтр("ru = 'Расчеты по деятельности УСН на патенте'"),
					НСтр("ru = 'Расчеты по деятельности на патенте'"));
				
				Если СвойстваСчетаРасчетов.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалПатент;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
				Если СвойстваСчетаУСН.Валютный Тогда
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовПатент;
				КонецЕсли;
				Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
					Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Патент;
				
			КонецЕсли;
			
			// Проводка Дт УСН.04 (УСН.24) - если ДтКтРасчетов = "Дт"
			// или Кт УСН.04 (УСН.24)  - если ДтКтРасчетов = "Кт"
			Если Реквизиты.УчитыватьЗадолженностьУСН
				И СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 Тогда
				
				Проводка = Движения.Хозрасчетный.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = "Расчеты по деятельности на торговом сборе";
				
				Если СвойстваСчетаРасчетов.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				СвойстваСчетаУСН = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
				Если СвойстваСчетаУСН.Валютный Тогда
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовТорговыйСбор;
				КонецЕсли;
				Если СвойстваСчетаУСН.УчетПоПодразделениям Тогда
					Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
				КонецЕсли;
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ТорговыйСбор;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыВзаимозачета(ТаблицаВзаиморасчетов, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата> - период движений - дата документа
	+ "Регистратор,"               // <ДокументСсылка>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "ВалютаДокумента,"           // <СправочникСсылка.Валюты>
	+ "УчитыватьЗадолженностьУСН," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения";       // <Строка> - "Поступление" при погашении дебиторской задолженности (поступлении денежных средств)
	                               //          - "Выбытие" при погашении кредиторской задолженности (выбытии денежных средств)

	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Взаиморасчеты

	СписокОбязательныхКолонок = ""
	+ "Подразделение,"                   // <Ссылка на справочник подразделений>  - подразделение, задолженность по которому погашается
	+ "Контрагент,"                      // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
	+ "ДоговорКонтрагента,"              // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
	+ "ДокументРасчетов,"                // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
	+ "ВалютаВзаиморасчетов,"            // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "КорВалютаВзаиморасчетов,"         // <СправочникСсылка.Валюты> - валюта расчетов по договору
	+ "СчетРасчетов,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов, задолженность по которому погашается
	+ "КорСчет,"                         // <ПланСчетовСсылка.Хозрасчетный> - счет, корреспондирующий со счетом расчетов
	+ "КорСубконто1,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто2,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорСубконто3,"                    // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "КорПодразделение,"                // <Ссылка на справочник подразделений> - подразделение по корсчету
	+ "СуммаВзаиморасчетов,"             // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "КорСуммаВзаиморасчетов,"          // <Число,15,2> - сумма в валюте взаиморасчетов
	+ "СуммаБУ,"                         // <Число,15,2> - сумма в рублях в оценке для бух.учета
	+ "СуммаНУ,"                         // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "КорСуммаНУ,"                      // <Число,15,2> - сумма в рублях в оценке для налогового учета
	+ "Разница,"                         // <Число,15,2> - сумма в рублях, суммой по текущему курсу и суммой по курсу НУ
	+ "КорРазница,"                      // <Число,15,2> - сумма в рублях, суммой по текущему курсу и суммой по курсу НУ
	+ "СуммаВзаиморасчетовЕНВД,"         // <Число,15,2> - сумма по деятельности ЕНВД в валюте взаиморасчетов
	+ "СуммаБУ_ЕНВД,"                    // <Число,15,2> - сумма по деятельности ЕНВД в рублях
	+ "СуммаВзаиморасчетовПатент,"       // <Число,15,2> - сумма по деятельности на патенте в валюте взаиморасчетов
	+ "СуммаБУ_Патент,"                  // <Число,15,2> - сумма по деятельности на патенте в рублях
	+ "СуммаВзаиморасчетовКомитента,"    // <Число,15,2> - сумма за товары и услуги комитентов в валюте взаиморасчетов
	+ "СуммаБУ_Комитента,"               // <Число,15,2> - сумма за товары и услуги комитентов в рублях
	+ "СуммаВзаиморасчетовТорговыйСбор," // <Число,15,2> - сумма по деятельности на торговом сборе в валюте взаиморасчетов
	+ "СуммаБУ_ТорговыйСбор,"            // <Число,15,2> - сумма по деятельности на торговом сборе в рублях
	+ "Содержание";                      // <Строка,150>

	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчетов, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПустаяТаблицаВзаимозачет() Экспорт

	ПустаяТаблица = Новый ТаблицаЗначений();

	ПустаяТаблица.Колонки.Добавить("СчетРасчетов",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов",     Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПустаяТаблица.Колонки.Добавить("КорВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	ПустаяТаблица.Колонки.Добавить("Подразделение",          БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ПустаяТаблица.Колонки.Добавить("Контрагент",             Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ПустаяТаблица.Колонки.Добавить("ДоговорКонтрагента",     БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора());
	ПустаяТаблица.Колонки.Добавить("ДокументРасчетов",       Документы.ТипВсеСсылки());
	ПустаяТаблица.Колонки.Добавить("ДатаДокументаРасчетов",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПустаяТаблица.Колонки.Добавить("ОстатокВзаиморасчетов",  ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетов",    ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("КорСуммаВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаРуб",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СуммаНУ",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("КорСуммаНУ",             ОбщегоНазначения.ОписаниеТипаЧисло(15,2));

	ПустаяТаблица.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("Разница",                  ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("КорРазница",               ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ПустаяТаблица.Колонки.Добавить("СтавкаНДС",                Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ПустаяТаблица.Колонки.Добавить("КорСчет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПустаяТаблица.Колонки.Добавить("КорПодразделение",         БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ОписаниеТипаСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
	Для Ном = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("КорСубконто" + Ном, ОписаниеТипаСубконто);
	КонецЦикла;

	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ЕНВД",                    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовПатент",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Патент",                  ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовКомитента",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_Комитента",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("СуммаБУ_ТорговыйСбор",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ПустаяТаблица.Колонки.Добавить("Содержание",                      ОбщегоНазначения.ОписаниеТипаСтрока(150));

	Возврат ПустаяТаблица;

КонецФункции

Функция ЭтоВидДоговораРасчетыПоКомиссии(ВидДоговора) Экспорт

	Возврат ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку
		ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку;

КонецФункции

#Область СчетаУчетаРасчетов

Функция ОсновнойСчетРасчетов(Знач ВидРасчетов, Знач Роль) Экспорт
	
	Счета = ОсновныеСчетаРасчетов();
	
	КлассСчетов = Счета[ВидРасчетов];
	Если КлассСчетов = Неопределено Тогда
		КлассСчетов = Счета[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета];
	КонецЕсли;
	
	Если Не ПустаяСтрока(Роль) И КлассСчетов.Свойство(Роль) Тогда
		Счет = КлассСчетов[Роль];
	Иначе
		Счет = КлассСчетов.РасчетыДругие;
	КонецЕсли;
	
	Возврат Счет;
	
КонецФункции

Функция ОсновныеСчетаРасчетов() Экспорт
	
	СчетаРасчетов = Новый Соответствие;
	СчетаРасчетов.Вставить(Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте,              Новый Структура); // Заполним эти структуры ниже
	СчетаРасчетов.Вставить(Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах,               Новый Структура);
	СчетаРасчетов.Вставить(Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета, Новый Структура);
	
	КлассСчетовРасчетов = СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета];
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);                           // 60.01
	КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);                       // 60.02
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);                           // 62.01
	КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);                     // 62.02
	КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям);                            // 76.02
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентом",          ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);       // 76.05
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПолученная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками);       // 76.05
	КлассСчетовРасчетов.Вставить("РасчетыСПрочимиПокупателями", ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПереданная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги",
	                                                            ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками);        // 76.06
	КлассСчетовРасчетов.Вставить("РасчетыДругие",               ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами);    // 76.09
	КлассСчетовРасчетов.Вставить("АрендныеОбязательства",       ПланыСчетов.Хозрасчетный.АрендныеОбязательства);                          // 76.07.1
	КлассСчетовРасчетов.Вставить("ЛизинговыеПлатежи",           ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежи);                              // 76.07.2
	КлассСчетовРасчетов.Вставить("РасчетыПоФакторингу",         ПланыСчетов.Хозрасчетный.РасчетыСФакторинговымиКомпаниями);               // 76.13
	
	КлассСчетовРасчетов = СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте];
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал);                        // 60.21
	КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал);                    // 60.22
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал);                        // 62.21
	КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал);                  // 62.22
	КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал);                         // 76.22
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентом",          ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);    // 76.25
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПолученная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал);    // 76.25
	КлассСчетовРасчетов.Вставить("РасчетыСПрочимиПокупателями", ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПереданная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги",
	                                                            ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал);     // 76.26
	КлассСчетовРасчетов.Вставить("АрендныеОбязательства",       ПланыСчетов.Хозрасчетный.АрендныеОбязательстваВал);                       // 76.27.1
	КлассСчетовРасчетов.Вставить("ЛизинговыеПлатежи",           ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиВал);                           // 76.27.2
	КлассСчетовРасчетов.Вставить("РасчетыДругие",               ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал); // 76.29
		
	КлассСчетовРасчетов = СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах];
	КлассСчетовРасчетов.Вставить("РасчетыСПоставщиком",         ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ);                         // 60.31
	КлассСчетовРасчетов.Вставить("АвансыПоставщику",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);                     // 60.32
	КлассСчетовРасчетов.Вставить("РасчетыСПокупателем",         ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);                         // 62.31
	КлассСчетовРасчетов.Вставить("АвансыПокупателя",            ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);                   // 62.32
	КлассСчетовРасчетов.Вставить("РасчетыПоПретензиям",         ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ);                          // 76.32
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентом",          ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);     // 76.35
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПолученная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ);     // 76.35
	КлассСчетовРасчетов.Вставить("РасчетыСПрочимиПокупателями", ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);      // 76.36
	КлассСчетовРасчетов.Вставить("ВозвратнаяТараПереданная",    ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);      // 76.36
	КлассСчетовРасчетов.Вставить("РасчетыСКомитентомЗаПриобретенныеДляНегоТоварыУслуги",
	                                                            ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ);      // 76.36
	КлассСчетовРасчетов.Вставить("АрендныеОбязательства",       ПланыСчетов.Хозрасчетный.АрендныеОбязательстваУЕ);                        // 76.37.1
	КлассСчетовРасчетов.Вставить("ЛизинговыеПлатежи",           ПланыСчетов.Хозрасчетный.ЛизинговыеПлатежиУЕ);                            // 76.37.2
	КлассСчетовРасчетов.Вставить("РасчетыДругие",               ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ);  // 76.39
	
	Возврат СчетаРасчетов;
	
КонецФункции

Функция ВидРасчетовПоУсловиямРасчетов(Валюта = Неопределено, РасчетыВУсловныхЕдиницах = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Или Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		Возврат Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
		
	ИначеЕсли РасчетыВУсловныхЕдиницах = Истина Тогда
		
		Возврат Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;
		
	Иначе // в иностранной валюте
		
		Возврат Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтгрузкаБезПереходаПраваСобственностиВУЕ

Процедура СформироватьДвиженияЗадолженностьПоОтгрузкеВУЕ(ТаблицаВзаиморасчеты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаВзаиморасчеты)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	Если Реквизиты.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности
	 Или Не Реквизиты.РасчетыВУсловныхЕдиницах
	 Или Реквизиты.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать
	 Или Не УчетнаяПолитика.НачислятьНДСПоОтгрузке(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыЗадолженностьПоОтгрузкеВУЕ(ТаблицаВзаиморасчеты, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	Взаиморасчеты = Параметры.Взаиморасчеты;

	ТаблицаЗадолженность = Взаиморасчеты.СкопироватьКолонки();
	ТаблицаПогашениеЗадолженности = Взаиморасчеты.СкопироватьКолонки();

	Для Каждого СтрокаВзаиморасчетов Из Взаиморасчеты Цикл
		НоваяСтрокаЗадолженность = ТаблицаЗадолженность.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадолженность, СтрокаВзаиморасчетов);
		Если СтрокаВзаиморасчетов.ДокументРасчетов <> Реквизиты.Регистратор Тогда
			НоваяСтрокаПогашениеЗадолженности = ТаблицаПогашениеЗадолженности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПогашениеЗадолженности, СтрокаВзаиморасчетов);
		КонецЕсли;
	КонецЦикла;
	
	ПоляГруппировки  = "Контрагент,ДоговорКонтрагента,ВалютаВзаиморасчетов,ПодразделениеРасчетов";
	ПоляСуммирования = "СуммаВзаиморасчетов,СуммаРубПоКурсуАванса";
	
	ТаблицаЗадолженность.Свернуть(ПоляГруппировки, ПоляСуммирования);
	ТаблицаПогашениеЗадолженности.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	ДтКтРасчетов = "Дт";
	
	Для Каждого СтрокаЗадолженность Из ТаблицаЗадолженность Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru='Расчеты по отгрузке без перехода права собственности'");
		
		Проводка.Сумма = СтрокаЗадолженность.СуммаРубПоКурсуАванса;

		Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ;

		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Контрагенты", 
			СтрокаЗадолженность.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Договоры", 
			СтрокаЗадолженность.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"ДокументыРасчетовСКонтрагентами", 
			Реквизиты.Регистратор);
			
		СвойстваСчетаУЕ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУЕ.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаЗадолженность.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаУЕ.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаЗадолженность.ПодразделениеРасчетов;
		КонецЕсли;
		Если СвойстваСчетаУЕ.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаРубПоКурсуАванса;
			Проводка["СуммаПР" + ДтКтРасчетов] = 0;
			Проводка["СуммаВР" + ДтКтРасчетов] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	ДтКтРасчетов = "Кт";
	
	Для Каждого СтрокаЗадолженность Из ТаблицаПогашениеЗадолженности Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru='Расчеты по отгрузке без перехода права собственности'");

		Проводка.Сумма = СтрокаЗадолженность.СуммаРубПоКурсуАванса;

		Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ;

		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Контрагенты", 
			СтрокаЗадолженность.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Договоры", 
			СтрокаЗадолженность.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"ДокументыРасчетовСКонтрагентами", 
			Реквизиты.Регистратор);

		СвойстваСчетаУЕ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
		Если СвойстваСчетаУЕ.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаЗадолженность.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаУЕ.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаЗадолженность.ПодразделениеРасчетов;
		КонецЕсли;
		Если СвойстваСчетаУЕ.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаРубПоКурсуАванса;
			Проводка["СуммаПР" + ДтКтРасчетов] = 0;
			Проводка["СуммаВР" + ДтКтРасчетов] = 0;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьПараметрыЗадолженностьПоОтгрузкеВУЕ(ТаблицаВзаиморасчеты, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
		+ "Контрагент,"                // <СправочникСсылка.Контрагенты> - контрагент, задолженность по которому погашается
		+ "ДоговорКонтрагента,"        // <СправочникСсылка.ДоговорыКонтрагентов> - договор, задолженность по которому погашается
		+ "ДокументРасчетов,"          // <ДокументСсылка> - документ расчетов, задолженность по которому погашается
		+ "СуммаВзаиморасчетов,"       // <Число,15,2> - сумма погашения задолженности в валюте взаиморасчетов
		+ "СуммаРубПоКурсуАванса,"     // <Число,15,2> - сумма в рублях по курсу на дату аванса
		+ "ВалютаВзаиморасчетов,"      // <СправочникСсылка.Валюты> - валюта взаиморасчетов по договору
		+ "ПодразделениеРасчетов";     // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение по счету расчетов
		
	Параметры.Вставить("Взаиморасчеты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаВзаиморасчеты, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                    // <Дата> - период движений - дата документа
		+ "Регистратор,"               // <ДокументСсылка>
		+ "Организация,"               // <СправочникСсылка.Организации>
		+ "ВидОперации,"               // <Перечисление.ВидыОперацийРеализацияТоваров> - вид операции документа
		+ "СпособЗачетаАвансов,"       // <Перечисление.СпособыЗачетаАвансов> - способ зачета авансов в документе отгрузки
		+ "РасчетыВУсловныхЕдиницах";  // <Булево> - признак договора в у.е.
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкиПогашениеЗадолженностиПриОплатеПоОтгрузкеВУЕ(СтрокаВзаиморасчетов, Реквизиты, Движения, ОтражатьВНалоговомУчете, ОсновнойВидРазниц)

	// При погашении задолженности в счет отгрузки без перехода права собственности формируют специальные проводки:
	// 1. Выделение аванса по поступившей оплате, например 51 - 62.32;
	// 2. Переквалификация аванса на специальный счет 62.ОТ в счет будующей отгрузки, например 62.32 - 62.ОТ;
	// 3. Погашение задолженности на специальном счете ОТ.
	ДтКтРасчетов = ?(Реквизиты.НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКорСчета = ?(ДтКтРасчетов = "Кт", "Дт", "Кт");
	
	// 1. Выделение аванса по поступившей оплате
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = СтрокаВзаиморасчетов.Содержание;
	
	Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;
	
	Проводка["Счет" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СчетАвансов_ОтгрузкаВУЕ;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
	
	СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
	Если СвойстваСчетаРасчетов.Валютный Тогда
		Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
	КонецЕсли;
	
	Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорСчет;
	
	Для Ном = 1 по 3 Цикл
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
			Ном, СтрокаВзаиморасчетов["КорСубконто" + Ном]);
	КонецЦикла;
	
	СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
	Если СвойстваКорСчета.Валютный Тогда
		Проводка["Валюта" + ДтКтКорСчета]        = Реквизиты.ВалютаДокумента;
		Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваКорСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
		Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
			ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
		КонецЕсли;
		Если СвойстваКорСчета.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтКорСчета] = СуммаНУ;
			ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц);
		КонецЕсли;
	КонецЕсли;
	
	// 2. Переквалификация аванса на специальный счет 62.ОТ в счет будующей отгрузки
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = НСтр("ru='Аванс по отгрузке без перехода права собственности'");
	
	Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ;
	
	Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕВСчетОтгрузки;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
	
	СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
	Если СвойстваСчетаРасчетов.Валютный Тогда
		Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваСчетаРасчетов.УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
	КонецЕсли;
	
	Проводка["Счет" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СчетАвансов_ОтгрузкаВУЕ;
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
		"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
		"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКорСчета], Проводка["Субконто" + ДтКтКорСчета],
		"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
	
	СвойстваКорСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтКорСчета]);
	Если СвойстваКорСчета.Валютный Тогда
		Проводка["Валюта" + ДтКтКорСчета]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма" + ДтКтКорСчета] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваКорСчета.УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКтКорСчета] = СтрокаВзаиморасчетов.КорПодразделение;
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		СуммаНУ = СтрокаВзаиморасчетов.СуммаНУ;
		Если СвойстваСчетаРасчетов.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтРасчетов] = СуммаНУ;
			ЗаполнитьРазницыВПроводке(Проводка, ДтКтРасчетов, ОсновнойВидРазниц);
		КонецЕсли;
		Если СвойстваКорСчета.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтКорСчета] = СуммаНУ;
			ЗаполнитьРазницыВПроводке(Проводка, ДтКтКорСчета, ОсновнойВидРазниц);
		КонецЕсли;
	КонецЕсли;
	
	// 3. Погашение задолженности на специальном счете ОТ
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Содержание   = НСтр("ru='Расчеты по отгрузке без перехода права собственности'");
	
	Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ОтгрузкаВУЕ;
	
	Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Контрагенты", СтрокаВзаиморасчетов.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов],
		"ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
	
	СвойстваСчетаОТ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);
	Если СвойстваСчетаОТ.Валютный Тогда
		Проводка["Валюта" + ДтКтРасчетов]        = СтрокаВзаиморасчетов.ВалютаВзаиморасчетов;
		Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЕсли;
	Если СвойстваСчетаОТ.УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКтРасчетов] = СтрокаВзаиморасчетов.Подразделение;
	КонецЕсли;
	Если СвойстваСчетаОТ.НалоговыйУчет Тогда
		Проводка["СуммаНУ" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаБУ_ОтгрузкаВУЕ;
		Проводка["СуммаПР" + ДтКтРасчетов] = 0;
		Проводка["СуммаВР" + ДтКтРасчетов] = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПогашениеЗадолженностиПоОтгрузкеВУЕ(ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПогашениеЗадолженностиПоОтгрузкеВУЕ(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ОстатокЗадолженности = ОстатокЗадолженностиПоОтгрузкеВУЕ(Реквизиты);
	СформироватьПроводкиПогашениеЗадолженностиПоОтгрузкеВУЕНаСчетеОТ(ОстатокЗадолженности, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыПогашениеЗадолженностиПоОтгрузкеВУЕ(ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                    // <Дата> - период движений - дата документа
		+ "Регистратор,"               // <ДокументСсылка>
		+ "Организация,"               // <СправочникСсылка.Организации>
		+ "Контрагент,"                // <СправочникСсылка.Контрагенты>
		+ "ДоговорКонтрагента,"        // <СправочникСсылка.ДоговорыКонтрагентов>
		+ "ДокументОтгрузки";          // <ДокументСсылка.РеализацияТоваровУслуг>, <ДокументСсылка.ПередачаОС>
		
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;
	
КонецФункции

Процедура СформироватьПроводкиПогашениеЗадолженностиПоОтгрузкеВУЕНаСчетеОТ(ТаблицаПогашениеЗадолженности, Реквизиты, Движения, Отказ)

	ДтКтРасчетов = "Кт";
	
	Для Каждого СтрокаЗадолженность Из ТаблицаПогашениеЗадолженности Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();

		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = НСтр("ru='Расчеты по отгрузке без перехода права собственности'");

		Проводка.Сумма = СтрокаЗадолженность.СуммаБУ;

		Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ;

		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Контрагенты", 
			СтрокаЗадолженность.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"Договоры", 
			СтрокаЗадолженность.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка["Счет" + ДтКтРасчетов], 
			Проводка["Субконто" + ДтКтРасчетов], 
			"ДокументыРасчетовСКонтрагентами", 
			СтрокаЗадолженность.ДокументРасчетов);

		СвойстваСчетаОТ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка["Счет" + ДтКтРасчетов]);

		Если СвойстваСчетаОТ.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаЗадолженность.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаВзаиморасчетов;
		КонецЕсли;
		Если СвойстваСчетаОТ.УчетПоПодразделениям Тогда
			Проводка["Подразделение" + ДтКтРасчетов] = СтрокаЗадолженность.ПодразделениеРасчетов;
		КонецЕсли;
		Если СвойстваСчетаОТ.НалоговыйУчет Тогда
			Проводка["СуммаНУ" + ДтКтРасчетов] = СтрокаЗадолженность.СуммаНУ;
			Проводка["СуммаПР" + ДтКтРасчетов] = 0;
			Проводка["СуммаВР" + ДтКтРасчетов] = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОстатокЗадолженностиПоОтгрузкеВУЕ(Реквизиты)
	
	// Блокируем регистр Хозрасчетный для получения остатков по счету ОТ
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
	ЭлементБлокировки.УстановитьЗначение("Период",      Новый Диапазон(, Реквизиты.Период));
	ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
	// Явно указываем счет и его субконто
	ЭлементБлокировки.УстановитьЗначение("Счет",        ПланыСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);
	ЭлементБлокировки.УстановитьЗначение("Субконто1",   Реквизиты.Контрагент);
	ЭлементБлокировки.УстановитьЗначение("Субконто2",   Реквизиты.ДоговорКонтрагента);
	ЭлементБлокировки.УстановитьЗначение("Субконто3",   Реквизиты.ДокументОтгрузки);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",           Реквизиты.Организация);
	Запрос.УстановитьПараметр("МоментВремениОстатков", Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов",  ВидыСубконтоРасчетов());
	Запрос.УстановитьПараметр("Контрагент",            Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Договор",               Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДокументОтгрузки",      Реквизиты.ДокументОтгрузки);
	Запрос.УстановитьПараметр("ПустоеПодразделение",   БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Текст = ТекстЗапросаОстатокЗадолженностиПоОтгрузке();
	ОстатокЗадолженности = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначенияБПВызовСервера.УпорядочитьТаблицуПоДокументу(ОстатокЗадолженности, "ДокументРасчетов", "ДатаДокументаРасчетов");

	Возврат ОстатокЗадолженности;
	
КонецФункции

Функция ТекстЗапросаОстатокЗадолженностиПоОтгрузке()
	
	Возврат 
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Валюта КАК ВалютаВзаиморасчетов,
	|	Остатки.Субконто1 КАК Контрагент,
	|	Остатки.Субконто2 КАК ДоговорКонтрагента,
	|	Остатки.Субконто3 КАК ДокументРасчетов,
	|	ЕСТЬNULL(Остатки.Подразделение, &ПустоеПодразделение) КАК ПодразделениеРасчетов,
	|	Остатки.ВалютнаяСуммаОстаток КАК СуммаВзаиморасчетов,
	|	Остатки.СуммаОстаток КАК СуммаБУ,
	|	Остатки.СуммаНУОстаток КАК СуммаНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&МоментВремениОстатков,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ),
	|			&ВидыСубконтоРасчетов,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &Договор
	|				И Субконто3 = &ДокументОтгрузки) КАК Остатки
	|ГДЕ
	|	Остатки.ВалютнаяСуммаОстаток > 0";
	
КонецФункции

#КонецОбласти

#Область ПраваДоступа

// Выполняет проверку прав пользователя на управление зачетом авансов в формах документов.
// Принимаем, что пользователю доступно управление зачетом авансов если у него есть доступ
// к специализированному документу "ДокументРасчетовСКонтрагентом".
//
// Возвращаемое значение:
//  Булево - Истина если управление разрешено.
//
Функция ПравоУправленияЗачетомАвансов() Экспорт
	
	 Возврат ПравоДоступа("Редактирование", Метаданные.Документы.ДокументРасчетовСКонтрагентом);
	
КонецФункции

#КонецОбласти
