#Область ПрограммныйИнтерфейс

// Проверяет код маркировки на соответствие шаблону табачной пачки
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Возвращаемое значение].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует табачной пачке.
Функция ЭтоКодМаркировкиТабачнойПачки(КодМаркировки, EAN = Неопределено) Экспорт

	ДлинаКодаМаркировки = СтрДлина(КодМаркировки);
	
	Если ДлинаКодаМаркировки <> 29
		И ДлинаКодаМаркировки <> 25
		И ДлинаКодаМаркировки <> 21 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	EAN = EANПоКодуМаркировки(КодМаркировки);
	Если EAN = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Алфавит = АлфавитКодаМаркировки();
	Если Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(КодМаркировки, Алфавит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону блока табачных пачек
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки.
// 	GTIN          - Строка - GTIN [Исходящий].
// 	МРЦ           - Число  - МРЦ [Исходящий].
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует блоку табачных пачек.
Функция ЭтоКодМаркировкиБлока(КодМаркировки, EAN = Неопределено, МРЦ = Неопределено) Экспорт
	
	// Код маркировки блока должен быть преобразован в формат GS1 со скобками
	Если СтрНайти(КодМаркировки, "(") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	
	Если Не РезультатРазбора.Разобран Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Обязательный элемент кода маркировки блока.
	Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
	Если Идентификатор01 = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	EAN = EANПоКодуМаркировки(Идентификатор01.Значение);
	Если EAN = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Алфавит = АлфавитКодаМаркировки();
	
	// Обязательный элемент кода маркировки блока.
	Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
	Если Идентификатор21 = Неопределено
			Или СтрДлина(Идентификатор21.Значение) <> 7
			Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор21.Значение, Алфавит) Тогда // Серийный номер
		Возврат Ложь;
	КонецЕсли;
	
	// Необязательный элемент кода маркировки блока.
	Идентификатор93 = РезультатРазбора.ДанныеШтрихкода["93"];
	Если Идентификатор93 <> Неопределено Тогда
		
		Если СтрДлина(Идентификатор93.Значение) <> 8
			Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор93.Значение, Алфавит) Тогда // Код проверки
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Необязательный элемент кода маркировки блока.
	Идентификатор8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
	Если Идентификатор8005 <> Неопределено Тогда // МРЦ
		
		Если СтрДлина(Идентификатор8005.Значение) <> 6
			Или Не ШтрихкодированиеИСКлиентСервер.КодСоответствуетАлфавиту(Идентификатор8005.Значение, Алфавит) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МРЦ = Число(Идентификатор8005.Значение) / 100;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки
// 
// Параметры:
// 	КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует логистической упаковке.
Функция ЭтоКодЛогистическойУпаковки(КодМаркировки) Экспорт
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(КодМаркировки);
	Если ЭтоGTIN Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодGS1(КодМаркировки)
		Или СтрДлина(КодМаркировки) = СтрДлина("0460620308584220001118022SA1TmcY4JDfrR");
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону логистической упаковки или блока.
// 
// Параметры:
// 	КодМаркировки - Строка - Штрихкод.
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует логистической упаковке или коду блока.
Функция ЭтоКодУпаковки(КодМаркировки) Экспорт
	
	Возврат ЭтоКодМаркировкиБлока(КодМаркировки) Или ЭтоКодЛогистическойУпаковки(КодМаркировки);
	
КонецФункции

// Возвращает состав кода маркировки табачной пачки или табачного блока.
// 
// Параметры:
//  КодМаркировки - Строка - код маркировки табачной пачки или блока.
// Возвращаемое значение:
//  Неопределено, Структура - Описание:
// * ГрупповаяУпаковка - Булево - Истина, если код маркировки является кодом блока, Ложь - кодом пачки.
// * GTIN - Строка - GTIN табачной продукции.
// * Серия - Строка - серийный номер.
// * МРЦ - Число - Максимальная розничная цена.
// * КодПроверки - Строка - Код проверки групповой упаковки.
Функция СоставКодаМаркировки(КодМаркировки) Экспорт
	
	СоставКодаМаркировки = Новый Структура("ГрупповаяУпаковка, GTIN, СерийныйНомер, МРЦ, КодПроверки");
	
	Если ЭтоКодМаркировкиБлока(КодМаркировки) Тогда
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		СоставКодаМаркировки.ГрупповаяУпаковка = Истина;
		ДанныеШтрихкода01   = РезультатРазбора.ДанныеШтрихкода["01"];
		ДанныеШтрихкода21   = РезультатРазбора.ДанныеШтрихкода["21"];
		ДанныеШтрихкода92   = РезультатРазбора.ДанныеШтрихкода["92"];
		ДанныеШтрихкода93   = РезультатРазбора.ДанныеШтрихкода["93"];
		ДанныеШтрихкода8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
		
		Если ДанныеШтрихкода01 <> Неопределено Тогда
			СоставКодаМаркировки.GTIN = ДанныеШтрихкода01.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода21 <> Неопределено Тогда
			СоставКодаМаркировки.СерийныйНомер = ДанныеШтрихкода21.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода92 <> Неопределено Тогда
			СоставКодаМаркировки.КодПроверки = ДанныеШтрихкода92.Значение;
		ИначеЕсли ДанныеШтрихкода93 <> Неопределено Тогда
			СоставКодаМаркировки.КодПроверки = ДанныеШтрихкода93.Значение;
		КонецЕсли;
		
		Если ДанныеШтрихкода8005 <> Неопределено Тогда
			СоставКодаМаркировки.МРЦ = ДанныеШтрихкода8005.Значение;
		КонецЕсли;
		
	ИначеЕсли ЭтоКодМаркировкиТабачнойПачки(КодМаркировки) Тогда
		
		СоставКодаМаркировки.ГрупповаяУпаковка = Ложь;
		СоставКодаМаркировки.GTIN              = Лев(КодМаркировки, 14);
		СоставКодаМаркировки.СерийныйНомер     = Сред(КодМаркировки, 15, 7);
		СоставКодаМаркировки.КодПроверки       = Сред(КодМаркировки, 22);
		СоставКодаМаркировки.МРЦ               = МРЦКодаМаркировкиТабачнойПачки(КодМаркировки);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат СоставКодаМаркировки;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция EANПоКодуМаркировки(КодМаркировки) Экспорт
	
	ДанныеGTIN = Лев(КодМаркировки, 14);
	
	ЭтоGTIN = МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ДанныеGTIN);
	Если Не ЭтоGTIN Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	EAN = ШтрихкодEANИзGTIN(ДанныеGTIN);
	
	Возврат EAN;
	
КонецФункции

// Вычисляет штрихкод EAN из GTIN.
// 
// Параметры:
// 	GTIN - Строка - GTIN.
// Возвращаемое значение:
// 	Строка - Вычисленное значение EAN.
Функция ШтрихкодEANИзGTIN(GTIN) Экспорт
	
	// Пытаемся получить штрикод EAN8 или EAN13 из GTIN.
	Пока Лев(GTIN, 1) = "0" И СтрДлина(GTIN) > 8 Цикл
		GTIN = Сред(GTIN, 2);
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

Процедура ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования) Экспорт
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная"));
	
	КонтролироватьСтатусы = ИнтеграцияМОТПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки();
	
	ПараметрыСканирования.Вставить("АдресСоответствияКодовМаркировки",           Неопределено);
	ПараметрыСканирования.Вставить("Организация",                                Неопределено);
	ПараметрыСканирования.Вставить("Контрагент",                                 Неопределено);
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения",               Неопределено);
	ПараметрыСканирования.Вставить("ЗапрашиватьСтатусыМОТП",                     КонтролироватьСтатусы);
	ПараметрыСканирования.Вставить("ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП", КонтролироватьСтатусы);
	ПараметрыСканирования.Вставить("ДопустимыеСтатусыМОТП",                      Новый Массив);
	ПараметрыСканирования.Вставить("Детализация",                                Неопределено);
	ПараметрыСканирования.Вставить("Склад",                                      Неопределено);
	ПараметрыСканирования.Вставить("СопоставлятьНоменклатуру",                   Истина);
	ПараметрыСканирования.Вставить("ПараметрыУказанияСерий",                     Неопределено);
	ПараметрыСканирования.Вставить("ЗаписыватьНеизвестныеШтрихкодыУпаковок",     Истина);
	ПараметрыСканирования.Вставить("ИННВладельца",                               "");
	
КонецПроцедуры

Процедура ДополнитьКоллекциюРезультатаОбработкиШтрихкода(РезультатОбработкиШтрихкода, ДанныеШтрихкода) Экспорт
	
	РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизация");
	
КонецПроцедуры

Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода) Экспорт

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеШтрихкода.ДополнительныеПараметры;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапомнитьВыбор")
		И ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		Если ДополнительныеПараметры.Свойство("ДанныеВыбора")
			И ТипЗнч(ДополнительныеПараметры.ДанныеВыбора) = Тип("Структура") Тогда
		
			Форма.ДанныеВыбораПоМаркируемойПродукции = ДополнительныеПараметры.ДанныеВыбора;
			Форма.СохраненВыборПоМаркируемойПродукции = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вычисляет МРЦ из кода маркировки блока табачных пачек.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки блока.
// Возвращаемое значение:
// 	Число, Неопределено - МРЦ.
Функция МРЦКодаМаркировкиБлока(КодМаркировки) Экспорт
	
	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
	
	Если Не РезультатРазбора.Разобран Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Идентификатор8005 = РезультатРазбора.ДанныеШтрихкода["8005"];
		Если Идентификатор8005 <> Неопределено И СтрДлина(Идентификатор8005.Значение) = 6 Тогда
			
			МРЦ = Число(Идентификатор8005.Значение) / 100;
			
			Возврат МРЦ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Вычисляет МРЦ из кода маркировки табачной пачки.
// 
// Параметры:
// 	КодМаркировки - Строка - Код маркировки табачной пачки.
// Возвращаемое значение:
// 	Неопределено, Число - МРЦ.
Функция МРЦКодаМаркировкиТабачнойПачки(КодМаркировки) Экспорт
	
	ДлинаКода = СтрДлина(КодМаркировки);
	
	Если ДлинаКода <> 29 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаМРЦ = Сред(КодМаркировки, 22, 4);
	
	Алфавит = АлфавитКодаМаркировки();
	
	МРЦ    = 0;
	Индекс = 1;
	Пока Индекс <= 4 Цикл
		
		Символ = Сред(СтрокаМРЦ, Индекс, 1);
		ИндексСимвола = СтрНайти(Алфавит, Символ) - 1;
		Если ИндексСимвола < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МРЦ = МРЦ + Pow(80, 4 - Индекс) * ИндексСимвола;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	// Если цена <= 5000 и нет копеек, то высокая вероятность, что это реальное МРЦ.
	Если МРЦ <= 500000
		И МРЦ%100 = 0 Тогда
		Возврат МРЦ / 100;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НормализоватьКодМаркировки(Знач КодМаркировки) Экспорт
	
	НормализованныйКод = КодМаркировки;
	Если ЭтоКодМаркировкиБлока(КодМаркировки) Тогда
		
		ШаблонНормализованногоКодаБлока = "(01)%1(21)%2";
		
		РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(КодМаркировки);
		Идентификатор01 = РезультатРазбора.ДанныеШтрихкода["01"];
		Идентификатор21 = РезультатРазбора.ДанныеШтрихкода["21"];
		
		НормализованныйКод = СтрШаблон(ШаблонНормализованногоКодаБлока, Идентификатор01.Значение, Идентификатор21.Значение);
		
	ИначеЕсли ЭтоКодМаркировкиТабачнойПачки(КодМаркировки) Тогда
		
		НормализованныйКод = Лев(КодМаркировки, 21);
		
	КонецЕсли;
	
	Возврат НормализованныйКод;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция АлфавитКодамаркировки()
	
	Возврат "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!""%&'*+-./_,:;=<>?";
	
КонецФункции

#КонецОбласти