
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

// Обработчик регламентного задания "Выгрузка данных для мобильного устройства".
//
// Параметры:
//  КодНастройки - код настройки выгрузки для мобильного приложения.
//
Процедура ВыгрузитьДанныеДляМобильногоПриложения(КодНастройки) Экспорт
	
	Если КодНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаПодключения = Справочники.УПЖКХ_НастройкиВыгрузкиДляМобильногоПриложения.НайтиПоКоду(КодНастройки);
	
	Если НастройкаПодключения = Справочники.УПЖКХ_НастройкиВыгрузкиДляМобильногоПриложения.ПустаяСсылка()
	 ИЛИ НастройкаПодключения.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузкуДанных(НастройкаПодключения);
	
КонецПроцедуры // ВыгрузитьДанныеДляМобильногоПриложения()

// Выполняет выгрузку на сервер двух файлов с данными.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.УПЖКХ_НастройкиВыгрузкиДляМобильногоПриложения - ссылка на элемент справочника.
//  УспешностьВыгрузки - БУЛЕВО - флаг успешности выгрузки.
//  КоличествоПопыток - ЧИСЛО - количество попыток передачи файла на сервер.
//
Процедура ВыполнитьВыгрузкуДанных(НастройкаПодключения, УспешностьВыгрузки = Ложь, КоличествоПопыток = 10) Экспорт
	
	Счетчик = 0;
	УспешностьВыгрузкиПолногоФайла = Ложь;
	
	СтруктураДанных = ПолучитьСтруктуруСДанными(НастройкаПодключения.Организация);
	
	Пока НЕ УспешностьВыгрузкиПолногоФайла И Счетчик < КоличествоПопыток Цикл
		ЗаписатьПолныйФайл(НастройкаПодключения, СтруктураДанных, УспешностьВыгрузкиПолногоФайла);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Счетчик = 0;
	УспешностьВыгрузкиУрезанногоФайла = Ложь;
	
	Пока НЕ УспешностьВыгрузкиУрезанногоФайла И Счетчик < КоличествоПопыток Цикл
		ЗаписатьУрезанный(НастройкаПодключения, СтруктураДанных, УспешностьВыгрузкиУрезанногоФайла);
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если УспешностьВыгрузкиПолногоФайла И УспешностьВыгрузкиУрезанногоФайла Тогда
		УспешностьВыгрузки = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьВыгрузкуДанных()

// Открывает страницу скачивания мобильного приложения "Новости ВДГБ СОФТ".
//
Процедура СсылкаНаСкачиваниеМобильногоПриложенияНовостиВДГБ() Экспорт
	
	Попытка
		ЗапуститьПриложение("https://play.google.com/store/apps/details?id=com.vdgb.vdgbapp");
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры // СсылкаНаСкачиваниеМобильногоПриложенияНовостиВДГБ()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СБОРА ДАННЫХ

#Область ПроцедурыИФункцииСбораДанных

// Получает структуру с данными, необходимыми для выгрузки.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой выгружаются данные.
//
// Возвращаемое значение:
//  Структура - структура с данными.
//
Функция ПолучитьСтруктуруСДанными(Организация)
	
	Структура = Новый Структура;
	
	// Вспомогательные данные
	Структура.Вставить("НазваниеОрганизации",        Организация.Наименование);
	Структура.Вставить("ТекущаяДата",                ТекущаяДата());
	Структура.Вставить("ТаблицаПериодов",            ПолучитьТаблицуПериодов(Структура.ТекущаяДата));
	Структура.Вставить("МассивТрехДней",             ПолучитьМассивТрехДней(Структура.ТекущаяДата));
	Структура.Вставить("НачальнаяДата",              Структура.ТаблицаПериодов[0].Дата);
	Структура.Вставить("ТриДняНазад",                Структура.ТаблицаПериодов[Структура.ТаблицаПериодов.Количество() - 4].Дата);
	Структура.Вставить("ТриМесяцаНазад",             НачалоМесяца(ДобавитьМесяц(Структура.ТекущаяДата, -3)));
	Структура.Вставить("КонецПрошлогоМесяца",        НачалоМесяца(Структура.ТекущаяДата) - 1);
	
	// Основные данные
	Структура.Вставить("СтруктураНачальногоСальдо",  ПолучитьСтруктуруНачальногоСальдо(Организация, Структура.НачальнаяДата));
	Структура.Вставить("ТаблицаКонечногоСальдо",     ПолучитьТаблицуКонечногоСальдо(Организация, Структура.ТекущаяДата));
	Структура.Вставить("ТаблицаОборотов",            ПолучитьТаблицуОборотов(Организация, Структура.НачальнаяДата, Структура.ТекущаяДата));
	
	// КАССА
	Структура.Вставить("ТаблицаОстатков50",          ПолучитьТаблицуОстатков(Структура.СтруктураНачальногоСальдо, Структура.ТаблицаОборотов, Структура.ТаблицаПериодов, ПланыСчетов.Хозрасчетный.КассаОрганизации));
	Структура.Вставить("ТекущийОстаток50",           ПолучитьТекущийОстаток(Структура.ТаблицаОстатков50));
	
	// КАССА ВАЛЮТА
	Структура.Вставить("ТаблицаОстатков5021",        ПолучитьТаблицуОстатков(Структура.СтруктураНачальногоСальдо, Структура.ТаблицаОборотов, Структура.ТаблицаПериодов, ПланыСчетов.Хозрасчетный.КассаОрганизацииВал));
	Структура.Вставить("ТекущийОстаток5021",         ПолучитьТекущийОстаток(Структура.ТаблицаОстатков5021));
	
	// РАСЧ СЧЕТА
	Структура.Вставить("ТаблицаОстатков51",          ПолучитьТаблицуОстатков(Структура.СтруктураНачальногоСальдо, Структура.ТаблицаОборотов, Структура.ТаблицаПериодов, ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	Структура.Вставить("ТекущийОстаток51",           ПолучитьТекущийОстаток(Структура.ТаблицаОстатков51));
	
	// РАСЧ ВАЛЮТА
	Структура.Вставить("ТаблицаОстатков52",          ПолучитьТаблицуОстатков(Структура.СтруктураНачальногоСальдо, Структура.ТаблицаОборотов, Структура.ТаблицаПериодов, ПланыСчетов.Хозрасчетный.ВалютныеСчета));
	Структура.Вставить("ТекущийОстаток52",           ПолучитьТекущийОстаток(Структура.ТаблицаОстатков52));
	
	// РАСЧ СПЕЦ СЧЕТА
	Структура.Вставить("ТаблицаОстатков55",          ПолучитьТаблицуОстатков(Структура.СтруктураНачальногоСальдо, Структура.ТаблицаОборотов, Структура.ТаблицаПериодов, ПланыСчетов.Хозрасчетный.СпециальныеСчета));
	Структура.Вставить("ТекущийОстаток55",           ПолучитьТекущийОстаток(Структура.ТаблицаОстатков55));
	
	// КАССА
	Структура.Вставить("ТаблицаОстатков50Аналитика",   ПолучитьТаблицуОстатковПоАналитке(Структура.ТаблицаКонечногоСальдо, ПланыСчетов.Хозрасчетный.КассаОрганизации));
	
	// КАССА ВАЛ
	Структура.Вставить("ТаблицаОстатков5021Аналитика", ПолучитьТаблицуОстатковПоАналитке(Структура.ТаблицаКонечногоСальдо, ПланыСчетов.Хозрасчетный.КассаОрганизацииВал));
	
	// РАСЧ СЧЕТА
	Структура.Вставить("ТаблицаОстатков51Аналитика",   ПолучитьТаблицуОстатковПоАналитке(Структура.ТаблицаКонечногоСальдо, ПланыСчетов.Хозрасчетный.РасчетныеСчета));
	
	// РАСЧ СЧЕТА ВАЛЮТНЫЕ
	Структура.Вставить("ТаблицаОстатков52Аналитика",   ПолучитьТаблицуОстатковПоАналитке(Структура.ТаблицаКонечногоСальдо, ПланыСчетов.Хозрасчетный.ВалютныеСчета));
	
	// РАСЧ СЧЕТА СПЕЦИАЛЬНЫЕ
	Структура.Вставить("ТаблицаОстатков55Аналитика",   ПолучитьТаблицуОстатковПоАналитке(Структура.ТаблицаКонечногоСальдо, ПланыСчетов.Хозрасчетный.СпециальныеСчета));
	
	Структура.Вставить("ТаблицаПоступлений",         ПолучитьПоступленияНаСчет(Организация, Структура.ТекущаяДата, Структура.ТриДняНазад));
	Структура.Вставить("ТаблицаСписаний",            ПолучитьСписанияСоСчета(Организация, Структура.ТекущаяДата, Структура.ТриДняНазад));
	Структура.Вставить("ЗадолженностьПокупателей",   ПолучитьЗадолженостьПокупателей(Организация, Структура.ТекущаяДата));
	Структура.Вставить("ЗадолженностьПоставщикам",   ПолучитьЗадолженостьПоставщикам(Организация, Структура.ТекущаяДата));
	
	// Дополнительные данные
	Структура.Вставить("ТаблицаСчетчиков",           ПолучитьТаблицуСчетчиков(Организация, Структура.ТекущаяДата));
	Структура.Вставить("ТаблицаНачисленийОбщ",       ПолучитьТаблицуНачислений(Организация, Структура.ТриМесяцаНазад, Структура.КонецПрошлогоМесяца));
	Структура.Вставить("СуммаОплатПред",             ПолучитьСуммуОплатЗаПредыдущиеМесяцы(Структура.ТаблицаНачисленийОбщ, Структура.ТриМесяцаНазад));
	Структура.Вставить("ТаблицаОплат",               ПолучитьТаблицуОплаты(Структура.ТаблицаНачисленийОбщ, Структура.ТриМесяцаНазад));
	Структура.Вставить("ТаблицаНачислений",          ПолучитьТаблицуНачисленийЗаПериод(Структура.ТаблицаНачисленийОбщ.Скопировать()));
	Структура.Вставить("СтруктураОстатков",          ПолучитьСтруктуруОстатков(Организация, Структура.ТриМесяцаНазад, Структура.КонецПрошлогоМесяца));
	Структура.Вставить("СтруктураДомов",             ПолучитьСтруктуруНачисленийПоДомам(Организация, Структура.ТекущаяДата));
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруСДанными()

// Получает структуру с начальным сальдо по счетам 50.01, 50.21, 51, 52 и 55.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой ищем сальдо.
//  НачальнаяДата - ДАТА - дата, по состоянию на которую ищем сальдо.
//
// Возвращаемое значение:
//  Структура - структура с начальным сальдо.
//
Функция ПолучитьСтруктуруНачальногоСальдо(Организация, НачальнаяДата)
	
	Структура = Новый Структура("НачальныйОстаток50, НачальныйОстаток5021, НачальныйОстаток51, НачальныйОстаток52, НачальныйОстаток55", 0, 0, 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет
	|	КОНЕЦ КАК Счет,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК НачальныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ИЛИ Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачальнаяДата));
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// КАССА
	Строка50 = Таблица.Найти(ПланыСчетов.Хозрасчетный.КассаОрганизации, "Счет");
	Если НЕ Строка50 = Неопределено Тогда
		Структура.НачальныйОстаток50 = Строка50.НачальныйОстаток;
	КонецЕсли;
	
	// КАССА ВАЛЮТА
	Строка5021 = Таблица.Найти(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал, "Счет");
	Если НЕ Строка5021 = Неопределено Тогда
		Структура.НачальныйОстаток5021 = Строка5021.НачальныйОстаток;
	КонецЕсли;
	
	// РАСЧ СЧЕТ
	Строка51 = Таблица.Найти(ПланыСчетов.Хозрасчетный.РасчетныеСчета, "Счет");
	Если НЕ Строка51 = Неопределено Тогда
		Структура.НачальныйОстаток51 = Строка51.НачальныйОстаток;
	КонецЕсли;
	
	// РАСЧ СЧЕТ ВАЛЮТА
	Строка52 = Таблица.Найти(ПланыСчетов.Хозрасчетный.ВалютныеСчета, "Счет");
	Если НЕ Строка52 = Неопределено Тогда
		Структура.НачальныйОстаток52 = Строка52.НачальныйОстаток;
	КонецЕсли;
	
	// РАСЧ СЧЕТ СПЕЦСЧЕТА
	Строка55 = Таблица.Найти(ПланыСчетов.Хозрасчетный.СпециальныеСчета, "Счет");
	Если НЕ Строка55 = Неопределено Тогда
		Структура.НачальныйОстаток55 = Строка55.НачальныйОстаток;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруНачальногоСальдо()

// Получает таблицу с конечным сальдо в разрезе аналитики по счетам 50.01, 50.21, 51, 52 и 55.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой ищем сальдо.
//  ТекущаяДата - ДАТА - дата, по состоянию на которую ищем сальдо.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с конечным сальдо в разрезе аналитики.
//
Функция ПолучитьТаблицуКонечногоСальдо(Организация, ТекущаяДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет
	|	КОНЕЦ КАК Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|				ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|			ТОГДА ХозрасчетныйОстатки.Счет.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.БанковскиеСчета).Наименование
	|	КОНЕЦ КАК Аналитика,
	|	СУММА(ХозрасчетныйОстатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ТекущаяДата,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ИЛИ Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОстатки.Счет
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|				ИЛИ ХозрасчетныйОстатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|			ТОГДА ХозрасчетныйОстатки.Счет.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК Справочник.БанковскиеСчета).Наименование
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуКонечногоСальдо()

// Получает таблицу с оборотами по счетам 50.01, 50.21, 51, 52 и 55.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой ищем обороты.
//  НачальнаяДата - ДАТА - начальная дата поиска.
//  ТекущаяДата - ДАТА - конечная дата поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с оборотами.
//
Функция ПолучитьТаблицуОборотов(Организация, НачальнаяДата, ТекущаяДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, ДЕНЬ) КАК Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет
	|	КОНЕЦ КАК Счет,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборот) КАК СуммаОборота
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизации)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.КассаОрганизацииВал)
	|				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета)
	|				ИЛИ Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Родитель = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета)
	|		ИНАЧЕ ХозрасчетныйОбороты.Счет
	|	КОНЕЦ,
	|	КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачальнаяДата));
	Запрос.УстановитьПараметр("КонецПериода",  ТекущаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуОборотов()

// Получает таблицу с остатками по счету за последние 30 дней.
//
// Параметры:
//  СтруктураНачальногоСальдо - Структура - структура с начальным сальдо.
//  ТаблицаОборотов - ТаблицаЗначений - таблица с оборотами.
//  ТаблицаПериодов - ТаблицаЗначений - таблица с датами, соответствующими последним 30 дням.
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет, по которому формируем остатки.
//
// Возвращаемое значение:
//  ТаблицаЗначение - таблица с остатками.
//
Функция ПолучитьТаблицуОстатков(СтруктураНачальногоСальдо, ТаблицаОборотов, ТаблицаПериодов, Счет)
	
	ТаблицаОстатков = Новый ТаблицаЗначений;
	ТаблицаОстатков.Колонки.Добавить("Дата",   Новый ОписаниеТипов("Дата"));
	ТаблицаОстатков.Колонки.Добавить("Сальдо", Новый ОписаниеТипов("Число"));
	
	ТаблицаОборотовПоСчету = ТаблицаОборотов.Скопировать(ТаблицаОборотов.НайтиСтроки(Новый Структура("Счет", Счет)));
	
	Если Счет = ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
		
		НачальноеСальдо = СтруктураНачальногоСальдо.НачальныйОстаток50;
		
	ИначеЕсли Счет = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал Тогда
		
		НачальноеСальдо = СтруктураНачальногоСальдо.НачальныйОстаток5021;
		
	ИначеЕсли Счет = ПланыСчетов.Хозрасчетный.РасчетныеСчета Тогда
		
		НачальноеСальдо = СтруктураНачальногоСальдо.НачальныйОстаток51;
		
	ИначеЕсли Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета Тогда
		
		НачальноеСальдо = СтруктураНачальногоСальдо.НачальныйОстаток52;
		
	Иначе
		
		НачальноеСальдо = СтруктураНачальногоСальдо.НачальныйОстаток55;
		
	КонецЕсли;
	
	ПерваяСтрока = Истина;
	
	Для Каждого СтрокаПериода Из ТаблицаПериодов Цикл
		НоваяСтрока = ТаблицаОстатков.Добавить();
		
		НоваяСтрока.Дата = СтрокаПериода.Дата;
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			
			НоваяСтрока.Сальдо = НачальноеСальдо;
			
		Иначе
			СтрокаОборотов = ТаблицаОборотовПоСчету.Найти(СтрокаПериода.Дата, "Период");
			СуммаОборота   = ?(СтрокаОборотов = Неопределено, 0, СтрокаОборотов.СуммаОборота);
			
			НоваяСтрока.Сальдо = НачальноеСальдо + СуммаОборота;
			
		КонецЕсли;
		
		НачальноеСальдо = НоваяСтрока.Сальдо;
		
	КонецЦикла;
	
	ТаблицаОстатков.Сортировать("Дата Возр");
	
	Возврат ТаблицаОстатков;
	
КонецФункции // ПолучитьТаблицуОстатков50()

// Получает остаток по счету на текущую дату.
//
// Параметры:
//  ТаблицаОстатков - ТаблицаЗначений - таблица с остатками по счетам.
//
// Возвращаемое значение:
//  Число - остаток по счету.
//
Функция ПолучитьТекущийОстаток(ТаблицаОстатков)
	
	Если ТаблицаОстатков.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		Возврат ТаблицаОстатков.Получить(ТаблицаОстатков.Количество() - 1).Сальдо;
	КонецЕсли;
	
КонецФункции // ПолучитьТекущийОстаток()

// Получает таблицу с остатками по определенному счету.
//
// Парметры:
//  ТаблицаОстатков - ТаблицаЗначений - таблица с остатками по всем счетам.
//  Счет - ПланСчетовСсылка.Хозрасчетный - счет, по которому формируем остатки.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с остатками по счету.
// 
Функция ПолучитьТаблицуОстатковПоАналитке(ТаблицаОстатков, Счет)
	
	Возврат ТаблицаОстатков.Скопировать(ТаблицаОстатков.НайтиСтроки(Новый Структура("Счет", Счет)));
	
КонецФункции // ПолучитьТаблицуОстатковПоАналитке()

// Получает таблицу с датами в хронолическом порядке.
//
// Параметры:
//  ТекущаяДата - Дата - самая старшая дата, которая должна быть в таблице.
//  ВсегоДней - Число - количество дат, которые должны быть в таблице.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с датами.
//
Функция ПолучитьТаблицуПериодов(Знач ТекущаяДата, ВсегоДней = 30)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	ОдинДень = 60 * 60 * 24;
	
	Для Счетчик = 0 По ВсегоДней Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = КонецДня(ТекущаяДата - (Счетчик * ОдинДень));
	КонецЦикла;
	
	Таблица.Сортировать("Дата Возр");
	
	Возврат Таблица;
	
КонецФункции // ПолучитьТаблицуПериодов()

// Получает массив с тремя датами в хронолическом порядке.
//
// Параметры:
//  ТекущаяДата - самая старшая дата, которая должна быть в массиве.
//
// Возвращаемое значение:
//  Массив - массив с датами.
//
Функция ПолучитьМассивТрехДней(ТекущаяДата)
	
	День    = 60 * 60 * 24;
	
	Массив = Новый Массив;
	Массив.Добавить(ТекущаяДата);
	Массив.Добавить(ТекущаяДата - День);
	Массив.Добавить(ТекущаяДата - День - День);
	
	Возврат Массив;
	
КонецФункции // ПолучитьМассивТрехДней()

// Получает таблицу с поступлениями за последние три дня в разрезе контрагентов.
//
// Парметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой надо найти поступления.
//  ТекущаяДата - Дата - конец периода.
//  ТриДняНазад - Дата - начало периода.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с поступлениями.
//
Функция ПолучитьПоступленияНаСчет(Организация, ТекущаяДата, ТриДняНазад)
	
	СчетаДт = Новый Массив;
	СчетаДт.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДт.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДт.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	СчетаДСи000 = Новый Массив;
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.Вспомогательный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Дата,
	|	КОНЕЦПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, ДЕНЬ) КАК КонецДня,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """") <> """"
	|			ТОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """")
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.Содержание
	|	КОНЕЦ КАК Коментарий,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0)) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачДата,
	|			&КонДата,
	|			СчетДт В ИЕРАРХИИ (&СчетДт)
	|				И Организация = &Организация
	|				И НЕ СчетКт В ИЕРАРХИИ (&СчетаДСи000),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """") <> """"
	|			ТОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """")
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.Содержание
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Период УБЫВ";
	
	Запрос.УстановитьПараметр("НачДата",     ТриДняНазад);
	Запрос.УстановитьПараметр("КонДата",     ТекущаяДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетДт",	     СчетаДт);
	Запрос.УстановитьПараметр("СчетаДСи000", СчетаДСи000);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьПоступленияНаСчет()

// Получает таблицу со списанием за последние три дня в разрезе контрагентов.
//
// Парметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой надо найти списания.
//  ТекущаяДата - Дата - конец периода.
//  ТриДняНазад - Дата - начало периода.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со списанием.
//
Функция ПолучитьСписанияСоСчета(Организация, ТекущаяДата, ТриДняНазад)
	
	СчетаКт = Новый Массив;
	СчетаКт.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаКт.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаКт.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	
	СчетаДСи000 = Новый Массив;
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаПлатежногоАгента);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
	СчетаДСи000.Добавить(ПланыСчетов.Хозрасчетный.Вспомогательный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Дата,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """") <> """"
	|			ТОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """")
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.Содержание
	|	КОНЕЦ КАК Коментарий,
	|	СУММА(ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0)) КАК Сумма,
	|	КОНЕЦПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, ДЕНЬ) КАК КонецДня
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачДата,
	|			&КонДата,
	|			СчетКт В ИЕРАРХИИ (&СчетКт)
	|				И Организация = &Организация
	|				И НЕ СчетДт В ИЕРАРХИИ (&СчетаДСи000),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3 ССЫЛКА Справочник.БанковскиеСчета
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """") <> """"
	|			ТОГДА ЕСТЬNULL(ПОДСТРОКА(ХозрасчетныйДвиженияССубконто.Регистратор.НазначениеПлатежа, 1, 300), """")
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.Содержание
	|	КОНЕЦ,
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Период УБЫВ";
	
	Запрос.УстановитьПараметр("НачДата",     ТриДняНазад);
	Запрос.УстановитьПараметр("КонДата",     ТекущаяДата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетКт",	     СчетаКт);
	Запрос.УстановитьПараметр("СчетаДСи000", СчетаДСи000);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьСписанияСоСчета()

// Получает задолженность покупателей перед организацией на определенную дату.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой надо найти задолженность.
//  ТекущаяДата - Дата - дата, по состоянию на которую ищем задолженность.
//
// Возвращаемое значение:
//  Число - задолженность покупателей.
//
Функция ПолучитьЗадолженостьПокупателей(Организация, ТекущаяДата)
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1);
	
	ВидыСубконтоКД = Новый Массив;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт) КАК Задолженность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ТекущаяДата,
	|			НЕ Счет.Забалансовый
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку))
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("ТекущаяДата",      ТекущаяДата);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	Запрос.УстановитьПараметр("ВидыСубконтоКД",   ВидыСубконтоКД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Задолженность;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьЗадолженостьПокупателей()

// Получает задолженность организации перед поставщиками на определенную дату.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой надо найти задолженность.
//  ТекущаяДата - Дата - дата, по состоянию на которую ищем задолженность.
//
// Возвращаемое значение:
//  Число - задолженность поставщикам.
//
Функция ПолучитьЗадолженостьПоставщикам(Организация, ТекущаяДата)
	
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = БухгалтерскиеОтчетыВызовСервера.ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(2);
	
	ВидыСубконтоКД = Новый Массив;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт) КАК Задолженность
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ТекущаяДата,
	|			НЕ Счет.Забалансовый
	|				И НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета),
	|			&ВидыСубконтоКД,
	|			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку))
	|				И Организация = &Организация) КАК ХозрасчетныйОстатки";
	Запрос.УстановитьПараметр("ТекущаяДата",      ТекущаяДата);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
	Запрос.УстановитьПараметр("ВидыСубконтоКД",   ВидыСубконтоКД);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Задолженность;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьЗадолженостьПоставщикам()

// Получает таблицу со сведениями по счетчикам на определенную дату.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой ищем сведения.
//  ТекущаяДата - Дата - дата, по состоянию на которую ищем сведения.
//
// Параметры:
//  ТаблицаЗначений - таблица со сведениями по счетчикам.
//
Функция ПолучитьТаблицуСчетчиков(Организация, ТекущаяДата)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ТекущаяДата,
	|			Организация = &Организация
	|				И ДатаИзменения < &ТекущаяДата) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Здания
	|				ИЛИ КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОПУ
	|ПОМЕСТИТЬ втСчетчикиСрез
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&НачалоМесяца,
	|			Счетчик.ВидУслуги В
	|				(ВЫБРАТЬ
	|					втУслуги.Услуга
	|				ИЗ
	|					втУслуги КАК втУслуги)
	|				И ДатаИзменения <= &НачалоМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчики.Счетчик,
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Здания
	|				ИЛИ КВП_ЗакрепленныеСчетчики.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяОПУ
	|ПОМЕСТИТЬ втСчетчикиОбороты
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &НачалоМесяца И &ТекущаяДата
	|	И КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В
	|			(ВЫБРАТЬ
	|				втУслуги.Услуга
	|			ИЗ
	|				втУслуги КАК втУслуги)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСчетчикиОбороты.Счетчик, втСчетчикиСрез.Счетчик) КАК Счетчик,
	|	ЕСТЬNULL(втСчетчикиОбороты.ЯвляетсяОПУ, втСчетчикиСрез.ЯвляетсяОПУ) КАК ЯвляетсяОПУ
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	втСчетчикиСрез КАК втСчетчикиСрез
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСчетчикиОбороты КАК втСчетчикиОбороты
	|		ПО втСчетчикиСрез.Счетчик = втСчетчикиОбороты.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период
	|ПОМЕСТИТЬ втПоказания
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&ТекущаяДата,
	|			Счетчик В
	|				(ВЫБРАТЬ
	|					втСчетчики.Счетчик
	|				ИЗ
	|					втСчетчики КАК втСчетчики)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетчики.ЯвляетсяОПУ,
	|	ВЫБОР
	|		КОГДА втПоказания.Период ЕСТЬ NULL 
	|				ИЛИ втПоказания.Период < &НачалоМесяца
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БылиПоказания,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втСчетчики.Счетчик) КАК Количество
	|ИЗ
	|	втСчетчики КАК втСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказания КАК втПоказания
	|		ПО втСчетчики.Счетчик = втПоказания.Счетчик
	|
	|СГРУППИРОВАТЬ ПО
	|	втСчетчики.ЯвляетсяОПУ,
	|	ВЫБОР
	|		КОГДА втПоказания.Период ЕСТЬ NULL 
	|				ИЛИ втПоказания.Период < &НачалоМесяца
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата));
	Запрос.УстановитьПараметр("ТекущаяДата",  ТекущаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСчетчиков()

// Получает таблицу со сведениями по начислениям за определенный период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой ищем сведения.
//  НачалоПериода - Дата - начальная дата.
//  КонецПериода - Дата - конечная дата.
//
// Параметры:
//  ТаблицаЗначений - таблица со сведениями по начислениям.
//
Функция ПолучитьТаблицуНачислений(Организация, НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаты,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(&НачалоПериода, &КонецПериода, Запись, Организация = &Организация) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ),
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления";
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНачислений()

// Получает структуру с остатками на определенные даты.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой ищем остатки.
//  НачалоПериода - Дата - начальная дата.
//  КонецПериода - Дата - конечная дата.
//
// Возвращаемое значение:
//  Структура - структура с остатками.
//
Функция ПолучитьСтруктуруОстатков(Организация, НачалоПериода, КонецПериода)
	
	Структура = Новый Структура("НачальныйОстаток, КонечныйОстаток", 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК НачальныйОстаток,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК КонечныйОстаток
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Структура.НачальныйОстаток = Выборка.НачальныйОстаток;
		Структура.КонечныйОстаток  = Выборка.КонечныйОстаток;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруОстатков()

// Получает структуру со сведениями о количестве домов, по которым уже произведены начисления в
// определенному месяце.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, в разрезе которой ищем сведения.
//  ТекущаяДата - Дата - дата, по состоянию на которую ищем сведения.
//
// Возвращаемое значение:
//  Структура - структура со сведениями.
//
Функция ПолучитьСтруктуруНачисленийПоДомам(Организация, ТекущаяДата)
	
	Структура = Новый Структура("ВсегоДомов, ДомаСНачислениями, Проценты");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка КАК Здание
	|ПОМЕСТИТЬ втДома
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоМесяца,
	|			&ТекущаяДата,
	|			,
	|			Организация = &Организация
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втДома.Здание) КАК Количество,
	|	ВЫБОР
	|		КОГДА втНачисления.Здание ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК БылиНачисления
	|ИЗ
	|	втДома КАК втДома
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втДома.Здание = втНачисления.Здание
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА втНачисления.Здание ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущаяДата));
	Запрос.УстановитьПараметр("ТекущаяДата",  ТекущаяДата);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Структура.ВсегоДомов = Таблица.Итог("Количество");
	
	СтрокаСНачислениями = Таблица.Найти(Истина, "БылиНачисления");
	
	Если СтрокаСНачислениями = Неопределено Тогда
		Структура.ДомаСНачислениями = 0;
	Иначе
		Структура.ДомаСНачислениями = СтрокаСНачислениями.Количество;
	КонецЕсли;
	
	Структура.Проценты = ?(Структура.ВсегоДомов = 0, 0, ОКР(Структура.ДомаСНачислениями / Структура.ВсегоДомов, 2));
	
	Возврат Структура;
	
КонецФункции // ПолучитьТаблицаНачисленийПоДомам()

// Получает суммы оплаты, внесенной за последние три месяца, которая пошла на погашение долгов
// предшествующих месяцев.
//
// Параметры:
//  ТаблицаНачислений - ТаблицаЗначений - таблица с данными по оплатам.
//  ТриМесяцаНазад - Дата - дата, соответствующая искомым оплатам.
//
// Возвращаемое значение:
//  Число - сумма оплат.
//
Функция ПолучитьСуммуОплатЗаПредыдущиеМесяцы(ТаблицаНачислений, ТриМесяцаНазад)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаНачислений.МесяцНачисления
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.МесяцНачисления < НАЧАЛОПЕРИОДА(&ТриМесяцаНазад, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втНачисления.СуммаОплаты) КАК СуммаОплаты
	|ИЗ
	|	втНачисления КАК втНачисления";
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТриМесяцаНазад",    ТриМесяцаНазад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаОплаты;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьСуммуОплатЗаПредыдущиеМесяцы()

// Получает таблицу с оплатами, пошедшими на погашение долгов последних трех месяцев.
//
// Параметры:
//  ТаблицаНачислений - ТаблицаЗначений - таблица со всеми оплатами.
//  ТриМесяцаНазад - Дата - дата, соответствующая искомым оплатам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с оплатами.
//
Функция ПолучитьТаблицуОплаты(ТаблицаНачислений, ТриМесяцаНазад)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.СуммаОплаты КАК СуммаОплаты,
	|	КОНЕЦПЕРИОДА(ТаблицаНачислений.МесяцНачисления, МЕСЯЦ) КАК МесяцНачисления
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|ГДЕ
	|	ТаблицаНачислений.МесяцНачисления >= НАЧАЛОПЕРИОДА(&ТриМесяцаНазад, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(втНачисления.СуммаОплаты) КАК СуммаОплаты,
	|	втНачисления.МесяцНачисления
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.МесяцНачисления";
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТриМесяцаНазад",    ТриМесяцаНазад);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции //ПолучитьТаблицуОплаты()

// Получает таблицу с начислениями в разрезе месяцев начисления.
//
// Параметры:
//  ТаблицаНачисленийОбщ - ТаблицаЗначений - таблица со всеми начислениями.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с начислениями.
//
Функция ПолучитьТаблицуНачисленийЗаПериод(ТаблицаНачисленийОбщ)
	
	ТаблицаНачисленийОбщ.Свернуть("Период", "СуммаНачисления");
	
	Возврат ТаблицаНачисленийОбщ;
	
КонецФункции // ПолучитьТаблицуНачисленийЗаПериод()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ФАЙЛОВ ОБМЕНА

#Область ПроцедурыИФункцииФормированияФайловОбмена

// Записывает и выгружает полный файл XML.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.УПЖКХ_НастройкиВыгрузкиДляМобильногоПриложения - настройка 
//                         подключения к мобильному приложению.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Успешно - Булево - признак успешности выгрузки.
//
Процедура ЗаписатьПолныйФайл(НастройкаПодключения, СтруктураДанных, Успешно)
	
	Организация = НастройкаПодключения.Организация;
	ПИН         = НастройкаПодключения.ПИН;
	ИД          = НастройкаПодключения.ИД;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоЭлемента("root"); // Корневой тег
	Запись.ЗаписатьАтрибут("type", "full");
	Запись.ЗаписатьАтрибут("date", Строка(СтруктураДанных.ТекущаяДата));
	
	Запись.ЗаписатьНачалоЭлемента("organisation");
	Запись.ЗаписатьАтрибут("name", СтруктураДанных.НазваниеОрганизации);
	
	ЗаписатьОстаткиПоКассе(Запись, СтруктураДанных);
	ЗаписатьОстаткиПоСчетам(Запись, СтруктураДанных);
	ЗаписатьПоступленияНаСчет(Запись, СтруктураДанных);
	ЗаписатьСписанияСоСчета(Запись, СтруктураДанных);
	
	ЗаписатьЗадолженности(Запись, СтруктураДанных);
	ЗаписатьДанныеПоСчетчикам(Запись, СтруктураДанных.ТаблицаСчетчиков, СтруктураДанных.ТекущаяДата);
	ЗаписатьДанныеОНачислении(Запись, СтруктураДанных.ТаблицаНачислений, СтруктураДанных.ТаблицаОплат, СтруктураДанных.СтруктураОстатков,
							  СтруктураДанных.СуммаОплатПред, СтруктураДанных.ТриМесяцаНазад);
	ЗаписатьДанныеОДомах(Запись, СтруктураДанных.СтруктураДомов, СтруктураДанных.ТекущаяДата);
	
	Запись.ЗаписатьКонецЭлемента(); // Тег "organisation"
	
	Запись.ЗаписатьКонецЭлемента(); // Корневой тег
	
	НешифрСтрока = Запись.Закрыть();
	
	ВыгрузитьФайл(СтруктураДанных.НазваниеОрганизации, ПИН, ИД, НешифрСтрока, Успешно);
	
КонецПроцедуры // ЗаписатьПолныйФайл()

// Записывает в файл выгрузки остатки по кассе организации.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//
Процедура ЗаписатьОстаткиПоКассе(Запись, СтруктураДанных)
	
	Запись.ЗаписатьНачалоЭлемента("current_cash_balance");
	
	// остатки за 30 дней. 50.01
	ТаблицаОстатков = СтруктураДанных.ТаблицаОстатков50;
	
	Для Каждого Строка из ТаблицаОстатков Цикл
		Запись.ЗаписатьНачалоЭлемента("cash_sum");
		
		Запись.ЗаписатьАтрибут("date",    Формат(Строка.Дата, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.Сальдо));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остатки за 30 дней. 50.21
	ТаблицаОстатков5021 = СтруктураДанных.ТаблицаОстатков5021;
	
	Для Каждого Строка из ТаблицаОстатков5021 Цикл
		Запись.ЗаписатьНачалоЭлемента("cash_sum_valuta");
		
		Запись.ЗаписатьАтрибут("date",    Формат(Строка.Дата, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.Сальдо));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остаток на текущую дату в разрезе анатилики. 50.01
	ТаблицаОстатковАналитика = СтруктураДанных.ТаблицаОстатков50Аналитика;
	Для Каждого Строка Из ТаблицаОстатковАналитика Цикл
		Запись.ЗаписатьНачалоЭлемента("amount_cash");
		
		Запись.ЗаписатьАтрибут("cashbox", Строка(Строка.Аналитика));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.СуммаОстаток));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остаток на текущую дату в разрезе анатилики. 50.21
	ТаблицаОстатковАналитика5021 = СтруктураДанных.ТаблицаОстатков5021Аналитика;
	Для Каждого Строка Из ТаблицаОстатковАналитика5021 Цикл
		Запись.ЗаписатьНачалоЭлемента("amount_cash_valuta");
		
		Запись.ЗаписатьАтрибут("cashbox", Строка(Строка.Аналитика));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.СуммаОстаток));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьОстаткиПоКассе()

// Записывает в файл выгрузки остатки по счетам организации.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//
Процедура ЗаписатьОстаткиПоСчетам(Запись, СтруктураДанных)
	
	Запись.ЗаписатьНачалоЭлемента("current_bank_balance");
	
	// остатки за 30 дней. 51
	Таблица = СтруктураДанных.ТаблицаОстатков51;
	
	Для Каждого Строка из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("balance_sum");
		
		Запись.ЗаписатьАтрибут("date",    Формат(Строка.Дата, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.Сальдо));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остатки за 30 дней. 52
	Таблица = СтруктураДанных.ТаблицаОстатков52;
	
	Для Каждого Строка из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("balance_sum_valuta");
		
		Запись.ЗаписатьАтрибут("date",    Формат(Строка.Дата, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.Сальдо));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остатки за 30 дней. 55
	Таблица = СтруктураДанных.ТаблицаОстатков55;
	
	Для Каждого Строка из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("balance_sum_special");
		
		Запись.ЗаписатьАтрибут("date",    Формат(Строка.Дата, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.Сальдо));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остаток на текущую дату в разрезе счетов. 51
	Таблица = СтруктураДанных.ТаблицаОстатков51Аналитика;
	Для Каждого Строка Из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("amount_balance");
		
		Запись.ЗаписатьАтрибут("account", Строка(Строка.Аналитика));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.СуммаОстаток));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остаток на текущую дату в разрезе счетов. 52
	Таблица = СтруктураДанных.ТаблицаОстатков52Аналитика;
	Для Каждого Строка Из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("amount_balance_valuta");
		
		Запись.ЗаписатьАтрибут("account", Строка(Строка.Аналитика));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.СуммаОстаток));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	// остаток на текущую дату в разрезе счетов. 55
	Таблица = СтруктураДанных.ТаблицаОстатков55Аналитика;
	Для Каждого Строка Из Таблица Цикл
		Запись.ЗаписатьНачалоЭлемента("amount_balance_special");
		
		Запись.ЗаписатьАтрибут("account", Строка(Строка.Аналитика));
		Запись.ЗаписатьАтрибут("balance", Строка(Строка.СуммаОстаток));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьОстаткиПоСчетам()

// Записывает в файл выгрузки поступления на счет организации.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//
Процедура ЗаписатьПоступленияНаСчет(Запись, СтруктураДанных)
	
	Счетчик = 0;
	
	Запись.ЗаписатьНачалоЭлемента("in_operations");
	
	Для Каждого Период Из СтруктураДанных.МассивТрехДней Цикл
		СтрокиПериода = СтруктураДанных.ТаблицаПоступлений.НайтиСтроки(Новый Структура("КонецДня", КонецДня(Период)));
		
		Сумма = 0;
		Для Каждого СтрокаПериода Из СтрокиПериода Цикл
			Сумма = СтрокаПериода.Сумма + Сумма;
			
			Запись.ЗаписатьНачалоЭлемента("incoming_operation" + Счетчик);
			Запись.ЗаписатьАтрибут("date",         Формат(СтрокаПериода.Дата, "ДФ=ЧЧ:мм"));
			Запись.ЗаписатьАтрибут("partner",      Строка(СтрокаПериода.Контрагент));
			Запись.ЗаписатьАтрибут("bank_account", ?(ЗначениеЗаполнено(СтрокаПериода.БанковскийСчет), Строка(СтрокаПериода.БанковскийСчет.НомерСчета), ""));
			Запись.ЗаписатьАтрибут("sum",          Строка(СтрокаПериода.Сумма));
			Запись.ЗаписатьАтрибут("coment",       Строка(СтрокаПериода.Коментарий));
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		Запись.ЗаписатьНачалоЭлемента("incoming" + Счетчик);
		Запись.ЗаписатьАтрибут("sum",  Строка(Сумма));
		Запись.ЗаписатьАтрибут("date", Формат(Период, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьКонецЭлемента();
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьПоступленияНаСчет()

// Записывает в файл выгрузки списания со счета организации.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//
Процедура ЗаписатьСписанияСоСчета(Запись, СтруктураДанных)
	
	Счетчик = 0;
	
	Запись.ЗаписатьНачалоЭлемента("out_operations");
	
	Для Каждого Период Из СтруктураДанных.МассивТрехДней Цикл
		СтрокиПериода = СтруктураДанных.ТаблицаСписаний.НайтиСтроки(Новый Структура("КонецДня", КонецДня(Период)));
		
		Сумма = 0;
		Для Каждого СтрокаПериода Из СтрокиПериода Цикл
			Сумма = СтрокаПериода.Сумма + Сумма;
			
			Запись.ЗаписатьНачалоЭлемента("upcoming_operation" + Счетчик);
			Запись.ЗаписатьАтрибут("date",         Формат(СтрокаПериода.Дата, "ДФ = ЧЧ:мм"));
			Запись.ЗаписатьАтрибут("partner",      Строка(СтрокаПериода.Контрагент));
			Запись.ЗаписатьАтрибут("bank_account", ?(ЗначениеЗаполнено(СтрокаПериода.БанковскийСчет), Строка(СтрокаПериода.БанковскийСчет.НомерСчета), ""));
			Запись.ЗаписатьАтрибут("sum",          Строка(СтрокаПериода.Сумма));
			Запись.ЗаписатьАтрибут("coment",       Строка(СтрокаПериода.Коментарий));
			Запись.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		Запись.ЗаписатьНачалоЭлемента("upcoming" + Счетчик);
		Запись.ЗаписатьАтрибут("sum", Строка(Сумма));
		Запись.ЗаписатьАтрибут("date", Формат(Период, "ДФ=дд.ММ.гггг"));
		Запись.ЗаписатьКонецЭлемента();
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьСписанияСоСчета()

// Записывает в файл выгрузки задолженности покупателей и задолженности поставщикам организации.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//
Процедура ЗаписатьЗадолженности(Запись, СтруктураДанных)
	
	Запись.ЗаписатьНачалоЭлемента("debet");
	Запись.ЗаписатьАтрибут("sum", Строка(СтруктураДанных.ЗадолженностьПокупателей));
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("credit");
	Запись.ЗаписатьАтрибут("sum", Строка(СтруктураДанных.ЗадолженностьПоставщикам));
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьЗадолженности()

// Записывает в файл выгрузки данные по счетчикам.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  ТаблицаСчетчиков - ТаблицаЗначений - таблица с данными по счетчикам.
//  ТекущийМесяц - Дата - дата, соответствующая текущему месяцу.
//
Процедура ЗаписатьДанныеПоСчетчикам(Запись, ТаблицаСчетчиков, ТекущийМесяц)
	
	ТаблицаИПУ = ТаблицаСчетчиков.Скопировать(ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ЯвляетсяОПУ", Ложь)));
	ТаблицаОПУ = ТаблицаСчетчиков.Скопировать(ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ЯвляетсяОПУ", Истина)));
	
	ВсегоСчетчиковИПУ = ТаблицаИПУ.Итог("Количество");
	ВсегоСчетчиковОПУ = ТаблицаОПУ.Итог("Количество");
	ВсегоСчетчиков    = ВсегоСчетчиковИПУ + ВсегоСчетчиковОПУ;
	
	СтрокаИПУСПоказаниями = ТаблицаИПУ.Найти(Истина, "БылиПоказания");
	СтрокаОПУСПоказаниями = ТаблицаОПУ.Найти(Истина, "БылиПоказания");
	
	Если СтрокаИПУСПоказаниями = Неопределено Тогда
		СчетчиковИПУСПоказаниями = 0;
	Иначе
		СчетчиковИПУСПоказаниями = СтрокаИПУСПоказаниями.Количество;
	КонецЕсли;
	
	Если СтрокаОПУСПоказаниями = Неопределено Тогда
		СчетчиковОПУСПоказаниями = 0;
	Иначе
		СчетчиковОПУСПоказаниями = СтрокаОПУСПоказаниями.Количество;
	КонецЕсли;
	
	ВсегоСчетчиковСПоказаниями = СчетчиковИПУСПоказаниями + СчетчиковОПУСПоказаниями;
	
	ПроцентыОбщие = ?(ВсегоСчетчиков = 0, 0, ОКР(ВсегоСчетчиковСПоказаниями / ВсегоСчетчиков, 2));
	ПроцентыИПУ   = ?(ВсегоСчетчиковИПУ = 0, 1, ОКР(СчетчиковИПУСПоказаниями / ВсегоСчетчиковИПУ, 2));
	ПроцентыОПУ   = ?(ВсегоСчетчиковОПУ = 0, 1, ОКР(СчетчиковОПУСПоказаниями / ВсегоСчетчиковОПУ, 2));
	
	Запись.ЗаписатьНачалоЭлемента("meters");
	Запись.ЗаписатьАтрибут("percentage", Строка(ПроцентыОбщие));
	
	Запись.ЗаписатьНачалоЭлемента("meters_inf");
	Запись.ЗаписатьАтрибут("month",      Формат(ТекущийМесяц, "ДФ='MMMM yyyy'"));
	Запись.ЗаписатьАтрибут("total",      Строка(ВсегоСчетчиковИПУ));
	Запись.ЗаписатьАтрибут("amount",     Строка(СчетчиковИПУСПоказаниями));
	Запись.ЗаписатьАтрибут("percentage", Строка(ПроцентыИПУ));
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("hmeters_inf");
	Запись.ЗаписатьАтрибут("month",      Формат(ТекущийМесяц, "ДФ='MMMM yyyy'"));
	Запись.ЗаписатьАтрибут("total",      Строка(ВсегоСчетчиковОПУ));
	Запись.ЗаписатьАтрибут("amount",     Строка(СчетчиковОПУСПоказаниями));
	Запись.ЗаписатьАтрибут("percentage", Строка(ПроцентыОПУ));
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьДанныеПоСчетчикам()

// Записывает в файл выгрузки данные по начислениям.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  ТаблицаНачислений - ТаблицаЗначений - таблица с данными по начислениям.
//  ТаблицаОплат - ТаблицаЗначений - таблица с данными по оплатам.
//  СтруктураОстатков - Структура - структура с данными по остаткам.
//  СуммаОплатПред - Число - сумма, пошедшая на погашение долгов предыдущих месяцев.
//  ТриМесяцаНазад - Дата - дата, соответствующая началу третьего предшествующего месяца.
//
Процедура ЗаписатьДанныеОНачислении(Запись, ТаблицаНачислений, ТаблицаОплат, СтруктураОстатков, СуммаОплатПред, ТриМесяцаНазад)
	
	МассивМесяцев = Новый Массив;
	МассивМесяцев.Добавить(КонецМесяца(ТриМесяцаНазад));
	МассивМесяцев.Добавить(КонецМесяца(ДобавитьМесяц(ТриМесяцаНазад, 1)));
	МассивМесяцев.Добавить(КонецМесяца(ДобавитьМесяц(ТриМесяцаНазад, 2)));
	
	Запись.ЗаписатьНачалоЭлемента("calculation");
	Запись.ЗаписатьАтрибут("debtbeg",  Строка(СтруктураОстатков.НачальныйОстаток));
	Запись.ЗаписатьАтрибут("debtend",  Строка(СтруктураОстатков.КонечныйОстаток));
	Запись.ЗаписатьАтрибут("sumpayed", Строка(СуммаОплатПред));
	
	Для Каждого Месяц Из МассивМесяцев Цикл
		МесяцСтрока = Формат(Месяц, "ДФ='MMMM yyyy'");
		
		СтрокаНачисления = ТаблицаНачислений.Найти(Месяц, "Период");
		СтрокаОплаты     = ТаблицаОплат.Найти(Месяц, "МесяцНачисления");
		
		СуммаНачисления = ?(СтрокаНачисления = Неопределено, 0, СтрокаНачисления.СуммаНачисления);
		СуммаОплаты     = ?(СтрокаОплаты = Неопределено, 0, СтрокаОплаты.СуммаОплаты);
		Проценты        = ?(СуммаНачисления = 0, 0, ОКР(СуммаОплаты / СуммаНачисления, 2));
		
		Запись.ЗаписатьНачалоЭлемента("month");
		Запись.ЗаписатьАтрибут("month_name", МесяцСтрока);
		Запись.ЗаписатьАтрибут("sum",        Строка(СуммаНачисления));
		Запись.ЗаписатьАтрибут("sum_payed",  Строка(СуммаОплаты));
		Запись.ЗаписатьАтрибут("percentage", Строка(Проценты));
		Запись.ЗаписатьКонецЭлемента();
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьДанныеОНачислении()

// Записывает в файл выгрузки сведения о домах, по которым провели начисления.
//
// Параметры:
//  Запись - ЗаписьXML - элемент файла выгрузки.
//  СтруктураДомов - Структура - структура с данными, необходимыми к выгрузке.
//  ТекущийМесяц - Дата - дата, соответствующая текущему месяцу.
//
Процедура ЗаписатьДанныеОДомах(Запись, СтруктураДомов, ТекущийМесяц)
	
	Запись.ЗаписатьНачалоЭлемента("calculation_done");
	Запись.ЗаписатьАтрибут("month",        Формат(ТекущийМесяц, "ДФ='MMMM yyyy'"));
	Запись.ЗаписатьАтрибут("house_amount", Строка(СтруктураДомов.ВсегоДомов));
	Запись.ЗаписатьАтрибут("house_done",   Строка(СтруктураДомов.ДомаСНачислениями));
	Запись.ЗаписатьАтрибут("percentage",   Строка(СтруктураДомов.Проценты));
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗаписатьДанныеОДомах()

// Записывает и выгружает урезанный файл XML.
//
// Параметры:
//  НастройкаПодключения - СправочникСсылка.УПЖКХ_НастройкиВыгрузкиДляМобильногоПриложения - настройка 
//                         подключения к мобильному приложению.
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Успешно - Булево - признак успешности выгрузки.
//
Процедура ЗаписатьУрезанный(НастройкаПодключения, СтруктураДанных, Успешно)
	
	Организация = НастройкаПодключения.Организация;
	ПИН         = НастройкаПодключения.ПИН;
	ИД          = НастройкаПодключения.ИД;
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьНачалоЭлемента("root");
	Запись.ЗаписатьАтрибут("type", "min");
	Запись.ЗаписатьАтрибут("date", Строка(СтруктураДанных.ТекущаяДата));
	
	Запись.ЗаписатьНачалоЭлемента("organisation");
	Запись.ЗаписатьАтрибут("name", Строка(СтруктураДанных.НазваниеОрганизации));
	
	УрезанныйЗаписатьТекущийОстаток50(СтруктураДанных, Запись);
	УрезанныйЗаписатьТекущийОстаток5021(СтруктураДанных, Запись);
	УрезанныйЗаписатьТекущийОстаток51(СтруктураДанных, Запись);
	УрезанныйЗаписатьТекущийОстаток52(СтруктураДанных, Запись);
	УрезанныйЗаписатьТекущийОстаток55(СтруктураДанных, Запись);
	
	УрезанныйЗаписатьСписание(СтруктураДанных, Запись);
	УрезанныйЗаписатьПоступление(СтруктураДанных, Запись);
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
	НешифрСтрока = Запись.Закрыть();
	
	ВыгрузитьФайл(СтруктураДанных.НазваниеОрганизации, ПИН, ИД, НешифрСтрока, Успешно, "min");
	
КонецПроцедуры // ЗаписатьУрезанный()

// Записывает в урезанный файл выгрузки остаток по счету 50.01.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьТекущийОстаток50(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("current_cash_balance");
	
	СуммаОстатка50 = СтруктураДанных.ТекущийОстаток50;
	СтрокаДата     = Формат(СтруктураДанных.ТекущаяДата, "ДФ=дд.ММ.гггг");
	СтрокаСумма    = Строка(СуммаОстатка50);
	
	Запись.ЗаписатьНачалоЭлемента("cash_sum");
	Запись.ЗаписатьАтрибут("date", СтрокаДата);
	Запись.ЗаписатьАтрибут("balance", СтрокаСумма);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьТекущийОстаток50()

// Записывает в урезанный файл выгрузки остаток по счету 50.21.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьТекущийОстаток5021(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("current_cash_balance_valuta");
	
	СуммаОстатка5021 = СтруктураДанных.ТекущийОстаток5021;
	СтрокаДата       = Формат(СтруктураДанных.ТекущаяДата, "ДФ=дд.ММ.гггг");
	СтрокаСумма      = Строка(СуммаОстатка5021);
	
	Запись.ЗаписатьНачалоЭлемента("cash_sum_valuta");
	Запись.ЗаписатьАтрибут("date", СтрокаДата);
	Запись.ЗаписатьАтрибут("balance", СтрокаСумма);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьТекущийОстаток5021()

// Записывает в урезанный файл выгрузки остаток по счету 51.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьТекущийОстаток51(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("current_bank_balance");
	
	СуммаОстатка51 = СтруктураДанных.ТекущийОстаток51;
	
	СтрокаДата = Формат(СтруктураДанных.Текущаядата, "ДФ=дд.ММ.гггг");
	СтрокаСумма = Строка(СуммаОстатка51);
	
	Запись.ЗаписатьНачалоЭлемента("balance_sum");
	Запись.ЗаписатьАтрибут("date", СтрокаДата);
	Запись.ЗаписатьАтрибут("balance", СтрокаСумма);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьТекущийОстаток51()

// Записывает в урезанный файл выгрузки остаток по счету 52.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьТекущийОстаток52(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("current_bank_balance_valuta");
	
	СуммаОстатка52 = СтруктураДанных.ТекущийОстаток52;
	
	СтрокаДата = Формат(СтруктураДанных.Текущаядата, "ДФ=дд.ММ.гггг");
	СтрокаСумма = Строка(СуммаОстатка52);
	
	Запись.ЗаписатьНачалоЭлемента("balance_sum_valuta");
	Запись.ЗаписатьАтрибут("date", СтрокаДата);
	Запись.ЗаписатьАтрибут("balance", СтрокаСумма);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьТекущийОстаток52()

// Записывает в урезанный файл выгрузки остаток по счету 55.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьТекущийОстаток55(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("current_bank_balance_special");
	
	СуммаОстатка55 = СтруктураДанных.ТекущийОстаток55;
	
	СтрокаДата = Формат(СтруктураДанных.Текущаядата, "ДФ=дд.ММ.гггг");
	СтрокаСумма = Строка(СуммаОстатка55);
	
	Запись.ЗаписатьНачалоЭлемента("balance_sum_special");
	Запись.ЗаписатьАтрибут("date", СтрокаДата);
	Запись.ЗаписатьАтрибут("balance", СтрокаСумма);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьТекущийОстаток55()

// Записывает в урезанный файл выгрузки сведения о списании со счета.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьСписание(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("out_operations");
	
	СуммаСписания = СтруктураДанных.ТаблицаСписаний.Итог("Сумма");
	
	Запись.ЗаписатьНачалоЭлемента("upcoming0");
	Запись.ЗаписатьАтрибут("sum", Строка(СуммаСписания));
	Запись.ЗаписатьАтрибут("date", Формат(СтруктураДанных.ТекущаяДата, "ДФ=дд.ММ.гггг"));
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьСписание()

// Записывает в урезанный файл выгрузки сведения о поступлении на счет.
//
// Параметры:
//  СтруктураДанных - Структура - структура с данными, необходимыми к выгрузке.
//  Запись - ЗаписьXML - элемент файла выгрузки.
//
Процедура УрезанныйЗаписатьПоступление(СтруктураДанных, Запись)
	
	Запись.ЗаписатьНачалоЭлемента("in_operations");
	
	СуммаПоступления = СтруктураДанных.ТаблицаПоступлений.Итог("Сумма");
	
	Запись.ЗаписатьНачалоЭлемента("incoming0");
	Запись.ЗаписатьАтрибут("sum",  Строка(СуммаПоступления));
	Запись.ЗаписатьАтрибут("date", Формат(СтруктураДанных.ТекущаяДата, "ДФ=дд.ММ.гггг"));
	Запись.ЗаписатьКонецЭлемента();
		
	Запись.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // УрезанныйЗаписатьПоступление

// Шифрует строку в соответствии с ключом.
//
// Параметры:
//  Строка - Строка - нешифрованная строка.
//  Ключ - Строка - ключ шифрования.
//
// Возвращаемое значение:
//  Строка - зашифрованная строка.
//
Функция Зашифровать(Строка, Ключ) 
	
	Шифр = ДвоичныйМассивВСтроку(XORin(Строка, Ключ));
	
	Возврат Шифр;
	
КонецФункции // Зашифровать()

// Записывает строку в файл.
//
// Параметры:
//  Строка - Строка - содержимое, которое необходимо записать в файл.
//  ИмяФайла - Строка - имя файла, в который записываем данные.
//
Процедура ЗаписатьФайл(Строка, ИмяФайла)
	
	Файл = Новый ТекстовыйДокумент;
	Файл.УстановитьТекст(Строка);
	Файл.Записать(ИмяФайла);
	
КонецПроцедуры // ЗаписатьФайл()

// Возвращает массив кодов символов переданной строки.
//
// Параметры:
//  Строка - Строка - строка, коды символов которой необходимо получить.
//
// Возвращаемое значение:
//  Массив - массив с кодами.
//
Функция СтрокаВМассивКодовСимволов(Строка)
	
	Длина = СтрДлина(Строка) + 1;
	Сч = 1;
	МассивКодов = Новый Массив;
	Пока Сч < Длина Цикл		
		МассивКодов.Добавить(Число(КодСимвола(Сред(Строка, Сч, 1)))); 
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат МассивКодов;
	
КонецФункции // СтрокаВМассивКодовСимволов()

// Возвращает массив двоичных чисел из массива десятичных чисел.
//
// Параметры:
//  МассивКодов - Массив - массив с десятичными числами.
//
// Возвращаемое значение:
//  Массив - массив двоичных чисел.
//
Функция МассивКодовВДвоичныйМассив(МассивКодов)
	
	МассивБайт = Новый Массив;
	Для Каждого Код из МассивКодов Цикл	
		
		СтрокаДвоичИнверт = "";	
		ДвСтрока = "";
		Пока Код >= 1 Цикл
			
			ДвЗнак = Код % 2;
			ДвСтрока = ДвСтрока + ДвЗнак;
			Код = Цел(Код / 2);
		КонецЦикла;
		
		МассивБайт.Добавить(ИнверсияСтроки(ДвСтрока));
	КонецЦикла;
	
	Возврат МассивБайт;
	
КонецФункции // МассивКодовВДвоичныйМассив()

// Инвертирует строку. Например Стр = "Строка", вернет "акортС".
//
// Параметры:
//  Стр - Строка - строка, которую необходимо инвертировать.
//
// Возвращаемое значение:
//  Строка - инвертированная строка.
//
Функция ИнверсияСтроки(Стр)
	
	Длина = СтрДлина(Стр);
	ИнверсСтрока = "";
	
	Для Сч = 1 По Длина Цикл
		ИнверсСтрока = Сред(Стр, Сч, 1) + ИнверсСтрока;
	КонецЦикла;
	
	Возврат ИнверсСтрока;
	
КонецФункции // ИнверсияСтроки()

// Шифрует строку с помощью ключа - массива двочиных чисел.
// 
// Параметры:
//  Строка - Строка - строка, которую необходимо зашифровать.
//  Ключ - Массив - ключ шифрования.
//
// Возвращаемое значение:
//  Строка - зашифрованная строка.
//
Функция XORin(Строка, Ключ)	
	
	ДвСтрока =  МассивКодовВДвоичныйМассив(СтрокаВМассивКодовСимволов(Строка));
	ДвКлюч =  МассивКодовВДвоичныйМассив(СтрокаВМассивКодовСимволов(Ключ));
	ДвШифрСтрока = Новый Массив;
	СтрокаДл = ДвСтрока.Количество();
	КлючДл = ДвКлюч.Количество();
	Сч = 0;
	
	Пока Сч < СтрокаДл Цикл
		
		ТСтрока = ДвСтрока[Сч];
		ТКлюч = ДвКлюч[Сч % КлючДл];
		ТШифрСтрока = "1";
		
		СчВ = 0;
		ДлинаТСтроки = СтрДлина(ТСтрока);
		ДлинаТКлюча = СтрДлина(ТКлюч);
		
		Пока СчВ < ДлинаТСтроки Цикл
			
			СрСтрока = Сред(ТСтрока, СчВ + 1, 1);
			СрКлюч   = Сред(ТКлюч, (СчВ % ДлинаТКлюча) + 1, 1);
			
			Если СрСтрока <> СрКлюч Тогда
				Шифр = "1";
			Иначе
				Шифр = "0";
			КонецЕсли;
			ТШифрСтрока = ТШифрСтрока + Шифр;
			
			СчВ = СчВ + 1;
		КонецЦикла;
		
		ДвШифрСтрока.Добавить(ТШифрСтрока);
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ДвШифрСтрока;
	
КонецФункции

// Формирует строку из массива двоичных чисел.
//
// Параметры:
//  ДвМассив - Массив - массив, из которого необходимо сформировать строку.
//
// Возвращаемое значение:
//  Строка - сформированная строка.
//
Функция ДвоичныйМассивВСтроку(ДвМассив)
	
	СтрокаРез = "";
	Для Каждого Код Из ДвМассив Цикл
		Символ    = Символ(Перевод_2в10(Код));
		СтрокаРез = СтрокаРез + Символ;
		
	КонецЦикла;
	
	Возврат СтрокаРез;
	
КонецФункции // ДвоичныйМассивВСтроку()

// Формирует десятичное представление двоичного числа.
//
// Параметры:
//  Стр2 - Строка - двоичное число.
//
// Возвращаемое значение:
//  Число - десятичное предстваление.
//
Функция Перевод_2в10(Знач Стр2)
	
	Стр=СокрЛП(Стр2);
	Рез=0;
	Для ТекРазряд=1 по СтрДлина(Стр) Цикл
		Рез=Рез*2+Число(Сред(Стр,ТекРазряд,1));
	КонецЦикла;
	
	Возврат рез;
	
КонецФункции // Перевод_2в10()

// Возвращает размер файла. 
//
// Параметры:
//  ИмяФайла - Строка - файл, размер которого необходимо определить.
//
// Возвращаемое значение:
//  Число - размер файла.
//
Функция ПолучитьРазмерФайла(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);    
	Размер = Файл.Размер();
	
	Возврат Размер;
	
КонецФункции // ПолучитьРазмерФайла()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ НА СЕРВЕР

#Область ПроцедурыИФункцииВыгрузкиНаСервер

// Выгружает данные в мобильное приложение.
//
// Параметры:
//  НазваниеОрганизации - Строка - название организации.
//  ПИН - Строка - ПИН-код организации.
//  ИД - Строка - идентификатор организации.
//  НешифрСтрока - Строка - строка с данными, которые необходимо передать на сервер.
//  Успешно - Булево - признак успешности выгрузки.
//  Тип - Строка - тип выгрузки: полный или урезанный.
// 
Процедура ВыгрузитьФайл(НазваниеОрганизации, ПИН, ИД, НешифрСтрока, Успешно, Тип = "full")
	
	ВрФайл = ПолучитьИмяВременногоФайла("id");
	
	HTTP = Новый HTTPСоединение("mm.vdgb-soft.ru");
	HTTP.Получить("/?mode=check_connection", ВрФайл);
	
	Текст = Новый ЧтениеТекста(ВрФайл);
	ОтветПодключение = Текст.ПрочитатьСтроку();
	Текст.Закрыть();
	
	Если ОтветПодключение = "true" Тогда
		ШифрСтрока = Зашифровать(НешифрСтрока, ПИН);
		ФайлШифр   = ПолучитьИмяВременногоФайла("enc");
		
		ЗаписатьФайл(ШифрСтрока, ФайлШифр);
		
		Размер = ПолучитьРазмерФайла(ФайлШифр);
		
		ФайлОтвета = ПолучитьИмяВременногоФайла("rsp");
		Адрес      = "/?mode=file_upload&type=" + Тип + "&id_org=" + ИД + "&file_size=" + Размер;
		
		HTTP = Новый HTTPСоединение("mm.vdgb-soft.ru");
		Заголовки = Новый Соответствие();
		Заголовки.Вставить("Content-Type", "text/plain");
		HTTP.ОтправитьДляОбработки(ФайлШифр, Адрес, ФайлОтвета, Заголовки);
		
		Текст = Новый ЧтениеТекста(ФайлОтвета);
		Ответ = Текст.ПрочитатьСтроку();
		Текст.Закрыть();
		
		УдалитьФайлы(ФайлОтвета);
		УдалитьФайлы(ФайлШифр);
		
		Если Ответ = "success" Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Формат(ТекущаяДата(), "ДФ=ЧЧ:мм:сс") + " Файл успешно отправлен(" + НазваниеОрганизации + ").");
			Успешно = Истина;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(Формат(ТекущаяДата(), "ДФ=ЧЧ:мм:сс") + " Файл не отправлен(" + НазваниеОрганизации + "). Повтор попытки");
			Успешно = Ложь;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сервер недоступен");
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьФайл()

#КонецОбласти