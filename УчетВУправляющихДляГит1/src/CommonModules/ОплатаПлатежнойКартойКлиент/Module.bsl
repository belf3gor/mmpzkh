#Область ОбработчикиСобытийФормы

Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(Форма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

Процедура ОбработкаВыбора(Форма, ИсточникВыбора, ВыбранноеЗначение) Экспорт
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ОплатаПлатежнойКартой.Форма.ФормаВыбора" Тогда
		
		ОплатаПлатежнойКартойКлиентСервер.ДокументОснованиеОбработкаВыбора(Форма, ВыбранноеЗначение);
	
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ОплатаПлатежнойКартой.Форма.ФормаРасшифровкаПлатежа" Тогда
	
		Форма.Модифицированность = ОбработкаРасшифровкиПлатежа(Форма, ВыбранноеЗначение);
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Объект = Форма.Объект;
	
	Если ИмяСобытия = ЧекиНПДКлиентСервер.ИмяСобытияДляОповещенияОбИзмененииЧека()
		И Параметр.ДокументОснование = Объект.Ссылка Тогда
		
		ЧекиНПДКлиент.ДобавитьПричинуАннулированияЧекаВКомментарий(Параметр, Форма);
		ОплатаПлатежнойКартойКлиентСервер.УстановитьСведенияОЧекеНПД(Форма, Параметр);
		
	Иначе
		
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(Форма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("ОбновитьФорму", Форма.ВладелецФормы, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ЗначениеЗаполнено(ПараметрыЗаписи.ОплаченныеСчета) Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

Процедура НомерЧекаНПДАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт

	ДанныеВыбора = ДанныеВыбораПоЧеку(Форма, Текст, СтандартнаяОбработка);

КонецПроцедуры

Процедура НомерЧекаНПДНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = ПараметрыОтбораДокументаОплатаПлатежнойКартой(Форма.Объект.Организация);
	ОткрытьФорму("Документ.ОплатаПлатежнойКартой.ФормаВыбора", ПараметрыОтбора, Форма);

КонецПроцедуры

Процедура НомерЧекаНПДПриИзменении(Форма, Элемент) Экспорт
	
	ОплатаПлатежнойКартойКлиентСервер.ДокументОснованиеОбработкаВыбора(Форма);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении(Форма) Экспорт

	Объект = Форма.Объект;
	
	Если Объект.РасшифровкаПлатежа.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура УслугаНПДПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.СуммаДокумента)
		Или Не ЗначениеЗаполнено(Объект.УслугаНПД) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СуммаДокумента = ОплатаПлатежнойКартойВызовСервера.ЦенаУслугиНПД(
		Объект.УслугаНПД, Объект.Организация, Объект.Дата);
	СуммаДокументаПриИзменении(Форма);
	
КонецПроцедуры

Процедура ДеятельностьНаПатентеПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ДеятельностьНаПатенте Тогда
		
		Объект.ДеятельностьНаТорговомСборе = Ложь;
		
		Если Форма.ПрименениеУСН И Форма.УчетВПродажныхЦенах Тогда
			Объект.Графа5_УСН = 0;
			Объект.Графа7_УСН = 0;
			Объект.НДС_УСН    = 0;
		КонецЕсли;
		
	Иначе
		Объект.Патент = Неопределено;
	КонецЕсли;
	
	ОплатаПлатежнойКартойКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

#Область РасшифровкаПлатежа

Процедура ДоговорКонтрагентаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
	Иначе
		СтрокаПлатеж = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ПараметрыЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежа(Форма, Истина); // Только создаем структуру, если она еще не создана.
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",   Объект.Организация);
	ПараметрыЗаполнения.Вставить("Контрагент",    Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("ВидОперации",   Объект.ВидОперации);
	ПараметрыЗаполнения.Вставить("ПлательщикНДС", Форма.ПлательщикНДС);
	ПараметрыЗаполнения.Вставить("Дата",          Объект.Дата);
	ПараметрыЗаполнения.Вставить("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	
	ОплатаПлатежнойКартойВызовСервера.УстановитьРеквизитыРасчетовСКонтрагентом(
		ПараметрыЗаполнения, Форма.СвойстваПлатежа);
	
	Если СтрокаПлатеж.ДоговорКонтрагента <> Форма.СвойстваПлатежа.ДоговорКонтрагента Тогда
		ЗаполнитьСвойстваПоДоговору(Форма, СтрокаПлатеж.ПолучитьИдентификатор());
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа); 
	
	ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	ЕстьРасчетыВУсловныхЕдиницах = Форма.ЕстьРасчетыВУсловныхЕдиницах 
		Или СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
	
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	
КонецПроцедуры

Процедура ДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора = ОплатаПлатежнойКартойКлиентСервер.ВидыДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",    Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
	ОплатаВВалюте = Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета;
	ЗначенияЗаполнения.Вставить("ОплатаВВалюте", ОплатаВВалюте);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение",
		Форма, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовВыборЗавершение(Форма, РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	Если РезультатЗакрытия <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = РезультатЗакрытия.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = РезультатЗакрытия.КратностьВалюты;
	КонецЕсли;
	
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(
		Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные, Форма);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	ИнициализироватьСвойстваПлатежа(Форма);
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	РасшифровкаПлатежа = ОплатаПлатежнойКартойКлиентСервер.РеквизитДокумента(
		Форма, ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти());
	Форма.Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ОплатаПлатежнойКартойКлиентСервер.ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыВалютногоУчета(СтрокаПлатеж, Форма);
	
	Кратность = Форма.КратностьДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И Кратность <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * Форма.КурсДокумента / Кратность;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособПогашенияЗадолженностиПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	ЭтоОднострочнаяФорма = ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма);
	
	Если ЭтоОднострочнаяФорма Тогда
		СпособПогашенияЗадолженности   = Форма.РасшифровкаПлатежаСпособПогашенияЗадолженности;
		СчетУчетаРасчетовСКонтрагентом = Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом;
		ДоговорКонтрагента = Форма.РасшифровкаПлатежаДоговорКонтрагента;
		Если ОплатаПлатежнойКартойКлиентСервер.ПогашатьЗадолженностьПоДокументу(СпособПогашенияЗадолженности) Тогда
			Форма.РасшифровкаПлатежаСделка = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		СпособПогашенияЗадолженности   = СтрокаПлатеж.СпособПогашенияЗадолженности;
		СчетУчетаРасчетовСКонтрагентом = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
		ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
		Если ОплатаПлатежнойКартойКлиентСервер.ПогашатьЗадолженностьПоДокументу(СпособПогашенияЗадолженности) Тогда
			СтрокаПлатеж.Сделка = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ОплатаПлатежнойКартойКлиентСервер.НеПогашатьЗадолженность(СпособПогашенияЗадолженности)
		И Не ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) Тогда
		
		ИнициализироватьСвойстваПлатежа(Форма, Истина); // Только создаем структуру, если она еще не создана.
		
		Если ДоговорКонтрагента <> Форма.СвойстваПлатежа.ДоговорКонтрагента Тогда
			ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			ПараметрыОбъекта.ДоговорКонтрагента = ДоговорКонтрагента;
			Форма.СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоОднострочнаяФорма Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма,, Форма.Объект.РасшифровкаПлатежа[0]);
	Иначе
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа, "СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;
	
	ОплатаПлатежнойКартойКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		СчетУчета    = Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом;
		СчетАвансов  = Форма.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом;
		ДоговорКонтрагента = Форма.РасшифровкаПлатежаДоговорКонтрагента;
	Иначе
		СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		СчетУчета    = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
		СчетАвансов  = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
		ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	КонецЕсли;
	
	ЭтоВозвратПокупателю = ОплатаПлатежнойКартойКлиентСервер.ЭтоРозничнаяВыручка(Объект.ВидОперации);
	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата'"));
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация'"));
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент'"));
		Возврат;
	ИначеЕсли Форма.ВестиУчетПоДоговорам И Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор'"));
		Возврат;
	ИначеЕсли Не ЭтоВозвратПокупателю И Не ЗначениеЗаполнено(СчетУчета) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан счет расчетов'"));
		Возврат;
	ИначеЕсли ЭтоВозвратПокупателю И Не ЗначениеЗаполнено(СчетАвансов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан счет авансов'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Организация",           Объект.Организация);
	ПараметрыОбъекта.Вставить("Дата",                  Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",    ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",            Объект.Контрагент);
	Если ЭтоВозвратПокупателю Тогда
		ПараметрыОбъекта.Вставить("СчетУчета",         СчетАвансов);
		ПараметрыОбъекта.Вставить("ОстаткиОбороты",    "Кт");
	Иначе
		ПараметрыОбъекта.Вставить("СчетУчета",         СчетУчета);
		ПараметрыОбъекта.Вставить("ОстаткиОбороты",    "Дт");
	КонецЕсли;
	ПараметрыОбъекта.Вставить("ТипыДокументов",
		"Метаданные.Документы.ОплатаПлатежнойКартой.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	ПараметрыОбъекта.Вставить("РежимОтбораДокументов",
		ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура СуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = Форма.Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОплатаПлатежнойКартойКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Форма, Строка) Экспорт
	
	ОплатаПлатежнойКартойКлиентСервер.ПересчитатьСуммуНДС(Строка);
	Если ОплатаПлатежнойКартойКлиентСервер.ФормаДокументаОднострочная(Форма)
		И ЗначениеЗаполнено(Форма.Объект.РасшифровкаПлатежа) Тогда
		ОплатаПлатежнойКартойКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(
			Форма, Истина, Форма.Объект.РасшифровкаПлатежа[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЧекиНПД

Процедура ВыполнитьАннулированиеЧека(Форма) Экспорт

	Если Не ПроверитьЗаполнениеДляАннулированияЧекаНПДИЗаписать(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	ОтобразитьОжиданиеДанныхНаФорме(Форма);
	
	ПараметрыАннулированияЧека = ЧекиНПДКлиентСервер.НовыйПараметрыАннулированияЧека();
	ПараметрыАннулированияЧека.Ссылка = Объект.Ссылка;
	ПараметрыАннулированияЧека.Организация = Объект.Организация;
	ПараметрыАннулированияЧека.НомерЧека = Объект.НомерЧекаНПД;
	ПараметрыАннулированияЧека.ПричинаОтменыЧека = НСтр("ru = 'Возврат средств'");
	ПараметрыАннулированияЧека.ДокументОснование = Объект.ДокументОснование;
	
	ДлительнаяОперация = ЧекиНПДВызовСервера.ЗапуститьАннулированиеЧекаВФоне(
		ПараметрыАннулированияЧека, Форма.УникальныйИдентификатор);
	ЧекиНПДКлиент.ОжидатьАннулированиеЧекаВФоне(ДлительнаяОперация, Форма);

КонецПроцедуры

Процедура ДекорацияЧекНажатие(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	ЧекиНПДКлиент.ОткрытьФормуЧекаНПД(Форма, Объект.Ссылка,
		ОплатаПлатежнойКартойВызовСервера.ПараметрыОтправкиЧека(Объект.Контрагент));

КонецПроцедуры

Процедура ЗапуститьОжиданиеРезультатаАннулированияЧека(Форма) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.ПараметрыОжиданияРезультата) Тогда
		Возврат;
	КонецЕсли;
	
	ВремяОжидания = Форма.ПараметрыОжиданияРезультата.ВремяОжидания;
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОжиданиеРезультатаАннулированияЧека",
		ВремяОжидания, Истина);
	
КонецПроцедуры

Процедура ОтобразитьОжиданиеДанныхНаФорме(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.АннулироватьЧекНПД.Видимость = Ложь;
	Элементы.ОжиданиеДанных.Видимость = Истина;
	Элементы.ДекорацияЧекНаВозврат.Видимость = Ложь;

КонецПроцедуры

Процедура ПробитьЧекНПД(Форма) Экспорт
	
	Если Не ОплатаПлатежнойКартойКлиентСервер.ПроверитьЗаполнениеДляФормированияЧекаНПД(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Форма.Модифицированность Тогда
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
		Форма.Записать(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыФормированияЧека = ЧекиНПДКлиентСервер.НовыйПараметрыФормированияЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыФормированияЧека, Объект);
	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		ПараметрыФормированияЧека.Вставить("Контрагент", Неопределено);
	КонецЕсли;
	
	ЧекиНПДКлиент.ОткрытьФормуФормированияЧекаНПД(Форма, Объект.Ссылка,
		ПараметрыФормированияЧека,
		ОплатаПлатежнойКартойВызовСервера.ПараметрыОтправкиЧека(Объект.Контрагент));
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДляАннулированияЧекаНПДИЗаписать(Форма)
	
	Объект = Форма.Объект;
	
	Если Не Форма.ПлательщикНПД Или Не Форма.ПроверитьЗаполнение()
		Или Не ОплатаПлатежнойКартойКлиентСервер.ПроверитьЗаполнениеДляАннулированияЧекаНПД(Объект.НомерЧекаНПД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Форма.Модифицированность Тогда
		Форма.Записать();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеВыбораПоЧеку(Форма, Текст, СтандартнаяОбработка)

	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора     = Новый Структура("Текст, НомерЧекаНПД", Текст, Объект.НомерЧекаНПД);
	ТекущаяСтрокаТекст   = Текст;

	Если Не ЗначениеЗаполнено(Текст) Тогда
		ТекущаяСтрокаТекст = Объект.НомерЧекаНПД;
	КонецЕсли;
	
	ДанныеВыбора = ОплатаПлатежнойКартойВызовСервера.ДанныеВыбораИзРегистраСведенийНПД(
		ТекущаяСтрокаТекст, Объект.Организация);

	Возврат ДанныеВыбора;
	
КонецФункции

Процедура ЗаполнитьСвойстваПоДоговору(Форма, ИдСтроки)

	РасшифровкаПлатежа = ОплатаПлатежнойКартойКлиентСервер.РеквизитДокумента(
		Форма, ОплатаПлатежнойКартойКлиентСервер.НаименованиеТабличнойЧасти());
	
	СтрокаПлатеж = РасшифровкаПлатежа.НайтиПоИдентификатору(ИдСтроки);
	
	ПараметрыОбъекта = ОплатаПлатежнойКартойКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа  = ОплатаПлатежнойКартойКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);

	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
	
КонецПроцедуры

Процедура ИнициализироватьСвойстваПлатежа(Форма, ТолькоСоздатьКлючи = Ложь)
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		
		Если ТолькоСоздатьКлючи Тогда
			Форма.СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа();
		Иначе
			ОплатаПлатежнойКартойКлиентСервер.ИнициализироватьСвойстваПлатежа(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработкаРасшифровкиПлатежа(Форма, РезультатВыбора)
	
	Модифицированность = Ложь;
	Объект = Форма.Объект;
	
	Если ТипЗнч(РезультатВыбора) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Форма, РезультатВыбора);
		ЗаполнитьЗначенияСвойств(Объект,РезультатВыбора, "СуммаДокумента, Графа5_УСН");
		
		ОплатаПлатежнойКартойКлиентСервер.ПолучитьРасшифровкаПлатежаИзВременногоХранилища(
			Форма, РезультатВыбора.АдресХранилищаРасшифровкаПлатежа);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Возврат Модифицированность;
	
КонецФункции

Функция ПараметрыОтбораДокументаОплатаПлатежнойКартой(Организация)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Организация", Организация);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

#КонецОбласти

