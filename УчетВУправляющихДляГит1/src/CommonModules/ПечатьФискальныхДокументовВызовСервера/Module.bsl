
#Область ПрограммныйИнтерфейс

// Процедура заполняет реквизиты эквайринговой операции. Необходимо передавать эти параметры при оформлении возврата
//
// Параметры:
//  Основание  - <ДокументСсылка> - документ который является основанием документа по которому производится возврат.
//                     это может быть либо "Оплата платежной картой" когда отгрузки не было и просто возвращаем предоплату
//                     или "Возврат товаров от покупателя", когда возвращаем деньги за отгруженный и возвращенный товар
//  Реквизиты - <Структура> - реквизиты операции по карте по которой будет возврат
//                 платежные системы требуют при совершении возврата давать данные исходной операции
//
Процедура ЗаполнитьРеквизитыОперацииОснование(Основание, Реквизиты) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
		ЗаполнитьЗначенияСвойств(
			Реквизиты, 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(Реквизиты,",")));
	Иначе
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("Основание", Основание);
		
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ЕСТЬNULL(ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.СсылочныйНомер, """") КАК СсылочныйНомер,
		|	ЕСТЬNULL(ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.НомерПлатежнойКарты, """") КАК НомерПлатежнойКарты,
		|	ЕСТЬNULL(ОплатаПлатежнойКартойРасшифровкаПлатежа.Ссылка.НомерЧекаЭТ, """") КАК НомерЧекаЭТ
		|ИЗ
		|	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВозвратТоваровОтПокупателя.Сделка = РеализацияТоваровУслуг.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ОплатаПлатежнойКартойРасшифровкаПлатежа
		|		ПО (РеализацияТоваровУслуг.СчетНаОплатуПокупателю = ОплатаПлатежнойКартойРасшифровкаПлатежа.СчетНаОплату)
		|ГДЕ
		|	РеализацияТоваровУслуг.СчетНаОплатуПокупателю <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
		|	И ВозвратТоваровОтПокупателя.Ссылка = &Основание";
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(Реквизиты, Результат[0]);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры 

Функция ИдентификаторУстройстваЭТ(ДокументСсылка) Экспорт
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидОплаты.ПодключаемоеОборудование");
	Иначе
		Возврат Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	КонецЕсли;
КонецФункции
 
Функция ПоддерживаетсяПодключаемоеОборудование(ТипыПО) Экспорт
	Возврат ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьФискальныйРегистратор") 
		И Справочники.ПодключаемоеОборудование.ОборудованиеПоПараметрам(ТипыПО).Количество() > 0;
		
КонецФункции

Функция ПроверитьНеобходимостьАктуализацииРасчетов(Основание, УникальныйИдентификаторФормы) Экспорт
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Ссылка, Проведен, Дата, Организация"); 

	НеобходимаАктуализацияПередСозданиемСчетаФактуры = Ложь;
	Если РеквизитыОснования.Проведен
		И ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		
		// Проверим, есть ли необходимость актуализировать по договорам, используемым в документе.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Основание",   РеквизитыОснования.Ссылка);
		Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента КАК ДоговорКонтрагента
		|ИЗ
		|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|ГДЕ
		|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ = &Основание
		|	И РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация";
		ДоговорыДокумента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
		
		Если ДоговорыДокумента.Количество() > 0 Тогда
			
			МоментАктуальности = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
				РеквизитыОснования.Организация, РеквизитыОснования.Дата, Неопределено, ДоговорыДокумента);
			Если МоментАктуальности <> Неопределено Тогда
				НеобходимаАктуализацияПередСозданиемСчетаФактуры = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимаАктуализацияПередСозданиемСчетаФактуры Тогда
		
		ПараметрыПроцедуры = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
		ПараметрыПроцедуры.Организация             = РеквизитыОснования.Организация;
		ПараметрыПроцедуры.ДатаОкончания           = РеквизитыОснования.Дата;
		ПараметрыПроцедуры.Документ                = РеквизитыОснования.Ссылка;
		ПараметрыПроцедуры.ОстанавливатьсяПоОшибке = Истина;
		ПараметрыПроцедуры.АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификаторФормы);
		
		ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
		ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация для печати чека'");
		ПараметрыВыполненияВФоне.КлючФоновогоЗадания = Основание;
		
		РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчетыВФоне",
			ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
			
		Результат = Новый Структура;
		Результат.Вставить("ДлительнаяОперация",      РезультатРасчета);
		Результат.Вставить("АдресХранилищаСОшибками", ПараметрыПроцедуры.АдресХранилищаСОшибками);
		
		Возврат Результат;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
КонецФункции

Функция ОрганизацияККТСоотвествуетДокументу(Организация, ИННККТ) Экспорт
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	Возврат НЕ ЗначениеЗаполнено(ИННККТ) ИЛИ СведенияОбОрганизации.ИНН = ИННККТ;
КонецФункции

Функция ЧекиПробитыНаФискальномУстройстве(ДокументСсылка, ПараметрыОбработчика) Экспорт
	
	Если ПараметрыОбработчика <> Неопределено Тогда
		
		Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
			Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
				МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
			Иначе // документ
				МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
			КонецЕсли;
			Возврат МодульОбработчика.ЧекиПробитыНаФискальномУстройстве(ДокументСсылка)
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФискальныеОперации.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
	|ГДЕ
	|	ФискальныеОперации.ДокументОснование = &ДокументОснование";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ГрупповаяПечатьЧеков(ПараметрыФормированияЧека, ИдентификаторФормы) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Печать чеков: формирование пакета чеков'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПечатьФискальныхДокументов." + ПараметрыФормированияЧека.ПараметрыОбработчика.ИмяОбработчика,
		ПараметрыФормированияЧека,
		ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьВозможностьПечатиЧеков(ОбъектСсылка, ПараметрыОбработчика, ПечататьЧек, ТекстПредупреждения) Экспорт
	
	Если ПараметрыОбработчика.Свойство("ТипОбъекта") Тогда
		Если ПараметрыОбработчика.ТипОбъекта = "ОбщийМодуль" Тогда
			МодульОбработчика = ОбщегоНазначения.ОбщийМодуль(ПараметрыОбработчика.ИмяОбъекта);
		Иначе // документ
			МодульОбработчика = Документы[ПараметрыОбработчика.ИмяОбъекта];
		КонецЕсли;
		МодульОбработчика.ПроверитьВозможностьПечатиЧеков(ОбъектСсылка, ПечататьЧек, ТекстПредупреждения)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 
