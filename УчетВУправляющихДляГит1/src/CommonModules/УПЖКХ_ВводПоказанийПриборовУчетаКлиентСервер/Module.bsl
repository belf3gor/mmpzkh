
#Область ПрочиеПроцедурыИФункции

// Проверяет, есть ли уже выбранный счетчик в дереве показаний.
//
// Параметры
//  Счетчик  - выбранный счетчик.
//
// Возвращаемое значение:
//   Булево - флаг отсутствия выбранного счетчика в дереве показаний.
//
Функция ПроверитьНаличиеСчетчикаВТаблице(Счетчик, ДеревоПоказаний) Экспорт

	ЭлементыДерева = ДеревоПоказаний.ПолучитьЭлементы();
	
	Результат = -1;
	ном = 0;
	
	Пока Результат = -1 И ном < ЭлементыДерева.Количество() Цикл
		
		Если ЭлементыДерева[ном].Счетчик = Счетчик Тогда
			Результат = ном;
		КонецЕсли;
		
		ном = ном + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПроверитьНаличиеСчетчикаВТаблице()

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

// Устанавливает значение для иконки состояния документа "Корректировка начислений".
//
Процедура УстановитьСостояниеДокументаКорректировкаНачислений(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не Форма.ДокументКорректировкаНачислений.Пустая() Тогда
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Форма.ДокументКорректировкаНачислений, "ПометкаУдаления") = Истина Тогда
			Форма.СостояниеДокументаКорректировкаДолга = 2;
		ИначеЕсли УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Форма.ДокументКорректировкаНачислений, "Проведен") = Истина Тогда
			Форма.СостояниеДокументаКорректировкаДолга = 1;
		Иначе
			Форма.СостояниеДокументаКорректировкаДолга = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСостояниеДокументаКорректировкаНачислений()

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиПоказанийСчетчиков

// Функция проверяет корректность введенных показаний прибора учета на предмет соответствия разрядности и тарифности.
//
// Параметры:
//  Показания   - Структура - структура с показаниями.
//                Структура должна содержать значения для следующих ключей:
//	"Счетчик", "ДневноеПоказание", "НочноеПоказание", "ПиковоеПоказание" и опционально "НомерСтроки".
//
// Возвращаемое значение:
//   ПоказанияКорректны   - булево - возвращает Истина,
//                          если показания соответствуют тарифности и
//                          если разрядность показания не превышает разрядность счетчика.
//
Функция ПроверитьКорректностьПоказанийСчетчика(Показания, ВыводитьСообщениеОбОшибке = Ложь) Экспорт
	
	// Определяем порядок видов тарифов.
	ПорядокВидовТарифов = ПолучитьПорядокВидовТарифов();
	
	// Получим максимальное значение показания прибора учета.
	МаксЗначениеПоказания = ПолучитьМаксЗначениеПоказанияСчетчика(Показания.Счетчик, Показания.Разрядность);
	
	// Определяем количество тарифов прибора учета.
	ТарифностьЧислом = ПолучитьТарифностьЧислом(Показания.Тарифность);
	
	Отказ = Ложь;
	
	// Проверим введенные показания.
	Для Сч = 1 По ТарифностьЧислом Цикл
		
		// Определяем тек вид тарифа из порядка видов тарифов.
		ТекВидТарифа = ПорядокВидовТарифов[Сч - 1];
		
		// Проверяем, есть ли в параметре показания с текущим ключом.
		ТекПоказание = Неопределено;
		Если Не Показания.Свойство(ТекВидТарифа, ТекПоказание) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем корректность показаний.
		Если НЕ ТекПоказание = 0 И ТекПоказание > МаксЗначениеПоказания Тогда
			
			Если ВыводитьСообщениеОбОшибке Тогда
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Строка № " + Показания.НомерСтроки + ": "
				                + "Введенное " + ПолучитьПредставлениеВидаПоказания(ТекВидТарифа, "И")
				                + " показание не соответствует разрядности прибора учета "
				                + Показания.Счетчик + "!";
				
				Сообщение.Поле = ТекВидТарифа;
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТарифностьЧислом < ПорядокВидовТарифов.Количество() Тогда
		Для Сч = ТарифностьЧислом + 1 По ПорядокВидовТарифов.Количество() Цикл
			// Определяем тек вид тарифа из порядка видов тарифов.
			ТекВидТарифа = ПорядокВидовТарифов[Сч - 1];
			
			// Проверяем, есть ли в параметре показания с текущим ключом.
			ТекПоказание = Неопределено;
			Если Показания.Свойство(ТекВидТарифа, ТекПоказание) Тогда
				Если ЗначениеЗаполнено(ТекПоказание) Тогда
					Если ВыводитьСообщениеОбОшибке Тогда
						
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = "Строка № " + Показания.НомерСтроки + ": "
						                + "Введенное " + ПолучитьПредставлениеВидаПоказания(ТекВидТарифа, "И")
						                + " показание не соответствует тарифности прибора учета "
						                + Показания.Счетчик + "!";
						
						Сообщение.Поле = ТекВидТарифа;
						
						Сообщение.Сообщить();
						
					КонецЕсли;
					
					Отказ = Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции // ПроверитьКорректностьПоказанийСчетчика()

// Функция получает и возвращает структуры типов ошибок введенных показаний.
//
// Параметры:
//  Счетчик              - Ссылка    - текущий счетчик, по которому проверяются показания;
//  ДатаПоказаний        - Дата      - дата, на которую проверяются показания;
//  СтруктураПоказаний   - Структура - Сруктура полученных показаний, включает в себя:
//                         Средние показания, Текущие показания и Предыдущие показания.
// 
// Возвращаемое значение:
//  СтруктураОшибокВСтроке - структура ошибок, обнаруженных в строке по каждому виду тарифа.
//
Процедура ЗаполнитьПризнакиОшибокВПоказаниях(СтрокаСчетчика, РазмерДопустимогоПревышенияСреднегоРасхода, ИспользоватьКонтрольПоказанийПриборовУчета = Ложь) Экспорт
	
	Счетчик       = СтрокаСчетчика.Счетчик;
	ДатаПоказаний = СтрокаСчетчика.ДатаПоказания;
	
	СтрокаСчетчика.ПереходЧерезНольДневное = Ложь;
	СтрокаСчетчика.ПереходЧерезНольНочное  = Ложь;
	СтрокаСчетчика.ПереходЧерезНольПиковое = Ложь;
	СтрокаСчетчика.ТипОшибкиДневной        = "";
	СтрокаСчетчика.ТипОшибкиНочной         = "";
	СтрокаСчетчика.ТипОшибкиПиковый        = "";
	
	// Если дата показания не задана, будем брать текущую дату.
	Если ДатаПоказаний = Дата("00010101") Тогда
		ДатаПоказаний = ТекущаяДата();
	КонецЕсли;
	
	КоличествоМесяцевОтсутствияПоказаний = ПолучитьКоличествоМесяцевОтсутствияПоказаний(Счетчик, ДатаПоказаний, СтрокаСчетчика.ДатаПредыдущегоПоказания, СтрокаСчетчика.ПредыдущееПоказаниеНачальное);
	
	ЗаполнитьСведенияОбОшибкахВСтрокеСчетчика(СтрокаСчетчика, СтрокаСчетчика.ДневноеПоказание, СтрокаСчетчика.ДневноеПоказаниеПредыдущее,
											  СтрокаСчетчика.СреднийРасходДневной, СтрокаСчетчика.ПереходЧерезНольДневное,
											  СтрокаСчетчика.ТипОшибкиДневной, ИспользоватьКонтрольПоказанийПриборовУчета,
											  КоличествоМесяцевОтсутствияПоказаний, РазмерДопустимогоПревышенияСреднегоРасхода);
	
	ЗаполнитьСведенияОбОшибкахВСтрокеСчетчика(СтрокаСчетчика, СтрокаСчетчика.НочноеПоказание, СтрокаСчетчика.НочноеПоказаниеПредыдущее,
											  СтрокаСчетчика.СреднийРасходНочной, СтрокаСчетчика.ПереходЧерезНольНочное,
											  СтрокаСчетчика.ТипОшибкиНочной, ИспользоватьКонтрольПоказанийПриборовУчета,
											  КоличествоМесяцевОтсутствияПоказаний, РазмерДопустимогоПревышенияСреднегоРасхода);
	
	ЗаполнитьСведенияОбОшибкахВСтрокеСчетчика(СтрокаСчетчика, СтрокаСчетчика.ПиковоеПоказание, СтрокаСчетчика.ПиковоеПоказаниеПредыдущее,
											  СтрокаСчетчика.СреднийРасходПиковый, СтрокаСчетчика.ПереходЧерезНольПиковое,
											  СтрокаСчетчика.ТипОшибкиПиковый, ИспользоватьКонтрольПоказанийПриборовУчета,
											  КоличествоМесяцевОтсутствияПоказаний, РазмерДопустимогоПревышенияСреднегоРасхода);
	
КонецПроцедуры

// Функция возвращает количество тарифов для указанной тарифности прибора учета.
//
Функция ПолучитьТарифностьЧислом(Тарифность) Экспорт
	
	ТарифностьЧислом = 0;
	
	Если Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Однотарифный") Тогда
		ТарифностьЧислом = 1;
	ИначеЕсли Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный") Тогда
		ТарифностьЧислом = 2;
	ИначеЕсли Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный") Тогда
		ТарифностьЧислом = 3;
	КонецЕсли;
	
	Возврат ТарифностьЧислом;
	
КонецФункции

// Функция возвращает число предыдущих месяцев,
// в течение которых показания по счетчику не предоставлялись.
//
Функция ПолучитьКоличествоМесяцевОтсутствияПоказаний(Счетчик, ДатаПоказания, ДатаПредыдущегоПоказания = Неопределено, ПредыдущееПоказаниеНачальное = Истина) Экспорт
	
	КоличествоМесяцевОтсутствияПоказаний = 1;
	
	// Если документ заполнялся до того, как колонка "Дата предыдущего показания" появилась, то заполняем по-старому.
	Если ДатаПредыдущегоПоказания = Неопределено ИЛИ ДатаПредыдущегоПоказания = Дата(1, 1, 1) Тогда
		
		ДатаПоследнихПоказаний = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьДатуПоследнегоПоказанияСчетчика(Счетчик, ДатаПоказания);
		
		Если Не ДатаПоследнихПоказаний = Дата(1, 1, 1) Тогда
			КоличествоМесяцевОтсутствияПоказаний = РазностьДатМесяц(ДатаПоследнихПоказаний, ДатаПоказания);
		КонецЕсли;
		
	// Если документ заполнялся при наличии новой колонки "Дата предыдущего показания", то заполняем по оптимальному алгоритму.
	ИначеЕсли Не ПредыдущееПоказаниеНачальное = Истина Тогда // Условие на начальное показание взято из старого механизма.
		
		КоличествоМесяцевОтсутствияПоказаний = РазностьДатМесяц(ДатаПредыдущегоПоказания, ДатаПоказания);
		
	КонецЕсли;
	
	Возврат КоличествоМесяцевОтсутствияПоказаний;
	
КонецФункции

// Получает текущий расход по счетчику.
//
Функция ПолучитьРасходПоСтрокеСчетчика(СтрокаСчетчика, ТипПоказания, Отказ = Ложь) Экспорт
	
	Если СтрокаСчетчика[ТипПоказания] = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Счетчик             = СтрокаСчетчика.Счетчик;
	ТекущееПоказание    = СтрокаСчетчика[ТипПоказания];
	ПредыдущееПоказание = СтрокаСчетчика[ТипПоказания + "Предыдущее"];
	
	Возврат ПолучитьРасходПоСчетчику(Счетчик, ТекущееПоказание, ПредыдущееПоказание, СтрокаСчетчика.СпособРегистрацииПоказаний, СтрокаСчетчика.Разрядность);
	
КонецФункции // ПолучитьРасходПоСтрокеСчетчика()

// Функция получет расход значений показаний по счетчику.
//
// Параметры:
//  Счетчик - Элемент справочника "Счетчики" - ссылка на счетчик
//  ТекущееПоказание - Число - текущее показание счетчика
//  ПредыдущееПоказание - Число - предыдущее показание счетчика.
//
// Возвращаемое значение:
//  Число - Расход показаний по счетчику.
//
Функция ПолучитьРасходПоСчетчику(Счетчик, ТекущееПоказание, ПредыдущееПоказание, СпособРегистрацииПоказаний, Разряность = Неопределено)
	
	Если СпособРегистрацииПоказаний = ПредопределенноеЗначение("Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.РасходЗаПериодРасчета") Тогда
		Возврат ТекущееПоказание;
	КонецЕсли;
	
	// Реализуем проверку для того, чтобы исключить возникновение конфигураторской ошибки.
	// Проверяем в случае, когда переданное текущее показание неопределено. 
	Если ТекущееПоказание = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	РасходПоСчетчику = ТекущееПоказание - ПредыдущееПоказание;
	Если РасходПоСчетчику < 0 Тогда
		Если ПереходПоказанийЧерезНоль(Счетчик, ТекущееПоказание, ПредыдущееПоказание) Тогда
			МаксПоказаниеСч  = ПолучитьМаксЗначениеПоказанияСчетчика(Счетчик, Разряность) + 1;
			РасходПоСчетчику = (МаксПоказаниеСч - ПредыдущееПоказание) + ТекущееПоказание;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасходПоСчетчику;
	
КонецФункции // ПолучитьРасходПоСчетчику()

// Получает максимальное значение показания счетчика в зависимости от разрядности.
//
Функция ПолучитьМаксЗначениеПоказанияСчетчика(Счетчик, Разрядность = Неопределено)
	
	Если Разрядность = Неопределено Тогда
		Возврат УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьМаксЗначениеПоказанияСчетчика(Счетчик);
	Иначе
		Возврат Pow(10, Разрядность) - 1;
	КонецЕсли;
	
КонецФункции // ПолучитьМаксЗначениеПоказанияСчетчика()

// Функция определяет, попали ли показания счетчика в
// промежуток перехода через нулевые показания.
//
// Параметры:
//  Счетчик - Элемент справочника "Счетчики" - ссылка на счетчик
//  ТекущееПоказание - Число - текущее показание счетчика
//  ПредыдущееПоказание - Число - предыдущее показание счетчика.
//
// Возвращаемое значение:
//  Булево - признак перехода значений через 0.
//
Функция ПереходПоказанийЧерезНоль(Счетчик, ТекущееПоказание, ПредыдущееПоказание, Разрядность = Неопределено)
	
	ПоказаниеВПределахПерехода = Ложь;
	
	МаксПоказаниеСчетчика = ПолучитьМаксЗначениеПоказанияСчетчика(Счетчик, Разрядность) + 1;
	ПредРасчЧисло = ПредыдущееПоказание / МаксПоказаниеСчетчика;
	ТекРасчЧисло  = ТекущееПоказание    / МаксПоказаниеСчетчика;
	
	Если (ПредРасчЧисло >= 0.9 И ПредРасчЧисло < 1) И (ТекРасчЧисло < 0.9) Тогда
		ПоказаниеВПределахПерехода = Истина;
	КонецЕсли;
	
	Возврат ПоказаниеВПределахПерехода;
	
КонецФункции

// Функция формирует упорядоченный массив видов тарифов.
//
Функция ПолучитьПорядокВидовТарифов()
	
	МассивПоказаний = Новый Массив;
	МассивПоказаний.Добавить("ДневноеПоказание");
	МассивПоказаний.Добавить("НочноеПоказание");
	МассивПоказаний.Добавить("ПиковоеПоказание");
	
	Возврат МассивПоказаний;
	
КонецФункции

// Функция возвращает представление вида показания.
//
Функция ПолучитьПредставлениеВидаПоказания(ВидТарифа, Падеж)
	
	Если Падеж = "И" Тогда
		ТекстПредставления = ?(Лев(ВидТарифа, 1) = "Д", "дневное", ?(Лев(ВидТарифа, 1) = "Н", "ночное", "пиковое"));
	ИначеЕсли Падеж = "Р" Тогда
		ТекстПредставления = ?(Лев(ВидТарифа, 1) = "Д", "дневного", ?(Лев(ВидТарифа, 1) = "Н", "ночного", "пикового"));
	Иначе
		ТекстПредставления = "";
	КонецЕсли;
	
	Возврат ТекстПредставления;
	
КонецФункции

// Функция возвращает количество месяцев между двумя датами.
//
// Параметры:
//  ДатаНачала    - Дата - дата начала определяемого периода;
//  ДатаОкончания - Дата - дата окончания определяемого периода.
// 
// Возвращаемое значение:
//  Количество месяцев между датами - Число.
//
Функция РазностьДатМесяц(ДатаНачала, ДатаОкончания)
	
	РазностьДат = 0;
	
	НачалоНачальногоМесяца = НачалоМесяца(ДатаНачала);
	НачалоКонечногоМесяца  = НачалоМесяца(ДатаОкончания);
	
	Пока НачалоКонечногоМесяца > НачалоНачальногоМесяца Цикл
		
		РазностьДат           = РазностьДат + 1;
		НачалоКонечногоМесяца = НачалоМесяца(НачалоКонечногоМесяца - 1);
		
	КонецЦикла;
	
	Возврат РазностьДат;
	
КонецФункции // РазностьДатМесяц()

// Заполняет сведения об ошибках в строке счетчика.
//
Процедура ЗаполнитьСведенияОбОшибкахВСтрокеСчетчика(СтрокаСчетчика, ТекПоказание, ПредПоказание, СреднийРасход, ПереходЧерезНоль, ТипОшибки, ИспользоватьКонтрольПоказанийПриборовУчета, КоличествоМесяцевОтсутствияПоказаний, РазмерДопустимогоПревышенияСреднегоРасхода)
	
	Счетчик                    = СтрокаСчетчика.Счетчик;
	Разрядность                = СтрокаСчетчика.Разрядность;
	СпособРегистрацииПоказаний = СтрокаСчетчика.СпособРегистрацииПоказаний;
	
	Если Не ТекПоказание = Неопределено 
		 И (ТекПоказание - ПредПоказание) < 0
		 И СпособРегистрацииПоказаний = ПредопределенноеЗначение("Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом") Тогда
		
		тмПереходЧерезНоль = ПереходПоказанийЧерезНоль(Счетчик, ТекПоказание, ПредПоказание, Разрядность);
		
		Если тмПереходЧерезНоль Тогда
			ПереходЧерезНоль = Истина;
		ИначеЕсли ИспользоватьКонтрольПоказанийПриборовУчета Тогда 
			ТипОшибки = "Отрицательный расход";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ТекПоказание = Неопределено
		  И ИспользоватьКонтрольПоказанийПриборовУчета
		  И Не ТипОшибки = "Отрицательный расход"
		  И СреднийРасход > 0 Тогда
		
		ТекущийРасход = ПолучитьРасходПоСчетчику(Счетчик, ТекПоказание, ПредПоказание, СпособРегистрацииПоказаний, Разрядность);
		
		// Если перед месяцем, предшествующим вводу показаний были месяцы, за которые показания не предоставлялись,
		// в таком случае получим среднемесячный расход за период отсутствия показаний.
		Если КоличествоМесяцевОтсутствияПоказаний > 1 Тогда
			ТекущийРасход = ТекущийРасход / КоличествоМесяцевОтсутствияПоказаний;
		КонецЕсли; 
		
		ТекущееПревышениеСреднемесячногоРасхода = ((ТекущийРасход - СреднийРасход)/СреднийРасход)*100;
		
		Если ТекущееПревышениеСреднемесячногоРасхода > РазмерДопустимогоПревышенияСреднегоРасхода Тогда
			ТипОшибки = "Превышение среднего расхода";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
