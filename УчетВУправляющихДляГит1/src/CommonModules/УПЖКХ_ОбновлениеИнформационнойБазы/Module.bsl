////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Объявление библиотеки.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить(КВП_ПрочиеПроцедурыИФункции.НаименованиеТиповойКонфигурации(Метаданные.Имя));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий обновления информационной базы.

// См. описание в ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() .
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Для новой базы при первоначальном заполнении выполняются только обработчики,
	// у которых установлено свойство НачальноеЗаполнение в Истина.
	// Если необходимо выполнить какие-то действия при первоначальном заполнении ИБ,
	// необходимо добавить соответствующие операции в процедуру
	// ДействияПриНачальномЗаполненииИнформационнойБазы.
	// При этом, для иных обработчиков НЕ СЛЕДУЕТ указывать свойство
	// НачальноеЗаполнение в значении Истина, т.к. в данном случае обработчик будет
	// выполнен при переходе на с редакции 2.0.
	//
	// Обработчик обновления обязательно должен быть экспортным.
	//
	// Шаблон обработчика обновления:
	//
	// Обработчик = Обработчики.Добавить();
	// Обработчик.Версия = "3.0.#.#";
	// Обработчик.Процедура = "<Имя общего модуля / путь до модуля менеджера объекта>.<Имя экспортной процедуры>";
	// В имени обработчика обновления не нужно указывать номер версии, для которой вызывается обработчик.
	// Н-р, неверно:
	// ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2
	// Верно:
	// ЗаполнитьПредопределенныеВидыКонтактнойИнформации
	//
	// Обработчик.НачальноеЗаполнение = {Истина|Ложь};
	// Обработчик.РежимВыполнения = {"Монопольно"|"Оперативно"|"Отложенно"};
	//
	// Порядок вызова обработчиков обновления в пределах одной версии является случайным,
	// т.е. нельзя ставить в зависимость работоспособность одного обработчика обновления
	// от выполнения другого обработчика. Если подобные зависимости появляются,
	// то такие обработчики необходимо объединять в один, указывать наименование обработчика:
	// "ДействияПриОбновленииНа_3_0_#_#".
	//
	// Отложенные обработчики обновления:
	//
	// Для того чтобы указать, что обработчик обновления должен выполняться отложенно,
	// необходимо свойству РежимВыполнения присвоить значение Отложенно,
	// указать уникальный идентификатор и задать комментарий,
	// который кратко поясняет пользователю, какие данные и как он обрабатывает.
	//
	// Свойство "Идентификатор" нужно заполнять строкой в определенном формате.
	// Строку уникального идентификатора для подстановки в это свойство можно сгенерировать с помощью обработки
	// "УПЖКХ_ГенерацияСтрокиУникальногоИдентификатора"
	// (\\FS\Distrs\TSZH_3.0\Доп_отчеты_обработки\Сервисные обработки\Генерация строки уникального идентификатора).
	//
	// При возникновении ошибки в обработчике обновления всегда необходимо вызывать исключение.
	// В противном случае может возникнуть ситуация, когда обработчик будет выполняться бесконечно
	// долго (если параметру ОбработкаЗавершена присвоено значение Ложь), а данные ИБ не будут обновлены.
	//
	// Процедуры обновления выполняются в следующем порядке:
	// 1. ПриОпределенииРежимаОбновленияДанных, при этом:
	//  1.1. Если выполняется переход на новый механизм обновления, тогда версия подсистемы устанавливается
	// из константы ЖКХ (Удалить_КВП_НомерВерсииКонфигурации), стандантная обработка не используется,
	// применяетя режим обновления данных "ОбновлениеВерсии".
	//  1.2. Если выполняется переход с редакции 2.0, тогда версия подсистемы не изменяется, 
	// стандантная обработка не используется, применяетя режим обновления данных "ОбновлениеВерсии".
	// 2. ПередОбновлениемИнформационнойБазы.
	// 3. Формирование списка обработчиков обновления.
	// 4. Выполнение обработчиков обновления:
	//  4.1. Обработчики для всех версий (Обработчик.Версия = "*").
	// Если такой обработчик выполняется монопольно, нужно указывать в параметрах процедуры Параметры = Неопределено.
	//  4.2. В зависимости от наличия в регистре сведений "Версии подсистем" информации о подсистеме
	//  УчетВУправляющихКомпаниях на момент формирования списка обработчиков (п.2):
	//   4.2.1. Если сведения имеются (обычное обновление, переход на типовой механизм обновления),
	//   тогда выполняются обработчики с текущей версии по версию, указанную в метаданных
	//   (без учета иных свойств обработчиков, таких как НачальноеЗаполнение).
	//   4.3.2. Если сведения отсутствуют (переход с редакции 2.0), тогда выполняются только обработчики
	//   с свойством НачальноеЗаполнение в значении Истина. Поэтому необходимо устанавливать данное
	//   свойство только в тех случаях, когда обработчик должен выполняться и при начальном заполнении
	//   пустой ИБ, и при переходе с редакции 2.0.
	// 5. ПослеОбновленияИнформационнойБазы - сохранение структуры настроек для печати описания измений
	// в хранилище общих настроек.
	// 6. Выполнение отложенных обработчиков обновления.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьДатуТекущейВерсии";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриНачальномЗаполненииИнформационнойБазы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьПереходСРедакции20";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПроверитьНеобходимостьИзмененияВеденияУчетаПоПарковочнымМестам_3_0_44_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбновитьДанныеПредопределенныхВидовГруппНастройкиРасчётаЛьготСправочникаГруппыУслуг_3_0_44_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.12";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12";
	
	// В состав задач бухгалтера добавлены 2 регл. отчета подсистемы ЖКХ.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.13";
	Обработчик.Процедура = "Справочники.ЗадачиБухгалтера.ЗаполнитьТребованиямиНормативныхДокументов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.13";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.14";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.14";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.14";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ИсправитьОтрицательныеДвиженияПоКУДиРТиповымиДокументамиПоступленияОплат_3_0_44_14";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.44.19";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриОбновленииНа_3_0_44_19";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.46.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.46.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.46.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриОбновленииНа_3_0_46_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.47.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.47.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриОбновленииНа_3_0_49_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7";
	
	// Выполняем обработчик еще раз - для тех информационных баз, в которых некорректное
	// было произведено начальное заполнение.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.49.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.50.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.50.2";
	Обработчик.Процедура           = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьПредставлениеОтветственногоСобственникаВЭлементахСправочникаЛицевыеСчета_3_0_50_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий		   = НСтр("ru = 'Заполнение представления ответственного собственника в элементах справочника ""Лицевые счета"".'");
	Обработчик.РежимВыполнения 	   = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("3ee9683b-bfbf-4680-9284-f9795912a614");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.51.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.51.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.51.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьМаксимальноеКоличествоЛСВФайлеОбменаПоУмолчанию_3_0_52_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.52.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначенияДополнительногоРеквизитаQRШтрихкодаКодУслуги_3_0_52_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.53.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОтключитьНастройкуРазрешитьПечатьЧековПриОплатеБанковскойКартой_3_0_53_1";
	
	// Для корректного выполнения обработчика требуется обновление на версию не позднее
	// 3.0.65.3, т.к. в версии 3.0.65.4 был изменен тип измерения "Объект" регистра
	// "УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ" с составного,
	// включающего "СправочникСсылка.КВП_Счетчики", на "СправочникСсылка.КВП_ЛицевыеСчета".
	// В противном случае, при реструктуризации ИБ данные регистра по этому измерению
	// будут потеряны.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.53.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.53.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОпределитьИспользуетсяЛиФункционалУчетаТСЖ_3_0_53_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.53.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов_3_0_53_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.53.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.54.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.54.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.54.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.55.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьУсловияДПОИ_3_0_55_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.57.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.58.1";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.59.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.60.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.60.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.62.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриОбновленииНа_3_0_62_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.64.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.64.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.64.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.64.10";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.64.11";
	Обработчик.Процедура           = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета_3_0_64_11";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru = 'Заполнение значения реквизита ""АдресЭлектроннойПочты"" лицевого счета первыми 255 символами реквизита ""ЭлектронныйЯщик""'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("338aea81-c1a2-49a2-b30c-2618cb49c54d");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.65.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.65.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.65.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.65.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.65.9";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриОбновленииНа_3_0_65_9";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов_3_0_66_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.4";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПерезаполнитьНастройкуЗагрузкиРеестровПУОВариантеЗагрузкиНулевыхПоказаний_3_0_66_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.5";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ОбновитьДанныеПредопределенныхВидовГруппНастройкиОтраженияНачисленийСправочникаГруппыУслуг_3_0_66_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.5";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.5";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.5";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьПереносНастроекВСправочникУПЖКХ_НастройкиУниверсальнойВыгрузкиДанных_3_0_66_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте_3_0_66_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.66.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами_3_0_66_7";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.67.5";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.67.9";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.68.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкиЗагрузкиВыгрузкиДляУниверсальнойВыгрузкиДанных_3_0_68_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.68.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_68_3";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.2";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ПерезаполнитьЗначенияРеквизитовСправочникаКВП_Услуги";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьКодОрганизацииДляQRКодаВНастройкахФормированияПлатежногоДокумента";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.3";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДобавитьПараметрКодОрганизацииВСоставШКВНастройкахФормированияПлатежногоДокумента";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.6";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияВПодсистемеСМСПриОбновленииНа_3_0_70_6";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.7";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьРасписаниеСлужебногоРеглЗаданияПолученияВажныхСообщенийИВключитьНапоминанияПользователей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.10";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.УстановитьНастройкиРаспределенияОтрицательногоОДНПостановление1708";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.70.11";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьКлючевыеОперацииЖКХ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.71.4";
	Обработчик.Процедура           = "УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеРеквизитаВариантКорректировкиУслуг";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru = 'Заполнение значения реквизита ""Вариант корректировки услуг"" в документе ""Корректировка начислений""'");
	Обработчик.БлокируемыеОбъекты  = "Документ.КВП_КорректировкаНачислений";
	Обработчик.ПроцедураПроверки   = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("0ca8a8a8-9e78-4965-b2ab-f121c64b09f7");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.71.8";
	Обработчик.Процедура = "УПЖКХ_ОбновлениеИнформационнойБазы.ИзменитьФормуПлатежногоДокументаВНастройкахФормированияПлатежногоДокумента";
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Если ВыводитьОписаниеОбновлений Тогда
		СтруктрураВерсийПриОбновлении = Новый Структура;
		СтруктрураВерсийПриОбновлении.Вставить("ПредыдущаяВерсия", ПредыдущаяВерсия);
		СтруктрураВерсийПриОбновлении.Вставить("ТекущаяВерсия",    ТекущаяВерсия);
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СтруктрураВерсийПриОбновлении", , СтруктрураВерсийПриОбновлении,,ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	// Добавляются стандартные обработчики БП.
	ОбновлениеИнформационнойБазыБП.ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики);
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = УПЖКХ_ИнформацияОРазработчикеИПрограмме.НаименованиеКонфигурации();
	Обработчик.Процедура                  = "Обработки.ФункциональностьПрограммы.УстановитьПолнуюФункциональность";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = УПЖКХ_ИнформацияОРазработчикеИПрограмме.НаименованиеКонфигурации();
	Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыБП.УстановитьКонстантыВестиУчетПоОрганизациям";
	
	// Обработчик первоначального заполнения ИБ выполняется только
	// для случая перехода с БП на ЖКХ (Базовой или Проф).
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации  = КВП_ПрочиеПроцедурыИФункции.НаименованиеТиповойКонфигурации(Метаданные.Имя);
	Обработчик.Процедура                  = "УПЖКХ_ОбновлениеИнформационнойБазы.ДействияПриНачальномЗаполненииИнформационнойБазы";
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ВыполняетсяПереходСБазовойНаПрофВерсиюЖКХ() Тогда
		// При переходе с базовой на проф. версию ЖКХ до запуска обновления необходимо менять
		// наименование типовой конфигурации в регистре сведений "Версии подсистем", т.к.
		// если этого не сделать, механизм обновления некорреткно определяет номер редакции библиотеки
		// БП, а также для неосновной библиотеки отстутствует возможность актуализировать наименовение
		// в регистре сведений типовыми методами.
		ИзменитьНаименованиеБиблиотекиБПБазовая("БухгалтерияПредприятияБазовая");
		ИзменитьНаименованиеБиблиотекиБПБазовая("БухгалтерияПредприятияБазовая1");
	ИначеЕсли ВыполняетсяПереходНаТиповойМеханизмОбновления() Тогда
		// Для перехода на типовой механизм обновления необходимо использовать режим обновления данных
		// "ОбновлениеВерсии", заполнять версию конфигурации в регистре сведений "Версии подсистем"
		// из константы, чтобы исключить повторное выполнение ранее отработавших обработчиков обновлдения.
		РежимОбновленияДанных = "ОбновлениеВерсии";
		СтандартнаяОбработка = Ложь;
		ОбновлениеИнформационнойБазыСлужебный.УстановитьВерсиюИБ(Метаданные.Имя, Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить(), Истина);
	ИначеЕсли ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда
		// Действия из аналогичного обработчика блока БП, т.к. процедура
		// ПриОпределенииРежимаОбновленияДанных вызывается только для основной конфигурации.
		РежимОбновленияДанных = "ОбновлениеВерсии";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	// Для случая перехода с БП не очищаем сведения о предыдущей конфигурации.
	// В противном случае будут заново выполнены все обработчики обновления БП.
	Если ПредыдущееИмяКонфигурации = КВП_ПрочиеПроцедурыИФункции.НаименованиеТиповойКонфигурации(Метаданные.Имя) Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Пытается записать обработанный объект.
// В случае, если записать не удалось, производит добавление сообщения пользователю с его записью в журнал регистрации.
//
// Параметры
//  Объект       - объект, который нужно записать.
//  Параметр     - параметр записи.
//
// Возвращаемое значение:
//  Булево - удалось ли произвести запись.
//
Функция ЗаписатьОбъект(Объект, Параметр = Неопределено)
	
	ТекстОшибки = "";
	
	// Пытаемся записать объект.
	Записан = КВП_ЗаписатьОбъект(Объект, Параметр, ТекстОшибки);
	
	// Если записать не удалось, производим добавление сообщения пользователю с его записью в журнал регистрации.
	Если Не ТекстОшибки = "" Тогда
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			, , ТекстОшибки);
	КонецЕсли;
	
	Возврат Записан;
	
КонецФункции

// Функция возвращает номер версии и сборки числом. Используется для сравнения версий.
//
Функция ПолучитьНомерВерсииЧислом(НомерВерсии)
	
	МассивНомерВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерВерсии, ".");
	
	Попытка
		
		ВерсияЧислом = Число(МассивНомерВерсии[2]);
		СборкаЧислом = Число(МассивНомерВерсии[3]);
		
		НомерВерсииЧислом = ВерсияЧислом * 100 + СборкаЧислом;
		
	Исключение
		НомерВерсииЧислом = 0;
	КонецПопытки;
	
	Возврат НомерВерсииЧислом;
	
КонецФункции

// Процедура вызывает исключение при неудачной попытке обновления информационной базы.
//
// Параметры:
//  ТекстПодробногоОписания - Строка - текст описания ошибки.
Процедура ВызватьИсключениеПриОбновлении(ТекстПодробногоОписания = "") Экспорт
	
	// Ранее производилась запись в журнал регистрации с информацией о ошибке,
	// либо успешном выполнении обработчика обновления.
	// После перехода на типовой механизм обновления запись в журнал выполняется
	// типовыми процедурами после завершения каждого обработчика обновления.
	
	ВызватьИсключение ТекстПодробногоОписания;
	
КонецПроцедуры

// Определяет, выполняется ли переход на типовой механизм обновления ИБ.
//
Функция ВыполняетсяПереходНаТиповойМеханизмОбновления()
	
	ЭтоПереходНаТиповойМеханизмОбновления = Ложь;
	
	НомерВерсииКонфигурацииВКонстанте = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НомерВерсииКонфигурацииВРегистре  = ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя);
	
	Если Лев(НомерВерсииКонфигурацииВКонстанте, 1) = "3"
	   И НомерВерсииКонфигурацииВРегистре = "0.0.0.0" Тогда
		
		ЭтоПереходНаТиповойМеханизмОбновления = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоПереходНаТиповойМеханизмОбновления;
	
КонецФункции // ВыполняетсяПереходНаТиповойМеханизмОбновления

// Определяет, выполняется ли переход с базовой на проф. версию ЖКХ.
//
Функция ВыполняетсяПереходСБазовойНаПрофВерсиюЖКХ()
	
	ЭтоПереходСБазовойНоПрофВерсиюЖКХ = Ложь;
	
	Если КВП_ПрочиеПроцедурыИФункции.ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат ЭтоПереходСБазовойНоПрофВерсиюЖКХ;
	КонецЕсли;
	
	Если ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(УПЖКХ_ИнформацияОРазработчикеИПрограмме.НаименованиеКонфигурации()) <> "0.0.0.0"
	   И ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя) = "0.0.0.0" Тогда
		
		ЭтоПереходСБазовойНоПрофВерсиюЖКХ = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоПереходСБазовойНоПрофВерсиюЖКХ;
	
КонецФункции

// Выполняет изменение наименования библиотеки БП на соответствующее ПРОФ версии наименование.
//
// Параметры:
// ИдентификаторБиблиотекиБазоваяБП - Строка - наименование типовой библиотеки в регистре сведений
//                                    "Версии подсистем", которое нужно изменить.
//
Процедура ИзменитьНаименованиеБиблиотекиБПБазовая(ИдентификаторБиблиотекиБазоваяБП)
	
	Если ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ИдентификаторБиблиотекиБазоваяБП) = КВП_ПрочиеПроцедурыИФункции.НомерВерсииТиповойКонфигурации(Метаданные.Версия) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ИмяПодсистемы = ИдентификаторБиблиотекиБазоваяБП;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ИмяПодсистемы = КВП_ПрочиеПроцедурыИФункции.НаименованиеТиповойКонфигурации(Метаданные.Имя);
			Если Не ЗаписатьОбъект(МенеджерЗаписи, Истина) Тогда
				ВызватьИсключениеПриОбновлении("В процедуре ""ПриОпределенииРежимаОбновленияДанных"" не удалось изменить наименование типовой конфигурации!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьНаименованиеБиблиотекиБПБазовая()

// Вызывает исключение или блокирует форму от редактирования, если
// имеются незавершенные отложенные обработчики обновления,
// которые в данный момент обрабатывают переданный объект Данные.
//
// При вызове из отложенного обработчика обновления (случай проверки в программном интерфейсе)
// проверка не выполняется, если не указан параметр ИмяОтложенногоОбработчика, так как
// предполагается, что порядок обновления уже учтен при построении очередей.
//
// Параметры:
//  Данные - ЛюбаяСсылка, НаборЗаписей, Объект, ДанныеФормыСтруктура, Строка - ссылка на объект, сам объект,
//           набор записей или полное имя объекта метаданных, обработку которого необходимо проверить.
//  Форма  - УправляемаяФорма - если объект не обработан, то у переданной формы
//           будет установлено свойство ТолькоПросмотр. Если форма не была
//           передана, то будет вызвано исключение.
//
//  ИмяОтложенногоОбработчика - Строка - если заполнено, тогда при вызове из другого отложенного обработчика
//           проверяется, что указанный отложенный обработчик имеет номер очереди меньше, чем текущий.
//           Если это не так, тогда вызывается исключение о недопустимости использования
//           программного интерфейса, указанного в параметре ИмяПроцедурыПрограммногоИнтерфейса.
//
//  ИмяПроцедурыПрограммногоИнтерфейса - Строка - имя процедуры программного интерфейса,
//           которое выводится в тексте исключения, вызываемого при проверке номера очереди
//           отложенного обработчика обновления, указанного в параметре ИмяОтложенногоОбработчика.
//
//  Пример:
//   Блокировка формы объекта в обработчике ПриСозданииНаСервере модуля формы:
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
//
//   Блокировка записи объекта в обработчике ПередЗаписью модуля объекта (набора записей):
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
//
//   Проверить, что обновлен конкретный объект и вызвать исключение о недопустимости вызова
//   процедуры ЭлектроннаяПодпись.ОбновитьПодпись, если он еще не обработан указанным обработчиком
//   Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию:
//
//   ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ПодписанныйОбъект,,
//      "Справочник.ЭлектронныеПодписи.ОбработатьДанныеДляПереходаНаНовуюВерсию",
//      "ЭлектроннаяПодпись.ОбновитьПодпись");
//
//   Проверить, что обновлены все объекты требуемого типа:
//   ВсеЗаказыОбработаны = ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан("Документ.ЗаказПокупателя"); 
//
Процедура ПроверитьОбъектОбработан(Данные, Форма = Неопределено, ИмяОтложенногоОбработчика = "", ИмяПроцедурыПрограммногоИнтерфейса = "") Экспорт
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Данные, Форма, ИмяОтложенногоОбработчика, ИмяПроцедурыПрограммногоИнтерфейса);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ОБНОВЛЕНИЙ

#Область ОписаниеОбновлений

// Формирует табличный документ с описанием изменений в версиях,
// начиная с текущей версии предыдущую версию, с которой выполнено обновление.
//
// Параметры:
//  СтруктрураВерсийПриОбновлении - Структура - Структура, содержащая данные
//                                  о версии, с которой выполняелся переход,
//                                  и о текущей версии конфигурации.
//
// Возвращаемое значение:
//   ДокументОписаниеОбновлений - ТабличныйДокумент - Документ, содержащий
//                                информацию об обновлении информационной базы.
Функция ДокументОписаниеОбновлений(СтруктрураВерсийПриОбновлении) Экспорт
	
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("УПЖКХ_ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений = Неопределено Тогда
		Возврат ДокументОписаниеОбновлений;
	КонецЕсли;
	
	МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	
	// Выполняется проверка на неофициальный / тестовый статус версии.
	// Если проверка выполняется, в описании изменений первым блоком выводится предупреждение.
	Если КВП_ПрочиеПроцедурыИФункции.ВерсияЯвляетсяНеофициальной(СтруктрураВерсийПриОбновлении.ТекущаяВерсия) Тогда
		МакетДопОписаний = ПолучитьОбщийМакет("УПЖКХ_ДополнительноеОписание");
		ОбластьМакета = МакетДопОписаний.ПолучитьОбласть("ПредупреждениеПредварительнойВерсии");
		ОбластьМакета.Параметры.НомерВерсии = "Н" + Метаданные.Версия;
		ДокументОписаниеОбновлений.Вывести(ОбластьМакета);
	КонецЕсли;
	Если КВП_ПрочиеПроцедурыИФункции.ВерсияЯвляетсяТестовой(СтруктрураВерсийПриОбновлении.ТекущаяВерсия) Тогда
		МакетДопОписаний = ПолучитьОбщийМакет("УПЖКХ_ДополнительноеОписание");
		ОбластьМакета = МакетДопОписаний.ПолучитьОбласть("ПредупреждениеТестовойВерсии");
		ОбластьМакета.Параметры.НомерВерсии = "Т" + Метаданные.Версия;
		ДокументОписаниеОбновлений.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ТекущаяВерсия    = ПолучитьНомерОбластиДляРелиза(СтруктрураВерсийПриОбновлении.ТекущаяВерсия);
	ПредыдущаяВерсия = ПолучитьНомерОбластиДляРелиза(СтруктрураВерсийПриОбновлении.ПредыдущаяВерсия);
	
	// Для случая, когда изменился только номер сборки, либо номер версии
	// в метаданных изменился на меньший по сравнению с номером в регистре сведений
	// "Версии подсистем", в описание обновлений включаем данные о текущем релизе.
	Если Число(ТекущаяВерсия) <= Число(ПредыдущаяВерсия) Тогда
		ОбластьШапкаТекущейВерсии = МакетОписаниеОбновлений.Области.Найти("Шапка" + ТекущаяВерсия);
		Если ОбластьШапкаТекущейВерсии <> Неопределено Тогда
			ВывестиОписаниеИзменений(МакетОписаниеОбновлений.Области["Шапка" + ТекущаяВерсия], ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
			Возврат ДокументОписаниеОбновлений;
		КонецЕсли;
	КонецЕсли;
	
	// Выполняется формирование описания изменений путем подбора областей макета согласно следующему алгоритму:
	// 1. Определяются области шапки текущей и предыдущих версий из макета.
	// 2. Определяется позиция областей в макете описания изменений с помощью свойства области Верх.
	// 3. Формируем список значений, содержащий области, находящиеся между областью описания текущей версии
	// (включительно) и областью описания предыдущей версии (не включая предыдущую).
	// 4. Выводим полученные области в табличный документ ДокументОписаниеОбновлений.
	ОбластьШапкаТекущаяВерсия    = МакетОписаниеОбновлений.Области.Найти("Шапка" + ТекущаяВерсия);
	ОбластьШапкаПредыдущаяВерсия = МакетОписаниеОбновлений.Области.Найти("Шапка" + ПредыдущаяВерсия);
	
	// Если область текущей версии не найдена, в качестве первой выводимой области определяем начало документа.
	Если ОбластьШапкаТекущаяВерсия = Неопределено Тогда
		ВерхОбластьШапкаТекущаяВерсия = 0;
	Иначе
		ВерхОбластьШапкаТекущаяВерсия = ОбластьШапкаТекущаяВерсия.Верх;
	КонецЕсли;
	
	// Если область предыдущей версии не найдена, в качестве последней выводимой области определяем конец документа.
	Если ОбластьШапкаПредыдущаяВерсия = Неопределено Тогда
		ВерхОбластьШапкаПредыдущаяВерсия = МакетОписаниеОбновлений.ВысотаТаблицы;
	Иначе
		ВерхОбластьШапкаПредыдущаяВерсия = ОбластьШапкаПредыдущаяВерсия.Верх;
	КонецЕсли;
	
	// Создаем список выводимых на печать областей.
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("ОбластьТабличногоДокумента");
	ТаблицаОбластей.Колонки.Добавить("ВерхОбласти", Новый ОписаниеТипов("Число"));
	
	Для Каждого Область Из МакетОписаниеОбновлений.Области Цикл
		Если Лев(Область.Имя, 5) = "Шапка" И Область.Верх >= ВерхОбластьШапкаТекущаяВерсия И Область.Верх < ВерхОбластьШапкаПредыдущаяВерсия Тогда
			НоваяСтрокаТаблицы                            = ТаблицаОбластей.Добавить();
			НоваяСтрокаТаблицы.ОбластьТабличногоДокумента = Область;
			НоваяСтрокаТаблицы.ВерхОбласти                = Область.Верх;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаОбластей.Сортировать("ВерхОбласти Возр");
	
	Для Каждого СтрокаТаблицыОбластей Из ТаблицаОбластей Цикл
		ВывестиОписаниеИзменений(СтрокаТаблицыОбластей.ОбластьТабличногоДокумента, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
	КонецЦикла;
	
	Возврат ДокументОписаниеОбновлений;
	
КонецФункции // ДокументОписаниеОбновлений()

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  ОбластьШапка               – ОбластьЯчеекТабличногоДокумента - область,
//                                содержимое которой выводится в табличный документ.
//  ДокументОписаниеОбновлений – ТабличныйДокумент - документ, в который водится описание изменений системы.
//  МакетОписаниеОбновлений    – ТабличныйДокумент - макет, содержащий все описания изменений системы.
//
Процедура ВывестиОписаниеИзменений(ОбластьШапка, ДокументОписаниеОбновлений,
									МакетОписаниеОбновлений)
	
	НомерОбласти = СтрЗаменить(ОбластьШапка.Имя, "Шапка", "");
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(ОбластьШапка.Имя));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерОбласти);
	
	Если НомерОбласти = "ЗаполнениеПустойИБ" Тогда
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть(НомерОбласти));
	Иначе
		ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерОбласти));
	КонецЕсли;
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры // ВывестиОписаниеИзменений()

// Преобразует номер версии к номеру релиза в формате, используемом в макете описания изменений.
// Преобразование выполняется путем отсечения номера сборки и исключения точек в наименовании.
//
// Параметры:
//  НомерВерсии - Строка - номер версии конфигурации.
//
// Возвращаемое значение:
//  НомерОбласти - Строка - номер области, соответвующей релизу переданной версии.
Функция ПолучитьНомерОбластиДляРелиза(НомерВерсии)
	
	МассивПодстрокНомераВерсии = СтрРазделить(НомерВерсии, ".", Ложь);
	
	Если МассивПодстрокНомераВерсии.Количество() < 4 Тогда
		Возврат "";
	КонецЕсли;
	
	НомерРедакции = "" + МассивПодстрокНомераВерсии[0] + МассивПодстрокНомераВерсии[1];
	НомерРелиза   = МассивПодстрокНомераВерсии[2];
	НомерОбласти  = НомерРедакции + НомерРелиза;
	
	Возврат НомерОбласти;
	
КонецФункции // ПолучитьНомерОбластиДляРелиза()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖЕБНЫМИ ПАРАМЕТРАМИ ОБНОВЛЕНИЯ ИБ
//
// Данный блок предназначен для работы с сохраняемыми параметрами обновления ИБ.
// Например, если нельзя реализовать проверку повторного выполнения обработчика
// обновления за счет логики, то в параметрах обновления можно сохранить результаты
// выполнения обработчика и при повторном запуске обработчика ориентироваться
// на сохраненный ранее параметр. В параметрах можно сохранять произвольные параметры,
// которые могут потребоваться в механизме обновления подсистемы ЖКХ.

#Область РаботаСоСлужебнымиПараметрамиОбновленияИБ

// Функция возвращает текущую структуру параметров обновления ИБ.
// Если параметры не определены, то возвращается пустая структура.
//
Функция ПолучитьТекущиеПараметрыОбновленияИБ_Служебная()
	
	// Параметры по умолчанию - пустая структура.
	СтруктураПараметровОбновленияИБ = Новый Структура;
	
	// Получаем параметры из константы, и если они заданы, берем их.
	СохраненныеПараметры = Константы.УПЖКХ_СлужебныеПараметрыОбновленияИБ.Получить().Получить();
	Если ТипЗнч(СохраненныеПараметры) = Тип("Структура") Тогда
		СтруктураПараметровОбновленияИБ = СохраненныеПараметры;
	КонецЕсли;
	
	Возврат СтруктураПараметровОбновленияИБ;
	
КонецФункции

// Функция возвращает значения параметра обновления ИБ.
// Если параметр не определен, то возвращается Неопределено.
//
Функция ПолучитьПараметрОбновленияИБ(ИмяПараметра)
	
	// Значение параметра по умолчанию.
	ЗначениеПараметра = Неопределено;
	
	// Получим значение параметра из текущих параметров обновления ИБ.
	СтруктураПараметровОбновленияИБ = ПолучитьТекущиеПараметрыОбновленияИБ_Служебная();
	Если СтруктураПараметровОбновленияИБ.Свойство(ИмяПараметра) Тогда
		ЗначениеПараметра = СтруктураПараметровОбновленияИБ[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Выполняет сохранение параметра обновления ИБ.
//
Процедура СохранитьПараметрОбновленияИБ(ИмяПараметра, ЗначениеПараметра)
	
	СтруктураПараметровОбновленияИБ = ПолучитьТекущиеПараметрыОбновленияИБ_Служебная();
	СтруктураПараметровОбновленияИБ.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	Константы.УПЖКХ_СлужебныеПараметрыОбновленияИБ.Установить(Новый ХранилищеЗначения(СтруктураПараметровОбновленияИБ));
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ ОБНОВЛЕНИЯ

#Область ОбщиеПроцедурыОбновления

// Выполняет операции для начального заполнения Информационной базы.
// Необходимость начального заполнения определяется отсутствием в регистре сведений
// "Версии подсистем" информации о текущей подсистеме, либо номером версии "0.0.0.0".
//
Процедура ДействияПриНачальномЗаполненииИнформационнойБазы() Экспорт
	
	// Проверка на заполнение константы выполняется для случая, когда до обновления
	// информационной базы в регистре сведений "Версии подсистем" не была указана основная
	// подсистема (конфигурация). В такой ситуации запускается процесс начального
	// заполнения информационной базы.
	ТекущаяВерсияВКонстанте = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	
	Если ТекущаяВерсияВКонстанте = ""
	   И ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя) = "0.0.0.0" Тогда
		
		НачатьТранзакцию();
		
		СпрОсновнаяНастройка = Справочники.УПЖКХ_НастройкиРасчетаПени.ОсновнаяНастройка;
		СправочникОбъект = СпрОсновнаяНастройка.ПолучитьОбъект();
		
		НоваяСтрока                                         = СправочникОбъект.СтавкиПени.Добавить();
		НоваяСтрока.ДеньСоСрокаОплаты                       = 1;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЧислитель   = 1;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЗнаменатель = 300;
		НоваяСтрока.ПроцентнаяСтавкаПени                    = Ложь;
		
		СправочникОбъект.ВариантОплатыПени                  = Перечисления.КВП_ВариантыОплатыПени.ВПоследнююОчередь;
		
		ЗаписатьОбъект(СправочникОбъект);
		
		// Обновим параметры предопределенных видов групп услуг.
		Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп();
		
		// Установим значения констант.
		
		Константы.КВП_ИспользоватьФункционалРасчетаНачислений.Установить(Истина);
		//Оповестить("УстановкаФункционалаРасчетаНачислений");
		
		// Установка упрощенного варианта учета собственников.
		Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Установить(Истина);
		
		// Установка способа распределения показаний коллективных приборов учета.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов);
		СтруктураПараметров.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну);
		СтруктураПараметров.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Установить(Новый ХранилищеЗначения(СтруктураПараметров));
		
		// Установка способа определения расхода по ПУ для расчета по среднему.
		Константы.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета.Установить(
		Перечисления.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСНенулевымРасходом);
		
		// Установка варианта изменения задолженности в корректировках начислений.
		Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Установить(Перечисления.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.РасчетныйПериодЗаКоторыйПроизведенаКорректировка);
		
		// Установка использования нового механизма отражения начислений в регл. учете.
		// Закомментировано до тех пор, пока новый механизм отражения не будет доведен до ума.
		//Константы.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете.Установить(НачалоГода(ТекущаяДата()));
		//Константы.УправлениеЗачетомАвансовПогашениемЗадолженности.Установить(Истина);
		
		// Заполнение ключевой ставки ЦБ.
		РегистрыСведений.УПЖКХ_КлючеваяСтавкаЦБ.ОбновитьКлючевыеСтавкиЦБ();
		
		// Отключим некоторые предопределенные виды контактной информации.
		// ТорговыеТочки
		СтараяГруппа = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки.ПолучитьОбъект();
		СтараяГруппа.Используется = Ложь;
		ЗаписатьОбъект(СтараяГруппа);
		
		СтарыйАдрес = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки.ПолучитьОбъект();
		СтарыйАдрес.Используется          = Ложь;
		СтарыйАдрес.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйАдрес);
		// Конец ТорговыеТочки
		
		// EMailФизическиеЛица
		СтарыйEMail = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица.ПолучитьОбъект();
		СтарыйEMail.Используется          = Ложь;
		СтарыйEMail.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйEMail);
		// Конец EMailФизическиеЛица
		
		// Многопоточная обработка данных
		УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2();
		// Конец Многопоточная обработка данных
		
		// Оценка производительности
		ЗаполнитьКлючевыеОперацииЖКХ();
		// Конец Оценка производительности
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает дату текущей версии.
//
Процедура УстановитьДатуТекущейВерсии(Параметры = Неопределено) Экспорт
	
	// в режиме сервиса не требуется напоминать об обновлении
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Ломбард +
	//Константы.ДатаТекущейВерсии.Установить(Дата(2018,05,18));
	Константы.ДатаТекущейВерсии.Установить(КВП_ПрочиеПроцедурыИФункции.ДатаТекущейВерсии());
	// Ломбард -
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕХОДА С 2.0

#Область ПроцедурыИФункцииПереходаСПредыдущейРедакции

// Выполняет обновление конфигурации с редакции 2.0.
//
Процедура ВыполнитьПереходСРедакции20(Параметры = Неопределено) Экспорт
	
	// 1. Определим текущую версию.
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	
	// Если текущая версия не принадлежит редакции 2.0, то переход уже выполнен или вообще не нужен.
	Если Не Лев(ТекущаяВерсияКВП, 1) = "2" Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Определим версию, на которую можно перейти.
	НоваяВерсияКВП = Метаданные.Версия;
	Если Не ПроверитьВозможностьПереходаСРедакции20(ТекущаяВерсияКВП, НоваяВерсияКВП) Тогда
		
		ТекстПодробногоОписания = "Не удалось выполнить обновление информационной базы с версии " + ТекущаяВерсияКВП + "!
									  |Обновление на редакцию 3.0 с версии " + ТекущаяВерсияКВП + " недоступно!" + Символы.ПС;
		
		ВызватьИсключениеПриОбновлении(ТекстПодробногоОписания);
		
	КонецЕсли;
	
	// 3. Непосредственный переход с редакции 2.0.
	
	// Стандартные обработчики перехода с редакции 2.0.
	ВыполнитьПереносПрикрепленныхФайловНаНовыйМеханизмПриОбновленииС20();
	ПереносОсновнойСтавкиНДСПриОбновленииС20();
	ЗаполнитьВидДокументаФизическогоЛицаВДокументеИзменениеПаспортныхДанныхПриОбновленииС20();
	ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20();
	ОбработатьНормыПотребленияПриОбновленииС20();
	ОбработатьРассчитываемыеТарифыПриОбновленииС20();
	ВыполнитьПереносПользовательскихМакетовВТиповойМеханизмПриОбновленииС20();
	ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20();
	
	// Обработчики обновления функционала, реализованного только в редакции 3.0.
	ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4();
	ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22();
	ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1();
	ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14();
	ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14();
	ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
	ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
	ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1();
	ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1();
	ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2(Истина);
	ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7();
	ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2();
	ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2();
	ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2();
	ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2();
	УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2();
	Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений"));
	ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5();
	ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5();
	ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5();
	ЗаполнитьКлючевыеОперацииЖКХ();
	
	// Установка номера версии информационной базы в константу
	Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
	
	// Установка номера версии информационной базы в типовой регистр сведений
	ОбновлениеИнформационнойБазыСлужебный.УстановитьВерсиюИБ(Метаданные.Имя, НоваяВерсияКВП, Истина);
	
КонецПроцедуры

// Функция проверяет возможность перехода на редакцию 3.0.
//
// Параметры:
//  НомерВерсии20 - номер версии редакции 2.0,
//  НомерВерсии30 - текущий номер версии редакции 3.0.
//
// Возвращаемое значение:
//  ПереходВозможен - признак возможности перехода.
//
Функция ПроверитьВозможностьПереходаСРедакции20(НомерВерсии20, НомерВерсии30)
	
	// Внимание! Для каждого нового перехода с 2.0 на 3.0 в конце добавляется блок,
	// в котором указывается, какой версии 2.0 соответствует версия 3.0.
	
	ПереходВозможен = Ложь;
	
	НомерВерсии30_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30);
	
	Если НомерВерсии20 = "2.0.45.2" Тогда
		НомерВерсии30_Соответствующая = "3.0.19.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.53.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.28.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.55.3" Тогда
		НомерВерсии30_Соответствующая = "3.0.31.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.57.4" Тогда
		НомерВерсии30_Соответствующая = "3.0.34.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.62.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.36.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.6" Тогда
		НомерВерсии30_Соответствующая = "3.0.39.6";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.13" Тогда
		НомерВерсии30_Соответствующая = "3.0.40.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.26" Тогда
		НомерВерсии30_Соответствующая = "3.0.42.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.10" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.20" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.21";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.25" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.25";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.28" Тогда
		НомерВерсии30_Соответствующая = "3.0.44.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.31" Тогда
		НомерВерсии30_Соответствующая = "3.0.44.13";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.46.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.7" Тогда
		НомерВерсии30_Соответствующая = "3.0.47.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.9" Тогда
		НомерВерсии30_Соответствующая = "3.0.49.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.11" Тогда
		НомерВерсии30_Соответствующая = "3.0.49.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.15" Тогда
		НомерВерсии30_Соответствующая = "3.0.51.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.16" Тогда
		НомерВерсии30_Соответствующая = "3.0.52.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.21" Тогда
		НомерВерсии30_Соответствующая = "3.0.53.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.24" Тогда
		НомерВерсии30_Соответствующая = "3.0.55.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.29" Тогда
		НомерВерсии30_Соответствующая = "3.0.57.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.30" Тогда
		НомерВерсии30_Соответствующая = "3.0.58.3";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.31" Тогда
		НомерВерсии30_Соответствующая = "3.0.59.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.32" Тогда
		НомерВерсии30_Соответствующая = "3.0.59.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.34" Тогда
		НомерВерсии30_Соответствующая = "3.0.60.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.36" Тогда
		НомерВерсии30_Соответствующая = "3.0.60.5";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.38" Тогда
		НомерВерсии30_Соответствующая = "3.0.61.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.39" Тогда
		НомерВерсии30_Соответствующая = "3.0.63.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.40" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.41" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.42" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.44" Тогда
		НомерВерсии30_Соответствующая = "3.0.65.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.45" Тогда
		НомерВерсии30_Соответствующая = "3.0.66.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.46" Тогда
		НомерВерсии30_Соответствующая = "3.0.66.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.47" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.48" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.3";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.49" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.50" Тогда
		НомерВерсии30_Соответствующая = "3.0.68.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.52" Тогда
		НомерВерсии30_Соответствующая = "3.0.69.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.54" Тогда
		НомерВерсии30_Соответствующая = "3.0.70.3";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.55"
	 ИЛИ НомерВерсии20 = "2.0.66.56" Тогда
		НомерВерсии30_Соответствующая = "3.0.70.10";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.57" Тогда
		НомерВерсии30_Соответствующая = "3.0.71.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.58" Тогда
		НомерВерсии30_Соответствующая = "3.0.72.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПереходВозможен;
	
КонецФункции

// Процедура переносить прикрепленные файлы в новый механизм.
Процедура ВыполнитьПереносПрикрепленныхФайловНаНовыйМеханизмПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Ссылка,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Наименование,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.ИмяФайла,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Объект,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Хранилище,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицоОсновноеИзображение
	|ИЗ
	|	Справочник.Удалить_КВП_ХранилищеДополнительнойИнформации КАК Удалить_КВП_ХранилищеДополнительнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Удалить_КВП_ХранилищеДополнительнойИнформации.Ссылка = ФизическиеЛица.Удалить_ОсновноеИзображение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяБезРасширения = "";
		РасширениеБезТочки = "";
		
		Если ПустаяСтрока(Выборка.ИмяФайла) Тогда
			ИмяБезРасширения = Выборка.Наименование;
		Иначе
			СтруктураИмени     = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Выборка.ИмяФайла);
			ИмяБезРасширения   = СтруктураИмени.ИмяБезРасширения;
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмени.Расширение);
		КонецЕсли;
		
		ВладелецФайла  = Выборка.Объект;
		
		Данные = Выборка.Хранилище.Получить();
		Если ТипЗнч(Данные) = Тип("Картинка") Тогда
			ДвоичныеДанные = Данные.ПолучитьДвоичныеДанные();
		Иначе
			ДвоичныеДанные = Данные;
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		СсылкаНаПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецФайла,
									 ИмяБезРасширения,
									 РасширениеБезТочки,
									 ,
									 ,
									 АдресВоВременномХранилище);
		
		Если Не СсылкаНаПрисоединенныйФайл.Пустая()
			  И ЗначениеЗаполнено(Выборка.ФизическоеЛицоОсновноеИзображение)
			  И ТипЗнч(Выборка.ФизическоеЛицоОсновноеИзображение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ФизЛицоОбъект = Выборка.ФизическоеЛицоОсновноеИзображение.ПолучитьОбъект();
			ФизЛицоОбъект.ОсновноеИзображение = СсылкаНаПрисоединенныйФайл;
			
			ЗаписатьОбъект(ФизЛицоОбъект);
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет вид документа физического лица в документе "Изменение паспортных данных".
Процедура ЗаполнитьВидДокументаФизическогоЛицаВДокументеИзменениеПаспортныхДанныхПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ИзменениеПаспортныхДанных.Ссылка
	|ИЗ
	|	Документ.КВП_ИзменениеПаспортныхДанных КАК КВП_ИзменениеПаспортныхДанных
	|ГДЕ
	|	КВП_ИзменениеПаспортныхДанных.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидДокумента = 
			ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(ДокументОбъект.Удалить_ДокументВид);
		
		Если Не ВидДокумента = Неопределено Тогда
			ДокументОбъект.ВидДокумента = ВидДокумента;
			ЗаписатьОбъект(ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает соответствующий документу, удостоверяющему личность
// элемент справочника "Виды документов физических лиц".
Функция ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Элемент)
	
	Если Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС07 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС09 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС02 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС01 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС26 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС04 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС06 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура обрабатывает нормы потребления услуг.
Процедура ОбработатьНормыПотребленияПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугХарактеристики.Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг.Характеристики КАК КВП_НормыПотребленияУслугХарактеристики
	|ГДЕ
	|	КВП_НормыПотребленияУслугХарактеристики.Вид ССЫЛКА ПланВидовХарактеристик.УдалитьСвойстваОбъектов
	|	И НЕ КВП_НормыПотребленияУслугХарактеристики.Ссылка.ПометкаУдаления
	|	И КВП_НормыПотребленияУслугХарактеристики.Ссылка.ВариантНастройки = Значение(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НормыПотребленияУслугХарактеристики.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НормаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		Для Каждого ТекХарактеристика Из НормаОбъект.Характеристики Цикл
			Если ТипЗнч(ТекХарактеристика.Вид) = Тип("ПланВидовХарактеристикСсылка.УдалитьСвойстваОбъектов") Тогда
				
				// Попытаемся найти соответствие в новом плане видов характеристик.
				НайденноеСвойство = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ТекХарактеристика.Вид.Наименование);
				
				Если Не НайденноеСвойство = Неопределено Тогда
					ТекХарактеристика.Вид = НайденноеСвойство;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗаписатьОбъект(НормаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает рассчитываемые тарифы услуг.
Процедура ОбработатьРассчитываемыеТарифыПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоказателейРасчета.Ссылка
	|ИЗ
	|	Справочник.КВП_РассчитываемыеТарифы.ТаблицаПоказателейРасчета КАК ТаблицаПоказателейРасчета
	|ГДЕ
	|	ТаблицаПоказателейРасчета.ПоказательРасчета ССЫЛКА ПланВидовХарактеристик.УдалитьСвойстваОбъектов
	|	И НЕ ТаблицаПоказателейРасчета.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоказателейРасчета.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТарифОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		Для Каждого ТекХарактеристика Из ТарифОбъект.ТаблицаПоказателейРасчета Цикл
			Если ТипЗнч(ТекХарактеристика.ПоказательРасчета) = Тип("ПланВидовХарактеристикСсылка.УдалитьСвойстваОбъектов") Тогда
				
				// Попытаемся найти соответствие в новом плане видов характеристик.
				НайденноеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
										ТекХарактеристика.ПоказательРасчета.Наименование);
				
				Если Не НайденноеСвойство = Неопределено Тогда
					ТекХарактеристика.ПоказательРасчета = НайденноеСвойство;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗаписатьОбъект(ТарифОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура переноса основной ставки НДС при переходе с 2.0.
Процедура ПереносОсновнойСтавкиНДСПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОсновнойСтавкиНДС",
								ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнаяСтавкаНДС"]);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиБП20.ОсновнаяСтавкаНДС) КАК ОсновнаяСтавкаНДС,
	|	НастройкиБП20.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрЗначениеПрав.Значение КАК ОсновнаяСтавкаНДС,
	|		РегистрЗначениеПрав.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновнойСтавкиНДС) КАК НастройкиБП20
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБП20.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПользовательИБ = 
				ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТекущаяНастройкаОсновнойСтавкиНДС = 
			ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС", ИмяПользователяИБ);
		
		ТекущаяНастройкаОсновнойСтавкиНДС = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновнойСтавкиНДС),
												Выборка.ОсновнаяСтавкаНДС, ТекущаяНастройкаОсновнойСтавкиНДС);
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновнойСтавкиНДС) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяСтавкаНДС"),, ТекущаяНастройкаОсновнойСтавкиНДС,, ИмяПользователяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет вид документа физического лица в регистре сведений "Настройки выгрузки в ГЦЖС".
Процедура ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20()
	
	Выборка = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерТекущейЗаписи = Выборка.ПолучитьМенеджерЗаписи();
		
		ТаблицаКодовДокументовЛичности = МенеджерТекущейЗаписи.ТаблицаКодовДокументовЛичности.Получить();
		
		Если ТипЗнч(ТаблицаКодовДокументовЛичности) = Тип("ТаблицаЗначений") Тогда
			
			Если ТаблицаКодовДокументовЛичности.Количество() = 0
			 Или ТипЗнч(ТаблицаКодовДокументовЛичности[0].Наименование) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
				Продолжить;
			КонецЕсли;
			
			врТаблицаКодовДокументовЛичности = Новый ТаблицаЗначений;
			врТаблицаКодовДокументовЛичности.Колонки.Добавить("Код");
			врТаблицаКодовДокументовЛичности.Колонки.Добавить("Наименование");
			
			Для Каждого ТекСтрока Из ТаблицаКодовДокументовЛичности Цикл
				НоваяСтрока = врТаблицаКодовДокументовЛичности.Добавить();
				НоваяСтрока.Код = ТекСтрока.Код;
				НоваяСтрока.Наименование = ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(ТекСтрока.Наименование);
			КонецЦикла;
			
			МенеджерТекущейЗаписи.ТаблицаКодовДокументовЛичности = Новый ХранилищеЗначения(врТаблицаКодовДокументовЛичности);
			ЗаписатьОбъект(МенеджерТекущейЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20()

// Процедура выполняет перенос пользовательских макетов в типовой регистр сведений.
Процедура ВыполнитьПереносПользовательскихМакетовВТиповойМеханизмПриОбновленииС20();
	
	ВыборкаЗаписей = РегистрыСведений.УПЖКХ_ПользовательскиеМакетыПечати.Выбрать();
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		НоваяЗапись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
		
		ДанныеМакета = ВыборкаЗаписей.Макет.Получить();
		
		Если Найти(ВыборкаЗаписей.ИмяМакета, "ПФ_MXL")
		   И ТипЗнч(ДанныеМакета) = Тип("ДвоичныеДанные") Тогда
			
			Попытка
				
				// Получим макет из двоичных данных.
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				ЗаписатьОбъект(ДанныеМакета, ИмяВременногоФайла);
				ДанныеМакета = Новый ТабличныйДокумент;
				ДанныеМакета.Прочитать(ИмяВременногоФайла);
				
				УдалитьФайлы(ИмяВременногоФайла);
				
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать данные пользовательского макета'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		НоваяЗапись.Макет = Новый ХранилищеЗначения(ДанныеМакета);
		
		ЗаписатьОбъект(НоваяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос адресной информации из регистра сведения "Адреса (КВП)"
// в табличные части "Контактная информация" справочников "Здания", "Лицевые счета", "Жильцы".
// Обработка выполняется в связи с переводом хранения адресной информации на типовые механизмы КИ БП 3.0.
//
Процедура ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗданияКонтактнаяИнформация.Ссылка,
	|	КВП_ЗданияКонтактнаяИнформация.Вид КАК ВидАдресаКИ
	|ПОМЕСТИТЬ врТекущаяКонтактнаяИнформация
	|ИЗ
	|	Справочник.КВП_Здания.КонтактнаяИнформация КАК КВП_ЗданияКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Ссылка,
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы.КонтактнаяИнформация КАК УПЖКХ_ЖильцыКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаКонтактнаяИнформация.Ссылка,
	|	КВП_ЛицевыеСчетаКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета.КонтактнаяИнформация КАК КВП_ЛицевыеСчетаКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКВП_АдресаСрезПоследних.Период,
	|	УдалитьКВП_АдресаСрезПоследних.Объект,
	|	УдалитьКВП_АдресаСрезПоследних.Вид,
	|	УдалитьКВП_АдресаСрезПоследних.Страна,
	|	УдалитьКВП_АдресаСрезПоследних.Регион,
	|	УдалитьКВП_АдресаСрезПоследних.Район,
	|	УдалитьКВП_АдресаСрезПоследних.Город,
	|	УдалитьКВП_АдресаСрезПоследних.НаселенныйПункт,
	|	УдалитьКВП_АдресаСрезПоследних.АдминистративныйОкруг,
	|	УдалитьКВП_АдресаСрезПоследних.Улица,
	|	УдалитьКВП_АдресаСрезПоследних.Дом,
	|	УдалитьКВП_АдресаСрезПоследних.Корпус,
	|	УдалитьКВП_АдресаСрезПоследних.Квартира,
	|	УдалитьКВП_АдресаСрезПоследних.Индекс,
	|	УдалитьКВП_АдресаСрезПоследних.ОВД,
	|	УдалитьКВП_АдресаСрезПоследних.Представление,
	|	УдалитьКВП_АдресаСрезПоследних.Комментарий,
	|	УдалитьКВП_АдресаСрезПоследних.Строительный,
	|	УдалитьКВП_АдресаСрезПоследних.ТипКорпуса,
	|	УдалитьКВП_АдресаСрезПоследних.ТипКвартиры,
	|	ВЫБОР
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Здание)
	|			ТОГДА ВЫБОР
	|					КОГДА УдалитьКВП_АдресаСрезПоследних.Строительный
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания)
	|				КОНЕЦ
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Выбытие)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца)
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Прибытие)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца)
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.ЛС)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета)
	|	КОНЕЦ КАК ВидАдресаКИ
	|ПОМЕСТИТЬ врАдреса
	|ИЗ
	|	РегистрСведений.УдалитьКВП_Адреса.СрезПоследних(, ) КАК УдалитьКВП_АдресаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врАдреса.Период,
	|	врАдреса.Объект,
	|	врАдреса.Вид,
	|	врАдреса.Страна,
	|	врАдреса.Регион,
	|	врАдреса.Район,
	|	врАдреса.Город,
	|	врАдреса.НаселенныйПункт,
	|	врАдреса.АдминистративныйОкруг,
	|	врАдреса.Улица,
	|	""Дом"" КАК ТипДома,
	|	врАдреса.Дом,
	|	врАдреса.Корпус,
	|	врАдреса.Квартира,
	|	врАдреса.Индекс,
	|	врАдреса.ОВД,
	|	врАдреса.Представление,
	|	врАдреса.Комментарий,
	|	врАдреса.Строительный,
	|	ВЫБОР
	|		КОГДА врАдреса.ТипКорпуса = ЗНАЧЕНИЕ(Перечисление.УдалитьТипыКорпусов.Строение)
	|			ТОГДА ""Строение""
	|		ИНАЧЕ ""Корпус""
	|	КОНЕЦ КАК ТипКорпуса,
	|	ВЫБОР
	|		КОГДА врАдреса.ТипКвартиры = ЗНАЧЕНИЕ(Перечисление.УдалитьТипыКвартир.Офис)
	|			ТОГДА ""Офис""
	|		ИНАЧЕ ""Квартира""
	|	КОНЕЦ КАК ТипКвартиры,
	|	врАдреса.ВидАдресаКИ,
	|	ЕСТЬNULL(врТекущаяКонтактнаяИнформация.Ссылка, ИСТИНА) КАК НеобходимПереносКИ,
	|	ВЫБОР
	|		КОГДА врАдреса.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|		  ИЛИ врАдреса.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА
	|				врАдреса.Объект.ЭтоГруппа
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГруппа
	|ПОМЕСТИТЬ врАдресаСТекущейКИ
	|ИЗ
	|	врАдреса КАК врАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТекущаяКонтактнаяИнформация КАК врТекущаяКонтактнаяИнформация
	|		ПО врАдреса.Объект = врТекущаяКонтактнаяИнформация.Ссылка
	|			И врАдреса.ВидАдресаКИ = врТекущаяКонтактнаяИнформация.ВидАдресаКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врАдресаСТекущейКИ.Период,
	|	врАдресаСТекущейКИ.Объект КАК Объект,
	|	врАдресаСТекущейКИ.Вид,
	|	врАдресаСТекущейКИ.Страна,
	|	врАдресаСТекущейКИ.Регион,
	|	врАдресаСТекущейКИ.Район,
	|	врАдресаСТекущейКИ.Город,
	|	врАдресаСТекущейКИ.НаселенныйПункт,
	|	врАдресаСТекущейКИ.АдминистративныйОкруг,
	|	врАдресаСТекущейКИ.Улица,
	|	врАдресаСТекущейКИ.ТипДома,
	|	врАдресаСТекущейКИ.Дом,
	|	врАдресаСТекущейКИ.Корпус,
	|	врАдресаСТекущейКИ.Квартира,
	|	врАдресаСТекущейКИ.Индекс,
	|	врАдресаСТекущейКИ.ОВД,
	|	врАдресаСТекущейКИ.Представление,
	|	врАдресаСТекущейКИ.Комментарий,
	|	врАдресаСТекущейКИ.Строительный,
	|	врАдресаСТекущейКИ.ТипКорпуса,
	|	врАдресаСТекущейКИ.ТипКвартиры,
	|	врАдресаСТекущейКИ.ВидАдресаКИ
	|ИЗ
	|	врАдресаСТекущейКИ КАК врАдресаСТекущейКИ
	|ГДЕ
	|	врАдресаСТекущейКИ.НеобходимПереносКИ = ИСТИНА
	|	И НЕ врАдресаСТекущейКИ.ЭтоГруппа
	|ИТОГИ ПО
	|	Объект";
	
	// В ЖКХ 3.0 контактная информация хранится теперь в табличных частях справочников.
	// Таким образом перенести контактную информацию групп справочников нельзя,
	// т.к. у элементов справочников, являющихся группами, нет табличных частей.
	// Поэтому в предпоследнем пакете запроса добавлено получение признака "ЭтоГруппа"
	// для иерархических справочников "Здания, сооружения" и "Лицевые счета"
	// и отбор по условию в последнем пакете запроса.
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		СправочникОбъект = ВыборкаОбъектов.Объект.ПолучитьОбъект();
		
		ВыборкаАдресов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАдресов.Следующий() Цикл
			
			Страна = ВРег(СокрЛП(ВыборкаАдресов.Страна));
			Если ПустаяСтрока(Страна) Тогда
				Страна = "РОССИЯ";
			КонецЕсли;
			
			СтруктураАдресаИзЗапроса = Новый Структура;
			СтруктураАдресаИзЗапроса.Вставить("НаименованиеСтраны", СокрЛП(ВыборкаАдресов.Страна));
			СтруктураАдресаИзЗапроса.Вставить("Страна",             Страна);
			СтруктураАдресаИзЗапроса.Вставить("Индекс",             СокрЛП(ВыборкаАдресов.Индекс));
			СтруктураАдресаИзЗапроса.Вставить("Регион",             СокрЛП(ВыборкаАдресов.Регион));
			СтруктураАдресаИзЗапроса.Вставить("Район",              СокрЛП(ВыборкаАдресов.Район));
			СтруктураАдресаИзЗапроса.Вставить("Город",              СокрЛП(ВыборкаАдресов.Город));
			СтруктураАдресаИзЗапроса.Вставить("НаселенныйПункт",    СокрЛП(ВыборкаАдресов.НаселенныйПункт));
			СтруктураАдресаИзЗапроса.Вставить("Улица",              СокрЛП(ВыборкаАдресов.Улица));
			СтруктураАдресаИзЗапроса.Вставить("ТипДома",            СокрЛП(ВыборкаАдресов.ТипДома));
			СтруктураАдресаИзЗапроса.Вставить("Дом",                СокрЛП(ВыборкаАдресов.Дом));
			СтруктураАдресаИзЗапроса.Вставить("ТипКорпуса",         СокрЛП(ВыборкаАдресов.ТипКорпуса));
			СтруктураАдресаИзЗапроса.Вставить("Корпус",             СокрЛП(ВыборкаАдресов.Корпус));
			СтруктураАдресаИзЗапроса.Вставить("ТипКвартиры",        СокрЛП(ВыборкаАдресов.ТипКвартиры));
			СтруктураАдресаИзЗапроса.Вставить("Квартира",           СокрЛП(ВыборкаАдресов.Квартира));
			
			ПредставлениеАдресаТиповойМеханизмКИ = "";
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдресаИзЗапроса, ПредставлениеАдресаТиповойМеханизмКИ);
			
			АдресОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(СтруктураАдресаИзЗапроса, ПредставлениеАдресаТиповойМеханизмКИ, Перечисления.ТипыКонтактнойИнформации.Адрес);
			ДанныеАдресаВXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(АдресОбъектXDTO);
			ДанныеАдресаВJSON = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияВJSON(ДанныеАдресаВXML);
			
			СтрокаКИ = СправочникОбъект.КонтактнаяИнформация.Добавить();
			
			СтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид           = ВыборкаАдресов.ВидАдресаКИ;
			СтрокаКИ.Представление = ПредставлениеАдресаТиповойМеханизмКИ;
			СтрокаКИ.ЗначенияПолей = ДанныеАдресаВXML;
			СтрокаКИ.Значение      = ДанныеАдресаВJSON;
			СтрокаКИ.Страна        = Страна;
			СтрокаКИ.Регион        = СокрЛП(ВыборкаАдресов.Регион);
			СтрокаКИ.Город         = СокрЛП(ВыборкаАдресов.Город);
			
			Если СправочникОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
				СтрокаКИ.ДействуетС = ВыборкаАдресов.Период;
			КонецЕсли;
			
		КонецЦикла;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры //ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ ПРЕДОПРЕДЕЛЕННЫХ ВИДОВ СПРАВОЧНИКА ГРУППЫ УСЛУГ

#Область ПроцедурыОбновленияПредопределенныхВидовСправочникаГруппыУслуг

// Используется для обновления параметров предопределенных видов групп услуг.
//
Процедура ОбновитьДанныеПредопределенныхВидовГруппНастройкиРасчётаЛьготСправочникаГруппыУслуг_3_0_44_8() Экспорт
	
	Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиРасчётаЛьгот"));
	
КонецПроцедуры // ОбновитьДанныеПредопределенныхВидовГруппНастройкиРасчётаЛьготСправочникаГруппыУслуг_3_0_44_8()

// Используется для обновления параметров предопределенных видов групп услуг.
//
Процедура ОбновитьДанныеПредопределенныхВидовГруппНастройкиОтраженияНачисленийСправочникаГруппыУслуг_3_0_66_5() Экспорт
	
	Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений"));
	
КонецПроцедуры // ОбновитьДанныеПредопределенныхВидовГруппНастройкиОтраженияНачисленийСправочникаГруппыУслуг_3_0_66_5()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕХОД НА НОВЫЙ РЕГИСТР ДЛЯ УЧЕТА ДАННЫХ СТОРНО

#Область ПереходНаНовыйРегистрДляУчетаДанныхСторно

// Выполняет последовательный вызов процедур при переходе на версию 3.0.44.19.
//
Процедура ДействияПриОбновленииНа_3_0_44_19() Экспорт
	
	ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
	ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
	
КонецПроцедуры // ДействияПриОбновленииНа_3_0_44_19()

// Процедура заполняет новый регистр накопления "Данные для сторнирования начислений при отсутствии показаний ИПУ"
// на основе регистра накопления "Начисления".
//
Процедура ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19()
	
	// Для обработки большого кол-ва документов выполняем обработку обновления порционно. 
	// Для этого:
	// 1. Получаем список документов для обработки, а именно: получаем документы, для которых еще нет записей в новом регистре.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период
	|ПОМЕСТИТЬ врСписокДокументовСДаннымиДляОтраженияСторнирования
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор
	|ПОМЕСТИТЬ врСписокДокументовСДвижениямиРегистраДанныеДляСторнирования
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументовСДаннымиДляОтраженияСторнирования.Регистратор КАК Регистратор
	|ИЗ
	|	врСписокДокументовСДаннымиДляОтраженияСторнирования КАК СписокДокументовСДаннымиДляОтраженияСторнирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокДокументовСДвижениямиРегистраДанныеДляСторнирования КАК СписокДокументовСДвижениямиРегистраДанныеДляСторнирования
	|		ПО СписокДокументовСДаннымиДляОтраженияСторнирования.Регистратор = СписокДокументовСДвижениямиРегистраДанныеДляСторнирования.Регистратор
	|ГДЕ
	|	ЕСТЬNULL(СписокДокументовСДвижениямиРегистраДанныеДляСторнирования.Регистратор, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокДокументовСДаннымиДляОтраженияСторнирования.Период";
	
	ОбщийМассивРегистраторов     = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбщееКоличествоРегистраторов = ОбщийМассивРегистраторов.Количество();
	МассивДокументовДляОбработки = Новый Массив;
	ОбщийИндекс = 0;
	
	Пока НЕ ОбщийИндекс = ОбщееКоличествоРегистраторов Цикл
		
		МассивДокументовДляОбработки.Очистить();
		
		// 2. Отбираем пачку документов.
		КоличествоДокументовДляОбработки = Мин(200, ОбщееКоличествоРегистраторов - ОбщийИндекс);
		
		Для ТекущийИндекс = 1 По КоличествоДокументовДляОбработки Цикл
			
			МассивДокументовДляОбработки.Добавить(ОбщийМассивРегистраторов[ОбщийИндекс]);
			ОбщийИндекс = ОбщийИндекс + 1;
			
		КонецЦикла;
		
		// 3. Обрабатываем полученную пачку документов.
		ОбработатьСписокДокументовИЗаписатьДанныеДляСторнированияНачислений(МассивДокументовДляОбработки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новый регистр накопления "Данные для сторнирования начислений при отсутствии показаний ИПУ"
// на основе регистра накопления "Начисления" для переданного списка документов.
//
Процедура ОбработатьСписокДокументовИЗаписатьДанныеДляСторнированияНачислений(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.Период,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И УПЖКХ_Начисления.Регистратор В(&СписокДокументов)
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_Начисления.Период,
	|	УПЖКХ_Начисления.НомерСтроки
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект   = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ТаблицаПоУслугам = ДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить();
		ТаблицаПоУслугам.Индексы.Добавить("СостояниеПУ, Сторно");
		ТаблицаПоУслугам.Индексы.Добавить("Сторно");
	
		НайденныеСтрокиТЧ = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("СостояниеПУ, Сторно", Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний, Ложь));
		Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧ Цикл
			СтрокаТЧ.ТарифДляСторнирования = СтрокаТЧ.Тариф;
		КонецЦикла;
		
		НайденныеСтрокиТЧ = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("Сторно", Истина));
		Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧ Цикл
			СтрокаТЧ.ТарифДляСторнирования = СтрокаТЧ.Тариф;
		КонецЦикла;
		
		ДокументОбъект.УслугиПоПоказаниямПУ.Загрузить(ТаблицаПоУслугам);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		НаборЗаписейРН = РегистрыНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоздатьНаборЗаписей();
		НаборЗаписейРН.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРН);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет корректировочные записи в регистр накопления "Данные для сторнирования начислений при отсутствии
// показаний ИПУ" с помощью документа "Операция".
//
Процедура ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19()
	
	// В виду того, что ранее в программе были произведены автоматические корректировки 
	// записей регистра "Начисления" (из-за некорректного списания данных сторнировок
	// у ряда пользователей), когда с помощью документа "Корректировка начислений" были откорректированны 
	// суммы сторнировок (без объемов), теперь возникла необходимость в докорректировке объемов этих сторнировок.
	//
	//
	// Получаем данные для сторнировки из нового регистра, которые необходимо скорректировать.
	// Для этого:
	//  1) Получаем объемы начислений, подлежащие сторнировке на момент обновления, в которых сумма нулевая, 
	//     а объем ненулевой. Для каждой из полученных комбинаций в новом регистре берем остатки. 
	//     Если объем не нулевой, то выбираем остаток нового регистра, чтобы его скорректировать до нуля. 
	//  2) Кроме этого, выбираем для корректировки все данные из нового регистра с отрицательными остатками. 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	СУММА(УПЖКХ_Начисления.Количество * ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК Сумма,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|ПОМЕСТИТЬ врНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПосреднему)
	|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.Сумма
	|ПОМЕСТИТЬ врДанныеДляКорректировкиСторнирования
	|ИЗ
	|	врНачисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Количество > 0
	|	И УПЖКХ_Начисления.Сумма = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация КАК Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Остатки(
	|			,
	|			(Организация, ЛицевойСчет, Услуга, СоставнаяУслуга, УслугаОснование, ВидТарифа, Тариф, НачалоПериода, КонецПериода) В
	|				(ВЫБРАТЬ
	|					ДанныеДляКорректировкиСторнирования.Организация,
	|					ДанныеДляКорректировкиСторнирования.ЛицевойСчет,
	|					ДанныеДляКорректировкиСторнирования.Услуга,
	|					ДанныеДляКорректировкиСторнирования.СоставнаяУслуга,
	|					ДанныеДляКорректировкиСторнирования.УслугаОснование,
	|					ДанныеДляКорректировкиСторнирования.ВидТарифа,
	|					ДанныеДляКорректировкиСторнирования.Тариф,
	|					ДанныеДляКорректировкиСторнирования.НачалоПериода,
	|					ДанныеДляКорректировкиСторнирования.КонецПериода
	|				ИЗ
	|					врДанныеДляКорректировкиСторнирования КАК ДанныеДляКорректировкиСторнирования)) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	НЕ УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Остатки(, ) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток < 0
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		// По каждой организации создаем документ "Операция".
		Документ = Документы.ОперацияБух.СоздатьДокумент();
		Документ.Дата          = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		Документ.Организация   = ВыборкаОрганизаций.Организация;
		Документ.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		Документ.Содержание    = НСтр("ru = 'Корректировка данных для сторнирования начислений'");
		Документ.Комментарий   = НСтр("ru = '#Документ создан автоматически обработкой обновления (ЖКХ)'");
		
		СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
		СтрокаРегистра.Имя = "УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ";
		
		ЗаписатьОбъект(Документ, РежимЗаписиДокумента.Запись);
		
		НаборЗаписейРН = РегистрыНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоздатьНаборЗаписей();
		НаборЗаписейРН.Отбор.Регистратор.Установить(Документ.Ссылка);
		
		ВыборкаЗаписей = ВыборкаОрганизаций.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			// Для каждой корректируемой записи формируем движение по списанию остатка 
			// в регистре "Данные для сторнирования начислений при отсутствии показаний ИПУ".
			НоваяЗапись = НаборЗаписейРН.Добавить();
			НоваяЗапись.Период      = Документ.Дата;
			НоваяЗапись.Регистратор = Документ.Ссылка;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Активность  = Истина;
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРН);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ИСПОЛЬЗОВАНИЯ УСТАРЕВШЕГО ФУНКЦИОНАЛА ПО УЧЕТУ ПАРКОВОЧНЫХ МЕСТ

#Область ПроверкаИспользованияУстаревшегоФункционалаПоУчетуПарковочныхМест

// Процедура проверяет факт использования устаревшего функционала по учету парковочных мест.
Процедура ПроверитьНеобходимостьИзмененияВеденияУчетаПоПарковочнымМестам_3_0_44_8() Экспорт
	
	Если ПроверитьНаличиеЗаписейВРегистреПарковочныхМест() Тогда
		
		ТекстПредупреждения = "Внимание!
							  |Обнаружено использование утратившего актуальность механизма учета по парковочным местам.
							  |Свяжитесь с нами, пожалуйста, с целью выявления Ваших потребностей и приведения учета в порядок.
							  |
							  |Обратитесь на нашу линию технической поддержки за помощью." + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие записей в регистре парковочных мест.
Функция ПроверитьНаличиеЗаписейВРегистреПарковочныхМест()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_УдалитьСведенияОПарковочныхМестахСрезПоследних.ПарковочноеМесто КАК ПарковочноеМесто
	|ИЗ
	|	РегистрСведений.Удалить_КВП_СведенияОПарковочныхМестах.СрезПоследних КАК КВП_УдалитьСведенияОПарковочныхМестахСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ Результат.Количество() = 0;
	
КонецФункции

// Процедура заменяет строку "0" и символы пробелов в кодах услуг после изменения типа реквизита
// из числа в строку.
//
Процедура ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	КВП_ВидыУслуг.КодУслугиВГИСЖКХ
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйКодУслуги = "";
		СтарыйКодУслуги = Выборка.КодУслугиВГИСЖКХ;
		Если Не СтарыйКодУслуги = "0" И Не ПустаяСтрока(СтарыйКодУслуги) Тогда
			НовыйКодУслуги = СтрЗаменить(СтарыйКодУслуги, Символы.НПП, "");
		КонецЕсли;
		
		Если Не НовыйКодУслуги = СтарыйКодУслуги Тогда
			СпрОбъект = Выборка.ВидУслуги.ПолучитьОбъект();
			СпрОбъект.КодУслугиВГИСЖКХ = НовыйКодУслуги;
			ЗаписатьОбъект(СпрОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8()

// Процедура заполняет новую настройку "Начислять пени на закрытые лицевые счета" в справочнике "Настройки расчета пени".
//
Процедура ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12() Экспорт
	
	СправочникиВыборка = Справочники.УПЖКХ_НастройкиРасчетаПени.Выбрать();
	
	Пока СправочникиВыборка.Следующий() Цикл
		
		Если СправочникиВыборка.НачислятьПениНаЗакрытыеЛицевыеСчета Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = СправочникиВыборка.ПолучитьОбъект();
		СправочникОбъект.НачислятьПениНаЗакрытыеЛицевыеСчета = Истина;
		
		ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12.

// В регистре "Сведения о договорах управления домами" измерение "Операция с договором"
// сделали ресурсом (с целью упростить запросы по поиску дат начала и конца действия договора).
// Для этого значение измерения регистра надо перенести в соответствующий ресурс.
//
Процедура ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами КАК УПЖКХ_СведенияОДоговорахУправленияДомами
	|ГДЕ
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.ОперацияСДоговором = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Таблица Цикл
		
		ПерваяЗапись = Истина;
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОДоговорахУправленияДомами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ОперацияСДоговором = Запись.УдалитьОперацияСДоговором;
			
			// Устанавливаем значение помеченного на удаление измерения в нулевое для того, чтобы корректно отрабатывали запросы со срезами последних.
			Запись.УдалитьОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ПустаяСсылка();
			
			// Если у двух записей (максимальное количество записей, которое может быть сформировано одним документом регистрации договоров управления домами)
			// регистра одинаковый регистратор, прибавляем к периоду второй записи одну секунду, чтобы не возникло проблем с уникальностью записей после удаления
			// помеченного на удаление измерения "УдалитьОперацияСДоговором".
			Если Не ПерваяЗапись Тогда
				Запись.Период = Запись.Период + 1;
			КонецЕсли;
			
			ПерваяЗапись = Ложь;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАМЕНЫ ПРЕДОПРЕДЕЛЕННЫХ ДАННЫХ НА СООТВЕТСТВУЮЩИЕ ТИПОВОЙ БП ПО ВНУТРЕННИМ ИДЕНТИФИКАТОРАМ

#Область ЗаменаПредопределенныхДанных

// Выполняет последовательный вызов процедур при переходе на версию 3.0.46.2.
//
Процедура ДействияПриОбновленииНа_3_0_46_2() Экспорт
	
	ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2();
	ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2();
	
КонецПроцедуры // ДействияПриОбновленииНа_3_0_46_2()

// Выполняет заполнение добавленных видов КИ.
//
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2() Экспорт
	
	// Процедура выполняет начальное заполнение видов контактной информации, замененных в рамках задачи по исправлению предопределенных данных.
	// В процедуре используются типовые механизмы заполнения.
	// Заполняются следующие виды КИ:
	// 1. E-mail физического лица.
	// 2. Адрес торговой точки.
	
	// ТорговыеТочки
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский",        Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность",        Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СправочникТорговыеТочки.ПолучитьОбъект();
	ВидКонтактнойИнформации.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	СтараяГруппа = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки.ПолучитьОбъект();
	СтараяГруппа.Используется = Ложь;
	ЗаписатьОбъект(СтараяГруппа);
	
	СтарыйАдрес = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки.ПолучитьОбъект();
	Если СтарыйАдрес.Используется Тогда
		СтарыйАдрес.Используется          = Ложь;
		СтарыйАдрес.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйАдрес);
	КонецЕсли;
	// Конец ТорговыеТочки
	
	// EMailФизическиеЛица
	Порядок = Неопределено;
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 1;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	СтарыйEMail = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица.ПолучитьОбъект();
	Если СтарыйEMail.Используется Тогда
		СтарыйEMail.Используется          = Ложь;
		СтарыйEMail.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйEMail);
	КонецЕсли;
	// Конец EMailФизическиеЛица
	
КонецПроцедуры // ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2()

// Выполняет замену значений предопределенных элементов плана счетов и справочников.
//
Процедура ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2(ЭтоПереходС20 = Ложь)
	
	МассивСсылокДляЗамены = Новый Массив;
	
	// Замена ссылок элементов плана счетов.
	Хозрасчетный = ПланыСчетов.Хозрасчетный;
	
	// План счетов "Хозрасчетный".
	СоответствиеДляЗамены = Новый Соответствие;
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежиВал,                                Хозрасчетный.ЛизинговыеПлатежиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАренде,                                     Хозрасчетный.РасчетыПоАренде);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендованноеИмущество,                               Хозрасчетный.АрендованноеИмущество);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСпоАренднымОбязательствамУЕ,                       Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАрендеВал,                                  Хозрасчетный.РасчетыПоАрендеВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСпоАренднымОбязательствам,                         Хозрасчетный.НДСпоАренднымОбязательствам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательства,                               Хозрасчетный.АрендныеОбязательства);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АмортизацияАрендованногоИмущества,                   Хозрасчетный.АмортизацияАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАрендеУЕ,                                   Хозрасчетный.РасчетыПоАрендеУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательстваУЕ,                             Хозрасчетный.АрендныеОбязательстваУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежи,                                   Хозрасчетный.ЛизинговыеПлатежи);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательстваВал,                            Хозрасчетный.АрендныеОбязательстваВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежиУЕ,                                 Хозрасчетный.ЛизинговыеПлатежиУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиВалПатент,                    Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьОценочныеОбязательства,                       Хозрасчетный.УдалитьОценочныеОбязательства);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РезервыПредстоящихРасходов,                          Хозрасчетный.РезервыПредстоящихРасходов);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_Страх_СтраховойГод,                              Хозрасчетный.ПФР_Страх_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСРасчетыПоОтгрузкеУЕ,                              Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАвансамПолученнымУЕВСчетОтгрузки,           Хозрасчетный.РасчетыПоАвансамПолученнымУЕВСчетОтгрузки);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КраткосрочныеДолговыеЦенныеБумагиВал,                Хозрасчетный.КраткосрочныеДолговыеЦенныеБумагиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПроцентыПоДолгосрочнымДолговымЦеннымБумагам, Хозрасчетный.ПроцентыПроцентыПоДолгосрочнымДолговымЦеннымБумагам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КраткосрочныеДолговыеЦенныеБумаги,                   Хозрасчетный.КраткосрочныеДолговыеЦенныеБумаги);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоКраткосрочнымДолговымЦеннымБумагамВал,     Хозрасчетный.ПроцентыПоКраткосрочнымДолговымЦеннымБумагамВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоДолгосрочнымДолговымЦеннымБумагамВал,      Хозрасчетный.ПроцентыПоДолгосрочнымДолговымЦеннымБумагамВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоКраткосрочнымДолговымЦеннымБумагам,        Хозрасчетный.ПроцентыПоКраткосрочнымДолговымЦеннымБумагам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ДолгосрочныеДолговыеЦенныеБумагиВал,                 Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумагиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ДолгосрочныеДолговыеЦенныеБумаги,                    Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумаги);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриобретениеОсновныхСредств,                         Хозрасчетный.ПриобретениеОсновныхСредств);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаКомТоваровПрошлогоПериода,              Хозрасчетный.КорректировкаКомТоваровПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПлатежиПоПрочимВидамСтрахования,                     Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_ТяжелыеУсловияТруда,                         Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ФСС_СтраховойГод,                                    Хозрасчетный.ФСС_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиПатент,                       Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиНМАПоПереоценке,                     Хозрасчетный.ПриростСтоимостиНМАПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСПоУменьшениюСтоимостиРеализации,                  Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_Взносы_СтраховойГод,                                 Хозрасчетный.Взносы_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиВалТорговыйСбор,              Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиТорговыйСбор,                 Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НалогПриПСН,                                         Хозрасчетный.НалогПриПСН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_ОПС_ИП,                                          Хозрасчетный.ПФР_ОПС_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПрочиеРасчетыСФизическимиЛицами,                     Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаСтоимостиАрендованногоИмущества,        Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ФОМС_СтраховойГод,                                   Хозрасчетный.ФОМС_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПоВознаграждениямРаботникам,   Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РезервыПредстоящихРасходовПрочие,                    Хозрасчетный.РезервыПредстоящихРасходовПрочие);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДФЛ_ИП,                                             Хозрасчетный.НДФЛ_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПоВознаграждениям,             Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПостраховымВзносам,            Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОСБезГосРегистрации,                                 Хозрасчетный.ОСБезГосРегистрации);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_Нак_СтраховойГод,                                Хозрасчетный.ПФР_Нак_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПереданныеОбъектыНедвижимости,                       Хозрасчетный.ПереданныеОбъектыНедвижимости);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоПрочимУдержаниямРаботников,                 Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_шахтеры,                                     Хозрасчетный.ПФР_доп_шахтеры);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиИмуществаПоПереоценке,               Хозрасчетный.ПриростСтоимостиИмуществаПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_ВредныеУсловияТруда,                         Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ТорговыйСбор,                                        Хозрасчетный.ТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаРасчетовПрошлогоПериода,                Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЗемельныйНалог,                                      Хозрасчетный.ЗемельныйНалог);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НераспределеннаяРозничнаяВыручкаБН,                  Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСВРозничнойВыручкеБН,                              Хозрасчетный.НДСВРозничнойВыручкеБН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСТаможенныйСоюзКУплате,                            Хозрасчетный.НДСТаможенныйСоюзКУплате);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьПФР_ОПС_ИП,                                   Хозрасчетный.УдалитьПФР_ОПС_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза,         Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_ОПС,                                             Хозрасчетный.ПФР_ОПС);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьКорректировкаСтоимостиАрендованногоИмущества, Хозрасчетный.УдалитьКорректировкаСтоимостиАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриобретениеКомпонентовОсновныхСредств,              Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НематериальныеПоисковыеАктивы,                       Хозрасчетный.НематериальныеПоисковыеАктивы);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_МатериальныеПоисковыеАктивы,                         Хозрасчетный.МатериальныеПоисковыеАктивы);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаТоваровПрошлогоПериода,                 Хозрасчетный.КорректировкаТоваровПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КассаПлатежногоАгента,                               Хозрасчетный.КассаПлатежногоАгента);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиПоПереоценке,                        Хозрасчетный.ПриростСтоимостиПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке,Хозрасчетный.ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьОценочныеОбязательстваИРезервы,               Хозрасчетный.УдалитьОценочныеОбязательстваИРезервы);
	
	Если Не ЭтоПереходС20 Тогда
		// Справочник "Виды контактной информации".
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки, Справочники.ВидыКонтактнойИнформации.СправочникТорговыеТочки);
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки,      Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки);
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица,     Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	КонецЕсли;
	
	Для Каждого ТекСоответствие Из СоответствиеДляЗамены Цикл
		
		// Добавляем заменяемый элемент в массив ссылок для замены.
		МассивСсылокДляЗамены.Добавить(ТекСоответствие.Ключ);
		
		Если ТипЗнч(ТекСоответствие.Значение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			
			// Дополняем новые счета пользовательскими видами субконто по следующему алгоритму:
			// 1. Получаем таблицы видов субконто по помеченному на удаление счету и по добавленному счету.
			// 2. Сравниваем количество видов субконто в таблицах. Если в помеченном счете видов больше, чем в добавленном,
			// значит у счета добавлены непредопределенные виды субконто, которые необходимо перенести в новый счет.
			// 3. Таблицу видов субконто добавленного счета дополняем недостающими непредопределенными видами субконто.
			
			СсылкаСтарыйСчет = ТекСоответствие.Ключ;
			СсылкаНовыйСчет  = ТекСоответствие.Значение;
			
			ВидыСубконтоСтарогоСчета = СсылкаСтарыйСчет.ВидыСубконто;
			ВидыСубконтоНовогоСчета  = СсылкаНовыйСчет.ВидыСубконто;
			
			// Если в старом счете видов субконто больше, чем в новом, добавляем недостающие.
			Если Не ВидыСубконтоСтарогоСчета.Количество() = ВидыСубконтоНовогоСчета.Количество() Тогда
				
				ОбъектНовогоСчета = СсылкаНовыйСчет.ПолучитьОбъект();
				ВидыСубконтоИзменяемые = ОбъектНовогоСчета.ВидыСубконто;
				Для Каждого ТекВидСубконто Из ВидыСубконтоСтарогоСчета Цикл
					
					Отбор = Новый Структура;
					Отбор.Вставить("ВидСубконто", ТекВидСубконто.ВидСубконто);
					
					НайденныеСтроки = ВидыСубконтоИзменяемые.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НовыйВид = ВидыСубконтоИзменяемые.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйВид, ТекВидСубконто);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ЗаписатьОбъект(ОбъектНовогоСчета) Тогда
					ТекстСообщения = "Не удалось обновить виды субконто счета """ + СсылкаНовыйСчет + """. Проверьте настройки счета.";
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
							УровеньЖурналаРегистрации.Ошибка,
							, , ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Требуется получить описание типов, содержащее все ссылочные значения. Для этого собираем все типы, последовательно
	// присоединяя каждый следующий набор типов к результирующему описанию.
	мТипВсеСсылки = Справочники.ТипВсеСсылки();
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());
	
	ТаблицаСсылокДляЗамены = Новый ТаблицаЗначений;
	ТаблицаСсылокДляЗамены.Колонки.Добавить("ЧтоЗаменять",   мТипВсеСсылки);
	ТаблицаСсылокДляЗамены.Колонки.Добавить("НаЧтоЗаменять", мТипВсеСсылки);
	ТаблицаСсылокДляЗамены.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	
	Для Каждого Элемент Из МассивСсылокДляЗамены Цикл
		НоваяСтрока = ТаблицаСсылокДляЗамены.Добавить();
		НоваяСтрока.ЧтоЗаменять = Элемент;
		НоваяСтрока.Пометка     = Истина;
	КонецЦикла;
	
	НайденныеСсылки = Новый ТаблицаЗначений;
	НайденныеСсылки.Колонки.Добавить("Ссылка", мТипВсеСсылки);
	НайденныеСсылки.Колонки.Добавить("Данные");
	НайденныеСсылки.Колонки.Добавить("Метаданные");
	НайденныеСсылки.Колонки.Добавить("Включено", Новый ОписаниеТипов("Булево"));
	
	Если Не Обработки.УПЖКХ_ПоискИЗаменаЗначений.ЗаменяемыеЗначенияНайтиСсылки(ТаблицаСсылокДляЗамены, НайденныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	НайденныеСсылки.ЗаполнитьЗначения(Истина, "Включено");
	
	ЗаменяемыеСсылки = Новый Соответствие;
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ТекСсылка Из НайденныеСсылки Цикл
		
		НоваяСсылка = СоответствиеДляЗамены.Получить(ТекСсылка.Ссылка);
		Если Не НоваяСсылка = Неопределено Тогда
			ЗаменяемыеСсылки.Вставить(ТекСсылка.Ссылка, НоваяСсылка);
		Иначе
			МассивСтрокДляУдаления.Добавить(ТекСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим из таблицы ссылок строки, ссылкам в которых не было найдено соответствие в новом перечислении.
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		НайденныеСсылки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	СообщенияОбОшибках = Новый Структура;
	
	// Вызов процедуры непосредственной замены ссылок. Выполняем последовательно без транзакции, РежимЗагрузки = Истина.
	Обработки.УПЖКХ_ПоискИЗаменаЗначений.ВыполнитьЗаменуЭлементов(ЗаменяемыеСсылки, НайденныеСсылки, СообщенияОбОшибках,, Ложь, Истина);
	
	// Выводим ошибки.
	Для Каждого Ошибка Из СообщенияОбОшибках Цикл
		// Выведем сообщение в окно сообщений.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Ошибка.Значение.Описание);
		// А также занесем информацию в протокол.
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				, , Ошибка.Значение.Описание);
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2()

// Заполняет свойство "ЗапретитьИспользоватьВПроводках" у некоторых счетов.
//
Процедура ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1() Экспорт
	
	// После исправления проблемы с идентификаторами предопределенных счетов необходимо дополнительно
	// установить свойство "ЗапретитьИспользоватьВПроводках" в Истину у добавленных "родительских" счетов.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриростСтоимостиПоПереоценке);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	
	Для Каждого СсылкаНаСчет Из МассивСчетов Цикл
		
		Если Не СсылкаНаСчет.ЗапретитьИспользоватьВПроводках Тогда
			
			ОбъектСчета = СсылкаНаСчет.ПолучитьОбъект();
			ОбъектСчета.ЗапретитьИспользоватьВПроводках = Истина;
			
			ЗаписатьОбъект(ОбъектСчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ НАЧИСЛЕНИЙ ПРИ ПЕРЕНОСЕ ЗАВИСИМЫХ УСЛУГ В ТЧ ДОКУМЕНТА

#Область ОбработчикиМеханизмаНачисленийЗависимыхУслуг

// Процедура заполняет табличную часть документа "Начисление услуг" зависимыми услугами
// на основе данных регистра накопления "Начисления".
//
Процедура ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Для обработки большого кол-ва документов выполняем обработку обновления порционно. 
	// Для этого:
	// 1. Получаем список документов для обработки, а именно: получаем документы, в которые еще не перенесены зависимые услуги.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период
	|ПОМЕСТИТЬ врСписокДокументовСДаннымиПоЗависимымУслугам
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугПоПУ.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ врСписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугПоПУ
	|ГДЕ
	|	КВП_НачислениеУслугПоПУ.Зависимая
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НачислениеУслуг.Ссылка
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслуг
	|ГДЕ
	|	КВП_НачислениеУслуг.Зависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументовСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор
	|ИЗ
	|	врСписокДокументовСДаннымиПоЗависимымУслугам КАК СписокДокументовСДаннымиПоЗависимымУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам КАК СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам
	|		ПО СписокДокументовСДаннымиПоЗависимымУслугам.Регистратор = СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам.Регистратор
	|ГДЕ
	|	ЕСТЬNULL(СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам.Регистратор, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокДокументовСДаннымиПоЗависимымУслугам.Период";
	
	ОбщийМассивРегистраторов     = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбщееКоличествоРегистраторов = ОбщийМассивРегистраторов.Количество();
	МассивДокументовДляОбработки = Новый Массив;
	ОбщийИндекс = 0;
	
	Пока НЕ ОбщийИндекс = ОбщееКоличествоРегистраторов Цикл
		
		МассивДокументовДляОбработки.Очистить();
		
		// 2. Отбираем пачку документов.
		КоличествоДокументовДляОбработки = Мин(200, ОбщееКоличествоРегистраторов - ОбщийИндекс);
		
		Для ТекущийИндекс = 1 По КоличествоДокументовДляОбработки Цикл
			
			МассивДокументовДляОбработки.Добавить(ОбщийМассивРегистраторов[ОбщийИндекс]);
			ОбщийИндекс = ОбщийИндекс + 1;
			
		КонецЦикла;
		
		// 3. Обрабатываем полученную пачку документов.
		ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам(МассивДокументовДляОбработки, ОбработчикВыполненУспешно);
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1()

// Процедура заполняет табличную часть документа "Начисление услуг" зависимыми услугами
// на основе данных регистра накопления "Начисления".
//
Процедура ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам(МассивДокументов, ОбработчикВыполненУспешно)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор КАК Регистратор,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация КАК Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга КАК Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф КАК Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода КАК НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВрДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор В(&СписокДокументов)
	|	И НЕ УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.НомерСтроки КАК НомерСтроки,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.РазделУчета КАК РазделУчета,
	|	УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
	|	УПЖКХ_Начисления.ИсточникОплаты КАК ИсточникОплаты,
	|	УПЖКХ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_Начисления.МесяцРассрочки КАК МесяцРассрочки,
	|	УПЖКХ_Начисления.Количество КАК Количество,
	|	УПЖКХ_Начисления.УровеньРаспределения КАК УровеньРаспределения,
	|	УПЖКХ_Начисления.ОснованиеКорректировки КАК ОснованиеКорректировки,
	|	УПЖКХ_Начисления.СуммаНачисления КАК СуммаНачисления,
	|	УПЖКХ_Начисления.ДнейНачислено КАК ДнейНачислено,
	|	УПЖКХ_Начисления.Начало КАК Начало,
	|	УПЖКХ_Начисления.Окончание КАК Окончание,
	|	УПЖКХ_Начисления.Тарифность КАК Тарифность,
	|	УПЖКХ_Начисления.КоличествоУчетное КАК КоличествоУчетное
	|ПОМЕСТИТЬ ВрНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор В(&СписокДокументов)
	|	И УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.ДнейНачислено КАК ДнейНачислено,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_Начисления.Тарифность КАК Тарифность,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)
	|	КОНЕЦ КАК СостояниеПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ТОГДА 2
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|			ТОГДА 2
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ТОГДА 0
	|	КОНЕЦ КАК ТипРасчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сторно,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ЕСТЬNULL(УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф, УПЖКХ_Начисления.Тариф)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифДляСторнирования,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПоказаниеСчЛС,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Помещение""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияПомещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Подъезд""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияПодъезд,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Здание""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияЗдание,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРаспределения,
	|	УПЖКХ_Начисления.КоличествоУчетное КАК УчетныйИндивидуальныйОбъем
	|ПОМЕСТИТЬ ВрНачисленияЗУДляДобавленияВТЧ
	|ИЗ
	|	ВрНачисления КАК УПЖКХ_Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|		ПО УПЖКХ_Начисления.Регистратор = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор
	|			И УПЖКХ_Начисления.Организация = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация
	|			И УПЖКХ_Начисления.ЛицевойСчет = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет
	|			И УПЖКХ_Начисления.Услуга = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга
	|			И УПЖКХ_Начисления.СоставнаяУслуга = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга
	|			И УПЖКХ_Начисления.УслугаОснование = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование
	|			И УПЖКХ_Начисления.ВидТарифа = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа
	|			И УПЖКХ_Начисления.Начало = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода
	|			И УПЖКХ_Начисления.Окончание = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияЗУ.Регистратор КАК Регистратор,
	|	НачисленияЗУ.Период КАК Период,
	|	НачисленияЗУ.Организация КАК Организация,
	|	НачисленияЗУ.ЛицевойСчет КАК ЛицевойСчет,
	|	НачисленияЗУ.Услуга КАК Услуга,
	|	НачисленияЗУ.СоставнаяУслуга КАК СоставнаяУслуга,
	|	НачисленияЗУ.УслугаОснование КАК УслугаОснование,
	|	НачисленияЗУ.Договор КАК Договор,
	|	НачисленияЗУ.ВидТарифа КАК ВидТарифа,
	|	НачисленияЗУ.Тариф КАК Тариф,
	|	НачисленияЗУ.НачалоПериода КАК НачалоПериода,
	|	НачисленияЗУ.КонецПериода КАК КонецПериода,
	|	НачисленияЗУ.ДнейНачислено КАК ДнейНачислено,
	|	НачисленияЗУ.Сторно КАК Сторно,
	|	НачисленияЗУ.ТарифДляСторнирования КАК ТарифДляСторнирования,
	|	ИСТИНА КАК Зависимая,
	|	СУММА(НачисленияЗУ.Количество) КАК Количество,
	|	СУММА(НачисленияЗУ.Начислено) КАК Начислено,
	|	МАКСИМУМ(НачисленияЗУ.Тарифность) КАК Тарифность,
	|	МАКСИМУМ(НачисленияЗУ.СостояниеПУ) КАК СостояниеПУ,
	|	МАКСИМУМ(НачисленияЗУ.ТипРасчета) КАК ТипРасчета,
	|	СУММА(НачисленияЗУ.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
	|	СУММА(НачисленияЗУ.Сумма) КАК Сумма,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияПомещение) КАК КоличествоРаспределенияПомещение,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияПодъезд) КАК КоличествоРаспределенияПодъезд,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияЗдание) КАК КоличествоРаспределенияЗдание,
	|	СУММА(НачисленияЗУ.СуммаРаспределения) КАК СуммаРаспределения,
	|	СУММА(НачисленияЗУ.УчетныйИндивидуальныйОбъем) КАК УчетныйИндивидуальныйОбъем
	|ИЗ
	|	ВрНачисленияЗУДляДобавленияВТЧ КАК НачисленияЗУ
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияЗУ.Регистратор,
	|	НачисленияЗУ.Период,
	|	НачисленияЗУ.Организация,
	|	НачисленияЗУ.ЛицевойСчет,
	|	НачисленияЗУ.Услуга,
	|	НачисленияЗУ.СоставнаяУслуга,
	|	НачисленияЗУ.УслугаОснование,
	|	НачисленияЗУ.Договор,
	|	НачисленияЗУ.ВидТарифа,
	|	НачисленияЗУ.Тариф,
	|	НачисленияЗУ.НачалоПериода,
	|	НачисленияЗУ.КонецПериода,
	|	НачисленияЗУ.ДнейНачислено,
	|	НачисленияЗУ.Сторно,
	|	НачисленияЗУ.ТарифДляСторнирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияЗУ.Период
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ОрганизацияДокумента = ДокументОбъект.Организация;
		ВидОперации          = ДокументОбъект.ВидОперации;
		
		МассивПолейСортировки   = Новый Массив;
		СуммаПоЗависимымУслугам = 0;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
			
			ИмяТЧ        = "Услуги";
			ИмяКолонкиЛС = "ЛицевыеСчета";
			
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Владелец");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.ВидПомещения");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Код");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Суффикс");
			МассивПолейСортировки.Добавить("ЛицевыеСчета");
			МассивПолейСортировки.Добавить("Зависимая");
			МассивПолейСортировки.Добавить("Услуга.Наименование");
			МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
			МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
			МассивПолейСортировки.Добавить("НачалоПериода");
			МассивПолейСортировки.Добавить("КонецПериода");
			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
			
			ИмяТЧ        = "УслугиПоПоказаниямПУ";
			ИмяКолонкиЛС = "ЛицевойСчет";
			
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Владелец");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.ВидПомещения");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Код");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Суффикс");
			МассивПолейСортировки.Добавить("ЛицевойСчет");
			МассивПолейСортировки.Добавить("Зависимая");
			МассивПолейСортировки.Добавить("Услуга.Наименование");
			МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
			МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
			МассивПолейСортировки.Добавить("НачислениеПоПовышающемуКоэффициенту");
			МассивПолейСортировки.Добавить("НачалоПериода");
			МассивПолейСортировки.Добавить("КонецПериода");
			МассивПолейСортировки.Добавить("ВидТарифа.Порядок");
			
		КонецЕсли;
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Если НЕ ВыборкаЗаписей.Организация = ОрганизацияДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписей);
			НоваяСтрока[ИмяКолонкиЛС] = ВыборкаЗаписей.ЛицевойСчет;
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
				Если ВыборкаЗаписей.ТипРасчета = NULL Тогда
					НоваяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
				КонецЕсли;
				Если ВыборкаЗаписей.СостояниеПУ = NULL Тогда
					НоваяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
				КонецЕсли;
			КонецЕсли;
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
				СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам + НоваяСтрока.Начислено;
			Иначе
				СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам + НоваяСтрока.Сумма + НоваяСтрока.СуммаРаспределения;
			КонецЕсли;
			
		КонецЦикла;
		
		// Отсортируем принудительно, иначе ЗУ добавятся в конец ТЧ, а строки не свернутся по л/с.
		ТаблицаУслуг = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТЧ, МассивПолейСортировки);
		ДокументОбъект[ИмяТЧ].Загрузить(ТаблицаУслуг);
		
		// Запишем итог по ЗУ для отображения в журналах.
		ДокументОбъект.СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам;
		
		// Записываем обработанный документ.
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам()

// Процедура заполняет состояние ПУ в табличной части документа "Начисление услуг" 
// для корректного отображения сторно зависимых услуг.
//
Процедура ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Получаем список документов для обработки, а именно: получаем документы, 
	// в которых есть сторно зависимых услуг с некорректным состоянием ПУ.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугПоПУ.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугПоПУ
	|ГДЕ
	|	КВП_НачислениеУслугПоПУ.Зависимая
	|	И КВП_НачислениеУслугПоПУ.Сторно
	|	И НЕ КВП_НачислениеУслугПоПУ.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_НачислениеУслугПоПУ.Ссылка.Дата";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сторно",      Истина);
		ПараметрыОтбора.Вставить("Зависимая",   Истина);
		ПараметрыОтбора.Вставить("СостояниеПУ", Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ);
		
		СтрокиСторноЗУ = ДокументОбъект.УслугиПоПоказаниямПУ.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиСторноЗУ Цикл
			ТекСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний;
		КонецЦикла;
		
		// Записываем обработанный документ.
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

#Область ФункцииОбновленияИнформационнойБазы

// Процедура производит заполнение новых реквизитов "Коэффициент трансформации" и "Температурный коэффициент"
// в документе "Ввод показаний счетчика" и аналогичных новых ресурсов в регистре сведений "Показания счетчиков".
//
Процедура ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4()
	
	// Обработаем документ "Ввод показаний счетчика", заполнив температурный коэффициент
	// значением 1, а коэффициент трансформации значением коэффициента из справочника приборов учета.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчика.Ссылка КАК Ссылка,
	|	УПЖКХ_ВводПоказанийСчетчика.НомерСтроки,
	|	УПЖКХ_ВводПоказанийСчетчика.Счетчик,
	|	УПЖКХ_ВводПоказанийСчетчика.Счетчик.Коэффициент КАК КоэффициентТрансформации
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчика
	|ГДЕ
	|	(УПЖКХ_ВводПоказанийСчетчика.КоэффициентТрансформации = 0
	|			ИЛИ УПЖКХ_ВводПоказанийСчетчика.ТемпературныйКоэффициент = 0)
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументов.Следующий() Цикл
		
		// 1. Обработка документа.
		
		// Получим объект документа.
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		// Если документ проведен, то нужно обрабатывать движения.
		НужнаОбработкаДвижений = ДокументОбъект.Проведен;
		Если НужнаОбработкаДвижений Тогда
			
			НаборЗаписей = РегистрыСведений.КВП_ПоказанияСчетчиков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			
			ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаНабораЗаписей.Индексы.Добавить("Счетчик");
			
		КонецЕсли;
		
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтрок.Следующий() Цикл
			
			// Получим строку счетчика по номеру строки.
			СтрокаСчетчикавТЧ = ДокументОбъект.Главная.Получить(ВыборкаСтрок.НомерСтроки - 1);
			
			// Установим значение коэффициента трансформации.
			Если СтрокаСчетчикавТЧ.КоэффициентТрансформации = 0 Тогда
				СтрокаСчетчикавТЧ.КоэффициентТрансформации = ВыборкаСтрок.КоэффициентТрансформации;
			КонецЕсли;
			
			// Установим значение температурного коэффициента.
			Если СтрокаСчетчикавТЧ.ТемпературныйКоэффициент = 0 Тогда
				СтрокаСчетчикавТЧ.ТемпературныйКоэффициент = 1;
			КонецЕсли;
			
			// Если нужна обработка движений, обработаем записи по счетчику.
			Если НужнаОбработкаДвижений Тогда
				
				СтрокаДвиженияСчетчика = ТаблицаНабораЗаписей.Найти(ВыборкаСтрок.Счетчик, "Счетчик");
				Если Не СтрокаДвиженияСчетчика = Неопределено Тогда
					
					// Установим значение коэффициента трансформации.
					Если СтрокаДвиженияСчетчика.КоэффициентТрансформации = 0 Тогда
						СтрокаДвиженияСчетчика.КоэффициентТрансформации = ВыборкаСтрок.КоэффициентТрансформации;
					КонецЕсли;
					
					// Установим значение температурного коэффициента.
					Если СтрокаДвиженияСчетчика.ТемпературныйКоэффициент = 0 Тогда
						СтрокаДвиженияСчетчика.ТемпературныйКоэффициент = 1;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Запись документа.
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		// Запись движений документа.
		Если НужнаОбработкаДвижений Тогда
			НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4()

// Процедура заполняет новый ресурс "Дата изменения" во всех записях
// регистра сведений "Закрепленные четчики".
//
Процедура ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22()
	
	// Получим все документы "Закрытие лицевого счета" и "Установка счетчиков",
	// движения которых еще не были обработаны.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчики.Регистратор,
	|	КВП_ЗакрепленныеСчетчики.Регистратор.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчики.Регистратор ССЫЛКА Документ.КВП_УстановкаСчетчика
	|			ТОГДА КВП_ЗакрепленныеСчетчики.Регистратор.Действие
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Действие
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЭтоЗакрытиеЛС  = (ТипЗнч(ВыборкаЗапроса.Регистратор) = Тип("ДокументСсылка.КВП_ЗакрытиеЛицевогоСчета"));
		ЭтоУстановкаПУ = (ТипЗнч(ВыборкаЗапроса.Регистратор) = Тип("ДокументСсылка.КВП_УстановкаСчетчика"));
		
		НаборЗаписейРС = РегистрыСведений.КВП_ЗакрепленныеСчетчики.СоздатьНаборЗаписей();
		НаборЗаписейРС.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
		НаборЗаписейРС.Прочитать();
		
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписейРС Цикл
			Если ЭтоЗакрытиеЛС Тогда
				СтрокаЗаписи.Период        = КонецДня(ВыборкаЗапроса.Дата) + 1;
				СтрокаЗаписи.ДатаИзменения = КонецДня(ВыборкаЗапроса.Дата) + 1;
			ИначеЕсли ЭтоУстановкаПУ Тогда
				СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
				Если ВыборкаЗапроса.Действие = "Включить счетчик" Тогда
					Если СтрокаЗаписи.Действует Тогда
						СтрокаЗаписи.Период = ВыборкаЗапроса.Дата;
					Иначе
						СтрокаЗаписи.Период = ВыборкаЗапроса.Дата + 1;
					КонецЕсли;
				Иначе
					СтрокаЗаписи.Период = ВыборкаЗапроса.Дата;
				КонецЕсли;
			Иначе
				СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
				СтрокаЗаписи.Период        = ВыборкаЗапроса.Дата;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРС);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22()

// Процедура заполняет связи между документами "Регистрация оплаты" и типовыми документами
// отражения оплат (ПРС/СРС, ПКО/РКО) в регистре сведений "Связи документов оплат"
// на основании ссылок на типовые документы в табличной части документа "Регистрация оплаты".
//
Процедура ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК ДокументРО,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация КАК Организация,
	|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты КАК ДокументОтражения
	|ПОМЕСТИТЬ ТаблицаДокументовОтражения
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|ГДЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты В (ЗНАЧЕНИЕ(Документ.ПоступлениеНаРасчетныйСчет.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты ССЫЛКА Документ.КорректировкаДолга
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРО,
	|	ДокументОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументовОтражения.ДокументРО КАК ДокументРО,
	|	ТаблицаДокументовОтражения.Организация,
	|	ТаблицаДокументовОтражения.ДокументОтражения
	|ИЗ
	|	ТаблицаДокументовОтражения КАК ТаблицаДокументовОтражения
	|ГДЕ
	|	НЕ (ТаблицаДокументовОтражения.ДокументРО, ТаблицаДокументовОтражения.ДокументОтражения) В
	|				(ВЫБРАТЬ
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.РегистрацияОплаты,
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения
	|				ИЗ
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете)
	|ИТОГИ ПО
	|	ДокументРО";
	
	ВыборкаДокументовРО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаДокументовРО.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РегистрацияОплаты.Установить(ВыборкаДокументовРО.ДокументРО);
		
		ВыборкаДокументовОтражения = ВыборкаДокументовРО.Выбрать();
		Пока ВыборкаДокументовОтражения.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.РегистрацияОплаты = ВыборкаДокументовОтражения.ДокументРО;
			НоваяЗапись.ДокументОтражения = ВыборкаДокументовОтражения.ДокументОтражения;
			НоваяЗапись.Организация       = ВыборкаДокументовОтражения.Организация;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1()

// Процедура ищет движения непроведенных документов "Отражение начислений в регламентированном учете" и очищает
// их при наличии.
Процедура ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ОтражениеНачисленийВРеглУчете.Ссылка КАК Регистратор,
	|	КВП_ОтражениеНачисленийВРеглУчете.ВидОперации
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК КВП_ОтражениеНачисленийВРеглУчете
	|ГДЕ
	|	НЕ КВП_ОтражениеНачисленийВРеглУчете.Проведен
	|	И НЕ КВП_ОтражениеНачисленийВРеглУчете.РучнаяКорректировка";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		// Очистка движений по регистру накопления "Начисления для отражения в регл. учете".
		ТекНаборЗаписей = РегистрыНакопления.КВП_НачислениеДляОтраженияВРеглУчете.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		ТекНаборЗаписей.Прочитать();
		
		Если ТекНаборЗаписей.Количество() > 0 Тогда
			ТекНаборЗаписей.Очистить();
			ЗаписатьОбъект(ТекНаборЗаписей);
		КонецЕсли;
		
		Если ВыборкаРегистраторов.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
			
			// Очистка движений по регистру бухгалтерии.
			ТекНаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
			ТекНаборЗаписей.Прочитать();
			
			Если ТекНаборЗаписей.Количество() > 0 Тогда
				ТекНаборЗаписей.Очистить();
				ЗаписатьОбъект(ТекНаборЗаписей);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1()

// Процедура заполняет новый реквизит "Раздел учета" табличной части документа "КВП_ВводНачальногоСальдо"
// на основе помеченного на удаление реквизита "Вид начислений" этой же табличной части документа.
//
Процедура ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВводНачальногоСальдоЛицевыеСчета.Ссылка
	|ИЗ
	|	Документ.КВП_ВводНачальногоСальдо.ЛицевыеСчета КАК КВП_ВводНачальногоСальдоЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ВводНачальногоСальдоЛицевыеСчета.Удалить_ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_УдалитьВидыНачисления.ПустаяСсылка)
	|	И КВП_ВводНачальногоСальдоЛицевыеСчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВводНачальногоСальдоЛицевыеСчета.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТЧ ИЗ ДокОбъект.ЛицевыеСчета Цикл
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
			Если СтрокаТЧ.Удалить_ВидНачисления = Перечисления.КВП_УдалитьВидыНачисления.Пени Тогда
				РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени;
			ИначеЕсли СтрокаТЧ.Удалить_ВидНачисления = Перечисления.КВП_УдалитьВидыНачисления.Льготы Тогда
				РазделУчета =  Перечисления.УПЖКХ_РазделыУчета.Льготы;
			КонецЕсли;
			СтрокаТЧ.РазделУчета = РазделУчета;
		КонецЦикла;
		
		ЗаписатьОбъект(ДокОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1()

// Процедура переносит настройки расчета по льготам из учетной политики ЖКХ
// в новый регистр сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8() Экспорт
	
	// Переносим только те настройки, которых еще нет в новом регистре.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖ.Период,
	|	КВП_УчетнаяПолитикаТСЖ.Организация,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьРасчетЛьготПоЗарегистрированным,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьОбъемОграниченияДелитьНаЛьготников,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьОбъемУслугиДелитьНаЛьготников
	|ПОМЕСТИТЬ врНастройкиУчетнойПолитики
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Период,
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Организация
	|ПОМЕСТИТЬ врСуществующиеНастройкиВНовомРегистре
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот КАК УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНастройкиУчетнойПолитики.Период,
	|	врНастройкиУчетнойПолитики.Организация,
	|	врНастройкиУчетнойПолитики.УдалитьРасчетЛьготПоЗарегистрированным,
	|	врНастройкиУчетнойПолитики.УдалитьОбъемОграниченияДелитьНаЛьготников,
	|	врНастройкиУчетнойПолитики.УдалитьОбъемУслугиДелитьНаЛьготников
	|ИЗ
	|	врНастройкиУчетнойПолитики КАК врНастройкиУчетнойПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСуществующиеНастройкиВНовомРегистре КАК врСуществующиеНастройкиВНовомРегистре
	|		ПО врНастройкиУчетнойПолитики.Период = врСуществующиеНастройкиВНовомРегистре.Период
	|			И врНастройкиУчетнойПолитики.Организация = врСуществующиеНастройкиВНовомРегистре.Организация
	|ГДЕ
	|	ЕСТЬNULL(врСуществующиеНастройкиВНовомРегистре.Период, ИСТИНА) = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		// Заполнение измерений.
		НоваяЗапись.Период      = Выборка.Период;
		НоваяЗапись.Организация = Выборка.Организация;
		
		// Настройки устанавливаются для пустой группы услуг, т.е. для сразу всех услуг.
		НоваяЗапись.ГруппаУслуг = ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка");
		
		// Заполнение настроек.
		НоваяЗапись.ЛьготуПредоставлятьЗарегистрированнымЖильцам                        = Выборка.УдалитьРасчетЛьготПоЗарегистрированным;
		НоваяЗапись.ОбъемУслугиДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы      = Выборка.УдалитьОбъемУслугиДелитьНаЛьготников;
		НоваяЗапись.ОбъемОграниченияДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы = Выборка.УдалитьОбъемОграниченияДелитьНаЛьготников;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8()

// Процедура устанавливает значение константы "Вариант изменения задолженности в корректировках начислений".
//
Процедура ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14() Экспорт
	
	// По умолчанию используется старый вариант "Расчетный период, за который произведена корректировка".
	ИсходноеЗначениеНастройки = Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Получить();
	Если Не ЗначениеЗаполнено(ИсходноеЗначениеНастройки) Тогда
		Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Установить(Перечисления.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.РасчетныйПериодЗаКоторыйПроизведенаКорректировка);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14()

// Процедура обрабатывает суммы перерасчета в табличной части документа "Корректировка начислений"
// с видом операции "Недопоставка", а именно устанавливает отрицательный знак суммы перерасчета.
//
Процедура ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14() Экспорт
	
	// Получаем строки документов "Корректировка начислений" с видом операции "Недопоставка".
	// Обходим найденные строки документов и устанавливаем в них противоположный знак суммы перерасчета,
	// тем самым приведя данный вид операции под стандарт:
	// - если сумма перерасчета положительная, то это доначисление;
	// - если сумма перерасчета отрицательная, то это уменьшение долга.
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "ПараметрОбновления_ОбработкаКорректировокНачисленийВыполнена_3_0_44_13";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаКорректировокНачисленийВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаКорректировокНачисленийВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_КорректировкаНачислений.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
	|ГДЕ
	|	КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	// Начало транзакции.
	НачатьТранзакцию();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаКорректировки Из ДокументОбъект.Корректировки Цикл
			СтрокаКорректировки.СуммаПерерасчета = (-1) * СтрокаКорректировки.СуммаПерерасчета;
		КонецЦикла;
		
		// Пересчет итоговой суммы документа.
		ДокументОбъект.СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ДокументОбъект, "Корректировки", "СуммаПерерасчета");
		
		// Запись документа в режиме обмена данными.
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Если Не ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			
			// Отмена транзакции при возникновении ошибки.
			ОтменитьТранзакцию();
			ВызватьИсключениеПриОбновлении("Обработчик обновления ""ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка"" не выполнен!");
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохранение результата обработки в параметрах обновления ИБ.
	ОбработкаКорректировокНачисленийВыполнена = Истина;
	СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработкаКорректировокНачисленийВыполнена);
	
	// Завершение транзакции.
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14()

// Процедура выполняет перепроведение документов поступления оплат (ПРС и ПКО), по которым
// ошибочно оказались отрицательные суммы в графах 4 и 5 регистра КУДиР. При этом выполняется
// перепроведение только тех поступлений, которые связаны с документами Регистрация оплаты через
// регистр сведений "Связи документов регистрации оплат и типовых документов отражения в регламентированном учете".
// 
Процедура ИсправитьОтрицательныеДвиженияПоКУДиРТиповымиДокументамиПоступленияОплат_3_0_44_14() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходов.Регистратор,
	|	КнигаУчетаДоходовИРасходов.Период
	|ПОМЕСТИТЬ ТаблицаРегистраНакопления
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	(КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет)
	|	И (КнигаУчетаДоходовИРасходов.Графа4 < 0
	|			ИЛИ КнигаУчетаДоходовИРасходов.Графа5 < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраНакопления.Регистратор
	|ИЗ
	|	ТаблицаРегистраНакопления КАК ТаблицаРегистраНакопления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете КАК УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете
	|		ПО (УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения = ТаблицаРегистраНакопления.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраНакопления.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обработку документов корректировки начислений с видом операции недопоставка
// и перерасчет по проценту. При добавлении возможности выбора произвольного периода для этих видов операции,
// исчезла необходимость в реквизите "ПериодКорректировки", поэтому для всех документов указанного вида, введенных до
// обновления, переносим значение реквизита "ПериодКорректировки" в реквизиты "ДатаНач" и "ДатаКон", а реквизиту
// присваиваем пустое значение.
Процедура ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1() Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_КорректировкаНачислений.Ссылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
	|ГДЕ
	|	(КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту)
	|			ИЛИ КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка))
	|	И НЕ КВП_КорректировкаНачислений.УдалитьПериодКорректировки = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_КорректировкаНачислений.Дата";
	
	КорректировкаНачисленийВыборка = Запрос.Выполнить().Выбрать();
	
	Пока КорректировкаНачисленийВыборка.Следующий() Цикл
		
		ДокументОбъект = КорректировкаНачисленийВыборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДатаНач = НачалоМесяца(ДокументОбъект.УдалитьПериодКорректировки);
		ДокументОбъект.ДатаКон = КонецМесяца(ДокументОбъект.УдалитьПериодКорректировки);
		ДокументОбъект.УдалитьПериодКорректировки = Дата(1,1,1);
		
		Если Не ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры //ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1()

// Процедура заполняет новый ресурс "Дата изменения" во всех записях
// регистра сведений "Назначенные льготы".
//
Процедура ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1() Экспорт
	
	Отказ = Ложь;
	
	// Получим все регистраторы, записи которых еще не были обработаны.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеЛьготы.Регистратор,
	|	КВП_НазначенныеЛьготы.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийПериод = НачалоДня(Выборка.Дата);
		
		НаборЗаписей = РегистрыСведений.КВП_НазначенныеЛьготы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписей Цикл
			СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
			СтрокаЗаписи.Период        = ТекущийПериод;
			
			ТекущийПериод = ТекущийПериод + 1;
		КонецЦикла;
		
		Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1()

// Процедура производит пересчет размера процентной ставки рассрочки для вида рассрочки "Рассрочка на плату за установку счетчика (№ 261-ФЗ)".
// По заявке З00016459 осуществлен переход на годовую процентную ставки рассрочки.
//
Процедура ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3() Экспорт
	
	ИмяПараметраОбновленияИБ = "ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ЗаявлениеНаРассрочку.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ЗаявлениеНаРассрочку КАК УПЖКХ_ЗаявлениеНаРассрочку
	|ГДЕ
	|	УПЖКХ_ЗаявлениеНаРассрочку.ВидРассрочки = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУстановкуСчетчика)
	|	И НЕ УПЖКХ_ЗаявлениеНаРассрочку.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаДокумент = Выборка.Ссылка;
		
		ОбъектДокумета = СсылкаНаДокумент.ПолучитьОбъект();
		
		ГодоваяПроцентнаяСтавка = ОбъектДокумета.ГодоваяПроцентнаяСтавка / 5; // 5 - количество лет рассрочки для вида рассрочки
																			  // "Рассрочка на плату за установку счетчика (№ 261-ФЗ)".
		
		ОбъектДокумета.ГодоваяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка;
		
		ЗаписатьОбъект(ОбъектДокумета);
		
		// Изменим значение процентной ставки рассрочки на годовую в движениях документа в регистр сведений "Сведения о рассрочке":
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОРассрочке.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент); // режим записи "Подчинение регистратору".
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НаборЗаписей Цикл
				ТекущаяСтрока.ГодоваяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка / 100;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
	// Сохраним параметр, измененный на значение ИСТИНА, для анализа повторных обновлений.
	ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = Истина;
	СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен);
	
КонецПроцедуры // ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3()

// Выполняет последовательный вызов процедур при переходе на версию 3.0.49.3.
//
Процедура ДействияПриОбновленииНа_3_0_49_3() Экспорт
	
	ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3();
	ВыполнитьПереносНастроекФормированияПлатежныхДокументовИОбменаДаннымиССайтомВНовыеСправочники_3_0_49_3();
	ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3();
	
КонецПроцедуры // ДействияПриОбновленииНа_3_0_49_3()

// Процедура заполняет реквизит "Вариант расчета основания нормы при отсутствии жильцов указанного вида"
// элементов справочника "Нормы потребления услуг".
//
Процедура ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3()
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка,
	|	КВП_НормыПотребленияУслуг.УдалитьПриОтсутствииСчитатьНаОдного КАК ПриОтсутствииСчитатьНаОдного
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НормыПотребленияУслугОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ПриОтсутствииСчитатьНаОдного Тогда
			НормыПотребленияУслугОбъект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
				Перечисления.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НаОдногоЧеловека;
		Иначе
			НормыПотребленияУслугОбъект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
				Перечисления.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НеОпределять;
		КонецЕсли;
		
		Если НЕ ЗаписатьОбъект(НормыПотребленияУслугОбъект) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3()

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕНОС НАСТРОЕК ФОРМИРОВАНИЯ ПД И ОБМЕНА С САЙТОМ В НОВЫЕ СПРАВОЧНИКИ

// Выполняет перенос настроек формирования квитанций и обмена данными с сайтом в новые справочники.
//
Процедура ВыполнитьПереносНастроекФормированияПлатежныхДокументовИОбменаДаннымиССайтомВНовыеСправочники_3_0_49_3()
	
	Если ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекФормированияКвитанций() Тогда
		
		ТаблицаВариантовНастроек = ПодготовитьТаблицуВариантовНастроек();
		
		// Группируем настройки.
		Если НЕ ТаблицаВариантовНастроек.Количество() = 0 Тогда
			
			ТаблицаРазличныхНастроек = ПолучитьТаблицуРазличныхНастроек(ТаблицаВариантовНастроек);
			
			// Заполняем справочник "Настройки формирования квитанций".
			НомерЭлемента = 1;
			МассивЭлементовСправочникаНастроекФормированияКвитанций = Новый Массив;
			
			Для каждого ТекСтрокаНастроек из ТаблицаРазличныхНастроек Цикл
				
				НовыйЭлементСправочника = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ТекСтрокаНастроек);
				
				НовыйЭлементСправочника.Наименование = "Настройка формирования квитанций №" + Строка(НомерЭлемента);
				НовыйЭлементСправочника.Комментарий  = ТекСтрокаНастроек.СписокПользователей;
				
				Если НЕ ТекСтрокаНастроек.УслугиБезОДН = Неопределено Тогда
					НовыйЭлементСправочника.УслугиБезОДН.Загрузить(ТекСтрокаНастроек.УслугиБезОДН);
				КонецЕсли;
				
				Если НЕ ТекСтрокаНастроек.ВыбранныеУслуги = Неопределено Тогда
					НовыйЭлементСправочника.ВыбранныеУслуги.Загрузить(ТекСтрокаНастроек.ВыбранныеУслуги);
				КонецЕсли;
				
				Если НЕ ТекСтрокаНастроек.УслугиПоТипам = Неопределено Тогда
					НовыйЭлементСправочника.УслугиПоТипам.Загрузить(ТекСтрокаНастроек.УслугиПоТипам);
				КонецЕсли;
				
				Если ПустаяСтрока(НовыйЭлементСправочника.ВариантУчетаКомиссииБанка) Тогда
					НовыйЭлементСправочника.ВариантУчетаКомиссииБанка = "Не учитывать";
				КонецЕсли;
				
				Если НовыйЭлементСправочника.РасчетнаяПлощадьЗдания = Неопределено Тогда
					НовыйЭлементСправочника.РасчетнаяПлощадьЗдания = Справочники.КВП_ТипыПлощадейЗдания.ПустаяСсылка();
				КонецЕсли;
				
				Если НовыйЭлементСправочника.РасчетнаяПлощадьПомещения = Неопределено Тогда
					НовыйЭлементСправочника.РасчетнаяПлощадьПомещения = Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка();
				КонецЕсли;
				
				Если ПустаяСтрока(НовыйЭлементСправочника.СпособПечатиКвитанцииКапРемонт) Тогда
					НовыйЭлементСправочника.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт";
				КонецЕсли;
				
				Если ТекСтрокаНастроек.ВыводитьОтрицательнуюСуммуКОплате = Неопределено Тогда
					НовыйЭлементСправочника.ВыводитьОтрицательнуюСуммуКОплате = Истина;
				КонецЕсли;
				
				ЗаписатьОбъект(НовыйЭлементСправочника);
				
				МассивЭлементовСправочникаНастроекФормированияКвитанций.Добавить(НовыйЭлементСправочника.Ссылка);
				
				НомерЭлемента = НомерЭлемента + 1;
				
			КонецЦикла;
			
			// Заполняем регистр "Порядок услуг".
			НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			ТаблицаПорядкаУслуг = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Для каждого ТекНастройка из МассивЭлементовСправочникаНастроекФормированияКвитанций Цикл
				
				Для каждого ТекСтрокаПорядка из ТаблицаПорядкаУслуг Цикл
					
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрокаПорядка);
					НоваяЗапись.НастройкаСбораДанных = ТекНастройка;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекОбменаССайтом() Тогда
		
		ТаблицаНастроекОбменаССайтом = ПолучитьВариантыНастроекОбменаССайтом();
		
		СформироватьЭлементыСправочникаНастроекОбменаССайтом(ТаблицаНастроекОбменаССайтом);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость выполнения переноса настроек формирования ПД в новый справочник.
// Если в справочнике уже есть элементы, то перенос не осуществляем.
//
Функция ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекФормированияКвитанций()
	
	// Проверяем наличие элементов справочника "НастройкаСбораДанных".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления";
	
	ТаблицаКоличества = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКоличества[0].КоличествоЭлементов = 0;
	
КонецФункции

// Проверяет необходимость выполнения переноса настроек обмена данными с сайтом в новый справочник.
// Если в справочнике уже есть элементы, то перенос не осуществляем.
//
Функция ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекОбменаССайтом()
	
	// Проверяем наличие элементов справочника "НастройкиОбменаДаннымиССайтомЖКХ".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ КАК УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.ПометкаУдаления";
	
	ТаблицаКоличества = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКоличества[0].КоличествоЭлементов = 0;
	
КонецФункции

// Получает все различающиеся варианты настроек обмена данными с сайтом.
//
Функция ПолучитьВариантыНастроекОбменаССайтом()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Ссылка КАК ВариантОбмена,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Код,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Наименование,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьЗагружатьПоказанияПУПоУслугам,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьЗагружатьПоказанияПУПоЗданиям
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом КАК УПЖКХ_ВариантыОбменаДаннымиССайтом
	|ГДЕ
	|	НЕ УПЖКХ_ВариантыОбменаДаннымиССайтом.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Ссылка КАК ВариантОбмена,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Услуга,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.ВыгружатьНачисления,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.ВыгружатьПоказания,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.НомерСтроки
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьТаблицаНастроекВыгрузкиУслуг КАК УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг
	|ГДЕ
	|	НЕ УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка КАК НастройкиСбораДанныхДляКвитанцийИОбменов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВариантовОбмена               = Результат[0].Выгрузить();
	ТаблицаНастроекВыгрузки              = Результат[1].Выгрузить();
	ТаблицаНастроекФормированияКвитанций = Результат[2].Выгрузить();
	
	ПолучитьТаблицуРазличныхНастроекОбменаССайтом(ТаблицаВариантовОбмена, ТаблицаНастроекВыгрузки);
	
	ТаблицаНастроекОбменаССайтом = СоздатьТаблицуНастроекОбменаССайтом();
	
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	Для каждого ТекВариантОбмена из ТаблицаВариантовОбмена Цикл
		
		НоваяСтрока = ТаблицаНастроекОбменаССайтом.Добавить();
		
		НоваяСтрока.ВариантыОбмена                = ТекВариантОбмена.ВариантыОбмена;
		НоваяСтрока.Наименование                  = ТекВариантОбмена.Наименование;
		НоваяСтрока.ЗагружатьПоказанияПУПоЗданиям = ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоЗданиям;
		НоваяСтрока.ЗагружатьПоказанияПУПоУслугам = ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоУслугам;
		
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг = Новый ТаблицаЗначений;
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("Услуга");
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("ВыгружатьНачисления", Новый ОписаниеТипов("Булево"));
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("ВыгружатьПоказания",  Новый ОписаниеТипов("Булево"));
		
		СтруктураОтбора.ВариантОбмена = ТекВариантОбмена.ВариантОбмена;
		
		СтрокиНастроекВыгрузки = ТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекСтрокаНастроекВыгрузки из СтрокиНастроекВыгрузки Цикл
			НоваяСтрокаНастроекВыгрузки = НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузки, ТекСтрокаНастроекВыгрузки);
		КонецЦикла;
		
		// Заполняем настройку формирования квитанций, только если в базе один элемент справочника "Настройки формирования квитанций".
		Если ТаблицаНастроекФормированияКвитанций.Количество() = 1 Тогда
			НоваяСтрока.НастройкаСбораДанных = ТаблицаНастроекФормированияКвитанций[0].НастройкиСбораДанныхДляКвитанцийИОбменов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНастроекОбменаССайтом;
	
КонецФункции

// Подготавливает таблицу настроек обмена с сайтом.
//
Функция СоздатьТаблицуНастроекОбменаССайтом()
	
	ТаблицаНастроекОбменаССайтом = Новый ТаблицаЗначений;
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("Наименование");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ЗагружатьПоказанияПУПоЗданиям");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ЗагружатьПоказанияПУПоУслугам");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("НастройкаСбораДанных");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ТаблицаНастроекВыгрузкиУслуг");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ВариантыОбмена");
	
	Возврат ТаблицаНастроекОбменаССайтом;
	
КонецФункции

// Формирует таблицу отличающихся вариантов настроек обмена с сайтом на основании всех
// имеющихся в базе вариантов.
//
Процедура ПолучитьТаблицуРазличныхНастроекОбменаССайтом(ТаблицаВариантовОбмена, ТаблицаНастроекВыгрузки)
	
	// Отбираем исходные данные в отдельные таблицы.
	ТаблицаВариантовОбменаДляОбработки  = ТаблицаВариантовОбмена.Скопировать(, "ВариантОбмена, Наименование, УдалитьЗагружатьПоказанияПУПоУслугам, УдалитьЗагружатьПоказанияПУПоЗданиям");
	ТаблицаНастроекВыгрузкиДляОбработки = ТаблицаНастроекВыгрузки.Скопировать(, "ВариантОбмена, Услуга, ВыгружатьНачисления, ВыгружатьПоказания");
	ТаблицаНастроекВыгрузкиДляОбработки.Сортировать("ВариантОбмена, Услуга, ВыгружатьНачисления, ВыгружатьПоказания");
	
	// Подготавливаем и заполняем таблицу, с помощью которой будем сравнивать настройки разных вариантов обмена.
	ТаблицаДляСравнения = Новый ТаблицаЗначений;
	ТаблицаДляСравнения.Колонки.Добавить("ВариантОбмена");
	ТаблицаДляСравнения.Колонки.Добавить("СтрокаСравнения");
	
	// Принцип сравнения состоит в следующем:
	//  Для каждого варианта обмена подготавливаем строки, содержащие набор значений реквизитов и всех полей
	//  всех строк табличных частей.
	//  Далее сворачиваем таблицу по полученным строкам и проверяем, какие варианты обмена им соответствуют.
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	// Получаем строки.
	Для каждого ТекВариантОбмена из ТаблицаВариантовОбменаДляОбработки Цикл
		
		ТекущаяСтрока = "";
		СтруктураОтбора.ВариантОбмена = ТекВариантОбмена.ВариантОбмена;
		
		СтрокиНастроекВыгрузки = ТаблицаНастроекВыгрузкиДляОбработки.НайтиСтроки(СтруктураОтбора);
		
		НоваяСтрока = ТаблицаДляСравнения.Добавить();
		
		ТекущаяСтрока = Строка(ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоУслугам) + Строка(ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоЗданиям);
		
		Для каждого ТекСтрокаНастроекВыгрузки из СтрокиНастроекВыгрузки Цикл
			ТекущаяСтрока = ТекущаяСтрока + Строка(ТекСтрокаНастроекВыгрузки.Услуга) + Строка(ТекСтрокаНастроекВыгрузки.ВыгружатьНачисления) + Строка(ТекСтрокаНастроекВыгрузки.ВыгружатьПоказания);
		КонецЦикла;
		
		НоваяСтрока.ВариантОбмена   = ТекВариантОбмена.ВариантОбмена;
		НоваяСтрока.СтрокаСравнения = ТекущаяСтрока;
		
	КонецЦикла;
	
	// Сворачиваем.
	ТаблицаСоответствияВариантовОбмена = ТаблицаДляСравнения.Скопировать(, "СтрокаСравнения");
	ТаблицаСоответствияВариантовОбмена.Свернуть("СтрокаСравнения");
	ТаблицаСоответствияВариантовОбмена.Колонки.Добавить("ВариантыОбмена");
	
	// Собираем данные о вариантах обмена для каждой уникальной строки.
	СтруктураОтбора = Новый Структура("СтрокаСравнения");
	
	Для каждого ТекСтрока из ТаблицаСоответствияВариантовОбмена Цикл
		
		ТекСтрока.ВариантыОбмена = Новый Массив;
		
		СтруктураОтбора.СтрокаСравнения = ТекСтрока.СтрокаСравнения;
		СтрокиСравнения = ТаблицаДляСравнения.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекВариантыОбмена из СтрокиСравнения Цикл
			
			ТекСтрока.ВариантыОбмена.Добавить(ТекВариантыОбмена.ВариантОбмена);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаСоответствияВариантовОбмена.Колонки.Удалить("СтрокаСравнения");
	
	// Удаляем строки с дублирующимися параметрами и добавляем одну с перечнем вариантов обмена.
	ТаблицаВариантовОбмена.Колонки.Добавить("ВариантыОбмена");
	ТаблицаНастроекВыгрузки.Колонки.Добавить("ВариантыОбмена");
	
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	СтрокиДляУдаленияОсновные          = Новый Массив;
	СтрокиДляУдаленияНастройкиВыгрузки = Новый Массив;
	
	Для каждого ТекСтрока из ТаблицаСоответствияВариантовОбмена Цикл
		
		НоваяСтрокаОсновная = ТаблицаВариантовОбмена.Добавить();
		
		Для каждого ТекВариантОбмена из ТекСтрока.ВариантыОбмена Цикл
			
			// Основные реквизиты.
			СтрокаВарианта = ТаблицаВариантовОбмена.Найти(ТекВариантОбмена, "ВариантОбмена");
			СтрокиДляУдаленияОсновные.Добавить(СтрокаВарианта);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОсновная, СтрокаВарианта);
			
			// Выбранные услуги.
			СтруктураОтбора.ВариантОбмена = ТекВариантОбмена;
			
			// Настройки выгрузки.
			СтрокиВариантаНастройкиВыгрузки = ТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураОтбора);
			
			Для каждого ТекСтрокаНастройкиВыгрузки из СтрокиВариантаНастройкиВыгрузки Цикл
				СтрокиДляУдаленияНастройкиВыгрузки.Добавить(ТекСтрокаНастройкиВыгрузки);
			КонецЦикла;
			
		КонецЦикла;
		
		// Основные реквизиты.
		НоваяСтрокаОсновная.ВариантыОбмена = ТекСтрока.ВариантыОбмена;
		
		// Настройки выгрузки.
		Для каждого ТекСтрока из СтрокиВариантаНастройкиВыгрузки Цикл
			НоваяСтрокаНастроекВыгрузки = ТаблицаНастроекВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузки, ТекСтрока);
			НоваяСтрокаНастроекВыгрузки.ВариантыОбмена = ТекСтрока.ВариантыОбмена;
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ТекСтрока из СтрокиДляУдаленияОсновные Цикл
		ТаблицаВариантовОбмена.Удалить(ТекСтрока);
	КонецЦикла;
	
	Для каждого ТекСтрока из СтрокиДляУдаленияНастройкиВыгрузки Цикл
		ТаблицаНастроекВыгрузки.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Формирует элементы справочника "Настройки обмена данными с сайтом" на основании таблицы
// различных вариантов настроек обмена данными с сайтом.
//
Процедура СформироватьЭлементыСправочникаНастроекОбменаССайтом(ТаблицаНастроекОбменаССайтом);
	
	НомерЭлементаСправочника = 1;
	
	Для каждого ТекСтрокаНастроек из ТаблицаНастроекОбменаССайтом Цикл
		
		НовыйЭлементСправочника = Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ТекСтрокаНастроек);
		НовыйЭлементСправочника.Наименование = "Настройка обмена с сайтом №" + Строка(НомерЭлементаСправочника);
		
		Для каждого ТекСтрокаНастройкиВыгрузкиУслуг из ТекСтрокаНастроек.ТаблицаНастроекВыгрузкиУслуг Цикл
			НоваяСтрокаНастроекВыгрузкиУслуг = НовыйЭлементСправочника.ТаблицаНастроекВыгрузкиУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузкиУслуг, ТекСтрокаНастройкиВыгрузкиУслуг);
		КонецЦикла;
		
		ЗаписатьОбъект(НовыйЭлементСправочника);
		
		// Ищем элемент справочника "Варианты обмена данными с сайтом" и заполняем настройку обмена.
		Для каждого ТекВариантОбмена из ТекСтрокаНастроек.ВариантыОбмена Цикл
			ТекВариантОбменаОбъект = ТекВариантОбмена.ПолучитьОбъект();
			ТекВариантОбменаОбъект.НастройкаОбмена = НовыйЭлементСправочника.Ссылка;
			ЗаписатьОбъект(ТекВариантОбменаОбъект);
		КонецЦикла;
		
		НомерЭлементаСправочника = НомерЭлементаСправочника + 1;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу настроек формирования ПД всех имеющихся в базе пользователей на основании
// хранилища общих настроек.
//
Функция ПодготовитьТаблицуВариантовНастроек()
	
	ТаблицаПользователей     = ПолучитьТаблицуПользователей();
	ТаблицаВариантовНастроек = СоздатьТаблицуВариантовНастроек();
	
	ЗаполнитьТаблицуВариантовНастроек(ТаблицаВариантовНастроек, ТаблицаПользователей);
	ДополнитьТаблицуВариантовНастроекНомерамиНаборовТаблиц(ТаблицаВариантовНастроек);
	
	Возврат ТаблицаВариантовНастроек;
	
КонецФункции

// Формирует таблицу имеющихся в базе пользователей.
//
Функция ПолучитьТаблицуПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Подготавливает пустую таблицу вариантов настроек ПД.
//
Функция СоздатьТаблицуВариантовНастроек()
	
	ТаблицаВариантовНастроек = Новый ТаблицаЗначений;
	ТаблицаВариантовНастроек.Колонки.Добавить("ВключениеНачальнойЗадолженности");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВариантСортировки");
	ТаблицаВариантовНастроек.Колонки.Добавить("ИсполнительРасчетов");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиИсполнителя");
	ТаблицаВариантовНастроек.Колонки.Добавить("СтрокаУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьШК");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьНачальноеСальдо");
	ТаблицаВариантовНастроек.Колонки.Добавить("НеПечататьНулевыеКвитанции");
	ТаблицаВариантовНастроек.Колонки.Добавить("УчитыватьПени");
	ТаблицаВариантовНастроек.Колонки.Добавить("СпособПечатиКвитанцииПоПеням");
	ТаблицаВариантовНастроек.Колонки.Добавить("ДвустороняяПечать");
	ТаблицаВариантовНастроек.Колонки.Добавить("ДвустороняяПечатьВыводитьОтступ");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьИндРасходДляВсехУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыборУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("РазделятьУслугиПоТипам");
	ТаблицаВариантовНастроек.Колонки.Добавить("УчетОплат");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВариантУчетаКомиссииБанка");
	ТаблицаВариантовНастроек.Колонки.Добавить("КомиссияБанка");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьРасчетнуюПлощадь");
	ТаблицаВариантовНастроек.Колонки.Добавить("РасчетнаяПлощадьПомещения");
	ТаблицаВариантовНастроек.Колонки.Добавить("РасчетнаяПлощадьЗдания");
	ТаблицаВариантовНастроек.Колонки.Добавить("НеВыводитьПоказанияПоПУ");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВсегдаВыводитьДополнительныеОбласти");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьОтрывнойКорешок");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьОтрывнойКорешокВнизу");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьОтрицательнуюСуммуКОплате");
	ТаблицаВариантовНастроек.Колонки.Добавить("СпособПечатиКвитанцииКапРемонт");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьКвитанциюКапРемонт");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВключатьОплатыВНачальноеСальдо");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьОбъемыРасхождения");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиБезОДН");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыбранныеУслуги");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиПоТипам");
	ТаблицаВариантовНастроек.Колонки.Добавить("Пользователь");
	ТаблицаВариантовНастроек.Колонки.Добавить("НомерНабораТаблиц");
	
	Возврат ТаблицаВариантовНастроек;
	
КонецФункции

// Заполняет таблицу вариантов настроек формирования ПД настройками каждого пользователя.
//
Процедура ЗаполнитьТаблицуВариантовНастроек(ТаблицаВариантовНастроек, ТаблицаПользователей)
	
	Для каждого ТекСтрока из ТаблицаПользователей Цикл
		
		СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("Отчет.УПЖКХ_ПлатежныйДокумент",, ТекСтрока.Наименование);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			НоваяСтрока = ТаблицаВариантовНастроек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
			
			НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу вариантов настройки ПД номерами наборов таблиц, хранящихся в данных настройках.
// Так как провести сравнение 2-х таблиц невозможно, переводим данные таблиц в строки и сравниваем
// эти строки.
//
// При этом под набором понимается каждый уникальный вариант заполнения таблиц.
// Т.е., если для разных настроек ПД все таблицы совпадают, то у них будет одинаковый номер набора.
// В противном случае номера наборов будут разными.
//
Процедура ДополнитьТаблицуВариантовНастроекНомерамиНаборовТаблиц(ТаблицаВариантовНастроек)
	
	// Устанавливаем номера наборов таблиц, имеющихся в настройках.
	ТекНомерНабора = 1;
	ПервыйОбход = Истина;
	
	Для каждого ТекСтрокаТекущегоНабора из ТаблицаВариантовНастроек Цикл
		
		Если ПервыйОбход Тогда
			
			ТекСтрокаТекущегоНабора.НомерНабораТаблиц = ТекНомерНабора;
			ПервыйОбход = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ТекСтрокаТекущегоНабора.НомерНабораТаблиц = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекСтрокаНаборов из ТаблицаВариантовНастроек Цикл
			
			Если НЕ ТекСтрокаНаборов.НомерНабораТаблиц = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Тут выполняем сравнение таблиц.
			Если СравнитьТаблицы(ТекСтрокаТекущегоНабора.УслугиБезОДН, ТекСтрокаНаборов.УслугиБезОДН)
				И СравнитьТаблицы(ТекСтрокаТекущегоНабора.ВыбранныеУслуги, ТекСтрокаНаборов.ВыбранныеУслуги)
				И СравнитьТаблицы(ТекСтрокаТекущегоНабора.УслугиПоТипам, ТекСтрокаНаборов.УслугиПоТипам) Тогда
				
				ТекСтрокаНаборов.НомерНабораТаблиц = ТекНомерНабора;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекНомерНабора = ТекНомерНабора + 1;
		
	КонецЦикла
	
КонецПроцедуры

// Подготавливаем строку со списком данных, хранящихся в настройках ПД.
//
Функция ПолучитьСписокХранимыхНастроек()
	
	Возврат "ВключениеНачальнойЗадолженности, ВариантСортировки,
			|ИсполнительРасчетов, УслугиИсполнителя, СтрокаУслуг, ВыводитьШК,
			|ВыводитьНачальноеСальдо, НеПечататьНулевыеКвитанции,
			|УчитыватьПени, СпособПечатиКвитанцииПоПеням, ДвустороняяПечать,
			|ДвустороняяПечатьВыводитьОтступ, ВыводитьИндРасходДляВсехУслуг,
			|ВыборУслуг, РазделятьУслугиПоТипам, УчетОплат, ВариантУчетаКомиссииБанка,
			|КомиссияБанка, ВыводитьРасчетнуюПлощадь, РасчетнаяПлощадьПомещения,
			|РасчетнаяПлощадьЗдания, НеВыводитьПоказанияПоПУ,
			|ВсегдаВыводитьДополнительныеОбласти, ПечататьОтрывнойКорешок,
			|ПечататьОтрывнойКорешокВнизу, ВыводитьОтрицательнуюСуммуКОплате,
			|СпособПечатиКвитанцииКапРемонт, ПечататьКвитанциюКапРемонт, НомерНабораТаблиц,
			|ВключатьОплатыВНачальноеСальдо, ВыводитьОбъемыРасхождения";
	
КонецФункции

// Получаем таблицу отличающихся настроек ПД.
//
Функция ПолучитьТаблицуРазличныхНастроек(ТаблицаВариантовНастроек)
	
	СписокХранимыхНастроек = ПолучитьСписокХранимыхНастроек();
	
	// Получаем различные наборы настроек.
	ТаблицаРазличныхНастроек = ТаблицаВариантовНастроек.Скопировать(, СписокХранимыхНастроек);
	ТаблицаРазличныхНастроек.Свернуть(СписокХранимыхНастроек);
	
	// Подготавливаем структуру для отбора.
	СтруктураОтбора = Новый Структура(СписокХранимыхНастроек);
	
	// Добавляем колонку для списка пользователей.
	ТаблицаРазличныхНастроек.Колонки.Добавить("Пользователи");
	ТаблицаРазличныхНастроек.Колонки.Добавить("СписокПользователей");
	ТаблицаРазличныхНастроек.Колонки.Добавить("УслугиБезОДН");
	ТаблицаРазличныхНастроек.Колонки.Добавить("ВыбранныеУслуги");
	ТаблицаРазличныхНастроек.Колонки.Добавить("УслугиПоТипам");
	
	// Заполняем колонку "Пользователи".
	Для каждого ТекСтрокаНастроек из ТаблицаРазличныхНастроек Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрокаНастроек);
		
		НайденныеСтрокиПользователей = ТаблицаВариантовНастроек.НайтиСтроки(СтруктураОтбора);
		
		ТекСтрокаНастроек.УслугиБезОДН    = НайденныеСтрокиПользователей[0].УслугиБезОДН;
		ТекСтрокаНастроек.ВыбранныеУслуги = НайденныеСтрокиПользователей[0].ВыбранныеУслуги;
		ТекСтрокаНастроек.УслугиПоТипам   = НайденныеСтрокиПользователей[0].УслугиПоТипам;
		
		ТекСтрокаНастроек.Пользователи = Новый Массив;
		СписокПользователей = "";
		
		Для каждого ТекПользователь из НайденныеСтрокиПользователей Цикл
			
			ТекСтрокаНастроек.Пользователи.Добавить(ТекПользователь.Пользователь);
			СписокПользователей = СписокПользователей + ТекПользователь.Пользователь.Наименование + ", ";
			
		КонецЦикла;
		
		ТекСтрокаНастроек.СписокПользователей = Лев(СписокПользователей, СтрДлина(СписокПользователей) - 2);
		
	КонецЦикла;
	
	Возврат ТаблицаРазличныхНастроек;
	
КонецФункции

// Проводит сравнение 2-х таблиц.
//
Функция СравнитьТаблицы(Таблица1, Таблица2)
	
	Если ТипЗнч(Таблица1) = Тип("ТаблицаЗначений") И ТипЗнч(Таблица2) = Тип("ТаблицаЗначений") Тогда
		
		Если НЕ Таблица1.Количество() = Таблица2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Получаем список колонок первой таблицы (считаем, что колонки идентичны).
		// Это нужно для структуры отбора.
		СписокКолонок1 = "";
		
		Для каждого ТекКолонка из Таблица1.Колонки Цикл
			
			СписокКолонок1 = СписокКолонок1 + ТекКолонка.Имя + ", ";
			
		КонецЦикла;
		
		СписокКолонок1 = Лев(СписокКолонок1, СтрДлина(СписокКолонок1) - 2);
		
		// Получаем список колонок второй таблицы.
		СписокКолонок2 = "";
		
		Для каждого ТекКолонка из Таблица2.Колонки Цикл
			
			СписокКолонок2 = СписокКолонок2 + ТекКолонка.Имя + ", ";
			
		КонецЦикла;
		
		СписокКолонок2 = Лев(СписокКолонок2, СтрДлина(СписокКолонок2) - 2);
		
		// Проверяем идентичность состава колонок.
		Если НЕ СписокКолонок1 = СписокКолонок2 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Выполняем поиск строк 1-й таблицы во 2-й таблице.
		// Всегда должна быть найдена только 1 строка, в противном случае считаем,
		// что таблицы не совпадают.
		СтруктураОтбора = Новый Структура(СписокКолонок1);
		
		Для каждого ТекСтрока из Таблица1 Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрока);
			
			СтрокиВТаблице2 = Таблица2.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ СтрокиВТаблице2.Количество() = 1 Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Если Таблица1 = Неопределено И Таблица2 = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет перенос значений измерений типовых регистров из помеченных на удаление в добавленные корректные.
//
Процедура ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3()
	
	Отказ = Ложь;
	
	// Регистр сведений "Двоичные данные файлов", измерение "Файл".
	НаборДанных = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
	НаборДанных.Прочитать();
	
	Для Каждого ТекЗапись Из НаборДанных Цикл
		Если Не ЗначениеЗаполнено(ТекЗапись.Файл) Тогда
			ТекЗапись.Файл = ТекЗапись.УдалитьПрисоединенныйФайл;
		КонецЕсли;
	КонецЦикла;
	
	Если Не КВП_ЗаписатьОбъект(НаборДанных, Истина) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Регистр накопления "ПособияПоУходуЗаРебенком", измерение "ФизическоеЛицо".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПособияПоУходуЗаРебенком.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПособияПоУходуЗаРебенком КАК ПособияПоУходуЗаРебенком
	|ГДЕ
	|	НЕ ПособияПоУходуЗаРебенком.УдалитьФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			И ПособияПоУходуЗаРебенком.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ПособияПоУходуЗаРебенком.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(ТекЗапись.ФизическоеЛицо) Тогда
				ТекЗапись.ФизическоеЛицо = ТекЗапись.УдалитьФизическоеЛицо;
			КонецЕсли;
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей, Истина) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ВыполнитьПереносРеквизитовОбъектовТиповойБП"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3()

// Процедура перезаполняет новый реквизит "ДоляСобственности" табличной части "Собственники" документа
// "Установка собственников помещений". Данный реквизит хранит значения только информативно.
// Ранее реквизит "ДоляСобственности" был в таблице формы документа и при пометке на удаление документа значения
// данной колонки очищались.
// По заявке З00018461.
//
Процедура ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_УстановкаСобственниковПомещений.Собственники КАК УПЖКХ_УстановкаСобственниковПомещенийСобственники
	|ГДЕ
	|	НЕ УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка.ПометкаУдаления
	|	И УПЖКХ_УстановкаСобственниковПомещенийСобственники.ДоляСобственности = """"
	|	И УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка.НесколькоСобственников = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
		
		Собственники = ОбъектДокумента.Собственники;
		
		Для Каждого ТекущаяСтрока Из Собственники Цикл
			ТекущаяСтрока.ДоляСобственности = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
												ТекущаяСтрока.ДоляСобственникаЧислитель, ТекущаяСтрока.ДоляСобственникаЗнаменатель);
		КонецЦикла;
		
		ЗаписатьОбъект(ОбъектДокумента);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6()

// Процедура заполняет новый регистр сведений "Типы помещений для распределения расхода коллективных приборов учета".
//
Процедура ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6() Экспорт
	
	Отказ = Ложь;
	
	// Определим массив типов помещений, используемых ранее по умолчанию.
	МассивТиповПомещений = Новый Массив;
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Квартира);
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Офис);
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ТипыПомещенийДляРаспределенияРасходаКПУ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Для Каждого ТипПомещения Из МассивТиповПомещений Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТипПомещения = ТипПомещения;
			
		КонецЦикла;
			
		Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6()

// Процедура заполняет значения настроек отбора квитанций значениями по умолчанию.
// По заявке З00015623 реализована возможность указывать отбор квитанций, которые будут выведены на печать.
//
Процедура ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления
	|	И УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ОтборКвитанций = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ЗначенияОтбораКвитанций.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОбъектСправочника.УдалитьНеПечататьНулевыеКвитанции Тогда
			ОбъектСправочника.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.НеПечататьНулевыеКвитанции;
		Иначе
			ОбъектСправочника.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции;
		КонецЕсли;
		
		// Устанавливаем значения границ отбора по умолчанию в значение 0, так как данный реквизит справочника "УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов"
		// имеет составной тип для того, чтобы в полях границ отбора на форме была возможность выводить дополнительный информационный текст.
		// А так как тип составной, то данные значения в необработанных элементах справочника "УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов" равны "Неопределено".
		
		ОбъектСправочника.ГраницаОтбораИтоговойСуммыОт = 0;
		ОбъектСправочника.ГраницаОтбораИтоговойСуммыДо = 0;
		
		ЗаписатьОбъект(ОбъектСправочника);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7

// Ранее закрытие периода отражало зачет долгов и переплат с видом начисления «Оплата»,
// теперь используется вид начисления «Зачет долгов и переплат».
// Обработчик производит замену вида начисления «Оплата» на «Зачет долгов и переплат»
// для существующих документов закрытия периода по начислениям ЖКХ.
Процедура ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7() Экспорт
	
	Отказ = Ложь;
	
	// Получим список регистраторов типа "Закрытие периода по начислениям ЖКХ", для которых
	// при движении в регистре начислений указан вид начисления "Оплата".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Для полученных документов перезапишем движения, установив вид начисления
	// "Зачет долгов и переплат" вместо "Оплата".
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		// Изменим вид начисления с "Оплаты" на новый "ЗачетДолговИПереплат".
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Оплата Тогда
				Запись.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат;
			КонецЕсли; 
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение нового реквизита "Вариант распределения" документа "Ввод фактических затрат на объект"
// и нового реквизита табличной части "Тариф".
//
Процедура ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2() Экспорт
	
	Отказ = Ложь;
	
	// Для всех документов ввода затрат установим вариант распределения "По объему и сумме".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВводФактическихЗатратНаОбъект.Ссылка
	|ИЗ
	|	Документ.КВП_ВводФактическихЗатратНаОбъект КАК КВП_ВводФактическихЗатратНаОбъект
	|ГДЕ
	|	КВП_ВводФактическихЗатратНаОбъект.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПустаяСсылка)
	|";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме");
		
		Для Каждого ТекСтрока Из ДокументОбъект.ТаблицаРаспределения Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
				ТекСтрока.Тариф = ТекСтрока.Сумма / ТекСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2()

// Процедура заполняет реквизит "ОтветственныйСобственникПредставление" элементов справочника "ЛицевыеСчета".
//
Процедура ЗаполнитьПредставлениеОтветственногоСобственникаВЭлементахСправочникаЛицевыеСчета_3_0_50_2(Параметры = Неопределено) Экспорт
	
	Отказ = Ложь;
	УПЖКХ_ОбщегоНазначенияСервер.ЗаполнитьПредставленияОтветственныхСобственниковЛС(,, Отказ);
	
	Параметры.Вставить("ОбработкаЗавершена", Не Отказ);
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Отложенный обработчик ""ЗаполнитьПредставлениеОтветственногоСобственникаВЭлементахСправочникаЛицевыеСчета_3_0_50_2"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПредставлениеОтветственногоСобственникаВЭлементахСправочникаЛицевыеСчета_3_0_50_2()

// Процедура заполняет пустые значения настройки "Вариант настройки формата реестра" в справочнике
// "Настройки загрузки/выгрузки" для Загрузки показаний приборов учета значением по умолчанию "Вручную".
//
// По заявке № З00015910 реализована возможность загружать сведения о показаниях
// приборов учета по формату «Вариант 8» файла «Выгрузки в Систему Город».
// Для этого на форму справочника «Настройки загрузки/выгрузки» добавлены поля:
// 1. «Вариант настройки формата реестра» - указывается вариант, каким образом задавать состав параметров файла
//    реестра показаний. Поле доступно для Вида загрузки/выгрузки «Загрузка из систем сбора показаний приборов учета».
//    Доступны значения:
//  1.1. «Вручную» - выбор данного значения настройки "Вариант настройки формата реестра" указывает на то,
//       что используется фиксированный порядок значений параметров "Прибор учета" в каждой строке реестра показаний.
//       Например: в каждой строке реестра показаний на позиции ("Номер колонки") равной 10 хранится только дневное
//       показание текущего Прибора учета 1. Механизм загрузки сведений о показаниях приборов учета используется
//       типовой («как и раньше»).
//  1.2. «По шаблону» - выбор данного значения настройки "Вариант настройки формата реестра" указывает на то,
//       что в качестве формата реестра показаний используется определенный формат файла со сведениями о
//       показаниях приборов учета. Например, формат реестра показаний соответствует формату выгрузки "Вариант 8"
//       в обработке «Выгрузка в Систему Город». Используется новый механизм загрузки сведений о показаниях
//       приборов учета.
// 2. «Шаблон реестра показаний приборов учета» - указывается шаблон файла реестра показаний приборов учета.
//    Поле доступно для Варианта настройки формата реестра «По шаблону».
//
Процедура ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	НЕ КВП_НастройкиЗагрузкиВыгрузки.ПометкаУдаления
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную;
		
		ЗаписатьОбъект(ОбъектСправочника);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2()

// Процедура изменяет реквизит "ЭтоЖилойФонд" справочника "УПЖКХ_ВидыПомещений" по следующему алгоритму:
// в запросе получить виды помещений, для которых тип помещения определен как "дом" или "квартира" и
// реквизит "ЭтоЖилойФонд" в значении Ложь, далее для найденных видов помещений в справочнике
// "УПЖКХ_ВидыПомещений" значение реквизита "ЭтоЖилойФонд" меняется на Истина.
Процедура ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3() Экспорт
	
	// Изначально жилыми типами являлись "Дом" и "Квартира". Из справочника "ВидыПомещений" будем выбирать
	// только виды, соответствующие этим типам. Признак жилого фонда в них будет установлен в Истину.
	МассивТиповПомещений = Новый Массив;
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Дом);
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Квартира);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ТипПомещения В(&МассивТиповПомещений)
	|	И НЕ УПЖКХ_ВидыПомещений.ЭтоЖилойФонд";
	
	Запрос.УстановитьПараметр("МассивТиповПомещений", МассивТиповПомещений);
	
	ВыборкаПомещений = Запрос.Выполнить().Выбрать();
	// Обход результатов запроса и запись значений Истина в реквизит "ЭтоЖилойФонд" для полученных
	// в запросе видов помещений.
	Пока ВыборкаПомещений.Следующий() Цикл
		
		СправочникОбъект = ВыборкаПомещений.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ЭтоЖилойФонд = Истина;
		
		Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
			ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3"" не выполнен!");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3()

// Процедура проверяет, имеются ли начисления по нескольким договорам по одному л/с в месяце начисления.
//
Процедура ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6() Экспорт
	
	// Чтобы выявить клиентов, у которых есть изменения договоров в середине месяца начисления, 
	// проверяем данные по начислениям в разрезе договоров. 
	// Если есть начисления по л/с (корректировки и пр. движения не берем во внимание) с несколькими договорами 
	// в месяце начисления, то сообщаем пользователю, чтобы связался с нами для обсуждения данной ситуации.
	// В ближайших релизах планируется "избавление" от договоров в документах начисления услуг.
	// Актуальные договоры будут получаться на этапе отражения начислений в регл.учете.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация
	|ПОМЕСТИТЬ ВрОрганизацииГдеВыполняетсяОтражение
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Дата, ) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|ГДЕ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.ОтражатьНачисленияВРеглУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Начисления.Договор) КАК КоличествоДоговоров
	|ПОМЕСТИТЬ ВрРазличныеДоговоры
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Организация В
	|					(ВЫБРАТЬ
	|						ОрганизацииГдеВыполняетсяОтражение.Организация
	|					ИЗ
	|						ВрОрганизацииГдеВыполняетсяОтражение КАК ОрганизацииГдеВыполняетсяОтражение)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))) КАК УПЖКХ_Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрРазличныеДоговоры.Организация,
	|	ВрРазличныеДоговоры.ЛицевойСчет,
	|	ВрРазличныеДоговоры.МесяцНачисления
	|ИЗ
	|	ВрРазличныеДоговоры КАК ВрРазличныеДоговоры
	|ГДЕ
	|	ВрРазличныеДоговоры.КоличествоДоговоров > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстПредупреждения = "Внимание!
							  |В следующих версиях программы мы планируем исправить некоторые проблемы учета договоров
							  |взаиморасчетов по л/с, возникающие при отражении начислений в регламентированном учете.
							  |
							  |При этом в механизм учета договоров для взаиморасчетов по л/с будут добавлены следующие ограничения:
							  |1. Изменение договора для взаиморасчетов по л/с в середине месяца начисления не будет
							  |учитываться при расчете услуг, а отражение начислений будет производиться по договору,
							  |установленному на начало месяца начисления.
							  |2. Ручное изменение договора для взаиморасчетов по л/с в документах начисления услуг станет недоступным.
							  |
							  |Если описанные ограничения не позволят Вам вести корректный учет начислений,
							  |то просим обратиться на линию технической поддержки разработчика программы,
							  |а мы постараемся учесть Ваши пожелания:" + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6()

// Процедура проверяет, выбран ли в Настройках формирования платежного документа дополнительный реквизит 
// "Сумма начисления пени с учетом нач.сальдо пени, в копейках [addAmount]". Если такая настройка найдена, то выводится пользователю 
// предупреждающее сообщение.
// В следующих версиях программы планируется отказаться от данного дополнительного реквизита.
//
Процедура ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоОсн,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоКР
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмеетсяПроверяемыйРеквизит = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		// Проверяем в настройках по основным услугам.
		НастрокиПоОснУслугам = Выборка.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
		Если ТипЗнч(НастрокиПоОснУслугам) = Тип("СписокЗначений") Тогда
			НайденноеЗначение          = НастрокиПоОснУслугам.НайтиПоЗначению("addAmount1");
			ИмеетсяПроверяемыйРеквизит = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
		КонецЕсли;
		
		// Проверяем в настройках по услугам кап.ремонта.
		Если НЕ ИмеетсяПроверяемыйРеквизит Тогда
			НастрокиПоУслугамКР = Выборка.ДополнительныеРеквизитыQRКодаПоКР.Получить();
			Если ТипЗнч(НастрокиПоУслугамКР) = Тип("СписокЗначений") Тогда
				НайденноеЗначение          = НастрокиПоУслугамКР.НайтиПоЗначению("addAmount1");
				ИмеетсяПроверяемыйРеквизит = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмеетсяПроверяемыйРеквизит Тогда
		
		ТекстПредупреждения = "Внимание!
							  |В следующих версиях программы мы планируем отказаться от дополнительного реквизита ""Сумма начисления пени с
							  |учетом нач.сальдо пени, в копейках [addAmount]"", который Вы используете для формирования двумерного штрихкода.
							  |Если и в дальнейшем планируете его использовать, свяжитесь с нами:" + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1()

// Процедура заполняет новый ресурс "Вид жильцов, которым предоставляются льготы" во всех записях
// регистра сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2() Экспорт
	
	Отказ = Ложь;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВидЖильцовКоторымПредоставляютсяЛьготы) Тогда
			Запись.ВидЖильцовКоторымПредоставляютсяЛьготы = ?(Запись.УдалитьЛьготуПредоставлятьЗарегистрированнымЖильцам,
																		Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные,
																		Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2()

// Процедура проверяет, имеется ли в базе данных хотя бы один жилец с установленным флагом 
// "Владелец (наниматель) единственного жилья". Если жильцы с установленным флагом найдены, 
// то устанавливает значение константы "УПЖКХ_ИспользоватьФункционалВЕЖ" в значение ИСТИНА.
// 
Процедура ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2() Экспорт
	
	Если НЕ Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(, ) КАК КВП_СведенияОЖильцахСрезПоследних
		|ГДЕ
		|	КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КВП_НормыПотребленияУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
		|ГДЕ
		|	НЕ КВП_НормыПотребленияУслуг.ПометкаУдаления
		|	И КВП_НормыПотребленияУслуг.ВидЖильцов = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.ВладельцыЕдинственногоЖилья)";
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаВЕЖей   = Результат[0].Выбрать();
		ВыборкаНормВЕЖ = Результат[1].Выбрать();
		
		Если ВыборкаВЕЖей.Следующий() Тогда
			Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Установить(Истина);
		КонецЕсли;
		
		Если ВыборкаНормВЕЖ.Следующий() Тогда
			ТекстПредупреждения = "Внимание!
								  |В следующих версиях программы мы планируем отказаться от использования вида жильцов 
								  |""Владелец единственного жилья"" при расчете норм потребления составных услуг с ограничением по норме. 
								  |Для расчета норм потребления в соответствии с Постановлением Правительства Москвы 
								  |№848-ПП от 13.12.2016 (при расчете начислений услуг по содержанию жилого помещения) 
								  |теперь используется новая настройка нормы ""Норма для владельцев (нанимателей) единственного жилья"".
								  |Если Вы и в дальнейшем планируете использовать указанный вид жильцов, свяжитесь с нами:
								  |Тел. для Москвы и Московской Области: + 7 (495) 777-25-43.
								  |Тел. для регионов: + 7 (836) 249-46-89.
								  |Иные контактные данные можете найти на сайте https://otr-soft.ru/contacts/.";
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					, , ТекстПредупреждения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2()

// Процедура заполняет значение постфикса для услуг содержания общего имущества
// в регистре сведений "Настройки формирования платежного документа".
//
Процедура ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2() Экспорт
	
	Отказ = Ложь;
	
	ИмяПараметраОбновленияИБ = "ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	
	Если ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Пройдем по всем организациям и для каждой заполним представление префикса как "для СОИ".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(ВЫРАЗИТЬ(УПЖКХ_НастройкиФормированияПлатежногоДокумента.ПредставлениеУслугСОИ КАК СТРОКА(1))) = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.ПредставлениеУслугСОИ = "для СОИ";
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		// Сохраним параметр, измененный на значение ИСТИНА, для анализа повторных обновлений.
		ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен);
	Иначе
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает настройки использования многопоточности по умолчанию.
//
Процедура УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2() Экспорт
	
	ИспользоватьМногопоточность = Ложь;
	КоличествоПотоков           = 1;
	
	// Получаем настройки многопоточности из настроек мастера начислений, если таковые имеются.
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ЗадачиСеансовМастераНачислений", "НастройкиПараметров");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ИспользоватьМногопоточность") Тогда
			ИспользоватьМногопоточность = СтруктураПараметров.ИспользоватьМногопоточность;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КоличествоПотоков") Тогда
			КоличествоПотоков = СтруктураПараметров.КоличествоПотоков;
		КонецЕсли;
		
	ИначеЕсли НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ИспользоватьМногопоточность = Истина;
		КоличествоПотоков           = 2;
		
		СтруктураИнформацииОПроцессоре = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьИнформациюОКоличествеЯдерИПотоковПроцессора();
		
		Если СтруктураИнформацииОПроцессоре.ВыполненоУспешно Тогда
			
			КоличествоЯдер = СтруктураИнформацииОПроцессоре.КоличествоЯдер;
			
			Если КоличествоЯдер > 1 Тогда
				КоличествоПотоков = КоличествоЯдер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Константы.УПЖКХ_ИспользоватьМногопоточность.Установить(ИспользоватьМногопоточность);
	Константы.УПЖКХ_КоличествоПотоковПриМногопоточнойОбработкеДанных.Установить(КоличествоПотоков);
	
КонецПроцедуры

// Установить максимальное количество количество л/с в файле обмена по умолчанию.
//
Процедура УстановитьМаксимальноеКоличествоЛСВФайлеОбменаПоУмолчанию_3_0_52_2() Экспорт
	
	Выборка = Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.КоличествоЛСВФайле = 5000;
		
		ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет значение дополнительного реквизита "Код услуги" QR-штрихкода по услугам капитального ремонта.
// По заявке З00018357 добавлена возможность указывать раздельно значение дополнительного реквизита "serviseName" ("Код услуги")
// в QR-штрихкоде в квитанциях по основным услугам и услугам капитального ремонта.
// Теперь на форме "Настроек формирования платежного документа":
//  1. Поле "Код услуги" на закладке "Настройки QR штрихкода" удалено.
//  2. Добавлено поле "Код услуги" для основных услуг на закладке "Доп. реквизитов QR ШК по основным услугам". 
//  3. Добавлено поле "Код услуги" для услуг капитального ремонта на закладке "Доп. реквизитов QR ШК по услугам капремонта".
// 
// Техническая информация:
//  1. Значение Кода услуги по основным услугам хранится в старом ресурсе "КодУслугиДляШтрихКода", который переименован в 
// "КодУслугиДляШтрихКодаПоОсн".
//  2. Добавлен новый ресурс "КодУслугиДляШтрихКодаПоКР" для хранения значения Кода услуги по услугам капитального ремонта.
// 
Процедура ЗаполнитьЗначенияДополнительногоРеквизитаQRШтрихкодаКодУслуги_3_0_52_3() Экспорт
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
		
		КодУслугиДляШтрихКода = ТекущаяЗапись.КодУслугиДляШтрихКодаПоОсн;
		
		Если ПустаяСтрока(КодУслугиДляШтрихКода) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеРеквизитыQRКодаПоКР = ТекущаяЗапись.ДополнительныеРеквизитыQRКодаПоКР.Получить();
		
		Если ТипЗнч(ДополнительныеРеквизитыQRКодаПоКР) = Тип("СписокЗначений")
		   И ДополнительныеРеквизитыQRКодаПоКР.НайтиПоЗначению("serviceName") <> Неопределено Тогда
			ТекущаяЗапись.КодУслугиДляШтрихКодаПоКР = КодУслугиДляШтрихКода;
			КВП_ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура отключает настройку "Разрешить печать чеков при оплате банковской картой".
// Теперь в документе "Регистрация оплаты" есть вид операции "Поступление с платежной карты".
// Данная настройка теперь не нужна.
//
Процедура ОтключитьНастройкуРазрешитьПечатьЧековПриОплатеБанковскойКартой_3_0_53_1() Экспорт
	
	// Пока просто сбрасываем настройку. В скором времени данная настройка будет удалена.
	Константы.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой.Установить(Ложь);
	
КонецПроцедуры

// Процедура заполняет регистр сведений "Приборы учета, выгруженные в ГИС ЖКХ" данными
// из регистра сведений "Лицевые счета, выгруженные в ГИС ЖКХ"
// (ранее он назывался "Объекты, выгруженные в ГИС ЖКХ"). Теперь данные по ПУ и ЛС,
// выгруженным в ГИС, хранятся в разных регистрах сведений.
//
// Для корректного выполнения обработчика требуется обновление на версию не позднее
// 3.0.65.3, т.к. в версии 3.0.65.4 был изменен тип измерения "Объект" регистра
// "УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ" с составного,
// включающего "СправочникСсылка.КВП_Счетчики", на "СправочникСсылка.КВП_ЛицевыеСчета".
// В противном случае, при реструктуризации ИБ данные регистра по этому измерению
// будут потеряны.
//
Процедура ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.Объект КАК Объект,
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.ДатаВыгрузки КАК ДатаВыгрузки,
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.ТипЛС КАК ТипЛС,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.Объект) = ТИП(Справочник.КВП_Счетчики)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ КАК УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоЛицевойСчет Тогда
			// Если значение измерения "ТипЛС" не заполнено, то установим его
			// значением по умолчанию "ЛС УО".
			Если НЕ ЗначениеЗаполнено(Выборка.ТипЛС) Тогда
				НаборЗаписейРегистраЛС = РегистрыСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
				НаборЗаписейРегистраЛС.Отбор.Объект.Установить(Выборка.Объект);
				НаборЗаписейРегистраЛС.Прочитать();
				Для Каждого ТекЗапись Из НаборЗаписейРегистраЛС Цикл
					ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
					ТекЗапись.ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСУО;
				КонецЦикла;
				КВП_ЗаписатьОбъект(НаборЗаписейРегистраЛС);
			КонецЕсли;
		Иначе
			НаборЗаписейРегистраПУ = РегистрыСведений.УПЖКХ_ПриборыУчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПУ.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписейРегистраПУ.Прочитать();
			
			Если НаборЗаписейРегистраПУ.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписейРегистраПУ.Добавить();
				НоваяЗапись.Объект       = Выборка.Объект;
				НоваяЗапись.ДатаВыгрузки = Выборка.ДатаВыгрузки;
			Иначе
				Для Каждого ТекЗапись Из НаборЗаписейРегистраПУ Цикл
					ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
				КонецЦикла;
			КонецЕсли;
			КВП_ЗаписатьОбъект(НаборЗаписейРегистраПУ);
			
			НаборЗаписейРегистраЛС = РегистрыСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
			НаборЗаписейРегистраЛС.Отбор.Объект.Установить(Выборка.Объект);
			КВП_ЗаписатьОбъект(НаборЗаписейРегистраЛС);
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2()

// Заполняет значение константы "Использовать функционал ТСЖ" на основе наличия документов блока ТСЖ.
Процедура ОпределитьИспользуетсяЛиФункционалУчетаТСЖ_3_0_53_2() Экспорт
	
	ЗначениеКонстанты = Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Получить();
	
	Если ЗначениеКонстанты = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВступлениеВТСЖ.Ссылка КАК ВступлениеВТСЖ
	|ИЗ
	|	Документ.КВП_ВступлениеВТСЖ КАК КВП_ВступлениеВТСЖ
	|ГДЕ
	|	НЕ КВП_ВступлениеВТСЖ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВыходИзТСЖ.Ссылка
	|ИЗ
	|	Документ.КВП_ВыходИзТСЖ КАК КВП_ВыходИзТСЖ
	|ГДЕ
	|	НЕ КВП_ВыходИзТСЖ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РасчетВзносов.Ссылка
	|ИЗ
	|	Документ.КВП_РасчетВзносов КАК КВП_РасчетВзносов
	|ГДЕ
	|	НЕ КВП_РасчетВзносов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СметаТСЖ.Ссылка
	|ИЗ
	|	Документ.КВП_СметаТСЖ КАК КВП_СметаТСЖ
	|ГДЕ
	|	НЕ КВП_СметаТСЖ.ПометкаУдаления";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса.Получить(0).Пустой() И РезультатЗапроса.Получить(1).Пустой() И РезультатЗапроса.Получить(2).Пустой() И РезультатЗапроса.Получить(3).Пустой() Тогда
		ФункционалИспользуется = Ложь;
	Иначе
		ФункционалИспользуется = Истина;
	КонецЕсли;
	
	Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Установить(ФункционалИспользуется);
	
КонецПроцедуры

// Выполняет перенос сведений о документах собственности из справочников "Жильцы" и "Лицевые счета"
// в регистр сведений "Собственники помещений" и соответствующие ему регистраторы.
Процедура ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов_3_0_53_2() Экспорт
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиДата КАК ДатаДокумента,
	|	УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиНомерДокумента КАК НомерДокумента,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
	|ПОМЕСТИТЬ СобстенностьИзЖильцов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	(НЕ УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НЕ УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиНомерДокумента = """")
	|	И НЕ УПЖКХ_Жильцы.СведенияОСобственностиПеренесены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.УдалитьДатаРегистрацииПраваСобственности КАК ДатаДокумента,
	|	КВП_ЛицевыеСчета.УдалитьНомерСвидетельстваРегистрацииПраваСобственности КАК НомерДокумента,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ СобственностьИзЛицевыхСчетов
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	(НЕ КВП_ЛицевыеСчета.УдалитьДатаРегистрацииПраваСобственности = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НЕ КВП_ЛицевыеСчета.УдалитьНомерСвидетельстваРегистрацииПраваСобственности = """")
	|	И НЕ КВП_ЛицевыеСчета.СведенияОСобственностиПеренесены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственностьИзЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	СобственностьИзЛицевыхСчетов.ДатаДокумента КАК ДатаДокумента,
	|	СобственностьИзЛицевыхСчетов.НомерДокумента КАК НомерДокумента,
	|	СобственностьИзЛицевыхСчетов.Помещение КАК Помещение
	|ПОМЕСТИТЬ ЖильцыИзЛицевыхСчетов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобственностьИзЛицевыхСчетов КАК СобственностьИзЛицевыхСчетов
	|		ПО УПЖКХ_Жильцы.Владелец = СобственностьИзЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобстенностьИзЖильцов.Жилец КАК Жилец,
	|	СобстенностьИзЖильцов.ФизЛицо КАК ФизЛицо,
	|	СобстенностьИзЖильцов.ДатаДокумента КАК ДатаДокумента,
	|	СобстенностьИзЖильцов.НомерДокумента КАК НомерДокумента,
	|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка) КАК ЛицевойСчет,
	|	СобстенностьИзЖильцов.Помещение КАК Помещение
	|ПОМЕСТИТЬ СведенияОСобственностиИзСправочников
	|ИЗ
	|	СобстенностьИзЖильцов КАК СобстенностьИзЖильцов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЖильцыИзЛицевыхСчетов.Жилец,
	|	ЖильцыИзЛицевыхСчетов.ФизЛицо,
	|	ЖильцыИзЛицевыхСчетов.ДатаДокумента,
	|	ЖильцыИзЛицевыхСчетов.НомерДокумента,
	|	ЖильцыИзЛицевыхСчетов.ЛицевойСчет,
	|	ЖильцыИзЛицевыхСчетов.Помещение
	|ИЗ
	|	ЖильцыИзЛицевыхСчетов КАК ЖильцыИзЛицевыхСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖильцыИзЛицевыхСчетов.Помещение,
	|	ЖильцыИзЛицевыхСчетов.ДатаДокумента,
	|	ЖильцыИзЛицевыхСчетов.ФизЛицо,
	|	ЖильцыИзЛицевыхСчетов.Жилец,
	|	ЖильцыИзЛицевыхСчетов.НомерДокумента,
	|	ЖильцыИзЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ СобственникиИзРегистра
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			,
	|			(Собственник, Помещение) В
	|					(ВЫБРАТЬ
	|						СведенияОСобственностиИзСправочников.ФизЛицо,
	|						СведенияОСобственностиИзСправочников.Помещение
	|					ИЗ
	|						СведенияОСобственностиИзСправочников КАК СведенияОСобственностиИзСправочников)
	|				И (НЕ ВидДокумента = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)
	|					ИЛИ НЕ НомерДокумента = """")
	|				И Действует) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСобственностиИзСправочников.Жилец КАК Жилец,
	|	СведенияОСобственностиИзСправочников.ЛицевойСчет КАК ЛицевойСчет,
	|	СведенияОСобственностиИзСправочников.ФизЛицо КАК ФизЛицо,
	|	СведенияОСобственностиИзСправочников.ДатаДокумента КАК ДатаДокумента,
	|	СведенияОСобственностиИзСправочников.НомерДокумента КАК НомерДокумента,
	|	СведенияОСобственностиИзСправочников.Помещение КАК Помещение
	|ПОМЕСТИТЬ СобственникиБезСведенийОДокументахВРегистре
	|ИЗ
	|	СведенияОСобственностиИзСправочников КАК СведенияОСобственностиИзСправочников
	|ГДЕ
	|	НЕ (СведенияОСобственностиИзСправочников.ФизЛицо, СведенияОСобственностиИзСправочников.Помещение) В
	|				(ВЫБРАТЬ
	|					СобственникиИзРегистра.Собственник,
	|					СобственникиИзРегистра.Помещение
	|				ИЗ
	|					СобственникиИзРегистра КАК СобственникиИзРегистра)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещений.Регистратор КАК Регистратор,
	|	УПЖКХ_СобственникиПомещений.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещений.Помещение КАК Помещение
	|ПОМЕСТИТЬ РегистраторыДляЗаполнения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|ГДЕ
	|	УПЖКХ_СобственникиПомещений.ВидДокумента = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)
	|	И УПЖКХ_СобственникиПомещений.НомерДокумента = """"
	|	И (УПЖКХ_СобственникиПомещений.Собственник, УПЖКХ_СобственникиПомещений.Помещение) В
	|			(ВЫБРАТЬ
	|				СобственникиБезСведенийОДокументахВРегистре.ФизЛицо,
	|				СобственникиБезСведенийОДокументахВРегистре.Помещение
	|			ИЗ
	|				СобственникиБезСведенийОДокументахВРегистре КАК СобственникиБезСведенийОДокументахВРегистре)
	|	И УПЖКХ_СобственникиПомещений.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторыДляЗаполнения.Регистратор КАК Регистратор,
	|	РегистраторыДляЗаполнения.Собственник КАК Собственник,
	|	РегистраторыДляЗаполнения.Помещение КАК Помещение,
	|	СобственникиБезСведенийОДокументахВРегистре.ЛицевойСчет КАК ЛицевойСчет,
	|	СобственникиБезСведенийОДокументахВРегистре.Жилец КАК Жилец,
	|	СобственникиБезСведенийОДокументахВРегистре.ДатаДокумента КАК ДатаДокумента,
	|	СобственникиБезСведенийОДокументахВРегистре.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	СобственникиБезСведенийОДокументахВРегистре КАК СобственникиБезСведенийОДокументахВРегистре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыДляЗаполнения КАК РегистраторыДляЗаполнения
	|		ПО СобственникиБезСведенийОДокументахВРегистре.ФизЛицо = РегистраторыДляЗаполнения.Собственник
	|			И СобственникиБезСведенийОДокументахВРегистре.Помещение = РегистраторыДляЗаполнения.Помещение
	|ИТОГИ ПО
	|	Регистратор";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаРегистратора Из Дерево.Строки Цикл
		Если ДатыЗапретаИзменения.ИзменениеЗапрещено(СтрокаРегистратора.Регистратор.ПолучитьОбъект()) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаписаныУспешно = Истина;
		
		НачатьТранзакцию();
		
		// Записываем сведения о собственности в регистр "Собственники помещений".
		НаборЗаписей = РегистрыСведений.УПЖКХ_СобственникиПомещений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаРегистратора.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			СтрокиСобственности = СтрокаРегистратора.Строки.НайтиСтроки(Новый Структура("Собственник, Помещение", Запись.Собственник, Запись.Помещение));
			Если Не СтрокиСобственности.Количество() = 0 Тогда
				Запись.НомерДокумента = СтрокиСобственности.Получить(0).НомерДокумента;
				Запись.ДатаДокумента  = СтрокиСобственности.Получить(0).ДатаДокумента;
			КонецЕсли;
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
			ДанныеЗаписаныУспешно = Ложь;
		КонецЕсли;
		
		Если Не Отказ Тогда
			// Правим сведения о собственности в регистраторах.
			Если ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.УПЖКХ_УстановкаСобственниковПомещений") Тогда
				РегистраторОбъект = СтрокаРегистратора.Регистратор.ПолучитьОбъект();
				ТабличнаяЧасть    = РегистраторОбъект.Собственники;
				
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					СтрокиВДокументе = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Собственник", СтрокаСобственника.Собственник));
					
					Если Не СтрокиВДокументе.Количество() = 0 Тогда
						СтрокиВДокументе.Получить(0).НомерДокумента = СтрокаСобственника.НомерДокумента;
						СтрокиВДокументе.Получить(0).ДатаДокумента  = СтрокаСобственника.ДатаДокумента;
					КонецЕсли;
				КонецЦикла;
				
				Если Не КВП_ЗаписатьОбъект(РегистраторОбъект) Тогда
					Отказ = Истина;
					ДанныеЗаписаныУспешно = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.КВП_ОткрытиеЛицевогоСчета")
			 Или ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.КВП_ИзменениеЛицевогоСчета") Тогда
				РегистраторОбъект = СтрокаРегистратора.Регистратор.ПолучитьОбъект();
				ТабличнаяЧасть    = РегистраторОбъект.Главная;
				
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					СтрокиВДокументе = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Проживающий", СтрокаСобственника.Жилец));
					
					Если Не СтрокиВДокументе.Количество() = 0 Тогда
						СтрокиВДокументе.Получить(0).НомерДокументаСобственности = СтрокаСобственника.НомерДокумента;
						СтрокиВДокументе.Получить(0).ДатаДокументаСобственности  = СтрокаСобственника.ДатаДокумента;
					КонецЕсли;
				КонецЦикла;
				
				Если Не КВП_ЗаписатьОбъект(РегистраторОбъект) Тогда
					Отказ = Истина;
					ДанныеЗаписаныУспешно = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Отказ Тогда
				// В объектах (лицевые счета или жильцы), из которых перенесли сведения о собственности, указываем факт переноса.
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					Если Не СтрокаСобственника.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
						Если Не СтрокаСобственника.ЛицевойСчет.СведенияОСобственностиПеренесены Тогда
							ЛицевойСчетОбъект = СтрокаСобственника.ЛицевойСчет.ПолучитьОбъект();
							ЛицевойСчетОбъект.СведенияОСобственностиПеренесены = Истина;
							ЛицевойСчетОбъект.ОбменДанными.Загрузка            = Истина;
							
							Если Не КВП_ЗаписатьОбъект(ЛицевойСчетОбъект) Тогда
								Отказ = Истина;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						ЖилецОбъект = СтрокаСобственника.Жилец.ПолучитьОбъект();
						ЖилецОбъект.СведенияОСобственностиПеренесены = Истина;
						ЖилецОбъект.ОбменДанными.Загрузка            = Истина;
						
						Если Не КВП_ЗаписатьОбъект(ЖилецОбъект) Тогда
							Отказ = Истина;
							ДанныеЗаписаныУспешно = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаписаныУспешно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение настроек контроля показаний приборов учета,
// путем установки значений констант ИспользоватьКонтрольПоказанийПриборовУчета и
// РазмерДопустимогоПревышенияСреднегоРасходаПУ взначения по умолчанию.
// А также устанавливает признак корректности показаний для строк проведенных
// документов "Ввода показаний" с отрицательным расходом.
// Для проведенных документов проверку на превышение среднемесячного расхода не осуществляем,
// так как, величина среднего расхода будет не заполнена (равна 0), а в этом случае проверка
// при проведении документов на превышение среднего расхода не осуществляется.
//
Процедура ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Устанавливаем параметры контроля показаний в значения по умолчанию:
	// - контроль показаний используется;
	// - размер допустимого превышения среднего расхода равен 100%.
	Константы.УПЖКХ_ИспользоватьКонтрольПоказанийПриборовУчета.Установить(Истина);
	Константы.УПЖКХ_РазмерДопустимогоПревышенияСреднегоРасходаПУ.Установить(100);
	
	// Получим ссылки на документы ввода показаний с отрицательным расходом.
	// В первом пакете получаем строки проведенных документов и получаем введенные и предыдущие показания.
	// В итоговом пакете проверяем: если в строке присутствует отрицательный расход хотя бы по одному
	// из видов тарифов, то этот документ необходимо обработать и в строках с отрицательным расходом
	// установить признак корректности показаний.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Проведен
	|	И НЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ПоказанияКорректны
	|	И (ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказаниеПредыдущее
	|			ИЛИ ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказаниеПредыдущее
	|			ИЛИ ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказаниеПредыдущее)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Считываем объект документа для его обработки.
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекущаяСтрока Из ДокументОбъект.Главная Цикл
			
			// Проверим, введены ли соответствующие показания.
			ДневноеПоказаниеВведено = Не (ТекущаяСтрока.ДневноеПоказание = Неопределено);
			НочноеПоказаниеВведено  = Не (ТекущаяСтрока.НочноеПоказание  = Неопределено);
			ПиковоеПоказаниеВведено = Не (ТекущаяСтрока.ПиковоеПоказание = Неопределено);
			
			// Для исключения потенциальных ошибок приведем показания к числовым значениям.
			ДневноеПоказание = ?(ТекущаяСтрока.ДневноеПоказание = Неопределено, 0, ТекущаяСтрока.ДневноеПоказание);
			НочноеПоказание  = ?(ТекущаяСтрока.НочноеПоказание =  Неопределено, 0, ТекущаяСтрока.НочноеПоказание);
			ПиковоеПоказание = ?(ТекущаяСтрока.ПиковоеПоказание = Неопределено, 0, ТекущаяСтрока.ПиковоеПоказание);
			
			// Устанавливаем признак, что показания корректны, если хотя бы
			// по одному виду тарифа показание введено и оно отрицательное.
			Если (ДневноеПоказаниеВведено И ДневноеПоказание < ТекущаяСтрока.ДневноеПоказаниеПредыдущее)
			 ИЛИ (НочноеПоказаниеВведено  И НочноеПоказание  < ТекущаяСтрока.НочноеПоказаниеПредыдущее)
			 ИЛИ (ПиковоеПоказаниеВведено И ПиковоеПоказание < ТекущаяСтрока.ПиковоеПоказаниеПредыдущее) Тогда
				ТекущаяСтрока.ПоказанияКорректны = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		// Записываем обработанный документ ввода показаний.
		Если НЕ КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2

// Процедура дополняет номера документов лидирующими нулями в связи с увеличением длины номера 
// с 9 до 11 символов.
//
Процедура ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК Ссылка,
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер КАК Номер
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяДлинаНомера = Метаданные.Документы.КВП_ЗаявкаНаВыполнениеРабот.ДлинаНомера;
		ИсходныйНомер    = СокрЛП(Выборка.Номер);
		
		Если СтрДлина(ИсходныйНомер) = НоваяДлинаНомера Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныйНомер = ИсходныйНомер;
		
		// Шаблон номера "[Префикс организации][Префикс ИБ]-[Номер]". 
		// Префикс и основная часть номера в ред.3.0 отделяются "-" (Пример: ТС00-0001).
		ПозицияПрефикса = СтрНайти(ИсходныйНомер, "-");
		Если ПозицияПрефикса > 0 Тогда
			Префикс          = Лев(ИсходныйНомер, ПозицияПрефикса);
			ОсновнаяЧасть    = Прав(ИсходныйНомер, СтрДлина(ИсходныйНомер) - ПозицияПрефикса);
			НоваяДлинаНомера = НоваяДлинаНомера - СтрДлина(Префикс);
		Иначе
			Префикс = "";
			ОсновнаяЧасть = ИсходныйНомер;
		КонецЕсли;
		
		// Дополняем номер документа лидирующими нулями.
		Пока СтрДлина(ОсновнаяЧасть) < НоваяДлинаНомера Цикл
			ОсновнаяЧасть = "0" + ОсновнаяЧасть;
		КонецЦикла;
		ОбработанныйНомер = Префикс + ОсновнаяЧасть;
		
		Если Не ОбработанныйНомер = ИсходныйНомер Тогда
			ДокументОбъект       = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Номер = ОбработанныйНомер;
			
			// Записываем обработанный документ.
			Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2()

// Процедура изменяет значения ресурса "ФормаКвитанции" записей регистра сведений
// "Настройки формирования платежного документа".
// По заявке З00014201 выполнена замена строковых наименований видов платежных документов
// на значения перечисления "УПЖКХ_ВидыПлатежныхДокументов".
//
Процедура ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции В (&СписокНаименованийФормПД)";
	
	СписокНаименованийФормПД = Новый СписокЗначений;
	СписокНаименованийФормПД.Добавить("Плат. документ (приказ №924/пр)");
	СписокНаименованийФормПД.Добавить("Плат. документ (приказ №454 в соответ. с пост. №354)");
	СписокНаименованийФормПД.Добавить("Плат. документ (с полями для отметки банка №1)");
	СписокНаименованийФормПД.Добавить("Плат. документ (с полями для отметки банка №2)");
	СписокНаименованийФормПД.Добавить("Плат. документ (Пермский край)");
	СписокНаименованийФормПД.Добавить("Плат. документ (Чувашская республика)");
	СписокНаименованийФормПД.Добавить("Плат. документ (пост. №1161/57 для МО)");
	СписокНаименованийФормПД.Добавить("Плат. документ (пост. №679/30 для МО)");
	Запрос.УстановитьПараметр("СписокНаименованийФормПД", СписокНаименованийФормПД);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			
			НастройкиФормированияПД = НаборЗаписей[0];
			ФормаКвитанции          = НастройкиФормированияПД.ФормаКвитанции;
			
			Если ТипЗнч(НастройкиФормированияПД.ФормаКвитанции) = Тип("Строка") Тогда
				
				Если ФормаКвитанции = СписокНаименованийФормПД[0].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[1].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[2].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[3].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[4].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[5].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[6].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[7].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
					ОбработчикВыполненУспешно = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3()

// Процедура по-умолчанию устанавливает в "Истину" значение ресурса "ОбрезатьПрефиксЛС"
// во всех записях регистра сведений "НастройкиВыгрузкиВГЦЖС".
Процедура УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3() Экспорт
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого ТекЗапись Из НаборЗаписей Цикл
		ТекЗапись.ОбрезатьПрефиксЛС = Истина;
	КонецЦикла;
	
	// Если не удалось записать измененный набор записей, то в целом обновление считается неуспешным.
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3()

Процедура ЗаполнитьУсловияДПОИ_3_0_55_2() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ДоговорыДПОИ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ДоговорыДПОИ КАК УПЖКХ_ДоговорыДПОИ
	|ГДЕ
	|	НЕ УПЖКХ_ДоговорыДПОИ.ДоговорЗаключенНаБезвозмезднойОснове
	|	И НЕ УПЖКХ_ДоговорыДПОИ.УстановленыКонкретныеСрокиОплаты
	|	И УПЖКХ_ДоговорыДПОИ.ИныеУсловияДоговора = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УстановленыКонкретныеСрокиОплаты = Истина;
		СправочникОбъект.Наименование = СтрЗаменить(СправочникОбъект.Наименование, "ДОИ", "ДПОИ");
		// Записываем обработанный элемент справочника ДПОИ.
		Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьУсловияДПОИ_3_0_55_2"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение новых настроек параметра "Счетчик и Показание" в справочнике "Настройки загрузки / выгрузки"
// для Загрузки реестра показаний счетчиков.
//
Процедура УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний = """"";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбъектНастройка = ВыборкаДетальныеЗаписи.Настройка.ПолучитьОбъект();
		ОбъектНастройка.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как 0";
		
		Если Не ЗаписатьОбъект(ОбъектНастройка) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3()

// Процедура заполняет значения новых ресурсов: "НаименованиеПлатежаНазначениеПоКР", "НаименованиеПлатежаНазначениеПоОсн",
// - регистра сведений "Настройки формирования платежного документа".
//
Процедура УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3() Экспорт
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоОсн КАК ДополнительныеРеквизитыQRКодаПоОсн,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоКР КАК ДополнительныеРеквизитыQRКодаПоКР,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоКР КАК НаименованиеПлатежаНазначениеПоКР,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоОсн КАК НаименованиеПлатежаНазначениеПоОсн
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоОсн = """"
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоКР = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИскомоеЗначение = "Purpose";
	
	Пока Выборка.Следующий() Цикл
		
		ИмеетсяПроверяемыйРеквизитПоОсн = Ложь;
		ИмеетсяПроверяемыйРеквизитПоКР  = Ложь;
		
		Если ПустаяСтрока(Выборка.НаименованиеПлатежаНазначениеПоОсн) Тогда
			// Проверяем в настройках по основным услугам.
			НастрокиПоОснУслугам = Выборка.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
			Если ТипЗнч(НастрокиПоОснУслугам) = Тип("СписокЗначений") Тогда
				НайденноеЗначение               = НастрокиПоОснУслугам.НайтиПоЗначению(ИскомоеЗначение);
				ИмеетсяПроверяемыйРеквизитПоОсн = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Выборка.НаименованиеПлатежаНазначениеПоКР) Тогда
			// Проверяем в настройках по услугам кап.ремонта.
			НастрокиПоУслугамКР = Выборка.ДополнительныеРеквизитыQRКодаПоКР.Получить();
			Если ТипЗнч(НастрокиПоУслугамКР) = Тип("СписокЗначений") Тогда
				НайденноеЗначение              = НастрокиПоУслугамКР.НайтиПоЗначению(ИскомоеЗначение);
				ИмеетсяПроверяемыйРеквизитПоКР = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмеетсяПроверяемыйРеквизитПоОсн ИЛИ ИмеетсяПроверяемыйРеквизитПоКР Тогда
			
			НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				
				НастройкиФормированияПД = НаборЗаписей[0];
				
				Если ИмеетсяПроверяемыйРеквизитПоОсн Тогда
					НастройкиФормированияПД.НаименованиеПлатежаНазначениеПоОсн = "Оплата за ЖКУ";
				КонецЕсли;
				
				Если ИмеетсяПроверяемыйРеквизитПоКР Тогда
					НастройкиФормированияПД.НаименованиеПлатежаНазначениеПоКР = "Оплата за КАПРЕМОНТ";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента"" не выполнен!");
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработкаЗаполненияВыполнена = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработкаЗаполненияВыполнена);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3()

// Процедура заполняет значения новых ресурсов: "ТипЖильцовДляДеленияОбъемаНачисленнойУслуги" и "ТипЖильцовДляДеленияОбъемаОграниченияЛьготы"
// во всех записях регистра сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги) Тогда
			Запись.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги = ?(Запись.УдалитьОбъемУслугиДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Запись.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы) Тогда
			Запись.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы = ?(Запись.УдалитьОбъемОграниченияДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3()

// Выполняет последовательный вызов процедур при переходе на версию 3.0.62.2.
//
Процедура ДействияПриОбновленииНа_3_0_62_2() Экспорт
	
	ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2();
	УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2();
	
КонецПроцедуры // ДействияПриОбновленииНа_3_0_62_2()

// Процедура заполняет значение настройки "ОтражатьВзаиморасчетыПоКапремонтуПоЗаданномуСчетуУчета" в УП.
Процедура ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.ВариантОтраженияВзаиморасчетовПоКапремонту.Пустая()Тогда
			
			Если Запись.УдалитьВариантОтраженияВзаиморасчетовПоКапремонту Тогда
				Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета;
			Иначе
				Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.СчетаВзаиморасчетовСКонтрагентами;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает настройку "ОтражатьПениКапремонтОтдельноОтНачислений" в УП,
// а также счета учета расчетов по пени за капремонт, если пени отражались отдельно от начислений.
Процедура УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2()
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_УчетнаяПолитикаТСЖ.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ";
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ВыборкаОрганизация.Организация);
		НаборЗаписей.Прочитать();
		
		СкопироватьСчетаУчетаПени = Ложь;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
				Запись.УдалитьОтражатьПениКапремонтОтдельноОтНачислений = Истина;
				СкопироватьСчетаУчетаПени = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
		Если СкопироватьСчетаУчетаПени Тогда
			
			НаборЗаписейПени = РегистрыСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.СоздатьНаборЗаписей();
			НаборЗаписейПени.Отбор.Организация.Установить(ВыборкаОрганизация.Организация);
			НаборЗаписейПени.Прочитать();
			
			НаборЗаписейПениКапремонт = РегистрыСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.СоздатьНаборЗаписей();
			
			Для Каждого Запись Из НаборЗаписейПени Цикл
				
				НоваяЗапись = НаборЗаписейПениКапремонт.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
				
				НоваяЗапись.ЭтоСчетаДляКапРемонта = Истина;
				
			КонецЦикла;
			
			Если Не КВП_ЗаписатьОбъект(НаборЗаписейПениКапремонт, Ложь) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен!");
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработчикВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработчикВыполнен);
	КонецЕсли;
	
КонецПроцедуры

// Процедура дозаполняет документы ввода показаний реквизитами счетчиков.
//
Процедура ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Главная.Ссылка КАК Ссылка,
	|	Главная.Счетчик КАК Счетчик,
	|	Главная.Объект КАК Объект
	|ПОМЕСТИТЬ втНезаполненные
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК Главная
	|ГДЕ
	|	(Главная.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.Разрядность = 0
	|			ИЛИ Главная.Помещение = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|				И (ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|					ИЛИ ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.УПЖКХ_Помещения)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНезаполненные.Ссылка КАК Ссылка,
	|	втНезаполненные.Счетчик КАК Счетчик,
	|	втНезаполненные.Счетчик.Тарифность КАК Тарифность,
	|	втНезаполненные.Счетчик.Разрядность КАК Разрядность,
	|	втНезаполненные.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ТОГДА втНезаполненные.Объект.Адрес
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
	|			ТОГДА втНезаполненные.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение
	|ИЗ
	|	втНезаполненные КАК втНезаполненные
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для каждого ТекДокумент из РезультатЗапроса.Строки Цикл
		
		ДокументВводаПоказаний = ТекДокумент.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаДляИзменения из ТекДокумент.Строки Цикл
			
			СтрокиСчетчика = ДокументВводаПоказаний.Главная.НайтиСтроки(Новый Структура("Счетчик", СтрокаДляИзменения.Счетчик));
			
			Для каждого ТекСтрока из СтрокиСчетчика Цикл
				
				ТекСтрока.Тарифность                 = СтрокаДляИзменения.Тарифность;
				ТекСтрока.Разрядность                = СтрокаДляИзменения.Разрядность;
				ТекСтрока.СпособРегистрацииПоказаний = СтрокаДляИзменения.СпособРегистрацииПоказаний;
				ТекСтрока.Помещение                  = СтрокаДляИзменения.Помещение;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3()

// Процедура отключает формирование штрихкодов для онлайн оплаты.
//
Процедура ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВыводитьQRштрихкодДляСитикардПоОсн
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВыводитьQRштрихкодДляСитикардПоКР)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			
			Если НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоОсн Тогда
				НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоОсн = Ложь;
			КонецЕсли;
			
			Если НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоКР Тогда
				НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоКР = Ложь;
			КонецЕсли;
			
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7()

// Заполняет поле регистра сведений значением по умолчанию.
//
Процедура ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_УслугиОбщедомовогоСчетчика.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Коэффициент = 1;
	КонецЦикла;
	
	Если Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8()

// Заполняет настройку расчетного счета настроек сбора данных для квитанций и обменов.
//
Процедура ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка КАК Ссылка,
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов КАК ИсполнительРасчетов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	(УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов ССЫЛКА Справочник.Контрагенты
	|				И НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов ССЫЛКА Справочник.Организации
	|				И НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектНастройка = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектНастройка.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = Истина;
		ОбъектНастройка.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам                      = Выборка.ИсполнительРасчетов.ОсновнойБанковскийСчет;
		
		Если Не ЗаписатьОбъект(ОбъектНастройка) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10()

#Область ОбрабочткиМногопоточногоОбновления

/////////////////////////////////////////////////////////////////////////////////////////
// ПЕРЕНОС ЗНАЧЕНИЯ РЕКВИЗИТА Л/С "ЭЛЕКТРОННЫЙ ЯЩИК" В РЕКВИЗИТ "АДРЕС ЭЛЕКТРОННОЙ ПОЧТЫ"

// Заполняет значение реквизита "АдресЭлектроннойПочты" лицевого счета первыми 255 символами реквизита "ЭлектронныйЯщик".
//
Процедура ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета_3_0_64_11(Параметры = Неопределено) Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ (ВЫРАЗИТЬ(КВП_ЛицевыеСчета.УдалитьЭлектронныйЯщик КАК СТРОКА(1))) = """"
	|	И КВП_ЛицевыеСчета.АдресЭлектроннойПочты = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Определение количества потоков.
	КоличествоПотоков = 1;
	
	Если Константы.УПЖКХ_ИспользоватьМногопоточность.Получить() Тогда
		КоличествоПотоков = Константы.УПЖКХ_КоличествоПотоковПриМногопоточнойОбработкеДанных.Получить();
	КонецЕсли;
	
	// Определение, как будет выполнятся обновление (в фоне или нет).
	Если УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая() Или КоличествоПотоков = 1 Тогда
		
		СписокЛС = Новый СписокЗначений;
		СписокЛС.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		ОбработчикВыполненУспешно = ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета(СписокЛС);
		
	Иначе
		
		МассивПорций = ПодготовитьМассивЛицевыйСчетов(Выборка, КоличествоПотоков);
		
		// Подготовка массива с массивами параметров потоков (фоновых заданий).
		МассивПараметровПотоков = Новый Массив;
		
		МассивАдресов = Новый Массив;
		
		Для Каждого ТекПорцияЛС Из МассивПорций Цикл
			
			АдресРезультатаВыполнения = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
			МассивАдресов.Добавить(АдресРезультатаВыполнения);
			
			НаборПараметров = Новый Массив;
			НаборПараметров.Добавить(ТекПорцияЛС);
			НаборПараметров.Добавить(АдресРезультатаВыполнения);
			
			МассивПараметровПотоков.Добавить(НаборПараметров);
			
		КонецЦикла;
		
		// Запуск потоков.
		УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно("УПЖКХ_ОбновлениеИнформационнойБазы.ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета",
																					 "Многопоточный перенос значения реквизита ""ЭлектронныйЯщик"" в ""АдресЭлектроннойПочты"" справочника ""Лицевые счета""",
																					 МассивПараметровПотоков);
		
		// Обработка результатов выполнения потоков.
		Для Каждого ТекАдрес Из МассивАдресов Цикл
			
			ПотокВыполненУспешно = ПолучитьИзВременногоХранилища(ТекАдрес);
			
			Если Не ПотокВыполненУспешно Тогда
				ОбработчикВыполненУспешно = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Параметры.Вставить("ОбработкаЗавершена", ОбработчикВыполненУспешно);
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Отложенный обработчик ""ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета_3_0_64_11"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета_3_0_64_11()

// Возвращает массив, в элементах которого хранятся списки значений со ссылками
// на лицевые счета для обработки в потоках.
Функция ПодготовитьМассивЛицевыйСчетов(ВыборкаЛС, КоличествоПотоков)
	
	КоличествоЛСДляОбработки = ВыборкаЛС.Количество();
	
	// Количество лс, которые будут содержатся в одном массиве.
	КоличествоЛСВПотоке = Окр(КоличествоЛСДляОбработки / КоличествоПотоков);
	
	МассивПорцийЛС = Новый Массив;
	
	СчетчикЛС = 1;
	
	ПорцияЛС = Новый СписокЗначений;
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		ПорцияЛС.Добавить(ВыборкаЛС.Ссылка);
		
		Если СчетчикЛС = КоличествоЛСВПотоке Тогда
			
			МассивПорцийЛС.Добавить(ПорцияЛС);
			
			ПорцияЛС = Новый СписокЗначений;
			
			СчетчикЛС = 1;
			
		Иначе
			СчетчикЛС = СчетчикЛС + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПорцияЛС.Количество() > 0 Тогда
		МассивПорцийЛС.Добавить(ПорцияЛС);
	КонецЕсли;
	
	Возврат МассивПорцийЛС;
	
КонецФункции // ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо500ЛС()

// Переносит данные из реквзиита "Электронный ящик" в реквизит "Адрес электронной почты" справочника "Лицевые счета" в транзакциях.
//
// Параметры:
//  СписокЛицевыйСчетов		 - СписокЗначений - список лицевых счетов для обработки
//  АдресВременногоХранилища - Строка - Адрес хранилища, в который помещается результат функции.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ЗаполнитьЗначениеРеквизитаАдресЭлектроннойПочтыЛицевогоСчета(СписокЛицевыйСчетов, АдресВременногоХранилища = "") Экспорт
	
	ЗаписьВыполненаУспешно = Истина;
	
	Счетчик = 0;
	
	КоличествоЛицевыхСчетовВТранзакции = 1000;
	
	НачатьТранзакцию();
	
	Для Каждого ТекСсылка Из СписокЛицевыйСчетов Цикл
		
		Если Счетчик = КоличествоЛицевыхСчетовВТранзакции Тогда
			Счетчик = 0;
			ЗафиксироватьТранзакцию();
			НачатьТранзакцию();
		КонецЕсли;
		
		ЛицевойСчетОбъект = ТекСсылка.Значение.Ссылка.ПолучитьОбъект();
		ЛицевойСчетОбъект.ОбменДанными.Загрузка = Истина;
		ЛицевойСчетОбъект.АдресЭлектроннойПочты = ЛицевойСчетОбъект.УдалитьЭлектронныйЯщик;
		
		Если Не КВП_ЗаписатьОбъект(ЛицевойСчетОбъект) Тогда
			ЗаписьВыполненаУспешно = Ложь;
			ОтменитьТранзакцию();
			Прервать;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Не ПустаяСтрока(АдресВременногоХранилища) Тогда
		ПоместитьВоВременноеХранилище(ЗаписьВыполненаУспешно, АдресВременногоХранилища);
	КонецЕсли;
	
	Возврат ЗаписьВыполненаУспешно;
	
КонецФункции

#КонецОбласти

// Заполняет добавленный реквизит "ДокументОснование" документа "Корректировка начислений" ссылками
// на связанные документы "Ввод показаний счетчика".
Процедура ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчика.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ВводПоказанийСчетчика.Ссылка) КАК Представление
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика КАК УПЖКХ_ВводПоказанийСчетчика
	|ГДЕ
	|	НЕ УПЖКХ_ВводПоказанийСчетчика.УдалитьДокументКорректировкиНачислений = ЗНАЧЕНИЕ(Документ.КВП_КорректировкаНачислений.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументВводаПоказаний = Выборка.Ссылка.ПолучитьОбъект();
		СсылкаДокументКорректировкиНачислений = ДокументВводаПоказаний.УдалитьДокументКорректировкиНачислений;
		
		ДокументВводаПоказаний.УдалитьДокументКорректировкиНачислений = ПредопределенноеЗначение("Документ.КВП_КорректировкаНачислений.ПустаяСсылка");
		
		Попытка
			ДокументВводаПоказаний.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При записи документа """ + Выборка.Представление + """ произошла ошибка." + ОписаниеОшибки());
		КонецПопытки;
		
		ДокументКорректировкиНачислений = СсылкаДокументКорректировкиНачислений.ПолучитьОбъект();
		ДокументКорректировкиНачислений.ДокументОснование = Выборка.Ссылка;
		
		Попытка
			ДокументКорректировкиНачислений.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При записи документа """ + ДокументКорректировкиНачислений + """ произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3()

// Процедура переносит данные реквизитов "ВариантПоставкиУслуг" и "ОплатаЧерезУК" в справочник договоры, а также обновляет записи
//  регистра "Поставщики" в соответствии с новой структурой.
//
Процедура ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка КАК Документ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК) КАК УдалитьОплатаЧерезУК,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДокументыПодсчетОплат
	|ИЗ
	|	Документ.УПЖКХ_УправлениеДоговорамиСПоставщикамиУслуг.Объекты КАК УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты
	|ГДЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.УдалитьВариантПоставкиУслуг,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка КАК Документ
	|ПОМЕСТИТЬ врДокументыСОплатой
	|ИЗ
	|	Документ.УПЖКХ_УправлениеДоговорамиСПоставщикамиУслуг.Объекты КАК УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты
	|ГДЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПодсчетОплат.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА врПодсчетОплат.УдалитьОплатаЧерезУК = 2
	|			ТОГДА ИСТИНА
	|		КОГДА врПодсчетОплат.УдалитьОплатаЧерезУК = 1
	|				И врДокументыСОплатой.УдалитьОплатаЧерезУК = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УдалитьОплатаЧерезУК,
	|	врПодсчетОплат.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врПодсчетОплат.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДокументы
	|ИЗ
	|	врДокументыПодсчетОплат КАК врПодсчетОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ врДокументыСОплатой КАК врДокументыСОплатой
	|		ПО врПодсчетОплат.Документ = врДокументыСОплатой.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	врДокументы.Документ.Ссылка КАК ДокументУправлениеДоговорами,
	|	ДоговорыКонтрагентов.УПЖКХ_ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врДокументы.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врДокументы.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	врДокументы.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врДокументы КАК врДокументы
	|		ПО ДоговорыКонтрагентов.Ссылка = врДокументы.Документ.ДоговорПоставщикаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врДоговоры.Договор КАК Договор,
	|	врДоговоры.ДокументУправлениеДоговорами КАК ДокументУправлениеДоговорами,
	|	врДоговоры.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врДоговоры.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	врДоговоры.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг КАК УПЖКХ_ПоставщикиУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врДоговоры КАК врДоговоры
	|		ПО УПЖКХ_ПоставщикиУслуг.Регистратор = врДоговоры.ДокументУправлениеДоговорами
	|ГДЕ
	|	врДоговоры.ВариантПоставкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.ПустаяСсылка)
	|	И УПЖКХ_ПоставщикиУслуг.ДоговорПоставщикаУслуг = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";

	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ТекНаборЗаписей = РегистрыСведений.УПЖКХ_ПоставщикиУслуг.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.ДокументУправлениеДоговорами);
		ТекНаборЗаписей.Прочитать();
		
		Для Каждого Запись Из ТекНаборЗаписей Цикл
			Запись.ДоговорПоставщикаУслуг = ВыборкаРегистраторов.Договор;
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ТекНаборЗаписей) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
		ДоговорОбъект  = ВыборкаРегистраторов.Договор.ПолучитьОбъект();
		ДоговорОбъект.УПЖКХ_ОплатаЧерезУК        = ВыборкаРегистраторов.УдалитьОплатаЧерезУК;
		ДоговорОбъект.УПЖКХ_ВариантПоставкиУслуг = ВыборкаРегистраторов.УдалитьВариантПоставкиУслуг;
		
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		
		Если Не ЗаписатьОбъект(ДоговорОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6()

// Заполняет значение ресурса "Число начала периода приема показаний" Учетной политики (ЖКХ) значением по умолчанию.
//
Процедура ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	ЕстьИзменения             = Ложь;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого ТекЗапись из НаборЗаписей Цикл
		Если ТекЗапись.ЧислоНачалаПериодаПриемаПоказаний = 0 Тогда
			ЕстьИзменения                               = Истина;
			ТекЗапись.ЧислоНачалаПериодаПриемаПоказаний = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбработчикВыполненУспешно = ЗаписатьОбъект(НаборЗаписей, Истина);
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7()

// Процедура заполняет значение ресурса "ДополнительныеРеквизитыQRКодаПоКР" регистра сведений "Настройки формирования платежного документа".
//
Процедура ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8() Экспорт
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	
	Для Каждого ТекЗапись из НаборЗаписей Цикл
		ДополнительныеРеквизитыQRКодаПоКР = ТекЗапись.ДополнительныеРеквизитыQRКодаПоКР.Получить();
		Если ДополнительныеРеквизитыQRКодаПоКР = Неопределено Тогда
			ЕстьИзменения                               = Истина;
			ТекЗапись.ДополнительныеРеквизитыQRКодаПоКР = Новый ХранилищеЗначения(Новый СписокЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбработчикВыполненУспешно = ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен или выполнен с ошибками!");
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработчикВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработчикВыполнен);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8()

// Выполняет последовательный вызов процедур при переходе на версию 3.0.65.9.
//
Процедура ДействияПриОбновленииНа_3_0_65_9() Экспорт
	
	ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения_3_0_65_9();
	ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг_3_0_65_9();
	
КонецПроцедуры // ДействияПриОбновленииНа_3_0_65_9()

// Процедура заполняет реквизит ИдентификаторДляФормул в справочнике "КВП_ТипыПлощадейЗдания" и "УПЖКХ_ВидыПлощадей".
//
Процедура ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения_3_0_65_9()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Наименование КАК Наименование,
	|	КВП_ТипыПлощадейЗдания.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК Ссылка,
	|	КВП_ТипыПлощадейЗдания.Код КАК Код
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	КВП_ТипыПлощадейЗдания.ИдентификаторДляФормул = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ВидыПлощадей.Наименование,
	|	УПЖКХ_ВидыПлощадей.ИдентификаторДляФормул,
	|	УПЖКХ_ВидыПлощадей.Ссылка,
	|	УПЖКХ_ВидыПлощадей.Код
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПлощадей КАК УПЖКХ_ВидыПлощадей
	|ГДЕ
	|	УПЖКХ_ВидыПлощадей.ИдентификаторДляФормул = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипПлощадиОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Заполняем идентификатор по наименованию.
		ТипПлощадиОбъект.ИдентификаторДляФормул = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьИдентификатор(Выборка.Наименование);
		
		// Если идентификатор не уникален, то добавляет к нему код объекта в формате "[ИдентификаторПоНаименованию]_[ИдентификаторПоКоду]".
		Если Не ТипПлощадиОбъект.ИндентификаторУникален() Тогда
			ТипПлощадиОбъект.ИдентификаторДляФормул = ТипПлощадиОбъект.ИдентификаторДляФормул + "_" + УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьИдентификатор(Выборка.Код);
		КонецЕсли;
		
		// Запись объекта в режиме загрузки данных.
		ТипПлощадиОбъект.ОбменДанными.Загрузка = Истина;
		Если Не ЗаписатьОбъект(ТипПлощадиОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения_3_0_65_9()

// Процедура заполняет реквизит ФормулаРасчета в справочнике КВП_НормыПотребленияУслуг.
//
Процедура ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг_3_0_65_9()
	
	// Порядок обработки норм потребления:
	// 1. Получаем все элементы справочника "Нормы потребления услуг", у которых заполнена старая формула, а новая не заполнена.
	// 2. Формируем соответствие всех возможных операндов в старой и новой формулах для замены.
	// 3. Заменяем старый операнд на новый для каждого найденного из п.2.
	// 4. В формуле заменяем старый формат даты [Дата:20140101] на новый формат Дата(2014,01,01).
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.УдалитьФормула КАК СтараяФормула,
	|	КВП_НормыПотребленияУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	НЕ КВП_НормыПотребленияУслуг.УдалитьФормула = """"
	|	И КВП_НормыПотребленияУслуг.ФормулаРасчета = """"";
	
	НормыПотребленияКОбработке = Запрос.Выполнить().Выбрать();
	Если Не НормыПотребленияКОбработке.Количество() = 0 Тогда
		
		// Формирование соответствия операндов для последующей замены.
		СоответствиеОперандов = Новый Соответствие;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗС" + Строка, "Здание.СвойствоЗдания." + Строка);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗС" + Строка, "Здание.СвойствоЗдания." + Строка);
		КонецЦикла;
		
		Выборка = Метаданные.Справочники.КВП_Здания.Реквизиты;
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗР" + Строка.Имя, "Здание.РеквизитЗдания." + Строка.Имя);
		КонецЦикла;
		
		Выборка = Справочники.КВП_ТипыПлощадейЗдания.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеОперандов.Вставить("ЗП" + Выборка.Код, "Здание.ПлощадьЗдания." + Выборка.ИдентификаторДляФормул);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПС" + Строка, "Помещение.СвойствоПомещения." + Строка);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПС" + Строка, "Помещение.СвойствоПомещения." + Строка);
		КонецЦикла;
		
		Выборка = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты;
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПР" + Строка.Имя, "Помещение.РеквизитПомещения." + Строка.Имя);
		КонецЦикла;
		
		Выборка = Справочники.УПЖКХ_ВидыПлощадей.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеОперандов.Вставить("ПП" + Выборка.Код, "Помещение.ПлощадьПомещения." + Выборка.ИдентификаторДляФормул);
		КонецЦикла;
		
		СоответствиеОперандов.Вставить("КЧПроживающих",                    "КоличествоЧеловек.Проживающих");
		СоответствиеОперандов.Вставить("КЧЗарегистрированных",             "КоличествоЧеловек.Зарегистрированных");
		СоответствиеОперандов.Вставить("КЧВладельцев единственного жилья", "КоличествоЧеловек.Владельцев единственного жилья");
		СоответствиеОперандов.Вставить("КЧЛьготников",                     "КоличествоЧеловек.Льготников");
		СоответствиеОперандов.Вставить("КЧБлизких родственников",          "КоличествоЧеловек.Близких родственников");
		СоответствиеОперандов.Вставить("ККЖилых",                          "КоличествоКомнат.Жилых");
		СоответствиеОперандов.Вставить("ККВсего",                          "КоличествоКомнат.Всего");
		СоответствиеОперандов.Вставить("КДКоличествоДнейВМесяце",          "ПоказательРасчета.КоличествоДнейВМесяце");
		СоответствиеОперандов.Вставить("МРМесяцРасчета",                   "ПоказательРасчета.МесяцРасчета");
		
		Пока НормыПотребленияКОбработке.Следующий() Цикл
			
			СтрокаФормулы = НормыПотребленияКОбработке.СтараяФормула;
			
			// Замена операндов в формуле.
			Для Каждого Операнд Из СоответствиеОперандов Цикл
				СтрокаФормулы = СтрЗаменить(СтрокаФормулы, Операнд.Ключ, Операнд.Значение);
			КонецЦикла;
			
			//[Дата:20140101].
			НомерСимвола = СтрНайти(СтрокаФормулы, "[Дата:");
			
			// Замена дат.
			Пока НомерСимвола <> 0 Цикл
				
				СтараяДата = Сред(СтрокаФормулы, НомерСимвола, 15); // [Дата:20140101].
				
				НоваяДата = Сред(СтрокаФормулы, НомерСимвола + 6, 8); // 20140101.
				НоваяДата = "Дата(" + Лев(НоваяДата, 4) + "," + Сред(НоваяДата, 4, 2) + "," + Сред(НоваяДата, 6, 2)  + ")"; // Дата(2014,01,01).
				
				СтрокаФормулы = СтрЗаменить(СтрокаФормулы, СтараяДата, НоваяДата);
				
				НомерСимвола = СтрНайти(СтрокаФормулы, "[Дата:");
				
			КонецЦикла;
			
			НормаПотребленияОбъект = НормыПотребленияКОбработке.Ссылка.ПолучитьОбъект();
			НормаПотребленияОбъект.ФормулаРасчета = СтрокаФормулы;
			
			НормаПотребленияОбъект.ОбменДанными.Загрузка = Истина;
			Если Не ЗаписатьОбъект(НормаПотребленияОбъект) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет информацию о присоединенных файлах в регистре "НаличиеФайлов".
//
Процедура ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов_3_0_66_2() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ПрисоединенныеФайлы КАК УПЖКХ_ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО УПЖКХ_ПрисоединенныеФайлы.ВладелецФайла = НаличиеФайлов.ОбъектСФайлами
	|ГДЕ
	|	НаличиеФайлов.ОбъектСФайлами ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ВладелецФайла");
		Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписиНаличиеФайлов = РегистрыСведений.НаличиеФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиНаличиеФайлов.ОбъектСФайлами       = ВладелецФайла;
		МенеджерЗаписиНаличиеФайлов.ЕстьФайлы            = Истина;
		МенеджерЗаписиНаличиеФайлов.ИдентификаторОбъекта = РаботаСФайламиСлужебный.ПолучитьОчереднойИдентификаторОбъекта();
		
		Если Не ЗаписатьОбъект(МенеджерЗаписиНаличиеФайлов, Истина) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		
		ТекстПредупреждения = "Обработчик обновления ""ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов"" не выполнен!";
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстПредупреждения);
		// ОСОБЕННОСТЬ: в отказ не уходим, так как обработчик не критичный.
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов_3_0_66_2()

// Процедура перезаполняет ошибочное значение настройки варианта загрузки нулевых значений в справочнике "Настройки загрузки и выгрузки".
//
Процедура ПерезаполнитьНастройкуЗагрузкиРеестровПУОВариантеЗагрузкиНулевыхПоказаний_3_0_66_4() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Ссылка,
	|	КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний КАК ВариантЗагрузкиНулевыхПоказаний
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний = &ВариантЗагрузкиНулевыхПоказаний";
	
	Запрос.УстановитьПараметр("ВариантЗагрузкиНулевыхПоказаний","Загружать нулевые как """"Не введено""""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как ""Не введено"""; 
		
		Если Не ЗаписатьОбъект(ОбъектСправочника) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		
		ТекстПредупреждения = "Обработчик обновления ""ПерезаполнитьНастройкуЗагрузкиРеестровПУВариантЗагрузкиНулевыхПоказаний"" не выполнен!";
		
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				, , ТекстПредупреждения);
		// ОСОБЕННОСТЬ: в отказ не уходим, так как обработчик не критичный.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет реквизит "ОтноситсяКМОП" справочника "УПЖКХ_ВидыПомещений".
//
Процедура ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.КВП_ТипыПомещений.МестоОбщегоПользования);
	МассивТипов.Добавить(Перечисления.КВП_ТипыПомещений.ПодсобноеПомещение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипПомещения", МассивТипов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ОтноситсяКМОП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка КАК ВидПомещения
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ТипПомещения В(&ТипПомещения)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗапроса        = РезультатЗапроса[0].Выбрать();
	ВыборкаВидовПомещений = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаЗапроса.Количество() = 0 Тогда
		Пока ВыборкаВидовПомещений.Следующий() Цикл
			
			СправочникОбъект = ВыборкаВидовПомещений.ВидПомещения.ПолучитьОбъект();
			СправочникОбъект.ОтноситсяКМОП = Истина;
			
			Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5()

// Процедура заполняет добавленные ресурсы "СчетаУчетаДляОтраженияПени" и "СтавкаНДСДляОтраженияПени"
// для всех записей регистра сведений "КВП_УчетнаяПолитикаТСЖ".
//
Процедура ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	БылиИзменения = Ложь;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.СчетаУчетаДляОтраженияПени.Пустая() Тогда
			Если Запись.УдалитьОтражатьПениОтдельноОтНачислений Тогда
				Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета;
			Иначе
				Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений;
			КонецЕсли;
			
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если Запись.СтавкаНДСДляОтраженияПени.Пустая() Тогда
			Запись.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.ИзНоменклатуры;
			БылиИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиИзменения И Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ПерезаполнитьСпособОтраженияПениВРеглУчете"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет добавленный ресурс "СчетаУчетаДляОтраженияПениКапремонт"
// для всех записей регистра сведений "КВП_УчетнаяПолитикаТСЖ".
//
Процедура ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	БылиИзменения = Ложь;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.СчетаУчетаДляОтраженияПениКапремонт.Пустая() Тогда
			Если Запись.УдалитьОтражатьПениКапремонтОтдельноОтНачислений Тогда
				Запись.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета;
			Иначе
				Запись.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений;
			КонецЕсли;
			
			БылиИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиИзменения И Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет перенос настроек в новый справочник "УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных".
//
Процедура ВыполнитьПереносНастроекВСправочникУПЖКХ_НастройкиУниверсальнойВыгрузкиДанных_3_0_66_6() Экспорт
	
	// Проверяем наличие элементов справочника "НастройкиУниверсальнойВыгрузкиДанных".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных КАК УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Настройки пользователей получаем без проверки прав.
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		
		НомерЭлемента = 1;
		
		Пока ВыборкаПользователей.Следующий() Цикл
			
			Пользователь = ВыборкаПользователей.Наименование;
			
			// Извлекаем настройки для указанного пользователя.
			СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("УПЖКХ_УниверсальнаяВыгрузкаДанных", , Пользователь);
			
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
				
				СтруктураПараметров.Вставить("Комментарий",  Пользователь);
				СтруктураПараметров.Вставить("Наименование", "Настройка выгрузки №" + НомерЭлемента);
				
				Если НЕ СтруктураПараметров.Свойство("МинимальнаяСуммаДолга") Тогда
					СтруктураПараметров.Вставить("МинимальнаяСуммаДолга", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ОтборПоОтветственномуСобственнику") Тогда
					СтруктураПараметров.Вставить("ОтборПоОтветственномуСобственнику", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыгружатьТолькоСНомерамиТелефонов") Тогда
					СтруктураПараметров.Вставить("ВыгружатьТолькоСНомерамиТелефонов", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ТипВыгрузкиДанныхПоПоказаниямСчетчиков") Тогда
					СтруктураПараметров.Вставить("ТипВыгрузкиДанныхПоПоказаниямСчетчиков", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ТипОтбораПоСуммеДолга") Тогда
					СтруктураПараметров.Вставить("ТипОтбораПоСуммеДолга", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыборЛицевыхСчетов") Тогда
					СтруктураПараметров.Вставить("ВыборЛицевыхСчетов", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыборУслуг") Тогда
					СтруктураПараметров.Вставить("ВыборУслуг", 0);
				КонецЕсли;
				
				НоваяЗапись = Справочники.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПараметров);
				
				Если СтруктураПараметров.Свойство("ВыбранныеЛицевыеСчета")
				   И ТипЗнч(СтруктураПараметров.ВыбранныеЛицевыеСчета) = Тип("СписокЗначений") Тогда
					Для Каждого ТекЛС Из СтруктураПараметров.ВыбранныеЛицевыеСчета Цикл
						Если НЕ ТекЛС.Значение = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
							НоваяЗапись.ВыбранныеЛицевыеСчета.Добавить().ЛицевойСчет = ТекЛС.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтруктураПараметров.Свойство("ВыбранныеУслуги")
				   И ТипЗнч(СтруктураПараметров.ВыбранныеУслуги) = Тип("СписокЗначений") Тогда
					Для Каждого ТекУслуга Из СтруктураПараметров.ВыбранныеУслуги Цикл
						Если НЕ ТекУслуга.Значение = Справочники.КВП_Услуги.ПустаяСсылка() Тогда
							НоваяЗапись.ВыбранныеУслуги.Добавить().Услуга = ТекУслуга.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ЗаписатьОбъект(НоваяЗапись);
				
				НомерЭлемента = НомерЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПереносНастроекВСправочникУПЖКХ_НастройкиУниверсальнойВыгрузкиДанных_3_0_66_6()

// Выполняет установку настройки "ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте".
Процедура ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте_3_0_66_6() Экспорт
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Попытка
		Константы.УПЖКХ_ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте.Установить(Истина);
	Исключение
		ОбработчикВыполненУспешно = Ложь;
	КонецПопытки;
	
КонецПроцедуры // ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте_3_0_66_6()

// Процедура заполняет значения нового ресурса: "КодОрганизацииДляШтрихКодаПоУслугамКР" в записях регистра сведений
// "Настройки формирования платежного документа".
Процедура ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн КАК КодОрганизации,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн = """"
	|	И УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоУслугамКР = """"";
	
	ВыборкаКодов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКодов.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаКодов.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.КодОрганизацииДляОдномерногоШКПоУслугамКР = ВыборкаКодов.КодОрганизации;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбработчикВыполненУспешно Тогда 
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7()"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7()

// Заполняет настройку расчетного счета настроек сбора данных для квитанций и обменов.
//
Процедура ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами_3_0_66_7() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	//1.В запросе получим записи, данные из которых необходимы для дозаполнения табличной части.
	
	//	1)Выберем все записи по регистру УПЖКХ_Начисления в которых заполнена УслугаОснование, регистратором является документ КВП_КорректировкаНачислений,
	// в котором установлен флажок УдалитьУчитыватьЗависимыеУслуги, и СуммаНачисления не равна 0. То есть все данные по зависимым услугам, которые раньше не попадали
	// в табличную част документа.
	//
	//	2)Получаем список документов для дозаполнения. То есть записи по услугам, которые отсутствуют в табличной части документа.
	//
	//	3)Оставляем записи только по документам. выбранным на этапе 2.
	//
	//	4)Выберем из регистра КВП_НачисленныеЛьготы записи по услугам, которых нет в табличной части дакумента.
	//
	//	5)Добавляем в результат запроса данные из регистра КВП_НачисленныеЛьготы. В зависимости от того, была ли установлена настройка 
	// "Учитывать льготы во взаморасчетах" в регистре УПЖКХ_Начисления могла сформироваться или не сформироваться запись. Если данные в таблице Начисления
	// отсутствуют, то заполняем их из таблицы КорректировкаЛьгот.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.РазделУчета КАК РазделУчета,
	|	УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
	|	УПЖКХ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	УПЖКХ_Начисления.ТипНачисления КАК ТипНачисления,
	|	УПЖКХ_Начисления.СуммаНачисления КАК СуммаНачисления,
	|	УПЖКХ_Начисления.Начало КАК Начало,
	|	УПЖКХ_Начисления.Окончание КАК Окончание
	|ПОМЕСТИТЬ врЗаписиСДаннымиПоЗависимымУслугам
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|	И УПЖКХ_Начисления.Регистратор.УдалитьУчитыватьЗависимыеУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врЗаписиСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ДокументыДляДозаполнения
	|ИЗ
	|	врЗаписиСДаннымиПоЗависимымУслугам КАК врЗаписиСДаннымиПоЗависимымУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_КорректировкаНачислений.Корректировки КАК Корректировки
	|		ПО врЗаписиСДаннымиПоЗависимымУслугам.Регистратор = Корректировки.Ссылка
	|			И врЗаписиСДаннымиПоЗависимымУслугам.Услуга = Корректировки.Услуга
	|ГДЕ
	|	Корректировки.Услуга ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЗаписиСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Услуга КАК Услуга,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	врЗаписиСДаннымиПоЗависимымУслугам.УслугаОснование КАК УслугаОснование,
	|	врЗаписиСДаннымиПоЗависимымУслугам.СоставнаяУслуга КАК СоставнаяУслуга,
	|	врЗаписиСДаннымиПоЗависимымУслугам.РазделУчета КАК РазделУчета,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ВидНачисления КАК ВидНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.МесяцНачисления КАК МесяцНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ТипНачисления КАК ТипНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.СуммаНачисления КАК СуммаНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Начало КАК Начало,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Окончание КАК Окончание
	|ПОМЕСТИТЬ Начисления
	|ИЗ
	|	ДокументыДляДозаполнения КАК ДокументыДляДозаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ врЗаписиСДаннымиПоЗависимымУслугам КАК врЗаписиСДаннымиПоЗависимымУслугам
	|		ПО (врЗаписиСДаннымиПоЗависимымУслугам.Регистратор = ДокументыДляДозаполнения.Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачисленныеЛьготы.Период КАК МесяцНачисления,
	|	КВП_НачисленныеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НачисленныеЛьготы.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготы.СоставнаяУслуга КАК СоставнаяУслуга,
	|	КВП_НачисленныеЛьготы.ЛицевойСчет КАК ЛицевойСчет,
	|	-КВП_НачисленныеЛьготы.СуммаНачисления КАК СуммаНачисления,
	|	КВП_НачисленныеЛьготы.Регистратор КАК Регистратор,
	|	КВП_НачисленныеЛьготы.Проживающий КАК Льготник
	|ПОМЕСТИТЬ КорректировкаЛьгот
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы КАК КВП_НачисленныеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_КорректировкаНачислений.Корректировки КАК Корректировки
	|		ПО КВП_НачисленныеЛьготы.Регистратор = Корректировки.Ссылка
	|			И КВП_НачисленныеЛьготы.Услуга = Корректировки.Услуга
	|			И КВП_НачисленныеЛьготы.ЛицевойСчет = Корректировки.ЛицевойСчет
	|			И КВП_НачисленныеЛьготы.СоставнаяУслуга = Корректировки.СоставнаяУслуга
	|			И КВП_НачисленныеЛьготы.Организация = Корректировки.Ссылка.Организация
	|ГДЕ
	|	КВП_НачисленныеЛьготы.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ КВП_НачисленныеЛьготы.СуммаНачисления = 0
	|	И КВП_НачисленныеЛьготы.Регистратор.УдалитьУчитыватьЗависимыеУслуги
	|	И Корректировки.Услуга ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Начисления.Регистратор, КорректировкаЛьгот.Регистратор) КАК Регистратор,
	|	ЕСТЬNULL(Начисления.Услуга, КорректировкаЛьгот.Услуга) КАК Услуга,
	|	ЕСТЬNULL(Начисления.ЛицевойСчет, КорректировкаЛьгот.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(Начисления.СоставнаяУслуга, КорректировкаЛьгот.СоставнаяУслуга) КАК СоставнаяУслуга,
	|	ЕСТЬNULL(Начисления.МесяцНачисления, КорректировкаЛьгот.МесяцНачисления) КАК МесяцНачисления,
	|	ЕСТЬNULL(Начисления.СуммаНачисления, КорректировкаЛьгот.СуммаНачисления) КАК СуммаНачисления,
	|	ЕСТЬNULL(Начисления.УслугаОснование, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК УслугаОснование,
	|	ЕСТЬNULL(Начисления.РазделУчета, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК РазделУчета,
	|	ЕСТЬNULL(Начисления.ВидНачисления, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПустаяСсылка)) КАК ВидНачисления,
	|	ЕСТЬNULL(Начисления.ТипНачисления, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)) КАК ТипНачисления,
	|	ЕСТЬNULL(КорректировкаЛьгот.ЛьготнаяКатегория, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегория,
	|	ЕСТЬNULL(КорректировкаЛьгот.Льготник, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник,
	|	ВЫБОР
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА 1
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|			ТОГДА 2
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|			ТОГДА 3
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Сортировка,
	|	ЕСТЬNULL(Начисления.Начало, НАЧАЛОПЕРИОДА(КорректировкаЛьгот.МесяцНачисления, МЕСЯЦ)) КАК Начало,
	|	ЕСТЬNULL(Начисления.Окончание, КОНЕЦПЕРИОДА(КорректировкаЛьгот.МесяцНачисления, МЕСЯЦ)) КАК Окончание
	|ИЗ
	|	Начисления КАК Начисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ КорректировкаЛьгот КАК КорректировкаЛьгот
	|		ПО Начисления.Регистратор = КорректировкаЛьгот.Регистратор
	|			И Начисления.Услуга = КорректировкаЛьгот.Услуга
	|			И Начисления.ЛицевойСчет = КорректировкаЛьгот.ЛицевойСчет
	|			И Начисления.СоставнаяУслуга = КорректировкаЛьгот.СоставнаяУслуга
	|			И (Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка
	|ИТОГИ ПО
	|	Регистратор";
	
	//ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам).Строки;
	
	//2. Для каждого найденного документа проверяем есть ли по нему записи по льготам с незаполненной услугой-основанием.
	// Если такие строки найдены, то дополняем табличную часть документа зависимыми услугами и для каждой строки без услуги-основания
	// ищем строку с одинаковой суммой льготы и записываем услугу-основание из найденной строки.
	Для Каждого Регистратор Из ВыборкаРегистраторов Цикл
		
		ДокументОбъект = Регистратор.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВидОперации = ДокументОбъект.ВидОперации;
		
		МассивЛьготБезУслугиОснования = Регистратор.Строки.НайтиСтроки(Новый Структура("РазделУчета, УслугаОснование", Перечисления.УПЖКХ_РазделыУчета.Льготы, Справочники.КВП_Услуги.ПустаяСсылка()));
		
		Если Не МассивЛьготБезУслугиОснования.Количество() = 0 Тогда
			
			СписокРеквизитовСумм = Новый Массив();
			СписокРеквизитовСумм.Добавить("СуммаЛьготы");
			
			ТаблицаКорректировки = ДокументОбъект.Корректировки.Выгрузить();
			
			ДополнитьТаблицуУслугЗависимымиУслугами(ДокументОбъект.ДатаКон,
			                                        ДокументОбъект.Организация, 
			                                        ТаблицаКорректировки, 
			                                        СписокРеквизитовСумм, 
			                                        Истина, 
			                                        Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить());
			
			Для Каждого Строка Из МассивЛьготБезУслугиОснования Цикл
				НайденныеСтроки = ТаблицаКорректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, СуммаЛьготы, СоставнаяУслуга, ТипНачисления",
				                                                                    Строка.ЛицевойСчет, Строка.МесяцНачисления, Строка.Услуга, Строка.СуммаНачисления, Строка.СоставнаяУслуга, Строка.ТипНачисления));
				
				Если Не НайденныеСтроки.Количество() = 0 Тогда
					Строка.УслугаОснование = НайденныеСтроки[0].УслугаОснование;
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
		Для Каждого Начисление Из Регистратор.Строки Цикл
			
			Если Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
				// Для раздела учета НачислениеУслуг создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
					ЗаполнитьЗначенияСвойств(Строка, Начисление);
					//Строка.Зависимая = Истина;
				Иначе
					ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
					Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
					Строка.НачалоПериода = Начисление.Начало;
					Строка.КонецПериода  = Начисление.Окончание;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ Тогда
				// Для раздела учета НачислениеПоПУ создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
					ЗаполнитьЗначенияСвойств(Строка, Начисление);
				Иначе
					ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
					Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
					Строка.НачалоПериода    = Начисление.Начало;
					Строка.КонецПериода     = Начисление.Окончание;
					Строка.ВидНачисления    = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка Тогда
				// Для раздела учета КомиссияБанка создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
				Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
				Строка.НачалоПериода    = Начисление.Начало;
				Строка.КонецПериода     = Начисление.Окончание;
				
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени Тогда
				// Для раздела учета Пени ищем строку в табличной части и записываем сумму в колонку СуммаПени.
				Строка = ДокументОбъект.Корректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, СоставнаяУслуга, ТипНачисления",
				                                                  Начисление.ЛицевойСчет, Начисление.МесяцНачисления, Начисление.Услуга, Начисление.УслугаОснование, Начисление.СоставнаяУслуга, Начисление.ТипНачисления));
				Если Не Строка.Количество() = 0 Тогда
					Строка[0].СуммаПени = Начисление.СуммаНачисления;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Льготы Тогда
				// Для раздела учета Льготы ищем строку в табличной части и заполняем колонки СуммаЛьготы, Льготник, ЛьготнаяКатегория
				Строка = ДокументОбъект.Корректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, СоставнаяУслуга, ТипНачисления",
				                                                  Начисление.ЛицевойСчет, Начисление.МесяцНачисления, Начисление.Услуга, Начисление.УслугаОснование, Начисление.СоставнаяУслуга, Начисление.ТипНачисления));
				Если Не Строка.Количество() = 0 Тогда
					Строка[0].СуммаЛьготы       = -Начисление.СуммаНачисления;
					Строка[0].Льготник          = Начисление.Льготник;
					Строка[0].ЛьготнаяКатегория = Начисление.ЛьготнаяКатегория;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ДокументОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами_3_0_66_7()

// Выполняет перенос телефонов жильцов в контактную информацию физ. лиц.
//
Процедура ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	// 1. Получаем всех жильцов с телефонами и их физ. лица.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.УдалитьТелефон КАК Телефон,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.УдалитьТелефон = """"";
	
	ТаблицаЖильцовСТелефонами = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаЖильцовСТелефонами.Количество() = 0 Тогда
		
		// 2. Ищем контакнтую информацию по физ. лицам жильцов.
		МассивФизЛиц = ТаблицаЖильцовСТелефонами.ВыгрузитьКолонку("ФизЛицо");
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
		ТаблицаКИФизЛиц = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбъектов(МассивФизЛиц,, МассивВидовКонтактнойИнформации);
		ТаблицаКИФизЛиц.Индексы.Добавить("Объект, Представление");
		
		// 3. Пробуем парсить телефоны жильцов и отфильтровывать жильцов,
		// у которых номер совпадает с номером физ.лица.
		
		ТаблицаРазличныхТелефонов = ТаблицаЖильцовСТелефонами.СкопироватьКолонки();
		
		СтруктураПоиска = Новый Структура("Объект, Представление");
		
		Для каждого ТекСтрокаЖильца из ТаблицаЖильцовСТелефонами Цикл
			
			СтрокаТелефона         = ТекСтрокаЖильца.Телефон;
			МассивТелефоновВСтроке = СтрРазделить(СтрокаТелефона, ";,|/", Ложь);
			СтруктураПоиска.Объект = ТекСтрокаЖильца.ФизЛицо;
			
			Для Каждого ТекТелефон из МассивТелефоновВСтроке Цикл
				
				ПредставлениеТелефона         = СокрЛП(ТекТелефон);
				СтруктураПоиска.Представление = ПредставлениеТелефона;
				
				НайденныеСтроки = ТаблицаКИФизЛиц.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = ТаблицаРазличныхТелефонов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЖильца);
					
					НоваяСтрока.Телефон = ПредставлениеТелефона;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Если нет телефонов для добавления - не продолжаем.
		Если Не ТаблицаРазличныхТелефонов.Количество() = 0 Тогда
			
			// 4. Определяем необходимость включения возможности добавления нескольких номеров телефонов для жильцов.
			// Включаем настройку, если:
			// - у каких-то физ. лиц уже заполнен домашний телефон.
			// - у какого-то жильца несколько номеров телефонов.
			
			ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Ложь;
			
			ПервыйДомашнийТелефон = ТаблицаКИФизЛиц.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "Вид");
			
			Если ПервыйДомашнийТелефон = Неопределено Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
				|	ТаблицаТелефоновЖильцов.Телефон КАК Телефон,
				|	ТаблицаТелефоновЖильцов.ФизЛицо КАК ФизЛицо
				|ПОМЕСТИТЬ втТаблицаТелефоновЖильцов
				|ИЗ
				|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втТаблицаТелефоновЖильцов.Жилец КАК Жилец,
				|	КОЛИЧЕСТВО(втТаблицаТелефоновЖильцов.Телефон) КАК КоличествоТелефонов
				|ПОМЕСТИТЬ втКоличестваТелефонов
				|ИЗ
				|	втТаблицаТелефоновЖильцов КАК втТаблицаТелефоновЖильцов
				|
				|СГРУППИРОВАТЬ ПО
				|	втТаблицаТелефоновЖильцов.Жилец
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втКоличестваТелефонов.Жилец КАК Жилец,
				|	втКоличестваТелефонов.КоличествоТелефонов КАК КоличествоТелефонов
				|ИЗ
				|	втКоличестваТелефонов КАК втКоличестваТелефонов
				|ГДЕ
				|	втКоличестваТелефонов.КоличествоТелефонов > 1";
				
				Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", ТаблицаРазличныхТелефонов);
				
				ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Не Запрос.Выполнить().Пустой();
				
			Иначе
				
				ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Истина;
				
			КонецЕсли;
			
			// 5. Включаем возможность хранения нескольких домашних телефонов, если нужно.
			Если ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц Тогда
				
				ОбъектКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица.ПолучитьОбъект();
				ОбъектКИ.РазрешитьВводНесколькихЗначений = Истина;
				
				Если Не ЗаписатьОбъект(ОбъектКИ) Тогда
					ОбработчикВыполненУспешно = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// 6. Переносим КИ в физ. лица.
			Если ОбработчикВыполненУспешно Тогда
				Попытка
					Для каждого ТекСтрокаТелефона из ТаблицаРазличныхТелефонов Цикл
						КИТелефона = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ТекСтрокаТелефона.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
						УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ТекСтрокаТелефона.ФизЛицо, КИТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,, Ложь);
					КонецЦикла;
				Исключение
					ОбработчикВыполненУспешно = Ложь;
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5()

// Заполняет новый реквизит "ВариантНачисленияУслуги" справочника "Услуги".
// Реквизит заполняется на основе старого реквизита "ВариантНачисленияПоПУ".
Процедура ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Ссылка,
	|	КВП_Услуги.УдалитьВариантНачисленияПоПУ КАК УдалитьВариантНачисленияПоПУ
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.УдалитьВариантНачисленияПоПУ = """"
	|	И КВП_Услуги.ВариантыНачисленияУслуги = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНачисленияУслуги.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.ПустаяСсылка();
		
		Если Выборка.УдалитьВариантНачисленияПоПУ = "307" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление307;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "344" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление344;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "354" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление354;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "РучнаяНастройка" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.РучнаяНастройка;
		КонецЕсли;
		
		УслугаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УслугаОбъект.ВариантыНачисленияУслуги = ВариантыНачисленияУслуги;
		
		Если Не КВП_ЗаписатьОбъект(УслугаОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9()

// Процедура перезаполняет настройки выгрузки с помощью обработки "Универсальная выгрузка данных".
// Параметр "Счетчик и показание" переименован в "Счетчики и услуги".
// Использование данного параметра позволяет настроить выгрузку сведений по счетчикам и услугам
// раздельными блоками сведений: блок сведений по счетчикам позволяет выгружать сведения о счетчиках и их
// показаниях, блок сведений по услугам позволяет выгружать сведения об услугах и сумме долга по услуге.
//
Процедура ЗаполнитьНастройкиЗагрузкиВыгрузкиДляУниверсальнойВыгрузкиДанных_3_0_68_2() Экспорт
	
	СтруктураЗначенийПолей = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	СпФорматовФайла        = СтруктураЗначенийПолей.СпФорматовФайла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ИзменитьНастройкиПараметраСчетчикиИУслуги,
	|	ЛОЖЬ КАК ИзменитьНастройкиDBF
	|ПОМЕСТИТЬ врСводнаяТаблица
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_НастройкиЗагрузкиВыгрузки.НастройкиСоответствияПолей КАК КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей
	|		ПО КВП_НастройкиЗагрузкиВыгрузки.Ссылка = КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.Ссылка
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных)
	|	И КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.Параметр = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикиИУслуги)
	|	И КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.ПараметрБлокаСведений = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПараметрыБлоковСведенийУниверсальнойВыгрузкиДанных.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ФорматФайла = &ФорматФайлаDBF
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врСводнаяТаблица.Ссылка КАК Ссылка,
	|	МАКСИМУМ(врСводнаяТаблица.ИзменитьНастройкиПараметраСчетчикиИУслуги) КАК ИзменитьНастройкиПараметраСчетчикиИУслуги,
	|	МАКСИМУМ(врСводнаяТаблица.ИзменитьНастройкиDBF) КАК ИзменитьНастройкиDBF
	|ИЗ
	|	врСводнаяТаблица КАК врСводнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	врСводнаяТаблица.Ссылка";
	
	Запрос.УстановитьПараметр("ФорматФайлаDBF", СпФорматовФайла[4].Значение); // "DBF".
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ТипыПараметровБлоковСведений     = Перечисления.УПЖКХ_ТипыПараметровБлоковСведенийУниверсальнойВыгрузкиДанных;
	ПараметрыБлоковСведений          = Перечисления.УПЖКХ_ПараметрыБлоковСведенийУниверсальнойВыгрузкиДанных;
	СписокПараметровБлокаПоСчетчикам = ПараметрыБлоковСведений.СписокПараметровБлокаСведений("Счетчики");
	
	СпИдентификацияПУ           = СтруктураЗначенийПолей.СпИдентификацияПУ;
	СпРазделителейПослеЗначения = СтруктураЗначенийПолей.СпРазделителейПослеЗначения;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИзменитьНастройкиDBF                      = ВыборкаДетальныеЗаписи.ИзменитьНастройкиDBF;
		ИзменитьНастройкиПараметраСчетчикиИУслуги = ВыборкаДетальныеЗаписи.ИзменитьНастройкиПараметраСчетчикиИУслуги;
		
		// Объект справочника "Настройки загрузки / выгрузки данных".
		ОбъектНастройки = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		ТаблицаПараметров              = ОбъектНастройки.НастройкиСоответствияПолей.Выгрузить();
		ИспользоватьРазделительКолонок = ОбъектНастройки.ФорматФайла = СпФорматовФайла[0].Значение;// "TXT".
		ПараметрыУВД                   = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных;
		
		ВнесеныИзменения = Ложь;
		
		Если ИзменитьНастройкиПараметраСчетчикиИУслуги Тогда
			
			Если ИспользоватьРазделительКолонок Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаПараметров Цикл
					Если НЕ СпРазделителейПослеЗначения.НайтиПоЗначению(ТекущаяСтрока.РазделительПослеЗначения) = Неопределено Тогда
						ТекущаяСтрока.РазделительПослеЗначения = ТекущаяСтрока.РазделительПослеЗначения;
					Иначе
						ТекущаяСтрока.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НайденныеСтрокиПараметраСчетчикиИУслуги = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ПараметрыУВД.СчетчикиИУслуги));
			
			Если НайденныеСтрокиПараметраСчетчикиИУслуги.Количество() > 0 Тогда
				
				СтрокаНастройкиВыгрузки = НайденныеСтрокиПараметраСчетчикиИУслуги[0];
				
				НастройкиПоляDBF = Неопределено;
				Если ИзменитьНастройкиDBF Тогда
					НастройкиПоляDBF = СтрокаНастройкиВыгрузки.Удалить_НастройкиПоляDBF.Получить();
					
					Если НЕ (ТипЗнч(НастройкиПоляDBF) = Тип("Структура")
					   И НастройкиПоляDBF.Свойство("ИмяПоляDBFСчетчик") И НастройкиПоляDBF.Свойство("ИмяПоляDBFПоказание")) Тогда
						НастройкиПоляDBF = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				// Блок "Счетчики":
				
				// Основная строка блока "Счетчики":
				
				ОсновнаяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				ОсновнаяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				ОсновнаяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.ОсновнойПоСчетчикам;
				ОсновнаяСтрокаСчетчики.НомерКолонки              = СтрокаНастройкиВыгрузки.НомерКолонки;
				
				// Подстроки блока "Счетчики":
				
				// Параметр "Наименование":
				
				НоваяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				НоваяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				НоваяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.Счетчики;
				НоваяСтрокаСчетчики.НомерКолонки              = 1;
				
				Если СтрокаНастройкиВыгрузки.ИдентификацияПУ = СпИдентификацияПУ[4].Значение Тогда // "номер в ГИС ЖКХ".
					НоваяСтрокаСчетчики.ПараметрБлокаСведений = ПараметрыБлоковСведений.НомерСчетчикаВГИСЖКХ;
				Иначе
					НайденныйЭлемент = СписокПараметровБлокаПоСчетчикам.НайтиПоЗначению(СтрокаНастройкиВыгрузки.ИдентификацияПУ);
					Если НайденныйЭлемент = Неопределено Тогда
						НоваяСтрокаСчетчики.ПараметрБлокаСведений = ПараметрыБлоковСведений.Наименование;
					Иначе
						НоваяСтрокаСчетчики.ПараметрБлокаСведений = НайденныйЭлемент.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если ИзменитьНастройкиDBF И НЕ НастройкиПоляDBF = Неопределено Тогда
					НоваяСтрокаСчетчики.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBFСчетчик;
				КонецЕсли;
				
				Если ИспользоватьРазделительКолонок Тогда
					// Разделитель после поля "Наименование":
					Если СпРазделителейПослеЗначения.НайтиПоЗначению(СтрокаНастройкиВыгрузки.РазделительПослеЗначения) = Неопределено Тогда
						НоваяСтрокаСчетчики.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					Иначе
						НоваяСтрокаСчетчики.РазделительПослеЗначения = СтрокаНастройкиВыгрузки.РазделительПослеЗначения;
					КонецЕсли;
				КонецЕсли;
				
				// Параметр "Показание":
				
				НоваяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				НоваяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				НоваяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.Счетчики;
				НоваяСтрокаСчетчики.НомерКолонки              = 2;
				НоваяСтрокаСчетчики.ПараметрБлокаСведений     = ПараметрыБлоковСведений.Показание;
				
				Если ИзменитьНастройкиDBF И НЕ НастройкиПоляDBF = Неопределено Тогда
					НоваяСтрокаСчетчики.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBFПоказание;
				КонецЕсли;
				
				Если ИспользоватьРазделительКолонок Тогда
					// Разделитель после поля "Показание":
					Если НЕ СпРазделителейПослеЗначения.НайтиПоЗначению(СтрокаНастройкиВыгрузки.РазделительПослеЗначения) = Неопределено Тогда
						НоваяСтрокаСчетчики.РазделительПослеЗначения = СтрокаНастройкиВыгрузки.РазделительПослеЗначения;
					Иначе
						НоваяСтрокаСчетчики.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					КонецЕсли;
				КонецЕсли;
				
				// Удаляем исходную строку, содержащую неактуальные настройки:
				
				Для Каждого ТекущаяСтрока Из НайденныеСтрокиПараметраСчетчикиИУслуги Цикл
					ТаблицаПараметров.Удалить(ТекущаяСтрока);
				КонецЦикла;
				
				ВнесеныИзменения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзменитьНастройкиDBF Тогда
			
			Для Каждого ТекущаяСтрока Из ТаблицаПараметров Цикл
				Если НЕ ТекущаяСтрока.Параметр = ПараметрыУВД.СчетчикиИУслуги Тогда
					
					НастройкиПоляDBF = ТекущаяСтрока.Удалить_НастройкиПоляDBF.Получить();
					
					Если ТипЗнч(НастройкиПоляDBF) = Тип("Структура") И НастройкиПоляDBF.Свойство("ИмяПоляDBF") Тогда
						ТекущаяСтрока.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBF;
						ВнесеныИзменения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВнесеныИзменения Тогда
			ОбъектНастройки.НастройкиСоответствияПолей.Загрузить(ТаблицаПараметров);
		КонецЕсли;
		
		ЗаписатьОбъект(ОбъектНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет регламентное задание загрузки показаний и добавляет регламентное задание загрузки оплат
// для обмена с сервисом "ЖКХ: Личный кабинет".
//
Процедура УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_68_3() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Попытка
		
		// 1. Получаем сохраненные настройки обмена с "ЖКХ: Личный кабинет".
		СохраненнаяНастройка = Константы.УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением.Получить().Получить();
		
		// 2. Проверяем отсутствие регл. задания загрузки оплат и наличие загрузки показаний.
		Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") И Не СохраненнаяНастройка.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокОплаты") Тогда
			
			// 3. Получаем идентификатор регламентного задания загрузок показаний.
			ИдентификаторРегламентногоЗаданияЗагрузокПоказания = Неопределено;
			ИдентификаторРегламентногоЗаданияЗагрузокОплаты    = Неопределено;
			
			СохраненнаяНастройка.Свойство("ИдентификаторРегламентногоЗаданияЗагрузок", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
			
			// 4. Если идентификатор заполнен - продолжаем.
			Если Не ИдентификаторРегламентногоЗаданияЗагрузокПоказания = Неопределено Тогда
				
				// Переполучаем настройки штатным механизмом, чтобы были заполнены все параметры по умолчанию.
				СохраненнаяНастройка = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
				
				РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
				УстановитьПривилегированныйРежим(Истина);
				
				// 5. Получаем регламентное задание загрузки показаний и, если оно заполнено, перезаполняем его
				// наименование и массив параметров.
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
				
				Если Не РегламентноеЗадание = Неопределено Тогда
					
					РегламентноеЗадание.Наименование = "Обмен с мобильным приложением: загрузка показаний счетчиков с сервера";
					
					РегламентноеЗадание.Параметры.Очистить();
					РегламентноеЗадание.Параметры.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера);
					
					Если Не КВП_ЗаписатьОбъект(РегламентноеЗадание) Тогда
						ВызватьИсключение "";
					КонецЕсли;
					
					// 6. Если регламентное задание загрузки показаний используется, заполняем аналогично
					// регламентное задание загрузки оплат.
					Если Не РегламентноеЗадание = Неопределено И РегламентноеЗадание.Использование Тогда
						
						ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("УПЖКХ_ОбменДаннымиСМобильнымПриложением");
						
						// 7. Запишем регламентное задание.
						МассивПараметровРеглЗадания = Новый Массив;
						МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера);
						
						ОбъектЗадания.Наименование  = "Обмен с мобильным приложением: загрузка оплат с сервера";
						ОбъектЗадания.Параметры     = МассивПараметровРеглЗадания;
						ОбъектЗадания.Использование = Истина;
						
						ЗаполнитьЗначенияСвойств(ОбъектЗадания.Расписание, РегламентноеЗадание.Расписание);
						
						Если Не КВП_ЗаписатьОбъект(ОбъектЗадания) Тогда
							ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_67_10"" не выполнен или выполнен с ошибками!");
						КонецЕсли;
						
						ИдентификаторРегламентногоЗаданияЗагрузокОплаты = ОбъектЗадания.УникальныйИдентификатор;
						
					КонецЕсли;
				КонецЕсли;
				
				// 8. Сохраним настройки.
				СохраненнаяНастройка.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокОплаты",    ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
				СохраненнаяНастройка.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокПоказания", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(СохраненнаяНастройка);
				
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработчикВыполненУспешно = Ложь;
	КонецПопытки;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_67_10"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура перезаполняет реквизиты справочника "КВП_Услуги", для услуг с вариантом начисления по формулам Постановления 1708.
//
Процедура ПерезаполнитьЗначенияРеквизитовСправочникаКВП_Услуги() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ВариантыНачисленияУслуги = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ОбработчикВыполненУспешно = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.СоставСуммарногоРасходаИПУДляРаспределения = Перечисления.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему;
		СправочникОбъект.СпособРаспределенияПоказанийНаЛицевыеСчета = Перечисления.УПЖКХ_СпособыУчетаЛСПриРаспределенииКоллективногоСчетчика.ВсеЛицевыеСчета;
		СправочникОбъект.СпособРаспределенияУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади;
		СправочникОбъект.ВидПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь;
		СправочникОбъект.ПриОтсутствииПоказанийСчетчикНеУстановлен = Ложь;
		СправочникОбъект.ВариантРаспределенияРасходаКПУПоТарифам = Перечисления.УПЖКХ_ВариантыРаспределенияРасходаКПУПоТарифам.РаспределениеСуммарногоРасхода;
		СправочникОбъект.НастройкаОграниченияОДНПроцентомСуммарногоИндивидидуальногоРасхода = Ложь;
		
		Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ПерезаполнитьЗначенияРеквизитовСправочникаКВП_Услуги"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значения новых ресурсов: "КодОрганизацииДляQRКодаПоОсн" и "КодОрганизацииДляQRКодаПоУслугамКР"
// в записях регистра сведений "Настройки формирования платежного документа".
//
Процедура ЗаполнитьКодОрганизацииДляQRКодаВНастройкахФормированияПлатежногоДокумента() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн КАК КодОрганизацииПоОсн,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоУслугамКР КАК КодОрганизацииПоУслугамКР,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоОсн = """"
	|			ИЛИ НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляОдномерногоШКПоУслугамКР = """")
	|	И УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляQRКодаПоОсн = """"
	|	И УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляQRКодаПоУслугамКР = """"";
	
	ВыборкаКодов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКодов.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаКодов.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			Если ЗначениеЗаполнено(ВыборкаКодов.КодОрганизацииПоОсн) Тогда
				МенеджерЗаписи.КодОрганизацииДляQRКодаПоОсн = ВыборкаКодов.КодОрганизацииПоОсн;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаКодов.КодОрганизацииПоУслугамКР) Тогда
				МенеджерЗаписи.КодОрганизацииДляQRКодаПоУслугамКР = ВыборкаКодов.КодОрганизацииПоУслугамКР;
			КонецЕсли;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьКодОрганизацииДляQRКодаВНастройкахФормированияПлатежногоДокумента()"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет новый параметр "КодОрганизации" в состав одномерного штрихкода
// в записях регистра сведений "Настройки формирования платежного документа".
//
Процедура ДобавитьПараметрКодОрганизацииВСоставШКВНастройкахФормированияПлатежногоДокумента() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоставШтрихкодаПоОсн ПОДОБНО ""%КодОрганизации%""
	|	И НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоставШтрихкодаПоОсн = """"";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаОрганизаций.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.СоставШтрихкодаПоОсн = "КодОрганизации," + МенеджерЗаписи.СоставШтрихкодаПоОсн;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоставШтрихкодаПоКР ПОДОБНО ""%КодОрганизации%""
	|	И НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоставШтрихкодаПоКР = """"";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаОрганизаций.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.СоставШтрихкодаПоКР = "КодОрганизации," + МенеджерЗаписи.СоставШтрихкодаПоКР;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ДобавитьПараметрКодОрганизацииВНастройкахФормированияПлатежногоДокумента()"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет последовательный вызов процедур обновления подсистемы
// СМС-рассылки при переходе на версию 3.0.70.6.
//
Процедура ДействияВПодсистемеСМСПриОбновленииНа_3_0_70_6() Экспорт
	
	смсОбновлениеИнформационнойБазыСервер.ЗаполнитьОтборКомпоновщикаНастроекСМСВСправочникеПравилаОтбораПолучателейИДокументеСообщение_1_0_2_9();
	смсОбновлениеИнформационнойБазыСервер.ИзменитьСтатусыДокументовВДокументеСМССообщение_1_0_2_11();
	
КонецПроцедуры // ДействияВПодсистемеСМСПриОбновленииНа_3_0_70_6()

// Устанавливает расписание регламентного задания получения сообщений о важных событиях.
//
Процедура УстановитьРасписаниеСлужебногоРеглЗаданияПолученияВажныхСообщенийИВключитьНапоминанияПользователей() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		
		РеглЗадание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Метаданные.РегламентныеЗадания.УПЖКХ_ПодготовкаВажныхСообщений);
		РеглЗадание.Расписание.ПериодНедель      = 1;
		РеглЗадание.Расписание.ПериодПовтораДней = 1;
		РеглЗадание.Записать();
		
		Константы.ИспользоватьНапоминанияПользователя.Установить(Истина);
		
	Исключение
		ОбработчикВыполненУспешно = Ложь;
	КонецПопытки;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьРасписаниеСлужебногоРеглЗаданияПолученияВажныхСообщенийИВключитьНапоминанияПользователей"" не выполнен или выполнен с ошибками!");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки распределения отрицательного ОДН для услуг с вариантом начисления по формулам Постановления 1708.
//
Процедура УстановитьНастройкиРаспределенияОтрицательногоОДНПостановление1708() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ВариантыНачисленияУслуги = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНачисленияУслуги.Постановление1708)
	|	И КВП_Услуги.РазрешитьРаспределениеОтрицательногоРасходаОПУ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		СправочникОбъект.СпособРаспределенияОтрицательныхПоказанийУслугиПоСчетчику = Перечисления.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади;
		СправочникОбъект.ВидПлощадиРаспределенияОтрицательныхПоказаний             = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь;
		СправочникОбъект.РаспределятьТолькоНаЖилыеПомещения                        = Ложь;
		
		Если Не ЗаписатьОбъект(СправочникОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""УстановитьНастройкиРаспределенияОтрицательногоОДНПостановление1708"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в справочник "Ключевые операции" элементы, необходимые для оценки производительности в подсистеме ЖКХ.
//
Процедура ЗаполнитьКлючевыеОперацииЖКХ() Экспорт
	
	// До релиза 3.0.70.11 в типовом справочнике "Ключевые операции" для оценки производельности подсистемы ЖКХ
	// использовались предопределенные элементы - ключевые операции ЖКХ.
	// Далее эти предопределенные элементы были удалены в конфигурации, в БД соответствующие
	// им элементы справочника помечены на удаление.
	//
	// Поэтому алгоритм обработки обновления следующий:
	// 1. Проверяем, имеются ли среди элементов справочника операции, бывшие ранее предопределенными.
	// Если такие элементы определяются, переименовываем их и дозаполняем аналогично
	// типовым ключевым операциям.
	// 2. Проверяем, созданы ли в базе данных все ключевые операции ЖКХ, при необходимости
	// - создаем отсутствующие.
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	ТаблицаКлючевыхОпераций = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьТаблицуКлючевыхОперацийЖКХ();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКлючевыхОпераций.ИмяКлючевойОперации КАК ИмяКлючевойОперации,
	|	ТаблицаКлючевыхОпераций.НаименованиеУстаревшее КАК НаименованиеУстаревшее,
	|	ТаблицаКлючевыхОпераций.ЦелевоеВремя КАК ЦелевоеВремя
	|ПОМЕСТИТЬ втТаблицаКлючевыхОпераций
	|ИЗ
	|	&ТаблицаКлючевыхОпераций КАК ТаблицаКлючевыхОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючевыеОперации.Ссылка КАК Ссылка,
	|	КлючевыеОперации.Наименование КАК Наименование
	|ПОМЕСТИТЬ втКлючевыеОперацииСправочник
	|ИЗ
	|	Справочник.КлючевыеОперации КАК КлючевыеОперации
	|ГДЕ
	|	НЕ КлючевыеОперации.Наименование = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКлючевыхОпераций.ИмяКлючевойОперации КАК ИмяКлючевойОперации,
	|	втТаблицаКлючевыхОпераций.НаименованиеУстаревшее КАК НаименованиеУстаревшее,
	|	втТаблицаКлючевыхОпераций.ЦелевоеВремя КАК ЦелевоеВремя,
	|	ЕСТЬNULL(втКлючевыеОперацииСправочник.Ссылка, ЗНАЧЕНИЕ(Справочник.КлючевыеОперации.ПустаяСсылка)) КАК КлючеваяОперацияСсылка
	|ИЗ
	|	втТаблицаКлючевыхОпераций КАК втТаблицаКлючевыхОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКлючевыеОперацииСправочник КАК втКлючевыеОперацииСправочник
	|		ПО втТаблицаКлючевыхОпераций.НаименованиеУстаревшее = втКлючевыеОперацииСправочник.Наименование";
	Запрос.УстановитьПараметр("ТаблицаКлючевыхОпераций", ТаблицаКлючевыхОпераций);
	
	ТаблицаКлючевыхОперацийРасширенная = Запрос.Выполнить().Выгрузить();
	
	МассивКлючевыхОперацийКПереименованию = Новый Массив;
	МассивКлючевыхОперацийКСозданию       = Новый Массив;
	
	Для Каждого СтрокаТЧ Из ТаблицаКлючевыхОперацийРасширенная Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КлючеваяОперацияСсылка) Тогда
			СтруктураКлючевойОперации = Новый Структура;
			СтруктураКлючевойОперации.Вставить("ИмяКлючевойОперации", СтрокаТЧ.ИмяКлючевойОперации);
			СтруктураКлючевойОперации.Вставить("ЦелевоеВремя",        СтрокаТЧ.ЦелевоеВремя);
			МассивКлючевыхОперацийКСозданию.Добавить(СтруктураКлючевойОперации);
			Продолжить;
		КонецЕсли;
		
		КлючеваяОперацияОбъект = СтрокаТЧ.КлючеваяОперацияСсылка.ПолучитьОбъект();
		КлючеваяОперацияОбъект.Имя             = СтрокаТЧ.НаименованиеУстаревшее;
		КлючеваяОперацияОбъект.ЦелевоеВремя    = СтрокаТЧ.ЦелевоеВремя;
		КлючеваяОперацияОбъект.ПометкаУдаления = Ложь;
		
		ХешMD5 = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешMD5.Добавить(СтрокаТЧ.ИмяКлючевойОперации);
		ИмяХешТемп = ХешMD5.ХешСумма;
		ИмяХеш     = СтрЗаменить(Строка(ИмяХешТемп), " ", "");
		
		КлючеваяОперацияОбъект.ИмяХеш = ИмяХеш;
		
		КлючеваяОперацияОбъект.ОбменДанными.Загрузка = Истина;
		
		Если Не ЗаписатьОбъект(КлючеваяОперацияОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
			Продолжить;
		КонецЕсли;
		
		СтруктураКлючевойОперации = Новый Структура;
		СтруктураКлючевойОперации.Вставить("ИмяКлючевойОперацииСтарое", СтрокаТЧ.НаименованиеУстаревшее);
		СтруктураКлючевойОперации.Вставить("ИмяКлючевойОперацииНовое",  СтрокаТЧ.ИмяКлючевойОперации);
		МассивКлючевыхОперацийКПереименованию.Добавить(СтруктураКлючевойОперации);
		
	КонецЦикла;
	
	Если МассивКлючевыхОперацийКПереименованию.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыСервер.ИзменитьКлючевыеОперации(МассивКлючевыхОперацийКПереименованию);
	КонецЕсли;
	
	// 2. Создание отсутствующих ключевых операций.
	Если МассивКлючевыхОперацийКСозданию.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыСервер.СоздатьКлючевыеОперации(МассивКлючевыхОперацийКСозданию);
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ЗаполнитьКлючевыеОперацииЖКХ"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКлючевыеОперацииЖКХ()

// Заполняет новый реквизит "ВариантКорректировкиУслуг" документа "КВП_КорректировкаНачислений".
Процедура ЗаполнитьЗначениеРеквизитаВариантКорректировкиУслуг(Параметры) Экспорт
	
	// Заполняется прогресс-бар.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_КорректировкаНачислений.Ссылка) КАК КоличествоДокументов
		|ИЗ
		|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
		|ГДЕ
		|	КВП_КорректировкаНачислений.ВариантКорректировкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		// Если документов нет, то обработка завершена.
		Если Выборка.КоличествоДокументов = 0 Тогда
			Параметры.ОбработкаЗавершена = Истина;
			Возврат;
		КонецЕсли;
		
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.КоличествоДокументов;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КВП_КорректировкаНачислений.УдалитьКорректироватьЗависимыеУслуги КАК УдалитьКорректироватьЗависимыеУслуги,
	|	КВП_КорректировкаНачислений.УдалитьУчитыватьЗависимыеУслуги КАК УдалитьУчитыватьЗависимыеУслуги,
	|	КВП_КорректировкаНачислений.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
	|ГДЕ
	|	КВП_КорректировкаНачислений.ВариантКорректировкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_КорректировкаНачислений.Дата УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Если документов нет, то обработка завершена.
	Если Выборка.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Ложь;
	ОбработаноВТекущемПакете     = 0;
	КоличествоОшибок             = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.УдалитьКорректироватьЗависимыеУслуги Тогда
			ДокументОбъект.ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ЗависимыеУслуги;
		ИначеЕсли Выборка.УдалитьУчитыватьЗависимыеУслуги Тогда
			ДокументОбъект.ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеИЗависимые;
		Иначе
			ДокументОбъект.ВариантКорректировкиУслуг = Перечисления.УПЖКХ_ВариантыНастройкиКорректировкиУслуг.ОсновныеУслуги;
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Если ЗаписатьОбъект(ДокументОбъект) Тогда
			ОбработаноВТекущемПакете = ОбработаноВТекущемПакете + 1;
		Иначе
			КоличествоОшибок = КоличествоОшибок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = Параметры.ПрогрессВыполнения.ВсегоОбъектов + ОбработаноВТекущемПакете;
	
	Если КоличествоОшибок > 0 Тогда
		ВызватьИсключениеПриОбновлении("При выполнении обработчика ""ЗаполнитьЗначениеРеквизитаВариантКорректировкиУслуг"" возникло" + КоличествоОшибок + " ошибок!");
	КонецЕсли;
	
КонецПроцедуры

// Меняет реквизит "ФормаКвитанции" регистра сведений "УПЖКХ_НастройкиФормированияПлатежногоДокумента" со СтандартныйКР на Стандартный43Пр.
// 
Процедура ИзменитьФормуПлатежногоДокументаВНастройкахФормированияПлатежногоДокумента() Экспорт
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	               |ГДЕ
	               |	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный43Пр;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			Иначе
				// Если форма квитанции поменялась, то показываем предупреждение пользователю.
				// см. ОбновлениеИнформационнойБазыКлиент.ПоказатьОписаниеИзмененийСистемы()
				УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПоказатьСообщениеОбУдаленииФормыПлатежногоДокумента", "Показать", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ВызватьИсключениеПриОбновлении("Обработчик обновления ""ИзменитьФормуПлатежногоДокументаВНастройкахФормированияПлатежногоДокумента"" не выполнен!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
