
///////////////////////////////////////////////////////////////////
// ДЛЯ ЖКХ 3.0

#Область СлужебныеПроцедурыИФункции

// Функция возвращает таблицу значений заданной структуры, которая будет использоваться 
// при подготовке данных с описанием изменений.
//
Функция ПолучитьСтруктуруТаблицыСОписаниемИзменений()
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Сборка");
	ТаблицаИзменений.Колонки.Добавить("Раздел");
	ТаблицаИзменений.Колонки.Добавить("Описание");
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Функция возвращает таблицу значений заданной структуры, которая будет использоваться 
// при подготовке данных об ощибках.
//
Функция ПолучитьСтруктуруТаблицыОшибок()
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ТипОшибки");
	ТаблицаОшибок.Колонки.Добавить("ОписаниеОшибки");
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Фиксирует ошибку в таблице ошибок.
Процедура ЗафиксироватьОшибку(ТаблицаОшибок, ТипОшибки, ОписаниеОшибки)
	
	СтрокаОшибки = ТаблицаОшибок.Добавить();
	СтрокаОшибки.ТипОшибки      = ТипОшибки;
	СтрокаОшибки.ОписаниеОшибки = ОписаниеОшибки;
	
КонецПроцедуры

// Проверяет роли на право интерактивного удаления.
Процедура ВыполнитьПроверкуРолей(ТаблицаОшибок)
	
	СписокТиповОбъектов = Новый Массив;
	СписокТиповОбъектов.Добавить("ПланыОбмена");
	СписокТиповОбъектов.Добавить("Справочники");
	СписокТиповОбъектов.Добавить("Документы");
	СписокТиповОбъектов.Добавить("ПланыВидовХарактеристик");
	СписокТиповОбъектов.Добавить("ПланыСчетов");
	СписокТиповОбъектов.Добавить("ПланыВидовРасчета");
	СписокТиповОбъектов.Добавить("БизнесПроцессы");
	СписокТиповОбъектов.Добавить("Задачи");
	
	СписокОбъектовДляПроверки = Новый Массив;
	
	Для Каждого ТекТипОбъекта Из СписокТиповОбъектов Цикл
		
		Для Каждого ТекСправочник Из Метаданные[ТекТипОбъекта] Цикл
			СписокОбъектовДляПроверки.Добавить(ТекСправочник);
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекРоль Из Метаданные.Роли Цикл
		
		Для Каждого ТекОбъект Из СписокОбъектовДляПроверки Цикл
			Если ПравоДоступа("ИнтерактивноеУдаление", ТекОбъект, ТекРоль) Тогда
				ЗафиксироватьОшибку(ТаблицаОшибок, 
									"Роли", 
									"В роли """ + ТекРоль + """ обнаружено использование права ""Интерактивное удаление"" для объекта - " + ТекОбъект.ПолноеИмя() + ".");
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуПлановОбмена(ТаблицаОшибок)
	
	////////////////////////////////////////
	// План обмена "Полный"
	
	// Проверка плана обмена по подпискам.
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.Полный;
	
	СписокПодписок = Новый Массив;
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрация);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияДокумента);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияКонстанты);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияНабора);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияУдаления);
	
	ПроверитьВхождениеОбъектаВПланОбменаПоСоставуПодписки(ТаблицаОшибок, СписокПодписок, МетаданныеПланаОбмена);
	
	// Проверка подписок по плану обмена.
	Для Каждого ТекОбъект Из МетаданныеПланаОбмена.Состав Цикл
		
		ИмяОбъекта = ТекОбъект.Метаданные.ПолноеИмя();
		
		МассивПодписокДляПроверки = Новый Массив;
		Если СтрНайти(ИмяОбъекта, "Справочник.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрация);
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияУдаления);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "РегистрСведений.") > 0
			  Или СтрНайти(ИмяОбъекта, "РегистрНакопления.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияНабора);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "Документ.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияДокумента);
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияУдаления);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "Константа.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПолныйРегистрацияКонстанты);
			
		КонецЕсли;
		
		// Обработка подписок, в которых должен содержаться объект.
		Для Каждого МетаданныеПодписки Из МассивПодписокДляПроверки Цикл
			ПроверитьВхождениеОбъектаВПодпискуПоСоставуПланаОбмена(ТаблицаОшибок, ТекОбъект, МетаданныеПодписки, МетаданныеПланаОбмена);
		КонецЦикла;
		
	КонецЦикла;
	
	////////////////////////////////////////
	// План обмена "По организации"
	
	// Проверка плана обмена по подпискам.
	СписокПодписок = Новый Массив;
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрация);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияДокумента);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияКонстанты);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияНабора);
	СписокПодписок.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияУдаления);
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена.ПоОрганизации;
	
	ПроверитьВхождениеОбъектаВПланОбменаПоСоставуПодписки(ТаблицаОшибок, СписокПодписок, Метаданные.ПланыОбмена.ПоОрганизации);
	
	// Проверка подписок по плану обмена.
	Для Каждого ТекОбъект Из МетаданныеПланаОбмена.Состав Цикл
		
		ИмяОбъекта = ТекОбъект.Метаданные.ПолноеИмя();
		
		МассивПодписокДляПроверки = Новый Массив;
		Если СтрНайти(ИмяОбъекта, "Справочник.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрация);
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияУдаления);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "РегистрСведений.") > 0
			  Или СтрНайти(ИмяОбъекта, "РегистрНакопления.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияНабора);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "Документ.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияДокумента);
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияУдаления);
			
		ИначеЕсли СтрНайти(ИмяОбъекта, "Константа.") > 0 Тогда
			
			МассивПодписокДляПроверки.Добавить(Метаданные.ПодпискиНаСобытия.ПоОрганизацииРегистрацияКонстанты);
			
		КонецЕсли;
		
		// Обработка подписок, в которых должен содержаться объект.
		Для Каждого МетаданныеПодписки Из МассивПодписокДляПроверки Цикл
			ПроверитьВхождениеОбъектаВПодпискуПоСоставуПланаОбмена(ТаблицаОшибок, ТекОбъект, МетаданныеПодписки, МетаданныеПланаОбмена);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет состав плана обмена по подпискам.
Процедура ПроверитьВхождениеОбъектаВПланОбменаПоСоставуПодписки(ТаблицаОшибок, СписокПодписок, МетаданныеПланаОбмена)
	
	Для Каждого ТекИсточник Из СписокПодписок Цикл
		Для Каждого ТекТип Из ТекИсточник.Источник.Типы() Цикл
			МетаданныеТекТипа = Метаданные.НайтиПоТипу(ТекТип);
			Если Не МетаданныеПланаОбмена.Состав.Содержит(МетаданныеТекТипа) Тогда
				ЗафиксироватьОшибку(ТаблицаОшибок,
									"Планы обмена", 
									"Подписка """ + ТекИсточник.Имя + """: источник """ + МетаданныеТекТипа.ПолноеИмя() + """ не найден в составе плана обмена """ + МетаданныеПланаОбмена.Имя + """.");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет состав подписки по плану обмена.
Процедура ПроверитьВхождениеОбъектаВПодпискуПоСоставуПланаОбмена(ТаблицаОшибок, ТекущийОбъект, МетаданныеПодписки, МетаданныеПланаОбмена)
	
	ОбъектОтсутствуетВПодписке = Истина;
	
	МассивТипов = МетаданныеПодписки.Источник.Типы();
	Для Каждого ТекТип Из МассивТипов Цикл
		Если Метаданные.НайтиПоТипу(ТекТип) = ТекущийОбъект.Метаданные Тогда
			ОбъектОтсутствуетВПодписке = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбъектОтсутствуетВПодписке Тогда
		ЗафиксироватьОшибку(ТаблицаОшибок,
							"Планы обмена", 
							"План обмена """ + МетаданныеПланаОбмена.Имя + """: объект """ + ТекущийОбъект.Метаданные.ПолноеИмя() + """ не найден в составе подписки """ + МетаданныеПодписки.Имя + """.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Функция получает номер версии типовой конфигурации по номеру версии
// тиражной конфигурации.
//
// Параметры:
//  ВерсияЖКХ – Строка – номер версии конфигурации "1С:Учет в управляющих компаниях ЖКХ, ТСЖ и ЖСК".
//
// Возвращаемое значение:
//  Строка – номер версии конфигурации "Бухгалтерия предприятия".
//
Функция ПолучитьНомерВерсииТиповойКонфигурации(ВерсияЖКХ) Экспорт
	
	Возврат КВП_ПрочиеПроцедурыИФункции.НомерВерсииТиповойКонфигурации(ВерсияЖКХ);
	
КонецФункции

// Функция выполняет сбор данных с описанием изменений системы для подготовки релиза
// и возвращает таблицу с описанием и данными по сборке и разделу.
//
Функция ПолучитьОписаниеИзмененийРелиза(Знач НомерРелиза) Экспорт
	
	ТаблицаИзменений = ПолучитьСтруктуруТаблицыСОписаниемИзменений();
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("УПЖКХ_ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	Иначе
		Возврат ТаблицаИзменений;
	КонецЕсли;
	
	Если СтрНайти(НомерРелиза, ".") > 0 Тогда
		НомерРелиза = СтрЗаменить(НомерРелиза, ".", "");
	КонецЕсли;
	
	ОписаниеОбновленийРелиза = МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза);
	
	ТекущаяСборка = "";
	ТекущийРаздел = "";
	
	ЦветФонаСборки  = Новый Цвет(131, 131, 131);
	ЦветФонаРаздела = Новый Цвет(192, 192, 192);
	
	Для Строка = 1 по ОписаниеОбновленийРелиза.ВысотаТаблицы Цикл
		
		Ячейка      = ОписаниеОбновленийРелиза.Область(Строка, 2, Строка, 2);
		ТекстСтроки = Ячейка.Текст;
		Если ТекстСтроки = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ячейка.ЦветФона = ЦветФонаСборки Тогда // Это заголовок сборки.
			
			ТекущаяСборка = ТекстСтроки;
			
		ИначеЕсли Ячейка.ЦветФона = ЦветФонаРаздела Тогда // Это заголовок раздела.
			
			ТекущийРаздел = ТекстСтроки;
			
		Иначе // Это описание.
			
			НоваяСтрока = ТаблицаИзменений.Добавить();
			НоваяСтрока.Сборка   = ТекущаяСборка;
			НоваяСтрока.Раздел   = ТекущийРаздел;
			НоваяСтрока.Описание = ТекстСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Функция выполняет проверку конфигурации на наличие ошибок
// и возвращает таблицу с описанием ошибок.
//
Функция ВыполнитьПроверкуНаНаличиеОшибок() Экспорт
	
	ТаблицаОшибок = ПолучитьСтруктуруТаблицыОшибок();
	
	ВыполнитьПроверкуРолей(ТаблицаОшибок);
	
	ВыполнитьПроверкуПлановОбмена(ТаблицаОшибок);
	
	Возврат ТаблицаОшибок;
	
КонецФункции

#КонецОбласти