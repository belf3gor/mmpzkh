
#Область ПроцедурыИФукнцииРаботыСНастройками

// Получает настройки работы с помощником интеграции.
Функция ПолучитьНастройкиИнтеграцииССервисамиСбораПоказанийСчетчиков(СистемаСбораПоказанийСчетчиков) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Если СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Саурес Тогда
		СтруктураНастроек = Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковСаурес.Получить().Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			Если НЕ СтруктураНастроек.Свойство("ТекущаяСтраница") Тогда
				СтруктураНастроек.Вставить("ТекущаяСтраница", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница);
			КонецЕсли;
			Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеОбмена") Тогда
				СтруктураНастроек.Вставить("РегламентноеЗаданиеОбмена", Неопределено);
			КонецЕсли;
		Иначе
			СтруктураНастроек = Новый Структура("ТекущаяСтраница, РегламентноеЗаданиеОбмена", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница, Неопределено);
		КонецЕсли;
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ Тогда
		СтруктураНастроек = Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковНЦРЭ.Получить().Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			Если НЕ СтруктураНастроек.Свойство("ТекущаяСтраница") Тогда
				СтруктураНастроек.Вставить("ТекущаяСтраница", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница);
			КонецЕсли;
			Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеОбмена") Тогда
				СтруктураНастроек.Вставить("РегламентноеЗаданиеОбмена", Неопределено);
			КонецЕсли;
		Иначе
			СтруктураНастроек = Новый Структура("ТекущаяСтраница, РегламентноеЗаданиеОбмена", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница, Неопределено);
		КонецЕсли;
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Болид Тогда
		СтруктураНастроек = Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковБолид.Получить().Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			Если НЕ СтруктураНастроек.Свойство("ТекущаяСтраница") Тогда
				СтруктураНастроек.Вставить("ТекущаяСтраница", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница);
			КонецЕсли;
			Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеОбмена") Тогда
				СтруктураНастроек.Вставить("РегламентноеЗаданиеОбмена", Неопределено);
			КонецЕсли;
		Иначе
			СтруктураНастроек = Новый Структура("ТекущаяСтраница, РегламентноеЗаданиеОбмена", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница, Неопределено);
		КонецЕсли;
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Меркурий Тогда
		СтруктураНастроек = Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковМеркурий.Получить().Получить();
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			Если НЕ СтруктураНастроек.Свойство("ТекущаяСтраница") Тогда
				СтруктураНастроек.Вставить("ТекущаяСтраница", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница);
			КонецЕсли;
			Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеОбмена") Тогда
				СтруктураНастроек.Вставить("РегламентноеЗаданиеОбмена", Неопределено);
			КонецЕсли;
		Иначе
			СтруктураНастроек = Новый Структура("ТекущаяСтраница, РегламентноеЗаданиеОбмена", Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Сохраняет структуру с настройками.
//
Процедура УстановитьНастройкиИнтеграцииCСервисамиОбменаПоказанийСчетчиков(НастройкиДляСохранения, СистемаСбораПоказанийСчетчиков) Экспорт
	
	// Важно учесть, что набор настроек динамичен, т.е. для корректной работы не обязательно передавать весь набор настроек.
	// Отсутствующие ранее настройки добавляются в сохраняемые настройки.
	// Состав настроек, кроме основных настроек, может включать любой набор настроек.
	
	Если ТипЗнч(НастройкиДляСохранения) = Тип("Структура") Тогда
		
		// Получаем сохраненные ранее настройки и меняем данные выборочно.
		СохраненныеНастройки = ПолучитьНастройкиИнтеграцииССервисамиСбораПоказанийСчетчиков(СистемаСбораПоказанийСчетчиков);
		
		// Заполняем.
		ЗаполнитьЗначенияСвойств(СохраненныеНастройки, НастройкиДляСохранения);
		
		// Сохраняем.
		ПараметрыДляСохранения = Новый ХранилищеЗначения(СохраненныеНастройки);
		
		Если СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Саурес Тогда
			Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковСаурес.Установить(ПараметрыДляСохранения);
		ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ Тогда
			Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковНЦРЭ.Установить(ПараметрыДляСохранения);
		ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Болид Тогда
			Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковБолид.Установить(ПараметрыДляСохранения);
		ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Меркурий Тогда
			Константы.УПЖКХ_НастройкиИнтеграцииССервисомСбораПоказанийСчетчиковМеркурий.Установить(ПараметрыДляСохранения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ПрочиеПроцедурыИФукнции

// Формирует таблицу со сведениями об ИНН организаций.
Процедура ЗаполнитьСведенияОбОрганизациях(ТаблицаСведений) Экспорт
	
	ТаблицаСведений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК ОрганизацияСсылка,
	|	ВЫБОР
	|		КОГДА Организации.ИНН = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИННЗаполнен,
	|	Организации.Наименование КАК ОрганизацияНаименование,
	|	Организации.Код КАК КодОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСведений.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицу со сведениями о заводских номерах счетчиков.
Процедура ЗаполнитьСведенияОСчетчиках(ВсегоСчетчиков, СчетчикиБезЗаводскихНомеров, ВсегоСчетчиковБезЗаводскихНомеров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Счетчики.Ссылка КАК Счетчик,
	|	ВЫБОР
	|		КОГДА КВП_Счетчики.ЗаводскойНомер = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаводскойНомерЗаполнен
	|ИЗ
	|	Справочник.КВП_Счетчики КАК КВП_Счетчики
	|ГДЕ
	|	НЕ КВП_Счетчики.ПометкаУдаления
	|	И НЕ КВП_Счетчики.ЭтоГруппа";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ВсегоСчетчиков = Таблица.Количество();
	
	Таблица.Индексы.Добавить("ЗаводскойНомерЗаполнен");
	СтрокиБезЗаводскихНомеров  = Таблица.НайтиСтроки(Новый Структура("ЗаводскойНомерЗаполнен", Ложь));
	ТаблицаБезЗаводскихНомеров = Таблица.Скопировать(СтрокиБезЗаводскихНомеров);
	СчетчикиБезЗаводскихНомеров.ЗагрузитьЗначения(ТаблицаБезЗаводскихНомеров.ВыгрузитьКолонку("Счетчик"));
	
	ВсегоСчетчиковБезЗаводскихНомеров = СчетчикиБезЗаводскихНомеров.Количество();
	
КонецПроцедуры

// Подготавливает таблицу, в которую будут записаны сведения с сервиса.
Функция ПодготовитьТаблицуДанных() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.Ссылка КАК СсылкаНаОрганизацию,
	|	Организации.ИНН КАК ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ИНН = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИННЗаполнен
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Таблица.Колонки.Добавить("СтруктураСведений",       Новый ОписаниеТипов("Структура"));
	Таблица.Колонки.Добавить("НеУдалосьПолучитьДанные", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ФайлОбмена",              Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("СведенияОбОшибках",       Новый ОписаниеТипов("Строка"));
	
	Возврат Таблица;
	
КонецФункции

// Записывает сведения об обмене в журнал.
Процедура ЗаписатьСведенияВЖурналОбмена(СтрокаДанных, ДанныеЗагружены, ОписаниеПроблемы, НазваниеСистемыПроизводителейСчетчиков) Экспорт
	
	Если СтрокаДанных.НеУдалосьПолучитьДанные Тогда
		// Если не удалось получить данные с сервиса.
		Если СтрокаДанных.ИННЗаполнен Тогда
			СтруктураОтвета = СтрокаДанных.СтруктураСведений;
			
			СформироватьЗаписьВЖурналеОбмена(СтрокаДанных.СсылкаНаОрганизацию, ДанныеЗагружены, ОписаниеПроблемы, Неопределено, Ложь, НазваниеСистемыПроизводителейСчетчиков);
			
		Иначе
			СформироватьЗаписьВЖурналеОбмена(СтрокаДанных.СсылкаНаОрганизацию, ДанныеЗагружены, "Не указан ИНН организации.", Неопределено, Ложь, НазваниеСистемыПроизводителейСчетчиков);
		КонецЕсли;
		
	Иначе
		СформироватьЗаписьВЖурналеОбмена(СтрокаДанных.СсылкаНаОрганизацию, ДанныеЗагружены, ОписаниеПроблемы, СтрокаДанных.ФайлОбмена, Истина, НазваниеСистемыПроизводителейСчетчиков);
	КонецЕсли;
	
КонецПроцедуры

// Создает запись в журнале обмена.
Процедура СформироватьЗаписьВЖурналеОбмена(Организация, ВыполненоУспешно, ОписаниеОшибки, ФайлОбмена, ЕстьФайлОбмена, НазваниеСистемыПроизводителейСчетчиков)
	
	ДатаОбмена = ТекущаяДата();
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЖурналОбменаССервисомСбораПоказанийСчетчиков.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДатаОбмена.Установить(ДатаОбмена);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Прочитать();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ДатаОбмена            = ДатаОбмена;
	НоваяЗапись.Организация           = Организация;
	НоваяЗапись.ПроизводителиСервиса  = ПолучитьСистемуСбораПоказанийСчетчиковПоСтроковомуПредставлению(НазваниеСистемыПроизводителейСчетчиков);
	НоваяЗапись.Статус                = ВыполненоУспешно;
	НоваяЗапись.Ошибка                = ОписаниеОшибки;
	
	Если ФайлОбмена = Неопределено Или ПустаяСтрока(ФайлОбмена) Тогда
		НоваяЗапись.ЕстьФайлОбмена = Ложь;
	Иначе
		НоваяЗапись.ЕстьФайлОбмена = Истина;
		НоваяЗапись.ФайлОбмена     = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлОбмена));
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Загружает показания счетчиков в базу данных.
Процедура ЗагрузитьПоказанияВБазу(СтруктураДанных, НаименованиеОрганизации, ДанныеЗагружены, ОписаниеПроблемы) Экспорт
	
	// Если есть какие-то проблемы с файлом обмена или на сервисе нет счетчиков по текущей организации.
	Если Не СтруктураДанных.Свойство("data") Или СтруктураДанных.data.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для организации " + НаименованиеОрганизации + " на сервисе нет сведений о показаниях счетчиков. Данные не загружены.");
		ОписаниеПроблемы = "На сервисе нет сведений о счетчиках.";
		ДанныеЗагружены  = Ложь;
		Возврат;
	КонецЕсли;
	
	// Обрабатываем данные с сервиса: отсекаем неккоректные данные.
	ТаблицаСведений = СформироватьТаблицуСОбработаннымиДаннымиССервиса(СтруктураДанных);
	Если ТаблицаСведений.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для организации " + НаименованиеОрганизации + " нет сведений, пригодных для загрузки. Данные не загружены.");
		ОписаниеПроблемы = "Нет сведений, пригодных для загрузки.";
		ДанныеЗагружены  = Ложь;
		Возврат;
	КонецЕсли;
	
	КоличествоСозданныхДокументов = 0;
	СоздатьДокументыВводаПоказанийСчетчиков(ТаблицаСведений, КоличествоСозданныхДокументов);
	Если КоличествоСозданныхДокументов = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данные не загружены.");
		ОписаниеПроблемы = "Не удалось создать документы ввода показаний счетчиков.";
		ДанныеЗагружены = Ложь;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные загружены.");
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает данные с сервиса: отсекает некорректные данные, которые не удастся загрузить в базу:
//  1. Данные, которые имеют некорректный формат.
//  2. Не полностью заполненные данные.
//  3. Данные не соответствующие учетным данным (отсутствуют счетчик в БД,
//     счетчик не установлен на объект, показания уже загружены ранее).
//
Функция СформироватьТаблицуСОбработаннымиДаннымиССервиса(СтруктураДанных)
	
	ТаблицаСведенийССервиса = Новый ТаблицаЗначений;
	ТаблицаСведенийССервиса.Колонки.Добавить("ДатаПоказаний",    Новый ОписаниеТипов("Дата"));
	ТаблицаСведенийССервиса.Колонки.Добавить("ЗаводскойНомер",   Новый ОписаниеТипов("Строка"));
	ТаблицаСведенийССервиса.Колонки.Добавить("ДневноеПоказание", Новый ОписаниеТипов("Число"));
	ТаблицаСведенийССервиса.Колонки.Добавить("НочноеПоказание",  Новый ОписаниеТипов("Число"));
	ТаблицаСведенийССервиса.Колонки.Добавить("ПиковоеПоказание", Новый ОписаниеТипов("Число"));
	ТаблицаСведенийССервиса.Колонки.Добавить("ЕстьОшибки",       Новый ОписаниеТипов("Булево"));
	
	// Проводим начальную проверку данных: на заполненность обязательных сведений и корректность формата данных.
	ЗаполнитьТаблицуОбработаннымиДаннымиССервиса(СтруктураДанных, ТаблицаСведенийССервиса);
	
	СтрокиСведенийБезОшибок  = ТаблицаСведенийССервиса.НайтиСтроки(Новый Структура("ЕстьОшибки", Ложь));
	ТаблицаСведенийБезОшибок = ТаблицаСведенийССервиса.Скопировать(СтрокиСведенийБезОшибок);
	
	// Проводим проверку на соответствие данных с сервиса данным в базе.
	ПроверитьСведенияНаСоответствиеУчетнымДанным(ТаблицаСведенийБезОшибок);
	
	Возврат ТаблицаСведенийБезОшибок;
	
КонецФункции

// Проверяет полученные с сервиса данные на их корректность.
//  1. На корректность формата данных.
//  2. На заполненность обязательных данных.
//
Процедура ЗаполнитьТаблицуОбработаннымиДаннымиССервиса(СтруктураДанных, ТаблицаСведенийССервиса)
	
	Для Каждого СведенияОСчетчике Из СтруктураДанных.data Цикл
		ЗаводскойНомер   = "";
		ДатаПоказаний    = Дата(1, 1, 1);
		ДневноеПоказание = 0;
		НочноеПоказание  = 0;
		ПиковоеПоказание = 0;
		ЕстьОшибки       = Ложь;
		
		// Проверяем наличие заводского номера.
		Если ПустаяСтрока(СведенияОСчетчике.meter_sn) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика не указан серийный номер. Данные по счетчику не загружены.");
			ЕстьОшибки = Истина;
		Иначе
			ЗаводскойНомер = СведенияОСчетчике.meter_sn;
		КонецЕсли;
		
		// Проверяем наличие даты показаний.
		Если ПустаяСтрока(СведенияОСчетчике.readout_dt) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика" + ?(ПустаяСтрока(СведенияОСчетчике.meter_sn), "", " с заводским номером " + СведенияОСчетчике.meter_sn)
															 + " не указана дата показаний. Данные по счетчику не загружены.");
			ЕстьОшибки = Истина;
		Иначе
			ДатаПоказаний = ПолучитьДатуПоказаний(СведенияОСчетчике.readout_dt);
			Если ДатаПоказаний = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика" + ?(ПустаяСтрока(СведенияОСчетчике.meter_sn), "", " с заводским номером " + СведенияОСчетчике.meter_sn)
																 + " не удалось определить дату показаний. Данные по счетчику не загружены.");
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Проверяем наличие показаний.
		Если СведенияОСчетчике.Свойство("value") Тогда
			ДневноеПоказание = ПолучитьПоказаниеСчетчика(СведенияОСчетчике.value);
			Если ДневноеПоказание = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика" + ?(ПустаяСтрока(СведенияОСчетчике.meter_sn), "", " с заводским номером " + СведенияОСчетчике.meter_sn)
																 + " не удалось определить показание. Данные по счетчику не загружены.");
				ЕстьОшибки = Истина;
			КонецЕсли;
		ИначеЕсли СведенияОСчетчике.Свойство("values") Тогда
			Для Каждого ТекущийВидТарифа Из СведенияОСчетчике.values Цикл
				Показание = ПолучитьПоказаниеСчетчика(ТекущийВидТарифа.value);
				Если Показание = Неопределено Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика" + ?(ПустаяСтрока(СведенияОСчетчике.meter_sn), "", " с заводским номером " + СведенияОСчетчике.meter_sn)
																	 + " не удалось определить показание. Данные по счетчику не загружены.");
					ЕстьОшибки = Истина;
				Иначе
					Если ТекущийВидТарифа.Ключ = "Т2" Тогда
						НочноеПоказание = Показание;
					ИначеЕсли ТекущийВидТарифа.Ключ = "Т3" Тогда
						ПиковоеПоказание = Показание;
					Иначе
						ДневноеПоказание = Показание;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика" + ?(ПустаяСтрока(СведенияОСчетчике.meter_sn), "", " с заводским номером " + СведенияОСчетчике.meter_sn)
															 + " не указаны показания. Данные по счетчику не загружены.");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если Не ЕстьОшибки Тогда
			НоваяСтрока = ТаблицаСведенийССервиса.Добавить();
			НоваяСтрока.ЗаводскойНомер   = ЗаводскойНомер;
			НоваяСтрока.ДатаПоказаний    = ДатаПоказаний;
			НоваяСтрока.ДневноеПоказание = ДневноеПоказание;
			НоваяСтрока.НочноеПоказание  = НочноеПоказание;
			НоваяСтрока.ПиковоеПоказание = ПиковоеПоказание;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяем полученные с сервиса данные на их совместимость с учетными данными в базе.
//  1. На наличие счетчика в базе
//  2. На действие счетчика
//  3. На актуальность показаний
//
Процедура ПроверитьСведенияНаСоответствиеУчетнымДанным(ТаблицаСведенийБезОшибок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСведений.ДатаПоказаний КАК ДатаПоказаний,
	|	ВЫРАЗИТЬ(ТаблицаСведений.ЗаводскойНомер КАК СТРОКА(100)) КАК ЗаводскойНомер,
	|	ТаблицаСведений.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаСведений.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаСведений.ПиковоеПоказание КАК ПиковоеПоказание
	|ПОМЕСТИТЬ ДанныеССервиса
	|ИЗ
	|	&ТаблицаСведений КАК ТаблицаСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеССервиса.ДатаПоказаний КАК ДатаПоказаний,
	|	ДанныеССервиса.ЗаводскойНомер КАК ЗаводскойНомер,
	|	ДанныеССервиса.ДневноеПоказание КАК ДневноеПоказание,
	|	ДанныеССервиса.НочноеПоказание КАК НочноеПоказание,
	|	ДанныеССервиса.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ЕСТЬNULL(КВП_Счетчики.Ссылка, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК СсылкаНаСчетчик,
	|	ЕСТЬNULL(КВП_Счетчики.ВидУслуги, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга
	|ПОМЕСТИТЬ СчетчикиИзБД
	|ИЗ
	|	ДанныеССервиса КАК ДанныеССервиса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК КВП_Счетчики
	|		ПО ДанныеССервиса.ЗаводскойНомер = КВП_Счетчики.ЗаводскойНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект
	|ПОМЕСТИТЬ ДействующиеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаЗагрузки,
	|			Счетчик В
	|					(ВЫБРАТЬ
	|						СчетчикиИзБД.СсылкаНаСчетчик
	|					ИЗ
	|						СчетчикиИзБД КАК СчетчикиИзБД)
	|				И ДатаИзменения <= &ДатаЗагрузки) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетчикиИзБД.ДатаПоказаний КАК ДатаПоказаний,
	|	СчетчикиИзБД.ЗаводскойНомер КАК ЗаводскойНомер,
	|	СчетчикиИзБД.ДневноеПоказание КАК ДневноеПоказание,
	|	СчетчикиИзБД.НочноеПоказание КАК НочноеПоказание,
	|	СчетчикиИзБД.ПиковоеПоказание КАК ПиковоеПоказание,
	|	СчетчикиИзБД.СсылкаНаСчетчик КАК СсылкаНаСчетчик,
	|	ЕСТЬNULL(ДействующиеСчетчики.Объект, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК СсылкаНаОбъект,
	|	СчетчикиИзБД.Услуга КАК Услуга
	|ПОМЕСТИТЬ СчетчикиСОбъектами
	|ИЗ
	|	СчетчикиИзБД КАК СчетчикиИзБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеСчетчики КАК ДействующиеСчетчики
	|		ПО СчетчикиИзБД.СсылкаНаСчетчик = ДействующиеСчетчики.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК Период,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ДневноеПоказаниеПредыдущее,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание КАК НочноеПоказаниеПредыдущее,
	|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание КАК ПиковоеПоказаниеПредыдущее
	|ПОМЕСТИТЬ ПоказанияИзБазы
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|			&ДатаЗагрузки,
	|			Счетчик В
	|				(ВЫБРАТЬ
	|					СчетчикиСОбъектами.СсылкаНаСчетчик
	|				ИЗ
	|					СчетчикиСОбъектами КАК СчетчикиСОбъектами)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетчикиСОбъектами.ДатаПоказаний КАК ДатаПоказаний,
	|	СчетчикиСОбъектами.ЗаводскойНомер КАК ЗаводскойНомер,
	|	СчетчикиСОбъектами.ДневноеПоказание КАК ДневноеПоказание,
	|	СчетчикиСОбъектами.НочноеПоказание КАК НочноеПоказание,
	|	СчетчикиСОбъектами.ПиковоеПоказание КАК ПиковоеПоказание,
	|	СчетчикиСОбъектами.СсылкаНаСчетчик КАК СсылкаНаСчетчик,
	|	СчетчикиСОбъектами.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	ВЫБОР
	|		КОГДА ПоказанияИзБазы.Период ЕСТЬ NULL
	|				ИЛИ ПоказанияИзБазы.Период < СчетчикиСОбъектами.ДатаПоказаний
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоСтароеПоказание,
	|	СчетчикиСОбъектами.Услуга КАК Услуга,
	|	ЕСТЬNULL(ПоказанияИзБазы.ДневноеПоказаниеПредыдущее, 0) КАК ДневноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(ПоказанияИзБазы.НочноеПоказаниеПредыдущее, 0) КАК НочноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(ПоказанияИзБазы.ПиковоеПоказаниеПредыдущее, 0) КАК ПиковоеПоказаниеПредыдущее
	|ИЗ
	|	СчетчикиСОбъектами КАК СчетчикиСОбъектами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказанияИзБазы КАК ПоказанияИзБазы
	|		ПО СчетчикиСОбъектами.СсылкаНаСчетчик = ПоказанияИзБазы.Счетчик";
	Запрос.УстановитьПараметр("ДатаЗагрузки",    ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаСведений", ТаблицаСведенийБезОшибок);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДанных.Колонки.Добавить("ВидОперацииДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыОперацийВводаПоказанийСчетчика"));
	ТаблицаДанных.Колонки.Добавить("ЕстьОшибки",           Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ВидОбъекта",           Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		// Счетчика нет в базе данных.
		Если СтрокаДанных.СсылкаНаСчетчик = Справочники.КВП_Счетчики.ПустаяСсылка() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика с заводским номером " + СокрЛП(СтрокаДанных.ЗаводскойНомер) + " не удалось найти счетчик в базе данных. Данные по счетчику не загружены.");
			СтрокаДанных.ЕстьОшибки = Истина;
		Иначе
			// Счетчик не действует на дату загрузки.
			Если СтрокаДанных.СсылкаНаОбъект = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика с заводским номером " + СокрЛП(СтрокаДанных.ЗаводскойНомер) + " не удалось определить объект установки.
																 |Счетчик не действует: вероятно, находится на поверке или не установлен. Данные по счетчику не загружены.");
				СтрокаДанных.ЕстьОшибки = Истина;
			Иначе
				// Показания неактуальные.
				Если СтрокаДанных.ЭтоСтароеПоказание Тогда
					СтрокаДанных.ЕстьОшибки = Истина;
				Иначе
					Если ТипЗнч(СтрокаДанных.СсылкаНаОбъект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
						СтрокаДанных.ВидОбъекта           = 2;
						СтрокаДанных.ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение;
					ИначеЕсли ТипЗнч(СтрокаДанных.СсылкаНаОбъект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
						СтрокаДанных.ВидОбъекта           = 1;
						СтрокаДанных.ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет;
					ИначеЕсли ТипЗнч(СтрокаДанных.СсылкаНаОбъект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
						СтрокаДанных.ВидОбъекта           = 3;
						СтрокаДанных.ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд;
					ИначеЕсли ТипЗнч(СтрокаДанных.СсылкаНаОбъект) = Тип("СправочникСсылка.КВП_Здания") Тогда
						СтрокаДанных.ВидОбъекта           = 4;
						СтрокаДанных.ВидОперацииДокумента = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание;
					Иначе
						// Счетчик установлен на здание или подъезд.
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для счетчика с заводским номером " + СокрЛП(СтрокаДанных.ЗаводскойНомер) + " не удалось определить объект установки.
																		 |Данные по счетчику не загружены.");
						СтрокаДанных.ЕстьОшибки = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСведенийБезОшибок  = ТаблицаДанных.НайтиСтроки(Новый Структура("ЕстьОшибки", Ложь));
	ТаблицаСведенийБезОшибок = ТаблицаДанных.Скопировать(СтрокиСведенийБезОшибок);
	
КонецПроцедуры

// Преобразует дату из строкового формата в форматы даты.
Функция ПолучитьДатуПоказаний(ДатаСтрокой)

	Попытка
		Возврат XMLЗначение(Тип("Дата"), ДатаСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Преобразует показания из строкового формата в числовой.
Функция ПолучитьПоказаниеСчетчика(ПоказанияСтрокой)
	
	Попытка
		Возврат Число(ПоказанияСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Группирует данные и создает документы ввода показаний счетчиков.
Процедура СоздатьДокументыВводаПоказанийСчетчиков(ТаблицаСведений, КоличествоСозданныхДокументов)
	
	ТаблицаСведений.Индексы.Добавить("ВидОперацииДокумента");
	
	СоздатьДокументВводаПоказанийСчетчиковТекущегоВидаОперации(Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение, ТаблицаСведений, КоличествоСозданныхДокументов);
	СоздатьДокументВводаПоказанийСчетчиковТекущегоВидаОперации(Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет, ТаблицаСведений, КоличествоСозданныхДокументов);
	СоздатьДокументВводаПоказанийСчетчиковТекущегоВидаОперации(Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд, ТаблицаСведений, КоличествоСозданныхДокументов);
	СоздатьДокументВводаПоказанийСчетчиковТекущегоВидаОперации(Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание, ТаблицаСведений, КоличествоСозданныхДокументов);
	
КонецПроцедуры

// Создает документ ввода показаний счетчиков с определенным видом операции.
Процедура СоздатьДокументВводаПоказанийСчетчиковТекущегоВидаОперации(ВидОперации, ТаблицаСведений, КоличествоСозданныхДокументов)
	
	СтрокиПоказаний  = ТаблицаСведений.НайтиСтроки(Новый Структура("ВидОперацииДокумента", ВидОперации));
	ТаблицаПоказаний = ТаблицаСведений.Скопировать(СтрокиПоказаний);
	
	Если Не СтрокиПоказаний.Количество() = 0 Тогда
		СоздатьТекущийДокументВводаПоказанийСчетчиков(ТаблицаПоказаний, ВидОперации, КоличествоСозданныхДокументов);
	КонецЕсли;
	
КонецПроцедуры

// Создает документ ввода показаний счетчиков.
Процедура СоздатьТекущийДокументВводаПоказанийСчетчиков(ТаблицаПоказаний, ВидОперации, КоличествоСозданныхДокументов)
	
	// Структура документа ввода показаний.
	СтруктураДокумента = Новый Структура("ВидОперации, Комментарий, ВводНачальныхПоказаний, ТаблицаПоказаний");
	СтруктураДокумента.ТаблицаПоказаний = Новый ТаблицаЗначений;
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Услуга",                     Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Счетчик",                    Новый ОписаниеТипов("СправочникСсылка.КВП_Счетчики"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Объект",                     Метаданные.Документы.УПЖКХ_ВводПоказанийСчетчика.ТабличныеЧасти.Главная.Реквизиты.Объект.Тип);
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДатаПоказания",              Новый ОписаниеТипов("Дата"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказание",           Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказание",            Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказание",           Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказаниеПредыдущее", Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказаниеПредыдущее",  Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказаниеПредыдущее", Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("КоэффициентТрансформации",   Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ТемпературныйКоэффициент",   Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("КоэффициентЧислитель",       Новый ОписаниеТипов("Число"));
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("КоэффициентЗнаменатель",     Новый ОписаниеТипов("Число"));
	
	СтруктураДокумента.ВидОперации = ВидОперации;
	СтруктураДокумента.Комментарий = "#Создан автоматически при загрузке данных из системы сбора показаний счетчиков.";
	СтруктураДокумента.ВводНачальныхПоказаний = Ложь;
	
	ТаблицаСчетчиков = СтруктураДокумента.ТаблицаПоказаний.СкопироватьКолонки();
	ТаблицаСчетчиков.Колонки.Добавить("ВидОбъекта", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаПоказаний Из ТаблицаПоказаний Цикл
		НоваяСтрока = ТаблицаСчетчиков.Добавить();
		
		НоваяСтрока.Услуга                     = СтрокаПоказаний.Услуга;
		НоваяСтрока.Счетчик                    = СтрокаПоказаний.СсылкаНаСчетчик;
		НоваяСтрока.Объект                     = СтрокаПоказаний.СсылкаНаОбъект;
		НоваяСтрока.ДневноеПоказаниеПредыдущее = СтрокаПоказаний.ДневноеПоказание;
		НоваяСтрока.НочноеПоказаниеПредыдущее  = СтрокаПоказаний.НочноеПоказание;
		НоваяСтрока.ПиковоеПоказаниеПредыдущее = СтрокаПоказаний.ПиковоеПоказание;
		НоваяСтрока.ВидОбъекта                 = СтрокаПоказаний.ВидОбъекта;
	КонецЦикла;
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		НоваяСтрока = СтруктураДокумента.ТаблицаПоказаний.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетчика);
		
		СтрокиПоказаний = ТаблицаПоказаний.НайтиСтроки(Новый Структура("СсылкаНаСчетчик, СсылкаНаОбъект", СтрокаСчетчика.Счетчик, СтрокаСчетчика.Объект));
		Если СтрокиПоказаний.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоказания = СтрокиПоказаний.Получить(0);
		
		НоваяСтрока.ДневноеПоказание = СтрокаПоказания.ДневноеПоказание;
		НоваяСтрока.НочноеПоказание  = СтрокаПоказания.НочноеПоказание;
		НоваяСтрока.ПиковоеПоказание = СтрокаПоказания.ПиковоеПоказание;
		НоваяСтрока.ДатаПоказания    = СтрокаПоказания.ДатаПоказаний;
	КонецЦикла;
	
	ДокументПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	ДокументПоказаний.Заполнить(СтруктураДокумента);
	
	Попытка
		Если НЕ КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован документ: " + Строка(ДокументПоказаний) + ".");
		
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать документ ввода показаний.");
	КонецПопытки;
	
КонецПроцедуры

// Формирует строковое представление системы сбора показаний счетчиков.
// Это представление необходимо использования в качестве ключа
// в регламентных заданиях.
//
Функция ПолучитьСтроковоеПредставлениеТекущейСистемыДляРегламентныхЗаданий(СистемаСбораПоказанийСчетчиков) Экспорт
	
	Если СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Саурес Тогда
		Возврат "Saures";
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ Тогда
		Возврат "NCRE";
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Болид Тогда
		Возврат "Bolid";
	ИначеЕсли СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Меркурий Тогда
		Возврат "Mercury";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Получает значение перечисления УПЖКХ_СистемыСбораПоказанийСчетчиков по строковому представлению.
Функция ПолучитьСистемуСбораПоказанийСчетчиковПоСтроковомуПредставлению(НазваниеСистемы)
	
	Если НазваниеСистемы = "Saures" Тогда
		Возврат Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Саурес;
	ИначеЕсли НазваниеСистемы = "NCRE" Тогда
		Возврат Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.НЦРЭ;
	ИначеЕсли НазваниеСистемы = "Bolid" Тогда
		Возврат Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Болид;
	ИначеЕсли НазваниеСистемы = "Mercury" Тогда
		Возврат Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Меркурий;
	Иначе
		Возврат Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Получает количесто л/с в БД.
Функция ПолучитьКоличествоЛицевыхСчетовВБазеДанных() Экспорт
	
	КоличествоЛС = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_ЛицевыеСчета.Ссылка) КАК КоличествоЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоЛС = Выборка.КоличествоЛС;
	КонецЕсли;
	
	Возврат КоличествоЛС;
	
КонецФункции

#КонецОбласти