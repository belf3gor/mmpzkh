
#Область МеханизмРассылкиКвитанций

// Размещает на форме:
// - подменю для команд;
// - кнопки:    "ОтправитьНаЭлектронныеЯщикиЛицевыхСчетов", "ПользовательскиеНастройкиОтправки", "ПоказатьДанныеПоКвитанциям";
// - команды:   "ОтправитьНаЭлектронныеЯщикиЛицевыхСчетов", "ПользовательскиеНастройкиОтправки", "ПоказатьДанныеПоКвитанциям";
// - реквизиты: "ФлагПоказатьДанныеПоКвитанциям", "ДанныеПоКвитанциям";
// - прочее:    "ДанныеПоКвитанциям" - таблица значений на форме.
//
// Параметры:
//  Форма                 - УправляемаяФорма - управляемая форма, на которой требуется создать новые элементы формы.
//  ГруппаКнопкиОтправить - ГруппаФормы - группа формы, используемая для размещения
//                          новых элементов формы, если передана группа формы.
//
Процедура ПриСозданииНаСервере(Форма, ГруппаКнопкиОтправить = Неопределено,
							   ГруппаГиперссылкиПодключитьРассылкуКвитанций = Неопределено,
							   ГруппаДанныеПоКвитанциям = Неопределено) Экспорт
	
	// Если не хватает прав.
	Если Не ПравоДоступа("Просмотр", Метаданные.Подсистемы.УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	Если Не ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьФункционалРассылкиКвитанцийПоЭлектроннойПочте") Тогда
		
		Если ГруппаГиперссылкиПодключитьРассылкуКвитанций = Неопределено Тогда
			ГруппаГиперссылкиПодключитьРассылкуКвитанций = Форма;
		КонецЕсли;
		
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций = Элементы.Добавить("ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций", Тип("ГруппаФормы"), ГруппаГиперссылкиПодключитьРассылкуКвитанций);
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.ОтображатьЗаголовок      = Ложь;
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.ЦветФона                 = Новый Цвет(255, 211, 233);
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.РастягиватьПоВертикали   = Ложь;
		ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций.РастягиватьПоГоризонтали = Ложь;
		
		// Команда "ГиперссылкаПодключитьРассылкуКвитанций".
		ИмяКоманды = "ГиперссылкаПодключитьРассылкуКвитанций";
		
		КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов = Форма.Команды.Добавить(ИмяКоманды);
		КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Действие  = "Подключаемый_" + ИмяКоманды;
		КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Заголовок = "Подключить рассылку квитанций на e-mail";
		КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Подсказка = "Подключить рассылку квитанций на e-mail";
		
		// Кнопка "ГиперссылкаПодключитьРассылкуКвитанций".
		КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаОснованиеГиперссылкиПодключитьРассылкуКвитанций);
		КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Вид        = ВидКнопкиФормы.Гиперссылка;
		КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.ИмяКоманды = ИмяКоманды;
		КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Картинка   = БиблиотекаКартинок.ЭлектронноеПисьмо;
		
		Возврат;
		
	КонецЕсли;
	
	// Определяем группу кнопки "Отправить на e-mail лицевых счетов".
	Если ГруппаКнопкиОтправить = Неопределено Тогда
		ГруппаКнопкиОтправить = Форма.КоманднаяПанель;
	КонецЕсли;
	
	// Определяем группу таблицы значений "ДанныеПоКвитанциям".
	Если ГруппаДанныеПоКвитанциям = Неопределено Тогда
		ГруппаДанныеПоКвитанциям = Элементы.ГруппаРезультат;
	КонецЕсли;
	
	// Команда "ОтправитьПоЭлектроннойПочте".
	ИмяКоманды = "ОтправитьПоЭлектроннойПочте";
	
	КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов = Форма.Команды.Добавить(ИмяКоманды);
	КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Действие  = "Подключаемый_" + ИмяКоманды;
	КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Заголовок = "Отправить по электронной почте";
	КомандаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Подсказка = "Отправить по электронной почте";
	
	// Кнопка "ОтправитьПоЭлектроннойПочте".
	КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопкиОтправить);
	КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.ИмяКоманды  = ИмяКоманды;
	КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Картинка    = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
	КнопкаОтправитьНаЭлектронныеЯщикиЛицевыхСчетов.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Подменю для команд.
	ПодменюРассылкаКвитанций = Элементы.Добавить("ПодменюРассылкаКвитанций", Тип("ГруппаФормы"), ГруппаКнопкиОтправить);
	ПодменюРассылкаКвитанций.Заголовок = "Настройка рассылки";
	ПодменюРассылкаКвитанций.Вид       = ВидГруппыФормы.Подменю;
	
	// Группа кнопок "Основное".
	ГруппаКнопокОсновное = Элементы.Добавить("ГруппаКнопокОсновное", Тип("ГруппаФормы"), ПодменюРассылкаКвитанций);
	ГруппаКнопокОсновное.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	// Группа кнопок "Дополнительно".
	ГруппаКнопокДополнительно = Элементы.Добавить("ГруппаКнопокДополнительно", Тип("ГруппаФормы"), ПодменюРассылкаКвитанций);
	ГруппаКнопокДополнительно.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	// Команда "ПользовательскиеНастройкиРассылки".
	ИмяКоманды = "ПользовательскиеНастройкиРассылки";
	
	КомандаПользовательскиеНастройкиОтправки = Форма.Команды.Добавить(ИмяКоманды);
	КомандаПользовательскиеНастройкиОтправки.Действие  = "Подключаемый_" + ИмяКоманды;
	КомандаПользовательскиеНастройкиОтправки.Заголовок = "Параметры рассылки";
	КомандаПользовательскиеНастройкиОтправки.Подсказка = "Параметры рассылки квитанций на электронные ящики лицевых счетов";
	
	// Кнопка "ПользовательскиеНастройкиРассылки".
	КнопкаПользовательскиеНастройкиОтправки = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопокОсновное);
	КнопкаПользовательскиеНастройкиОтправки.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаПользовательскиеНастройкиОтправки.ИмяКоманды  = ИмяКоманды;
	КнопкаПользовательскиеНастройкиОтправки.Картинка    = БиблиотекаКартинок.УПЖКХ_ПодсистемаАДС;
	КнопкаПользовательскиеНастройкиОтправки.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Команда "ОтправитьНаТестововуюЭлектроннуюПочту".
	ИмяКоманды = "ОтправитьНаТестововуюЭлектроннуюПочту";
	
	КомандаОтправитьНаТестовыйЭлектронныеЯщики = Форма.Команды.Добавить(ИмяКоманды);
	КомандаОтправитьНаТестовыйЭлектронныеЯщики.Действие  = "Подключаемый_" + ИмяКоманды;
	КомандаОтправитьНаТестовыйЭлектронныеЯщики.Заголовок = "Отправить на тестовый e-mail";
	КомандаОтправитьНаТестовыйЭлектронныеЯщики.Подсказка = "Отправить на тестовый e-mail";
	
	// Кнопка "ОтправитьНаТестововуюЭлектроннуюПочту".
	КнопкаОтправитьНаТестовыйЭлектронныеЯщики = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаКнопокОсновное);
	КнопкаОтправитьНаТестовыйЭлектронныеЯщики.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаОтправитьНаТестовыйЭлектронныеЯщики.ИмяКоманды  = ИмяКоманды;
	КнопкаОтправитьНаТестовыйЭлектронныеЯщики.Картинка    = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
	КнопкаОтправитьНаТестовыйЭлектронныеЯщики.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Команда "ПоказатьДанныеПоКвитанциям".
	ИмяПоказатьДанныеПоКвитанциям = "ПоказатьДанныеПоКвитанциям";
	
	КомандаПоказатьДанныеПоКвитанциям = Форма.Команды.Добавить(ИмяПоказатьДанныеПоКвитанциям);
	КомандаПоказатьДанныеПоКвитанциям.Действие  = "Подключаемый_" + ИмяПоказатьДанныеПоКвитанциям;
	КомандаПоказатьДанныеПоКвитанциям.Заголовок = "Показать данные по квитанциям";
	КомандаПоказатьДанныеПоКвитанциям.Подсказка = "Показать таблицу с данными для рассылки квитанций.";
	
	// Кнопка "ПоказатьДанныеПоКвитанциям".
	КнопкаПоказатьДанныеПоКвитанциям = Элементы.Добавить(ИмяПоказатьДанныеПоКвитанциям, Тип("КнопкаФормы"), ГруппаКнопокОсновное);
	КнопкаПоказатьДанныеПоКвитанциям.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаПоказатьДанныеПоКвитанциям.ИмяКоманды  = ИмяПоказатьДанныеПоКвитанциям;
	КнопкаПоказатьДанныеПоКвитанциям.Картинка    = БиблиотекаКартинок.Таблица;
	КнопкаПоказатьДанныеПоКвитанциям.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Команда "ИнструкцияПоРассылке".
	ИмяИнструкцияПоРассылке = "ИнструкцияПоРассылке";
	
	КомандаПоказатьДанныеПоКвитанциям = Форма.Команды.Добавить(ИмяИнструкцияПоРассылке);
	КомандаПоказатьДанныеПоКвитанциям.Действие  = "Подключаемый_" + ИмяИнструкцияПоРассылке;
	КомандаПоказатьДанныеПоКвитанциям.Заголовок = "Инструкция по рассылке";
	КомандаПоказатьДанныеПоКвитанциям.Подсказка = "Перейти к инструкции рассылки квитанций.";
	
	// Кнопка "ИнструкцияПоРассылке".
	КнопкаПоказатьДанныеПоКвитанциям = Элементы.Добавить(ИмяИнструкцияПоРассылке, Тип("КнопкаФормы"), ГруппаКнопокДополнительно);
	КнопкаПоказатьДанныеПоКвитанциям.Вид         = ВидКнопкиФормы.ОбычнаяКнопка;
	КнопкаПоказатьДанныеПоКвитанциям.ИмяКоманды  = ИмяИнструкцияПоРассылке;
	КнопкаПоказатьДанныеПоКвитанциям.Картинка    = БиблиотекаКартинок.Информация;
	КнопкаПоказатьДанныеПоКвитанциям.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Массив новых реквизитов.
	НовыеРеквизиты = Новый Массив;
	
	// Реквизит "ФлагПоказатьДанныеПоКвитанциям".
	НовыеРеквизиты.Добавить(Новый РеквизитФормы("Флаг" + ИмяПоказатьДанныеПоКвитанциям, Новый ОписаниеТипов("Булево"),,, Истина));
	
	// Реквизит "ДанныеПоКвитанциям", тип - ТаблицаЗначений.
	ИмяДанныеПоКвитанциям = "ДанныеПоКвитанциям";
	
	НовыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяДанныеПоКвитанциям, Новый ОписаниеТипов("ТаблицаЗначений"),,, Истина));
	
	ДанныеПоКвитанциям = ПолучитьПустуюТаблицуДляДанныхПоКвитанциям();
	
	Для Каждого Колонка Из ДанныеПоКвитанциям.Колонки Цикл
		НовыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяДанныеПоКвитанциям));
	КонецЦикла;
	
	// Добавляем реквизиты на форму.
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	// Таблица формы "ДанныеПоКвитанциям".
	ТаблицаФормыДанныеПоКвитанциям = Элементы.Добавить("ТаблицаФормы_" + ИмяДанныеПоКвитанциям, Тип("ТаблицаФормы"), ГруппаДанныеПоКвитанциям);
	ТаблицаФормыДанныеПоКвитанциям.ПутьКДанным              = ИмяДанныеПоКвитанциям;
	ТаблицаФормыДанныеПоКвитанциям.Отображение              = ОтображениеТаблицы.Список;
	ТаблицаФормыДанныеПоКвитанциям.Видимость                = Ложь;
	ТаблицаФормыДанныеПоКвитанциям.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	ТаблицаФормыДанныеПоКвитанциям.УстановитьДействие("ПередНачаломДобавления", "Подключаемый_ДанныеПоКвитанциямПередНачаломДобавления");
	
	Для Каждого Колонка Из ДанныеПоКвитанциям.Колонки Цикл
		
		Если Колонка.Имя = "НомерСтроки" Или Колонка.Имя = "ИдентификаторКвитанции" Тогда
			ВидТекПоляФормы = ВидПоляФормы.ПолеНадписи;
		Иначе
			ВидТекПоляФормы = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить(ИмяДанныеПоКвитанциям + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормыДанныеПоКвитанциям);
		НовыйЭлемент.Вид         = ВидТекПоляФормы;
		НовыйЭлемент.ПутьКДанным = ИмяДанныеПоКвитанциям + "." + Колонка.Имя;
		
		Если Не ПустаяСтрока(Колонка.Заголовок) Тогда
			НовыйЭлемент.Заголовок = Колонка.Заголовок;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет существование каталога сохранения квитанций на сервере.
//
// Возвращаемое значение:
//  Булево - "Истина", если каталог для сохранения квитанций существует.
//
Функция ПроверитьСуществованиеКаталогаСохраненияКвитанцийНаСервере() Экспорт
	
	КаталогСохранения = Новый Файл(ПолучитьПараметрыРассылкиКвитанций().КаталогСохраненияКвитанцийНаСервере);
	
	Возврат КаталогСохранения.Существует();
	
КонецФункции

// Процедура загружает подготовленные данные на сервере.
//
// Параметры:
//  Форма             - УправляемаяФорма - управляемая форма, в значениям реквизитов которых присываиваются новые значения.
//  СтруктураСДанными - Структура - структура содержащая таблицу значений с данными по квитанциям.
//
Процедура ЗагрузитьПодготовленныеДанные(Форма, СтруктураСДанными) Экспорт
	
	ИспользоватьРассылкуПоЭлектроннойПочте = ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьФункционалРассылкиКвитанцийПоЭлектроннойПочте");
	
	// Получаем таблицу данных по квитанциям.
	Если ИспользоватьРассылкуПоЭлектроннойПочте И ТипЗнч(СтруктураСДанными) = Тип("Структура") Тогда
		Если СтруктураСДанными.Свойство("ДанныеПоКвитанциям") Тогда
			Форма.ДанныеПоКвитанциям.Загрузить(СтруктураСДанными.ДанныеПоКвитанциям);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет полученную в параметрах структуру данными по квитанциям.
//
// Параметры:
//  РезультатыФормированияОтчета - Структура - которую требуется дополнить данными по квитанциям.
//  ДанныеПоКвитанциям           - ТаблицаЗначений - таблица с данными по квитанциям.
//
Процедура ДополнитьСтруктуруРезультатовОтчетаДаннымиПоКвитанциям(РезультатыФормированияОтчета, ДанныеПоКвитанциям) Экспорт
	
	Если РезультатыФормированияОтчета.Свойство("ДанныеПоКвитанциям") Тогда
		РезультатыФормированияОтчета.Вставить("ДанныеПоКвитанциям", ДанныеПоКвитанциям);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ РАССЫЛКИ КВИТАНЦИЙ

// Возвращает параметры рассылки квитанций по умолчанию.
//
// Возвращаемое значение:
//  Структура - параметры рассылки квитанций по умолчанию.
//
Функция ПолучитьПараметрыРассылкиКвитанцийПоУмолчанию() Экспорт
	
	ПараметрыРассылкиКвитанций = Новый Структура;
	ПараметрыРассылкиКвитанций.Вставить("ВариантКаталогаСохраненияКвитанций",         Перечисления.УПЖКХ_ВариантыСохраненияФайлов.КаталогВременныхФайлов);
	ПараметрыРассылкиКвитанций.Вставить("ИнтервалМеждуОтправкамиКвитанцийВСекундах",  1);
	ПараметрыРассылкиКвитанций.Вставить("КаталогСохраненияКвитанцийНаСервере",        КаталогВременныхФайлов());
	ПараметрыРассылкиКвитанций.Вставить("КоличествоПисемВТестовойРассылке",           3);
	ПараметрыРассылкиКвитанций.Вставить("ЭлектронныйАдресПолучателяТестовойРассылки", "");
	ПараметрыРассылкиКвитанций.Вставить("ОтправлятьВПисьмеСведенияОбОрганизации",     Истина);
	
	Возврат ПараметрыРассылкиКвитанций;
	
КонецФункции

// Возвращает параметра рассылки квитанций.
//
// Возвращаемое значение:
//  Стуктура - структура с параметрами рассылки квитанций.
//
Функция ПолучитьПараметрыРассылкиКвитанций() Экспорт
	
	ПараметрыРассылкиКвитанций = Константы.УПЖКХ_ПараметрыРассылкиКвитанцийПоЭлектроннойПочте.Получить().Получить();
	
	ПараметрыРассылкиКвитанцийПереопределяемый = ПолучитьПараметрыРассылкиКвитанцийПоУмолчанию();
	
	Если ТипЗнч(ПараметрыРассылкиКвитанций) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыРассылкиКвитанцийПереопределяемый, ПараметрыРассылкиКвитанций);
		
	КонецЕсли;
	
	Возврат ПараметрыРассылкиКвитанцийПереопределяемый;
	
КонецФункции // ПолучитьПараметрыРассылкиКвитанций()

// Устанавливает новое значение константе "УПЖКХ_ПараметрыРассылкиКвитанцийПоЭлектроннойПочте".
//
// Параметры:
//  ПараметрыРассылкиКвитанций - Структура - которую требуется дополнить данными по квитанциям.
//
Процедура УстановитьПараметрыРассылкиКвитанций(ПараметрыРассылкиКвитанций) Экспорт
	
	ПараметрыРассылкиКвитанцийПереопределяемый = ПолучитьПараметрыРассылкиКвитанцийПоУмолчанию();
	
	Если ТипЗнч(ПараметрыРассылкиКвитанций) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыРассылкиКвитанцийПереопределяемый, ПараметрыРассылкиКвитанций);
		
	КонецЕсли;
	
	// Установка нового значения константы.
	Константы.УПЖКХ_ПараметрыРассылкиКвитанцийПоЭлектроннойПочте.Установить(Новый ХранилищеЗначения(ПараметрыРассылкиКвитанцийПереопределяемый));
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТА (КВИТАНЦИЙ)

// Функция возвращает электронный ящик лицевого счета.
//
// Параметры:
//  ЛицевойСчет             - Ссылка    - ссылка на лицевой счет, для которого нужно получить адрес электроного ящика.
//  ТаблицаВладельцев       - ТаблицаЗначений - таблица сведений о владельцах лицевых счетов.
//    ** ЛицевойСчет - Ссылка - ссылка на лицевой счет.
//    ** Владелец    - Ссылка на справочник "Жильцы".
//                   - Ссылка на справочник "Контрагент".
//  АдресЭлектроннойПочтыЛС - Строка - адрес электронныо почты лицевого счета.
//
// Возвращаемое значение:
//  Строка - адрес электронного ящика лицевого счета.
//
Функция ПолучитьАдресЭлектроннойПочтыЛицевогоСчета(ЛицевойСчет, Владелец, АдресЭлектроннойПочтыЛС = "") Экспорт
	
	Если ПустаяСтрока(АдресЭлектроннойПочтыЛС) Тогда
		
		// Если ответственный собственник контрагент.
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			АдресЭлектроннойПочты = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(Владелец, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.УПЖКХ_Жильцы") Тогда
			АдресЭлектроннойПочты = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКонтактнуюИнформацияОбъекта(Владелец.ФизЛицо, Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
		КонецЕсли;
		
	Иначе
		АдресЭлектроннойПочты = АдресЭлектроннойПочтыЛС;
	КонецЕсли;
	
	АдресаМассив = УПЖКХ_ТиповыеМетодыКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(АдресЭлектроннойПочты);
	
	АдресЭлектроннойПочты = "";
	
	Для Каждого ТекСтр Из АдресаМассив Цикл
		
		Если ПустаяСтрока(ТекСтр.Адрес) Или Не ПустаяСтрока(ТекСтр.ОписаниеОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		АдресЭлектроннойПочты = АдресЭлектроннойПочты + ТекСтр.Адрес + ";";
		
	КонецЦикла;
	
	АдресЭлектроннойПочты = Лев(АдресЭлектроннойПочты, СтрДлина(АдресЭлектроннойПочты) - 1);
	
	УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовПереопределяемый.ПолучитьАдресЭлектроннойПочтыЛицевогоСчета(АдресЭлектроннойПочты, ЛицевойСчет, Владелец);
	
	Возврат АдресЭлектроннойПочты;
	
КонецФункции

// Возвращает пустую таблицу для данных по квитанциям.
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица значений со следующими колонками:
//     * НомерСтроки - Число.
//     * ИдентификаторКвитанции - УникальныйИдентификатор.
//     * Организация - Ссылка - ссылка на справочник "Организация".
//     * МесяцНачисления - Дата.
//     * Здание - Ссылка - ссылка на справочник "Здание".
//     * ЛицевойСчет - Ссылка - ссылка на справочник "ЛицевойСчет".
//     * АдресЭлектроннойПочты - Строка.
//     * ТипКвитанции - Строка.
//
Функция ПолучитьПустуюТаблицуДляДанныхПоКвитанциям() Экспорт
	
	ДанныеПоКвитанциям = Новый ТаблицаЗначений;
	
	ДанныеПоКвитанциям.Колонки.Добавить("НомерСтроки",            Новый ОписаниеТипов("Число"),                                     "Номер строки");
	ДанныеПоКвитанциям.Колонки.Добавить("ИдентификаторКвитанции", Новый ОписаниеТипов("УникальныйИдентификатор"),                   "Идентификатор квитанции");
	ДанныеПоКвитанциям.Колонки.Добавить("Организация",            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеПоКвитанциям.Колонки.Добавить("МесяцНачисления",        Новый ОписаниеТипов("Дата"),                                      "Месяц начисления");
	ДанныеПоКвитанциям.Колонки.Добавить("Здание",                 Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
	ДанныеПоКвитанциям.Колонки.Добавить("ЛицевойСчет",            Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"),         "Лицевой счет");
	ДанныеПоКвитанциям.Колонки.Добавить("АдресЭлектроннойПочты",  Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)), "Электронная почта");
	ДанныеПоКвитанциям.Колонки.Добавить("ТипКвитанции",           Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)),  "Тип квитанции");
	
	Возврат ДанныеПоКвитанциям;
	
КонецФункции

// Заполняет таблицу значених данных по квитанциям.
//
// Параметры:
//  ТабличныйДокументКвитанции - ТабличныйДокумент - табличный документ квитанции.
//  ПериодПросмотра            - Дата - месяц, на которые формируется отчет.
//  ОбщиеДанные                - Структура - адрес временного хранилища, в который будут помещаться
//                               табличный документ отчета и таблица с данными по квитанциям.
//     * ОрганизацияОбъект     - Ссылка - ссылка на справочник "Организация", для которого формируется отчет.
//     * Здание                - Ссылка - ссылка на справочник "Здание".
//     * ЛицевойСчет           - Ссылка - ссылка на справочник "Лицевой счет".
//     * АдресЭлектроннойПочты - Строка - адрес электроного ящика, на который требуется отправить
//                               квитанцию текущего лицевого счета.
//     * КвитанцияНаКР         - Булево - призак того, явлеятся ли текущая квитанция квитанций на кап. ремонт.
//     * КвитанцияПоПени       - Булево - призак того, явлеятся ли текущая квитанция квитанций пени основных услуг.
//
Процедура ЗаполнитьДанныеПоКвитанциям(ТабличныйДокументКвитанции, ДанныеПоКвитанциям, ПериодПросмотра, ОбщиеДанные) Экспорт
	
	// Подготавливаем область квитанции, определяем для нее имя - уникальный идентификатор,
	// а к идентификатору привязываем данные по квитанции, которые потом используем в рассылке квитанций на эп.почту.
	
	// Идентификатор квитанции.
	ИдентификаторКвитанции = Новый УникальныйИдентификатор;
	
	// Всю квитанцию включаем в область, имя которой определяем идентификатором квитанции.
	ТабличныйДокументКвитанции.Область(1, , ТабличныйДокументКвитанции.ВысотаТаблицы).Имя = ИдентификаторКвитанции;
	
	// Получаем данные по квитанции и помещаем их для использования в форме отчета.
	ДанныеНовойКвитанции = ДанныеПоКвитанциям.Добавить();
	ДанныеНовойКвитанции.НомерСтроки            = ДанныеПоКвитанциям.Количество();
	ДанныеНовойКвитанции.ИдентификаторКвитанции = ИдентификаторКвитанции;
	ДанныеНовойКвитанции.Организация            = ОбщиеДанные.ОрганизацияОбъект;
	
	// Доработать:
	// Сейчас месяц начисления берется из шапки отчета, на будущее надо брать
	// из данных по квитанции, так как планируется доработка по формированию
	// отчета за произвольный период месяцев.
	ДанныеНовойКвитанции.МесяцНачисления = НачалоМесяца(ПериодПросмотра);
	
	ДанныеНовойКвитанции.Здание                = ОбщиеДанные.Здание;
	ДанныеНовойКвитанции.ЛицевойСчет           = ОбщиеДанные.ЛицевойСчет;
	ДанныеНовойКвитанции.АдресЭлектроннойПочты = ОбщиеДанные.АдресЭлектроннойПочты;
	
	// Тип квитанции по умолчанию.
	// Типы квитанций: "общая", "основные услуги", "капитальный ремонт",
	// "пени общая", "пени основные услуги", "пени капитальный ремонт".
	ДанныеНовойКвитанции.ТипКвитанции = "общая";
	
	Если ОбщиеДанные.Свойство("КвитанцияПоПени") Тогда
		Если ОбщиеДанные.КвитанцияНаКР Тогда
			Если ОбщиеДанные.КвитанцияПоПени Тогда
				ДанныеНовойКвитанции.ТипКвитанции = "пени капитальный ремонт";
			Иначе
				ДанныеНовойКвитанции.ТипКвитанции = "капитальный ремонт";
			КонецЕсли;
		Иначе
			Если ОбщиеДанные.КвитанцияПоПени Тогда
				ДанныеНовойКвитанции.ТипКвитанции = "пени основные услуги";
			Иначе
				ДанныеНовойКвитанции.ТипКвитанции = "основные услуги";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// РАССЫЛКА

// Запускает рассылку квитанций на сервере.
//
// Параметры:
//  ПараметрыЗапуска - Структура - параметры, требуемые для начала рассылки квитанций.
//     * ДокументРезультат         - ТабличныйДокумент - табличный документ сформированного отчета.
//     * МассивДанныеПоКвитанциям  - Массив - содержащий структуры с данными для отправки.
//     * ТестоваяРассылкаКвитанций - Булево - "Истина", если осуществляется тестовая рассылка квитанций.
//  УникальныйИдентификаторФормы - УправляемаяФорма - управялемая форма, с которой запускается фоновое задание.
//
// Возвращаемое значение:
//  Строка - адрес электронного ящика лицевого счета.
//
Функция ЗапуститьРассылкуКвитанцийВФонеНаСервере(ПараметрыЗапуска, УникальныйИдентификаторВладельца) Экспорт
	
	Отказ = Ложь;
	
	// Получение необходимых параметров.
	МассивДанныеПоКвитанциям     = ПараметрыЗапуска.МассивДанныеПоКвитанциям;
	ЭтоТестоваяРассылкаКвитанций = ПараметрыЗапуска.ЭтоТестоваяРассылкаКвитанций;
	
	ПараметрыРассылкиКвитанций = ПолучитьПараметрыРассылкиКвитанций();
	
	// Преборазование данных из массива в таблицу значений.
	ТЗДанныеПоКвитанциям = ПолучитьПустуюТаблицуДляДанныхПоКвитанциям();
	
	Для Каждого ТекСтр Из МассивДанныеПоКвитанциям Цикл
		
		НоваяСтрока = ТЗДанныеПоКвитанциям.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтр);
		
		// Если это тестовая рассылка, то в качестве адресов получателей указываем тестовый адрес.
		Если ЭтоТестоваяРассылкаКвитанций Тогда
			НоваяСтрока.АдресЭлектроннойПочты = ПараметрыРассылкиКвитанций.ЭлектронныйАдресПолучателяТестовойРассылки;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапуска = Новый Структура;
	РезультатЗапуска.Вставить("ПодробноеПредставлениеОшибки");
	
	// Проверка каталога сохранения квитанций.
	КаталогСохраненияКвитанцийНаСервере = ПараметрыРассылкиКвитанций.КаталогСохраненияКвитанцийНаСервере;
	Если ПустаяСтрока(КаталогСохраненияКвитанцийНаСервере) Тогда
		РезультатЗапуска.ПодробноеПредставлениеОшибки = "Не указан каталог сохранения квитанций для отправки, обратитесь к администратору!";
		Отказ = Истина;
	КонецЕсли;
	
	Если Не УПЖКХ_ТиповыеМетодыСервер.КаталогДоступенДляЗаписи(КаталогСохраненияКвитанцийНаСервере) Тогда
		РезультатЗапуска.ПодробноеПредставлениеОшибки = "Указанный каталог сохранения квитанций для отправки не доступен для изменения!";
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат РезультатЗапуска;
	КонецЕсли;
	
	// Если это тестовая рассылка, то отправляем ограниченное кол-во писем,
	// в соответствии с настрйоками в параметрах рассылки.
	Если ЭтоТестоваяРассылкаКвитанций Тогда
		ОграничитьДанныеПоКвитанциям(ТЗДанныеПоКвитанциям);
	КонецЕсли;
	
	// Запуск расслыки квитанций в фоновом задании.
	
	УчетнаяЗаписьРассылкиКвитанций = Константы.УПЖКХ_УчетнаяЗаписьРассылкиКвитанций.Получить();
	
	Если УчетнаяЗаписьРассылкиКвитанций = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка() Тогда
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Иначе
		УчетнаяЗапись = УчетнаяЗаписьРассылкиКвитанций;
	КонецЕсли;
	
	АдресХранилищаДляРезультатовФоновогоЗадания = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("УчетнаяЗаписьДляРассылки",                    УчетнаяЗапись);
	ПараметрыПроцедуры.Вставить("ДанныеПоКвитанциям",                          ТЗДанныеПоКвитанциям);
	ПараметрыПроцедуры.Вставить("ТабличныйДокумент",                           ПараметрыЗапуска.ДокументРезультат);
	ПараметрыПроцедуры.Вставить("ЭтоТестоваяРассылкаКвитанций",                ЭтоТестоваяРассылкаКвитанций);
	ПараметрыПроцедуры.Вставить("ВариантКаталогаСохраненияКвитанций",          ПараметрыРассылкиКвитанций.ВариантКаталогаСохраненияКвитанций);
	ПараметрыПроцедуры.Вставить("КаталогСохраненияКвитанцийНаСервере",         КаталогСохраненияКвитанцийНаСервере);
	ПараметрыПроцедуры.Вставить("ИнтервалМеждуОтправкамиКвитанцийВСекундах",   ПараметрыРассылкиКвитанций.ИнтервалМеждуОтправкамиКвитанцийВСекундах);
	ПараметрыПроцедуры.Вставить("ОтправлятьВПисьмеСведенияОбОрганизации",      ПараметрыРассылкиКвитанций.ОтправлятьВПисьмеСведенияОбОрганизации);
	ПараметрыПроцедуры.Вставить("АдресХранилищаДляРезультатовФоновогоЗадания", АдресХранилищаДляРезультатовФоновогоЗадания);
	
	ПараметрыВыполнения = УПЖКХ_ТиповыеМетодыСервер.ПараметрыВыполненияВФоне(УникальныйИдентификаторВладельца);
	
	РезультатЗапуска = УПЖКХ_ТиповыеМетодыСервер.ВыполнитьВФоне("УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетовСервер.ВыполнитьРассылкуКвитанцийВФонеНаСервере",
																ПараметрыПроцедуры, ПараметрыВыполнения);
	
	РезультатЗапуска.Вставить("АдресХранилищаДляРезультатовФоновогоЗадания", АдресХранилищаДляРезультатовФоновогоЗадания);
	
	Возврат РезультатЗапуска;
	
КонецФункции

// Осуществляет отправку квитанций на сервере.
//
// Параметры:
//  ПараметрыПроцедуры                             - Структура - структура с параметрами отправки квитанций.
//     * УчетнаяЗаписьДляРассылки                  - Ссылка - ссылка на справочник "Учетные записи электронной почты",
//                                                                 от имени которого будет произведена рассылка.
//     * ДанныеПоКвитанциям                        - ТаблицаЗначений - таблица значений с данными для рассылки квитанций.
//     * ТабличныйДокумент                         - ТабличныйДокумент - табличный документ сформированного отчета.
//     * ТестоваяОтправка                          - Булево - "Истина", если осуществеляется тестовая отправка.
//     * КаталогСохраненияКвитанцийНаСервере       - Строка - каталог сохранения квитанций.
//     * ИнтервалМеждуОтправкамиКвитанцийВСекундах - Число - интервал между отправками писем.
//
Процедура ВыполнитьРассылкуКвитанцийВФонеНаСервере(ПараметрыПроцедуры, Результат) Экспорт
	
	УчетнаяЗаписьДляРассылки                    = ПараметрыПроцедуры.УчетнаяЗаписьДляРассылки;
	ДанныеПоКвитанциям                          = ПараметрыПроцедуры.ДанныеПоКвитанциям;
	ТабличныйДокумент                           = ПараметрыПроцедуры.ТабличныйДокумент;
	ЭтоТестоваяРассылкаКвитанций                = ПараметрыПроцедуры.ЭтоТестоваяРассылкаКвитанций;
	КаталогСохраненияКвитанцийНаСервере         = ПараметрыПроцедуры.КаталогСохраненияКвитанцийНаСервере;
	ИнтервалМеждуОтправкамиКвитанцийВСекундах   = ПараметрыПроцедуры.ИнтервалМеждуОтправкамиКвитанцийВСекундах;
	ОтправлятьВПисьмеСведенияОбОрганизации      = ПараметрыПроцедуры.ОтправлятьВПисьмеСведенияОбОрганизации;
	АдресХранилищаДляРезультатовФоновогоЗадания = ПараметрыПроцедуры.АдресХранилищаДляРезультатовФоновогоЗадания;
	
	Если ПараметрыПроцедуры.ВариантКаталогаСохраненияКвитанций = Перечисления.УПЖКХ_ВариантыСохраненияФайлов.КаталогВременныхФайлов Тогда
		КаталогСохраненияКвитанцийНаСервере = КаталогВременныхФайлов();
	КонецЕсли;
	
	// Непонятно для чего была реализована данная проверка. Возможно связано с работой клиент-сервер.
	КолонкаСНомеромСтроки = ДанныеПоКвитанциям.Колонки.Найти("НомерСтроки");
	Если КолонкаСНомеромСтроки = Неопределено Тогда
		КолонкаСНомеромСтроки = ДанныеПоКвитанциям.Колонки.Найти("LineNumber");
		Если Не КолонкаСНомеромСтроки = Неопределено Тогда
			КолонкаСНомеромСтроки.Имя = "НомерСтроки";
		КонецЕсли;
	КонецЕсли;
	
	// Подсчитаем общее количество квитанций к отправке.
	ВсегоКвитанций = ДанныеПоКвитанциям.Количество() - ДанныеПоКвитанциям.НайтиСтроки(Новый Структура("АдресЭлектроннойПочты", "")).Количество();
	
	ОтправленоКвитанций = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПоКвитанциям.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоКвитанциям.Организация КАК Организация,
	|	ДанныеПоКвитанциям.МесяцНачисления КАК МесяцНачисления,
	|	ДанныеПоКвитанциям.ЛицевойСчет КАК ЛицевойСчет,
	|	ДанныеПоКвитанциям.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ДанныеПоКвитанциям.ТипКвитанции КАК ТипКвитанции
	|ПОМЕСТИТЬ врДанныеПоКвитанциям
	|ИЗ
	|	&ДанныеПоКвитанциям КАК ДанныеПоКвитанциям
	|ГДЕ
	|	НЕ ДанныеПоКвитанциям.АдресЭлектроннойПочты = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтопЛистРассылкиКвитанций.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ПОМЕСТИТЬ врСтопЛист
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтопЛистРассылкиКвитанций КАК УПЖКХ_СтопЛистРассылкиКвитанций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДанныеПоКвитанциям.НомерСтроки КАК НомерСтроки,
	|	врДанныеПоКвитанциям.Организация КАК Организация,
	|	врДанныеПоКвитанциям.МесяцНачисления КАК МесяцНачисления,
	|	врДанныеПоКвитанциям.ЛицевойСчет КАК ЛицевойСчет,
	|	врДанныеПоКвитанциям.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	врДанныеПоКвитанциям.ТипКвитанции КАК ТипКвитанции,
	|	ВЫБОР
	|		КОГДА врСтопЛист.АдресЭлектроннойПочты ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК АдресЭлектроннойПочтыВСтопЛисте
	|ИЗ
	|	врДанныеПоКвитанциям КАК врДанныеПоКвитанциям
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСтопЛист КАК врСтопЛист
	|		ПО врДанныеПоКвитанциям.АдресЭлектроннойПочты = врСтопЛист.АдресЭлектроннойПочты
	|ИТОГИ
	|	МАКСИМУМ(АдресЭлектроннойПочты),
	|	МАКСИМУМ(АдресЭлектроннойПочтыВСтопЛисте)
	|ПО
	|	Организация,
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДанныеПоКвитанциям", ДанныеПоКвитанциям);
	Запрос.УстановитьПараметр("Период",             ТекущаяДата());
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЛицевыеСчетаИсключенныеИзРассылки = Новый Массив;
	
	ПараметрыОтправки = Новый Структура;
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Если ОтправлятьВПисьмеСведенияОбОрганизации Тогда
			
			СведенияОбОрганизации = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ВыборкаОрганизаций.Организация, ТекущаяДата());
			
			Телефон = СведенияОбОрганизации.Телефоны;
			Адрес   = СведенияОбОрганизации.ФактическийАдрес;
			
		КонецЕсли;
		
		ВыборкаЛицевыхСчетов = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЛицевыхСчетов.Следующий() Цикл
			
			Если ВыборкаЛицевыхСчетов.АдресЭлектроннойПочтыВСтопЛисте Тогда
				
				Структура = Новый Структура;
				Структура.Вставить("ЛицевойСчет",           ВыборкаЛицевыхСчетов.ЛицевойСчет);
				Структура.Вставить("АдресЭлектроннойПочты", ВыборкаЛицевыхСчетов.АдресЭлектроннойПочты);
				ЛицевыеСчетаИсключенныеИзРассылки.Добавить(Структура);
				
				// Переходим к следующему л/с.
				Продолжить;
				
			КонецЕсли;
			
			ПараметрыОтправки.Очистить();
			
			ПараметрыОтправки.Вставить("ЭтоМассоваяРассылка", Истина);
			
			ПараметрыОтправки.Вставить("Кому", ВыборкаЛицевыхСчетов.АдресЭлектроннойПочты);
			ПараметрыОтправки.Вставить("Тема", "Квитанция на оплату услуг - " + ВыборкаЛицевыхСчетов.ЛицевойСчет);
			ПараметрыОтправки.Вставить("Тело", "Квитанция на оплату услуг по лицевому счету " + ВыборкаЛицевыхСчетов.ЛицевойСчет + "." +
											 "
											 |
											 |Данное сообщение сгенерировано и направлено Вам автоматически. Пожалуйста, не отвечайте на него.
											 |Если вы получили данное письмо по ошибке, пожалуйста, игнорируйте данное письмо.");
			
			Если ОтправлятьВПисьмеСведенияОбОрганизации Тогда
				
				ПараметрыОтправки.Тело = ПараметрыОтправки.Тело +
				"
				|_______________________________________________________________________________________
				|
				|С уважением, " + Строка(ВыборкаОрганизаций.Организация);
				
				Если ЗначениеЗаполнено(Телефон) Тогда
					ПараметрыОтправки.Тело = ПараметрыОтправки.Тело +
					"
					|Телефон: " + Телефон;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Адрес) Тогда
					ПараметрыОтправки.Тело = ПараметрыОтправки.Тело +
					"
					|Адрес: " + Адрес;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыОтправки.Вставить("ИмяОтправителя", Строка(ВыборкаОрганизаций.Организация));
			
			МассивВложений = Новый Массив;
			
			ВыборкаКвитанций = ВыборкаЛицевыхСчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКвитанций.Следующий() Цикл
				
				ИдентификаторТекущейКвитанции = Неопределено;
				
				НайденныеСтроки = ДанныеПоКвитанциям.НайтиСтроки(Новый Структура("НомерСтроки", ВыборкаКвитанций.НомерСтроки));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ИдентификаторТекущейКвитанции = НайденныеСтроки[0].ИдентификаторКвитанции;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИдентификаторТекущейКвитанции) Тогда
					
					// Формирование представления типа квитанции в имени файла.
					ПредставлениеТипаКвитанции = "";
					Если ВыборкаКвитанций.ТипКвитанции = "общая" Или ВыборкаКвитанций.ТипКвитанции = "основные услуги" Тогда
						ПредставлениеТипаКвитанции = "JKU";
					ИначеЕсли ВыборкаКвитанций.ТипКвитанции = "капитальный ремонт" Тогда
						ПредставлениеТипаКвитанции = "Kap";
					ИначеЕсли ВыборкаКвитанций.ТипКвитанции = "пени основные услуги" Тогда
						ПредставлениеТипаКвитанции = "JKU_PENI";
					ИначеЕсли ВыборкаКвитанций.ТипКвитанции = "пени капитальный ремонт" Тогда
						ПредставлениеТипаКвитанции = "Kap_PENI";
					КонецЕсли;
					Если Не ПустаяСтрока(ПредставлениеТипаКвитанции) Тогда
						ПредставлениеТипаКвитанции = "_" + ПредставлениеТипаКвитанции;
					КонецЕсли;
					
					// Пример имени файла квитанции: 0015001600_Kap_09.17.pdf
					ИмяФайлаКвитанции = Строка(ВыборкаЛицевыхСчетов.ЛицевойСчет) + ПредставлениеТипаКвитанции + "_" + Формат(ВыборкаКвитанций.МесяцНачисления, "ДФ=MM.yy") + ".pdf";
					
					// Заменяем в имени файла квитанции недопустимые символы.
					ИмяФайлаКвитанции = СтрЗаменить(ИмяФайлаКвитанции, "/", "");
					ИмяФайлаКвитанции = СтрЗаменить(ИмяФайлаКвитанции, "\", "");
					
					// Если имя файла содержит недопустимые символы, то присваиваем имени файла уник. идентификатор квитанции.
					
					МассивНедопустимыхСимволов = УПЖКХ_ТиповыеМетодыКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(ИмяФайлаКвитанции);
					
					ИмяФайлаСодержитНедопустимыеСимволы = Истина;
					
					Если МассивНедопустимыхСимволов.Количество() = 0 Тогда
						ИмяФайлаСодержитНедопустимыеСимволы = Ложь;
					КонецЕсли;
					
					Если ИмяФайлаСодержитНедопустимыеСимволы Тогда
						ИмяФайлаКвитанции = Строка(ИдентификаторТекущейКвитанции) + ".pdf";
					КонецЕсли;
					
					ПолноеИмяФайлаКвитанции = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПолноеИмяФайла(КаталогСохраненияКвитанцийНаСервере, ИмяФайлаКвитанции);
					
					ОбластьКвитанции = ТабличныйДокумент.ПолучитьОбласть(ИдентификаторТекущейКвитанции);
					
					ОбластьКвитанции.ИмяПараметровПечати = ТабличныйДокумент.ИмяПараметровПечати;
					
					ОбластьКвитанции.Автомасштаб = Истина;
					
					Попытка
						ОбластьКвитанции.Записать(ПолноеИмяФайлаКвитанции, ТипФайлаТабличногоДокумента.PDF);
					Исключение
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось записать файл квитанции по лицевому счету: " + Строка(ВыборкаЛицевыхСчетов.ЛицевойСчет));
						ВызватьИсключение ОписаниеОшибки();
					КонецПопытки;
					
					ДвоичныеДанныеКвитанции = Новый ДвоичныеДанные(ПолноеИмяФайлаКвитанции);
					АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКвитанции, Новый УникальныйИдентификатор);
					
					НовоеВложение = Новый Структура;
					НовоеВложение.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
					НовоеВложение.Вставить("Представление",             ИмяФайлаКвитанции);
					
					МассивВложений.Добавить(НовоеВложение);
					
				КонецЕсли;
				
				ОтправленоКвитанций = ОтправленоКвитанций + 1;
				
			КонецЦикла;
			
			ПараметрыОтправки.Вставить("Вложения", МассивВложений);
			
			// Непосредственная отправка электронного письма.
			УПЖКХ_ТиповыеМетодыСервер.ОтправитьПочтовоеСообщение(УчетнаяЗаписьДляРассылки, ПараметрыОтправки);
			
			// Сообщение прогресса.
			УПЖКХ_ТиповыеМетодыСервер.СообщитьПрогресс(Окр(100 * ОтправленоКвитанций / ВсегоКвитанций));
			
			// Перед отправкой следующего письма возможно стоит сделать задержку, например в 5 секунд.
			Таймаут(ИнтервалМеждуОтправкамиКвитанцийВСекундах);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ЛицевыеСчетаИсключенныеИзРассылки, АдресХранилищаДляРезультатовФоновогоЗадания);
	
КонецПроцедуры

// Ограничивает таблицу с данными по квитанциям до опеределенного кол-ва лицевых счетов.
//
// Параметры:
//  ДанныеПоКвитанциям - ТаблицаЗначений - таблица значений с данными для рассылки квитанций.
//
Процедура ОграничитьДанныеПоКвитанциям(ДанныеПоКвитанциям)
	
	ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
	ДанныеПоКвитанцияПереопределяемый = ПолучитьПустуюТаблицуДляДанныхПоКвитанциям();
	
	КоличествоТестовыхПисем = ПолучитьПараметрыРассылкиКвитанций().КоличествоПисемВТестовойРассылке;
	
	Счетчик = 0;
	
	Для Каждого ТекСтр Из ДанныеПоКвитанциям Цикл
		
		Если ТекСтр.ЛицевойСчет <> ЛицевойСчет Тогда
			Счетчик = Счетчик + 1;
		КонецЕсли;
		
		Если Счетчик > КоличествоТестовыхПисем Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтр = ДанныеПоКвитанцияПереопределяемый.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтр, ТекСтр);
		
		ЛицевойСчет = ТекСтр.ЛицевойСчет;
		
	КонецЦикла;
	
	ДанныеПоКвитанциям = ДанныеПоКвитанцияПереопределяемый;
	
КонецПроцедуры

// Процедура выдерживает таймайт в секундах.
//
// Параметры:
//  ЗадержкаВСекундах - Число - число секунд.
//
Процедура Таймаут(ЗадержкаВСекундах)
	
	// Задержку сделаем случайной, с разбросом в 3 секунды.
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	ТекущаяЗадержка = ЗадержкаВСекундах + ГСЧ.СлучайноеЧисло(0, 3);
	
	ВремяНачалаТаймаута = ТекущаяДата();
	Пока Истина Цикл
		Если (ТекущаяДата() - ВремяНачалаТаймаута) >= ТекущаяЗадержка Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет состояние фонового задания по переданному идентификатору.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево              - возвращает Истина, если задание успешно выполнено,
//                        Ложь - если выполняется. В иных случаях вызывается исключение.
//
Функция ЗаданиеВыполнено(ИдентификаторЗадания) Экспорт
	
	Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

#КонецОбласти

#Область СтопЛист

// Размещает на форме флаг "Включить в стоп-лист".
Процедура СтопЛистПриСозданииНаСервере(Форма, ГруппаФлагаВключитьВСтопЛист, АдресЭлектроннойПочты) Экспорт
	
	// Если не хватает прав.
	Если Не ПравоДоступа("Просмотр", Метаданные.Подсистемы.УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	// Если рассылка отключена.
	Если Не ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьФункционалРассылкиКвитанцийПоЭлектроннойПочте") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	// Если уже группа "ГруппаВключитьВСтопЛист" уже существует.
	Если Не Элементы.Найти("ГруппаВключитьВСтопЛист") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяВключитьВСтопЛист = ПолучитьИмяВключитьВСтопЛист();
	
	ГруппаВключитьВСтопЛист = Элементы.Добавить("ГруппаВключитьВСтопЛист", Тип("ГруппаФормы"), ГруппаФлагаВключитьВСтопЛист);
	ГруппаВключитьВСтопЛист.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВключитьВСтопЛист.ОтображатьЗаголовок      = Ложь;
	ГруппаВключитьВСтопЛист.ЦветФона                 = Новый Цвет(255, 211, 233);
	ГруппаВключитьВСтопЛист.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаВключитьВСтопЛист.РастягиватьПоВертикали   = Ложь;
	ГруппаВключитьВСтопЛист.РастягиватьПоГоризонтали = Ложь;
	
	// Массив новых реквизитов.
	НовыеРеквизиты = Новый Массив;
	
	// Реквизит "ФлагВключитьВСтопЛист".
	НовыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВключитьВСтопЛист, Новый ОписаниеТипов("Булево"),,, Истина));
	
	// Добавляем реквизит на форму.
	Форма.ИзменитьРеквизиты(НовыеРеквизиты);
	
	// Элемент формы "ФлагВключитьВСтопЛист".
	ФлагВключитьВСтопЛист = Элементы.Добавить("Флаг" + ИмяВключитьВСтопЛист, Тип("ПолеФормы"), ГруппаВключитьВСтопЛист);
	ФлагВключитьВСтопЛист.Заголовок            = "Не производить рассылку квитанций на этот email";
	ФлагВключитьВСтопЛист.Вид                  = ВидПоляФормы.ПолеФлажка;
	ФлагВключитьВСтопЛист.ПутьКДанным          = ИмяВключитьВСтопЛист;
	ФлагВключитьВСтопЛист.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Право;
	ФлагВключитьВСтопЛист.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	ФлагВключитьВСтопЛист.Подсказка            = "На адрес электронной почты, включенный в стоп-лист, рассылка квитанций не производится.";
	
	// Устанавливаем значение флага "ВключитьВСтопЛист".
	Форма[ИмяВключитьВСтопЛист] = АдресЭлектроннойПочтыЕстьВСтопЛисте(АдресЭлектроннойПочты);
	
КонецПроцедуры

// Добавляет/извлекает адрес электронной почты л/с в/из стоп-лист.
Процедура СтопЛистПриЗаписиНаСервере(Форма, АдресЭлектроннойПочты) Экспорт
	
	// Если не хватает прав.
	Если Не ПравоДоступа("Просмотр", Метаданные.Подсистемы.УПЖКХ_РассылкаКвитанцийНаЭлектроннуюПочтуЛицевыхСчетов) Тогда
		Возврат;
	КонецЕсли;
	
	// Если рассылка отключена.
	Если Не ПолучитьФункциональнуюОпцию("УПЖКХ_ИспользоватьФункционалРассылкиКвитанцийПоЭлектроннойПочте") Тогда
		Возврат;
	КонецЕсли;
	
	ВключитьВСтопЛист = Форма["ВключитьВСтопЛист"];
	
	АдресЭлектроннойПочтыЕстьВСтопЛисте = АдресЭлектроннойПочтыЕстьВСтопЛисте(АдресЭлектроннойПочты);
	
	Если ВключитьВСтопЛист И Не АдресЭлектроннойПочтыЕстьВСтопЛисте Тогда
		
		Если ПустаяСтрока(АдресЭлектроннойПочты) Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_СтопЛистРассылкиКвитанций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
		МенеджерЗаписи.Записать();
		
	ИначеЕсли Не ВключитьВСтопЛист И АдресЭлектроннойПочтыЕстьВСтопЛисте Тогда
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_СтопЛистРассылкиКвитанций.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает "Истина", если переданный в параметры адрес электронной почты
// есть в стоп-листе, иначе - "Ложь".
Функция АдресЭлектроннойПочтыЕстьВСтопЛисте(АдресЭлектроннойПочты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СтопЛистРассылкиКвитанций.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтопЛистРассылкиКвитанций КАК УПЖКХ_СтопЛистРассылкиКвитанций
	|ГДЕ
	|	УПЖКХ_СтопЛистРассылкиКвитанций.АдресЭлектроннойПочты = &АдресЭлектроннойПочты";
	
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает строку "ВключитьВСтопЛист".
//
Функция ПолучитьИмяВключитьВСтопЛист() Экспорт
	
	Возврат "ВключитьВСтопЛист";
	
КонецФункции

#КонецОбласти
