#Область ПрограммныйИнтерфейс

Функция ДоступнаОблачнаяКриптография() Экспорт
	
	Возврат УниверсальныйОбменСБанками.ДоступнаОблачнаяКриптография();
	
КонецФункции

Функция СервисТранзакции(Транзакция) Экспорт
	
	Документооборот = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Транзакция, "Документооборот");
	Сервис = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документооборот, "Сервис");
	Возврат Сервис;
	
КонецФункции

Функция ОбновитьДанныеРесурсаВЖурналеОперацийСФайлами(Идентификатор, ИсходноеИмяФайла, ИмяРесурса, Знач Данные, Распаковать = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("РаспакованныеДанные", Неопределено);
	
	// Выбираем перечень файлов в пакете.
	Выборка = УниверсальныйОбменСБанками.
				ВыбратьДанныеВЖурналеОперацийСФайламиПоИдентификатору(Идентификатор, ИсходноеИмяФайла);
	Если Выборка.Количество() = 0 Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Данные о вложении не найдены.'");
		Возврат Результат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ЖурналОперацийСФайламиОбменаСБанками.СоздатьМенеджерЗаписи();
	
	Выборка.Следующий();
	МенеджерЗаписи.Идентификатор    = Идентификатор;
	МенеджерЗаписи.ИсходноеИмяФайла = Выборка.ИсходноеИмяФайла;
	МенеджерЗаписи.Предмет          = Выборка.Предмет;
	МенеджерЗаписи.Организация      = Выборка.Организация;
	МенеджерЗаписи.Прочитать();
	
	Попытка
		Если Распаковать Тогда
			// Распаковка сжатого файла.
			РезультатРаспаковки = УниверсальныйОбменСБанками.
				РаспаковатьДвоичныеДанные(Данные, ИсходноеИмяФайла);
			Если НЕ РезультатРаспаковки.Выполнено Тогда
				Результат.ОписаниеОшибки = РезультатРаспаковки.ОписаниеОшибки;
				Возврат Результат;
			КонецЕсли;
			Данные = РезультатРаспаковки.РаспакованныеДанные;
			Результат.РаспакованныеДанные = Данные;
		КонецЕсли;
		МенеджерЗаписи[ИмяРесурса] = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
		МенеджерЗаписи.Записать();
	Исключение
		Результат.ОписаниеОшибки = УниверсальныйОбменСБанкамиКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Результат.Выполнено = Истина;
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныхСертификатаИзДвоичныхДанных(ДанныеСертификата) Экспорт
	
	СертификатКриптографии = Новый СертификатКриптографии(ДанныеСертификата);
	Возврат УниверсальныйОбменСБанкамиКлиентСервер.СертификатКриптографииВСтуктуру(СертификатКриптографии);
	
КонецФункции

Функция СтрокаОтпечаткаВДвоичныеДанные(Строка) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СтрокаОтпечаткаВДвоичныеДанные(Строка);
	
КонецФункции

Функция ТекущаяДатаНаСервере() Экспорт
	
	Возврат УниверсальныйОбменСБанками.ТекущаяДатаНаСервере();
	
КонецФункции

Функция СертификатШифрованияБанков(Сервис, СписокБанков = Неопределено) Экспорт
	
	Сертификаты = УниверсальныйОбменСБанками.СертификатШифрованияБанков(Сервис, СписокБанков);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Сертификаты);
	
КонецФункции

Функция СертификатыПодписиБанка(Банк) Экспорт
	
	Сертификаты = УниверсальныйОбменСБанками.СертификатыПодписиБанка(Банк);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Сертификаты);
	
КонецФункции

Функция СертификатАвторизацииБанка(Банк) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СертификатАвторизацииБанка(Банк);
	
КонецФункции

// Получает сертификат, сопоставленный организации.
//
// Параметры:
//  Сервис - ПеречислениеСсылка.СервисыОбменаСБанками - сервис, для которого запрашивается сертификат.
//  Организация  - СправочникСсылка.Организации - организация, которой сопоставлен сертификат.
//
// Возвращаемое значение:
//   ОпределяемыйТип.ОтпечатокСертификатаДляОбменаСБанками - строковое значение отпечатка сертификата.
//
Функция ПолучитьСертификатОрганизации(Знач Сервис, Знач Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СертификатыОрганизацийДляОбменаСБанками.СертификатОтпечаток КАК Сертификат
	|ИЗ
	|	РегистрСведений.СертификатыОрганизацийДляОбменаСБанками КАК СертификатыОрганизацийДляОбменаСБанками
	|ГДЕ
	|	СертификатыОрганизацийДляОбменаСБанками.Организация = &Организация
	|	И СертификатыОрганизацийДляОбменаСБанками.Сервис = &Сервис");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сервис", Сервис);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Сертификат, Неопределено);
	
КонецФункции

// Сопоставляет сертификат для организации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, которой сопоставлен сертификат.
//  ОпределяемыйТип.ОтпечатокСертификата - хеш-сумма от данных сертификата.
//
// Возвращаемое значение:
//   Булево      - если Истина, то сертификат успешно сопоставлен; иначе Ложь.
//
Функция СохранитьСертификатОрганизации(Знач Сервис, Знач Организация, Знач ОтпечатокСертификата) Экспорт
	
	Запись = РегистрыСведений.СертификатыОрганизацийДляОбменаСБанками.СоздатьМенеджерЗаписи();
	Запись.Сервис = Сервис;
	Запись.Организация = Организация;
	Запись.СертификатОтпечаток = ОтпечатокСертификата;
	Попытка
		Запись.Записать(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция РаспаковатьДвоичныеДанные(Данные, ИмяФайла, Идентификатор = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РаспаковатьДвоичныеДанные(Данные, ИмяФайла, Идентификатор);
	
КонецФункции

Функция НайтиСертификатБанкаТранзакцииПоОтпечатку(Транзакция, Отпечаток) Экспорт
	
	СертификатыБанка = УниверсальныйОбменСБанками.СертификатыПодписиБанка(Транзакция.Банк);
	ОтпечатокСтрока = УниверсальныйОбменСБанкамиКлиентСервер.ДвоичныеДанныеВСтроку(Отпечаток);
	СертификатНайден = СертификатыБанка.Найти(ОтпечатокСтрока, "СертификатОтпечаток") <> Неопределено;
	
	Возврат СертификатНайден;
	
КонецФункции

Функция ПолучитьДанныеХранилища(Хранилище) Экспорт
	
	Возврат Хранилище.Получить();
	
КонецФункции

Функция ОпределитьТипТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьТипТранзакцииПоСсылке(Сервис, ТипТранзакцииОбменСБанками);
	
КонецФункции

Функция ОпределитьТипДокументаПоСсылке(Сервис, ВидДокументовОбменСБанками) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьТипДокументаПоСсылке(Сервис, ВидДокументовОбменСБанками);
	
КонецФункции

Функция ОпределитьСервисПоСсылке(СсылкаНаСервис) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьСервисПоСсылке(СсылкаНаСервис);
	
КонецФункции

Функция ОпределитьДокументооборотПоСсылке(СсылкаДокументооборот) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОпределитьТипДокументооборотаПоСсылке(СсылкаДокументооборот);
	
КонецФункции

Функция СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(Параметры) Экспорт
	
	Возврат УниверсальныйОбменСБанками.СоздатьТранзакцииИзДанныхЖурналаОперацийСФайлами(Параметры);
	
КонецФункции

Функция ЭтоОблачныйСертификатПользователя(Отпечаток) Экспорт
	
	Возврат УниверсальныйОбменСБанкамиПовтИсп.ЭтоОблачныйСертификатПользователя(Отпечаток);
	
КонецФункции

Функция ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПоместитьДанныеТранзакцииВЖурналОперацийСФайлами(Транзакция);
	
КонецФункции

Функция ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, Идентификатор) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ПоместитьДанныеЖурналаОперацийСФайламиВДанныеТранзакции(Транзакция, Идентификатор);
	
КонецФункции

Функция РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РасшифроватьИПроверитьПодписьВЖурналеОперацийСФайлами(Идентификатор, Транзакция);
	
КонецФункции

Функция ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОбработатьРезультатРасшифровкиТранзакции(Транзакция, РезультатРасшифровки);
	
КонецФункции

// Используется для получения параметров, используемых при отладке функциональности.
//
// Параметры:
//  Параметр     - Строка - имя настройки, хранящейся в константе ПараметрыТестированияУниверсальногоОбменаСБанками.
//
// Возвращаемое значение:
//   Булево или иное - значение особого параметра, задействующего анализируемую отладку.
//
Функция ПолучитьПараметрТестирования(Параметр) Экспорт
	
	Возврат  УниверсальныйОбменСБанками.ПолучитьПараметрТестирования(Параметр);
	
КонецФункции

Функция РеквизитыОрганизации(Организация, Реквизиты) Экспорт
	
	Возврат УниверсальныйОбменСБанками.РеквизитыОрганизации(Организация, Реквизиты);
	
КонецФункции

#Область ПрограммныйИнтерфейсДляПотребителей

Функция ТранзакцииТребующиеРасшифровки(Сервис = Неопределено, Организация = Неопределено, СписокТранзакций = Неопределено) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ТранзакцииТребующиеРасшифровки(Сервис, Организация, СписокТранзакций);
	
КонецФункции

Функция НайтиОблачныйСертификатВХранилище(Отпечаток) Экспорт
	
	Возврат УниверсальныйОбменСБанками.НайтиОблачныйСертификатВХранилище(Отпечаток);
	
КонецФункции

Функция ОтправитьТранзакцииВБанк(Сервис, Транзакции) Экспорт
	
	Возврат УниверсальныйОбменСБанками.ОтправитьТранзакцииНаСервер(Сервис, Транзакции);
	
КонецФункции

Функция ВременныеДанныеТранзакции(Идентификатор, СписокФайлов = Неопределено, ИсходныеДанные = Ложь, Результаты = Ложь, Подписи = Ложь, РезультатыПослеРасшифровки = Ложь) Экспорт
	
	Результат = УниверсальныйОбменСБанками.ВременныеДанныеТранзакции(Идентификатор, СписокФайлов, ИсходныеДанные, Результаты, Подписи);
	Результат = ОбщегоНазначения.ТаблицаЗначенийВМассив(Результат);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти