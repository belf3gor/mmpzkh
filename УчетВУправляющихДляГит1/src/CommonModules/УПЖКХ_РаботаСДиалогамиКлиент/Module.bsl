//// Этот модуль предназначен для реализации алгоритмов работы форм и 
//// содержит процедуры и функции работы с формами и элементами форм,
//// а также подготовки данных для представления информации в формах.
//// Временно присутствует секция поддержки формирования печатных форм.

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ С ДЕРЕВЬЯМИ ДОКУМЕНТА "РЕГИСТРАЦИЯ ОПЛАТЫ".

#Область ПрограммныйИнтерфейс

// Пересчитывает итоговые суммы в колонках "Сумма" и "Пени" дерева платежей.
//
// Параметры:
//  ДеревоПлатежей - ДеревоЗначений - дерево значений по платежам.
//  Форма          - УправляемаяФорма - форма, на которой необходимо пересчитать итоги.
//
Процедура ПересчитатьИтогСуммы(ДеревоПлатежей, Форма) Экспорт
	
	Для Каждого ВеткаМесяц Из ДеревоПлатежей.ПолучитьЭлементы() Цикл
		
		СтрокиДерева = ВеткаМесяц.ПолучитьЭлементы();
		
		ВеткаМесяц.Сумма         = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Сумма");
		ВеткаМесяц.Пени          = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Пени");
		ВеткаМесяц.Рассрочка     = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "Рассрочка");
		ВеткаМесяц.ДолгСумма     = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "ДолгСумма");
		ВеткаМесяц.АвансСумма    = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "АвансСумма");
		ВеткаМесяц.ДолгПени      = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "ДолгПени");
		ВеткаМесяц.АвансПени     = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "АвансПени");
		ВеткаМесяц.ДолгРассрочка = УПЖКХ_РаботаСДиалогамиКлиентСервер.ПолучитьИтогПоПолюВСтрокахДерева(СтрокиДерева, "ДолгРассрочка");
		
	КонецЦикла;
	
	СуммаИтог         = 0;
	ПениИтог          = 0;
	РассрочкаИтог     = 0;
	ДолгСуммаИтог     = 0;
	АвансСуммаИтог    = 0;
	ДолгПениИтог      = 0;
	АвансПениИтог     = 0;
	ДолгРассрочкаИтог = 0;
	
	Для Каждого ТекВетка Из ДеревоПлатежей.ПолучитьЭлементы() Цикл
		СуммаИтог         = СуммаИтог + ТекВетка.Сумма;
		ПениИтог          = ПениИтог + ТекВетка.Пени;
		РассрочкаИтог     = РассрочкаИтог + ТекВетка.Рассрочка;
		ДолгСуммаИтог     = ДолгСуммаИтог + ТекВетка.ДолгСумма;
		АвансСуммаИтог    = АвансСуммаИтог + ТекВетка.АвансСумма;
		ДолгПениИтог      = ДолгПениИтог + ТекВетка.ДолгПени;
		АвансПениИтог     = АвансПениИтог + ТекВетка.АвансПени;
		ДолгРассрочкаИтог = ДолгРассрочкаИтог + ТекВетка.ДолгРассрочка;
	КонецЦикла;
	
	Форма.ДеревоПлатежейСуммаИтог         = Формат(СуммаИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейДолгСуммаИтог     = Формат(ДолгСуммаИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейАвансСуммаИтог    = Формат(АвансСуммаИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейСуммаИтогОбщ      = Формат(ДолгСуммаИтог + АвансСуммаИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейПениИтог          = Формат(ПениИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейДолгПениИтог      = Формат(ДолгПениИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейАвансПениИтог     = Формат(АвансПениИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейПениИтогОбщ       = Формат(ДолгПениИтог + АвансПениИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейРассрочкаИтог     = Формат(РассрочкаИтог, "ЧДЦ=2");
	Форма.ДеревоПлатежейДолгРассрочкаИтог = Формат(ДолгРассрочкаИтог, "ЧДЦ=2");
	
КонецПроцедуры // ПересчитатьИтогСуммы()

// Подсчитывает и возвращает сумму документов в выделенных строках форм
// списков документов.
//
// Функция - Вычислить сумму документов
//
// Параметры:
//  ЭлементФормыСписок - ЭлементФормы - Список документов формы документа.
//  ИмяПоляСуммы       - Строка       - Имя поля суммы документов в списке документов.
// 
// Возвращаемое значение:
//  Число - Сумма документов.
//
Функция ВычислитьСуммуДокументов(ЭлементФормыСписок, ИмяПоляСуммы) Экспорт
	
	Если ЭлементФормыСписок.ПодчиненныеЭлементы.Найти(ИмяПоляСуммы) = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаДокументов  = 0;
	ВыделенныеСтроки = ЭлементФормыСписок.ВыделенныеСтроки;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл 
		СуммаДокументов = СуммаДокументов + ЭлементФормыСписок.ДанныеСтроки(Строка)[ИмяПоляСуммы];
	КонецЦикла;
	
	Возврат СуммаДокументов;
	
КонецФункции // ВычислитьСуммуДокументов()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ СРАВНЕНИЯ МАКЕТОВ.

#Область ПроцедурыСравненияМакетов

// Выполняет сравнение макета объекта с измененным пользовательским.
//
Процедура СравнитьТиповойМакетСПользовательским(ВладелецМакетаСтрока, НаименованиеМакета, ПредставлениеМакета = "", ВсегдаСравниватьСИзмененнымМакетом = Ложь) Экспорт
	
	АдресТабличныхДокументов = УПЖКХ_РаботаСДиалогамиСервер.ПолучитьТабличныеДокументыДляСравнения(ВладелецМакетаСтрока, НаименованиеМакета, ВсегдаСравниватьСИзмененнымМакетом);
	
	Если ПустаяСтрока(ПредставлениеМакета) Тогда
		ЗаголовокЛевый  = "Типовой макет";
		ЗаголовокПравый = "Пользовательский макет";
	Иначе
		ЗаголовокЛевый  = ПредставлениеМакета + " (Типовой макет)";
		ЗаголовокПравый = ПредставлениеМакета + " (Пользовательский макет)";
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("АдресТабличныхДокументов, ЗаголовокЛевый, ЗаголовокПравый",
											  АдресТабличныхДокументов, ЗаголовокЛевый, ЗаголовокПравый);
	
	ФормаСравнения = ОткрытьФорму("ОбщаяФорма.СравнениеТабличныхДокументов", ПараметрыОткрытияФормы,, Истина);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫВОДА СООБЩЕНИЙ ОБ ОШИБКАХ В КВИТАНЦИЯХ.

#Область ПроцедурыВыводаСообщенийОбОшибкахВКвитанциях

&НаКлиенте
// Выводит пользователю сообщение об ошибке.
//
Процедура ВывестиСообщениеОбОшибкеВКвитанции(Объект, ТекстОшибки = "") Экспорт
	
	МассивПодстрокПредупреждения = Новый Массив;
	
	// Проверяем, находится ли отчет в составе конфигурации.
	Если Лев(Объект.ИмяФормы, 5) = "Отчет" Тогда
		
		ТекстОшибкиДляПользователя   = "";
		НачалоТекстаДляРазработчиков = СтрНайти(Строка(ТекстОшибки), "Техническая информация для разработчиков");
		
		Если ТекстОшибкиДляПользователя = 0 Тогда
			ТекстОшибкиДляПользователя = ТекстОшибки;
		Иначе
			ТекстОшибкиДляПользователя = СокрЛП(Лев(Строка(ТекстОшибки), НачалоТекстаДляРазработчиков - 1));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстОшибкиДляПользователя) Тогда
			
			МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("Квитанция неработоспособна. Обратитесь за помощью к разработчикам: "));
			МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("otr@rarus.ru",,,, "mailto:otr@rarus.ru"));
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("
																				  |"));
				
				МассивПодстрокПредупреждения.Добавить(?(ТипЗнч(ТекстОшибки) = Тип("ФорматированнаяСтрока"), ТекстОшибки, Новый ФорматированнаяСтрока(ТекстОшибки)));
			КонецЕсли;
			
		Иначе
			МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("Произошла ошибка: "));
			
			Если ТипЗнч(ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
				МассивПодстрокПредупреждения.Добавить(ТекстОшибки);
			Иначе
				МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока(ТекстОшибки));
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("Не удалось сформировать квитанцию. Возможно, требуется адаптация к актуальному релизу программы. Рекомендуем ознакомиться с "));
		МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("инструкцией",,,, "https://vgkh.ru/faq/faq_tsj_3_0/oshibka_formirovaniya_kvitancii/"));
		МассивПодстрокПредупреждения.Добавить(Новый ФорматированнаяСтрока("."));
	КонецЕсли;
	
	СтрокаСообщения = Новый ФорматированнаяСтрока("");
	
	Для каждого ТекПодстрока из МассивПодстрокПредупреждения Цикл
		СтрокаСообщения = Новый ФорматированнаяСтрока(СтрокаСообщения, ТекПодстрока);
	КонецЦикла;
	
	ПоказатьПредупреждение(, СтрокаСообщения);
	
КонецПроцедуры

#КонецОбласти
