
#Область ПолучениеИУстановкаЗначенийКонстант

// Возвращает параметры доступа из константы ОТР_ПараметрыАккаунтаИнтернетСервисов.
//
Функция ПолучитьПараметрыАккаунта() Экспорт
	
	СохраненныеНастройки = Константы.ОТР_ПараметрыАккаунтаИнтернетСервисов.Получить().Получить();
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Возврат СохраненныеНастройки;
	Иначе
		Возврат Новый Структура("Логин, Пароль, Email, ИспользоватьSSL", "", "", "", Ложь);
	КонецЕсли;
	
КонецФункции

// Устанавливает в значение константы ОТР_ПараметрыАккаунтаИнтернетСервисов параметры доступа.
//
Процедура СохранитьПараметрыАккаунта(ПараметрыДоступа) Экспорт
	
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") Тогда
		ПараметрыДляСохранения = Новый ХранилищеЗначения(ПараметрыДоступа);
		Константы.ОТР_ПараметрыАккаунтаИнтернетСервисов.Установить(ПараметрыДляСохранения);
	Иначе
		Константы.ОТР_ПараметрыАккаунтаИнтернетСервисов.Установить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВзаимодействиеССервисами

// Выполняет проверку подлинность аккаунта.
//
Функция ВыполнитьВерификациюПараметров(СтруктураВерификации, СведенияОбОшибке) Экспорт
	
	ВерификацияПрошлаУспешно = Ложь;
	СтрокаПередачи = "&login=" + СтруктураВерификации.Логин + "&pass=" + СтруктураВерификации.Пароль + "&email=" + СтруктураВерификации.Email;
	
	мHTTPСоединение = ПолучитьСоединениеССервисомУправленияАккаунтами(СтруктураВерификации);
	
	Если мHTTPСоединение = Неопределено Тогда
		СведенияОбОшибке = "Не удалось подтвердить учетную запись: возможно, нет подключения к сети Интернет.";
	Иначе
		
		СтруктураОтвета           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/verification", СтрокаПередачи);
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.Свойство("data") И Не ПустаяСтрока(СтруктураОтвета.data.result) Тогда
				СтруктураПараметровДоступа = Новый Структура("Логин, Пароль, Email", СтруктураВерификации.Логин, СтруктураВерификации.Пароль, СтруктураВерификации.Email);
				// Устанавливает входные данные в константу.
				СохранитьПараметрыАккаунта(СтруктураПараметровДоступа);
				ВерификацияПрошлаУспешно = Истина;
				
			ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
				СведенияОбОшибке = "Не удалось подтвердить учетную запись.";
				СведенияОбОшибке = СведенияОбОшибке + ?(ПустаяСтрока(СведенияОбОшибке), "", Символы.ПС) + СтруктураОтвета.error.message;
			Иначе
				СведенияОбОшибке = "Не удалось подтвердить учетную запись: исключительная ошибка.";
			КонецЕсли;
			
		Иначе
			СведенияОбОшибке = "Не удалось подтвердить учетную запись: исключительная ошибка.";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВерификацияПрошлаУспешно;
	
КонецФункции

// Отправляет кодовое слово на сервер для проверки.
// Если кодовое слово совпадает, то выполняется акивация аккаунта.
//
Функция ОтправитьВведенноеКодовоеСловоНаСерверДляПроверки(КодовоеСлово, СведенияОбОшибке, СтруктураДанных) Экспорт
	
	СтрокаПередачи = "&login=" + СтруктураДанных.Логин + "&pin=" + КодовоеСлово;
	
	мHTTPСоединение = ПолучитьСоединениеССервисомУправленияАккаунтами(СтруктураДанных);
	
	РегистрацияУспешна = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		СтруктураОтвета = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/checkpin", СтрокаПередачи);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				РегистрацияУспешна = Истина;
				// Устанавливаем данные регистрации в нашу константу ОТР_ПараметрыАккаунтаИнтернетСервисов.
				СохранитьПараметрыАккаунта(СтруктураДанных);
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось выполнить регистрацию учетной записи: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат РегистрацияУспешна;
	
КонецФункции

// Отправляет кодовое слово на email повторно.
//
Функция ОтправитьКодовоеСловоНаEmailПовторно(СведенияОбОшибке = "", СтруктураДанных) Экспорт
	
	СтрокаПередачи = "&login=" + СтруктураДанных.Логин + "&email=" + СтруктураДанных.Email;
	
	мHTTPСоединение = ПолучитьСоединениеССервисомУправленияАккаунтами(СтруктураДанных);
	
	ПовторнаяОтправкаКодовогоСловаВыполнена = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		СтруктураОтвета           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/resend", СтрокаПередачи);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				ПовторнаяОтправкаКодовогоСловаВыполнена = Истина;
				Сообщить("Кодовое слово отправлено повторно");
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось выполнить повторную отправку кодового слова: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат ПовторнаяОтправкаКодовогоСловаВыполнена;
	
КонецФункции

// Получает токен. ДЕЙСВИТЕЛЬНЫЙ
// 
Функция ПолучитьТокенДляРаботыССервисом(ПовторнаяПроверка = Ложь) Экспорт
	
	// Проверяем, есть ли у пользователя токен.
	Токен = Константы.ОТР_КэшПодключенияАккаунтаИнтернетСервисов.Получить();
	ТокенПолучен = Ложь;
	Если ПустаяСтрока(Токен) Или ПовторнаяПроверка Тогда
		Токен = "";
		ПараметрыДоступа = ПолучитьПараметрыАккаунта();
		СтрокаПередачи = "&login=" + ПараметрыДоступа.Логин + "&pass=" + ПараметрыДоступа.Пароль;
		
		мHTTPСоединение = ПолучитьСоединениеССервисомУправленияАккаунтами(ПараметрыДоступа);
		
		Если мHTTPСоединение = Неопределено Тогда
			СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: возможно, нет подключения к сети Интернет.";
		Иначе
			СтруктураОтвета           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/token", СтрокаПередачи);
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
				Если СтруктураОтвета.Свойство("data") И Не ПустаяСтрока(СтруктураОтвета.data.token) Тогда
					Токен = СтруктураОтвета.data.token;
					ТокенПолучен = Истина;
				ИначеЕсли СтруктураОтвета.Свойство("error") Тогда
					СведенияОбОшибке = "Не удалось получить токен для работы с сервисом.";
					СведенияОбОшибке = СведенияОбОшибке + ?(ПустаяСтрока(СведенияОбОшибке), "", Символы.ПС) + СтруктураОтвета.error.message;
				Иначе
					СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: исключительная ошибка.";
				КонецЕсли;
				
			Иначе
				СведенияОбОшибке = "Не удалось получить токен для работы с сервисом: исключительная ошибка.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Константы.ОТР_КэшПодключенияАккаунтаИнтернетСервисов.Установить(Токен);
	
	Возврат Токен;
	
КонецФункции

// Функция отправки стандартных POST-запросов на сервис.
//
Функция ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, ТекстЗапроса, ТелоЗапроса)
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Host",         мHTTPСоединение.Сервер);
	ЗаголовкиHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ЗапросHTTP = Новый HTTPЗапрос(ТекстЗапроса, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8);
	// Кодовое слово отправляется на почту.
	ОтветHTTP = мHTTPСоединение.ОтправитьДляОбработки(ЗапросHTTP);
	Ответ     = СокрЛ(ОтветHTTP.ПолучитьТелоКакСтроку());
	
	СтруктураСведений = Новый Структура;
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		
		СтруктураСведений = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Возврат СтруктураСведений;
	
КонецФункции

#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

// Формирует структуру с объектами для регистрации.
//
Функция ПодготовитьСтруктуруРегистрации(Логин, Пароль, Email, Телефон = "") Экспорт
	
	СтруктураРегистрации = Новый Структура;
	СтруктураРегистрации.Вставить("Логин",           Логин);
	СтруктураРегистрации.Вставить("Пароль",          Пароль);
	СтруктураРегистрации.Вставить("Email",           Email);
	СтруктураРегистрации.Вставить("ИспользоватьSSL", Ложь);
	
	Если НЕ Телефон = Неопределено И НЕ Телефон = "" Тогда
		СтруктураРегистрации.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	Возврат СтруктураРегистрации;
	
КонецФункции

// Формирует строку данных для передачи в теле https запроса на передачу параметров доступа.
//
Функция СформироватьСтрокуПередачиПараметровДоступа(СтруктураРегистрации)
	
	// Дополняем структуру данных статистическими показателями.
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КолВоОрганизаций
	//|ИЗ
	//|	Справочник.Организации КАК Организации
	//|ГДЕ
	//|	НЕ Организации.ПометкаУдаления";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Если Выборка.Следующий() Тогда
	//	КолВоОрганизаций = Выборка.КолВоОрганизаций;
	//Иначе
	//	КолВоОрганизаций = 0;
	//КонецЕсли;
	
	СтруктураРегистрации.Вставить("НаименованиеКонфигурации", Метаданные.Имя);
	СтруктураРегистрации.Вставить("ВерсияКонфигурации",       Метаданные.Версия);
	СтруктураРегистрации.Вставить("ВерсияПлатформы",          СистемнаяИнформация.ВерсияПриложения);
	//СтруктураРегистрации.Вставить("КолВоОрганизаций",         КолВоОрганизаций);
	СтруктураРегистрации.Вставить("ПоставкаКонфигурации",     ?(Найти(Метаданные.Имя, "ПРОФ") > 0, "проф", "базовая"));
	
	//СтруктураЗаписейИнфо = Новый Структура("config_name, config_version, platform_version, company_number, edition",
	//							СтруктураРегистрации.НаименованиеКонфигурации, СтруктураРегистрации.ВерсияКонфигурации, СтруктураРегистрации.ВерсияПлатформы,
	//							СтруктураРегистрации.КолВоОрганизаций, СтруктураРегистрации.ПоставкаКонфигурации);
	
	СтруктураЗаписейИнфо = Новый Структура("config_name, config_version, platform_version, company_number, edition",
								СтруктураРегистрации.НаименованиеКонфигурации, СтруктураРегистрации.ВерсияКонфигурации, СтруктураРегистрации.ВерсияПлатформы,
								СтруктураРегистрации.ПоставкаКонфигурации);
	
	ЗаписьJsonИнфо = Новый ЗаписьJSON;
	ЗаписьJsonИнфо.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписатьJSON(ЗаписьJsonИнфо, СтруктураЗаписейИнфо);
	СтрокаМассиваИнфо = ЗаписьJsonИнфо.Закрыть();
	
	ИмяФайла     = ПолучитьИмяВременногоФайла();
	ФайлОтправки = Новый ТекстовыйДокумент();
	ФайлОтправки.УстановитьТипФайла(КодировкаТекста.UTF8);
	ФайлОтправки.УстановитьТекст(СтрокаМассиваИнфо);
	ФайлОтправки.Записать(ИмяФайла, КодировкаТекста.UTF8, Символы.ПС);
	
	Двоичные     = Новый ДвоичныеДанные(ИмяФайла);
	СтрокаBase64 = Base64Строка(Двоичные);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "/", "_");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "+", "-");
	
	Пока Прав(СтрокаBase64, 1) = "=" Цикл
		СтрокаBase64 = Сред(СтрокаBase64, 1, СтрДлина(СтрокаBase64) - 1);
	КонецЦикла;
	
	СтрокаПередачи = "&login=" + СтруктураРегистрации.Логин + "&pass=" + СтруктураРегистрации.Пароль + "&email=" + СтруктураРегистрации.Email +
					 ?(СтруктураРегистрации.Свойство("Телефон"), "&phone=" + СтруктураРегистрации.Телефон, "") + "&info=" + СтрокаBase64;
	
	Возврат СтрокаПередачи;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Отправка параметров доступа для регистрации на сервисе.

// Выполняет регистрацию аккаунта и отправляет кодовое слово на сервер.
//
Функция ЗарегистрироватьАккаунт(СтруктураРегистрации, СведенияОбОшибке) Экспорт
	
	мHTTPСоединение = ПолучитьСоединениеССервисомУправленияАккаунтами(СтруктураРегистрации);
	
	СтрокаПередачи = СформироватьСтрокуПередачиПараметровДоступа(СтруктураРегистрации);
	
	РегистрацияПрошлаУспешно = Ложь;
	
	// Получаем ответ на запрос передачи данных.
	Попытка
		
		СтруктураОтвета           = ОтправитьPOSTЗапросНаСервис(мHTTPСоединение, "api/clients/register", СтрокаПередачи);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("success") Тогда
			Если СтруктураОтвета.success Тогда
				РегистрацияПрошлаУспешно = Истина;
			Иначе
				Если СтруктураОтвета.Свойство("error") И ТипЗнч(СтруктураОтвета.error) = Тип("Структура") И СтруктураОтвета.error.Свойство("message") Тогда
					ОшибкаОбмена = СтруктураОтвета.error.message;
				Иначе
					ОшибкаОбмена = "";
				КонецЕсли;
				СведенияОбОшибке = "Не удалось создать учетную запись" + ?(ПустаяСтрока(ОшибкаОбмена), ".", ": " + ОшибкаОбмена);
			КонецЕсли;
		Иначе
			СведенияОбОшибке = "Не удалось создать учетную запись: исключительная ошибка.";
		КонецЕсли;
	Исключение
		СведенияОбОшибке = "Не удалось создать учетную запись: сервер не отвечает." + Символы.ПС + "Проверьте настройки соединения.";
	КонецПопытки;
	
	Возврат РегистрацияПрошлаУспешно;
	
КонецФункции

// Получает объект соединения к веб-сервису.
//
Функция ПолучитьСоединениеССервисомУправленияАккаунтами(ДанныеРегистрации)
	
	мHTTPСоединение = Новый HTTPСоединение("ws-tszh.vdgb-soft.ru",,,,,, ПолучитьОбъектSSL(, "ws-tszh.vdgb-soft.ru", ДанныеРегистрации));
	
	Возврат мHTTPСоединение;
	
КонецФункции

// Определяет необходимость использования SSL для подключения к сервису моб. приложения
// и подготавливает объект SSL, если это необходимо.
//
Функция ПолучитьОбъектSSL(ПовторноеПодключение = Ложь, Адрес, ПараметрыДоступа)
	
	// Подготавливаем сведения о необходимости использования SSL.
	// При этом:
	// 1. Если подключение первое, то выполянется попытка подключения с последними сохраненными настройками.
	// 2. При повторном подключении выполняется попытка подключения с противоположными сохраненным настройками.
	ИспользоватьSSL = Ложь;
	
	Если ПараметрыДоступа.Свойство("ИспользоватьSSL") Тогда
		ИспользоватьSSL = ПараметрыДоступа.ИспользоватьSSL;
	КонецЕсли;
	
	Если ПовторноеПодключение Тогда
		ИспользоватьSSL = НЕ ИспользоватьSSL;
	КонецЕсли;
	
	SSLОбъект = ?(ИспользоватьSSL,
				  Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено),
				  Неопределено);
	
	Попытка
		мHTTPСоединение = Новый HTTPСоединение(Адрес,,,,,, SSLОбъект);
		ЗапросHTTP = Новый HTTPЗапрос("api/clients");
		ОтветHTTP = мHTTPСоединение.Получить(ЗапросHTTP);
		КодОтвета = ОтветHTTP.КодСостояния;
		Если КодОтвета = 200 Тогда
			Ответ = СокрЛП(ОтветHTTP.ПолучитьТелоКакСтроку());
		Иначе
			Ответ = СтрШаблон("failure(%1): %2", КодОтвета, СокрЛП(ОтветHTTP.ПолучитьТелоКакСтроку()));
		КонецЕсли;
	Исключение
		Ответ = "";
	КонецПопытки;
	
	СтруктураОтвета = Новый Структура;
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ);
		
		СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
		
		ЧтениеJSON.Закрыть();
	Исключение
	КонецПопытки;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
		ПараметрыДоступа.Вставить("ИспользоватьSSL", ИспользоватьSSL);
	ИначеЕсли НЕ ПовторноеПодключение Тогда
		
		Возврат ПолучитьОбъектSSL(Истина, Адрес, ПараметрыДоступа);
		
	КонецЕсли;
	
	Возврат SSLОбъект;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Проверяет email адрес на соответствие требованиям стандартов RFC 5321, RFC 5322,
// а также RFC 5335, RFC 5336 и RFC 3696.
// Кроме того, функция ограничивает использование спецсимволов.
// 
// Параметры:
//  Адрес - Строка - проверяемый email.
//  РазрешитьЛокальныеАдреса - Булево - не выдавать ошибку в случае отсутствия зоны домена в адресе.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция АдресЭлектроннойПочтыСоответствуетТребованиям(Знач Адрес, РазрешитьЛокальныеАдреса = Ложь) Экспорт
	
	// Допустимые символы для email.
	Буквы = "abcdefghijklmnopqrstuvwxyzабвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Цифры = "0123456789";
	СпецСимволы = ".@_-:+";
	
	// проверяем символ @
	Если СтрЧислоВхождений(Адрес, "@") <> 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разрешаем двоеточие только один раз.
	Если СтрЧислоВхождений(Адрес, ":") > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем две точки подряд
	Если СтрНайти(Адрес, "..") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Приводим строку адреса к нижнему регистру.
	Адрес = НРег(Адрес);
	
	// Проверяем допустимые символы.
	Если Не СтрокаСодержитТолькоДопустимыеСимволы(Адрес, Буквы + Цифры + СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разбираем адрес на local-part и domain.
	Позиция = СтрНайти(Адрес,"@");
	ЛокальноеИмя = Лев(Адрес, Позиция - 1);
	Домен = Сред(Адрес, Позиция + 1);
	
	// Проверяем на заполненность и допустимость длины.
	Если ПустаяСтрока(ЛокальноеИмя)
	 	Или ПустаяСтрока(Домен)
		Или СтрДлина(ЛокальноеИмя) > 64
		Или СтрДлина(Домен) > 255 Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем наличие спецсимволов в начале и в конце домена.
	Если ЕстьСимволыВНачалеВКонце(Домен, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене должна быть минимум одна точка.
	Если Не РазрешитьЛокальныеАдреса И СтрНайти(Домен,".") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа подчеркивания.
	Если СтрНайти(Домен,"_") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа двоеточие.
	Если СтрНайти(Домен,":") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// В домене не должно быть символа "плюс".
	Если СтрНайти(Домен,"+") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Выделяем зону (TLD) из имени домена.
	Зона = Домен;
	Позиция = СтрНайти(Зона,".");
	Пока Позиция > 0 Цикл
		Зона = Сред(Зона, Позиция + 1);
		Позиция = СтрНайти(Зона,".");
	КонецЦикла;
	
	// Проверяем зону домена (минимум 2 символа, только буквы).
	Возврат РазрешитьЛокальныеАдреса Или СтрДлина(Зона) >= 2 И СтрокаСодержитТолькоДопустимыеСимволы(Зона,Буквы);
	
КонецФункции

// Проверка на допустимые символы.
//
Функция СтрокаСодержитТолькоДопустимыеСимволы(Строка, ДопустимыеСимволы)
	
	МассивСимволов = Новый Массив;
	
	Для Позиция = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		МассивСимволов.Добавить(Сред(ДопустимыеСимволы,Позиция,1));
	КонецЦикла;
	
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Если МассивСимволов.Найти(Сред(Строка, Позиция, 1)) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверка на наличие символов.
//
Функция ЕстьСимволыВНачалеВКонце(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = (Лев(Строка,1) = Символ) Или (Прав(Строка,1) = Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти