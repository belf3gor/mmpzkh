// Содержит в себе общие процедуры и функции, которые могут быть либо 
// заполнены самостоятельно, либо вызывать соответствующие процедуры и функции
// родительской конфигурации.
//
// Изменения в модуле разрешены.

////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ТИПОВЫХ ФУНКЦИЙ И ПРОЦЕДУР

#Область ВызовТиповыхФункцийИПроцедур

// Функция определяет, является ли текущий сеанс толстым клиентом обычного приложения.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ТолстыйКлиентОбычноеПриложение - Булево.
//
Функция ЭтоТолстыйКлиентОбычноеПриложение() Экспорт
	
	ТолстыйКлиентОбычноеПриложение = Ложь;
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ТолстыйКлиентОбычноеПриложение = Истина;
	#КонецЕсли
	
	Возврат ТолстыйКлиентОбычноеПриложение;
	
КонецФункции // ЭтоТолстыйКлиентОбычноеПриложение()

// Функция определяет, является ли текущий контекст серверным в клиент-серверном варианте.
// В файловом варианте функция всегда будет возвращать значение ЛОЖЬ.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   ЭтоСервер - Булево
//
Функция ЭтоСервер() Экспорт
	
	ЭтоСервер = Истина;
	
	#Если Клиент Тогда
		ЭтоСервер = Ложь;
	#КонецЕсли
	
	Возврат ЭтоСервер;
	
КонецФункции // ЭтоСервер()

// Содержит в себе общие процедуры и функции, которые могут быть либо 
// заполнены самостоятельно, либо вызывать соответствующие процедуры и функции
// родительской конфигурации.
//
// Изменения в модуле разрешены.

////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ТИПОВЫХ ФУНКЦИЙ И ПРОЦЕДУР

// Функция возвращает идентификатор конфигурации.
Функция ИДКонфигурации() Экспорт
	
	//// для БП 2.0, УПП 1.3
	//Возврат РегламентированнаяОтчетность.ИДКонфигурации();
	
	// для БП 3.0
	Возврат РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
КонецФункции

// Функция возвращает текущего пользователя.
Функция ТекущийПользователь() Экспорт
	
	//// для БП 2.0, УПП 1.3
	//Возврат глЗначениеПеременной("глТекущийПользователь");
	
	// для БП 3.0
	Возврат ПользователиКлиентСервер.ТекущийПользователь();
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Неопределено;
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		
		УстановитьБезопасныйРежим(Истина);
		
		ПолученныйМодуль = Вычислить(Имя);
		
		Если ТипЗнч(ПолученныйМодуль) = Тип("ОбщийМодуль") Тогда
			Модуль = ПолученныйМодуль;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

// Функция возвращает значение настройки по умолчанию.
Функция ПолучитьЗначениеПоУмолчанию(НаименованиеНастройки) Экспорт
	
	//// для БП 2.0, УПП 1.3
	//Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь(), НаименованиеНастройки);
	
	// для БП 3.0
	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию(НаименованиеНастройки);
	
КонецФункции

// Процедура определяет текущего пользователя.
Функция ОпределитьТекущегоПользователя(ОписаниеОшибкиОпределенияПользователя)
	
	//// для БП 2.0, УПП 1.3
	//УправлениеПользователями.ОпределитьТекущегоПользователя(ОписаниеОшибкиОпределенияПользователя);
	
	// дальше - уже готовая функция
	Возврат ТекущийПользователь();
	
КонецФункции

// Определяет настройку пользователя по доступности функционала.
//
// Параметры:
//  НаименованиеНастройки - Строка - наименование настройки пользователя.
//
// Возвращаемое значение:
//  Булево - доступен ли функционал для пользователя.
//
Функция ПолучитьНастройкуПользователяДоступностиФункционала(НаименованиеНастройки) Экспорт
	
	// Настройка пользователя отключает доступность защищаемого блока, поэтому
	// по умолчанию - Истина.
	ФункционалДоступен = Истина;
	
	Если СЗК_ТиповыеМетоды.ИДКонфигурации() = "БП" Тогда
		ОписаниеОшибкиОпределенияПользователя = "";
		ТекущийПользователь = ОпределитьТекущегоПользователя(ОписаниеОшибкиОпределенияПользователя);
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			// Проверить настройку пользователя
			Если СЗК_ТиповыеМетоды.ПолучитьЗначениеПоУмолчанию(НаименованиеНастройки) = Истина Тогда
				ФункционалДоступен = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СЗК_ТиповыеМетоды.ИДКонфигурации() = "УПП"
	      Или СЗК_ТиповыеМетоды.ИДКонфигурации() = "БП_КЗХ" Тогда
		Если СЗК_ТиповыеМетоды.ПолучитьЗначениеПоУмолчанию(НаименованиеНастройки) = Истина Тогда
			ФункционалДоступен = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФункционалДоступен;
	
КонецФункции // ПолучитьНастройкуПользователяДоступностиФункционала()

// Процедура выдает сообщение об ошибке.
Процедура СообщитьОбОшибке(ТекстОшибки, Отказ = Ложь, Заголовок = "") Экспорт
	
	//// для БП 2.0, УПП 1.3
	//ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
	
	// для БП 3.0
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , , , Отказ);
	
КонецПроцедуры

// Функция пытается получить значение переменной из кэша.
//
// Параметры:
//  ИмяПараметра - Строка - наименование переменной
//  Значение     - переменная, куда будет передано найденное значение.
//
// Возвращаемое значение:
//  Булево - удалось ли получить.
//
Функция ПолучитьПеременнуюИзКэша(ИмяПараметра, Значение) Экспорт
	
	//// для БП 2.0, УПП 1.3
	//Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	//
	//Если Кэш = Неопределено Тогда
	//	// Кэш не был проинициализирован
	//	Кэш = Новый Структура;
	//Иначе
	//	// Ищем значение в структуре
	//	НайденноеЗначение = Неопределено;
	//	Если Кэш.Свойство(ИмяПараметра, НайденноеЗначение) Тогда
	//		Значение = НайденноеЗначение;
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Возврат Ложь;
	
	// для БП 3.0
	Значение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("СЗК", ИмяПараметра, Значение, , ИмяПользователя());
	
	Возврат Истина;
	
КонецФункции // ПолучитьПеременнуюИзКэша()

// Функция записывает значение переменной в кэш.
//
// Параметры:
//  ИмяПараметра - Строка - наименование переменной
//  Значение     - переменная, куда будет передано найденное значение.
//
Процедура ЗаписатьПеременнуюВКэш(ИмяПараметра, Значение) Экспорт
	
	//// для БП 2.0, УПП 1.3
	//Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	//
	//Если Кэш = Неопределено Тогда
	//	// Кэш не был проинициализирован
	//	Кэш = Новый Структура;
	//КонецЕсли;
	//
	//Кэш.Вставить(ИмяПараметра, Значение);
	
	//ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	
	// для БП 3.0
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("СЗК", ИмяПараметра, Значение, , ИмяПользователя());
	
КонецПроцедуры // ЗаписатьПеременнуюВКэш()

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает "Истина", если возникла ошибка, иначе - "Ложь".
Функция ПолучитьПоследнийРезультатПроверкиЛицензии() Экспорт
	
	Возврат ПараметрыСеанса.СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке;
	
КонецФункции // ПолучитьПоследнийРезультатПроверкиЛицензии()

// Устаналивает по умолчанию значение параметра
// сеанаса "ОшибкаПроверкиЛицензии", как "Ложь".
Процедура СброситьПоследнийРезультатПроверкиЛицензии() Экспорт
	
	ПараметрыСеанса.СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке = Ложь;
	
КонецПроцедуры

// Возвращает в стуктуре описание текущей ошибки
// и рекомендации по ее устранению, если они есть. 
Функция ПолучитьОписаниеИРекомендацииДляУстраненияПоПолномуТекстуОшибки(ТекстОшибки) Экспорт
	
	Результат = "";
	
	// Поиск понятного описания ошибки и рекомендации по ее исправлению.
	Макет = ПолучитьОбщийМакет("СЗК_ИнформацияОСтандартныхОшибкахСЛК");
	
	КоличествоСтрокВМакете = Макет.ВысотаТаблицы;
	НомерТекущейСтроки = 2;
	
	Пока НомерТекущейСтроки <= КоличествоСтрокВМакете Цикл
		
		// Выполняем поиск кода ошибки в исходном тексте ошибки.
		Если Найти(ТекстОшибки, Макет.Область("R" + НомерТекущейСтроки + "C1").Текст) > 0 Тогда
			
			ОписаниеОшибки            = Макет.Область("R" + НомерТекущейСтроки + "C3").Текст;
			РекомендацииДляУстранения = Макет.Область("R" + НомерТекущейСтроки + "C4").Текст;
			
			Результат = ОписаниеОшибки + ?(ЗначениеЗаполнено(РекомендацииДляУстранения), Символы.ПС + РекомендацииДляУстранения, "");
			
		КонецЕсли;
		
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает "Истина", если текущая ОС сервера Linux.
Функция ЭтоСерверНаLinuxПлатформе() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64;
	
КонецФункции

// Процедура устанавливает параметр сеанса "СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке" по умолчанию.
//
Процедура УстановитьПараметрСеансаПоследнегоРезультатаПроверкиВЗначениеПоУмолчанию(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке" Тогда
		ПараметрыСеанса.СЗК_ОшибкаПолученияЛицензииПриПоследнейПроверке = Ложь;
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
