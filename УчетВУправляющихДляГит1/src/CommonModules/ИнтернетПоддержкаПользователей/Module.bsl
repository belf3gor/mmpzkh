///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интернет-поддержка пользователей".
// ОбщийМодуль.ИнтернетПоддержкаПользователей.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает имя, по которому программа идентифицируется в
// сервисах Интернет-поддержки.
//
// Возвращаемое значение:
//	Строка - имя программы. <Пустая строка>, если имя программы не заполнено.
//
Функция ИмяПрограммы() Экспорт
	
	Результат = СлужебнаяИмяПрограммы();
	Возврат ?(Результат = "Unknown", "", Результат);
	
КонецФункции

#Область АутентификацияВСервисахИнтернетПоддержки

// Возвращает логин и пароль пользователя Интернет-поддержки,
// сохраненные в информационной базе.
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Возвращаемое значение:
//	Структура - структура, содержащая логин и пароль пользователя
//		Интернет-поддержки:
//		* Логин - Строка - логин пользователя Интернет-поддержки;
//		* Пароль - Строка - пароль пользователя Интернет-поддержки.
//	Неопределено - при отсутствии сохраненных данных аутентификации.
//
Функция ДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт

	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторПодсистемы(),
		"login,password");

	Если ДанныеВБезопасномХранилище.login <> Неопределено
		И ДанныеВБезопасномХранилище.password <> Неопределено Тогда
		Возврат Новый Структура(
			"Логин, Пароль",
			ДанныеВБезопасномХранилище.login,
			ДанныеВБезопасномХранилище.password);
	КонецЕсли;

КонецФункции

// Возвращает тикет аутентификации пользователя на портале поддержки.
// Возвращенный тикет может быть проверен вызовом операции checkTicket()
// сервиса https://login.1c.ru/api/public/ticket?wsdl или
// https://login.1c.eu/api/public/ticket?wsdl.
// Получение тикета выполняется в соответствии с настройками
// библиотеки:
//	- доменная зона серверов (1c.ru или 1c.eu);
// Перед вызовом вызывающий код должен устанавливать привилегированный режим.
//
// Параметры:
//	ВладелецТикета - Строка - произвольное имя сервиса, для которого
//		выполняется аутентификация пользователя. Это же имя должно
//		использоваться при вызове операции checkTicket();
//		Не допускается незаполненное значение параметра.
//
// Возвращаемое значение:
//	Структура - результат получения тикета. Поля структуры:
//		* Тикет - Строка - полученный тикет аутентификации. Если при получении
//			тикета произошла ошибка (неверный логин или пароль или другая ошибка),
//			значение поля - пустая строка.
//		* КодОшибки - Строка - строковый код возникшей ошибки, который
//			может быть обработан вызывающим функционалом:
//				- <Пустая строка> - получение тикета выполнено успешно;
//				- "НеверныйЛогинИлиПароль" - неверный логин или пароль;
//				- "ПревышеноКоличествоПопыток" - превышено количество попыток
//					получения тикета с некорректным логином и паролем;
//				- "ОшибкаПодключения" - ошибка при подключении к сервису;
//				- "ОшибкаСервиса" - внутренняя ошибка сервиса;
//				- "НеизвестнаяОшибка" - при получении тикета возникла
//					неизвестная (не обрабатываемая) ошибка;
//		* СообщениеОбОшибке - Строка - краткое описание ошибки, которое
//			может быть отображено пользователю;
//		* ИнформацияОбОшибке - Строка - подробное описание ошибки, которое
//			может быть записано в журнал регистрации.
//
Функция ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета) Экспорт

	Если Не ЗначениеЗаполнено(ВладелецТикета) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ВладелецТикета""'");
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Работа в модели сервиса.
		МодульИнтернетПоддержкаПользователейВМоделиСервиса =
			ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
		Результат = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			ВладелецТикета);
		
	Иначе
		
		Результат = СлужебнаяТикетАутентификации(
			"",
			"",
			ВладелецТикета,
			НастройкиСоединенияССерверами());
		
	КонецЕсли;
	
	Если Результат.КодОшибки = "ОперацияНеПоддерживается" Тогда
		// Для внешней функциональности ошибка
		// интерпретируется как ошибка подключения к сервису.
		Результат.КодОшибки = "ОшибкаПодключения";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет заполнение данных аутентификации пользователя
// Интернет-поддержки.
//
// Возвращаемое значение:
//	Булево - признак заполнения данных аутентификации.
//		Истина - данные аутентификации заполнены,
//		Ложь - в противном случае.
//
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат (ДанныеАутентификацииПользователяИнтернетПоддержки() <> Неопределено);
	
КонецФункции

// Определяет, доступно ли текущему пользователю выполнение интерактивного
// подключения Интернет-поддержки в соответствии с текущим режимом работы
// и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - интерактивное подключение доступно,
//		Ложь - в противном случае.
//
Функция ДоступноПодключениеИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Пользователи.РолиДоступны("ПодключениеИнтернетПоддержки", , Ложь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакскомВызовСервера = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакскомВызовСервера");
		Если МодульПодключение1СТакскомВызовСервера.ДоступноИспользованиеСервиса1СТакском() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает URL для перехода на страницу сайта, система аутентификации
// которого интегрирована с Порталом 1С:ИТС.
// В зависимости от текущего режима работы информационной базы и наличия у
// текущего пользователя информационной базы соответствующих прав
// переданный URL страницы сайта трансформируется таким образом, что открытие
// страницы происходит с учетными данными пользователя Портала 1С:ИТС.
// При отсутствии прав, несоответствии режима работы или возникновении ошибок
// переданный URL возвращается без изменений.
//
// Важно. Полученный URL необходимо использовать сразу после получения, т.к.
// URL действителен ограниченное время (исчисляется секундами).
//
// Параметры:
//	URLСтраницыСайта - Строка - URL страницы сайта;
//
// Возвращаемое значение:
//	Строка - URL для перехода на страницу сайта.
//
Функция URLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта) Экспорт
	
	РезультатПолученияURL = СлужебнаяURLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта);
	Возврат РезультатПолученияURL.URL;
	
КонецФункции

#КонецОбласти

// Возвращает настройки соединения с серверами Интернет-поддержки.
//
// Возвращаемое значение:
//	Структура - настройки соединения. Поля структуры:
//		* УстанавливатьПодключениеНаСервере - Булево - Истина, если подключение
//			устанавливается на сервере 1С:Предприятие;
//		* ТаймаутПодключения - Число - таймаут подключения к серверам в секундах;
//		* ДоменРасположенияСерверовИПП - Число - если 0, устанавливать подключение
//			к серверам ИПП в доменной зоне 1c.ru, если 1 - в доменной зоне 1c.eu.
//
Функция НастройкиСоединенияССерверами() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	
КонецФункции

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	РежимРаботыЛокальный = Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено();
	
	Элементы.БИПГруппаНастройки.Видимость = Истина;
	Элементы.ГруппаПодключениеИПП.Видимость = ДоступноПодключениеИнтернетПоддержки();
	Элементы.БИПСообщениеВСлужбуТехническойПоддержки.Видимость = РежимРаботыЛокальный;
	
	// Состояние подключения Интернет-поддержки
	Если Элементы.ГруппаПодключениеИПП.Видимость Тогда
		УстановитьПривилегированныйРежим(Истина);
		Форма.БИПДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если Форма.БИПДанныеАутентификации <> Неопределено Тогда
			Форма.БИПДанныеАутентификации.Пароль = "";
		КонецЕсли;
		ИнтернетПоддержкаПользователейКлиентСервер.ОтобразитьСостояниеПодключенияИПП(Форма);
	КонецЕсли;
	// Конец Состояние подключения Интернет-поддержки
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПМониторИнтернетПоддержки.Видимость = Ложь;
	КонецЕсли;
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаНовости.Видимость = Ложь;
	КонецЕсли;
	// Конец Новости
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаОбновлениеПрограммы.Видимость = Ложь;
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаОбновлениеКлассификаторов.Видимость = Ложь;
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаПроверкаКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма);
	Иначе
		Элементы.БИПГруппаСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#Область БСПБазоваяФункциональность

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Параметры.Свойство("ИнтернетПоддержкаПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИПП = Новый Структура;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыИПП);
	КонецЕсли;
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиента.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	Если Параметры.Свойство("ИнтернетПоддержкаПользователей") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыИПП = Новый Структура;

	ПараметрыИПП.Вставить("ИмяКонфигурации"          , Метаданные.Имя);
	ПараметрыИПП.Вставить("ИмяПрограммы"             , СлужебнаяИмяПрограммы());
	ПараметрыИПП.Вставить("ВерсияКонфигурации"       , Метаданные.Версия);
	ПараметрыИПП.Вставить("КодЛокализации"           , ТекущийКодЛокализации());
	ПараметрыИПП.Вставить("ВерсияОбработкиОбновления", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());

	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	ПараметрыИПП.Вставить("ДоменРасположенияСерверовИПП", НастройкиСоединения.ДоменРасположенияСерверовИПП);

	ПараметрыИПП.Вставить(
		"ДоступноПодключениеИнтернетПоддержки",
		ДоступноПодключениеИнтернетПоддержки());
	
	// Добавление параметров подсистем.
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	Параметры.Вставить("ИнтернетПоддержкаПользователей", ПараметрыИПП);
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.2.5.1",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"Роль.ПодключениеИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"2.1.2.1",
		"Роль.ИспользованиеИПП",
		"Роль.ПодключениеКСервисуИнтернетПоддержки",
		"ИнтернетПоддержкаПользователей");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
		МодульМониторПортала1СИТС.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
//
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("ПараметрыКлиентаНаСервереБИП", "ИнтернетПоддержкаПользователей.УстановкаПараметровСеанса");
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец Новости
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт

	Если Не ОбщегоНазначения.РазделениеВключено() Тогда

		НовыеРазрешения = Новый Массив;

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.ru",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"login.1c.eu",
			443,
			НСтр("ru = 'Сервисы аутентификации (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.ru",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона ru)'"));
		НовыеРазрешения.Добавить(Разрешение);

		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"portal-support.1c.eu",
			443,
			НСтр("ru = 'Сервисы службы технической поддержки (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);

		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
		// ПолучениеОбновленийПрограммы
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
			МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
			МодульПолучениеОбновленийПрограммы.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		// Конец ПолучениеОбновленийПрограммы
		
		// МониторПортала1СИТС
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
			МодульМониторПортала1СИТС = ОбщегоНазначения.ОбщийМодуль("МониторПортала1СИТС");
			МодульМониторПортала1СИТС.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
		КонецЕсли;
		// Конец МониторПортала1СИТС
		
	КонецЕсли;
	
	ПодключениеСервисовСопровождения.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	
	// Подключение1СТакском
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском") Тогда
		МодульПодключение1СТакском = ОбщегоНазначения.ОбщийМодуль("Подключение1СТакском");
		МодульПодключение1СТакском.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец Подключение1СТакском
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРК
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец СПАРК
	
	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец Новости
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// ПолучениеВнешнихКомпонент
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец ПолучениеВнешнихКомпонент
	
	// ОбменДаннымиСВнешнимиСистемами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОбменДаннымиСВнешнимиСистемами") Тогда
		МодульСервисОбменаСообщениями = ОбщегоНазначения.ОбщийМодуль("СервисОбменаСообщениями");
		МодульСервисОбменаСообщениями.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	// Конец ОбменДаннымиСВнешнимиСистемами
	
КонецПроцедуры

#КонецОбласти

#Область БСППользователи

// См. ПользователиПереопределяемый.ПриОпределенииНазначенияРолей(
//
Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриОпределенииНазначенияРолей(НазначениеРолей);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

#КонецОбласти

#Область БСПТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
//
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	ПодключениеСервисовСопровождения.ПриОпределенииОбработчиковТекущихДел(Обработчики);
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		Обработчики.Добавить(МодульПолучениеОбновленийПрограммы);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		Обработчики.Добавить(МодульСПАРКРиски);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		Обработчики.Добавить(МодульОблачныйАрхив);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. ТекущиеДелаПереопределяемый.ПриОпределенииПорядкаРазделовКомандногоИнтерфейса.
//
Процедура ПриОпределенииПорядкаРазделовКомандногоИнтерфейса(Разделы) Экспорт

	Разделы.Добавить(Метаданные.Подсистемы.ИнтернетПоддержкаПользователей);

КонецПроцедуры

#КонецОбласти

#Область БСПВариантыОтчетов

// Интеграция с подсистемой СтандартныеПодсистемы.ВариантыОтчетов.
//
// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.НастроитьВариантыОтчетов(Настройки);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

#КонецОбласти

#Область БСПЦентрМониторинга

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриСбореПоказателейСтатистикиКонфигурации();
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область БСПРаботаВМоделиСервиса

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриПолученииСпискаШаблонов(Шаблоны);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	ПодключениеСервисовСопровождения.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
КонецПроцедуры

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		СтрОбработчик = Обработчики.Добавить();
		СтрОбработчик.ВидДанных      = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.КодОбработчика = "ТипыСобытийМониторинга1СПАРКРиски";
		СтрОбработчик.Обработчик     = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
	КонецЕсли;
	// Конец СПАРКРиски
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПолучитьОбработчикиПоставляемыхДанных(Обработчики);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// ПолучениеВнешнихКомпонент
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПолучитьОбработчикиПоставляемыхДанных(Обработчики);
	КонецЕсли;
	// Конец ПолучениеВнешнихКомпонент
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПолучитьОбработчикиПоставляемыхДанных(Обработчики);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке.
//
Процедура ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы) Экспорт

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповОбщихДанныхПоддерживающихСопоставлениеСсылокПриЗагрузке(Типы);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	ПодключениеСервисовСопровождения.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец СПАРКРиски

	// Новости
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостей = ОбщегоНазначения.ОбщийМодуль("ОбработкаНовостей");
		МодульОбработкаНовостей.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец Новости

	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы);
	КонецЕсли;
	// Конец ОблачныйАрхив

КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	ПодключениеСервисовСопровождения.ПослеЗагрузкиДанных(Контейнер);
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПослеЗагрузкиДанных(Контейнер);
	КонецЕсли;
	// Конец СПАРКРиски
	
КонецПроцедуры

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	Услуги = Новый Массив;
	
	// РаботаСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		МодульРаботаСКонтрагентами.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	// Конец РаботаСКонтрагентами
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриФормированииСпискаУслуг(Услуги);
	КонецЕсли;
	// Конец СПАРКРиски
	
	Если Услуги.Количество() > 0 Тогда
		// Поставщик добавляет только при наличии услуг.
		ПоставщикПортал1СИТС = ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоставщикПортал1СИТС.Услуги, Услуги);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание поставщика "Портал 1С:ИТС" для заполнения списка услуг
// в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
// Поставщик добавляется в список поставщиков.
//
// Параметры:
//	ПоставщикиУслуг - Массив - массив элементов типа Структура - описание поставщиков.
//		Подробное описание параметра см. в процедуре ПриФормированииСпискаУслуг.
//
// Возвращаемое значение:
//	Структура - см. процедуру ПриФормированииСпискаУслуг,
//		описание параметра ПоставщикиУслуг.
//
// Пример:
//	// Использование в методе ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
//	ПоставщикПортал1СИТС =
//		ИнтернетПоддержкаПользователей.ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг);
//	НоваяУслуга = Новый Структура;
//	НоваяУслуга.Вставить("Идентификатор", <Идентификатор услуги>);
//	НоваяУслуга.Вставить("Наименование" , <Наименование услуги>);
//	НоваяУслуга.Вставить("ТипУслуги"    , <Тип услуги>);
//	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
//
Функция ПоставщикУслугПортал1СИТСПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для Каждого ТекущийПоставщик Из ПоставщикиУслуг Цикл
		Если ТекущийПоставщик.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			Возврат ТекущийПоставщик;
		КонецЕсли;
	КонецЦикла;
	
	// Поставщика еще нет в списке - добавить нового поставщика.
	ПоставщикПортал1СИТС = Новый Структура;
	ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
	ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
	ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
	ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	
	Возврат ПоставщикПортал1СИТС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщегоНазначения

// В вызывающем коде перед записью данных необходимо проверить права
// и установить привилегированный режим.
// Сохраняет логин и пароль пользователя в подсистеме Интернет-поддержки.
//
Процедура СохранитьДанныеАутентификации(ДанныеАутентификации) Экспорт

	Если ДанныеАутентификации = Неопределено Тогда
		
		// Удалить все данные для логина из безопасного хранилища.
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы());
		
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru = 'Очищены данные аутентификации.'"));
		
		ПриУдаленииЛогинаИПароляИзИБ();
		
	Иначе

		// Запись данных в безопасное хранилище
		ИДПодсистемы = ИдентификаторПодсистемы();
		НачатьТранзакцию();
		Попытка
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Логин,
				"login");

			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИДПодсистемы,
				ДанныеАутентификации.Пароль,
				"password");
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Записаны данные аутентификации, логин ""%1"".'"),
				ДанныеАутентификации.Логин));
		
		ПриСохраненииЛогинаИПароляВИБ(ДанныеАутентификации.Логин, ДанныеАутентификации.Пароль);
		
	КонецЕсли;

КонецПроцедуры

// Возвращает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя получаемого свойства;
//	ЗначениеПоУмолчанию - Произвольный - значение свойства,
//		которое необходимо возвратить при отсутствии сохраненного свойства.
//
// Возвращаемое значение:
//	Произвольный - значение свойства.
//
Функция ЗначениеСвойстваБИП(Имя, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
	Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = СвойстваБИП.Получить(Имя);
	Если Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя устанавливаемого свойства;
//	Значение - - Произвольный - значение устанавливаемого свойства.
//
Процедура УстановитьЗначениеСвойстваБИП(Имя, Значение) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.СвойстваБИП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		СвойстваБИП = Константы.СвойстваБИП.Получить().Получить();
		Если ТипЗнч(СвойстваБИП) <> Тип("Соответствие") Тогда
			СвойстваБИП = Новый Соответствие;
		КонецЕсли;
		
		СвойстваБИП.Вставить(Имя, Значение);
		Константы.СвойстваБИП.Установить(Новый ХранилищеЗначения(СвойстваБИП));
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проверку, что переданный объект имеет тип СправочникОбъект.ИдентификаторыОбъектовМетаданных.
//
Функция ЭтоИдентификаторОбъектаМетаданных(Объект) Экспорт
	
	Возврат ТипЗнч(Объект) = Тип("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
КонецФункции

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		СообщениеОбОшибке);
	
КонецПроцедуры

// Записывает в журнал регистрации сообщение информации
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	Сообщение - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(),
		УровеньЖурналаРегистрации.Информация,
		,
		Данные,
		Сообщение);
	
КонецПроцедуры

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
//   Булево - Истина, если это разделенная конфигурация.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ЭтоРазделеннаяКонфигурация();
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
//   Булево - Истина, если сеанс запущен без разделителей.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейСлужебныйПовтИсп.СеансЗапущенБезРазделителей();
	
КонецФункции

// Возвращает значение разделителя сеанса.
//
Функция ЗначениеРазделителяСеанса() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		Возврат МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
КонецФункции

// Возвращает имя программы в сервисах Интернет-поддержки.
//
Функция СлужебнаяИмяПрограммы() Экспорт
	
	Результат = "";
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииИмениПрограммы(Результат);
	Если ПустаяСтрока(Результат) Тогда
		Результат = "Unknown";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает синоним конфигурации для использования в других подсистемах.
//
Функция СинонимКонфигурации() Экспорт

	Возврат Метаданные.Синоним;

КонецФункции

// Возвращает Истина, если у текущего пользователя есть право записи параметров ИПП.
// Ложь - в противном случае.
//
Функция ПравоЗаписиПараметровИПП() Экспорт

	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь)
		Или Пользователи.РолиДоступны("ПодключениеИнтернетПоддержки", , Ложь)
		Или ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Подключение1СТакском")
		И Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);

КонецФункции

// Реализует инкрементальный расчет хеш-суммы и кодировку в формат base64.
// Способ расчета и тип вычисляемого значения определяются типом хеш-функции.
//
// Параметры:
//  Данные  - Строка, ДвоичныеДанные - данные для расчета хеш-суммы.
//
// Возвращаемое значение:
//  Строка - рассчитанная хеш-сумма закодированная по алгоритму base64.
//
Функция КонтрольнаяСуммаФайла(Данные) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
		ХешированиеДанных.Добавить(Данные);
	ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
		ХешированиеДанных.ДобавитьФайл(Данные);
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра Данные (%1)'"),
			Строка(Данные));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
		
	Возврат Base64Строка(ХешированиеДанных.ХешСумма);
	
КонецФункции

// Возвращает идентификатор подсистемы в в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат "ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП";
	
КонецФункции

// Возвращает значение свойства Метаданные.Имя
//
Функция ИмяКонфигурации() Экспорт

	Возврат Метаданные.Имя;

КонецФункции

// Возвращает значение свойства Метаданные.Версия
//
Функция ВерсияКонфигурации() Экспорт
	
	Возврат Метаданные.Версия;

КонецФункции

// Проверяет доступность переданного URL по критерию:
//	Код ответа 200;
//	Таймаут ответа - 10 секунд.
//
Функция ПроверитьURLДоступен(URL, НастройкиПроксиСервера = Неопределено, Метод = Неопределено) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	Если НастройкиПроксиСервера = Неопределено Тогда
		Попытка
			ИнтернетПоддержкаПользователейСлужебныйПовтИсп.ПроверитьURLДоступен(
				URL,
				Метод,
				РезультатПроверки.ИмяОшибки,
				РезультатПроверки.СообщениеОбОшибке,
				РезультатПроверки.ИнформацияОбОшибке);
		Исключение
			Возврат РезультатПроверки;
		КонецПопытки;
	Иначе
		СлужебнаяПроверитьURLДоступен(
			URL,
			Метод,
			РезультатПроверки.ИмяОшибки,
			РезультатПроверки.СообщениеОбОшибке,
			РезультатПроверки.ИнформацияОбОшибке,
			НастройкиПроксиСервера);
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает номер версии платформы 1С:Предприятия.
//
Функция ТекущаяВерсияПлатформы1СПредприятие() Экспорт
	
	СистИнфо = Новый СистемнаяИнформация;
	Возврат СистИнфо.ВерсияПриложения;
	
КонецФункции

// Производит проверку хоста для URL полученного из внешних источников.
//
// Параметры:
//  URL - Строка - URL из внешнего источника.
//
Процедура ПроверитьURL(URL) Экспорт
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	ДоменХоста = Прав(НРег(СокрЛП(СтруктураURI.Хост)), 6);
	Если ДоменХоста <> ".1c.ru" И ДоменХоста <> ".1c.eu" Тогда
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестный хост (%1)'"),
			СтруктураURI.Хост);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

// Дополняет запись JSON дополнительными параметрами.
//
// Параметры:
//  ДопПараметрыЗапроса - Структура - дополнительные параметры запроса;
//  ЗаписьДанныхСообщения - ЗаписьJSON - поток записи запроса к сервису.
//
Процедура ЗаписатьДополнительныеПараметрыЗапроса(ДопПараметрыЗапроса, ЗаписьДанныхСообщения) Экспорт
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("additionalParameters");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого КлючЗначение Из ДопПараметрыЗапроса Цикл
		ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("key");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(КлючЗначение.Ключ);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Строка(КлючЗначение.Значение));
		ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
КонецПроцедуры

// Функция возвращает строку цифр.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Строка.
//
Функция ВсеЦифры() Экспорт

	Результат = "0123456789";
	Возврат Результат;

КонецФункции

// Функция проверяет, все ли символы строки соответствуют разрешенным.
// Возвращает список встреченных запрещенных символов или пустой список, если ошибок нет.
//
// Параметры:
//  СтрокаДляПроверки  - Строка - строка для проверки;
//  РазрешенныеСимволы - Строка - строка со списком разрешенных символов.
//
// Возвращаемое значение:
//  Список значений - если пустой, значит ошибок нет, в противном случае, в него будут возвращены все неправильные символы.
//
Функция ПроверитьСтрокуНаЗапрещенныеСимволы(СтрокаДляПроверки, РазрешенныеСимволы) Экспорт

	СписокЗапрещенныхСимволов = Новый СписокЗначений;

	СтрокаДляПроверкиЛокальная = СокрЛП(СтрокаДляПроверки);

	Для С=1 По СтрДлина(СтрокаДляПроверкиЛокальная) Цикл
		Символ = Сред(СтрокаДляПроверкиЛокальная, С, 1);
		Если (СтрНайти(РазрешенныеСимволы, Символ) = 0) Тогда
			// Найден неразрешенный символ, добавить в список.
			Если СписокЗапрещенныхСимволов.НайтиПоЗначению(Символ) = Неопределено Тогда
				СписокЗапрещенныхСимволов.Добавить(Символ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат СписокЗапрещенныхСимволов;

КонецФункции

// Для объекта ХДТО возвращает его xml представление - нужно для отладки.
// В отличие от ОбщегоНазначения.ОбъектXDTOВСтрокуXML возвращает строку другого формата.
//
// Параметры:
//  ОбъектХДТО  - ОбъектXDTO  - требуемый объект;
//  ФабрикаХДТО - ФабрикаXDTO - на каком основании создавать тип (может быть по-умолчанию - из конфигурации, и из веб-сервиса).
//
// Возвращаемое значение:
//   Строка - xml-представление объекта.
//
Функция ПредставлениеОбъектаХДТО(ОбъектХДТО, ФабрикаХДТО = Неопределено) Экспорт

	Результат = "";

	Если ФабрикаХДТО = Неопределено Тогда
		ФабрикаХДТО = ФабрикаXDTO;
	КонецЕсли;

	Если ТипЗнч(ОбъектХДТО) = Тип("ОбъектXDTO") Тогда
		ЗаписьХМЛ = Новый ЗаписьXML;
		ЗаписьХМЛ.УстановитьСтроку(
			Новый ПараметрыЗаписиXML(
				"UTF-8",    // Кодировка
				,           // Версия
				Истина,     // Отступ
				Истина,     // ОтступАтрибутов
				Символы.Таб)); // СимволыОтступа
		Попытка
			ФабрикаХДТО.ЗаписатьXML(ЗаписьХМЛ, ОбъектХДТО);
			Результат = ЗаписьХМЛ.Закрыть();
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении xml-представления объекта ХДТО:
					|%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
				НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия.
				НСтр("ru='БазовыйФункционал. Отладка. ПредставлениеОбъектаХДТО'"), // ИдентификаторШага.
				"Ошибка", // УровеньЖурналаРегистрации.*
				, // ОбъектМетаданных.
				, // Данные.
				ТекстСообщения, // Комментарий.
				Истина); // ВестиПодробныйЖурналРегистрации.
		КонецПопытки;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Для целей отладки из файла возвращает первые несколько строк.
// Файл должен располагаться на сервере.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла;
//  КоличествоСтрок - Число  - количество строк, которое необходимо прочитать (должно быть больше 0 и меньше 1000).
//
// Возвращаемое значение:
//   Строка - первые несколько строк файла.
//
Функция СодержимоеТекстовогоФайла(ПолноеИмяФайла, КоличествоСтрок = 10) Экспорт

	Результат = "";

	Если (КоличествоСтрок <= 0) ИЛИ (КоличествоСтрок > 1000) Тогда
		ЧислоСтрокДляСчитывания = 10;
	Иначе
		ЧислоСтрокДляСчитывания = КоличествоСтрок;
	КонецЕсли;

	Попытка
		ЧтениеТекстаЛокальное = Новый ЧтениеТекста;
		ЧтениеТекстаЛокальное.Открыть(ПолноеИмяФайла, "UTF-8", , , Ложь); // Открывать НЕ в монопольном режиме
		ДостигнутКонецФайла = Ложь;
		Пока (ЧислоСтрокДляСчитывания > 0) И (ДостигнутКонецФайла = Ложь) Цикл
			СтрокаИзФайла = ЧтениеТекстаЛокальное.ПрочитатьСтроку();
			ЧислоСтрокДляСчитывания = ЧислоСтрокДляСчитывания - 1;
			Если СтрокаИзФайла = Неопределено Тогда
				ДостигнутКонецФайла = Истина;
			Иначе
				Если ПустаяСтрока(Результат) Тогда
					Результат = СтрокаИзФайла;
				Иначе
					Результат = Результат + Символы.ПС + СтрокаИзФайла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='При чтении файла с именем %1 произошла ошибка:
				|%2'"),
			ПолноеИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ТекстВДвоичныхДанных(Данные) Экспорт

	Результат = "";

	Если ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Возврат "";
	КонецЕсли;

	ИмяВремФайла = ПолучитьИмяВременногоФайла("txt");
	Данные.Записать(ИмяВремФайла);
	Результат = ТекстВФайле(ИмяВремФайла);

	Попытка
		УдалитьФайлы(ИмяВремФайла);
	Исключение
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ИнтеграцияПодсистемБиблиотеки

// Определяет список модулей библиотек и конфигурации, которые предоставляют
// основные сведения о сервисах: идентификатор, наименование, описание и картинка.
// Модуль должен обязательно содержать процедуру ПриДобавленииОписанийСервисовСопровождения. Пример см.
// процедуру СПАРКРиски.ПриДобавленииОписанийСервисовСопровождения.
//
// Параметры:
//  МодулиСервисов - Массив - имена серверных общих модулей библиотек и конфигурации.
//                             
// Пример
//  МодулиСервисов.Добавить("СПАРКРиски");
//  МодулиСервисов.Добавить("РаботаСКонтрагентами");
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииСервисовСопровождения(МодулиСервисов);
	
КонецПроцедуры

#КонецОбласти

#Область Тарификация

Функция УслугаПодключена(ИдентификаторУслуги, ЗначениеРазделителя = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		// В локальном режиме нет функциональности
		// для проверки по данным ИБ.
		Возврат Истина;
	Иначе
		
		ТребуетсяРазделение = Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных();
		Если ТребуетсяРазделение Тогда
			Если ЗначениеРазделителя = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не заполнено значение параметра ""ЗначениеРазделителя"".'");
			КонецЕсли;
			МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
			МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
		КонецЕсли;
		
		МодульТарификация = ОбщегоНазначения.ОбщийМодуль("Тарификация");
		Результат = МодульТарификация.ЗарегистрированаЛицензияБезлимитнойУслуги(
			ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС(),
			ИдентификаторУслуги);
		
		Если ТребуетсяРазделение Тогда
			МодульРаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Если Не Результат Тогда
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Услуга с идентификатором %1 не подключена.'"),
					ИдентификаторУслуги));
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСодержимогоИзИнтернет

// Загружает содержимое из Интернет по протоколу HTTP(S)
// с использованием методов GET, POST или PUT.
//
Функция ЗагрузитьСодержимоеИзИнтернет(
	Знач URL,
	Знач Логин = Неопределено,
	Знач Пароль = Неопределено,
	ДопПараметры = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Содержимое"        , Неопределено);
	Результат.Вставить("КодСостояния"      , 0);
	Результат.Вставить("ФорматОтвета"      , 0);

	// Формат ответа: 0 - имя файла ответа, 1 - как строка, 2 - как двоичные данные.
	// Метод: "GET", "POST" или "PUT".
	// ДанныеДляОбработки: данные, передаваемые методом POST.
	// ФорматДанныхДляОбработки: 0 - имя файла, 1 как строка, 2 - как двоичные данные.
	// Заголовки - заголовки запроса.
	ПараметрыПолучения = Новый Структура;
	ПараметрыПолучения.Вставить("ФорматОтвета"            , 0);
	ПараметрыПолучения.Вставить("Метод"                   , "GET");
	ПараметрыПолучения.Вставить("ДанныеДляОбработки"      , Неопределено);
	ПараметрыПолучения.Вставить("ФорматДанныхДляОбработки", 0);
	ПараметрыПолучения.Вставить("Заголовки"               , Неопределено);
	ПараметрыПолучения.Вставить("ИмяФайлаОтвета"          , Неопределено);
	ПараметрыПолучения.Вставить("Таймаут"                 , -1);
	ПараметрыПолучения.Вставить("НастройкиПрокси"         , Неопределено);
	
	Если ДопПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыПолучения, ДопПараметры);
	КонецЕсли;
	
	Если ПараметрыПолучения.Таймаут = -1 Тогда
		// Таймаут по умолчанию.
		ПараметрыПолучения.Таймаут = 30;
	КонецЕсли;
	
	Результат.ФорматОтвета = ПараметрыПолучения.ФорматОтвета;
	
	КоличествоПеренаправлений  = 0;
	МаксКолвоПеренаправлений   = 7;
	Перенаправления            = Новый Массив;
	ВыполненныеПеренаправления = Новый Соответствие;
	ПроксиПоСхемам             = Новый Соответствие;
	ЗащищенноеСоединениеКэш    = Неопределено;
	
	URLДляПолучения = URL;
	HTTPЗапрос = Новый HTTPЗапрос;
	Если ПараметрыПолучения.Заголовки <> Неопределено Тогда
		HTTPЗапрос.Заголовки = ПараметрыПолучения.Заголовки;
	КонецЕсли;
	ТелоУстановлено = Ложь;
	Ответ = Неопределено;
	Пока КоличествоПеренаправлений < МаксКолвоПеренаправлений Цикл

		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLДляПолучения);
		Если СтруктураURI.Схема <> "https" Тогда
			ЗащищенноеСоединение = Неопределено;
		Иначе
			Если ЗащищенноеСоединениеКэш = Неопределено Тогда
				ЗащищенноеСоединениеКэш = НовыйЗащищенноеСоединение();
			КонецЕсли;
			ЗащищенноеСоединение = ЗащищенноеСоединениеКэш;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СтруктураURI.Логин) Тогда
			ЛогинДляПолучения  = СтруктураURI.Логин;
			ПарольДляПолучения = СтруктураURI.Пароль;
		Иначе
			ЛогинДляПолучения  = Логин;
			ПарольДляПолучения = Пароль;
		КонецЕсли;

		Если СтруктураURI.Порт = Неопределено ИЛИ ПустаяСтрока(СтруктураURI.Порт) Тогда
			Порт = ?(ЗащищенноеСоединение = Неопределено, 80, 443);
		Иначе
			Порт = Число(СтруктураURI.Порт);
		КонецЕсли;

		Прокси = ПроксиПоСхемам.Получить(СтруктураURI.Схема);
		Если Прокси = Неопределено Тогда
			Если ПараметрыПолучения.НастройкиПрокси = Неопределено Тогда
				Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
			Иначе
				Прокси = СформироватьИнтернетПрокси(ПараметрыПолучения.НастройкиПрокси, СтруктураURI.Схема);
			КонецЕсли;
			ПроксиПоСхемам.Вставить(СтруктураURI.Схема, Прокси);
		КонецЕсли;

		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			Порт,
			ЛогинДляПолучения,
			ПарольДляПолучения,
			Прокси,
			ПараметрыПолучения.Таймаут,
			ЗащищенноеСоединение);

		Попытка

			HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;

			Если ПараметрыПолучения.Метод = "GET" Тогда
				Ответ = Соединение.Получить(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
			ИначеЕсли ПараметрыПолучения.Метод = "HEAD" Тогда
				Ответ = Соединение.ПолучитьЗаголовки(HTTPЗапрос);
			Иначе
			
				Если НЕ ТелоУстановлено Тогда

					Если ПараметрыПолучения.ДанныеДляОбработки <> Неопределено Тогда

						Если ПараметрыПолучения.ФорматДанныхДляОбработки = 0 Тогда

							HTTPЗапрос.УстановитьИмяФайлаТела(ПараметрыПолучения.ДанныеДляОбработки);

						ИначеЕсли ПараметрыПолучения.ФорматДанныхДляОбработки = 1 Тогда

							HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыПолучения.ДанныеДляОбработки);

						Иначе

							HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ПараметрыПолучения.ДанныеДляОбработки);

						КонецЕсли;

					КонецЕсли;

					ТелоУстановлено = Истина;

				КонецЕсли;

				Если ПараметрыПолучения.Метод = "PUT" Тогда
					Ответ = Соединение.Записать(HTTPЗапрос);
				Иначе
					// POST
					Ответ = Соединение.ОтправитьДляОбработки(HTTPЗапрос, ПараметрыПолучения.ИмяФайлаОтвета);
				КонецЕсли;

			КонецЕсли;

		Исключение
			
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось загрузить содержимое (%1). %2'"),
				URL,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			// Диагностика соединения с ресурсом.
			Попытка
				
				РезультатДиагностики = ПолучениеФайловИзИнтернета.ДиагностикаСоединения(URL);
				ОписаниеРезультатаДиагностики = НСтр("ru = 'Результаты диагностики соединения:'")
					+ Символы.ПС + РезультатДиагностики.ОписаниеОшибки;
				
			Исключение
				
				ОписаниеРезультатаДиагностики = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось выполнить диагностику соединения. %1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			КонецПопытки;
			
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				ПредставлениеОшибки,
				ПодробноеОписаниеОшибки + Символы.ПС + ОписаниеРезультатаДиагностики,
				Перенаправления);
			Возврат Результат;
			
		КонецПопытки;

		Результат.КодСостояния = Ответ.КодСостояния;

		Если Ответ.КодСостояния = 301 // 301 Moved Permanently
			ИЛИ Ответ.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
			ИЛИ Ответ.КодСостояния = 303 // 303 See Other by GET
			ИЛИ Ответ.КодСостояния = 307 Тогда // 307 Temporary Redirect

			КоличествоПеренаправлений = КоличествоПеренаправлений + 1;

			Если КоличествоПеренаправлений > МаксКолвоПеренаправлений Тогда
				УстановитьОписаниеОшибки(
					Результат,
					"ServerError",
					НСтр("ru = 'Превышено количество перенаправлений.'"),
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка сервера при получении файла (%1). Превышено количество перенаправлений (%2).'"),
						URL,
						МаксКолвоПеренаправлений),
					Перенаправления);
				Возврат Результат;
			Иначе
				Location = Ответ.Заголовки.Получить("Location");
				Если Location = Неопределено Тогда
					УстановитьОписаниеОшибки(
						Результат,
						"ServerError",
						НСтр("ru = 'Некорректное перенаправление.'"),
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'"),
							Ответ.КодСостояния,
							URL),
						Перенаправления);
					Возврат Результат;
				Иначе
					Location = СокрЛП(Location);
					Если ПустаяСтрока(Location) Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Некорректное перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'"),
								Ответ.КодСостояния,
								URL),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					Если ВыполненныеПеренаправления.Получить(Location) <> Неопределено Тогда
						УстановитьОписаниеОшибки(
							Результат,
							"ServerError",
							НСтр("ru = 'Циклическое перенаправление.'"),
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Ошибка сервера (%1) при получении файла (%2). Циклическое перенаправление (%3).'"),
								Ответ.КодСостояния,
								URL,
								Location),
							Перенаправления);
						Возврат Результат;
					КонецЕсли;

					ВыполненныеПеренаправления.Вставить(Location, Истина);
					URLДляПолучения = Location;

					Перенаправления.Добавить(Строка(Ответ.КодСостояния) + ": " + Location);

				КонецЕсли;
				
			КонецЕсли;

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Если ПараметрыПолучения.ФорматОтвета = 0 Тогда
		Результат.Содержимое = Ответ.ПолучитьИмяФайлаТела();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 1 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакСтроку();
	ИначеЕсли ПараметрыПолучения.ФорматОтвета = 2 Тогда
		Результат.Содержимое = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Иначе
		Результат.Содержимое = Ответ;
	КонецЕсли;
	
	// Обработка ответа
	Если Ответ.КодСостояния < 200 Или Ответ.КодСостояния >= 300 Тогда

		// Анализ ошибки
		Если Ответ.КодСостояния = 407 Тогда

			// Ошибка подключения - не пройдена аутентификация на прокси-сервере.
			УстановитьОписаниеОшибки(
				Результат,
				"ConnectError",
				НСтр("ru = 'Ошибка аутентификации на прокси-сервере.'"),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния < 200
			ИЛИ Ответ.КодСостояния >= 300
			И Ответ.КодСостояния < 400 Тогда

			// Формат ответа сервера не поддерживается.
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Некорректный ответ сервера (%1).'"),
					Ответ.КодСостояния),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера при получении файла (%1). Некорректный (неподдерживаемый) ответ (%2).
						|Тело ответа: %3'"),
					URL,
					Ответ.КодСостояния,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		ИначеЕсли Ответ.КодСостояния >= 400 И Ответ.КодСостояния < 500 Тогда

			// Ошибка клиентской части - некорректный запрос.
			УстановитьОписаниеОшибки(
				Результат,
				"ClientError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка (%1) при выполнении запроса к ресурсу.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка клиента (%1) при выполнении запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		Иначе

			// Ошибка сервера - 5хх
			УстановитьОписаниеОшибки(
				Результат,
				"ServerError",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Код ошибки: %1.'"),
					Строка(Ответ.КодСостояния)),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка сервера (%1) при обработке запроса к ресурсу (%2).
						|Тело ответа: %3'"),
					Ответ.КодСостояния,
					URL,
					Лев(Ответ.ПолучитьТелоКакСтроку(), 5120)),
				Перенаправления);

		КонецЕсли;

		ДобавитьСписокПеренаправленийКИнформацииОбОшибке(
			Результат.ИнформацияОбОшибке,
			Перенаправления);

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ВызовОперацийСервисов

// Формирует структуру дополнительных параметров для передачи в сервисы.
//
Функция ДополнительныеПараметрыВызоваОперацииСервиса(ФорматЗначенийСтрока = Истина) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая()
		И Не ОбщегоНазначения.ЭтоВебКлиент() Тогда
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ClientPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ClientOSVersion", СистИнфо.ВерсияОС);
		
	Иначе
		
		ПараметрыКлиента = ПараметрыКлиента();
		Если ПараметрыКлиента <> Неопределено Тогда
			
			Если ПараметрыКлиента.Свойство("ТипПлатформы") Тогда
				Результат.Вставить("ClientPlatformType", ПараметрыКлиента.ТипПлатформы);
			КонецЕсли;
			
			Если ПараметрыКлиента.Свойство("ВерсияОС") Тогда
				Результат.Вставить("ClientOSVersion", ПараметрыКлиента.ВерсияОС);
			КонецЕсли;
			
		КонецЕсли;
		
		СистИнфо = Новый СистемнаяИнформация;
		Результат.Вставить("ServerPlatformType",
			ИнтернетПоддержкаПользователейКлиентСервер.ИмяТипПлатформыСтр(
				СистИнфо.ТипПлатформы));
		Результат.Вставить("ServerOSVersion", СистИнфо.ВерсияОС);
		
	КонецЕсли;
	
	Результат.Вставить("PlatformVersion", СистИнфо.ВерсияПриложения);
	
	Результат.Вставить("LibraryVersion",
		ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
	Результат.Вставить("ConfigName", ИмяКонфигурации());
	Результат.Вставить("ConfigVersion", ВерсияКонфигурации());
	Результат.Вставить("Vendor", Метаданные.Поставщик);
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Результат.Вставить("IBID",
			СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы());
	КонецЕсли;
	Результат.Вставить("ConfigLanguage", КодЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("ConfigMainLanguage", КодОсновногоЯзыкаИнтерфейсаКонфигурации());
	Результат.Вставить("CurLocalizationCode", ТекущийКодЛокализации());
	Результат.Вставить("SystemLanguage", ТекущийЯзыкСистемы());
	Результат.Вставить("ClientTimeOffsetGMT",
		?(ФорматЗначенийСтрока,
		  Формат((ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата()), "ЧГ=0"),
		  (ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата())));
	
	Результат.Вставить("countryId", "");
	
	Результат.Вставить(
		"IBIsSeparated",
		?(ФорматЗначенийСтрока,
		  ?(ОбщегоНазначения.РазделениеВключено(), "true", "false"),
		  ОбщегоНазначения.РазделениеВключено()));
	Результат.Вставить("IBUserName", Строка(ИмяПользователя()));
	
	НастройкиСоединения = ИнтернетПоддержкаПользователейСлужебныйПовтИсп.НастройкиСоединенияССерверамиИПП();
	Если НастройкиСоединения.ДоменРасположенияСерверовИПП = 0 Тогда
		Результат.Вставить("DomainZone", "ru");
	ИначеЕсли НастройкиСоединения.ДоменРасположенияСерверовИПП = 1 Тогда
		Результат.Вставить("DomainZone", "eu");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры клиентского приложения.
// См. описание функции ПараметрыКлиента() в общем модуле
// ИнтернетПоддержкаПользователейКлиент.
//
Функция ПараметрыКлиента() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП;
	
КонецФункции

#КонецОбласти

#Область ЛогИОтладка

// Процедура записывает сообщение в журнал регистрации.
//
// Параметры:
//  ИмяСобытия                      - строка;
//  ИдентификаторШага               - строка;
//  УровеньРегистрации              - строковое представление константы УровеньЖурналаРегистрации;
//  ОбъектМетаданных                - строковое представление объекта метаданных;
//  Данные                          - данные;
//  Комментарий                     - строка - произвольный комментарий;
//  ВестиПодробныйЖурналРегистрации - Булево - признак записи незначащих событий (Информации и Примечания).
//
Процедура ЗаписатьСообщениеВЖурналРегистрации(
			ИмяСобытия,
			ИдентификаторШага,
			УровеньРегистрации = "Ошибка", // Идентификатор.
			ОбъектМетаданных = "",
			Данные = Неопределено,
			Комментарий = "",
			ВестиПодробныйЖурналРегистрации = Ложь) Экспорт

	ОбъектМетаданныхЛокальный = Неопределено;
	Попытка
		Если ТипЗнч(ОбъектМетаданных) = Тип("Строка") Тогда
			Если ПустаяСтрока(ОбъектМетаданных) Тогда
				ОбъектМетаданныхЛокальный = Неопределено;
			Иначе
				ОбъектМетаданныхЛокальный = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
			ОбъектМетаданныхЛокальный = ОбъектМетаданных;
		Иначе
			ОбъектМетаданныхЛокальный = Неопределено;
		КонецЕсли;
	Исключение
		ОбъектМетаданныхЛокальный = Неопределено;
	КонецПопытки;

	Если ВРег(УровеньРегистрации) = ВРег("Информация") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Информация;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Предупреждение") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Примечание") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Примечание;
	ИначеЕсли ВРег(УровеньРегистрации) = ВРег("Ошибка") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	ИначеЕсли ТипЗнч(УровеньРегистрации) = Тип("УровеньЖурналаРегистрации") Тогда
		УровеньЖурналаРегистрацииЛокальный = УровеньРегистрации;
	Иначе
		УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;

	// Сообщения Информация, Примечание писать только если включена настройка "ЖурналРегистрации_ПодробнаяЗапись",
	//  которую можно получить ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации() или другим способом (для других подсистем).

	ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Ложь;
	Если УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Предупреждение Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли УровеньЖурналаРегистрацииЛокальный = УровеньЖурналаРегистрации.Ошибка Тогда // Всегда писать
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	ИначеЕсли ВестиПодробныйЖурналРегистрации = Истина Тогда
		ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина;
	КонецЕсли;

	Если ЛокальныйЗаписатьСообщениеВЖурналРегистрации = Истина Тогда
		ИмяСобытияЛокальный = СтрЗаменить(ИмяСобытия, ". ", "."); // Точку с пробелом менять на точку
		КомментарийЛокальный = НСтр("ru='Идентификатор шага: %ИдентификаторШага%
			|%Комментарий%'");
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%ИдентификаторШага%", ИдентификаторШага);
		КомментарийЛокальный = СтрЗаменить(КомментарийЛокальный, "%Комментарий%", Комментарий);
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЛокальный, // ИмяСобытия
			УровеньЖурналаРегистрацииЛокальный, // УровеньЖурналаРегистрации.*
			ОбъектМетаданныхЛокальный, // ОбъектМетаданных
			Данные, // Данные
			КомментарийЛокальный, // Комментарий
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	КонецЕсли;

КонецПроцедуры

// Выгружает журнал регистрации по событиям во временное хранилище.
//
// Параметры:
//  ПараметрыОтбора - Структура - структура с ключами:
//   * ДатаНачала    - Дата - начало периода журнала;
//   * ДатаОкончания - Дата - конец периода журнала;
//   * Событие       - Массив - массив событий (см. [МодульПодсистемыКлиентСервер].ПолучитьСписокВсехСобытийЖурналаРегистрации).
//  ПараметрыФайлаВыгрузки - Структура, Неопределено - структура с ключами:
//   * Архивировать - Булево - Истина, если необходимо архивировать выгрузку.
//
// Возвращаемое значение:
//   Структура с ключами:
//    * АдресВременногоХранилищаФайла - Строка - Адрес выгруженных данных в хранилище;
//    * ТекстОшибки - Строка - Текст ошибки или пустая строка.
//
Функция ВыгрузитьВсеСобытияЖурналаРегистрации(ПараметрыОтбора, ПараметрыФайлаВыгрузки = Неопределено) Экспорт

	Результат = Новый Структура("АдресВременногоХранилищаФайла, ТекстОшибки", "", "");

	ТипСтруктура = Тип("Структура");

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ИмяФайлаАрхива     = ПолучитьИмяВременногоФайла("zip");

	// Если действие - длительное (журнал регистрации очень большой), то возможна ситуация,
	//  когда управление будет передано другому рабочему процессу,
	//  находящемуся на другом сервере и тогда временный каталог может стать недоступен.
	// В этом случае у пользователя выскочит ошибка и надо будет снова попробовать выгрузить данные.

	Попытка

		УстановитьПривилегированныйРежим(Истина);

			Если ТипЗнч(ПараметрыОтбора) = ТипСтруктура Тогда
				ПараметрыОтбораПравильный = Новый Структура("ДатаНачала, ДатаОкончания, Событие");
				ЗаполнитьЗначенияСвойств(ПараметрыОтбораПравильный, ПараметрыОтбора);
				Если ПараметрыОтбораПравильный.ДатаНачала = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаНачала", НачалоДня(ТекущаяДатаСеанса()));
				КонецЕсли;
				Если ПараметрыОтбораПравильный.ДатаОкончания = Неопределено Тогда
					ПараметрыОтбораПравильный.Вставить("ДатаОкончания", КонецДня(ТекущаяДатаСеанса()));
				КонецЕсли;
			КонецЕсли;

			ВыгрузитьЖурналРегистрации(
				ИмяВременногоФайла,
				ПараметрыОтбораПравильный);

			ФайлВременный = Новый Файл(ИмяВременногоФайла);
			Если ФайлВременный.Существует() Тогда
				Если ТипЗнч(ПараметрыФайлаВыгрузки) = ТипСтруктура Тогда
					Если (ПараметрыФайлаВыгрузки.Свойство("Архивировать"))
							И (ПараметрыФайлаВыгрузки.Архивировать = Истина) Тогда
						Архив = Новый ЗаписьZipФайла(
							ИмяФайлаАрхива,
							, // Без пароля
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Выгрузка журнала регистраций библиотеки БИП за период %1...%2'"),
								Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
								Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")),
							МетодСжатияZIP.Сжатие,
							УровеньСжатияZIP.Максимальный);
						Архив.Добавить(ИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
						Архив.Записать();
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаАрхива)));
					Иначе
						Результат.Вставить("АдресВременногоХранилищаФайла", ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла)));
					КонецЕсли;
				КонецЕсли;
			Иначе
				Результат.Вставить("ТекстОшибки",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Файл с выгрузкой событий журнала регистрации не существует.
							|Возможно, отсутствуют события за указанный период (%1...%2).'"),
						Формат(ПараметрыОтбораПравильный.ДатаНачала, "ДЛФ=DT"),
						Формат(ПараметрыОтбораПравильный.ДатаОкончания, "ДЛФ=DT")));
			КонецЕсли;

		УстановитьПривилегированныйРежим(Ложь);

	Исключение

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось экспортировать события журнала регистрации в файл по причине:
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		Результат.Вставить("ТекстОшибки", ТекстСообщения);

		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия
			НСтр("ru='БазовыйФункционал. Отладка. Экспорт журнала регистрации'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ТекстСообщения); // Комментарий

	КонецПопытки;

	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия
			НСтр("ru='БазовыйФункционал. Отладка. Экспорт журнала регистрации'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); // Комментарий
	КонецПопытки; 

	Попытка
		УдалитьФайлы(ИмяФайлаАрхива);
	Исключение
		ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:БазовыйФункционал.Отладка'"), // ИмяСобытия
			НСтр("ru='БазовыйФункционал. Отладка. Экспорт журнала регистрации'"), // ИдентификаторШага
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			, // Данные
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); // Комментарий
	КонецПопытки;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПроверкаВнедренияПодсистемБИП

// Возвращает минимальную версию БСП,
// с которой возможна работа БИП.
//
// Возвращаемое значение:
//   Строка - номер версии БСП
//
Функция МинимальнаяВерсияБСП() Экспорт
	
	Возврат "3.0.2.150";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Возвращает сохраненный регистрационный номер программного продукта.
//
Функция РегистрационныйНомерПрограммногоПродукта() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы(), "regnumber");

КонецФункции

// Установка параметров сеанса базовой функциональности БИП.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ПараметрыКлиентаНаСервереБИП"
		И УстановленныеПараметры.Найти("ПараметрыКлиентаНаСервереБИП") = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКлиентаНаСервереБИП = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейОшибка()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Ошибка'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращается имя события журнала регистрации для записи информационных
// сообщений Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события информационного сообщения Интернет-поддержки.
//
Функция СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация()
	
	Возврат НСтр("ru = 'Интернет-поддержка пользователей.Информация'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ВестиПодробныйЖурналРегистрации()
	
	Возврат Истина;
	
КонецФункции

Функция ТекстВФайле(ИмяФайла)

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);
	Результат = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Аутентификация

Функция URLОперацииПолучитьТикет(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/ticket/get";

КонецФункции

Функция URLСервисаПроверкиПаролей(ДоменРасположенияСерверовИПП)

	Возврат "https://"
		+ ИнтернетПоддержкаПользователейКлиентСервер.ХостСервисаLogin(ДоменРасположенияСерверовИПП)
		+ "/rest/public/user/auth";

КонецФункции

Функция ПараметрыTicketGetJSON(Логин, Пароль, ВладелецТикета)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("serviceNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ВладелецТикета);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

// Внутренняя функция для получения тикетов аутентификации.
//
Функция СлужебнаяТикетАутентификации(
	Знач Логин,
	Знач Пароль,
	Знач ИмяСервиса,
	НастройкиСоединения,
	НастройкиПрокси = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"         , "");
	Результат.Вставить("СообщениеОбОшибке" , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("Тикет"             , Неопределено);
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		ДанныеАутентификации = ДанныеАутентификацииПользователяИнтернетПоддержки();
		Если ДанныеАутентификации <> Неопределено Тогда
			Логин  = ДанныеАутентификации.Логин;
			Пароль = ДанныеАутентификации.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Логин) Тогда
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		Возврат Результат;
	КонецЕсли;
	
	Если НастройкиСоединения = Неопределено Тогда
		НастройкиСоединения = НастройкиСоединенияССерверами();
	КонецЕсли;
	
	URLСервиса = URLОперацииПолучитьТикет(
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыTicketGetJSON(Логин, Пароль, ИмяСервиса));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);

	РезультатОперации = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатОперации.КодСостояния = 200 Тогда
		
		Попытка
			
			ЧтениеJSON = Новый ЧтениеJSON;
			ЧтениеJSON.УстановитьСтроку(РезультатОперации.Содержимое);
			ОтветОбъект = ПрочитатьJSON(ЧтениеJSON);
			ЧтениеJSON.Закрыть();
			
			Результат.Тикет = ОтветОбъект.ticket;
			
		Исключение
			
			ИнфОшибка = ИнформацияОбОшибке();
			Результат.КодОшибки = "ОшибкаСервиса";
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
					|Некорректный ответ сервиса.
					|Ошибка при обработке ответа сервиса:
					|%2
					|Код состояния: %3;
					|Тело ответа: %4'"),
				URLСервиса,
				ПодробноеПредставлениеОшибки(ИнфОшибка),
				РезультатОперации.КодСостояния,
				Лев(РезультатОперации.Содержимое, 5120));
			ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации. Некорректный ответ сервиса.'");
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Ошибка аутентификации в сервисе.
					|Подробнее см. в журнале регистрации.'");
			
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке  = НСтр("ru = 'Неверный логин или пароль.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток аутентификации.
			|Повторите попытку позже.'");
		Результат.ИнформацияОбОшибке = Результат.СообщениеОбОшибке;
		
	ИначеЕсли РезультатОперации.КодСостояния = 500 Тогда
		
		Результат.КодОшибки          = "ОшибкаСервиса";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Внутренняя ошибка сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Ошибка аутентификации. Внутренняя ошибка сервиса.
				|Подробнее см. в журнале регистрации.'");
		
	ИначеЕсли РезультатОперации.КодСостояния = 0 Тогда
		
		Результат.КодОшибки         = "ОшибкаПодключения";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|%2'"),
			URLСервиса,
			РезультатОперации.ИнформацияОбОшибке);
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка подключения к сервису.
			|Подробнее см. в журнале регистрации.'");
		
	Иначе
		
		Результат.КодОшибки = "НеизвестнаяОшибка";
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить тикет аутентификации в сервисе %1.
				|Неизвестный код состояния ответа сервиса.
				|Код состояния: %2;
				|Тело ответа: %3'"),
			URLСервиса,
			РезультатОперации.КодСостояния,
			Лев(РезультатОперации.Содержимое, 5120));
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка аутентификации в сервисе (%1).
					|Подробнее см. в журнале регистрации.'"),
				РезультатОперации.КодСостояния);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ПараметрыAuthJSON(Логин, Пароль)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Логин);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Пароль);

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция ПроверитьЛогинИПароль(Логин, Пароль) Экспорт

	Результат = Новый Структура("КодОшибки, СообщениеОбОшибке, Результат", "", "", Ложь);

	НастройкиСоединенияССерверами = НастройкиСоединенияССерверами();
	URLСервиса = URLСервисаПроверкиПаролей(НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "POST");
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ПараметрыAuthJSON(Логин, Пароль));
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 30);
	
	РезультатПолученияФайла = ЗагрузитьСодержимоеИзИнтернет(
		URLСервиса,
		,
		,
		ДопПараметрыЗапроса);

	Если РезультатПолученияФайла.КодСостояния = 200 Тогда

		Результат.Результат = Истина;

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 403 Тогда

		Результат.КодОшибки = "НеверныйЛогинИлиПароль";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Неверный логин или пароль.'");

	ИначеЕсли РезультатПолученияФайла.КодСостояния = 429 Тогда

		Результат.КодОшибки = "ПревышеноКоличествоПопыток";
		Результат.СообщениеОбОшибке = НСтр("ru = 'Превышено количество попыток ввода логина и пароля.
			|Проверьте правильность указанных данных и повторите
			|попытку через 30 минут.'");

	Иначе

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось проверить логин и пароль в сервисе %1. %2'"),
				URLСервиса,
				РезультатПолученияФайла.ИнформацияОбОшибке));

		Результат.КодОшибки         = РезультатПолученияФайла.КодОшибки;
		Результат.СообщениеОбОшибке = РезультатПолученияФайла.СообщениеОбОшибке;

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция СлужебнаяURLДляПереходаНаСтраницуИнтегрированногоСайта(URLСтраницыСайта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки", "");
	Результат.Вставить("URL"      , URLСтраницыСайта);
	
	РезультатПолученияТикета = Неопределено;
	Если ОбщегоНазначения.РазделениеВключено() Или Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета = ТикетАутентификацииНаПорталеПоддержки(URLСтраницыСайта);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если РезультатПолученияТикета <> Неопределено Тогда
		Если ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			Результат.URL =
				ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыСервисаLogin(
					"/ticket/auth?token=" + РезультатПолученияТикета.Тикет,
					НастройкиСоединенияССерверами());
		Иначе
			Результат.КодОшибки = РезультатПолученияТикета.КодОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийБиблиотеки

// Вызывается при сохранении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль)
	
	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации(Логин, Пароль);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// ПолучениеВнешнихКомпонент
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриСохраненииЛогинаИПароляВИБ(Логин, Пароль);
	КонецЕсли;
	// Конец ПолучениеВнешнихКомпонент
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПриИзмененииДанныхАутентификации(Логин);
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// Переопределяемая обработка события.
	ИнтернетПоддержкаПользователейПереопределяемый.ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки(
		Новый Структура("Логин, Пароль", Логин, Пароль));

КонецПроцедуры

// Вызывается при удалении логина и пароля пользователя ИПП из
// информационной базы из всех контекстов использования библиотеки.
//
Процедура ПриУдаленииЛогинаИПароляИзИБ()

	Если ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Тогда
		УстановитьПривилегированныйРежим(Истина);
		КлиентЛицензирования.ПриИзмененииДанныхАутентификации("", "");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	// СПАРКРиски
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		МодульСПАРКРиски.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец СПАРКРиски
	
	// ОблачныйАрхив
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец ОблачныйАрхив
	
	// РаботаСКлассификаторами
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульРаботаСКлассификаторами = ОбщегоНазначения.ОбщийМодуль("РаботаСКлассификаторами");
		МодульРаботаСКлассификаторами.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец РаботаСКлассификаторами
	
	// ПолучениеВнешнихКомпонент
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеВнешнихКомпонент") Тогда
		МодульПолучениеВнешнихКомпонент = ОбщегоНазначения.ОбщийМодуль("ПолучениеВнешнихКомпонент");
		МодульПолучениеВнешнихКомпонент.ПриУдаленииЛогинаИПароляИзИБ();
	КонецЕсли;
	// Конец ПолучениеВнешнихКомпонент
	
	// ПолучениеОбновленийПрограммы
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		МодульПолучениеОбновленийПрограммы.ПриИзмененииДанныхАутентификации("");
	КонецЕсли;
	// Конец ПолучениеОбновленийПрограммы
	
	// Переопределяемая обработка события
	ИнтернетПоддержкаПользователейПереопределяемый.ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки();

КонецПроцедуры

#КонецОбласти

#Область Локализация

// Возвращается код текущего языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодЯзыкаИнтерфейсаКонфигурации()

	Язык = ТекущийЯзык();
	Если Язык = Неопределено Тогда
		// Для пользователя информационной базы не указан язык.
		Возврат КодОсновногоЯзыкаИнтерфейсаКонфигурации();
	КонецЕсли;

	КодЯзыкаВМетаданных = ?(ТипЗнч(Язык) = Тип("Строка"), Язык, Язык.КодЯзыка);
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

// Возвращается код основного языка интерфейса конфигурации
// в формате ISO-639-1.
//
Функция КодОсновногоЯзыкаИнтерфейсаКонфигурации()

	КодЯзыкаВМетаданных = Метаданные.ОсновнойЯзык.КодЯзыка;
	КодЯзыкаВФорматеISO639_1 = Неопределено;
	ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииКодаЯзыкаИнтерфейсаКонфигурации(
		КодЯзыкаВМетаданных,
		КодЯзыкаВФорматеISO639_1);

	Возврат ?(КодЯзыкаВФорматеISO639_1 = Неопределено, КодЯзыкаВМетаданных, КодЯзыкаВФорматеISO639_1);

КонецФункции

#КонецОбласти

#Область НастройкиКлиентаЛицензирования

// Возвращает признак возможности работы с настройками клиента лицензирования
// в БИП.
//
// Версия платформы 1С:Предприятие 8.3.7 или выше и не работа в модели сервиса.
//
Функция ДоступнаРаботаСНастройкамиКлиентаЛицензирования() Экспорт

	Возврат Не ОбщегоНазначения.РазделениеВключено();

КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики, выполняемые при заполнении пустой ИБ и при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = ""; // Только для начального заполнения.
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='Запускается при первом запуске, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обработчики, выполняемые при переходе на новую версию.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на новую версию, в общих данных. Установка общих данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='Запускается при переходе на любую новую версию, для каждой области данных. Установка разделенных данных.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.7.1";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.14";
	Обработчик.Процедура =
		"ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обновление информации о сервисах.
	ПодключениеСервисовСопровождения.ПриДобавленииОбработчиковОбновления(Обработчики);
	
КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПервыйЗапуск();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при первом запуске библиотеки БИП.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск() Экспорт

	// Код для первоначального заполнения информационной базы.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ИнтернетПоддержкаПользователей.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск'"));

		КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	КодРезультатаПоШагам = 0;
	ОписаниеРезультатаПоШагам = "";
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск_Переопределение", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск, Переопределение'"));

	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПервыйЗапуск();

	ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияПоШагам,
		КодРезультатаПоШагам, // Код результата.
		ОписаниеРезультатаПоШагам, // Описание результата.
		Неопределено); // Вложенный контекст выполнения.

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПервыйЗапуск'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для общих данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбщиеДанные_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбщиеДанные. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

// Процедура вызывается при обновлении библиотеки БИП на любую новую версию.
// Процедура - для каждой области данных.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию() Экспорт

	// Код для заполнения информационной базы при переходе на новую версию.

	УстановитьПривилегированныйРежим(Истина);

	НаименованиеПроцедурыФункции = "ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию";

	КонтекстВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();
	КодРезультатаОбщий = 0;
	ОписаниеРезультатаОбщий = "";

	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		"ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию", // Идентификатор
		НСтр("ru='Выполнение ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию'"));

	КонтекстВыполненияПоШагам = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций();

	// Переопределяемые действия.
	ИнтернетПоддержкаПользователейПереопределяемый.ОбновлениеИнформационнойБазы_ОбластьДанных_ПерейтиНаВерсию();

	ШагВыполненияОбщий = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполненияОбщий,
		КодРезультатаОбщий, // Код результата.
		ОписаниеРезультатаОбщий, // Описание результата.
		КонтекстВыполненияПоШагам); // Вложенный контекст выполнения.

	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1, результат.
			|Время начала (мс): %2
			|Время окончания (мс): %3
			|Длительность (мс): %4
			|Результат выполнения:
			|%5
			|
			|Прочие параметры:
			|  Это разделенная конфигурация: %6
			|  Разделение включено: %7
			|  Доступно использование разделенных данных: %8
			|  Сеанс запущен без разделителей: %9'")
			+ Символы.ПС,
		НаименованиеПроцедурыФункции,
		ШагВыполненияОбщий.ВремяНачала,
		ШагВыполненияОбщий.ВремяОкончания,
		ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала,
		ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполненияОбщий,
			Истина, // ВключаяВложенные
			"ПодробноПоШагам",
			1), // Уровень вложенности, текущий.
		ЭтоРазделеннаяКонфигурация(),
		ОбщегоНазначения.РазделениеВключено(),
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных(),
		СеансЗапущенБезРазделителей());

	// Запись в журнал регистрации.
	ЗаписатьСообщениеВЖурналРегистрации(
		СобытиеЖурналаРегистрацииИнтернетПоддержкаПользователейИнформация(), // ИмяСобытия
		НСтр("ru='Сервис и регламент. ОбновлениеИнформационнойБазы. ОбластьДанных. ПерейтиНаВерсию'"), // ИдентификаторШага
		?(КодРезультатаОбщий = 0, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка), // УровеньЖурналаРегистрации.*
		, // ОбъектМетаданных
		(ШагВыполненияОбщий.ВремяОкончания - ШагВыполненияОбщий.ВремяНачала), // Данные
		ТекстСообщения, // Комментарий
		ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ПереместитьПараметрыИнтернетПоддержкиВБезопасноеХранилищеДанных_2_1_7_1() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса
		Возврат;
	КонецЕсли;

	ЗапросПараметровИПП = Новый Запрос;
	ЗапросПараметровИПП.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя КАК ИмяПараметра,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""login""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""password""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя,
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Значение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыИнтернетПоддержкиПользователей КАК УдалитьПараметрыИнтернетПоддержкиПользователей
	|ГДЕ
	|	УдалитьПараметрыИнтернетПоддержкиПользователей.Имя = ""regnumber""
	|	И УдалитьПараметрыИнтернетПоддержкиПользователей.Пользователь = &ПустойИдентификатор";

	ЗапросПараметровИПП.УстановитьПараметр(
		"ПустойИдентификатор",
		Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));

	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПараметров = ЗапросПараметровИПП.Выполнить().Выбрать();

	// Запись данных в безопасное хранилище
	ИдентификаторПодсистемыБИП = ИдентификаторПодсистемы();
	Пока ВыборкаПараметров.Следующий() Цикл
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
			ИдентификаторПодсистемыБИП,
			ВыборкаПараметров.ЗначениеПараметра,
			ВыборкаПараметров.ИмяПараметра);
	КонецЦикла;

	// Очистка неиспользуемого регистра параметров ИПП
	НаборЗаписей = РегистрыСведений.УдалитьПараметрыИнтернетПоддержкиПользователей.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ОбновлениеИнформационнойБазы_ЗаменитьИдентификаторПодсистемыВБезопасномХранилищеДанных_2_1_8_14() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	ИдентификаторПодсистемыБИПУстаревший =
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Подсистема.ИнтернетПоддержкаПользователей.Подсистема.БазоваяФункциональностьБИП");
	ДанныеВБезопасномХранилищеУстаревшие =
		ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
			ИдентификаторПодсистемыБИПУстаревший,
			"login,password,regnumber");
	
	ИдентификаторПодсистемы = ИдентификаторПодсистемы();
	Для Каждого КлючЗначение Из ДанныеВБезопасномХранилищеУстаревшие Цикл
		Если КлючЗначение.Значение <> Неопределено Тогда
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
				ИдентификаторПодсистемы,
				КлючЗначение.Значение,
				КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Удалить устаревшие данные после переноса.
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемыБИПУстаревший);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаПодключенияКДоменам

Функция ДоменРасположенияСерверовИПП() Экспорт
	
	РежимИспользования = ПолучитьРежимВнешнихРесурсов();
	Если ВРег(РежимИспользования) = "D" Тогда
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОтправкаСообщенийВСлужбуТехническойПоддержки

Функция ОтправитьДанныеСообщенияВТехПоддержку(
	Тема,
	Тело,
	Знач Получатель,
	Вложения,
	НастройкиСоединенияССерверами,
	ДопПараметры,
	НастройкиПрокси = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("КодОшибки"           , "");
	Результат.Вставить("СообщениеОбОшибке"   , "");
	Результат.Вставить("ТокенДанных"         , "");
	
	// Проверка доступности сервиса.
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ИмяОшибки"         , "");
	РезультатПроверки.Вставить("СообщениеОбОшибке" , "");
	РезультатПроверки.Вставить("ИнформацияОбОшибке", "");
	СлужебнаяПроверитьURLДоступен(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		"HEAD",
		РезультатПроверки.ИмяОшибки,
		РезультатПроверки.СообщениеОбОшибке,
		РезультатПроверки.ИнформацияОбОшибке,
		НастройкиПрокси);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		
		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса отправки сообщений.
					|%1'"),
				РезультатПроверки.ИнформацияОбОшибке));
		
		Результат.КодОшибки = РезультатПроверки.ИмяОшибки;
		Результат.СообщениеОбОшибке =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
					|Не удалось проверить доступность сервиса.
					|%1'"),
				РезультатПроверки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Отправка данных сообщения.
	ТелоСообщения = СтрЗаменить(
		ДопПараметры.ШаблонТекстаСообщения,
		"%msgtxt",
		Тело);

	ПодготовитьВложенияКОтправке(Вложения, ДопПараметры.Вложения);

	ДанныеJSON = ПараметрыSaveTechSupportRequestJSON(
		Тема,
		ТелоСообщения,
		Получатель,
		ДопПараметры.Вложения);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	ДопПараметрыЗапроса = Новый Структура;
	ДопПараметрыЗапроса.Вставить("Метод"                   , "PUT");
	ДопПараметрыЗапроса.Вставить("ФорматОтвета"            , 1);
	ДопПараметрыЗапроса.Вставить("Заголовки"               , Заголовки);
	ДопПараметрыЗапроса.Вставить("ДанныеДляОбработки"      , ДанныеJSON);
	ДопПараметрыЗапроса.Вставить("ФорматДанныхДляОбработки", 1);
	ДопПараметрыЗапроса.Вставить("НастройкиПрокси"         , НастройкиПрокси);
	ДопПараметрыЗапроса.Вставить("Таймаут"                 , 300);
	
	РезультатОтправки = ЗагрузитьСодержимоеИзИнтернет(
		URLОперацииОтправитьДанныеСообщенияВТехПоддержку(
			НастройкиСоединенияССерверами.ДоменРасположенияСерверовИПП),
		,
		,
		ДопПараметрыЗапроса);

	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.ИнформацияОбОшибке));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);

		Возврат Результат;

	КонецЕсли;

	Попытка
		РезультатВызова = РезультатSaveTechSupportRequestИзJSON(РезультатОтправки.Содержимое);
	Исключение

		ИнфОшибка = ИнформацияОбОшибке();

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при обработке ответа сервиса.
				|Некорректный ответ сервиса отправки сообщений.
				|%1
				|Тело ответа: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = РезультатОтправки.КодОшибки;
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Некорректный ответ сервиса отправки сообщений.'");

		Возврат Результат;

	КонецПопытки;

	Если РезультатВызова.success <> Истина Тогда

		ИнтернетПоддержкаПользователейВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Сервис сообщил об ошибке.
				|Ответ сервиса: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));

		Результат.КодОшибки = "ВозвращенОтказСервиса";
		Результат.СообщениеОбОшибке =
			НСтр("ru = 'Не удалось отправить данные сообщения в службу технической поддержки.
				|Ошибка при передаче сообщения в тех. поддержку.
				|Подробнее см. в журнале регистрации.'");

		Возврат Результат;

	КонецЕсли;

	Результат.ТокенДанных = РезультатВызова.uuid;

	Возврат Результат;

КонецФункции

Функция ХостСервисовТехническойПоддержки(Домен) Экспорт


	Если Домен = 0 Тогда
		Возврат "portal-support.1c.ru";
	Иначе
		Возврат "portal-support.1c.eu";
	КонецЕсли;

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержку(Домен)

	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/request";

КонецФункции

Функция URLОперацииОтправитьДанныеСообщенияВТехПоддержкуPing(Домен)
	
	Возврат "https://"
		+ ХостСервисовТехническойПоддержки(Домен)
		+ "/api/public/rest/ping";
	
КонецФункции

Процедура ПодготовитьВложенияКОтправке(ПереданныеВложения, ВложенияДляОтправки)

	Если ПереданныеВложения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ТекВложение Из ПереданныеВложения Цикл
		ВложенияДляОтправки.Добавить(ТекВложение);
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыSaveTechSupportRequestJSON(Тема, Тело, Получатель, ТекстовыеВложения)

	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("theme");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тема);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("text");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Тело);

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("language");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(КодЯзыка(ТекущийЯзыкСистемы()));

	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportNick");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Получатель);

	// Добавление вложений
	Если ТекстовыеВложения <> Неопределено Тогда

		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("techSupportAdditionalDtoList");
		ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();

		Для Каждого ТекВложение Из ТекстовыеВложения Цикл
			ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("name");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Представление);
			ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("value");
			ЗаписьДанныхСообщения.ЗаписатьЗначение(ТекВложение.Текст);
			ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
		КонецЦикла;

		ЗаписьДанныхСообщения.ЗаписатьКонецМассива();

	КонецЕсли;

	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();

	Возврат ЗаписьДанныхСообщения.Закрыть();

КонецФункции

Функция РезультатSaveTechSupportRequestИзJSON(ТелоJSON)

	ОтветОбъект  = Новый Структура("success, errorMessage, uuid", "false", "", "");
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
			ОтветОбъект.Вставить(ИмяСвойства, ЧтениеОтвета.ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	ЧтениеОтвета.Закрыть();

	Возврат ОтветОбъект;

КонецФункции

Функция КодЯзыка(ЯзыкИСтрана)

	ПозицияПодчеркивание = СтрНайти(ЯзыкИСтрана, "_");
	Если ПозицияПодчеркивание = 0 Тогда
		Возврат ЯзыкИСтрана;
	Иначе
		Возврат Лев(ЯзыкИСтрана, ПозицияПодчеркивание - 1);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ПолучениеСодержимогоИзИнтернет

Функция НовыйЗащищенноеСоединение()

	Возврат Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);

КонецФункции

Процедура УстановитьОписаниеОшибки(Результат, КодОшибки, СообщениеОбОшибке, ИнформацияОбОшибке, Перенаправления)

	Результат.КодОшибки          = КодОшибки;
	Результат.СообщениеОбОшибке  = СообщениеОбОшибке;
	ДопСообщение = "";
	Если КодОшибки = "ConnectError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка при подключении к серверу.'");

	ИначеЕсли КодОшибки = "ServerError" Тогда
		ДопСообщение = НСтр("ru = 'На сервере возникла внутренняя ошибка при обработке запроса.'");

	ИначеЕсли КодОшибки = "ClientError" Тогда
		ДопСообщение = НСтр("ru = 'Некорректный запрос.'");

	ИначеЕсли КодОшибки = "InternalError" Тогда
		ДопСообщение = НСтр("ru = 'Внутренняя ошибка.'");

	ИначеЕсли КодОшибки = "LoginError" Тогда
		ДопСообщение = НСтр("ru = 'Ошибка аутентификации на сервере.'");

	КонецЕсли;

	Результат.СообщениеОбОшибке =
		?(ПустаяСтрока(ДопСообщение), "", ДопСообщение + " ")
		+ СообщениеОбОшибке;

	Результат.ИнформацияОбОшибке = ИнформацияОбОшибке;

	Если Перенаправления.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке = Результат.ИнформацияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
			+ СтрСоединить(Перенаправления, ", " + Символы.ПС);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьСписокПеренаправленийКИнформацииОбОшибке(ИнформацияОбОшибке, Перенаправления)

	Если Перенаправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ИнформацияОбОшибке = ИнформацияОбОшибке + Символы.ПС
		+ НСтр("ru = 'Перенаправления:'") + Символы.ПС
		+ СтрСоединить(Перенаправления, ", " + Символы.ПС);

КонецПроцедуры

Процедура СлужебнаяПроверитьURLДоступен(
	URL,
	Метод,
	ИмяОшибки,
	СообщениеОбОшибке,
	ИнформацияОбОшибке,
	НастройкиПроксиСервера = Неопределено) Экспорт
	
	ДопПараметрыПолученияФайла = Новый Структура("ФорматОтвета, Таймаут", 1, 10);
	ДопПараметрыПолученияФайла.Вставить("НастройкиПрокси", НастройкиПроксиСервера);
	
	Если Метод <> Неопределено Тогда
		ДопПараметрыПолученияФайла.Вставить("Метод", Метод);
	КонецЕсли;
	
	Попытка
		РезультатЗагрузки = ЗагрузитьСодержимоеИзИнтернет(
			URL,
			,
			,
			ДопПараметрыПолученияФайла);
	Исключение
		ИмяОшибки = "Unknown";
		СообщениеОбОшибке = НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестная ошибка при проверке доступности URL.
				|%1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если Не ПустаяСтрока(РезультатЗагрузки.КодОшибки) Тогда
		ИмяОшибки          = РезультатЗагрузки.КодОшибки;
		СообщениеОбОшибке  = РезультатЗагрузки.СообщениеОбОшибке;
		ИнформацияОбОшибке = РезультатЗагрузки.ИнформацияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено
		Или НастройкаПроксиСервера = "<СистемныеУстановки>" Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;	
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
			
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

#КонецОбласти

#КонецОбласти
