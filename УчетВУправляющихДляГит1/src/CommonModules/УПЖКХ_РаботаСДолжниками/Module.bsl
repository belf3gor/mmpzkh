
#Область СлужебныеПроцедурыИФункции

// Функция для получения таблицы должников.
//
// Параметры:
//  Дата                             - <Дата>
//                                   - Дата, на которую получаются данные о задолженности.
//  СписокЛицевыхСчетов              - <Список значений>
//                                   - Список лицевых счетов.
//  НастройкиУчетнойПолитикиТСЖ      - <Структура>
//                                   - Настройки учетной политики ТСЖ.
//  СтруктураДляЗаполненияПараметров - <Структура>
//                                   - Структура содержит данные для заполнения параметров запроса.
//
// Формат структуры "СтруктураДляЗаполненияПараметров":
//  Основные свойства:
//    Организация                   - <Ссылка>
//                                  - Ссылка на справочник "Организации".
//    МинимальнаяСуммаЗадолженности - <Число>
//                                  - Минимальная сумма задолженности.
//    МинимальныйСрокЗадолженности  - <Число>
//                                  - Минимальное количество месяцев задолженности.
//    Здание                        - <Ссылка>
//                                  - Ссылка на здание.
//  Дополнительные свойства:
//    Помещение                     - <Ссылка>
//                                  - Ссылка на помещение.
//    Услуги                        - <Массив>
//                                  - Массив содержит ссылки на справочник "Услуги".
//
// Возвращаемое значение:
//   Возвращается таблица значений с задолжностями по лицевым счетам согласно отбору.
//
Функция ПолучитьТаблицуДолжников(Дата, СписокЛицевыхСчетов = Неопределено, СтруктураДляЗаполненияПараметров, 
																				НастройкиУчетнойПолитикиТСЖ = Неопределено) Экспорт
	
	// Определим настройки учетной политики, если они еще не определены.
	Если НастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		НастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, СтруктураДляЗаполненияПараметров.Организация);
	КонецЕсли;
	
	// Устанавливаем параметры в запрос.
	Запрос = Новый Запрос();
	
	ДатаСГраницей = Новый Граница(КонецДня(Дата), ВидГраницы.Включая);
	
	Запрос.УстановитьПараметр("Дата",                              КонецДня(Дата));
	Запрос.УстановитьПараметр("ДатаСГраницей",                     ДатаСГраницей);
	Запрос.УстановитьПараметр("Организация",                       СтруктураДляЗаполненияПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаОкончанияПериодаЗадолженности", НачалоМесяца(Дата));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления В (&СписокНеУчитываемыхМесяцев)
	|						ТОГДА 0
	|					ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|				КОНЕЦ
	|		КОНЕЦ) КАК СуммаДолгаПоНачислениям,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления В (&СписокНеУчитываемыхМесяцев)
	|							ТОГДА 0
	|						ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаДолгаПоПени,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления В (&СписокНеУчитываемыхМесяцев)
	|				ТОГДА 0
	|			ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|		КОНЕЦ) КАК СуммаДолгаОбщая,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаДолгаИтоговая
	|ПОМЕСТИТЬ ТаблицаДолговНаДатуОбработки
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаСГраницей,
	|			Организация = &Организация
	|				И &ОтборЛС
	|				И &ОтборУслуг) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДолговНаДатуОбработки.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДолговНаДатуОбработки.СуммаДолгаПоНачислениям КАК СуммаДолгаПоНачислениям,
	|	ТаблицаДолговНаДатуОбработки.СуммаДолгаПоПени КАК СуммаДолгаПоПени,
	|	ТаблицаДолговНаДатуОбработки.СуммаДолгаОбщая КАК СуммаДолгаОбщая,
	|	ТаблицаДолговНаДатуОбработки.СуммаДолгаИтоговая КАК СуммаДолгаИтоговая
	|ПОМЕСТИТЬ втТаблицаДолговСОтбором
	|ИЗ
	|	ТаблицаДолговНаДатуОбработки КАК ТаблицаДолговНаДатуОбработки
	|ГДЕ
	|	&УсловиеНаСуммуЗадолженности
	|	И ТаблицаДолговНаДатуОбработки.СуммаДолгаОбщая > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДолговНаДатуОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ СамыеРанниеНепогашенныеМесяцыНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаСГраницей,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втТаблицаДолговСОтбором.ЛицевойСчет
	|					ИЗ
	|						втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором)
	|				И &ОтборУслуг
	|				И &ОграничениеНаМесяцНачисления) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДолговСОтбором.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДолговСОтбором.СуммаДолгаПоНачислениям КАК СуммаДолгаПоНачислениям,
	|	втТаблицаДолговСОтбором.СуммаДолгаПоПени КАК СуммаДолгаПоПени,
	|	втТаблицаДолговСОтбором.СуммаДолгаОбщая КАК СуммаДолгаОбщая,
	|	втТаблицаДолговСОтбором.СуммаДолгаИтоговая КАК СуммаДолгаИтоговая,
	|	ЕСТЬNULL(СамыеРанниеНепогашенныеМесяцыНачисления.МесяцНачисления, &ДатаОкончанияПериодаЗадолженности) КАК МесяцНачисления,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЕСТЬNULL(СамыеРанниеНепогашенныеМесяцыНачисления.МесяцНачисления, &ДатаОкончанияПериодаЗадолженности), МЕСЯЦ), &ДатаОкончанияПериодаЗадолженности, МЕСЯЦ) КАК МесяцевЗадолженности
	|ПОМЕСТИТЬ втТаблицаДолговСКоличествомМесяцевЗадолженности
	|ИЗ
	|	втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором
	|		ЛЕВОЕ СОЕДИНЕНИЕ СамыеРанниеНепогашенныеМесяцыНачисления КАК СамыеРанниеНепогашенныеМесяцыНачисления
	|		ПО втТаблицаДолговСОтбором.ЛицевойСчет = СамыеРанниеНепогашенныеМесяцыНачисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаДолговСОтбором
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СамыеРанниеНепогашенныеМесяцыНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.ЛицевойСчет.Адрес КАК Адрес,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.СуммаДолгаПоНачислениям КАК СуммаДолгаПоНачислениям,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.СуммаДолгаПоПени КАК СуммаДолгаПоПени,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.СуммаДолгаОбщая КАК СуммаДолгаОбщая,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.СуммаДолгаИтоговая КАК СуммаДолгаИтоговая,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.МесяцНачисления КАК МесяцНачисления,
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности.МесяцевЗадолженности КАК МесяцевЗадолженности
	|ПОМЕСТИТЬ втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности
	|ИЗ
	|	втТаблицаДолговСКоличествомМесяцевЗадолженности КАК втТаблицаДолговСКоличествомМесяцевЗадолженности
	|ГДЕ
	|	&УсловиеНаСрокЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаДолговСКоличествомМесяцевЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ВладелецОбъекта
	|ПОМЕСТИТЬ втОтветственныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.ЛицевойСчет
	|				ИЗ
	|					втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности КАК втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжниками.Должник КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор ССЫЛКА Документ.УПЖКХ_Предупреждение
	|				ТОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КоличествоПредупреждений,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор ССЫЛКА Документ.УПЖКХ_Иск
	|				ТОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КоличествоИсков,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор ССЫЛКА Документ.УПЖКХ_СудебноеСоглашение
	|				ТОГДА УПЖКХ_ИсторияРаботыСДолжниками.Регистратор
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК КоличествоСудебныхСоглашений
	|ПОМЕСТИТЬ КоличествоДокументов
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками КАК УПЖКХ_ИсторияРаботыСДолжниками
	|ГДЕ
	|	УПЖКХ_ИсторияРаботыСДолжниками.Период <= &Дата
	|	И УПЖКХ_ИсторияРаботыСДолжниками.Организация = &Организация
	|	И УПЖКХ_ИсторияРаботыСДолжниками.Должник В
	|			(ВЫБРАТЬ
	|				втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.ЛицевойСчет
	|			ИЗ
	|				втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности КАК втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ИсторияРаботыСДолжниками.Должник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.Адрес КАК Адрес,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.Здание КАК Здание,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.СуммаДолгаПоНачислениям КАК СуммаДолга,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.СуммаДолгаПоПени КАК СуммаПени,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.СуммаДолгаОбщая КАК ОбщаяСумма,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.СуммаДолгаИтоговая КАК ОбщаяСуммаЗадолженности,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.МесяцНачисления КАК МесяцНачисления,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.МесяцевЗадолженности КАК МесяцевЗадолженности,
	|	ЕСТЬNULL(втОтветственныеСобственники.ВладелецОбъекта, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ВладелецОбъекта,
	|	ЕСТЬNULL(КоличествоДокументов.КоличествоПредупреждений, 0) КАК КоличествоПредупреждений,
	|	ЕСТЬNULL(КоличествоДокументов.КоличествоИсков, 0) КАК КоличествоИсков,
	|	ЕСТЬNULL(КоличествоДокументов.КоличествоСудебныхСоглашений, 0) КАК КоличествоСудебныхСоглашений
	|ИЗ
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности КАК втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственники КАК втОтветственныеСобственники
	|		ПО втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.ЛицевойСчет = втОтветственныеСобственники.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоДокументов КАК КоличествоДокументов
	|		ПО втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.ЛицевойСчет = КоличествоДокументов.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.Адрес.ВидПомещения,
	|	втТаблицаДолговСОтборомПоКоличествуМесяцевЗадолженности.Адрес.Код";
	
	// Данное условие предназначено для того, чтобы определить нужно ли включить в сумму задолженности начисления текущего и предыдущего месяца.
	// Т.е. если дата формирования списка должников в месяце меньше, чем срок оплаты, то начисления текущего и предыдущего месяца не включаем.
	// В противном случае в сумму задолженности не включаем только начисления за текущий месяц.
	
	СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности = Новый СписокЗначений;
	СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности.Добавить(НачалоДня(КонецМесяца(Дата)));
	
	Если Дата < НачалоМесяца(Дата) + НастройкиУчетнойПолитикиТСЖ.ЧислоВнесенияПлатежа * 24 * 60 * 60 Тогда
		СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности.Добавить(НачалоДня(КонецМесяца(ДобавитьМесяц(Дата, -1))));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокНеУчитываемыхМесяцев", СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОграничениеНаМесяцНачисления", "НЕ МесяцНачисления В (&СписокНеУчитываемыхМесяцев)");
	
	МинимальныйСрокЗадолженности = 0;
	МинимальнаяСуммаЗадолженности = 0;
	
	Если СтруктураДляЗаполненияПараметров.Свойство("МинимальныйСрокЗадолженности") И СтруктураДляЗаполненияПараметров.МинимальныйСрокЗадолженности > 0 Тогда
		МинимальныйСрокЗадолженности = СтруктураДляЗаполненияПараметров.МинимальныйСрокЗадолженности;
	КонецЕсли;
	
	Если СтруктураДляЗаполненияПараметров.Свойство("МинимальнаяСуммаЗадолженности") И СтруктураДляЗаполненияПараметров.МинимальнаяСуммаЗадолженности > 0 Тогда
		МинимальнаяСуммаЗадолженности = СтруктураДляЗаполненияПараметров.МинимальнаяСуммаЗадолженности;
	КонецЕсли;
	
	УсловиеНаМинимальныйСрокЗадолженности   = "втТаблицаДолговСКоличествомМесяцевЗадолженности.МесяцевЗадолженности >= " + Формат(МинимальныйСрокЗадолженности, "ЧН=0; ЧГ=");
	УсловиеНаМинимальнуюСуммуЗадолженности  = "ТаблицаДолговНаДатуОбработки.СуммаДолгаОбщая >= " + Формат(МинимальнаяСуммаЗадолженности, "ЧРД=.; ЧН=0; ЧГ=");
	
	УсловиеНаМаксимальныйСрокЗадолженности  = "";
	УсловиеНаМаксимальнуюСуммуЗадолженности = "";
	
	Если СтруктураДляЗаполненияПараметров.Свойство("РасширеннаяРаботаСДолжниками")
		 И СтруктураДляЗаполненияПараметров.РасширеннаяРаботаСДолжниками Тогда
		
		Если СтруктураДляЗаполненияПараметров.МаксимальныйСрокЗадолженности > 0 Тогда
			УсловиеНаМаксимальныйСрокЗадолженности  = " И " + "втТаблицаДолговСКоличествомМесяцевЗадолженности.МесяцевЗадолженности <= " + Формат(СтруктураДляЗаполненияПараметров.МаксимальныйСрокЗадолженности, "ЧН=0; ЧГ=");
		КонецЕсли;
		
		Если СтруктураДляЗаполненияПараметров.МаксимальнаяСуммаЗадолженности > 0 Тогда
			УсловиеНаМаксимальнуюСуммуЗадолженности = " И " + "ТаблицаДолговНаДатуОбработки.СуммаДолгаОбщая <= " + Формат(СтруктураДляЗаполненияПараметров.МаксимальнаяСуммаЗадолженности, "ЧРД=.; ЧН=0; ЧГ=");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСрокЗадолженности", УсловиеНаМинимальныйСрокЗадолженности + УсловиеНаМаксимальныйСрокЗадолженности);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаСуммуЗадолженности", УсловиеНаМинимальнуюСуммуЗадолженности + УсловиеНаМаксимальнуюСуммуЗадолженности);
	
	Если НЕ СписокЛицевыхСчетов = Неопределено Тогда
		// Отбор лицевых счетов из переданного списка.
		Запрос.УстановитьПараметр("СписокЛС", СписокЛицевыхСчетов);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЛС", "ЛицевойСчет В (&СписокЛС)");
	Иначе
		Если СтруктураДляЗаполненияПараметров.Свойство("Помещение")
		 И НЕ СтруктураДляЗаполненияПараметров.Помещение.Пустая() Тогда
			// Отбор лицевых счетов помещения.
			Запрос.УстановитьПараметр("Помещение", СтруктураДляЗаполненияПараметров.Помещение);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЛС", "ЛицевойСчет.Адрес = &Помещение");
		ИначеЕсли СтруктураДляЗаполненияПараметров.Свойство("Здание")
		 И НЕ СтруктураДляЗаполненияПараметров.Здание.Пустая() Тогда
			// Отбор лицевых счетов здания.
			Запрос.УстановитьПараметр("Здание", СтруктураДляЗаполненияПараметров.Здание);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЛС", "ЛицевойСчет.Адрес.Владелец = &Здание");
		Иначе
			// Если отбор лицевых счетов не задан.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЛС", "ИСТИНА");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДляЗаполненияПараметров.Свойство("Услуги")
	   И (ТипЗнч(СтруктураДляЗаполненияПараметров.Услуги) = Тип("Массив") ИЛИ ТипЗнч(СтруктураДляЗаполненияПараметров.Услуги) = Тип("СписокЗначений")) Тогда
		// Определение задолженности только по тем услугам, которые определены в массиве или списке значений.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборУслуг", "Услуга В (&Услуги)");
		Запрос.УстановитьПараметр("Услуги", СтруктураДляЗаполненияПараметров.Услуги);
	Иначе
		// Получаем задолженность по всем услугам.
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборУслуг", "ИСТИНА");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуДолжников()

#КонецОбласти

#Область РасширеннаяРаботаСДолжниками

// Функция получает значение настройки расширенной работы с должниками.
//
Функция ПолучитьНастройкуРасширеннойРаботыСДолжниками() Экспорт
	Возврат Константы.УПЖКХ_РасширеннаяРаботаСДолжниками.Получить();
КонецФункции

// Процедура устанавливает значение настройки расширенной работы с должниками.
//
Процедура УстановитьНастройкуРасширеннойРаботыСДолжниками(ЗначениеНастройки) Экспорт
	Константы.УПЖКХ_РасширеннаяРаботаСДолжниками.Установить(ЗначениеНастройки);
КонецПроцедуры

// Функция получает информационную строку по категории.
//
Функция ПолучитьПредставлениеКатегорииДолжников(Категория, СМероприятиями = Ложь, ПереченьМероприятийСтрокой = "") Экспорт
	
	Если Категория.Пустая() Тогда
		ПереченьМероприятийСтрокой = "";
		Возврат "";
	КонецЕсли;
	
	Если СМероприятиями Тогда
		ПереченьМероприятийСтрокой = Категория.ПереченьМероприятийСтрокой;
	КонецЕсли;
	
	СтруктураИсходныхДанных = Новый Структура;
	СтруктураИсходныхДанных.Вставить("ПоПериоду", Категория.ПоПериоду);
	СтруктураИсходныхДанных.Вставить("ПоПериодуОт", Категория.ПоПериодуОт);
	СтруктураИсходныхДанных.Вставить("ПоПериодуДо", Категория.ПоПериодуДо);
	СтруктураИсходныхДанных.Вставить("ПоСумме", Категория.ПоСумме);
	СтруктураИсходныхДанных.Вставить("ПоСуммеОт", Категория.ПоСуммеОт);
	СтруктураИсходныхДанных.Вставить("ПоСуммеДо", Категория.ПоСуммеДо);
	
	СтрокаРезультата = СформироватьПредставлениеКатегорииПоИсходнымДанным(СтруктураИсходныхДанных);
	
	Возврат СтрокаРезультата;
	
КонецФункции

// Функция формирует информационную строку по исходным данным.
//
Функция СформироватьПредставлениеКатегорииПоИсходнымДанным(ИсходныеДанные) Экспорт
	
	СтрокаРезультата = "";
	
	Если ИсходныеДанные.ПоПериоду Тогда
	
		СтрокаРезультата = "по периоду от " + ИсходныеДанные.ПоПериодуОт;
		
		Если ИсходныеДанные.ПоПериодуДо > 0 Тогда 
			СтрокаРезультата = СтрокаРезультата + " до " + ИсходныеДанные.ПоПериодуДо + " мес.";
		Иначе
			СтрокаРезультата = СтрокаРезультата + " мес. и более"
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИсходныеДанные.ПоСумме Тогда
	
		Если НЕ СтрокаРезультата = "" Тогда
			СтрокаРезультата = СтрокаРезультата + ", и ";
		КонецЕсли;
		
		СтрокаРезультата = СтрокаРезультата + "по сумме от " + Формат(ИсходныеДанные.ПоСуммеОт, "ЧГ=");
	
		Если ИсходныеДанные.ПоСуммеДо > 0 Тогда 
			СтрокаРезультата = СтрокаРезультата + " до " + Формат(ИсходныеДанные.ПоСуммеДо, "ЧГ=") + " руб.";
		Иначе
			СтрокаРезультата = СтрокаРезультата + " руб. и более"
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаРезультата;

КонецФункции

// Функция получает мероприятия по категории.
//
Функция ПолучитьМероприятияПоКатегории(Категория) Экспорт
	
	Если Категория.Пустая() Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Категория.ПереченьМероприятийСтрокой;
	
КонецФункции

#КонецОбласти
