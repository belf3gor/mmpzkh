///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Контрагенты

// Возвращают реквизиты юридического лица по данным ЕГРЮЛ (наименование, адрес, коды и т.д.).
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица, реквизиты которого надо получить.
//
// Возвращаемое значение:
//	Структура - реквизиты юридического лица.
//		* ИНН - Строка - ИНН юридического лица.
//		* КПП - Строка - КПП юридического лица.
//		* Наименование - Строка - представление юридического лица в учетной программе.
//		* НаименованиеПолное - Строка - полное наименование юридического лица.
//		* НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//		* РегистрационныйНомер - Строка - ОГРН юридического лица.
//		* ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//		* Статус - Структура - текущий статус юридического лица.
//			Поля:
//			** Код - Строка - код статуса;
//			** Наименование - Строка - наименование статуса;
//		* РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо.
//			Поля:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//		* ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление адреса.
//			** Комментарий - Строка - произвольный комментарий.
//			** Корректный - Булево - адрес является корректным по данным ФИАС;
//		* Телефон - Структура, Неопределено - данные о телефоне.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление телефона.
//			** Комментарий - Строка - произвольный комментарий.
//		* Руководитель - Структура, Неопределено - данные о руководителе.
//			** Должность - Строка - должность руководителя.
//			** Фамилия - Строка - фамилия руководителя.
//			** Имя - Строка - имя руководителя.
//			** Отчество - Строка - отчество руководителя.
//			** Представление - Строка - ФИО руководителя.
//			** ИНН - Строка - ИНН руководителя.
//			** ДатаЗаписи - Дата - дата записи о руководителе.
//		* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			** Код - Строка - код налогового органа.
//			** Наименование - Строка - наименование налогового органа.
//			** ОКТМО - Строка - код ОКТМО налогового органа.
//			** ОКАТО - Строка - код ОКАТО налогового органа.
//			** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		* ДатаРегистрации - Дата - дата регистрации юридического лица.
//		* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			** РегистрационныйНомерПФР - Строка - регистрационный номер юридического лица в ПФР.
//			** КодОрганаПФР - Строка - код органа ПФР.
//			** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			** РегистрационныйНомерФСС - Строка - регистрационный номер юридического лица в ФСС.
//			** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			** КодОрганаФСС - Строка - код органа ФСС.
//			** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		* КодОКВЭД - Строка - основной код по классификатору ОКВЭД.
//		* ЭтоОКВЭД2 - Булево - основной код приведен по классификатору редакции 2 или редакции 1.
//		* ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				*** Дата - Дата - дата изменения КПП;
//				*** Значение - Строка - значение реквизита КПП;
//			** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** НаименованиеПолное - Строка - полное наименование юридического лица;
//				*** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				*** Дата - Дата - дата изменения адреса;
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//			** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** Код - Строка - код статуса;
//				*** Наименование - Строка - наименование статуса;
//			** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				*** Дата - Дата - дата изменения реквизитов директора;
//				*** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				*** ИНН - Строка - ИНН;
//				*** Фамилия - Строка - фамилия директора;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//				*** ВидДолжности - Строка - вид должности;
//				*** НаименованиеДолжности - Строка - наименование должности;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизации = НовыеРеквизитыЮридическогоЛица();
	РеквизитыОрганизации.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаЮридическиеЛица();
		ИмяМетода        = "findCorporationByInn";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findCorporationByInn"));
		ВходныеПараметры.inn = ИНН;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findCorporationByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыЮрЛица;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		РеквизитыОрганизации);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизации;
	КонецЕсли;
	
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
	
	РеквизитыОрганизации.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	РеквизитыОрганизации.КПП = ОбъектXDTO.КПП;
	
	РеквизитыОрганизации.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	АдресныеСокращения = Неопределено;
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьИсториюРеквизитовЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьИнформациюОСтатусеСтруктура(ОбъектXDTO, РеквизитыОрганизации);
	ЗаполнитьИнформациюОРегистрирующемОргане(ОбъектXDTO, РеквизитыОрганизации);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов юридического лица для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизации;
	
КонецФункции

// Возвращают реквизиты индивидуального предпринимателя по данным ЕГРИП - ФИО, свидетельство о регистрации,
// коды и т.д.
//
// Параметры:
//	ИНН - Строка - ИНН индивидуального предпринимателя, реквизиты которого надо получить.
//
// Возвращаемое значение:
//	Структура - реквизиты индивидуального предпринимателя.
//		* ИНН - Строка - ИНН предпринимателя.
//		* Наименование - Строка - представление предпринимателя в учетной программе.
//		* НаименованиеПолное - Строка - фамилия, имя, отчество предпринимателя.
//		* НаименованиеСокращенное - Строка - фамилия, имя, отчество предпринимателя.
//		* Фамилия - Строка - фамилия предпринимателя.
//		* Имя - Строка - имя предпринимателя.
//		* Отчество - Строка - отчество предпринимателя.
//		* РегистрационныйНомер - Строка - ОГРНИП.
//		* Пол - Строка, Неопределено - "1" - Мужской, "2" - Женский.
//		* КодСтраныГражданства - Строка, Неопределено - код страны.
//		* РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			** Код - Строка - код налогового органа.
//			** Наименование - Строка - наименование налогового органа.
//			** ОКТМО - Строка - код ОКТМО налогового органа.
//			** ОКАТО - Строка - код ОКАТО налогового органа.
//			** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		* ДатаРегистрации - Дата - дата регистрации предпринимателя.
//		* РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			** РегистрационныйНомерПФР - Строка - регистрационный номер предпринимателя в ПФР.
//			** КодОрганаПФР - Строка - код органа ПФР.
//			** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		* РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			** РегистрационныйНомерФСС - Строка - регистрационный номер предпринимателя в ФСС.
//			** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			** КодОрганаФСС - Строка - код органа ФСС.
//			** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		* СвидетельствоОРегистрации - Структура, Неопределено - данные свидетельства.
//			** Серия - Строка - серия свидетельства.
//			** Номер - Строка - номер свидетельства.
//			** Дата - Дата - дата выдачи свидетельства.
//		* КодОКВЭД - Строка - код основного вида деятельности по классификатору ОКВЭД.
//		* ЭтоОКВЭД2 - Булево - код ОКВЭД приведен по классификатору редакции 2 или редакции 1.
//		* ИсторияРеквизитов - Структура - история изменения реквизитов предпринимателя.
//			** ФИО - ТаблицаЗначений - история изменения ФИО;
//				Колонки:
//				*** Дата - Дата - дата изменения ФИО;
//				*** Фамилия - Строка - фамилия;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//			** Гражданство - ТаблицаЗначений - история изменения гражданства;
//				Колонки:
//				*** Дата - Дата - дата изменения гражданства;
//				*** КодСтраныГражданства - Строка, Неопределено - код страны;
//			** ОГРН - ТаблицаЗначений - история изменения ОГРН;
//				Колонки:
//				*** Дата - Дата - дата изменения ОГРН;
//				*** Значение - Строка - значение ОГРН;
//				*** ВидПредпринимателя - Структура - вид предпринимателя.
//					**** Дата - Дата - дата изменения вида предпринимателя;
//					**** Код - Строка - код вида предпринимателя;
//					**** Наименование - Строка - наименование вида предпринимателя;
//				*** Статус - Структура - статус предпринимателя.
//					**** Дата - Дата - дата изменения статуса;
//					**** Код - Строка - код статуса;
//					**** Наименование - Строка - наименование статуса;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыПредпринимателя = НовыеРеквизитыПредпринимателя();
	РеквизитыПредпринимателя.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаИндивидуальныеПредприниматели();
		ИмяМетода        = "findEntrepreneurByInn";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findEntrepreneurByInn"));
		ВходныеПараметры.INN = ИНН;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findEntrepreneurByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.РеквизитыИП;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		РеквизитыПредпринимателя);
	
	Если ЗначениеЗаполнено(РеквизитыПредпринимателя.ОписаниеОшибки) Тогда
		Возврат РеквизитыПредпринимателя;
	КонецЕсли;
	
	РеквизитыПредпринимателя.Фамилия  = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Фамилия);
	РеквизитыПредпринимателя.Имя      = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Имя);
	РеквизитыПредпринимателя.Отчество = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Отчество);
	РеквизитыПредпринимателя.Пол      = Ответ.РеквизитыИП.СвФЛ.Пол;
	ВидИП                             = Ответ.РеквизитыИП.НаимВидИП;
	
	ЗаполнитьКодОКВЭД(ОбъектXDTO, РеквизитыПредпринимателя);
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, РеквизитыПредпринимателя);
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, РеквизитыПредпринимателя);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, РеквизитыПредпринимателя);
	ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, РеквизитыПредпринимателя);
	
	ЗаполнитьИсториюРеквизитовПредпринимателя(ОбъектXDTO, РеквизитыПредпринимателя);
	
	РеквизитыПредпринимателя.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		РеквизитыПредпринимателя.Фамилия,
		РеквизитыПредпринимателя.Имя,
		РеквизитыПредпринимателя.Отчество);
	Если ВидИП = НСтр("ru = 'Индивидуальный предприниматель'") Тогда
		РеквизитыПредпринимателя.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1'"),
			РеквизитыПредпринимателя.Наименование);
		РеквизитыПредпринимателя.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1'"),
			РеквизитыПредпринимателя.Наименование);
	Иначе
		РеквизитыПредпринимателя.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Индивидуальный предприниматель %1 %2'"),
			ВидИП,
			РеквизитыПредпринимателя.Наименование);
		РеквизитыПредпринимателя.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИП %1 %2'"),
			ВидИП,
			РеквизитыПредпринимателя.Наименование);
	КонецЕсли;

		
	РеквизитыПредпринимателя.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	
	Если ОбъектXDTO.СвГражд <> Неопределено Тогда
		РеквизитыПредпринимателя.КодСтраныГражданства = ОбъектXDTO.СвГражд.ОКСМ;
	КонецЕсли;
	
	Если ОбъектXDTO.СвРегИП <> Неопределено Тогда
		РеквизитыПредпринимателя.ДатаРегистрации = ОбъектXDTO.СвРегИП.ДатаРег;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов предпринимателя для ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыПредпринимателя;
	
КонецФункции

// Возвращают основные реквизиты юридических лиц по данным ЕГРЮЛ, подходящих по условиям поиска по наименованию.
//
// Параметры:
//	Наименование - Строка - одно или несколько слов из наименования юридического лица для поиска в ЕГРЮЛ.
//	КодРегиона - Строка, 2 - код региона в юридическом адресе для поиска в ЕГРЮЛ.
//	Адрес - Строка - одно или несколько слов из юридического адреса (от региона до улицы) для поиска в ЕГРЮЛ.
//
// Возвращаемое значение:
//	Структура - реквизиты найденных юридических лиц. Содержание структуры: 
//		* РеквизитыОрганизаций - Массив - реквизиты найденных контрагентов.
//			Если найдено больше 20 контрагентов - возвращаются реквизиты только первых 20.
//			Элементы массива - Структура с полями:
//			** ИНН - Строка - ИНН юридического лица.
//			** Наименование - Строка - наименование юридического лица.
//			** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса.
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//				*** Комментарий - Строка - произвольный комментарий.
//			** Руководитель - Структура, Неопределено - данные о руководителе.
//				*** Должность - Строка - должность руководителя.
//				*** Фамилия - Строка - фамилия руководителя.
//				*** Имя - Строка - имя руководителя.
//				*** Отчество - Строка - отчество руководителя.
//				*** Представление - Строка - ФИО руководителя.
//				*** ИНН - Строка - ИНН руководителя.
//				*** ДатаЗаписи - Дата - дата записи о руководителе.
//		* КоличествоНайденных - Число - общее количество найденных контрагентов (может быть больше 20).
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыЮридическихЛицПоНаименованию(Знач Наименование, Знач КодРегиона = "", Знач Адрес = "") Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	РеквизитыОрганизаций = Новый Структура("РеквизитыОрганизаций,КоличествоНайденных,ОписаниеОшибки",
		Новый Массив, 0, Неопределено);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаЮридическиеЛица();
		ИмяМетода    = "findCorporationsByName";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findCorporationsByName"));
		ВходныеПараметры.name       = Наименование;
		ВходныеПараметры.address    = Адрес;
		ВходныеПараметры.regionCode = КодРегиона;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findCorporationsByName(ВходныеПараметры);
			СписокXDTO = ?(Ответ.CorporationSearchResult = Неопределено,
				Неопределено,
				Ответ.CorporationSearchResult.РеквизитыЮрЛица);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Наименование - %1:'"), Наименование)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		СписокXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		РеквизитыОрганизаций);
	
	Если ЗначениеЗаполнено(РеквизитыОрганизаций.ОписаниеОшибки) Тогда
		Возврат РеквизитыОрганизаций;
	КонецЕсли;
	
	АдресныеСокращения = Неопределено;
	
	Для каждого ОбъектXDTO Из СписокXDTO Цикл
		
		РеквизитыОрганизации     = НовыеРеквизитыЮридическогоЛица();
		РеквизитыОрганизации.ИНН = ОбъектXDTO.ИНН;
		
		ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыОрганизации);
		ЗаполнитьЮридическийАдрес(ОбъектXDTO, РеквизитыОрганизации, Прокси.ФабрикаXDTO, АдресныеСокращения);
		ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, РеквизитыОрганизации);
		РеквизитыОрганизаций.РеквизитыОрганизаций.Добавить(РеквизитыОрганизации);
		
	КонецЦикла;
	
	РеквизитыОрганизаций.КоличествоНайденных = Ответ.CorporationSearchResult.corporationsFound;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершен поиск юридических лиц по наименованию'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат РеквизитыОрганизаций;
	
КонецФункции

// Возвращает информацию о связях юридического лица, его руководителей и учредителей
// с другими лицами по данным ЕГРЮЛ.
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//	Структура   - информация о связях юридического лица.
//		Содержит основные данные о юридическом лице - см. РеквизитыЮридическогоЛицаПоИНН.
//		Также содержит данные:
//		* Статус - Структура - текущий статус юридического лица.
//			Поля:
//			** Код - Строка - код статуса;
//			** Наименование - Строка - наименование статуса;
//		* РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо.
//			Поля:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//		* УставныйКапитал - Число - размер уставного капитала, рублей.
//		* ВидыДеятельности - ТаблицаЗначений - данные о видах деятельности.
//			** КодОКВЭД - Строка - код вида деятельности по классификатору ОКВЭД.
//			** НаименованиеОКВЭД - Строка - наименование вида деятельности по ОКВЭД,
//				сервисом не поставляется, должно заполняться из переопределяемого кода.
//			** ЭтоОКВЭД2 - Булево - код приведен по классификатору редакции 2 или редакции 1.
//		* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//			** Лицензия - Строка - наименование лицензии.
//			** ОписаниеЛицензии - Строка - подробное описание лицензии.
//		* ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			** Представление - Строка - представление адреса.
//			** Комментарий - Строка - произвольный комментарий.
//			** Корректный - Булево - адрес является корректным по данным ФИАС;
//		* ОрганизацииПоАдресу - ТаблицаЗначений - данные об организациях, зарегистрированных по тому же адресу.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где руководитель этой организации также является руководителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//		* ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где руководитель этой организации является учредителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО руководителя, иначе по ИНН.
//		* УчрежденныеФирмы - ТаблицаЗначений - организации, где эта организация является учредителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* Учредители - ТаблицаЗначений - учредители этой организации.
//			** Учредитель - Строка - ФИО или наименование учредителя.
//			** ИНН - Строка - ИНН учредителя.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//			** ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот учредитель является руководителем.
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//			** ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот учредитель также является учредителем.
//				*** НаименованиеОрганизации - Строка - наименование организации.
//				*** ИНН - Строка - ИНН организации.
//				*** КодСтатуса - Строка - код текущего статуса организации.
//				*** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//				*** ПроцентКапитала - Число - процент в уставном капитале.
//				*** СуммаКапитала - Число - сумма взноса в уставный капитал.
//			** ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО учредителя, иначе по ИНН.
//		* Подразделения - ТаблицаЗначений - филиалы и представительства юридического лица, указанные в Уставе.
//			** ОписаниеПодразделения - Строка - наименование подразделения.
//		* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРЮЛ по этому лицу.
//			** ДатаИзменения - Дата - дата внесения изменения.
//			** ГосударственныйОрган - Строка - орган, который внес изменение.
//			** ОписаниеИзменения - Строка - описание изменения.
//		* БухгалтерскаяОтчетность - ТаблицаЗначений - данные бухгалтерской отчетности, сданной в органы Росстата.
//			** Год - Число - год, за который была сдана отчетность.
//			** КодВалютыОтчетности - Строка - в рублях, в тысячах или в миллионах рублей.
//			** ТипОтчетности - Строка - обычная отчетность, упрощенная или отчетность НКО.
//			** Показатели - ТаблицаЗначений - показатели бухгалтерской отчетности.
//				*** Код - Строка - код показателя отчетности.
//				*** Значение - Число - значение показателя отчетности.
//		* ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				*** Дата - Дата - дата изменения КПП;
//				*** Значение - Строка - значение реквизита КПП;
//			** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** НаименованиеПолное - Строка - полное наименование юридического лица;
//				*** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				*** Дата - Дата - дата изменения адреса;
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//			** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				*** Дата - Дата - дата изменения наименования;
//				*** Код - Строка - код статуса;
//				*** Наименование - Строка - наименование статуса;
//			** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				*** Дата - Дата - дата изменения реквизитов директора;
//				*** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				*** ИНН - Строка - ИНН;
//				*** Фамилия - Строка - фамилия директора;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//				*** ВидДолжности - Строка - вид должности;
//				*** НаименованиеДолжности - Строка - наименование должности;
//		* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//		* ОписаниеОшибки - Строка - служебный реквизит;
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку;
//		* НаименованиеСтатуса - Строка - устарело, необходимо использовать Статус.Наименование - наименование текущего статуса;
//		* КодСтатуса - Строка - устарело, необходимо использовать Статус.Код - код текущего статуса.
//
Функция ИнформацияОСвязяхЮридическогоЛицаПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение данных досье юридического лица с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	ИнформацияОСвязях = НоваяИнформацияОСвязяхЮридическогоЛица();
	ИнформацияОСвязях.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОСвязяхКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаЮридическиеЛица();
		ИмяМетода        = "findCorpTrustability";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findCorpTrustability"));
		ВходныеПараметры.INN = ИНН;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findCorpTrustability(ВходныеПараметры);
			ОбъектXDTO = Ответ.CorporationTrustability;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	// Проверка состояния "Не найдены данные по указанному ИНН".
	Если ОбъектXDTO <> Неопределено И Не ЗначениеЗаполнено(ОбъектXDTO.ИНН) И Не ОбъектXDTO.awaitingResponse Тогда
		ОбъектXDTO = Неопределено;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		ИнформацияОСвязях);
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ИнформацияОСвязях.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если ИнформацияОСвязях.ОжиданиеОтвета Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидание ответа получения данных досье юридического лица с ИНН %1'"),
				ИНН),
			"Контрагент",
			ДополнительноеСобытиеПолучениеДанных());
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, ИнформацияОСвязях);
	
	ИнформацияОСвязях.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	ИнформацияОСвязях.КПП = ОбъектXDTO.КПП;
	
	ИнформацияОСвязях.ДатаРегистрации = ОбъектXDTO.СвНаимЮЛ.ДатаОбрЮЛ;
	
	АдресныеСокращения = Неопределено;
	
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьЮридическийАдрес(ОбъектXDTO, ИнформацияОСвязях, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОМассовостиАдреса(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОРуководителе(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОбУчрежденныхФирмах(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОбУчредителях(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОбУставномКапитале(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОПодразделениях(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОБухгалтерскойОтчетности(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИсториюРеквизитовЮридическогоЛица(ОбъектXDTO, ИнформацияОСвязях, Прокси.ФабрикаXDTO, АдресныеСокращения);
	ЗаполнитьИнформациюОСтатусеСтруктура(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОРегистрирующемОргане(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение данных досье юридического лица с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат ИнформацияОСвязях;
	
КонецФункции

// Возвращается информация о связях индивидуального предпринимателя с другими лицами по данным ЕГРЮЛ и ЕГРИП.
//
// Параметры:
//	ИНН - Строка - ИНН индивидуального предпринимателя, информацию о связях которого надо получить.
//
// Возвращаемое значение:
//	Структура - информация о связях индивидуального предпринимателя.
//		Содержит основные данные о предпринимателе - см. РеквизитыПредпринимателяПоИНН.
//		Также содержит данные:
//		* КодСтатуса - Строка - код текущего статуса.
//		* УставныйКапитал - Число - размер уставного капитала, рублей.
//		* ВидыДеятельности - ТаблицаЗначений - данные о видах деятельности.
//			** КодОКВЭД - Строка - код вида деятельности по классификатору ОКВЭД.
//			** НаименованиеОКВЭД - Строка - наименование вида деятельности по ОКВЭД,
//				сервисом не поставляется, должно заполняться из переопределяемого кода.
//			** ЭтоОКВЭД2 - Булево - код приведен по классификатору редакции 2 или редакции 1.
//		* Лицензии - ТаблицаЗначений - данные о полученных лицензиях.
//			** Лицензия - Строка - наименование лицензии.
//			** ОписаниеЛицензии - Строка - подробное описание лицензии.
//		* ОрганизацииГдеРуководитель - ТаблицаЗначений - данные об организациях, где этот предприниматель является руководителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//		* ОрганизацииГдеРуководительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//		* ОрганизацииГдеУчредитель - ТаблицаЗначений - организации, где этот предприниматель является учредителем.
//			** НаименованиеОрганизации - Строка - наименование организации.
//			** ИНН - Строка - ИНН организации.
//			** КодСтатуса - Строка - код текущего статуса организации.
//			** НаименованиеСтатуса - Строка - наименование текущего статуса организации.
//			** ПроцентКапитала - Число - процент в уставном капитале.
//			** СуммаКапитала - Число - сумма взноса в уставный капитал.
//		* ОрганизацииГдеУчредительПоФИО - Булево - если Истина, поиск проводился по ФИО предпринимателя, иначе по ИНН.
//		* ИзмененияВРеестре - ТаблицаЗначений - данные об изменениях в ЕГРИП по этому лицу.
//			** ДатаИзменения - Дата - дата внесения изменения.
//			** ГосударственныйОрган - Строка - орган, который внес изменение.
//			** ОписаниеИзменения - Строка - описание изменения;
//		* ИсторияРеквизитов - Структура - история изменения реквизитов предпринимателя.
//			** ФИО - ТаблицаЗначений - история изменения ФИО;
//				Колонки:
//				*** Дата - Дата - дата изменения ФИО;
//				*** Фамилия - Строка - фамилия;
//				*** Имя - Строка - имя;
//				*** Отчество - Строка - отчество;
//			** Гражданство - ТаблицаЗначений - история изменения гражданства;
//				Колонки:
//				*** Дата - Дата - дата изменения гражданства;
//				*** КодСтраныГражданства - Строка, Неопределено - код страны;
//			** ОГРН - ТаблицаЗначений - история изменения ОГРН;
//				Колонки:
//				*** Дата - Дата - дата изменения ОГРН;
//				*** Значение - Строка - значение ОГРН;
//				*** ВидПредпринимателя - Структура - вид предпринимателя.
//					**** Дата - Дата - дата изменения вида предпринимателя;
//					**** Код - Строка - код вида предпринимателя;
//					**** Наименование - Строка - наименование вида предпринимателя;
//				*** Статус - Структура - статус предпринимателя.
//					**** Дата - Дата - дата изменения статуса;
//					**** Код - Строка - код статуса;
//					**** Наименование - Строка - наименование статуса;
//		* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный вызов метода с этими же параметрами.
//		* ОписаниеОшибки - Строка - служебный реквизит.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция ИнформацияОСвязяхПредпринимателяПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение данных досье предпринимателя с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	ИнформацияОСвязях = НоваяИнформацияОСвязяхПредпринимателя();
	ИнформацияОСвязях.ИНН = ИНН;
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОСвязяхКонтрагентов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаИндивидуальныеПредприниматели();
		ИмяМетода        = "findEntrTrustabilityByInn";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findEntrTrustabilityByInn"));
		ВходныеПараметры.INN = ИНН;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findEntrTrustabilityByInn(ВходныеПараметры);
			ОбъектXDTO = Ответ.PersonTrustability;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	// Проверка состояния "Не найдены данные по указанному ИНН".
	Если ОбъектXDTO <> Неопределено И Не ЗначениеЗаполнено(ОбъектXDTO.ИННФЛ) И Не ОбъектXDTO.awaitingResponse Тогда
		ОбъектXDTO = Неопределено;
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		ИнформацияОСвязях);
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ИнформацияОСвязях.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если ИнформацияОСвязях.ОжиданиеОтвета Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидание ответа получение данных досье предпринимателя с ИНН %1'"),
				ИНН),
			"Контрагент",
			ДополнительноеСобытиеПолучениеДанных());
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
	ИнформацияОСвязях.Фамилия  = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Фамилия);
	ИнформацияОСвязях.Имя      = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Имя);
	ИнформацияОСвязях.Отчество = ТРег(ОбъектXDTO.СвФЛ.ФИОРус.Отчество);
	ИнформацияОСвязях.Пол      = ОбъектXDTO.СвФЛ.Пол;
	
	ИнформацияОСвязях.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"), 
		ИнформацияОСвязях.Фамилия,
		ИнформацияОСвязях.Имя,
		ИнформацияОСвязях.Отчество);
	ИнформацияОСвязях.НаименованиеПолное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Индивидуальный предприниматель %1'"),
		ИнформацияОСвязях.Наименование);
	ИнформацияОСвязях.НаименованиеСокращенное = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='ИП %1'"),
		ИнформацияОСвязях.Наименование);
	
	ИнформацияОСвязях.РегистрационныйНомер = ОбъектXDTO.ОГРН;
	
	Если ОбъектXDTO.СвГражд <> Неопределено Тогда
		ИнформацияОСвязях.КодСтраныГражданства = ОбъектXDTO.СвГражд.ОКСМ;
	КонецЕсли;
	
	Если ОбъектXDTO.СвРегИП <> Неопределено Тогда
		ИнформацияОСвязях.ДатаРегистрации = ОбъектXDTO.СвРегИП.ДатаРег;
	КонецЕсли;
	
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
		ОбъектXDTO, 
		ИнформацияОСвязях, 
		ИнформацияОСвязях.ИНН, 
		ИнформацияОСвязях.ИНН);
	ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях);
	ЗаполнитьИсториюРеквизитовПредпринимателя(ОбъектXDTO, ИнформацияОСвязях);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершено получение данных досье предпринимателя с ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат ИнформацияОСвязях;
	
КонецФункции

// Возвращает информацию о проверках юридических лиц и предпринимателей
// контролирующими органами по открытым данным единого реестра проверок.
//
// Параметры:
//	СписокИНН - Массив - ИНН (Строка) юридических лиц и/или предпринимателей,
//		информацию о проверках которых необходимо получить.
//		Допустимое количество элементов - не более 1000.
//		При превышении допустимого количества вызывается исключение;
//	Плановые - Булево - требуется ли информация о плановых проверках;
//	Внеплановые - Булево - требуется ли информация о внеплановых проверках;
//	Завершенные - Булево - требуется ли информация о завершенных
//		проверках (плановых и внеплановых), по которым уже известен результат.
//	Незавершенные - Булево - требуется ли информация о незавершенных
//		проверках (плановых и внеплановых), результат по которым неизвестен;
//
// Возвращаемое значение:
//	Структура - результат получения информации о проверках.
//	* Проверки - Соответствие - информация о проверках:
//		** Ключ - Строка - ИНН;
//		** Значение - ТаблицаЗначений - информация о проверках юридического лица
//			или предпринимателя с указанным ИНН.
//			Колонки таблицы:
//			*** Идентификатор - Строка - идентификатор проверки в едином реестре проверок;
//			*** ПлановаяПроверка - Булево - плановая проверка или внеплановая;
//			*** ПериодПроверки - Дата - месяц, в котором проводится проверка;
//			*** ДатаПроверки - Дата - дата начала проверки;
//			*** КонтролирующийОрган - Строка - орган, который проводит проверку;
//			*** АдресПроверки - Строка - адрес, по которому проводится проверка;
//			*** ЦельПроверки - Строка - с какой целью проводится проверка;
//			*** Длительность - Строка - длительность проверки;
//			*** Результат - Строка - описание результата проверки;
//			*** Нарушения - ТаблицаЗначений - найденные нарушения;
//				**** НомерНарушения - Число - номер по порядку;
//				**** Нарушение - Строка - описание нарушения;
//				**** НарушенныйАкт - Строка - нарушенный нормативный акт;
//				**** Предписание - Строка - выданное предписание о необходимости устранении нарушения;
//				**** Исполнение - Строка - информация об устранении нарушения;
//	* ОжиданиеОтвета - Булево - если возвращается Истина - требуется повторный
//		вызов метода с этими же параметрами;
//	* ОписаниеОшибки - Строка - служебный реквизит.
//		Для обработки ошибки на клиентской части необходимо использовать метод
//		РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН(
	СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные) Экспорт
	
	Возврат ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИННСлужебная(
		СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные, Истина);
	
КонецФункции

#КонецОбласти

#Область ГосударственныеОрганы

// Возвращаются реквизиты налоговой инспекции по коду.
//
// Параметры:
//	КодНалоговогоОргана - Строка - код налогового органа.
//
// Возвращаемое значение:
//	Структура - реквизиты налоговой инспекции.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты налогового органа:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* РегистрирующийОрганИП - Структура, Неопределено - реквизиты регистрирующего
//			органа индивидуальных предпринимателей:
//			** Код - Строка - код органа;
//			** Наименование - Строка - наименование органа;
//			** Адрес - Строка - юридический адрес;
//			** Телефон - Строка - Строка;
//			** Информация - Строка - информация;
//		* РегистрирующийОрганЮЛ - Структура, Неопределено - реквизиты регистрирующего органа юридических лиц.
//			Описание реквизитов см. в поле РегистрирующийОрганИП.
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыНалоговогоОрганаПоКоду(Знач КодНалоговогоОргана) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов налогового органа по коду %1'"),
			КодНалоговогоОргана),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("НалоговыйОрган", КодНалоговогоОргана);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findIfnsByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findIfnsByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findIfnsByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код налогового органа %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Ответ.PaymentDetails <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	Если Ответ.RegistrationDetailsIP <> Неопределено Тогда
		Результат.РегистрирующийОрганИП.Код          = СокрЛП(Ответ.RegistrationDetailsIP.Code);
		Результат.РегистрирующийОрганИП.Наименование = СокрЛП(Ответ.RegistrationDetailsIP.FullName);
		Результат.РегистрирующийОрганИП.Адрес        = СокрЛП(Ответ.RegistrationDetailsIP.Address);
		Результат.РегистрирующийОрганИП.Телефон      = СокрЛП(Ответ.RegistrationDetailsIP.Phone);
		Результат.РегистрирующийОрганИП.Информация   = СокрЛП(Ответ.RegistrationDetailsIP.Information);
	КонецЕсли;
	Если Ответ.RegistrationDetailsUL <> Неопределено Тогда
		Результат.РегистрирующийОрганЮЛ.Код             = СокрЛП(Ответ.RegistrationDetailsUL.Code);
		Результат.РегистрирующийОрганЮЛ.Наименование    = СокрЛП(Ответ.RegistrationDetailsUL.FullName);
		Результат.РегистрирующийОрганЮЛ.Адрес           = СокрЛП(Ответ.RegistrationDetailsUL.Address);
		Результат.РегистрирующийОрганЮЛ.Телефон         = СокрЛП(Ответ.RegistrationDetailsUL.Phone);
		Результат.РегистрирующийОрганЮЛ.Информация      = СокрЛП(Ответ.RegistrationDetailsUL.Information);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов налогового органа по коду %1'"),
			КодНалоговогоОргана),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращаются реквизиты отделения ФСС по коду.
//
// Параметры:
//	КодОтделенияФСС - Строка - Код отделения ФСС.
//
// Возвращаемое значение:
//	Структура - реквизиты отделения ФСС.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты ФСС:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыОтделенияФССПоКоду(Знач КодОтделенияФСС) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов ФСС по коду %1'"),
			КодОтделенияФСС),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("ОрганФСС", КодОтделенияФСС);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findFssByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findFssByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findFssByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ФСС %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Результат.ПлатежныеРеквизиты <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов ФСС по коду %1'"),
			КодОтделенияФСС),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

// Возвращаются реквизиты отделения ПФР по коду.
//
// Параметры:
//	КодОтделенияПФР - Строка - код отделения ПФР.
//
// Возвращаемое значение:
//	Структура - реквизиты отделения ПРФ.
//		* Код - Строка - код государственного органа;
//		* ИНН - Строка - ИНН;
//		* КПП - Строка - КПП;
//		* Наименование - Строка - наименование государственного органа;
//		* ПолноеНаименование - Строка - полное наименование государственного органа;
//		* Адрес - Строка - Юридический адрес;
//		* Телефон - Строка - Телефон;
//		* ЭлектроннаяПочта - Строка - адрес электронной почты;
//		* ИнтернетСайт - Строка - URL сайта государственного органа;
//		* ПлатежныеРеквизиты - Структура - платежные реквизиты ПФР:
//			** ПолучательПлатежа - Строка - получатель платежа;
//			** РасчетныйСчет - Строка - расчетный счет;
//			** КоррСчет - Строка - корреспондентский счет;
//			** БИК - Строка - БИК банка;
//		* ОписаниеОшибки - Строка - описание возникшей ошибки.
//			Для обработки ошибки на клиентской части необходимо использовать метод
//			РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция РеквизитыОтделенияПФРПоКоду(Знач КодОтделенияПФР) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение реквизитов ПФР по коду %1'"),
			КодОтделенияПФР),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = НовыеРеквизитыГосударственногоОргана();
	Результат.Код = КодГосударственногоОрганаДляЗапросаРеквизитов("ОрганПФР", КодОтделенияПФР);
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаГосударственныеОрганы();
		ИмяМетода        = "findPfrByCode";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findPfrByCode"));
		ВходныеПараметры.Code = Результат.Код;
		
		ДополнительныеПараметры =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ = Прокси.findPfrByCode(Результат.Код, ДополнительныеПараметры);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Код отделения ПФР %1:'"), Результат.Код)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		Ответ,
		ОписаниеОшибки,
		"ГосОрганы",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Код = СокрЛП(Ответ.Code);
	Результат.ИНН = СокрЛП(Ответ.INN);
	Результат.КПП = СокрЛП(Ответ.KPP);
	Результат.Наименование = СокрЛП(Ответ.ShortName);
	Результат.ПолноеНаименование = СокрЛП(Ответ.FullName);
	Результат.Адрес   = СокрЛП(Ответ.Address);
	Результат.Телефон = СокрЛП(Ответ.Phone);
	Результат.ЭлектроннаяПочта = СокрЛП(Ответ.EMail);
	Результат.ИнтернетСайт = СокрЛП(Ответ.WebSite);
	Если Результат.ПлатежныеРеквизиты <> Неопределено Тогда
		Результат.ПлатежныеРеквизиты.ПолучательПлатежа = СокрЛП(Ответ.PaymentDetails.RecipientName);
		Результат.ПлатежныеРеквизиты.РасчетныйСчет     = СокрЛП(Ответ.PaymentDetails.PaymentAccount);
		Результат.ПлатежныеРеквизиты.КоррСчет          = СокрЛП(Ответ.PaymentDetails.CorrespondentAccount);
		Результат.ПлатежныеРеквизиты.БИК               = СокрЛП(Ответ.PaymentDetails.BIK);
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение реквизитов ПФР по коду %1'"),
			КодОтделенияПФР),
		"ГосОрганы",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодсистемКонфигурации

// См. ОбновлениеИнформационнойБазыБИП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ВключитьПроверкуКонтрагентовВМоделиСервиса";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.2.1";
	Обработчик.Процедура           = "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки";
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("c4bcb537-61e2-4fbf-af66-a5854048948f");
	Обработчик.Комментарий = НСтр("ru = 'Проверяет существование контрагентов по базе ФНС.
		|До завершения выполнения существование контрагента может быть определено не для всех контрагентов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.3.2.15";
	Обработчик.Процедура           = "ПроверкаКонтрагентовФНС.УстановитьРасписаниеПроверкиКэшаСостояний";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные         = Истина;
	
КонецПроцедуры

// См. процедуру ИнтернетПоддержкаПользователей.ПриДобавленииПараметровРаботыКлиента.
//
Процедура ПриДобавленииПараметровРаботыКлиента(ПараметрыИПП) Экспорт
	
	ПараметрыРаботаСКонтрагентами = Новый Структура;
	
	СвойстваСправочниковТаблица = СвойстваСправочниковКонтрагентов();
	
	// Справочники для интерактивного выбора при создании элементов из Досье контрагента.
	СправочникиСозданиеИзДосье = Новый Массив;
	Для Каждого ОписаниеСправочника Из СвойстваСправочниковТаблица Цикл
		Если Не ОписаниеСправочника.ОтключитьСозданиеИзДосьеКонтрагента Тогда
			СправочникиСозданиеИзДосье.Добавить(
				Новый Структура("Имя, Синоним",
					ОписаниеСправочника.Имя,
					Метаданные.Справочники[ОписаниеСправочника.Имя].Синоним));
		КонецЕсли;
	КонецЦикла;
	ПараметрыРаботаСКонтрагентами.Вставить("СправочникиСозданиеИзДосье", СправочникиСозданиеИзДосье);
	
	ПараметрыИПП.Вставить("РаботаСКонтрагентами", ПараметрыРаботаСКонтрагентами);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"api.orgregister.1c.ru",
		443,
		НСтр("ru = 'Сервис 1С:Контрагент'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"api.taxregister.1c.ru",
		443,
		НСтр("ru = 'Сервис 1С:Контрагент'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTP",
		ПроверкаКонтрагентовФНС.ХостСервисаПроверкиСостоянийФНС(),
		80,
		НСтр("ru = 'Сервис ФНС для проверки контрагентов'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// См. процедуру
// ИнтернетПоддержкаПользователей.ПриФормированииСпискаУслуг.
//
Процедура ПриФормированииСпискаУслуг(Услуги) Экспорт
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Автозаполнение реквизитов контрагентов'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Автозаполнение и проверка реквизитов ФНС, ФСС, ПФР'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиИнформацияОСвязяхКонтрагентов());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Досье контрагента'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Информация о плановых и внеплановых проверках организации'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПроверкаКэшаСостоянийФНС.ИмяМетода);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеЗагрузкиДанных.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "ПроверкаКонтрагентов.ПроверитьКонтрагентовПослеВключенияПроверки");
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			
			МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
			МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		КонецЕсли;
		
	Иначе
		
		// Запуск фонового задания после включения проверки не требуется.
		ПроверкаКонтрагентов.ВключитьВыключитьПроверкуКонтрагентов(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ЦентрМониторингаПереопределяемый.ПриСбореПоказателейСтатистикиКонфигурации.
//
Процедура ПриСбореПоказателейСтатистикиКонфигурации() Экспорт
	
	МодульЦентрМониторинга = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторинга");
	МодульЦентрМониторинга.ЗаписатьСтатистикуОбъектаКонфигурации("ИспользуетсяПроверкаКонтрагентов", 
		Константы.ИспользоватьПроверкуКонтрагентов.Получить());
	
КонецПроцедуры

#КонецОбласти

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.БИПГруппаПроверкаКонтрагентов.Видимость =
		Пользователи.ЭтоПолноправныйПользователь(, Истина)
		И (Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Если Форма.Элементы.БИПГруппаПроверкаКонтрагентов.Видимость Тогда
		Форма.БИПИспользоватьПроверкуКонтрагентов = Константы.ИспользоватьПроверкуКонтрагентов.Получить();
		ПроверкаКонтрагентов.УстановитьВидимостьИЗаголовокПредупрежденияПроТестовыйРежим(
			Форма.Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента);
		Форма.Элементы.ПредупреждениеПроТестовыйРежимПроверкиКонтрагента.ЦветФона =
			Метаданные.ЭлементыСтиля.ЦветФонаТестовогоРежимаСервисаФНС.Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияПодсистемБиблиотеки

// Регистрирует список сервисов, которые доступны для
// использования в конфигурации.
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
// Пример:
//  ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
//  ОписательСервиса.Идентификатор   = "contragent";
//  ОписательСервиса.КартинкаСервиса = Метаданные.ОбщиеКартинки.Сервис1СКонтрагент;
//  ОписательСервиса.Наименование    = НСтр("ru = '1С:Контрагент'");
//  ОписательСервиса.ОписаниеСервиса = НСтр("ru = 'Быстрая проверка информации о контрагентах, автоматическое
//    |заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
//
//  СервисыСопровождения.Добавить(ОписательСервиса);
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.Сервис1СКонтрагент48;
	ОписательСервиса.Наименование    = НСтр("ru = '1С:Контрагент'");
	ОписательСервиса.Описание        = НСтр("ru = 'Быстрая проверка информации о контрагентах,
		| автоматическое заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Процедура ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки)
	
	ПараметрыСервиса = ПараметрыСервисаДоступность();
	ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
	ПараметрыПодключения.АдресWSDL              = ПараметрыСервиса.URL;
	ПараметрыПодключения.URIПространстваИмен    = ПараметрыСервиса.URIПространстваИмен;
	ПараметрыПодключения.ИмяСервиса             = ПараметрыСервиса.Имя;
	ПараметрыПодключения.ИмяТочкиПодключения    = ПараметрыСервиса.ИмяТочкиПодключения;
	ПараметрыПодключения.ДелатьКонтрольныйВызов = Ложь;
	ПараметрыПодключения.Таймаут                = 15;
	
	Попытка
		Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Не удалось получить описание сервиса. %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Попытка
		Прокси.ping();
	Исключение
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Ошибка при вызове операции ping(). %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция ИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИННСлужебная(
	СписокИНН, Плановые, Внеплановые, Завершенные, Незавершенные, ПроверитьДоступностьСервиса) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение информации о проверках контрагентов. Количество ИНН: %1'"),
			СписокИНН.Количество()),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	МаксимальноеКоличествоИНН = 1000;
	Если СписокИНН.Количество() > МаксимальноеКоличествоИНН Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недопустимое значение параметра ""СписокИНН"". Количество ИНН превышает %1.'"),
			Формат(МаксимальноеКоличествоИНН, "ЧГ=0"));
	КонецЕсли;
	
	Результат = НоваяИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН();
	
	ОписаниеОшибки = "";
	
	// Проверка наличия услуги.
	ИдентификаторУслуги = ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами();
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		ОписаниеОшибки = "УслугаНеПодключена";
	КонецЕсли;
	
	Если ПроверитьДоступностьСервиса Тогда
		ПроверитьДоступностьСервисаКонтрагент(ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ПараметрыСервиса = ПараметрыСервисаПроверкиФНС();
		ИмяМетода        = "findInspectionsByInnList";
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОбъектXDTO = Неопределено;
			Прокси = ПроксиСервиса(
				ПараметрыСервиса.URL,
				ПараметрыСервиса.URIПространстваИмен,
				ПараметрыСервиса.Имя,
				ПараметрыСервиса.ИмяТочкиПодключения,
				ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		ЗаполнитьТикетАутентификации(Прокси, ПараметрыСервиса.URL, ИмяМетода, ОписаниеОшибки);
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда
		
		ВходныеПараметры = Прокси.ФабрикаXDTO.Создать(
			Прокси.ФабрикаXDTO.Тип(ПараметрыСервиса.URIПространстваИмен, "findInspectionsByInnList"));
		Для Каждого ИНН Из СписокИНН Цикл
			ВходныеПараметры.innList.Добавить(СокрЛП(ИНН));
		КонецЦикла;
		
		ВходныеПараметры.additionalParameters =
			ДополнительныеПараметрыВызоваОперацииСервиса(
				Прокси.ФабрикаXDTO,
				"http://company1c.com/orgregister/base");
		
		Попытка
			Ответ      = Прокси.findInspectionsByInnList(ВходныеПараметры);
			ОбъектXDTO = Ответ.InspectionsList;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='ИНН %1:'"), ИНН)
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	ОбработатьОшибкуСервиса(
		ОбъектXDTO,
		ОписаниеОшибки,
		"Контрагент",
		ИмяМетода,
		ИдентификаторУслуги,
		Результат);
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ОжиданиеОтвета = ОбъектXDTO.awaitingResponse;
	Если Результат.ОжиданиеОтвета Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Ожидание ответа получение информации о проверках контрагентов'"),
			"Контрагент",
			ДополнительноеСобытиеПолучениеДанных());
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИНН Из СписокИНН Цикл
		Результат.Проверки.Вставить(ИНН, НоваяТаблицаПроверкиКонтролирующимиОрганами());
	КонецЦикла;
	
	Если ОбъектXDTO.Inspections <> Неопределено Тогда
		Для Каждого ЭлементСпискаXDTO Из ОбъектXDTO.Inspections Цикл
			ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(
				ЭлементСпискаXDTO,
				Результат,
				Плановые,
				Внеплановые,
				Завершенные,
				Незавершенные);
		КонецЦикла;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Успешно завершено получение информации о проверках контрагентов.'"),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

Функция СвойстваСправочниковКонтрагентов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	
	Результат.Колонки.Добавить("Имя"                                , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("Иерархический"                      , ОписаниеТипаБулево);
	Результат.Колонки.Добавить("РеквизитИНН"                        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("РеквизитКПП"                        , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ОтключитьСозданиеИзДосьеКонтрагента", ОписаниеТипаБулево);
	
	РаботаСКонтрагентамиПереопределяемый.ПриОпределенииСвойствСправочниковКонтрагентов(Результат);
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить свойства справочника Контрагенты.
			|Не заполнена реализация метода ПриОпределенииСвойствСправочниковКонтрагентов()
			|общего модуля РаботаСКонтрагентамиПереопределяемый.'");
	КонецЕсли;
	
	Результат.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("Тип"));
	
	Для Каждого СтрокаОписаниеСправочника Из Результат Цикл
		СтрокаОписаниеСправочника.ТипСсылка = Тип("СправочникСсылка." + СтрокаОписаниеСправочника.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УслугаПодключена(ИдентификаторУслуги)
	
	Возврат ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги);
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса = Неопределено,
	ДополнительноеСобытие = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Сообщение);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса,
	ДополнительноеСобытие = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
	
	Если ИдентификаторСервиса = "Контрагент" Тогда
		Возврат НСтр("ru = 'Сервис данных единых гос_реестров'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ГосОрганы" Тогда
		Возврат НСтр("ru = 'Сервис данных гос_органов'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ПроверкаКонтрагентов" Тогда
		Возврат НСтр("ru = 'Проверка контрагентов'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Возврат НСтр("ru = 'Работа с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецФункции

// Свойства справочника контрагенты.
//	Предназначена для определения имени справочника, имени реквизитов ИНН и КПП.
//
// Возвращаемое значение:
//	Структура - Структура с ключами Имя, ИНН и КПП справочника контрагенты.
//
Функция СвойстваСправочникаКонтрагенты(Ссылка, ИсключениеПриОтсутствииОписания = Истина) Экспорт
	
	СвойстваСправочников = СвойстваСправочниковКонтрагентов();
	СсылкаТипЗнч = ТипЗнч(Ссылка);
	СтрОписаниеСправочника = СвойстваСправочников.Найти(СсылкаТипЗнч, "ТипСсылка");
	Если СтрОписаниеСправочника = Неопределено И ИсключениеПриОтсутствииОписания Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствует описание справочника с именем ""%1"" в методе ПриОпределенииСвойствСправочниковКонтрагентов()
				|общего модуля ИнтернетПоддержкаПользователейПереопределяемый.'"),
			Ссылка.Метаданные().Имя);
	КонецЕсли;
	
	Возврат СтрОписаниеСправочника;
	
КонецФункции

Функция ИдентификаторСервиса()
	
	Возврат "1C-Counteragent";
	
КонецФункции

Функция ПространствоИменКИ()
	Возврат Метаданные.ПакетыXDTO.КонтактнаяИнформация.ПространствоИмен;
КонецФункции

#КонецОбласти

#Область Тарификация

Функция ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов()
	
	Возврат "1c-counteragent-autocomplete-contractor-details";
	
КонецФункции

Функция ИдентификаторУслугиЗаполнениеРеквизитовГосударственныхОрганов()
	
	Возврат "1c-counteragent-taxregister";
	
КонецФункции

Функция ИдентификаторУслугиИнформацияОСвязяхКонтрагентов()
	
	Возврат "1c-counteragent-contractor-record";
	
КонецФункции

Функция ИдентификаторУслугиИнформацияОПроверкахКонтролирующимиОрганами()
	
	Возврат "1c-counteragent-organization-audit";
	
КонецФункции

#КонецОбласти

#Область СервисыЗаполненияРеквизитов

#Область ОбщегоНазначения

Функция ПредложениеСЗаглавнойБуквы(Строка)
	
	Если ЗначениеЗаполнено(Строка) Тогда
		Возврат ВРег(Лев(Строка, 1)) + НРег(Сред(Строка, 2))
	Иначе
		Возврат Строка;
	КонецЕсли;
	
КонецФункции

Функция ПроксиСервиса(URLМестоположенияWSDL, URIПространстваИмен, ИмяСервиса, ИмяТочкиПодключения, ОписаниеОшибки)
	
	Прокси = Неопределено;
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		// Создание WSПрокси с аутентификацией по тикету аутентификации.
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL           = URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса          = ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения = ИмяТочкиПодключения;
		ПараметрыПодключения.Таймаут             = 60;
		
		ОшибкаАутентификации = Ложь;
		
		// Попытка создания объекта без аутентификации (по данным Кэш).
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
			ОшибкаАутентификации = (СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0
				Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0);
		КонецЕсли;
		
		Если ОшибкаАутентификации Тогда
			
			// Нет описания WSDL в кэше программных интерфейсов.
			// Получить новое описание с использованием тикета, новое описание
			// будет сохранено в кэше программных интерфейсов.
			ОписаниеОшибки = "";
			УстановитьПривилегированныйРежим(Истина);
			
			// Работа в модели сервиса.
			МодульИнтернетПоддержкаПользователейВМоделиСервиса =
				ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
			РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
				URLМестоположенияWSDL);
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось получить тикет аутентификации для создания описания сервиса %1.
							|Код ошибки: %2.
							|Для аутентификации использован логин ""fresh"".'"),
						URLМестоположенияWSDL,
						РезультатПолученияТикета.КодОшибки),
					"РаботаСКонтрагентами");
				ПараметрыПодключения.ИмяПользователя = "fresh";
				ПараметрыПодключения.Пароль          = "fresh";
			Иначе
				ПараметрыПодключения.ИмяПользователя = "AUTH_TOKEN";
				ПараметрыПодключения.Пароль          = РезультатПолученияТикета.Тикет;
			КонецЕсли;
			
			Попытка
				Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
			Исключение
				ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		// Создание WSПрокси в обычном режиме с аутентификацией по логину и паролю.
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		Если ДанныеАутентификации = Неопределено Тогда
			ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыПодключения = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
		ПараметрыПодключения.АдресWSDL           = URLМестоположенияWSDL;
		ПараметрыПодключения.URIПространстваИмен = URIПространстваИмен;
		ПараметрыПодключения.ИмяСервиса          = ИмяСервиса;
		ПараметрыПодключения.ИмяТочкиПодключения = ИмяТочкиПодключения;
		ПараметрыПодключения.ИмяПользователя     = ДанныеАутентификации.Логин;
		ПараметрыПодключения.Пароль              = ДанныеАутентификации.Пароль;
		ПараметрыПодключения.Таймаут             = 60;
		
		Попытка
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПодключения);
		Исключение
			ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

Процедура ЗаполнитьТикетАутентификации(ПроксиСервиса, АдресСервиса, ИмяМетода, ОписаниеОшибки)
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Получение тикета.
	УстановитьПривилегированныйРежим(Истина);
	
	// Работа в модели сервиса.
	МодульИнтернетПоддержкаПользователейВМоделиСервиса =
		ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователейВМоделиСервиса");
	РезультатПолученияТикета = МодульИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
		АдресСервиса + "#" + ИмяМетода);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить тикет аутентификации для вызова операции %1 сервиса %2.
					|Код ошибки: %3.
					|Для аутентификации использован логин ""fresh"".'"),
				ИмяМетода,
				АдресСервиса,
				РезультатПолученияТикета.КодОшибки),
			"РаботаСКонтрагентами");
		ПроксиСервиса.Пользователь = "fresh";
		ПроксиСервиса.Пароль       = "fresh";
	Иначе
		ПроксиСервиса.Пользователь = "AUTH_TOKEN";
		ПроксиСервиса.Пароль       = РезультатПолученияТикета.Тикет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибкуСервиса(ОбъектXDTO, ОписаниеОшибки, Сервис, ИмяМетода, ИдентификаторУслуги, Результат)
	
	Если ОбъектXDTO <> Неопределено И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	КодОсновногоЯзыка  = ОбщегоНазначения.КодОсновногоЯзыка(); // Для записи события в журнал регистрации.
	ОписаниеОшибкиВРег = ВРег(ОписаниеОшибки);
	
	Если ОписаниеОшибкиВРег = ВРег("НеУказаныПараметрыАутентификации")
		Или ОписаниеОшибкиВРег = ВРег("НеУказанПароль") Тогда
		
		Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"),
			Сервис,
			НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, """STATUS"":401") > 0
		Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-9:") > 0 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе. Обратитесь к администратору.'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка аутентификации в сервисе.
						|%1'"),
						ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		Иначе
			Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Интернет-поддержка пользователей не подключена.
						|%1'"),
						ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", КодОсновногоЯзыка));
		КонецЕсли;
		
	ИначеЕсли ОписаниеОшибкиВРег = ВРег("УслугаНеПодключена") Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Услуга с идентификатором ""%1"" не подключена.'"),
				ИдентификаторУслуги),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-11:") > 0 
		Или СтрНайти(ОписаниеОшибкиВРег, "SERVER-12:") > 0 Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сервис 1С:Контрагент не подключен.
					|%1'"),
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-1:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn"
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН юридического лица.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН предпринимателя.'");
		ИначеЕсли ИмяМетода = "findCorporationsByName" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указано наименование юридического лица.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН проверяемого лица.'");
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки  = НСтр("ru='Не указан код государственного органа.'");
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-2:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn" 
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН юридического лица должен состоять из 10 цифр.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН предпринимателя должен состоять из 12 цифр.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН проверяемого лица должен состоять из 10 или 12 цифр.'");
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-3:") > 0 Тогда
		
		Если ИмяМетода = "findCorporationByInn" 
			ИЛИ ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН юридического лица должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findEntrepreneurByInn" 
			ИЛИ ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН предпринимателя должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='ИНН проверяемого лица должен содержать только цифры.'");
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные о государственном органе с кодом %1 не найдены.'"),
				Результат.Код);
		Иначе
			Результат.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибкиВРег, "SERVER-4:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.
					|%1'"),
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Вызов операций'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-7:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru='Превышен лимит количества вызовов сервиса за один день'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли СтрНайти(ОписаниеОшибки, "SERVER-8:") > 0 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru='Отсутствует действующий договор ИТС'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|%2'"),
					Результат.ОписаниеОшибки,
					ОписаниеОшибки),
			Сервис,
			НСтр("ru='Доступ'", КодОсновногоЯзыка));
		
	ИначеЕсли Не ЗначениеЗаполнено(ОписаниеОшибки) И ОбъектXDTO = Неопределено Тогда
		
		Если ИмяМетода = "findCorporationByInn"
			ИЛИ ИмяМетода = "findEntrepreneurByInn" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные для заполнения реквизитов по ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findCorporationsByName" Тогда
			Результат.ОписаниеОшибки = НСтр("ru='Не удалось выполнить поиск по наименованию.'");
		ИначеЕсли ИмяМетода = "findInspectionsByInnList" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о проверках по ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findCorpTrustability" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о юридическом лице с ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findEntrTrustabilityByInn" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось найти данные о предпринимателе с ИНН %1.'"),
				Результат.ИНН);
		ИначеЕсли ИмяМетода = "findPfrByCode"
			Или ИмяМетода = "findFssByCode"
			Или ИмяМетода = "findIfnsByCode" Тогда
			Результат.ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Данные о государственном органе с кодом %1 не найдены.'"),
				Результат.Код);
		КонецЕсли;
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1
					|Получен пустой ответ сервиса.'"),
				Результат.ОписаниеОшибки,
				ОписаниеОшибки),
			Сервис,
			НСтр("ru='Получение данных'", КодОсновногоЯзыка));
		
	Иначе
		
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при работе с сервисом.
					|%1.'"),
				ОписаниеОшибки),
			Сервис,
			НСтр("ru='Ошибка'", КодОсновногоЯзыка));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнительноеСобытиеПолучениеДанных()
	
	Возврат НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ДополнительныеПараметрыВызоваОперацииСервиса(ФабрикаXDTOСервиса, URIПространстваИмен)
	
	ИмяКонфигурации = ИнтернетПоддержкаПользователей.ИмяКонфигурации();
	ТипДополнительныеПараметрыXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameters");
	ТипДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Тип(URIПространстваИмен, "AdditionalParameter");
	
	Результат = ФабрикаXDTOСервиса.Создать(ТипДополнительныеПараметрыXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "ConfigurationName";
	ДополнительныйПараметрXDTO.value = ИмяКонфигурации;
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	ДополнительныйПараметрXDTO = ФабрикаXDTOСервиса.Создать(ТипДополнительныйПараметрXDTO);
	ДополнительныйПараметрXDTO.name  = "SupportsCustomAddressElements";
	ДополнительныйПараметрXDTO.value = "true";
	Результат.Parameter.Добавить(ДополнительныйПараметрXDTO);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Контрагенты

Функция БазовыйURLСервиса()
	
	
	Возврат "https://api.orgregister.1c.ru";
	
КонецФункции

Функция ПараметрыСервисаЮридическиеЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/corporation/v1?wsdl");
	Результат.Вставить("Имя"                , "CorpWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.corporation.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "CorpWsImplPort");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСервисаИндивидуальныеПредприниматели()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/entrepreneur/v1?wsdl");
	Результат.Вставить("Имя"                , "EntrWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.entrepreneur.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "EntrWsImplPort");
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСервисаПроверкиФНС()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/inspection/v1?wsdl");
	Результат.Вставить("Имя"                , "InspectionWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.inspection.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "InspectionWsImplPort");
	
	Возврат Результат;

КонецФункции

Функция ПараметрыСервисаДоступность()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/availability/v1?wsdl");
	Результат.Вставить("Имя"                , "AvailabilityWsImplService");
	Результат.Вставить("URIПространстваИмен", "http://ws.availability.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "AvailabilityWsImplPort");
	
	Возврат Результат;
	
КонецФункции

Функция СериализацияОбъектаXDTO(ОбъектXDTO)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку(Новый ПараметрыЗаписиXML(, , Ложь, Ложь, ""));
	Если ОбъектXDTO <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	КонецЕсли;
	
	Возврат СтрЗаменить(Запись.Закрыть(), Символы.ПС, "&#10;");
	
КонецФункции

#Область ОписанияРеквизитов

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	РеквизитыОрганизации.Вставить("ИНН");
	РеквизитыОрганизации.Вставить("КПП");
	РеквизитыОрганизации.Вставить("Наименование");
	РеквизитыОрганизации.Вставить("НаименованиеПолное");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");
	РеквизитыОрганизации.Вставить("РегистрационныйНомер");
	РеквизитыОрганизации.Вставить("Статус", Неопределено);
	РеквизитыОрганизации.Вставить("РегистрирующийОрган", Неопределено);
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ПравоваяФорма");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");
	РеквизитыОрганизации.Вставить("Телефон");
	РеквизитыОрганизации.Вставить("Руководитель");
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыОрганизации.Вставить("ДатаРегистрации");
	РеквизитыОрганизации.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыОрганизации.Вставить("РегистрацияВФСС");
	РеквизитыОрганизации.Вставить("КодОКВЭД");
	
	РеквизитыОрганизации.Вставить("ЭтоОКВЭД2", Ложь);
	
	РеквизитыОрганизации.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовЮридическогоЛица());
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыОрганизации;

КонецФункции

#Область ИсторияРеквизитовЮридическогоЛица

Функция НовыйИсторияРеквизитовЮридическогоЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("КПП"               , НовыйТаблицаИсторияКПП());
	Результат.Вставить("Наименование"      , НовыйТаблицаИсторияНаименование());
	Результат.Вставить("Адрес"             , НовыйТаблицаИсторияАдрес());
	Результат.Вставить("Статус"            , НовыйТаблицаИсторияСтатус());
	Результат.Вставить("РеквизитыДиректора", НовыйТаблицаИсторияРеквизитыДиректора());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияКПП()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата"    , Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияНаименование()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                   , ТипДата);
	Результат.Колонки.Добавить("НаименованиеПолное"     , ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеСокращенное", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияАдрес()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КонтактнаяИнформация", ТипСтрока);
	Результат.Колонки.Добавить("Представление"       , ТипСтрока);
	Результат.Колонки.Добавить("Комментарий"         , ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияСтатус()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"        , ТипДата);
	Результат.Колонки.Добавить("Код"         , ТипСтрока);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияРеквизитыДиректора()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"         , ТипДата);
	Результат.Колонки.Добавить("ДатаОкончания", ТипДата);
	Результат.Колонки.Добавить("ИНН", ТипСтрока);
	Результат.Колонки.Добавить("Фамилия", ТипСтрока);
	Результат.Колонки.Добавить("Имя", ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	Результат.Колонки.Добавить("ВидДолжности", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеДолжности", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НовыеРеквизитыПредпринимателя()

	РеквизитыПредпринимателя = Новый Структура;
	
	// Заполняется на основе данных ЕГРИП.
	РеквизитыПредпринимателя.Вставить("ИНН");
	РеквизитыПредпринимателя.Вставить("Наименование");
	РеквизитыПредпринимателя.Вставить("НаименованиеПолное");
	РеквизитыПредпринимателя.Вставить("НаименованиеСокращенное");
	РеквизитыПредпринимателя.Вставить("Фамилия");
	РеквизитыПредпринимателя.Вставить("Имя");
	РеквизитыПредпринимателя.Вставить("Отчество");
	РеквизитыПредпринимателя.Вставить("РегистрационныйНомер");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыПредпринимателя.Вставить("Пол");
	РеквизитыПредпринимателя.Вставить("КодСтраныГражданства");
	РеквизитыПредпринимателя.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыПредпринимателя.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыПредпринимателя.Вставить("РегистрацияВФСС");
	РеквизитыПредпринимателя.Вставить("ДатаРегистрации");
	РеквизитыПредпринимателя.Вставить("СвидетельствоОРегистрации");
	РеквизитыПредпринимателя.Вставить("КодОКВЭД");
	
	РеквизитыПредпринимателя.Вставить("ЭтоОКВЭД2", Ложь);
	
	РеквизитыПредпринимателя.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовПредпринимателя());
	
	РеквизитыПредпринимателя.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыПредпринимателя;

КонецФункции 

#Область ИсторияРеквизитовПредпринимателя

Функция НовыйИсторияРеквизитовПредпринимателя()
	
	Результат = Новый Структура;
	Результат.Вставить("ФИО"        , НовыйТаблицаИсторияФИО());
	Результат.Вставить("Гражданство", НовыйТаблицаИсторияГражданство());
	Результат.Вставить("ОГРН"       , НовыйТаблицаИсторияОГРНПредпринимателя());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияФИО()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Фамилия" , ТипСтрока);
	Результат.Колонки.Добавить("Имя"     , ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияГражданство()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КодСтраныГражданства", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияОГРНПредпринимателя()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"    , ТипДата);
	Результат.Колонки.Добавить("Значение", ТипСтрока);
	Результат.Колонки.Добавить("ВидПредпринимателя");
	Результат.Колонки.Добавить("Статус");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияВидПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйИсторияСтатусПредпринимателя()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Дата"        , '00010101');
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция НоваяИнформацияОСвязяхЮридическогоЛица()

	ИнформацияОСвязях = НовыеРеквизитыЮридическогоЛица();
	
	// Дополнительная информация о юридическом лице и его связях.
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса");
	ИнформацияОСвязях.Вставить("КодСтатуса");
	
	ИнформацияОСвязях.Вставить("УставныйКапитал");
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, которые зарегистрированы по тому же адресу, что и эта организация.
	ИнформацияОСвязях.Вставить("ОрганизацииПоАдресу", НоваяТаблицаОрганизации());
	
	// Все организации, где этот руководитель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель"     , НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот руководитель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель"     , НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	// Все организации, где эта организация является учредителем.
	ИнформацияОСвязях.Вставить("УчрежденныеФирмы", НоваяТаблицаОрганизацииГдеУчредитель());
	
	// Все учредители этой организации.
	ИнформацияОСвязях.Вставить("Учредители", НоваяТаблицаУчредители());
	
	ИнформацияОСвязях.Вставить("Подразделения", НоваяТаблицаПодразделения());
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	ИнформацияОСвязях.Вставить("БухгалтерскаяОтчетность", НоваяТаблицаБухгалтерскаяОтчетность());
	
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции 

Функция НоваяИнформацияОСвязяхПредпринимателя()

	ИнформацияОСвязях = НовыеРеквизитыПредпринимателя();
	
	// Дополнительная информация о предпринимателе и его связях.
	
	ИнформацияОСвязях.Вставить("НаименованиеСтатуса");
	ИнформацияОСвязях.Вставить("КодСтатуса");
	
	ИнформацияОСвязях.Вставить("ВидыДеятельности", НоваяТаблицаВидыДеятельности());
	
	ИнформацияОСвязях.Вставить("Лицензии", НоваяТаблицаЛицензии());
	
	// Все организации, где этот предприниматель является руководителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководитель",      НоваяТаблицаОрганизации());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеРуководительПоФИО", Ложь);
	
	// Все организации, где этот предприниматель является учредителем.
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредитель",      НоваяТаблицаОрганизацииГдеУчредитель());
	ИнформацияОСвязях.Вставить("ОрганизацииГдеУчредительПоФИО", Ложь);
	
	ИнформацияОСвязях.Вставить("ИзмененияВРеестре", НоваяТаблицаИзмененияВРеестре());
	
	// Служебный реквизит
	ИнформацияОСвязях.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат ИнформацияОСвязях;

КонецФункции

Функция НоваяИнформацияОПроверкахКонтролирующимиОрганамиПоСпискуИНН()

	Информация = Новый Структура;
	
	Информация.Вставить("Проверки"      , Новый Соответствие);
	Информация.Вставить("ОписаниеОшибки", "");
	Информация.Вставить("ОжиданиеОтвета", Ложь);
	
	Возврат Информация;

КонецФункции

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация");
	Результат.Вставить("Представление");
	Результат.Вставить("Комментарий");
	Возврат Результат;

КонецФункции

Функция НовоеКонтактноеЛицо()

	Результат = Новый Структура;
	Результат.Вставить("Должность");
	Результат.Вставить("Фамилия");
	Результат.Вставить("Имя");
	Результат.Вставить("Отчество");
	Результат.Вставить("Представление");
	Результат.Вставить("ИНН");
	Результат.Вставить("ДатаЗаписи");
	Возврат Результат;

КонецФункции

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("ОКТМО");
	Результат.Вставить("ОКАТО");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР");
	Результат.Вставить("КодОрганаПФР");
	Результат.Вставить("НаименованиеОрганаПФР");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС");
	Результат.Вставить("КодПодчиненности");
	Результат.Вставить("КодОрганаФСС");
	Результат.Вставить("НаименованиеОрганаФСС");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции

Функция НовоеСвидетельствоОРегистрации()
	
	Результат = Новый Структура;
	Результат.Вставить("Серия");
	Результат.Вставить("Номер");
	Результат.Вставить("Дата");
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаВидыДеятельности()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КодОКВЭД",          Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОКВЭД", Новый ОписаниеТипов("Строка"));
	
	// ЭтоОКВЭД2 = Истина - код в строке по классификатору редакции 2, Ложь - редакции 1.
	Результат.Колонки.Добавить("ЭтоОКВЭД2",         Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаЛицензии()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Лицензия",         Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеЛицензии", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаИзмененияВРеестре()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ДатаИзменения",        Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ГосударственныйОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ОписаниеИзменения",    Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПодразделения()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОписаниеПодразделения", Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизации()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН",                     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаОрганизацииГдеУчредитель()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаУчредители()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Учредитель", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Результат.Колонки.Добавить("ОрганизацииГдеРуководитель");
	Результат.Колонки.Добавить("ОрганизацииГдеРуководительПоФИО", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОрганизацииГдеУчредитель");
	Результат.Колонки.Добавить("ОрганизацииГдеУчредительПоФИО", Новый ОписаниеТипов("Булево"));
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаБухгалтерскаяОтчетность()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Год"                , Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КодВалютыОтчетности", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ТипОтчетности"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Показатели"); // см. НоваяТаблицаБухгалтерскаяОтчетностьПоказатели
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаБухгалтерскаяОтчетностьПоказатели()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	Возврат Результат;

КонецФункции 

Функция НоваяТаблицаПроверкиКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Идентификатор"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПлановаяПроверка"   , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ПериодПроверки"     , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ДатаПроверки"       , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КонтролирующийОрган", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("АдресПроверки"      , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЦельПроверки"       , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Длительность"       , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Результат"          , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Нарушения"); // см. НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами
	Возврат Результат;

КонецФункции

Функция НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерНарушения", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Нарушение",      Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НарушенныйАкт",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Предписание",    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Исполнение",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область ЗаполнениеРеквизитов

Процедура ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, Реквизиты)
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	Если ОбъектXDTO.СвНаимЮЛ.ОПФ <> Неопределено Тогда
		ПравоваяФормаОбъекта = Строка(ОбъектXDTO.СвНаимЮЛ.ОПФ.ПолнНаимОПФ);
		Реквизиты.ПравоваяФорма = ПравоваяФормаОбъекта;
		Если ПравовыеФормы.Найти(ПравоваяФормаОбъекта) = Неопределено Тогда
			ПравовыеФормы.Добавить(ПравоваяФормаОбъекта);
		КонецЕсли;
	КонецЕсли;
	
	Реквизиты.НаименованиеПолное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛПолн;
	Для каждого ПравоваяФорма Из ПравовыеФормы Цикл
		Если ВРег(ПравоваяФорма) = ВРег(Лев(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
			Реквизиты.НаименованиеПолное = ПравоваяФорма + Сред(Реквизиты.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты.НаименованиеСокращенное = ОбъектXDTO.СвНаимЮЛ.НаимЮЛСокр;
	Если НЕ ЗначениеЗаполнено(Реквизиты.НаименованиеСокращенное) 
		ИЛИ НЕ ЗначениеЗаполнено(СтрЗаменить(Реквизиты.НаименованиеСокращенное, "-", "")) 
		ИЛИ ВРег(Реквизиты.НаименованиеСокращенное) = "НЕТ" Тогда
		Реквизиты.НаименованиеСокращенное = Реквизиты.НаименованиеПолное;
	КонецЕсли;
	
	Реквизиты.Наименование = Реквизиты.НаименованиеСокращенное;
	Поз = СтрНайти(Реквизиты.Наименование, """");
	Если Поз > 0 И Поз <= 10 Тогда
		Реквизиты.Наименование = СокрП(Сред(Реквизиты.Наименование, Поз)) + " " + СокрП(Лев(Реквизиты.Наименование, Поз-1));
		Реквизиты.Наименование = СтрЗаменить(Реквизиты.Наименование, """", "");
	КонецЕсли;
	Реквизиты.Наименование = СокрЛП(Реквизиты.Наименование);
	
КонецПроцедуры

Процедура ЗаполнитьОбъектXDTOКонтактнойИнформации(
	Фабрика,
	Объект,
	ИсходныйОбъект,
	ПутьРодительскогоСвойства = "<Корень>",
	ОтключитьПреобразование = Ложь)
	
	Для каждого СвойствоИсходногоОбъекта Из ИсходныйОбъект.Свойства() Цикл
		
		ПутьТекущегоСвойства = ПутьРодительскогоСвойства + "." + СвойствоИсходногоОбъекта.Имя;
		
		СвойствоОбъекта = Объект.Свойства().Получить(СвойствоИсходногоОбъекта.Имя);
		Если СвойствоОбъекта <> Неопределено Тогда
			
			ЗначениеСвойства = ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя];
			Если ЗначениеСвойства = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
				
				ОтключитьПреобразованиеВложенныхЗначений =
					(ПутьТекущегоСвойства = "<Корень>.ДопАдрЭл[].Номер"
						И (ЗначениеСвойства.Тип = "1080"
						Или ЗначениеСвойства.Тип = "1090"
						Или ЗначениеСвойства.Тип = "Другое"));
				
				Объект[СвойствоОбъекта.Имя] = Фабрика.Создать(СвойствоОбъекта.Тип);
				ЗаполнитьОбъектXDTOКонтактнойИнформации(
					Фабрика,
					Объект[СвойствоОбъекта.Имя],
					ИсходныйОбъект[СвойствоИсходногоОбъекта.Имя],
					ПутьТекущегоСвойства,
					ОтключитьПреобразованиеВложенныхЗначений);
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
				
				Для Каждого ИсходныйЭлемент Из ЗначениеСвойства Цикл
					
					Элемент = Фабрика.Создать(СвойствоОбъекта.Тип);
					ЗаполнитьОбъектXDTOКонтактнойИнформации(Фабрика, Элемент, ИсходныйЭлемент, ПутьТекущегоСвойства + "[]", Ложь);
					Объект[СвойствоОбъекта.Имя].Добавить(Элемент);
					
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
				
				Если ОтключитьПреобразование Тогда
					Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				Иначе
					МассивСлов      = СтрРазделить(ЗначениеСвойства, " ", Ложь);
					МаксИндексСлова = ?(МассивСлов.Количество() = 1, 0, МассивСлов.Количество() - 2);
					Для ИндексСлова = 0 По МаксИндексСлова Цикл
						Если ЭтоЗаписьЧисловогоЭлементаАдреса(МассивСлов[ИндексСлова]) Тогда
							МассивСлов[ИндексСлова] = ВРег(МассивСлов[ИндексСлова]);
						Иначе
							МассивЧастейСлова = СтрРазделить(МассивСлов[ИндексСлова], ".", Истина);
							Для ИндексЧастиСлова = 0 По МассивЧастейСлова.Количество() - 1 Цикл
								МассивЧастейСлова[ИндексЧастиСлова] = ТРег(МассивЧастейСлова[ИндексЧастиСлова]);
							КонецЦикла;
							МассивСлов[ИндексСлова] = СтрСоединить(МассивЧастейСлова, ".");
						КонецЕсли;
					КонецЦикла;
					Объект[СвойствоОбъекта.Имя] = СтрСоединить(МассивСлов, " ");
				КонецЕсли;
				
			Иначе
				
				Объект[СвойствоОбъекта.Имя] = ЗначениеСвойства;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоЗаписьЧисловогоЭлементаАдреса(Знач ПроверяемаяСтрока)

	ЧастиРимскихЧисел = "IVXLCDM-(),0123456789";
	ДлинаСтроки = СтрДлина(ПроверяемаяСтрока);
	ПроверяемаяСтрока = ВРег(ПроверяемаяСтрока);
	
	Для НомерЗнака = 1 По ДлинаСтроки Цикл
		Если СтрНайти(ЧастиРимскихЧисел, Сред(ПроверяемаяСтрока, НомерЗнака, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Процедура ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(Объект, АдресныеСокращения = Неопределено)
	
	Если АдресныеСокращения = Неопределено Тогда
		
		АдресныеСокращенияСоответствие = АдресныйКлассификатор.СокращенияАдресныхОбъектов(Новый Массив);
		ТипСтрока = Новый ОписаниеТипов("Строка");
		АдресныеСокращения = Новый ТаблицаЗначений;
		АдресныеСокращения.Колонки.Добавить("АдресныйОбъект", ТипСтрока);
		АдресныеСокращения.Колонки.Добавить("СокращениеОбъекта", ТипСтрока);
		АдресныеСокращения.Колонки.Добавить("ДлинаПредставленияОбъекта",
			Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный)));
		Для Каждого КлючЗначение Из АдресныеСокращенияСоответствие Цикл
			СтрокаСокращение = АдресныеСокращения.Добавить();
			СтрокаСокращение.АдресныйОбъект    = ВРег(КлючЗначение.Ключ);
			СтрокаСокращение.СокращениеОбъекта = КлючЗначение.Значение;
			СтрокаСокращение.ДлинаПредставленияОбъекта = СтрДлина(КлючЗначение.Ключ);
		КонецЦикла;
		
		// Сортировка по убыванию длины для исключения
		// включения адресных объектов друг в друга.
		АдресныеСокращения.Сортировать("ДлинаПредставленияОбъекта Убыв");
		
	КонецЕсли;
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЗначениеСвойства = Объект[СвойствоОбъекта.Имя];
		Если ТипЗнч(ЗначениеСвойства) = Тип("Строка") Тогда
			
			ЗначениеСвойства = СокрЛП(ЗначениеСвойства);
			ДваПробела = "  ";
			Пока СтрНайти(ЗначениеСвойства, ДваПробела) > 0 Цикл
				// Удаление лишних разделителей.
				ЗначениеСвойства = СтрЗаменить(ЗначениеСвойства, ДваПробела, " ");
			КонецЦикла;
			
			ЗначениеВРег = ВРег(ЗначениеСвойства);
			ДлинаЗначения = СтрДлина(ЗначениеСвойства);
			Для Итератор = 0 По АдресныеСокращения.Количество() - 1 Цикл
				СтрокаСокращение = АдресныеСокращения[Итератор];
				Если (ДлинаЗначения > СтрокаСокращение.ДлинаПредставленияОбъекта
					И Сред(ЗначениеСвойства, ДлинаЗначения - СтрокаСокращение.ДлинаПредставленияОбъекта, 1) = " " // Должен быть пробел перед адресным объектом.
					Или ДлинаЗначения = СтрокаСокращение.ДлинаПредставленияОбъекта)
					И Прав(ЗначениеВРег, СтрокаСокращение.ДлинаПредставленияОбъекта) = СтрокаСокращение.АдресныйОбъект Тогда
					Объект[СвойствоОбъекта.Имя] = Лев(ЗначениеСвойства, ДлинаЗначения - СтрокаСокращение.ДлинаПредставленияОбъекта)
							+ СтрокаСокращение.СокращениеОбъекта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(ЗначениеСвойства, АдресныеСокращения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУчетНО <> Неопределено
		И ОбъектXDTO.СвУчетНО.СвНО <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		
		Реквизиты.РегистрацияВНалоговомОргане.Код             = ОбъектXDTO.СвУчетНО.СвНО.КодНО;
		Реквизиты.РегистрацияВНалоговомОргане.Наименование    = ОбъектXDTO.СвУчетНО.СвНО.НаимНО;
		Реквизиты.РегистрацияВНалоговомОргане.ДатаРегистрации = ОбъектXDTO.СвУчетНО.ДатаПостУч;
		
		Если ОбъектXDTO.Свойства().Получить("СвАдрес") <> Неопределено // Адрес есть только у юридических лиц.
			И ОбъектXDTO.СвАдрес <> Неопределено 
			И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
			
			Адрес = ОбъектXDTO.СвАдрес.Адрес;
			Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = Адрес.Состав.ОКТМО;
			Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = Адрес.Состав.ОКАТО;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭД(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		СписокОКВЭД = ОбъектXDTO.СвОКВЭД;
		КодОКВЭД  = "";
		ДатаОКВЭД = '00010101';
		ЭтоОКВЭД2 = Ложь;
		Для Каждого ЭлементОКВЭД Из СписокОКВЭД Цикл
			Если ЭлементОКВЭД.ДатаНачДейств > ДатаОКВЭД
				И ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				ДатаОКВЭД = ЭлементОКВЭД.ДатаНачДейств;
				КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
				ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
					И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
			КонецЕсли;
		КонецЦикла;
		Реквизиты.КодОКВЭД  = КодОКВЭД;
		Реквизиты.ЭтоОКВЭД2 = ЭтоОКВЭД2;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОВидахДеятельности(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвОКВЭД <> Неопределено Тогда
		
		// Сначала добавляем строку с основным кодом.
		Для Каждого ЭлементОКВЭД Из ОбъектXDTO.СвОКВЭД Цикл
			Если ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				НоваяСтрока = ИнформацияОСвязях.ВидыДеятельности.Добавить();
				НоваяСтрока.КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
				НоваяСтрока.ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
					И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
				Прервать;
			КонецЕсли;
		КонецЦикла;
		// Затем добавляем строки с неосновными кодами.
		Для Каждого ЭлементОКВЭД Из ОбъектXDTO.СвОКВЭД Цикл
			Если ЭлементОКВЭД.ПрОснДоп = "1" Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ИнформацияОСвязях.ВидыДеятельности.Добавить();
			НоваяСтрока.КодОКВЭД  = ЭлементОКВЭД.КодОКВЭД;
			НоваяСтрока.ЭтоОКВЭД2 = ЭлементОКВЭД.Свойства().Получить("ПрВерсОКВЭД") <> Неопределено
				И ЭлементОКВЭД.ПрВерсОКВЭД = "2014";
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЛицензиях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвЛицензия <> Неопределено Тогда
		
		Для каждого СтрокаЛицензии Из ОбъектXDTO.СвЛицензия Цикл
			НоваяСтрока = ИнформацияОСвязях.Лицензии.Добавить();
			НоваяСтрока.Лицензия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 от %2'"),
				СтрокаЛицензии.НомЛиц,
				Формат(СтрокаЛицензии.ДатаЛиц, "ДЛФ=D"));
			Если СтрокаЛицензии.НаимЛицВидДеят <> Неопределено Тогда
				ОписаниеЛицензии = "";
				Для каждого СтрокаОписания Из СтрокаЛицензии.НаимЛицВидДеят Цикл
					ОписаниеЛицензии = ОписаниеЛицензии + ?(ПустаяСтрока(ОписаниеЛицензии), "", ", ") + СтрокаОписания;
				КонецЦикла;
				НоваяСтрока.ОписаниеЛицензии = ОписаниеЛицензии;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПодразделениях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвПодразд <> Неопределено Тогда
		
		ПространствоИменКИ = ПространствоИменКИ();
		ПространствоИменАдресов = РаботаСАдресами.ПространствоИмен();
	
		Для каждого СтрокаПодразделения Из ОбъектXDTO.СвПодразд Цикл
			
			ОписаниеПодразделения = "";
			Если СтрокаПодразделения.АдрМНРФ <> Неопределено 
				И СтрокаПодразделения.АдрМНРФ.Состав <> Неопределено Тогда
				
				// Получение только представления адреса.
				АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
				ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, СтрокаПодразделения.АдрМНРФ.Состав);
				КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
				КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
				КИ.Состав.Страна = ОбъектXDTO.СвАдрес.Адрес.Страна;
				КИ.Состав.Состав = АдресРФ_КИ;
				КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(КИ,
					Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
		
				ОписаниеПодразделения = КИ.Представление;
				
			ИначеЕсли СтрокаПодразделения.АдрМНИн <> Неопределено Тогда
				
				ОписаниеПодразделения = СтрокаПодразделения.АдрМНИн.АдрИн;
				
			ИначеЕсли СтрокаПодразделения.НаимПолн <> Неопределено Тогда
				
				ОписаниеПодразделения = СтрокаПодразделения.НаимПолн;
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОписаниеПодразделения) Тогда
				НоваяСтрока = ИнформацияОСвязях.Подразделения.Добавить();
				НоваяСтрока.ОписаниеПодразделения = ОписаниеПодразделения;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбИзмененияхВРеестре(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвЗапДейств <> Неопределено Тогда
		
		Для каждого СтрокаИзменения Из ОбъектXDTO.СвЗапДейств Цикл
			НоваяСтрока = ИнформацияОСвязях.ИзмененияВРеестре.Добавить();
			НоваяСтрока.ДатаИзменения = СтрокаИзменения.ДатаЗап;
			Если СтрокаИзменения.СвРегОрг <> Неопределено Тогда
				НоваяСтрока.ГосударственныйОрган = СтрокаИзменения.СвРегОрг.НаимНО;
			КонецЕсли;
			ОписаниеИзменения = "";
			Если СтрокаИзменения.ВидЗап <> Неопределено Тогда
				ОписаниеИзменения = ОписаниеИзменения + СтрокаИзменения.ВидЗап.НаимВидЗап;
			КонецЕсли;
			Если СтрокаИзменения.СвСвид <> Неопределено Тогда
				Для каждого СтрокаСвидетельства Из СтрокаИзменения.СвСвид Цикл
					ОписаниеИзменения = ОписаниеИзменения + ?(ПустаяСтрока(ОписаниеИзменения), "", Символы.ПС)
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выдано свидетельство %1 %2'"), 
						СтрокаСвидетельства.Серия,
						СтрокаСвидетельства.Номер);
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока.ОписаниеИзменения = ОписаниеИзменения;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОРуководителе(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.СвУправлДеятСвязЮЛ <> Неопределено
		И ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ <> Неопределено Тогда
		Если ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ.Количество() = 1 Тогда
			ПолучитьДанныеОРуководителеИНомерТелефона(ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ[0].СведДолжнФЛ, ИнформацияОСвязях, Ложь);
			ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
				ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ[0],
				ИнформацияОСвязях,
				ИнформацияОСвязях.ИНН,
				ИнформацияОСвязях.Руководитель.ИНН);
		Иначе
			Для каждого СтрокаРуководителя Из ОбъектXDTO.СвУправлДеятСвязЮЛ.СведДолжнФЛСвязЮЛ Цикл
				
				Если ПолучитьДанныеОРуководителеИНомерТелефона(СтрокаРуководителя.СведДолжнФЛ, ИнформацияОСвязях) Тогда
					ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
						СтрокаРуководителя, 
						ИнформацияОСвязях, 
						ИнформацияОСвязях.ИНН, 
						ИнформацияОСвязях.Руководитель.ИНН);
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчрежденныхФирмах(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвязЮЛПоУчредителю <> Неопределено
		И ОбъектXDTO.СвязЮЛПоУчредителю.СвязЮЛ <> Неопределено Тогда
		
		Для каждого ОбъектXDTOСвязЮЛ Из ОбъектXDTO.СвязЮЛПоУчредителю.СвязЮЛ Цикл
			ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, ИнформацияОСвязях.УчрежденныеФирмы, ИнформацияОСвязях.ИНН);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУчредителях(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвУчредитСвязЮЛ <> Неопределено Тогда
		
		// Учредители - российские юридические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛРосСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛРосСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				СтрокаУчредителя.Учредитель = ДанныеУчредителя.УчрЮЛРос.НаимЮЛПолн;
				СтрокаУчредителя.ИНН = ?(СтрДлина(ДанныеУчредителя.УчрЮЛРос.ИННЮЛ) = 10, ДанныеУчредителя.УчрЮЛРос.ИННЮЛ, "");
				
				Если ДанныеУчредителя.УчрЮЛРос.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрЮЛРос.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрЮЛРос.ДоляУстКап.Процент;
				КонецЕсли;
	
				// Еще организации, где этот учредитель является учредителем.
				
				Если ДанныеУчредителя.СвязЮЛПоУчредителю <> Неопределено
					И ДанныеУчредителя.СвязЮЛПоУчредителю.СвязЮЛ <> Неопределено Тогда
						
					Для каждого ОбъектXDTOСвязЮЛ Из ДанныеУчредителя.СвязЮЛПоУчредителю.СвязЮЛ Цикл
						ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, СтрокаУчредителя.ОрганизацииГдеУчредитель, ИнформацияОСвязях.ИНН);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Учредители - иностранные юридические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛИнСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрЮЛИнСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				Учредитель = ДанныеУчредителя.УчрЮЛИн.НаимЮЛПолн;
				Если ДанныеУчредителя.УчрЮЛИн.СвРегИн <> Неопределено Тогда
					Учредитель = Учредитель + " (" + ДанныеУчредителя.УчрЮЛИн.СвРегИн.НаимСтран + ")";
				КонецЕсли;
				СтрокаУчредителя.Учредитель = Учредитель;
				
				Если ДанныеУчредителя.УчрЮЛИн.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрЮЛИн.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрЮЛИн.ДоляУстКап.Процент;
				КонецЕсли;
	
				// Еще организации, где этот учредитель является учредителем.
				
				Если ДанныеУчредителя.СвязЮЛПоУчредителю <> Неопределено
					И ДанныеУчредителя.СвязЮЛПоУчредителю.СвязЮЛ <> Неопределено Тогда
						
					Для каждого ОбъектXDTOСвязЮЛ Из ДанныеУчредителя.СвязЮЛПоУчредителю.СвязЮЛ Цикл
						ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, СтрокаУчредителя.ОрганизацииГдеУчредитель, ИнформацияОСвязях.ИНН);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Учредители - физические лица.
		
		Если ОбъектXDTO.СвУчредитСвязЮЛ.УчрФЛСвязЮЛ <> Неопределено Тогда
			
			Для каждого ДанныеУчредителя Из ОбъектXDTO.СвУчредитСвязЮЛ.УчрФЛСвязЮЛ Цикл
				
				СтрокаУчредителя = ИнформацияОСвязях.Учредители.Добавить();
				СтрокаУчредителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
				СтрокаУчредителя.ОрганизацииГдеУчредитель   = НоваяТаблицаОрганизацииГдеУчредитель();
				
				Учредитель = НовоеКонтактноеЛицо();
				Если ДанныеУчредителя.УчрФЛ.ФИО <> Неопределено Тогда
					Учредитель.Фамилия  = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Фамилия);
					Учредитель.Имя      = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Имя);
					Учредитель.Отчество = ТРег(ДанныеУчредителя.УчрФЛ.ФИО.Отчество);
					Учредитель.ИНН      = ДанныеУчредителя.УчрФЛ.ИННФЛ;
					Учредитель.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					    НСтр("ru='%1 %2 %3'"),
						Учредитель.Фамилия,
						Учредитель.Имя,
						Учредитель.Отчество));
				КонецЕсли;
				
				СтрокаУчредителя.Учредитель = Учредитель.Представление;
				СтрокаУчредителя.ИНН = ?(СтрДлина(Учредитель.ИНН) = 12, Учредитель.ИНН, "");
				
				Если ДанныеУчредителя.УчрФЛ.ДоляУстКап <> Неопределено Тогда
					СтрокаУчредителя.СуммаКапитала   = ДанныеУчредителя.УчрФЛ.ДоляУстКап.НоминСтоим;
					СтрокаУчредителя.ПроцентКапитала = ДанныеУчредителя.УчрФЛ.ДоляУстКап.Процент;
				КонецЕсли;
				
				ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
					ДанныеУчредителя, 
					СтрокаУчредителя, 
					ИнформацияОСвязях.ИНН, 
					СтрокаУчредителя.ИНН);
	
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСвязанныеОрганизацииФизическогоЛица(ДанныеФизЛица, Результат, ИННКонтрагента, ИННФизЛица)

	Если ДанныеФизЛица.СвязЮЛПоПарам <> Неопределено Тогда
		
		// Организации, где это физическое лицо является руководителем.
		
		Если ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоИНН <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоИНН.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоИНН.СвязЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоИНН.СвязЮЛ Цикл
				ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеРуководитель, ИННКонтрагента);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоФИО <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоФИО.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоФИО.СвязЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоДиректоруПоФИО.СвязЮЛ Цикл
				ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеРуководитель, ИННКонтрагента);
			КонецЦикла;
			Результат.ОрганизацииГдеРуководительПоФИО = Истина;
			
		КонецЕсли;
		
		// Организации, где это физическое лицо является учредителем.
		
		Если ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоИНН <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоИНН.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоИНН.СвязЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоИНН.СвязЮЛ Цикл
				ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеУчредитель, ИННКонтрагента);
			КонецЦикла;
			
		ИначеЕсли НЕ ЗначениеЗаполнено(ИННФизЛица)
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоФИО <> Неопределено 
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоФИО.corporationsFound > 0
			И ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоФИО.СвязЮЛ <> Неопределено Тогда
			
			Для каждого ОбъектXDTOСвязЮЛ Из ДанныеФизЛица.СвязЮЛПоПарам.СвязЮЛПоУчредителюПоФИО.СвязЮЛ Цикл
				ЗаполнитьСтрокуОбУчредителе(ОбъектXDTOСвязЮЛ, Результат.ОрганизацииГдеУчредитель, ИННКонтрагента);
			КонецЦикла;
			Результат.ОрганизацииГдеУчредительПоФИО = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУставномКапитале(ОбъектXDTO, ИнформацияОСвязях)
	
	Если ОбъектXDTO.СвУстКап <> Неопределено Тогда
		
		ИнформацияОСвязях.УставныйКапитал = ОбъектXDTO.СвУстКап.СумКап;
		
	ИначеЕсли ИнформацияОСвязях.Учредители.Количество() > 0 Тогда
		
		ИнформацияОСвязях.УставныйКапитал = ИнформацияОСвязях.Учредители.Итог("СуммаКапитала");
		
	Иначе
		
		ИнформацияОСвязях.УставныйКапитал = 0;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено 
		И ОбъектXDTO.СвСтатус_РО.СвСтатус <> Неопределено Тогда
		
		Данные.НаименованиеСтатуса = ОбъектXDTO.СвСтатус_РО.СвСтатус.НаимСтатус;
		Данные.КодСтатуса          = ОбъектXDTO.СвСтатус_РО.СвСтатус.КодСтатус;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОМассовостиАдреса(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.СвязЮЛПоАдресу <> Неопределено
		И ОбъектXDTO.СвязЮЛПоАдресу.СвязЮЛ <> Неопределено Тогда
		
		Для каждого ОбъектXDTOСвязЮЛ Из ОбъектXDTO.СвязЮЛПоАдресу.СвязЮЛ Цикл
			ЗаполнитьСтрокуОбОрганизации(ОбъектXDTOСвязЮЛ, ИнформацияОСвязях.ОрганизацииПоАдресу, ИнформацияОСвязях.ИНН);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИнформациюОБухгалтерскойОтчетности(ОбъектXDTO, ИнформацияОСвязях)

	Если ОбъектXDTO.annualStatement <> Неопределено Тогда
		
		Для каждого СтрокаОтчетности Из ОбъектXDTO.annualStatement Цикл
			
			НоваяСтрока = ИнформацияОСвязях.БухгалтерскаяОтчетность.Добавить();
			НоваяСтрока.Год = СтрокаОтчетности.year;
			НоваяСтрока.КодВалютыОтчетности = СтрокаОтчетности.measure;
			НоваяСтрока.ТипОтчетности       = СтрокаОтчетности.type;
			НоваяСтрока.Показатели          = НоваяТаблицаБухгалтерскаяОтчетностьПоказатели();
			Если СтрокаОтчетности.article <> Неопределено Тогда
				Для каждого СтрокаПоказателя Из СтрокаОтчетности.article Цикл
					НоваяСтрокаПоказателя = НоваяСтрока.Показатели.Добавить();
					НоваяСтрокаПоказателя.Код      = СтрокаПоказателя.code;
					НоваяСтрокаПоказателя.Значение = СтрокаПоказателя.value;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОтчетности.type = "1" Тогда
				// Если в отчетности МП есть заполненные показатели с такими кодами - это обычная отчетность.
				КодыОбычнойОтчетности = СтрРазделить(
					"13103;13203;13403;13503;13603;13703;13104;13204;13404;13504;13604;13704", ";");
				НоваяСтрока.Показатели.Индексы.Добавить("Код");
				Для каждого КодОтчетности Из КодыОбычнойОтчетности Цикл
					СтрокаПоказателя = НоваяСтрока.Показатели.Найти(КодОтчетности, "Код");
					Если СтрокаПоказателя <> Неопределено 
						И СтрокаПоказателя.Значение <> 0 Тогда
						НоваяСтрока.ТипОтчетности = "2";
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПенсионногоФонда(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегПФ <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		
		РегистрационныйНомерПФР = ОбъектXDTO.СвРегПФ.РегНомПФ;
		РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
			Лев(РегистрационныйНомерПФР, 3), Сред(РегистрационныйНомерПФР,4, 3), Прав(РегистрационныйНомерПФР, 6));
		РегистрацияВПФР.РегистрационныйНомерПФР = РегистрационныйНомерПФР;
		Если ОбъектXDTO.СвРегПФ.СвОргПФ <> Неопределено Тогда
			КодОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.КодПФ;
			КодОрганаПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(КодОрганаПФР, 3), Прав(КодОрганаПФР, 3));
			РегистрацияВПФР.КодОрганаПФР          = КодОрганаПФР;
			РегистрацияВПФР.НаименованиеОрганаПФР = ОбъектXDTO.СвРегПФ.СвОргПФ.НаимПФ;
		КонецЕсли;
		РегистрацияВПФР.ДатаРегистрации = ОбъектXDTO.СвРегПФ.ДатаРег;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвРегФСС <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		
		Если СтрДлина(ОбъектXDTO.СвРегФСС.РегНомФСС) <= 10 Тогда
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(ОбъектXDTO.СвРегФСС.РегНомФСС);
			РегистрацияВФСС.КодПодчиненности        = "";
		Иначе
			РегистрацияВФСС.РегистрационныйНомерФСС = СокрЛП(Лев(ОбъектXDTO.СвРегФСС.РегНомФСС, 10));
			РегистрацияВФСС.КодПодчиненности        = СокрЛП(Сред(ОбъектXDTO.СвРегФСС.РегНомФСС, 11));
			Если СтрДлина(РегистрацияВФСС.КодПодчиненности) <> 5 Тогда
				РегистрацияВФСС.КодПодчиненности = "";
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектXDTO.СвРегФСС.СвОргФСС <> Неопределено Тогда
			РегистрацияВФСС.КодОрганаФСС            = ОбъектXDTO.СвРегФСС.СвОргФСС.КодФСС;
			РегистрацияВФСС.НаименованиеОрганаФСС   = ОбъектXDTO.СвРегФСС.СвОргФСС.НаимФСС;
		КонецЕсли;
		РегистрацияВФСС.ДатаРегистрации = ОбъектXDTO.СвРегФСС.ДатаРег;
		
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСвидетельствоОРегистрации(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвЗапДейств <> Неопределено Тогда
		
		Свидетельство = НовоеСвидетельствоОРегистрации();
		Свидетельство.Дата = '00010101';
		Для Каждого Запись Из ОбъектXDTO.СвЗапДейств Цикл
			Для Каждого ЗаписьСвидетельства Из Запись.СвСвид Цикл
				Если ЗначениеЗаполнено(ЗаписьСвидетельства.ДатаЗап) Тогда
					ДатаЗап = ЗаписьСвидетельства.ДатаЗап;
				ИначеЕсли ЗначениеЗаполнено(Запись.ДатаЗап) Тогда
					ДатаЗап = Запись.ДатаЗап;
				Иначе
					ДатаЗап = '00010101';
				КонецЕсли;
				Если ДатаЗап > Свидетельство.Дата Тогда
					Свидетельство.Дата  = ДатаЗап;
					Свидетельство.Серия = ЗаписьСвидетельства.Серия;
					Свидетельство.Номер = Прав("000000000" + ЗаписьСвидетельства.Номер, 9);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Свидетельство.Дата > '00010101' Тогда
			Реквизиты.СвидетельствоОРегистрации = Свидетельство;
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРеквизитовПредпринимателя(ОбъектXDTO, Реквизиты)
	
	Если ТипЗнч(ОбъектXDTO.ИсторияРеквизитовИП) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияРеквизитовXDTO = ОбъектXDTO.ИсторияРеквизитовИП;
	ИсторияРеквизитов     = Реквизиты.ИсторияРеквизитов;
	
	ЗаполнитьИсторияФИО(ИсторияРеквизитовXDTO.СвФИО, ИсторияРеквизитов.ФИО);
	ЗаполнитьИсторияГражданство(ИсторияРеквизитовXDTO.СвГражд, ИсторияРеквизитов.Гражданство);
	ЗаполнитьИсторияОГРН(ИсторияРеквизитовXDTO.ОГРН, ИсторияРеквизитов.ОГРН);
	
КонецПроцедуры

Процедура ЗаполнитьИсторияФИО(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		Если ЭлементСпискаXDTO.Фамилия <> Неопределено Тогда
			НоваяСтрока.Фамилия = ТРег(ЭлементСпискаXDTO.Фамилия.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.Имя <> Неопределено Тогда
			НоваяСтрока.Имя = ТРег(ЭлементСпискаXDTO.Имя.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.Отчество <> Неопределено Тогда
			НоваяСтрока.Отчество = ТРег(ЭлементСпискаXDTO.Отчество.value);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияГражданство(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		Если ЭлементСпискаXDTO.ОКСМ <> Неопределено Тогда
			НоваяСтрока.КодСтраныГражданства = ЭлементСпискаXDTO.ОКСМ.value;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияОГРН(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ЭлементСпискаXDTO.from;
		НоваяСтрока.Значение = ЭлементСпискаXDTO.value;
		НоваяСтрока.Статус             = НовыйИсторияСтатусПредпринимателя();
		
		Если ЭлементСпискаXDTO.ВидИП <> Неопределено Тогда
			НоваяСтрока.ВидПредпринимателя = НовыйИсторияВидПредпринимателя();
			НоваяСтрока.ВидПредпринимателя.Дата = ЭлементСпискаXDTO.ВидИП.from;
			Если ЭлементСпискаXDTO.ВидИП.Код <> Неопределено Тогда
				НоваяСтрока.ВидПредпринимателя.Код = ЭлементСпискаXDTO.ВидИП.Код.value;
			КонецЕсли;
			Если ЭлементСпискаXDTO.ВидИП.Наим <> Неопределено Тогда
				НоваяСтрока.ВидПредпринимателя.Наименование = ЭлементСпискаXDTO.ВидИП.Наим.value;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементСпискаXDTO.Статус <> Неопределено Тогда
			НоваяСтрока.Статус = НовыйИсторияСтатусПредпринимателя();
			НоваяСтрока.Статус.Дата = ЭлементСпискаXDTO.Статус.from;
			Если ЭлементСпискаXDTO.Статус.Код <> Неопределено Тогда
				НоваяСтрока.Статус.Код = ЭлементСпискаXDTO.Статус.Код.value;
			КонецЕсли;
			Если ЭлементСпискаXDTO.Статус.Наим <> Неопределено Тогда
				НоваяСтрока.Статус.Наименование = ЭлементСпискаXDTO.Статус.Наим.value;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЮридическийАдрес(ОбъектXDTO, Реквизиты, Фабрика, АдресныеСокращения)
	
	Если ОбъектXDTO.СвАдрес <> Неопределено 
		И ОбъектXDTO.СвАдрес.Адрес <> Неопределено Тогда
		
		Реквизиты.ЮридическийАдрес = АдресКИ(ОбъектXDTO.СвАдрес.Адрес, Фабрика, АдресныеСокращения);
		Реквизиты.ЮридическийАдрес.Вставить("Корректный", ОбъектXDTO.СвАдрес.validAddress);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АдресКИ(АдресXDTO, Фабрика, АдресныеСокращения)
	
	ПространствоИменКИ      = ПространствоИменКИ();
	ПространствоИменАдресов = РаботаСАдресами.ПространствоИмен();
	
	АдресРФ_КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменАдресов, "АдресРФ"));
	
	ЗаменитьПолныеНаименованияАдресныхОбъектовСокращенными(АдресXDTO.Состав);
	ЗаполнитьОбъектXDTOКонтактнойИнформации(ФабрикаXDTO, АдресРФ_КИ, АдресXDTO.Состав);
	
	КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
	КИ.Состав        = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "Адрес"));
	КИ.Состав.Страна = АдресXDTO.Страна;
	КИ.Состав.Состав = АдресРФ_КИ;
	КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		КИ,
		Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес));
	
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		КИ,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	Результат.Представление = КИ.Представление;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРуководителяИНомерТелефона(ОбъектXDTO, Реквизиты)
	
	Если ОбъектXDTO.СвУправлДеят <> Неопределено
		И ОбъектXDTO.СвУправлДеят.СведДолжнФЛ <> Неопределено Тогда
		Если ОбъектXDTO.СвУправлДеят.СведДолжнФЛ.Количество() = 1 Тогда
			ПолучитьДанныеОРуководителеИНомерТелефона(ОбъектXDTO.СвУправлДеят.СведДолжнФЛ[0], Реквизиты, Ложь);
		Иначе
			Для каждого СведенияОДолжности Из ОбъектXDTO.СвУправлДеят.СведДолжнФЛ Цикл
				Если ПолучитьДанныеОРуководителеИНомерТелефона(СведенияОДолжности, Реквизиты) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсториюРеквизитовЮридическогоЛица(ОбъектXDTO, Реквизиты, Фабрика, АдресныеСокращения)
	
	Если ТипЗнч(ОбъектXDTO.ИсторияРеквизитовЮЛ) <> Тип("ОбъектXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияРеквизитовXDTO = ОбъектXDTO.ИсторияРеквизитовЮЛ;
	ИсторияРеквизитов     = Реквизиты.ИсторияРеквизитов;
	ЗаполнитьИсторияКПП(ИсторияРеквизитовXDTO.кпп, ИсторияРеквизитов.КПП);
	ЗаполнитьИсторияНаименование(ИсторияРеквизитовXDTO.СвНаимЮЛ, ИсторияРеквизитов.Наименование);
	ЗаполнитьИсторияАдрес(ИсторияРеквизитовXDTO.СвАдрес, ИсторияРеквизитов.Адрес, Фабрика, АдресныеСокращения);
	ЗаполнитьИсторияСтатус(ИсторияРеквизитовXDTO.СвСтатус, ИсторияРеквизитов.Статус);
	ЗаполнитьИсторияРеквизитыДиректора(ИсторияРеквизитовXDTO.РеквизитыДиректора, ИсторияРеквизитов.РеквизитыДиректора);
	
КонецПроцедуры

Процедура ЗаполнитьИсторияКПП(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ЭлементСпискаXDTO.from;
		НоваяСтрока.Значение = ЭлементСпискаXDTO.value;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияНаименование(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	ПравовыеФормы = Новый Массив;
	ПравовыеФормы.Добавить("Общество с ограниченной ответственностью");
	ПравовыеФормы.Добавить("Закрытое акционерное общество");
	ПравовыеФормы.Добавить("Открытое акционерное общество");
	ПравовыеФормы.Добавить("Публичное акционерное общество");
	ПравовыеФормы.Добавить("Акционерное общество");
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		Если ЭлементСпискаXDTO.НаимЮЛПолн <> Неопределено Тогда
			НоваяСтрока.НаименованиеПолное = ЭлементСпискаXDTO.НаимЮЛПолн.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.НаимЮЛСокр <> Неопределено Тогда
			НоваяСтрока.НаименованиеСокращенное = ЭлементСпискаXDTO.НаимЮЛСокр.value;
		КонецЕсли;
		
		// Преобразование полного наименования.
		Для Каждого ПравоваяФорма Из ПравовыеФормы Цикл
			Если ВРег(ПравоваяФорма) = ВРег(Лев(НоваяСтрока.НаименованиеПолное, СтрДлина(ПравоваяФорма))) Тогда
				НоваяСтрока.НаименованиеПолное = ПравоваяФорма + Сред(НоваяСтрока.НаименованиеПолное, СтрДлина(ПравоваяФорма) + 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Преобразование сокращенного наименования.
		Если Не ЗначениеЗаполнено(НоваяСтрока.НаименованиеСокращенное)
			Или Не ЗначениеЗаполнено(СтрЗаменить(НоваяСтрока.НаименованиеСокращенное, "-", ""))
			Или ВРег(НоваяСтрока.НаименованиеСокращенное) = "НЕТ" Тогда
			НоваяСтрока.НаименованиеСокращенное = НоваяСтрока.НаименованиеПолное;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияАдрес(ОбъектСписокXDTO, Таблица, Фабрика, АдресныеСокращения)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		
		АдресСтруктура = АдресКИ(ЭлементСпискаXDTO.Адрес, Фабрика, АдресныеСокращения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АдресСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияСтатус(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		
		Если ЭлементСпискаXDTO.Код <> Неопределено Тогда
			НоваяСтрока.Код = ЭлементСпискаXDTO.Код.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.Наименование <> Неопределено Тогда
			НоваяСтрока.Наименование = ЭлементСпискаXDTO.Наименование.value;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияРеквизитыДиректора(ОбъектСписокXDTO, Таблица)
	
	Если ТипЗнч(ОбъектСписокXDTO) <> Тип("СписокXDTO") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСпискаXDTO Из ОбъектСписокXDTO Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ЭлементСпискаXDTO.from;
		НоваяСтрока.ДатаОкончания = ЭлементСпискаXDTO.to;
		НоваяСтрока.ИНН = ЭлементСпискаXDTO.ИНН;
		
		Если ЭлементСпискаXDTO.фамилия <> Неопределено Тогда
			НоваяСтрока.Фамилия = ТРег(ЭлементСпискаXDTO.фамилия.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.имя <> Неопределено Тогда
			НоваяСтрока.Имя = ТРег(ЭлементСпискаXDTO.имя.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.отчество <> Неопределено Тогда
			НоваяСтрока.Отчество = ТРег(ЭлементСпискаXDTO.отчество.value);
		КонецЕсли;
		Если ЭлементСпискаXDTO.видДолжности <> Неопределено Тогда
			НоваяСтрока.ВидДолжности = ЭлементСпискаXDTO.видДолжности.value;
		КонецЕсли;
		Если ЭлементСпискаXDTO.наименованиеДолжности <> Неопределено Тогда
			НоваяСтрока.НаименованиеДолжности = ПредложениеСЗаглавнойБуквы(ЭлементСпискаXDTO.наименованиеДолжности.value);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеОРуководителеИНомерТелефона(СведенияОДолжности, Данные, ПроверитьДолжность = Истина)
	
	Если ПроверитьДолжность Тогда
		Если СтрНайти(ВРег(СведенияОДолжности.НаимВидДолжн), "РУКОВОДИТЕЛЬ") = 0 
			ИЛИ СведенияОДолжности.ФИО = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Руководитель
	СтруктураКИ = НовоеКонтактноеЛицо();
	СтруктураКИ.Фамилия    = ТРег(СведенияОДолжности.ФИО.Фамилия);
	СтруктураКИ.Имя        = ТРег(СведенияОДолжности.ФИО.Имя);
	СтруктураКИ.Отчество   = ТРег(СведенияОДолжности.ФИО.Отчество);
	СтруктураКИ.Должность  = ПредложениеСЗаглавнойБуквы(СведенияОДолжности.НаимДолжн);
	СтруктураКИ.ИНН        = СведенияОДолжности.ИННФл;
	СтруктураКИ.ДатаЗаписи = СведенияОДолжности.ДатаНачДейств;
	СтруктураКИ.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"),
		СтруктураКИ.Фамилия,
		СтруктураКИ.Имя,
		СтруктураКИ.Отчество));
	
	Данные.Руководитель = СтруктураКИ;
	
	// Номер телефона.
	Если ЗначениеЗаполнено(СведенияОДолжности.НомТел) Тогда
		ПространствоИменКИ = ПространствоИменКИ();
		КИ = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "КонтактнаяИнформация"));
		КИ.Состав = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(ПространствоИменКИ, "НомерТелефона"));
		Если Лев(СведенияОДолжности.НомТел, 1) = "(" Тогда
			КонецКодаГорода     = СтрНайти(СведенияОДолжности.НомТел, ")");
			КИ.Состав.КодГорода = Сред(СведенияОДолжности.НомТел, 2, КонецКодаГорода - 2);
			КИ.Состав.Номер     = Сред(СведенияОДолжности.НомТел, КонецКодаГорода + 1);
		Иначе
			КИ.Состав.Номер = СведенияОДолжности.НомТел;
		КонецЕсли;
		КИ.Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
			КИ,
			Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон));
		СтруктураКИ = НоваяКонтактнаяИнформация();
		СтруктураКИ.КонтактнаяИнформация =
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
				КИ,
				Перечисления.ТипыКонтактнойИнформации.Телефон);
		СериализацияОбъектаXDTO(КИ);
		СтруктураКИ.Представление = КИ.Представление;
		
		Данные.Телефон = СтруктураКИ;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьСтрокуОбОрганизации(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента)

	Если ЗначениеЗаполнено(ОбъектXDTO.ИНН)
		И (ОбъектXDTO.ИНН = ИННКонтрагента
		ИЛИ ТаблицаДанных.Найти(ОбъектXDTO.ИНН, "ИНН") <> Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыЮЛ = НовыеРеквизитыЮридическогоЛица();
	ЗаполнитьНаименованияЮридическогоЛица(ОбъектXDTO, РеквизитыЮЛ);
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.НаименованиеОрганизации = РеквизитыЮЛ.НаименованиеСокращенное;
	НоваяСтрока.ИНН = ?(СтрДлина(ОбъектXDTO.ИНН) = 10, ОбъектXDTO.ИНН, "");
	ЗаполнитьИнформациюОСтатусе(ОбъектXDTO, НоваяСтрока);
	
	Возврат НоваяСтрока;

КонецФункции

Процедура ЗаполнитьСтрокуОбУчредителе(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента)
	
	НоваяСтрока = ЗаполнитьСтрокуОбОрганизации(ОбъектXDTO, ТаблицаДанных, ИННКонтрагента);
	
	Если НоваяСтрока <> Неопределено
		И ОбъектXDTO.ДоляУстКап <> Неопределено Тогда
		НоваяСтрока.СуммаКапитала   = ОбъектXDTO.ДоляУстКап.НоминСтоим;
		НоваяСтрока.ПроцентКапитала = ОбъектXDTO.ДоляУстКап.Процент;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОПроверкахКонтролирующимиОрганами(
	ОбъектXDTO,
	ИнформацияОПроверках,
	Плановые,
	Внеплановые,
	Завершенные,
	Незавершенные)
	
	Если НЕ Завершенные И НЕ Незавершенные Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоЗавершенные   = Завершенные И НЕ Незавершенные;
	ТолькоНезавершенные = НЕ Завершенные И Незавершенные;
	
	// Внеплановые проверки.
	Если Внеплановые И ОбъектXDTO.InspectionsUnregular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsUnregular294 Цикл
			Если ПроверкиЗаМесяц.InspectionUnregular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionUnregular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					ТаблицаПроверок = ИнформацияОПроверках.Проверки[СтрокаПроверки.INN];
					Если ТаблицаПроверок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаПроверок.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Ложь;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					ДатаКонца  = ?(ЗначениеЗаполнено(СтрокаПроверки.END_DATE), 
						СтрокаПроверки.END_DATE, КонецМесяца(ДатаНачала));
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='с %1 по %2'"), 
						Формат(ДатаНачала, "ДЛФ=D"), Формат(ДатаКонца, "ДЛФ=D"));
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_II), 
						СокрЛП(СтрокаПроверки.ADR_SEC_II), СокрЛП(СтрокаПроверки.ADR_SEC_I));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
								НСтр("ru=';Выявлено %1 нарушение;;Выявлено %1 нарушения;Выявлено %1 нарушений;'"),
								КоличествоНарушений);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Плановые проверки.
	Если Плановые
		И ОбъектXDTO.InspectionsRegular294 <> Неопределено Тогда
		Для каждого ПроверкиЗаМесяц Из ОбъектXDTO.InspectionsRegular294 Цикл
			Если ПроверкиЗаМесяц.InspectionRegular294 <> Неопределено Тогда
				
				ГодПроверки    = ПроверкиЗаМесяц.YEAR;
				МесяцПроверки  = ПроверкиЗаМесяц.MONTH;
				ПериодПроверки = Дата(ГодПроверки, МесяцПроверки, 1);
				
				Для каждого СтрокаПроверки Из ПроверкиЗаМесяц.InspectionRegular294 Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрокаПроверки.KO_NAME) Тогда 
						Продолжить; // Пропускаем записи с пустым контролирующим органом.
					КонецЕсли;
					Завершена = СтрокаПроверки.InspectionResult294 <> Неопределено;
					Если ТолькоЗавершенные И НЕ Завершена
						ИЛИ ТолькоНезавершенные И Завершена Тогда
						Продолжить;
					КонецЕсли;
					
					ТаблицаПроверок = ИнформацияОПроверках.Проверки[СтрокаПроверки.INN];
					Если ТаблицаПроверок = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ТаблицаПроверок.Добавить();
					НоваяСтрока.Идентификатор    = Формат(СтрокаПроверки.ERPID, "ЧГ=");
					НоваяСтрока.ПлановаяПроверка = Истина;
					НоваяСтрока.ПериодПроверки   = ПериодПроверки;
					ДатаНачала = ?(ЗначениеЗаполнено(СтрокаПроверки.START_DATE), 
						СтрокаПроверки.START_DATE, ПериодПроверки);
					Если ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_II) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих дней'"), СтрокаПроверки.DURATION_SEC_II);
					ИначеЕсли ЗначениеЗаполнено(СтрокаПроверки.DURATION_SEC_I) Тогда
						Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 рабочих часов'"), СтрокаПроверки.DURATION_SEC_I);
					Иначе
						Длительность = "";
					КонецЕсли;
					НоваяСтрока.ДатаПроверки = ДатаНачала;
					Если ЗначениеЗаполнено(Длительность) Тогда
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1, %2'"), Формат(ДатаНачала, "ДЛФ=D"), Длительность);
					Иначе
						НоваяСтрока.Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='с %1'"), Формат(ДатаНачала, "ДЛФ=D"));
					КонецЕсли;
					НоваяСтрока.КонтролирующийОрган = СокрЛП(СтрокаПроверки.KO_NAME);
					НоваяСтрока.АдресПроверки = ?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_IV), СокрЛП(СтрокаПроверки.ADR_SEC_IV),
						?(ЗначениеЗаполнено(СтрокаПроверки.ADR_SEC_III), СокрЛП(СтрокаПроверки.ADR_SEC_III), 
							СокрЛП(СтрокаПроверки.ADR_SEC_I)));
					НоваяСтрока.ЦельПроверки = СокрЛП(СтрокаПроверки.INSP_TARGET);
					НоваяСтрока.Нарушения    = НоваяТаблицаНарушенияВыявленныеКонтролирующимиОрганами();
					
					Если Завершена Тогда
						
						Если СтрокаПроверки.InspectionResult294.InspectionViolations294 <> Неопределено Тогда
							Для каждого СтрокаНарушения Из СтрокаПроверки.InspectionResult294.InspectionViolations294 Цикл
								НоваяСтрокаНарушения = НоваяСтрока.Нарушения.Добавить();
								НоваяСтрокаНарушения.НомерНарушения = СтрокаНарушения.Violation_ID;
								НоваяСтрокаНарушения.Нарушение      = СтрокаНарушения.Violation_Note;
								НоваяСтрокаНарушения.НарушенныйАкт  = СтрокаНарушения.Violation_Act;
								НоваяСтрокаНарушения.Предписание    = СтрокаНарушения.Injunction_Note;
								НоваяСтрокаНарушения.Исполнение     = СтрокаНарушения.Injunction_Execution;
							КонецЦикла;
						КонецЕсли;
						
						КоличествоНарушений = НоваяСтрока.Нарушения.Количество();
						Если КоличествоНарушений = 0 Тогда
							НоваяСтрока.Результат = НСтр("ru='Нарушений не выявлено'");
						Иначе
							НоваяСтрока.Нарушения.Сортировать("НомерНарушения");
							НоваяСтрока.Результат = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
								НСтр("ru=';Выявлено %1 нарушение;;Выявлено %1 нарушения;Выявлено %1 нарушений;'"),
								КоличествоНарушений);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КлючЗначение Из ИнформацияОПроверках.Проверки Цикл
		ТаблицаПроверок = КлючЗначение.Значение;
		ТаблицаПроверок.Сортировать("ПериодПроверки,ДатаПроверки,КонтролирующийОрган");
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусеСтруктура(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено 
		И ОбъектXDTO.СвСтатус_РО.СвСтатус <> Неопределено Тогда
		СтатусСтруктура = НовыйДанныеСтатуса();
		СтатусСтруктура.Код = ОбъектXDTO.СвСтатус_РО.СвСтатус.КодСтатус;
		СтатусСтруктура.Наименование = ОбъектXDTO.СвСтатус_РО.СвСтатус.НаимСтатус;
		Данные.Статус = СтатусСтруктура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОРегистрирующемОргане(ОбъектXDTO, Данные)
	
	Если ОбъектXDTO.СвСтатус_РО <> Неопределено
		И ОбъектXDTO.СвСтатус_РО.СвРегОрг <> Неопределено Тогда
		Данные.РегистрирующийОрган = НовыйДанныеРегистрирующегоОргана();
		Данные.РегистрирующийОрган.Код = ОбъектXDTO.СвСтатус_РО.СвРегОрг.КодНО;
		Данные.РегистрирующийОрган.Наименование = ОбъектXDTO.СвСтатус_РО.СвРегОрг.НаимНО;
	КонецЕсли;

КонецПроцедуры

Функция НовыйДанныеСтатуса()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"                , "");
	Результат.Вставить("Наименование"       , "");
	
	Возврат Результат;
	
КонецФункции

Функция НовыйДанныеРегистрирующегоОргана()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ГосударственныеОрганы

Функция ПараметрыСервисаГосударственныеОрганы()
	
	Результат = Новый Структура;
	Результат.Вставить("URL", БазовыйURLСервиса() + "/ws/taxregister/v3?wsdl");
	Результат.Вставить("Имя"                , "TaxWsImpl3Service");
	Результат.Вставить("URIПространстваИмен", "http://ws.taxregister.company1c.com/");
	Результат.Вставить("ИмяТочкиПодключения", "TaxWsImpl3Port");
	
	Возврат Результат;
	
КонецФункции

Функция КодГосударственногоОрганаДляЗапросаРеквизитов(ВидГосударственногоОргана, КодГосударственногоОргана)
	
	Если ВидГосударственногоОргана = "НалоговыйОрган" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 4);
	ИначеЕсли ВидГосударственногоОргана = "ОрганПФР" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 3);
	ИначеЕсли ВидГосударственногоОргана = "ОрганФСС" Тогда
		Возврат Лев(СокрЛП(КодГосударственногоОргана), 4);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Некорректное значение параметра ""ВидГосударственногоОргана"" (%1).'"),
			ВидГосударственногоОргана);
	КонецЕсли;
	
КонецФункции

Функция НовыеРеквизитыГосударственногоОргана()

	РеквизитыГосударственногоОргана = Новый Структура;
	
	// Заполняется на основе данных ФИАС.
	
	РеквизитыГосударственногоОргана.Вставить("Код");
	РеквизитыГосударственногоОргана.Вставить("ИНН");
	РеквизитыГосударственногоОргана.Вставить("КПП");
	РеквизитыГосударственногоОргана.Вставить("Наименование");
	РеквизитыГосударственногоОргана.Вставить("ПолноеНаименование");
	РеквизитыГосударственногоОргана.Вставить("Адрес");
	РеквизитыГосударственногоОргана.Вставить("Телефон");
	РеквизитыГосударственногоОргана.Вставить("ЭлектроннаяПочта");
	РеквизитыГосударственногоОргана.Вставить("ИнтернетСайт");
	РеквизитыГосударственногоОргана.Вставить("ПлатежныеРеквизиты");
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганИП");
	РеквизитыГосударственногоОргана.Вставить("РегистрирующийОрганЮЛ");
	
	РеквизитыГосударственногоОргана.ПлатежныеРеквизиты = НовыеПлатежныеРеквизиты();
	РеквизитыГосударственногоОргана.РегистрирующийОрганИП = НовыеРегистрирующийОрган();
	РеквизитыГосударственногоОргана.РегистрирующийОрганЮЛ = НовыеРегистрирующийОрган();
	
	РеквизитыГосударственногоОргана.Вставить("ОписаниеОшибки");
	
	Возврат РеквизитыГосударственногоОргана;

КонецФункции

Функция НовыеПлатежныеРеквизиты()
	
	ПлатежныеРеквизиты = Новый Структура;
	
	ПлатежныеРеквизиты.Вставить("ПолучательПлатежа");
	ПлатежныеРеквизиты.Вставить("РасчетныйСчет");
	ПлатежныеРеквизиты.Вставить("КоррСчет");
	ПлатежныеРеквизиты.Вставить("БИК");
	
	Возврат ПлатежныеРеквизиты;
	
КонецФункции

Функция НовыеРегистрирующийОрган()
	
	РегистрирующийОрган = Новый Структура;
	
	РегистрирующийОрган.Вставить("Код");
	РегистрирующийОрган.Вставить("Наименование");
	РегистрирующийОрган.Вставить("Адрес");
	РегистрирующийОрган.Вставить("Телефон");
	РегистрирующийОрган.Вставить("Информация");
	
	Возврат РегистрирующийОрган;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
