#Область СлужебныйПрограммныйИнтерфейс

// Возвращает Таблицу соответствия КодовДоходаНДФЛ, Категории начисления (для кода дохода 4800) и Категории дохода
// Если заполнен параметр КодДоходаНДФЛ тип СправочникСсылка.ВидыДоходовНДФЛ, то соответствие будет возвращено только
// для этого кода.
//
Функция СопоставлениеКодовИКатегорийДоходовНДФЛ(КодДоходаНДФЛ = Неопределено) Экспорт
	Возврат УчетФактическиПолученныхДоходовВнутренний.СопоставлениеКодовИКатегорийДоходовНДФЛ(КодДоходаНДФЛ);
КонецФункции

// Формирует временную таблицу "ВТНалогУдержанный" со сведениями об удержанном НДФЛ,
// с заполненной датой выплаты учтенных доходов.
//
// Параметры:
// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, в котором будет создана временная таблица
// ИсточникНДФЛ            - Запрос - источник данных о НДФЛ: запрос с текстом получения таблицы налога и установленными
//                                    параметрами
// ДатаПолученияДохода     - Дата   - уточненная дата получения доходов
// ИмяВТ                   - Строка - имя создаваемой временной таблицы.
//
Процедура СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, ИсточникНДФЛ, ДатаПолученияДохода, ИмяВТ = "ВТНалогУдержанный") Экспорт
	
	ДатаНачалаПереносаДатыПолученияДоходов = ДатаНачалаИспользованияПодсистемы();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ДатаПолученияДохода < ДатаНачалаПереносаДатыПолученияДоходов Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
		|	*
		|ПОМЕСТИТЬ ВТНалогУдержанный
		|ИЗ
		|	#ТаблицаНДФЛ КАК НДФЛВедомостей";
		
		СоздатьВТНалогУдержанныйВыполнитьЗапрос(Запрос, ИсточникНДФЛ, ИмяВТ);
		Возврат;
	КонецЕсли;
	
	// Необходимо уточнить дату получения дохода
	
	СлужебныеТаблицы = Новый Массив;
	
	Запрос.УстановитьПараметр("ДатаПолученияДоходовНДФЛ", НачалоДня(ДатаПолученияДохода));
	Запрос.УстановитьПараметр("ДатаНачалаПереносаДатыПолученияДоходов", ДатаНачалаПереносаДатыПолученияДоходов);
	Запрос.УстановитьПараметр("КатегорииДоходаНДФЛСФиксированнойДатойПолученияДохода", Перечисления.КатегорииДоходовНДФЛ.СФиксированнойДатойПолученияДохода());
	
	ЕстьДоудержанныеНалоги = ЗарплатаКадры.ВТСуществует(МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	Если ЕстьДоудержанныеНалоги Тогда 
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	ВТСписокСотрудников КАК СписокСотрудников
		|ГДЕ
		|	СписокСотрудников.СуммаВыплаты <= 0";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда 
			ЕстьДоудержанныеНалоги = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьДоудержанныеНалоги Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеВедомости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеВедомости.ДокументОснование КАК ДокументОснование,
		|	СУММА(ДанныеВедомости.СуммаВыплаты) КАК СуммаВыплаты
		|ПОМЕСТИТЬ ВТНепереносимыеОснованияНалогов
		|ИЗ
		|	ВТСписокСотрудников КАК ДанныеВедомости
		|ГДЕ
		|	ДанныеВедомости.ДокументОснование <> НЕОПРЕДЕЛЕНО
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеВедомости.ФизическоеЛицо,
		|	ДанныеВедомости.ДокументОснование
		|
		|ИМЕЮЩИЕ
		|	СУММА(ДанныеВедомости.СуммаВыплаты) <= 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
		|	*
		|ПОМЕСТИТЬ ВТПредварительноНалогУдержанный
		|ИЗ
		|	#ТаблицаНДФЛ КАК НДФЛВедомостей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеВедомости.ФизическоеЛицо ЕСТЬ НЕ NULL
		|			ТОГДА НДФЛВедомостей.МесяцНалоговогоПериода
		|		КОГДА НДФЛВедомостей.МесяцНалоговогоПериода < &ДатаНачалаПереносаДатыПолученияДоходов
		|			ТОГДА НДФЛВедомостей.МесяцНалоговогоПериода
		|		КОГДА НДФЛВедомостей.КатегорияДохода В (&КатегорииДоходаНДФЛСФиксированнойДатойПолученияДохода)
		|			ТОГДА НДФЛВедомостей.МесяцНалоговогоПериода
		|		ИНАЧЕ &ДатаПолученияДоходовНДФЛ
		|	КОНЕЦ КАК МесяцНалоговогоПериода,
		|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
		|	*
		|ПОМЕСТИТЬ ВТНалогУдержанный
		|ИЗ
		|	ВТПредварительноНалогУдержанный КАК НДФЛВедомостей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНепереносимыеОснованияНалогов КАК ДанныеВедомости
		|		ПО НДФЛВедомостей.ФизическоеЛицо = ДанныеВедомости.ФизическоеЛицо
		|			И НДФЛВедомостей.ДокументОснование = ДанныеВедомости.ДокументОснование";
		
		СлужебныеТаблицы.Добавить("ВТНепереносимыеОснованияНалогов");
		СлужебныеТаблицы.Добавить("ВТПредварительноНалогУдержанный");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НДФЛВедомостей.МесяцНалоговогоПериода < &ДатаНачалаПереносаДатыПолученияДоходов
		|			ТОГДА НДФЛВедомостей.МесяцНалоговогоПериода
		|		КОГДА НДФЛВедомостей.КатегорияДохода В (&КатегорииДоходаНДФЛСФиксированнойДатойПолученияДохода)
		|			ТОГДА НДФЛВедомостей.МесяцНалоговогоПериода
		|		ИНАЧЕ &ДатаПолученияДоходовНДФЛ
		|	КОНЕЦ КАК МесяцНалоговогоПериода,
		|	// ФизическоеЛицо, СтавкаНалогообложенияРезидента, МесяцНалоговогоПериода, Подразделение, КодДохода, РегистрацияВНалоговомОргане, ВключатьВДекларациюПоНалогуНаПрибыль, ДокументОснование и др. поля
		|	*
		|ПОМЕСТИТЬ ВТНалогУдержанный
		|ИЗ
		|	#ТаблицаНДФЛ КАК НДФЛВедомостей";
		
	КонецЕсли;
	
	СоздатьВТНалогУдержанныйВыполнитьЗапрос(Запрос, ИсточникНДФЛ, ИмяВТ);
	
	Если СлужебныеТаблицы.Количество() > 0 Тогда
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, СлужебныеТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТНалогУдержанныйВыполнитьЗапрос(Запрос, ИсточникНДФЛ, ИмяВТ)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникНДФЛ, "Текст")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникНДФЛ, "Параметры") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНДФЛ", "(" + ИсточникНДФЛ.Текст + ")");
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, ИсточникНДФЛ.Параметры);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаНДФЛ", "&ТаблицаНДФЛ");
		Запрос.УстановитьПараметр("ТаблицаНДФЛ", ИсточникНДФЛ);
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПОМЕСТИТЬ ВТНалогУдержанный", "ПОМЕСТИТЬ " + ИмяВТ);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

// Переносит ранее зарегистрированный доход на новую дату получения дохода
// Параметры:
//		Регистратор - ДокументСсылка - документ выплаты
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - должен содержать временные таблицы 
//      	ВТСписокСотрудников, с данными о выплатах вида:
//				ФизическоеЛицо: должно быть непустым
//          	СуммаВыплаты.
//          	ДокументОснование, необязательная
//          	СтатьяФинансирования, необязательная
//          	СтатьяРасходов, необязательная
//          	СуммаНачисленная, необязательная
//          	СуммаВыплаченная, необязательная, 
//			Если колонки СуммаНачисленная, СуммаВыплаченная отсутствуют, возможная частичная выплата не будет учтена.
//		Движения - коллекция движений регистратора.
//		ДатаВыплаты - дата - новая дата получения дохода.
//		ДатаОперации - дата - дата, которой будет зарегистрировано движение.
//		Отказ - признак отказа от заполнения движений.
//
Процедура ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор, Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ , Записывать = Ложь) Экспорт
	УчетФактическиПолученныхДоходовВнутренний.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор, Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Записывать);
КонецПроцедуры

Процедура НовоеСоответствиеКодуДохода(ТаблицаСоответствий, КодДохода, ОсновнаяКатегория, ДополнительныеКатегории = Неопределено, КатегорияНачисления = Неопределено) Экспорт
	
	НовоеСоответствие = ТаблицаСоответствий.Добавить();
	НовоеСоответствие.КодДохода = КодДохода;
	НовоеСоответствие.КатегорияДохода = ОсновнаяКатегория;
	НовоеСоответствие.КатегорияНачисления = КатегорияНачисления;
	НовоеСоответствие.Порядок = 1;
	
	Если ДополнительныеКатегории <> Неопределено Тогда
		Порядок = 2;
		Если ТипЗнч(ДополнительныеКатегории) = Тип("Массив") Тогда
			Для Каждого Категория Из ДополнительныеКатегории Цикл
				НовоеСоответствие = ТаблицаСоответствий.Добавить();
				НовоеСоответствие.КодДохода = КодДохода;
				НовоеСоответствие.КатегорияДохода = Категория;
				НовоеСоответствие.КатегорияНачисления = КатегорияНачисления;
				НовоеСоответствие.Порядок = Порядок;
				
				Порядок = Порядок + 1;
			КонецЦикла;
		Иначе
			НовоеСоответствие = ТаблицаСоответствий.Добавить();
			НовоеСоответствие.КодДохода = КодДохода;
			НовоеСоответствие.КатегорияДохода = ДополнительныеКатегории;
			НовоеСоответствие.КатегорияНачисления = КатегорияНачисления;
			НовоеСоответствие.Порядок = Порядок;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	УчетФактическиПолученныхДоходовВнутренний.ЗарегистрироватьОбработчикиОбновления(Обработчики);
КонецПроцедуры

#КонецОбласти

Процедура ПеренестиНДФЛКПеречислениюНаНовуюДату(Движения, Ведомости, ДатаОперации, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистраторы", Ведомости);
	Запрос.УстановитьПараметр("НепереносимыеКатегорииДохода", Перечисления.КатегорииДоходовНДФЛ.СФиксированнойДатойПолученияДохода());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛКПеречислению.*
	|ИЗ
	|	РегистрНакопления.НДФЛКПеречислению КАК НДФЛКПеречислению
	|ГДЕ
	|	НДФЛКПеречислению.Регистратор В (&Регистраторы)
	|	И НЕ НДФЛКПеречислению.КатегорияДохода В (&НепереносимыеКатегорииДохода)";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НовоеДвижение = Движения.НДФЛКПеречислению.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Выборка, , "Регистратор");
			НовоеДвижение.Сумма = - НовоеДвижение.Сумма;
			
			НовоеДвижение = Движения.НДФЛКПеречислению.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, Выборка, , "Регистратор");
			НовоеДвижение.Период = ДатаОперации;
			НовоеДвижение.КрайнийСрокУплаты = Неопределено;
			
		КонецЦикла;
		
		УчетНДФЛ.ПроставитьКрайнийСрокУплаты(Движения.НДФЛКПеречислению);
		Движения.НДФЛКПеречислению.Записывать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаНачалаИспользованияПодсистемы() Экспорт
	Возврат '20170101';
КонецФункции

Функция РегистраторыУвольнения() Экспорт
	Возврат УчетФактическиПолученныхДоходовВнутренний.РегистраторыУвольнения();
КонецФункции

Процедура УточнитьКрайнийСрокУплаты(ЗаписиРегистра) Экспорт
	
	Если ЗаписиРегистра.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ДатыУдержанияНалога = Новый Массив;
	Для Каждого СтрокаНабора Из ЗаписиРегистра Цикл
		Если СтрокаНабора.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано Тогда	
			Если СтрокаНабора.ВключатьВДекларациюПоНалогуНаПрибыль Тогда // пп. 3 п. 9 ст. 226.1 
				СрокУплаты = ДобавитьМесяц(НачалоДня(СтрокаНабора.Период), 1)
			ИначеЕсли СтрокаНабора.СрокПеречисления = Перечисления.СрокиПеречисляемогоНалога.МежрасчетныеОтпускаИБольничные Тогда
				СрокУплаты = НачалоДня(КонецМесяца(СтрокаНабора.Период))
			Иначе
				СрокУплаты = КонецДня(СтрокаНабора.Период) + 1;
			КонецЕсли;
			Если ДатыУдержанияНалога.Найти(СрокУплаты) = Неопределено Тогда
				ДатыУдержанияНалога.Добавить(НачалоДня(СрокУплаты))
			КонецЕсли;
			СтрокаНабора.КрайнийСрокУплаты = СрокУплаты;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатыУдержанияНалога.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	РабочиеДни = КалендарныеГрафики.ДатыБлижайшихРабочихДней(КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации(), ДатыУдержанияНалога, Ложь, Ложь, Истина);
	Если РабочиеДни = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	Для Каждого СтрокаНабора Из ЗаписиРегистра Цикл
		Если СтрокаНабора.ВариантУдержания = Перечисления.ВариантыУдержанияНДФЛ.Удержано Тогда	
			БлижайшийРабочийДень = РабочиеДни[СтрокаНабора.КрайнийСрокУплаты];
			Если БлижайшийРабочийДень <> Неопределено И БлижайшийРабочийДень <> СтрокаНабора.КрайнийСрокУплаты Тогда
				СтрокаНабора.КрайнийСрокУплаты = БлижайшийРабочийДень;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
