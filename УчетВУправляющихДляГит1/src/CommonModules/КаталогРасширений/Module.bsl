
#Область ПрограммныйИнтерфейс

// Формирует список дополнительных параметров для запроса списка расширений из Менеджера сервиса, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторПоследнегоРасширения - Строка - идентификатор последнего загруженного расширения, необходим для
//		для реализации постраничного чтения данных в из Менеджера сервиса.
//	МассивТиповДоступа - Массив - массив имен перечисления ВидыДоступаРазрабатываемыхОбъектов из МС, необходим для отобров получаемых расширений.
//	КоличествоЭлементовВВыборке - Число - максимальнное количество элементов возврщаемых Менеджером сервиса в одной странице.	
//	ОтправлятьПревью - Булево - флаг указывающий что Менеджеру сервиса при возврате 
//		списка расширений нужно отправлять и превью расширений.
//	ТолькоУстановленные - Булево - флаг указывающий что Менеджеру сервиса при возврате 
//		списка расширений нужно отправлять только установленные расширения. 
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьСписокДоступныхРасширенийВФоне(Знач АдресХранилищаРезультат, Знач ИдентификаторПоследнегоРасширения = "", Знач МассивТиповДоступа, 
			Знач КоличествоЭлементовВВыборке = 0, Знач ОтправлятьПревью = Неопределено, Знач ТолькоУстановленные = Ложь) Экспорт 
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	УстановитьЗначенияПараметров(КоличествоЭлементовВВыборке, ОтправлятьПревью);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторПоследнегоРасширения"), ИдентификаторПоследнегоРасширения);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("КоличествоЭлементовВВыборке"), КоличествоЭлементовВВыборке);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ОтправлятьПревью"), ОтправлятьПревью);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ТолькоУстановленные"), ТолькоУстановленные);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("МассивТиповДоступа"), МассивТиповДоступа);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "ПолучитьСписокДоступныхРасширений");		
	
КонецФункции

// Формирует список дополнительных параметров для запроса найденных расшиерений из Менеджера сервиса, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторПоследнегоРасширения - Строка - идентификатор последнего загруженного расширения, необходим для
//		для реализации постраничного чтения данных в из Менеджера сервиса.
//	МассивТиповДоступа - Массив - массив имен перечисления ВидыДоступаРазрабатываемыхОбъектов из МС, необходим для отобров получаемых расширений.
//	СтрокаПоиска - Строка - строка вхождения которой есть в наименовании расшиерний. 
//	КоличествоЭлементовВВыборке - Число - максимальнное количество элементов возврщаемых Менеджером сервиса в одной странице.	
//	ОтправлятьПревью - Булево - флаг указывающий что Менеджеру сервиса при возврате 
//		списка расширений нужно отправлять и превью расширений.
//	ТолькоУстановленные - Булево - флаг указывающий что Менеджеру сервиса при возврате 
//		списка расширений нужно отправлять только установленные расширения. 
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьСписокНайденныхРасширенийВФоне(Знач АдресХранилищаРезультат, Знач ИдентификаторПоследнегоРасширения = "", Знач МассивТиповДоступа, Знач СтрокаПоиска,
			Знач КоличествоЭлементовВВыборке = 0, Знач ОтправлятьПревью = Неопределено, Знач ТолькоУстановленные = Ложь) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя выполнять поиск по пустой строке.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	УстановитьЗначенияПараметров(КоличествоЭлементовВВыборке, ОтправлятьПревью);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторПоследнегоРасширения"), ИдентификаторПоследнегоРасширения);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("СтрокаПоиска"), СтрокаПоиска);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("КоличествоЭлементовВВыборке"), КоличествоЭлементовВВыборке);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ОтправлятьПревью"), ОтправлятьПревью);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ТолькоУстановленные"), ТолькоУстановленные);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("МассивТиповДоступа"), МассивТиповДоступа);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "ПолучитьСписокНайденныхРасширений");
	
КонецФункции

// Формирует список дополнительных параметров для запроса данных версии расшиерения из Менеджера сервиса, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторВерсииРасширения - Строка - идентификатор версии расширения инфорацию о которой нужно получить из Менеджера сервиса. 
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьДанныеВерсииРасширенияВФоне(АдресХранилищаРезультат, ИдентификаторВерсииРасширения) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторВерсииРасширения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан идентификатор версии расширения.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторВерсииРасширения"), ИдентификаторВерсииРасширения);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "ПолучитьДанныеВерсииРасширения");
	
КонецФункции

// Формирует список дополнительных параметров для запроса на установку расширения в приложение, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторРасширения - Строка - идентификатор расширения которое требуется установить в приложение.
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция НачатьУстановкуРасширенияВФоне(АдресХранилищаРезультат, ИдентификаторРасширения) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРасширения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан идентификатор расширения.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторРасширения"), ИдентификаторРасширения);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "НачатьУстановкуРасширения");
	
КонецФункции

// Формирует список дополнительных параметров для запроса на удаление расширения из приложения, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторРасширения - Строка - идентификатор расширения которое требуется удалить из приложения.
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция НачатьУдалениеРасширенияВФоне(АдресХранилищаРезультат, ИдентификаторРасширения) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРасширения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан идентификатор расширения.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторРасширения"), ИдентификаторРасширения);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "НачатьУдалениеРасширения");
	
КонецФункции

// Формирует список дополнительных параметров для запроса состояния расширения, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторРасширения - Строка - идентификатор расширения состояние которого требуется получить.
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьСтатусРасширенияВФоне(АдресХранилищаРезультат, ИдентификаторРасширения) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторРасширения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан идентификатор расширения.'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторРасширения"), ИдентификаторРасширения);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "ПолучитьСтатусРасширения");
	
КонецФункции

// Формирует список дополнительных параметров для запроса данных превью указанных расширений, 
//	и запускает выполнение запроса в фоновом задании.
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	ИдентификаторыВерсийРасширений - Массив - массив идентификаторов расширений превью которых требуется получить.
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьПревьюРасширенийВФоне(АдресХранилищаРезультат, ИдентификаторыВерсийРасширений) Экспорт 
	
	Если ТипЗнч(ИдентификаторыВерсийРасширений) <> Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Идентификаторы версий расширений должны передаваться в виде массива.'"));	
		Возврат Ложь;	
	КонецЕсли;
	
	Если ИдентификаторыВерсийРасширений.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указаны идентификаторы версий расширений'"));	
		Возврат Ложь;
	КонецЕсли;
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторыВерсийРасширений"), ИдентификаторыВерсийРасширений);
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, "ПолучитьПревьюРасширений");	
	
КонецФункции

// Формирует список дополнительных параметров для запроса списка разделов из МС
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ПолучитьСписокРазделовВФоне(АдресХранилищаРезультат) Экспорт 
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, Новый Массив, "ПолучитьСписокРазделов");
	
КонецФункции

// Формирует список дополнительных параметров для запросо на изменение оценки и отзывы пользователя
//
// Параметры:
//	АдресХранилищаРезультат - Строка - адрес временного хранилища в которое будет помещен результат выполнения запроса.
//	Оценка - Число - оценка расширения выставленная пользователем
//	Отзыв - Строка - комментарий пользователя относительно расширения
//	УдалитьОценку - Булево - флаг необходимости удалить оценку
//
// Возвращаемое значение:
//   Булево - Истина, если удалось запустить фоновое задание.
//
Функция ИзменитьОценкуПользователя(АдресХранилищаРезультат, ИдентификаторРасширения, ИдентификаторыВерсийРасширений, 
	Оценка = 1, Отзыв = "", Заголовок = "", УдалитьОценку = Ложь) Экспорт 
	
	СинонимыДопПараметровМетодов = КаталогРасширенийПовтИсп.СинонимыДопПараметровМетодов();
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторРасширения"), ИдентификаторРасширения);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("ИдентификаторыВерсийРасширений"), ИдентификаторыВерсийРасширений);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("Оценка"), Оценка);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("Отзыв"), Отзыв);
	ДопПараметры.Вставить(СинонимыДопПараметровМетодов.Получить("Заголовок"), Заголовок);
	
	Если УдалитьОценку Тогда
		ИмяМетода = "УдалитьОценкуПользователя";
	Иначе
		ИмяМетода = "ИзменитьОценкуПользователя";	
	КонецЕсли;
	
	Возврат НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, ИмяМетода);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьЗапрос(ПараметрыЗапроса, АдресХранилищаРезультат, НаименованиеМетода) Экспорт 
	
	КодОтвета = Неопределено;
	
	Попытка
		ОтправитьЗапросВМС(ПараметрыЗапроса, АдресХранилищаРезультат, НаименованиеМетода, КодОтвета);
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'КаталогРасширений.ПолучениеДанныхИзМС'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить данные. Код ответа: %1'"), КодОтвета);
		
		ДанныеОтвета = Новый Структура;
		ДанныеОтвета.Вставить("success", Ложь);
		ДанныеОтвета.Вставить("error", Новый Структура("code, msg", КодОтвета, ТекстСообщения));
		
		ПоместитьВоВременноеХранилище(ДанныеОтвета, АдресХранилищаРезультат);
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ИзменитьСостояниеОповещенийРасширений(ИдентификаторРасширения, ЭтоУдаление = Ложь) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОчередьРасширенийДляОповещений.ИдентификаторРасширения КАК ИдентификаторРасширения,
	               |	ОчередьРасширенийДляОповещений.Пользователь КАК Пользователь,
	               |	ОчередьРасширенийДляОповещений.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.ОчередьРасширенийДляОповещений КАК ОчередьРасширенийДляОповещений
	               |ГДЕ
	               |	ОчередьРасширенийДляОповещений.ИдентификаторРасширения = &ИдентификаторРасширения
	               |	И ОчередьРасширенийДляОповещений.Состояние = &Состояние";
	
	Запрос.УстановитьПараметр("ИдентификаторРасширения", ИдентификаторРасширения);
	
	Если ЭтоУдаление Тогда
		Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияРасширений.Удаляется);
	Иначе 
		Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияРасширений.Устанавливается);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасширенийДляОповещений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторРасширения.Установить(ИдентификаторРасширения);
		НаборЗаписей.Отбор.Пользователь.Установить(Выборка.Пользователь);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		Если ЭтоУдаление Тогда
			НоваяЗапись.Состояние = Перечисления.СостоянияРасширений.Удалено;
		Иначе
			НоваяЗапись.Состояние = Перечисления.СостоянияРасширений.Установлено;
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОповещение(Знач ИдентификаторРасширения, Знач Пользователь, Знач Состояние) Экспорт 
	
	РегистрыСведений.ОчередьРасширенийДляОповещений.УстановитьОповещение(ИдентификаторРасширения, Пользователь, Состояние);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьЗапросВМС(ПараметрыЗапроса, АдресХранилищаРезультат, НаименованиеМетода, КодОтвета)
	
	ПутьНаСервере = "";
	Соединение = СоединениеСМенеджеромСервиса(ПутьНаСервере);
	
	Запрос = Новый HTTPЗапрос(ПутьНаСервере + ПутьДляВыполненияЗапроса());
	Запрос.УстановитьТелоИзСтроки(ПреобразоватьДанныеВJSON(ПараметрыЗапроса), КодировкаТекста.UTF8);
		
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	КодОтвета = Ответ.КодСостояния;
	ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	Если Ответ.КодСостояния <> 200 Тогда		
		ВызватьИсключение СформироватьТекстОшибки(Ответ.КодСостояния, ТелоОтвета, "");		
	КонецЕсли;
	
	Попытка
		ДанныеОтвета = ПреобразоватьJSONВДанные(ТелоОтвета, "ДатаСоздания");
	Исключение
		ВызватьИсключение СформироватьТекстОшибки(Ответ.КодСостояния, ТелоОтвета, ОписаниеОшибки());		
	КонецПопытки;
	
	ДанныеОтвета.Вставить("ИмяМетода", НаименованиеМетода);
		
	ПоместитьВоВременноеХранилище(ДанныеОтвета, АдресХранилищаРезультат);
	
КонецПроцедуры

Функция НачатьВыполнениеЗапроса(АдресХранилищаРезультат, ДопПараметры, НаименованиеМетода) 
	
	Если НЕ КаталогРасширенийВызовСервера.КаталогРасширенийИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Функционал каталога расширений отключен.'"));
		Возврат Ложь;			
	КонецЕсли;
	
	ДоступныеМетоды = КаталогРасширенийПовтИсп.МетодыИнтерфейсамМенеджераСервиса();
	
	Если ДоступныеМетоды.Получить(НаименованиеМетода) = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалость определить метод ""%1""'"), НаименованиеМетода);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗапроса = КаталогРасширенийПовтИсп.ПараметрыЗапроса();
	ПараметрыЗапроса.method = ДоступныеМетоды[НаименованиеМетода];
	
	Для Каждого Данные Из ДопПараметры Цикл
		ПараметрыЗапроса.Вставить(Данные.Ключ, Данные.Значение);
	КонецЦикла;
	
	ПараметрыФЗ = Новый Массив;
	ПараметрыФЗ.Добавить(ПараметрыЗапроса);
	ПараметрыФЗ.Добавить(АдресХранилищаРезультат);
	ПараметрыФЗ.Добавить(НаименованиеМетода);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	НаименованиеФЗ = СтрШаблон(НСтр("ru = '%1: Запрос к каталогу расширений МС ""%2""'"), ТекущийПользователь, НаименованиеМетода);
	
	ФоновыеЗадания.Выполнить("КаталогРасширений.ВыполнитьЗапрос", ПараметрыФЗ, Новый УникальныйИдентификатор, НаименованиеФЗ);
	
	Возврат Истина;
	
КонецФункции

Функция ПутьДляВыполненияЗапроса()
	Возврат "/hs/ext-catalog/execute";		
КонецФункции

Функция ПреобразоватьДанныеВJSON(Значение)
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись, Значение);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ПреобразоватьJSONВДанные(СтрокаJSON, СвойстваДаты = "")
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	
	Результат = ПрочитатьJSON(Чтение, Ложь, СвойстваДаты);
	Чтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция СоединениеСМенеджеромСервиса(ПутьНаСервере, Знач ИспользоватьАутентификациюОС = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСлужебногоПользователяМенеджераСервиса = РаботаВМоделиСервиса.ИмяСлужебногоПользователяМенеджераСервиса();
	ПарольСлужебногоПользователяМенеджераСервиса = РаботаВМоделиСервиса.ПарольСлужебногоПользователяМенеджераСервиса();
	
	ПараметрыПодключения = ОбщегоНазначенияКлиентСервер.СтруктураURI(Константы.ВнутреннийАдресМенеджераСервиса.Получить());
	
	Если ПараметрыПодключения.Схема = "http" Тогда
		ЗащищенноеСоединение = Неопределено;
	ИначеЕсли ПараметрыПодключения.Схема = "https" Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе 
		
		ВызватьИсключение НСтр("ru = 'Не удалось определить схему запроса к МС.'");
		
	КонецЕсли;
	
	ПутьНаСервере = ПараметрыПодключения.ПутьНаСервере;
	
	Возврат Новый HTTPСоединение(ПараметрыПодключения.Хост, ПараметрыПодключения.Порт, 
		ИмяСлужебногоПользователяМенеджераСервиса, ПарольСлужебногоПользователяМенеджераСервиса,
		Новый ИнтернетПрокси, 30, ЗащищенноеСоединение, ИспользоватьАутентификациюОС);
		
КонецФункции

Процедура УстановитьЗначенияПараметров(КоличествоЭлементовВВыборке, ОтправлятьПревью)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КоличествоЭлементовВВыборке = 0 Тогда
		КоличествоЭлементовВВыборке = КаталогРасширенийПовтИсп.КоличествоЭлементовВВыборке();
	КонецЕсли;
	
	Если ОтправлятьПревью = Неопределено Тогда
		ОтправлятьПревью = КаталогРасширенийПовтИсп.ОтправлятьПревью();	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СформироватьТекстОшибки(КодОтвета, ТекстОтвета, ОписаниеОшибки)
	
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Код ответа: %1
										  |Текст ответа: %2
										  |Описание ошибки: %3'"),
						КодОтвета, СокрЛП(Лев(ТекстОтвета, 500)), ОписаниеОшибки);
	
	Возврат ТекстСообщения;	
	
КонецФункции

#КонецОбласти

