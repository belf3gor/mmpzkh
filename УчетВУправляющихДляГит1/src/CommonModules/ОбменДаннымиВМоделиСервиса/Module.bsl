
////////////////////////////////////////////////////////////////////////////////
// ОбменДаннымиВМоделиСервиса: механизм обмена данными.
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийПодсистемБСП

// Обработчик "После определения получателей".
// Вызывается при регистрации объектов в плане обмена.
// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
// Параметры:
// Данные - СправочникОбъект или ДокументОбъект - Объект для получения значений реквизитов и других свойств.
// Получатели - Массив - Массив элементов типа ПланОбменаСсылка.<Имя> - Узлы плана обмена.
// ИмяПланаОбмена - Строка.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если Данные.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если Получатели.Количество() > 0
			И ОбменДаннымиВМоделиСервисаПовтИсп.ЭтоПланОбменаСинхронизацииДанных(ИмяПланаОбмена)
			И Не ПолучитьФункциональнуюОпцию("ЗарегистрированыИзмененияДанных") Тогда
			
			Если РаботаВМоделиСервиса.СеансЗапущенБезРазделителей() Тогда
				
				УстановитьПризнакИзмененияДанных();
			Иначе
				
				Попытка
					ФоновыеЗадания.Выполнить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных",, "1");
				Исключение
					// Дополнительная обработка исключения не требуется
					// ожидаемое исключение - дублирование задание с таким же ключом.
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Выгружаем в сервис изменения только для прикладных данных (разделенных
		// разделителем ОбластьДанныхОсновныеДанные).
		Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто()
			И Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(Данные.Метаданные(),
				РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Получатели, АвтономнаяРаботаСлужебный.ПриложениеВСервисе());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных"); 
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ().
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресДляВосстановленияПароляУчетнойЗаписи");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	МассивВерсий.Добавить("2.1.2.1");
	МассивВерсий.Добавить("2.1.5.17");
	МассивВерсий.Добавить("2.1.6.1");
	МассивВерсий.Добавить("2.4.5.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	
КонецПроцедуры

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений.
// 
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	СообщенияОбменаДаннымиОбработчикСообщения.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса.
//
Процедура ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ЭтоАвтономноеРабочееМесто",
		АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто());
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы",
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы());
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы",
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы());
	Параметры.Вставить("ПараметрыАвтономнойРаботы", ПараметрыАвтономнойРаботыПриЗавершенииРаботы());
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиента(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

// Заполняет массив типов, исключаемых из выгрузки и загрузки данных.
//
// Параметры:
//  Типы - Массив(Типы).
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ДанныеДляОтложенногоОбновления);
	Типы.Добавить(Метаданные.Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО);
	Типы.Добавить(Метаданные.Константы.ЗарегистрированыИзмененияДанных);
	Типы.Добавить(Метаданные.Константы.НастройкиПодчиненногоУзлаРИБ);
	Типы.Добавить(Метаданные.Константы.ПрефиксПоследнегоАвтономногоРабочегоМеста);
	Типы.Добавить(Метаданные.Константы.ПрефиксОбластиДанных);
	
	Типы.Добавить(Метаданные.РегистрыСведений.ДанныеОбъектовДляРегистрацииВОбменах);
	Типы.Добавить(Метаданные.РегистрыСведений.ИзмененияОбщихДанныхУзлов);
	Типы.Добавить(Метаданные.РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз);
	Типы.Добавить(Метаданные.РегистрыСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов);
	Типы.Добавить(Метаданные.РегистрыСведений.РезультатыОбменаДанными);
	Типы.Добавить(Метаданные.РегистрыСведений.СессииОбменаСообщениямиСистемы);
	Типы.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз);
	Типы.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных);
	
КонецПроцедуры

// Выполняет удаление файлов сообщений обмена, которые не были удалены из-за сбоев в работе системы.
// Удалению подлежат файлы с датой размещения более суток от текущей универсальной даты.
// Анализируется РС.СообщенияОбменаДаннымиОбластейДанных.
//
// Параметры:
// Нет.
//
Процедура ПриУдаленииНеактуальныхСообщенийОбмена() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла,
	|	СообщенияОбменаДанными.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанныхВспомогательныеДанные,
	|	СообщенияОбменаДанными.ДатаЗакладкиСообщения КАК ДатаЗакладкиСообщения
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДаннымиОбластейДанных КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ДатаЗакладкиСообщения < &ДатаАктуальности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбластьДанныхВспомогательныеДанные";
	
	УниверсальнаяДата = ТекущаяУниверсальнаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", УниверсальнаяДата - 60 * 60 * 24);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыСеанса.ОбластьДанныхИспользование = Истина;
	ОбластьДанныхВспомогательныеДанные = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ОбластьДанныхВспомогательныеДанные <> Выборка.ОбластьДанныхВспомогательныеДанные Тогда
			
			ОбластьДанныхВспомогательныеДанные = Выборка.ОбластьДанныхВспомогательныеДанные;
			ПараметрыСеанса.ОбластьДанныхЗначение = ОбластьДанныхВспомогательныеДанные;
			
		КонецЕсли;
		
		УзелОбщиеНастройки = Неопределено;
		
		ЗапросОбщиеНастройки = Новый Запрос(
		"ВЫБРАТЬ
		|	ОбщиеНастройкиУзловИнформационныхБаз.УзелИнформационнойБазы КАК УзелИнформационнойБазы
		|ИЗ
		|	РегистрСведений.ОбщиеНастройкиУзловИнформационныхБаз КАК ОбщиеНастройкиУзловИнформационныхБаз
		|ГДЕ
		|	ОбщиеНастройкиУзловИнформационныхБаз.СообщениеДляСопоставленияДанных = &СообщениеДляСопоставленияДанных");
		ЗапросОбщиеНастройки.УстановитьПараметр("СообщениеДляСопоставленияДанных", Выборка.ИдентификаторСообщения);
		
		ВыборкаОбщиеНастройки = ЗапросОбщиеНастройки.Выполнить().Выбрать();
		Если ВыборкаОбщиеНастройки.Следующий() Тогда
			Если Не (ВыборкаОбщиеНастройки.ДатаЗакладкиСообщения < УниверсальнаяДата - 60 * 60 * 24 * 7) Тогда
				Продолжить;
			КонецЕсли;
			
			УзелОбщиеНастройки = ВыборкаОбщиеНастройки.УзелИнформационнойБазы;
		КонецЕсли;
		
		ПолноеИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ОбменДаннымиПовтИсп.КаталогВременногоХранилищаФайлов(), Выборка.ИмяФайла);
		
		ФайлСообщения = Новый Файл(ПолноеИмяФайлаСообщения);
		
		Если ФайлСообщения.Существует() Тогда
			
			Попытка
				УдалитьФайлы(ФайлСообщения.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Удаляем информацию о файле сообщения обмена из хранилища
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(Выборка.ИдентификаторСообщения));
		РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.УдалитьЗапись(СтруктураЗаписи);
		
		Если Не УзелОбщиеНастройки = Неопределено Тогда
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы",          УзелОбщиеНастройки);
			СтруктураЗаписи.Вставить("СообщениеДляСопоставленияДанных", "");
			
			ОбменДаннымиСервер.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "ОбщиеНастройкиУзловИнформационныхБаз");
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыСеанса.ОбластьДанныхИспользование = Ложь;
	
КонецПроцедуры

// Получение имени файла по его идентификатору из хранилища.
// Если файла с указанным идентификатором нет, то вызывается исключение.
// Если файл найден, то возвращается его имя, при этом удаляется информация об этом файле из хранилища.
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//	ИмяФайла           - Строка - имя файла, из хранилища.
//
Процедура ПриПолученииФайлаИзХранилища(Знач ИдентификаторФайла, ИмяФайла) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДаннымиОбластейДанных КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Описание = НСтр("ru = 'Файл с идентификатором %1 не обнаружен.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Строка(ИдентификаторФайла));
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИмяФайла = Выборка.ИмяФайла;
	
	// Удаляем информацию о файле сообщения обмена из хранилища
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.УдалитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Помещение файла в хранилище
//
Процедура ПриПомещенииФайлаВХранилище(Знач СтруктураЗаписи) Экспорт
	
	РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Удаление файла из хранилища
//
Процедура ПриУдаленииФайлаИзХранилища(Знач СтруктураЗаписи) Экспорт
	
	РегистрыСведений.СообщенияОбменаДанными.УдалитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//        ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//        КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//        Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// Обработчик снятия константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ - Булево. Флаг отказа отключения синхронизации данных.
// Если установить в значение Истина, то синхронизация отключена не будет.
//
Процедура ПриОтключенииСинхронизацииДанных(Отказ) Экспорт
	
	Константы.ИспользоватьАвтономнуюРаботуВМоделиСервиса.Установить(Ложь);
	Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСЛокальнойПрограммой.Установить(Ложь);
	Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСПриложениемВИнтернете.Установить(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СинхронизацияДанныхСПриложениемВИнтернете;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
Процедура УстановитьПризнакИзмененияДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбластьДанных = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	НачатьТранзакцию();
	Попытка
		ОбменСообщениями.ОтправитьСообщение("ОбменДанными\УправляющееПриложение\ПризнакИзмененияДанных",
						Новый Структура("КодУзла", ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ОбластьДанных)),
						РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса());
		
		Константы.ЗарегистрированыИзмененияДанных.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики для подсистемы обмена данными в модели сервиса.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  принимаемых сообщений.
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиУправлениеИнтерфейс);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.АвтоматизацияПроцессов.РаспределенноеВыполнениеКоманд") Тогда
		МодульСообщенияРаспределенноеВыполнениеКомандИнтерфейс = ОбщегоНазначения.ОбщийМодуль(
			"СообщенияРаспределенноеВыполнениеКомандИнтерфейс");
		МассивОбработчиков.Добавить(МодульСообщенияРаспределенноеВыполнениеКомандИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  отправляемых сообщений.
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиУправлениеИнтерфейс);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.АвтоматизацияПроцессов.РаспределенноеВыполнениеКоманд") Тогда
		МодульСообщенияРаспределенноеВыполнениеКомандИнтерфейс = ОбщегоНазначения.ОбщийМодуль(
			"СообщенияРаспределенноеВыполнениеКомандИнтерфейс");
		МассивОбработчиков.Добавить(МодульСообщенияРаспределенноеВыполнениеКомандИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

// Обработчики обновления ИБ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.УправлениеОбработчиками = Истина;
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ЗаполнитьОбработчикиРазделенныхДанных";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьКодыПредопределенныхУзлов";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ЗаблокироватьКонечныеТочки";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.2.0";
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПеренестиНастройкиОбменаВСтруктуруДанных_2_1_2_0";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.2.12";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьПризнакРегистрироватьИзмененияДляВсехОбластейДанных";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.3.22";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПеренестиДанныеСостоянийОбменаДанными";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.3.1.18";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПеренестиПаролиВБезопасноеХранилище";
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Обработчики - ТаблицаЗначений, Неопределено - см. описание 
//    функции НоваяТаблицаОбработчиковОбновления общего модуля 
//    ОбновлениеИнформационнойБазы..
//    В случае прямого вызова (не через механизм обновления 
//    версии ИБ) передается Неопределено.
// 
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьКодыПредопределенныхУзлов";
	КонецЕсли;
	
КонецПроцедуры

// Для каждого из используемых в модели сервиса планов обмена
// определяет и устанавливает код и наименование предопределенного узла.
// Код генерируется на основании значения разделителя.
// Наименование  - либо по заголовку приложения, либо, если он пустой, 
// по представлению текущей области данных из регистра РегистрСведений.ОбластиДанных.
//
Процедура УстановитьКодыПредопределенныхУзлов() Экспорт
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиВМоделиСервисаПовтИсп.ЭтоПланОбменаСинхронизацииДанных(ПланОбмена.Имя) Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			Если ПустаяСтрока(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = СокрЛП(СформироватьНаименованиеПредопределенногоУзла());
				ЭтотУзелОбъект.ОбменДанными.Загрузка = Истина;
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос настроек транспорта сообщений обмена из формата БСП 2.0.0 в формат БСП 2.1.2.
//
Процедура ПеренестиНастройкиОбменаВСтруктуруДанных_2_1_2_0() Экспорт
	
	КонечныеТочкиКорреспондентов = КонечныеТочкиКорреспондентовСтруктурыДанных_2_1_2_0();
	
	Запрос = Новый Запрос;
	
	ВерсияБСП301 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "3.0.1.1") >= 0;
	Если ВерсияБСП301 Тогда
		ТекстЗапроса2 =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.FILEКаталогОбменаИнформацией КАК FILEКаталогОбменаИнформацией,
		|	НастройкиТранспорта.WSURLВебСервиса КАК Адрес
		|ИЗ
		|	#НастройкиТранспорта КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.УзелИнформационнойБазы = &Узел";
		ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2, "#НастройкиТранспорта", "РегистрСведений.УдалитьНастройкиТранспортаОбмена");
	Иначе
		ТекстЗапроса2 =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.FILEКаталогОбменаИнформацией КАК FILEКаталогОбменаИнформацией,
		|	НастройкиТранспорта.WSURLВебСервиса КАК Адрес
		|ИЗ
		|	#НастройкиТранспорта КАК НастройкиТранспорта
		|ГДЕ
		|	НастройкиТранспорта.Узел = &Узел";
		ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2, "#НастройкиТранспорта", "РегистрСведений.НастройкиТранспортаОбмена");
	КонецЕсли;
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = ТекстЗапроса2;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП() Цикл
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПланОбмена.Ссылка КАК Узел
			|ИЗ
			|	#ПланОбмена КАК ПланОбмена
			|ГДЕ
			|	ПланОбмена.Ссылка <> &ЭтотУзел";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ПланОбмена", "ПланОбмена." + ИмяПланаОбмена);
			
			Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Блокировка = Новый БлокировкаДанных;
					Если ВерсияБСП301 Тогда
						ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.УдалитьНастройкиТранспортаОбмена");
					Иначе
						ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиТранспортаОбмена");
					КонецЕсли;
					ЭлементБлокировки.УстановитьЗначение("Узел", Выборка.Узел);
					
					Блокировка.Заблокировать();
					
					Запрос2.УстановитьПараметр("Узел", Выборка.Узел);
					
					РезультатЗапроса2 = Запрос2.Выполнить();
					
					Если Не РезультатЗапроса2.Пустой() Тогда
						
						Выборка2 = РезультатЗапроса2.Выбрать();
						
						Если Выборка2.Следующий() Тогда
							
							КонечнаяТочкаКорреспондента = КонечныеТочкиКорреспондентов[Выборка2.Адрес];
							
							Если КонечнаяТочкаКорреспондента = Неопределено Тогда
								
								ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не определена конечная точка корреспондента для адреса ""%1"".'"),
									Выборка2.Адрес);
							КонецЕсли;
							
							Запись = Новый Структура;
							Запись.Вставить("Корреспондент", Выборка.Узел);
							Запись.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
							Запись.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией(Выборка2.FILEКаталогОбменаИнформацией));
							
							РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ДобавитьЗапись(Запись);
							
							Если ВерсияБСП301 Тогда
								ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(
									Новый Структура("Узел", Выборка.Узел), "УдалитьНастройкиТранспортаОбмена");
							Иначе
								ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(
									Новый Структура("Узел", Выборка.Узел), "НастройкиТранспортаОбмена");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает признак "РегистрироватьИзменения" для всех узлов разделенных планов обмена БСП, кроме предопределенных
// для всех областей данных.
//
// Параметры:
//  Нет.
// 
Процедура УстановитьПризнакРегистрироватьИзмененияДляВсехОбластейДанных() Экспорт
	
	РазделенныеПланыОбменаБСП = ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
		
		Для Каждого ИмяПланаОбмена Из РазделенныеПланыОбменаБСП Цикл
			
			ТекстЗапроса2 =
			"ВЫБРАТЬ
			|	ПланОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
			|ГДЕ
			|	НЕ ПланОбмена.РегистрироватьИзменения
			|	И ПланОбмена.Ссылка <> &ЭтотУзел";
			
			ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Запрос2 = Новый Запрос;
			Запрос2.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
			Запрос2.Текст = ТекстЗапроса2;
			
			РезультатЗапроса2 = Запрос2.Выполнить();
			
			Если Не РезультатЗапроса2.Пустой() Тогда
				
				Выборка2 = РезультатЗапроса2.Выбрать();
				
				Пока Выборка2.Следующий() Цикл
					
					Узел = Выборка2.Ссылка.ПолучитьОбъект();
					Узел.РегистрироватьИзменения = Истина;
					Узел.ОбменДанными.Загрузка = Истина;
					Узел.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Блокирует все конечные точки кроме конечной точки менеджера сервиса.
//
Процедура ЗаблокироватьКонечныеТочки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел
	|	И ОбменСообщениями.Ссылка <> &КонечнаяТочкаМенеджераСервиса
	|	И НЕ ОбменСообщениями.Заблокирована";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ОбменСообщениямиВнутренний.ЭтотУзел());
	Запрос.УстановитьПараметр("КонечнаяТочкаМенеджераСервиса", РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса());
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КонечнаяТочка = Выборка.Ссылка.ПолучитьОбъект();
		КонечнаяТочка.Заблокирована = Истина;
		КонечнаяТочка.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос данных регистров СостоянияОбменовДанными и СостоянияУспешныхОбменовДанными
// в соответствующие регистры СостоянияОбменовДаннымиОбластейДанных и СостоянияУспешныхОбменовДаннымиОбластейДанных
// при обновлении ИБ.
//
Процедура ПеренестиДанныеСостоянийОбменаДанными() Экспорт
	
	Если ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка регистров СостоянияОбменовДанными и СостоянияОбменовДаннымиОбластейДанных.
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияОбменовДанными.УзелИнформационнойБазы,
		|	СостоянияОбменовДанными.ДействиеПриОбмене,
		|	СостоянияОбменовДанными.РезультатВыполненияОбмена,
		|	СостоянияОбменовДанными.ДатаНачала,
		|	СостоянияОбменовДанными.ДатаОкончания,
		|	СостоянияОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|ГДЕ
		|	НЕ СостоянияОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные ЕСТЬ NULL";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Удаляем запись в РС.СостоянияОбменовДанными
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, РезультатВыполненияОбмена, ДатаНачала, ДатаОкончания");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
			ОбменДаннымиСервер.УдалитьЗаписиСостоянияОбменовДанными(СтруктураЗаписи);
			
			// Добавляем запись в РС.СостоянияОбменовДаннымиОбластейДанных
			СтруктураЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", Выборка.ОбластьДанных);
			РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Обработка регистров СостоянияУспешныхОбменовДанными и СостоянияУспешныхОбменовДаннымиОбластейДанных.
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы,
		|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене,
		|	СостоянияУспешныхОбменовДанными.ДатаОкончания,
		|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|ГДЕ
		|	НЕ СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные ЕСТЬ NULL";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Удаляем запись в РС.СостоянияУспешныхОбменовДанными
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, ДатаОкончания");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
			ОбменДаннымиСервер.УдалитьЗаписиСостоянияУспешныхОбменовДанными(СтруктураЗаписи);
			
			// Добавляем запись в РС.СостоянияУспешныхОбменовДаннымиОбластейДанных
			СтруктураЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", Выборка.ОбластьДанных);
			РегистрыСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Перенести пароли в безопасное хранилище
//
Процедура ПеренестиПаролиВБезопасноеХранилище() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиТранспорта.КонечнаяТочкаКорреспондента КАК Узел,
	|	НастройкиТранспорта.УдалитьFTPСоединениеПароль,
	|	НастройкиТранспорта.УдалитьПарольАрхиваСообщенияОбмена
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаОбластейДанных КАК НастройкиТранспорта";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если НЕ ПустаяСтрока(РезультатЗапроса.Узел) 
			ИЛИ НЕ ПустаяСтрока(РезультатЗапроса.УдалитьFTPСоединениеПароль) Тогда
			НачатьТранзакцию();
			Попытка
				УстановитьПривилегированныйРежим(Истина);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьFTPСоединениеПароль, "FTPСоединениеПарольОбластейДанных");
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(РезультатЗапроса.Узел, РезультатЗапроса.УдалитьПарольАрхиваСообщенияОбмена, "ПарольАрхиваСообщенияОбменаОбластейДанных");
				УстановитьПривилегированныйРежим(Ложь);
				
				НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаОбластейДанных.СоздатьМенеджерЗаписи();
				НастройкиТранспорта.КонечнаяТочкаКорреспондента = РезультатЗапроса.Узел;
				НастройкиТранспорта.Прочитать();
				
				НастройкиТранспорта.УдалитьFTPСоединениеПароль = "";
				НастройкиТранспорта.УдалитьПарольАрхиваСообщенияОбмена = "";
				НастройкиТранспорта.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				
				СтрокаСообщенияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				СобытиеЖурналаРегистрацииОбменДанными = НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииОбменДанными, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция КонечныеТочкиКорреспондентовСтруктурыДанных_2_1_2_0()
	
	Результат = Новый Соответствие;
	
	ВерсияБСП301 = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыСервер.ВерсияБиблиотеки(), "3.0.1.1") >= 0;
	Если ВерсияБСП301 Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.УзелИнформационнойБазы КАК КонечнаяТочкаКорреспондента,
		|	НастройкиТранспорта.WSURLВебСервиса КАК Адрес
		|ИЗ
		|	#НастройкиТранспорта КАК НастройкиТранспорта
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(НастройкиТранспорта.УзелИнформационнойБазы) В (&Типы)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#НастройкиТранспорта", "РегистрСведений.УдалитьНастройкиТранспортаОбмена");
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	НастройкиТранспорта.Узел КАК КонечнаяТочкаКорреспондента,
		|	НастройкиТранспорта.WSURLВебСервиса КАК Адрес
		|ИЗ
		|	#НастройкиТранспорта КАК НастройкиТранспорта
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(НастройкиТранспорта.Узел) В (&Типы)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#НастройкиТранспорта", "РегистрСведений.НастройкиТранспортаОбмена");
	КонецЕсли;
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("ПланОбменаСсылка.ОбменСообщениями"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Типы", Типы);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Адрес, Выборка.КонечнаяТочкаКорреспондента);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОтносительныйКаталогОбменаИнформацией(Знач Каталог)
	
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
			Каталог);
	КонецЕсли;
	
	Разделитель = "/";
	
	Если СтрНайти(Каталог, Разделитель) = 0 Тогда
		
		Разделитель = "\";
		
		Если СтрНайти(Каталог, Разделитель) = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
				Каталог);
		КонецЕсли;
		
	КонецЕсли;
	
	Каталоги = СтрРазделить(Каталог, Разделитель);
	
	Если Каталоги.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
			Каталог);
	КонецЕсли;
	
	Результат = Каталоги[Каталоги.ВГраница()];
	
	Если ПустаяСтрока(Результат) Тогда
		
		Если Каталоги.Количество() = 1 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
				Каталог);
		КонецЕсли;
		
		Результат = Каталоги[Каталоги.ВГраница() - 1];
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
//
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза, Получатель) Экспорт
	
	Если Получатель = Неопределено Тогда
		
		//
		
	ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли СозданиеНачальногоОбраза
		И ОбщегоНазначения.РазделениеВключено()
		И АвтономнаяРаботаСлужебный.ЭтоУзелАвтономногоРабочегоМеста(Получатель.Ссылка)
		И (ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные(), РаботаВМоделиСервиса.РазделительОсновныхДанных())
		ИЛИ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных())) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
		Если ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные(), РаботаВМоделиСервиса.РазделительВспомогательныхДанных()) Тогда
			
			МетаданныеЭлемента = ЭлементДанных.Метаданные();
			
			Если ОбщегоНазначения.ЭтоРегистр(МетаданныеЭлемента)
				Или ОбщегоНазначения.ЭтоПоследовательность(МетаданныеЭлемента)
				Или ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеЭлемента) = "Перерасчеты" Тогда
				
				Для Каждого Запись Из ЭлементДанных Цикл
					Запись[ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()] = 0;
				КонецЦикла;
				
			Иначе
				ЭлементДанных[ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()] = 0;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьXML(Получатель.ДополнительныеСвойства.ВыгруженныеДанные, ЭлементДанных);
		
	КонецЕсли;
	
КонецПроцедуры

//

// Для внутреннего использования
//
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		//
	ИначеЕсли АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто() Тогда
		
		Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			ОбъектМетаданных = ЭлементДанных.Ссылка.Метаданные();
			
		Иначе
			
			ОбъектМетаданных = ЭлементДанных.Метаданные();
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных,
				РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		//
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда
		
		Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			ОбъектМетаданных = ЭлементДанных.Ссылка.Метаданные();
			
		Иначе
			
			ОбъектМетаданных = ЭлементДанных.Метаданные();
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных,
				РаботаВМоделиСервиса.РазделительОсновныхДанных()) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Выполняет выгрузку данных в обмене между областями данных.
//
// Параметры:
//  Отказ         - Булево - флаг отказа; поднимается в случае возникновения ошибки при выгрузке данных
//  Корреспондент - ПланОбменаСсылка - узел плана обмена, для которого выполняется выгрузка данных.
// 
Процедура ВыполнитьВыгрузкуДанных(Отказ, Знач Корреспондент) Экспорт
	
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
	ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Корреспондент,
		ПараметрыОбмена, Отказ);
		
КонецПроцедуры

// Выполняет загрузку данных в обмене между областями данных.
//
// Параметры:
//  Отказ         - Булево - флаг отказа; поднимается в случае возникновения ошибки при загрузке данных
//  Корреспондент - ПланОбменаСсылка - узел плана обмена, для которого выполняется загрузка данных.
// 
Процедура ВыполнитьЗагрузкуДанных(Отказ, Знач Корреспондент, СообщениеДляСопоставленияДанных = Ложь) Экспорт
	
	ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
	ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
	ПараметрыОбмена.ВыполнятьВыгрузку = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	Если СообщениеДляСопоставленияДанных Тогда
		ДополнительныеПараметры.Вставить("СообщениеДляСопоставленияДанных");
	КонецЕсли;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Корреспондент,
		ПараметрыОбмена, Отказ, ДополнительныеПараметры);
		
КонецПроцедуры

// Инициирует обмен данными между двумя ИБ.
//
// Параметры:
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьОбменДанными(СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сбрасываем признак кумулятивного изменения данных для обмена
	Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	
	Если СценарийОбменаДанными.Количество() > 0 Тогда
		
		// Запускаем выполнение сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(0, СценарийОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для первой из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИндексСтрокиСценария > СценарийОбменаДанными.Количество() - 1 Тогда
		ЗавершитьВыполнениеСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными);
	КонецЕсли;
	
	ОписаниеВыполняемогоДействияЖР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнение шага сценария синхронизации (%1/%2).'"), ИндексСтрокиСценария + 1, СценарийОбменаДанными.Количество())
		+ Символы.ПС + ОписаниеСтрокиСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
		УровеньЖурналаРегистрации.Информация, , , ОписаниеВыполняемогоДействияЖР);
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Отказ",          Ложь);
	СтруктураРезультат.Вставить("ДатаНачала",     ТекущаяДатаСеанса());
	СтруктураРезультат.Вставить("ДатаЗавершения", '00010101');
	СтруктураРезультат.Вставить("Информация",     "");
	
	УзелИнформационнойБазы = Неопределено;
	
	Если СтрокаСценария.НомерИнформационнойБазы = 1 Тогда
		
		Попытка
			УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
			
			Если Не ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелИнформационнойБазы) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Настройка синхронизации данных в приложении ""%1"" не завершена.'"),
					УзелИнформационнойБазы);
			ИначеЕсли ОбменДаннымиСервер.ПолученоСообщениеСДаннымиДляСопоставления(УзелИнформационнойБазы) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В приложение ""%1"" загружено сообщение для ручного сопоставления.'"),
					УзелИнформационнойБазы);
			ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ЗагрузкаДанных" Тогда
				ВыполнитьЗагрузкуДанных(СтруктураРезультат.Отказ, УзелИнформационнойБазы);
			ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ВыгрузкаДанных" Тогда
				ВыполнитьВыгрузкуДанных(СтруктураРезультат.Отказ, УзелИнформационнойБазы);
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестное действие ""%1"" при обмене данными между областями данных.'"),
					СтрокаСценария.ВыполняемоеДействие);
			КонецЕсли;
		Исключение
			СтруктураРезультат.Отказ = Истина;
			СтруктураРезультат.Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеВыполняемогоДействияЖР + Символы.ПС + СтруктураРезультат.Информация);
				
			ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
				
			ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
			Возврат;
		КонецПопытки;
		
		СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
		
		ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
		
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
		
	ИначеЕсли СтрокаСценария.НомерИнформационнойБазы = 2 Тогда
		
		Попытка
			УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодЭтогоУзла);
			
			ОписаниеWSПрокси = ОписаниеWSПроксиКорреспондента(УзелИнформационнойБазы);
			
			Если ОписаниеWSПрокси.WSПрокси = Неопределено Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось получить описание WS-прокси для приложения ""%1"".'"),
					УзелИнформационнойБазы);
			Иначе
				ПараметрСценарийОбменаДанными = ?(ОписаниеWSПрокси.ПоддерживаетсяСериализацияXDTO,
					СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными),
					ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
					
				ОписаниеWSПрокси.WSПрокси.StartExchangeExecutionInSecondDataBase(ИндексСтрокиСценария, ПараметрСценарийОбменаДанными);
			КонецЕсли;
		Исключение
			СтруктураРезультат.Отказ = Истина;
			СтруктураРезультат.Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
				УровеньЖурналаРегистрации.Ошибка, , , ОписаниеВыполняемогоДействияЖР + Символы.ПС + СтруктураРезультат.Информация);
				
			ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
				
			ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для второй из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	ОписаниеВыполняемогоДействияЖР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполнение шага сценария синхронизации (%1/%2).'"), ИндексСтрокиСценария + 1, СценарийОбменаДанными.Количество())
		+ Символы.ПС + ОписаниеСтрокиСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
		УровеньЖурналаРегистрации.Информация, , , ОписаниеВыполняемогоДействияЖР);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	Если СтрокаСценария.ПорядковыйНомерВыполнения = 1 Тогда
		// Сбрасываем признак кумулятивного изменения данных для обмена.
		Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Отказ",          Ложь);
	СтруктураРезультат.Вставить("ДатаНачала",     ТекущаяДатаСеанса());
	СтруктураРезультат.Вставить("ДатаЗавершения", '00010101');
	СтруктураРезультат.Вставить("Информация",     "");
	
	УзелИнформационнойБазы = Неопределено;
	Попытка
		УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
	Исключение
		СтруктураРезультат.Отказ = Истина;
		СтруктураРезультат.Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеВыполняемогоДействияЖР + Символы.ПС + СтруктураРезультат.Информация);
			
		ЗавершитьВыполнениеСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными, СтруктураРезультат);
		Возврат;
	КонецПопытки;
	
	Попытка
		Если Не ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелИнформационнойБазы) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Настройка синхронизации данных в приложении ""%1"" не завершена.'"),
				УзелИнформационнойБазы);
		ИначеЕсли ОбменДаннымиСервер.ПолученоСообщениеСДаннымиДляСопоставления(УзелИнформационнойБазы) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В приложение ""%1"" загружено сообщение для ручного сопоставления.'"),
				УзелИнформационнойБазы);
		ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ЗагрузкаДанных" Тогда
			ВыполнитьЗагрузкуДанных(СтруктураРезультат.Отказ, УзелИнформационнойБазы);
		ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ВыгрузкаДанных" Тогда
			ВыполнитьВыгрузкуДанных(СтруктураРезультат.Отказ, УзелИнформационнойБазы);
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестное действие ""%1"" при обмене данными между областями данных.'"),
				СтрокаСценария.ВыполняемоеДействие);
		КонецЕсли;
	Исключение
		СтруктураРезультат.Отказ = Истина;
		СтруктураРезультат.Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеВыполняемогоДействияЖР + Символы.ПС + СтруктураРезультат.Информация);
	КонецПопытки;
	СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
	
	ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
	
	// Завершение выполнения сценария.
	Если ИндексСтрокиСценария = СценарийОбменаДанными.Количество() - 1 Тогда
		ЗавершитьВыполнениеСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными, СтруктураРезультат);
		Возврат;
	КонецЕсли;
	
	Попытка
		ОписаниеWSПрокси = ОписаниеWSПроксиКорреспондента(УзелИнформационнойБазы);
		
		Если ОписаниеWSПрокси.WSПрокси = Неопределено Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось получить описание WS-прокси для приложения ""%1"".'"),
				УзелИнформационнойБазы);
		Иначе
			ПараметрСценарийОбменаДанными = ?(ОписаниеWSПрокси.ПоддерживаетсяСериализацияXDTO,
				СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными),
				ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
			ОписаниеWSПрокси.WSПрокси.StartExchangeExecutionInFirstDataBase(ИндексСтрокиСценария + 1, ПараметрСценарийОбменаДанными);
		КонецЕсли;
	Исключение
		СтруктураРезультат.Отказ = Истина;
		СтруктураРезультат.Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеВыполняемогоДействияЖР + Символы.ПС + СтруктураРезультат.Информация);
			
		ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
			
		ЗавершитьВыполнениеСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными, СтруктураРезультат);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными, СтруктураРезультат = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
		УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Завершение выполнения сценария синхронизации.'"));
		
	Если Не СтруктураРезультат = Неопределено Тогда
		СтруктураРезультат.ДатаЗавершения = ТекущаяДатаСеанса();
		
		СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
		ЗаполнитьЗначенияСвойств(СтрокаСценария, СтруктураРезультат);
	КонецЕсли;
	
	Попытка
		WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
		WSПроксиСервиса.CommitExchange(СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
	Исключение
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСинхронизацииДанных(),
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ОписаниеСтрокиСценарияОбменаДанными(ИндексСтрокиСценария, СценарийОбменаДанными)
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("ПорядковыйНомерВыполнения");
	СтруктураСтроки.Вставить("НомерИнформационнойБазы");
	СтруктураСтроки.Вставить("ВыполняемоеДействие");
	СтруктураСтроки.Вставить("Приложение1Код");
	СтруктураСтроки.Вставить("Приложение2Код");
	СтруктураСтроки.Вставить("Режим");
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СценарийОбменаДанными[ИндексСтрокиСценария]);
	
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ПорядковыйНомер: %1, Приложение: %2, Действие: %3(%4), Режим: %5.'"),
		СтруктураСтроки.ПорядковыйНомерВыполнения,
		?(СтруктураСтроки.НомерИнформационнойБазы = 1, СтруктураСтроки.Приложение1Код, СтруктураСтроки.Приложение2Код),
		СтруктураСтроки.ВыполняемоеДействие,
		?(СтруктураСтроки.НомерИнформационнойБазы = 1, СтруктураСтроки.Приложение2Код, СтруктураСтроки.Приложение1Код),
		СтруктураСтроки.Режим);
	
	Возврат Описание;
	
КонецФункции

// Выполняет удаление узла обмена в этой базе.
//
Процедура УдалитьНастройкуСинхронизации(ИмяПланаОбмена, КодУзлаКорреспондента) Экспорт
	
	Корреспондент = НайтиУзелИнформационнойБазы(ИмяПланаОбмена, КодУзлаКорреспондента);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обработка сообщения удаления настройки синхронизации ""%1"" с приложением ""%2"".'"),
		ИмяПланаОбмена, КодУзлаКорреспондента);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
		УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
	
	НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.НастройкиТранспорта(Корреспондент);
	
	Если НастройкиТранспорта <> Неопределено Тогда
		
		Если НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
			
			Если Не ПустаяСтрока(НастройкиТранспорта.FILEОбщийКаталогОбменаИнформацией)
				И Не ПустаяСтрока(НастройкиТранспорта.ОтносительныйКаталогОбменаИнформацией) Тогда
				
				АбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
					НастройкиТранспорта.FILEОбщийКаталогОбменаИнформацией,
					НастройкиТранспорта.ОтносительныйКаталогОбменаИнформацией);
				
				АбсолютныйКаталог = Новый Файл(АбсолютныйКаталогОбменаИнформацией);
				
				Попытка
					УдалитьФайлы(АбсолютныйКаталог.ПолноеИмя);
				Исключение
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
						УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
			
			Попытка
				
				НастройкиFTP = ОбменДаннымиСервер.FTPНастройкиСоединения();
				НастройкиFTP.Сервер               = НастройкиТранспорта.FTPСервер;
				НастройкиFTP.Порт                 = НастройкиТранспорта.FTPСоединениеПорт;
				НастройкиFTP.ИмяПользователя      = НастройкиТранспорта.FTPСоединениеПользователь;
				НастройкиFTP.ПарольПользователя   = НастройкиТранспорта.FTPСоединениеПароль;
				НастройкиFTP.ПассивноеСоединение  = НастройкиТранспорта.FTPСоединениеПассивноеСоединение;
				НастройкиFTP.ЗащищенноеСоединение = ОбменДаннымиСервер.ЗащищенноеСоединение(НастройкиТранспорта.FTPСоединениеПуть);
				
				FTPСоединение = ОбменДаннымиСервер.FTPСоединение(НастройкиFTP);
				
				Если ОбменДаннымиСервер.FTPКаталогСуществует(НастройкиТранспорта.FTPПуть, НастройкиТранспорта.ОтносительныйКаталогОбменаИнформацией, FTPСоединение) Тогда
					FTPСоединение.Удалить(НастройкиТранспорта.FTPПуть);
				КонецЕсли;
				
			Исключение
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
					УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем узел корреспондента
	Корреспондент.ПолучитьОбъект().Удалить();
	
КонецПроцедуры

// Определяет, выполняется ли обмен в настоящее время.
// Для этого посылается запрос к менеджеру сервиса, установлена ли блокировка обмена.
//
// Возвращаемое значение:
// Булево. 
//
Функция ВСистемеВыполняетсяОбменДанными() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
	
	Возврат WSПроксиСервиса.ExchangeBlockIsSet(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
КонецФункции

// Возвращает дату последней успешной загрузки текущей области данных для всех узлов ИБ.
// Если синхронизация данных еще не выполнялась, возвращает Неопределено.
//
// Возвращаемое значение:
// Дата; Неопределено. 
//
Функция ДатаПоследнейУспешнойЗагрузкиДляВсехУзловИнформационнойБазы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(СостоянияУспешныхОбменовДанными.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбменаОбластиДанных КАК НастройкиТранспорта
	|		ПО (НастройкиТранспорта.Корреспондент = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы)
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|	И СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные = &ОбластьДанных";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(Выборка.ДатаОкончания), Выборка.ДатаОкончания, Неопределено);
	
КонецФункции

// Возвращает статусы синхронизации данных для приложений в модели сервиса
//
Функция СтатусыСинхронизацииДанных() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РезультатыОбменаДанными.ПроблемныйОбъект) КАК Количество
	|ПОМЕСТИТЬ ПроблемыОбменаДанными
	|ИЗ
	|	РегистрСведений.РезультатыОбменаДанными КАК РезультатыОбменаДанными
	|ГДЕ
	|	НЕ РезультатыОбменаДанными.Пропущена
	|СГРУППИРОВАТЬ ПО
	|	РезультатыОбменаДанными.УзелИнформационнойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы КАК Приложение,
	|	ЕСТЬNULL(ПроблемыОбменаДанными.Количество, 0)          КАК КоличествоПроблем,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДаннымиВыгрузка.Статус = 1 ИЛИ СостоянияОбменовДаннымиЗагрузка.Статус = 1
	|			ТОГДА 1 // Ошибка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ПроблемыОбменаДанными.Количество, 0) > 0
	|					ТОГДА 2 // Проблемы обмена
	|				ИНАЧЕ 3 // Нет ошибок и нет проблем обмена
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроблемыОбменаДанными КАК ПроблемыОбменаДанными
	|		ПО СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы = ПроблемыОбменаДанными.УзелИнформационнойБазы";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Генерирует код узла плана обмена для заданной области данных.
//
// Параметры:
// НомерОбласти - Число - Значение разделителя. 
//
// Возвращаемое значение:
// Строка - Код узла плана обмена для заданной области. 
//
Функция КодУзлаПланаОбменаВСервисе(Знач НомерОбласти) Экспорт
	
	Если ТипЗнч(НомерОбласти) <> Тип("Число") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра номер [1].'");
	КонецЕсли;
	
	Результат = "S0[НомерОбласти]";
	
	Возврат СтрЗаменить(Результат, "[НомерОбласти]", Формат(НомерОбласти, "ЧЦ=7; ЧВН=; ЧГ=0"));
	
КонецФункции

// Формирует имя приложения в сервисе
//
Функция СформироватьНаименованиеПредопределенногоУзла() Экспорт
	
	ИмяПриложения = РаботаВМоделиСервиса.ПолучитьИмяПриложения();
	
	Возврат ?(ПустаяСтрока(ИмяПриложения), НСтр("ru = 'Приложение в Интернете'"), ИмяПриложения);
КонецФункции

// Получает конечную точку для корреспондента.
// Если конечная точка для корреспондента не задана то вызывает исключение.
//
// Параметры:
//	Корреспондент - ПланОбменаСсылка - корреспондент, для которого необходимо получить конечную точку.
//
// Возвращаемое значение:
//	ПланОбменаСсылка.ОбменСообщениями - конечная точка корреспондента.
//
Функция КонечнаяТочкаКорреспондента(Знач Корреспондент) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиТранспорта.КонечнаяТочкаКорреспондента КАК КонечнаяТочкаКорреспондента
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаОбластиДанных КАК НастройкиТранспорта
	|ГДЕ
	|	НастройкиТранспорта.Корреспондент = &Корреспондент";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = НСтр("ru = 'Не назначена конечная точка корреспондента для ""%1"".'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Корреспондент));
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КонечнаяТочкаКорреспондента;
КонецФункции

Функция ИмяКаталогаСообщенийОбмена(Знач Код1, Знач Код2)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Exchange %1-%2", Код1, Код2);
	
КонецФункции

// Регистрирует обработчики поставляемых данных
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.КодОбработчика = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.Обработчик = ОбменДаннымиВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОписаниеПоставляемыхПравил = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
		
		Если ОписаниеПоставляемыхПравил.ИмяКонфигурации = Метаданные.Имя
			И ОписаниеПоставляемыхПравил.ВерсияКонфигурации = Метаданные.Версия
			И Метаданные.ПланыОбмена.Найти(ОписаниеПоставляемыхПравил.ИмяПланаОбмена) <> Неопределено
			И ОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ОписаниеПоставляемыхПравил.ИмяПланаОбмена)
			И ОбменДаннымиСервер.ЭтоРазделенныйПланОбменаБСП(ОписаниеПоставляемыхПравил.ИмяПланаОбмена) Тогда // Правила совместимы с ИБ
			
			Загружать = Истина;
			
		Иначе
			
			Загружать = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Поставляемые правила обмена не подходят для текущей конфигурации и предназначены для плана обмена %1 конфигурации %2 версии %3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
				ОписаниеПоставляемыхПравил.ИмяПланаОбмена, ОписаниеПоставляемыхПравил.ИмяКонфигурации, ОписаниеПоставляемыхПравил.ВерсияКонфигурации);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые правила обмена данными.Загрузка поставляемых правил отменена'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		ОбработатьПоставляемыеПравилаОбмена(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
КонецПроцедуры

// Возвращает идентификатор вида поставляемых данных для правил обмена данными
//
// Возвращаемое значение: Строка.
//
Функция ИдентификаторВидаПоставляемыхДанных()
	
	Возврат "ER"; // Не локализуется
	
КонецФункции

Функция ОписаниеПоставляемыхПравил()
	
	Возврат Новый Структура("ИмяКонфигурации, ВерсияКонфигурации, ИмяПланаОбмена, Использовать");
	
КонецФункции

Функция РазобратьДескрипторПоставляемыхДанных(Дескриптор)
	
	ОписаниеПоставляемыхПравил = ОписаниеПоставляемыхПравил();
	
	Для Каждого ХарактеристикаПоставляемыхДанных Из Дескриптор.Properties.Property Цикл
		
		ОписаниеПоставляемыхПравил[ХарактеристикаПоставляемыхДанных.Code] = ХарактеристикаПоставляемыхДанных.Value;
		
	КонецЦикла;
	
	Возврат ОписаниеПоставляемыхПравил;
	
КонецФункции

Процедура ОбработатьПоставляемыеПравилаОбмена(Дескриптор, ПутьКФайлу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Прочитаем характеристики экземпляра поставляемых данных
	ОписаниеПоставляемыхПравил = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
	
	Если ОписаниеПоставляемыхПравил.Использовать Тогда
		ОбменДаннымиСервер.ЗагрузитьПоставляемыеПравила(ОписаниеПоставляемыхПравил.ИмяПланаОбмена, ПутьКФайлу);
	Иначе
		ОбменДаннымиСервер.УдалитьПоставляемыеПравила(ОписаниеПоставляемыхПравил.ИмяПланаОбмена);
	КонецЕсли;
	
	ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Функция ОписаниеWSПроксиКорреспондента(Корреспондент)
	
	Описание = Новый Структура;
	Описание.Вставить("WSПрокси",                       Неопределено);
	Описание.Вставить("ПоддерживаетсяСериализацияXDTO", Истина);
	
	ВерсииКорреспондента = ВерсииКорреспондента(Корреспондент);
		
	Если ВерсииКорреспондента.Найти("2.4.5.1") <> Неопределено Тогда
		
		Описание.WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_4_5_1(Корреспондент);
		
	ИначеЕсли ВерсииКорреспондента.Найти("2.1.6.1") <> Неопределено Тогда
		
		Описание.WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_1_6_1(Корреспондент);
	
	ИначеЕсли ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено Тогда
		
		Описание.WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_0_1_6(Корреспондент);
		
	Иначе
		
		Описание.WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента(Корреспондент);
		Описание.ПоддерживаетсяСериализацияXDTO = Ложь;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

// Отправляет сообщение
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение.
//
Функция ОтправитьСообщение(Знач Сообщение) Экспорт
	
	Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	Сообщение.Body.SessionId = РегистрыСведений.СессииОбменаСообщениямиСистемы.НоваяСессия();
	
	СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(), Истина);
	
	Возврат Сообщение.Body.SessionId;
КонецФункции

//

// Для внутреннего использования
//
Процедура СоздатьНастройкуОбмена(
			Знач ИмяПланаОбмена,
			Знач КодКорреспондента,
			Знач НаименованиеКорреспондента,
			Знач КонечнаяТочкаКорреспондента,
			Знач Настройки,
			Корреспондент = Неопределено,
			ЭтоКорреспондент = Ложь,
			РежимСовместимостиСБСП_2_0_0 = Ложь,
			Знач Префикс = "",
			ПсевдонимЭтогоУзла = "") Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		КодЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код");
		
		// Проверяем, что для текущего узла задан код
		Если ПустаяСтрока(КодЭтогоУзла) Тогда
			
			// Код узла задается в обработчике обновления ИБ
			СтрокаСообщения = НСтр("ru = 'Для предопределенного узла плана обмена ""%1"" не задан код.'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		// Проверяем префикс этой ИБ
		Если ПустаяСтрока(ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы")) Тогда
			
			Если ПустаяСтрока(Префикс) Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для продолжения настройки синхронизации данных необходимо
					|задать префикс информационной базы в приложении ""%1"".'"),
					Метаданные.Синоним);
			КонецЕсли;
			
			ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(Префикс);
			
		КонецЕсли;
		
		// Создаем/обновляем узел корреспондента
		Корреспондент = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодКорреспондента);
		
		ПроверитьКод = Ложь;
		
		Если Корреспондент.Пустая() Тогда
			КорреспондентОбъект = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
			КорреспондентОбъект.Код = КодКорреспондента;
			ПроверитьКод = Истина;
		Иначе
			КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
		КонецЕсли;
		
		КорреспондентОбъект.Наименование = НаименованиеКорреспондента;
		
		ОбменДаннымиСобытия.УстановитьЗначенияОтборовНаУзле(КорреспондентОбъект, Настройки);
		
		КорреспондентОбъект.НомерОтправленного = 0;
		КорреспондентОбъект.НомерПринятого     = 0;
		
		КорреспондентОбъект.РегистрироватьИзменения = Истина;
		
		КорреспондентОбъект.ОбменДанными.Загрузка = Истина;
		КорреспондентОбъект.Записать();
		
		Если Не ПустаяСтрока(ПсевдонимЭтогоУзла) Тогда
			ВиртуальныеКоды = РегистрыСведений["ПсевдонимыПредопределенныхУзлов"].СоздатьНаборЗаписей();
			ВиртуальныйКод = ВиртуальныеКоды.Добавить();
			ВиртуальныйКод.Корреспондент = КорреспондентОбъект.Ссылка;
			ВиртуальныйКод.КодУзла       = ПсевдонимЭтогоУзла;
			
			ВиртуальныеКоды.Записать();
		КонецЕсли;
		
		Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
			
			ТаблицаОбъектыБазы = ОбменДаннымиXDTOСервер.ПоддерживаемыеОбъектыФормата(ИмяПланаОбмена,
				"ОтправкаПолучение", КорреспондентОбъект.Ссылка);
			ТаблицаОбъектыКорреспондента = ТаблицаОбъектыБазы.СкопироватьКолонки();
			
			Для Каждого СтрокаОбъектыБазы Из ТаблицаОбъектыБазы Цикл
				СтрокаОбъектыКорреспондента = ТаблицаОбъектыКорреспондента.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОбъектыКорреспондента, СтрокаОбъектыБазы, "Версия, Объект");
				СтрокаОбъектыКорреспондента.Отправка  = СтрокаОбъектыБазы.Получение;
				СтрокаОбъектыКорреспондента.Получение = СтрокаОбъектыБазы.Отправка;
			КонецЦикла;
			
			МенеджерНастройкиXDTO = ОбщегоНазначения.ОбщийМодуль("РегистрыСведений.НастройкиОбменаДаннымиXDTO");
			МенеджерНастройкиXDTO.ОбновитьНастройки(
				КорреспондентОбъект.Ссылка, "ПоддерживаемыеОбъекты", ТаблицаОбъектыБазы);
			МенеджерНастройкиXDTO.ОбновитьНастройкиКорреспондента(
				КорреспондентОбъект.Ссылка, "ПоддерживаемыеОбъекты", ТаблицаОбъектыКорреспондента);
			
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы",       КорреспондентОбъект.Ссылка);
			СтруктураЗаписи.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбмена);
			
			ОбменДаннымиСервер.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "НастройкиОбменаДаннымиXDTO");
		КонецЕсли;
		
		// Общие данные узлов.
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ОбновитьПрефиксы(
			КорреспондентОбъект.Ссылка,
			Префикс);
			
		Если Не ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(КорреспондентОбъект.Ссылка) Тогда
			ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(КорреспондентОбъект.Ссылка);
		КонецЕсли;
		
		Корреспондент = КорреспондентОбъект.Ссылка;
		
		ФактическийКодКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "Код");
		
		Если ПроверитьКод И КодКорреспондента <> ФактическийКодКорреспондента Тогда
			
			СтрокаСообщения = НСтр("ru = 'Ошибка назначения кода узла корреспондента.
				|Назначенное значение ""%1""
				|Фактическое значение ""%2"".'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КодКорреспондента, ФактическийКодКорреспондента);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		// Работа с настройками транспорта.
		Параметры = Новый Структура;
		Параметры.Вставить("Корреспондент", Корреспондент);
		Параметры.Вставить("КодЭтогоУзла", КодЭтогоУзла);
		Параметры.Вставить("КодКорреспондента", КодКорреспондента);
		Параметры.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
		Параметры.Вставить("ЭтоКорреспондент", ЭтоКорреспондент);
		Параметры.Вставить("РежимСовместимостиСБСП_2_0_0", РежимСовместимостиСБСП_2_0_0);
		Параметры.Вставить("ПсевдонимЭтогоУзла", ПсевдонимЭтогоУзла);
		
		ОбновитьНастройкиТранспортаОбластиДанных(Параметры);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьНастройкуОбмена_3_0_1_1(НастройкиПодключения,
		ЭтоКорреспондент = Ложь,
		РежимСовместимостиСБСП_2_0_0 = Ложь,
		ПсевдонимЭтогоУзла = "") Экспорт
		
	КодЭтогоУзла = НастройкиПодключения.ИдентификаторИнформационнойБазыИсточника;
	
	// Проверяем, что для текущего узла задан код.
	Если ПустаяСтрока(КодЭтогоУзла) Тогда
		// Код узла задается в обработчике обновления ИБ.
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для предопределенного узла плана обмена ""%1"" не задан код.'"),
			НастройкиПодключения.ИмяПланаОбмена);
	КонецЕсли;
		
	УстановитьПрефикс = Ложь;
	Если ПустаяСтрока(ОбменДаннымиСервер.ПрефиксИнформационнойБазы()) Тогда
		Если ПустаяСтрока(НастройкиПодключения.Префикс) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для продолжения настройки синхронизации данных необходимо
				|задать префикс информационной базы в приложении ""%1"".'"),
				Метаданные.Синоним);
		КонецЕсли;
		
		УстановитьПрефикс = Истина;
	Иначе
		НастройкиПодключения.Префикс = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если УстановитьПрефикс Тогда
			ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(НастройкиПодключения.Префикс);
		КонецЕсли;
		
		// Создаем/обновляем узел корреспондента.
		Корреспондент = ПланыОбмена[НастройкиПодключения.ИмяПланаОбмена].НайтиПоКоду(
			НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника);
		
		ПроверитьКод = Ложь;
		Если Корреспондент.Пустая() Тогда
			КорреспондентОбъект = ПланыОбмена[НастройкиПодключения.ИмяПланаОбмена].СоздатьУзел();
			КорреспондентОбъект.Код = НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВариантНастройки", КорреспондентОбъект.Метаданные())
				И НастройкиПодключения.Свойство("ИдентификаторНастройки") Тогда
				КорреспондентОбъект.ВариантНастройки = НастройкиПодключения.ИдентификаторНастройки;
			КонецЕсли;
			
			ПроверитьКод = Истина;
		Иначе
			КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
		КонецЕсли;
		
		КорреспондентОбъект.Наименование = НастройкиПодключения.НаименованиеКорреспондента;
		
		Если ПроверитьКод Тогда
			КорреспондентОбъект.Заполнить(Неопределено);
		КонецЕсли;
		
		КорреспондентОбъект.НомерОтправленного = 0;
		КорреспондентОбъект.НомерПринятого     = 0;
		
		КорреспондентОбъект.РегистрироватьИзменения = Истина;
		
		// Версия формата обмена.
		Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(НастройкиПодключения.ИмяПланаОбмена)
			И НастройкиПодключения.Свойство("НастройкиXDTOКорреспондента") Тогда
			
			КорреспондентОбъект.ВерсияФорматаОбмена = ОбменДаннымиXDTOСервер.МаксимальнаяОбщаяВерсияФормата(
				НастройкиПодключения.ИмяПланаОбмена, НастройкиПодключения.НастройкиXDTOКорреспондента.ПоддерживаемыеВерсии);
				
		КонецЕсли;
		
		КорреспондентОбъект.ОбменДанными.Загрузка = Истина;
		КорреспондентОбъект.Записать();
		
		Корреспондент = КорреспондентОбъект.Ссылка;
		
		// Настройки XDTO корреспондента.
		Если ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(НастройкиПодключения.ИмяПланаОбмена) Тогда
			
			Если НастройкиПодключения.Свойство("НастройкиXDTOКорреспондента") Тогда
				РегистрыСведений.НастройкиОбменаДаннымиXDTO.ОбновитьНастройкиКорреспондента(Корреспондент,
					"ПоддерживаемыеОбъекты",
					НастройкиПодключения.НастройкиXDTOКорреспондента.ПоддерживаемыеОбъекты.Получить());
			КонецЕсли;
			
			РегистрыСведений.НастройкиОбменаДаннымиXDTO.ОбновитьНастройкиКорреспондента(Корреспондент,
				"ОбластьДанныхКорреспондента",
				НастройкиПодключения.ОбластьДанныхКорреспондента);
			
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы",       Корреспондент);
			СтруктураЗаписи.Вставить("ИмяПланаОбменаКорреспондента", НастройкиПодключения.ИмяПланаОбмена);
			
			ОбменДаннымиСервер.ОбновитьЗаписьВРегистрСведений(СтруктураЗаписи, "НастройкиОбменаДаннымиXDTO");
			
		КонецЕсли;
		
		// Общие данные узлов.
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ОбновитьПрефиксы(
			Корреспондент,
			НастройкиПодключения.Префикс,
			НастройкиПодключения.ПрефиксКорреспондента);
			
		Если Не ПустаяСтрока(ПсевдонимЭтогоУзла) Тогда
			ВиртуальныеКоды = РегистрыСведений["ПсевдонимыПредопределенныхУзлов"].СоздатьНаборЗаписей();
			ВиртуальныйКод = ВиртуальныеКоды.Добавить();
			ВиртуальныйКод.Корреспондент = Корреспондент;
			ВиртуальныйКод.КодУзла       = ПсевдонимЭтогоУзла;
			
			ВиртуальныеКоды.Записать();
		КонецЕсли;
		
		ФактическийКодКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "Код");
		
		Если ПроверитьКод
			И НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника <> ФактическийКодКорреспондента Тогда
			СтрокаСообщения = НСтр("ru = 'Ошибка назначения кода узла корреспондента.
				|Назначенное значение ""%1""
				|Фактическое значение ""%2"".'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
				НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника,
				ФактическийКодКорреспондента);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		// Работа с настройками транспорта.
		Параметры = Новый Структура;
		Параметры.Вставить("Корреспондент", Корреспондент);
		Параметры.Вставить("КодЭтогоУзла", КодЭтогоУзла);
		Параметры.Вставить("КодКорреспондента", НастройкиПодключения.ИдентификаторИнформационнойБазыПриемника);
		Параметры.Вставить("КонечнаяТочкаКорреспондента", НастройкиПодключения.КонечнаяТочкаКорреспондента);
		Параметры.Вставить("ЭтоКорреспондент", ЭтоКорреспондент);
		Параметры.Вставить("РежимСовместимостиСБСП_2_0_0", РежимСовместимостиСБСП_2_0_0);
		Параметры.Вставить("ПсевдонимЭтогоУзла", ПсевдонимЭтогоУзла);
		
		ОбновитьНастройкиТранспортаОбластиДанных(Параметры);
		
		НастройкиПодключения.Корреспондент = Корреспондент;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьНастройкиТранспортаОбластиДанных(Параметры)
	
	Корреспондент                = Параметры.Корреспондент;
	КодЭтогоУзла                 = Параметры.КодЭтогоУзла;
	КодКорреспондента            = Параметры.КодКорреспондента;
	КонечнаяТочкаКорреспондента  = Параметры.КонечнаяТочкаКорреспондента;
	ЭтоКорреспондент             = Параметры.ЭтоКорреспондент;
	РежимСовместимостиСБСП_2_0_0 = Параметры.РежимСовместимостиСБСП_2_0_0;
	ПсевдонимЭтогоУзла           = Параметры.ПсевдонимЭтогоУзла;
	
	Если ЭтоКорреспондент Тогда
		Если Не ПустаяСтрока(ПсевдонимЭтогоУзла) Тогда
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(КодКорреспондента, ПсевдонимЭтогоУзла);
		Иначе
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(КодКорреспондента, КодЭтогоУзла);
		КонецЕсли;
	Иначе
		Если Не ПустаяСтрока(ПсевдонимЭтогоУзла) Тогда
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(ПсевдонимЭтогоУзла, КодКорреспондента);
		Иначе
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(КодЭтогоУзла, КодКорреспондента);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаОбластейДанных.НастройкиТранспорта(КонечнаяТочкаКорреспондента);
	
	Если НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		// Обмен через сетевой каталог
		
		FILEОбщийКаталогОбменаИнформацией = СокрЛП(НастройкиТранспорта.FILEКаталогОбменаИнформацией);
		
		Если ПустаяСтрока(FILEОбщийКаталогОбменаИнформацией) Тогда
			
			СтрокаСообщения = НСтр("ru = 'Не задан каталог обмена информацией для конечной точки ""%1"".'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(КонечнаяТочкаКорреспондента));
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		ОбщийКаталог = Новый Файл(FILEОбщийКаталогОбменаИнформацией);
		
		Если Не ОбщийКаталог.Существует() Тогда
			
			СтрокаСообщения = НСтр("ru = 'Каталог обмена информацией ""%1"" не существует.'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, FILEОбщийКаталогОбменаИнформацией);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		Если Не РежимСовместимостиСБСП_2_0_0 Тогда
			
			FILEАбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				FILEОбщийКаталогОбменаИнформацией,
				ОтносительныйКаталогОбменаИнформацией);
			
			// Создаем каталог обмена сообщениями
			АбсолютныйКаталог = Новый Файл(FILEАбсолютныйКаталогОбменаИнформацией);
			Если Не АбсолютныйКаталог.Существует() Тогда
				СоздатьКаталог(АбсолютныйКаталог.ПолноеИмя);
			КонецЕсли;
			
			// Сохраняем настройки транспорта сообщений обмена для текущей области данных
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Корреспондент", Корреспондент);
			СтруктураЗаписи.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
			СтруктураЗаписи.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией);
			
			РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ОбновитьЗапись(СтруктураЗаписи);
		КонецЕсли;
		
	ИначеЕсли НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
		
		// Обмен через FTP-сервер
		
		НастройкиFTP = ОбменДаннымиСервер.FTPНастройкиСоединения();
		НастройкиFTP.Сервер               = НастройкиТранспорта.FTPСервер;
		НастройкиFTP.Порт                 = НастройкиТранспорта.FTPСоединениеПорт;
		НастройкиFTP.ИмяПользователя      = НастройкиТранспорта.FTPСоединениеПользователь;
		НастройкиFTP.ПарольПользователя   = НастройкиТранспорта.FTPСоединениеПароль;
		НастройкиFTP.ПассивноеСоединение  = НастройкиТранспорта.FTPСоединениеПассивноеСоединение;
		НастройкиFTP.ЗащищенноеСоединение = ОбменДаннымиСервер.ЗащищенноеСоединение(НастройкиТранспорта.FTPСоединениеПуть);
		
		FTPСоединение = ОбменДаннымиСервер.FTPСоединение(НастройкиFTP);
		
		АбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
			НастройкиТранспорта.FTPПуть,
			ОтносительныйКаталогОбменаИнформацией);
		Если Не ОбменДаннымиСервер.FTPКаталогСуществует(АбсолютныйКаталогОбменаИнформацией, ОтносительныйКаталогОбменаИнформацией, FTPСоединение) Тогда
			FTPСоединение.СоздатьКаталог(АбсолютныйКаталогОбменаИнформацией);
		КонецЕсли;
		
		// Сохраняем настройки транспорта сообщений обмена для текущей области данных
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Корреспондент", Корреспондент);
		СтруктураЗаписи.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
		СтруктураЗаписи.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией);
		
		РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ОбновитьЗапись(СтруктураЗаписи);
		
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид транспорта сообщений обмена ""%1"" для конечной точки %2 не поддерживается.'"),
			Строка(НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию),
			Строка(КонечнаяТочкаКорреспондента));
	КонецЕсли;
		
КонецПроцедуры

// Обновляет настройки и устанавливает значения по умолчанию на узле
//
Процедура ОбновитьНастройкуОбмена(
		Знач Корреспондент,
		Знач ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
	
	// установка значений по умолчанию 
	ОбменДаннымиСобытия.УстановитьЗначенияПоУмолчаниюНаУзле(КорреспондентОбъект, ЗначенияПоУмолчаниюНаУзле);
	
	КорреспондентОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
	КорреспондентОбъект.Записать();
	
КонецПроцедуры

// Сохраняет данные сессии и отмечает успешное выполнение сессии
//
Процедура СохранитьДанныеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = " "+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '{%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Сессия обмена сообщениями системы ""%1"" успешно завершена.%2'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Информация,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.СохранитьДанныеСессии(Сообщение.Body.SessionId, Сообщение.Body.Data);
	
КонецПроцедуры

// Отмечает успешное выполнение сессии
//
Процедура ЗафиксироватьУспешноеВыполнениеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '{%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Сессия обмена сообщениями системы ""%1"" успешно завершена.%2'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Информация,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение.Body.SessionId);
	
КонецПроцедуры

// Отмечает неуспешное выполнение сессии
//
Процедура ЗафиксироватьНеуспешноеВыполнениеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '{%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Ошибка выполнения сессии обмена сообщениями системы ""%1"".%2
		|Описание ошибки из корреспондента: %3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление, Сообщение.Body.ErrorDescription);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение.Body.SessionId);
	
КонецПроцедуры

// Выполняет вход в область и действие сценария обмена, заданное строкой таблицы значений, для первой из двух
// обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет вход в область и действие сценария обмена, заданное строкой таблицы значений, для второй из двух
// обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает минимально необходимую версию платформы
//
Функция ТребуемаяВерсияПлатформы() Экспорт
	
	ВерсияПлатформы = "";
	ВерсияПлатформы = ОбменДаннымиВМоделиСервисаПереопределяемый.ТребуемаяВерсияПриложения();
	ОбменДаннымиВМоделиСервисаПереопределяемый.ПриОпределенииТребуемойВерсииПриложения(ВерсияПлатформы);
	Если ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Возврат ВерсияПлатформы;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СтрРазделить(СистемнаяИнформация.ВерсияПриложения, ".");
	
	// Удаляем из номера версии дополнительный номер релиза (последний номер)
	ВерсияПлатформы.Удалить(3);
	Возврат СтрСоединить(ВерсияПлатформы, ".");
	
КонецФункции

// Событие для журнала регистрации настройки синхронизации данных
//
Функция СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Настройка синхронизации данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Событие для журнала регистрации монитора синхронизации данных
//
Функция СобытиеЖурналаРегистрацииМониторСинхронизацииДанных() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Монитор синхронизации данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Событие для журнала регистрации синхронизации данных
//
Функция СобытиеЖурналаРегистрацииСинхронизацииДанных() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Синхронизация данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы()
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Сессии обмена сообщениями системы'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции монитора обмена данными

// Для внутреннего использования
// 
Функция ТаблицаМонитораОбменаДанными(Знач ПланыОбменаМетода, Знач ДополнительныеСвойстваПланаОбмена = "", Знач ТолькоНеуспешные = Ложь) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	ПланыОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ПланыОбмена.ОбластьДанныхОсновныеДанные КАК ОбластьДанных,
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейВыгрузкиДанных,
	|	ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейЗагрузкиДанных,
	|	СостоянияОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейЗагрузки,
	|	СостоянияОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейВыгрузки,
	|	СостоянияУспешныхОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейУспешнойЗагрузки,
	|	СостоянияУспешныхОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейУспешнойВыгрузки
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиЗагрузка КАК СостоянияУспешныхОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиВыгрузка КАК СостоянияУспешныхОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|
	|[Отбор]
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.ИмяПланаОбмена,
	|	ПланыОбмена.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПодготовитьДанныеУзловПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМетода, ДополнительныеСвойстваПланаОбмена);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваПланаОбмена]",
		ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(ДополнительныеСвойстваПланаОбмена));
	
	Если ТолькоНеуспешные Тогда
		Отбор = "
			|ГДЕ
			|	    ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) <> 0
			|	ИЛИ ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) <> 0";
	Иначе
		Отбор = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НастройкиСинхронизации = Запрос.Выполнить().Выгрузить();
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейВыгрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойВыгрузки");
	
	Для Каждого НастройкаСинхронизации Из НастройкиСинхронизации Цикл
		
		НастройкаСинхронизации.ПредставлениеДатыПоследнейЗагрузки         = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейВыгрузки         = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейВыгрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойЗагрузки = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойВыгрузки = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойВыгрузки);
		
	КонецЦикла;
	
	Возврат НастройкиСинхронизации;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(Знач СвойстваСтрокой)
	
	Результат = "";
	
	Шаблон = "ПланыОбмена.[СвойствоСтрокой] КАК [СвойствоСтрокой]";
	
	СвойстваМассив = СтрРазделить(СвойстваСтрокой, ",", Ложь);
	
	Для Каждого СвойствоСтрокой Из СвойстваМассив Цикл
		
		СвойствоСтрокойВЗапросе = СтрЗаменить(Шаблон, "[СвойствоСтрокой]", СвойствоСтрокой);
		
		Результат = Результат + СвойствоСтрокойВЗапросе + ", ";
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Процедура ПодготовитьДанныеУзловПлановОбменаДляМонитора(Знач МенеджерВременныхТаблиц, Знач ПланыОбменаМетода, Знач ДополнительныеСвойстваПланаОбмена)
	
	ДополнительныеСвойстваПланаОбменаСтрокой = ?(ПустаяСтрока(ДополнительныеСвойстваПланаОбмена), "", ДополнительныеСвойстваПланаОбмена + ", ");
	
	Запрос = Новый Запрос;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	ОбластьДанныхОсновныеДанные КАК ОбластьДанныхОсновныеДанные,
	|	Наименование                КАК Наименование,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	РегистрироватьИзменения
	|	И НЕ ПометкаУдаления
	|";
	
	ТекстЗапроса = "";
	
	Если ПланыОбменаМетода.Количество() > 0 Тогда
		
		Для Каждого ИмяПланаОбмена Из ПланыОбменаМетода Цикл
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        ИмяПланаОбмена);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Метаданные.ПланыОбмена[ИмяПланаОбмена].Синоним);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
			
			// удаляем литерал объединения для первой таблицы
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
			
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСвойстваБезИсточникаДанныхСтрокой = "";
		
		Если Не ПустаяСтрока(ДополнительныеСвойстваПланаОбмена) Тогда
			
			ДополнительныеСвойства = СтрРазделить(ДополнительныеСвойстваПланаОбмена, ",");
			
			ДополнительныеСвойстваБезИсточникаДанных = Новый Массив;
			
			Для Каждого Свойство Из ДополнительныеСвойства Цикл
				
				ДополнительныеСвойстваБезИсточникаДанных.Добавить(СтрЗаменить("Неопределено КАК [Свойство]", "[Свойство]", Свойство));
				
			КонецЦикла;
			
			ДополнительныеСвойстваБезИсточникаДанныхСтрокой = СтрСоединить(ДополнительныеСвойстваБезИсточникаДанных) + ", ";
			
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]
		|
		|	Неопределено КАК УзелИнформационнойБазы,
		|	0            КАК ОбластьДанныхОсновныеДанные,
		|	Неопределено КАК Наименование,
		|	Неопределено КАК ИмяПланаОбмена
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]", ДополнительныеСвойстваБезИсточникаДанныхСтрокой);
		
	КонецЕсли;
	
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	УзелИнформационнойБазы,
	|	ОбластьДанныхОсновныеДанные,
	|	Наименование,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

Функция НайтиУзелИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла)
	
	ОбластьДанных = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(КодУзла);
	
	КодУзлаСПрефиксом = КодУзлаПланаОбменаВСервисе(ОбластьДанных);
	
	// Поиск узла по формату кода узла "S00000123".
	Результат = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзлаСПрефиксом);
	
	Если Результат = Неопределено Тогда
		
		// Поиск узла по формату кода узла "0000123" (старый формат)
		Результат = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла);
		
	КонецЕсли;
	
	Если Результат = Неопределено
		И ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК УзелОбмена
		|ИЗ
		|	#ТаблицаПланаОбмена КАК Т
		|ГДЕ
		|	НЕ Т.ЭтотУзел");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"#ТаблицаПланаОбмена", "ПланОбмена." + ИмяПланаОбмена);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбластьДанныхКорреспондента = РегистрыСведений.НастройкиОбменаДаннымиXDTO.ЗначениеНастройкиКорреспондента(Выборка.УзелОбмена,
				"ОбластьДанныхКорреспондента");
			
			Если ОбластьДанныхКорреспондента = ОбластьДанных Тогда
				Результат = Выборка.УзелОбмена;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		
		Сообщение = НСтр("ru = 'Не найден узел плана обмена. Имя плана обмена %1; код узла %2 или %3'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла, КодУзлаСПрефиксом);
		
		ВызватьИсключение Сообщение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВерсииКорреспондента(Знач УзелИнформационнойБазы)
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.НастройкиТранспортаWS(УзелИнформационнойБазы);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменДаннымиВМоделиСервиса");
КонецФункции

// Возвращает параметры подсистемы ОбменДаннымиВМоделиСервиса, которые необходимы при завершении работы
// пользователей.
//
// Возвращаемое значение:
//	Структура - параметры.
//
Функция ПараметрыАвтономнойРаботыПриЗавершенииРаботы()
	
	ПараметрыПриЗавершении = Новый Структура;
	
	Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто() Тогда
		
		ПараметрыФормыВыполненияОбменаДанными = АвтономнаяРаботаСлужебный.ПараметрыФормыВыполненияОбменаДанными();
		СинхронизацияССервисомДавноНеВыполнялась = АвтономнаяРаботаСлужебный.СинхронизацияССервисомДавноНеВыполнялась();
		
	Иначе
		
		ПараметрыФормыВыполненияОбменаДанными = Новый Структура;
		СинхронизацияССервисомДавноНеВыполнялась = Ложь;
		
	КонецЕсли;
	
	ПараметрыПриЗавершении.Вставить("ПараметрыФормыВыполненияОбменаДанными", ПараметрыФормыВыполненияОбменаДанными);
	ПараметрыПриЗавершении.Вставить("СинхронизацияССервисомДавноНеВыполнялась", СинхронизацияССервисомДавноНеВыполнялась);
	
	Возврат ПараметрыПриЗавершении;
КонецФункции

Процедура ПередЗаписьюОбщихДанных(Объект, Отказ)
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотр = Ложь;
	АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных(Объект.Метаданные(), ТолькоПросмотр);
	
	Если ТолькоПросмотр Тогда
		СтрокаОшибки = НСтр("ru = 'Изменение неразделенных данных (%1), загружаемых из приложения, в Автономном рабочем месте запрещено.
		|Обратитесь к администратору.'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Строка(Объект));
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подписки на события для Автономного рабочего места

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных.
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанных(Источник, Отказ) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных.
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхДокумент(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных.
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхКонстанта(Источник, Отказ) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных.
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхНаборЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных.
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхНаборЗаписейРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение ссылок на общие страницы информации сервиса

// Возвращает адрес ссылки по идентификатору
// Для внутреннего использования.
//
Функция АдресСсылкиИзИнформационногоЦентра(Знач Идентификатор)
	Результат = "";
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ТехнологияСервиса.ИнформационныйЦентр") Тогда
		Возврат Результат;
	КонецЕсли;
	
	МодульИнформационныйЦентрСервер = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСервер");
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ДанныеСсылки = МодульИнформационныйЦентрСервер.КонтекстнаяСсылкаПоИдентификатору(Идентификатор);
	Исключение
		// Если метода нет
		ДанныеСсылки = Неопределено;
	КонецПопытки;
	
	Если ДанныеСсылки <> Неопределено Тогда
		Результат = ДанныеСсылки.Адрес;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает адрес ссылки на статью по настройке тонкого клиента
// Для внутреннего использования.
//
Функция АдресИнструкцииПоНастройкеТонкогоКлиента() Экспорт
	
	Возврат АдресСсылкиИзИнформационногоЦентра("ИнструкцияПоНастройкеТонкогоКлиента");
	
КонецФункции

// Возвращает адрес ссылки на статью по резервному копированию
// Для внутреннего использования.
//
Функция АдресИнструкцииПоВыполнениюРезервногоКопирования() Экспорт
	
	Возврат АдресСсылкиИзИнформационногоЦентра("ИнструкцияПоВыполнениюРезервногоКопирования");
	
КонецФункции

Процедура ПриСозданииАвтономногоРабочегоМеста() Экспорт
	
	Если ПользователиСлужебныйВМоделиСервисаБТС.ПользовательЗарегистрированКакНеразделенный(
			ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор) Тогда
		
		ВызватьИсключение НСтр("ru = 'Создать автономное рабочее место можно только от имени разделенного пользователя.
			|Текущий пользователь является неразделенным.'");
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает данные первой записи результата запроса в виде структуры.
// 
// Параметры:
//  РезультатЗапроса - РезультатЗапроса - Результат запроса, содержащий данные для обработки.
// 
// Возвращаемое значение:
//  Структура - структура с результатом.
//
Функция РезультатЗапросаВСтруктуру(Знач РезультатЗапроса) Экспорт
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
КонецФункции

#КонецОбласти