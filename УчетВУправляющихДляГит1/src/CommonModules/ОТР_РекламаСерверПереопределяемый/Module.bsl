
// Модуль предназначен для выполнения обработчиков вывода рекламы на сервере.
// Некоторые функции вызываются из общего модуля "ОТР_РекламаВызовСервераПовтИсп" с повторным использованием результата.

// Здесь приведен пример обработчиков для ЖКХ 3.0.

#Область ПрограммныйИнтерфейс

#Область Прочее

// Сохраняет настройки пользователя по рекламе сервисов.
//
// Параметры:
//  ИмяФормы - Строка - полное имя формы;
//  Сервис	 - Строка - имя сервиса баннера.
//
Процедура СохранитьНастройкиПользователяПоРекламеСервисов(ИмяФормы, Сервис) Экспорт
	
	// Используем вызов функции через общий модуль "ОТР_РекламаВызовСервераПовтИсп" для повторного
	// использования результата, для оптимизации скорости выполнения повторных вызовов
	// функции "ПолучитьПустуюТаблицуНастроекПользователя()".
	
	ПустаяТаблицаСервисов = ОТР_РекламаВызовСервераПовтИсп.ПолучитьПустуюТаблицуНастроекПользователя();
	
	// Копируем для того, чтобы в кэше не изменить состав таблицы "ПустаяТаблицаСервисов".
	ТаблицаСервисов = ПустаяТаблицаСервисов.СкопироватьКолонки();
	
	ТекущаяТаблицаСервисов = ПолучитьНастройкиПользователя();
	
	Если ТипЗнч(ТекущаяТаблицаСервисов) = Тип("ТаблицаЗначений") Тогда
		
		// Удаляем старые настройки сервиса.
		НайденныеСтроки = ТекущаяТаблицаСервисов.НайтиСтроки(Новый Структура("Сервис", Сервис));
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			ТекущаяТаблицаСервисов.Удалить(ТекущаяСтрока);
		КонецЦикла;
		
		// Переносим оставшиеся настройки сервисов в таблицу для сохранения.
		Для Каждого ТекущаяСтрока Из ТекущаяТаблицаСервисов Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСервисов.Добавить(), ТекущаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСервисов.Добавить();
	НоваяСтрока.Сервис       = Сервис;
	НоваяСтрока.ДатаЗакрытия = ТекущаяДата();
	
	ЗаписатьНастройкиПользователя(ТаблицаСервисов);
	
КонецПроцедуры // СохранитьНастройкиПользователяПоРекламеСервисов()

// Формирует пустую таблицу настроек пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//    Сервис - Строка - имя рекламируемого сервиса;
//    ДатаЗакрытия - Дата - дата последнего закрытия баннера.
//
Функция ПолучитьПустуюТаблицуНастроекПользователя() Экспорт
	
	ТаблицаСервисов = Новый ТаблицаЗначений;
	
	ТаблицаСервисов.Колонки.Добавить("Сервис",       Новый ОписаниеТипов("Строка"));
	ТаблицаСервисов.Колонки.Добавить("ДатаЗакрытия", Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	Возврат ТаблицаСервисов;
	
КонецФункции // ПолучитьПустуюТаблицуНастроекПользователя()

// Получает структуру настроек размещения баннеров на формах программы.
// 
// Возвращаемое значение:
//  Структура - ключи значений:
//    ТаблицаФормыРазделовЖКХ - ТаблицаЗначений - соответствие форм и разделов ЖКХ;
//    ТаблицаКартинкиБаннеров - ТаблицаЗначений - картинки баннеров;
//    ТаблицаГиперссылкиБаннеров - ТаблицаЗначений - соответствие разделов ЖКХ и сервисов.
//
Функция ПолучитьНастройкиРазмещенияБаннеров() Экспорт
	
	СтруктураНастроекРазмещенияБаннеров = Новый Структура;
	СтруктураНастроекРазмещенияБаннеров.Вставить("ТаблицаФормыРазделовЖКХ",    Новый ТаблицаЗначений);
	СтруктураНастроекРазмещенияБаннеров.Вставить("ТаблицаКартинкиБаннеров",    Новый ТаблицаЗначений);
	СтруктураНастроекРазмещенияБаннеров.Вставить("ТаблицаГиперссылкиБаннеров", Новый ТаблицаЗначений);
	
	Если Метаданные.ОбщиеМакеты.Найти("УПЖКХ_НастройкиРазмещенияБаннеров") = Неопределено Тогда
		
		Если Метаданные.ОбщиеМакеты.Найти("ОбразецНастройкиРазмещенияБаннеров") = Неопределено Тогда
			
			Возврат СтруктураНастроекРазмещенияБаннеров;
			
		Иначе
			
			Макет = ПолучитьОбщийМакет("ОбразецНастройкиРазмещенияБаннеров");
			
		КонецЕсли;
		
	Иначе
		
		Макет = ПолучитьОбщийМакет("УПЖКХ_НастройкиРазмещенияБаннеров");
		
	КонецЕсли;
	
	// Общий тип значений таблиц настроек.
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	// Формы разделов ЖКХ:
	
	ТаблицаФормыРазделовЖКХ = СтруктураНастроекРазмещенияБаннеров.ТаблицаФормыРазделовЖКХ;
	
	Колонки = ТаблицаФормыРазделовЖКХ.Колонки;
	
	Колонки.Добавить("Функция",     ТипСтрока); // Ключевое поле.
	Колонки.Добавить("utm_content", ТипСтрока);
	Колонки.Добавить("Форма",       ТипСтрока);
	
	ОбластьФормыРазделовЖКХ = Макет.ПолучитьОбласть("ФормыРазделовЖКХ");
	
	КоличествоЗаписей            = ОбластьФормыРазделовЖКХ.ВысотаТаблицы;
	КоличествоПараметровВТаблице = Колонки.Количество();
	
	Для НомерСтроки = 1 По КоличествоЗаписей Цикл
		
		НоваяСтрока = ТаблицаФормыРазделовЖКХ.Добавить();
		
		Для НомерКолонки = 1 По КоличествоПараметровВТаблице Цикл
			
			Значение = СокрЛП(ОбластьФормыРазделовЖКХ.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Прервать;
			КонецЕсли;
			
			Если НомерКолонки = 1 Тогда // Раздел ЖКХ (Функция программы).
				
				НоваяСтрока.Функция = Значение;
				
			ИначеЕсли НомерКолонки = 2 Тогда // utm_content.
				
				НоваяСтрока.utm_content = Значение;
				
			ИначеЕсли НомерКолонки = 3 Тогда // Полные имена к формам.
				
				// Каждый путь к форме в ячейке разделяется символом переноса строки.
				
				МассивФорм = СтрРазделить(Значение, Символы.ПС);
				
				ПервыйОбход = Истина;
				
				Для Каждого ТекущаяФорма Из МассивФорм Цикл
					
					ПолныйПутьФормы = СокрЛП(ТекущаяФорма);
					
					Если ПервыйОбход Тогда
						ПервыйОбход = Ложь;
						
						НоваяСтрока.Форма = ПолныйПутьФормы;
						
					Иначе
						// Если в текущем разделе ЖКХ (функции программы) имеется несколько форм программы, тогда
						// для каждой формы текущего раздела ЖКХ создаем копию строки функции программы.
						
						НоваяСтрокаСтрокаРазделаСервиса = ТаблицаФормыРазделовЖКХ.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаСтрокаРазделаСервиса, НоваяСтрока);
						
						НоваяСтрокаСтрокаРазделаСервиса.Форма = ПолныйПутьФормы;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Картинки баннеров:
	
	ТаблицаКартинкиБаннеров = СтруктураНастроекРазмещенияБаннеров.ТаблицаКартинкиБаннеров;
	
	Колонки = ТаблицаКартинкиБаннеров.Колонки;
	
	Колонки.Добавить("Номер",         ТипСтрока); // Ключевое поле.
	Колонки.Добавить("АдресКартинки", ТипСтрока);
	Колонки.Добавить("Подсказка",     ТипСтрока);
	
	ОбластьКартинкиБаннеров = Макет.ПолучитьОбласть("КартинкиБаннеров");
	
	КоличествоЗаписей            = ОбластьКартинкиБаннеров.ВысотаТаблицы;
	КоличествоПараметровВТаблице = Колонки.Количество();
	
	Для НомерСтроки = 1 По КоличествоЗаписей Цикл
		
		// Каждой строке области табличного документа будет соответствовать отдельная строка в таблице.
		НоваяСтрока = ТаблицаКартинкиБаннеров.Добавить();
		
		Для НомерКолонки = 1 По КоличествоПараметровВТаблице Цикл
			
			Ячейка = ОбластьКартинкиБаннеров.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			
			Если НомерКолонки = 1 ИЛИ НомерКолонки = 3 Тогда
				
				// Используем строковое значение для порядкового номера картинки и подсказки.
				Значение = СокрЛП(Ячейка.Текст);
				
			Иначе
				// Двоичные данные картинки помещаем во временное хранилище, чтобы его адрес использовать
				// для вывода картинки баннера на форме.
				ДвоичныеДанныеКартинки = Ячейка.Картинка.ПолучитьДвоичныеДанные();
				
				Значение = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Новый УникальныйИдентификатор);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				ВызватьИсключение "Ошибка чтения настроек размещения баннеров.";
			КонецЕсли;
			
			Если НомерКолонки = 1 Тогда // Порядковый номер картинки.
				
				НоваяСтрока.Номер = Значение;
				
			ИначеЕсли НомерКолонки = 2 Тогда // Картинка.
				
				НоваяСтрока.АдресКартинки = Значение;
				
			ИначеЕсли НомерКолонки = 3 Тогда // Текст подсказки.
				
				НоваяСтрока.Подсказка = Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Гиперссылки баннеров (сводная таблица, не имеет ключевых полей):
	
	ТаблицаГиперссылкиБаннеров = СтруктураНастроекРазмещенияБаннеров.ТаблицаГиперссылкиБаннеров;
	
	Колонки = ТаблицаГиперссылкиБаннеров.Колонки;
	
	Колонки.Добавить("Сервис",        ТипСтрока);
	Колонки.Добавить("РазделCервиса", ТипСтрока);
	Колонки.Добавить("Ссылка",        ТипСтрока);
	Колонки.Добавить("utm_term",      ТипСтрока);
	Колонки.Добавить("Функция",       ТипСтрока);
	Колонки.Добавить("НомерКартинки", ТипСтрока);
	
	ОбластьГиперссылкиБаннеров = Макет.ПолучитьОбласть("ГиперссылкиБаннеров");
	
	КоличествоЗаписей            = ОбластьГиперссылкиБаннеров.ВысотаТаблицы;
	КоличествоПараметровВТаблице = Колонки.Количество();
	
	// В массиве будем хранить ссылки на добавляемые строки таблицы одного раздела сервиса.
	МассивСтрокРазделаСервиса = Новый Массив;
	
	// В массиве будем хранить имена сервисов, используемых в программе. Для данных сервисов
	// не нужно выводить баннеры.
	МассивИспользуемыхСервисов = Новый Массив;
	
	Для НомерСтроки = 1 По КоличествоЗаписей Цикл
		
		// Так как в каждой строке макета хранятся настройки одного раздела сервиса,
		// тогда при переходе к следующей строке раздела сервиса необходимо очищать массив.
		МассивСтрокРазделаСервиса.Очистить();
		
		Для НомерКолонки = 1 По КоличествоПараметровВТаблице Цикл
			
			Значение = СокрЛП(ОбластьГиперссылкиБаннеров.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст);
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				ВызватьИсключение "Ошибка чтения настроек размещения баннеров.";
			КонецЕсли;
			
			Если НомерКолонки = 1 Тогда // Сервис.
				
				// Если сервис уже используется в программе, тогда настройки сервиса не считываем
				// и не включаем в общие настройки вывода баннеров. Таким образом для данного сервиса
				// не будет выводится реклама в формах программы.
				
				Если Метаданные.ОбщиеМодули.Найти("УПЖКХ_ОбщегоНазначенияСервер") = Неопределено Тогда
					
					НоваяСтрока = ТаблицаГиперссылкиБаннеров.Добавить();
					
					НоваяСтрока.Сервис = Значение;
					
				ИначеЕсли МассивИспользуемыхСервисов.Найти(Значение) = Неопределено Тогда
					
					СервисИспользуется = Ложь;
					
					Модуль       = Вычислить("УПЖКХ_ОбщегоНазначенияСервер");
					ИмяСервиса   = Значение;
					
					Если ИмяСервиса = "Сайт ЖКХ" Тогда
						
						СервисИспользуется = Модуль.ИспользуетсяСервисСайтЖКХ();
						
					ИначеЕсли ИмяСервиса = "Мобильное приложение ЛК ЖКХ" Тогда
						
						СервисИспользуется = Модуль.ИспользуетсяСервисМобильноеПриложениеЛКЖКХ();
						
					ИначеЕсли ИмяСервиса = "Автообзвон должников" Тогда
						
						СервисИспользуется = Модуль.ИспользуетсяСервисАвтообзвонДолжников();
						
					ИначеЕсли ИмяСервиса = "Автоматический прием показаний счетчиков" Тогда
						
						СервисИспользуется = Модуль.ИспользуетсяСервисАвтоматическийПриемПоказанийСчетчиков();
						
					ИначеЕсли ИмяСервиса = "СМС-рассылка" Тогда
						
						СервисИспользуется = Модуль.ИспользуетсяСервисСМСРассылка();
						
					КонецЕсли;
					
					Если СервисИспользуется Тогда
						
						МассивИспользуемыхСервисов.Добавить(ИмяСервиса);
						
						Прервать; // Сервис используется.
						
					Иначе
						
						НоваяСтрока = ТаблицаГиперссылкиБаннеров.Добавить();
						
						НоваяСтрока.Сервис = ИмяСервиса;
						
					КонецЕсли;
					
				Иначе
					
					Прервать; // Сервис используется.
					
				КонецЕсли;
				
			ИначеЕсли НомерКолонки = 2 Тогда // Раздел сервиса.
				
				НоваяСтрока.РазделCервиса = Значение;
				
			ИначеЕсли НомерКолонки = 3 Тогда // Основная ссылка на сайт.
				
				НоваяСтрока.Ссылка = Значение;
				
			ИначеЕсли НомерКолонки = 4 Тогда // utm_term.
				
				НоваяСтрока.utm_term = Значение;
				
			ИначеЕсли НомерКолонки = 5 Тогда // Функции программы.
				
				// Каждая функция программы в ячейке разделяется символом переноса строки.
				
				массивФункции = СтрРазделить(Значение, Символы.ПС);
				
				ПервыйОбход = Истина;
				
				Для Каждого ТекущаяФункция Из массивФункции Цикл
					
					ТекущаяФункция = СокрЛП(ТекущаяФункция);
					
					Если ПервыйОбход Тогда
						ПервыйОбход = Ложь;
						
						НоваяСтрока.Функция = ТекущаяФункция;
						
						МассивСтрокРазделаСервиса.Добавить(НоваяСтрока);
					Иначе
						
						// Если в текущем разделе сервиса имеется несколько функций программы, тогда
						// для каждой функции программы добавляем копию строки раздела сервиса.
						
						НоваяСтрокаСтрокаРазделаСервиса = ТаблицаГиперссылкиБаннеров.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаСтрокаРазделаСервиса, НоваяСтрока);
						
						НоваяСтрокаСтрокаРазделаСервиса.Функция = ТекущаяФункция;
						
						МассивСтрокРазделаСервиса.Добавить(НоваяСтрокаСтрокаРазделаСервиса);
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли НомерКолонки = 6 Тогда // Номера картинок.
				
				// Если для каждого раздела сервиса существуют несколько картинок баннеров,
				// тогда каждый номер картинки в ячейке разделяется символом "," (запятая).
				
				массивНомераКартинок = СтрРазделить(Значение, ",");
				
				КоличествоКартинок = массивНомераКартинок.Количество();
				
				Если КоличествоКартинок = 1 Тогда
					
					Для Каждого ТекущаяСтрокаРаздела Из МассивСтрокРазделаСервиса Цикл
						ТекущаяСтрокаРаздела.НомерКартинки = массивНомераКартинок[0];
					КонецЦикла;
					
				Иначе
					
					ПервыйОбход = Истина;
					
					Для Каждого ТекущийНомерКартинки Из массивНомераКартинок Цикл
						
						ТекущийНомерКартинки = СокрЛП(ТекущийНомерКартинки);
						
						Если ПервыйОбход Тогда
							
							ПервыйОбход = Ложь;
							
							Для Каждого ТекущаяСтрокаРаздела Из МассивСтрокРазделаСервиса Цикл
								ТекущаяСтрокаРаздела.НомерКартинки = ТекущийНомерКартинки;
							КонецЦикла;
							
							Продолжить;
							
						Иначе
							
							// Если в текущем разделе сервиса имеется несколько картинок, тогда
							// для каждой картинки программы создаем копию строки раздела сервиса.
							
							Для Каждого ТекущаяСтрокаРаздела Из МассивСтрокРазделаСервиса Цикл
								НоваяСтрокаСтрокаРазделаСервиса = ТаблицаГиперссылкиБаннеров.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрокаСтрокаРазделаСервиса, ТекущаяСтрокаРаздела);
								
								НоваяСтрокаСтрокаРазделаСервиса.НомерКартинки = ТекущийНомерКартинки;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураНастроекРазмещенияБаннеров;
	
КонецФункции // ПолучитьНастройкиРазмещенияБаннеров()

// Получает случайное число от 0 до значения "МаксимальныйИндекс".
//
// Параметры:
//  МаксимальныйИндекс - Число.
// 
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьИндексСлучайнойНастройки(МаксимальныйИндекс)
	
	Индекс = 0;
	
	Если НЕ МаксимальныйИндекс = 0 Тогда
		
		ГСЧ = Новый ГенераторСлучайныхЧисел(ТекущаяДата()-Дата(1985,12,25));
		
		Индекс = ГСЧ.СлучайноеЧисло(0, МаксимальныйИндекс);
		
	КонецЕсли;

	Возврат Индекс;
	
КонецФункции // ПолучитьИндексСлучайнойНастройки()

#КонецОбласти // Прочее

#Область Работа_с_хранилищем_общих_настроек

// Процедура сохраняет настройки пользователя.
//
// Параметры:
//  ТаблицаСервисов	 - ТаблицаЗначений - даты закрытия баннеров сервисов.
//
Процедура ЗаписатьНастройкиПользователя(ТаблицаСервисов)
	
	ХранилищеОбщихНастроек.Сохранить("ОТР_Реклама", "НастройкиПоказаСервисов", ТаблицаСервисов);
	
КонецПроцедуры // ЗаписатьНастройкиПользователя()

// Процедура получает настройки пользователя.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьНастройкиПользователя()
	
	Возврат ХранилищеОбщихНастроек.Загрузить("ОТР_Реклама", "НастройкиПоказаСервисов");
	
КонецФункции // ПолучитьНастройкиПользователя()

#КонецОбласти // Работа_с_хранилищем_общих_настроек

#Область Сценарии_проверки_вывода_рекламы

// Проверяет необходимость и возможность выводить рекламу согласно определенному сценарию.
//
// Параметры:
//  ИмяФормы - Строка - полное имя формы.
// 
// Возвращаемое значение:
//  Структура - параметры вывода рекламы:
//      ВыводитьРекламу   - Булево - определяет вывод рекламы в программе;
//      Гиперссылка       - Строка - текст гиперссылки баннера;
//      ХранилищеКартинки - ХранилищеЗначений - адрес картинки баннера во временном хранилище;
//      Подсказка         - Строка - подсказка к картинке баннера;
//      Сервис            - Строка - имя сервиса.
//
Функция ВыполнитьСценарииПроверокПередВыводомРекламы(ИмяФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураБаннера = Новый Структура;
	
	СтруктураБаннера.Вставить("ВыводитьРекламу", Ложь);
	СтруктураБаннера.Вставить("Гиперссылка",     "");
	СтруктураБаннера.Вставить("АдресКартинки",   "");
	СтруктураБаннера.Вставить("Подсказка",       "");
	СтруктураБаннера.Вставить("Сервис",          "");
	
	// Поэтапно проведем необходимые проверки для вывода рекламы.
	// Порядок проверок устанавливается для каждой конфигурации отдельно с учетом особенностей учета.
	
	// Описание проверок требований для вывода баннера:
	
	// Нужно соблюдать строгий порядок выполнения сценариев: Сценарий 1 -> Сценарий 2 -> Сценарий 3.
	
	// Сценарий 1. Проверка значений параметров базы. При этом проверяются следующие параметры:
	//             - Если значение константы "ОТР_НеПоказыватьРекламу" равно ИСТИНА, тогда рекламу не выводим.
	//             - Если значение константы "ОТР_ЭтоДемоБаза" равно ИСТИНА, тогда рекламу не выводим.
	//             - Если рекламу выводим, тогда переходим к следующему сценарию проверок.
	
	// Сценарий 2. Проверка требований по количеству лицевых счетов в базе ЖКХ:
	//             - Если количество лицевых счетов в справочнике "Лицевые счета" меньше 20, тогда рекламу не выводим.
	//             - Если рекламу выводим, тогда переходим следующему сценарию проверок.
	
	// Сценарий 3. Проверка использования сервисов в программе. Делаем поиск настроек неиспользуемых сервисов. При этом:
	//             - Определяем сервисы по полному имени текущей формы согласно настройкам размещения баннеров в макете
	//               "УПЖКХ_НастройкиРазмещенияБаннеров". При этом сразу отбираются только неиспользуемые в программе сервисы.
	//             - Если сервисы не найдены, тогда баннер на текущей форме не выводится.
	//             - Если сервисы найдены, тогда делаем проверки на необходимость вывода баннера в текущей
	//               форме по количеству прошедших дней с момента закрытия баннеров. При этом:
	//                 - Если пользователь закрывал баннер любого сервиса, и с момента закрытия прошло не больше 7 дней,
	//                   тогда баннер не выводить.
	//                 - Если пользователь закрывал баннер текущего сервиса, и с момента закрытия прошло не больше 45 дней,
	//                   тогда баннеры текущего сервиса не выводить.
	//                 - В остальных случаях баннеры выводить.
	
	//////////////////////////////////////////////////////////////////////////////
	// Сценарий 1. Проверка значений параметров базы.
	
	// Так как параметры базы хранятся в одних и тех же константах, тогда используем
	// вызов функции через общий модуль "ОТР_РекламаВызовСервераПовтИсп" для повторного
	// использования результата для оптимизации скорости выполнения повторных вызовов
	// функции "ВыводитьРекламуСогласноПараметрамБазы()".
	
	Если ОТР_РекламаВызовСервераПовтИсп.ВыводитьРекламуСогласноПараметрамБазы() Тогда
		
		///////////////////////////////////////////////////////////////////////////
		// Сценарий 2. Проверка по количеству лицевых счетов в базе ЖКХ.
		
		Если ВыводитьРекламуСогласноКоличествуЛицевыхСчетов() Тогда
			
			//////////////////////////////////////////////////////////////////////////////
			// Сценарий 3. Проверка использования сервисов. Производим поиск неиспользуемых сервисов текущей формы.
			//             Если таковые сервисы имеются, тогда выводим рекламу по одному из них.
			
			// 1. Отбор настроек размещения баннеров по времени закрытия баннеров.
			
			НастройкиРазмещения = Новый Структура;
			
			Если НайденыНастройкиВыводаБаннеровСОтборомПоВремениЗакрытияБанеров(НастройкиРазмещения) Тогда
				
				// 2. Определение параметров баннера для текущей формы из настроек размещения по полному имени формы.
				
				ЗаполнитьПараметрыБаннераПоНастройкамРазмещения(ИмяФормы, НастройкиРазмещения, СтруктураБаннера);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураБаннера;
	
КонецФункции // ВыполнитьСценарииПроверокПередВыводомРекламы()

// Проверяет необходимость вывода рекламы по параметрам информационной базы.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ВыводитьРекламуСогласноПараметрамБазы() Экспорт
	
	ВыводитьРекламу = НЕ (Константы.ОТР_НеПоказыватьРекламу.Получить() ИЛИ Константы.ОТР_ЭтоДемоБаза.Получить());
	
	Возврат ВыводитьРекламу;
	
КонецФункции // ВыводитьРекламуСогласноПараметрамБазы()

// Проверяет необходимость вывода рекламы согласно количеству лицевых счетов.
// 
// Возвращаемое значение:
//  Булево.
//
Функция ВыводитьРекламуСогласноКоличествуЛицевыхСчетов()
	
	ВыводитьРекламу = Ложь;
	
	Если Метаданные.Справочники.Найти("КВП_ЛицевыеСчета") = Неопределено Тогда
		
		ВыводитьРекламу = Истина;
		
	Иначе
		
		МинимальноеКоличествоЛицевыхСчетов = 20;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МинимальноеКоличествоЛицевыхСчетов", МинимальноеКоличествоЛицевыхСчетов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(КВП_ЛицевыеСчета.Ссылка) КАК КоличествоЛС
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|ГДЕ
		|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа
		|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(КВП_ЛицевыеСчета.Ссылка) > &МинимальноеКоличествоЛицевыхСчетов";
		
		ВыводитьРекламу = Запрос.Выполнить().Выбрать().Следующий();
		
	КонецЕсли;
	
	Возврат ВыводитьРекламу;
	
КонецФункции // ВыводитьРекламуСогласноКоличествуЛицевыхСчетов()

// Выполняет поиск и проверку настроек пользователя по рекламе сервисов.
//
// Параметры:
//  СтруктураОтвет - Структура - пустая структура для заполнения данными:
//     см. "ПолучитьНастройкиРазмещенияБаннеров()".
// 
// Возвращаемое значение:
//  Булево.
//
Функция НайденыНастройкиВыводаБаннеровСОтборомПоВремениЗакрытияБанеров(СтруктураОтвет)
	
	СтруктураОтвет.Вставить("ТаблицаГиперссылкиБаннеров");
	СтруктураОтвет.Вставить("ТаблицаФормыРазделовЖКХ");
	СтруктураОтвет.Вставить("ТаблицаКартинкиБаннеров");
	
	// Так как настройки размещения баннеров хранятся в одном и том же макете, тогда используем
	// вызов функции через общий модуль "ОТР_РекламаВызовСервераПовтИсп" для повторного использования
	// результата, для оптимизации скорости выполнения повторных вызовов
	// функции "ПолучитьНастройкиРазмещенияБаннеров()".
	
	НастройкиРазмещения = ОТР_РекламаВызовСервераПовтИсп.ПолучитьНастройкиРазмещенияБаннеров();
	
	ТаблицаГиперссылкиБаннеров = НастройкиРазмещения.ТаблицаГиперссылкиБаннеров.Скопировать();
	
	ТаблицаСервисов = ПолучитьНастройкиПользователя();
	
	Если ТипЗнч(ТаблицаСервисов) = Тип("ТаблицаЗначений") Тогда
		
		ТекущаяДата = ТекущаяДата();
		
		МаксКоличествоДнейСМоментаЗакрытияЛюбогоСервиса   = 7;
		МаксКоличествоДнейСМоментаЗакрытияТекущегоСервиса = 45;
		
		Если НЕ ТаблицаСервисов.Количество() = 0 Тогда
			
			// Сортируем по убыванию для того, чтобы проверить, прошло ли необходимое количество дней,
			// чтобы выводить баннеры по всем сервисам.
			
			ТаблицаСервисов.Сортировать("ДатаЗакрытия Убыв");
			
			РазницаВДняхДляВсехСервисов = (НачалоДня(ТекущаяДата) - НачалоДня(ТаблицаСервисов[0].ДатаЗакрытия)) / (60 * 60 * 24);
			
			Если РазницаВДняхДляВсехСервисов < МаксКоличествоДнейСМоментаЗакрытияЛюбогоСервиса Тогда
				
				// Период показа рекламы еще не наступил, поэтому очистим все настройки.
				ТаблицаГиперссылкиБаннеров.Очистить();
				
			Иначе
				
				МассивСведенийОДатахЗакрытияБаннеровСервисовДляУдаления   = Новый Массив;
				МассивСервисовДляУдаленияНастроекРазмещанияБаннеров = Новый Массив;
				
				Для Каждого ТекущаяСтрока Из ТаблицаСервисов Цикл
					
					РазницаВДнях = (НачалоДня(ТекущаяДата) - НачалоДня(ТекущаяСтрока.ДатаЗакрытия)) / (60 * 60 * 24);
					
					// Если для каждого сервиса с момента закрытия его баннера прошло необходимо количество дней для 
					// вывода баннера, тогда удаляем настройку закрытия баннера данного сервиса.
					// Если не прошло, тогда удаляем настройку размещения баннера текущего сервиса, чтобы не выводить его баннер.
					
					Если РазницаВДнях < МаксКоличествоДнейСМоментаЗакрытияТекущегоСервиса Тогда
						
						// Пометим на удаление неактуальные настройки размещения баннеров.
						Если МассивСервисовДляУдаленияНастроекРазмещанияБаннеров.Найти(ТекущаяСтрока.Сервис) = Неопределено Тогда
							МассивСервисовДляУдаленияНастроекРазмещанияБаннеров.Добавить(ТекущаяСтрока.Сервис);
						КонецЕсли;
						
					Иначе
						
						// Пометим на удаление неактуальные настройки закрытия баннеров.
						Если МассивСведенийОДатахЗакрытияБаннеровСервисовДляУдаления.Найти(ТекущаяСтрока) = Неопределено Тогда
							МассивСведенийОДатахЗакрытияБаннеровСервисовДляУдаления.Добавить(ТекущаяСтрока);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Удалим настройки размещения баннеров по сервисам, которые были закрыты.
				
				ОтборПоСервисам = Новый Структура("Сервис");
				
				Для Каждого ТекСервис Из МассивСервисовДляУдаленияНастроекРазмещанияБаннеров Цикл
					ОтборПоСервисам.Сервис = ТекСервис;
					
					НайденныеНастройки = ТаблицаГиперссылкиБаннеров.НайтиСтроки(ОтборПоСервисам);
					Для Каждого ТекСтрокаДляУдаления Из НайденныеНастройки Цикл
						ТаблицаГиперссылкиБаннеров.Удалить(ТекСтрокаДляУдаления);
					КонецЦикла;
				КонецЦикла;
				
				// Удалим неактуальные настройки пользователя и пересохраним настройки.
				
				Для Каждого ТекущаяСтрокаДляУдаления Из МассивСведенийОДатахЗакрытияБаннеровСервисовДляУдаления Цикл
					ТаблицаСервисов.Удалить(ТекущаяСтрокаДляУдаления);
				КонецЦикла;
				
				ЗаписатьНастройкиПользователя(ТаблицаСервисов);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтвет.Вставить("ТаблицаГиперссылкиБаннеров", ТаблицаГиперссылкиБаннеров);
	СтруктураОтвет.Вставить("ТаблицаФормыРазделовЖКХ",    НастройкиРазмещения.ТаблицаФормыРазделовЖКХ);
	СтруктураОтвет.Вставить("ТаблицаКартинкиБаннеров",    НастройкиРазмещения.ТаблицаКартинкиБаннеров);
	
	Возврат НЕ ТаблицаГиперссылкиБаннеров.Количество() = 0;
	
КонецФункции // НайденыНастройкиВыводаБаннеровСОтборомПоВремениЗакрытияБанеров()

// Процедура - Заполнить параметры баннера по настройкам размещения
//
// Параметры:
//  ИмяФормы			 - Строка	 - полное имя формы.
//  НастройкиРазмещения	 - Структура - структура настроек размещения баннеров.
//  СтруктураБаннера	 - Стурктура - 
//
Процедура ЗаполнитьПараметрыБаннераПоНастройкамРазмещения(ИмяФормы, НастройкиРазмещения, СтруктураБаннера)
	
	ТаблицаГиперссылкиБаннеров = НастройкиРазмещения.ТаблицаГиперссылкиБаннеров;
	
	СтрокаРазделаЖКХ = НастройкиРазмещения.ТаблицаФормыРазделовЖКХ.Найти(ИмяФормы, "Форма");
	
	Если НЕ СтрокаРазделаЖКХ = Неопределено Тогда
		
		ГиперссылкиРазделаЖКХ = ТаблицаГиперссылкиБаннеров.НайтиСтроки(Новый Структура("Функция", СтрокаРазделаЖКХ.Функция));
		
		КоличествоНастроек = ГиперссылкиРазделаЖКХ.Количество();
		
		Если КоличествоНастроек >= 1 Тогда
			
			Если КоличествоНастроек = 1 Тогда
				
				СтрокаНастроек = ГиперссылкиРазделаЖКХ[0];
				
			ИначеЕсли КоличествоНастроек > 1 Тогда
				
				СтрокаНастроек = ГиперссылкиРазделаЖКХ[ПолучитьИндексСлучайнойНастройки(КоличествоНастроек - 1)];
				
			КонецЕсли;
			
			СтрокаКартинки = НастройкиРазмещения.ТаблицаКартинкиБаннеров.Найти(СтрокаНастроек.НомерКартинки, "Номер");
			
			Если СтрокаКартинки = Неопределено Тогда
				
				СтрокаКартинки = НастройкиРазмещения.ТаблицаКартинкиБаннеров[0];
				
				ОсновнаяСсылка = ОТР_РекламаКлиентСерверПереопределяемый.ГиперссылкаОсновнойСтраницыСайта();
				
			Иначе
				
				ОсновнаяСсылка = СтрокаНастроек.Ссылка;
				
			КонецЕсли;
			
			ПостояннаяЧасть = "utm_source=1c_programm&utm_medium=banner&utm_campaign=1s_uchet_v_zhkh_redakciya_3.0&";
			ПеременнаяЧасть = "utm_term=%utm_term%&utm_content=%utm_content%";
			
			ПеременнаяЧасть = СтрЗаменить(ПеременнаяЧасть, "%utm_term%",    СтрокаНастроек.utm_term);
			ПеременнаяЧасть = СтрЗаменить(ПеременнаяЧасть, "%utm_content%", СтрокаРазделаЖКХ.utm_content);
			
			СтруктураБаннера.ВыводитьРекламу = Истина;
			СтруктураБаннера.Гиперссылка     = ОсновнаяСсылка + "?" + ПостояннаяЧасть + "&" + ПеременнаяЧасть;
			СтруктураБаннера.АдресКартинки   = СтрокаКартинки.АдресКартинки;
			СтруктураБаннера.Подсказка       = СтрокаКартинки.Подсказка;
			СтруктураБаннера.Сервис          = СтрокаНастроек.Сервис;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПараметрыБаннераПоНастройкамРазмещения()

#КонецОбласти // Сценарии_проверки_вывода_рекламы

#КонецОбласти // ПрограммныйИнтерфейс