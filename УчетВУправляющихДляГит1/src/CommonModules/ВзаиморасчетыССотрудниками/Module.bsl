
#Область ПрограммныйИнтерфейс

#Область УчетНачисленнойИВыплаченнойЗарплаты

// Регистрирует факт начисления зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		ПорядокВыплаты    - ПеречисленияСсылка.ХарактерВыплатыЗарплаты - порядок выплаты.
//		Начисления        - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//		Удержания         - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//
Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Начисления, Удержания);
КонецПроцедуры

// Регистрирует факт начисления авансов с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		Начисления        - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//		Удержания         - ТаблицаЗначений - см. НоваяТаблицаНачисленнойЗарплаты().
//
Процедура ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленныйАванс(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания);
КонецПроцедуры

// Регистрирует факт передачи налогов в налоговый орган с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений расчетного документа.
//  	Отказ             - Булево            - признак отказа выполнения операции.
//		Организация       - СправочникСсылка.Организации - организация
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		Налоги             - ТаблицаЗначений   - см. НоваяТаблицаНалоговПередаваемыхВНалоговыйОрган().
//
Процедура ЗарегистрироватьНалогиПереданныеВНалоговыйОрган(Движения, Отказ, Организация, ПериодРегистрации, Налоги) Экспорт

	Для Каждого Налог Из Налоги Цикл
		ЗарплатаКВыплате = Движения.ЗарплатаКВыплате.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(ЗарплатаКВыплате, Налог);
		ЗарплатаКВыплате.Период         = ПериодРегистрации;
		ЗарплатаКВыплате.Организация    = Организация;
		ЗарплатаКВыплате.ПериодВзаиморасчетов = ПериодРегистрации;
		ЗарплатаКВыплате.СуммаКВыплате  = Налог.Сумма;
		
		Взаиморасчеты = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(Взаиморасчеты, Налог);
		Взаиморасчеты.Период              = ПериодРегистрации;
		Взаиморасчеты.Организация         = Организация;
		Взаиморасчеты.ВидВзаиморасчетов                = Перечисления.ВидыВзаиморасчетовССотрудниками.ПогашениеЗадолженностиПоЗарплате;
		Взаиморасчеты.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		Взаиморасчеты.СуммаВзаиморасчетов = Налог.Сумма;
		
		ВзаиморасчетыБух = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.ДобавитьПриход();
		ЗаполнитьЗначенияСвойств(ВзаиморасчетыБух, Налог);
		ВзаиморасчетыБух.Период              = КонецМесяца(ПериодРегистрации);
		ВзаиморасчетыБух.Организация         = Организация;
		ВзаиморасчетыБух.ВидВзаиморасчетов                = Перечисления.ВидыВзаиморасчетовССотрудниками.ПогашениеЗадолженностиПоЗарплате;
		ВзаиморасчетыБух.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно;
		ВзаиморасчетыБух.СуммаВзаиморасчетов = Налог.Сумма;
		
		Движения.ЗарплатаКВыплате.Записывать                        = Истина;
		Движения.ВзаиморасчетыССотрудниками.Записывать              = Истина;
		Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать = Истина;
	КонецЦикла
	
КонецПроцедуры
	
// Регистрирует факт выплаты зарплаты с целью учета взаиморасчетов.
//
// Параметры:
//		Движения          - КоллекцияДвижений - коллекция наборов записей движений ведомости.
//		Отказ             - Булево - признак отказа в проведении.
//		Организация       - СправочникСсылка.Организации - организация.
//		ПериодРегистрации - Дата                         - первое число месяца периода регистрации.
//		Зарплата          - ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты
//		ПорядокВыплаты    - ПеречисленияСсылка.ХарактерВыплатыЗарплаты - порядок выплаты.
//
Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата, Знач ПорядокВыплаты = Неопределено) Экспорт
	Если ПорядокВыплаты = Неопределено Тогда
		ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
	КонецЕсли;	
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, ПорядокВыплаты, Зарплата)
КонецПроцедуры

// Регистрирует начальные остатки по взаиморасчетам с сотрудниками.
//
// Колонки СуммаПоБухучету и ВыплатыЗаПрошлыеПериоды не обязательны, при отсутствии будут добавлены автоматически. 
// СуммаПоБухучету будет установлена равной значению поля Сумма, ВыплатыЗаПрошлыеПериоды будет присвоено равно нулю.
//
// Параметры:
// 	Движения          - КоллекцияДвижений - наборы записей движений документа ввода начальных остатков.
// 	Отказ             - Булево            - признак отказа в проведении.
// 	Организация       - СправочникСсылка.Организации - организация.
// 	ПериодРегистрации - Дата                         - период регистрации (начало месяца).
// 	Остатки           - ТаблицаЗначений - таблица начальных остатках с колонками:
// 	                      * Сотрудник      - СправочникСсылка.Сотрудники - сотрудник.
// 	                      * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо сотрудника.
// 	                      * Подразделение  - СправочникСсылка.ПодразделенияОрганизаций - подразделение.
// 	                      * ПериодВзаиморасчетов - Дата  - начало месяца периода взаиморасчетов.
// 	                      * Сумма                   - Число - сумма начального остатка.
// 	                      * СуммаПоБухучету         - Число - сумма начального остатка бухгалтерских взаиморасчетов (приход).
// 	                      * ВыплатыЗаПрошлыеПериоды - Число - сумма начального остатка бухгалтерских взаиморасчетов (расход).
//
Процедура ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачальныеОстатки(Движения, Отказ, Организация, ПериодРегистрации, Остатки)
КонецПроцедуры

// Возвращает новую пустую таблицу значений для данных о начисленной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* Сотрудник      - СправочникСсылка.Сотрудники     - сотрудник, которому начислена зарплата.
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо сотрудника.
//			* Подразделение  - СправочникСсылка.ПодразделенияОрганизаций - подразделение, в котором начислена зарплата.
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - статья финансирования.
//			* СтатьяРасходов       - СправочникСсылка.СтатьиРасходовЗарплата       - статья расходов.
//			* Сумма                     - Число - суммы начисленной зарплаты.	
//			* СуммаКорректировкиВыплаты - Число - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
//
Функция НоваяТаблицаНачисленнойЗарплаты() Экспорт
	
	Таблица = НоваяТаблицаПрихода();
	Таблица.Колонки.Добавить("СуммаКорректировкиВыплаты", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Возврат Таблица
	
КонецФункции

// Функция возвращает новую таблицу значений для данных о начисленной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* Сотрудник      - СправочникСсылка.Сотрудники     - сотрудник, которому начислена зарплата.
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо сотрудника.
//			* Подразделение  - СправочникСсылка.ПодразделенияОрганизаций - подразделение, в котором начислена зарплата.
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - статья финансирования.
//			* СтатьяРасходов       - СправочникСсылка.СтатьиРасходовЗарплата       - статья расходов.
//			* Сумма                     - Число - суммы начисленной зарплаты.	
//			* СуммаКорректировкиВыплаты - Число - НДФЛ к возврату (отрицательный и ранее уже удержанный НДФЛ).
//
Функция НоваяТаблицаНалоговПередаваемыхВНалоговыйОрган() Экспорт
	Возврат НоваяТаблицаПрихода();
КонецФункции

// Создает новую пустую таблицу значений для данных о выплаченной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица значений с колонками:
//			* Сотрудник      - СправочникСсылка.Сотрудники               - сотрудник, которому выплачена зарплата
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица           - физическое лицо сотрудника
//			* Подразделение  - СправочникСсылка.ПодразделенияОрганизаций -  подразделение
//			* ПериодВзаиморасчетов - Дата - период, в котором выплачивается зарплата
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - статья финансирования
//			* СтатьяРасходов       - СправочникСсылка.СтатьиРасходовЗарплата       - статья расходов
//			* ДокументОснование    - ОпределяемыйТип.ДокументОснованиеЗарплатыКВыплате - документ-основание
//			* Сумма                - Число - выплачиваемая сумма.
//
Функция НоваяТаблицаВыплаченнойЗарплаты() Экспорт
	Возврат НоваяТаблицаРасхода()
КонецФункции

// Создает новую таблицу значений для данных о выплаченной зарплате по переданной табличной части.
//
// Параметры:
//		ТабличнаяЧасть - ТабличнаяЧасть - данные о выплаченной зарплате.
//		ОписаниеСоответствияКолонок - Структура - см. НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты.
//
// Возвращаемое значение:
//		ТаблицаЗначений - см. НоваяТаблицаВыплаченнойЗарплаты().
//
Функция НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(ТабличнаяЧасть, ОписаниеСоответствияКолонок) Экспорт
	
	КолонкиТаблицыВыплаченнойЗарплаты = КолонкиТаблицыВыплаченнойЗарплаты();
	
	КолонкиВыгружаемые  = Новый Массив;
	КолонкиГруппировок  = Новый Массив;
	КолонкиСуммирования = Новый Массив;
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		Если КолонкиТаблицыВыплаченнойЗарплаты.Все.Найти(ОписаниеКолонки.Ключ) = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти: недопустимое имя колонки таблицы выплаченной зарплаты в описании соответствия колонок'")
		КонецЕсли;	
		КолонкиВыгружаемые.Добавить(ОписаниеКолонки.Значение);
		Если КолонкиТаблицыВыплаченнойЗарплаты.Группировок.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиГруппировок.Добавить(ОписаниеКолонки.Значение);
		ИначеЕсли КолонкиТаблицыВыплаченнойЗарплаты.Суммирования.Найти(ОписаниеКолонки.Ключ) <> Неопределено Тогда
			КолонкиСуммирования.Добавить(ОписаниеКолонки.Значение);
		КонецЕсли	
	КонецЦикла;	
	
	ТаблицаВыплаченнойЗарплаты = ТабличнаяЧасть.Выгрузить(, СтрСоединить(КолонкиВыгружаемые, ", "));
	ТаблицаВыплаченнойЗарплаты.Свернуть(СтрСоединить(КолонкиГруппировок, ", "), СтрСоединить(КолонкиСуммирования, ", "));
	
	Для Каждого ОписаниеКолонки Из ОписаниеСоответствияКолонок Цикл
		ТаблицаВыплаченнойЗарплаты.Колонки[ОписаниеКолонки.Значение].Имя = ОписаниеКолонки.Ключ
	КонецЦикла;
	
	Возврат ТаблицаВыплаченнойЗарплаты
	
КонецФункции

// Создает описание соответствия колонок входной таблицы колонкам таблицы выплаченной зарплаты.
// Предназначена для использования в функциях- конструкторах таблицы выплаченной зарплаты.
// см. НоваяТаблицаВыплаченнойЗарплаты(), см. НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти().
//
// Возвращаемое значение:
//		Структура - Ключ содержит имя колонки таблицы выплаченной зарплаты, значение - имя колонки входной таблицы.
//
Функция НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты() Экспорт
	
	ОписаниеСоответствияКолонок = Новый Структура;
	
	Для Каждого Колонка Из НоваяТаблицаВыплаченнойЗарплаты().Колонки Цикл
		ОписаниеСоответствияКолонок.Вставить(Колонка.Имя, Колонка.Имя)
	КонецЦикла;
	
	Возврат ОписаниеСоответствияКолонок
	
КонецФункции

// Записывает движения подсистемы взаиморасчетов в базу данных.
//
// Параметры:
//		Движения - КоллекцияДвижений - Коллекция наборов записей.
//		Замещать - Булево            - Определяет режим замещения существующей записи.
//		                               Значение по умолчанию: Истина.
//
Процедура ЗаписатьДвижения(Движения, Замещать = Истина) Экспорт
	
	РегистрыВзаиморасчетов = Новый Массив;
	РегистрыВзаиморасчетов.Добавить("ЗарплатаКВыплате");
	РегистрыВзаиморасчетов.Добавить("ЗарплатаКВыплатеАвансом");
	РегистрыВзаиморасчетов.Добавить("ВзаиморасчетыССотрудниками");
	РегистрыВзаиморасчетов.Добавить("БухгалтерскиеВзаиморасчетыССотрудниками");
	
	Для Каждого Регистр Из РегистрыВзаиморасчетов Цикл
		Если ПроведениеСервер.ЕстьНаборЗаписей(Движения, Регистр) Тогда
			Движения[Регистр].Записать(Замещать);
			Движения[Регистр].Записывать = Ложь;
		КонецЕсли;	
	КонецЦикла	
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаВедомостей

// Функция возвращает информацию для оплаты платежным документом указанных ведомостей.
//	Удобна для использования в процедурах заполнения платежных документов.
//	Возвращаются суммы в разрезе ведомостей и физических лиц с учетом состояния оплаты
//  (все, оплаченные, только неоплаченные).
//	Оплаты, проведенные самим документом, не учитываются.
//
// 	Параметры:
// 		Документ	 	- ДокументСсылка - документ-заказчик (его оплаты не учитываются).
// 		Ведомости		- Массив - оплачиваемые ведомости (ОпределяемыйТип.ВедомостьЗарплатаКадры)
// 		ФизическиеЛица	- Массив - физические лица, получающие зарплату (СправочникСсылка.ФизическиеЛица).
// 		Оплаченные		- Булево - учет статуса оплаты:
// 		                             Истина       - уже оплаченные
// 		                             Ложь         - еще не оплаченные
// 		                             Неопределено - состояние оплаты не учитывается.
//
// Возвращаемое значение:
//		ДанныеВедомостейДляОплаты -	ТаблицаЗначений - таблица с колонками:
//			* Ведомость      - ОпределяемыйТип.ВедомостьЗарплатаКадры - ведомость.
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица        - физическое лицо.
//			* СуммаКВыплате                 - Число - зарплата.
//			* КомпенсацияЗаЗадержкуЗарплаты - Число - компенсация за задержку зарплаты.
//
Функция ДанныеВедомостейДляОплатыДокументом(Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	Запрос = ЗапросДанныеВедомостейДляОплатыДокументами(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Ведомости, ФизическиеЛица, Оплаченные);
	ДанныеВедомостейДляОплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеВедомостейДляОплаты;
	
КонецФункции

// Конструктор структуры, описывающей правила контроля данных об оплате.
//	Предназначения для создания параметра Проверки процедуры ПроверитьОплатуВедомостейДокументом.
//							
// Возвращаемое значение:
//		Структура - содержит свойства:
//			* ВедомостьПроведена - Булево - проверять, что ведомость проведена.
//			* РаботникВВедомости - Булево - проверять наличие указанного работника в ведомости.
//			* ПовторнаяВыплата   - Булево - контроль повторной выплаты по строке ведомости.
//
Функция ПроверкиОплатыВедомостейДокументом() Экспорт
	
	Проверки = Новый Структура;
	
	Проверки.Вставить("ВедомостьПроведена",	Истина);
	Проверки.Вставить("РаботникВВедомости",	Истина);
	Проверки.Вставить("ПовторнаяВыплата",	Истина);
	
	Возврат Проверки
	
КонецФункции

// Проверяет данные по оплате зарплаты.
// Удобна для использования при проведении.
// Контролируется:
//		проведенность ведомости
//		соответствие ведомости и работника (наличие такого в ведомости)
//		попытка повторной выплаты
// Объем проверок может настраиваться параметром Проверки.
//
// Параметры:
//	Документ         - ДокументОбъект, ДокументСсылка - платежный документ (его оплаты не учитываются).
//	Отказ            - Булево - признак наличия ошибок в проверяемых данных ведомостей.
//	ОплатаВедомостей - ТаблицаЗначений - таблица сведений об оплате с колонками:
//		* Ведомость      - ДокументСсылка
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//	Проверки         - Структура - выполняемые проверки, см. ПроверкиОплатыВедомостейДокументом().
//
Процедура ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = ПроверкиОплатыВедомостейДокументом()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ.Ссылка);
	Запрос.УстановитьПараметр("ОплатаВедомостей", ОплатаВедомостей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	&ОплатаВедомостей КАК ОплатаВедомостей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	СоздатьВТДанныеВедомостейДляОплатыДокументом(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		Документ, 
		ОплатаВедомостей.ВыгрузитьКолонку("Ведомость"), 
		ОплатаВедомостей.ВыгрузитьКолонку("ФизическоеЛицо"),
		Неопределено);

	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.Ведомость.Проведен КАК Проведен,
	|	ТИПЗНАЧЕНИЯ(ОплатаВедомостей.Ведомость) КАК ТипВедомости,
	|	ИСТИНА КАК Проводится
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей"
	 
	+ ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
	
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеВедомостей.ФизическоеЛицо ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицаНетВВедомости,
	|	ВЫБОР
	|		КОГДА РегистрОплатыВедомостей.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПовторнаяВыплата,
	|	РегистрОплатыВедомостей.Регистратор КАК Регистратор
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомостейДляОплатыДокументом КАК ДанныеВедомостей
	|		ПО (ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РегистрОплатыВедомостей
	|		ПО (РегистрОплатыВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (РегистрОплатыВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|			И (РегистрОплатыВедомостей.Регистратор <> &Регистратор)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВедомостей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	ТаблицаРаботников = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	
	Для Каждого Ведомость Из ТаблицаВедомостей Цикл
		Ведомость.Проводится = Метаданные.НайтиПоТипу(Ведомость.ТипВедомости).Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	КонецЦикла;
	
	Если Проверки.ВедомостьПроведена Тогда
		ОшибкиВедомостьНеПроведена = ТаблицаВедомостей.НайтиСтроки(Новый Структура("Проведен,Проводится", Ложь,Истина));
		Отказ = Отказ ИЛИ ОшибкиВедомостьНеПроведена.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиВедомостьНеПроведена Цикл
			СообщениеОбОшибке = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 не проведен'"), 
					Ошибка.Ведомость);
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
	Если Проверки.РаботникВВедомости Тогда
		ОшибкиНетВВедомости	= ТаблицаРаботников.НайтиСтроки(Новый Структура("ФизлицаНетВВедомости", Истина));
		Отказ = Отказ ИЛИ ОшибкиНетВВедомости.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиНетВВедомости Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Документ %1 не содержит сотрудника %2'"), 
						Ошибка.Ведомость, 
						Ошибка.ФизическоеЛицо);
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
	Если Проверки.ПовторнаяВыплата Тогда
		ПовторныеВыплаты = ТаблицаРаботников.НайтиСтроки(Новый Структура("ПовторнаяВыплата", Истина));
		Отказ = Отказ ИЛИ ПовторныеВыплаты.Количество() > 0;
	
		Для Каждого ПовторнаяВыплата Из ПовторныеВыплаты Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выплата сотруднику %2 по документу %1 уже произведена документом %3'"), 
						ПовторнаяВыплата.Ведомость, 
						ПовторнаяВыплата.ФизическоеЛицо,
						ПовторнаяВыплата.Регистратор);
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует выдачу зарплаты работникам по ведомостям.
//
// Параметры:
//	Документ         - ДокументОбъект - платежный документ.
//	Отказ            - Булево - признак отказа в выполнении операции.
//	ОплатаВедомостей - ТаблицаЗначений - таблица сведений об оплате с колонками:
//		* Ведомость      - ДокументСсылка
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
Процедура ЗарегистрироватьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей) Экспорт
	
	Если Отказ ИЛИ ОплатаВедомостей = Неопределено Или ОплатаВедомостей.Количество() = 0 Тогда
		Возврат
	КонецЕсли;		
	
	ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ведомости = ОплатаВедомостей.ВыгрузитьКолонку("Ведомость");
	ОрганизацияВедомости = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(Ведомости, "Организация");
	
	Для Каждого СтрокаОплаты Из ОплатаВедомостей Цикл
				
		НоваяСтрока = Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
		
		НоваяСтрока.Организация		= ОрганизацияВедомости[СтрокаОплаты.Ведомость];
		НоваяСтрока.Ведомость 		= СтрокаОплаты.Ведомость; 
		НоваяСтрока.ФизическоеЛицо	= СтрокаОплаты.ФизическоеЛицо;
		
	КонецЦикла;
		
	Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записывать = Истина;		
	
КонецПроцедуры

// Регистрирует выдачу зарплаты работникам по ведомостям.
//
// Параметры:
//	ПлатежныйДокумент - ДокументОбъект - платежный документ..
//	Организация       - СправочникСсылка.Организации - организация документа.
//	Ведомости         - Массив - ведомости, по которым выдана зарплата 
//	                       ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//	                       ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.д.
//	ФизическиеЛица    - Массив - физические лица, получившие зарплату (СправочникСсылка.ФизическиеЛица).
//	Оплаченные        - Булево - учет статуса оплаты:
//							истина       - только оплаченные
//							ложь         - неоплаченные
//							неопределено - состояние оплаты не учитывается.
//	Отказ             - Булево - признак отказа в выполнении операции.
//
Процедура ЗарегистрироватьОплатуВедомостей(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь, Отказ = Ложь) Экспорт
	
	Если Ведомости.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Регистрация оплаты
	СоздатьВТДанныеВедомостейДляОплатыДокументом(Запрос.МенеджерВременныхТаблиц, Истина, ПлатежныйДокумент.Ссылка, Ведомости, ФизическиеЛица, Оплаченные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплачиваемыеДанныеВедомостей.Ведомость КАК Ведомость,
	|	ОплачиваемыеДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостейДляОплатыДокументом КАК ОплачиваемыеДанныеВедомостей
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплачиваемыеДанныеВедомостей.Ведомость,
	|	ОплачиваемыеДанныеВедомостей.ФизическоеЛицо";
	
	ОплатаВедомостей = Запрос.Выполнить().Выгрузить();
	
	ЗарегистрироватьОплатуВедомостейДокументом(ПлатежныйДокумент, Отказ, ОплатаВедомостей);
	
КонецПроцедуры

// Проверяет, есть ли выплаты по ведомости.
//
// Параметры:
// 	Ведомость - ДокументСсылка - ведомость, оплату которой нужно проверить.
//
// Возвращаемое значение:
// 	Булево - Истина, если по ведомости производилась оплата.
//
Функция ЕстьОплатаПоВедомости(Ведомость) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции	

#Область УстаревшиеПроцедурыИФункции 

// Устарела: предпочтительно использовать ЗарплатаКадры.ЗарегистрироватьОплатуВедомостей.
// Регистрирует оплату ведомостей в бухгалтерских взаиморасчетах
//
// Параметры:
//  ПлатежныйДокумент	 - ДокументОбъект - платежный документ, регистрирующий оплату ведомостей.
//  Организация			 - СправочникСсылка.Организации - организация.
//  Ведомости			 - Массив - ведомости, оплату которых требуется зарегистрировать 
//  ФизическиеЛица		 - Массив - физические лица, для которых требуется зарегистрировать оплату. Если не указан - для всех физических лиц.
//  ДатаОперации		 - Дата - дата платежа.
//  Отказ				 - Булево - признак отказа в проведении.
//
Процедура ЗарегистрироватьОплатуВедомостейВБухгалтерскихВзаиморасчетах(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ) Экспорт
	ВедомостьНаВыплатуЗарплаты.ЗарегистрироватьОплатуВВзаиморасчетах(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ)
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ПриЗаполненииСписковСОграничениемДоступа(Списки);
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание)
КонецПроцедуры

#КонецОбласти

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.СпособыОкругленияПриРасчетеЗарплаты.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Процедура = "РегистрыСведений.ДополнительныеНастройкиЗарплатаКадры.УстановитьНачальноеЗначениеОтражениеВзаиморасчетовССотрудниками";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5186d797-a341-4f1f-93d8-6d1d07668788"); 
	Обработчик.Комментарий = НСтр("ru = 'Начальная установка настройки Отражение взаиморасчетов с сотрудниками.'");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.111";
	Обработчик.Процедура = "Справочники.СпособыВыплатыЗарплаты.ЗаполнитьСпособПолученияЗарплатыКВыплате";
	
КонецПроцедуры

#КонецОбласти

#Область ОплатаВедомостей

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументом с информацией для оплаты платежным документом
// указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//               ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк).
//  ФизическиеЛица	- массив ссылок на физические лица.
//	Оплаченные		- булево; описывает учет статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается.
//
Процедура СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	 
	Запрос = ЗапросДанныеВедомостейДляОплатыДокументами(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ), Ведомости, ФизическиеЛица, Оплаченные);
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТДанныеВедомостейДляОплатыДокументом"); 
	
КонецПроцедуры

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументами 
// с информацией для оплаты платежным документом указанных ведомостей.
// Временная таблица содержит оплачиваемые суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц.
//	ТолькоРазрешенные       - Булево.
//	Документы      - Массив - платежные документы (ДокументСсылка).
//	Ведомости      - Массив - выплачиваемые ведомости
//	                            ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//	                            ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк 
//	                            и т.п.
//	ФизическиеЛица - Массив - физические лица (СправочникСсылка.ФизическиеЛица).
//	Оплаченные     - Булево - статус оплаты:
//						Истина       - только оплаченные
//						Ложь         - неоплаченные
//						Неопределено - состояние оплаты не учитывается.
//
Процедура СоздатьВТДанныеВедомостейДляОплатыДокументами(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документы, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	Запрос = ЗапросДанныеВедомостейДляОплатыДокументами(Документы, Ведомости, ФизическиеЛица, Оплаченные);
	ЗарплатаКадры.СоздатьВТПоЗапросу(МенеджерВременныхТаблиц, Запрос, "ВТДанныеВедомостейДляОплатыДокументами"); 
	
КонецПроцедуры

// Создает запрос получения информации для оплаты ведомостей платежными документами
// Запрос к базе данных возвращает невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	Документы      - Массив - платежные документы (ДокументСсылка).
//  Ведомости      - Массив - выплачиваемые ведомости
//                            ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//                            ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.п.
//  ФизическиеЛица - Массив - физические лица (СправочникСсылка.ФизическиеЛица).
//	Оплаченные     - Булево - статус оплаты:
//						Истина       - только оплаченные
//						Ложь         - неоплаченные
//						Неопределено - состояние оплаты не учитывается.
//
Функция ЗапросДанныеВедомостейДляОплатыДокументами(Документы, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистраторы",   Документы);
	Запрос.УстановитьПараметр("Ведомости",      Ведомости);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("Оплаченные",     Оплаченные);
	
	Если Оплаченные = Неопределено Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	#ТекстЗапросаДанныеВедомостейДляОплаты КАК ВедомостьЗарплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате,
		|	СУММА(ВедомостьЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК КомпенсацияЗаЗадержкуЗарплаты
		|ИЗ
		|	#ТекстЗапросаДанныеВедомостейДляОплаты КАК ВедомостьЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|		ПО (НЕ Оплата.Регистратор В (&Регистраторы))
		|			И (Оплата.Ведомость = ВедомостьЗарплата.Ссылка)
		|			И (Оплата.ФизическоеЛицо = ВедомостьЗарплата.ФизическоеЛицо)
		|ГДЕ
		|	(&Оплаченные
		|				И НЕ Оплата.Регистратор ЕСТЬ NULL
		|			ИЛИ НЕ &Оплаченные
		|				И Оплата.Регистратор ЕСТЬ NULL)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо";
	КонецЕсли;
	
	ТекстЗапросаДанныеВедомостейДляОплаты = ТекстЗапросаДанныеВедомостейДляОплаты(Ведомости, "Ведомости", ?(ФизическиеЛица <> Неопределено, "ФизическиеЛица", ""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТекстЗапросаДанныеВедомостейДляОплаты", "(" + ТекстЗапросаДанныеВедомостейДляОплаты + ")");
	
	Возврат Запрос
	
КонецФункции

// Регистрирует факт неудачи при попытке выплаты по ведомостям.
// При этом невыплаченные суммы возвращаются в "копилку" взаиморасчеты.
//
// Параметры:
// 	Движения       - КоллекцияДвижений - коллекция наборов записей движений ведомости.
// 	Отказ          - Булево            - признак отказа выполнения операции.
// 	Ведомость      - ДокументСсылка    - ведомость на выплату зарплаты.
// 	ФизическиеЛица - Массив            - физические лица (СправочникСсылка.ФизическиеЛица),
//                                       которым не удалось выплатить зарплату.
//
Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Период КАК Период,
	|	ЗарплатаКВыплате.ВидДвижения КАК ВидДвижения,
	|	ЗарплатаКВыплате.Организация КАК Организация,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СуммаКВыплате КАК СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &Ведомость
	|	И ЗарплатаКВыплате.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеАвансом.Период КАК Период,
	|	ЗарплатаКВыплатеАвансом.ВидДвижения КАК ВидДвижения,
	|	ЗарплатаКВыплатеАвансом.Организация КАК Организация,
	|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплатеАвансом.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплатеАвансом.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплатеАвансом.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеАвансом.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплатеАвансом.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплатеАвансом.СуммаКВыплате КАК СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
	|ГДЕ
	|	ЗарплатаКВыплатеАвансом.Регистратор = &Ведомость
	|	И ЗарплатаКВыплатеАвансом.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период КАК Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения КАК ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация КАК Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов КАК ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период КАК Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения КАК ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация КАК Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов КАК ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.БухгалтерскиеВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаЗарплатаКВыплате         = РезультатыЗапроса[0].Выбрать();
	ВыборкаЗарплатаКВыплатеАвансом	= РезультатыЗапроса[1].Выбрать();
	ВыборкаВзаиморасчетов           = РезультатыЗапроса[2].Выбрать();
	ВыборкаВзаиморасчетовБух        = РезультатыЗапроса[3].Выбрать();
	
	Пока ВыборкаЗарплатаКВыплате.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплате);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплате.СуммаКВыплате;
		Движения.ЗарплатаКВыплате.Записывать = Истина;
	КонецЦикла;
	
	Пока ВыборкаЗарплатаКВыплатеАвансом.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплатеАвансом.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплатеАвансом);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплатеАвансом.СуммаКВыплате;
		Движения.ЗарплатаКВыплатеАвансом.Записывать = Истина;
	КонецЦикла;
	
	Пока ВыборкаВзаиморасчетов.Следующий() Цикл
		НоваяЗапись = Движения.ВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетов);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетов.СуммаВзаиморасчетов;
		Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
	КонецЦикла;
	
	Пока ВыборкаВзаиморасчетовБух.Следующий() Цикл
		НоваяЗапись = Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетовБух);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетовБух.СуммаВзаиморасчетов;
		Движения.БухгалтерскиеВзаиморасчетыССотрудниками.Записывать	= Истина
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру, описывающую временную таблицу отборов для получения состояния выплат.
// Таблица отборов может содержать любые колонки, среди которых обязательно должны быть:
// 	* ДокументОснование    - ДокументСсылка - документ-основание.
// 	* ФизическоеЛицо       - СправочникСсылка.ФизическиеЛица - физическое лицо.
// 	* СтатьяФинансирования - СправочникСсылка.СтатьиФинансирования - статья финансирования.
// 	* СтатьяРасходов       - СправочникСсылка.СтатьиРасходов - статья расходов.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//		ТаблицаОтборов          - Строка, ТаблицаЗначений - имя временной таблицы отборов
//		                                                    или таблица значений с отборами.
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц     - МенеджерВременныхТаблиц.
//			* ИмяВТОтборов                - Строка - если передана таблица значений, то "ВТОтборыДляСоздатьВТСостояниеВыплат".
//			* УничтожитьТаблицуОтборов    - Булево - если передана таблица значений, то Истина, иначе Ложь.
//
Функция ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(МенеджерВременныхТаблиц, ТаблицаОтборов) Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц",     МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов",                "");
	ОписательВТ.Вставить("УничтожитьТаблицуОтборов",    Ложь);
	
	Если ТипЗнч(ТаблицаОтборов) = Тип("ТаблицаЗначений") Тогда
		ОписательВТ.ИмяВТОтборов = "ВТОтборыДляСоздатьВТСостояниеВыплат";
		ОписательВТ.УничтожитьТаблицуОтборов = Истина;
		ЗарплатаКадры.СоздатьВТПоТаблицеЗначений(МенеджерВременныхТаблиц, ТаблицаОтборов, ОписательВТ.ИмяВТОтборов);
	ИначеЕсли ТипЗнч(ТаблицаОтборов) = Тип("Строка") Тогда	
		ОписательВТ.ИмяВТОтборов = ТаблицаОтборов;
	Иначе	
		ВызватьИсключение НСтр("ru = 'Недопустимый тип параметра ТаблицаОтборов'");
	КонецЕсли;
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу со сведениями о состоянии выплаты в разрезе сотрудников и документов-оснований .
//
// Параметры:
//		ОписательВременныхТаблиц - Структура - см. ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат.
//		ТолькоРазрешенные - Булево.
//		Организация - СправочникСсылка.Организации.
//		ПериодРегистрации - Дата - первое число месяца периода регистрации. 
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//		                           движения которых должны быть проигнорированы.
//
Процедура СоздатьВТСостояниеВыплат(ОписательВременныхТаблиц, ТолькоРазрешенные, Организация, ПериодРегистрации, ИгнорируемыеРегистраторы = Неопределено, ИмяВТСостояниеВыплат = "ВТСостояниеВыплат") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",        ПериодРегистрации);
	
	// Прямое соединение таблицы отборов сразу с регистром ЗарплатаКВыплате приводит к неоптимальному запросу.
	// Состояние выплат для неопределенных документов-оснований не имеет прикладного смысла, 
	// но в регистре такие есть, и для повышения производительности их полезно сразу отсечь.
	//
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Отборы.ДокументОснование КАК ДокументОснование,
	|	Отборы.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОтборДокументовДляВТСостояниеВыплат
	|ИЗ
	|	#ВТОтборов КАК Отборы
	|ГДЕ
	|	Отборы.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленная,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВыплаченная
	|ПОМЕСТИТЬ ВТЗарплатаКВыплатеДляВТСостояниеВыплат
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	НЕ &ИгнорируемыеРегистраторы
	|	И ЗарплатаКВыплате.Период <= &ПериодРегистрации
	|	И ЗарплатаКВыплате.Организация = &Организация
	|	И (ЗарплатаКВыплате.ДокументОснование, ЗарплатаКВыплате.ФизическоеЛицо) В
	|			(ВЫБРАТЬ
	|				Отборы.ДокументОснование КАК ДокументОснование,
	|				Отборы.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				ВТОтборДокументовДляВТСостояниеВыплат КАК Отборы)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	ДокументОснование,
	|	СтатьяФинансирования,
	|	СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ПоляВТОтборов КАК ПоляВТОтборов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СуммаНачисленная, 0) КАК СуммаНачисленная,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СуммаВыплаченная, 0) КАК СуммаВыплаченная
	|ПОМЕСТИТЬ #ВТСостояниеВыплат
	|ИЗ
	|	#ВТОтборов КАК Отборы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплатеДляВТСостояниеВыплат КАК ЗарплатаКВыплате
	|		ПО Отборы.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо
	|			И Отборы.ДокументОснование = ЗарплатаКВыплате.ДокументОснование
	|			И Отборы.СтатьяФинансирования = ЗарплатаКВыплате.СтатьяФинансирования
	|			И Отборы.СтатьяРасходов = ЗарплатаКВыплате.СтатьяРасходов";
	
	Если ИгнорируемыеРегистраторы = Неопределено Или ИгнорируемыеРегистраторы.Количество()=0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИгнорируемыеРегистраторы", "ЛОЖЬ"); // не локализуется
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИгнорируемыеРегистраторы", "ЗарплатаКВыплате.Регистратор В (&ИгнорируемыеРегистраторы)"); // не локализуется
		Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	КонецЕсли;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТОтборов", ОписательВременныхТаблиц.ИмяВТОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСостояниеВыплат", ИмяВТСостояниеВыплат);
	
	ИменаКолонокВТОтборов = Новый Массив;
	Для Каждого КолонкаВТОтборов Из ОписательВременныхТаблиц.МенеджерВременныхТаблиц.Таблицы[ОписательВременныхТаблиц.ИмяВТОтборов].Колонки Цикл
		ИменаКолонокВТОтборов.Добавить("Отборы" +"."+ КолонкаВТОтборов.Имя);
	КонецЦикла;	
	ПоляВТОтборов = СтрСоединить(ИменаКолонокВТОтборов, ", " + Символы.ПС + Символы.Таб );
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВТОтборов КАК ПоляВТОтборов", ПоляВТОтборов);
	
	Запрос.Выполнить();
	
	УничтожаемыеВТ = Новый Массив;	
	УничтожаемыеВТ.Добавить("ВТОтборДокументовДляВТСостояниеВыплат");
	УничтожаемыеВТ.Добавить("ВТЗарплатаКВыплатеДляВТСостояниеВыплат");
	Если ОписательВременныхТаблиц.УничтожитьТаблицуОтборов Тогда
		УничтожаемыеВТ.Добавить(ОписательВременныхТаблиц.ИмяВТОтборов) 
	КонецЕсли;
	ЗарплатаКадры.УничтожитьВТ(Запрос.МенеджерВременныхТаблиц, УничтожаемыеВТ) 
	
КонецПроцедуры	

// Создает новую пустую таблицу значений для данных о выданной зарплате.
//
// Возвращаемое значение:
//		ТаблицаЗначений - таблица с колонками:
//			* Сотрудник - СправочникСсылка.Сотрудники
//			* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//			* Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//			* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата
//			* СтатьяРасходов - СправочникСсылка.СтатьиРасходовЗарплата
//			* Сумма - Число 	
//
Функция НоваяТаблицаВыданнойЗарплаты() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Таблица
	
КонецФункции

// Регистрирует выдачу (перечисление) зарплаты во взаиморасчетах.
//
// Параметры:
//		Движения        - КоллекцияДвижений - коллекция наборов записей движений ведомости.
//		Отказ           - Булево - признак отказа в проведении.
//		Организация     - СправочникСсылка.Организации
//		ДатаОперации    - Дата  - дата выдачи зарплаты.
//		Зарплата        - ТаблицаЗначений - см. НоваяТаблицаВыданнойЗарплаты
//		ПорядокВыплаты  - ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//
Процедура ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыданнуюЗарплату(Движения, Отказ, Организация, ДатаОперации, Зарплата, ПорядокВыплаты)		
КонецПроцедуры

#КонецОбласти

#Область КорректировкиВыплаты

// Создает описание имен колонок, возвращаемых функцией КорректировкиВыплаты.
// Значения полей содержат желаемые имена колонок, пустое значение - что колонку возвращать не нужно.
//
// Возвращаемое значение:
//	Структура
//		* ФизическоеЛицо
//		* Сотрудник
//		* Подразделение
//		* СтатьяФинансирования
//		* СтатьяРасходов
//		* СуммаВзаиморасчетов
//		* СуммаКВыплате
//		* КорректировкаВыплаты
//
Функция ИменаКолонокКорректировкиВыплаты() Экспорт
	
	ИменаКолонок = Новый Структура;
	
	ИменаКолонок.Вставить("ФизическоеЛицо",       "ФизическоеЛицо");
	ИменаКолонок.Вставить("Сотрудник",            "Сотрудник");
	ИменаКолонок.Вставить("Подразделение",        "Подразделение");
	ИменаКолонок.Вставить("СтатьяФинансирования", "СтатьяФинансирования");
	ИменаКолонок.Вставить("СтатьяРасходов",       "СтатьяРасходов");
	ИменаКолонок.Вставить("СуммаВзаиморасчетов",  "СуммаВзаиморасчетов");
	ИменаКолонок.Вставить("СуммаКВыплате",        "СуммаКВыплате");
	ИменаКолонок.Вставить("СуммаКорректировки",   "СуммаКорректировки");
	
	Возврат ИменаКолонок;
	
КонецФункции	

// Возвращает сведения о накопленной корректировке выплаты в указанном периоде 
// (или с начала года, если указан только конец периода - см. описание параметра Период).
// Корректировка выплаты - разница между суммой долга работодателя перед сотрудником и 
// суммой, положенной к выплате сотруднику. 
// Разница может быть обусловлена, например, невозможностью выплаты излишне удержанного ранее НДФЛ.
//
// Параметры:
//		Организация              - СправочникСсылка.Организации.
//		Период                   - СтандартныйПериод, Дата  - период, за который будут получены сведения.
//                                 Если передана дата, то будут возвращены сведения с начала года по месяц указанной
//                                 даты включительно.
//  	ФизическиеЛица           - Массив, ФиксированныйМассив - массив ссылок на физические лица.
//		ИгнорируемыеРегистраторы - Массив, ФиксированныйМассив - массив ссылок на документы, 
//		                           движения которых должны быть проигнорированы.
//		ИменаКолонок             - Структура - описание имен колонок возвращаемой таблицы, см. ИменаКолонокКорректировкиВыплаты().
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с колонками:
//		* ФизическоеЛицо       - СправочникСсылка.ФизическиеЛица.
//		* Сотрудник            - СправочникСсылка.Сотрудники.
//		* Подразделение        - СправочникСсылка.ПодразделенияОрганизаций - не обязательно к заполнению.
//		* СтатьяФинансирования - СправочникСсылка.СтатьиФинансированияЗарплата - не обязательно к заполнению.
//		* СтатьяРасходов       - СправочникСсылка.СтатьиРасходовЗарплата - не обязательно к заполнению.
//		* СуммаВзаиморасчетов  - Число.
//		* СуммаКВыплате        - Число.
//		* СуммаКорректировки   - Число.
//	Имена колонок могут быть полностью или частично изменены на значения структуры параметра ИменаКолонок, колонки с пустыми именами возвращены не будут.
//
Функция КорректировкиВыплаты(Организация, Знач Период, ФизическиеЛица, ИгнорируемыеРегистраторы = Неопределено, ИменаКолонок = Неопределено) Экспорт
	
	Если ТипЗнч(Период) = Тип("Дата") Тогда
		НачалоПериода = НачалоГода(Период);
		КонецПериода  = НачалоМесяца(Период);
	Иначе	
		НачалоПериода = НачалоМесяца(Период.ДатаНачала);
		КонецПериода  = НачалоМесяца(Период.ДатаОкончания);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("КонецПериодаГраница",   Новый Граница(КонецПериода));
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы", ИгнорируемыеРегистраторы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Остатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Остатки.Сотрудник КАК Сотрудник,
	|	Остатки.Подразделение КАК Подразделение,
	|	Остатки.СтатьяФинансирования КАК СтатьяФинансирования,
	|	Остатки.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(Остатки.СуммаВзаиморасчетовНаКонецПериода) - СУММА(Остатки.СуммаВзаиморасчетовНаНачалоПериода) КАК СуммаВзаиморасчетов,
	|	СУММА(Остатки.СуммаКВыплатеНаКонецПериода) - СУММА(Остатки.СуммаКВыплатеНаНачалоПериода) КАК СуммаКВыплате,
	|	СУММА(Остатки.СуммаВзаиморасчетовНаКонецПериода) - СУММА(Остатки.СуммаВзаиморасчетовНаНачалоПериода) - (СУММА(Остатки.СуммаКВыплатеНаКонецПериода) - СУММА(Остатки.СуммаКВыплатеНаНачалоПериода)) КАК СуммаКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиВзаиморасчетовНаНачалоПериода.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ОстаткиВзаиморасчетовНаНачалоПериода.Сотрудник КАК Сотрудник,
	|		ОстаткиВзаиморасчетовНаНачалоПериода.Подразделение КАК Подразделение,
	|		ОстаткиВзаиморасчетовНаНачалоПериода.СтатьяФинансирования КАК СтатьяФинансирования,
	|		ОстаткиВзаиморасчетовНаНачалоПериода.СтатьяРасходов КАК СтатьяРасходов,
	|		ОстаткиВзаиморасчетовНаНачалоПериода.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовНаНачалоПериода,
	|		0 КАК СуммаВзаиморасчетовНаКонецПериода,
	|		0 КАК СуммаКВыплатеНаНачалоПериода,
	|		0 КАК СуммаКВыплатеНаКонецПериода
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК ОстаткиВзаиморасчетовНаНачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиВзаиморасчетовНаКонецПериода.ФизическоеЛицо,
	|		ОстаткиВзаиморасчетовНаКонецПериода.Сотрудник,
	|		ОстаткиВзаиморасчетовНаКонецПериода.Подразделение,
	|		ОстаткиВзаиморасчетовНаКонецПериода.СтатьяФинансирования,
	|		ОстаткиВзаиморасчетовНаКонецПериода.СтатьяРасходов,
	|		0,
	|		ОстаткиВзаиморасчетовНаКонецПериода.СуммаВзаиморасчетовОстаток,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(
	|				&КонецПериодаГраница,
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК ОстаткиВзаиморасчетовНаКонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыИгнорируемыхРегистраторов.ФизическоеЛицо,
	|		ВзаиморасчетыИгнорируемыхРегистраторов.Сотрудник,
	|		ВзаиморасчетыИгнорируемыхРегистраторов.Подразделение,
	|		ВзаиморасчетыИгнорируемыхРегистраторов.СтатьяФинансирования,
	|		ВзаиморасчетыИгнорируемыхРегистраторов.СтатьяРасходов,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыИгнорируемыхРегистраторов.Период >= &НачалоПериода
	|				ТОГДА 0
	|			КОГДА ВзаиморасчетыИгнорируемыхРегистраторов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ВзаиморасчетыИгнорируемыхРегистраторов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВзаиморасчетыИгнорируемыхРегистраторов.СуммаВзаиморасчетов
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыИгнорируемыхРегистраторов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ВзаиморасчетыИгнорируемыхРегистраторов.СуммаВзаиморасчетов
	|			ИНАЧЕ ВзаиморасчетыИгнорируемыхРегистраторов.СуммаВзаиморасчетов
	|		КОНЕЦ,
	|		0,
	|		0
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыИгнорируемыхРегистраторов
	|	ГДЕ
	|		ВзаиморасчетыИгнорируемыхРегистраторов.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ВзаиморасчетыИгнорируемыхРегистраторов.Период <= &КонецПериода
	|		И ВзаиморасчетыИгнорируемыхРегистраторов.Организация = &Организация
	|		И ВзаиморасчетыИгнорируемыхРегистраторов.ФизическоеЛицо В(&ФизическиеЛица)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплатеНаНачалоПериода.ФизическоеЛицо,
	|		ЗарплатаКВыплатеНаНачалоПериода.Сотрудник,
	|		ЗарплатаКВыплатеНаНачалоПериода.Подразделение,
	|		ЗарплатаКВыплатеНаНачалоПериода.СтатьяФинансирования,
	|		ЗарплатаКВыплатеНаНачалоПериода.СтатьяРасходов,
	|		0,
	|		0,
	|		ЗарплатаКВыплатеНаНачалоПериода.СуммаКВыплатеОстаток,
	|		0
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК ЗарплатаКВыплатеНаНачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплатеНаНачалоПериода.ФизическоеЛицо,
	|		ЗарплатаКВыплатеНаНачалоПериода.Сотрудник,
	|		ЗарплатаКВыплатеНаНачалоПериода.Подразделение,
	|		ЗарплатаКВыплатеНаНачалоПериода.СтатьяФинансирования,
	|		ЗарплатаКВыплатеНаНачалоПериода.СтатьяРасходов,
	|		0,
	|		0,
	|		0,
	|		ЗарплатаКВыплатеНаНачалоПериода.СуммаКВыплатеОстаток
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				&КонецПериодаГраница,
	|				Организация = &Организация
	|					И ФизическоеЛицо В (&ФизическиеЛица)) КАК ЗарплатаКВыплатеНаНачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.ФизическоеЛицо,
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.Сотрудник,
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.Подразделение,
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.СтатьяФинансирования,
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.СтатьяРасходов,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплатеИгнорируемыхРегистраторов.Период >= &НачалоПериода
	|				ТОГДА 0
	|			КОГДА ЗарплатаКВыплатеИгнорируемыхРегистраторов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплатеИгнорируемыхРегистраторов.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплатеИгнорируемыхРегистраторов.СуммаКВыплате
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплатеИгнорируемыхРегистраторов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплатеИгнорируемыхРегистраторов.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплатеИгнорируемыхРегистраторов.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплатеИгнорируемыхРегистраторов
	|	ГДЕ
	|		ЗарплатаКВыплатеИгнорируемыхРегистраторов.Регистратор В(&ИгнорируемыеРегистраторы)
	|		И ЗарплатаКВыплатеИгнорируемыхРегистраторов.Период <= &КонецПериода
	|		И ЗарплатаКВыплатеИгнорируемыхРегистраторов.Организация = &Организация
	|		И ЗарплатаКВыплатеИгнорируемыхРегистраторов.ФизическоеЛицо В(&ФизическиеЛица)) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ФизическоеЛицо,
	|	Остатки.Сотрудник,
	|	Остатки.Подразделение,
	|	Остатки.СтатьяФинансирования,
	|	Остатки.СтатьяРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.СуммаВзаиморасчетовНаКонецПериода) - СУММА(Остатки.СуммаВзаиморасчетовНаНачалоПериода) - (СУММА(Остатки.СуммаКВыплатеНаКонецПериода) - СУММА(Остатки.СуммаКВыплатеНаНачалоПериода)) <> 0";
	
	КорректировкиВыплаты = Запрос.Выполнить().Выгрузить();
	
	Если ИменаКолонок <> Неопределено Тогда
		УдаляемыеКолонки = Новый Массив;
		Для Каждого ИмяКолонки Из ИменаКолонок Цикл
			Если ЗначениеЗаполнено(ИмяКолонки.Значение) Тогда
				КорректировкиВыплаты.Колонки[ИмяКолонки.Ключ].Имя = ИмяКолонки.Значение;
			Иначе
				УдаляемыеКолонки.Добавить(ИмяКолонки.Ключ);
			КонецЕсли;
		КонецЦикла;	
		Для Каждого УдаляемаяКолонка Из УдаляемыеКолонки Цикл
			КорректировкиВыплаты.Колонки.Удалить(УдаляемаяКолонка);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат КорректировкиВыплаты
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаПрихода()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Таблица
	
КонецФункции

Функция НоваяТаблицаРасхода()
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ФизическоеЛицо",       Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Таблица.Колонки.Добавить("Сотрудник",            Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таблица.Колонки.Добавить("Подразделение",        Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Таблица.Колонки.Добавить("ПериодВзаиморасчетов", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Таблица.Колонки.Добавить("СтатьяФинансирования", Новый ОписаниеТипов("СправочникСсылка.СтатьиФинансированияЗарплата"));
	Таблица.Колонки.Добавить("СтатьяРасходов",       Новый ОписаниеТипов("СправочникСсылка.СтатьиРасходовЗарплата"));
	Таблица.Колонки.Добавить("ДокументОснование",    Метаданные.ОпределяемыеТипы.ДокументОснованиеЗарплатыКВыплате.Тип);
	Таблица.Колонки.Добавить("Сумма",                ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Возврат Таблица
	
КонецФункции

Функция КолонкиТаблицыВыплаченнойЗарплаты()
	
	Колонки = Новый Структура;
	Колонки.Вставить("Все", Новый Массив);
	Колонки.Вставить("Группировок",  Новый Массив);
	Колонки.Вставить("Суммирования", Новый Массив);
	
	Для Каждого Колонка Из НоваяТаблицаВыплаченнойЗарплаты().Колонки Цикл
		Колонки.Все.Добавить(Колонка.Имя);
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			Колонки.Суммирования.Добавить(Колонка.Имя)
		Иначе	
			Колонки.Группировок.Добавить(Колонка.Имя)
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Колонки
	
КонецФункции

#Область ВзаимосвязиМеждуОбъектами

Функция МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты)
КонецФункции

Функция ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ПорядокВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВидВзаиморасчетовССотрудникамиПоХарактеруВыплатыЗарплаты(ПорядокВыплаты)
КонецФункции

#КонецОбласти

#Область ЗарплатаКВыплате

Функция ПараметрыПолученияЗарплатыКВыплате() Экспорт
	
	ПараметрыПолученияЗарплатыКВыплате = Новый Структура;
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ПорядокВыплаты",           Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СпособПолучения",          Перечисления.СпособыПолученияЗарплатыКВыплате.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ДокументыОснования",       Новый Массив);
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Организация",              Справочники.Организации.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ПериодРегистрации",        Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("Дата",                     Дата(1,1,1));
	ПараметрыПолученияЗарплатыКВыплате.Вставить("ИгнорируемыеРегистраторы",	Новый Массив);
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяФинансирования",	    Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	ПараметрыПолученияЗарплатыКВыплате.Вставить("СтатьяРасходов",           Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	
	Возврат ПараметрыПолученияЗарплатыКВыплате
	
КонецФункции

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники = "ВТСотрудникиОрганизации") Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники)
КонецПроцедуры	

Процедура СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные = "") Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудники, КадровыеДанные);
КонецПроцедуры

Процедура СоздатьВТЗарплатаКВыплатеОграниченнаяСальдоФизлиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Если Параметры.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		ПериодВзаиморасчетов = ДобавитьМесяц(Параметры.ПериодРегистрации, -1);
	ИначеЕсли Параметры.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата Тогда
		ПериодВзаиморасчетов = Параметры.ПериодРегистрации;
	Иначе
		Возврат
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",				Параметры.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",			Параметры.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов",		КонецМесяца(ПериодВзаиморасчетов));
	Запрос.УстановитьПараметр("ИгнорируемыеРегистраторы",	Параметры.ИгнорируемыеРегистраторы);	
	
	// Зарплата по физлицам
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаСотрудников.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаФизлиц
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаСотрудников.ФизическоеЛицо";
	Запрос.Выполнить();	
	
	ПараметрыПолученияСотрудников =
		КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ПараметрыПолученияСотрудников.Организация			= Параметры.Организация;
	ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица	= "ВТЗарплатаФизлиц";
	ПараметрыПолученияСотрудников.ОкончаниеПериода		= МИН(КонецМесяца(Параметры.ПериодРегистрации), Параметры.Дата);
	
	// Получаем всех сотрудников переданных физлиц
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(
		МенеджерВременныхТаблиц, Истина, 
		ПараметрыПолученияСотрудников,
		"ВТСотрудникиФизическихЛиц");
		
	// Запрашиваем плановые авансы всех сотрудников рассматриваемых физлиц
	СоздатьВТПлановыйАванс(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, "ВТСотрудникиФизическихЛиц");		
	
	// Определяем плановые авансы физических лиц
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПлановыйАванс.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТПлановыйАвансФизическихЛиц
		|ИЗ
		|	ВТПлановыйАванс КАК ПлановыйАванс
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыйАванс.ФизическоеЛицо";

	Если Параметры.ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Аванс Тогда 
		
		// Получаем остатки начислений первой половины месяца
		Запрос.Текст = 
			Запрос.Текст +
			ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) КАК КВыплате
			|ПОМЕСТИТЬ ВТНачисленныйАвансФизическихЛиц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
			|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
			|	ИЗ
			|		РегистрНакопления.ЗарплатаКВыплатеАвансом.Остатки(
			|				КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ),
			|				Организация = &Организация
			|					И ПериодВзаиморасчетов = &ПериодРегистрации
			|					И ФизическоеЛицо В
			|						(ВЫБРАТЬ
			|							ЗарплатаФизлиц.ФизическоеЛицо
			|						ИЗ
			|							ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ЗарплатаКВыплате.ФизическоеЛицо,
			|		ВЫБОР
			|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
			|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
			|		КОНЕЦ
			|	ИЗ
			|		РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплате
			|	ГДЕ
			|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
			|		И ЗарплатаКВыплате.Организация = &Организация
			|		И ЗарплатаКВыплате.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
			|		И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодРегистрации
			|		И ЗарплатаКВыплате.ФизическоеЛицо В
			|				(ВЫБРАТЬ
			|					ЗарплатаФизлиц.ФизическоеЛицо
			|				ИЗ
			|					ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеАвансом
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо";
			
		
	Иначе 	
		
		// Получаем начисленное в первой половине месяца 
		// (отрицательные итоги игнорируем ввиду их бессмысленности с точки зрения бизнес-логики).
		Запрос.Текст = 
			Запрос.Текст +
			ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) КАК КВыплате
			|ПОМЕСТИТЬ ВТНачисленныйАвансФизическихЛиц
			|ИЗ
			|	РегистрНакопления.ЗарплатаКВыплатеАвансом КАК ЗарплатаКВыплатеАвансом
			|ГДЕ
			|	ЗарплатаКВыплатеАвансом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И ЗарплатаКВыплатеАвансом.Организация = &Организация
			|	И ЗарплатаКВыплатеАвансом.Период <= КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
			|	И ЗарплатаКВыплатеАвансом.ФизическоеЛицо В
			|			(ВЫБРАТЬ
			|				ЗарплатаФизлиц.ФизическоеЛицо
			|			ИЗ
			|				ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеАвансом.ФизическоеЛицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(ЗарплатаКВыплатеАвансом.СуммаКВыплате) > 0";
		
	КонецЕсли;	
		
	// Остатки зарплаты к выплате по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеФизическихЛиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплате
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
		|				,
		|				ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
		|					И Организация = &Организация
		|					И ФизическоеЛицо В
		|						(ВЫБРАТЬ
		|							ЗарплатаФизлиц.ФизическоеЛицо
		|						ИЗ
		|							ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ВЫБОР
		|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
		|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
		|		КОНЕЦ
		|	ИЗ
		|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|	ГДЕ
		|		ЗарплатаКВыплате.Регистратор В(&ИгнорируемыеРегистраторы)
		|		И ЗарплатаКВыплате.ПериодВзаиморасчетов <= &ПериодВзаиморасчетов
		|		И ЗарплатаКВыплате.Организация = &Организация
		|		И ЗарплатаКВыплате.ФизическоеЛицо В
		|				(ВЫБРАТЬ
		|					ЗарплатаФизлиц.ФизическоеЛицо
		|				ИЗ
		|					ВТЗарплатаФизлиц КАК ЗарплатаФизлиц)) КАК ЗарплатаКВыплатеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо";
		
		
	// Предел выплаты по физлицам
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ПределВыплат.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ПределВыплат.КВыплате) КАК КВыплате
		|ПОМЕСТИТЬ ВТСальдоФизлиц
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПлановыйАванс.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ПлановыйАванс.КВыплате КАК КВыплате
		|	ИЗ
		|		ВТПлановыйАвансФизическихЛиц КАК ПлановыйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НачисленныйАванс.ФизическоеЛицо,
		|		НачисленныйАванс.КВыплате
		|	ИЗ
		|		ВТНачисленныйАвансФизическихЛиц КАК НачисленныйАванс
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗарплатаКВыплате.ФизическоеЛицо,
		|		ЗарплатаКВыплате.КВыплате
		|	ИЗ
		|		ВТЗарплатаКВыплатеФизическихЛиц КАК ЗарплатаКВыплате) КАК ПределВыплат
		|
		|СГРУППИРОВАТЬ ПО
		|	ПределВыплат.ФизическоеЛицо";
		
	// Коэффициент выплаты (отношение сальдо к зарплате, но не больше зарплаты)
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА Зарплата.КВыплате <= 0
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате > 1
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(Сальдо.КВыплате, 0) < 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(Сальдо.КВыплате, 0) / Зарплата.КВыплате КАК ЧИСЛО(25, 10))
		|	КОНЕЦ КАК Размер
		|ПОМЕСТИТЬ ВТКоэффициентыВыплаты
		|ИЗ
		|	ВТЗарплатаФизлиц КАК Зарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСальдоФизлиц КАК Сальдо
		|		ПО Зарплата.ФизическоеЛицо = Сальдо.ФизическоеЛицо";
		
	// Ограничиваем суммы зарплаты коэффициентами выплаты		
	Запрос.Текст = 
		Запрос.Текст +
		ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов() + 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
		|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
		|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
		|	ЗарплатаКВыплате.СтатьяФинансирования,
		|	ЗарплатаКВыплате.СтатьяРасходов,
		|	ЗарплатаКВыплате.ДокументОснование,
		|	ВЫРАЗИТЬ(ЗарплатаКВыплате.КВыплате * КоэффициентыВыплаты.Размер КАК ЧИСЛО(15, 2)) КАК КВыплате
		|ПОМЕСТИТЬ ВТЗарплатаКВыплатеОграниченнаяСальдоФизлиц
		|ИЗ
		|	ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоэффициентыВыплаты КАК КоэффициентыВыплаты
		|		ПО (КоэффициентыВыплаты.ФизическоеЛицо = ЗарплатаКВыплате.ФизическоеЛицо)";
	
	Запрос.Выполнить();
	
	// Удаляем временные таблицы
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАванс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлановыйАвансФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНачисленныйАвансФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТЗарплатаКВыплатеФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСальдоФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКоэффициентыВыплаты";
		
	Запрос.Выполнить();
	
	// Перемещаем зарплату, ограниченную сальдо, в ВТЗарплатаКВыплате
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТЗарплатаКВыплате
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	ВТЗарплатаКВыплатеОграниченнаяСальдоФизлиц КАК ЗарплатаКВыплате";
	Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаДанныеВедомостейДляОплаты(Ведомости, ИмяПараметраВедомости = "Ведомости", ИмяПараметраФизическиеЛица = "ФизическиеЛица")
	
	МенеджерыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		МенеджерыВедомостей.Вставить(ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка));
	КонецЦикла;	
	
	ТекстыЗапросовДанныхВедомостей = Новый Массив;
	Для Каждого МенеджерВедомости Из МенеджерыВедомостей Цикл
		ТекстыЗапросовДанныхВедомостей.Добавить(
			МенеджерВедомости.Ключ.ТекстЗапросаДанныеДляОплаты(ИмяПараметраВедомости, ИмяПараметраФизическиеЛица));
	КонецЦикла;	
	
	ТекстЗапросаДанныеВедомостейДляОплаты = 
		СтрСоединить(
			ТекстыЗапросовДанныхВедомостей,
			Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС);
			
	Возврат ТекстЗапросаДанныеВедомостейДляОплаты;
	
КонецФункции	

#КонецОбласти
