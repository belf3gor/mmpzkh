#Область РаботаСЛицевымиСчетами

// Функция возвращает статус лицевого счета.
//
// Параметры:
//  ЛицевойСчет - <Ссылка>
//              - Ссылка на лицевой счет.
//
// Возвращаемое значение:
//  Возвращается последнюю операцию производимую с лицевым счетом.
//
Функция СтатусЛицевогоСчета(ЛицевойСчет) Экспорт

	// Получаем статус лицевого счета:
	// 1 - Лицевой счет открыт или изменен.
	// 2 - Лицевой счет закрыт.
	// 3 - Лицевой счет не открыт.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КВП_ЛицевыеСчетаСрезПоследних.Действует
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК СтатусЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(, ЛицевойСчет = &ЛицевойСчет) КАК КВП_ЛицевыеСчетаСрезПоследних";

	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);

	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда 
		Возврат Результат.СтатусЛС;
	Иначе
		Возврат 3;
	КонецЕсли;

КонецФункции // СтатусЛицевогоСчета()

// Функция возвращается список регистрируемых в журнале документов.
//
// Параметры:
//  ИмяЖурнала      - <Строка>
//                  - Имя журнала.
//  СтатусДокумента - <Число>
//                  - Статус лицевого счета: 1 - Открыт или изменен
//                    2 - Закрыт
//                    3 - С лицевым счетом не производились операции.
//
// Возвращаемое значение:
//  Возвращается список регистрируемых в журнале документов.
//
Функция ПолучитьСписокРегистрируемыхВЖурналеДокументов(ИмяЖурнала, СтатусДокумента = Неопределено) Экспорт

	СписокВидовДокументов = Новый СписокЗначений;

	// Пробегаемся по всем регистрируемым документам журнала.
	Для Каждого МетаданныеДокумента Из Метаданные.ЖурналыДокументов[ИмяЖурнала].РегистрируемыеДокументы Цикл
		
		// Если лицевой счет закрыт.
		Если СтатусДокумента = 2 Тогда
			Продолжить;
		КонецЕсли;
		
		// Если лицевой счет уже открыт или изменен, то возвращаем "Изменение" и "Закрытие" лицевого счета.
		Если СтатусДокумента = 1 И МетаданныеДокумента.Имя = "КВП_ОткрытиеЛицевогоСчета" Тогда
			Продолжить;
		КонецЕсли;
		
		// Если лицевой счет еще не открыт, то возвращаем только "Открытие" лицевого счета.
		Если СтатусДокумента = 3 И НЕ МетаданныеДокумента.Имя = "КВП_ОткрытиеЛицевогоСчета" Тогда
			Продолжить;
		КонецЕсли;
		
		СписокВидовДокументов.Добавить(МетаданныеДокумента.Имя, МетаданныеДокумента.Представление());
		
	КонецЦикла;

	Возврат СписокВидовДокументов;

КонецФункции // ПолучитьСписокРегистрируемыхВЖурналеДокументов()

// Процедура проверяет таблицу значений на наличие закрытых лицевых счетов.
//
// Параметры:
//  ЛицевыеСчета         - лицевой счет или таблица значений с лицевыми счетами и номерами строк;
//  Дата                 - дата, на которую производим анализ лицевого счета;
//  СтандартнаяОбработка - булево, признак стандартной обработки в обработке выбора;
//  Проведение           - булево, признак проведения документа;
//
Процедура ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов(ЛицевыеСчета, Знач Дата = Неопределено, СтандартнаяОбработка = Истина,
	                                                     Проведение = Ложь, ТекстСообщения = "") Экспорт
	
	Запрос = Новый Запрос;
	ТипЛицевыхСчетов = ТипЗнч(ЛицевыеСчета);
	ЭтоЛицевойСчет = Ложь;
	Дата = ?(Дата = Неопределено, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), Дата);
	
	Если ТипЛицевыхСчетов = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ГлавнаяТаблица КАК ЛицевойСчет,
		|	&ДатаПроверки КАК ДатаПроверки,
		|	0 КАК НомерСтроки
		|ПОМЕСТИТЬ ТаблицаЛС";
		
		ЭтоЛицевойСчет = Истина;
		
	Иначе // табличная часть или таблица значений
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЛС.НомерСтроки,
		|	ТаблицаЛС.Объект КАК ЛицевойСчет,
		|	ТаблицаЛС.ДатаПроверки
		|ПОМЕСТИТЬ ТаблицаЛС
		|ИЗ
		|	&ГлавнаяТаблица КАК ТаблицаЛС
		|ГДЕ
		|	ТаблицаЛС.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчета.Действует КАК Действует,
	|	ЛицевыеСчета.Период КАК Период,
	|	ЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК ЛицевыеСчета
	|ГДЕ
	|	ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				ТаблицаЛС.ЛицевойСчет
	|			ИЗ
	|				ТаблицаЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.НомерСтроки,
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.ДатаПроверки,
	|	КВП_ЛС.Действует,
	|	КВП_ЛС.Период,
	|	ВЫБОР
	|		КОГДА КВП_ЛС.Действует ЕСТЬ NULL 
	|			ТОГДА ""Не открыт""
	|		ИНАЧЕ ""Закрыт""
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	ТаблицаЛС КАК ТаблицаЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК КВП_ЛС
	|		ПО (КВП_ЛС.ЛицевойСчет = ТаблицаЛС.ЛицевойСчет)
	|			И (КВП_ЛС.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ЛицевыеСчета.Период
	|				ИЗ
	|					втЛицевыеСчета КАК ЛицевыеСчета
	|				ГДЕ
	|					ЛицевыеСчета.Период <= ТаблицаЛС.ДатаПроверки
	|					И ЛицевыеСчета.ЛицевойСчет = ТаблицаЛС.ЛицевойСчет
	|				УПОРЯДОЧИТЬ ПО
	|					ЛицевыеСчета.Период УБЫВ))
	|ГДЕ
	|	(КВП_ЛС.Действует ЕСТЬ NULL 
	|			ИЛИ НЕ КВП_ЛС.Действует)";
	
	Запрос.УстановитьПараметр("ГлавнаяТаблица", ЛицевыеСчета);
	Запрос.УстановитьПараметр("ДатаПроверки",  Дата);
	
	ВыборкаЛС = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		Если ВыборкаЛС.ДатаПроверки = Дата(1,1,1) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибки = "";
		Если ВыборкаЛС.Состояние = "Не открыт" Тогда
			ТекстОшибки = """ еще не открыт на дату " + Формат(ВыборкаЛС.ДатаПроверки, "ДЛФ=Д");
		ИначеЕсли ВыборкаЛС.Состояние = "Закрыт" Тогда
			ТекстОшибки = """ уже закрыт на дату " + Формат(ВыборкаЛС.ДатаПроверки, "ДЛФ=Д");
		КонецЕсли;
		
		Если ЭтоЛицевойСчет И Не Проведение Тогда
			СтандартнаяОбработка = Ложь;
			ТекстСообщения = "Лицевой счет """ + ВыборкаЛС.ЛицевойСчет + ТекстОшибки + "." + Символы.ПС + "Продолжить?";
		ИначеЕсли ЭтоЛицевойСчет И Проведение Тогда
			ТекстСообщения = "Лицевой счет """ + ВыборкаЛС.ЛицевойСчет + ТекстОшибки;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			ТекстСообщения = "В строке номер """ 
			               + ВыборкаЛС.НомерСтроки 
			               + """ табличной части ""Объекты"": Лицевой счет """ + ВыборкаЛС.ЛицевойСчет;
			ТекстСообщения = ТекстСообщения + ТекстОшибки;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

// Функция возвращает пустую таблицу с необходимой структурой для передачи ее в качестве параметра
// в функцию "ПроверитьТаблицуНаНаличиеЗакрытыхЛицевыхСчетов()".
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  ТаблицаЗначений - пустая таблица для проверки лицевых счетов.
//
Функция ПодготовитьТаблицуЛицевыхСчетовДляПроверки() Экспорт
	
	ТаблицаЛС = Новый ТаблицаЗначений;
	ТаблицаЛС.Колонки.Добавить("Объект",       Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаЛС.Колонки.Добавить("НомерСтроки",  Новый ОписаниеТипов("Число"));
	ТаблицаЛС.Колонки.Добавить("ДатаПроверки", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаЛС;
	
КонецФункции // ПодготовитьТаблицуЛицевыхСчетовДляПроверки()

#КонецОбласти

#Область РаботаСДоговорами

// Функция вызывает окно выбора договора контрагента с подготовленными настройками.
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Возвращается список типов договоров контрагентов.
//
Функция ПолучитьВидыДоговоров() Экспорт
	
	мУчетДоговоровСВидомПрочее = Константы.УПЖКХ_УчетДоговоровСВидомПрочее.Получить();
	
	ВидыДоговоров = Новый СписокЗначений;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Если мУчетДоговоровСВидомПрочее Тогда
		ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;
	
	Возврат ВидыДоговоров;
	
КонецФункции // ПолучитьВидыДоговоров()

// Получает договор контрагента по умолчанию с учетом условий отбора.
// Возвращается основной договор или единственный или пустая ссылка.
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов>.
//							Нужные виды договора.
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура.
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно.
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка.
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора,
										СписокВидовДоговора = Неопределено, СтруктураПараметров = Неопределено, ВыборСПриоритетом = Истина) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорыКонтрагентов.СрокДействия УБЫВ,
	|	ДоговорыКонтрагентов.Наименование";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = УПЖКХ_ТиповыеМетодыВызовСервера.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+ ?(СписокВидовДоговора <> Неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для Каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НовыйДоговор = Выборка.Ссылка;
		
	КонецЕсли;
	
	Если (ДоговорКонтрагента.Владелец <> ВладелецДоговора
	  ИЛИ ДоговорКонтрагента.Организация <> ГоловнаяОрганизацияДоговора) 
		ИЛИ (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // УстановитьДоговорКонтрагента()

// Функция возвращает вид сравнения для подстановки в текст запроса.
Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора)

	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;

КонецФункции // ПолучитьВидСравненияДляЗапроса()

#КонецОбласти

