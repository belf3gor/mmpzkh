
#Область ПроцедурыОбработкиСообщений

// Добавляет сообщение в таблицу.
//
Процедура ДобавитьСообщение(ТаблицаСообщений, ТекстСообщения, ВидСообщения = Неопределено, ИмяКатегории = "") Экспорт
	
	Если ВидСообщения = Неопределено Тогда
		ВидСообщения = Перечисления.УПЖКХ_ВидыСообщений.ОбычноеСообщение;
	КонецЕсли;
	
	// Проверяем входящие параметры. Добавляем сообщения, только если проверка прошла успешно.
	Если (ТипЗнч(ТаблицаСообщений) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(ТаблицаСообщений) = Тип("ДанныеФормыКоллекция"))
	   И ТипЗнч(ТекстСообщения) = Тип("Строка")
	   И ТипЗнч(ВидСообщения) = Тип("ПеречислениеСсылка.УПЖКХ_ВидыСообщений") Тогда
		
		НовоеСообщение = ТаблицаСообщений.Добавить();
		НовоеСообщение.ТекстСообщения = ?(ИмяКатегории = "", "", ИмяКатегории + ": ") + ТекстСообщения;
		НовоеСообщение.ВидСообщения   = ВидСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество сообщений об ошибках.
//
Функция ПолучитьКоличествоСообщенийОбОшибках(ТаблицаСообщений) Экспорт
	
	СтрокиСообщенийОбОшибках = ТаблицаСообщений.НайтиСтроки(Новый Структура("ВидСообщения", Перечисления.УПЖКХ_ВидыСообщений.СообщениеОбОшибке));
	
	Возврат СтрокиСообщенийОбОшибках.Количество();
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ СОСТАВОМ ПОЛЬЗОВАТЕЛЕЙ, УВЕДОМЛЯЕМЫХ О ВАЖНЫХ СОБЫТИЯХ

#Область УправлениеСоставомУведомляемыхПользователей

// Проверяет, нужно ли уведомлять текущего пользователя о важных событиях заданного механизма.
//
Функция ПроверитьИспользованиеУведомленийДляПользователя(Механизм) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НастройкаОповещения          = ПолучитьНастройкиИндивидуальногоОповещенияПользователей();
	СписокПользователейМеханизма = ПолучитьСписокПользователейМеханизма(Механизм, НастройкаОповещения);
	
	Возврат Не СписокПользователейМеханизма.НайтиПоЗначению(Пользователь) = Неопределено;
	
КонецФункции

// Включает уведомление текущего пользователя о важных событиях по заданному механизму.
//
Процедура ВключитьУведомлениеДляПользователя(Механизм) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.УПЖКХ_ОповещаемыеПользователи");
	Блокировка.Заблокировать();
	
	НастройкаОповещения          = ПолучитьНастройкиИндивидуальногоОповещенияПользователей();
	СписокПользователейМеханизма = ПолучитьСписокПользователейМеханизма(Механизм, НастройкаОповещения);
	
	Если СписокПользователейМеханизма.НайтиПоЗначению(Пользователь) = Неопределено Тогда
		СписокПользователейМеханизма.Добавить(Пользователь);
		
		НастройкаОповещения.Вставить(Механизм, СписокПользователейМеханизма);
		Константы.УПЖКХ_ОповещаемыеПользователи.Установить(Новый ХранилищеЗначения(НастройкаОповещения));
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Отключает уведомление текущего пользователя о важных событиях по заданному механизму.
//
Процедура ОтключитьУведомлениеДляПользователя(Механизм) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Добавить("Константа.УПЖКХ_ОповещаемыеПользователи");
	Блокировка.Заблокировать();
	
	НастройкаОповещения          = ПолучитьНастройкиИндивидуальногоОповещенияПользователей();
	СписокПользователейМеханизма = ПолучитьСписокПользователейМеханизма(Механизм, НастройкаОповещения);
	
	УдаляемыйЭлементСписка = СписокПользователейМеханизма.НайтиПоЗначению(Пользователь);
	
	Если Не УдаляемыйЭлементСписка = Неопределено Тогда
		СписокПользователейМеханизма.Удалить(УдаляемыйЭлементСписка);
		
		НастройкаОповещения.Вставить(Механизм, СписокПользователейМеханизма);
		Константы.УПЖКХ_ОповещаемыеПользователи.Установить(Новый ХранилищеЗначения(НастройкаОповещения));
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает соответствие всех механизмов, где используются уведомления, и списков
// уведомляемых пользователей для каждого из них.
//
Функция ПолучитьНастройкиИндивидуальногоОповещенияПользователей()
	
	НастройкаОповещения = Константы.УПЖКХ_ОповещаемыеПользователи.Получить().Получить();
	
	Если Не ТипЗнч(НастройкаОповещения) = Тип("Соответствие") Тогда
		НастройкаОповещения = Новый Соответствие;
	КонецЕсли;
	
	Возврат НастройкаОповещения;
	
КонецФункции

// Возвращает список пользователей, которых нужно уведомлять для заданного механизма и соответствия.
//
Функция ПолучитьСписокПользователейМеханизма(Механизм, НастройкаОповещения)
	
	СписокПользователейМеханизма = НастройкаОповещения.Получить(Механизм);
	
	Если СписокПользователейМеханизма = Неопределено Тогда
		СписокПользователейМеханизма = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат СписокПользователейМеханизма;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА НАПОМИНАНИЙ ПОЛЬЗОВАТЕЛЯМ О ВАЖНЫХ СОБЫТИЯХ (ОБЩЕЕ)

#Область ПодготовкаНапоминанийПользователямОВажныхСобытияхОбщее

// Выполняет сбор информации о важных событиях. Запускается регламентным заданием по расписанию.
//
Процедура ПодготовитьВажныеСообщенияПользователям() Экспорт
	
	НастройкаОповещения = ПолучитьНастройкиИндивидуальногоОповещенияПользователей();
	
	// Для каждого механизма, в котором используется уведомление о важных событиях, проверяем наличие
	// уведомляемых пользователей и выполяем получение информации о важных событиях.
	Для каждого ТекСтрока из НастройкаОповещения Цикл
		
		ТекМеханизм = ТекСтрока.Ключ;
		
		СписокПользователейМеханизма = ПолучитьСписокПользователейМеханизма(ТекМеханизм, НастройкаОповещения);
		
		Если Не СписокПользователейМеханизма.Количество() = 0 Тогда
			Если ТекМеханизм = Справочники.УПЖКХ_МеханизмыИспользующиеНапоминанияПользователей.ОбменСГолосовымиСервисами Тогда
				ПодготовитьВажныеСообщенияМАРС(ТекМеханизм, СписокПользователейМеханизма);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очищает все напоминания пользователей по заданному предмету напоминания.
//
Процедура ОчиститьНапоминанияПоУказанномуМеханизму(Механизм)
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Механизм);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Формирует напоминания с заданным текстом и предметом напоминания для списка пользователей.
//
Процедура СформироватьНапоминанияПоУказанномуМеханизму(Механизм, ТекстНапоминания, СписокПользователей)
	
	НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Источник.Установить(Механизм);
	НаборЗаписей.Прочитать();
	
	Для каждого ТекПользователь из СписокПользователей Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Источник        = Механизм;
		НоваяЗапись.Пользователь    = ТекПользователь.Значение;
		НоваяЗапись.ВремяСобытия    = ТекущаяДата();
		НоваяЗапись.СрокНапоминания = НоваяЗапись.ВремяСобытия;
		НоваяЗапись.Описание        = ТекстНапоминания;
		НоваяЗапись.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ПОДГОТОВКА НАПОМИНАНИЙ ПОЛЬЗОВАТЕЛЯМ О ВАЖНЫХ СОБЫТИЯХ (ГОЛОСОВЫЕ СЕРВИСЫ)

#Область ПодготовкаНапоминанийПользователямОВажныхСобытияхГолосовыеСервисы

// Собирает сведения о важных событиях для голосовых сервисов и формирует напоминания пользователей.
//
Процедура ПодготовитьВажныеСообщенияМАРС(Механизм, СписокПользователей)
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	Если ЗначениеЗаполнено(СохраненныеНастройки.ПерсональныйURL)
	   И ЗначениеЗаполнено(СохраненныеНастройки.Логин)
	   И ЗначениеЗаполнено(СохраненныеНастройки.Пароль) Тогда
		
		СведенияОбУчетнойЗаписиПользователя = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьСведенияОбУчетнойЗаписи(СохраненныеНастройки.ПерсональныйURL, СохраненныеНастройки.Логин, СохраненныеНастройки.Пароль);
		
		Если ТипЗнч(СведенияОбУчетнойЗаписиПользователя) = Тип("Структура") И СведенияОбУчетнойЗаписиПользователя.ВыполненоУспешно = Истина Тогда
			
			ОчиститьНапоминанияПоУказанномуМеханизму(Механизм);
			
			ОсталосьМалоМинутДляАвтообзвона = (СведенияОбУчетнойЗаписиПользователя.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжников
										   ИЛИ СведенияОбУчетнойЗаписиПользователя.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний)
											 И СведенияОбУчетнойЗаписиПользователя.ОсталосьСекундДляАвтообзвона < СохраненныеНастройки.ПорогПредупрежденияОМаломКоличествеОставшегосяВремени;
			ОсталосьМалоМинутДляПриемаПоказаний = (СведенияОбУчетнойЗаписиПользователя.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний
											   ИЛИ СведенияОбУчетнойЗаписиПользователя.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний)
												 И СведенияОбУчетнойЗаписиПользователя.ОсталосьСекундДляПриемаПоказаний < СохраненныеНастройки.ПорогПредупрежденияОМаломКоличествеОставшегосяВремени;
			
			Если ОсталосьМалоМинутДляАвтообзвона ИЛИ ОсталосьМалоМинутДляПриемаПоказаний Тогда
				
				СообщениеПользователям =
				"На голосовых сервисах осталось мало минут:
				|" +
				?(ОсталосьМалоМинутДляАвтообзвона,
				СтрШаблон("Автообзвон: %1
				|", УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПреобразоватьКоличествоОставшихсяСекундВСтроку(СведенияОбУчетнойЗаписиПользователя.ОсталосьСекундДляАвтообзвона)), "") +
				?(ОсталосьМалоМинутДляПриемаПоказаний,
				СтрШаблон("Прием показаний: %1.", УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПреобразоватьКоличествоОставшихсяСекундВСтроку(СведенияОбУчетнойЗаписиПользователя.ОсталосьСекундДляПриемаПоказаний)), "");
				
				СформироватьНапоминанияПоУказанномуМеханизму(Механизм, СообщениеПользователям, СписокПользователей);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
