///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ИнтернетПоддержкаПользователей.РаботаВМоделиСервиса.РаботаСКлассификаторами".
// ОбщийМодуль.РаботаСКлассификаторамиСлужебныйВМоделиСервиса.
//
// Серверные процедуры и функции загрузки классификаторов из поставляемых данных:
//  - обработка дескрипторов поставляемых данных;
//  - загрузка не разделенных классификаторов;
//  - распространение по областям разделенных классификаторов;
//  - обработка данных классификаторов в областях;
//  - обработка событий Библиотеки технологии сервиса;
//  - получение файлов классификаторов из поставляемых данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы() Тогда
		
		Идентификатор = "";
		Версия        = "";
		Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
			Если Характеристика.Code = "Идентификатор" Тогда
				Идентификатор = Характеристика.Value;
			ИначеЕсли Характеристика.Code = "Версия" Тогда
				Версия = Число(Характеристика.Value);
			КонецЕсли;
		КонецЦикла;
		
		// Классификатор будет загружен, если в сервис были опубликованы новые данные.
		Настройки = РаботаСКлассификаторами.НастройкиКлассификатора(Идентификатор);
		Загружать = Настройки <> Неопределено;
		
		Если Не Загружать Тогда
			Возврат;
		КонецЕсли;
		
		// Начальное заполнение номера версии,
		// для новых классификаторов.
		Если Настройки.Версия = 0 Тогда
			Настройки.Версия = РаботаСКлассификаторами.ОбработатьНачальнуюВерсиюКлассификатора(Идентификатор);
		КонецЕсли;
		
		Загружать = (Настройки <> Неопределено
			И Настройки.Версия < Версия);
		
		Если Не Загружать Тогда
			Возврат;
		КонецЕсли;
		
		// Для классификаторов, которые не обновляются автоматический,
		// файлы сохраняются в кэше поставляемых данных, поэтому перед загрузкой будет
		// проверен номер версии у дескриптора сохраненного в кэше.
		// Проверка необходима для оптимизации загрузки поставляемых файлов,
		// т.к. после обновления конфигурации поставляемые данные будут
		// запрошены из Менеджера сервиса. Если не выполнять проверку,
		// файлы будут загружены повторно, что отрицательно скажется на
		// производительности системы. 
		Если Не Настройки.ОбновлятьАвтоматически Тогда
			МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
			ДескрипторКэш = МодульПоставляемыеДанные.ДескрипторПоставляемыхДанныхИзКэша(Дескриптор.FileGUID);
			Если ДескрипторКэш <> Неопределено Тогда
				ВерсияКэш = 0;
				Для Каждого Характеристика Из ДескрипторКэш.Характеристики Цикл
					Если Характеристика.Код = "Версия" Тогда
						ВерсияКэш = Число(Характеристика.Значение);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ВерсияКэш >= Версия Тогда
					Загружать = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы() Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = "";
	Версия        = "";
	Для Каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Идентификатор" Тогда
			Идентификатор = Характеристика.Value;
		ИначеЕсли Характеристика.Code = "Версия" Тогда
			Версия = Число(Характеристика.Value);
		КонецЕсли;
	КонецЦикла;
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	Настройки = РаботаСКлассификаторами.НастройкиКлассификатора(Идентификатор);
	
	// Обновление будет выполняется интерактивно пользователем.
	Если Не Настройки.ОбновлятьАвтоматически Тогда
		МодульПоставляемыеДанные.СохранитьПоставляемыеДанныеВКэш(
			Дескриптор,
			ПутьКФайлу);
		РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Обработка классификатора %1 не требуется, т.к. настройка ОбновлятьАвтоматически имеет значение Ложь
					|подробнее см. реализацию метода РаботаСКлассификаторамиПереопределяемый.ПриДобавленииКлассификаторов.'"),
				Идентификатор),
			Ложь);
		Возврат;
	КонецЕсли;
	
	Если Настройки.СохранятьФайлВКэш Тогда
		МодульПоставляемыеДанные.СохранитьПоставляемыеДанныеВКэш(
			Дескриптор,
			ПутьКФайлу);
		РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл классификатора %1 сохранен в кэше поставляемых данных.'"),
				Идентификатор),
			Ложь);
	КонецЕсли;
	
	ДанныеФайла = Новый ДвоичныеДанные(ПутьКФайлу);
	АдресФайла  = ПоместитьВоВременноеХранилище(ДанныеФайла);
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Начало обработки Файл классификатора %1.'"),
			Идентификатор),
		Ложь);
	
	Если Настройки.ОбщиеДанные Тогда
		
		Обработан = Ложь;
		ДополнительныеПараметры = Новый Структура;
		
		РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора(
			Идентификатор,
			Версия,
			АдресФайла,
			Обработан,
			ДополнительныеПараметры);
		
		Если Обработан Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			РаботаСКлассификаторами.УстановитьВерсиюКлассификатора(
				Идентификатор,
				Версия);
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Настройки.ОбработкаРазделенныхДанных Тогда
				ОбновитьДанныеОбластей = Новый Массив;
				
				НастройкиКлассификатора = Новый Структура;
				НастройкиКлассификатора.Вставить("Идентификатор",           Идентификатор);
				НастройкиКлассификатора.Вставить("Версия",                  Версия);
				НастройкиКлассификатора.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
				ОбновитьДанныеОбластей.Добавить(НастройкиКлассификатора);
				
				ВыполнитьОбновлениеКлассификаторовВОбластяхДанных(
					ОбновитьДанныеОбластей,
					Дескриптор.FileGUID);
			КонецЕсли;
			
		Иначе
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поставляемые данные классификатора:
					|Идентификатор: %1
					|Версия: %2'"),
				Идентификатор,
				Версия);
			
			РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			
		КонецЕсли;
	Иначе
		
		ОбластиДляОбновления = МодульПоставляемыеДанные.ОбластиТребующиеОбработки(
			Дескриптор.FileGUID,
			РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы());
		
		ОшибкиОбработки = РаспространитьКлассификаторыПоОД(
			Идентификатор,
			Версия,
			Дескриптор.FileGUID,
			АдресФайла,
			ОбластиДляОбновления,
			РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы());
		
		Если Не ОшибкиОбработки Тогда
			УстановитьПривилегированныйРежим(Истина);
			РаботаСКлассификаторами.УстановитьВерсиюКлассификатора(
				Идентификатор,
				Версия);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Завершена обработка файла классификатора %1.'"),
			Идентификатор),
		Ложь);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

// При работе в модели сервиса файлы классификаторов кэшируются в поставляемых
// данных, поэтому для удаленных классификаторов необходимо удалить кэш.
//
// Параметры:
//  Идентификаторы - Массив - содержит фильтр, который используется для
//              отбора поставляемых данных.
//
Процедура УдалитьКэшПоставляемыхКлассификаторов(Идентификаторы) Экспорт
	
	Если Идентификаторы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Характеристики = Новый Структура;
		Характеристики.Вставить("Код",      "Идентификатор");
		Характеристики.Вставить("Значение", Идентификатор);
		
		Отбор = Новый Массив;
		Отбор.Добавить(Характеристики);
		
		Дескрипторы = МодульПоставляемыеДанные.ДескрипторыПоставляемыхДанныхИзКэша(
			РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы(),
			Отбор);
		
		Для Каждого Дескриптор Из Дескрипторы Цикл
			МодульПоставляемыеДанные.УдалитьПоставляемыеДанныеИзКэша(
				Дескриптор.ИдентификаторФайла);
		КонецЦикла;
		
	КонецЦикла;
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удален кэш поставляемых данных классификаторов: %1'"),
			СтрСоединить(Идентификаторы, ",")));
	
КонецПроцедуры

// Добавляет задание на она обновление данных классификаторов в областях.
//
// Параметры:
//  НастройкиКлассификаторов - Массив - содержит настройки обновления классификаторов:
//    *Идентификатор - Строка - идентификатор классификатора в сервисе;
//    *Версия - Число  - номер загруженной версии классификатора;
//    *ДополнительныеПараметры - Структура - дополнительные параметры обработки областей.
//
Процедура ЗапланироватьОбновлениеДанныхОбластей(НастройкиКлассификаторов) Экспорт
	
	Если НастройкиКлассификаторов.Количество() > 0 Тогда
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(НастройкиКлассификаторов);
		ПараметрыМетода.Добавить(Новый УникальныйИдентификатор);
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяМетода", "ВыполнитьОбновлениеКлассификаторовВОбластяхДанных");
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ОбластьДанных", -1);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ТекущаяУниверсальнаяДата());
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		
		МодульОчередьЗаданий = ОбщегоНазначения.ОбщийМодуль("ОчередьЗаданий");
		МодульОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает алгоритмы обработки данных классификаторов в областях.
//
// Параметры:
//  ОбновитьДанныеОбластей - Массив - содержит настройки обновления классификаторов:
//    *Идентификатор - Строка - идентификатор классификатора в сервисе;
//    *Версия - Число  - номер загруженной версии классификатора;
//    *ДополнительныеПараметры - Структура - дополнительные параметры обработки областей.
//  ИдентификаторФайла - УникальныйИдентификатор - идентификатор файла поставляемых данных.
//
Процедура ВыполнитьОбновлениеКлассификаторовВОбластяхДанных(ОбновитьДанныеОбластей, ИдентификаторФайла) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	ОбластиДляОбновления = МодульПоставляемыеДанные.ОбластиТребующиеОбработки(
		ИдентификаторФайла,
		РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы());
	
	Для Каждого ОбластьДанных Из ОбластиДляОбновления Цикл
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		
		Для Каждого НастройкиКлассификатора Из ОбновитьДанныеОбластей Цикл
			
			Попытка
				
				РаботаСКлассификаторамиВМоделиСервисаПереопределяемый.ПриОбработкеОбластиДанных(
					НастройкиКлассификатора.Идентификатор,
					НастройкиКлассификатора.Версия,
					НастройкиКлассификатора.ДополнительныеПараметры);
					
				Если ТранзакцияАктивна() Тогда
				
					Пока ТранзакцияАктивна() Цикл
						ОтменитьТранзакцию();
					КонецЦикла;
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По завершении выполнения обработчика ПриОбработкеОбластиДанных классификатора %1 не была закрыта транзакция.'"),
						НастройкиКлассификатора.Идентификатор);
					РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
						ТекстСообщения,
						Истина);
				
				КонецЕсли;
			Исключение
			
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
				
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать разделенные данные классификатора:
						|Идентификатор: %1
						|Версия: %2
						|Область данных: %3,
						|Подробная информация об ошибке:
						|В результате выполнения обработчика ПриОбработкеОбластиДанных возникло исключение:
						|%4'"),
					НастройкиКлассификатора.Идентификатор,
					НастройкиКлассификатора.Версия,
					ОбластьДанных,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
				
				// Перед входом в новую область необходимо перейти
				// в неразделенных сеанс.
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			
			КонецПопытки;
			
		КонецЦикла;
		
		МодульПоставляемыеДанные.ОбластьОбработана(
			ИдентификаторФайла,
			РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы(),
			ОбластьДанных);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновляет данные классификаторов в областях данных.
//
// Параметры:
//  Идентификатор        - Строка - идентификатор классификатора в сервисе;
//  Версия               - Число - номер новой версии классификатора;
//  АдресФайла           - Строка - адрес файла в файловом хранилище;
//  ИдентификаторФайла   - УникальныйИдентификатор - файл обрабатываемого классификатора;
//  ОбластиДляОбновления - Массив с- содержит список кодов областей;
//  КодОбработчика       - Строка -  код обработчика.
//
// Возвращаемое значение:
//  Булево - если Истина, при обновлении классификатора были ошибки.
//
Функция РаспространитьКлассификаторыПоОД(
		Идентификатор,
		Версия,
		ИдентификаторФайла,
		АдресФайла,
		ОбластиДляОбновления,
		КодОбработчика)
	
	ОшибкиОбработки          = Ложь;
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	Для каждого ОбластьДанных Из ОбластиДляОбновления Цикл
		
		РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		
		НастройкиВерсия = РаботаСКлассификаторами.ВерсияКлассификатора(Идентификатор);
		Если НастройкиВерсия = Неопределено Тогда
			НастройкиВерсия = 0;
		КонецЕсли;
		
		// Начальное заполнение номера версии,
		// для новых классификаторов.
		Если НастройкиВерсия = 0 Тогда
			НастройкиВерсия = РаботаСКлассификаторами.ОбработатьНачальнуюВерсиюКлассификатора(Идентификатор);
		КонецЕсли;
		
		// Если актуальная версия классификатора уже загружена в область,
		// повторная загрузка не требуется.
		Если НастройкиВерсия >= Версия Тогда
			МодульПоставляемыеДанные.ОбластьОбработана(
				ИдентификаторФайла,
				КодОбработчика,
				ОбластьДанных);
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			Обработан = Ложь;
			РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора(
				Идентификатор,
				Версия,
				АдресФайла,
				Обработан,
				Новый Структура);
			
			Если ТранзакцияАктивна() Тогда
				
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По завершении выполнения обработчика ПриЗагрузкеКлассификатора классификатора %1 не была закрыта транзакция.'"),
					Идентификатор);
				РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
					ТекстСообщения,
					Истина);
				
			КонецЕсли;
			
			Если Обработан Тогда
				РаботаСКлассификаторами.УстановитьВерсиюКлассификатора(
					Идентификатор,
					Версия);
				МодульПоставляемыеДанные.ОбластьОбработана(
					ИдентификаторФайла,
					КодОбработчика,
					ОбластьДанных);
			Иначе
				
				ОшибкиОбработки   = Истина;
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось обработать поставляемые данные классификатора:
						|Идентификатор: %1
						|Версия: %2
						|Область данных: %3'"),
					Идентификатор,
					Версия,
					ОбластьДанных);
				
				РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
					СообщениеОбОшибке,
					Истина);
				
				// Перед входом в новую область необходимо перейти
				// в неразделенных сеанс.
				РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
				
			КонецЕсли;
			
		Исключение
			
			ОшибкиОбработки = Истина;
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать поставляемые данные классификатора:
					|Идентификатор: %1
					|Версия: %2
					|Область данных: %3,
					|Подробная информация об ошибке:
					|В результате выполнения обработчика ПриЗагрузкеКлассификатора возникло исключение:
					|%4'"),
				Идентификатор,
				Версия,
				ОбластьДанных,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке);
			
			// Перед входом в новую область необходимо перейти
			// в неразделенных сеанс.
			РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Ложь);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ОшибкиОбработки;
	
КонецФункции

// Возвращает список описаний актуальных версий классификаторов, которые доступны пользователю
// на текущий момент.
//
// Параметры:
//  Идентификаторы  - Массив - содержит список идентификаторов классификаторов,
//                    для которых необходимо проверить наличие обновлений.
//
// Возвращаемое значение:
//   Структура - содержит результат операции:
//    *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//    *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//    *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//    *ДанныеКлассификаторов - ТаблицаЗначений - см. функцию ОписаниеДанныхКлассификаторов().
//
Функция ИнформацияОбАктуальныхВерсияхКлассификаторов(Идентификаторы) Экспорт
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Начало получения информации об актуальных версиях классификаторов: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",             "");
	РезультатОперации.Вставить("Ошибка",                Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",     "");
	РезультатОперации.Вставить("ИнформацияОбОшибке",    "");
	РезультатОперации.Вставить("ДанныеКлассификаторов", РаботаСКлассификаторами.ОписаниеДанныхКлассификаторов(Истина));
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	Для Каждого Идентификатор Из Идентификаторы Цикл
		
		Характеристики = Новый Структура;
		Характеристики.Вставить("Код",      "Идентификатор");
		Характеристики.Вставить("Значение", Идентификатор);
		
		Отбор = Новый Массив;
		Отбор.Добавить(Характеристики);
		
		Дескриптор = МодульПоставляемыеДанные.ДескрипторыПоставляемыхДанныхИзКэша(
			РаботаСКлассификаторами.ВидПоставляемыхДанныхКлассификаторы(),
			Отбор);
		
		Если Дескриптор.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОписательВерсии = РезультатОперации.ДанныеКлассификаторов.Добавить();
		ОписательВерсии.ИдентификаторФайла = Дескриптор[0].ИдентификаторФайла;
		Для Каждого Характеристика Из Дескриптор[0].Характеристики Цикл
			// Подмена идентификатора в сервисе на идентификатор поставляемых данных.
			Если СокрЛП(Характеристика.Код) = "ИдентификаторФайла" Тогда
				Продолжить;
			КонецЕсли;
			ОписательВерсии[СокрЛП(Характеристика.Код)] = Характеристика.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Завершено получение актуальных версий классификаторов: %1'"),
		СтрСоединить(Идентификаторы, ","));
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	Возврат РезультатОперации;
	
КонецФункции

// Выполняет загрузку файлов из поставляемых данных.
//
// Параметры:
//  Идентификаторы  - Массив - содержит список идентификаторов классификаторов,
//                    для которых необходимо проверить наличие обновлений.
//  ИдентификаторФайла - СправочникСсылка.ПоставляемыеДанные - ссылка на файл поставляемых данных.
//
// Возвращаемое значение:
//  Структура - содержит результат операции:
//   *Ошибка - Булево - Истина, если в не удалось получить информацию из сервиса;
//   *СообщениеОбОшибке - Строка - описание ошибки для пользователя;
//   *ИнформацияОбОшибке - Строка - описание ошибки для администратора;
//   *АдресФайла - Строка - адрес двоичных данных файла во временном хранилище.
//
Функция ЗагрузитьФайлКлассификатора(Идентификатор, ИдентификаторФайла) Экспорт
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("КодОшибки",          "");
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("СообщениеОбОшибке",  "");
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	РезультатОперации.Вставить("АдресФайла",         "");
	
	РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение файла классификатора: %1'"),
			ИдентификаторФайла),
		Ложь);
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	ДанныеФайла = МодульПоставляемыеДанные.ПоставляемыеДанныеИзКэша(
		Новый УникальныйИдентификатор(ИдентификаторФайла));
	
	Если ДанныеФайла = Неопределено Тогда
		РезультатОперации.КодОшибки          = "ФайлНеЗагружен";
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при получении файла классификатора %1: 
				|Файл классификатора не обнаружен в поставляемых данных.'"),
			Идентификатор);
			
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить файл классификатора %1.
				|При загрузке файла сервис вернул ошибку: %2.
				|Идентификатор файла: %3
				|Причина:
				|Файл классификатора не обнаружен в поставляемых данных.'"),
			Идентификатор,
			РезультатОперации.КодОшибки,
			ИдентификаторФайла);
		РаботаСКлассификаторами.ЗаписатьИнформациюВЖурналРегистрации(
			РезультатОперации.ИнформацияОбОшибке,
			Истина);
	Иначе
		РезультатОперации.АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла);
	КонецЕсли;
	
	Возврат РезультатОперации;
	
КонецФункции

#КонецОбласти
