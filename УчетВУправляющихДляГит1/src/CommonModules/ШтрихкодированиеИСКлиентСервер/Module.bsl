
#Область ПрограммныйИнтерфейс

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
// 
// Параметры:
// 	Контекст - Неопределено, ДокументСсылка, УправляемаяФорма - Источник данных для формирования параметров сканирования.
// 	ФормаВыбора - Неопределено - Описание
// 	ВидПродукции - Неопределено - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы.
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать 
// 	об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией.
// * ДопустимыеВидыПродукции - Массив из ПеречислениеСсылка.ПеречислениеМенеджер.ВидыПродукцииИС - Виды продукции, 
// 	которые поддерживает контекст.
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД.
// * ДокументОснование - Неопределено, ДокументСсылка - Документ основание.
// * СоздаватьШтрихкодУпаковки - Булево - Истина, если необходимо создавать элемент справочника штрихкоды упаковок.
// * АдресСоответствияАкцизныхМарок - Строка - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам.
// * АдресДанныхДокументаОснования - Строка - адрес во временном хранилище, где хранятся данные документа основания.
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - Истина, если реквизит на форме СоответствиеШтрихкодовСтрокДерева.
// * ДанныеВыбораПоМаркируемойПродукции - Структура - последние данные выбора, которые требовалось запомнить для последующего сканирования.
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются.
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов.
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
// *            отражает расход по складу, "Возврат" - для документов, отражающих приход.
Функция ИнициализироватьПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = Новый Структура;
	
	ПараметрыСканирования.Вставить("ДопустимыеВидыПродукции",                        Новый Массив);
	ПараметрыСканирования.Вставить("АдресСоответствияАкцизныхМарок",                 Неопределено);
	ПараметрыСканирования.Вставить("СоздаватьШтрихкодУпаковки",                      Истина);
	ПараметрыСканирования.Вставить("ДокументОснование",                              Неопределено);
	ПараметрыСканирования.Вставить("ВозможнаЗагрузкаТСД",                            Ложь);
	ПараметрыСканирования.Вставить("ТолькоМаркируемаяПродукция",                     Ложь);
	ПараметрыСканирования.Вставить("КэшированныеЗначения",                           Неопределено);
	ПараметрыСканирования.Вставить("КонтрольРасхожденийСДокументомОснованием",       Истина);
	ПараметрыСканирования.Вставить("АдресДанныхДокументаОснования",                  Неопределено);
	ПараметрыСканирования.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",  Ложь);
	ПараметрыСканирования.Вставить("ДанныеВыбораПоМаркируемойПродукции",             Неопределено);
	ПараметрыСканирования.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции", Ложь);
	ПараметрыСканирования.Вставить("ДополнительныеПараметры",                        Новый Структура);
	ПараметрыСканирования.Вставить("ОперацияКонтроляАкцизныхМарок",                  "");
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "АдресСоответствияАкцизныхМарок") Тогда
			ПараметрыСканирования.АдресСоответствияАкцизныхМарок = Контекст.АдресСоответствияАкцизныхМарок;
		КонецЕсли;
		
	КонецЕсли;
	
	ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ФормаВыбора, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Возвращает сокращенное представление штрихкода маркируемой продукции.
// 
// Параметры:
// 	Штрихкод - Строка - Штрихкод строкой.
// Возвращаемое значение:
// 	Строка - Краткое представление штрихкода маркируемой продукции.
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 30 Тогда
		ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "......" + Прав(ПредставлениеШтрихкода, 8);
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку и кэширование выбора данных после уточнения информации по продукции в диалоговом окне.
// 
// Параметры:
// 	Форма
// 	ДанныеШтрихкода
Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, ДанныеШтрихкода) Экспорт

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ДанныеШтрихкода.ДополнительныеПараметры;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ЗапомнитьВыбор") 
		И ДополнительныеПараметры.ЗапомнитьВыбор Тогда
		
		Если ДополнительныеПараметры.Свойство("ДанныеВыбора")
			И ТипЗнч(ДополнительныеПараметры.ДанныеВыбора) = Тип("Структура") 
			И ДополнительныеПараметры.ДанныеВыбора.Количество() > 0 Тогда
		
			Форма.ДанныеВыбораПоМаркируемойПродукции = ДополнительныеПараметры.ДанныеВыбора;
			Форма.ДанныеВыбораПоМаркируемойПродукции.Вставить("АлкогольнаяПродукция", ДанныеШтрихКода.АлкогольнаяПродукция);
			Форма.ДанныеВыбораПоМаркируемойПродукции.Вставить("ТипШтрихКода", ДанныеШтрихКода.ТипШтрихКода);
			Форма.СохраненВыборПоМаркируемойПродукции = Истина;
			
			ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ДанныеВыбораПоМаркируемойПродукции <> Неопределено Тогда
		
		ТребуетсяСбросВыбора = Ложь;
		
		Если Форма.ДанныеВыбораПоМаркируемойПродукции.ТипШтрихкода <> ДанныеШтрихкода.ТипШтрихкода Тогда
			
			ТребуетсяСбросВыбора = Истина;
			
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
		          И ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)
		          И ДанныеШтрихкода.АлкогольнаяПродукция <> Форма.ДанныеВыбораПоМаркируемойПродукции.АлкогольнаяПродукция Тогда
			
			ТребуетсяСбросВыбора = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяСбросВыбора Тогда
		
			Форма.ДанныеВыбораПоМаркируемойПродукции  = Неопределено;
			Форма.СохраненВыборПоМаркируемойПродукции = Ложь;
			ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Формирует представление сохраненного выбора маркируемой проудкции после уточнения информации в диалоговом окне.
// 
// Параметры:
// 	Форма
Процедура ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма) Экспорт

	Элементы     = Форма.Элементы;
	ДанныеВыбора = Форма.ДанныеВыбораПоМаркируемойПродукции;
	
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Сохранен выбор:'"));
		
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура)),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика)),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Серия") И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Серия)),,
				Форма.ЦветТекстаПоля,, "ОткрытьСерию"));
		КонецЕсли;
		
		МассивСтрок.Добавить(". (");
		
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Сбросить'"),
					Новый Шрифт(,,,,Истина),
					Форма.ЦветГиперссылки,,
					"СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеСохраненногоВыбора = Новый ФорматированнаяСтрока(МассивСтрок);
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ЭтоСсылка   = Ложь;
	ЭтоФорма    = Ложь;
	Разделитель = ".";
	
	Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ЭтоСсылка         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ЭтоСсылка И ТипЗнч(Контекст) = Тип(ИмяОбъекта);
	
КонецФункции

Функция ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Успех = Ложь;
	ПодсистемаЕГАИССуществует = ПодсистемаСуществует("ГосИС.ЕГАИС");
	
	Если ПодсистемаЕГАИССуществует И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		Или ПодсистемаЕГАИССуществует И ВидПродукции = Неопределено Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования);
		Успех = Истина;
		
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

Функция ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Успех = Ложь;
	
	ПодсистемаМОТПСуществует = ПодсистемаСуществует("ГосИС.МОТП");
	
	Если ПодсистемаМОТПСуществует И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная")
		Или ПодсистемаМОТПСуществует И ВидПродукции = Неопределено Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования);
		Успех = Истина;
		
	КонецЕсли;
	
	Возврат Успех;
	
КонецФункции

Функция ДопустимаТабачнаяПродукция(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПодсистемаСуществует("ГосИС.МОТП") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидПродукцииТабачная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная");
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииТабачная) <> Неопределено;
	
КонецФункции

Функция ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидПродукцииАлкогольная = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииАлкогольная) <> Неопределено;
	
КонецФункции

// Проверяет код маркировки на соответствие шаблону штрихкодов GS1-128
// 
// Параметры:
// 	КодМаркировки
// Возвращаемое значение:
// 	Булево - Истина, если код соответствует GS1-128.
Функция ЭтоШтрихкодGS1(Штрихкод) Экспорт
	
	// Штрихкод GS1 должен быть преобразован в формат GS1 со скобками
	Если СтрНайти(Штрихкод, "(") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатРазбора = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьСтрокуШтрихкодаGS1(Штрихкод);
	
	Возврат РезультатРазбора.Разобран;
	
КонецФункции

Функция ОбработатьДанныеШтрихкода(ДанныеШтрихкода) Экспорт
	
	Штрихкод = СокрЛП(ДанныеШтрихкода.Штрихкод);
	
	Если МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(Штрихкод) Тогда
		Возврат ДанныеШтрихкода;
	КонецЕсли;
	
	ЗначениеТипаШтрихкода = МенеджерОборудованияКлиентСервер.ОпределитьТипШтрихкода(Штрихкод);
	Если ЗначениеТипаШтрихкода = "ITF14" Или ЗначениеТипаШтрихкода = "CODE39" Тогда
		Возврат ДанныеШтрихкода;
	КонецЕсли;
	
	Если ПодсистемаСуществует("ГосИС.ЕГАИС") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		Если МодульШтрихкодированиеЕГАИСКлиентСервер.ЭтоШтрихкодЛогистическойУпаковки(Штрихкод) Тогда
			Возврат ДанныеШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			
			НовыеДанныеШтрихкода = Новый Структура;
			НовыеДанныеШтрихкода.Вставить("Штрихкод",   ШтрихкодGS1);
			НовыеДанныеШтрихкода.Вставить("Количество", ДанныеШтрихкода.Количество);
			
			Возврат НовыеДанныеШтрихкода;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			
			ШтрихкодSSCC = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			
			НовыеДанныеШтрихкода = Новый Структура;
			НовыеДанныеШтрихкода.Вставить("Штрихкод",   ШтрихкодSSCC);
			НовыеДанныеШтрихкода.Вставить("Количество", ДанныеШтрихкода.Количество);
			
			Возврат НовыеДанныеШтрихкода;
			
		Иначе
			
			Возврат ДанныеШтрихкода;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ДанныеШтрихкода;
		
	КонецЕсли;
	
КонецФункции

Функция КодСоответствуетАлфавиту(Код, Алфавит) Экспорт
	
	ДлинаКода = СтрДлина(Код);
	
	Индекс = 1;
	Пока Индекс < ДлинаКода Цикл
		
		ПроверяемыйСимвол = Сред(Код, Индекс, 1);
		
		Если СтрНайти(Алфавит, ПроверяемыйСимвол, НаправлениеПоиска.СНачала) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодВBase64(Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = Base64Строка(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПараметровСканирования

Процедура ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ФормаВыбора, ВидПродукции)
	
	Если ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС") Тогда
	
		ЗаполнитьПараметрыСканированияПроверкаИПодборАлкогольнойПродукцииЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
	
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.АктПостановкиНаБалансЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияАктПостановкиНаБалансЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.АктСписанияЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияАктСписанияЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ДополнитьПараметрыСканированияДляВозвратаИзРегистра2ЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ЗапросАкцизныхМарокЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияЗапросАкцизныхМарокЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ПередачаВРегистр2ЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияПередачаВРегистр2ЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ТТНВходящаяЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияТТНВходящаяЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ТТНИсходящаяЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияТТНИсходящаяЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекЕГАИСВозврат") Тогда
		
		ЗаполнитьПараметрыСканированияЧекЕГАИСВозврат(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Документ.ЧекЕГАИС") Тогда
		
		ЗаполнитьПараметрыСканированияЧекЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции);
		
	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Справочник.КлассификаторАлкогольнойПродукцииЕГАИС")
		Или ЭтоКонтекстОбъекта(Контекст, "Справочник.Справки2ЕГАИС") 
		Или ЭтоКонтекстОбъекта(Контекст, "Обработка.ПомощникКорректировкиОстатковЕГАИС")Тогда
		
		ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции);

	ИначеЕсли ЭтоКонтекстОбъекта(Контекст, "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП") Тогда
		
		ВключитьПоддержкуТабачнойПродукции(ПараметрыСканирования,
			ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная"));
		
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ВключитьПоддержкуВидовПродукцииИС(Контекст, ПараметрыСканирования, ВидПродукции);
	
	ЗаполнитьОбщиеДляВсехПараметрыСканирования(Контекст, ПараметрыСканирования, ФормаВыбора);
	
КонецПроцедуры

Процедура ЗаполнитьОбщиеДляВсехПараметрыСканирования(Контекст, ПараметрыСканирования, ФормаВыбора)
	
	Если ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
	
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "АдресСоответствияАкцизныхМарок") Тогда
			ПараметрыСканирования.АдресСоответствияАкцизныхМарок = Контекст.АдресСоответствияАкцизныхМарок;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "АдресДанныхДокументаОснования") Тогда
			ПараметрыСканирования.АдресДанныхДокументаОснования = Контекст.АдресДанныхДокументаОснования;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ОрганизацияЕГАИС")
			И ЗначениеЗаполнено(Контекст.ОрганизацияЕГАИС) Тогда
			ПараметрыСканирования.ОрганизацияЕГАИС = Контекст.ОрганизацияЕГАИС;
		КонецЕсли;
		
		Если ФормаВыбора = Неопределено Тогда
		
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Номенклатура") Тогда
				ПараметрыСканирования.Номенклатура = Контекст.Номенклатура;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Характеристика") Тогда
				ПараметрыСканирования.Характеристика = Контекст.Характеристика;
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВыбора, "Номенклатура") Тогда
				ПараметрыСканирования.Номенклатура = ФормаВыбора.Номенклатура;
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВыбора, "Характеристика") Тогда
				ПараметрыСканирования.Характеристика = ФормаВыбора.Характеристика;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если ДопустимаТабачнаяПродукция(ПараметрыСканирования) Тогда
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Объект.Организация;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Организация") Тогда
				ПараметрыСканирования.Организация = Контекст.Организация;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Контекст) = Тип("УправляемаяФорма") И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПроверкаИПодборАлкогольнойПродукцииЕГАИС(Контекст, ПараметрыСканирования, ВидПродукции)
	
	ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктПостановкиНаБалансЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)
	
	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		Если Форма.Объект.ВидДокумента = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр3") Тогда
			ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс"));
		КонецЕсли;
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Отсутствует"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок                          = Истина;
		ПараметрыСканирования.Операция                                       = Форма.Объект.ВидДокумента;
		ПараметрыСканирования.ДокументОснование                              = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                                  = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок                  = "АктПостановкиНаБаланс";
		ПараметрыСканирования.ОрганизацияЕГАИС                               = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Форма.Объект.ВидДокумента <> ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2");
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
		ПараметрыСканирования.КонтрольПустогоСтатуса150СимвольныхМарок       = Ложь;
		ПараметрыСканирования.КонтрольРасхожденийСДокументомОснованием       = Ложь;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
		
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("КоличествоПоСправке1");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НомерТТН");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ДатаТТН");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ДатаРозлива");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НомерПодтвержденияЕГАИС");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ДатаПодтвержденияЕГАИС");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияАктСписанияЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)
	
	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок                          = Истина;
		ПараметрыСканирования.Операция                                       = Форма.Объект.ВидДокумента;
		ПараметрыСканирования.ДокументОснование                              = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                                  = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок                  = "АктСписания";
		ПараметрыСканирования.ОрганизацияЕГАИС                               = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Форма.Объект.ВидДокумента <> ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.АктСписанияИзРегистра2");
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ДополнитьПараметрыСканированияДляВозвратаИзРегистра2ЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)

	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ВозвратИзРегистра2");
		ПараметрыСканирования.ДокументОснование             = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                 = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		ПараметрыСканирования.ОрганизацияЕГАИС              = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки     = Ложь;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция    = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЗапросАкцизныхМарокЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)

	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.НеПодтверждена"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВРезерве"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Отсутствует"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Истина;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросАкцизныхМарок");
		ПараметрыСканирования.ДокументОснование             = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                 = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		ПараметрыСканирования.ОрганизацияЕГАИС              = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки     = Ложь;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция    = Истина;
	
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ТипМарки");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("СерияМарки");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НомерМарки");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("КодАкцизнойМарки");
	
		// Отключен контроль справок 2 и номенклатуры
		ПараметрыСканирования.КонтрольЗаполненияМарокСНомеромИСерией = Ложь;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияПередачаВРегистр2ЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)
	
	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок         = Ложь;
		ПараметрыСканирования.Операция                      = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ПередачаВРегистр2");
		ПараметрыСканирования.ДокументОснование             = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                 = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок = "Продажа";
		ПараметрыСканирования.ОрганизацияЕГАИС              = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки     = Ложь;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция    = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияТТНИсходящаяЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)
	
	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок                          = Истина;
		ПараметрыСканирования.Операция                                       = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ТТН");
		ПараметрыСканирования.ДокументОснование                              = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                                  = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОрганизацияЕГАИС                               = Форма.Объект.Грузоотправитель;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Истина;
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("НомерПартии");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("ИдентификаторУпаковки");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекЕГАИСВозврат(Форма, ПараметрыСканирования, ВидПродукции)

	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.Реализована"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок                          = Истина;
		ПараметрыСканирования.Операция                                       = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.ДокументОснование                              = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                                  = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок                  = "Возврат";
		ПараметрыСканирования.ОрганизацияЕГАИС                               = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Истина;
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияЧекЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)

	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
	
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ВНаличии"));
		ПараметрыСканирования.ДоступныеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыАкцизныхМарок.ПустаяСсылка"));
	
		ПараметрыСканирования.КонтрольАкцизныхМарок                          = Истина;
		ПараметрыСканирования.Операция                                       = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЧекККМ");
		ПараметрыСканирования.ДокументОснование                              = Форма.Объект.ДокументОснование;
		ПараметрыСканирования.ДокументЕГАИС                                  = Форма.Объект.Ссылка;
		ПараметрыСканирования.ОперацияКонтроляАкцизныхМарок                  = "Продажа";
		ПараметрыСканирования.ОрганизацияЕГАИС                               = Форма.Объект.ОрганизацияЕГАИС;
		ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Истина;
		ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                     = Истина;
	
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Цена");
		ПараметрыСканирования.КлючевыеРеквизиты.Добавить("Штрихкод");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСканированияТТНВходящаяЕГАИС(Форма, ПараметрыСканирования, ВидПродукции)
	
	Если ВключитьПоддержкуАлкогольнойПродукции(ПараметрыСканирования, ВидПродукции) Тогда
		
		ПараметрыСканирования.КонтрольПустогоСтатуса150СимвольныхМарок  = Ложь;
		ПараметрыСканирования.ТолькоМаркируемаяПродукция                = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ОбщийМодуль(Имя)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
		Модуль = ОбщегоНазначения.ОбщийМодуль(Имя);
		
	#Иначе
		
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль(Имя);
		
	#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

Функция ПодсистемаСуществует(ПолноеИмяПодсистемы)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		
		ПодсистемаСуществует = ОбщегоНазначения.ПодсистемаСуществует(ПолноеИмяПодсистемы);
		
	#Иначе
		
		ПодсистемаСуществует = ОбщегоНазначенияКлиент.ПодсистемаСуществует(ПолноеИмяПодсистемы);
		
	#КонецЕсли
	
	Возврат ПодсистемаСуществует;
	
КонецФункции

#КонецОбласти