
#Область ПрограммныйИнтерфейс

// Формирует дерево значений с колонками Наименование, Оператор, Сдвиг.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операторов с колонками:
//  * Наименование - Строка - Наименование оператора.
//  * Оператор - Строка - Оператор.
//  * Сдвиг - Число - Сдвиг оператора.
//
Функция ПолучитьПустоеДеревоОператоров() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Наименование");
	Дерево.Колонки.Добавить("Оператор");
	Дерево.Колонки.Добавить("Сдвиг", Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

// Формирует дерево значений с колонками Идентификатор, Представление.
//
// Возвращаемое значение:
//  ДеревоЗначений - Пустое дерево операндов с колонками:
//  * Идентификатор - Строка - Идентификатор операнда.
//  * Представление - Строка - Представление операнда.
//
Функция ПолучитьПустоеДеревоОперандов() Экспорт
	
	Дерево = Новый ДеревоЗначений();
	Дерево.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Дерево.Колонки.Добавить("Значение",      Новый ОписаниеТипов("Число"));
	
	Возврат Дерево;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//  Наименование - Строка - наименование группы дерева операторов.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленная группа операторов.
//
Функция ДобавитьГруппуОператоров(Дерево, Наименование) Экспорт
	
	НоваяГруппа = Дерево.Строки.Добавить();
	НоваяГруппа.Наименование = Наименование;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Добавляет в дерево операторов группу операторов с переданным наименованием.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//  Родитель     - СтрокаДереваЗначений - Группа операторов, в которую необходимо добавить оператор
//  Наименование - Строка - наименование группы дерева операторов
//  Оператор     - Строка - Представление оператора на встроенном языке
//  Сдвиг        - Число - необходим для определения позиции курсора.
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленный оператор.
//
Функция ДобавитьОператор(Дерево, Родитель = Неопределено, Наименование, Оператор = Неопределено, Сдвиг = 0) Экспорт
	
	НоваяСтрока = ?(Родитель <> Неопределено, Родитель.Строки.Добавить(), Дерево.Строки.Добавить());
	НоваяСтрока.Наименование = Наименование;
	НоваяСтрока.Оператор = ?(ЗначениеЗаполнено(Оператор), Оператор, Наименование);
	НоваяСтрока.Сдвиг = Сдвиг;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет в дерево операндов элемент с переданным идентификатором и представлением.
//
// Параметры:
//  Родитель		 - ДеревоЗначений, СтрокаДереваЗначений	 - Корень или группа операндов, в которую необходимо добавить элемент.
//  Идентификатор	 - Строка								 - Идентификатор элемента.
//  Представление	 - Строка								 - Представление элемента.
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Добавленный операнд.
//
Функция ДобавитьОперанд(Родитель, Идентификатор, Представление = "", Значение = 0) Экспорт
	
	НовыйОперанд = Родитель.Строки.Добавить();
	НовыйОперанд.Идентификатор = Идентификатор;
	
	Если ПустаяСтрока(Представление) Тогда
		НовыйОперанд.Представление = Идентификатор;
	Иначе
		НовыйОперанд.Представление = Представление;
	КонецЕсли;
	
	НовыйОперанд.Значение = Значение;
	Возврат НовыйОперанд;
	
КонецФункции

// Формирует дерево со стандартными операторами "+", "-", "*", "/"
//
// Возвращаемое значение:
//  ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Функция ПолучитьСтандартноеДеревоОператоров() Экспорт
	
	Дерево = ПолучитьПустоеДеревоОператоров();
	ГруппаОператоров = ДобавитьГруппуОператоров(Дерево, "Операторы");
	ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	Возврат Дерево;
	
КонецФункции

// Заполняет дерево операторов для конструктора формул.
//
// Параметры:
//  Параметры - Структрура - содержит виды операторов, которые необходимо добавить в дерево.
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы, в которой выполняется действия, 
//                                                      необходим для корректного помещения во временное хранилище.
//
// Возвращаемое значение:
//  Строка - Адрес во временном хранилище.
//
Функция ПостроитьДеревоОператоров(Параметры, УникальныйИдентификатор) Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	Если Параметры.Свойство("СтандартныеОператоры") И Параметры.СтандартныеОператоры Тогда
		ДобавитьГруппуСтандартныхОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("ЛогическиеОператоры") И Параметры.ЛогическиеОператоры Тогда
		ДобавитьГруппуЛогическихОператоров(Дерево);
	КонецЕсли;
	
	Если Параметры.Свойство("Функции") И Параметры.Функции Тогда
		ДобавитьГруппуФункции(Дерево);
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в дерево операторов группу стандартных операторов (+,-,*,/)
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуСтандартныхОператоров(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");

КонецПроцедуры

// Добавляет в дерево операторов группу логических операторов
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуЛогическихОператоров(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Логические операторы и константы'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='И'"),      " " + НСтр("ru='И'")      + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИЛИ'"),    " " + НСтр("ru='ИЛИ'")    + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='НЕ'"),     " " + НСтр("ru='НЕ'")     + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ИСТИНА'"), " " + НСтр("ru='ИСТИНА'") + " ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='ЛОЖЬ'"),   " " + НСтр("ru='ЛОЖЬ'")   + " ");

КонецПроцедуры

// Добавляет в дерево операторов группу функций
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево операторов. см. функцию ПолучитьПустоеДеревоОператоров().
//
Процедура ДобавитьГруппуФункции(Дерево)

	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),                  НСтр("ru='Макс(,)'"),          2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),                   НСтр("ru='Мин(,)'"),           2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'"),                НСтр("ru='Окр(,)'"),           2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"),               НСтр("ru='Цел()'"),            1);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Дата (гггг,мм,дд)'"),         НСтр("ru='Дата(,,)'"),         3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"),                   "?(,,)",                       3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Предопределенное значение'"), НСтр("ru='ПредопределенноеЗначение()'"));
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Значение заполнено'"),        НСтр("ru='ЗначениеЗаполнено()'"));

КонецПроцедуры

#КонецОбласти

#Область ИнтегрированныеПроцедурыИФункции
// Процедура создает структуру соответствия представления операнда в дереве и функцией, 
//по которой должно расчитываться его значение.
//
//Возвращаемое значение:
//  Структура - Структура соответствия представления операнда и способа расчета его значения.
Функция ФункцииИзОбщегоМодуля() Экспорт
	
	Структура = Новый Структура;
	//Структура.Вставить("НомерТекущейКолонки", "ПланированиеКлиентСервер.НомерТекущейКолонки");
	//Структура.Вставить("ЗначениеКолонки", "ПланированиеКлиентСервер.ЗначениеКолонки");
	
	Возврат Структура;
	
КонецФункции

// Выбирает данные расшифровки
//
// Параметры:
//  МассивИменНаборов	 - Массив	 - Массив наборов данных (источников заполнения показателей)
//  Параметры			 - Структура - Параметры запроса.
// 
// Возвращаемое значение:
//  Массив - Данные расшифровки (Документ, Дата документа, Номер документа).
//
Функция ПолучитьРасшифровку(МассивИменНаборов, Параметры) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МассивПолей = Новый Массив();
	МассивПолей.Добавить("Документ");
	МассивПолей.Добавить("ДатаДокумента");
	МассивПолей.Добавить("НомерДокумента");
	Для каждого Элемент Из МассивИменНаборов Цикл
		МассивПолей.Добавить(Элемент);
	КонецЦикла; 
	
	МассивДанныхРасшифровки = Новый Массив();
	
	Расшифровка = Новый ТаблицаЗначений();
	
	МакетыОперандов = МакетыОперандов();
	
	СКД_Преобразование = ПолучитьСхемуПреобразованияДанных();
	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	
	ИменаОперандов = "";
	
	Для каждого ИмяОперанда Из МассивИменНаборов Цикл
		
		СКД_Операнда = МакетыОперандов.Получить(ИмяОперанда);
		
		Если СКД_Операнда = Неопределено 
			ИЛИ СКД_Операнда.НаборыДанных.Количество() <> 1 
			ИЛИ ТипЗнч(СКД_Операнда.НаборыДанных[0]) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли; 
		
		ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, НаборДанныхОбъединение, СКД_Операнда, ИменаОперандов);
		
	КонецЦикла; 
	
	УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование);
	
	// Добавляем поля для расшифровки
	НастроитьСхемуДляРасшифровки(СКД_Преобразование, НаборДанныхОбъединение, МассивПолей);
	
	ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, Расшифровка);
	
	Для каждого СтрокаРасшифровки Из Расшифровка Цикл
		СтруктураДанныхРасшифровки = Новый Структура();
		Для каждого Колонка Из Расшифровка.Колонки Цикл
			СтруктураДанныхРасшифровки.Вставить(Колонка.Имя);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтруктураДанныхРасшифровки, СтрокаРасшифровки);
		МассивДанныхРасшифровки.Добавить(СтруктураДанныхРасшифровки);
	КонецЦикла; 
	
	Возврат МассивДанныхРасшифровки;
	
КонецФункции

// Выполняет СКД преобразования, дополненную наборами операндов и др. настройками, выводит результат в таблицу.
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа с добавленными наборами операндов
//  Параметры  - Структура - параметры необходимые для выполнения схемы
//  ТаблицаРезультата  - ТаблицаЗначений - таблица, в которую будет выведен результат выполнения схемы
//  НаборыДанныхОбъекты  - Структура - Структура с внешними наборами-объектами для схемы компоновки.
//
Процедура ВыполнитьСхемуПреобразования(СКД_Преобразование, Параметры, ТаблицаРезультата, НаборыДанныхОбъекты = Неопределено)
	
	// Загрузка СКД
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД_Преобразование));
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД_Преобразование.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить();
	
	// Добавляем параметры
	Для каждого Параметр Из СКД_Преобразование.Параметры Цикл
		
		Если Параметры.Свойство(Параметр.Имя) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, Параметр.Имя, Параметры[Параметр.Имя]);
		КонецЕсли; 
		
	КонецЦикла; 
	
	// Установка отборов
	Если Параметры.Свойство("Отбор") Тогда
		Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			Поле = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Поле) <> Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, Поле, ЭлементОтбора.Значение,,, Истина);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если Параметры.Свойство("Ссылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Ссылка", Параметры.Ссылка);
	КонецЕсли; 
		
	// Отключение вывода общих итогов
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СКД_Преобразование, КомпоновщикНастроек.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанныхОбъекты);
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

// Настраивает СКД преобразования для вывода расшифровки значения одного операнда
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа
//  КоллекцияНаборов  - НаборыДанных - коллекция наборов, из которой необходимо удалить поля
//  МассивПолей  - Массив - Поля, которые должны остаться в схеме.
//
Процедура НастроитьСхемуДляРасшифровки(СКД_Преобразование, КоллекцияНаборов, МассивПолей)

	// Удаляем лишние поля
	УдалитьПоля(КоллекцияНаборов.Поля, МассивПолей);
	Для каждого Набор Из КоллекцияНаборов.Элементы Цикл
		УдалитьПоля(Набор.Поля, МассивПолей);
	КонецЦикла;
	
	Настройки = СКД_Преобразование.НастройкиПоУмолчанию;
	
	// Удаляем лишние связи
	СКД_Преобразование.СвязиНаборовДанных.Очистить();
	СКД_Преобразование.ПоляИтога.Очистить();
	Настройки.Структура.Очистить();
	
	ГруппировкаРегистратор = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	Для каждого Поле Из МассивПолей Цикл
	
		ПолеРегистратор = ГруппировкаРегистратор.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеРегистратор.Использование = Истина;
		ПолеРегистратор.Поле = Новый ПолеКомпоновкиДанных(Поле);
	
	КонецЦикла; 
	
	ВыбранныеПоляДляРегистратора = ГруппировкаРегистратор.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляРегистратора.Использование = Истина;

КонецПроцедуры 

// Удаление полей компоновки
//
// Параметры:
// Поля             - ПоляНабораДанныхСхемыКомпоновкиДанных - Коллекция полей, из которых удаляем лишние
// МассивПолей        - Массив - Массив полей, которые нужно оставить.
//
Процедура УдалитьПоля(Поля, МассивПолей)
	
	МассивУдаляемыхПолей = Новый Массив();
	
	Для каждого Поле Из Поля Цикл
		Если МассивПолей.Найти(Поле.Поле) = Неопределено Тогда
			МассивУдаляемыхПолей.Добавить(Поле);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле Из МассивУдаляемыхПолей Цикл
		Поля.Удалить(Поле);
	КонецЦикла; 

КонецПроцедуры

// Добавляет первый набор данных из СКД операнда в схему преобразования и все настройки операнда.
//
// Параметры:
//  СКД_Преобразование  - СхемаКомпоновкиДанных - схема преобразования документа, в которую добавляется набор операнда
//  КоллекцияНаборов  - НаборыДанных - Коллекция объединения наборов данных в схеме преобразования
//  СКД_Операнда  - СхемаКомпоновкиДанных - схема операнда с настройками, из которой будут добавлены наборы 
//                 в схему преобразования
//  ИменаОперандов  - Строка - Имена операндов, разделенные запятыми, используемые для заполнения ТЧ.
//
Процедура ДобавитьНаборОперандаВСхемуПреобразования(СКД_Преобразование, КоллекцияНаборов, СКД_Операнда, ИменаОперандов = "")
	
	НастройкиПреобразования = СКД_Преобразование.ВариантыНастроек[0].Настройки;
	
	НаборДанныхОбъект = КоллекцияНаборов.Элементы.Добавить(ТипЗнч(СКД_Операнда.НаборыДанных[0]));
	НаборДанныхОбъект.Имя = СКД_Операнда.НаборыДанных[0].Имя;
	НаборДанныхОбъект.ИсточникДанных = СКД_Преобразование.ИсточникиДанных[0].Имя;
	
	Если ТипЗнч(СКД_Операнда.НаборыДанных[0]) <> Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
		НаборДанныхОбъект.Запрос = СКД_Операнда.НаборыДанных[0].Запрос;
		НаборДанныхОбъект.АвтоЗаполнениеДоступныхПолей = СКД_Операнда.НаборыДанных[0].АвтоЗаполнениеДоступныхПолей;
	Иначе
		НаборДанныхОбъект.ИмяОбъекта  = СКД_Операнда.НаборыДанных[0].ИмяОбъекта ;
	КонецЕсли; 
	
	// Поля набора
	Для каждого Поле Из СКД_Операнда.НаборыДанных[0].Поля Цикл
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(ТипЗнч(Поле));
		ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		
		ПолеНабораДанных = КоллекцияНаборов.Поля.Найти(Поле.Поле);
		Если ПолеНабораДанных = Неопределено Тогда
			ПолеНабораДанных = КоллекцияНаборов.Поля.Добавить(ТипЗнч(Поле));
			ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
		КонецЕсли; 
	КонецЦикла;
	
	// Ресурсы
	Для каждого Поле Из СКД_Операнда.ПоляИтога Цикл
		
		НовоеПоле = СКД_Преобразование.ПоляИтога.Найти(Поле.ПутьКДанным);
		
		Если НовоеПоле = Неопределено Тогда
			НовоеПоле = СКД_Преобразование.ПоляИтога.Добавить();
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(НовоеПоле, Поле, "Выражение, ПутьКДанным");
		
		ПолеВыбора = НастройкиПреобразования.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(НовоеПоле.ПутьКДанным);
		ПолеВыбора.Заголовок = НовоеПоле.ПутьКДанным;
		ПолеВыбора.Использование = Истина;
		
		ИменаОперандов = ИменаОперандов + ?(ПустаяСтрока(ИменаОперандов), "", ", ") + НовоеПоле.ПутьКДанным;
	КонецЦикла; 
	
	Для каждого Параметр Из СКД_Операнда.Параметры Цикл
		
		НайденныйПараметр = СКД_Преобразование.Параметры.Найти(Параметр.Имя);
		Если НайденныйПараметр = Неопределено Тогда
			
			НовыйПараметр = СКД_Преобразование.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараметр, 
			Параметр, 
			"ВключатьВДоступныеПоля, Использование, Выражение, ДоступенСписокЗначений, Заголовок, ЗапрещатьНезаполненныеЗначения,
			|Значение, Имя, ОграничениеИспользования, ПараметрФункциональныхОпций, ТипЗначения");
			
		КонецЕсли; 
	КонецЦикла; 
	

КонецПроцедуры

// Удаляет неиспользуемые наборы для заполнения по формулам
//
// Параметры:
//  СКД_Преобразование   - СхемаКомпоновкиДанных - схема преобразования документа.
//
Процедура УдалитьНаборыНеИспользуемыеДляФормул(СКД_Преобразование)

	НаборДанныхОбъединение = СКД_Преобразование.НаборыДанных.Объединение;
	НаборДанныхПрисоединение = СКД_Преобразование.НаборыДанных.Найти("Присоединение");
	Если НаборДанныхПрисоединение <> Неопределено Тогда
		
		// Проверяем добавлены ли наборы присоединения
		Если НаборДанныхПрисоединение.Элементы.Количество() = 1 Тогда
			
			// Добавляем поля из набора присоединения, чтобы была возможность выбирать все одним набором.
			Для каждого Поле Из НаборДанныхПрисоединение.Элементы.НаборДанных.Поля Цикл
				ПолеНабораДанных = НаборДанныхОбъединение.Элементы.НаборДанных.Поля.Добавить(ТипЗнч(Поле));
				ЗаполнитьЗначенияСвойств(ПолеНабораДанных, Поле);
			КонецЦикла;
			
			Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
			
			Пока  Индекс >= 0 Цикл
				
				Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
				Если Связь.НаборДанныхИсточник = "Присоединение" ИЛИ Связь.НаборДанныхПриемник  = "Присоединение" Тогда
					СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
				КонецЕсли; 
				
				Индекс = Индекс - 1;
				
			КонецЦикла;
			
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
			СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхПрисоединение);
			
		Иначе
			НаборДанныхПрисоединение.Элементы.Удалить(НаборДанныхПрисоединение.Элементы.НаборДанных);
		КонецЕсли; 
		
	КонецЕсли;
	
	Если НаборДанныхОбъединение.Элементы.Количество() = 1 Тогда
		
		Индекс = СКД_Преобразование.СвязиНаборовДанных.Количество() - 1;
		
		Пока  Индекс >= 0 Цикл
			
			Связь = СКД_Преобразование.СвязиНаборовДанных[Индекс];
			Если Связь.НаборДанныхИсточник = "Объединение" ИЛИ Связь.НаборДанныхПриемник = "Объединение" Тогда
				СКД_Преобразование.СвязиНаборовДанных.Удалить(Связь);
			КонецЕсли; 
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
		СКД_Преобразование.НаборыДанных.Удалить(НаборДанныхОбъединение);
		
	Иначе
		НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	КонецЕсли;
	
	// Удаляем поля итогов которые не найдены в наборах данных
	Индекс = СКД_Преобразование.ПоляИтога.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		ПолеНайдено = Ложь;
		ПолеИтога = СКД_Преобразование.ПоляИтога[Индекс];
		Для каждого Набор Из СКД_Преобразование.НаборыДанных Цикл
			
			Если Набор.Поля.Найти(ПолеИтога.ПутьКДанным) <> Неопределено Тогда
				ПолеНайдено = Истина;
				Прервать;
			КонецЕсли;
		
		КонецЦикла; 
		
		Если НЕ ПолеНайдено Тогда
			СКД_Преобразование.ПоляИтога.Удалить(ПолеИтога);
		КонецЕсли; 
		
		Индекс = Индекс - 1;
		
	КонецЦикла; 
	
	
КонецПроцедуры

// Функция получает схему преобразования данных для заполнения в документ
//
// Возвращаемое значение:
//   СхемаКомпановкиДанных - схема преобразования данных для заполнения в документ.
//
Функция ПолучитьСхемуПреобразованияДанных(Знач ЗаполнятьПоФормуле = Ложь, ЗаполнятьНазначениеВТЧ = Ложь) Экспорт 
	
	СКД_Преобразование = Неопределено;
	
	// СКД_Преобразование = Документы.ПланЗакупок.ПолучитьМакет("СКД_Преобразование");
	
	Возврат СКД_Преобразование;
	
КонецФункции

// Возвращает макеты операндов для данного плана
//
// Возвращаемое значение:
//   Соответствие   - Макеты для операндов.
//
Функция МакетыОперандов() Экспорт 

	Макеты = Новый Соответствие;
	
	//Документы.ПланПродажПоКатегориям.МакетыОперандовПлана(Макеты);
	
	Возврат Макеты;

КонецФункции

// Инициализирует компоновщик настроек СКД, предварительно помещая СКД во временное хранилище.
//
// Параметры:
//  МакетСКД  - СхемаКомпоновкиДанных - СКД, компоновщик настроек которой будет инициализирован.
//  УникальныйИдентификатор  - УникальныйИдентификатор - уникальный идентификатор формы, для помещения СКД во временное хранилище.
//
Функция ИнициализироватьСКД(МакетСКД, УникальныйИдентификатор) Экспорт

	АдресСхемы = ПоместитьВоВременноеХранилище(МакетСКД,УникальныйИдентификатор);
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	
	Возврат КомпоновщикНастроек;

КонецФункции 

#КонецОбласти

