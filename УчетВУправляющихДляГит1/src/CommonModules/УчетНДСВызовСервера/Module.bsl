
#Область СлужебныйПрограммныйИнтерфейс

// См. Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.БлижайшийНалоговыйПериод.
Функция БлижайшийНалоговыйПериодСервер(Организация, Период) Экспорт
	
	Возврат ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Организация,
		Период,
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
	
КонецФункции

Функция РеквизитыДляНадписиОСчетеФактуреПолученном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт

	РеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном(Документ, СтруктураОтбора);
	
	Если РеквизитыСФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",               РеквизитыСФ.Ссылка);
	Результат.Вставить("Представление",        РеквизитыСФ.Представление);
	Результат.Вставить("Проведен",             РеквизитыСФ.Проведен);
	Результат.Вставить("КраткоеПредставление", ПредставлениеСчетФактураПолученный(РеквизитыСФ));
	Результат.Вставить("Исправление",          РеквизитыСФ.Исправление);
	
	Возврат Результат;
	
КонецФункции 

Функция РеквизитыДляНадписиОСчетеФактуреВыданном(Знач Документ, СтруктураОтбора = Неопределено) Экспорт

	РеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном(Документ, СтруктураОтбора);
	
	Если РеквизитыСФ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",               РеквизитыСФ.Ссылка);
	Результат.Вставить("Проведен",             РеквизитыСФ.Проведен);
	Результат.Вставить("Представление",        РеквизитыСФ.Представление);
	Результат.Вставить("КраткоеПредставление", ПредставлениеСчетФактураВыданный(РеквизитыСФ));
	
	Возврат Результат;
	
КонецФункции 

Функция РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(СчетФактура, СчетФактураИсправляемый) Экспорт
	
	Возврат УчетНДС.РеквизитыСчетаФактурыДляИсправленияСобственнойОшибки(СчетФактура, СчетФактураИсправляемый);
	
КонецФункции

Функция СоздатьСчетФактуруВыданныйНаОсновании(Основание, СтруктураОтбора = Неопределено, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	Перем Результат;
	
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Основание,,, СтруктураОтбора);
	
	Если СчетФактура = Неопределено Тогда
		
		СписокРеквизитовОснования = "Организация, Дата, Проведен";
		ПроверятьКонтрагента = УчетНДС.ПроверятьКонтрагентаНаФорматныйКонтрольВДокументе(Основание);
		Если ПроверятьКонтрагента Тогда
			СписокРеквизитовОснования = СписокРеквизитовОснования + ", Контрагент";
		КонецЕсли;
	
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, СписокРеквизитовОснования);
		
		Если ПроверятьКонтрагента
			И НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(РеквизитыОснования.Контрагент, "Выданный") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НеобходимаАктуализацияПередСозданиемСчетаФактуры = Ложь;
		
		Если РеквизитыОснования.Проведен
			И ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
			
			// Проверим, есть ли необходимость актуализировать по договорам, используемым в документе.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Основание",   Основание);
			Запрос.УстановитьПараметр("Организация", РеквизитыОснования.Организация);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента КАК ДоговорКонтрагента
			|ИЗ
			|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
			|ГДЕ
			|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ = &Основание
			|	И РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация";
			ДоговорыДокумента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДоговорКонтрагента");
			
			Если ДоговорыДокумента.Количество() > 0 Тогда
				
				МоментАктуальности = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
					РеквизитыОснования.Организация, РеквизитыОснования.Дата, Неопределено, ДоговорыДокумента);
				Если МоментАктуальности <> Неопределено Тогда
					НеобходимаАктуализацияПередСозданиемСчетаФактуры = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимаАктуализацияПередСозданиемСчетаФактуры Тогда
			
			ПараметрыПроцедуры = УчетВзаиморасчетовОтложенноеПроведение.НовыеПараметрыРасчета();
			ПараметрыПроцедуры.Организация             = РеквизитыОснования.Организация;
			ПараметрыПроцедуры.ДатаОкончания           = РеквизитыОснования.Дата;
			ПараметрыПроцедуры.Документ                = Основание;
			ПараметрыПроцедуры.ОстанавливатьсяПоОшибке = Истина;
			ПараметрыПроцедуры.АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификаторФормы);
			
			Если УникальныйИдентификаторФормы <> Неопределено Тогда // актуализация в фоновом задании
			
				ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификаторФормы);
				ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Актуализация для выписки счета-фактуры'");
				ПараметрыВыполненияВФоне.КлючФоновогоЗадания = Основание;
				
				РезультатРасчета = ДлительныеОперации.ВыполнитьВФоне("УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчетыВФоне",
					ПараметрыПроцедуры, ПараметрыВыполненияВФоне);
					
				РезультатВыпискиСчетаФактуры = Новый Структура;
				РезультатВыпискиСчетаФактуры.Вставить("ФоновоеВыполнение",       Истина);
				РезультатВыпискиСчетаФактуры.Вставить("ДлительнаяОперация",      РезультатРасчета);
				РезультатВыпискиСчетаФактуры.Вставить("АдресХранилищаСОшибками", ПараметрыПроцедуры.АдресХранилищаСОшибками);
				
				Возврат РезультатВыпискиСчетаФактуры;
				
			КонецЕсли;
			
			// напрямую вызываем актуализацию
			РезультатАктуализации = УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты(ПараметрыПроцедуры);

			ПараметрыСоздания = УчетНДСКлиентСервер.НовыеПараметрыСозданияСчетаФактуры();
			ПараметрыСоздания.Основание = Основание;
			ПараметрыСоздания.АдресХранилищаСОшибками = ПараметрыПроцедуры.АдресХранилищаСОшибками;
			
			СоздатьСчетФактуруВыданныйНаОснованииПослеАктуализации(ПараметрыСоздания, РезультатАктуализации);
			СчетФактура = ПараметрыСоздания.Ссылка;
			Результат   = ПараметрыСоздания.РеквизитыСФ;
			
		Иначе
			
			СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(Основание);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = РеквизитыДляНадписиОСчетеФактуреВыданном(СчетФактура);
	КонецЕсли;
	Если Результат <> Неопределено Тогда
		Результат.Вставить("ВыписыватьСчетаФактурыСпецРежимы", ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создаёт счет-фактуру на основании документа и подготавливает параметры для использования в интерфейсе формы.
//
// Параметры:
//  ПараметрыСоздания - Структура - см. УчетНДСКлиентСервер.НовыеПараметрыСозданияСчетаФактуры()
//                                Перед использованием Основание и АдресРезультата должны быть уже заполнены.
//  РезультатАктуализации - Структура - см. УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчеты().
//                          Неопределено - если фоновое задание не было успешно завершено.
//
Процедура СоздатьСчетФактуруВыданныйНаОснованииПослеАктуализации(ПараметрыСоздания, РезультатАктуализации) Экспорт
	
	Если РезультатАктуализации <> Неопределено
		И РезультатАктуализации.Свойство("АдресРезультата")
		И ЭтоАдресВременногоХранилища(РезультатАктуализации.АдресРезультата) Тогда
		РезультатРасчета = ПолучитьИзВременногоХранилища(РезультатАктуализации.АдресРезультата);
		УдалитьИзВременногоХранилища(РезультатАктуализации.АдресРезультата);
	Иначе
		РезультатРасчета = РезультатАктуализации;
	КонецЕсли;
	
	Если РезультатРасчета <> Неопределено
		И РезультатРасчета.Свойство("Сообщения")
		И РезультатРасчета.Сообщения.Количество() > 0 Тогда
		ПараметрыСоздания.ОткрытьФормуОшибки = Истина;
	Иначе
		УдалитьИзВременногоХранилища(ПараметрыСоздания.АдресХранилищаСОшибками);
	КонецЕсли;
	
	ПараметрыСоздания.Ссылка      = УчетНДСПереопределяемый.СоздатьСчетФактуруВыданныйНаОсновании(ПараметрыСоздания.Основание);
	ПараметрыСоздания.РеквизитыСФ = РеквизитыДляНадписиОСчетеФактуреВыданном(ПараметрыСоздания.Ссылка);
	ПараметрыСоздания.ВыписыватьСчетаФактурыСпецРежимы = ПолучитьФункциональнуюОпцию("ВыписыватьСчетаФактурыСпецРежимы");
	
КонецПроцедуры

Функция СоздатьСчетФактуруПолученныйНаОсновании(
	Основание,
	НомерСчетаФактурыПолученного,
	ДатаСчетаФактурыПолученного,
	Продавец = Неопределено,
	СтруктураОтбора = Неопределено,
	ОбновлятьСтатусСчетаФактурыПоДокументу = Истина) Экспорт

	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Основание,,,СтруктураОтбора);
	
	Если СчетФактура = Неопределено Тогда
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			
			ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
			
			ИсправляемыйДокумент = УчетНДСПереопределяемый.ПолучитьИсправляемыйДокументПоступления(Основание);
			Если ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;
			Иначе
				ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаПоступление;
			КонецЕсли;
			
			СчетФактура = УчетНДСПереопределяемый.ДобавитьОснованиеВИсправленныйСчетФактуруПолученный(
				Основание,
				НомерСчетаФактурыПолученного,
				ДатаСчетаФактурыПолученного,
				ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				ВидСчетаФактуры);
			
			Если СчетФактура = Неопределено Тогда
				Если ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
					СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруНаОснованииИсправления(
						Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного);
				ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
					СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруПолученныйНаОсновании(
						Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, Продавец);
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			Если НЕ УчетНДС.ФорматныйКонтрольИННиКППКонтрагентаПройден(Основание.Контрагент, "Полученный") Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			// Счет-фактура на поступление
			СчетФактура = УчетНДСПереопределяемый.ДобавитьОснованиеВСчетФактуруПолученный(
				Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, ОбновлятьСтатусСчетаФактурыПоДокументу);
				
			Если СчетФактура = Неопределено Тогда 
				СчетФактура = УчетНДСПереопределяемый.СоздатьСчетФактуруПолученныйНаОсновании(
					Основание, НомерСчетаФактурыПолученного, ДатаСчетаФактурыПолученного, Продавец, ОбновлятьСтатусСчетаФактурыПоДокументу);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
			Если НЕ СчетФактураОбъект = Неопределено Тогда
				ВидОперацииДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидОперации");
				ЭтоИсправление = ВидОперацииДокумента = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
				Если ЭтоИсправление Тогда
					СчетФактураОбъект.НомерИсправления = НомерСчетаФактурыПолученного;
					СчетФактураОбъект.ДатаИсправления  = ДатаСчетаФактурыПолученного;
				Иначе
					СчетФактураОбъект.НомерВходящегоДокумента = НомерСчетаФактурыПолученного;
					СчетФактураОбъект.ДатаВходящегоДокумента  = ДатаСчетаФактурыПолученного;
				КонецЕсли;
				
				Попытка
					СчетФактураОбъект.Записать();
				Исключение
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Реквизиты документа ""%1"" автоматически не перезаполнены и могут быть неактуальными'"),
						СчетФактура);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, СчетФактура);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = РеквизитыДляНадписиОСчетеФактуреПолученном(СчетФактура);
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры) Экспорт
	
	СчетФактура = УчетНДСПереопределяемый.СоздатьАктуализироватьИсправлениеСобственнойОшибки(Параметры);
		
	Возврат РеквизитыДляНадписиОСчетеФактуреПолученном(СчетФактура);
	
КонецФункции

Функция ПолучитьИдентификаторМакетаРасшифровкиДекларацииПоНДС(Знач ПараметрыОтчета, Знач Показатель, ПользовательскиеНастройки) Экспорт
	
	ИдентификаторМакета = "";
	
	ТаблицаРасшифровок = ПолучитьИзВременногоХранилища(ПараметрыОтчета.АдресВременногоХранилищаРасшифровки);
	
	Если ТипЗнч(ТаблицаРасшифровок) = Тип("ТаблицаЗначений") Тогда
		
		НомерТекущейСтраницы = 0;
		
		ПараметрыОтчета.Свойство("НомерТекущейСтраницы", НомерТекущейСтраницы);
		
		Если НомерТекущейСтраницы = Неопределено ИЛИ НомерТекущейСтраницы = 0 Тогда
			ИмяПоказателя = Показатель;
		Иначе
			ИмяПоказателя = Показатель + "_" + НомерТекущейСтраницы;
		КонецЕсли;
		
		Расшифровка = ТаблицаРасшифровок.Найти(ИмяПоказателя,"ИмяПоказателя");
		
		Если Расшифровка <> Неопределено Тогда
			
			ДополнительныеПараметры = Расшифровка.ДополнительныеПараметры;
			
			ИдентификаторМакета = ДополнительныеПараметры.ИдентификаторМакета;
			
			Если ИдентификаторМакета = "ОткрытьОбъект" Тогда
				
				ДополнительныеПараметры.Свойство("Объект", ИдентификаторМакета);
				
			Иначе
				
				ДополнительныеПараметры.Свойство("ПользовательскиеНастройки", ПользовательскиеНастройки);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ИдентификаторМакета;
	
КонецФункции  

Функция ПолучитьВыгружаемыеДанныеЗаявлениеОВвозеТоваров(Ссылка, УникальныйИдентификаторЗаявлениеОВвозе,
	УникальныйИдентификаторУчетПеремещенияТоваров) Экспорт

	ВыгружаемыеДанные = Новый Структура("ЗаявлениеОВвозеТоваров,УчетПеремещенияТоваров");
	
	ВыгружаемыеДанные.ЗаявлениеОВвозеТоваров = 
		Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификаторЗаявлениеОВвозе, Ссылка);
	ВыгружаемыеДанные.УчетПеремещенияТоваров = 
		Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьУчетПеремещенияТоваров(УникальныйИдентификаторУчетПеремещенияТоваров, Ссылка);
		
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция ПолучитьВыгружаемыеДанныеЖурналаУчетаСчетовФактур(Ссылка, УникальныйИдентификаторЖурнала) Экспорт

	ДокументОбъект = Ссылка.ПолучитьОбъект();
	
	ВыгружаемыеДанные = ДокументОбъект.ВыгрузитьДокумент(УникальныйИдентификаторЖурнала);
	
	Возврат ВыгружаемыеДанные;

КонецФункции

Функция СтруктураРеквизитовСчетаФактурыПолученного(ДокументСсылка) Экспорт
	
	СтруктураРекизитов = Новый Структура;
	
	РеквизитыСчетаФактуры =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
		"ВидСчетаФактуры,
		|ДокументОснование,
		|ДоговорКонтрагента,
		|НомерВходящегоДокумента,
		|ДатаВходящегоДокумента,
		|Исправление,
		|СуммаДокументаКомиссия");
	
	ВидСчетаФактуры        = РеквизитыСчетаФактуры.ВидСчетаФактуры;
	ДокументОснование      = РеквизитыСчетаФактуры.ДокументОснование;
	Исправление            = РеквизитыСчетаФактуры.Исправление;
	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыСчетаФактуры.ДоговорКонтрагента, "ВидДоговора");
	СчетФактураСКомиссией  = РеквизитыСчетаФактуры.СуммаДокументаКомиссия > 0;
	
	ПоследнееИсправление = УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		ОснованиеДляКорректировки = ПоследнееИсправление;
	Иначе
		ОснованиеДляКорректировки = ДокументОснование;
	КонецЕсли;
	
	ПорядокИсправления = Новый ФиксированноеСоответствие(
		Документы.СчетФактураПолученный.ПолучитьСоответствиеВидовСчетаФактурыПорядкуИсправления());
	
	СтруктураРекизитов.Вставить("ВидСчетаФактуры",           ВидСчетаФактуры);
	СтруктураРекизитов.Вставить("Исправление",               Исправление);
	СтруктураРекизитов.Вставить("ПоследнееИсправление",      ПоследнееИсправление);
	СтруктураРекизитов.Вставить("ОснованиеДляКорректировки", ОснованиеДляКорректировки);
	СтруктураРекизитов.Вставить("ДокументОснование",         ДокументОснование);
	СтруктураРекизитов.Вставить("ВидДоговораКонтрагента",    ВидДоговораКонтрагента);
	СтруктураРекизитов.Вставить("ПорядокИсправления",        ПорядокИсправления);
	СтруктураРекизитов.Вставить("СчетФактураСКомиссией",     СчетФактураСКомиссией);
	
	СтруктураРекизитов.Вставить("СчетФактура",             ДокументСсылка);
	СтруктураРекизитов.Вставить("НомерВходящегоДокумента", РеквизитыСчетаФактуры.НомерВходящегоДокумента);
	СтруктураРекизитов.Вставить("ДатаВходящегоДокумента",  РеквизитыСчетаФактуры.ДатаВходящегоДокумента);
	
	Возврат СтруктураРекизитов;
	
КонецФункции

Функция СтруктураРеквизитовСчетаФактурыВыданного(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, 
		"ВидСчетаФактуры, ДокументОснование, Продавец");
	
	ВидСчетаФактуры   = РеквизитыСчетаФактуры.ВидСчетаФактуры;
	ДокументОснование = РеквизитыСчетаФактуры.ДокументОснование;
	
	ПоследнееИсправление = УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыВыданного(ДокументСсылка);
	
	Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоследнееИсправление, "ДокументОснование");
	
	СчетФактураЯвляетсяОснованием = Ложь;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг")
		ИЛИ (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		И НЕ Документы.ОтчетКомиссионераОПродажах.ДокументСозданПоПравиламПостановления914(ДокументОснование))Тогда
		
		СчетФактураЯвляетсяОснованием = Истина;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
		
		СчетФактураЯвляетсяОснованием = ЗначениеЗаполнено(РеквизитыСчетаФактуры.Продавец);
		
	КонецЕсли;

	ВозможноИсправить  = Истина;
	ПорядокИсправления = Новый ФиксированноеСоответствие(Документы.СчетФактураВыданный.ПолучитьСоответствиеВидовСчетаФактурыПорядкуИсправления());
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.СводнаяСправка 
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочнаяСправка Тогда
		ВозможноИсправить = Ложь;
	КонецЕсли;
	
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		ВозможноИсправить = Ложь;
	КонецЕсли;
	
	ВозможноКорректировать = Истина;
	Если НЕ ПорядокИсправления[ВидСчетаФактуры] 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда 
		ВозможноКорректировать = Ложь;
	КонецЕсли;
	
	ДоступнаКорректировочнаяСправка = Ложь;
	Если ВидСчетаФактуры = ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка") Тогда 
		ДоступнаКорректировочнаяСправка = Истина;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить("ВидСчетаФактуры",      ВидСчетаФактуры);
	СтруктураРеквизитов.Вставить("ПоследнееИсправление", ПоследнееИсправление);
	СтруктураРеквизитов.Вставить("ДокументОснование",    Основание);
	
	СтруктураРеквизитов.Вставить("ПорядокИсправления",        ПорядокИсправления);
	СтруктураРеквизитов.Вставить("ВозможноИсправить",         ВозможноИсправить);
	СтруктураРеквизитов.Вставить("ИсправлятьСчетФактуру",     СчетФактураЯвляетсяОснованием);
	СтруктураРеквизитов.Вставить("ВозможноКорректировать",    ВозможноКорректировать);
	СтруктураРеквизитов.Вставить("КорректироватьСчетФактуру", СчетФактураЯвляетсяОснованием);
	СтруктураРеквизитов.Вставить("ДоступнаКорректировочнаяСправка", ДоступнаКорректировочнаяСправка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка) Экспорт
	
	Возврат УчетНДСПереопределяемый.ПолучитьПоследнееИсправлениеСчетаФактурыПолученного(ДокументСсылка);
	
КонецФункции

Функция ПолучитьНастройкиПечатиСчетовФактур(МассивДокументов) Экспорт
	
	ДокументыБезСчетовФактур = Новый Массив;
	СчетаФактуры = Новый Массив;
	НеВыставленныеСчетаФактурыНаАванс = Новый Массив;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	Для Счетчик = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла; 
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Основание,
	|	СчетФактураВыданный.Ссылка КАК СчетФактура,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	СчетФактураВыданный.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетФактураВыданный.Выставлен КАК Выставлен,
	|	СчетФактураВыданный.КодСпособаВыставления КАК КодСпособаВыставления
	|ПОМЕСТИТЬ СчетаФактурыВыданные
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование,
	|	СчетФактураВыданныйДокументыОснования.Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Выставлен,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.КодСпособаВыставления
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&МассивДокументов)
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание,
	|	СчетФактураВыданный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК Основание,
	|	СчетаФактурыВыданные.СчетФактура КАК СчетФактура,
	|	СчетаФактурыВыданные.Дата КАК Дата,
	|	СчетаФактурыВыданные.ВидСчетаФактуры КАК ВидСчетаФактуры,
	|	СчетаФактурыВыданные.Выставлен КАК Выставлен,
	|	СчетаФактурыВыданные.КодСпособаВыставления КАК КодСпособаВыставления
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыВыданные КАК СчетаФактурыВыданные
	|		ПО ТаблицаДокументов.ДокументОснование = СчетаФактурыВыданные.Основание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СчетаФактуры.Добавить(Выборка.СчетФактура);
				Если Выборка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
				   И Не Выборка.Выставлен И Выборка.КодСпособаВыставления = 1 Тогда
					НеВыставленныеСчетаФактурыНаАванс.Добавить(
						Новый Структура("Ссылка, Дата", Выборка.СчетФактура, Выборка.Дата));
				КонецЕсли;
			Иначе	
				ДокументыБезСчетовФактур.Добавить(Выборка.Основание);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ДокументыБезСчетовФактур = МассивДокументов;
	КонецЕсли; 
	
	Возврат НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, НеВыставленныеСчетаФактурыНаАванс);
	
КонецФункции

Функция ПолучитьНастройкиПечатиСчетовФактурПолученных(МассивДокументов) Экспорт
	
	ДокументыБезСчетовФактур = Новый Массив;
	СчетаФактуры = Новый Массив;
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ДокументОснование", Документы.ТипВсеСсылки());
	Для Счетчик = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла; 
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "ДокументОснование");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Основание,
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ СчетаФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование,
	|	СчетФактураПолученныйДокументыОснования.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В(&МассивДокументов)
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Основание,
	|	СчетФактураПолученный.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДокументов.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ДокументОснование КАК Основание,
	|	СчетаФактурыПолученные.СчетФактура КАК СчетФактура
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаФактурыПолученные КАК СчетаФактурыПолученные
	|		ПО ТаблицаДокументов.ДокументОснование = СчетаФактурыПолученные.Основание";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СчетаФактуры.Добавить(Выборка.СчетФактура);
			Иначе	
				ДокументыБезСчетовФактур.Добавить(Выборка.Основание);
			КонецЕсли; 
		КонецЦикла; 
	Иначе
		ДокументыБезСчетовФактур = МассивДокументов;
	КонецЕсли; 
	
	Возврат НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, Новый Массив);
	
КонецФункции

Функция НастройкиПечатиСчетовФактур(СчетаФактуры, ДокументыБезСчетовФактур, НеВыставленныеСчетаФактурыНаАванс)
	
	СписокМакетов = "";
	ЕстьСчетФактура = Ложь;
	ЕстьСчетФактура1137 = Ложь;
	ЕстьСчетФактура981 = Ложь;
	ЕстьКорректировочныйСчетФактура = Ложь;
	ЕстьКорректировочныйСчетФактура1137 = Ложь;
	ЕстьКорректировочныйСчетФактура952 = Ложь;
	ЕстьКорректировочныйСчетФактура981 = Ложь;
	ЕстьКорректировочныйСчетФактура981Аванс = Ложь;
	
	Для Каждого Объект Из СчетаФактуры Цикл
		
		// Определим дату для получения версии печатной формы.
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда 
			ДатаВерсии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДатаВходящегоДокумента");
		Иначе
			РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, 
				"Исправление, ВидСчетаФактуры, Дата, ДатаИсходногоДокумента, ДатаИсправляемогоКорректировочногоДокумента");
			Если РеквизитыСчетаФактуры.Исправление Тогда
				Если РеквизитыСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный Тогда 
					ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
				Иначе
					ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсходногоДокумента;
				КонецЕсли;
			Иначе
				ДатаВерсии = РеквизитыСчетаФактуры.Дата;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетНДСПереопределяемый.ИспользуетсяПостановлениеНДС1137(ДатаВерсии) Тогда 
			
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
			
			Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
				ИЛИ Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				
				Если ВерсияПостановленияНДС1137 >= 4 Тогда
					
					Если НЕ ЕстьКорректировочныйСчетФактура981 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура981", ",КорректировочныйСчетФактура981");
						ЕстьКорректировочныйСчетФактура981 = Истина;
					КонецЕсли;
					
				ИначеЕсли ВерсияПостановленияНДС1137 > 1 Тогда
					
					Если НЕ ЕстьКорректировочныйСчетФактура952 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура952", ",КорректировочныйСчетФактура952");
						ЕстьКорректировочныйСчетФактура952 = Истина;
					КонецЕсли;
				
				Иначе
					
					Если НЕ ЕстьКорректировочныйСчетФактура1137 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура1137", ",КорректировочныйСчетФактура1137");
						ЕстьКорректировочныйСчетФактура1137 = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.КорректировочныйНаАванс Тогда
				
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура981Аванс", ",КорректировочныйСчетФактура981Аванс");
				ЕстьКорректировочныйСчетФактура981Аванс = Истина;
				
			Иначе
				
				Если ВерсияПостановленияНДС1137 >= 4 Тогда
					
					Если НЕ ЕстьСчетФактура981 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура981", ",СчетФактура981");
						ЕстьСчетФактура981 = Истина;
					КонецЕсли;
					
				Иначе
					
					Если НЕ ЕстьСчетФактура1137 Тогда
						СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура1137", ",СчетФактура1137");
						ЕстьСчетФактура1137 = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный 
				ИЛИ Объект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
				Если НЕ ЕстьКорректировочныйСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "КорректировочныйСчетФактура", ",КорректировочныйСчетФактура");
					ЕстьКорректировочныйСчетФактура = Истина;
				КонецЕсли;
			Иначе
				Если НЕ ЕстьСчетФактура Тогда
					СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "СчетФактура", ",СчетФактура");
					ЕстьСчетФактура = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СчетаФактуры,НеВыставленныеСчетаФактурыНаАванс,ДокументыБезСчетовФактур,СписокМакетов",
		СчетаФактуры, НеВыставленныеСчетаФактурыНаАванс, ДокументыБезСчетовФактур, СписокМакетов);
	
КонецФункции

// Определяет, как именно нужно напечатать переданные документы
//
// Параметры:
//  МассивДокументов - Массив - содержит ссылки на первичные документы, подлежащие печати, или их счета-фактуры
// 
// Возвращаемое значение:
//  Структура - содержит структурированный перечень ссылок на документы, макеты, заголовки форм.
//              Не содержит существенных данных этих документов.
//              Описание структуры см. в конце функции.
//
Функция ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СчетаФактуры             = Новый Массив;
	ДокументыБезСчетовФактур = Новый Массив;
	
	ОснованияСчетаФактурыПолученного = УчетНДСПереопределяемый.ПолучитьСписокТиповПоВидуСчетаФактурыПолученного(
		Перечисления.ВидСчетаФактурыПолученного.НаПоступление);
	
	Для каждого Объект Из МассивДокументов Цикл
	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный")
		 ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			СчетаФактуры.Добавить(Объект);
			
		ИначеЕсли ТипЗнч(Объект) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
			Запрос.УстановитьПараметр("ПустаяСФ", Документы.СчетФактураВыданный.ПустаяСсылка());
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ОказаниеУслугКонтрагенты.СчетФактура КАК СчетФактура
				|ИЗ
				|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
				|ГДЕ
				|	ОказаниеУслугКонтрагенты.Ссылка В(&МассивДокументов)
				|	И ОказаниеУслугКонтрагенты.ВыданСФ
				|	И ОказаниеУслугКонтрагенты.СчетФактура <> &ПустаяСФ";
				
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					СчетаФактуры.Добавить(Выборка.СчетФактура);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ОснованияСчетаФактурыПолученного.Найти(ТипЗнч(Объект)) <> Неопределено
		        И ТипЗнч(Объект) <> Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруПолученный(Объект);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
			КонецЕсли;
			
		Иначе
			
			СтруктураОтбора = Новый Структура;
			Если ТипЗнч(Объект) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") 
				И Объект.ВидОперации = Перечисления.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках Тогда
				СтруктураОтбора.Вставить("Продавец", Справочники.Контрагенты.ПустаяСсылка());
			КонецЕсли;
			
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект,,, СтруктураОтбора);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыСчетФактураНеТребуются = ПолучитьДокументыСчетФактураНеТребуются(ДокументыБезСчетовФактур);
	
	УниверсальныеПередаточныеДокументы = Новый Массив;
	СписокМакетов = "";
	
	ЕстьУПДСтатус1 = Ложь;
	ЕстьУПДСтатус1_981 = Ложь;
	
	ЕстьУПДСтатус2 = Ложь;
	ЕстьУПДСтатус2_981 = Ложь;
	
	Для каждого Документ Из СчетаФактуры Цикл
		
		УниверсальныеПередаточныеДокументы.Добавить(Документ);
		
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
			"Исправление, Дата, ДатаИсходногоДокумента");
		Если РеквизитыСчетаФактуры.Исправление Тогда
			ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсходногоДокумента;
		Иначе
			ДатаВерсии = РеквизитыСчетаФактуры.Дата;
		КонецЕсли;
			
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
		
		Если ВерсияПостановленияНДС1137 >= 4 Тогда
			Если НЕ ЕстьУПДСтатус1_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1_981", ",УПДСтатус1_981");
				ЕстьУПДСтатус1_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУПДСтатус1 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус1", ",УПДСтатус1");
				ЕстьУПДСтатус1 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Документ Из ДокументыСчетФактураНеТребуются Цикл
		
		УниверсальныеПередаточныеДокументы.Добавить(Документ);
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда 
			// Значит печатается исправительный УПД, печатаем по форме исходного.
			ДатаИсходногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДатаИсходногоДокумента");
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаИсходногоДокумента);
		Иначе
			ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Документ.Дата);
		КонецЕсли;
		
		Если ВерсияПостановленияНДС1137 >= 4 Тогда
			Если НЕ ЕстьУПДСтатус2_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2_981", ",УПДСтатус2_981");
				ЕстьУПДСтатус2_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУПДСтатус2 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УПДСтатус2", ",УПДСтатус2");
				ЕстьУПДСтатус2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УниверсальныеПередаточныеДокументы.Количество() = 1 Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УниверсальныеПередаточныеДокументы[0], "Номер, Дата");
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Универсальный передаточный документ №%1 от %2'"),
			РеквизитыДокумента.Номер, Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Печать универсальных передаточных документов'");
	КонецЕсли;
	
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ЗаголовокФормы",                     ЗаголовокФормы);
	НастройкиПечати.Вставить("СписокМакетов",                      СписокМакетов);
	НастройкиПечати.Вставить("УниверсальныеПередаточныеДокументы", УниверсальныеПередаточныеДокументы);
	НастройкиПечати.Вставить("ДокументыБезСчетовФактур",           ДокументыБезСчетовФактур);
	НастройкиПечати.Вставить("ДокументыСчетФактураНеТребуются",    ДокументыСчетФактураНеТребуются);
	
	Возврат НастройкиПечати;
	
КонецФункции

Функция ПолучитьНастройкиПечатиУниверсальныхКорректировочныхДокументов(МассивДокументов) Экспорт
	
	СчетаФактуры             = Новый Массив;
	ДокументыБезСчетовФактур = Новый Массив;
	
	Для каждого Объект Из МассивДокументов Цикл
	
		Если ТипЗнч(Объект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			СчетаФактуры.Добавить(Объект);
			
		Иначе
			
			СтруктураОтбора = Новый Структура;
			СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Объект,,, СтруктураОтбора);
			
			Если СчетФактура = Неопределено Тогда
				ДокументыБезСчетовФактур.Добавить(Объект);
			Иначе
				СчетаФактуры.Добавить(СчетФактура);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокументыСчетФактураНеТребуются = ПолучитьДокументыСчетФактураНеТребуются(ДокументыБезСчетовФактур);
	
	УниверсальныеКорректировочныеДокументы = Новый Массив;
	СписокМакетов = "";
	
	ЕстьУКДСтатус1 = Ложь;
	ЕстьУКДСтатус1_981 = Ложь;
	
	ЕстьУКДСтатус2 = Ложь;
	ЕстьУКДСтатус2_981 = Ложь;
	
	Для каждого Документ Из СчетаФактуры Цикл
		
		УниверсальныеКорректировочныеДокументы.Добавить(Документ);
		
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, 
			"Исправление, Дата, ДатаИсправляемогоКорректировочногоДокумента");
		Если РеквизитыСчетаФактуры.Исправление Тогда
			ДатаВерсии = РеквизитыСчетаФактуры.ДатаИсправляемогоКорректировочногоДокумента;
		Иначе
			ДатаВерсии = РеквизитыСчетаФактуры.Дата;
		КонецЕсли;
			
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(ДатаВерсии);
		
		Если ВерсияПостановленияНДС1137 >= 4 Тогда
			Если НЕ ЕстьУКДСтатус1_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1_981", ",УКДСтатус1_981");
				ЕстьУКДСтатус1_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУКДСтатус1 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус1", ",УКДСтатус1");
				ЕстьУКДСтатус1 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Документ Из ДокументыСчетФактураНеТребуются Цикл
		
		УниверсальныеКорректировочныеДокументы.Добавить(Документ);
		
		// Печать исправительного УКД со статусом "2" не поддерживается, всегда печатаем по форме на дату документа.
		ВерсияПостановленияНДС1137 = УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Документ.Дата);
		
		Если ВерсияПостановленияНДС1137 >= 4 Тогда
			Если НЕ ЕстьУКДСтатус2_981 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2_981", ",УКДСтатус2_981");
				ЕстьУКДСтатус2_981 = Истина;
			КонецЕсли;
		Иначе
			Если НЕ ЕстьУКДСтатус2 Тогда
				СписокМакетов = СписокМакетов + ?(СписокМакетов = "", "УКДСтатус2", ",УКДСтатус2");
				ЕстьУКДСтатус2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УниверсальныеКорректировочныеДокументы.Количество() = 1 Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УниверсальныеКорректировочныеДокументы[0], "Номер, Дата");
		ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Универсальный корректировочный документ №%1 от %2'"),
			РеквизитыДокумента.Номер, Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	Иначе
		ЗаголовокФормы = НСтр("ru = 'Печать универсальных корректировочных документов'");
	КонецЕсли;
	
	НастройкиПечати = Новый Структура;
	НастройкиПечати.Вставить("ЗаголовокФормы",                     ЗаголовокФормы);
	НастройкиПечати.Вставить("СписокМакетов",                      СписокМакетов);
	НастройкиПечати.Вставить("УниверсальныеКорректировочныеДокументы", УниверсальныеКорректировочныеДокументы);
	НастройкиПечати.Вставить("ДокументыБезСчетовФактур",           ДокументыБезСчетовФактур);
	НастройкиПечати.Вставить("ДокументыСчетФактураНеТребуются",    ДокументыСчетФактураНеТребуются);
	
	Возврат НастройкиПечати;
	
КонецФункции

Функция ПолучитьНастройкиПечатиСводныхСправок(МассивДокументов) Экспорт
	
	СводныеСправки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				СводныеСправки.Добавить(Выборка.СчетФактура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокМакетов = "СводнаяСправка";
	
	Возврат Новый Структура("СводныеСправки,СписокМакетов", СводныеСправки, СписокМакетов);
	
КонецФункции

Функция ПолучитьНастройкиПечатиКорректировочныхСправок(МассивДокументов) Экспорт
	
	КорректировочныеСправки = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&МассивДокументов)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.СчетФактура) Тогда
				КорректировочныеСправки.Добавить(Выборка.СчетФактура);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СписокМакетов = "КорректировочнаяСправка";
	
	Возврат Новый Структура("КорректировочныеСправки,СписокМакетов", КорректировочныеСправки, СписокМакетов);
	
КонецФункции

Процедура УстановитьПризнакВыставленСчетовФактурНаАванс(СчетаФактуры) Экспорт
	
	Для Каждого СчетФактура Из СчетаФактуры Цикл
		
		СчетФактураОбъект = СчетФактура.Ссылка.ПолучитьОбъект();
		
		СчетФактураОбъект.Выставлен = Истина;
		СчетФактураОбъект.ДатаВыставления = СчетФактура.Дата;
		
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#Область АктуализацияРасчетаНДС

// Определяет требуется ли актуализация расчета НДС для построения отчета.
// Актуализация не требуется если
// - отчет формируется организацией, не являющейся плательщиком НДС - актуализация не требуется.
// - отчет формируется за периоды ранее 1 квартала 2018 года - актуализация не требуется.
// - отчет формируется за период отличный от налогового - актуализация не требуется.
// - расчет НДС актуален (выполнены все регламентные операции) - 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация по которой строится отчет.
//  НачалоПериода - Дата - начало периода, за который строится отчет.
//  КонецПериода  - Дата - конец периода, за который строится отчет.
//
// Возвращаемое значение:
//   Булево - Истина, если требуется актуализация расчета НДС.
Функция ТребуетсяАктуализацияРасчетаНДС(Организация, НачалоПериода, КонецПериода) Экспорт
	
	ПрименяетсяПомощникРасчетаНДС = ПомощникРасчетаНДС.ФормироватьДекларациюВПомощнике(
		Организация, НачалоПериода);
		
	Если НЕ ПрименяетсяПомощникРасчетаНДС Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПериодОтчетаСоответствуетНалоговому = УчетНДСПереопределяемый.ПериодОтчетаСоответствуетНалоговому(
		Организация, НачалоПериода, КонецПериода);
		
	Если ПериодОтчетаСоответствуетНалоговому Тогда
		Возврат НЕ РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.РасчетНДСАктуален(
			Организация, НачалоПериода);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получает список счетов учета НДС, описанных в макете "СчетаУчетаНДС" регистра бухгалтерии "Хозрасчетный"
// Параметры:
//  Счет - ПланыСчетов.Хозрасчетный - счет, для которого выполняется проверка.
//
// Возвращаемое значение:
//   Булево - Истина, если счет относится к счетам учета НДС.
Функция ЭтоСчетУчетаНДС(Счет) Экспорт
	
	МакетСчетаУчетаНДС = ПланыСчетов.Хозрасчетный.ПолучитьМакет("СчетаУчетаНДС");
	ТаблицаДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетСчетаУчетаНДС.ПолучитьТекст());
	ТаблицаДанных.Индексы.Добавить("Счет");
	
	СчетИмя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "ИмяПредопределенныхДанных");
	
	Отбор = Новый Структура;
	Отбор.Вставить("Счет", СчетИмя);
	
	СтрокиДанных = ТаблицаДанных.НайтиСтроки(Отбор);
	
	Возврат СтрокиДанных.Количество() = 1;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// РеквизитыСФ - Структура, см. УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреВыданном
Функция ПредставлениеСчетФактураВыданный(РеквизитыСФ)
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерСчетаФактуры), РеквизитыСФ.НомерСчетаФактуры, "..."));
	ПараметрыСтроки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаСчетаФактуры),  Формат(РеквизитыСФ.ДатаСчетаФактуры, "ДЛФ=D"), "..."));
	
	Если РеквизитыСФ.Исправление Тогда
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] (испр. [НомерИсправления]) от [ДатаИсправления]'");
		ПараметрыСтроки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерИсправления), РеквизитыСФ.НомерИсправления, "..."));
		ПараметрыСтроки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаИсправления),  Формат(РеквизитыСФ.ДатаИсправления, "ДЛФ=D"), "..."));
	Иначе
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] от [ДатаСчетаФактуры]'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ПараметрыСтроки);
	
КонецФункции

// РеквизитыСФ - Структура, см. УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном
Функция ПредставлениеСчетФактураПолученный(РеквизитыСФ)
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерСчетаФактуры), РеквизитыСФ.НомерСчетаФактуры, "..."));
	ПараметрыСтроки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаСчетаФактуры),  Формат(РеквизитыСФ.ДатаСчетаФактуры, "ДЛФ=D"), "..."));
	
	Если РеквизитыСФ.ИсправлениеСобственнойОшибки Тогда
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] от [ДатаСчетаФактуры] (исправление собственной ошибки от [ДатаИсправления])'");
		ПараметрыСтроки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.Дата),  Формат(РеквизитыСФ.Дата, "ДЛФ=D"), "..."));
	ИначеЕсли РеквизитыСФ.Исправление Тогда
		ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] (испр. [НомерИсправления]) от [ДатаИсправления]'");
		ПараметрыСтроки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.НомерИсправления), РеквизитыСФ.НомерИсправления, "..."));
		ПараметрыСтроки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(РеквизитыСФ.ДатаИсправления),  Формат(РеквизитыСФ.ДатаИсправления, "ДЛФ=D"), "..."));
	Иначе
		Если НачалоДня(РеквизитыСФ.ДатаСчетаФактуры) = НачалоДня(РеквизитыСФ.Дата) Тогда
			ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] от [ДатаСчетаФактуры]'");
		Иначе
			ПараметрыСтроки.Вставить("ДатаПолученияСчетаФактуры", Формат(РеквизитыСФ.Дата, "ДЛФ=D"));
			ШаблонСтроки = НСтр("ru='[НомерСчетаФактуры] от [ДатаСчетаФактуры], получен [ДатаПолученияСчетаФактуры]'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтроки, ПараметрыСтроки);
	
КонецФункции

// Возвращаяет массив документов, для которых выписка счетов-фактур не требуется
// Документы в массиве должны быть одного вида
//
Функция ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов)
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидДокументов = МассивДокументов[0].Метаданные().Имя;
	ДокументыСчетФактураНеТребуются = Документы[ВидДокументов].ПолучитьДокументыСчетФактураНеТребуются(МассивДокументов);
	
	Возврат ДокументыСчетФактураНеТребуются;
	
КонецФункции

#КонецОбласти
