
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

// Выводит модальное окно, содержащее пояснение к предупреждающим полям
Процедура ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	СотрудникиКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Функция получает цвет стиля по имени элемента стиля
//
// Параметры:
//	ИмяЦветаСтиля - строка с именем элемента.
//
// Возвращаемое значение - цвет стиля
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦветаСтиля);
	
КонецФункции

// Функция определяет пол физлица по его отчеству.
// Параметр:
// 		ОтчествоРаботника - отчество работника.
//
Функция ОпределитьПолПоОтчеству(ОтчествоРаботника) Экспорт
	
	Возврат СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(ОтчествоРаботника);
	
КонецФункции // ОпределитьПолПоОтчеству()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИЙ ДЛЯ РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа.
//
// Возвращаемое значение:
//	Булево - Признак возможности печати.
//
Функция ПроверитьВозможностьПечатиЧека(Форма) Экспорт
	
	Возврат ОбщегоНазначенияБПКлиент.ПроверитьВозможностьПечатиЧека(Форма);
	
КонецФункции // ПроверитьВозможностьПечатиЧека()

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Возврат МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Процедура НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоИдентификатору(ОповещениеПриПодключении, ИдентификаторКлиента, ИдентификаторУстройства);
	
КонецПроцедуры

// Отключает устройство, определенное идентификатором
Процедура НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства) Экспорт
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоИдентификатору(ОповещениеПриОтключении, ИдентификаторКлиента, ИдентификаторУстройства);
	
КонецПроцедуры

// Производит подключение доступного оборудования по списку типов ПО
//
Процедура НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещениеПриПодключении, ИдентификаторКлиента, ТипыПО);
	
КонецПроцедуры

// Отключает все подключенное оборудование, соответствующее указанному типу ПО
//
Процедура НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО) Экспорт
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещениеПриОтключении, ИдентификаторКлиента, ТипыПО);
	
КонецПроцедуры

// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор").
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры) Экспорт
	
	Возврат МенеджерОборудованияКлиент.ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИЙ ДЛЯ РАБОТЫ С ВЫБОРОМ ПЕРИОДА

// Процедура выполняется при изменении вида периода.
Процедура ВидПериодаПриИзменении(Элемент, Знач ВидПериода, НачалоПериода, КонецПериода, Период) Экспорт
	
	ВыборПериодаКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, НачалоПериода, КонецПериода, Период);
	
КонецПроцедуры

// Процедура выполняется при изменении поля "Период".
Процедура ПериодПриИзменении(Элемент, Знач Период, НачалоПериода, КонецПериода) Экспорт
	
	ВыборПериодаКлиент.ПериодПриИзменении(Элемент, Период, НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура выполняется при начале выбора поля "Период".
Процедура ПериодНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВидПериода, НачалоПериода, ОписаниеОповещения) Экспорт
	
	ВыборПериодаКлиент.ПериодНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, ВидПериода, НачалоПериода, ОписаниеОповещения);
	
КонецПроцедуры

// Процедура выполняется при обработке выбора поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ВидПериода, Период,
									НачалоПериода, КонецПериода) Экспорт
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ВидПериода, Период,
												НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура выполняется при автоподборе поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, ВидПериода, Период,
							НачалоПериода, КонецПериода) Экспорт
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, ВидПериода, Период,
										НачалоПериода, КонецПериода);
	
КонецПроцедуры

// Процедура выполняется при окончании ввода текста поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ВидПериода, Период,
										НачалоПериода, КонецПериода) Экспорт
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, ВидПериода, Период,
													НачалоПериода, КонецПериода);
	
КонецПроцедуры

//////////////////////////////////////////
// Обработчики событий поля ввода месяца

// Возникает при изменении поля.
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность);
	
КонецПроцедуры

// Возникает при автоподборе текста поля.
Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадрыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Возникает при окончании ввода текста поля.
Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ЗарплатаКадрыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Возникает при начале выбора значения поля.
Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ЗарплатаКадрыКлиент.ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность, ОповещениеЗавершения, ЗначениеМесяцаПоУмолчанию);
	
КонецПроцедуры

// Возникает при регулировании поля.
Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ЗарплатаКадрыКлиент.ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность, ЗначениеМесяцаПоУмолчанию);
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ГРУППИРОВКА

// Возникает перед добавлением.
Процедура ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

// Возникает перед началом изменения.
Процедура ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(Форма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ СОРТИРОВКА

// Возникает перед добавлением.
Процедура СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

// Возникает перед началом изменения.
Процедура СортировкаПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	БухгалтерскиеОтчетыКлиент.СортировкаПередНачаломИзменения(Форма, Элемент, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет структуру параметров новыми расчетными значениями.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется расчетными значениями. 
//
// 
Процедура ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
КонецПроцедуры

// Заполняет структуру параметров значениями по умолчанию.
// 
// Параметры:
//  ПараметрыОбработчикаОжидания - Структура - заполняется значениями по умолчанию. 
//
// 
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ

// Процедура возникает при открытии формы отчета.
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(Форма, Отказ);
	
КонецПроцедуры

// Процедура возникает перед закрытием формы отчета.
Процедура ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(Форма, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура возникает при закрытии формы отчета.
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы = Истина) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(Форма, ЗавершениеРаботы);
	
КонецПроцедуры

// Процедура обработки расшифровки отчета.
Процедура ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ФормаОтчета, Элемент, Расшифровка,
																		СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "Отборы".
Процедура ОтборыПриИзменении(Форма, Элемент) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(Форма, Элемент);
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" поля "Отборы".
Процедура ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" поля "Отборы".
Процедура ОтборыПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(Форма, Элемент, Отказ);
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля "ОтборыПравоеЗначение".
Процедура ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка,
											СписокПараметров) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОтборыПравоеЗначениеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка,
																СписокПараметров);
	
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(Форма, Элемент, Отказ, Копирование,
																		Родитель, Группа);
	
КонецПроцедуры

// Обработчик события "ПередНачаломИзменения" поля "ДополнительныеПоля".
Процедура ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(Форма, Элемент, Отказ);
	
КонецПроцедуры

// Процедура добавляет поля ресурсов в запрещенные поля.
Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(Форма, СписокПолей);
	
КонецПроцедуры

// Процедура вычисления суммы выделенных ячеек.
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти,
															НеобходимоВычислятьНаСервере) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти,
																				НеобходимоВычислятьНаСервере);
	
КонецПроцедуры

// Вызывается из обработчика события ПриИзменении поля организации.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма отчета.
//	Элемент - ПолеФормы - Поле организации.
//
Процедура ОрганизацияПриИзменении(ЭтотОбъект, Элемент) Экспорт
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполнить команду печати, которая открывает результат в форме печати документов.
//
// Если в параметре ПараметрыПечати передать структуру, содержащую свойство
// ПереопределитьПользовательскиеНастройкиКоличества = Истина, то пользовательские
// настройки количества копий не будут восстановлены, и не запишутся.
//
// Внимание! Процедура должна быть заменена на процедуру ВыполнитьКомандуПечатиБП.
// И печать должна выполняться посредством подключаемых команд с обработчиком
// ВыполнитьКомандуПечатиБП.
//
Процедура ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды, ВладелецФормы,
									ПараметрыПечати = Неопределено) Экспорт
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(ИмяМенеджераПечати, ИменаМакетов, ПараметрКоманды,
													ВладелецФормы, ПараметрыПечати);
	
КонецПроцедуры

// Стандратный механизм формиирования печатных форм.
// Позволяет осуществлять печать посредством подключаемых команд.
// Указывается как обработчик при добавлении команд печати в процедуру менеджера
// ДобавитьКомандыПечати(КомандыПечати)
Функция ВыполнитьКомандуПечатиБП(ОписаниеКоманды) Экспорт
	
	УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати(ОписаниеКоманды);
	
КонецФункции

// Функция возвращает заголовок печатной формы.
Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт 
	
	Возврат ОбщегоНазначенияБПКлиент.ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды);
	
КонецФункции

// Обработчик команды формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, из которой выполняется команда.
//   Команда - КомандаФормы - Выполняемая команда.
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
Процедура ВыполнитьКоманду(Форма, Команда, Источник) Экспорт
	
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(Форма, Команда, Источник);
	
КонецПроцедуры

// Открывает форму ПечатьДокументов для коллекции табличных документов.
//
// Параметры:
//  КоллекцияПечатныхФорм - Массив - коллекция описаний печатных форм, см. НоваяКоллекцияПечатныхФорм();
//  ОбъектыПечати - СписокЗначений  - значение - ссылка на объект;
//                                    представление - имя области в которой был выведен объект (выходной параметр);
//  ВладелецФормы - УправляемаяФорма - форма, из которой выполняется печать.
//
Процедура ПечатьДокументов(КоллекцияПечатныхФорм, Знач ОбъектыПечати = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбъектыПечати, ВладелецФормы);
	
КонецПроцедуры

// Возвращает подготовленный список печатных форм.
//
// Параметры:
//  Идентификаторы - Строка - идентификаторы печатных форм.
//
// Возвращаемое значение:
//  Массив - коллекция описаний печатных форм. Коллекция предназначена для использования в качестве
//           параметра КоллекцияПечатныхФорм в других процедурах клиентского программного интерфейса подсистемы.
Функция НоваяКоллекцияПечатныхФорм(Идентификаторы) Экспорт
	Возврат УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(Идентификаторы);
КонецФункции

// Возвращает описание найденной в коллекции печатной формы.
// Если описание не найдено, возвращает Неопределено.
//
// Параметры:
//  КоллекцияПечатныхФорм - Массив - см. НоваяКоллекцияПечатныхФорм();
//  Идентификатор         - Строка - идентификатор печатной формы.
//
// Возвращаемое значение:
//  Структура - найденное описание печатной формы.
Функция ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, Идентификатор) Экспорт
	Возврат УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, Идентификатор);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С АДРЕСНЫМИ ОБЪЕКТАМИ

// Выполняет редактирование места рождения.
Процедура ФизическиеЛицаМестоРожденияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, МестоРождения, ОповещениеЗавершения = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , ОповещениеЗавершения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЧЕТАМИ УЧЕТА НА ФОРМЕ

// Процедура возникает при начале выбора значения субконто.
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров);
	
КонецПроцедуры

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках.
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт
	
	ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;
	
	Если Счет.Пустая() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;
	
	Если ДанныеСчета.ЗапретитьИспользоватьВПроводках Тогда
		Если Сообщать Тогда
			ПоказатьПредупреждение( , СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Счет %1 %2 нельзя использовать в проводках.'"),
				СокрЛП(ДанныеСчета.Код),
				ДанныеСчета.Наименование));
		КонецЕсли;
		Возврат Ложь; // Счет использовать в проводках нельзя
	КонецЕсли;
	
	Возврат Истина; // Счет можно использовать в проводках 
	
КонецФункции // СчетМожноИспользоватьВПроводках()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫБОРА ЗНАЧЕНИЙ ПЕРЕОПРЕДЕЛЯЕМЫХ ТИПОВ

// Открывает форму для выбора значения банковского счета с установленными отборами
//
Процедура ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент) Экспорт
	
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораБанковскогоСчетОрганизации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Открывает форму для выбора значения подразделениям с установленными отборами
//
Процедура ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент) Экспорт
	
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораПодразделения(ПараметрыФормы, Элемент);
	
КонецПроцедуры

// Открывает форму для выбора значения договора с установленными отборами
//
Процедура ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент) Экспорт
	
	БухгалтерскийУчетКлиентПереопределяемый.ОткрытьФормуВыбораДоговора(ПараметрыФормы, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТИРОВАННЫМИ ОТЧЕТАМИ

// Процедура возникает перед закрытием формы отчета.
Процедура ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

// Процедура возникает при изменении вида документа и корректировки.
Процедура ПриИзмененииВидаДокументаИКорректировки(Форма, РазделДокумента = Неопределено, ВидДок = Неопределено,
													НомерКорректировки = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ПриИзмененииВидаДокументаИКорректировки(Форма,
																			   РазделДокумента, ВидДок, НомерКорректировки);
	
КонецПроцедуры

// Функция возвращает общую форму по имени.
Функция ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено,
									КлючУникальности = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени(ИмяФормы, Параметры, Владелец, КлючУникальности);
	
КонецФункции

// Функция возникает при записи отчета.
Функция ПриЗаписиРегламентированногоОтчетаНаКлиенте(Форма, КодИФНС = "не применимо", Автосохранение = Ложь,
													Вариант = Неопределено) Экспорт
	
	Возврат РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(Форма, КодИФНС,
																							Автосохранение, Вариант);
	
КонецФункции

// Процедура возникает после записи отчета.
Процедура ПослеЗаписиРегламентированногоОтчета(Форма) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(Форма);
	
КонецПроцедуры

// Процедура открывает форму предварительного просмотра.
Процедура ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм = Истина,
												СписокПечатаемыхЛистов) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(Форма, ВидПечати, ПризнакНумеруемыхФорм,
																				СписокПечатаемыхЛистов);
	
КонецПроцедуры

// Функция возвращает форму выбранную из списка.
Процедура ВыбратьФормуОтчетаИзДействующегоСписка(Форма, ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.ВыбратьФормуОтчетаИзДействующегоСписка(Форма, ВыполняемоеОповещение);
	
КонецПроцедуры

// Функция осуществляет выбор устройства из списка доступных
// по типу подключаемого оборудования.
// Если устройств более одного, то пользователю отображается
// диалог со списком устройств с предложением выбрать "одно из...".
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключен = "") Экспорт
	
	МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, СообщениеНеПодключен);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

// Обработчик события ПриИзменении поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент           - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     ЭтоТабличнаяЧасть - Булево           - Флаг того, что элемент является частью таблицы формы.
//
Процедура КонтактнаяИнформацияПриИзменении(Форма, Элемент, ЭтоТабличнаяЧасть = Ложь) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(Форма, Элемент);
	
КонецПроцедуры // КонтактнаяИнформацияПредставлениеПриИзменении

// Обработчик события НачалоВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма                - УправляемаяФорма - Форма владельца контактной информации.
//     Элемент              - ПолеФормы        - Элемент формы, содержащий представление контактной информации.
//     Модифицированность   - Булево           - Устанавливаемый флаг модифицированности формы.
//     СтандартнаяОбработка - Булево           - Устанавливаемый флаг стандартной обработки события формы.
//
// Возвращаемое значение:
//     Неопределено
//
Процедура КонтактнаяИнформацияНачалоВыбора(Форма, Элемент, Модифицированность = Истина, СтандартнаяОбработка = Ложь) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(Форма, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры // КонтактнаяИнформацияПредставлениеНачалоВыбора()

// Обработчик события Очистка поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма        - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяРеквизита - Строка           - Имя реквизита формы, связанного с представление контактной информации.
//
// Возвращаемое значение:
//     Неопределено
//
Процедура КонтактнаяИнформацияОчистка(Знач Форма, Знач ИмяРеквизита) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(Форма, ИмяРеквизита)
	
КонецПроцедуры // КонтактнаяИнформацияПредставлениеОчистка()

// Обработчик команды, связанной с контактной информации (написать письмо, открыть адрес, и т.п.).
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма      - УправляемаяФорма - Форма владельца контактной информации.
//     ИмяКоманды - Строка           - Имя автоматически сгенерированной команды действия.
//
// Возвращаемое значение:
//     Неопределено
//
Процедура КонтактнаяИнформацияВыполнитьКоманду(Знач Форма, Знач ИмяКоманды) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(Форма, ИмяКоманды);
	
КонецПроцедуры // ПодключаемаяКоманда()

// Открытие формы адреса формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма     - УправляемаяФорма - Форма владельца контактной информации.
//     Результат - Произвольный     - Данные, переданные обработчиком команды.
//
Процедура КонтактнаяИнформацияОткрытьФормуВводаАдреса(Форма, Результат) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуВводаАдреса(Форма, Результат);
	
КонецПроцедуры // ОткрытьФормуВводаАдреса()

// Обработчик события ОбработкаВыбора поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Форма             - УправляемаяФорма - Форма владельца контактной информации.
//     ВыбранноеЗначение - Строка           - Выбранное значение, которое будет установлено как значения поля ввода
//                                            контактной информации.
//     ИмяРеквизита - Строка                - Имя реквизита формы, связанного с представление контактной информации.
//     СтандартнаяОбработка - Булево        - В данный параметр передается признак выполнения стандартной
//                                            (системной) обработки события. Если в теле процедуры-обработчика
//                                            установить данному параметру значение Ложь, стандартная обработка события
//                                            производиться не будет.
//
Процедура КонтактнаяИнформацияОбработкаВыбора(Знач Форма, Знач ВыбранноеЗначение, Знач ИмяРеквизита, СтандартнаяОбработка = Ложь) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(Форма, ВыбранноеЗначение, ИмяРеквизита, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события АвтоПодбор поля формы контактной информации.
// Вызывается из подключаемых действий при внедрении подсистемы "Контактная информация".
//
// Параметры:
//     Текст                - Строка         - Строка текста, введенная пользователем в поле контактной информации.
//     ДанныеВыбора         - СписокЗначений - Содержит список значений, который будет использован при стандартной
//                                             обработке события.
//     СтандартнаяОбработка - Булево         - В данный параметр передается признак выполнения стандартной
//                                             (системной) обработки события. Если в теле процедуры-обработчика
//                                             установить данному параметру значение Ложь, стандартная обработка события
//                                             производиться не будет.
//
Процедура КонтактнаяИнформацияАвтоПодбор(Знач Текст, ДанныеВыбора, СтандартнаяОбработка = Ложь) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ СОБЫТИЙ В ЖУРНАЛАХ

// Открывает форму журнала регистрации с установленным отбором.
//
// Параметры:
//  Отбор - Структура - поля и значения, по которым необходимо отфильтровать журнал.
//  Владелец - УправляемаяФорма - форма, из которой открывается журнал регистрации.
//
Процедура ОткрытьЖурналРегистрации(Знач Отбор = Неопределено, Владелец = Неопределено) Экспорт
	
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(Отбор, Владелец);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СОЕДИНЕНИЯ ИБ

// Вызывается при неудачной попытке установить монопольный режим в файловой базе.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описывает, куда надо передать управление после закрытия формы.
//
Процедура ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение = Неопределено, ПараметрыФормы = Неопределено) Экспорт
	
	СоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение, ПараметрыФормы);
	
КонецПроцедуры

// Возвращает текущую дату, приведенную к часовому поясу сеанса.
//
// Функция возвращает время, близкое к результату функции ТекущаяДатаСеанса() в серверном контексте.
// Погрешность обусловлена временем выполнения серверного вызова.
// Предназначена для использования вместо функции ТекущаяДата().
//
Функция ДатаСеанса() Экспорт
	
	Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДЛИТЕЛЬНЫЕ ОПЕРАЦИИ

// Ожидать завершения выполнение процедуры в фоновом задании и открыть форму ожидания длительной операции.
// 
// Параметры:
//  ДлительнаяОперация     - Структура - см. возвращаемое значение функции ДлительныеОперации.ВыполнитьВФоне.
//  ОповещениеОЗавершении  - ОписаниеОповещения - оповещение, которое вызывается при завершении фонового задания.
//                           Параметры процедуры-обработчика оповещения: 
//   * Результат - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства:
//	   ** Статус           - Строка - "Выполнено", если задание было успешно выполнено;
//	                                  "Ошибка", если задание завершено с ошибкой.
//	   ** АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//	                                  помещен (или уже помещен) результат работы процедуры.
//	   ** АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат,
//	                                     содержит адрес дополнительного временного хранилища,
//	                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//	   ** КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//	   ** ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//   * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//  ПараметрыОжидания      - Структура - см. функцию ПараметрыОжидания.
//
Процедура ОжидатьЗавершение(Знач ДлительнаяОперация, Знач ОповещениеОЗавершении = Неопределено,
	Знач ПараметрыОжидания = Неопределено) Экспорт
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращает пустую структуру для параметра ПараметрыОжидания процедуры ОжидатьЗавершение.
//
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * ФормаВладелец          - УправляемаяФорма, Неопределено - форма, из которой вызывается длительная операция.
//   * ТекстСообщения         - Строка - текст сообщения, выводимый на форме ожидания.
//                                       Если не задан, то выводится "Пожалуйста, подождите...".
//   * ВыводитьОкноОжидания   - Булево - если Истина, то открыть окно ожидания с визуальной индикацией длительной операции.
//                                       Если используется собственный механизм индикации, то следует указать Ложь.
//   * ВыводитьПрогрессВыполнения - Булево - выводить прогресс выполнения в процентах на форме ожидания.
//   * ОповещениеОПрогрессеВыполнения - ОписаниеОповещения - оповещение, которое периодически вызывается при
//                                      проверке готовности фонового задания. Параметры процедуры-обработчика оповещения:
//     ** Прогресс - Структура, Неопределено - структура со свойствами или Неопределено,
//                                             если задание было отменено. Свойства:
//	     *** Статус               - Строка - "Выполняется", если задание еще не завершилось;
//                                           "Выполнено", если задание было успешно выполнено;
//	                                         "Ошибка", если задание завершено с ошибкой;
//                                           "Отменено", если задание отменено пользователем или администратором.
//	     *** ИдентификаторЗадания - УникальныйИдентификатор - идентификатор запущенного фонового задания.
//	     *** Прогресс             - Структура, Неопределено - результат функции ДлительныеОперации.ПрочитатьПрогресс,
//                                                            если ВыводитьПрогрессВыполнения = Истина.
//	     *** Сообщения            - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю,
//                                                                      если ВыводитьСообщения = Истина.
//     ** ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//
//   * ВыводитьСообщения      - Булево - выводить сообщения, сформированные в процедуре-обработчике длительной операции.
//                                       Значение Истина имеет смысл, только если ВыводитьПрогрессВыполнения = Ложь
//   * Интервал               - Число  - интервал в секундах между проверками готовности длительной операции.
//                                       По умолчанию 0 - после каждой проверки интервал увеличивается
//                                       с 1 до 15 секунд с коэффициентом 1.4.
//   * ОповещениеПользователя - Структура - содержит свойства:
//     ** Показать            - Булево - если Истина, то по завершении длительной операции
//                                       вывести оповещение пользователя.
//     ** Текст               - Строка - текст оповещения пользователя.
//     ** НавигационнаяСсылка - Строка - навигационная ссылка оповещения пользователя.
//     ** Пояснение           - Строка - пояснение оповещения пользователя.
// 
Функция ПараметрыОжидания(ФормаВладелец) Экспорт
	
	Возврат ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С СОБЫТИЯМИ ФОРМЫ

// Процедура выполняет оповещение формы документа.
//
Процедура ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник) Экспорт
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(Форма, ДокументСсылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещенияФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННОЙ ПОЧТОЙ

// Создает письмо по контактной информации.
//
// Параметры:
//  ЗначенияПолей - Строка, Структура, Соответствие, СписокЗначений - значение контактной информации.
//  Представление - Строка - Представление контактной информации. Используется, если невозможно определить 
//                              представление из параметра. ЗначенияПолей (отсутствие поля "Представление").
//  ОжидаемыйВид  - СправочникСсылка.ВидыКонтактнойИнформации, ПеречислениеСсылка.ТипыКонтактнойИнформации,
//                         Структура - Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей.
//  ИсточникКонтактнойИнформации - Произвольный - Объект владелец контактной информации.
//
Процедура СоздатьЭлектронноеПисьмо(Знач ЗначенияПолей, Знач Представление = "", ОжидаемыйВид = Неопределено, ИсточникКонтактнойИнформации = Неопределено) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(ЗначенияПолей, Представление, ОжидаемыйВид, ИсточникКонтактнойИнформации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГИПЕРССЫЛКОЙ

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
//
// Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
// - для открытия проводника см. ОткрытьПроводник.
// - для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Оповещение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ГИПЕРССЫЛКОЙ

Процедура НапечататьЧекВыполнить(ПараметрыВыполненияКоманды) Экспорт
	ОписаниеОповещения = Новый ОписаниеОповещения("ПечатьЧекаЗавершение", ЭтотОбъект, Новый Структура("Форма", ПараметрыВыполненияКоманды.Источник));
	
	ПечатьФискальныхДокументовКлиент.НапечататьЧек(ПараметрыВыполненияКоманды.Источник, ОписаниеОповещения);
КонецПроцедуры

Процедура ПечатьЧекаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успешно Тогда
		Форма =  ДополнительныеПараметры.Форма;
		ОбъектФормы = Форма.Объект;
		
		ОбъектФормы.НомерЧекаККМ = Результат.НомерЧекаККМ;
		
		// Параметры операции при оплате картой
		ЗаполнитьЗначенияСвойств(ОбъектФормы, Результат.ПараметрыОплаты);
		
		Форма.Записать();
	ИначеЕсли ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
