
#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку штрихкода и возвращает результат этой обработки.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//  штрихкодам в хранилище.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ОбработатьШтрихкод(Штрихкод, ПараметрыСканирования, КэшированныеЗначения, УникальныйИдентификатор) Экспорт
	
	Штрихкод = ШтрихкодированиеИС.НормализованныйШтрихкод(Штрихкод, ПараметрыСканирования);
	
	СписокШтрихкодов = Новый Массив;
	СписокШтрихкодов.Добавить(Штрихкод);
	
	Результат = ОбработатьШтрихкоды(
		СписокШтрихкодов, ПараметрыСканирования, КэшированныеЗначения, УникальныйИдентификатор);
	
	Если Результат.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		
		РезультатОбработкиШтрихкода =  ШтрихкодированиеИС.РезультатОбработкиТребуетсяСопоставлениеНоменклатуры(
			Результат.ШтрихкодыПродукцииДляСопоставления);
			
		Возврат РезультатОбработкиШтрихкода;
		
	КонецЕсли;
	
	Возврат Результат.РезультатыОбработки[Штрихкод];
	
КонецФункции

// Выполняет обработку штрихкодов и возвращает результат этой обработки.
// 
// Параметры:
//  СписокШтрихкодов - Массив - Описание
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//  штрихкодам в хранилище.
// Возвращаемое значение:
//  (См. ШтрихкодированиеИСВызовСервера.ИнициализацияРезультатаОбработкиШтрихкодов).
Функция ОбработатьШтрихкоды(СписокШтрихкодов, ПараметрыСканирования, КэшированныеЗначения, УникальныйИдентификатор) Экспорт
	
	РезультатПроверок = ШтрихкодированиеИС.ВыполнитьПроверкиПередПолучениемДанныхПоШтрихкодам(
		СписокШтрихкодов, ПараметрыСканирования);
	
	Если РезультатПроверок.Количество() > 0 Тогда
		
		РезультатОбработкиШтрихкодов = ИнициализацияРезультатаОбработкиШтрихкодов();
		РезультатОбработкиШтрихкодов.РезультатыОбработки = РезультатПроверок;
		
		Возврат РезультатОбработкиШтрихкодов;
		
	КонецЕсли;
	
	ДанныеПоШтрихкодам = ДанныеПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкодов = ОбработатьДанныеШтрихкодам(
		ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования);
	
	Возврат РезультатОбработкиШтрихкодов;
	
КонецФункции

Функция ИмяМетаданныхПоСсылке(Ссылка) Экспорт

	Если Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)) = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Ссылка.Метаданные().ПолноеИмя();
	КонецЕсли;
	
КонецФункции

// Добавляет серию в элемент справочника "ШтрихкодыУпаковок".
// 
// Параметры:
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  Серия - ОпределяемыйТип.СерияНоменклатуры - Серия.
// Возвращаемое значение:
// (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
Функция ОбработатьДанныеШтрихкодаПослеВыбораСерии(РезультатОбработки, Серия) Экспорт
	
	ДанныеШтрихкода = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДанныхШтрихкода);
	ДанныеШтрихкода.Серия = Серия;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		ШтрихкодУпаковкиОбъект       = ДанныеШтрихкода.ШтрихкодУпаковки.ПолучитьОбъект();
		ШтрихкодУпаковкиОбъект.Серия = Серия;
		ШтрихкодУпаковкиОбъект.Записать();
	КонецЕсли;
	
	Возврат ДанныеШтрихкода;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет обработку данных по штрихкодам. 
// 
// Параметры:
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам).
//  УникальныйИдентификатор - УникальныйИдентификатор - Идентификатор, по которому будут помещены данные по обработанным
//  штрихкодам в хранилище.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// Возвращаемое значение:
//  Структура, Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив из Строка - Штрихкоды, которые необходимо сопоставить с номенклатурой.
// * РезультатыОбработки - (См. ШтрихкодированиеВызовСервера.ИнициализацияРезультатаОбработкиШтрихкодов).
Функция ОбработатьДанныеШтрихкодам(ДанныеПоШтрихкодам, УникальныйИдентификатор, ПараметрыСканирования)
	
	Результат = ИнициализацияРезультатаОбработкиШтрихкодов();
	
	Если ДанныеПоШтрихкодам.ЕстьОшибки Тогда
		
		Для Каждого Штрихкод Из ДанныеПоШтрихкодам.ВсеШтрихкоды Цикл
			
			РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			РезультатОбработки.ТекстОшибки = ДанныеПоШтрихкодам.ТекстОшибки;
			РезультатОбработки.ЕстьОшибки  = ДанныеПоШтрихкодам.ЕстьОшибки;
			РезультатОбработки.ОбщаяОшибка = Истина;
			
			Результат.РезультатыОбработки.Вставить(Штрихкод, РезультатОбработки);
			
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	Результат.ШтрихкодыПродукцииДляСопоставления = ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления;
	
	Если ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок Тогда
		АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок, УникальныйИдентификатор);
	Иначе
		АдресДереваУпаковок = Неопределено;
	КонецЕсли;
	
	ДанныеДокументаОснования = ШтрихкодированиеИС.ДанныеДокументаОснования(ПараметрыСканирования);

	АлкогольнаяПродукция = Перечисления.ВидыПродукцииИС.Алкогольная;
	ТабачнаяПродукция    = Перечисления.ВидыПродукцииИС.Табачная;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки) Тогда
			
			ДанныеШтрихкода = КлючЗначение.Значение;
			
			РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования);
			ЗаполнитьЗначенияСвойств(РезультатОбработки, ДанныеШтрихкода);
			
			РезультатОбработки.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок;
			РезультатОбработки.АдресДереваУпаковок       = АдресДереваУпаковок;
			РезультатОбработки.АдресДанныхШтрихкода      = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
			Результат.РезультатыОбработки.Вставить(КлючЗначение.Ключ, РезультатОбработки);
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ЕГАИС")
			И ДанныеШтрихкода.ВидыПродукции.Найти(АлкогольнаяПродукция) <> Неопределено Тогда
			
			МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
			РезультатОбработки = МодульШтрихкодированиеЕГАИС.РезультатОбработкиШтрихкодаАкцизнойМарки(
				ДанныеШтрихкода, ПараметрыСканирования, ДанныеДокументаОснования, УникальныйИдентификатор);
			
			РезультатОбработки.АдресДереваУпаковок       = АдресДереваУпаковок;
			РезультатОбработки.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок;
			Результат.РезультатыОбработки.Вставить(КлючЗначение.Ключ, РезультатОбработки);
			
		ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ГосИС.МОТП")
			И ДанныеШтрихкода.ВидыПродукции.Найти(ТабачнаяПродукция) <> Неопределено Тогда
			
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			РезультатОбработки = МодульШтрихкодированиеМОТП.РезультатОбработкиКодаМаркировки(
				ДанныеШтрихкода, ПараметрыСканирования, УникальныйИдентификатор);
			
			РезультатОбработки.АдресДереваУпаковок       = АдресДереваУпаковок;
			РезультатОбработки.ЕстьОшибкиВДеревеУпаковок = ДанныеПоШтрихкодам.ЕстьОшибкиВДеревеУпаковок;
			Результат.РезультатыОбработки.Вставить(КлючЗначение.Ключ, РезультатОбработки);
			
		КонецЕсли;
		
		Если Не ШтрихкодированиеИС.ВидыПродукцииПоддерживаются(ДанныеПоШтрихкодам.ВидыПродукции, ПараметрыСканирования) Тогда
			
			РезультатОбработки.ОшибкаВидаПродукции = Истина;
			
		КонецЕсли;
		
		Если ДанныеПоШтрихкодам.ВложенныеШтрихкоды <> Неопределено Тогда
			ДеревоУпаковок = ДанныеПоШтрихкодам.ВложенныеШтрихкоды.ДеревоУпаковок;
		КонецЕсли;
		
		ШтрихкодированиеИС.ЗакэшироватьОбработанныеШтрихкоды(ПараметрыСканирования, ДанныеШтрихкода, РезультатОбработки, ДеревоУпаковок);
		
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам.НеобработанныеШтрихкоды Цикл
		
		ДанныеШтрихкода = КлючЗначение.Значение;
		
		РезультатОбработки = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
		РезультатОбработки.АдресДанныхШтрихкода = ПоместитьВоВременноеХранилище(ДанныеШтрихкода, УникальныйИдентификатор);
		
		Результат.РезультатыОбработки.Вставить(КлючЗначение.Ключ, РезультатОбработки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования, КэшированныеЗначения)

	ДанныеПоШтрихкодам = ШтрихкодированиеИС.ДанныеПоШтрихкодам(СписокШтрихкодов, ПараметрыСканирования, КэшированныеЗначения);
	Если ДанныеПоШтрихкодам.ШтрихкодыПродукцииДляСопоставления.Количество() > 0 Тогда
		Возврат ДанныеПоШтрихкодам;
	КонецЕсли;
	
	ШтрихкодированиеИС.ВыполнитьПроверкуНаОшибкиДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования);
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Инициализирует структуру результата обработки штрихкодов.
// 
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ШтрихкодыПродукцииДляСопоставления - Массив из Строка - Штрихкоды, которым небходимо сопоставить номенклатуру.
// * РезультатыОбработки - Массив Из РезультатОбработкиШтрикхода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Функция ИнициализацияРезультатаОбработкиШтрихкодов()
	
	Результат = Новый Структура;
	Результат.Вставить("РезультатыОбработки",                Новый Соответствие);
	Результат.Вставить("ШтрихкодыПродукцииДляСопоставления", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
