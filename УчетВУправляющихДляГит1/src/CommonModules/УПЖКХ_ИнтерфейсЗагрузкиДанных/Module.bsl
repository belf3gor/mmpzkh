
///////////////////////////////////////////////////////////////////////////////
// ИНСТРУКЦИИ ПО ИСПОЛЬЗОВАНИЮ АПИ ЗАГРУЗКИ ДАННЫХ ЖКХ

///////////////////////////////////////////////////////////////////////////////
// ИНФОРМАЦИЯ ПО АПИ

#Область ИнформацияПоАПИ

// В АПИ реализованы следующие функции загрузки данных ЖКХ:
// 1. Загрузка сведений о зданиях.
// 2. Загрузка сведений о помещениях.
//
// Доступны два варианта загрузки данных ЖКХ:
// 1. Одиночная загрузка - загрузка одного объекта по структуре данных;
// 2. Табличная загрузка - загрузка списка объектов по таблице с данными.
//
// Использование одиночной загрузки данных:
//   
//   1. Получить структуру с ключами (полями) реквизитов объекта для заполнения.
//      Для этого стоит использовать функцию "ПолучитьПустуюСтруктуруДанныхПоВариантуЗагрузки()",
//      передав в нее вариант загрузки строкой. Доступные варианты загрузки можно
//      получить в функции "ПолучитьВариантыЗагрузкиДанных()", например, вариант загрузки "Здания".
//      
//      Примечание:
//      Для получения списка полей, которые можно передавать для загрузки, можно получить
//      с помощью функции "ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки, ТаблицаПолей = Неопределено)".
//      
//   2. После того, как получили структуру данных, следует заполнить ее данным программно.
//      При этом для варианта загрузки могут быть определены обязательные к заполнению поля.
//      Например, для варианта загрузки "Здания" обязательными являются поля "НомерЗдания" и "ПочтовыйАдрес".
//      
//   3. Для загрузки данных необходимо вызвать функцию одиночной загрузки:
//      
//      ВыполнитьЗагрузкуСтруктурыДанных(ВариантЗагрузки,
//                                       СтруктураДанных,
//                                       СсылкаНаСуществующий = Неопределено,
//                                       ИскатьСуществующие = Истина,
//                                       ОбновлятьСуществующие = Истина, 
//                                       СоздаватьНесопоставленные = Истина,
//                                       ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
//                                       РежимОбменаДанными = Истина) Экспорт
//      
//      На выходе функция возвращает структуру результата загрузки, содержащую следующие поля:
//        "Успех" - Булево, ИСТИНА - здание загружено, ЛОЖЬ - здание не загружено,
//        "РезультатЗагрузки" - пустая ссылка на объект, если загрузка не выполнена
//                              или ссылка на загруженный объект,
//        "РезультатЗагрузкиСтрокой" - в зависимости от результата загрузки заполняются
//                                     строковыми выражениями "Пропущен", "Обновел", "Создан".
//
// Использование табличной загрузки данных:
//   
//   1. Получить пустую таблицу данных (таблица значений) с полями (реквизитами) объекта для заполнения.
//      Для этого стоит использовать функцию "ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки()",
//      передав в нее вариант загрузки строкой. Доступные варианты загрузки можно
//      получить в функции "ПолучитьВариантыЗагрузкиДанных()", например, вариант загрузки "Здания".
//      
//      Примечание:
//      Для получения списка полей, которые можно передавать для загрузки, можно получить
//      с помощью функции "ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки, ТаблицаПолей = Неопределено)".
//      
//   2. После того, как получили пустую таблицу данных, следует заполнить ее данными программно.
//      При этом для варианта загрузки могут быть определены обязательные к заполнению поля таблицы данных.
//      Например, для варианта загрузки "Здания" обязательными являются поля "НомерЗдания" и "ПочтовыйАдрес".
//      
//   3. Для загрузки зданий необходимо вызвать функцию табличной загрузки:
//      
//      ВыполнитьЗагрузкуТаблицыДанных(ВариантЗагрузки, ТаблицаДанных,
//                                     ИскатьСуществующие = Истина,
//                                     ОбновлятьСуществующие = Истина,
//                                     СоздаватьНеСопоставленные = Истина,
//                                     ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
//                                     РежимОбменаДанными = Истина) Экспорт
//      
//      На выходе функция возвращает исходную таблицу данных, в которую для каждой строки добавляются следующие поля результата:
//        "Успех" - Булево, ИСТИНА - здание загружено, ЛОЖЬ - здание не загружено,
//        "РезультатЗагрузки" - пустая ссылка на объект, если загрузка не выполнена
//                              или ссылка на загруженный объект,
//        "РезультатЗагрузкиСтрокой" - в зависимости от результата загрузки заполняются
//                                     строковыми выражениями "Пропущен", "Обновел", "Создан".
//
// Описание дополнительных параметров загрузки:
//
//   1. "ИскатьСуществующие" - если ИСТИНА, то перед загрузкой идет поиск
//      объекта по ключевому полю, например, "Наименование" справочника.
//      Если ЛОЖЬ, то поиск существующего объекта не выполняется.
//
//   2. "ОбновлятьСуществующие" - если ИСТИНА и имеется (найдена) ссылка
//      на существующее здание, то производится обновление данных существующего объекта.
//      Если ЛОЖЬ, то обновление данных существующего объекта не производится.
//
//   3. "СоздаватьНеСопоставленные" - если ИСТИНА и нет ссылкы на существующий объект,
//      то создаем грузим текущее здание, если ЛОЖЬ - пропускаем;
//
//   4. "ИскатьСоздаватьРеквизитыСсылочногоТипа" - если ИСТИНА, то реквизиты ссылочного типа
//      загружаемого объекта ищутся и создаются по переданному значению.
//      Если ЛОЖЬ, то поиск и создание значения ссылочного реквизита не производится, а реквизит не загружается
//
//   5. "РежимОбменаДанными" - признак использования режима загрузки данных объекта.

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ АПИ

#Область ПримерыИспользованияАПИ

///////////////////////////////////////
// ОДИНОЧНАЯ ЗАГРУЗКА ЗДАНИЯ

//&НаСервере
//Процедура ЗагрузитьЗданиеПоСтруктуре()
	
	//// Получаем таблицу полей для загрузки, чтобы понять, какие сведения о здании можно передать в функцию загрузки.
	//// Информацию из таблицы полей можно либо вывести куда-то, либо посмотреть в отладке.
	//ТаблицаПолей = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки("Здания");
	
	//// Получаем структуру данных, в которую надо поместить данные для загрузки.
	//ЗданиеСтруктура = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьПустуюСтруктуруДанныхПоВариантуЗагрузки("Здания");
	
	//// Заполняем поля структуры данными для загрузки.
	//ЗданиеСтруктура.Наименование  = "ул. Структурная, д. 5";
	//ЗданиеСтруктура.ПочтовыйАдрес = "ул. Структурная, д. 5";
	//ЗданиеСтруктура.ВидСооружения = "Пентхаус";
	//ЗданиеСтруктура.НомерДома     = 5;
	//ЗданиеСтруктура.Арендовано    = 100;
	//ЗданиеСтруктура.Родитель      = "Пентхаусы";
	
	// Передаем структуру данных в функцию, которая загружает здание и возвращает результат загрузки.
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ВыполнитьЗагрузкуСтруктурыДанных("Здания", ЗданиеСтруктура);
	
	// Или можно использовать прямой вызов функции загрузки здания:
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ЗагрузитьЗдание(ЗданиеСтруктура);
	
	//// Проверяем результат загрузки, и если данные загружены,
	//// то к примеру можем загрузить лицевые счета по этому зданию, используя ссылку на загруженное здание.
	//Если РезультатЗагрузки.Успех Тогда
	//	ЗагрузитьДанныеПоЛСЭтогоЗдания(РезультатЗагрузки.РезультатЗагрузки);
	//КонецЕсли;
	
//КонецПроцедуры

///////////////////////////////////////
// ТАБЛИЧНАЯ ЗАГРУЗКА ЗДАНИЙ

//&НаСервере
//Процедура ЗагрузитьЗданияПоТаблице()
	
	//// Получаем таблицу полей для загрузки, чтобы понять, какие сведения о здании можно передать в функцию загрузки.
	//// Информацию из таблицы полей можно либо вывести куда-то, либо посмотреть в отладке.
	//ТаблицаПолей = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки("Здания");
	
	//// Получаем пустую таблицу значений данных, в которую надо поместить данные для загрузки.
	//ЗданияТаблица = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки("Здания");
	
	//// Заполняем таблицу значени данными для загрузки.
	
	//НоваяСтрока =  ЗданияТаблица.Добавить();
	//НоваяСтрока.Наименование  = "ул. Структурная, д. 5";
	//НоваяСтрока.ПочтовыйАдрес = "ул. Структурная, д. 5";
	//НоваяСтрока.ВидСооружения = "Пентхаус";
	//НоваяСтрока.НомерДома     = 5;
	//НоваяСтрока.Арендовано    = 100;
	//НоваяСтрока.Родитель      = "Пентхаусы";
	
	//НоваяСтрока =  ЗданияТаблица.Добавить();
	//НоваяСтрока.Наименование  = "ул. Структурная, д. 6";
	//НоваяСтрока.ПочтовыйАдрес = "ул. Структурная, д. 6";
	//НоваяСтрока.ВидСооружения = "Пентхаус";
	//НоваяСтрока.НомерДома     = 6;
	//НоваяСтрока.Арендовано    = 150;
	//НоваяСтрока.Родитель      = "Коттедж";
	
	//// Передаем структуру данных в функцию, которая загружает здание и возвращает результат загрузки.
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ЗагрузитьЗдания(ЗданияТаблица);
	
	//// Проверяем результат загрузки, и если данные загружены,
	//// то к примеру можем загрузить лицевые счета по этому зданию.
	// Для Каждого ТекЗдание Из РезультатЗагрузки Цикл
		//Если ТекЗдание.Успех Тогда
		//	ЗагрузитьДанныеПоЛСЭтогоЗдания(РезультатЗагрузки.РезультатЗагрузки);
		//КонецЕсли;
	//КонецЦикла;
	
//КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьПомещениеПоСтруктуре()
	
	//// Получаем таблицу полей для загрузки, чтобы понять, какие сведения о помещении можно передать в функцию загрузки.
	//// Информацию из таблицы полей можно либо вывести куда-то, либо посмотреть в отладке.
	//ТаблицаПолей = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки("Помещения");
	
	//// Получаем структуру данных, в которую надо поместить данные для загрузки.
	//ПомещениеСтруктура = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьПустуюСтруктуруДанныхПоВариантуЗагрузки("Помещения");
	
	//// Заполняем поля структуры данными для загрузки.
	//ПомещениеСтруктура.Наименование                 = "Кв. 9";
	//ПомещениеСтруктура.ВидПомещения                 = "Квартира";
	//ПомещениеСтруктура.Код                          = 9;
	//ПомещениеСтруктура.Суффикс                      = "пом";
	//ПомещениеСтруктура.СтроительныйНомер            = "12345";
	//ПомещениеСтруктура.Владелец                     = "141051, Москва г., Семкина п., Заречная ул., Дом № 6";
	//ПомещениеСтруктура.Подъезд                      = "Первый подъезд";
	//ПомещениеСтруктура.НомерБлока                   = 1;
	//ПомещениеСтруктура.КоличествоКомнат             = 5;
	//ПомещениеСтруктура.Этаж                         = 1;
	//ПомещениеСтруктура.СостояниеПомещения           = "Аренда";
	//ПомещениеСтруктура.КатегорияПомещения           = "Отдельная";
	//ПомещениеСтруктура.Характеристика               = "Характеристика помещения";
	//ПомещениеСтруктура.Описание                     = "Описание помещения";
	//ПомещениеСтруктура.Оборудование                 = "Счетчик №123";
	//ПомещениеСтруктура.КоличествоОборудования       = 2;
	//ПомещениеСтруктура.СостояниеОборудования        = "Введено в эксплуатацию";
	//ПомещениеСтруктура.ОбщаяПлощадь                 = 690;
	//ПомещениеСтруктура.ЖилаяПлощадь                 = 100;
	//ПомещениеСтруктура.ИдентификаторВГИСЖКХ         = "60АА000593-01";
	//ПомещениеСтруктура.НазначениеПомещения          = "Назначение помещения";
	//ПомещениеСтруктура.РасположениеПомещения        = "Встроенное";
	//ПомещениеСтруктура.ХарактеристикаПомещения      = "Отдельная квартира";
	//ПомещениеСтруктура.СоставляетОбщееИмуществоВМКД = Ложь;
	//ПомещениеСтруктура.КадастровыйНомер             = "2:64:013901:0142";
	//ПомещениеСтруктура.Плита                        = "Газовая";
	
	//// Передаем структуру данных в функцию, которая загружает помещение и возвращает результат загрузки.
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ВыполнитьЗагрузкуСтруктурыДанных("Помещения", ПомещениеСтруктура);
	
	//// Или можно использовать прямой вызов функции загрузки помещения:
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ЗагрузитьПомещение(ПомещениеСтруктура);
	
	//// Проверяем результат загрузки, и если данные загружены,
	//// то к примеру можем загрузить лицевые счета по этому помещению, используя ссылку на загруженное помещение.
	//Если РезультатЗагрузки.Успех Тогда
	//	ЗагрузитьДанныеПоЛСЭтогоПомещения(РезультатЗагрузки.РезультатЗагрузки);
	//КонецЕсли;
	
//КонецПроцедуры // ЗагрузитьПомещениеПоСтруктуре()

///////////////////////////////////////
// ТАБЛИЧНАЯ ЗАГРУЗКА ПОМЕЩЕНИЙ

//&НаСервере
//Процедура ЗагрузитьПомещенияПоТаблице()
	
	//// Получаем таблицу полей для загрузки, чтобы понять, какие сведения о помещении можно передать в функцию загрузки.
	//// Информацию из таблицы полей можно либо вывести куда-то, либо посмотреть в отладке.
	//ТаблицаПолей = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки("Помещения");
	
	//// Получаем пустую таблицу значений данных, в которую надо поместить данные для загрузки.
	//ПомещенияТаблица = УПЖКХ_ИнтерфейсЗагрузкиДанных.ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки("Помещения");
	
	//// Заполняем таблицу значени данными для загрузки.
	
	//НоваяСтрока =  ПомещенияТаблица.Добавить();
	//НоваяСтрока.Наименование      = "Кв. 91";
	//НоваяСтрока.ВидПомещения      = "Квартира";
	//НоваяСтрока.Код               = 91;
	//НоваяСтрока.Суффикс           = "помещ";
	//НоваяСтрока.СтроительныйНомер = "Строительный номер 7";
	//НоваяСтрока.Владелец          = "141051, Москва г., Семкина п., Заречная ул., Дом № 9";
	//НоваяСтрока.Подъезд           = "Второй подъезд";
	//
	//НоваяСтрока =  ПомещенияТаблица.Добавить();
	//НоваяСтрока.Наименование      = "Кв. 7";
	//НоваяСтрока.ВидПомещения      = "Офис";
	//НоваяСтрока.Код               = 7;
	//НоваяСтрока.Суффикс           = "пом";
	//НоваяСтрока.СтроительныйНомер = "Строительный номер 33";
	//НоваяСтрока.Владелец          = "141051, Москва г., Семкина п., Заречная ул., Дом № 9";
	//НоваяСтрока.Подъезд           = "Второй подъезд";
	
	//// Передаем структуру данных в функцию, которая загружает помещения и возвращает результат загрузки.
	//РезультатЗагрузки = УПЖКХ_ИнтерфейсЗагрузкиДанных.ЗагрузитьПомещения(ПомещенияТаблица);
	
	//// Проверяем результат загрузки, и если данные загружены,
	//// то к примеру можем загрузить лицевые счета по этому помещению.
	// Для Каждого ТекПомещение Из РезультатЗагрузки Цикл
		//Если ТекПомещение.Успех Тогда
		//	ЗагрузитьДанныеПоЛСЭтогоПомещения(РезультатЗагрузки.РезультатЗагрузки);
		//КонецЕсли;
	//КонецЦикла;
	
//КонецПроцедуры // ЗагрузитьПомещенияПоТаблице()

#КонецОбласти

#Область Инициализация

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ

// Функция возвращает таблицу значений, содержащую информацию
// о варианте загрузки и его представлении.
//
Функция ПолучитьВариантыЗагрузкиДанных() Экспорт
	
	// Варианты загрузок содержат информацию об имени и представлении, которые идентифицируют загрузку.
	ВариантыЗагрузки = Новый ТаблицаЗначений;
	ВариантыЗагрузки.Колонки.Добавить("ВариантЗагрузки");
	ВариантыЗагрузки.Колонки.Добавить("ИмяОбъектаДляСопоставления");
	ВариантыЗагрузки.Колонки.Добавить("Представление");
	
	// Загрузка зданий.
	НовыйВариант = ВариантыЗагрузки.Добавить();
	НовыйВариант.ВариантЗагрузки            = "Здания";
	НовыйВариант.ИмяОбъектаДляСопоставления = "Справочник.КВП_Здания";
	НовыйВариант.Представление              = "Здания, сооружения (пакетная загрузка)";
	
	// Загрузка помещений.
	НовыйВариант = ВариантыЗагрузки.Добавить();
	НовыйВариант.ВариантЗагрузки            = "Помещения";
	НовыйВариант.ИмяОбъектаДляСопоставления = "Справочник.УПЖКХ_Помещения";
	НовыйВариант.Представление              = "Помещения (пакетная загрузка)";
	
	Возврат ВариантыЗагрузки;
	
КонецФункции

// Функция возвращает таблицу значений с информацией по полям для варианта загрузки.
// По умолчанию таблица содержит следующую информацию о полях:
//    - имя колонки,
//    - представление,
//    - тип колонки,
//    - обязательность для заполнения.
// При необходимости в функцию можно передать готовую таблицу, в которую будет добавлена информация о полях.
//
Функция ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки, ТаблицаПолей = Неопределено) Экспорт
	
	// Заполнение таблицы полей производится по следующим правилам:
	// 1. Если таблица полей (не зависимо от того пустая она или нет) передана в функцию,
	//    то данную таблицу заполняем реквизитами в зависимости от варианта загрузки, новую таблицу не создаем.
	// 2. Если функция не получила таблицу, то создается таблица полей со стандартными реквизитами.
	//    Это реквизиты "ИмяКолонки", "ПредставлениеКолонки", "ТипКолонки", "ОбязательнаДляЗаполнения".
	//    Далее так же происходит заполнение таблицы реквизитами в зависимости от варианта загрузки.
	
	// Структура таблицы с информациой по колонкам в случае, если функция таблицу не получила.
	Если ТаблицаПолей = Неопределено Тогда
		
		ТаблицаПолей = Новый ТаблицаЗначений;
		ТаблицаПолей.Колонки.Добавить("ИмяКолонки");
		ТаблицаПолей.Колонки.Добавить("ПредставлениеКолонки");
		ТаблицаПолей.Колонки.Добавить("ТипКолонки");
		ТаблицаПолей.Колонки.Добавить("ОбязательнаДляЗаполнения");
		
	Иначе
		
		// Проверка таблицы полей на содержание обязательных колонок.
		СтруктураТаблицыПолейКорректна = Ложь;
		Если ТипЗнч(ТаблицаПолей) = Тип("ТаблицаЗначений")
		И Не ТаблицаПолей.Колонки.Найти("ИмяКолонки") = Неопределено
		И Не ТаблицаПолей.Колонки.Найти("ПредставлениеКолонки") = Неопределено
		И Не ТаблицаПолей.Колонки.Найти("ТипКолонки") = Неопределено
		И Не ТаблицаПолей.Колонки.Найти("ОбязательнаДляЗаполнения") = Неопределено Тогда
			СтруктураТаблицыПолейКорректна = Истина;
		КонецЕсли;
		
		// Если в таблице нет обязательных полей, то вызываем исключение.
		Если Не СтруктураТаблицыПолейКорректна Тогда
			ВызватьИсключение "Переданная таблица полей для загрузки данных не соответствует требованиям, подробнее в модулю АПИ!";
		КонецЕсли;
		
	КонецЕсли;
	
	// Массив полей, обязательных к заполнению.
	МассивПолейОбязательныйКЗаполнению = Новый Массив;
	
	// Массив полей определяет порядок сортировки этих полей в таблице.
	МассивПолейСортировки = Новый Массив;
	
	// Загрузка зданий.
	Если ВариантЗагрузки = "Здания" Тогда
		
		/////////////////////////////////////////////////////////////////////////////
		// 1. Добавление полей.
		
		// Заполнение таблицы с информациой по колонкам реквизитами справочника "КВП_Здание".
		ПолучитьСтандартныеПоляРеквизитовОбъекта(Метаданные.Справочники.КВП_Здания.ПолноеИмя(), ТаблицаПолей);
		
		// Почтовый адрес здания.
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "ПочтовыйАдрес");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Почтовый адрес");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Строка"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Истина);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		// Сроительный адрес здания.
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "СтроительныйАдрес");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Строительный адрес");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Строка"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		// Дополнение таблицы с информацией по колонкам типами площедей.
		Выборка = ПолучитьВыборкуТиповПлощадейЗдания();
		
		Пока Выборка.Следующий() Цикл
			
			ИнформацияОПоле = Новый Структура;
			ИнформацияОПоле.Вставить("ИмяКолонки",               Выборка.ИмяКолонки);
			ИнформацияОПоле.Вставить("ПредставлениеКолонки",     Выборка.ПредставлениеКолонки);
			ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Число"));
			ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
			ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
			ИнформацияОПоле.Вставить("Видимость",                Истина);
			ИнформацияОПоле.Вставить("Примечание",               "");
			ИнформацияОПоле.Вставить("Ширина",                   10);
			
			ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////
		// 2. Заполнение дополнительных комментариев к полям при необходимости.
		
		// Если есть поле "Примечание", дополняем примечание данного поля для реквизита "ТипСооружения".
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "ТипСооружения", "Тип сооружения, значение по умолчанию - ""Здание""");
		
		/////////////////////////////////////////////////////////////////////////////
		// 3. Установка обязательных к заполнению полей.
		
		// Дополнительная установка обязательных к заполнению полей.
		МассивПолейОбязательныйКЗаполнению.Добавить("НомерДома");
		
		
		/////////////////////////////////////////////////////////////////////////////
		// 4. Установка порядка сортировки полей.
		
		МассивПолейСортировки.Добавить("Наименование");
		МассивПолейСортировки.Добавить("НомерДома");
		МассивПолейСортировки.Добавить("ПочтовыйАдрес");
		МассивПолейСортировки.Добавить("СтроительныйАдрес");
		
	ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
		
		/////////////////////////////////////////////////////////////////////////////
		// 1. Добавление полей.
		
		// Заполнение таблицы с информациой по колонкам реквизитами справочника "УПЖКХ_Помещения".
		ПоляНеУчаствующиеВЗаполнении = ПолучитьМассивПолейНеУчаствующихВЗаполнении(ВариантЗагрузки);
		
		ПолучитьСтандартныеПоляРеквизитовОбъекта(Метаданные.Справочники.УПЖКХ_Помещения.ПолноеИмя(), ТаблицаПолей,
												 ПоляНеУчаствующиеВЗаполнении);
		
		// Дополнение таблицы с информацией по колонкам с типами площадей для заполнения РС "УПЖКХ_ПлощадьПомещения".
		Выборка = ПолучитьВыборкуВидовПлощадейПомещения();
		
		Пока Выборка.Следующий() Цикл
			
			ИмяКолонки = Выборка.ИмяКолонки;
			
			Примечание = "";
			Если ИмяКолонки = "ДополнительнаяПлощадь" Тогда
				Примечание = "Размер дополнительной площади (в квадратных метрах).";
			ИначеЕсли ИмяКолонки = "ЖилаяПлощадь" Тогда
				Примечание = "Размер жилой площади (в квадратных метрах).";
			ИначеЕсли ИмяКолонки = "Кухня" Тогда
				Примечание = "Размер площади кухни (в квадратных метрах).";
			ИначеЕсли ИмяКолонки = "Лоджия" Тогда
				Примечание = "Размер площади лоджии (в квадратных метрах).";
			ИначеЕсли ИмяКолонки = "ОбщаяПлощадь" Тогда
				Примечание = "Размер общей площади (в квадратных метрах).";
			ИначеЕсли ИмяКолонки = "ПлощадьМОПБезКухни" Тогда
				Примечание = "Размер площади МОП без кухни (в квадратных метрах).";
			КонецЕсли;
			
			Примечание = Примечание
				+ "
				|Формат заполнения: число (Длина: 10, Точность: 2).
				|Пример: ""35"", ""75,58"", ""10,00"".
				|*Период при загрузке сведений о площадях помещений, значение по умолчанию - ""Текущая дата"".";
			
			ИнформацияОПоле = Новый Структура;
			ИнформацияОПоле.Вставить("ИмяКолонки",               ИмяКолонки);
			ИнформацияОПоле.Вставить("ПредставлениеКолонки",     Выборка.ПредставлениеКолонки);
			ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Число"));
			ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
			ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
			ИнформацияОПоле.Вставить("Видимость",                Истина);
			ИнформацияОПоле.Вставить("Ширина",                   10);
			ИнформацияОПоле.Вставить("Примечание",               Примечание);
			
			ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
			
		КонецЦикла;
		
		// Дополнение таблицы с информацией по колонкам с видами благоустройства для заполнения РС "КВП_БлагоустройствоОбъектов".
		Выборка = ПолучитьВыборкуВидовБлагоустройств();
		
		СоставнойТип = Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВидыСанУзла,
										   |ПеречислениеСсылка.КВП_Канализация,
										   |ПеречислениеСсылка.УПЖКХ_ТипыГорячегоВодоснабжения,
										   |ПеречислениеСсылка.КВП_Плита,
										   |ПеречислениеСсылка.УПЖКХ_ТипЗапирающегоУстройства,
										   |ПеречислениеСсылка.УПЖКХ_ТипыХолодногоВодоснабжения,
										   |Строка,
										   |Дата,
										   |Булево,
										   |Число");
		
		Пока Выборка.Следующий() Цикл
			
			ИмяКолонки = Выборка.ИмяКолонки;
			
			Примечание = "Значение объекта благоустройства.";
			Если ИмяКолонки = "ГорячееВодоснабжение" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Типы горячего водоснабжения: ""Централизованное"", ""Водонагреватель"", ""Отсутствует"".";
			ИначеЕсли ИмяКолонки = "Канализация" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Виды канализации: ""Центральная"".";
			ИначеЕсли ИмяКолонки = "Плита" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Виды плиты: ""Электрическая"", ""Газовая"".";
			ИначеЕсли ИмяКолонки = "Санузел" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Виды санузла: ""Совмещенный"", ""Раздельный"".";
			ИначеЕсли ИмяКолонки = "ТипЗапирающегоУстройства" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Типы запирающего устройства: ""Отсутствует"", ""Механическое"", ""Электронное"" ,""Домофон"".";
			ИначеЕсли ИмяКолонки = "ХолодноеВодоснабжение" Тогда
				Примечание = Примечание
					+ "
					|
					|Доступные варианты:
					|Типы холодного водоснабжения: ""Водоразбор из уличных колонок"", ""Централизованное"", ""Отсутствует"".";
			КонецЕсли;
			
			Примечание = Примечание
				+ "
				|*Также доступны следующие варианты заполнения:
				|1. Произвольное значение объекта благоустройства.
				|Пример: ""Произвольное значение объекта благоустройства"".
				|2. Дата объекта благоустройства.
				|Формат заполнения: ""ДД.ММ.ГГГГ"", ""ДД/ММ/ГГ"", ""ДД-ММ-ГГ"".
				|
				|Пример: ""14.03.2019"", ""13.08.1997"", ""23/02/80"".
				|3. Признак объекта благоустроства.
				|Пример: ""Истина"", ""Ложь"".
				|4. Число объекта благоустроства.
				|Пример: ""1"", ""9"".";
			
			ИнформацияОПоле = Новый Структура;
			ИнформацияОПоле.Вставить("ИмяКолонки",               Выборка.ИмяКолонки);
			ИнформацияОПоле.Вставить("ПредставлениеКолонки",     Выборка.ПредставлениеКолонки);
			ИнформацияОПоле.Вставить("ТипКолонки",               СоставнойТип);
			ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
			ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
			ИнформацияОПоле.Вставить("Видимость",                Истина);
			ИнформацияОПоле.Вставить("Примечание",               Примечание);
			ИнформацияОПоле.Вставить("Ширина",                   10);
			
			ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
			
		КонецЦикла;
		
		// Дополнение таблицы с информацией по дате загружаемых объектов.
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "ДатаЗагрузки");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Дата загрузки");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Строка"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Дата, по состоянию на которую будут загружены сведения о: площадях помещений, состояниях помещений,
															|взаимосвязях оборудований и объектах учета, сведениях об оборудовании, благоустройствах объектов.
															|Формат заполнения: ""ДД.ММ.ГГГГ"", ""ДД/ММ/ГГ"", ""ДД-ММ-ГГ"".
															|
															|Пример: ""14.03.2019"", ""13.08.1997"", ""23/02/80"".
															|
															|*Если данное поле пустое, то сведения будут загружены на текущую дату.");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		// Дополнение таблицы с информацией о состоянии помещения, РС "КВП_СостояниеПомещения".
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "СостояниеПомещения");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Состояние помещения");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("ПеречислениеСсылка.КВП_СостоянияПомещения"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Состояние помещения.
															|
															|Доступные варианты: ""Свободна"", ""Наем"", ""Аренда"", ""Бронирована"", ""Не используется"", ""В собственности"",
															|""Принята по акту"", ""Инвест. договор"", ""Не реализована"", ""Получены ключи"", ""Частично свободна"",
															|""Заселена"", ""Наем коммерческий"", ""Субаренда"", ""В безвозмездной собственности"".
															|
															|*Иные варианты, отличные от доступных, при загрузке игнорируются.");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		// Дополнение таблицы с информацией о категории помещения, РС "КВП_СостояниеПомещения".
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "КатегорияПомещения");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Категория помещения");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("ПеречислениеСсылка.КВП_КатегорииКвартир"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Категория помещения.
															|
															|Доступные варианты: ""Гостиничного типа"", ""Коммунальная"", ""Нежилое помещение"", ""Нереализованная"",
															|""Общежитие"", ""Общежитие коридорного типа"", ""Отдельная"", ""Разделенные лицевые счета"".
															|
															|*Иные варианты, отличные от доступных, при загрузке игнорируются.");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		// Дополнение таблицы с информацией об установленном оборудовании в помещении, РС "УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета"
		// и РС "УПЖКХ_СведенияОбОборудовании".
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "Оборудование");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Оборудование");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_ПрочиеОбъектыУчета"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Объект учета/оборудование из справочника ""Прочие объекты учета, оборудование"".
															|
															|Пример: ""Котельная"".
															|
															|*Если в справочнике ""Прочие объекты учета, оборудование""
															|отсутствует оборудование с указанным наименованием,
															|то автоматически будет создано новое оборудование по переданному наименованию.");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "КоличествоОборудования");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Количество оборудования");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Число"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Количество единиц оборудования, указанного в поле ""Оборудование"".
															 |
															 |Пример: ""11"", ""3"".");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               "СостояниеОборудования");
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Состояние оборудования");
		ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_СостоянияОборудования"));
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", Ложь);
		ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
		ИнформацияОПоле.Вставить("Видимость",                Истина);
		ИнформацияОПоле.Вставить("Примечание",               "Состояние оборудования, указанного в поле ""Оборудование"".
															 |
															 |Доступные варианты: ""Введено в эксплуатацию"", ""Снято с эксплуатации"".
															 |
															 |*Иные варианты, отличные от доступных, при загрузке игнорируются.");
		ИнформацияОПоле.Вставить("Ширина",                   10);
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
		/////////////////////////////////////////////////////////////////////////////
		// 2. Заполнение дополнительных комментариев к полям при необходимости.
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Владелец",
								"Наименование здания из справочника ""Здания"", к которому относится помещение.
								|
								|Пример: ""РОССИЯ, 113205, Москва г, Вавилова ул., Дом № 67"";
								|""Москва г, Восточный п., Западная ул., дом № 2, корпус а"".
								|
								|*Если в справочнике ""Здания"" отсутствует здание с указанным наименованием,
								|то автоматически будет создано новое здание по переданному наименованию.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Наименование",
								"Наименование помещения.
								|
								|Пример: ""Квартира 1"", ""Офис 3"".
								|
								|*Максимальная длина строки 100 символов.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Код",
								"Номер помещения.
								|
								|Пример: ""1"", ""3"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "ВидПомещения",
								"Вид помещения в здании из справочника ""Виды помещений"".
								|
								|Пример: ""Квартира"", ""Комната"", ""Автоместо"".
								|
								|*Если в справочнике ""Виды помещений"" отсутствует вид помещения с указанным наименованием,
								|то автоматически будет создан новый вид помещения по переданному наименованию.
								|При этом, для корректного отображения нового элемена в форме выбора, необходимо вручную заполнить реквизиты ""Наименование краткое"" и ""Тип помещения"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "КоличествоКомнат",
								"Количество комнат.
								|
								|Пример: ""2"", ""5"".");
			
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Этаж",
								"Этаж, на котором находится помещение.
								|
								|Пример: ""9"", ""5"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Характеристика",
								"Характеристика помещения.
								|
								|Пример: ""Характеристика помещения"".
								|
								|*Максимальная длина строки 50 символов.");
			
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Суффикс",
								"Суффикс, будет добавлен к номеру помещения.
								|
								|Пример: ""А"", ""1"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Описание",
								"Описание помещения.
								|
								|Пример: ""Данное помещение необходимо для хранения инструментов"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "Подъезд",
								"Подъезд, в котором находится помещение из справочника ""Подъезды"".
								|
								|*Если в справочнике ""Подъезды"" отсутствует подъезд с указанным наименованием,
								|то автоматически будет создан новый подъезд по переданному наименованию.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "СтроительныйНомер",
								"Строительный номер помещения.
								|
								|Пример: ""5"", ""9"".
								|
								|*Максимальная длина строки 30 символов.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "НазначениеПомещения",
								"Назначение помещения из справочника ""Назначения помещений"".
								|
								|Пример: ""Аптека"", ""Ресторан"", ""Столовая"".
								|
								|*Если в справочнике ""Назначения помещений""
								|отсутствует назначение помещения с указанным наименованием,
								|то автоматически будет создано новое назначение помещения по переданному наименованию.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "КадастровыйНомер",
								"Кадастровый номер помещения.
								|
								|Пример: ""22:64:013901:0142"", ""22:64:013901:142"".
								|
								|*Максимальная длина строки 100 символов.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "РасположениеПомещения",
								"Расположение помещения в здании.
								|
								|Доступные варианты: ""Встроенное"", ""Пристроенное"", ""Встроенно-пристроенное"".
								|
								|*Иные варианты, отличные от доступных, при загрузке игнорируются.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "СоставляетОбщееИмуществоВМКД",
								"Признак того, что нежилое помещение входит в состав общего имущества многоквартирного дома.
								|
								|Пример: ""Истина"", ""Ложь"".");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "ХарактеристикаПомещения",
								"Характеристика (особенность) помещения.
								|
								|Доступные варианты: ""Отдельная квартира"", ""Квартира коммунального заселения"", ""Общежитие"".
								|
								|*Иные варианты, отличные от доступных, при загрузке игнорируются.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "ИдентификаторВГИСЖКХ",
								"Идентификатор помещения в ГИС ЖКХ.
								|
								|Пример: ""60АА000593-01"".
								|
								|*Максимальная длина строки 30 символов.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "НомерБлока",
								"Номер блока, заполняется только для жилых домов блокированной застройки.
								|
								|Пример: ""35"".
								|
								|*Максимальная длина строки 20 символов.");
		
		ЗаполнитьКомментарийКПолю(ТаблицаПолей, "ПроектПомещения",
								"Проект помещения из справочника ""Проекты помещений"".
								|
								|Пример: ""Проект помещения 1"", ""Проект помещения 9"".
								|
								|Если в справочнике ""Проекты помещений""
								|отсутствует проект помещения с указанным наименованием,
								|то автоматически будет создан новый проект помещения по переданному наименованию.");
		
		/////////////////////////////////////////////////////////////////////////////
		// 3. Установка обязательных к заполнению полей.
		
		// Дополнительная установка обязательных к заполнению полей.
		МассивПолейОбязательныйКЗаполнению.Добавить("Наименование");
		МассивПолейОбязательныйКЗаполнению.Добавить("Владелец");
		МассивПолейОбязательныйКЗаполнению.Добавить("Код");
		МассивПолейОбязательныйКЗаполнению.Добавить("ВидПомещения");
		
		/////////////////////////////////////////////////////////////////////////////
		// 4. Установка порядка сортировки полей.
		
		МассивПолейСортировки.Добавить("Владелец");
		МассивПолейСортировки.Добавить("Наименование");
		МассивПолейСортировки.Добавить("Код");
		МассивПолейСортировки.Добавить("ВидПомещения");
		
		// 5. Удаление строк с реквизитами, которые не нужно заполнять.
		СтрокаВидПомещенияПредыдущий = ТаблицаПолей.Найти("ВидПомещенияПредыдущий");
		Если Не СтрокаВидПомещенияПредыдущий = Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаВидПомещенияПредыдущий);
		КонецЕсли;
		
		СтрокаГруппа = ТаблицаПолей.Найти("Группа");
		Если Не СтрокаГруппа = Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаГруппа);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка обязательности заполнения полей.
	УстановитьОбязательностьЗаполенияПолей(ТаблицаПолей, МассивПолейОбязательныйКЗаполнению);
	
	// Дополнительная сортировка полей в таблице, если требуется.
	ВыполнитьСортировкуТаблицыПолейЗагружаемыхДанных(ТаблицаПолей, МассивПолейСортировки);
	
	Возврат ТаблицаПолей;
	
КонецФункции

// Возвращает пустую таблицу для заполнения данными по варианту загрузки.
//
Функция ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки(ВариантЗагрузки) Экспорт
	
	ПустаяТаблицаДанных = Новый ТаблицаЗначений;
	
	// Получим структуру полей данных по варианту загрузки.
	ТаблицаПолейЗагружкаемыхДанных = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	// Проверка наличия данных о ширине полей.
	ЕстьШиринаКолонок = Не (ТаблицаПолейЗагружкаемыхДанных.Найти("Ширина") = Неопределено);
	
	Для Каждого ТекПоле Из ТаблицаПолейЗагружкаемыхДанных Цикл
		
		// К исходному типу поля добавим строковый тип, чтобы в таблицу данных для загрузки
		// можно было передать строковое значение ссылочного типа, которое при загрузке
		// будет сопоставлено со ссылочным значением.
		СтрокаДобавляемыхТипов = "";
		
		ТипДанных = ТекПоле.ТипКолонки.Типы()[0];
		Если ТипДанных <> Тип("Строка")
		   И ТипДанных <> Тип("Булево")
		   И ТипДанных <> Тип("Число")
		   И ТипДанных <> Тип("Дата")
		   И ТипДанных <> Тип("УникальныйИдентификатор") Тогда
			
			СтрокаДобавляемыхТипов = "Строка";
			
		КонецЕсли;
		
		// Определение ширины колонки.
		ШиринаКолонки = 0;
		Если ЕстьШиринаКолонок Тогда
			ШиринаКолонки = ТекПоле.Ширина;
		КонецЕсли;
		
		ПустаяТаблицаДанных.Колонки.Добавить(ТекПоле.ИмяКолонки, Новый ОписаниеТипов(ТекПоле.ТипКолонки, СтрокаДобавляемыхТипов), ТекПоле.ПредставлениеКолонки, ШиринаКолонки);
		
	КонецЦикла;
	
	Возврат ПустаяТаблицаДанных;
	
КонецФункции

// Возвращает пустую структуру для заполнения данными по варианту загрузки.
//
Функция ПолучитьПустуюСтруктуруДанныхПоВариантуЗагрузки(ВариантЗагрузки) Экспорт
	
	ПустаяСтруктураДанных = Новый Структура;
	
	ТаблицаПолей = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	Для Каждого ТекСтр Из ТаблицаПолей Цикл
		ПустаяСтруктураДанных.Вставить(ТекСтр.ИмяКолонки);
	КонецЦикла;
	
	Возврат ПустаяСтруктураДанных;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ

// Заполняет новую строчку таблицы значений "ТаблицаПолей" данными,
// переданными в процедуру в виде структуры.
//
Процедура ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле)
	
	ЗаполнитьЗначенияСвойств(ТаблицаПолей.Добавить(), ИнформацияОПоле);
	
КонецПроцедуры

// Формирует макет табличного документа на основание реквизитов справочника для универсальной загрузки.
//
Процедура ПолучитьСтандартныеПоляРеквизитовОбъекта(ПолноеИмяОбъекта, ТаблицаПолей, ПоляНеУчаствующиеВЗаполнении = Неопределено)
	
	ТекстПримечания = "";
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	МетаданныеСправочника = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	
	Если НЕ МетаданныеСправочника.Автонумерация И МетаданныеСправочника.ДлинаКода > 0  Тогда
		СоздатьКолонкуСтандартногоРеквизита(ТаблицаПолей, МетаданныеСправочника, "Код");
	КонецЕсли;
	
	Если МетаданныеСправочника.ДлинаНаименования > 0 Тогда
		СоздатьКолонкуСтандартногоРеквизита(ТаблицаПолей, МетаданныеСправочника, "Наименование");
	КонецЕсли;
	
	Если МетаданныеСправочника.Иерархический Тогда
		СоздатьКолонкуСтандартногоРеквизита(ТаблицаПолей, МетаданныеСправочника, "Родитель");
	КонецЕсли;
	
	Если МетаданныеСправочника.Владельцы.Количество() > 0 Тогда
		СоздатьКолонкуСтандартногоРеквизита(ТаблицаПолей, МетаданныеСправочника, "Владелец");
	КонецЕсли;
	
	Для каждого Реквизит Из МетаданныеСправочника.Реквизиты Цикл
		
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		// Колонки, входящие в условие пропускаем, сведения по ним в дальнейшем не заполняем.
		Если Не ПоляНеУчаствующиеВЗаполнении = Неопределено И ПоляНеУчаствующиеВЗаполнении.Количество() > 0 Тогда
			Если Не ПоляНеУчаствующиеВЗаполнении.Найти(Реквизит.Имя) = Неопределено Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		ОбязательноеПоле = ?(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
		
		ИнформацияОПоле = Новый Структура;
		ИнформацияОПоле.Вставить("ИмяКолонки",               Реквизит.Имя);
		ИнформацияОПоле.Вставить("ПредставлениеКолонки",     Реквизит.Представление());
		ИнформацияОПоле.Вставить("ТипКолонки",               Реквизит.Тип);
		ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", ОбязательноеПоле);
		
		// Позиция
		ИнформацияОПоле.Вставить("Позиция", ТаблицаПолей.Количество() + 1);
		
		// Видимость
		ИнформацияОПоле.Вставить("Видимость", Истина);
		
		// Примечание
		Если Не ТаблицаПолей.Колонки.Найти("Примечание") = Неопределено Тогда
			
			ОписаниеТипаКолонки = "";
			
			Если Реквизит.Тип.СодержитТип(Тип("Булево")) Тогда 
				ОписаниеТипаКолонки = НСтр("ru = 'Флаг, Да или 1 / Нет или 0'");
			ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Число")) Тогда 
				ОписаниеТипаКолонки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Число, Длина: %1, Точность: %2'"),
				Строка(Реквизит.Тип.КвалификаторыЧисла.Разрядность),
				Строка(Реквизит.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти));
			ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Строка")) Тогда
				Если Реквизит.Тип.КвалификаторыСтроки.Длина > 0 Тогда
					ДлинаСтроки = Строка(Реквизит.Тип.КвалификаторыСтроки.Длина);
					ОписаниеТипаКолонки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка, макс. количество символов: %1'"), ДлинаСтроки);
				Иначе
					ОписаниеТипаКолонки = НСтр("ru = 'Строка неограниченной длины'");
				КонецЕсли;
			ИначеЕсли Реквизит.Тип.СодержитТип(Тип("Дата")) Тогда
				ОписаниеТипаКолонки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1'"),Строка(Реквизит.Тип.КвалификаторыДаты.ЧастиДаты));
			ИначеЕсли Реквизит.Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
				ОписаниеТипаКолонки = НСтр("ru = 'УникальныйИдентификатор'");
			КонецЕсли;
			
			Подсказка = ?(ЗначениеЗаполнено(Реквизит.Подсказка), Реквизит.Подсказка, Реквизит.Представление()) +  Символы.ПС + ОписаниеТипаКолонки;
			
			ИнформацияОПоле.Вставить("Примечание", ТекстПримечания);
			
		КонецЕсли;
		
		// Ширина
		Если Не ТаблицаПолей.Колонки.Найти("Ширина") = Неопределено Тогда
			ШиринаКолонки = ШиринаКолонкиПоТипуЗначения(Реквизит.Тип);
			ИнформацияОПоле.Вставить("Ширина", ШиринаКолонки);
		КонецЕсли;
		
		ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает ширину колонки в зависимости от его типа.
//
Функция ШиринаКолонкиПоТипуЗначения(Тип)
	
	ШиринаКолонки = 20;
	Если Тип.СодержитТип(Тип("Булево")) Тогда 
		ШиринаКолонки = 3;
	ИначеЕсли Тип.СодержитТип(Тип("Число")) Тогда 
		ШиринаКолонки = Тип.КвалификаторыЧисла.Разрядность + 1;
	ИначеЕсли Тип.СодержитТип(Тип("Строка")) Тогда 
		Если Тип.КвалификаторыСтроки.Длина > 0 Тогда 
			ШиринаКолонки = ?(Тип.КвалификаторыСтроки.Длина > 20, 20, Тип.КвалификаторыСтроки.Длина);
		Иначе
			ШиринаКолонки = 20;
		КонецЕсли;
	ИначеЕсли Тип.СодержитТип(Тип("Дата")) Тогда 
		ШиринаКолонки = 12;
	ИначеЕсли Тип.СодержитТип(Тип("УникальныйИдентификатор")) Тогда 
		ШиринаКолонки = 20;
	Иначе
		Для каждого ТипОбъекта Из  Тип.Типы() Цикл
			МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта(МетаданныеОбъекта.ПолноеИмя());
			Если СтруктураОбъекта.ТипОбъекта = "Справочник" Тогда 
				Если НЕ МетаданныеОбъекта.Автонумерация И МетаданныеОбъекта.ДлинаКода > 0  Тогда
					ШиринаКолонки = МетаданныеОбъекта.ДлинаКода + 1;
				КонецЕсли;
				Если МетаданныеОбъекта.ДлинаНаименования > 0  Тогда
					Если МетаданныеОбъекта.ДлинаНаименования > ШиринаКолонки Тогда
						ШиринаКолонки = ?(МетаданныеОбъекта.ДлинаНаименования > 30, 30, МетаданныеОбъекта.ДлинаНаименования + 1);
					КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтруктураОбъекта.ТипОбъекта = "Перечисление" Тогда
				ДлинаПредставления =  СтрДлина(МетаданныеОбъекта.Представление());
				ШиринаКолонки = ?( ДлинаПредставления > 30, 30, ДлинаПредставления + 1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШиринаКолонки;
	
КонецФункции

// Добавление информации о колонке для стандартного реквизита при универсальной загрузке.
//
Процедура СоздатьКолонкуСтандартногоРеквизита(ТаблицаПолей, МетаданныеСправочника, ИмяКолонки)
	
	Реквизит      = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки];
	Представление = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Представление();
	ТипДанных     = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы()[0];
	ОписаниеТипа  = МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип;
	
	ШиринаКолонки = 11;
	
	Если ТипДанных = Тип("Строка") Тогда 
		ПредставлениеТипа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строка (не более %1 символов)"), ОписаниеТипа.КвалификаторыСтроки.Длина);
		ШиринаКолонки = ?(ОписаниеТипа.КвалификаторыСтроки.Длина < 30, ОписаниеТипа.КвалификаторыСтроки.Длина + 1, 30);
	ИначеЕсли ТипДанных = Тип("Число") Тогда
		ПредставлениеТипа = НСтр("ru = 'Число'");
	Иначе
		Если МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы().Количество() = 1 Тогда 
			ПредставлениеТипа = Строка(ТипДанных); 
		Иначе
			ПредставлениеТипа = "";
			Разделитель = "";
			Для каждого ТипДанные Из МетаданныеСправочника.СтандартныеРеквизиты[ИмяКолонки].Тип.Типы() Цикл 
				ПредставлениеТипа = ПредставлениеТипа  + Разделитель + Строка(ТипДанные);
				Разделитель = " или ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПримечания = Реквизит.Подсказка + Символы.ПС + ПредставлениеТипа;
	
	ОбязательнаДляЗаполнения = ?(Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку, Истина, Ложь);
	
	ИнформацияОПоле = Новый Структура;
	ИнформацияОПоле.Вставить("ИмяКолонки",               ИмяКолонки);
	ИнформацияОПоле.Вставить("ПредставлениеКолонки",     Представление);
	ИнформацияОПоле.Вставить("ТипКолонки",               ОписаниеТипа);
	ИнформацияОПоле.Вставить("ОбязательнаДляЗаполнения", ОбязательнаДляЗаполнения);
	ИнформацияОПоле.Вставить("Позиция",                  ТаблицаПолей.Количество() + 1);
	ИнформацияОПоле.Вставить("Видимость",                Истина);
	ИнформацияОПоле.Вставить("Примечание",               ТекстПримечания);
	ИнформацияОПоле.Вставить("Ширина",                   ШиринаКолонки);
	
	ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ИнформацияОПоле);
	
КонецПроцедуры

// Процедура заполняет комментарий к полю в колонке "Комментарий" таблицы полей.
//
Процедура ЗаполнитьКомментарийКПолю(ТаблицаПолей, ИмяПоля, Комментарий, ДополнитьКСуществующемуКомментарию = Ложь)
	
	// Заполнение комментария можем производить, если в таблице есть колонка "Комментарий".
	Если Не ТаблицаПолей.Колонки.Найти("Примечание") = Неопределено Тогда
		СтрокаПоля = ТаблицаПолей.Найти(ИмяПоля);
		Если Не СтрокаПоля = Неопределено Тогда
			СтрокаПоля.Примечание = ?(ДополнитьКСуществующемуКомментарию, СтрокаПоля.Примечание + Символы.ПС, "") + Комментарий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает строку из таблицы полей
// и устанавливает свойство "ОбязательнаДляЗаполнения" в положение "Истина".
Процедура УстановитьОбязательностьЗаполенияПолей(ТаблицаПолей, ОбязательныеКЗаполнениюПоля)
	
	// Ищем поля в таблицей полей и устанавливаем для них признак обязательности заполнения.
	Для Каждого ИмяОбязательногоПоля Из ОбязательныеКЗаполнениюПоля Цикл
		
		СтрокаПоля = ТаблицаПолей.Найти(ИмяОбязательногоПоля, "ИмяКолонки");
		Если Не СтрокаПоля = Неопределено Тогда
			СтрокаПоля.ОбязательнаДляЗаполнения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура сортирует таблицу полей так, что список ключевых полей вставляет первыми в списке таблицы.
//
Процедура ВыполнитьСортировкуТаблицыПолейЗагружаемыхДанных(ТаблицаПолей, МассивПолейСортировки)
	
	Если МассивПолейСортировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПолейНовая = ТаблицаПолей.СкопироватьКолонки();
	
	ТекущийИндекс = 1;
	
	Для Каждого ТекКлючевоеПоле Из МассивПолейСортировки Цикл
		
		СтрокаТаблицыПолейСКлючевымПолем = ТаблицаПолей.Найти(ТекКлючевоеПоле, "ИмяКолонки");
		
		НоваяСтрока = ТаблицаПолейНовая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыПолейСКлючевымПолем);
		
		Если Не ТаблицаПолей.Колонки.Найти("Позиция") = Неопределено Тогда
			НоваяСтрока.Позиция = ТекущийИндекс;
			ТекущийИндекс = ТекущийИндекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаПолей Цикл
		
		Если МассивПолейСортировки.Найти(ТекСтрока.ИмяКолонки) = Неопределено Тогда
			
			НоваяСтрока = ТаблицаПолейНовая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если Не ТаблицаПолей.Колонки.Найти("Позиция") = Неопределено Тогда
				НоваяСтрока.Позиция = ТекущийИндекс;
				ТекущийИндекс = ТекущийИндекс + 1;
			КонецЕсли;;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Переопределение таблицы.
	ТаблицаПолей = ТаблицаПолейНовая;
	
КонецПроцедуры

// Формирует массив полей, которые будут игнорироваться при формировании стандартных полей реквизитов объекта.
//
Функция ПолучитьМассивПолейНеУчаствующихВЗаполнении(ВариантЗагрузки)
	
	ПоляНеУчаствующиеВЗаполнении = Новый Массив;
	
	Если ВариантЗагрузки = "Помещения" Тогда
		
		ПоляНеУчаствующиеВЗаполнении.Добавить("ЕстьБалкон");
		ПоляНеУчаствующиеВЗаполнении.Добавить("ПлощадьБалкона");
		ПоляНеУчаствующиеВЗаполнении.Добавить("ЕстьЛоджия");
		ПоляНеУчаствующиеВЗаполнении.Добавить("ПлощадьЛоджии");
		ПоляНеУчаствующиеВЗаполнении.Добавить("Планировка");
		ПоляНеУчаствующиеВЗаполнении.Добавить("Вход");
		
	//ИначеЕсли ВариантЗагрузки = "ИмяВарианта" Тогда
	//
	//
	КонецЕсли;
	
	Возврат ПоляНеУчаствующиеВЗаполнении;
	
КонецФункции // ПолучитьМассивПолейНеУчаствующихВЗаполнении()

#КонецОбласти

#Область ЗагрузкаДанных

// Функция производит загрузку данных, переданных в таблице из внешнего управления.
// Возвращает переданные данные с дополнительными полями об успешности загрузки.
//
Функция ВыполнитьЗагрузкуТаблицыДанных(ВариантЗагрузки, ТаблицаДанных,
									   ИскатьСуществующие = Истина,
									   ОбновлятьСуществующие = Истина,
									   СоздаватьНеСопоставленные = Истина,
									   ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
									   РежимОбменаДанными = Истина) Экспорт
	
	// Проверка таблицы данных на соответствие минимальным требованиям.
	Если Не ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Или ТаблицаДанных.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Загрузка не выполнена: неверный формат источника данных или данные не переданы!");
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	// Загрузка зданий.
	Если ВариантЗагрузки = "Здания" Тогда
		
		Возврат ЗагрузитьЗдания(ТаблицаДанных, ИскатьСуществующие, ОбновлятьСуществующие, СоздаватьНеСопоставленные, ИскатьСоздаватьРеквизитыСсылочногоТипа, РежимОбменаДанными);
		
	ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
		
		Возврат ЗагрузитьПомещения(ТаблицаДанных, ИскатьСуществующие, ОбновлятьСуществующие, СоздаватьНеСопоставленные, ИскатьСоздаватьРеквизитыСсылочногоТипа, РежимОбменаДанными);
	//ИначеЕсли ВариантЗагрузки = "ИмяВарианта" Тогда
	//
	//
	КонецЕсли;
	
КонецФункции

// Функция производит загрузку данных, переданных в структуре из внешнего управления.
// Возвращает результаты загрузки.
//
Функция ВыполнитьЗагрузкуСтруктурыДанных(ВариантЗагрузки,
										 СтруктураДанных,
										 СсылкаНаСуществующий = Неопределено,
										 ИскатьСуществующие = Истина,
										 ОбновлятьСуществующие = Истина, 
										 СоздаватьНесопоставленные = Истина,
										 ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
										 РежимОбменаДанными = Истина) Экспорт
	
	// Проверка таблицы данных на соответствие минимальным требованиям.
	Если Не ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Загрузка не выполнена: неверный формат источника данных или данные не переданы!");
		Возврат СтруктураДанных;
	КонецЕсли;
	
	// Загрузка зданий.
	Если ВариантЗагрузки = "Здания" Тогда
		
		Возврат ЗагрузитьЗдание(СтруктураДанных, СсылкаНаСуществующий,
								ИскатьСуществующие, ОбновлятьСуществующие,
								СоздаватьНесопоставленные,
								ИскатьСоздаватьРеквизитыСсылочногоТипа,
								РежимОбменаДанными);
	
	ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
		
		Возврат ЗагрузитьПомещение(СтруктураДанных, СсылкаНаСуществующий,
									ИскатьСуществующие, ОбновлятьСуществующие,
									СоздаватьНесопоставленные,
									ИскатьСоздаватьРеквизитыСсылочногоТипа,
									РежимОбменаДанными);
	//ИначеЕсли ВариантЗагрузки = "ИмяВарианта" Тогда
	//
	//
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЗданий

///////////////////////////////////////////////////////////////////////////////
//  Особенности загрузки зданий:
//
//  1. Если поле "Наименование" здания не передано, то в качестве наименования
//  здания используется переданное значение поля "ПочтовыйАдрес".
//
//  2. Если данные поля "ВидСооружение" не переданные, то по умолчанию данное поле
//  принимает значение "Здание" справоничка "КВП_ВидыЗданийСооружений".
//

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ

// Функция загружает данные о зданиях, если соответствующие данные
// содержаться в таблице значений переданных для загрузки.
// Возвращает результаты загрузки в таблице с данными
// в допольнительных колонках "РезультатСопоставленияСтроки",
// "РезультатСопоставленияСтроки".
//
Функция ЗагрузитьЗдания(ТаблицаДанных,
						ИскатьСуществующие = Истина,
						ОбновлятьСуществующие = Истина,
						СоздаватьНеСопоставленные = Истина,
						ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
						РежимОбменаДанными = Истина) Экспорт
	
	// Актуализация данных ссылочного типа для таблицы значений.
	Если ИскатьСоздаватьРеквизитыСсылочногоТипа Тогда
		
		ТаблицаДанных = НайтиИСоздатьСвойстваСсылочногоТипаВТаблицеДанных("Здания", ТаблицаДанных);
		
		// Отключим необходимость сопоставления ссылочных данных, так как сопоставление выполнено,
		// чтобы далее при загрузке каждого здания сопоставление уже не выполнялось.
		ИскатьСоздаватьРеквизитыСсылочногоТипа = Ложь;
		
	КонецЕсли;
	
	// Добавляем колонки для результатов загрузки, если они отсутствуют.
	Если ТаблицаДанных.Колонки.Найти("Успех") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("Успех");
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("РезультатЗагрузки") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("РезультатЗагрузки");
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("РезультатЗагрузкиСтрокой") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("РезультатЗагрузкиСтрокой");
	КонецЕсли;
	
	ЕстьКолонкаРезультатСопоставленияСтроки = Не (ТаблицаДанных.Колонки.Найти("РезультатСопоставленияСтроки") = Неопределено);
	
	Для Каждого СтрокаДанныхДляЗагрузки Из ТаблицаДанных Цикл
		
		СсылкаНаСуществующий = Неопределено;
		Если Не ТаблицаДанных.Колонки.Найти("ОбъектСопоставления") = Неопределено Тогда
			СсылкаНаСуществующий = СтрокаДанныхДляЗагрузки.ОбъектСопоставления;
		КонецЕсли;
		
		// Используем процедуру одиночной загрузки.
		РезультатЗагрузки = ЗагрузитьЗдание(СтрокаДанныхДляЗагрузки,
											СсылкаНаСуществующий,
											ИскатьСуществующие,
											ОбновлятьСуществующие,
											СоздаватьНеСопоставленные,
											ИскатьСоздаватьРеквизитыСсылочногоТипа,
											РежимОбменаДанными);
		
		СтрокаДанныхДляЗагрузки.Успех                        = РезультатЗагрузки.Успех;
		СтрокаДанныхДляЗагрузки.РезультатЗагрузки            = РезультатЗагрузки.РезультатЗагрузки;
		СтрокаДанныхДляЗагрузки.РезультатЗагрузкиСтрокой     = РезультатЗагрузки.РезультатЗагрузкиСтрокой;
		
		// Специально для стандартной обработки загрузки данных помещаем результат загрузки строкой в отдельное поле.
		Если ЕстьКолонкаРезультатСопоставленияСтроки Тогда
			СтрокаДанныхДляЗагрузки.РезультатСопоставленияСтроки = РезультатЗагрузки.РезультатЗагрузкиСтрокой;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Процедура выполняет загрузку здания по переданным сведениям и параметрам загрузки.
//
Функция ЗагрузитьЗдание(ДанныеПоЗданию,
						СсылкаНаСуществующий = Неопределено,
						ИскатьСуществующие = Истина,
						ОбновлятьСуществующие = Истина, 
						СоздаватьНеСопоставленные = Истина,
						ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
						РежимОбменаДанными = Истина) Экспорт
	
	// Параметры загрузки:
	// - ОбновлятьСуществующие
	// - СоздаватьНесопоставленные
	// - РежимОбменаДанными
	
	// Шаги загрузки:
	// 1. Сопоставляем по наименованию объект здания, если требуется.
	// 2. Если происходит загрузка одниночная загрузка здания по структуре, 
	//    то актуализируем примитивные данные в ней..
	// 3. Если функция не получила ссылку на существующий объект и загружаемые данные переданы в структуре,
	//    то сопоставляем полученные данные по умолчанию по наименованию.
	// 4. Далее объект сопоставлен и в параметрах загрузки получили, что нужно сопоставленные объекты обновлять, то обновляем.
	//    Если объект не сопоставлен и в параметрах загрузки получили, что нужно загружать несопоставленные объекты, то грузим.
	// 5. После успешной загрузки данных функция возвращает структуру. Если объект создан или обновлен, то ссылку на объект
	//    и текстовое сообщение "создан" или "обновлен", соответственно.
	//    Если объект не создан, то функция возрващает сообщение "пропущен" и пустую ссылку на справочник "КВП_Здание".
	
	// На случай того, если объект не будет ни создаватся, ни обновлятся.
	Отказ = Истина;
	
	НачатьТранзакцию();
	
	ОписаниеОшибки = "";
	
	// Сопоставление ссылочных данных здесь производим только при одиночной загрузке здания.
	Если ИскатьСоздаватьРеквизитыСсылочногоТипа Тогда
		ДанныеПоЗданию = НайтиИСоздатьСвойстваСсылочногоТипаВСтруктуреДанных("Здания", ДанныеПоЗданию);
	КонецЕсли;
	
	// Изщем существующее здание по наименованию, если требуется.
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) И ИскатьСуществующие Тогда
		
		// Если наименование здания не передано, то для сопоставления 
		// в качестве наименования берем почтовый адрес, т.к. в такие случаях
		// при записи здания в качестве наименования берется почтовый адрес.
		Если ЗначениеЗаполнено(ДанныеПоЗданию.Наименование) Тогда
			Наименование = ДанныеПоЗданию.Наименование;
		Иначе
			Наименование = ДанныеПоЗданию.ПочтовыйАдрес;
		КонецЕсли;
		
		НайденноеЗдание = НайтиЗданиеПоНаименованию(ДанныеПоЗданию.Наименование);
		Если Не НайденноеЗдание.Пустая() Тогда
			СсылкаНаСуществующий = НайденноеЗдание;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успех"); // Признак успешности загрузки объекта.
	РезультатЗагрузки.Вставить("РезультатЗагрузкиСтрокой");
	РезультатЗагрузки.Вставить("РезультатЗагрузки");
	
	ОбъектСуществует = ЗначениеЗаполнено(СсылкаНаСуществующий);
	
	// Результаты загрузки по умолчанию.
	РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Пропущен";
	РезультатЗагрузки.РезультатЗагрузки        = Справочники.КВП_Здания.ПустаяСсылка();
	РезультатЗагрузки.Успех                    = Ложь;
	
	// Попытка обновить/загрузить здание.
	Если (Не ОбъектСуществует И СоздаватьНеСопоставленные)
		Или (ОбъектСуществует И ОбновлятьСуществующие) Тогда
		
		Отказ = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
			// Обновление существующего элемента справочника.
			ЗданиеОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
		Иначе
			// Создаем элемент здания.
			ЗданиеОбъект = Справочники.КВП_Здания.СоздатьЭлемент();
		КонецЕсли;
		
		// Используем режим загрузки данных.
		ЗданиеОбъект.ОбменДанными.Загрузка = РежимОбменаДанными;
		
		// Производим заполнение свойств здания.
		ЗаполнитьЗдание(ЗданиеОбъект, ДанныеПоЗданию, Отказ, ОписаниеОшибки);
		
		// Производим попытку записи.
		ЗаписатьЗдание(ЗданиеОбъект, Отказ, ОписаниеОшибки);
		
		// Если здание загружено, то загружаем площади здания в регистр "КВП_ПлощадьЗданий".
		Если Не Отказ Тогда
			ЗагрузитьСведенияОПлощадяхЗдания(ДанныеПоЗданию, ЗданиеОбъект, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Записываем результаты загрузки.
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Если РезультатЗагрузки.Свойство("ОписаниеОшибки") Тогда
			РезультатЗагрузки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		КонецЕсли;
		
	Иначе
		
		РезультатЗагрузки.РезультатЗагрузки = ЗданиеОбъект.Ссылка;
		РезультатЗагрузки.Успех             = Истина;
		
		Если ОбъектСуществует И ОбновлятьСуществующие Тогда
			РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Обновлен";
		Иначе
			РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Создан";
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ

// Функция производит поиск здания по наименованию.
//
Функция НайтиЗданиеПоНаименованию(НаименованиеЗдания)
	
	НайденноеЗдание = Справочники.КВП_Здания.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.ПометкаУдаления = ЛОЖЬ
	|	И КВП_Здания.Наименование = &НаименованиеЗдания";
	
	Запрос.УстановитьПараметр("НаименованиеЗдания", НаименованиеЗдания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		
		НайденноеЗдание = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденноеЗдание;
	
КонецФункции

// Процедура заполеняет поля справочника "КВП_Здания" данными либо из строки для загрузки,
// либо из структуры и пытается записать его.
Процедура ЗаполнитьЗдание(ЗданиеОбъект, ДанныеДляЗагрузки, Отказ, ОписаниеОшибки)
	
	Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
		ЗаполнитьЗначенияСвойств(ЗданиеОбъект, ДанныеДляЗагрузки);
		
	ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
		
		Для Каждого ТекПоле Из ДанныеДляЗагрузки Цикл
			
			РеквизитСуществует = ?(Метаданные.Справочники.КВП_Здания.Реквизиты.Найти(ТекПоле.Ключ)<> Неопределено, Истина, Ложь);
			Если РеквизитСуществует Или ТекПоле.Ключ = "Наименование" Или ТекПоле.Ключ = "Родитель" Тогда
				ЗданиеОбъект[ТекПоле.Ключ] = ТекПоле.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		// Если имеется "Почтовый адрес", то заполняем его.
		Если ЗначениеЗаполнено(ДанныеДляЗагрузки.ПочтовыйАдрес) Тогда
			ЗаполнитьПредставлениеАдреса(ЗданиеОбъект, ДанныеДляЗагрузки.ПочтовыйАдрес, Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		КонецЕсли;
	Исключение
		// Продолжаем.
	КонецПопытки;
	
	Попытка
		// Если имеется "Строительный адрес", то заполняем его.
		Если ЗначениеЗаполнено(ДанныеДляЗагрузки.СтроительныйАдрес) Тогда
			ЗаполнитьПредставлениеАдреса(ЗданиеОбъект, ДанныеДляЗагрузки.СтроительныйАдрес, Справочники.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания);
		КонецЕсли;
	Исключение
		// Продолжаем.
	КонецПопытки;
	
	// Если загрузка здания производится в режиме обмена данными,
	// и при этом код не передан, то установим новый произвольный код.
	Если Не ЗначениеЗаполнено(ЗданиеОбъект.Код) Тогда
		ЗданиеОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	// Если наименование не загружено, но определен адрес,
	// в качестве наименования берем представление почтового адреса.
	Если Не ЗначениеЗаполнено(ЗданиеОбъект.Наименование) И ЗначениеЗаполнено(ДанныеДляЗагрузки.ПочтовыйАдрес) Тогда
		ЗданиеОбъект.Наименование = ДанныеДляЗагрузки.ПочтовыйАдрес;
	КонецЕсли;
	
	// Проверяем на заполненость обязательные поля справочника.
	Если Не ЗначениеЗаполнено(ЗданиеОбъект.Наименование)
	 Или Не ЗначениеЗаполнено(ЗданиеОбъект.НомерДома) Тогда
		ОписаниеОшибки = "Незаполнены обязательные поля";
		Отказ = Истина;
	КонецЕсли;
	
	// По умолчанию поле "Тип сооружения" равно значению "Здание".
	Если Не ЗначениеЗаполнено(ЗданиеОбъект.ТипСооружения) Тогда
		ЗданиеОбъект.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Здание;
	КонецЕсли;
	
КонецПроцедуры

// Процедура создает записи в регистре сведения "КВП_ПлощадиЗдания"
// по всем видам площадей, если это требуется.
Процедура ЗагрузитьСведенияОПлощадяхЗдания(ДанныеДляЗагрузки, ЭлементСправочникаЗдания, Отказ)
	
	// Создание записей в регистре "КВП_ПлощадьЗданий".
	Выборка = ПолучитьВыборкуТиповПлощадейЗдания();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
			
			ПлощадьЗданияПоТипу = ДанныеДляЗагрузки[Выборка.ИмяКолонки];
			
		ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
			
			ПлощадьЗданияПоТипу = Неопределено;
			ДанныеДляЗагрузки.Свойство(Выборка.ИмяКолонки ,ПлощадьЗданияПоТипу);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПлощадьЗданияПоТипу) Тогда
			
			МененджерЗаписиВводаПлощади = РегистрыСведений.КВП_ПлощадиЗдания.СоздатьМенеджерЗаписи();
			МененджерЗаписиВводаПлощади.Объект  = ЭлементСправочникаЗдания.Ссылка;
			МененджерЗаписиВводаПлощади.Тип     = Выборка.ПредставлениеКолонки;
			МененджерЗаписиВводаПлощади.Площадь = ПлощадьЗданияПоТипу;
			
			Если Не КВП_ЗаписатьОбъект(МененджерЗаписиВводаПлощади) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает выборку предопределенных типов площадей
// из справочника "КВП_ТипыПлощадейЗдания".
Функция ПолучитьВыборкуТиповПлощадейЗдания()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК ПредставлениеКолонки,
	|	КВП_ТипыПлощадейЗдания.ИмяПредопределенныхДанных КАК ИмяКолонки
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	КВП_ТипыПлощадейЗдания.Предопределенный";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Процедура заполняет представление адреса в справочнике "КВП_Здание".
//
Процедура ЗаполнитьПредставлениеАдреса(ЭлементСправочникаЗдание, Адрес, ВидыКонтактнойИнформации)
	
	// Отчищаем представление адреса от старых данных.
	ЭлементСправочникаЗдание.КонтактнаяИнформация.Очистить();
	
	// Заполняем представление адреса.
	НовСтрТабЧастиСправЗдания = ЭлементСправочникаЗдание.КонтактнаяИнформация.Добавить();
	НовСтрТабЧастиСправЗдания.Вид           = ВидыКонтактнойИнформации;
	НовСтрТабЧастиСправЗдания.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
	НовСтрТабЧастиСправЗдания.Значение      = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(Адрес, ВидыКонтактнойИнформации);
	НовСтрТабЧастиСправЗдания.Представление = Адрес;
	
КонецПроцедуры

// Процедура записывать объект справничника здание.
//
Процедура ЗаписатьЗдание(ЗданиеОбъект, Отказ, ОписаниеОшибки)
	
	// Проверка заполнения свойств здания.
	Если Не ЗданиеОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ОписаниеОшибки = "Объект не прошел проверку заполнения.";
	КонецЕсли;
	
	// Запись здания.
	Если Не Отказ И Не КВП_ЗаписатьОбъект(ЗданиеОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаПомещений

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ

// Функция загружает данные о помещениях, если соответствующие данные
// содержаться в таблице значений переданных для загрузки.
// Возвращает результаты загрузки в таблице с данными
// в допольнительных колонках "РезультатСопоставленияСтроки",
// "РезультатСопоставленияСтроки".
//
Функция ЗагрузитьПомещения(ТаблицаДанных,
						   ИскатьСуществующие = Истина,
						   ОбновлятьСуществующие = Истина,
						   СоздаватьНеСопоставленные = Истина,
						   ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
						   РежимОбменаДанными = Истина) Экспорт
	
	// Актуализация данных ссылочного типа для таблицы значений.
	Если ИскатьСоздаватьРеквизитыСсылочногоТипа Тогда
		
		ТаблицаДанных = НайтиИСоздатьСвойстваСсылочногоТипаВТаблицеДанных("Помещения", ТаблицаДанных);
		
		// Отключим необходимость сопоставления ссылочных данных, так как сопоставление выполнено,
		// чтобы далее при загрузке каждого помещения сопоставление уже не выполнялось.
		ИскатьСоздаватьРеквизитыСсылочногоТипа = Ложь;
		
	КонецЕсли;
	
	// Добавляем колонки для результатов загрузки, если они отсутствуют.
	Если ТаблицаДанных.Колонки.Найти("Успех") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("Успех");
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("РезультатЗагрузки") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("РезультатЗагрузки");
	КонецЕсли;
	Если ТаблицаДанных.Колонки.Найти("РезультатЗагрузкиСтрокой") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("РезультатЗагрузкиСтрокой");
	КонецЕсли;
	
	ЕстьКолонкаРезультатСопоставленияСтроки = Не (ТаблицаДанных.Колонки.Найти("РезультатСопоставленияСтроки") = Неопределено);
	
	Для Каждого СтрокаДанныхДляЗагрузки Из ТаблицаДанных Цикл
		
		СсылкаНаСуществующий = Неопределено;
		Если Не ТаблицаДанных.Колонки.Найти("ОбъектСопоставления") = Неопределено Тогда
			СсылкаНаСуществующий = СтрокаДанныхДляЗагрузки.ОбъектСопоставления;
		КонецЕсли;
		
		// Используем процедуру одиночной загрузки.
		РезультатЗагрузки = ЗагрузитьПомещение(СтрокаДанныхДляЗагрузки,
											   СсылкаНаСуществующий,
											   ИскатьСуществующие,
											   ОбновлятьСуществующие,
											   СоздаватьНеСопоставленные,
											   ИскатьСоздаватьРеквизитыСсылочногоТипа,
											   РежимОбменаДанными);
		
		СтрокаДанныхДляЗагрузки.Успех                        = РезультатЗагрузки.Успех;
		СтрокаДанныхДляЗагрузки.РезультатЗагрузки            = РезультатЗагрузки.РезультатЗагрузки;
		СтрокаДанныхДляЗагрузки.РезультатЗагрузкиСтрокой     = РезультатЗагрузки.РезультатЗагрузкиСтрокой;
		
		// Специально для стандартной обработки загрузки данных помещаем результат загрузки строкой в отдельное поле.
		Если ЕстьКолонкаРезультатСопоставленияСтроки Тогда
			СтрокаДанныхДляЗагрузки.РезультатСопоставленияСтроки = РезультатЗагрузки.РезультатЗагрузкиСтрокой;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ЗагрузитьПомещения()

// Процедура выполняет загрузку помещения по переданным сведениям и параметрам загрузки.
//
Функция ЗагрузитьПомещение(ДанныеПоПомещению,
						СсылкаНаСуществующий = Неопределено,
						ИскатьСуществующие = Истина,
						ОбновлятьСуществующие = Истина, 
						СоздаватьНеСопоставленные = Истина,
						ИскатьСоздаватьРеквизитыСсылочногоТипа = Истина,
						РежимОбменаДанными = Истина) Экспорт
	
	// Параметры загрузки:
	// - ОбновлятьСуществующие
	// - СоздаватьНесопоставленные
	// - РежимОбменаДанными
	
	// Шаги загрузки:
	// 1. Сопоставляем по наименованию объект помещения, если требуется.
	// 2. Если происходит одниночная загрузка помещения по структуре,
	//    то актуализируем примитивные данные в ней.
	// 3. Если функция не получила ссылку на существующий объект и загружаемые данные переданы в структуре,
	//    то сопоставляем полученные данные по умолчанию по наименованию.
	// 4. Далее объект сопоставлен и в параметрах загрузки получили, что нужно сопоставленные объекты обновлять, то обновляем.
	//    Если объект не сопоставлен и в параметрах загрузки получили, что нужно загружать несопоставленные объекты, то грузим.
	// 5. После успешной загрузки данных функция возвращает структуру. Если объект создан или обновлен, то ссылку на объект
	//    и текстовое сообщение "создан" или "обновлен", соответственно.
	//    Если объект не создан, то функция возвращает сообщение "пропущен" и пустую ссылку на справочник "УПЖКХ_Помещения".
	
	// На случай того, если объект не будет ни создаватся, ни обновлятся.
	Отказ = Истина;
	
	НачатьТранзакцию();
	
	ОписаниеОшибки = "";
	
	// Сопоставление ссылочных данных здесь производим только при одиночной загрузке помещения.
	Если ИскатьСоздаватьРеквизитыСсылочногоТипа Тогда
		ДанныеПоПомещению = НайтиИСоздатьСвойстваСсылочногоТипаВСтруктуреДанных("Помещения", ДанныеПоПомещению);
	КонецЕсли;
	
	// Ищем существующее помещение по наименованию, если требуется.
	Если Не ЗначениеЗаполнено(СсылкаНаСуществующий) И ИскатьСуществующие Тогда
		
		Наименование = ДанныеПоПомещению.Наименование;
		
		НайденноеПомещение = НайтиПомещениеПоНаименованию(ДанныеПоПомещению);
		Если Не НайденноеПомещение.Пустая() Тогда
			СсылкаНаСуществующий = НайденноеПомещение;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатЗагрузки = Новый Структура;
	РезультатЗагрузки.Вставить("Успех"); // Признак успешности загрузки объекта.
	РезультатЗагрузки.Вставить("РезультатЗагрузкиСтрокой");
	РезультатЗагрузки.Вставить("РезультатЗагрузки");
	
	ОбъектСуществует = ЗначениеЗаполнено(СсылкаНаСуществующий);
	
	// Результаты загрузки по умолчанию.
	РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Пропущен";
	РезультатЗагрузки.РезультатЗагрузки        = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
	РезультатЗагрузки.Успех                    = Ложь;
	
	// Попытка обновить/загрузить помещение.
	Если (Не ОбъектСуществует И СоздаватьНеСопоставленные)
		Или (ОбъектСуществует И ОбновлятьСуществующие) Тогда
		
		Отказ = Ложь;
		
		Если ЗначениеЗаполнено(СсылкаНаСуществующий) Тогда
			// Обновление существующего элемента справочника.
			ПомещениеОбъект = СсылкаНаСуществующий.ПолучитьОбъект();
		Иначе
			// Создаем элемент помещения.
			ПомещениеОбъект = Справочники.УПЖКХ_Помещения.СоздатьЭлемент();
		КонецЕсли;
		
		// Используем режим загрузки данных.
		ПомещениеОбъект.ОбменДанными.Загрузка = РежимОбменаДанными;
		
		// Производим заполнение свойств помещения.
		ЗаполнитьПомещение(ПомещениеОбъект, ДанныеПоПомещению, Отказ, ОписаниеОшибки);
		
		// Производим попытку записи.
		ЗаписатьПомещение(ПомещениеОбъект, Отказ, ОписаниеОшибки);
		
		// Если помещение загружено, то загружаем зависимые объекты.
		Если Не Отказ Тогда
			
			// Получаем дату для загрузки записей в РС: "КВП_ПлощадьПомещения", "КВП_СостояниеПомещения", 
			// "УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета", "УПЖКХ_СведенияОбОборудовании", "КВП_БлагоустройствоОбъектов".
			Если ТипЗнч(ДанныеПоПомещению) = Тип("СтрокаТаблицыЗначений") Тогда
				ДатаЗагрузки = ДанныеПоПомещению.ДатаЗагрузки;
			ИначеЕсли ТипЗнч(ДанныеПоПомещению) = Тип("Структура") Тогда
				
				ДатаЗагрузки = Неопределено;
				
				ДанныеПоПомещению.Свойство("ДатаЗагрузки", ДатаЗагрузки);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаЗагрузки) Тогда
				
				МассивЧастейДаты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДатаЗагрузки, ".");
				
				Если МассивЧастейДаты.Количество() = 3 Тогда
					Период = Дата(МассивЧастейДаты[2], МассивЧастейДаты[1], МассивЧастейДаты[0]);
				Иначе
					Период = ТекущаяДата();
				КонецЕсли;
				
			Иначе
				Период = ТекущаяДата();
			КонецЕсли;
			
			// Загрузка РС "КВП_ПлощадьПомещения".
			ЗагрузитьСведенияОПлощадяхПомещений(ДанныеПоПомещению, ПомещениеОбъект, Период, Отказ);
			
			// Загрузка РС "КВП_СостояниеПомещения".
			ЗагрузитьСведенияОСостоянииПомещения(ДанныеПоПомещению, ПомещениеОбъект, Период,  Отказ);
			
			// Загрузка РС "УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета", "УПЖКХ_СведенияОбОборудовании".
			ЗагрузитьСведенияОбОборудовании(ДанныеПоПомещению, ПомещениеОбъект, Период, Отказ);
			
			// Загрузка РС "КВП_БлагоустройствоОбъектов".
			ЗагрузитьСведенияОБлагоустройствеОбъектов(ДанныеПоПомещению, ПомещениеОбъект, Период, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Записываем результаты загрузки.
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Если РезультатЗагрузки.Свойство("ОписаниеОшибки") Тогда
			РезультатЗагрузки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		КонецЕсли;
		
	Иначе
		
		РезультатЗагрузки.РезультатЗагрузки = ПомещениеОбъект.Ссылка;
		РезультатЗагрузки.Успех             = Истина;
		
		Если ОбъектСуществует И ОбновлятьСуществующие Тогда
			РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Обновлен";
		Иначе
			РезультатЗагрузки.РезультатЗагрузкиСтрокой = "Создан";
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Возврат РезультатЗагрузки;
	
КонецФункции // ЗагрузитьПомещение()

///////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ

// Функция производит поиск помещения по наименованию.
//
Функция НайтиПомещениеПоНаименованию(ДанныеПоПомещению)
	
	НайденноеПомещение = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Помещения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|	И УПЖКХ_Помещения.Наименование = &НаименованиеПомещения
	|	И УПЖКХ_Помещения.Владелец = &ЗданиеВладелец";
	
	Запрос.УстановитьПараметр("НаименованиеПомещения", ДанныеПоПомещению.Наименование);
	Запрос.УстановитьПараметр("ЗданиеВладелец",        ДанныеПоПомещению.Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		
		НайденноеПомещение = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат НайденноеПомещение;
	
КонецФункции // НайтиПомещениеПоНаименованию()

// Процедура заполеняет поля справочника "УПЖКХ_Помещения" данными либо из строки для загрузки,
// либо из структуры и пытается записать его.
Процедура ЗаполнитьПомещение(ПомещениеОбъект, ДанныеДляЗагрузки, Отказ, ОписаниеОшибки)
	
	Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
		ЗаполнитьЗначенияСвойств(ПомещениеОбъект, ДанныеДляЗагрузки);
		
	ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
		
		Для Каждого ТекПоле Из ДанныеДляЗагрузки Цикл
			
			РеквизитСуществует = ?(Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты.Найти(ТекПоле.Ключ) <> Неопределено, Истина, Ложь);
			Если РеквизитСуществует Или ТекПоле.Ключ = "Наименование" Или ТекПоле.Ключ = "Родитель"
				Или ТекПоле.Ключ = "Владелец" Или ТекПоле.Ключ = "Код" Тогда
				ПомещениеОбъект[ТекПоле.Ключ] = ТекПоле.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//// Если загрузка помещения производится в режиме обмена данными,
	//// и при этом код не передан, то установим новый произвольный код.
	//Если Не ЗначениеЗаполнено(ПомещениеОбъект.Код) Тогда
	//	ПомещениеОбъект.УстановитьНовыйКод();
	//КонецЕсли;
	
	// Проверяем на заполненость обязательные поля справочника.
	Если Не ЗначениеЗаполнено(ПомещениеОбъект.Наименование) Или Не ЗначениеЗаполнено(ПомещениеОбъект.ВидПомещения) Тогда
		ОписаниеОшибки = "Незаполнены обязательные поля";
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПомещение()

// Процедура записывать объект справочника помещение.
//
Процедура ЗаписатьПомещение(ПомещениеОбъект, Отказ, ОписаниеОшибки)
	
	// Проверка заполнения свойств помещения.
	Если Не ПомещениеОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		ОписаниеОшибки = "Объект не прошел проверку заполнения.";
	КонецЕсли;
	
	// Запись помещения.
	Если Не Отказ И Не КВП_ЗаписатьОбъект(ПомещениеОбъект) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьПомещение()

// Процедура создает записи в регистре сведения "КВП_СостояниеПомещения".
Процедура ЗагрузитьСведенияОСостоянииПомещения(ДанныеДляЗагрузки, ЭлементСправочникаПомещения, Период,  Отказ)
	
	Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
		
		СостояниеПомещения = ДанныеДляЗагрузки.СостояниеПомещения;
		КатегорияПомещения = ДанныеДляЗагрузки.КатегорияПомещения;
		
	ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
		
		СостояниеПомещения = Неопределено;
		КатегорияПомещения  = Неопределено;
		
		ДанныеДляЗагрузки.Свойство("СостояниеПомещения", СостояниеПомещения);
		ДанныеДляЗагрузки.Свойство("КатегорияПомещения", КатегорияПомещения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеПомещения) Или ЗначениеЗаполнено(КатегорияПомещения) Тогда
		
		МененджерЗаписиВводаСостояния = РегистрыСведений.КВП_СостояниеПомещения.СоздатьМенеджерЗаписи();
		МененджерЗаписиВводаСостояния.Объект = ЭлементСправочникаПомещения.Ссылка;
		МененджерЗаписиВводаСостояния.Период = Период;
		
		Если ЗначениеЗаполнено(СостояниеПомещения) Тогда
			МененджерЗаписиВводаСостояния.Состояние = СостояниеПомещения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КатегорияПомещения) Тогда
			МененджерЗаписиВводаСостояния.КатегорияКвартиры = КатегорияПомещения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не МененджерЗаписиВводаСостояния = Неопределено Тогда
		
		Если Не КВП_ЗаписатьОбъект(МененджерЗаписиВводаСостояния) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСведенияОСостоянииПомещения()

// Процедура создает записи в регистре сведения "КВП_ПлощадьПомещения"
// по всем видам площадей, если это требуется.
Процедура ЗагрузитьСведенияОПлощадяхПомещений(ДанныеДляЗагрузки, ЭлементСправочникаПомещения, Период,  Отказ)
	
	// Создание записей в регистре "КВП_ПлощадьПомещения".
	Выборка = ПолучитьВыборкуВидовПлощадейПомещения();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
			
			ПлощадьПомещенияПоТипу = ДанныеДляЗагрузки[Выборка.ИмяКолонки];
			
		ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
			
			ПлощадьПомещенияПоТипу = Неопределено;
			ДанныеДляЗагрузки.Свойство(Выборка.ИмяКолонки, ПлощадьПомещенияПоТипу);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПлощадьПомещенияПоТипу) Тогда
			
			МененджерЗаписиВводаПлощади = РегистрыСведений.КВП_ПлощадьПомещения.СоздатьМенеджерЗаписи();
			МененджерЗаписиВводаПлощади.Объект     = ЭлементСправочникаПомещения.Ссылка;
			МененджерЗаписиВводаПлощади.Период     = Период;
			МененджерЗаписиВводаПлощади.ВидПлощади = Выборка.ПредставлениеКолонки;
			МененджерЗаписиВводаПлощади.Площадь    = ПлощадьПомещенияПоТипу;
			
			Если Не КВП_ЗаписатьОбъект(МененджерЗаписиВводаПлощади) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСведенияОПлощадяхПомещений()

// Процедура создает записи в регистрах сведений "УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета",
// "УПЖКХ_СведенияОбОборудовании".
Процедура ЗагрузитьСведенияОбОборудовании(ДанныеДляЗагрузки, ЭлементСправочникаПомещения, Период, Отказ)
	
	Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
		
		СостояниеОборудования  = ДанныеДляЗагрузки.СостояниеОборудования;
		КоличествоОборудования = ДанныеДляЗагрузки.КоличествоОборудования;
		Оборудование           = ДанныеДляЗагрузки.Оборудование;
		
	ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
		
		СостояниеОборудования  = Неопределено;
		КоличествоОборудования = Неопределено;
		Оборудование           = Неопределено;
		
		ДанныеДляЗагрузки.Свойство("СостояниеОборудования", СостояниеОборудования);
		ДанныеДляЗагрузки.Свойство("КоличествоОборудования", КоличествоОборудования);
		ДанныеДляЗагрузки.Свойство("Оборудование", Оборудование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Оборудование) Тогда
		
		Если ЗначениеЗаполнено(КоличествоОборудования) Тогда
			
			МененджерЗаписиВзаимосвязиОборудования = РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьМенеджерЗаписи();
			
			МененджерЗаписиВзаимосвязиОборудования.ОбъектУстановки = ЭлементСправочникаПомещения.Ссылка;
			МененджерЗаписиВзаимосвязиОборудования.Период          = Период;
			МененджерЗаписиВзаимосвязиОборудования.Оборудование    = Оборудование;
			МененджерЗаписиВзаимосвязиОборудования.Установлено     = Истина;
			МененджерЗаписиВзаимосвязиОборудования.Количество      = КоличествоОборудования;
			
			Если Не КВП_ЗаписатьОбъект(МененджерЗаписиВзаимосвязиОборудования) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СостояниеОборудования) Тогда
			
			МененджерЗаписиСведенийОборудования = РегистрыСведений.УПЖКХ_СведенияОбОборудовании.СоздатьМенеджерЗаписи();
			
			МененджерЗаписиСведенийОборудования.Оборудование = Оборудование;
			МененджерЗаписиСведенийОборудования.Период       = Период;
			МененджерЗаписиСведенийОборудования.Состояние    = СостояниеОборудования;
			
			Если Не КВП_ЗаписатьОбъект(МененджерЗаписиСведенийОборудования) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСведенияОбОборудовании()

// Процедура создает записи в регистре сведения "КВП_БлагоустройствоОбъектов".
//
Процедура ЗагрузитьСведенияОБлагоустройствеОбъектов(ДанныеДляЗагрузки, ЭлементСправочникаПомещения, Период, Отказ)
	
	// Создание записей в регистре "КВП_БлагоустройствоОбъектов".
	Выборка = ПолучитьВыборкуВидовБлагоустройств();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(ДанныеДляЗагрузки) = Тип("СтрокаТаблицыЗначений") Тогда
			
			ЗначениеБлагоустройстваПоТипу = ДанныеДляЗагрузки[Выборка.ИмяКолонки];
			
		ИначеЕсли ТипЗнч(ДанныеДляЗагрузки) = Тип("Структура") Тогда
			
			ЗначениеБлагоустройстваПоТипу = Неопределено;
			ДанныеДляЗагрузки.Свойство(Выборка.ИмяКолонки, ЗначениеБлагоустройстваПоТипу);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеБлагоустройстваПоТипу) Тогда
			
			МененджерЗаписиВводаБлагоустройства = РегистрыСведений.КВП_БлагоустройствоОбъектов.СоздатьМенеджерЗаписи();
			МененджерЗаписиВводаБлагоустройства.Объект             = ЭлементСправочникаПомещения.Ссылка;
			МененджерЗаписиВводаБлагоустройства.Период             = Период;
			МененджерЗаписиВводаБлагоустройства.ВидБлагоустройства = Выборка.ПредставлениеКолонки;
			МененджерЗаписиВводаБлагоустройства.Значение           = ЗначениеБлагоустройстваПоТипу;
			
			Если Не КВП_ЗаписатьОбъект(МененджерЗаписиВводаБлагоустройства) Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСведенияОБлагоустройствеОбъектов()

// Возвращает выборку предопределенных типов площадей
// из справочника "УПЖКХ_ВидыПлощадей".
Функция ПолучитьВыборкуВидовПлощадейПомещения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПлощадей.Ссылка КАК ПредставлениеКолонки,
	|	УПЖКХ_ВидыПлощадей.ИмяПредопределенныхДанных КАК ИмяКолонки
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПлощадей КАК УПЖКХ_ВидыПлощадей
	|ГДЕ
	|	УПЖКХ_ВидыПлощадей.Предопределенный";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВидовПлощадейПомещения()

// Возвращает выборку предопределенных видов благоустройств
// из справочника "КВП_ВидыБлагоустройстваОбъектов".
Функция ПолучитьВыборкуВидовБлагоустройств()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыБлагоустройстваОбъектов.Ссылка КАК ПредставлениеКолонки,
	|	КВП_ВидыБлагоустройстваОбъектов.ИмяПредопределенныхДанных КАК ИмяКолонки
	|ИЗ
	|	Справочник.КВП_ВидыБлагоустройстваОбъектов КАК КВП_ВидыБлагоустройстваОбъектов
	|ГДЕ
	|	КВП_ВидыБлагоустройстваОбъектов.Предопределенный";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьВыборкуВидовБлагоустройств()

#КонецОбласти

#Область СопоставлениеДанныхСсылочногоТипа

// Фукнция получает данные для актуализации и для полей с примитивными типами данных
// ищет соответствующие объекты в метаданных,
// если поле является объектного типа. Возвращает таблицу с данными с найдеными объектами.
//
Функция НайтиИСоздатьСвойстваСсылочногоТипаВТаблицеДанных(ВариантЗагрузки, ТаблицаДанных, ТаблицаДляЗаполнения = Неопределено) Экспорт
	
	// Если получаем табличный документ, то преобразовываем в таблицу значений.
	Если ТипЗнч(ТаблицаДанных) = Тип("ТабличныйДокумент") Тогда
		Данные = ПреобразоватьТабличныйДокументВТаблицуЗначений(ВариантЗагрузки, ТаблицаДанных);
	ИначеЕсли ТипЗнч(ТаблицаДанных) = Тип("ТаблицаЗначений") Тогда
		Данные = ТаблицаДанных;
	КонецЕсли;
	
	ТаблицаИнформацияПоКолонкам = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	Если ТаблицаДляЗаполнения = Неопределено Тогда
		ТаблицаДляЗаполнения = ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	КонецЕсли;
	
	Если ТаблицаДляЗаполнения.Колонки.Найти("Идентификатор") = Неопределено Тогда
		ТаблицаДляЗаполнения.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ТаблицаДляЗаполнения.Колонки.Найти("РезультатСопоставленияСтроки") = Неопределено Тогда
		ТаблицаДляЗаполнения.Колонки.Добавить("РезультатСопоставленияСтроки", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Результат'"));
	КонецЕсли;
	
	// Специально для типовой обработки загрузки добавляем колонку с результатом сопоставления строки.
	ЕстьКолонкаРезультатСопоставленияСтроки = Не (ТаблицаДляЗаполнения.Колонки.Найти("РезультатСопоставленияСтроки") = Неопределено);
	
	КорректировкаИдентификатора = 0;
	
	НомерСтроки = 1;
	
	Для Каждого ТекСтр Из Данные Цикл
		
		СтрокаТаблицыПустая = Истина;
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		НоваяСтрока.Идентификатор = НомерСтроки - КорректировкаИдентификатора;
		
		// Специально для стандартной обработки загрузки данных помещаем результат загрузки строкой в отдельное поле.
		Если ЕстьКолонкаРезультатСопоставленияСтроки Тогда
			НоваяСтрока.РезультатСопоставленияСтроки = "НеСопоставлено";
		КонецЕсли;
		
		Для НомерКолонки = 0 По ТаблицаИнформацияПоКолонкам.Количество() - 1 Цикл
			
			ТекПоле = ТекСтр.Получить(НомерКолонки);
			Колонка = ТаблицаИнформацияПоКолонкам.Получить(НомерКолонки);
			
			Если Колонка <> Неопределено И ЗначениеЗаполнено(ТекПоле) Тогда
				
				ИмяКолонки = Колонка.ИмяКолонки;
				
				ДанныеПоля = ПолучитьЗначениеСсылочногоТипаПоСтроке(Колонка, ТекПоле, НоваяСтрока);
				
				Если СтрокаТаблицыПустая Тогда
					СтрокаТаблицыПустая = НЕ ЗначениеЗаполнено(ДанныеПоля);
				КонецЕсли;
				
				НоваяСтрока[ИмяКолонки] = ДанныеПоля;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаТаблицыПустая Тогда
			ТаблицаДляЗаполнения.Удалить(НоваяСтрока);
			КорректировкаИдентификатора = КорректировкаИдентификатора + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаДляЗаполнения;
	
КонецФункции

// Функция получается структуру с данным по зданию. Для полей с примитивными типами данных
// ищет соответствующие объекты в метаданных, если поля являются объектного типа.
// Если для приметивного типа найден объект, то примитивный тип данных в структуре
// заменяется на найденный объект.
//
Функция НайтиИСоздатьСвойстваСсылочногоТипаВСтруктуреДанных(ВариантЗагрузки, СтруктураДанных) Экспорт
	
	ТаблицаИнформацияПоКолонкам = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	ДанныеДляЗаписи = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		
		ЗначениеПоля = "";
		СтруктураДанных.Свойство(ЭлементСтруктуры.Ключ, ЗначениеПоля);
		
		Колонка = ТаблицаИнформацияПоКолонкам.Найти(ЭлементСтруктуры.Ключ, "ИмяКолонки");
		
		Попытка
			Если ЗначениеЗаполнено(ЭлементСтруктуры) И Не ЗначениеПоля = Неопределено Тогда
				ДанныеДляЗаписи.Вставить(ЭлементСтруктуры.Ключ, ПолучитьЗначениеСсылочногоТипаПоСтроке(Колонка, ЗначениеПоля, ДанныеДляЗаписи));
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка поиска и создания свойства " + ЭлементСтруктуры.Ключ + ": " + ОписаниеОшибки() + ".");
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаписи;
	
КонецФункции

// Функция ищет по строковым данным объект для полей объектного типа
// в соответствии с типом поля.
Функция ПолучитьЗначениеСсылочногоТипаПоСтроке(Колонка, ЗначениеПоля, ДанныеДляЗаписи)
	
	ДанныеПоля = "";
	
	// Сперва пытаемся преобразовать входное значение в значение прикладного типа(Справочники, Перечисления и т.д.).
	// Если не получилось входное значение преобразовать в какой-либо прикладной тип,
	// то пытаемся преобразовать его в примитивный тип.
	Для Каждого ТипДанных Из Колонка.ТипКолонки.Типы() Цикл
		
		Если ТипДанных <> Тип("Строка") И ТипДанных <> Тип("Булево") И ТипДанных <> Тип("Число") И ТипДанных <> Тип("Дата") И ТипДанных <> Тип("УникальныйИдентификатор") Тогда
			
			Объект = Метаданные.НайтиПоТипу(ТипДанных);
			ОписаниеОбъекта = РазложитьПолноеИмяОбъекта(Объект.ПолноеИмя());
			
			// Проверка, чтобы не создавать\записывать поля с пустыми значениями.
			ПустоеПоле = ?(ЗначениеПоля <> Неопределено И ЗначениеЗаполнено(ЗначениеПоля), Ложь, Истина);
			
			Если ОписаниеОбъекта.ТипОбъекта = "Справочник" И Не ПустоеПоле Тогда
				
				Если (НЕ Объект.Автонумерация И Объект.ДлинаКода > 0) Или НЕ ЗначениеЗаполнено(ДанныеПоля) Тогда 
					ДанныеПоля = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеПоля, Истина);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеПоля) Тогда
					ДанныеПоля = Справочники[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеПоля, Истина);
				КонецЕсли;
				
				// Если объект справочника не найдет, то создаем его.
				ИмяСправочника = ОписаниеОбъекта.НазваниеОбъекта;
				
				Если ДанныеПоля = Справочники[ИмяСправочника].ПустаяСсылка() Тогда
					
					ЭтоГруппа = Ложь;
					Если Колонка.ИмяКолонки = "Родитель" Тогда
						ЭтоГруппа = Истина;
					КонецЕсли;
					
					ДанныеПоля = СоздатьНовыйЭлементСправочникаПоНаименованию(ЗначениеПоля, ИмяСправочника, ЭтоГруппа, ДанныеДляЗаписи);
					
				КонецЕсли;
				
			ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "Перечисление" Тогда
				
				Для Каждого ЗначениеПеречисления Из Перечисления[ОписаниеОбъекта.НазваниеОбъекта] Цикл
					Если Строка(ЗначениеПеречисления) = СокрЛП(ЗначениеПоля) Тогда 
						ДанныеПоля = ЗначениеПеречисления;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланСчетов" Тогда
				
				ДанныеПоля = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеПоля);
				
				Если ДанныеПоля.Пустая() Тогда
					ДанныеПоля = ПланыСчетов[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеПоля, Истина);
				КонецЕсли;
				
			ИначеЕсли ОписаниеОбъекта.ТипОбъекта = "ПланВидовХарактеристик" Тогда
				
				Если НЕ Объект.Автонумерация И Объект.ДлинаКода > 0 Тогда
					ДанныеПоля = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоКоду(ЗначениеПоля, Истина);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеПоля) Тогда
					ДанныеПоля = ПланыВидовХарактеристик[ОписаниеОбъекта.НазваниеОбъекта].НайтиПоНаименованию(ЗначениеПоля, Истина);
				КонецЕсли;
				
			Иначе
				ДанныеПоля = Строка(ЗначениеПоля);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПоля) Тогда 
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТипДанных Из Колонка.ТипКолонки.Типы() Цикл
		
		Если (ТипДанных = Тип("Строка") Или ТипДанных = Тип("Булево") Или ТипДанных = Тип("Число") Или ТипДанных = Тип("Дата")
			Или ТипДанных = Тип("УникальныйИдентификатор")) И Не ЗначениеЗаполнено(ДанныеПоля) Тогда
			
			Попытка
				Если ТипДанных = Тип("Дата") Тогда
					ДанныеПоля = СтроковыеФункцииКлиентСервер.СтрокаВДату(ЗначениеПоля);
				ИначеЕсли ТипДанных = Тип("Число") Тогда
					ДанныеПоля = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеПоля);
				ИначеЕсли ТипДанных = Тип("Булево") Тогда
					ДанныеПоля = Булево(ЗначениеПоля);
				ИначеЕсли ТипДанных = Тип("Строка") Тогда
					ДанныеПоля = ЗначениеПоля;
				КонецЕсли;
			Исключение
				ДанныеПоля = ЗначениеПоля;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеПоля;
	
КонецФункции // ПолучитьЗначениеСсылочногоТипаПоСтроке()

// Процедура создает и записывает элемент справочника по наименованию.
// В параметры процедуры передается наименование справочника и имя справочника.
//
Функция СоздатьНовыйЭлементСправочникаПоНаименованию(Наименование, ИмяСправочника, ЭтоГруппа = Ложь, ДанныеДляЗаписи)
	
	Если ЭтоГруппа Тогда
		НовыйЭлементСправочника = Справочники[ИмяСправочника].СоздатьГруппу();
	Иначе
		
		НовыйЭлементСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
		
		// Дозаполняет элемент справочника смежного объекта, участвующего в загрузке, обязательными значениями.
		Попытка
			НовыйЭлементСправочника.ДозаполнитьЭлементСправочника(Наименование, ДанныеДляЗаписи, НовыйЭлементСправочника);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	НовыйЭлементСправочника.Наименование = Наименование;
	
	Если КВП_ЗаписатьОбъект(НовыйЭлементСправочника)Тогда
		Возврат НовыйЭлементСправочника.Ссылка;
	Иначе 
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Разложение полного имени объекта на составляющие.
//
Функция РазложитьПолноеИмяОбъекта(ПолноеИмяОбъекта)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъекта, ".");
	
	ИмяОбъекта = Новый Структура;
	ИмяОбъекта.Вставить("ПолноеИмяОбъекта", ПолноеИмяОбъекта);
	ИмяОбъекта.Вставить("ТипОбъекта");
	ИмяОбъекта.Вставить("НазваниеОбъекта");
	ИмяОбъекта.Вставить("ИмяТабличнойЧасти");
	
	Если Результат.Количество() = 2 Тогда
		Если Результат[0] = "Документ" ИЛИ Результат[0] = "Справочник" ИЛИ Результат[0] = "БизнесПроцесс" ИЛИ
			Результат[0] = "Перечисление" ИЛИ Результат[0] = "ПланВидовХарактеристик" ИЛИ Результат[0] = "ПланСчетов" Тогда
			ИмяОбъекта.ТипОбъекта = Результат[0];
			ИмяОбъекта.НазваниеОбъекта = Результат[1];
		Иначе
			 ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
			 ИмяОбъекта.НазваниеОбъекта = Результат[0];
			 ИмяОбъекта.ИмяТабличнойЧасти = Результат[1];
		КонецЕсли;
	ИначеЕсли Результат.Количество() = 3 Тогда
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[2];
	ИначеЕсли Результат.Количество() = 4 Тогда 
		ИмяОбъекта.ТипОбъекта = Результат[0];
		ИмяОбъекта.НазваниеОбъекта = Результат[1];
		ИмяОбъекта.ИмяТабличнойЧасти = Результат[3];
	ИначеЕсли Результат.Количество() = 1 Тогда
		ИмяОбъекта.ТипОбъекта = ОпределитьТипОбъектаМетаданныхПоИмени(Результат[0]);
		ИмяОбъекта.НазваниеОбъекта = Результат[0];
	КонецЕсли;
	
	Возврат ИмяОбъекта;
	
КонецФункции

// Определение типа объекта по имени объекта.
//
Функция ОпределитьТипОбъектаМетаданныхПоИмени(Имя)
	
	Для каждого Объект Из Метаданные.Справочники Цикл
		Если Объект.Имя = Имя Тогда
			Возврат "Справочник";
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Объект Из Метаданные.Документы Цикл
		Если Объект.Имя = Имя Тогда
			Возврат "Документ";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Переводит данные из табличного документа в таблицу занчений.
//
Функция ПреобразоватьТабличныйДокументВТаблицуЗначений(ВариантЗагрузки, ТабличныйДокумент)
	
	ПустаяТаблицаДляЗаполнения = ПолучитьПустуюТаблицуДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	ТаблицаИнформацияПоКолонкам = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	// Для корректной работы типовой обработки "ЗагрузкаДанныхИзФайла" при сопоставлении данных, требуется
	// наличие этих колонок.
	ИнформацияОПоле = Новый Структура;
	ИнформацияОПоле.Вставить("ИмяКолонки",               "Идентификатор");
	ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Идентификатор");
	ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Число"));
	
	ДобавитьПолеВТаблицуПолей(ТаблицаИнформацияПоКолонкам, ИнформацияОПоле);
	
	ИнформацияОПоле = Новый Структура;
	ИнформацияОПоле.Вставить("ИмяКолонки",               "РезультатСопоставленияСтроки");
	ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Результат");
	ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Строка"));
	
	ДобавитьПолеВТаблицуПолей(ТаблицаИнформацияПоКолонкам, ИнформацияОПоле);
	
	ИнформацияОПоле = Новый Структура;
	ИнформацияОПоле.Вставить("ИмяКолонки",               "ОписаниеОшибки");
	ИнформацияОПоле.Вставить("ПредставлениеКолонки",     "Причина");
	ИнформацияОПоле.Вставить("ТипКолонки",               Новый ОписаниеТипов("Строка"));
	
	Для НомерСтроки = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл 
		
		НоваяСтрока = ПустаяТаблицаДляЗаполнения.Добавить();
		
		Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы - 1 Цикл
			
			Ячейка = ТабличныйДокумент.ПолучитьОбласть(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).ТекущаяОбласть;
			Колонка = ТаблицаИнформацияПоКолонкам.Получить(НомерКолонки - 1);
			
			Если Колонка <> Неопределено Тогда
				
				ИмяКолонки = Колонка.ИмяКолонки;
				
				Попытка
					Если Ячейка.Текст <> "" Тогда
						НоваяСтрока[ИмяКолонки] = Ячейка.Текст;
					КонецЕсли;
				Исключение
					// Пропускаем колонку, если данной колонки нет в таблице для заполнения.
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПустаяТаблицаДляЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ТиповаяОбработкаЗагрузкиДанных_СпециальныеМетоды

// Возвращает список полей, по которым можно сопоставить введенные данные.
//
Функция ПолучитьСписокНаименованийКолонокДляСопоставления(ВариантЗагрузки) Экспорт
	
	ТаблицаПолей = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	Если ВариантЗагрузки = "Здания" Тогда
		
		// Удалаем реквизиты площадей. Они при сопоставлении не используются.
		ВыборкаПлощадей = ПолучитьВыборкуТиповПлощадейЗдания();
		
		Пока ВыборкаПлощадей.Следующий() Цикл
			ТаблицаПолей.Удалить(ТаблицаПолей.Найти(ВыборкаПлощадей.ИмяКолонки, "ИмяКолонки"));
		КонецЦикла;
		
	ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
		
		// Удалаем реквизиты видов площадей. Они при сопоставлении не используются.
		ВыборкаВидовПлощадей = ПолучитьВыборкуВидовПлощадейПомещения();
		
		Пока ВыборкаВидовПлощадей.Следующий() Цикл
			ТаблицаПолей.Удалить(ТаблицаПолей.Найти(ВыборкаВидовПлощадей.ИмяКолонки, "ИмяКолонки"));
		КонецЦикла;
		
		// Удаляем реквизиты видов благоустройств. Они при сопоставлении не используются.
		ВыборкаВидовБлагоустройств = ПолучитьВыборкуВидовБлагоустройств();
		
		Пока ВыборкаВидовБлагоустройств.Следующий() Цикл
			ТаблицаПолей.Удалить(ТаблицаПолей.Найти(ВыборкаВидовБлагоустройств.ИмяКолонки, "ИмяКолонки"));
		КонецЦикла;
		
	КонецЕсли;
	
	СписокПолейДляСопоставления = Новый СписокЗначений;
	
	Для Каждого ТекРеквизит Из ТаблицаПолей Цикл
		СписокПолейДляСопоставления.Добавить(ТекРеквизит.ИмяКолонки, ТекРеквизит.ПредставлениеКолонки);
	КонецЦикла;
	
	Возврат СписокПолейДляСопоставления;
	
КонецФункции

// Процедура выполняет сопоставление данных к загрузке существующим в базе данным.
//
Процедура ВыполнитьСопоставление(ВариантЗагрузки, ДанныеДляСопоставления, СопоставитьПоКолонке, КоличествоСопоставленных = Неопределено) Экспорт
	
	// Добавляем колонки для вывода результата сопоставления, если их нет.
	Если ДанныеДляСопоставления.Колонки.Найти("СписокНеоднозначностей") = Неопределено Тогда
		ДанныеДляСопоставления.Колонки.Добавить("СписокНеоднозначностей");
	КонецЕсли;
	Если ДанныеДляСопоставления.Колонки.Найти("РезультатСопоставленияСтроки") = Неопределено Тогда
		ДанныеДляСопоставления.Колонки.Добавить("РезультатСопоставленияСтроки");
	КонецЕсли;
	Если ДанныеДляСопоставления.Колонки.Найти("ОписаниеОшибки") = Неопределено Тогда
		ДанныеДляСопоставления.Колонки.Добавить("ОписаниеОшибки");
	КонецЕсли;
	
	// Сопоставление зданий.
	Если ВариантЗагрузки = "Здания" Тогда
		
		Если ДанныеДляСопоставления.Колонки.Найти("ОбъектСопоставления") = Неопределено Тогда
			ДанныеДляСопоставления.Колонки.Добавить("ОбъектСопоставления", Новый ОписаниеТипов("СправочникСсылка.КВП_Здания"));
		КонецЕсли;
		
		ПочтовыйАдрес = СопоставитьПоКолонке.НайтиПоЗначению("ПочтовыйАдрес");
		СопоставитьПочтовыйАдрес = ПочтовыйАдрес.Пометка;
		СопоставитьПоКолонке.Удалить(ПочтовыйАдрес);
		
		СтроительныйАдрес = СопоставитьПоКолонке.НайтиПоЗначению("СтроительныйАдрес");
		СопоставитьСтроительныйАдрес = СтроительныйАдрес.Пометка;
		СопоставитьПоКолонке.Удалить(СтроительныйАдрес);
		
		// СОПОСТАВЛЕНИЯ РЕКВИЗИТОВ СПРАВОЧНИКА //
		
		СопоставитьПоРеквизитамСправочника(ВариантЗагрузки, ДанныеДляСопоставления, КоличествоСопоставленных, СопоставитьПоКолонке);
		
		//// СОПОСТАВЛЕНИЯ АДРЕСОВ //
		
		ПочтовыйАдресВид     = Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания;
		СтроительныйАдресВид = Справочники.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания;
		
		// Почтовый адрес
		Если СопоставитьПочтовыйАдрес Тогда
			СопоставитьАдрес(ДанныеДляСопоставления, "ПочтовыйАдрес", ПочтовыйАдресВид, КоличествоСопоставленных);
		КонецЕсли;
		
		// Строительный адрес
		Если СопоставитьСтроительныйАдрес Тогда
			СопоставитьАдрес(ДанныеДляСопоставления, "СтроительныйАдрес", СтроительныйАдресВид, КоличествоСопоставленных);
		КонецЕсли;
		
	ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
		
		Если ДанныеДляСопоставления.Колонки.Найти("ОбъектСопоставления") = Неопределено Тогда
			ДанныеДляСопоставления.Колонки.Добавить("ОбъектСопоставления", Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения"));
		КонецЕсли;
		
		// СОПОСТАВЛЕНИЯ РЕКВИЗИТОВ СПРАВОЧНИКА //
		
		СопоставитьПоРеквизитамСправочника(ВариантЗагрузки, ДанныеДляСопоставления, КоличествоСопоставленных, СопоставитьПоКолонке);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет сопоставление по реквизитам справочника "КВП_Здания", "УПЖКХ_Помещения".
//
Процедура СопоставитьПоРеквизитамСправочника(ВариантЗагрузки, ДанныеДляСопоставления, КоличествоСопоставленных, СопоставитьПоКолонке)
	
	Условия = УсловияПоВыбраннымКолонкам(ВариантЗагрузки, СопоставитьПоКолонке);
	
	Если ЗначениеЗаполнено(Условия.УсловиеОбъединения) Тогда
		
		Если ВариантЗагрузки = "Здания" Тогда
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта("Справочник.КВП_Здания");
		ИначеЕсли ВариантЗагрузки = "Помещения" Тогда
			СтруктураОбъекта = РазложитьПолноеИмяОбъекта("Справочник.УПЖКХ_Помещения");
		КонецЕсли;
		
		ИмяСправочника = СтруктураОбъекта.НазваниеОбъекта;
		
		СписокКолонок = "";
		Разделитель = "";
		
		Для Каждого Колонка Из ДанныеДляСопоставления.Колонки Цикл
			СоставитьСписокКолонокСопоставленияДляЗапроса(Колонка.Имя, СписокКолонок, Разделитель);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ " + СписокКолонок + "
		|ПОМЕСТИТЬ ДанныеДляСопоставления
		|ИЗ &ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|;
		|ВЫБРАТЬ
		|	СправочникСопоставления.Ссылка, ДанныеДляСопоставления.Идентификатор
		|ИЗ
		|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ИмяСправочника + " КАК СправочникСопоставления
		|		ПО " + Условия.УсловиеОбъединения + "
		|ГДЕ
		|	СправочникСопоставления.Ссылка.ПометкаУдаления = ЛОЖЬ " + Условия.Где + "
		|	УПОРЯДОЧИТЬ ПО ДанныеДляСопоставления.Идентификатор ИТОГИ ПО ДанныеДляСопоставления.Идентификатор";
		
		Запрос.УстановитьПараметр("ДанныеДляСопоставления", ДанныеДляСопоставления);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Строка = ДанныеДляСопоставления.Найти(ВыборкаДетальныеЗаписи.Идентификатор, "Идентификатор");
			
			Если ЗначениеЗаполнено(Строка.ОбъектСопоставления) Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписиГруппа = ВыборкаДетальныеЗаписи.Выбрать();
			
			Если ВыборкаДетальныеЗаписиГруппа.Количество() > 1 Тогда
				
				СписокНеоднозначностей = Новый СписокЗначений;
				
				Пока ВыборкаДетальныеЗаписиГруппа.Следующий() Цикл
					СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписиГруппа.Ссылка);
				КонецЦикла;
				
				Строка.РезультатСопоставленияСтроки = "Неоднозначность";
				Строка.ОписаниеОшибки               = "";
				Строка.СписокНеоднозначностей       = СписокНеоднозначностей;
				
			Иначе
				
				ВыборкаДетальныеЗаписиГруппа.Следующий();
				
				КоличествоСопоставленных = КоличествоСопоставленных + 1;
				
				Строка.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
				Строка.ОписаниеОшибки               = "";
				Строка.ОбъектСопоставления          = ВыборкаДетальныеЗаписиГруппа.Ссылка;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Процедура проводит сопоставление по адресу.
//
Процедура СопоставитьАдрес(ДанныеДляСопоставления, НаименованиеАдреса, ВидАдреса, КоличествоСопоставленных)
	
	Для Каждого ТекСтрока Из ДанныеДляСопоставления Цикл
		
		ТекПредставлениеАдреса = ТекСтрока[НаименованиеАдреса];
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЗданияКонтактнаяИнформация.Ссылка
		|ИЗ
		|	Справочник.КВП_Здания.КонтактнаяИнформация КАК КВП_ЗданияКонтактнаяИнформация
		|ГДЕ
		|	КВП_ЗданияКонтактнаяИнформация.Вид = &ВидАдреса
		|	И КВП_ЗданияКонтактнаяИнформация.Представление = &ПредставлениеАдреса";
		
		Запрос.УстановитьПараметр("ВидАдреса",           ВидАдреса);
		Запрос.УстановитьПараметр("ПредставлениеАдреса", ТекПредставлениеАдреса);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			СписокНеоднозначностей = Новый СписокЗначений;
			
			Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
				
				СписокНеоднозначностей = Новый СписокЗначений;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;
				
				ТекСтрока.РезультатСопоставленияСтроки = "Неоднозначность";
				ТекСтрока.ОписаниеОшибки               = "";
				ТекСтрока.СписокНеоднозначностей       = СписокНеоднозначностей;
				
			Иначе
				
				ВыборкаДетальныеЗаписи.Следующий();
				
				Если ТекСтрока.ОбъектСопоставления = Справочники.КВП_Здания.ПустаяСсылка() Тогда
					
					ТекущийОбъектВСпискеНеоднозначностей = ТекСтрока.СписокНеоднозначностей.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка);
					
					Если ТекущийОбъектВСпискеНеоднозначностей = Неопределено Тогда
						
						КоличествоСопоставленных = КоличествоСопоставленных + 1;
						ТекСтрока.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
						ТекСтрока.ОписаниеОшибки               = "";
						ТекСтрока.ОбъектСопоставления          = ВыборкаДетальныеЗаписи.Ссылка;
						
					Иначе
						
						КоличествоСопоставленных = КоличествоСопоставленных + 1;
						
						ТекСтрока.СписокНеоднозначностей       = Неопределено;
						ТекСтрока.РезультатСопоставленияСтроки = "СтрокаСопоставлена";
						ТекСтрока.ОписаниеОшибки               = "";
						ТекСтрока.ОбъектСопоставления          = ВыборкаДетальныеЗаписи.Ссылка;
						
					КонецЕсли;
					
				ИначеЕсли Не ТекСтрока.ОбъектСопоставления = Справочники.КВП_Здания.ПустаяСсылка() 
					И Не ТекСтрока.ОбъектСопоставления = ВыборкаДетальныеЗаписи.Ссылка Тогда
					
					КоличествоСопоставленных = КоличествоСопоставленных - 1;
					ТекСтрока.РезультатСопоставленияСтроки = "";
					ТекСтрока.ОписаниеОшибки = "";
					ТекСтрока.ОбъектСопоставления = Справочники.КВП_Здания.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Опрделяет условия по выбранным колонкам.
//
Функция УсловияПоВыбраннымКолонкам(ВариантЗагрузки, СопоставитьПоКолонке)
	
	Разделитель = "";
	РазделительИ = "";
	ТипСравнения = " = ";
	сГде = "";
	СтрокаУсловие = "";
	ИнформацияПоКолонкам = ПолучитьТаблицуПолейЗагружаемыхДанныхПоВариантуЗагрузки(ВариантЗагрузки);
	
	Для каждого Элемент Из СопоставитьПоКолонке Цикл
		Если Элемент.Пометка Тогда
			
			Колонка = ИнформацияОКолонке(Элемент.Значение, ИнформацияПоКолонкам);
			
			// Создаем запрос в зависимости от типов.
			Если Колонка <> Неопределено Тогда
				ТипКолонки = Колонка.ТипКолонки.Типы()[0];
				Если ТипКолонки = Тип("Строка") Тогда
					Если Колонка.ТипКолонки.КвалификаторыСтроки.Длина = 0 Тогда
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки +  " ПОДОБНО ДанныеДляСопоставления." + Колонка.ИмяКолонки;
						сГДЕ = сГДЕ + " И СправочникСопоставления." + Колонка.ИмяКолонки + " <> """"";
					Иначе
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки +  " = ДанныеДляСопоставления." + Колонка.ИмяКолонки;
						сГДЕ = сГДЕ + " И СправочникСопоставления." + Колонка.ИмяКолонки + " <> """"";
					КонецЕсли;
				ИначеЕсли ТипКолонки = Тип("Число") Тогда
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ДанныеДляСопоставления." + Колонка.ИмяКолонки;
				ИначеЕсли ТипКолонки = Тип("Дата") Тогда 
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ДанныеДляСопоставления." + Колонка.ИмяКолонки;
				ИначеЕсли ТипКолонки = Тип("Булево") Тогда 
					СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ДанныеДляСопоставления." + Колонка.ИмяКолонки;
				Иначе
					ИнфоОбъект = ИнформацияОбОбъектеМетаданныхПоТипу(ТипКолонки);
					Если ИнфоОбъект.ТипОбъекта = "Справочник" Тогда
						Справочник = Метаданные.Справочники.Найти(ИнфоОбъект.ИмяОбъекта);
						ТекстУсловияСправочник = "";
						РазделительИЛИ = "";
						Для каждого СтрокаВвода Из Справочник.ВводПоСтроке Цикл 
							Если СтрокаВвода.Имя = "Код" И НЕ Справочник.Автонумерация Тогда 
								ТекстУсловияВВодаПоСтроке = "СправочникСопоставления." + Колонка.ИмяКолонки+ ".Код " + ТипСравнения + " ДанныеДляСопоставления." + Колонка.ИмяКолонки + ".Наименование";
							Иначе
								ТекстУсловияВВодаПоСтроке = "СправочникСопоставления." + Колонка.ИмяКолонки+ "." + СтрокаВвода.Имя  + ТипСравнения + " ДанныеДляСопоставления." + Колонка.ИмяКолонки + ".Наименование";
							КонецЕсли;	
							ТекстУсловияСправочник = ТекстУсловияСправочник + РазделительИЛИ + ТекстУсловияВВодаПоСтроке;
							РазделительИЛИ = " ИЛИ ";
						КонецЦикла;
						СтрокаУсловие = СтрокаУсловие + РазделительИ + " ( "+ ТекстУсловияСправочник + " )";
					ИначеЕсли ИнфоОбъект.ТипОбъекта = "Перечисление" Тогда 
						СтрокаУсловие = СтрокаУсловие + РазделительИ + "СправочникСопоставления." + Колонка.ИмяКолонки + " =  ДанныеДляСопоставления." + Колонка.ИмяКолонки;	
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РазделительИ = " И ";
			Разделитель = ",";
			
		КонецЕсли;
	КонецЦикла;
	
	Условия = Новый Структура("УсловиеОбъединения , Где");
	Условия.УсловиеОбъединения  = СтрокаУсловие;
	Условия.Где = сГДЕ;
	Возврат Условия;
	
КонецФункции

// Возвращает информацию о колонке.
//
Функция ИнформацияОКолонке(ИмяКолонки, ИнформацияПоКолонкам)
	
	Отбор = Новый Структура("ИмяКолонки", ИмяКолонки);
	Результат = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает тип и имя объектов по полному типу объекта.
//
Функция ИнформацияОбОбъектеМетаданныхПоТипу(ПолныйТипОбъекта)
	
	ОписаниеОбъекта = Новый Структура("ТипОбъекта, ИмяОбъекта");
	ПолноеИмя = Метаданные.НайтиПоТипу(ПолныйТипОбъекта).ПолноеИмя();
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя,".");
	
	Если Результат.Количество() > 1 Тогда
		ОписаниеОбъекта.ТипОбъекта = Результат[0];
		ОписаниеОбъекта.ИмяОбъекта = Результат[1];
		Возврат ОписаниеОбъекта;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура составляет список колонок для запроса из колонок таблицы значений с данными.
//
Процедура СоставитьСписокКолонокСопоставленияДляЗапроса(ИмяПоля, СписокКолонок, Разделитель)
	
	Если ИмяПоля <> "СписокНеоднозначностей" И ИмяПоля <> "РезультатСопоставленияСтроки" И ИмяПоля <> "ОписаниеОшибки" Тогда
		СписокКолонок = СписокКолонок + Разделитель + ИмяПоля;
		Разделитель = ", ";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
