#Область СлужебныеПроцедурыИФункции

Функция СформироватьКонтекстДляПроверок(Шаблон, ФайлВырузки, ВыгрузкаПрошлогоПериода = Неопределено) Экспорт 
	Попытка
		Результат = Истина;
		Контекст = Новый Структура;
		Контекст.Вставить("ОТЧ", Новый ОписаниеТипов("Число"));
		Контекст.Вставить("ОПС", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
		Контекст.Вставить("ОПБ", Новый ОписаниеТипов("Булево"));
		Контекст.Вставить("ПолучитьВсеАргументыКромеСуммированийВВыражении", Новый Соответствие);
		Контекст.Вставить("ПолучитьВсеАргументыВыражения", Новый Соответствие);
		СформироватьСоответствиеЗамен(Контекст);
		Результат = Результат И ПолучитьТаблицуДанныеШаблона(Шаблон, Контекст);
		ДанныеОтчетаВТаблицу(ФайлВырузки, Контекст, "ОсновнойПериод_");
		Если Не ВыгрузкаПрошлогоПериода = Неопределено Тогда
			ДанныеОтчетаВТаблицу(ВыгрузкаПрошлогоПериода, Контекст, "ПредидущийПериод_");
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Проверка контрольных соотношений осуществляться не будет'"));
		Возврат Неопределено;
	КонецПопытки;
	
	Если Результат Тогда 
		Возврат Контекст;
	КонецЕсли;
КонецФункции

Процедура СформироватьСоответствиеЗамен(Контекст)
	Замены = Новый Соответствие;
	Замены["abs"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Абс";
	Замены["coalesce"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Соединение";
	Замены["floor"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._БлижЦел";
	Замены["isnull"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._ЕстьНулл";
	Замены["nullif"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._НуллИф";
	Замены["round"] = "ИнтерпретаторКонтрольныхСоотношенийРосстата._Окр";
	Сравнения = Новый Соответствие;
	Сравнения["|>|"] = ">";
	Сравнения["|>=|"] = ">=";
	Сравнения["|<>|"] = "<>";
	Сравнения["|<=|"] = "<=";
	Сравнения["|<|"] = "<";
	
	Контекст.Вставить("ФункцииЯзыкаКС", Замены);
	Контекст.Вставить("ОперацииСравнения", Сравнения);
КонецПроцедуры

Функция ПреобразоватьАргументСуммы(Выражение)
	Результат = Выражение;
	ВсегоСумм = СтрЧислоВхождений(Результат, "sum");
	Если ВсегоСумм = 0 Тогда 
		Возврат Результат;
	КонецЕсли;
	Для Инд = 1 По ВсегоСумм Цикл
		ИндСум = СтрНайти(Результат, "sum", НаправлениеПоиска.СНачала, 1, ВсегоСумм + 1 - Инд);
		Если Не Сред(Результат, ИндСум + 3, 1) = "(" Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		ИндНачАрг = ИндСум + 4;
		Инд = ИндНачАрг;
		Счетчик = 1;
		Пока Счетчик <> 0 И Инд <= СтрДлина(Результат) Цикл 
			Символ = Сред(Результат, Инд, 1);
			Если Символ = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Символ = ")" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		Аргумент = Сред(Результат, ИндНачАрг, Инд - ИндНачАрг - 1);
		Если СтрНайти(Аргумент, "+") <> 0 Тогда 
			МассивАрг = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Аргумент, "+");
			ПреобразованныйАрг = "";
			Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Аргумент, "+") Цикл 
				ПреобразованныйАрг = ПреобразованныйАрг + ?(ЗначениеЗаполнено(ПреобразованныйАрг), "+", "") + "sum(" + Элт + ")";
			КонецЦикла;
			Результат = Лев(Результат, ИндСум - 1) + "(" + ПреобразованныйАрг + ")" + Сред(Результат, Инд);
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПреобразоватьЦепочкуСравнений(Выражение)
	Если СтрНайти(Выражение, "or") > 0 Или СтрНайти(Выражение, "and") > 0 Тогда 
		Возврат Выражение;
	КонецЕсли;
	КоличествоРазделителей = СтрЧислоВхождений(Выражение, "|");
	Если КоличествоРазделителей < 3 Тогда 
		Возврат Выражение;
	КонецЕсли;
	Если СтрЧислоВхождений(Выражение, "|>|")+СтрЧислоВхождений(Выражение, "|>=|")
		+СтрЧислоВхождений(Выражение, "|<|")+СтрЧислоВхождений(Выражение, "|<=|") < 2 Тогда 
		Возврат Выражение;
	КонецЕсли;
	
	Если КоличествоРазделителей % 2 = 1 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	ИгогДляФормирования = Новый Массив;
	ПредИнд = 1;
	Инд = 1;
	Пока Инд < КоличествоРазделителей Цикл 
		Индекс1 = СтрНайти(Выражение, "|", НаправлениеПоиска.СНачала, 1, Инд);
		Индекс2 = СтрНайти(Выражение, "|", НаправлениеПоиска.СНачала, 1, Инд+1);
		Если Индекс1 = 0 Или Индекс2 = 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Инд = Инд + 2;
		ИгогДляФормирования.Добавить("(" + Сред(Выражение, ПредИнд, Индекс1-ПредИнд) + ")");
		ИгогДляФормирования.Добавить(Сред(Выражение, Индекс1, Индекс2-Индекс1+1));
		ПредИнд = Индекс2+1;
	КонецЦикла;
	
	ИгогДляФормирования.Добавить("(" + Сред(Выражение, ПредИнд) + ")");
	Инд = 1;
	Результат = "";
	Пока Инд < ИгогДляФормирования.ВГраница() Цикл
		Результат = Результат + ?(ЗначениеЗаполнено(Результат), "and", "") + "(" + ИгогДляФормирования[Инд-1] + ИгогДляФормирования[Инд] + ИгогДляФормирования[Инд+1] + ")";
		Инд = Инд + 2;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПреобразоватьНезаполненныеАргументы(Выражение, ЗаменыФункций)
	КоличествоРазделителей = СтрЧислоВхождений(Выражение, "%");
	Если КоличествоРазделителей = 0 Тогда 
		Возврат Выражение;
	КонецЕсли;
	Если КоличествоРазделителей%2=1 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	ИгогДляФормирования = Новый Соответствие;
	ПредИнд = 1;
	Инд = 1;
	Пока Инд < КоличествоРазделителей Цикл 
		Индекс1 = СтрНайти(Выражение, "%", НаправлениеПоиска.СНачала, 1, Инд);
		Индекс2 = СтрНайти(Выражение, "%", НаправлениеПоиска.СНачала, 1, Инд+1);
		Если Индекс1 = 0 Или Индекс2 = 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Контекст = Индекс1;
		Пока Контекст > 0 Цикл 
			Контекст = Контекст - 1;
			Если Контекст = 0 Тогда
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",0)";
				Прервать;
			КонецЕсли;
			
			Символ = Сред(Выражение, Контекст, 1);
			Если Символ = "*" Или Символ = "-" Или Символ = "+" Или Символ = "|" Тогда 
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",0)";
				Прервать;
			ИначеЕсли Символ = "/" Тогда
				Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
				ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",1)";
				Прервать;
			ИначеЕсли Символ = "(" Тогда
				Символ = Сред(Выражение, Индекс2 + 1, 1);
				Если Символ = "*" Или Символ = "-" Или Символ = "+" Или Символ = "|" Или Символ = "/" Тогда
					Аргумент = Сред(Выражение, Индекс1, Индекс2-Индекс1+1);
					ИгогДляФормирования[Аргумент] = ЗаменыФункций["isnull"] + "(" + Аргумент + ",1)";
					Прервать;
				КонецЕсли;
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Инд = Инд + 2;
		ПредИнд = Индекс2+1;
	КонецЦикла;
	
	Результат = Выражение;
	Для Каждого КЗ Из ИгогДляФормирования Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ОкруглитьОперанды(Выражение, ЗаменыФункций, ЗнаковОкругления)
	ОперацииСравнения = Новый Соответствие;
	ОперацииСравнения.Вставить("|>|", Истина);
	ОперацииСравнения.Вставить("|>=|", Истина);
	ОперацииСравнения.Вставить("|<>|", Истина);
	ОперацииСравнения.Вставить("|<=|", Истина);
	ОперацииСравнения.Вставить("|<|", Истина);
	ОперацииСравнения.Вставить("|=|", Истина);
	
	Результат = "";
	Инд = 1;
	ДлИсх = СтрДлина(Выражение);
	НачалоТерма = 1;
	СчетчикСкобок = 0;
	Пока Истина Цикл 
		Если СтрНачинаетсяС(Сред(Выражение, Инд), "or") Тогда 
			Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок) + "or";
			Инд = Инд + 2;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		Если СтрНачинаетсяС(Сред(Выражение, Инд), "and") Тогда 
			Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок) + "and";
			Инд = Инд + 3;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		
		ПервыйСимвол = Сред(Выражение, Инд, 1);
		Если ПервыйСимвол = "(" Тогда
			СчетчикСкобок = СчетчикСкобок + 1;
		ИначеЕсли ПервыйСимвол = ")" Тогда
			СчетчикСкобок = СчетчикСкобок - 1;
		КонецЕсли;
		
		ОпСравнения = Сред(Выражение, Инд, 3);
		Если ОперацииСравнения.Получить(ОпСравнения) = Истина Тогда 
			Результат = Лев(Результат, НачалоТерма - 1) + Сред(Результат, НачалоТерма + СчетчикСкобок);
			Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))" + ОпСравнения;
			Инд = Инд + 3;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		ОпСравнения = Сред(Выражение, Инд, 4);
		Если ОперацииСравнения.Получить(ОпСравнения) = Истина Тогда
			Результат = Лев(Результат, НачалоТерма - 1) + Сред(Результат, НачалоТерма + СчетчикСкобок);
			Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))" + ОпСравнения;
			Инд = Инд + 4;
			НачалоТерма = СтрДлина(Результат) + 1;
			СчетчикСкобок = 0;
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + Сред(Выражение, Инд, 1);
		Инд = Инд + 1;
		Если Инд > ДлИсх Тогда 
			Если ЗначениеЗаполнено(Сред(Результат, НачалоТерма)) Тогда
				Результат = Лев(Результат, СтрДлина(Результат) + СчетчикСкобок);
				Результат = Лев(Результат, НачалоТерма - 1) + "(" + ЗаменыФункций["round"] + "(" + Сред(Результат, НачалоТерма) + "," + ЗнаковОкругления + "))";
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	Возврат Результат;
КонецФункции

Функция ПроверкаВыражения(Результат)
	Возврат Неопределено;
	Если СтрЧислоВхождений(Результат, "(") <> СтрЧислоВхождений(Результат, ")")
		Или СтрЧислоВхождений(Результат, "{") <> СтрЧислоВхождений(Результат, "}")
		Или СтрЧислоВхождений(Результат, "@")%2 <> 0
		Или СтрЧислоВхождений(Результат, "%")%2 <> 0
		Или СтрЧислоВхождений(Результат, "[") <> СтрЧислоВхождений(Результат, "]") Тогда 
		
		ВызватьИсключение "";
	КонецЕсли;
	
	Если СтрНайти(Результат, "null-") > 0 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	
	Проверка = "";
	Для Инд = 1 По СтрДлина(Результат) Цикл 
		Символ = Сред(Результат, Инд, 1);
		Если Символ = "(" Или Символ = "{" Или Символ = "[" Тогда 
			Проверка = Проверка + Символ;
		ИначеЕсли Символ = "]" Тогда 
			Если Прав(Проверка, 1) = "[" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		ИначеЕсли Символ = "}" Тогда 
			Если Прав(Проверка, 1) = "{" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		ИначеЕсли Символ = ")" Тогда 
			Если Прав(Проверка, 1) = "(" Тогда 
				Проверка = Лев(Проверка, СтрДлина(Проверка) - 1);
			Иначе
				ВызватьИсключение "";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Проверка) Тогда 
		ВызватьИсключение "";
	КонецЕсли;
КонецФункции

Функция ПривестиВыражениеККаноническомуВиду(Выражение, ЗнаковОкругления = 2) 
	Аргументы = Новый Соответствие;
	Результат = СокрЛП(Выражение);
	Инд = 0;
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Результат, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Результат, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	Результат = СтрЗаменить(НРег(Результат), " ", "");
	Результат = СтрЗаменить(Результат, Символы.НПП, "");
	ПроверкаВыражения(Результат);
	
	ЗаменыФункций = Новый Соответствие;
	ЗаменыФункций["abs"] = "@func1@";
	ЗаменыФункций["coalesce"] = "@func2@";
	ЗаменыФункций["floor"] = "@func3@";
	ЗаменыФункций["isnull"] = "@func4@";
	ЗаменыФункций["nullif"] = "@func5@";
	ЗаменыФункций["round"] = "@func6@";
	Для Каждого КЗ Из ЗаменыФункций Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПроверкаВыражения(Результат);
	
	Для Инд = 1 По СтрЧислоВхождений(Результат, "sum") Цикл 
		ИндСум = СтрНайти(Результат, "sum", НаправлениеПоиска.СНачала, 1, Инд);
		СледСимвол = Сред(Результат, ИндСум + 3, 1);
		Если СледСимвол = "(" Тогда 
			Продолжить;
		ИначеЕсли СледСимвол = "%" Тогда 
			ПозЗакр = СтрНайти(Результат, "%", НаправлениеПоиска.СНачала, ИндСум + 4);
			Если ПозЗакр = 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Результат = Лев(Результат, ИндСум + 2) + "(" + Сред(Результат, ИндСум + 3, ПозЗакр - ИндСум - 2) + ")" + Сред(Результат, ПозЗакр + 1);
		Иначе
			ПозЗакр = СтрНайти(Результат, ")", НаправлениеПоиска.СНачала, ИндСум + 3);
			Если ПозЗакр = 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Результат = Лев(Результат, ИндСум + 2) + "(" + Сред(Результат, ИндСум + 3, ПозЗакр - ИндСум - 2) + ")" + Сред(Результат, ПозЗакр + 1);
		КонецЕсли;
	КонецЦикла;
	ПроверкаВыражения(Результат);
	
	Результат = ПреобразоватьАргументСуммы(Результат);
	Результат = ПреобразоватьЦепочкуСравнений(Результат);
	Результат = ПреобразоватьНезаполненныеАргументы(Результат, ЗаменыФункций);
	Результат = ОкруглитьОперанды(Результат, ЗаменыФункций, ЗнаковОкругления);
	
	Для Каждого КЗ Из ЗаменыФункций Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Значение, НРег(КЗ.Ключ));
	КонецЦикла;
	Для Каждого КЗ Из Аргументы Цикл 
		Результат = СтрЗаменить(Результат, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	Возврат НРег(Результат);
КонецФункции

Функция _Абс(p) Экспорт 
	// abs
	Если ТипЗнч(p) = Тип("Число") Тогда 
		Возврат ?(p > 0, p, (-1) * p);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция _Соединение(p1 = Неопределено,
					p2 = Неопределено,
					p3 = Неопределено,
					p4 = Неопределено,
					p5 = Неопределено,
					p6 = Неопределено) Экспорт 
	// coalesce (p1, …pn)
	Если p1 <> Null Тогда 
		Возврат p1;
	КонецЕсли;
	Если p2 <> Null Тогда 
		Возврат p2;
	КонецЕсли;
	Если p3 <> Null Тогда 
		Возврат p3;
	КонецЕсли;
	Если p4 <> Null Тогда 
		Возврат p4;
	КонецЕсли;
	Если p5 <> Null Тогда 
		Возврат p5;
	КонецЕсли;
	Если p6 <> Null Тогда 
		Возврат p6;
	КонецЕсли;
	Возврат Null
КонецФункции

Функция _БлижЦел(p) Экспорт 
	// floor 
	Если ТипЗнч(p) = Тип("Число") Тогда 
		Рез = Окр(p, 0);
		Возврат ?(p >= Рез, Рез, Рез - 1);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция _ЕстьНулл(p1, p2) Экспорт 
	// isnull 
	Возврат ?(p1 = Null, p2, p1);
КонецФункции

Функция _НуллИф(p1, p2) Экспорт 
	// nullif
	Возврат ?(p1 = p2, Null, p1);
КонецФункции

Функция _Окр(p1, p2 = 0, p3 = 0) Экспорт
	// round
	Если ТипЗнч(p1) = Тип("Число") Тогда 
		Возврат ?(p3 = 0, Окр(p1 * Pow(10, p2), 0), _БлижЦел(p1 * Pow(10, p2))) / Pow(10, p2);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПолучитьПустуюТаблицуТиповСтрок()
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ОПБ = Новый ОписаниеТипов("Булево");
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОПС);
	ПустаяТаблица.Колонки.Добавить("row", ОПС);
	ПустаяТаблица.Колонки.Добавить("rowtype", ОПС);
	ПустаяТаблица.Колонки.Добавить("s1_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s2_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s3_isPresent", ОПБ);
	ПустаяТаблица.Колонки.Добавить("s1", ОПС);
	ПустаяТаблица.Колонки.Добавить("s2", ОПС);
	ПустаяТаблица.Колонки.Добавить("s3", ОПС);
	ПустаяТаблица.Индексы.Добавить("section,row,rowtype");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуМножественныхСтрок()
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(32);
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОПС);
	ПустаяТаблица.Колонки.Добавить("row", ОПС);
	ПустаяТаблица.Индексы.Добавить("section,row");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуПроверокКонтролей()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("Описание");
	ПустаяТаблица.Колонки.Добавить("Нарушение");
	ПустаяТаблица.Колонки.Добавить("Расшифровка");
	ПустаяТаблица.Колонки.Добавить("ЭтоОшибка", Новый ОписаниеТипов("Булево"));
	ПустаяТаблица.Колонки.Добавить("ТекстовоеПредставлениеФормулы");
	ПустаяТаблица.Колонки.Добавить("Комментарий");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуДанныхОтчета(КоличествоКолонок)
	ОПБ = Новый ОписаниеТипов("Булево");
	ОписаниеТиповКолонки = Новый ОписаниеТипов(ОбщегоНазначения.ОписаниеТипаСтрока(256), "Число", , Новый КвалификаторыЧисла(15,3));
	
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("section", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("row", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Для Инд = 1 По 3 Цикл
		ПустаяТаблица.Колонки.Добавить("s" + Инд, ОписаниеТиповКолонки);
		ПустаяТаблица.Колонки.Добавить("s" + Инд + "_isPresent", ОПБ);
	КонецЦикла;
	
	Для Инд = 1 По КоличествоКолонок Цикл
		ПустаяТаблица.Колонки.Добавить("col" + Прав("0000" + Инд, 4), ОписаниеТиповКолонки);
		ПустаяТаблица.Колонки.Добавить("col" + Прав("0000" + Инд, 4) + "_isPresent", ОПБ);
	КонецЦикла;
	
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуКонтрольныхСоотношений()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("name");
	ПустаяТаблица.Колонки.Добавить("condition");
	ПустаяТаблица.Колонки.Добавить("rule");
	ПустаяТаблица.Колонки.Добавить("periodClause", ОбщегоНазначения.ОписаниеТипаСтрока(128));
	ПустаяТаблица.Колонки.Добавить("precision");
	ПустаяТаблица.Колонки.Добавить("fault");
	ПустаяТаблица.Колонки.Добавить("tip");
	Возврат ПустаяТаблица;
КонецФункции

Функция ПолучитьПустуюТаблицуКодовПериодичности()
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	ПустаяТаблица.Колонки.Добавить("alt_id", ОбщегоНазначения.ОписаниеТипаСтрока(32));
	Возврат ПустаяТаблица;
КонецФункции

Процедура ДанныеОтчетаВТаблицу(ФайлВырузки, Контекст, Заголовок)
	ТДО = ПолучитьПустуюТаблицуДанныхОтчета(Контекст.КоличествоКолонок);
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ФайлВырузки);
	Исключение
		ЧтениеXML.УстановитьСтроку(ФайлВырузки);
	КонецПопытки;
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) <> "sections" Тогда 
			Продолжить;
		КонецЕсли;
		
		Для Каждого Секция Из Узел.ДочерниеУзлы Цикл 
			КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
			Для Каждого Строка Из Секция.ДочерниеУзлы Цикл
				НовСтр = ТДО.Добавить();
				КодСтроки = Прав("0000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
				НовСтр.section = КодСекции;
				НовСтр.row = КодСтроки;
				Для Инд = 1 По 3 Цикл
					Специфика = Строка.Атрибуты.ПолучитьИменованныйЭлемент("s" + Инд);
					Если Специфика <> Неопределено Тогда 
						НовСтр["s" + Инд] = Специфика.ЗначениеУзла;
						НовСтр["s" + Инд + "_isPresent"] = Истина;
					КонецЕсли;
				КонецЦикла;
				Для Каждого Колонка Из Строка.ДочерниеУзлы Цикл
					КодКолонки = "col" + Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
					Если ТДО.Колонки.Найти(КодКолонки) <> Неопределено Тогда 
						НовСтр[КодКолонки] = Колонка.ДочерниеУзлы[0].ЗначениеУзла;
						НовСтр[КодКолонки + "_isPresent"] = Истина;
					Иначе
						Если "ОсновнойПериод_" = Заголовок Тогда 
							ВызватьИсключение "";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Прервать;
	КонецЦикла;
	
	Контекст.Вставить(Заголовок + "Период", ДокументDOM.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("period").ЗначениеУзла);
	Контекст.Вставить(Заголовок + "ДанныеОтчета", ТДО);
КонецПроцедуры

Функция СформироватьТаблицуЗапрещенныхДляВводаГраф(ДокументDOM)
	Результат = Новый ТаблицаЗначений;
	ОПС = ОбщегоНазначения.ОписаниеТипаСтрока(16);
	Результат.Колонки.Добавить("Секция", ОПС);
	Результат.Колонки.Добавить("Строка", ОПС);
	Результат.Колонки.Добавить("Колонка", ОПС);
	ЗапрещенныеКолонкиПоСекциям = Новый Соответствие;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				ЗапрещенныеКолонкиПоСекциям.Вставить(КодСекции, Новый СписокЗначений);
				Для Каждого УзелКолонки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелКолонки.ИмяУзла) <> "columns" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Колонка Из УзелКолонки.ДочерниеУзлы Цикл
						Если НРег(Колонка.ИмяУзла) <> "column" Тогда
							Продолжить;
						КонецЕсли;
						
						inputType = Колонка.ДочерниеУзлы[0].Атрибуты.ПолучитьИменованныйЭлемент("inputType");
						Если inputType <> Неопределено И inputType.ЗначениеУзла = "0" Тогда
							ЗапрещенныеКолонкиПоСекциям[КодСекции].Добавить(Прав("0000" + Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4));
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				Для Каждого УзелСтроки Из Секция.ДочерниеУзлы Цикл 
					Если НРег(УзелСтроки.ИмяУзла) <> "rows" Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Строка Из УзелСтроки.ДочерниеУзлы Цикл
						Если НРег(Строка.ИмяУзла) <> "row" Тогда
							Продолжить;
						КонецЕсли;
						КодСтроки = Прав("0000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
						ЗапрещенныеКолонкиВСтроке = ЗапрещенныеКолонкиПоСекциям[КодСекции].Скопировать();
						
						Для Каждого Ячейка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Ячейка.ИмяУзла) = "cell" Тогда
								inputType = Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("inputType");
								Если inputType <> Неопределено И inputType.ЗначениеУзла = "0" Тогда
									НовСтр = Результат.Добавить();
									НовСтр.Секция = КодСекции;
									НовСтр.Строка = КодСтроки;
									НовСтр.Колонка = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
								КонецЕсли;
								Если inputType <> Неопределено И inputType.ЗначениеУзла <> "0" Тогда
									КолонкаКод = Прав("0000" + Ячейка.Атрибуты.ПолучитьИменованныйЭлемент("column").ЗначениеУзла, 4);
									Элт = ЗапрещенныеКолонкиВСтроке.НайтиПоЗначению(КолонкаКод);
									Если Элт <> Неопределено Тогда 
										ЗапрещенныеКолонкиВСтроке.Удалить(Элт);
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						Для Каждого Элт Из ЗапрещенныеКолонкиВСтроке Цикл
							НовСтр = Результат.Добавить();
							НовСтр.Секция = КодСекции;
							НовСтр.Строка = КодСтроки;
							НовСтр.Колонка = Элт.Значение;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Свернуть("Секция,Строка,Колонка");
	Возврат Результат;
КонецФункции

Функция ПолучитьТаблицуДанныеШаблона(Шаблон, Контекст) Экспорт 
	ТКС = ПолучитьПустуюТаблицуКонтрольныхСоотношений();
	КодыПериодичности = ПолучитьПустуюТаблицуКодовПериодичности();
	ТТС = ПолучитьПустуюТаблицуТиповСтрок();
	ТМС = ПолучитьПустуюТаблицуМножественныхСтрок();
	МаксКодКолонки = 0;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(Шаблон); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Для Каждого Атрибут Из ДокументDOM.ДочерниеУзлы[0].Атрибуты Цикл
		Если НРег(Атрибут.ИмяУзла) = "idp" Тогда
			Контекст.Вставить("Периодичность", Прав("00" + Атрибут.ЗначениеУзла, 2));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "sections" Тогда
			Для Каждого Секция Из Узел.ДочерниеУзлы Цикл
				Если НРег(Секция.ИмяУзла) <> "section" Тогда
					Продолжить;
				КонецЕсли;
				КодСекции = Прав("000" + Секция.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 3);
				Для Каждого Строка Из Секция.ДочерниеУзлы Цикл
					Если НРег(Строка.ИмяУзла) = "rows" Тогда
						Для Каждого Строка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Строка.ИмяУзла) = "row" Тогда
								ТипСтроки = Строка.Атрибуты.ПолучитьИменованныйЭлемент("type").ЗначениеУзла;
								Если ВРег(ТипСтроки) = "M" Или ВРег(ТипСтроки) = "F" Тогда 
									НовСтр = ТТС.Добавить();
									НовСтр.section = КодСекции;
									НовСтр.row = Прав("0000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
									НовСтр.rowtype = ТипСтроки;
									Если ВРег(ТипСтроки) = "M" Тогда
										Если Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv") = Неопределено Тогда 
											НовСтр.rowtype = "F";
										Иначе
											Для Инд = 1 По СтрЧислоВхождений(Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv").ЗначениеУзла, ",") + 1 Цикл 
												НовСтр["s" + Инд + "_isPresent"] = Истина;
											КонецЦикла;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
								Если ВРег(ТипСтроки) = "M" И Строка.Атрибуты.ПолучитьИменованныйЭлемент("grv") <> Неопределено Тогда 
									НовСтр = ТМС.Добавить();
									НовСтр.section = КодСекции;
									НовСтр.row = Прав("0000" + Строка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла, 4);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли НРег(Строка.ИмяУзла) = "columns" Тогда
						Для Каждого Колонка Из Строка.ДочерниеУзлы Цикл
							Если НРег(Колонка.ИмяУзла) = "column" Тогда
								ТипСтроки = Колонка.Атрибуты.ПолучитьИменованныйЭлемент("type").ЗначениеУзла;
								Если ВРег(ТипСтроки) = "Z" Или ВРег(ТипСтроки) = "F" Тогда
									КодКолонки = Контекст.ОТЧ.ПривестиЗначение(Колонка.Атрибуты.ПолучитьИменованныйЭлемент("code").ЗначениеУзла);
									Если КодКолонки > МаксКодКолонки Тогда 
										МаксКодКолонки = КодКолонки;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Узел Из ДокументDOM.ДочерниеУзлы[0].ДочерниеУзлы Цикл 
		Если НРег(Узел.ИмяУзла) = "controls" Тогда
			Для Каждого Контроль Из Узел.ДочерниеУзлы Цикл 
				НовСтр = ТКС.Добавить();
				НовСтр.precision = 2;
				НовСтр.tip = 1;
				Для Каждого Атрибут Из Контроль.Атрибуты Цикл
					НовСтр[Атрибут.ИмяУзла] = Атрибут.ЗначениеУзла;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли НРег(Узел.ИмяУзла) = "dics" Тогда
			Для Каждого Справочник Из Узел.ДочерниеУзлы Цикл 
				АтрИД = Справочник.Атрибуты.ПолучитьИменованныйЭлемент("id");
				Если АтрИД <> Неопределено И НРег(АтрИД.ЗначениеУзла) = "s_mes" Тогда 
					Инд = 0;
					Для Каждого ИдентификаторПериода Из Справочник.ДочерниеУзлы Цикл 
						АтрИД = ИдентификаторПериода.Атрибуты.ПолучитьИменованныйЭлемент("id");
						Если АтрИД <> Неопределено Тогда
							Инд = Инд + 1;
							НовСтр = КодыПериодичности.Добавить();
							НовСтр.id = АтрИД.ЗначениеУзла;
							Если Контекст.Свойство("Периодичность") Тогда 
								НовСтр.alt_id = Контекст.Периодичность + Прав("00" + Инд, 2);
							Иначе
								НовСтр.alt_id = АтрИД.ЗначениеУзла;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТТС.Свернуть("section,row,rowtype,s1_isPresent,s2_isPresent,s3_isPresent,s1,s2,s3");
	ТМС.Свернуть("section,row");
	Контекст.Вставить("ТаблицаКонтрольныхСоотношений", ТКС);
	Контекст.Вставить("ТаблицаТиповСтрок", ТТС);
	Контекст.Вставить("ТаблицаМножественныхСтрок", ТМС);
	Контекст.Вставить("КоличествоКолонок", МаксКодКолонки);
	Контекст.Вставить("КодыПериодов", КодыПериодичности);
	Контекст.Вставить("РезультатПроверки", ПолучитьПустуюТаблицуПроверокКонтролей());
	Контекст.Вставить("ЗапрещенныеДляВводаГрафы", СформироватьТаблицуЗапрещенныхДляВводаГраф(ДокументDOM));
	Возврат Истина;
КонецФункции

// По результатам перебора всех шаблонов Росстата нашли такие типы условий:
// (&NP in(1,2,3,4,5,6,7,8,9,10,11))
// (&NP>1  ),(&NP=1  ),(&NP>=1  ),(&NP<>3  ),(&NP<3  ),(&NP<=3  )
// (&NP=1 or &NP=3)
// (&NP in(1203,1206,1209,1212))
Функция ПроверитьУсловиеНаПериод(Контекст, УсловиеНаПериод) 
	Если Не ЗначениеЗаполнено(УсловиеНаПериод) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		УсловиеНаПериодПреобразованное = ВРег(УсловиеНаПериод);
		Если СтрНайти(УсловиеНаПериодПреобразованное, "AND") <> 0 Тогда 
			УсловиеНаПериодПреобразованное = "(" + СтрЗаменить(УсловиеНаПериодПреобразованное, "AND", ") И (") + ")";
		КонецЕсли;
		Если СтрНайти(УсловиеНаПериодПреобразованное, "OR") <> 0 Тогда 
			УсловиеНаПериодПреобразованное = "(" + СтрЗаменить(УсловиеНаПериодПреобразованное, "OR", ") ИЛИ (") + ")";
		КонецЕсли;
		Пока Истина Цикл 
			ИндексИн = СтрНайти(УсловиеНаПериодПреобразованное, "IN");
			Если ИндексИн = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ИндОткр = 0;
			ИндЗакр = 0;
			Итер = 2;
			Пока ИндОткр = 0 Или ИндЗакр = 0 Цикл 
				Если Сред(УсловиеНаПериодПреобразованное, ИндексИн + Итер, 1) = "(" И ИндОткр = 0 Тогда 
					ИндОткр = Итер;
				ИначеЕсли Сред(УсловиеНаПериодПреобразованное, ИндексИн + Итер, 1) = ")" И ИндЗакр = 0 Тогда 
					Если ИндОткр = 0 Тогда 
						ВызватьИсключение "";
					КонецЕсли;
					ИндЗакр = Итер;
				КонецЕсли;
				
				Итер = Итер + 1;
				Если Итер > СтрДлина(УсловиеНаПериодПреобразованное) Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				Если ИндОткр <> 0 И ИндЗакр <> 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Условие = "";
			Для Каждого Период Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сред(УсловиеНаПериодПреобразованное, ИндексИн + ИндОткр + 1, ИндЗакр - ИндОткр - 1), ",", Истина) Цикл 
				Периоды = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("id", СокрЛП(Период)));
				Если Периоды.Количество() > 0 Тогда 
					КаноническийПериод = Периоды[0].alt_id;
				Иначе
					КаноническийПериод = СокрЛП(Период);
				КонецЕсли;
				Условие = ?(ЗначениеЗаполнено(Условие), Условие + " ИЛИ ", "") + "(&NP=" + КаноническийПериод + ")";
			КонецЦикла;
			ИндексИнНачало = ИндексИн - 1;
			Пока ИндексИнНачало > 0 Цикл 
				Если Сред(УсловиеНаПериодПреобразованное, ИндексИнНачало, 3) = "&NP" Тогда 
					Прервать;
				КонецЕсли;
				ИндексИнНачало = ИндексИнНачало - 1;
			КонецЦикла;
			Если ИндексИнНачало <= 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			УсловиеНаПериодПреобразованное = "(" + Лев(УсловиеНаПериодПреобразованное, ИндексИнНачало - 1) + ") ИЛИ (" 
											+ Условие + ") ИЛИ (" + Сред(УсловиеНаПериодПреобразованное, ИндексИн + ИндЗакр + 1) + ")";
		КонецЦикла;
		
		ЕстьАльИд = Ложь;
		Для Каждого СтрПериоды Из Контекст.КодыПериодов Цикл 
			Если СтрНайти(УсловиеНаПериод, СтрПериоды.alt_id) > 0 Тогда 
				ЕстьАльИд = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Периоды = Контекст.КодыПериодов.НайтиСтроки(Новый Структура("alt_id", СокрЛП(Контекст.ОсновнойПериод_Период)));
		Если Периоды.Количество() > 0 Тогда 
			Если ЕстьАльИд Тогда
				ОсновнойПериод_Период = Периоды[0].alt_id;
			Иначе
				ОсновнойПериод_Период = Периоды[0].id;
			КонецЕсли;
		Иначе
			ОсновнойПериод_Период = СокрЛП(Контекст.ОсновнойПериод_Период);
		КонецЕсли;
		
		УсловиеНаПериодПреобразованное = СтрЗаменить(УсловиеНаПериодПреобразованное, "()", "ЛОЖЬ");
		УсловиеНаПериодПреобразованное = СтрЗаменить(УсловиеНаПериодПреобразованное, "&NP", ОсновнойПериод_Период);
		Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(УсловиеНаПериодПреобразованное);
	Исключение
		Возврат Истина;
	КонецПопытки;
КонецФункции

Функция ЗаменитьСуммуВУсловии(Условие)
	УсловиеПреобразованное = НРег(Условие);
	Если СтрНайти(УсловиеПреобразованное, "sum") = 0 Тогда 
		Возврат УсловиеПреобразованное;
	КонецЕсли;
	
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "sum(");
		СимволОткр = "(";
		СимволЗакр = ")";
		Если ИндексСум = 0 Тогда
			ИндексСум = СтрНайти(УсловиеПреобразованное, "sum{");
			СимволОткр = "{";
			СимволЗакр = "}";
			Если ИндексСум = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		СтрДлинаУсловиеПреобразованное = СтрДлина(УсловиеПреобразованное);
		Пока Счетчик > 0 И Инд < СтрДлинаУсловиеПреобразованное Цикл 
			СледСимвол = Сред(УсловиеПреобразованное, ИндексСум + Инд, 1);
			Если СледСимвол = СимволОткр Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли СледСимвол = СимволЗакр Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	Возврат УсловиеПреобразованное;
КонецФункции

Функция ЭтоВариацияПоСтрокам(Контекст, Условие, Строки)
	Аргументы = ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие);
	
	ЕстьВариация = Ложь;
	Для Каждого КЗ Из Аргументы Цикл 
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 1);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 3);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		Для Инд = 2 По 6 Цикл
			Если Инд = 3 Тогда 
				Продолжить;
			КонецЕсли;
			
			Специфика = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
			Если Не ЗначениеЗаполнено(Специфика) Тогда 
				Прервать;
			КонецЕсли;
			Если СтрНайти(Специфика, "-") > 0 Или СтрНайти(Специфика, ",") > 0 Или СтрНайти(Специфика, "*") > 0 Тогда 
				ЕстьВариация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьВариация Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Строки = Новый ТаблицаЗначений;
	Строки.Колонки.Добавить("section");
	Строки.Колонки.Добавить("row");
	Строки.Колонки.Добавить("s1", Контекст.ОПС);
	Строки.Колонки.Добавить("s1_isPresent", Контекст.ОПБ);
	Строки.Колонки.Добавить("s2", Контекст.ОПС);
	Строки.Колонки.Добавить("s2_isPresent", Контекст.ОПБ);
	Строки.Колонки.Добавить("s3", Контекст.ОПС);
	Строки.Колонки.Добавить("s3_isPresent", Контекст.ОПБ);
	
	Для Каждого Аргумент Из ПолучитьВсеАргументыВыражения(Контекст, Условие) Цикл 
		Если СтрНачинаетсяС(Аргумент.Ключ, "{{") Тогда 
			ТаблицаДанных = Контекст.ПредыдущийПериод_ДанныеОтчета;
		Иначе
			ТаблицаДанных = Контекст.ОсновнойПериод_ДанныеОтчета;
		КонецЕсли;
		
		ОбработкаВставкиСтрокиВТаблицуИзФормата(Контекст, Аргумент.Ключ, Строки);
		Если СтрЧислоВхождений(Аргумент.Ключ, "[") > 3 Тогда 
			Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				Если СтрокаТаблицы.s1_IsPresent Или СтрокаТаблицы.s2_IsPresent Или СтрокаТаблицы.s3_IsPresent Тогда 
					ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Аргумент.Ключ, Строки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Строки.Свернуть("section,row,s1,s2,s3,s1_isPresent,s2_isPresent,s3_isPresent");
	Возврат Истина;
КонецФункции

Функция ЭтоЗапрещеннаяДляВводаКолонка(Контекст, Секция, Строка, Колонка)
	Возврат Контекст.ЗапрещенныеДляВводаГрафы.НайтиСтроки(Новый Структура("Секция, Строка, Колонка", Секция, Строка, Колонка)).Количество() > 0;
КонецФункции

Функция ЭтоВариацияПоГрафам(Контекст, Условие, Графы)
	УсловиеПреобразованное = ЗаменитьСуммуВУсловии(Условие);
	Аргументы = Новый Соответствие;
	ЕстьПредидущийПериод = СтрНайти(УсловиеПреобразованное, "{{") > 0;
	Пока Истина Цикл
		ИндексОткр = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексОткр = 0 Тогда 
			Прервать;
		КонецЕсли;
		Если ЕстьПредидущийПериод И Сред(УсловиеПреобразованное, ИндексОткр, 2) = "{{" Тогда 
			ИндексЗакр = СтрНайти(УсловиеПреобразованное, "}}");
			Аргумент = Сред(УсловиеПреобразованное, ИндексОткр + 2, ИндексЗакр - ИндексОткр - 2);
			УсловиеПреобразованное = Сред(УсловиеПреобразованное, ИндексЗакр + 2);
		Иначе
			ИндексЗакр = СтрНайти(УсловиеПреобразованное, "}");
			Аргумент = Сред(УсловиеПреобразованное, ИндексОткр + 1, ИндексЗакр - ИндексОткр - 1);
			УсловиеПреобразованное = Сред(УсловиеПреобразованное, ИндексЗакр + 1);
		КонецЕсли;
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	МассивГраф = Новый СписокЗначений;
	ВариантыГраф = Новый Соответствие;
	ИтогГрСтр = "";
	Для Каждого КЗ Из Аргументы Цикл
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 1);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		СекцияАргумента = Прав("000" + АргСкобок, 3);
		
		АргСкобок = ПолучитьАргументСкобки(КЗ.Ключ, 2);
		Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		СтрокаАргумента = Прав("0000" + АргСкобок, 4);
		
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Новый Структура("section, row", СекцияАргумента, СтрокаАргумента)).Количество() > 0 Тогда 
			Для Инд = 4 По 6 Цикл 
				Специфика = ПолучитьАргументСкобки(КЗ.Ключ, Инд);
				Если ЗначениеЗаполнено(Специфика) И СтрНайти(Специфика, "-") > 0 Или СтрНайти(Специфика, ",") > 0 Или СтрНайти(Специфика, "*") > 0 Тогда 
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ГрСтр = ПолучитьАргументСкобки(КЗ.Ключ, 3);
		Если Не (СтрНайти(ГрСтр, "-") > 0 Или СтрНайти(ГрСтр, ",") > 0 Или СтрНайти(ГрСтр, "*") > 0) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивГраф.Очистить();
		Для Каждого Кол Из Контекст.ОсновнойПериод_ДанныеОтчета.Колонки Цикл 
			КолИмя = Сред(Кол.Имя, 4);
			КолЧисло = Контекст.ОТЧ.ПривестиЗначение(КолИмя);
			Если Не КолЧисло = 0 
				И ЧислоВходитВДиапазон(Контекст, КолЧисло, ГрСтр)
				И Не ЭтоЗапрещеннаяДляВводаКолонка(Контекст, СекцияАргумента, СтрокаАргумента, КолИмя) Тогда 
				
				Если МассивГраф.НайтиПоЗначению(КолИмя) = Неопределено Тогда 
					МассивГраф.Добавить(КолИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		МассивГраф.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ИтогГрСтр = "";
		Для Каждого Зн Из МассивГраф Цикл 
			ИтогГрСтр = ИтогГрСтр + Зн.Значение;
		КонецЦикла;
		ВариантыГраф.Вставить(ИтогГрСтр);
	КонецЦикла;
	
	Графы = ИтогГрСтр;
	Возврат (ВариантыГраф.Количество() = 1);
КонецФункции

Функция ЧислоВходитВДиапазон(Контекст, Число, Диапазон)
	Если Диапазон = "*" Тогда 
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Число) <> Тип("Число") Тогда 
		ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Число);
	Иначе
		ПриведенноеЧисло = Число;
	КонецЕсли;
	
	Если СтрНайти(Диапазон, ",") > 0 Тогда 
		Для Каждого Терм Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Диапазон, ",") Цикл 
			Если ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Терм) Тогда 
				Возврат Истина;
			ИначеЕсли СтрНайти(Терм, "-") > 0 Тогда
				ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Терм, "-");
				Если ПриведенноеЧисло >= Контекст.ОТЧ.ПривестиЗначение(ВерхНиз[0]) И ПриведенноеЧисло <= Контекст.ОТЧ.ПривестиЗначение(ВерхНиз[1]) Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВерхНиз = СтрНайти(Диапазон, "-");
		Если ВерхНиз > 0 Тогда
			Если ПриведенноеЧисло >= Контекст.ОТЧ.ПривестиЗначение(Лев(Диапазон, ВерхНиз - 1)) И ПриведенноеЧисло <= Контекст.ОТЧ.ПривестиЗначение(Сред(Диапазон, ВерхНиз + 1)) Тогда 
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли ПриведенноеЧисло = Контекст.ОТЧ.ПривестиЗначение(Диапазон) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция СпецификаВходитВДиапазон(Специфика, Диапазон)
	Если Диапазон = "*" Или Специфика = Диапазон Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(Диапазон, ",") > 0 Тогда
		Для Каждого Терм Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Диапазон, ",") Цикл 
			Если Специфика = Терм Тогда 
				Возврат Истина;
			ИначеЕсли СтрНайти(Терм, "-") > 0 Тогда
				ВерхНиз = СтрНайти(Терм, "-");
				Если Специфика >= Лев(Терм, ВерхНиз - 1) И Специфика <= Сред(Терм, ВерхНиз + 1) Тогда 
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Специфика = Диапазон Тогда 
			Возврат Истина;
		ИначеЕсли СтрНайти(Диапазон, "-") > 0 Тогда
			ВерхНиз = СтрНайти(Диапазон, "-");
			Если Специфика >= Лев(Диапазон, ВерхНиз - 1) И Специфика <= Сред(Диапазон, ВерхНиз + 1) Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ЭтоСкалярноеУсловие(Контекст, Условие)
	УсловиеПреобразованное = ВРег(Условие);
	УсловиеПреобразованное = СтрЗаменить(УсловиеПреобразованное, " ", "");
	УсловиеПреобразованное = СтрЗаменить(УсловиеПреобразованное, Символы.НПП, "");
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "SUM(");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
		
	Пока Истина Цикл 
		ИндексСум = СтрНайти(УсловиеПреобразованное, "SUM");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 4;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	
	Пока Истина Цикл
		ИндексСум = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Возврат Истина;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(УсловиеПреобразованное, ИндексСум, Инд);
		Отбор = Новый Структура;
		Для Итер = 1 По 3 Цикл 
			ОткрСк = СтрНайти(Аргумент, "[", НаправлениеПоиска.СНачала, 1, Итер);
			ЗакрСк = СтрНайти(Аргумент, "]", НаправлениеПоиска.СНачала, 1, Итер);
			Если ОткрСк = 0 Или ЗакрСк = 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
			ТекОперанд = Сред(Аргумент, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если СтрНайти(ТекОперанд, "-") <> 0 Или СтрНайти(ТекОперанд, ",") <> 0 Или СтрНайти(ТекОперанд, "*") <> 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
			Если Итер = 1 Тогда 
				Отбор.Вставить("section", Прав("000" + ТекОперанд, 3));
			ИначеЕсли Итер = 2 Тогда 
				Отбор.Вставить("row", Прав("0000" + ТекОперанд, 4));
			КонецЕсли;
		КонецЦикла;
		
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Отбор).Количество() > 0 Тогда 
			Если СтрНайти(Аргумент, "-") <> 0 Или СтрНайти(Аргумент, ",") <> 0 Или СтрНайти(Аргумент, "*") <> 0 Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаменитьВыражение(ИсходнаяСтрока, НаЧтоЗаменяем, ЧтоЗаменили, ОткрывающийСимвол)
	ИндексОткр = СтрНайти(ИсходнаяСтрока, ОткрывающийСимвол);
	Если ИндексОткр = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ОткрывающийСимвол = "(" Тогда 
		ЗакрывающийСимвол = ")";
	ИначеЕсли ОткрывающийСимвол = "{" Тогда 
		ЗакрывающийСимвол = "}";
	ИначеЕсли ОткрывающийСимвол = "{{" Тогда 
		ЗакрывающийСимвол = "}}";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ИндексЗакр = СтрНайти(ИсходнаяСтрока, ЗакрывающийСимвол, НаправлениеПоиска.СНачала, ИндексОткр);
	Если ИндексЗакр = 0 Тогда 
		ВызватьИсключение "";
	КонецЕсли;
	ЧтоЗаменили = Сред(ИсходнаяСтрока, ИндексОткр, ИндексЗакр - ИндексОткр + СтрДлина(ЗакрывающийСимвол));
	ИсходнаяСтрока = Лев(ИсходнаяСтрока, ИндексОткр - 1) + НаЧтоЗаменяем + Сред(ИсходнаяСтрока, ИндексЗакр + СтрДлина(ЗакрывающийСимвол));
	Возврат Истина;
КонецФункции

Функция ВычислитьСкалярноеУсловие(Условие, Контекст, РазрядностьОкругления = 2)
	ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
	СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
	КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
	МассивАргументовСуммирований = Новый Массив;
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		АргументыСуммирований = Новый Структура;
		АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
		АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
		СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
		СтрРез = СтрЗаменить(СтрРез, ",", ".");
		СтрРез = СтрЗаменить(СтрРез, " ", "");
		СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
		АргументыСуммирований.Вставить("Результат", СтрРез);
		МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
	КонецЦикла;
	
	ПроверкаВыражения(ПреобразованноеУсловие);
	Для Инд = 1 По КоличествоСуммирований Цикл
		АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
		ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
								+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
		ПроверкаВыражения(ПреобразованноеУсловие);
	КонецЦикла;
	
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
	ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст);
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
	ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие);
КонецФункции

Функция ВычислитьУсловиеПоГрафам(Условие, Контекст, РазрядностьОкругления = 2, Графы = Неопределено)
	ГрафыИтер = Графы;
	СписокОтбораКолонок = Новый СписокЗначений;
	Пока Истина Цикл
		Кол = Лев(ГрафыИтер, 4);
		ГрафыИтер = Сред(ГрафыИтер, 5);
		Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			СписокОтбораКолонок.Очистить();
			СписокОтбораКолонок.Добавить(Кол);
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач + 3, ИндТек - ИндНач - 2), Контекст, СписокОтбораКолонок));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол);
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
		Если Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(Выражение, Контекст, АргументПоискаСтроки)
	Аргументы = Новый Соответствие;
	Инд = 0;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Выражение, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Выражение, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	ВыражениеПреобразованное = СтрЗаменить(Выражение, " ", "");
	ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, Символы.НПП, "");
	ПроверкаВыражения(ВыражениеПреобразованное);
	
	Для Каждого КЗ Из Аргументы Цикл 
		КолонкаНачало = СтрНайти(КЗ.Значение, "[", НаправлениеПоиска.СНачала, 1, 3);
		КолонкаКонец = СтрНайти(КЗ.Значение, "]", НаправлениеПоиска.СНачала, 1, 3);
		Колонка = "col" + Прав("0000" + Сред(КЗ.Значение, КолонкаНачало + 1, КолонкаКонец - КолонкаНачало - 1), 4);
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("section", АргументПоискаСтроки["section"]);
		СтруктураОтбора.Вставить("row", АргументПоискаСтроки["row"]);
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
			Для Инд = 1 По 3 Цикл 
				Если АргументПоискаСтроки["s" + Инд + "_isPresent"] Тогда 
					СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Истина);
					СтруктураОтбора.Вставить("s" + Инд, АргументПоискаСтроки["s" + Инд]);
				Иначе
					СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
		ПодставляемоеЗначение = "null";
		Таблица = ?(СтрНачинаетсяС(КЗ.Значение, "{{"), "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
		ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
		Для Каждого ОтобраннаяСтрока Из ОтобранныеСтроки Цикл 
			Если Контекст[Таблица].Колонки.Найти(Колонка) <> Неопределено
				И ОтобраннаяСтрока[Колонка + "_isPresent"] Тогда
				
				Если СтрокаВходитВДиапазон(Контекст, КЗ.Значение, ОтобраннаяСтрока) Тогда 
					ПодставляемоеЗначение = ОтобраннаяСтрока[Колонка];
					Прервать;
				КонецЕсли;
			КонецЕсли;
		Конеццикла;
		
		ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, КЗ.Ключ, ПодставляемоеЗначение);
	КонецЦикла;
	
	ПроверкаВыражения(ВыражениеПреобразованное);
	Возврат ВыражениеПреобразованное;
КонецФункции

Функция ЗаменитьСкалярныеАргументыВВыражении(Выражение, Контекст, Колонка = Неопределено, СтрокаОтбора = Неопределено)
	Аргументы = Новый Соответствие;
	Инд = 0;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Выражение, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Инд = Инд + 1;
			ЧтоЗаменили = "";
			НаЧтоЗаменили = "%" + Инд + "%";
			Если Не ЗаменитьВыражение(Выражение, НаЧтоЗаменили, ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			Аргументы[НаЧтоЗаменили] = ЧтоЗаменили;
		КонецЦикла;
	КонецЦикла;
	ВыражениеПреобразованное = СтрЗаменить(Выражение, " ", "");
	ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, Символы.НПП, "");
	ПроверкаВыражения(ВыражениеПреобразованное);
	
	Для Каждого КЗ Из Аргументы Цикл 
		Секция = Прав("000" + ПолучитьАргументСкобки(КЗ.Значение, 1), 3);
		Строка = Прав("0000" + ПолучитьАргументСкобки(КЗ.Значение, 2), 4);
		Если ЗначениеЗаполнено(Колонка) Тогда 
			КолонкаОтбор = "col" + Прав("0000" + Колонка, 4);
		Иначе
			КолонкаОтбор = "col" + Прав("0000" + ПолучитьАргументСкобки(КЗ.Значение, 3), 4);
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("section", Секция);
		СтруктураОтбора.Вставить("row", Строка);
		
		Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Новый Структура("section, row", Секция, Строка)).Количество() > 0 Тогда 
			КоличествоСпецифик = СтрЧислоВхождений(КЗ.Значение, "[");
			Для Инд = 4 По КоличествоСпецифик Цикл
				Специфика = ВРег(ПолучитьАргументСкобки(КЗ.Значение, Инд));
				СтруктураОтбора.Вставить("s" + (Инд - 3) + "_isPresent", Истина);
				СтруктураОтбора.Вставить("s" + (Инд - 3), Специфика);
			КонецЦикла;
		КонецЕсли;
		
		ПодставляемоеЗначение = "null";
		Таблица = ?(СтрНачинаетсяС(КЗ.Значение, "{{"), "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
		ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
		Если СтрокаОтбора <> Неопределено Тогда 
			ВремТаб = Контекст[Таблица].СкопироватьКолонки();
			Для Каждого ОтобраннаяСтр Из ОтобранныеСтроки Цикл 
				ЗаполнитьЗначенияСвойств(ВремТаб.Добавить(), ОтобраннаяСтр);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("section", СтрокаОтбора.section);
			СтруктураОтбора.Вставить("row", СтрокаОтбора.row);
			Для Инд = 4 По 6 Цикл
				СтруктураОтбора.Вставить("s" + (Инд - 3) + "_isPresent", СтрокаОтбора["s" + (Инд - 3) + "_isPresent"]);
				Если СтрокаОтбора["s" + (Инд - 3) + "_isPresent"] Тогда 
					СтруктураОтбора.Вставить("s" + (Инд - 3), СтрокаОтбора["s" + (Инд - 3)]);
				КонецЕсли;
			КонецЦикла;
			
			ОтобранныеСтроки = ВремТаб.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		Если ОтобранныеСтроки.Количество() > 0 Тогда 
			Если Контекст[Таблица].Колонки.Найти(КолонкаОтбор) <> Неопределено
				И ОтобранныеСтроки[0][КолонкаОтбор + "_isPresent"] Тогда
				
				ПодставляемоеЗначение = ОтобранныеСтроки[0][КолонкаОтбор];
			КонецЕсли;
		КонецЕсли;
		
		ВыражениеПреобразованное = СтрЗаменить(ВыражениеПреобразованное, КЗ.Ключ, ПодставляемоеЗначение);
	КонецЦикла;
	
	ПроверкаВыражения(ВыражениеПреобразованное);
	Возврат ВыражениеПреобразованное;
КонецФункции

Функция ПолучитьЕдинственныйАргументВыражения(АргументСуммирования)
	Результат = АргументСуммирования;
	Замен = 0;
	ЧтоЗаменили = "";
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("{{,{", ",") Цикл 
		Пока Истина Цикл 
			Если СтрНайти(Результат, Элт) = 0 Тогда 
				Прервать;
			КонецЕсли;
			Если Не ЗаменитьВыражение(Результат, "", ЧтоЗаменили, Элт) Тогда 
				Прервать;
			КонецЕсли;
			Если ЧтоЗаменили = "" Или Замен = 1 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ЧтоЗаменили;
КонецФункции

Функция СтрокаВходитВДиапазон(Контекст, Выборка, Стр)
	Если Контекст.ТаблицаМножественныхСтрок.НайтиСтроки(Новый Структура("section, row", Стр.section, Стр.row)).Количество() > 0 Тогда 
		КоличествоСпецифик = СтрЧислоВхождений(Выборка, "[");
		Для Инд = 4 По КоличествоСпецифик Цикл 
			Если Не Стр["s" + (Инд-3) + "_isPresent"] Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		КоличествоСпецифик = 0;
	КонецЕсли;
	
	ОТЧ = Новый ОписаниеТипов("Число");
	КодСекции = ОТЧ.ПривестиЗначение(Стр.section);
	Результат = Ложь;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, 1)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = КодСекции Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= КодСекции И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= КодСекции Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не Результат Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	КодСтроки = ОТЧ.ПривестиЗначение(Стр.row);
	Результат = Ложь;
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, 2)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = КодСтроки Тогда 
			Результат = Истина;
			Прервать;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= КодСтроки И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= КодСтроки Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не Результат Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 4 По КоличествоСпецифик Цикл 
		Специфика = Стр["s" + (Инд - 3)];
		Результат = Ложь;
		Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолучитьАргументСкобки(Выборка, Инд)) Цикл 
			Если Элт = "*" Или Элт = НРег(Специфика) Тогда 
				Результат = Истина;
				Прервать;
			КонецЕсли;
			Если СтрНайти(Элт, "-") > 0 Тогда
				ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
				Если ВерхНиз[0] <= Специфика И ВерхНиз[1] >= Специфика Тогда 
					Результат = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Не Результат Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция КолонкаВходитВДиапазон(Выборка, Кол)
	ОТЧ = Новый ОписаниеТипов("Число");
	ИндОткр = СтрНайти(Выборка, "[", НаправлениеПоиска.СНачала, 1, 3);
	ИндЗакр = СтрНайти(Выборка, "]", НаправлениеПоиска.СНачала, 1, 3);
	
	Для Каждого Элт Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Сред(Выборка, ИндОткр + 1, ИндЗакр - ИндОткр - 1)) Цикл 
		Если Элт = "*" Или ОТЧ.ПривестиЗначение(Элт) = Кол Тогда 
			Возврат Истина;
		КонецЕсли;
		Если СтрНайти(Элт, "-") > 0 Тогда
			ВерхНиз = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элт, "-");
			Если ОТЧ.ПривестиЗначение(ВерхНиз[0]) <= Кол И ОТЧ.ПривестиЗначение(ВерхНиз[1]) >= Кол Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ВычислитьАргументСуммированияВУсловии(АргументСуммирования, Контекст, ОтборПоКолонкам = Неопределено)
	АргументСуммированияПреобразованная = "isnull(" + АргументСуммирования + ", 0)";
	Выборка = ПолучитьЕдинственныйАргументВыражения(АргументСуммированияПреобразованная);
	
	Итог = 0;
	Таблица = ?(СтрНайти(АргументСуммирования, "{{") > 0, "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		АргументСуммированияПреобразованная = СтрЗаменить(АргументСуммированияПреобразованная, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	Для Каждого Стр Из Контекст[Таблица] Цикл 
		Если Не СтрокаВходитВДиапазон(Контекст, Выборка, Стр) Тогда 
			Продолжить;
		КонецЕсли;
		
		Кол = 0;
		Пока Кол <= Контекст[Таблица].Колонки.Количество() / 2 Цикл 
			Кол = Кол + 1;
			Если Не КолонкаВходитВДиапазон(Выборка, Кол) Тогда 
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ОтборПоКолонкам) = Тип("СписокЗначений")
				И ОтборПоКолонкам.НайтиПоЗначению(Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=")) = Неопределено Тогда 
				
				Продолжить;
			КонецЕсли;
			НазваниеКолонки = "col" + Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=");
			Если Контекст[Таблица].Колонки.Найти(НазваниеКолонки) = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			Если Стр[НазваниеКолонки + "_isPresent"] Тогда 
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, Стр[НазваниеКолонки]));
			Иначе
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, "null"));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Итог;
КонецФункции

Функция ВычислитьАргументСуммированияВУсловииПоСтроке(АргументСуммирования, Контекст, СтрокаОтбора)
	АргументСуммированияПреобразованная = "isnull(" + АргументСуммирования + ", 0)";
	Выборка = ПолучитьЕдинственныйАргументВыражения(АргументСуммированияПреобразованная);
	
	Итог = 0;
	Таблица = ?(СтрНайти(АргументСуммирования, "{{") > 0, "ПредыдущийПериод_ДанныеОтчета", "ОсновнойПериод_ДанныеОтчета");
	Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
		АргументСуммированияПреобразованная = СтрЗаменить(АргументСуммированияПреобразованная, КЗ.Ключ, КЗ.Значение);
	КонецЦикла;
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("section", СтрокаОтбора.section);
	СтруктураОтбора.Вставить("row", СтрокаОтбора.row);
	СтруктураОтбора.Вставить("rowtype", "M");
	
	ТипыСтрок = Контекст.ТаблицаТиповСтрок.НайтиСтроки(СтруктураОтбора);
	Если ТипыСтрок.Количество() > 0 Тогда
		Для Инд = 1 По 3 Цикл 
			Если ТипыСтрок[0]["s" + Инд + "_isPresent"] Тогда
				СтруктураОтбора.Вставить("s" + Инд + "_isPresent", Истина);
				СтруктураОтбора.Вставить("s" + Инд, СтрокаОтбора["s" + Инд]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СтруктураОтбора.Удалить("rowtype");
	
	ОтобранныеСтроки = Контекст[Таблица].НайтиСтроки(СтруктураОтбора);
	ИндОткСк = СтрНайти(АргументСуммирования, "[", НаправлениеПоиска.СНачала, 1, 3);
	ИндЗакрСк = СтрНайти(АргументСуммирования, "]", НаправлениеПоиска.СНачала, 1, 3);
	ВариацииГраф = Сред(АргументСуммирования, ИндОткСк + 1, ИндЗакрСк - ИндОткСк - 1);
	Для Каждого Стр Из ОтобранныеСтроки Цикл 
		Кол = 0;
		Пока Кол <= Контекст.КоличествоКолонок Цикл
			Кол = Кол + 1;
			Если Не КолонкаВходитВДиапазон(ВариацииГраф, Кол) Тогда 
				Продолжить;
			КонецЕсли;
			НазваниеКолонки = "col" + Формат(Кол, "ЧЦ=4; ЧВН=; ЧГ=");
			Если Стр[НазваниеКолонки + "_isPresent"] Тогда 
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, Стр[НазваниеКолонки]));
			Иначе
				Итог = Итог + ОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрЗаменить(АргументСуммированияПреобразованная, Выборка, "null"));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Итог;
КонецФункции

Функция ЭтоВариацияПоСтрокамИлиГрафам(Контекст, Условие, СтрокиИГрафы)
	УсловиеПреобразованное = ЗаменитьСуммуВУсловии(Условие);
	Аргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексСум = СтрНайти(УсловиеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд < СтрДлина(УсловиеПреобразованное) Цикл 
			Если Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(УсловиеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(УсловиеПреобразованное, ИндексСум, Инд);
		УсловиеПреобразованное = Лев(УсловиеПреобразованное, ИндексСум - 1) + "(@)" + Сред(УсловиеПреобразованное, ИндексСум + Инд);
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	ЕстьВариация = Ложь;
	Для Каждого КЗ Из Аргументы Цикл 
		Для Инд = 1 По 3 Цикл 
			ОткрСк = СтрНайти(КЗ.Ключ, "[", НаправлениеПоиска.СНачала, 1, Инд);
			ЗакрСк = СтрНайти(КЗ.Ключ, "]", НаправлениеПоиска.СНачала, 1, Инд);
			АргСкобок = Сред(КЗ.Ключ, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если Контекст.ОТЧ.ПривестиЗначение(АргСкобок) = 0 Или СтрНайти(АргСкобок, ",") > 0 Тогда 
				ЕстьВариация = Истина;
			КонецЕсли;
		КонецЦикла;
		Для Инд = 4 По 6 Цикл 
			ОткрСк = СтрНайти(КЗ.Ключ, "[", НаправлениеПоиска.СНачала, 1, Инд);
			ЗакрСк = СтрНайти(КЗ.Ключ, "]", НаправлениеПоиска.СНачала, 1, Инд);
			Если ОткрСк = 0 Или ЗакрСк = 0 Тогда 
				Прервать;
			КонецЕсли;
			АргСкобок = Сред(КЗ.Ключ, ОткрСк + 1, ЗакрСк - ОткрСк - 1);
			Если СтрНайти(АргСкобок, ",") > 0 Или СтрНайти(АргСкобок, "-") > 0 Или СтрНайти(АргСкобок, "*") > 0 Тогда 
				ЕстьВариация = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если Не ЕстьВариация Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	СтрокиИГрафы = Новый ТаблицаЗначений;
	СтрокиИГрафы.Колонки.Добавить("section");
	СтрокиИГрафы.Колонки.Добавить("row");
	СтрокиИГрафы.Колонки.Добавить("s1");
	СтрокиИГрафы.Колонки.Добавить("s1_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("s2");
	СтрокиИГрафы.Колонки.Добавить("s2_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("s3");
	СтрокиИГрафы.Колонки.Добавить("s3_isPresent", Контекст.ОПБ);
	СтрокиИГрафы.Колонки.Добавить("columns");
	
	Для Каждого Аргумент Из Аргументы Цикл 
		Если СтрНачинаетсяС(Аргумент.Ключ, "{{") Тогда 
			ТаблицаДанных = Контекст.ПредыдущийПериод_ДанныеОтчета;
		Иначе
			ТаблицаДанных = Контекст.ОсновнойПериод_ДанныеОтчета;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл 
			Если СтрокаТаблицы.s1_IsPresent Или СтрокаТаблицы.s2_IsPresent Или СтрокаТаблицы.s3_IsPresent Тогда 
				ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Аргумент.Ключ, СтрокиИГрафы)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Процедура ОбработкаВставкиСтрокиВТаблицуИзФормата(Контекст, Операнд, СтрокиИГрафы)
	Для Каждого Стр Из Контекст.ТаблицаТиповСтрок Цикл
		Если Стр.rowtype <> "F" Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокиИГрафы.НайтиСтроки(Новый Структура("section, row", Стр.section, Стр.row)).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначОтбора = ПолучитьАргументСкобки(Операнд, 1);
		Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.section), ЗначОтбора) Тогда 
			Продолжить;
		КонецЕсли;
		ЗначОтбора = ПолучитьАргументСкобки(Операнд, 2);
		Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(Стр.row), ЗначОтбора) Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокиИГрафы.Добавить(), Стр);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаВставкиСтрокиВТаблицу(Контекст, СтрокаТаблицы, Операнд, СтрокиИГрафы)
	КоличествоОтборов = СтрЧислоВхождений(Операнд, "[");
	Если КоличествоОтборов >= 6 И Не СтрокаТаблицы.s3_isPresent 
		Или КоличествоОтборов >= 5 И Не СтрокаТаблицы.s2_isPresent 
		Или КоличествоОтборов >= 4 И Не СтрокаТаблицы.s1_isPresent Тогда 
		
		Возврат;
	КонецЕсли;
	
	ЗначОтбора = ПолучитьАргументСкобки(Операнд, 1);
	Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(СтрокаТаблицы.section), ЗначОтбора) Тогда 
		Возврат;
	КонецЕсли;
	ЗначОтбора = ПолучитьАргументСкобки(Операнд, 2);
	Если Не ЧислоВходитВДиапазон(Контекст, Контекст.ОТЧ.ПривестиЗначение(СтрокаТаблицы.row), ЗначОтбора) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Инд = 4 По 6 Цикл 
		ЗначОтбора = ПолучитьАргументСкобки(Операнд, Инд);
		Если Не ЗначениеЗаполнено(ЗначОтбора) Тогда 
			Прервать;
		КонецЕсли;
		Если Не СпецификаВходитВДиапазон(СтрокаТаблицы["s" + (Инд - 3)], ЗначОтбора) Тогда 
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НовСтр = СтрокиИГрафы.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицы);
	
	Если СтрокиИГрафы.Колонки.Найти("columns") = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИтогГрСтр = "";
	МассивГраф = Новый СписокЗначений;
	ГрСтр = ПолучитьАргументСкобки(Операнд, 3);
	
	Для Каждого Кол Из СтрокаТаблицы.Владелец().Колонки Цикл 
		КолЧисло = Контекст.ОТЧ.ПривестиЗначение(Сред(Кол.Имя, 4));
		Если Не КолЧисло = 0 И ЧислоВходитВДиапазон(Контекст, КолЧисло, ГрСтр) Тогда 
			МассивГраф.Добавить(Сред(Кол.Имя, 4));
		КонецЕсли;
	КонецЦикла;
	МассивГраф.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Для Каждого Зн Из МассивГраф Цикл 
		ИтогГрСтр = ИтогГрСтр + Зн.Значение;
	КонецЦикла;
	НовСтр.columns = ИтогГрСтр;
КонецПроцедуры

Функция ВычислитьУсловиеПоСтрокам(Условие, Контекст, РазрядностьОкругления = 2, Строки = Неопределено)
	ОбработкаВыполнена = Ложь;
	Для Каждого Стр Из Строки Цикл
		НеобходимаОбработка = Ложь;
		Для Каждого КЗ Из ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Условие) Цикл 
			Если СтрокаВходитВДиапазон(Контекст, КЗ.Ключ, Стр) Тогда 
				НеобходимаОбработка = Истина;
				ОбработкаВыполнена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловииПоСтроке(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст, Стр));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(ПреобразованноеУсловие, Контекст, Стр);
		Если (НеобходимаОбработка Или (Не ОбработкаВыполнена И Строки.Индекс(Стр) = Строки.Количество() - 1))
			И Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВычислитьБезусловноеВыражениеПоСтрокамИГрафам(Контекст, Выражение, РазрядностьОкругления = 2)
	ВыражениеПреобразованное = НРег(Выражение);
	СтрДлПреобразованноеУсловие = СтрДлина(ВыражениеПреобразованное);
	КоличествоСуммирований = СтрЧислоВхождений(ВыражениеПреобразованное, "sum(");
	АргументыСуммирований = Новый Соответствие;
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ВыражениеПреобразованное, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек <= СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ВыражениеПреобразованное, ИндТек, 1) = "(" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндТек, 1) = ")" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		ВыражениеВрем = СокрЛП(Сред(ВыражениеПреобразованное, ИндНач+3, ИндТек - ИндНач - 2));
		Пока Лев(ВыражениеВрем, 1) = "(" Цикл 
			ВыражениеВрем =СокрЛП(Сред(ВыражениеВрем, 2, СтрДлина(ВыражениеВрем) - 2));
		КонецЦикла;
		ПроверкаВыражения(ВыражениеВрем);
		АргументыСуммирований.Вставить(ВыражениеВрем);
	КонецЦикла;
	СтрДлПреобразованноеУсловие = СтрДлина(ВыражениеПреобразованное);
	КоличествоСуммирований = СтрЧислоВхождений(ВыражениеПреобразованное, "sum{");
	Для Инд = 1 По КоличествоСуммирований Цикл 
		ИндНач = СтрНайти(ВыражениеПреобразованное, "sum{", НаправлениеПоиска.СНачала, 1, Инд);
		ИндТек = ИндНач + 4;
		Счетчик = 1;
		Пока ИндТек <= СтрДлПреобразованноеУсловие Цикл 
			Если Сред(ВыражениеПреобразованное, ИндТек, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндТек, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
				Если Счетчик = 0 Тогда 
					Прервать;
				КонецЕсли;
			КонецЕсли;
			ИндТек = ИндТек + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		ВыражениеВрем = СокрЛП(Сред(ВыражениеПреобразованное, ИндНач+3, ИндТек - ИндНач - 2));
		ПроверкаВыражения(ВыражениеВрем);
		АргументыСуммирований.Вставить(ВыражениеВрем);
	КонецЦикла;
	
	ВыражениеПреобразованное = ЗаменитьСуммуВУсловии(Выражение);
	Аргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексСум = СтрНайти(ВыражениеПреобразованное, "{");
		Если ИндексСум = 0 Тогда 
			Прервать;
		КонецЕсли;
		
		Инд = 1;
		Счетчик = 1;
		Пока Счетчик > 0 И Инд <= СтрДлина(ВыражениеПреобразованное) Цикл 
			Если Сред(ВыражениеПреобразованное, ИндексСум + Инд, 1) = "{" Тогда 
				Счетчик = Счетчик + 1;
			ИначеЕсли Сред(ВыражениеПреобразованное, ИндексСум + Инд, 1) = "}" Тогда 
				Счетчик = Счетчик - 1;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
		Если Счетчик <> 0 Тогда 
			ВызватьИсключение "";
		КонецЕсли;
		
		Аргумент = Сред(ВыражениеПреобразованное, ИндексСум, Инд);
		ВыражениеПреобразованное = Лев(ВыражениеПреобразованное, ИндексСум - 1) + "(@)" + Сред(ВыражениеПреобразованное, ИндексСум + Инд);
		Аргументы.Вставить(Аргумент);
	КонецЦикла;
	
	ВариацииГраф = Новый Соответствие;
	Для Каждого КЗ Из АргументыСуммирований Цикл 
		ВариацииГраф.Вставить(СокрЛП(ПолучитьАргументСкобки(КЗ.Ключ, 3)));
	КонецЦикла;
	Для Каждого КЗ Из Аргументы Цикл 
		ВариацииГраф.Вставить(СокрЛП(ПолучитьАргументСкобки(КЗ.Ключ, 3)));
	КонецЦикла;
	
	Если ВариацииГраф.Количество() <> 1 Тогда 
		Возврат Истина;
	КонецЕсли;
	Для Каждого КЗ Из ВариацииГраф Цикл 
		ВариацияПоГрафам = КЗ.Ключ;
	КонецЦикла;
	
	Для Инд = 1 По Контекст.ОсновнойПериод_ДанныеОтчета.Колонки.Количество() / 2 Цикл 
		Если Контекст.ОсновнойПериод_ДанныеОтчета.Колонки.Найти("col" + Прав("0000" + Инд, 4)) = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если Не ЧислоВходитВДиапазон(Контекст, Инд, ВариацияПоГрафам) Тогда 
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	
	
	Возврат Истина;
КонецФункции

Функция ПолучитьВсеАргументыКромеСуммированийВВыражении(Контекст, Выражение)
	КонтекстПолучитьВсеАргументыВыражения = Контекст.ПолучитьВсеАргументыКромеСуммированийВВыражении[Выражение];
	Если КонтекстПолучитьВсеАргументыВыражения <> Неопределено Тогда 
		Возврат КонтекстПолучитьВсеАргументыВыражения;
	КонецЕсли;
	Возврат ПолучитьВсеАргументыВыражения(Контекст, ЗаменитьСуммуВУсловии(НРег(Выражение)));
КонецФункции

Функция ПолучитьВсеАргументыВыражения(Контекст, Выражение)
	КонтекстПолучитьВсеАргументыВыражения = Контекст.ПолучитьВсеАргументыВыражения[Выражение];
	Если КонтекстПолучитьВсеАргументыВыражения <> Неопределено Тогда 
		Возврат КонтекстПолучитьВсеАргументыВыражения;
	КонецЕсли;
	
	ЕстьПредидущийПериод = СтрНайти(Выражение, "{{") > 0;
	ВыражениеПреобразованное = Выражение;
	ВсеАргументы = Новый Соответствие;
	Пока Истина Цикл
		ИндексОткр = СтрНайти(ВыражениеПреобразованное, "{");
		Если ИндексОткр = 0 Тогда 
			Прервать;
		КонецЕсли;
		Если ЕстьПредидущийПериод И Сред(ВыражениеПреобразованное, ИндексОткр, 2) = "{{" Тогда 
			ИндексЗакр = СтрНайти(ВыражениеПреобразованное, "}}");
			Аргумент = Сред(ВыражениеПреобразованное, ИндексОткр + 2, ИндексЗакр - ИндексОткр - 2);
			ВыражениеПреобразованное = Сред(ВыражениеПреобразованное, ИндексЗакр + 2);
		Иначе
			ИндексЗакр = СтрНайти(ВыражениеПреобразованное, "}");
			Аргумент = Сред(ВыражениеПреобразованное, ИндексОткр + 1, ИндексЗакр - ИндексОткр - 1);
			ВыражениеПреобразованное = Сред(ВыражениеПреобразованное, ИндексЗакр + 1);
		КонецЕсли;
		ВсеАргументы.Вставить(Аргумент);
	КонецЦикла;
	Контекст.ПолучитьВсеАргументыВыражения.Вставить(Выражение, ВсеАргументы);
	Возврат ВсеАргументы;
КонецФункции

функция ПолучитьВариацииГраф(Контекст, ВсеАргументы)
	ВариацииГраф = Новый Соответствие;
	Для Каждого КЗ Из ВсеАргументы Цикл 
		ВариацииГраф.Вставить(ПолучитьАргументСкобки(КЗ.Ключ, 3));
	КонецЦикла;
	Возврат ВариацииГраф;
КонецФункции

функция ЗаменитьВариациюПоГрафамВВыражении(Выражение, ВсеАргументы, Контекст, ВариацииГраф, Колонка)
	ПреобразованноеВыражение = СокрЛП(ВРег(Выражение));
	Для Каждого Аргумент Из ВсеАргументы Цикл
		ОткрСк = СтрНайти(Аргумент.Ключ, "[", НаправлениеПоиска.СНачала, 1, 3);
		ЗакрСк = СтрНайти(Аргумент.Ключ, "]", НаправлениеПоиска.СНачала, 1, 3);
		ПреобразованноеВыражение = СтрЗаменить(ПреобразованноеВыражение, ВРег(Аргумент.Ключ), Лев(Аргумент.Ключ, ОткрСк) + Колонка + Сред(Аргумент.Ключ, ЗакрСк));
	КонецЦикла;
	Возврат ПреобразованноеВыражение;
КонецФункции

Функция ПолучитьАргументСкобки(Выражение, НомерСкобки)
	ИндОткр = СтрНайти(Выражение, "[", НаправлениеПоиска.СНачала, 1, НомерСкобки);
	Если ИндОткр = 0 Тогда
		Возврат "";
	Иначе
		Возврат Сред(Выражение, ИндОткр + 1, СтрНайти(Выражение, "]", НаправлениеПоиска.СНачала, 1, НомерСкобки) - ИндОткр - 1);
	КонецЕсли;
КонецФункции

Функция ВычислитьУсловиеПоСтрокамИлиГрафам(Условие, Контекст, РазрядностьОкругления = 2, СтрокиИГрафы = Неопределено)
	СтруктураОтбора = Новый Структура;
	Для Каждого Кол Из СтрокиИГрафы.Колонки Цикл
		Если Кол.Имя <> "columns" Тогда 
			СтруктураОтбора.Вставить(Кол.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиИГрафы Цикл
		ГрафыИтер = Стр.columns;
		Пока Истина Цикл
			Кол = Лев(ГрафыИтер, 4);
			ГрафыИтер = Сред(ГрафыИтер, 5);
			Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
			СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
			КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
			МассивАргументовСуммирований = Новый Массив;
			Для Инд = 1 По КоличествоСуммирований Цикл 
				ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
				ИндТек = ИндНач + 4;
				Счетчик = 1;
				Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
					Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
						Счетчик = Счетчик + 1;
					ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
						Счетчик = Счетчик - 1;
						Если Счетчик = 0 Тогда 
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ИндТек = ИндТек + 1;
				КонецЦикла;
				Если Счетчик <> 0 Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				
				АргументыСуммирований = Новый Структура;
				АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
				АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
				СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
				СтрРез = СтрЗаменить(СтрРез, ",", ".");
				СтрРез = СтрЗаменить(СтрРез, " ", "");
				СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
				АргументыСуммирований.Вставить("Результат", СтрРез);
				МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
			КонецЦикла;
			
			ПроверкаВыражения(ПреобразованноеУсловие);
			Для Инд = 1 По КоличествоСуммирований Цикл
				АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
				ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
										+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
				ПроверкаВыражения(ПреобразованноеУсловие);
			КонецЦикла;
			
			Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
			ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол, Стр);
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
			Если Не ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура ОбработатьУсловиеПоСтрокам(Условие, Контекст, РазрядностьОкругления = 2, Строки = Неопределено)
	СтрокиИтог = Строки.СкопироватьКолонки();
	Для Каждого Стр Из Строки Цикл 
		ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
		СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
		КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
		МассивАргументовСуммирований = Новый Массив;
		Для Инд = 1 По КоличествоСуммирований Цикл 
			ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
			ИндТек = ИндНач + 4;
			Счетчик = 1;
			Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
				Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
					Счетчик = Счетчик + 1;
				ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
					Счетчик = Счетчик - 1;
					Если Счетчик = 0 Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
				ИндТек = ИндТек + 1;
			КонецЦикла;
			Если Счетчик <> 0 Тогда 
				ВызватьИсключение "";
			КонецЕсли;
			
			АргументыСуммирований = Новый Структура;
			АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
			АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
			СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
			СтрРез = СтрЗаменить(СтрРез, ",", ".");
			СтрРез = СтрЗаменить(СтрРез, " ", "");
			СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
			АргументыСуммирований.Вставить("Результат", СтрРез);
			МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
		КонецЦикла;
		
		ПроверкаВыражения(ПреобразованноеУсловие);
		Для Инд = 1 По КоличествоСуммирований Цикл
			АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
			ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
									+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
			ПроверкаВыражения(ПреобразованноеУсловие);
		КонецЦикла;
		
		Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
		КонецЦикла;
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
		ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыраженииПоСтроке(ПреобразованноеУсловие, Контекст, Стр);
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
		ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
		Если ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда
			ЗаполнитьЗначенияСвойств(СтрокиИтог.Добавить(), Стр);
		КонецЕсли;
	КонецЦикла;
	
	Строки.Очистить();
	Для Каждого Стр Из СтрокиИтог Цикл
		ЗаполнитьЗначенияСвойств(Строки.Добавить(), Стр);
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьУсловиеПоСтрокамИлиГрафам(Условие, Контекст, РазрядностьОкругления = 2, СтрокиИГрафы = Неопределено)
	СтруктураОтбора = Новый Структура;
	Для Каждого Кол Из СтрокиИГрафы.Колонки Цикл
		Если Кол.Имя <> "columns" Тогда 
			СтруктураОтбора.Вставить(Кол.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из СтрокиИГрафы Цикл
		ОтобранныеГрафы = "";
		ГрафыИтер = Стр.columns;
		Пока Истина Цикл
			Кол = Лев(ГрафыИтер, 4);
			ГрафыИтер = Сред(ГрафыИтер, 5);
			Если Контекст.ОТЧ.ПривестиЗначение(Кол) = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			ПреобразованноеУсловие = ПривестиВыражениеККаноническомуВиду(Условие, РазрядностьОкругления);
			СтрДлПреобразованноеУсловие = СтрДлина(ПреобразованноеУсловие);
			КоличествоСуммирований = СтрЧислоВхождений(ПреобразованноеУсловие, "sum(");
			МассивАргументовСуммирований = Новый Массив;
			Для Инд = 1 По КоличествоСуммирований Цикл 
				ИндНач = СтрНайти(ПреобразованноеУсловие, "sum(", НаправлениеПоиска.СНачала, 1, Инд);
				ИндТек = ИндНач + 4;
				Счетчик = 1;
				Пока ИндТек < СтрДлПреобразованноеУсловие Цикл 
					Если Сред(ПреобразованноеУсловие, ИндТек, 1) = "(" Тогда 
						Счетчик = Счетчик + 1;
					ИначеЕсли Сред(ПреобразованноеУсловие, ИндТек, 1) = ")" Тогда 
						Счетчик = Счетчик - 1;
						Если Счетчик = 0 Тогда 
							Прервать;
						КонецЕсли;
					КонецЕсли;
					ИндТек = ИндТек + 1;
				КонецЦикла;
				Если Счетчик <> 0 Тогда 
					ВызватьИсключение "";
				КонецЕсли;
				
				АргументыСуммирований = Новый Структура;
				АргументыСуммирований.Вставить("НачалоВыражения", ИндНач);
				АргументыСуммирований.Вставить("ДлинаВыражения", ИндТек - ИндНач);
				СтрРез = Строка(ВычислитьАргументСуммированияВУсловии(Сред(ПреобразованноеУсловие, ИндНач+3, ИндТек - ИндНач - 2), Контекст));
				СтрРез = СтрЗаменить(СтрРез, ",", ".");
				СтрРез = СтрЗаменить(СтрРез, " ", "");
				СтрРез = СтрЗаменить(СтрРез, Символы.НПП, "");
				АргументыСуммирований.Вставить("Результат", СтрРез);
				МассивАргументовСуммирований.Вставить(Инд - 1, АргументыСуммирований);
			КонецЦикла;
			
			ПроверкаВыражения(ПреобразованноеУсловие);
			Для Инд = 1 По КоличествоСуммирований Цикл
				АргументСуммирования = МассивАргументовСуммирований[КоличествоСуммирований - Инд];
				ПреобразованноеУсловие = Лев(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения - 1) + АргументСуммирования.Результат
										+ Сред(ПреобразованноеУсловие, АргументСуммирования.НачалоВыражения + АргументСуммирования.ДлинаВыражения + 1);
				ПроверкаВыражения(ПреобразованноеУсловие);
			КонецЦикла;
			
			Для Каждого КЗ Из Контекст.ФункцииЯзыкаКС Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			Для Каждого КЗ Из Контекст.ОперацииСравнения Цикл
				ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, КЗ.Ключ, КЗ.Значение);
			КонецЦикла;
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "|=|", "=");
			ПреобразованноеУсловие = ЗаменитьСкалярныеАргументыВВыражении(ПреобразованноеУсловие, Контекст, Кол, Стр);
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, " ", "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.НПП, "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, Символы.Таб, "");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "and", " и ");
			ПреобразованноеУсловие = СтрЗаменить(ПреобразованноеУсловие, "or", " или ");
			Если ОбщегоНазначения.ВычислитьВБезопасномРежиме(ПреобразованноеУсловие) Тогда
				ОтобранныеГрафы = ОтобранныеГрафы + Прав("0000" + Кол, 4);
			КонецЕсли;
		КонецЦикла;
		Стр.columns = ОтобранныеГрафы;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьКонтрольноеСоотношение(СтрокаТаблицы, Контекст) Экспорт
	Если Не Контекст.Свойство("ПредыдущийПериод_ДанныеОтчета")
		И (СтрНайти(СтрокаТаблицы.condition, "{{") > 0 Или СтрНайти(СтрокаТаблицы.rule, "{{") > 0) Тогда 
		
		// Нет данных предидущего периода
		// Соотношение не проверяется
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.periodClause) Тогда 
		Если Не ПроверитьУсловиеНаПериод(Контекст, СтрокаТаблицы.periodClause) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Графы = Неопределено;
	Строки = Неопределено;
	СтрокиИГрафы = Неопределено;
	Если ЗначениеЗаполнено(СтрокаТаблицы.condition) Тогда
		Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.condition) Тогда
			Если Не ВычислитьСкалярноеУсловие(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision) Тогда 
				Возврат Истина;
			Иначе
				Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
					Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
				ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.rule, Графы) Тогда
					Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Графы);
				ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.rule, Строки) Тогда
					Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
				ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.rule, СтрокиИГрафы) Тогда
					Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
				Иначе
					ВызватьИсключение "";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.condition, Графы) Тогда
			ОтбГрафы = "";
			ГрафыИтер = Графы;
			Пока Истина Цикл
				Гр = Лев(ГрафыИтер, 4);
				Если Контекст.ОТЧ.ПривестиЗначение(Гр) = 0 Тогда 
					Прервать;
				КонецЕсли;
				ГрафыИтер = Сред(ГрафыИтер, 5);
				Если ВычислитьУсловиеПоГрафам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, Гр) Тогда 
					ОтбГрафы = ОтбГрафы + Гр;
				КонецЕсли;
			КонецЦикла;
			Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
				Возврат (Не ЗначениеЗаполнено(ОтбГрафы)) Или ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
			Иначе
				Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, ОтбГрафы);
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.condition, Строки) Тогда
			ОбработатьУсловиеПоСтрокам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, Строки);
			Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
				Возврат Строки.Количество() = 0 Или ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
			Иначе
				Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
			КонецЕсли;
		ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.condition, СтрокиИГрафы) Тогда
			ОбработатьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.condition, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
			Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
		Иначе
			ВызватьИсключение "";
		КонецЕсли;
	Иначе
		Если ЭтоСкалярноеУсловие(Контекст, СтрокаТаблицы.rule) Тогда
			Возврат ВычислитьСкалярноеУсловие(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision);
		ИначеЕсли ЭтоВариацияПоГрафам(Контекст, СтрокаТаблицы.rule, Графы) Тогда
			Возврат ВычислитьУсловиеПоГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Графы);
		ИначеЕсли ЭтоВариацияПоСтрокам(Контекст, СтрокаТаблицы.rule, Строки) Тогда
			Возврат ВычислитьУсловиеПоСтрокам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, Строки);
		ИначеЕсли ЭтоВариацияПоСтрокамИлиГрафам(Контекст, СтрокаТаблицы.rule, СтрокиИГрафы) Тогда
			ВсеАргументыВыражения = ПолучитьВсеАргументыВыражения(Контекст, СтрокаТаблицы.rule);
			ВариацииГраф = ПолучитьВариацииГраф(Контекст, ВсеАргументыВыражения);
			Если ВариацииГраф.Количество() = 1 Тогда
				ГрафыВУсловии = "";
				Для Каждого КЗ Из ВариацииГраф Цикл 
					ГрафыВУсловии = КЗ.Ключ;
				КонецЦикла;
				
				Для Кол = 1 По Контекст.КоличествоКолонок Цикл
					Если Не ЧислоВходитВДиапазон(Контекст, Кол, ГрафыВУсловии) Тогда 
						Продолжить;
					КонецЕсли;
					Выражение = ЗаменитьВариациюПоГрафамВВыражении(СтрокаТаблицы.rule, ВсеАргументыВыражения, Контекст, ГрафыВУсловии, Кол);
					Если ЭтоВариацияПоСтрокам(Контекст, Выражение, Строки) Тогда 
						Если Не ВычислитьУсловиеПоСтрокам(Выражение, Контекст, СтрокаТаблицы.precision, Строки) Тогда
							Возврат Ложь;
						КонецЕсли;
					ИначеЕсли ЭтоСкалярноеУсловие(Контекст, Выражение) Тогда
						Если Не ВычислитьСкалярноеУсловие(Выражение, Контекст, СтрокаТаблицы.precision) Тогда 
							Возврат Ложь;
						КонецЕсли;
					Иначе
						ВызватьИсключение "";
					КонецЕсли;
				КонецЦикла;
				Возврат Истина;
			КонецЕсли;
			
			Если СтрНайти(НРег(СтрокаТаблицы.rule), "sum") > 0 Тогда 
				Возврат ВычислитьБезусловноеВыражениеПоСтрокамИГрафам(Контекст, СтрокаТаблицы.rule, СтрокаТаблицы.precision);
			Иначе
				Возврат ВычислитьУсловиеПоСтрокамИлиГрафам(СтрокаТаблицы.rule, Контекст, СтрокаТаблицы.precision, СтрокиИГрафы);
			КонецЕсли;
		Иначе
			ВызватьИсключение "";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСведенияОШаблоне(Форма, ИмяМакетаАтрибутов)
	Результат = Новый Структура("ОКУД,КодШаблона,Версия,Шифр,КодФормы,Наименование,КодПериодичности");
	ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(Форма, ИмяМакетаАтрибутов);
	ДопАтрибуты.Свойство("OKUD", Результат.ОКУД);
	ДопАтрибуты.Свойство("code", Результат.КодШаблона);
	ДопАтрибуты.Свойство("version", Результат.Версия);
	ДопАтрибуты.Свойство("shifr", Результат.Шифр);
	ДопАтрибуты.Свойство("name", Результат.Наименование);
	ДопАтрибуты.Свойство("idf", Результат.КодФормы);
	ДопАтрибуты.Свойство("idp", Результат.КодПериодичности);
	
	ТипЧисло = Новый ОписаниеТипов("Число");
	Результат.КодФормы = ТипЧисло.ПривестиЗначение(Результат.КодФормы);
	Результат.КодПериодичности = ТипЧисло.ПривестиЗначение(Результат.КодПериодичности);
	Возврат Результат;
КонецФункции

Функция ПроверитьКонтрольныеСоотношенияИзШаблона(Форма, ПараметрыПроверкиКонтрольныхСоотношений) Экспорт
	СведШаблон = ПолучитьСведенияОШаблоне(Форма, ПараметрыПроверкиКонтрольныхСоотношений.Атрибуты);
	ПараметрыПроверкиКонтрольныхСоотношений.Вставить("ВерсияШаблона", СведШаблон.Версия);
	ДанныеШаблонаИзРегистра = РегламентированнаяОтчетность.ПолучитьДанныеШаблона(Форма,
																				ПараметрыПроверкиКонтрольныхСоотношений.Атрибуты,
																				ПараметрыПроверкиКонтрольныхСоотношений.ШаблонРосстата,
																				СведШаблон,
																				СведШаблон.Версия);
	Если Не ПараметрыПроверкиКонтрольныхСоотношений.ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы Тогда 
		Если ПараметрыПроверкиКонтрольныхСоотношений.ТиповойСпособФормированияТекстаВыгрузки Тогда 
			РегламентированнаяОтчетность.СформироватьСтруктуруПоказателей(Форма);
			ПараметрыВыгрузки = Форма.СформироватьСтруктуруПараметров();
			Если ТипЗнч(ДанныеШаблонаИзРегистра) = Тип("ХранилищеЗначения") И ПараметрыВыгрузки.Свойство("ВерсияШаблона") Тогда
				ПараметрыВыгрузки.ВерсияШаблона = СведШаблон.Версия;
			КонецЕсли;
			ДеревоВыгрузки = РегламентированнаяОтчетность.ПолучитьДеревоВыгрузки(Форма, ПараметрыПроверкиКонтрольныхСоотношений.СхемаВыгрузки);
			Форма.ЗаполнитьДанными(ДеревоВыгрузки, ПараметрыВыгрузки);
			ПараметрыПроверкиКонтрольныхСоотношений.ТекстВыгрузки = РегламентированнаяОтчетность.ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Форма.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне("ИнтерпретаторКонтрольныхСоотношенийРосстата.ПроверитьКонтрольныеСоотношенияВОтчетеВФоне",
															ПараметрыПроверкиКонтрольныхСоотношений, ПараметрыВыполненияВФоне);
										
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", НРег(РезультатВыполнения.Статус) = "выполнено");
	ПараметрыПроверкиКонтрольныхСоотношений.АдресХранилища       = РезультатВыполнения.АдресРезультата;
	ПараметрыПроверкиКонтрольныхСоотношений.ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатПроверкиКонтрольныхСоотношений = ПолучитьИзВременногоХранилища(ПараметрыПроверкиКонтрольныхСоотношений.АдресХранилища);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
КонецФункции

Процедура ПроверитьКонтрольныеСоотношенияВОтчетеВФоне(ПараметрыДляПроверки, АдресХранилища) Экспорт 
	Результат = ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки);
	ПоместитьВоВременноеХранилище(Результат, ПараметрыДляПроверки.АдресХранилища);
КонецПроцедуры

Процедура ИзменитьВерсиюФорматаСПроверкойСовместимостиШаблонов(МодульОтчета, ПараметрыДляПроверки, ИтоговыйФайл) Экспорт
	Попытка
		Если СтрНачинаетсяС(ПараметрыДляПроверки.ИмяФормы, "Внешний") Тогда
			Возврат;
		КонецЕсли;
		ДопАтрибуты = РегламентированнаяОтчетность.СформироватьСтруктуруДопАтрибутов(ПараметрыДляПроверки.ИмяФормы, ПараметрыДляПроверки.Атрибуты);
		Если (Не ДопАтрибуты.Свойство("OKUD")) Или (Не ДопАтрибуты.Свойство("code")) Тогда 
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(&ТекущаяДата, ШаблоныЭВФОтчетовСтатистики.ДатаДобавления, СЕКУНДА) КАК РазностьДат,
		|	ШаблоныЭВФОтчетовСтатистики.Версия КАК Версия,
		|	ШаблоныЭВФОтчетовСтатистики.Шаблон КАК Шаблон
		|ИЗ
		|	РегистрСведений.ШаблоныЭВФОтчетовСтатистики КАК ШаблоныЭВФОтчетовСтатистики
		|ГДЕ
		|	ШаблоныЭВФОтчетовСтатистики.ОКУД = &ОКУД
		|	И ШаблоныЭВФОтчетовСтатистики.КодШаблона = &КодШаблона";
		Запрос.УстановитьПараметр("ОКУД", ДопАтрибуты.OKUD);
		Запрос.УстановитьПараметр("КодШаблона", ДопАтрибуты.code);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() <> 1 Тогда 
			Возврат;
		КонецЕсли;
		Выборка.Следующий();
		
		Если Выборка.Версия = ДопАтрибуты.version Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не (Выборка.РазностьДат < 3600 И Выборка.РазностьДат > -3600) Тогда 
			Возврат;
		КонецЕсли;
		
		Если Не УниверсальныйОтчетСтатистики.СравнитьСтруктурыШаблонов(Выборка.Шаблон, МодульОтчета.ПолучитьМакет(ПараметрыДляПроверки.ШаблонРосстата)) Тогда 
			Возврат;
		КонецЕсли;
		ПараметрыДляПроверки.ВерсияШаблона = Выборка.Версия;
		
		УдалитьФайлы(ИтоговыйФайл);
		ИтоговыйФайл = ПолучитьИмяВременногоФайла("xml");
		Выборка.Шаблон.Получить().Записать(ИтоговыйФайл);
	Исключение
	КонецПопытки;
КонецПроцедуры

Функция ПроверитьКонтрольныеСоотношенияВОтчете(ПараметрыДляПроверки)
	МодульОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ПараметрыДляПроверки.ИмяФормы);
	Если Не ЗначениеЗаполнено(ПараметрыДляПроверки.ТекстВыгрузки)
		И ПараметрыДляПроверки.ДоступноФормированиеТекстаВыгрузкиБезКонтекстаФормы Тогда
		
		РазложениеИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыДляПроверки.ИмяФормы, ".");
		Если СтрНайти(ПараметрыДляПроверки.ИмяФормы, "Внешний") > 0 Тогда 
			ПараметрыДляПроверки.ТекстВыгрузки = МодульОтчета.ТекстВыгрузкиОтчетаСтатистики(ПараметрыДляПроверки.Ссылка, РазложениеИмени[3]);
		Иначе
			ПараметрыДляПроверки.ТекстВыгрузки = ОбщегоНазначения.ОбщийМодуль("Отчеты." + РазложениеИмени[1]).ТекстВыгрузкиОтчетаСтатистики(ПараметрыДляПроверки.Ссылка, РазложениеИмени[3]);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеШаблона = МодульОтчета.ПолучитьМакет(ПараметрыДляПроверки.ШаблонРосстата);
	ВФАрх = ПолучитьИмяВременногоФайла("zip");
	ДанныеШаблона.Записать(ВФАрх);
	КаталогРазархивирования = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогРазархивирования);
	КаталогРазархивирования = КаталогРазархивирования + ПолучитьРазделительПути();
	
	ЧтениеZip = Новый ЧтениеZipФайла(ВФАрх);
	ЧтениеZip.Извлечь(ЧтениеZip.Элементы[0], КаталогРазархивирования);
	ИтоговыйФайл = КаталогРазархивирования + ЧтениеZip.Элементы[0].Имя;
	ЧтениеZip.Закрыть();
	ИзменитьВерсиюФорматаСПроверкойСовместимостиШаблонов(МодульОтчета, ПараметрыДляПроверки, ИтоговыйФайл);
	Контекст = СформироватьКонтекстДляПроверок(ИтоговыйФайл, ПараметрыДляПроверки.ТекстВыгрузки);
	УдалитьФайлы(ИтоговыйФайл);
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоНайденныхБезОшибок", 0);
	Результат.Вставить("КоличествоНайденныхОшибок", 0);
	Результат.Вставить("ЭтоАвтопроверкаСтатистики", Истина);
	Результат.Вставить("СтруктураОшибок", Новый Структура);
	
	Инд = 0;
	Для Каждого Стр Из Контекст.ТаблицаКонтрольныхСоотношений Цикл 
		Инд = Инд + 1;
		ИндСтр = Формат(Инд, "ЧГ=");
		Результат.СтруктураОшибок.Вставить("Описание" + ИндСтр, "");
		Попытка
			Если ПроверитьКонтрольноеСоотношение(Стр, Контекст) Тогда 
				Результат.КоличествоНайденныхБезОшибок = Результат.КоличествоНайденныхБезОшибок + 1;
				Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, "");
				Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
				Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
				Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
				Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Ложь);
			Иначе
				Результат.КоличествоНайденныхОшибок = Результат.КоличествоНайденныхОшибок + 1;
				Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, ?(Контекст.ОТЧ.ПривестиЗначение(Стр.tip) = 1, "", НСтр("ru='Контролировать необязательно'")));
				Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
				Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
				Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
				Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Истина);
			КонецЕсли;
		Исключение
			Результат.КоличествоНайденныхБезОшибок = Результат.КоличествоНайденныхБезОшибок + 1;
			Результат.СтруктураОшибок.Вставить("Комментарий" + ИндСтр, НСтр("ru='Не удалось вычислить условие'") + ?(Контекст.ОТЧ.ПривестиЗначение(Стр.tip) = 1, "", Символы.ПС + НСтр("ru='Контролировать необязательно'")));
			Результат.СтруктураОшибок.Вставить("Нарушение" + ИндСтр, "XML шаблон от " + ПараметрыДляПроверки.ВерсияШаблона);
			Результат.СтруктураОшибок.Вставить("Расшифровка" + ИндСтр, Стр.rule);
			Результат.СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + ИндСтр, Стр.name);
			Результат.СтруктураОшибок.Вставить("ЭтоОшибка" + ИндСтр, Ложь);
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти