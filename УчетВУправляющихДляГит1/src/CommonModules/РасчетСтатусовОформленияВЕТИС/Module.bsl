// Механизм расчета статусов оформления документов ВЕТИС.
// 
// Для добавления нового документа-основания к документу ВЕТИС надо
//	- добавить ссылочный тип документа в определяемый тип с именем Основание<ИмяДокументаВЕТИС>
//	- добавить ссылочный тип документа в определяемый тип с именем ОснованиеСтатусыОформленияДокументовВЕТИС
//	- добавить объектный тип документа в определяемый тип с именем ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
//	- дополнить процедуры общего модуля РасчетСтатусовОформленияВЕТИСПереопределяемый
//		- ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//		- ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//
// Для подключения документа ВЕТИС к этому механизму нужно:
//	- добавить его ссылочный тип в определяемый тип ДокументыВЕТИСПоддерживающиеСтатусыОформления
//	- добавить его объектный тип в определяемый тип ДокументыВЕТИСПоддерживающиеСтатусыОформленияОбъект
//	- добавить его объектный тип в определяемый тип ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
//	- добавить в документ реквизит с именем ДокументОснования
//	- создать определяемый тип с именем Основание<ИмяДокументаВЕТИС>
//		- заполнить этот тип ссылочными типами документов-оснований
//	- создать определяемый тип с именем Основание<ИмяДокументаВЕТИС>Объект
//		- заполнить этот тип объектными типами документов-оснований
//
//	- добавить типы из определяемого типа Основание<ИмяДокументаВЕТИС> в ОснованиеСтатусыОформленияДокументовВЕТИС
//	- добавить типы из определяемого типа Основание<ИмяДокументаВЕТИС>Объект в ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
//	- дополнить процедуры общего модуля РасчетСтатусовОформленияВЕТИСПереопределяемый
//		- ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//		- ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//

#Область ПрограммныйИнтерфейс

#Область ОбработчикиПодписокНаСобытияВЕТИС

// Обработчик подписки на событие "Перед записью" документов ВЕТИС, поддерживающих статусы оформления.
// 
// Параметры:
//	Источник 		- ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформленияОбъект - записываемый объект
//	Отказ 			- Булево - параметр, определяющий будет ли записываться объект
//	РежимЗаписи 	- Булево - режим записи документа
//	РежимПроведения - Булево - режим проведения документа
//
Процедура РассчитатьСтатусОформленияВЕТИСПередЗаписьюДокументаОбработчик(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьРасчетСтатуса") Тогда
		Возврат; // расчет статуса надо выполнить через вызов РассчитатьСтатусыОформленияДокументовВЕТИС()
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Источник.ДополнительныеСвойства.Вставить(
			"ПредыдущийДокументОснование",
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ДокументОснование"));
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" документов ВЕТИС, поддерживающих статусы оформления, и их документов-оснований.
// 
// Параметры:
//	Источник - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИСОбъект - записываемый объект
//	Отказ 	 - Булево - параметр, определяющий будет ли записываться объект
//
Процедура РассчитатьСтатусОформленияВЕТИСПриЗаписиДокументаОбработчик(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеВыполнятьРасчетСтатуса") Тогда
		Возврат; // расчет статуса надо выполнить через вызов РассчитатьСтатусыОформленияДокументовВЕТИС()
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ДокументыВЕТИСПоддерживающиеСтатусыОформленияОбъект.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		// Записывается документ ВЕТИС.
		Если Источник.ДополнительныеСвойства.Свойство("ПредыдущийДокументОснование")
		 И ЗначениеЗаполнено(Источник.ДополнительныеСвойства.ПредыдущийДокументОснование)
		 И Источник.ДополнительныеСвойства.ПредыдущийДокументОснование <> Источник.ДокументОснование Тогда
			
			// Обновим статус оформления ВЕТИС для документа-основания, который был раньше указан в записываемом документе ВЕТИС.
			РассчитатьСтатусОформленияДокументаВЕТИС(Источник.ДополнительныеСвойства.ПредыдущийДокументОснование);
			
	 	КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьСтатусОформленияДокументаВЕТИС(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыВЕТИС

// Рассчитывает статус оформления документа и записывает его в регистр сведений СтатусыОформленияДокументовВЕТИС.
//
// Параметры:
//	Источник - один из следующих типов
//		ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//		ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС
//		ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
Процедура РассчитатьСтатусОформленияДокументаВЕТИС(Источник) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	
	// Определим тип реквизита Источник.
	ИсточникЭтоСсылка =
		Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник))
		ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Источник));
	ИсточникЭтоДокументВЕТИС =
		Метаданные.ОпределяемыеТипы.ДокументыВЕТИСПоддерживающиеСтатусыОформленияОбъект.Тип.СодержитТип(ТипЗнч(Источник))
		ИЛИ Метаданные.ОпределяемыеТипы.ДокументыВЕТИСПоддерживающиеСтатусыОформления.Тип.СодержитТип(ТипЗнч(Источник));
		
	РеквизитыИзИсточникаОбъекта = Ложь;
	
	// Определим документ-основание.
	Если ИсточникЭтоСсылка Тогда
		
		Если ИсточникЭтоДокументВЕТИС Тогда
			УстановитьПривилегированныйРежим(Истина);
			ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "ДокументОснование");
			УстановитьПривилегированныйРежим(Ложь);
		Иначе
			ДокументОснование = Источник;
		КонецЕсли;
		
	Иначе //источник-объект
		
		Если ИсточникЭтоДокументВЕТИС Тогда
			ДокументОснование = Источник.ДокументОснование;
		Иначе
			
			ДокументОснование = Источник.Ссылка;
			
			РеквизитыИзИсточникаОбъекта = Истина; // значения реквизитов в параметре Источник, а не в данных ИБ
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ДокументОснование);
		
		РассчитатьСтатусыОформленияДокументовВЕТИСОбщая(
			МассивДокументов,
			?(РеквизитыИзИсточникаОбъекта, Источник, Неопределено));
		
	КонецЕсли;
	
	РассчитатьСтатусыОформленияВСД(Источник);
	
КонецПроцедуры

// Рассчитывает статусы оформления документов и записывает их в регистр сведений СтатусыОформленияДокументовВЕТИС.
// ВАЖНО: все элементы массива Источники должны иметь одинаковый тип.
//
// Параметры:
//	Источники - Массив из элементов следующих типов
//		ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//		ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС
//
Процедура РассчитатьСтатусыОформленияДокументовВЕТИС(Источники) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РассчитатьСтатусыОформленияДокументовВЕТИСОбщая(Источники);
	
	РассчитатьСтатусыОформленияВСД(Источники);
	
КонецПроцедуры


// Устанавливает служебный признак в доп. свойствах объекта, который отключает автоматический пересчет статуса оформления.
// Следует использовать при программном формировании нескольких однотипных документов.
// После записи документов надо выполнить расчет их статусов оформления через РассчитатьСтатусыОформленияДокументовВЕТИС().
//
// Параметры:
//	Источник - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИСОбъект - записываемый объект
//
Процедура НеВыполнятьРасчетСтатусаПриЗаписиОбъекта(Источник) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетСтатуса", Истина);
	
КонецПроцедуры

// Возвращает имя временной таблицы, в которую необходимо поместить данные документа-основания для документа ВЕТИС.
// Необходимо использовать в
// РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//
// Возвращаемое значение:
//	Строка - имя временной таблицы
//
Функция ИмяВременнойТаблицыДляВыборкиДанныхДокумента() Экспорт
	
	Возврат "ТоварыДокументаОснования";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтатусыВЕТИС

// Возвращает структуру с именами ключевых реквизитов документа-основания для документа ВЕТИС.
// Значения этих реквизитов будут записаны в регистр сведений СтатусыОформленияДокументовВЕТИС.
//
// Параметры:
//	МетаданныеДокументаОснования - ОбъектМетаданных:Документ - метаданные документа-основание из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС
//	МетаданныеДокументаВЕТИС 	 - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	Структура - имена реквизитов
//		Ключ - имя реквизита в ВЕТИС; возможные значения ключа:
//			- Проведен, Дата, Номер - стандартные реквизиты документа-основания, переопределять их как правило не требуется
//			- Ответственный - пользователь, оформивший документ-основание;
//				- значение по умолчанию "Ответственный"
//			- Контрагент - организация, от имени которой оформлен документ-основание;
//				- значение по умолчанию "Организация"
//				- если документ-основание предназначен для оформления операции между двумя организациями,
//				  то значение этого ключа будет отличаться в зависимости от типа документа ВЕТИС
//			- ТорговыйИлиПроизводственныйОбъект - "место", в котором совершена операция документа-основание;
//				- значение по умолчанию "Склад"
//				- если в документе-основании есть реквизит вида "Склад", то в значении этого ключа следует указать имя такого реквизита
//				- если реквизита вида "Склад" нет, то в значении этого ключа следует указать имя реквизита вида "Подразделение"
//				- если документ-основание предназначен для оформления операции между двумя "местами",
//				  то значение этого ключа может отличаться в зависимости от типа документа ВЕТИС
//		Значение - способ определения значения реквизита ВЕТИС
//			- Строка (непустая) - имя реквизита документа-основания из которого следует взять значение
//			- ПроизвольноеЗначение, в т.ч. Строка (пустая) - в случае, если в МетаданныеДокументаОснования нет подходящего реквизита,
//				то в качестве значения нужно указать значение по-умолчанию (например, пустую ссылку соответствующего типа)
//
Функция СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументовВЕТИС(МетаданныеДокументаОснования, МетаданныеДокументаВЕТИС) Экспорт
	
	Реквизиты = Новый Структура;
	
	// Стандартные реквизиты
	Реквизиты.Вставить("Проведен",      "Проведен");
	Реквизиты.Вставить("Дата",	        "Дата");
	Реквизиты.Вставить("Номер",	        "Номер");
	// Переопределяемые реквизиты
	Реквизиты.Вставить("Ответственный", "Ответственный");
	Реквизиты.Вставить("Контрагент",    "Организация");
	
	// Реквизит, который будет транслирован в один из двух реквизитов, в зависимости от типа его значения.
	Реквизиты.Вставить("ТорговыйИлиПроизводственныйОбъект", "Склад");
	
	РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС(
		МетаданныеДокументаОснования,
		МетаданныеДокументаВЕТИС,
		Реквизиты);
	
	// Запишем значение реквизита ТорговыйИлиПроизводственныйОбъект в два реквизита регистра статусов: ТорговыйОбъект и ПроизводственныйОбъект
	// При записи в регистр один из них (тот, который имеет неподходящий тип) будет приведен платформой к пустому значению.
	Реквизиты.Вставить("ТорговыйОбъект",         Реквизиты.ТорговыйИлиПроизводственныйОбъект);
	Реквизиты.Вставить("ПроизводственныйОбъект", Реквизиты.ТорговыйИлиПроизводственныйОбъект);
	
	Реквизиты.Удалить("ТорговыйИлиПроизводственныйОбъект");
	
	Возврат Реквизиты;
	
КонецФункции

// Формирует временную таблицу, содержащую подконтрольную продукцию ВЕТИС из документов-основания.
// Подробнее см. РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС()
//
// Параметры:
//	МассивДокументов 		 - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - документы-основание для документа ВЕТИС
//	МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//	МенеджерВТ 				 - МенеджерВременныхТаблиц - менеджер временных таблиц, в который будет помещена сформированная временная таблица
//
// Возвращаемое значение:
//	Соответствие
//		Ключ 	 - элемент параметра МассивДокументов
//		Значение - Число - количество строк товаров в данном объекте
//
Функция СформироватьТаблицуТоварыДокументовОснования(МассивДокументов, МетаданныеДокументаВЕТИС, МенеджерВТ = Неопределено) Экспорт
	
	// Получим текст запроса выборки товаров из документа основания - создание ВТ ТоварыДокументаОснования
	ТекстЗапросаВыборкиДанныхДокументаОснования = Неопределено;
	ДополнительныеПараметрыЗапроса 				= Новый Структура;
	ДокументОснование 							= МассивДокументов[0];
	МетаданныеДокументаОснования				= ДокументОснование.Метаданные();
	
	Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		
		ТекстЗапросаВыборкиДанныхДокументаОснования =
		"ВЫБРАТЬ
		|	ВСД.Ссылка 	 КАК Ссылка,
		|	ИСТИНА		 КАК ЭтоДвижениеПриход,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Серия,
		|	1 			 КАК Количество
		|ПОМЕСТИТЬ %1
		|ИЗ
		|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВСД
		|ГДЕ
		|	ВСД.Ссылка В (&МассивДокументов)
		|	И ВСД.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВетеринарныхДокументовВЕТИС.Оформлен)
		|	И НЕ ВСД.ПометкаУдаления";
		
	Иначе
		
		РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС(
			МетаданныеДокументаОснования,
			МетаданныеДокументаВЕТИС,
			ТекстЗапросаВыборкиДанныхДокументаОснования,
			ДополнительныеПараметрыЗапроса);
		
		Если ТекстЗапросаВыборкиДанныхДокументаОснования = Неопределено Тогда
			
			УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Документ-основание ""%1"" для документа ВетИС ""%2""
						|не поддерживается в процедуре ""РасчетСтатусовОформленияВЕТИСПереопределяемый.ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС"".'"),
				МетаданныеДокументаОснования.Имя,
				МетаданныеДокументаВЕТИС.Имя);
			
			ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПодсистемы(),УточнениеОшибки); // ошибка переопределения ПриОпределенииТекстаЗапросаДляРасчетаСтатусаОформленияДокументаВЕТИС
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстЗапросаВыборкиДанныхДокументаОснования) Тогда
		
		ТекстЗапросаВыборкиДанныхДокументаОснования =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	ЛОЖЬ		 КАК ЭтоДвижениеПриход,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	НЕОПРЕДЕЛЕНО КАК Серия,
		|	0 			 КАК Количество
		|ПОМЕСТИТЬ %1";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаВыборкиДанныхДокументаОснования + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	СУММА(1) 			 КАК КоличествоСтрок
	|ИЗ
	|	%1 КАК ТаблицаТовары
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Для Каждого КлючИЗначение Из ДополнительныеПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если МенеджерВТ <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Иначе
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		ИмяВременнойТаблицыДляВыборкиДанныхДокумента());
	
	Результат = МассивВСоответствие(МассивДокументов, 0);
	УстановитьПривилегированныйРежим(Истина);
	Выборка   = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.КоличествоСтрок);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


// Определяет текущий статус оформления документов ВЕТИС.
//
// Параметры:
//   МассивДокументов         - Массив Из ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - документы-основание для документа ВЕТИС
//   МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//   МенеджерВТ               - МенеджерВременныхТаблиц - (см. СформироватьТаблицуТоварыДокументовОснования)
//
// Возвращаемое значение:
//   Соответствие:
//     * Ключ     - элемент параметра МассивДокументов
//     * Значение - Структура с полями:
//       ** СтатусОформления         - статус оформления объекта
//       ** ДополнительнаяИнформация - информация для отладки
//
Функция ОпределитьСтатусыОформленияДокументов(МассивДокументов, МетаданныеДокументаВЕТИС, МенеджерВТ)
	
	ДокументОснование = МассивДокументов[0];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Если МенеджерВТ = Неопределено Тогда
		
		// Сформируем таблицу товаров ВЕТИС из документа основания
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		СформироватьТаблицуТоварыДокументовОснования(
			МассивДокументов,
			МетаданныеДокументаВЕТИС,
			Запрос.МенеджерВременныхТаблиц);
		
	Иначе
		
		// Таблица товаров сформирована ранее
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
	КонецЕсли;
	
	// Соберем текст запроса выборки данных для определения статуса оформления документа ВЕТИС.
	Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		
		ШаблонЗапросаВТОформленныеДокументы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументы.Ссылка КАК Ссылка,
		|	ТаблицаТовары.ВетеринарноСопроводительныйДокумент КАК ДокументОснование
		|ПОМЕСТИТЬ ОформленныеДокументы%1
		|ИЗ
		|	Документ.%1.Товары КАК ТаблицаТовары
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК ТаблицаДокументы
		|		ПО ТаблицаДокументы.Ссылка = ТаблицаТовары.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|		ПО Статусы.Документ = ТаблицаДокументы.Ссылка
		|ГДЕ
		|	ТаблицаТовары.ВетеринарноСопроводительныйДокумент В (&МассивДокументов)
		|	И ТаблицаДокументы.Проведен
		|	И НЕ Статусы.Статус В (&КонечныеСтатусы%1)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	Иначе
		
		ШаблонЗапросаВТОформленныеДокументы =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументы.Ссылка КАК Ссылка,
		|	ТаблицаДокументы.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ОформленныеДокументы%1
		|ИЗ
		|	Документ.%1 КАК ТаблицаДокументы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК Статусы
		|		ПО Статусы.Документ = ТаблицаДокументы.Ссылка
		|ГДЕ
		|	ТаблицаДокументы.ДокументОснование В (&МассивДокументов)
		|	И ТаблицаДокументы.Проведен
		|	И НЕ Статусы.Статус В (&КонечныеСтатусы%1)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
	КонецЕсли;
	
	ШаблонЗапросаОформленныеТоварыПоВСД = "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОформленныеДокументы.ДокументОснование КАК ДокументОснование,
	|		%2 КАК ЭтоДвижениеПриход,
	|		НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|		НЕОПРЕДЕЛЕНО КАК Характеристика,
	|		НЕОПРЕДЕЛЕНО КАК Серия,
	|		0			 КАК План,
	|		1 			 КАК Факт
	|	ИЗ
	|		Документ.%1 КАК ОформленныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|			ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка";
	
	ШаблонЗапросаОформленныеТовары = "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОформленныеДокументы.ДокументОснование КАК ДокументОснование,
	|		%3 КАК ЭтоДвижениеПриход,
	|		ОформленныеТовары.Номенклатура   КАК Номенклатура,
	|		ОформленныеТовары.Характеристика КАК Характеристика,
	|		ОформленныеТовары.Серия          КАК Серия,
	|		0                                КАК План,
	|		ВЫБОР КОГДА ОформленныеТовары.%4 < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ОформленныеТовары.%4 КАК Факт
	|	ИЗ
	|		Документ.%1.%2 КАК ОформленныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|			ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка";
	
	ШаблонЗапросаОформленныеТоварыСУточнениями = "
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОформленныеДокументы.ДокументОснование КАК ДокументОснование,
	|		%3 КАК ЭтоДвижениеПриход,
	|		ОформленныеТовары.Номенклатура   КАК Номенклатура,
	|		ОформленныеТовары.Характеристика КАК Характеристика,
	|		ОформленныеТовары.Серия          КАК Серия,
	|		0                                КАК План,
	|		ВЫБОР КОГДА ОформленныеТовары.%4 < 0 ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * ОформленныеТовары.%4 КАК Факт
	|	ИЗ
	|		Документ.%1.%2 КАК ОформленныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|			ПО ОформленныеТовары.Ссылка = ОформленныеДокументы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1.ТоварыУточнение КАК ОформленныеТоварыУточнение
	|			ПО ОформленныеТовары.Ссылка = ОформленныеТоварыУточнение.Ссылка
	|				И ОформленныеТоварыУточнение.Количество <> 0
	|				И ОформленныеТовары.ИдентификаторСтроки = ОформленныеТоварыУточнение.ИдентификаторСтроки
	|	ГДЕ
	|		ОформленныеТоварыУточнение.ИдентификаторСтроки ЕСТЬ NULL
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ОформленныеДокументы.ДокументОснование    КАК ДокументОснование,
	|		%3 КАК ЭтоДвижениеПриход,
	|		ОформленныеТоварыУточнение.Номенклатура   КАК Номенклатура,
	|		ОформленныеТоварыУточнение.Характеристика КАК Характеристика,
	|		ОформленныеТоварыУточнение.Серия          КАК Серия,
	|		0                                         КАК План,
	|		ОформленныеТоварыУточнение.Количество     КАК Факт
	|	ИЗ
	|		Документ.%1.%2Уточнение КАК ОформленныеТоварыУточнение
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОформленныеДокументы%1 КАК ОформленныеДокументы
	|			ПО ОформленныеТоварыУточнение.Ссылка = ОформленныеДокументы.Ссылка
	|";
	
	ШаблонРазделительЗапросов = "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапросаВТОформленныеДокументы = "";
	ТекстЗапросаОформленныеТовары = "";
	
	ИмяДокументаВЕТИС   = МетаданныеДокументаВЕТИС.Имя;
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		ЭтоДвижениеПриход = "ЛОЖЬ";
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		ЭтоДвижениеПриход =
			"ВЫБОР КОГДА ОформленныеТовары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление)
			|		ИЛИ (ОформленныеТовары.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение) И ОформленныеТовары.КоличествоИзменение > 0) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
	Иначе
		ЭтоДвижениеПриход = "ИСТИНА";
	КонецЕсли;
		
		
	ТекстЗапросаВТОформленныеДокументы = ТекстЗапросаВТОформленныеДокументы
		+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапросаВТОформленныеДокументы,
			ИмяДокументаВЕТИС)
		+ ШаблонРазделительЗапросов;
	
	Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапросаОформленныеТоварыПоВСД,
				ИмяДокументаВЕТИС,
				ЭтоДвижениеПриход);
		
	Иначе
		
		ЕстьКоличество = (МетаданныеДокументаВЕТИС.ТабличныеЧасти.Товары.Реквизиты.Найти("Количество") <> Неопределено);
		
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС,
					ШаблонЗапросаОформленныеТоварыСУточнениями,
					ШаблонЗапросаОформленныеТовары),
				ИмяДокументаВЕТИС,
				"Товары",
				ЭтоДвижениеПриход,
				?(ЕстьКоличество, "Количество", "КоличествоИзменение"));
		
	КонецЕсли;
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапросаОформленныеТовары = ТекстЗапросаОформленныеТовары
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЗапросаОформленныеТовары,
				ИмяДокументаВЕТИС,
				"Сырье",
				"ЛОЖЬ",
				"Количество");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр(
		"КонечныеСтатусы" + ИмяДокументаВЕТИС,
		Документы[ИмяДокументаВЕТИС].КонечныеСтатусы());
	
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(ТекстЗапросаВТОформленныеДокументы);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	ТоварыКОформлению.ДокументОснование КАК ДокументОснование,
		|	ТоварыКОформлению.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
		|	ТоварыКОформлению.Номенклатура      КАК Номенклатура,
		|	ТоварыКОформлению.Характеристика    КАК Характеристика,
		|	ТоварыКОформлению.Серия             КАК Серия,
		|	СУММА(ТоварыКОформлению.План)       КАК План,
		|	СУММА(ТоварыКОформлению.Факт)       КАК Факт
		|ПОМЕСТИТЬ Результат
		|ИЗ
		|	(ВЫБРАТЬ
		|		Товары.Ссылка 			 КАК ДокументОснование,
		|		Товары.ЭтоДвижениеПриход КАК ЭтоДвижениеПриход,
		|		Товары.Номенклатура      КАК Номенклатура,
		|		Товары.Характеристика    КАК Характеристика,
		|		Товары.Серия             КАК Серия,
		|		Товары.Количество        КАК План,
		|		0                        КАК Факт
		|	ИЗ
		|		" + ИмяВременнойТаблицыДляВыборкиДанныхДокумента() + " КАК Товары
		|");
	ЧастиЗапроса.Добавить(ТекстЗапросаОформленныеТовары);
	ЧастиЗапроса.Добавить("
		|	) КАК ТоварыКОформлению
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОформлению.ДокументОснование,
		|	ТоварыКОформлению.ЭтоДвижениеПриход,
		|	ТоварыКОформлению.Номенклатура,
		|	ТоварыКОформлению.Характеристика,
		|	ТоварыКОформлению.Серия
		|");
	ЧастиЗапроса.Добавить(ШаблонРазделительЗапросов);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.ДокументОснование КАК ДокументОснование,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Факт > 0 И Т.План > 0 	   ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.Факт >= 0 И Т.План > Т.Факт ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьНеОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.План <= Т.Факт 			   ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьПолностьюОформленныеТовары,
		|	МАКСИМУМ(ВЫБОР КОГДА Т.План < Т.Факт 			   ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК ЕстьОшибкиОформления
		|ПОМЕСТИТЬ РезультатПоДокументам
		|ИЗ
		|	Результат КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.ДокументОснование");
	ЧастиЗапроса.Добавить(ШаблонРазделительЗапросов);
	ЧастиЗапроса.Добавить("
		|ВЫБРАТЬ
		|	Т.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Т.ЕстьОшибкиОформления
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовВЕТИС.ЕстьОшибкиОформления)
		|		КОГДА Т.ЕстьПолностьюОформленныеТовары И НЕ Т.ЕстьНеОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовВЕТИС.Оформлено)
		|		КОГДА Т.ЕстьПолностьюОформленныеТовары И Т.ЕстьНеОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовВЕТИС.ОформленоЧастично)
		|		КОГДА Т.ЕстьОформленныеТовары
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовВЕТИС.ОформленоЧастично)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовВЕТИС.НеОформлено)
		|	КОНЕЦ КАК СтатусОформления
		|ИЗ
		|	РезультатПоДокументам КАК Т");
	
	Запрос.Текст = СтрСоединить(ЧастиЗапроса);
	
	// Получим данные и определим статус оформления документа ВЕТИС.
	
	СтатусОформления = Новый Структура(
		"СтатусОформления, ДополнительнаяИнформация",
		Перечисления.СтатусыОформленияДокументовВЕТИС.НеОформлено,
		Неопределено);
	
	Результат = МассивВСоответствие(МассивДокументов, СтатусОформления);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка   = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ * ИЗ Результат КАК Т ГДЕ Т.ДокументОснование = &ДокументОснование";
	
	Пока Выборка.Следующий() Цикл
		
		Запрос.УстановитьПараметр("ДокументОснование", Выборка.ДокументОснование);
		
		// Сохраним данные, использовавшиеся для расчета статуса.
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаДляРасчетаСтатуса = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
	
		ТаблицаДляРасчетаСтатуса.Колонки.ЭтоДвижениеПриход.Заголовок = НСтр("ru='Приходное движение'");
		ТаблицаДляРасчетаСтатуса.Колонки.План.Заголовок 			 = НСтр("ru='По документу-основанию'");
		ТаблицаДляРасчетаСтатуса.Колонки.Факт.Заголовок 			 = НСтр("ru='По документу ВетИС'");
		
		ДополнительнаяИнформация = Новый ХранилищеЗначения(ТаблицаДляРасчетаСтатуса, Новый СжатиеДанных(9));
		
		СтатусОформления = Новый Структура(
			"СтатусОформления, ДополнительнаяИнформация",
			Выборка.СтатусОформления,
			ДополнительнаяИнформация);
		
		Результат.Вставить(Выборка.ДокументОснование, СтатусОформления);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает перечень документов, у которых совпадает отправитель и получатель ВЕТИС.
//
// Параметры:
//	МассивДокументов 		 - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - документы-основание для документа ВЕТИС
//	МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//	ТаблицаРеквизитов 		 - ТаблицаЗначений - значения реквизитов элементов МассивДокументов
//	МенеджерВТ 				 - МенеджерВременныхТаблиц - хранит данные ТаблицаРеквизитов 
//
// Возвращаемое значение:
//	Массив - массив документов, у которых совпадает отправитель и получатель
//
Функция ОпределитьСовпадениеОтправителяИПолучателяВЕТИС(МассивДокументов, МетаданныеДокументаВЕТИС, ТаблицаРеквизитов, МенеджерВТ)
	
	Если МетаданныеДокументаВЕТИС <> Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС
	 И МетаданныеДокументаВЕТИС <> Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаРеквизитов", ТаблицаРеквизитов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.ДокументОснование,
	|	Т.Контрагент,
	|	Т.ТорговыйОбъект,
	|	Т.ПроизводственныйОбъект
	|ПОМЕСТИТЬ %1
	|ИЗ
	|	&ТаблицаРеквизитов КАК Т";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст, 
		"ТаблицаРеквизитов" + МетаданныеДокументаВЕТИС.Имя);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МетаданныеДокументаВЕТИС <> Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос.УстановитьПараметр(
		"ПустойТорговыйОбъект",
		ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ТорговыйОбъектВЕТИС));
	Запрос.УстановитьПараметр(
		"ПустойПроизводственныйОбъект",
		ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ПроизводственныйОбъектВЕТИС));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Субъект.Ссылка КАК ХозяйствующийСубъект,
	|	СубъектПредприятия.Предприятие КАК Предприятие,
	|	Субъект.Контрагент КАК Контрагент,
	|	СубъектПредприятия.ТорговыйОбъект КАК ТорговыйОбъект,
	|	СубъектПредприятия.ПроизводственныйОбъект КАК ПроизводственныйОбъект
	|ПОМЕСТИТЬ ВТПредприятия
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК Субъект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК СубъектПредприятия
	|		ПО Субъект.Ссылка = СубъектПредприятия.Ссылка
	|ГДЕ
	|	НЕ Субъект.ПометкаУдаления
	|	И СубъектПредприятия.Предприятие <> ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
	|	И (СубъектПредприятия.ТорговыйОбъект НЕ В (&ПустойТорговыйОбъект)
	|			ИЛИ СубъектПредприятия.ПроизводственныйОбъект НЕ В (&ПустойПроизводственныйОбъект))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ДокументОснование КАК ДокументОснование,
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие,
	|	МАКСИМУМ(Т.Приход) КАК Приход,
	|	МАКСИМУМ(Т.Расход) КАК Расход
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.ДокументОснование КАК ДокументОснование,
	|		Предприятия.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|		Предприятия.Предприятие КАК Предприятие,
	|		ИСТИНА КАК Приход,
	|		ЛОЖЬ КАК Расход
	|	ИЗ
	|		ТаблицаРеквизитовВходящаяТранспортнаяОперацияВЕТИС КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредприятия КАК Предприятия
	|			ПО Т.Контрагент = Предприятия.Контрагент
	|				И (Т.ТорговыйОбъект = Предприятия.ТорговыйОбъект
	|						И Т.ТорговыйОбъект НЕ В (&ПустойТорговыйОбъект)
	|					ИЛИ Т.ПроизводственныйОбъект = Предприятия.ПроизводственныйОбъект
	|						И Т.ПроизводственныйОбъект НЕ В (&ПустойПроизводственныйОбъект))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Т.ДокументОснование,
	|		Предприятия.ХозяйствующийСубъект,
	|		Предприятия.Предприятие,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		ТаблицаРеквизитовИсходящаяТранспортнаяОперацияВЕТИС КАК Т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПредприятия КАК Предприятия
	|			ПО Т.Контрагент = Предприятия.Контрагент
	|				И (Т.ТорговыйОбъект = Предприятия.ТорговыйОбъект
	|						И Т.ТорговыйОбъект НЕ В (&ПустойТорговыйОбъект)
	|					ИЛИ Т.ПроизводственныйОбъект = Предприятия.ПроизводственныйОбъект
	|						И Т.ПроизводственныйОбъект НЕ В (&ПустойПроизводственныйОбъект))) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ДокументОснование,
	|	Т.ХозяйствующийСубъект,
	|	Т.Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ВТДокументы КАК Т
	|ГДЕ
	|	Т.Приход
	|	И Т.Расход";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Записывает статусы оформления документов ВЕТИС в регистр сведений СтатусыОформленияДокументовВЕТИС.
//
// Параметры:
//	МассивДокументов 		 - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС - документы-основание для документа ВЕТИС
//	МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//	ТаблицаРеквизитов 		 - ТаблицаЗначений - значения реквизитов элементов МассивДокументов
//	ПроверятьОтправителяИПолучателя - Булево - при определении статуса проверять, чтобы отправитель и получатель в ТТН не совпадали
// 
Процедура ЗаписатьСтатусОформленияДокументов(МассивДокументов, МетаданныеДокументаВЕТИС, ТаблицаРеквизитов, НеОформлятьДокументы)
	
	МенеджерВТ 		  = Новый МенеджерВременныхТаблиц;
	ПустаяСсылкаВЕТИС = Документы[МетаданныеДокументаВЕТИС.Имя].ПустаяСсылка();
	
	// Проверим наличие записей регистра статусов.
	ЕстьЗаписиРегистра = РегистрыСведений.СтатусыОформленияДокументовВЕТИС.ДокументыОснованияСЗаписямиРегистра(
		МассивДокументов,
		ПустаяСсылкаВЕТИС);
	
	КоличествоСтрокДокументовОснования = СформироватьТаблицуТоварыДокументовОснования(
		МассивДокументов,
		МетаданныеДокументаВЕТИС,
		МенеджерВТ);
	
	СтатусыОформленияДокументов = ОпределитьСтатусыОформленияДокументов(
		МассивДокументов,
		МетаданныеДокументаВЕТИС,
		МенеджерВТ);
	
	Для Каждого ДокументОснование Из МассивДокументов Цикл
		
		ЗначенияРеквизитов = ТаблицаРеквизитов.Найти(ДокументОснование, "ДокументОснование");
		ЕстьЗаписьРегистра = (ЕстьЗаписиРегистра.Найти(ДокументОснование) <> Неопределено);
		
		Если ТипЗнч(ДокументОснование) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС")
		 И (ЗначенияРеквизитов.ПометкаУдаления
			ИЛИ ЗначенияРеквизитов.Статус <> Перечисления.СтатусыВетеринарныхДокументовВЕТИС.Оформлен) Тогда
			
			ТребуетсяОформление = Ложь;
			
		ИначеЕсли ТипЗнч(ДокументОснование) <> Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС")
		 И НЕ ЗначенияРеквизитов.Проведен Тогда
			
			ТребуетсяОформление = Ложь;
			
		ИначеЕсли ЗначениеЗаполнено(НеОформлятьДокументы)
		 И НеОформлятьДокументы.Найти(ДокументОснование) <> Неопределено Тогда
			
			ТребуетсяОформление = Ложь;
			
		Иначе
			
			ТребуетсяОформление = ЗначениеЗаполнено(КоличествоСтрокДокументовОснования[ДокументОснование]);
			
		КонецЕсли;
		
		Если ЕстьЗаписьРегистра И НЕ ТребуетсяОформление Тогда
			
			РегистрыСведений.СтатусыОформленияДокументовВЕТИС.УдалитьЗаписьРегистра(
				ДокументОснование,
				ПустаяСсылкаВЕТИС);
			
		ИначеЕсли ЕстьЗаписьРегистра ИЛИ ТребуетсяОформление Тогда
			
			СтатусДокумента 	= СтатусыОформленияДокументов[ДокументОснование];
			ДанныеЗаписиСтатуса = РегистрыСведений.СтатусыОформленияДокументовВЕТИС.ЗначенияПолейЗаписиРегистраПоУмолчанию(
				ДокументОснование,
				ПустаяСсылкаВЕТИС);
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаписиСтатуса, ЗначенияРеквизитов);
			ЗаполнитьЗначенияСвойств(ДанныеЗаписиСтатуса, СтатусДокумента);
			
			РегистрыСведений.СтатусыОформленияДокументовВЕТИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписиСтатуса);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Служебная. Готовит данные к расчету статусов оформления.
//
// Параметры:
//	Источники 	   - Массив из элементов следующих типов
//		ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//		ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС
//	ИсточникОбъект - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
Процедура РассчитатьСтатусыОформленияДокументовВЕТИСОбщая(Источники, ИсточникОбъект = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Источники) Тогда
		Возврат;
	КонецЕсли;
	
	Источник 				 = Источники[0];
	МетаданныеИсточника 	 = Источник.Метаданные();
	МетаРеквизитОснование 	 = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеИсточника);
	ИсточникЭтоДокументВЕТИС = Метаданные.ОпределяемыеТипы.ДокументыВЕТИСПоддерживающиеСтатусыОформления.Тип.СодержитТип(ТипЗнч(Источник));
		
	// Определим документы-основания.
	Если ИсточникЭтоДокументВЕТИС Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Источники", 				 Источники);
		Запрос.УстановитьПараметр("ПустойДокументОснование", МетаРеквизитОснование.Тип.ПривестиЗначение(Неопределено));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(Т.ДокументОснование) КАК ТипОснования,
		|	Т.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.%1 КАК Т
		|ГДЕ
		|	Т.Ссылка В (&Источники)
		|	И Т.ДокументОснование <> &ПустойДокументОснование
		|ИТОГИ ПО
		|	ТипОснования";
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Запрос.Текст,
			МетаданныеИсточника.Имя);
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаТипов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока ВыборкаТипов.Следующий() Цикл
			
			МассивДокументов  = Новый Массив;
			ВыборкаДокументов = ВыборкаТипов.Выбрать();
			
			Пока ВыборкаДокументов.Следующий() Цикл
				МассивДокументов.Добавить(ВыборкаДокументов.ДокументОснование);
			КонецЦикла;
			
			РассчитатьСтатусыОформленияДокументовОснованийВЕТИС(МассивДокументов);
			
		КонецЦикла;
		
	Иначе
		
		РассчитатьСтатусыОформленияДокументовОснованийВЕТИС(Источники, ИсточникОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Служебная. Рассчитывает и записывает статусы оформления.
//
// Параметры:
//	МассивДокументов - Массив из элементов с типом ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИС
//	ИсточникОбъект 	 - ОпределяемыйТип.ОснованиеСтатусыОформленияДокументовВЕТИСОбъект
//
Процедура РассчитатьСтатусыОформленияДокументовОснованийВЕТИС(МассивДокументов, ИсточникОбъект = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = МассивДокументов[0];
	ТипДокументОснование = ТипЗнч(ДокументОснование);
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();
	
	Если НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовВЕТИС.Тип.СодержитТип(ТипДокументОснование) Тогда
		
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ссылочный тип ""%1"" не входит в состав определяемого типа ""ОснованиеСтатусыОформленияДокументовВетИС"".'"),
			СокрЛП(ТипДокументОснование));
		
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПодсистемы(),УточнениеОшибки); // ошибка состава определяемого типа ОснованиеСтатусыОформленияДокументовВЕТИС
		
	КонецЕсли;
	
	// Определим документы ВЕТИС, которые могут оформляться на основании ДокументОснование.
	ДокументыВЕТИС = ИнтеграцияВЕТИСВызовСервера.ИменаДокументовВЕТИСДляДокументаОснования(ДокументОснование, Истина);
	
	Если НЕ ЗначениеЗаполнено(ДокументыВЕТИС) Тогда
		
		УточнениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ссылочный тип ""%1"" не входит в состав ни одного из определяемых типов вида ""Основание<ИмяДокументаВетИС>"".'"),
			СокрЛП(ТипДокументОснование));
		
		ВызватьИсключение ИнтеграцияИСКлиентСервер.ТекстОшибки(ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПодсистемы(),УточнениеОшибки); // ошибка составов определяемых типов Основание<ИмяДокументаВЕТИС>
		
	КонецЕсли;
	
	// Если документ является основанием для исходящей и входящей операции ВЕТИС,
	// и ХозяйствующийСубъект/Предприятие в них совпадают, то формировать документы ВЕТИС не нужно.
	Если ДокументыВЕТИС.Найти(Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС.Имя) <> Неопределено
	 И ДокументыВЕТИС.Найти(Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС.Имя) <> Неопределено Тогда
		ПроверятьОтправителяИПолучателя = Истина;
	Иначе
		ПроверятьОтправителяИПолучателя = Ложь;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Заполним статус оформления для каждого документа ВЕТИС.
	Для Каждого ТекущийДокументВЕТИС Из ДокументыВЕТИС Цикл
		
		МетаданныеДокументаВЕТИС = Метаданные.Документы[ТекущийДокументВЕТИС];
		
		// Получим значения ключевых реквизитов документа-основания.
		Если МетаданныеДокументаОснования = Метаданные.Справочники.ВетеринарноСопроводительныйДокументВЕТИС Тогда
			СтруктураРеквизитов = Новый Структура;
			СтруктураРеквизитов.Вставить("ПометкаУдаления", "ПометкаУдаления");
			СтруктураРеквизитов.Вставить("Дата", 			"Дата");
			СтруктураРеквизитов.Вставить("Статус", 			"Статус");
		Иначе
			СтруктураРеквизитов = СтруктураРеквизитовДляРасчетаСтатусаОформленияДокументовВЕТИС(
				МетаданныеДокументаОснования,
				МетаданныеДокументаВЕТИС);
		КонецЕсли;
		
		СтруктураРеквизитов.Вставить("ДокументОснование", "Ссылка");
		
		ПредопределенныеЗначения = Новый Структура;
		СоставныеРеквизиты 		 = Новый Структура;
		ТаблицаРеквизитов 		 = Новый ТаблицаЗначений;
		МетаРеквизиты 			 = Метаданные.РегистрыСведений.СтатусыОформленияДокументовВЕТИС.Реквизиты;
		
		Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
			
			МетаРеквизит = МетаРеквизиты.Найти(КлючИЗначение.Ключ);
			
			Если МетаРеквизит = Неопределено Тогда
				Если КлючИЗначение.Ключ = "ДокументОснование" Тогда
					ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ, Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовВЕТИС.Тип);
				Иначе
					ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ); // вспомогательный реквизит
				КонецЕсли;
			Иначе
				ТаблицаРеквизитов.Колонки.Добавить(КлючИЗначение.Ключ, МетаРеквизит.Тип); // реквизит регистра статусов
			КонецЕсли;
			
			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Строка") ИЛИ ПустаяСтрока(КлючИЗначение.Значение) Тогда
				// Значение уже определено в ПриОпределенииИменРеквизитовДокументаДляРасчетаСтатусаОформленияДокументаВЕТИС.
				ПредопределенныеЗначения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			ИначеЕсли СтрНайти(КлючИЗначение.Значение, ",") > 0 Тогда
				СоставныеРеквизиты.Вставить(
					КлючИЗначение.Ключ,
					СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Значение, ",",, Истина));
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИсточникОбъект <> Неопределено Тогда
			
			// Процедура вызвана из обработчика события записи документа-основания.
			// Прочитаем реквизиты из самого объекта документа-основания.
			
			СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				Если НЕ ПредопределенныеЗначения.Свойство(КлючИЗначение.Ключ) Тогда
					
					Если СоставныеРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда
						
						Для Каждого ТекущийРеквизит Из СоставныеРеквизиты[КлючИЗначение.Ключ] Цикл
							
							ЗначениеРеквизита = ЗначениеРеквизитаОбъекта(ИсточникОбъект, ТекущийРеквизит);
							
							Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								СтрокаРеквизитов[КлючИЗначение.Ключ] = ЗначениеРеквизита;
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
						
						СтрокаРеквизитов[КлючИЗначение.Ключ] = ЗначениеРеквизитаОбъекта(ИсточникОбъект, КлючИЗначение.Значение);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// Прочитаем реквизиты документов-оснований из ИБ.
			ИменаРеквизитов = "";
			ИменаРеквизитовТЧ = "";
			СтруктураРеквизитовОснования = Новый Структура; // поменянные местами Ключ и Значение из СтруктураРеквизитов
			СтруктураРеквизитовТЧОснования = Новый Соответствие; // поменянные местами Ключ и Значение из СтруктураРеквизитов
			
			Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
				
				Если НЕ ПредопределенныеЗначения.Свойство(КлючИЗначение.Ключ) Тогда
					
					Если СтрНайти(КлючИЗначение.Значение, ".") = 0 Тогда
						ИменаРеквизитов = ИменаРеквизитов + ?(ИменаРеквизитов = "", "", ", ") + КлючИЗначение.Значение;
					Иначе
						ИменаРеквизитовТЧ = ИменаРеквизитовТЧ + ?(ИменаРеквизитовТЧ = "", "", ", ") + КлючИЗначение.Значение;
					КонецЕсли;
					
					Если СоставныеРеквизиты.Свойство(КлючИЗначение.Ключ) Тогда
						Для Каждого ТекущийРеквизит Из СоставныеРеквизиты[КлючИЗначение.Ключ] Цикл
							Если СтрНайти(ТекущийРеквизит, ".") = 0 Тогда
								Если СтруктураРеквизитовОснования.Свойство(ТекущийРеквизит) Тогда
									СтруктураРеквизитовОснования.Вставить(ТекущийРеквизит, СтруктураРеквизитовОснования[ТекущийРеквизит] + "," + КлючИЗначение.Ключ);
								Иначе
									СтруктураРеквизитовОснования.Вставить(ТекущийРеквизит, КлючИЗначение.Ключ);
								КонецЕсли;
							Иначе
								Если СтруктураРеквизитовТЧОснования.Получить(ТекущийРеквизит) <> Неопределено Тогда
									СтруктураРеквизитовТЧОснования.Вставить(ТекущийРеквизит, СтруктураРеквизитовТЧОснования.Получить(ТекущийРеквизит) + "," + КлючИЗначение.Ключ);
								Иначе
									СтруктураРеквизитовТЧОснования.Вставить(ТекущийРеквизит, КлючИЗначение.Ключ);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Если СтрНайти(КлючИЗначение.Значение, ".") = 0 Тогда
							Если СтруктураРеквизитовОснования.Свойство(КлючИЗначение.Значение) Тогда
								СтруктураРеквизитовОснования.Вставить(КлючИЗначение.Значение, СтруктураРеквизитовОснования[КлючИЗначение.Значение] + "," + КлючИЗначение.Ключ);
							Иначе
								СтруктураРеквизитовОснования.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
							КонецЕсли;
						Иначе
							Если СтруктураРеквизитовТЧОснования.Получить(КлючИЗначение.Значение) <> Неопределено Тогда
								СтруктураРеквизитовТЧОснования.Вставить(КлючИЗначение.Значение, СтруктураРеквизитовТЧОснования.Получить(КлючИЗначение.Значение) + "," + КлючИЗначение.Ключ);
							Иначе
								СтруктураРеквизитовТЧОснования.Вставить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			
			ЗначенияРеквизитовОбъектов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДокументов, ИменаРеквизитов);
			
			Для Каждого РеквизитыДокумента Из ЗначенияРеквизитовОбъектов Цикл
				
				СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();
				
				Для Каждого ЗначенияРеквизитовДокумента Из РеквизитыДокумента.Значение Цикл
					
					ИменаРеквизитов = СтруктураРеквизитовОснования[ЗначенияРеквизитовДокумента.Ключ];
					
					Для Каждого ИмяРеквизита Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",",, Истина) Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаРеквизитов[ИмяРеквизита]) Тогда
							СтрокаРеквизитов[ИмяРеквизита] = ЗначенияРеквизитовДокумента.Значение;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если СтруктураРеквизитовТЧОснования.Количество() > 0 Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
				
				ШаблонЗапроса =
				"ВЫБРАТЬ
				|	Т.Ссылка КАК Ссылка,
				|	""%4"" КАК ИменаРеквизита,
				|	Т.%3 КАК ЗначениеРеквизита
				|ИЗ
				|	Документ.%1.%2 КАК Т
				|ГДЕ
				|	Т.Ссылка В(&МассивДокументов)
				|	И Т.НомерСтроки = 1";
				
				Для Каждого КлючИЗначение Из СтруктураРеквизитовТЧОснования Цикл
					
					МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Ключ, ".",, Истина);
					
					Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС)
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса,
							МетаданныеДокументаОснования.Имя,
							МассивИмен[0],
							МассивИмен[1],
							КлючИЗначение.Значение);
					
				КонецЦикла;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					СтрокаРеквизитов = ТаблицаРеквизитов.Найти(Выборка.Ссылка, "ДокументОснование");
					ИменаРеквизитов  = Выборка.ИменаРеквизита;
					
					Для Каждого ИмяРеквизита Из СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",",, Истина) Цикл
						
						Если НЕ ЗначениеЗаполнено(СтрокаРеквизитов[ИмяРеквизита]) Тогда
							СтрокаРеквизитов[ИмяРеквизита] = Выборка.ЗначениеРеквизита;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		// Заполним значения реквизитов, заданные явно.
		Для Каждого КлючИЗначение Из ПредопределенныеЗначения Цикл
			ТаблицаРеквизитов.ЗаполнитьЗначения(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		КонецЦикла;
		
		Если ПроверятьОтправителяИПолучателя Тогда
			НеОформлятьДокументы = ОпределитьСовпадениеОтправителяИПолучателяВЕТИС(
				МассивДокументов,
				МетаданныеДокументаВЕТИС,
				ТаблицаРеквизитов,
				МенеджерВТ);
		Иначе
			НеОформлятьДокументы = Новый Массив;
		КонецЕсли;
		
		// Запишем статус оформления документа ВЕТИС.
		ЗаписатьСтатусОформленияДокументов(
			МассивДокументов,
			МетаданныеДокументаВЕТИС,
			ТаблицаРеквизитов,
			НеОформлятьДокументы);
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает статусы ветеринарных сопроводительных документов, указанных во входящей транспортной операции.
//
// Параметры:
//	Источник - объект, содержащий данные о ВСД
//		ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС
//		ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС
//		Массив из ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС
//
Процедура РассчитатьСтатусыОформленияВСД(Источник)
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ТаблицаВСД = Источник.Товары.Выгрузить(, "ВетеринарноСопроводительныйДокумент");
		ТаблицаВСД.Свернуть("ВетеринарноСопроводительныйДокумент", "");
		
		ПустыеВСД = ТаблицаВСД.НайтиСтроки(
			Новый Структура("ВетеринарноСопроводительныйДокумент", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка()));
		
		Для Каждого СтрокаТаблицы Из ПустыеВСД Цикл
			ТаблицаВСД.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(Источник) = Тип("Массив") И ЗначениеЗаполнено(Источник) Тогда
			ИсточникСсылка = Источник[0];
		Иначе
			ИсточникСсылка = Источник;
		КонецЕсли;
		
		Если ТипЗнч(ИсточникСсылка) <> Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			МассивДокументов = Источник;
		Иначе
			МассивДокументов = Новый Массив;
			МассивДокументов.Добавить(Источник);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.ВетеринарноСопроводительныйДокумент КАК ВетеринарноСопроводительныйДокумент
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В (&МассивДокументов)
		|	И Товары.ВетеринарноСопроводительныйДокумент <> ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		УстановитьПривилегированныйРежим(Истина);
		ТаблицаВСД = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	РассчитатьСтатусыОформленияДокументовВЕТИСОбщая(ТаблицаВСД.ВыгрузитьКолонку("ВетеринарноСопроводительныйДокумент"));
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

// Преобразует массив в соответствие с ключами, соответствующими элементам массива.
//
Функция МассивВСоответствие(МассивИсточник, Знач ЗначениеПоУмолчанию = Неопределено)
	
	Результат = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из МассивИсточник Цикл
		Результат.Вставить(ЭлементМассива, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеРеквизитаОбъекта(ИсточникОбъект, ИмяРеквизита)
	
	ЗначениеРеквизита = Неопределено;
	
	Если СтрНайти(ИмяРеквизита, ".") = 0 Тогда
		
		ЗначениеРеквизита = ИсточникОбъект[ИмяРеквизита];
		
	Иначе
		
		МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизита, ".",, Истина);
		ТЧОбъекта = ИсточникОбъект[МассивИмен[0]];
		
		Если ТЧОбъекта.Количество() > 0 Тогда
			ЗначениеРеквизита = ТЧОбъекта[0][МассивИмен[1]];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

#КонецОбласти

#КонецОбласти
