#Область ПрограммныйИнтерфейс

// Проверяет, является ли переданное расширение экземпляром поставляемого расширения.
//
// Параметры:
// ИспользуемоеРасширение - УникальныйИдентификатор.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения) Экспорт
	
	ПоставляемоеРасширение = ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения);
	Возврат ЗначениеЗаполнено(ПоставляемоеРасширение);
	
КонецФункции

// Возвращает поставляемое расширение, соответствующее используемому расширению.
//
// Параметры:
// ИспользуемоеРасширение - РасширениеКонфигурации.
//
// Возвращаемое значение:
//  СправочникСсылка.ПоставляемыеРасширения.
//
Функция ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции РасширенияВМоделиСервиса.ПоставляемоеРасширение()
                                |доступно только для сеансов с установленным разделением данных!'");
		
	КонецЕсли;
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ПоставляемоеРасширение КАК ПоставляемоеРасширение
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ИспользуемоеРасширение = &ИспользуемоеРасширение");
				   
	Запрос.УстановитьПараметр("ИспользуемоеРасширение", ИдентификаторИспользуемогоРасширения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат = Выборка.ПоставляемоеРасширение;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает используемое расширение, соответствующее поставляемому расширению.
//
// Параметры:
//  ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения.
//
// Возвращаемое значение:
//  РасширениеКонфигурации.
//
Функция ИспользуемоеРасширение(ПоставляемоеРасширение) Экспорт
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции РасширенияВМоделиСервиса.ИспользуемоеРасширение()
                                |доступно только для сеансов с установленным разделением данных!'");
		
	КонецЕсли;
							
	Результат = Новый Структура("Расширение, Инсталляция");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.ПоставляемоеРасширение.Имя КАК Имя,
	|	Т.ИспользуемоеРасширение КАК ИспользуемоеРасширение,
	|	Т.Инсталляция КАК Инсталляция
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("УникальныйИдентификатор", Выборка.ИспользуемоеРасширение));
		
		Если НайденныеРасширения.Количество() > 0 Тогда
		
			Результат.Расширение = НайденныеРасширения[0];
			Результат.Инсталляция = Выборка.Инсталляция;
			
		Иначе
			
			НайденныеРасширения = РасширенияКонфигурации.Получить(Новый Структура("Имя", Выборка.Имя));
			
			Если НайденныеРасширения.Количество() > 0 Тогда
			
				Результат.Расширение = НайденныеРасширения[0];
				Результат.Инсталляция = Выборка.Инсталляция;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает перечень инсталляций поставляемого расширения в области данных.
//
// Параметры:
//   ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения.
//
// Возвращаемое значение: ТаблицаЗначений:
//   * ОбластьДанных - Число, номер области данных,
//   * ИспользуемоеРасширение - УникальныйИдентификатор, идентификатор установленного расширения.
//
Функция ПереченьИнсталляций(Знач ПоставляемоеРасширение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	Т.ИспользуемоеРасширение КАК ИспользуемоеРасширение
	|ИЗ
	|	РегистрСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает очередь инсталляций поставляемого расширения в области данных.
//
// Параметры:
//   ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения.
//
// Возвращаемое значение: ТаблицаЗначений:
//   * ОбластьДанных - Число, номер области данных,
//   * ПараметрыУстановки - ХранилищеЗначения, содержащее параметры установки.
//
Функция ОчередьИнсталляций(Знач ПоставляемоеРасширение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
	|	Т.ПараметрыИнсталляции КАК ПараметрыИнсталляции
	|ИЗ
	|	РегистрСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных КАК Т
	|ГДЕ
	|	Т.ПоставляемоеРасширение = &ПоставляемоеРасширение");
	
	Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет установку поставляемого расширения в текущую область данных после получения поставляемых данных
// и извещает МС в случае неудачи.
//
// См. описание параметров УстановитьПоставляемоеРасширениеВОбластьДанных
// 
Процедура УстановитьПоставляемоеРасширениеПриПолучении(Знач ОписаниеИнсталляции, Знач Ответственный) Экспорт
	
	Попытка
		
		УстановитьПоставляемоеРасширениеВОбластьДанных(ОписаниеИнсталляции, Ответственный);
		
	Исключение
		
		ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ОписаниеИнсталляции.Идентификатор);
		ОбработатьОшибкуУстановкиРасширенияВОбластьДанных(ПоставляемоеРасширение, ОписаниеИнсталляции.Инсталляция, ТекстИсключения);
			
	КонецПопытки;
	
КонецПроцедуры

// Выполняет установку поставляемого расширения в текущую область данных.
//
// Параметры:
//  ОписаниеИнсталляции - Структура, ключи:
//    Идентификатор - УникальныйИдентификатор, уникальный идентификатор ссылки
//      элемента справочника ПоставляемыеРасширения,
//    Представление - строка, представление инсталляции поставляемого расширения
//    Инсталляция - УникальныйИдентификатор, уникальный идентификатор инсталляции
//      поставляемого расширения
//  Ответственный - СправочникСсылка.Пользователи.
//
Процедура УстановитьПоставляемоеРасширениеВОбластьДанных(Знач ОписаниеИнсталляции, Знач Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Поставляемые расширения.Инициирована установка поставляемого расширения в область данных'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			Строка(ОписаниеИнсталляции.Идентификатор),
			Строка(ОписаниеИнсталляции.Инсталляция));
		
		ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(ОписаниеИнсталляции.Идентификатор);
		
		Набор = РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных.СоздатьНаборЗаписей();
		Набор.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
		Набор.Записать();
		
		Если ОбщегоНазначения.СсылкаСуществует(ПоставляемоеРасширение) Тогда
			
			// Создание расширения, выступающего в роли используемого расширения
			ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
			
			Если ИспользуемоеРасширение.Расширение = Неопределено Тогда
				
				ИспользуемоеРасширение.Расширение = РасширенияКонфигурации.Создать();
				
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Т.ХранилищеРасширения КАК Данные,
			|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
			|	НЕ 1 В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				1
			|			ИЗ
			|				Справочник.ПоставляемыеРасширения.Разрешения КАК Т
			|			ГДЕ
			|				Т.Ссылка = &ПоставляемоеРасширение) КАК БезопасныйРежим
			|ИЗ
			|	Справочник.ПоставляемыеРасширения КАК Т
			|ГДЕ
			|	Т.Ссылка = &ПоставляемоеРасширение");
			
			Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Константы.ИспользоватьПрофилиБезопасностиДляРасширений.Получить() И НЕ Выборка.БезопасныйРежим Тогда
				
				ИспользуемоеРасширение.Расширение.БезопасныйРежим = Строка(Выборка.ИдентификаторВерсии);
				
			Иначе
				
				ИспользуемоеРасширение.Расширение.БезопасныйРежим = Выборка.БезопасныйРежим;
				
			КонецЕсли;
			
			ИспользуемоеРасширение.Расширение.ЗащитаОтОпасныхДействий = ОбщегоНазначения.ОписаниеЗащитыБезПредупреждений();
			ИспользуемоеРасширение.Расширение.Записать(Выборка.Данные.Получить());
			
			// Установка связи между поставляемым и используемым расширением
			НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
			
			Запись = НаборЗаписей.Добавить();
			Запись.ПоставляемоеРасширение = ПоставляемоеРасширение;
			Запись.ИспользуемоеРасширение = ИспользуемоеРасширение.Расширение.УникальныйИдентификатор;
			Запись.Инсталляция = ОписаниеИнсталляции.Инсталляция;
			НаборЗаписей.Записать();
			
			КаталогРасширений.ИзменитьСостояниеОповещенийРасширений(ОписаниеИнсталляции.Идентификатор);
			
			// Отправка сообщение в МС об успешной установке расширения в область данных
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияКонтрольРасширенийИнтерфейс.СообщениеРасширениеУстановлено());
			
			Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
			Сообщение.Body.Installation = ОписаниеИнсталляции.Инсталляция;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
				Истина);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Установка в область данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемоеРасширение,
				Строка(ОписаниеИнсталляции.Инсталляция));
				
		Иначе
			
			// Поставляемое расширение еще не синхронизировалось через поставляемые данные.
			// Оно будет записано в очередь инсталляции и обработано после окончания синхронизации
			// поставляемых данных.
			
			Контекст = Новый Структура(
				"Ответственный, Представление, Инсталляция",
				Ответственный,
				ОписаниеИнсталляции.Представление,
				ОписаниеИнсталляции.Инсталляция);
			
			Менеджер = РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных.СоздатьМенеджерЗаписи();
			Менеджер.ПоставляемоеРасширение = ПоставляемоеРасширение;
			Менеджер.ПараметрыИнсталляции = Новый ХранилищеЗначения(Контекст);
			Менеджер.Записать();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Установка в область данных отложена'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				Строка(ОписаниеИнсталляции.Идентификатор),
				Строка(ОписаниеИнсталляции.Инсталляция));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбменСообщениями.ДоставитьСообщения();

КонецПроцедуры

// Выполняет удаление поставляемого расширения из текущей области данных.
//
// Параметры:
//  ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения.
//
Процедура УдалитьПоставляемоеРасширениеИзОбластиДанных(Знач ПоставляемоеРасширение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			
			ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
			
			// Очистка связи между поставляемым и используемым расширением.
			НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоставляемоеРасширение.Установить(ПоставляемоеРасширение);
			
			// Отправим в МС сообщение об удалении расширения из области данных.
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольРасширенийИнтерфейс.СообщениеРасширениеУдалено());
			
			Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
			Сообщение.Body.Installation = ИспользуемоеРасширение.Инсталляция;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
			// Удаление используемого расширения
			ИспользуемоеРасширение.Расширение.Удалить();
			
			КаталогРасширений.ИзменитьСостояниеОповещенийРасширений(ПоставляемоеРасширение.УникальныйИдентификатор(), Истина);
			
			НаборЗаписей.Записать();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Удаление из области данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемоеРасширение,
				Строка(ИспользуемоеРасширение.Инсталляция));
			
		Исключение
			
			ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Ошибка удаления из области данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПоставляемоеРасширение,
				Строка(ИспользуемоеРасширение.Инсталляция) + Символы.ПС + Символы.ВК + ТекстИсключения);
			
			// Отправка сообщения в МС об ошибке удаления расширения из области данных
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольРасширенийИнтерфейс.СообщениеОшибкаУдаленияРасширения());
			
			Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
			Сообщение.Body.Installation = ИспользуемоеРасширение.Инсталляция;
			Сообщение.Body.ErrorDescription = ТекстИсключения;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление поставляемого расширения из всех областей данных
//  текущей информационной базы.
//
// Параметры:
//  ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения.
//
Процедура ОтозватьПоставляемоеРасширение(Знач ПоставляемоеРасширение) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Инсталляции = ПереченьИнсталляций(ПоставляемоеРасширение);
		
		Для каждого Инсталляция Из Инсталляции Цикл
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ПоставляемоеРасширение);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.УдалитьПоставляемоеРасширениеИзОбластиДанных");
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("ОбластьДанных", Инсталляция.ОбластьДанных);
			ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
		КонецЦикла;
		
		ОбъектПоставляемоеРасширение = ПоставляемоеРасширение.ПолучитьОбъект();
		ОбъектПоставляемоеРасширение.ОбменДанными.Загрузка = Истина;
		ОбъектПоставляемоеРасширение.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработку ошибки установки расширения в область данных.
//
// Параметры:
//  ПоставляемоеРасширение - СправочникСсылка.ПоставляемыеРасширения,
//  ИдентификаторИнсталляции - УникальныйИдентификатор,
//  ТекстИсключения - Строка, текст исключения.
//
Процедура ОбработатьОшибкуУстановкиРасширенияВОбластьДанных(Знач ПоставляемоеРасширение, Знач ИдентификаторИнсталляции, Знач ТекстИсключения) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Ошибка установки в область данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,
		ПоставляемоеРасширение,
		Строка(ИдентификаторИнсталляции) + Символы.ПС + Символы.ВК + ТекстИсключения);
	
	НачатьТранзакцию();		
	
	Попытка
		
		// Отправка сообщения в МС об ошибке установки расширения в область данных.
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(СообщенияКонтрольРасширенийИнтерфейс.СообщениеОшибкаУстановкиРасширения());
		
		Сообщение.Body.Zone = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
		Сообщение.Body.Extension = ПоставляемоеРасширение.УникальныйИдентификатор();
		Сообщение.Body.Installation = ИдентификаторИнсталляции;
		Сообщение.Body.ErrorDescription = ТекстИсключения;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаБТСПовтИсп.КонечнаяТочкаМенеджераСервиса(),
			Истина);
	
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОбменСообщениями.ДоставитьСообщения();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура вызывается в качестве регламентного задания
// после получения новой версии расширения из каталога расширений менеджера сервиса.
//
// Параметры:
//  Ссылка - УникальныйИдентификатор.
//
Процедура АктуализацияИспользуемогоРасширения(Знач ИдентификаторИспользуемогоРасширения) Экспорт
	
	ПоставляемоеРасширение = ПоставляемоеРасширение(ИдентификаторИспользуемогоРасширения);
	
	Если ЗначениеЗаполнено(ПоставляемоеРасширение) Тогда
		
		ИспользуемоеРасширение = ИспользуемоеРасширение(ПоставляемоеРасширение);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ХранилищеРасширения КАК Данные,
		|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	Т.ХранилищеРасширения КАК ХранилищеРасширения,
		|	НЕ 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				Справочник.ПоставляемыеРасширения.Разрешения КАК Т
		|			ГДЕ
		|				Т.Ссылка = &ПоставляемоеРасширение) КАК БезопасныйРежим
		|ИЗ
		|	Справочник.ПоставляемыеРасширения КАК Т
		|ГДЕ
		|	Т.Ссылка = &ПоставляемоеРасширение");
		
		Запрос.УстановитьПараметр("ПоставляемоеРасширение", ПоставляемоеРасширение);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Константы.ИспользоватьПрофилиБезопасностиДляРасширений.Получить() И НЕ Выборка.БезопасныйРежим Тогда
			
			ИспользуемоеРасширение.Расширение.БезопасныйРежим = Строка(Выборка.ИдентификаторВерсии);
			
		Иначе
			
			ИспользуемоеРасширение.Расширение.БезопасныйРежим = Выборка.БезопасныйРежим;
			
		КонецЕсли;
		
		ИспользуемоеРасширение.Расширение.Записать(Выборка.ХранилищеРасширения.Получить());
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Расширение с идентификатором %1 не является поставляемым!'"),
			Строка(ИдентификаторИспользуемогоРасширения));
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем конфигурации.

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных.ПолноеИмя());
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РасширенияВМоделиСервиса.ЗаблокироватьРасширенияДляОбновления";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриЗаполненииТаблицыПараметровИБ.
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ТехнологияСервисаИнтеграцияСБСП.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		
		МодульРаботаВМоделиСервиса = ТехнологияСервисаИнтеграцияСБСП.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользованиеКаталогаРасширенийВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьПрофилиБезопасностиДляРасширений");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "НезависимоеИспользованиеРасширенийВМоделиСервиса");
		
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ.
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.АктуализацияИспользуемогоРасширения");
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.УстановитьПоставляемоеРасширениеПриПолучении");
	СоответствиеИменПсевдонимам.Вставить("РасширенияВМоделиСервиса.УдалитьПоставляемоеРасширениеИзОбластиДанных");
	
КонецПроцедуры

// См. ПоставляемыеДанныеПереопределяемый.ПолучитьОбработчикиПоставляемыхДанных.
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиПринимаемыхСообщений.
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияУправленияРасширениямиИнтерфейс);
	
КонецПроцедуры

// См. ИнтерфейсыСообщенийВМоделиСервисаПереопределяемый.ЗаполнитьОбработчикиОтправляемыхСообщений.
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияКонтрольРасширенийИнтерфейс);
	
КонецПроцедуры

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки.
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ИспользованиеПоставляемыхРасширенийВОбластяхДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОчередьИнсталляцииПоставляемыхРасширенийВОбластиДанных);
	Типы.Добавить(Метаданные.РегистрыСведений.ОчередьРасширенийДляОповещений);	
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.КодОбработчика = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.Обработчик = РасширенияВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОписаниеПоставляемогоРасширения = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
		
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(ОписаниеПоставляемогоРасширения.Совместимость);
		Чтение.ПерейтиКСодержимому();
		ТаблицаСовместимостиXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(Чтение.URIПространстваИмен, Чтение.Имя));
		ТаблицаСовместимости = РасширенияВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(ТаблицаСовместимостиXDTO);
		
		// Расширение совместимо с версией конфигурации.
		Загружать = ПроверитьСовместимостьПоставляемогоРасширения(ТаблицаСовместимости);
		
		Если НЕ Загружать Тогда
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения отменена'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,,
				НСтр("ru = 'Поставляемое расширение несовместимо с данной конфигурацией'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Совместимость);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОбработатьПоставляемыеРасширения(Дескриптор, ПутьКФайлу);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор вида поставляемых данных для расширений.
//
// Возвращаемое значение: Строка.
Функция ИдентификаторВидаПоставляемыхДанных()
	
	Возврат "Расширения"; // Не локализуется
	
КонецФункции

Функция ОписаниеПоставляемогоРасширения()
	
	Возврат Новый Структура("Идентификатор, Версия, Манифест, Совместимость");
	
КонецФункции

Функция РазобратьДескрипторПоставляемыхДанных(Дескриптор)
	
	ОписаниеПоставляемогоРасширения = ОписаниеПоставляемогоРасширения();
	
	Для каждого ХарактеристикаПоставляемыхДанных Из Дескриптор.Properties.Property Цикл
		
		ОписаниеПоставляемогоРасширения[ХарактеристикаПоставляемыхДанных.Code] = ХарактеристикаПоставляемыхДанных.Value;
		
	КонецЦикла;
	
	Возврат ОписаниеПоставляемогоРасширения;
	
КонецФункции

// Контроль совместимости с текущей версией конфигурации информационной базы
Функция ПроверитьСовместимостьПоставляемогоРасширения(Знач ТаблицаСовместимости)
	
	МетаданныеИмя = Метаданные.Имя;
	МетаданныеВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Метаданные.Версия);
	
	Для каждого ДекларацияСовместимости Из ТаблицаСовместимости Цикл
		
		МинимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(ДекларацияСовместимости.MinimumVersionNumber);
		МаксимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(ДекларацияСовместимости.MaximumVersionNumber);
	
		// Версия конфигурации расположена между минимальной и максимальной допустимыми.
		Если НРег(МетаданныеИмя) = НРег(ДекларацияСовместимости.ConfigarationName)
			И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МинимальнаяВерсия, МетаданныеВерсия) <= 0
			И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МетаданныеВерсия, МаксимальнаяВерсия) <= 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьПоставляемыеРасширения(Дескриптор, ПутьКФайлу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОписаниеПоставляемогоРасширения = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОписаниеПоставляемогоРасширения.Манифест);
	Чтение.ПерейтиКСодержимому();
	МанифестРасширения = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(Чтение.URIПространстваИмен, Чтение.Имя));
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ОписаниеПоставляемогоРасширения.Совместимость);
	Чтение.ПерейтиКСодержимому();
	ТаблицаСовместимостиXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(Чтение.URIПространстваИмен, Чтение.Имя));
	ТаблицаСовместимости = РасширенияВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(ТаблицаСовместимостиXDTO);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Инициирована загрузка поставляемого расширения'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Манифест);
	
	СсылкаПоставляемогоРасширения = Справочники.ПоставляемыеРасширения.ПолучитьСсылку(Новый УникальныйИдентификатор(ОписаниеПоставляемогоРасширения.Идентификатор));
	
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоставляемогоРасширения) Тогда
		
		ПоставляемоеРасширение = СсылкаПоставляемогоРасширения.ПолучитьОбъект();
		
	Иначе
		
		ПоставляемоеРасширение = Справочники.ПоставляемыеРасширения.СоздатьЭлемент();
		ПоставляемоеРасширение.УстановитьСсылкуНового(СсылкаПоставляемогоРасширения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоставляемоеРасширение.ПричинаОтключения) Тогда
		
		Если ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ОбновлениеВерсииКонфигурации Тогда
			
			ПоставляемоеРасширение.Отключено = Ложь;
			ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		ПоставляемоеРасширение.Отключено = Ложь;
		
	КонецЕсли;
	
	Если ПоставляемоеРасширение.ИдентификаторВерсии <> ОписаниеПоставляемогоРасширения.Версия Тогда
		
		РасширенияВМоделиСервисаМанифест.ПрочитатьМанифест(МанифестРасширения, ПоставляемоеРасширение);
		
		ДвоичныеДанныеРасширения = Новый ДвоичныеДанные(ПутьКФайлу);
		ПоставляемоеРасширение.ХранилищеРасширения = Новый ХранилищеЗначения(ДвоичныеДанныеРасширения, Новый СжатиеДанных(9));
		
		ПоставляемоеРасширение.Совместимость.Очистить();
		
		Для каждого ИнформацияОСовместимости Из ТаблицаСовместимости Цикл
			
			Если НРег(ИнформацияОСовместимости.ConfigarationName) = НРег(Метаданные.Имя) Тогда
				
				НоваяСтрока = ПоставляемоеРасширение.Совместимость.Добавить();
				НоваяСтрока.МинимальнаяВерсия = ИнформацияОСовместимости.MinimumVersionNumber;
				НоваяСтрока.МаксимальнаяВерсия = ИнформацияОСовместимости.MaximumVersionNumber;
					
			КонецЕсли;
			
		КонецЦикла;
		
		ПоставляемоеРасширение.ИдентификаторВерсии = Новый УникальныйИдентификатор(ОписаниеПоставляемогоРасширения.Версия);
		ПоставляемоеРасширение.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Загрузка поставляемого расширения завершена'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,
			ПоставляемоеРасширение.Ссылка,
			НСтр("ru = 'Завершена загрузка поставляемого расширения'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемогоРасширения.Манифест);
		
		ИспользуемыеРасширения = ПереченьИнсталляций(ПоставляемоеРасширение.Ссылка);
		
		Для каждого ИнсталляцияРасширения Из ИспользуемыеРасширения Цикл
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ИнсталляцияРасширения.ИспользуемоеРасширение);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.АктуализацияИспользуемогоРасширения");
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("ОбластьДанных", ИнсталляцияРасширения.ОбластьДанных);
			ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые расширения.Запланирована актуализация используемого расширения'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,
				ПоставляемоеРасширение.Ссылка,
				НСтр("ru = 'Область данных:'") + ИнсталляцияРасширения.ОбластьДанных);
			
		КонецЦикла;
		
		ОчередьИнсталляций = ОчередьИнсталляций(ПоставляемоеРасширение.Ссылка);
		
		Для каждого ЭлементОчереди Из ОчередьИнсталляций Цикл
			
			Контекст = ЭлементОчереди.ПараметрыИнсталляции.Получить();
			
			ОписаниеИнсталляции = Новый Структура(
				"Идентификатор, Представление, Инсталляция",
				ПоставляемоеРасширение.Ссылка.УникальныйИдентификатор(),
				Контекст.Представление,
				Контекст.Инсталляция);
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ОписаниеИнсталляции);
			ПараметрыМетода.Добавить(Контекст.Ответственный);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода", "РасширенияВМоделиСервиса.УстановитьПоставляемоеРасширениеПриПолучении");
			ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 1);
			ПараметрыЗадания.Вставить("ОбластьДанных", ЭлементОчереди.ОбластьДанных);
			ПараметрыЗадания.Вставить("ЭксклюзивноеВыполнение", Истина);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые расширения.Запланирована отложенная установка поставляемого расширения в область данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,,
				ПоставляемоеРасширение.Ссылка,
				НСтр("ru = 'Область данных:'") + ЭлементОчереди.ОбластьДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики обновления информационной базы.

// Блокирует расширения в областях данных для
// получения новых версий из менеджера сервиса.
//
Процедура ЗаблокироватьРасширенияДляОбновления() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК ПоставляемоеРасширение,
		|	Т.МинимальнаяВерсия КАК МинимальнаяВерсия,
		|	Т.МаксимальнаяВерсия КАК МаксимальнаяВерсия
		|ИЗ
		|	Справочник.ПоставляемыеРасширения.Совместимость КАК Т
		|ГДЕ
		|	Т.МинимальнаяВерсия <> """" ИЛИ Т.МаксимальнаяВерсия <> """"");
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			МетаданныеВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Метаданные.Версия);
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МинимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Выборка.МинимальнаяВерсия);
				МаксимальнаяВерсия = РасширенияВМоделиСервисаСовместимость.РазделитьВерсию(Выборка.МаксимальнаяВерсия);
				
				// Версия конфигурации расположена между минимальной и максимальной допустимыми.
				Если РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МинимальнаяВерсия, МетаданныеВерсия) <= 0
					И РасширенияВМоделиСервисаСовместимость.СравнитьВерсии(МетаданныеВерсия, МаксимальнаяВерсия) <= 0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПоставляемоеРасширение = Выборка.ПоставляемоеРасширение.ПолучитьОбъект();
				ПоставляемоеРасширение.Отключено = Истина;
				ПоставляемоеРасширение.ПричинаОтключения = Перечисления.ПричиныОтключенияРасширенийВМоделиСервиса.ОбновлениеВерсииКонфигурации;
				ПоставляемоеРасширение.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
