// Сервис Региональные ставки налогов

#Область ПрограммныйИнтерфейс

// Возвращает информацию сервиса о региональных особенностях применения УСН.
//
// Параметры:
//  ПараметрыПолучения - Структура - параметры для запроса информации в сервисе
//  	* КодРегиона - Строка - код субъекта РФ
//  	* КодОКВЭД - Строка - код вида деятельности по классификатору ОКВЭД (ред.2)
//  	* ЭтоЮрЛицо - Булево - получать информацию для организации-юр.лица или для предпринимателя
//  	* ПрименяетсяУСНДоходы - Булево - получать информацию для системы налогообложения УСН (доходы)
//  	* ПрименяетсяУСНДоходыРасходы - Булево - получать информацию для системы налогообложения УСН (доходы - расходы)
// 
// Возвращаемое значение:
//   - Структура
//		* КодСостояния - Число - код состояния из ответа сервиса
//		* Ответ - Структура - информация о региональных особенностях применения УСН
//		* ОписаниеОшибки - Строка - ошибка, возникшая при вызове серсиса
//
Функция ИнформацияУСНВВашемРегионе(ПараметрыПолучения) Экспорт
	
	АдресРесурса = АдресИнформацияУСНВВашемРегионе()
		+ СтрокаПараметровЗапросаКСервису(ПараметрыПолучения, 
			СоответствиеПараметровИнформацияУСНВВашемРегионе());
		
	Возврат ИнформацияСервиса(АдресРесурса);
	
КонецФункции

// Получает краткую информацию о региональных особенностях применения УСН, 
// помещает ее как форматированную строку во временное хранилище.
//
// Параметры:
//  ПараметрыПолучения - Структура - параметры для запроса информации в сервисе
//  	* КодРегиона - Строка - код субъекта РФ
//  	* ЭтоЮрЛицо - Булево - получать информацию для юридического лица или для предпринимателя
//  	* ПрименяетсяУСНДоходы - Булево - получать информацию для системы налогообложения УСН (доходы)
//  	* ПрименяетсяУСНДоходыРасходы - Булево - получать информацию для системы налогообложения УСН (доходы - расходы)
//  АдресХранилища - Строка	- адрес временного хранилища
//
Процедура ПолучитьЗаголовокДекорацииУСНВВашемРегионе(ПараметрыПолучения, АдресХранилища) Экспорт
	
	Результат = ЗаголовокДекорацииУСНВВашемРегионе(ПараметрыПолучения);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЗаголовокДекорацииУСНВВашемРегионе(ПараметрыПолучения)
	
	Если ПустаяСтрока(ПараметрыПолучения.КодРегиона) Тогда
		Возврат НСтр("ru='Не заполнен регион регистрации организации'");
	КонецЕсли;
	
	АдресРесурса = АдресЗаголовокДекорацииУСНВВашемРегионе()
		+ СтрокаПараметровЗапросаКСервису(ПараметрыПолучения,
			СоответствиеПараметровЗаголовокДекорацииУСНВВашемРегионе());
		
	ОтветСервиса = ИнформацияСервиса(АдресРесурса);
	Если НЕ ПустаяСтрока(ОтветСервиса.ОписаниеОшибки) Тогда
		Возврат ОтветСервиса.ОписаниеОшибки;
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить(ОтветСервиса.Ответ);
	
	ЧастиСтроки.Добавить(Символы.ПС);
	ЧастиСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"), , , , "УСНВВашемРегионе"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтроки);
	
КонецФункции

#Область РаботаССервисом

Функция ИнформацияСервиса(АдресРесурса)

	Результат = НовыйРезультатЗапросаСервис();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСервисРегиональныеСтавкиНалогов") Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Сервис не используется'");
		Возврат Результат;
	КонецЕсли;
	
	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса());
	
	Если НЕ СервисДоступен(СтруктураАдреса) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Сервис временно недоступен'");
		Возврат Результат;
	КонецЕсли;
	
	Соединение = СоединениеССервисом(СтруктураАдреса);
	Запрос = ЗапросКСервису(СтруктураАдреса, АдресРесурса);
	
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки);
		Результат.ОписаниеОшибки = НСтр("ru='Не удалось получить данные сервиса.'");
		Возврат Результат;
	КонецПопытки;
	
	Результат.КодСостояния = Ответ.КодСостояния;
	ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
	Если Ответ.КодСостояния = 200 Тогда
		Результат.Ответ = ЗначениеИзJSON(ТекстОтвета, Ложь);
		Возврат Результат;
	Иначе
		ТекстОшибки = СтрШаблон("%1; %2", Ответ.КодСостояния, ТекстОтвета);
		ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки);
		Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru='Не удалось получить данные сервиса: код ошибки %1'"), Ответ.КодСостояния);
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция СоединениеССервисом(СтруктураАдреса, Таймаут = 60)

	Прокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураАдреса.Схема);
	Соединение = Новый HTTPСоединение(СтруктураАдреса.Хост, СтруктураАдреса.Порт,
		, ,
		Прокси, Таймаут,
		?(СтруктураАдреса.Схема = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
	Возврат Соединение;

КонецФункции

Функция СервисДоступен(СтруктураАдреса)

	Соединение = СоединениеССервисом(СтруктураАдреса, 7);
	Запрос = ЗапросКСервису(СтруктураАдреса, АдресPing());
	Попытка
		Ответ = Соединение.Получить(Запрос);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		ТекстОшибки = "" + Ответ.КодСостояния + "; " + ТекстОтвета;
		ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЗапросКСервису(СтруктураАдреса, АдресРесурса)

	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = ?(ПустаяСтрока(СтруктураАдреса.ПутьНаСервере), 
		"", 
		"/" + СтруктураАдреса.ПутьНаСервере) + АдресРесурса;
	Запрос.Заголовки.Вставить("Content-Type", "application/json");
	Запрос.Заголовки.Вставить("accept", "application/json");
	Возврат Запрос;

КонецФункции

Функция НовыйРезультатЗапросаСервис()

	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("Ответ", "");
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;

КонецФункции

Процедура ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрацииСервис(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрацииСервис()
	
	Результат = НСтр("ru = 'Региональные ставки налогов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	Возврат Результат;
	
КонецФункции

Функция АдресСервиса()
	
	Возврат Константы.АдресСервисаРегиональныеСтавкиНалогов.Получить();
	
КонецФункции

Функция АдресPing()
	
	Возврат "/ping";
	
КонецФункции

Функция АдресИнформацияУСНВВашемРегионе()
	
	Возврат "/rates";
	
КонецФункции

Функция СоответствиеПараметровИнформацияУСНВВашемРегионе()
	
	Результат = Новый Соответствие;
	Результат.Вставить("region", "КодРегиона");
	Результат.Вставить("okved", "КодОКВЭД");
	Результат.Вставить("isCompany", "ЭтоЮрЛицо");
	Результат.Вставить("usnD", "ПрименяетсяУСНДоходы");
	Результат.Вставить("usnDR", "ПрименяетсяУСНДоходыРасходы");
	Возврат Результат;
	
КонецФункции

Функция АдресЗаголовокДекорацииУСНВВашемРегионе()
	
	Возврат "/description";
	
КонецФункции

Функция СоответствиеПараметровЗаголовокДекорацииУСНВВашемРегионе()
	
	Результат = Новый Соответствие;
	Результат.Вставить("region", "КодРегиона");
	Результат.Вставить("isCompany", "ЭтоЮрЛицо");
	Результат.Вставить("usnD", "ПрименяетсяУСНДоходы");
	Результат.Вставить("usnDR", "ПрименяетсяУСНДоходыРасходы");
	Возврат Результат;
	
КонецФункции

Функция СтрокаПараметровЗапросаКСервису(ВходныеПараметры, СоответствиеПараметров)
	
	ПараметрыЗапроса = Новый Массив;
	Для каждого СоответствиеПараметра Из СоответствиеПараметров Цикл
		ЗначениеПараметра = ВходныеПараметры[СоответствиеПараметра.Значение];
		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			ПараметрыЗапроса.Добавить(СоответствиеПараметра.Ключ + "=" + XMLСтрока(ЗначениеПараметра));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ПараметрыЗапроса.Количество() > 0,
		"?" + СтрСоединить(ПараметрыЗапроса, "&"),
		"");
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

Функция ЗначениеИзJSON(ТекстJSON, ВСоответствие, СвойстваТипаДата = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		Значение = ПрочитатьJSON(ЧтениеJSON, ВСоответствие, СвойстваТипаДата);
	Исключение
		Значение = Неопределено;
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

