////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Клиентские процедуры и функции для интерактивного обновления информационной базы.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область СлужебныеПроцедурыИФункции

// Определить, есть ли необходимость проверять наличие лицензии ЖКХ, и если необходимо - проверить наличие лицензии.
//
Процедура ПроверитьНаличиеЛицензииЖКХ(Параметры) Экспорт
	
	ПараметрыИБ = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьПараметрыИБ();
	
	// Получим признак необходимости обновления информационной базы.
	НеобходимоОбновлениеИнформационнойБазы = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПроверитьНеобходимостьОбновленияИнформационнойБазы(ПараметрыИБ);
	
	// Лицензию будем проверять только, когда требуется обновление ИБ.
	Если НеобходимоОбновлениеИнформационнойБазы Тогда
		
		// Проверка наличия и корректности лицензионного ключа.
		ЛицензионныйКлючКорректен = СЗК_МодульЗащиты.ЛицензионныйКлючКорректен(, Ложь, Истина);
		
		// Если лицензионный ключ отсутствует или не корректен, то просто указываем обработчик интерактивной обработки события,
		// а механизм обработки событий при запуске программы автоматически запустит его.
		Если Не ЛицензионныйКлючКорректен Тогда
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СообщитьОбОтсутствииЛицензии", ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если обновление не требуется или лицензионный ключ есть и корректен, то ничего не делаем,
	// механизм автоматически запустит следующее событие при запуске системы.
	
КонецПроцедуры // ПроверитьНаличиеЛицензииЖКХ()

&НаКлиенте
// Процедура автоматически запускается механизмом обработки событий при старте системы.
//
Процедура СообщитьОбОтсутствииЛицензии(Параметры, ДопПараметр) Экспорт
	
	// Открываем форму, сообщающую об отсутствии лицензии, и сразу указываем обработчик завершения работы с формой.
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНаличиеЛицензииЖКХПослеЗакрытия", ЭтотОбъект, Параметры);
	ОткрытьФорму("ОбщаяФорма.СЗК_СообщениеОбОтсутствииЛицензии",,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработка завершения работы с формой, сообщающей об отсутствии лицензии.
//
Процедура ПроверитьНаличиеЛицензииЖКХПослеЗакрытия(ПродолжитьОбновление, Параметры) Экспорт
	
	// В случае, когда форма была закрыта по кнопке "Завершить работу", закрываем программу.
	Если Не ПродолжитьОбновление = Истина Тогда
		Параметры.Отказ = Истина;
	КонецЕсли;
	
	// Запуск обновления подсистемы ЖКХ.
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

// Определить, есть ли необходимость информирования о создании архивной копии.
//
Процедура ПроверитьНаличиеКопииПередЗапускомКритичногоОбновления(Параметры) Экспорт
	
	ПараметрыИБ = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьПараметрыИБ();
	
	// Получим признак необходимости обновления информационной базы.
	НеобходимоОбновлениеИнформационнойБазы = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПроверитьНеобходимостьОбновленияИнформационнойБазы(ПараметрыИБ);
	
	// Проверим критичность обновления. Если обновление критичное, то без выгрузки архивной копии обновляться запрещено.
	Если Не ПараметрыИБ.КВП_НомерВерсииПодсистемыКВП = "" И НеобходимоОбновлениеИнформационнойБазы Тогда
		
		СтруктураКритичности = КВП_ПрочиеПроцедурыИФункции.ОпределитьКритичностьОбновления(ПараметрыИБ.КВП_НомерВерсииПодсистемыКВП, ПараметрыИБ.КВП_НомерВерсииКВПВМетаданных);
		
		Если СтруктураКритичности.Критичность Тогда
			
			// Если релиз критичен, то просто указываем обработчик интерактивной обработки события,
			// а механизм обработки событий при запуске программы автоматически запустит его.
			Параметры.ИнтерактивнаяОбработка = Новый ОписаниеОповещения("СообщитьОНеобходимостиСозданияРезервнойКопии", ЭтотОбъект, СтруктураКритичности);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если релиз не критичен, то ничего не делаем, механизм автоматически запустит
	// следующее событие при запуске системы.
	
КонецПроцедуры

&НаКлиенте
// Процедура автоматически запускается механизмом обработки событий при старте системы.
//
Процедура СообщитьОНеобходимостиСозданияРезервнойКопии(Параметры, ДопПараметр) Экспорт
	
	ТекстВопроса = ДопПараметр.Описание
				 + Символы.ПС + "Перед обновлением необходимо сохранить архивную копию информационной базы!"
				 + Символы.ПС + "Вы сохранили архивную копию?";
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьОбработкуОтветаОСохраненииКопииИБ", ЭтотОбъект, Параметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
// Обработка ответа на вопрос о наличии архивной копии ИБ.
//
Процедура ВыполнитьОбработкуОтветаОСохраненииКопииИБ(Ответ, Параметры) Экспорт
	
	// В случае, когда форма была закрыта по кнопке "Завершить работу", закрываем программу.
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Параметры.Отказ = Истина;
	КонецЕсли;
	
	// Запуск обновления подсистемы ЖКХ.
	ВыполнитьОбработкуОповещения(Параметры.ОбработкаПродолжения);
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет Учетную политику (ЖКХ) всех организаций на наличие внешних форм квитанций.
// Если таковые найдены, открывается форма с предложением проверить их работоспособность.
//
Процедура ПроверитьНаличиеВнешнихКвитанций() Экспорт
	
	МассивФормКвитанции = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПроверитьНаличиеВнешнихКвитанцийНаСервере();
	
	// Откроем форму измененных квитанций, если таковые имеются.
	Если МассивФормКвитанции.Количество() > 0 Тогда
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_ИзмененныеКвитанции", Новый Структура("МассивФорм", МассивФормКвитанции));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура показывает сообщение пользователю об используемых квитанциях в качестве основных, которые
// будут удалены или удаляются из программы.
// см. ОбновлениеИнформационнойБазыКлиент.ПоказатьОписаниеИзмененийСистемы()
//
Процедура ПроверитьИспользованиеФормКвитанцийКоторыеПодлежатУдалению(Удаление = Ложь) Экспорт
	
	ТекстСообщения = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьТекстСообщенияОбУдаленииФормКвитанций(Удаление);
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти