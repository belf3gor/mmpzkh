

////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействиеПереопределяемый: общий механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Процедура возвращает данные для заполнения заявки на получение уникального
// идентификатора абонента, добавления сертификата абонента.
//
// Параметры:
//  Организация - Произвольный - ссылка на элемент справочника Организации;
//  ДанныеОрганизации - Структура - данные об организации:
//    * Индекс - Строка - почтовый индекс организации.
//    * Регион - Строка - код региона организации.
//    * Район - Строка - Район.
//    * Город - Строка - Город.
//    * НаселенныйПункт - Строка - населенный пункт расположения организации.
//    * Улица - Строка - Улица.
//    * Дом - Строка - Дом.
//    * Корпус - Строка - Корпус.
//    * Квартира - Строка - Квартира.
//    * Телефон - Строка - телефон организации.
//    * Наименование - Строка - наименование организации.
//    * ИНН - Строка - ИНН организации.
//    * КПП - Строка - КПП организации.
//    * ОГРН - Строка - ОГРН организации.
//    * КодИМНС - Строка - код ИМНС организации.
//    * ЮрФизЛицо - Строка - вид лица, возможные значения: "ЮрЛицо" или "ФизЛицо".
//    * Фамилия - Строка - фамилия руководителя.
//    * Имя - Строка - имя руководителя.
//    * Отчество - Строка - отчество руководителя.
//
// Пример:
//
////// Пример для "Управление торговлей 11"
//
//	ОрганизацияОбъект = Неопределено;
//	Попытка
//		ОрганизацияОбъект = Организация.ПолучитьОбъект();
//	Исключение
//	КонецПопытки;
//
//	ДанныеОрганизации.Очистить();
//
////// Возвращаемая структура должна содержать все перечисленные ниже
////// ключи и их значения - строки
////// Проверка свойств в дальнейшем не выполняется.
//
//	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//
//// в конфигурации "Управление торговлей" не реализовано хранение
//// компонентов адреса, поэтому компоненты адреса остаются пустыми.
//
//	ДанныеОрганизации.Вставить("Индекс"         , "");
//	ДанныеОрганизации.Вставить("Регион"         , "");
//	ДанныеОрганизации.Вставить("Район"          , "");
//	ДанныеОрганизации.Вставить("Город"          , "");
//	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//	ДанныеОрганизации.Вставить("Улица"          , "");
//	ДанныеОрганизации.Вставить("Дом"            , "");
//	ДанныеОрганизации.Вставить("Корпус"         , "");
//	ДанныеОрганизации.Вставить("Квартира"       , "");
//
//	Если ОрганизацияОбъект = Неопределено Тогда
//		
//		ДанныеОрганизации.Вставить("Наименование"   , "");
//		ДанныеОрганизации.Вставить("ИНН"            , "");
//		ДанныеОрганизации.Вставить("КПП"            , "");
//		ДанныеОрганизации.Вставить("ОГРН"           , "");
//		ДанныеОрганизации.Вставить("КодИМНС"        , "");
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//		
//		ДанныеОрганизации.Вставить("Фамилия"        , "");
//		ДанныеОрганизации.Вставить("Имя"            , "");
//		ДанныеОрганизации.Вставить("Отчество"       , "");
//	
//		Возврат;
//		
//	КонецЕсли;
//
//// получение реквизитов организации
//
//	ДанныеОрганизации.Вставить("Наименование"   , ОрганизацияОбъект.НаименованиеПолное);
//	ДанныеОрганизации.Вставить("ИНН"            , ОрганизацияОбъект.ИНН);
//	ДанныеОрганизации.Вставить("КПП"            , ОрганизацияОбъект.КПП);
//	ДанныеОрганизации.Вставить("ОГРН"           , ОрганизацияОбъект.ОГРН);
//	ДанныеОрганизации.Вставить("КодИМНС"        , "");
//
//	ВидыЛиц = Перечисления.ЮрФизЛицо;
//	Если ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицо
//		ИЛИ ОрганизацияОбъект.ЮрФизЛицо = ВидыЛиц.ЮрЛицоНеРезидент Тогда
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	Иначе
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	КонецЕсли;
//
//	ДанныеОрганизации.Вставить("Фамилия" , "");
//	ДанныеОрганизации.Вставить("Имя"     , "");
//	ДанныеОрганизации.Вставить("Отчество", "");
//
//	Руководитель = ОрганизацияОбъект.ТекущийРуководитель;
//	Если НЕ Руководитель.Пустая() Тогда
//		
//		ФИОМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Руководитель.Наименование, " ");
//		КоличествоЭлементов = ФИОМассив.Количество();
//		
//		Если КоличествоЭлементов > 0 Тогда
//			ДанныеОрганизации.Фамилия = ФИОМассив[0];
//		КонецЕсли;
//		
//		Если КоличествоЭлементов > 1 Тогда
//			ДанныеОрганизации.Имя = ФИОМассив[1];
//		КонецЕсли;
//		
//		Если КоличествоЭлементов > 2 Тогда
//			ДанныеОрганизации.Отчество = ФИОМассив[2];
//		КонецЕсли;
//		
//	КонецЕсли;
//
//	ДанныеОрганизации.Вставить("Телефон", "");
//
//	СтруктураПоиска = Новый Структура;
//	СтруктураПоиска.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
//	СтруктураПоиска.Вставить("Вид", Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
//	СтрокиТелефона = ОрганизацияОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураПоиска);
//
//	Если СтрокиТелефона.Количество() > 0 Тогда
//		ДанныеОрганизации.Телефон = СтрокиТелефона[0].НомерТелефона;
//	КонецЕсли;
//
//
////// Пример для "Бухгалтерия предприятия, редакция 3.0":
//
//	СвойстваОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, 
//			"НаименованиеПолное, ИНН, КПП, ОГРН, КодНалоговогоОргана, ЮридическоеФизическоеЛицо");
//	
//	ОрганизацияФизЛицо = СвойстваОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
//	
//	ДанныеОрганизации.Вставить("ОрганизацияСсылка", Организация);
//	
//	ДанныеОрганизации.Вставить("Наименование"   , СвойстваОрганизации.НаименованиеПолное);
//	ДанныеОрганизации.Вставить("ИНН"            , СвойстваОрганизации.ИНН);
//	ДанныеОрганизации.Вставить("КПП"            , СвойстваОрганизации.КПП);
//	ДанныеОрганизации.Вставить("ОГРН"           , СвойстваОрганизации.ОГРН);
//	ДанныеОрганизации.Вставить("КодИМНС"        , СвойстваОрганизации.КодНалоговогоОргана);
//	
//	Если ОрганизацияФизЛицо Тогда
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ФизЛицо");
//	Иначе
//		ДанныеОрганизации.Вставить("ЮрФизЛицо"      , "ЮрЛицо");
//	КонецЕсли;
//	
//	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
//	ДанныеОрганизации.Вставить("Фамилия" , ОтветственныеЛица.РуководительФИО.Фамилия);
//	ДанныеОрганизации.Вставить("Имя"     , ОтветственныеЛица.РуководительФИО.Имя);
//	ДанныеОрганизации.Вставить("Отчество", ОтветственныеЛица.РуководительФИО.Отчество);
//	
//
//	Если ОрганизацияФизЛицо Тогда
//		ОбъектКонтактнойИнформации = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "ИндивидуальныйПредприниматель");
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
//		ИмяСправочника = "ФизическиеЛица";
//	Иначе
//		ОбъектКонтактнойИнформации = Организация;
//		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
//		ИмяСправочника = "Организации";
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Индекс"         , "");
//	ДанныеОрганизации.Вставить("Регион"         , "");
//	ДанныеОрганизации.Вставить("КодРегиона"     , "");
//	ДанныеОрганизации.Вставить("Район"          , "");
//	ДанныеОрганизации.Вставить("Город"          , "");
//	ДанныеОрганизации.Вставить("НаселенныйПункт", "");
//	ДанныеОрганизации.Вставить("Улица"          , "");
//	ДанныеОрганизации.Вставить("Дом"            , "");
//	ДанныеОрганизации.Вставить("Корпус"         , "");
//	ДанныеОрганизации.Вставить("Квартира"       , "");
//	
//	ТекстЗапроса =
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КонтактнаяИнформация.Значение
//	|ИЗ
//	|	Справочник." + ИмяСправочника + ".КонтактнаяИнформация КАК КонтактнаяИнформация
//	|ГДЕ
//	|	КонтактнаяИнформация.Ссылка = &Ссылка
//	|	И КонтактнаяИнформация.Вид = &Вид";
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = ТекстЗапроса;
//	Запрос.УстановитьПараметр("Ссылка", ОбъектКонтактнойИнформации);
//	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		
//		АдресСтруктурой = РаботаСАдресами.СведенияОбАдресе(Выборка.Значение);
//		Если АдресСтруктурой.Свойство("Индекс") Тогда
//			ДанныеОрганизации.Индекс = АдресСтруктурой.Индекс;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Регион") Тогда
//			ДанныеОрганизации.Регион = АдресСтруктурой.Регион;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("КодРегиона") Тогда
//			ДанныеОрганизации.КодРегиона = АдресСтруктурой.КодРегиона;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Район") Тогда
//			ДанныеОрганизации.Район = АдресСтруктурой.Район;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Город") Тогда
//			ДанныеОрганизации.Город = АдресСтруктурой.Город;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("НаселенныйПункт") Тогда
//			ДанныеОрганизации.НаселенныйПункт = АдресСтруктурой.НаселенныйПункт;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Улица") Тогда
//			ДанныеОрганизации.Улица = АдресСтруктурой.Улица;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Здание") И ЗначениеЗаполнено(АдресСтруктурой.Здание) Тогда
//			ДанныеОрганизации.Дом = АдресСтруктурой.Здание.Номер;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Корпуса") И ЗначениеЗаполнено(АдресСтруктурой.Корпуса) Тогда
//			ДанныеОрганизации.Корпус = АдресСтруктурой.Корпуса[0].Номер;
//		КонецЕсли;
//		Если АдресСтруктурой.Свойство("Помещения") И ЗначениеЗаполнено(АдресСтруктурой.Помещения) Тогда
//			ДанныеОрганизации.Квартира = АдресСтруктурой.Помещения[0].Номер;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	ДанныеОрганизации.Вставить("Телефон", УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
//				Организация, ?(ОрганизацияФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации)));
//
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Организация, ДанныеОрганизации) Экспорт
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - УправляемаяФорма, ОбычнаяФорма - управляемая или обычная форма для изменения.
//  СтруктураПараметров - Структура - параметры процедуры.
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ВидОперации")
		И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
		Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
			И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
			// Зададим особые условия.
			Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0
				ИЛИ Найти(СтруктураПараметров.ТекстСостоянияЭД, "Нет действующего соглашения") > 0 Тогда
				СтруктураПараметров.ЗначениеПараметра = Ложь;
			КонецЕсли;
			// Определим элемент формы.
			НайденныйЭлементФормы = Неопределено;
			Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
			КонецЕсли;
				
			// Заполним свойство найденного элемента.
			Если НЕ НайденныйЭлементФормы = Неопределено
				И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
				НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьПравоЧтенияЭД = Пользователи.РолиДоступны("ВыполнениеОбменаСКонтрагентами, ЧтениеЭлектронныхДокументов, ПолныеПрава");
	
	Если НЕ ЕстьПравоЧтенияЭД Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		Если НЕ Форма.Элементы.Найти("ДекорацияВидЭД") = Неопределено Тогда
			Форма.Элементы.ДекорацияВидЭД.Видимость = Ложь;
		КонецЕсли;
		Если НЕ Форма.Элементы.Найти("ВидЭД") = Неопределено Тогда
			Форма.Элементы.ВидЭД.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьТекстСостоянияЭДО = ЗначениеЗаполнено(СтруктураПараметров.ТекстСостоянияЭДО);
	
	// В параметре ЗначениеПараметра передается признак,
	// что надпись состояния на форме должна быть гиперссылкой, если для надписи нет действия, выполняемого по гиперссылке.
	// Например, нет прав на создание ЭД.
	Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
	
	Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
		Форма.Элементы.СостояниеЭД.Видимость = ЕстьТекстСостоянияЭДО;
		Форма.Элементы.СостояниеЭД.Гиперссылка = Гиперссылка;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("ТекстСостоянияЭД") = Неопределено Тогда
		Форма.Элементы.ТекстСостоянияЭД.Видимость = ЕстьТекстСостоянияЭДО;
		Форма.Элементы.ТекстСостоянияЭД.Гиперссылка = Гиперссылка;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка метаданных

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоответствиеФО - Соответствие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО) Экспорт
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - список справочников.
//
// Пример:
//    СоответствиеСправочников.Вставить("Организации",                 "Организации");
//    СоответствиеСправочников.Вставить("Контрагенты",                 "Контрагенты");
//    СоответствиеСправочников.Вставить("ДоговорыКонтрагентов",        "ДоговорыКонтрагентов");
//    СоответствиеСправочников.Вставить("Номенклатура",                "Номенклатура");
//    СоответствиеСправочников.Вставить("ЕдиницыИзмерения",            "ЕдиницыИзмерения");
//    СоответствиеСправочников.Вставить("НоменклатураПоставщиков",     "НоменклатураПоставщиков");
//    СоответствиеСправочников.Вставить("Валюты",                      "Валюты");
//    СоответствиеСправочников.Вставить("Банки",                       "КлассификаторБанков");
//    СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчета");
//    СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
//    СоответствиеСправочников.Вставить("УпаковкиНоменклатуры",        "ЕдиницыИзмерения");
//    СоответствиеСправочников.Вставить("ФизическиеЛица",              "ФизическиеЛица");
//    СоответствиеСправочников.Вставить("Партнеры",                    "Партнеры");
//    СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
		
	СоответствиеСправочников.Вставить("Организации", "Организации");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Партнеры",    "");
	СоответствиеСправочников.Вставить("ДоговорыКонтрагентов", "ДоговорыКонтрагентов");
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ЕдиницыИзмерения", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("УпаковкиНоменклатуры", "КлассификаторЕдиницИзмерения");
	СоответствиеСправочников.Вставить("НоменклатураПоставщиков", "НоменклатураПоставщиков");
	СоответствиеСправочников.Вставить("Валюты", "Валюты");
	СоответствиеСправочников.Вставить("Банки", "Банки");
	СоответствиеСправочников.Вставить("БанковскийСчет", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаОрганизаций", "БанковскиеСчета");
	СоответствиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчета");
	
КонецПроцедуры

// В процедуре формируется соответствие для сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// Если в прикладном решении есть документы, на основании которых формируется ЭД,
// причем названия реквизитов данных документов отличаются от общепринятых "Организация", "Контрагент", "СуммаДокумента",
// то для этих реквизитов необходимо добавить в соответствие записи виде:
// Ключ = "ДокументВМетаданных.ОбщепринятоеНазваниеРеквизита", Значение - "ДокументВМетаданных.ДругоеНазваниеРеквизита".
// Например:
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Организация", "МЗ_Покупка.Учреждение");
//  СоответствиеРеквизитовОбъекта.Вставить("МЗ_Покупка.Контрагент",  "МЗ_Покупка.Грузоотправитель");
//  СоответствиеРеквизитовОбъекта.Вставить("СчетФактураВыданный.СуммаДокумента",  "СчетФактураВыданный.Основание.СуммаДокумента");
// 
// Для подсистемы ОбменСБанками требуется определение следующих полей:
//   "ПлатежноеПоручениеВМетаданных" (необязательное)
//   "БанковскийСчетОрганизации.Закрыт" (необязательное)
//   "ИНН" (обязательное)
//   "СокращенноеНаименованиеОрганизации" (необязательное)
//   "БанковскийСчетОрганизации.Организация" (обязательное для писем)
//   "БанковскийСчетОрганизации.Банк" (обязательное для писем)
//   "ПлатежноеПоручение.СчетОрганизации" (обязательное для писем)
//   "ПлатежноеПоручение.Организация" (обязательное для писем)
//
// Параметры:
//  СоответствиеРеквизитовОбъекта - Соответствие - содержит:
//    * Ключ - Строка - имя переменной, используемой в коде библиотеки;
//    * Значение - Строка - наименование объекта метаданных или реквизита объекта в прикладном решении.
//
Процедура ПолучитьСоответствиеНаименованийОбъектовМДИРеквизитов(СоответствиеРеквизитовОбъекта) Экспорт
	
	// Обмен с контрагентами
	СоответствиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "Дата");
	
	СоответствиеРеквизитовОбъекта.Вставить("НомерСчета",                           "НомерСчета");
	СоответствиеРеквизитовОбъекта.Вставить("ИННКонтрагента",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППКонтрагента",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагента",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеКонтрагентаДляСообщенияПользователю", "Наименование");
	СоответствиеРеквизитовОбъекта.Вставить("ВнешнийКодКонтрагента",                "Код");
	СоответствиеРеквизитовОбъекта.Вставить("ПартнерКонтрагента",                   Неопределено);
	
	СоответствиеРеквизитовОбъекта.Вставить("ИННОрганизации",                       "ИНН");
	СоответствиеРеквизитовОбъекта.Вставить("КППОрганизации",                       "КПП");
	СоответствиеРеквизитовОбъекта.Вставить("НаименованиеОрганизации",              "НаименованиеПолное");
	СоответствиеРеквизитовОбъекта.Вставить("СокращенноеНаименованиеОрганизации",   "НаименованиеСокращенное");
	СоответствиеРеквизитовОбъекта.Вставить("ОГРНОрганизации",                      "ОГРН");
	
	СоответствиеРеквизитовОбъекта.Вставить("РеализацияТоваровУслугВМетаданных",    "РеализацияТоваровУслуг");
	СоответствиеРеквизитовОбъекта.Вставить("ПоступлениеТоваровУслугВМетаданных",   "ПоступлениеТоваровУслуг");
	
	СоответствиеРеквизитовОбъекта.Вставить("НомерДоговораКонтрагента",             "Номер");
	СоответствиеРеквизитовОбъекта.Вставить("ДатаДоговораКонтрагента",              "Дата");
	
	// ДиректБанк
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручениеВМетаданных",         "ПлатежноеПоручение");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеТребованиеВМетаданных",        "ПлатежноеТребование");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации",             "БанковскиеСчета");
	
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.СчетОрганизации",    "СчетОрганизации");
	СоответствиеРеквизитовОбъекта.Вставить("ПлатежноеПоручение.Организация",        "Организация");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Банк",        "Банк");
	СоответствиеРеквизитовОбъекта.Вставить("БанковскийСчетОрганизации.Организация", "Владелец");
	
КонецПроцедуры

// Определяет соответствие кодов обязательных элементов схем электронных документов их пользовательскому представлению.
//
// Параметры:
//  СоответствиеВозврата - Соответствие - исходное соответствие для заполнения.
//
Процедура СоответствиеКодовРеквизитовИПредставлений(СоответствиеВозврата) Экспорт
	
	Макет = ПолучитьОбщийМакет("ПрикладноеПредставлениеРеквизитов_ru");
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	Для НСтр = 1 По ВысотаТаблицы Цикл
		СоответствиеВозврата.Вставить(СокрЛП(Макет.Область(НСтр, 1).Текст), СокрЛП(Макет.Область(НСтр,2).Текст));
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение текстовых сообщений

// Определяет текст сообщения о необходимости настройки системы в зависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
	ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках программы включить опцию использования прямого обмена с банками.'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена. Не выполнены необходимые настройки программы.'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет выводимое сообщение об ошибке.
//
// Параметры:
//  КодОшибки - строка - код ошибки
//  ТекстОшибки - строка - измененный текст ошибки.
//
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
	Если КодОшибки = "100" ИЛИ КодОшибки = "110" Тогда
		ТекстОшибки = "Проверьте общие настройки криптографии."
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения.
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам.
// 
// Параметры:
//  ТипОбъекта - Строка - идентификатор типа объекта, который необходимо найти;
//  ИДОбъекта - Строка - идентификатор объекта заданного типа;
//  ДополнительныеРеквизиты - Структура - набор дополнительных полей объекта для поиска;
//  Результат - Ссылка - ссылка на найденный объект.
//
Процедура НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Результат = ОбменСКонтрагентамиБП.НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты);
	
КонецПроцедуры

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка - ссылка на документ информационной базы.
//  Результат - Строка - номер документа.
//
Процедура ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект, Результат) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Номер");
		Результат = УчетДенежныхСредствКлиентСервер.НомерОбъектаБезПрефикса(Номер);
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, "Номер, ДоговорКонтрагента.ГосударственныйКонтракт.Код");
		
		Результат = 
			?(ЗначениеЗаполнено(РеквизитыОбъекта.ДоговорКонтрагентаГосударственныйКонтрактКод), РеквизитыОбъекта.ДоговорКонтрагентаГосударственныйКонтрактКод+"/", "")
			+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыОбъекта.Номер, Истина, Ложь);
		
	Иначе
		Результат = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Номер"), Истина, Ложь);
	КонецЕсли;

КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива не готовые документы.
//
// Параметры:
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	МассивСчетовФактур  = Новый Массив;
	МассивДокументовРеализации = Новый Массив;
	МассивДокументовКорректировок = Новый Массив;
	МассивПлатежныхДокументов = Новый Массив;
	МассивНаУдаление = Новый Массив;
	Для Каждого Элемент из ДокументыМассив Цикл
		
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			МассивСчетовФактур.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			
			МассивДокументовРеализации.Добавить(Элемент);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			
			МассивДокументовКорректировок.Добавить(Элемент);
		
		ИначеЕсли ТипЗнч(Элемент) = Тип("ДокументСсылка.ПлатежноеПоручение")
			ИЛИ ТипЗнч(Элемент) = Тип("ДокументСсылка.ПлатежноеТребование") Тогда
			
			МассивПлатежныхДокументов.Добавить(Элемент);
		КонецЕсли;
		
	КонецЦикла;
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыМассив);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов > 0 Тогда
		Если КоличествоНепроведенныхДокументов = 1 Тогда
			Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа,
			|его необходимо предварительно провести.'");
		Иначе
			Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов,
			|их необходимо предварительно провести.'");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен.'");
		Для Каждого НепроведенныйДокумент Из МассивНепроведенныхДокументов Цикл
			Найденный = ДокументыМассив.Найти(НепроведенныйДокумент.Ссылка);
			Если Найденный <> Неопределено Тогда
				
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(НепроведенныйДокумент.Ссылка)),
					НепроведенныйДокумент.Ссылка);
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСчетовФактур.Количество() > 0 Тогда
	
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Представление,
		|	СчетФактураВыданный.Ссылка,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.СчетФактураНеВыставляется
		|			ТОГДА ""Не выставляется""
		|		КОГДА СчетФактураВыданный.СводныйКомиссионный
		|				ИЛИ СчетФактураВыданный.СводныйКорректировочный
		|			ТОГДА ""Сводный""
		|	КОНЕЦ КАК Флаг
		|ИЗ
		|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	(СчетФактураВыданный.СчетФактураНеВыставляется
		|			ИЛИ СчетФактураВыданный.СводныйКорректировочный
		|			ИЛИ СчетФактураВыданный.СводныйКомиссионный)
		|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		ШаблонСообщения = НСтр("ru = 'У %1 установлен флаг ""%2"". Для таких документов формировать электронный счет-фактуру нельзя.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, Выборка.Флаг),
					Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("СписокСчетовФактур", МассивСчетовФактур);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданный.Номер,
		|	СчетФактураВыданный.Дата,
		|	СчетФактураВыданный.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) КАК КоличествоДокументовОснований
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный)
		|	И СчетФактураВыданный.Ссылка В(&СписокСчетовФактур)
		|
		|СГРУППИРОВАТЬ ПО
		|	СчетФактураВыданный.Номер,
		|	СчетФактураВыданный.Дата,
		|	СчетФактураВыданный.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданныйДокументыОснования.ДокументОснование) > 1";
		Выборка = Запрос.Выполнить().Выбрать();
		ШаблонСообщения = НСтр("ru = 'У корректировочного счета-фактуры №%1 от %2 указано несколько документов-оснований. Отправка таких счетов-фактур не поддерживается.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Номер, Выборка.Дата),
					Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверим заполнение вида электронного документа
	
	МассивДляПроверки = Новый Массив;
	Для Каждого Элемент Из ДокументыМассив Цикл
		Если ТипЗнч(Элемент) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
			МассивДляПроверки.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляПроверки.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивСсылок", МассивДляПроверки);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетКомитентуОПродажах.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетКомитентуОПродажах.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
		|ГДЕ
		|	ОтчетКомитентуОПродажах.Ссылка В(&МассивСсылок)
		|	И ОтчетКомитентуОПродажах.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ОтчетКомитентуОПродажахТовары.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ОтчетКомитентуОПродажах.Товары КАК ОтчетКомитентуОПродажахТовары
		|ГДЕ
		|	ОтчетКомитентуОПродажахТовары.Ссылка В(&МассивСсылок)
		|	И (ОтчетКомитентуОПродажахТовары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ ОтчетКомитентуОПродажахТовары.ДатаРеализации = ДАТАВРЕМЯ(1, 1, 1))
		|	И ОтчетКомитентуОПродажахТовары.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОтчетКомитентуОПродажах.ОтчетОЗакупках)";
		
		// Проверка вида операции Отчета комитенту (комиссионные закупки не поддерживаются)
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		Выборка = РезультатЗапроса[0].Выбрать();
		ШаблонСообщения = НСтр("ru = '%1 - электронный документооборот для отчета комитенту по закупкам не поддерживается.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление),
				Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// Проверка заполнения полей
		Выборка = РезультатЗапроса[1].Выбрать();
		ШаблонСообщения = НСтр("ru = '%1 - в табличной части товаров и услуг не заполнены поля %2 или %3.'");
		Пока Выборка.Следующий() Цикл
			Найденный = ДокументыМассив.Найти(Выборка.Ссылка);
			Если Найденный <> Неопределено Тогда
				ДокументыМассив.Удалить(Найденный);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.Представление, """Покупатель""", """Дата реализации"""),
				Выборка.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого СчетФактура Из МассивСчетовФактур Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(СчетФактура, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(СчетФактура);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого Документ Из МассивДокументовРеализации Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(Документ, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка возможности формирования УПД/УКД
	Для Каждого Документ Из МассивДокументовКорректировок Цикл
		
		Отказ = Ложь;
		ЭлектронноеВзаимодействиеБП.ПроверитьВозможностьФормированияЕдиногоДокумента(
			Документ, Отказ);
		Если Отказ Тогда
			МассивНаУдаление.Добавить(Документ);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка банковских платежек. Не формируем ЭД для валютных банковских счетов.
	Для Каждого Элемент Из МассивПлатежныхДокументов Цикл
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент, "СчетОрганизации.Валютный") Тогда
			
			ШаблонСообщения = НСтр("ru = 'Электронный документ для документа ""%1"" не сформирован. 1С:ДиректБанк не поддерживает обмен по валютным банковским счетам.
				|Используйте команду ""Отправить в банк"" в списке документов для выгрузки данных в клиент-банк.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(Элемент));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			МассивНаУдаление.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из МассивНаУдаление Цикл
		
		ЭлементНаУдаление = ДокументыМассив.Найти(Элемент);
		Если ЭлементНаУдаление <> Неопределено Тогда
			
			ДокументыМассив.Удалить(ДокументыМассив.Найти(Элемент));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные о юридическом (физическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка - ссылка на элемент справочника, по которому получаются данные.
//  Сведения - Структура - возвращаемые данные:
//   * ИНН                     - Строка - ИНН.
//   * КПП                     - Строка - КПП.
//   * ПолноеНаименование      - Строка - полное наименование.
//   * Наименование            - Строка - наименование.
//   * СокращенноеНаименование - Строка - сокращенное наименование.
//   * ОфициальноеНаименование - Строка - наименование юридического лица.
//   * КодПоОКПО               - Строка - код ОКПО.
//   * ЮридическийАдрес        - Строка - представление юридического адреса.
//   * ФактическийАдрес        - Строка - представление фактического адреса.
//   * Телефоны                - Строка - представление телефонов.
//   * ЭлектроннаяПочта        - Строка - представление электронной почты.
//   * Фамилия                 - Строка - фамилия.
//   * Имя                     - Строка - имя.
//   * Отчество                - Строка - отчество.
//
Процедура ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Сведения) Экспорт
	
	Сведения = ОбменСКонтрагентамиБП.ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, Неопределено, Неопределено);
	
КонецПроцедуры

// Возвращает текстовое описание организации по параметрам.
//
// Параметры:
//  СведенияОрганизации - Структура - сведения об организации, по которой надо составить описание.
//  Список - Строка - список запрашиваемых параметров организации.
//  СПрефиксом - Булево - признак вывода префикса параметра организации.
//  Результат - Строка - описание организации.
//
Процедура ОписаниеОрганизации(СведенияОрганизации, Результат, Список = "", СПрефиксом = Истина) Экспорт
	
	СписокПолей = ?(Список = "", "ПолноеНаименование,ИНН,Свидетельство,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет", Список);
	МассивПолей = СтрРазделить(СписокПолей, ",", Ложь);
	МассивПолейПослеПроверки = Новый Массив;
	Для Каждого ЭлементМассива Из МассивПолей Цикл
		
		Если СведенияОрганизации.Свойство(ЭлементМассива) Тогда
			
			МассивПолейПослеПроверки.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	СписокПолей = СтрСоединить(МассивПолейПослеПроверки, ",");
	
	Результат = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОрганизации, СписокПолей, СПрефиксом);

КонецПроцедуры

// Проверяет наличие прав на открытие журнала регистрации.
//
// Параметры:
//  Результат - Булево - если пользователь имеет право на открытие журнала регистрации,
//                       в этой переменной должна быть установлена Истина.
//
Процедура ЕстьПравоОткрытияЖурналаРегистрации(Результат) Экспорт
	
	Результат = Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Выполняется перед записью владельца электронного документа,
// который может служить основанием для исходящего электронного документа. 
// При этом должна существовать действующая настройка ЭДО между организацией и контрагентом, указанными в объекте.
//
// Параметры:
//  Объект - ДокументОбъект - прикладной объект, запись которого инициировала вызов метода. Входной параметр.
//  ИзменилисьКлючевыеРеквизиты - Булево - признак изменения данных, влияющих на формирование электронного документа. Выходной параметр.
//                                         Если Истина, то текущая версия электронного документа становится неактуальной. 
//                                         По умолчанию для нового документа Истина, иначе Ложь.
//  СостояниеЭлектронногоДокумента - ПеречислениеСсылка.СостоянияВерсийЭД, ПеречислениеСсылка.СостоянияОбменСБанками - состояние текущей версии электронного документа.
//                                   Входной параметр. Может быть использован для анализа текущего этапа обработки электронного документа. 
//                                   Позволяет описать зависимости заполнения выходных параметров от факта создания, подписания или отправки ЭД контрагенту.
//  ПодлежитОбменуЭД - Булево - признак участия документа в ЭДО. Выходной параметр. По умолчанию Истина.
//                              При установке в Ложь прикладной объект не будет отображаться как требующий создания электронного документа (например, раздел "Создать" в текущих делах ЭДО). 
//                              Если ЭД уже был создан, то он становиться неактуальным.
//  Отказ - Булево - если установить Истина, то владелец электронного документа записан не будет. Выходной параметр. По умолчанию Ложь.
//
// Пример:
//  1. Необходимо сделать существующий ЭД неактуальным, чтобы пользователь создал новый. Для этого:
//   * Присвоить параметру  ИзменилисьКлючевыеРеквизиты значение Истина.
//  2. Необходимо отказать пользователю во внесении изменений в документ, если уже есть существующий ЭД. Для этого:
//   * Проверить параметр СостояниеЭлектронногоДокумента на неравенство значению НеСформирован.
//   * Присвоить параметру  Отказ значение Истина.
//   * (необязательно) Присвоить параметру  ИзменилисьКлючевыеРеквизиты значение Истина. 
//     В этом случае пользователь дополнительно получит сообщение: "Существует электронный документ. Изменение ключевых реквизитов документа запрещено.".
//  3. Необходимо исключить прикладной объект из возможных оснований для ЭД. Например, если известно, что он выставлен в бумажном виде, и ЭД не требуется. 
//     Существующий ЭД сделать неактуальным и не отображать прикладной документ в разделе "Создать" обработки "Текущие дела ЭДО". Для этого:
//   * Присвоить параметру  ПодлежитОбменуЭД значение Ложь.
//
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ) Экспорт
	
	ЭлектронноеВзаимодействиеБП.ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ);
	
КонецПроцедуры

#КонецОбласти

