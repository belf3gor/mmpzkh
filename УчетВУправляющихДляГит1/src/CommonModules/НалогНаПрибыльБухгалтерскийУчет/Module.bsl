// Отражение в финансовой отчетности отложенных налогов на прибыль.
// Выполнение требований
// - ПБУ 18 "Учет расчетов по налогу на прибыль организаций" (балансовый метод)
// - IAS 12 "Налоги на прибыль"

#Область КоллекцииСумм

Функция ОписаниеКоллекцииСумм(ИспользуетсяНалоговыйУчет = Истина, ИспользуютсяРазницыПоНалогуНаПрибыль = Истина) Экспорт
	
	ОписаниеСумм = КоллекцииСумм.НовыйОписаниеКоллекцииСумм();
	
	КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "БухгалтерскийУчет", "Сумма");
	
	Если ИспользуетсяНалоговыйУчет Тогда
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, "НалоговыйУчет", "СуммаНУ");
	КонецЕсли;
	
	Если ИспользуютсяРазницыПоНалогуНаПрибыль Тогда
		КоллекцииСумм.ДобавитьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль(), "СуммаПР, СуммаВР");
	КонецЕсли;
	
	Возврат ОписаниеСумм;
	
КонецФункции

Функция ИмяНабораСуммРазницыПоНалогуНаПрибыль() Экспорт
	
	Возврат "РазницыПоНалогуНаПрибыль";
	
КонецФункции

Функция ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Экспорт
	
	// Всегда, когда есть набор с разницами, должны быть и наборы для сумм БУ и НУ
	
	Возврат КоллекцииСумм.ЕстьНаборСумм(ОписаниеСумм, ИмяНабораСуммРазницыПоНалогуНаПрибыль());
	
КонецФункции

Процедура РассчитатьРазницыПоНалогуНаПрибыль(Приемник, Источник, ОписаниеСумм, ОграничиватьСуммуРазницыНеосновногоВида = Истина, ОсновнойВидРазниц = Неопределено) Экспорт
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
		
	Разница = Приемник.Сумма - Приемник.СуммаНУ;
	Если Приемник.СуммаВР + Приемник.СуммаПР = Разница Тогда
		// Уже все хорошо
		Возврат;
	КонецЕсли;
	
	// Алгоритм выбора разниц опирается на данные Источника.
	// Правила:
	// 1. Разница в Приемнике, по возможности, должна появиться там же, где была в Источнике
	//    Если в Источнике оба вида разниц и имеют одинаковый знак, то делим пропорционально.
	// 2. Неосновную разницу ограничиваем с учетом знака: она может быть по модулю меньше, чем в Источнике, но не больше
	//    (это может быть запрещено параметром функции)
	// 3. В случае сомнений признаем разницу основного вида (по умолчанию - временную).
	// 
	// Поскольку в соответствии с современной трактовкой ПБУ 18 основной вид разниц - временные,
	// то использование постоянных разниц в качестве основного вида считаем оставленным для совместимости.
	// Поэтому в таком режиме правила могут выполняться не в полном объеме, чтобы поведение соответствовало предыдущим версиям.
	
	Если ОсновнойВидРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
	
		Если Источник.СуммаПР = 0 И Источник.СуммаВР = 0 Тогда
			Приемник.СуммаПР = Разница;
			Приемник.СуммаВР = 0;
		ИначеЕсли ЗнакЧисла(Источник.СуммаПР) = ЗнакЧисла(Источник.СуммаВР) Тогда
			// Делим пропорционально. Знаменатель заведомо ненулевой.
			Приемник.СуммаПР = Окр(Разница / (Источник.СуммаПР + Источник.СуммаВР) * Источник.СуммаПР, БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
			Приемник.СуммаВР = Разница - Приемник.СуммаПР;
		ИначеЕсли Не ОграничиватьСуммуРазницыНеосновногоВида И Источник.СуммаПР = 0 Тогда
			// Выше проверили, что СуммаВР <> 0
			Приемник.СуммаПР = 0;
			Приемник.СуммаВР = Разница;
		ИначеЕсли ЗнакЧисла(Источник.СуммаВР) = ЗнакЧисла(Разница) Тогда
			Приемник.СуммаПР = 0;
			Приемник.СуммаВР = Разница;
		Иначе
			Приемник.СуммаПР = Разница;
			Приемник.СуммаВР = 0;
		КонецЕсли;
		
	Иначе
		
	    Приемник.СуммаПР = 0;
		
		Если Источник.СуммаПР <> 0 Тогда
			
			Если Источник.СуммаВР = 0 Тогда
				Приемник.СуммаПР = Источник.СуммаПР;
			ИначеЕсли ЗнакЧисла(Источник.СуммаПР) = ЗнакЧисла(Источник.СуммаВР) Тогда
				// Делим пропорционально. Знаменатель заведомо ненулевой.
				Приемник.СуммаПР = Окр(
					Разница / (Источник.СуммаПР + Источник.СуммаВР) * Источник.СуммаПР,
					БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
			КонецЕсли;
			
			Если ОграничиватьСуммуРазницыНеосновногоВида И Приемник.СуммаПР <> 0 Тогда
				// Применим ограничение разницы с учетом знака
				Если Источник.СуммаПР > 0 И Разница > 0 Тогда
					Приемник.СуммаПР = Мин(Источник.СуммаПР, Разница);
				ИначеЕсли Источник.СуммаПР < 0 И Разница < 0 Тогда
					Приемник.СуммаПР = Макс(Источник.СуммаПР, Разница);
				Иначе
					// знак не подходящий
					Приемник.СуммаПР = 0;
				КонецЕсли;
			КонецЕсли;
				
		КонецЕсли;
			
		Приемник.СуммаВР = Разница - Приемник.СуммаПР;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ИсправитьПогрешностиОкругления(Доли, ИсходныеСуммы, ОписаниеСумм, Числитель, Знаменатель, ОсновнойВидРазниц = Неопределено) Экспорт
	
	Если Числитель = Знаменатель Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьРазницыПоНалогуНаПрибыль(ОписаниеСумм) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеСуммы.СуммаПР = 0 И ИсходныеСуммы.СуммаВР = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// В исходных суммах может соблюдаться равенство БУ = НУ + ПР + ВР.
	// При расчете долей равенство может нарушиться на копейки за счет погрешностей округления.
	//
	// В исходных суммах равенство может и не соблюдаться.
	// Чтобы не зависеть от того, соблюдалось равенство или нет в исходных суммах,
	// введем сумму Контроль = БУ - НУ - ПР - ВР.
	//
	// От этой суммы рассчитаем долю по тому же алгоритму, что и для других сумм.
	// А затем обеспечим, чтобы для коллекции с долями выполнялось равенство Контроль = БУ - НУ - ПР - ВР:
	// при необходимости исправим сумму ПР или ВР.
	
	КонтрольнаяСуммаИсходная = ИсходныеСуммы.Сумма - ИсходныеСуммы.СуммаНУ - ИсходныеСуммы.СуммаПР - ИсходныеСуммы.СуммаВР;
	КонтрольнаяСуммаДоли     = Доли.Сумма          - Доли.СуммаНУ          - Доли.СуммаПР          - Доли.СуммаВР;
	
	ДоляИсходнойКонтрольнойСуммы = КоллекцииСумм.ДоляСуммы(КонтрольнаяСуммаИсходная, Числитель, Знаменатель);
	Погрешность                  = КонтрольнаяСуммаДоли - ДоляИсходнойКонтрольнойСуммы; // Сумма, которую надо добавить к разницам
	
	Если Погрешность = 0 Тогда
		Возврат;
	КонецЕсли;
		
	СуммыПогрешности = КоллекцииСумм.НовыйКоллекцияСумм(ОписаниеСумм);
	СуммыПогрешности.Сумма = Погрешность;
	РассчитатьРазницыПоНалогуНаПрибыль(СуммыПогрешности, ИсходныеСуммы, ОписаниеСумм, Ложь, ОсновнойВидРазниц);
	СуммыПогрешности.Сумма = 0;
	КоллекцииСумм.Сложить(Доли, СуммыПогрешности, ОписаниеСумм);
		
КонецПроцедуры

Функция ЗнакЧисла(Значение)
	
	Если Значение > 0 Тогда
		Возврат 1;
	ИначеЕсли Значение < 0 Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПереходныйПериод

Функция ВариантУчетаОтложенногоНалога(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаСрезПоследних.ВариантУчетаОтложенногоНалога КАК ВариантУчетаОтложенногоНалога
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика.СрезПоследних(&Период, Организация = &Организация) КАК УчетнаяПолитикаСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ВариантУчетаОтложенногоНалога) Тогда
		Возврат Выборка.ВариантУчетаОтложенногоНалога;
	Иначе
		Возврат Перечисления.ВариантыУчетаОтложенногоНалога.Нет;
	КонецЕсли;
	
КонецФункции

Функция ОсновнойВидРазниц(Период, Организация) Экспорт
	
	Если ВариантУчетаОтложенногоНалога(Период, Организация) = Перечисления.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод
		И Не НалогНаПрибыльБухгалтерскийУчетКлиентСервер.Приказ236нОбязателен(Период) Тогда
		Возврат Перечисления.ВидыРазницПБУ18.ПР;
	Иначе
		Возврат Перечисления.ВидыРазницПБУ18.ВР;
	КонецЕсли;
	
КонецФункции

Процедура ИнициализироватьРасчетОтложенногоНалога(Движения, ПериодРасчета, Организация) Экспорт
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(Организация, ПериодРасчета);
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		// Используется при переходе от затратного к балансовому методу
		Возврат;
	КонецЕсли;
	
	НачальныеДанныеОтчетнаяДата = КонтекстРасчета.НачалоНалоговогоПериода;
	
	// При выполнении регламентной операции или при инициализации сведения о примененных ставках записываются всегда,
	// а сведения о суммах отложенного налога - только при наличии временных разниц.
	// Поэтому проверка записей о ставках эффективнее.
	НачальныеДанныеПериодРасчета = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПериодРасчета(
		НачальныеДанныеОтчетнаяДата,
		КонтекстРасчета.Организация,
		ПериодРасчета);
		
	Если ЗначениеЗаполнено(НачальныеДанныеПериодРасчета) Тогда
		// Инициализировано
		Возврат;
	КонецЕсли;
	
	// См. также РассчитатьОтложенныйНалог()
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСальдоВременныхРазниц(МенеджерВременныхТаблиц, КонтекстРасчета.НачалоНалоговогоПериода, КонтекстРасчета.Организации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаОтложенныйНалог",   СчетаОтложенныйНалог());
	Запрос.УстановитьПараметр("НеиспользованныеАктивы", Перечисления.ВидыАктивовИОбязательств.НеиспользованныеНалоговыеУбыткиВычеты());
	Запрос.УстановитьПараметр("ОтчетнаяДата",           НачальныеДанныеОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",            КонтекстРасчета.Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТекущиеДанные.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|	ТекущиеДанные.ВидАктивовОбязательств КАК ВидАктивовИОбязательств,
	|	ТекущиеДанные.Счет КАК Счет,
	|	ТекущиеДанные.Филиал КАК Филиал,
	|	ТекущиеДанные.Подразделение КАК Подразделение,
	|	ТекущиеДанные.Субконто1 КАК Субконто1,
	|	ТекущиеДанные.Субконто2 КАК Субконто2,
	|	ТекущиеДанные.Субконто3 КАК Субконто3,
	|	СУММА(ТекущиеДанные.ВременнаяРазница) КАК ВременнаяРазница,
	|	0 КАК ОтложенныйНалог
	|ИЗ
	|	СальдоВременныхРазниц КАК ТекущиеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеДанные.СчетОтложенногоНалога,
	|	ТекущиеДанные.ВидАктивовОбязательств,
	|	ТекущиеДанные.Счет,
	|	ТекущиеДанные.Филиал,
	|	ТекущиеДанные.Подразделение,
	|	ТекущиеДанные.Субконто1,
	|	ТекущиеДанные.Субконто2,
	|	ТекущиеДанные.Субконто3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сальдо.Счет,
	|	Сальдо.Субконто1,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	Сальдо.СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В (&СчетаОтложенныйНалог),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И НЕ Субконто1 В (&НеиспользованныеАктивы)) КАК Сальдо
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств,
	|	Счет,
	|	Филиал,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИТОГИ
	|	СУММА(ВременнаяРазница),
	|	СУММА(ОтложенныйНалог)
	|ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств";
	
	// Сначала определим ставку налога:
	// - проверим предположение, что подходит установленная ставка
	// - если не подходит, то рассчитаем исходя из сумм налога.
	
	ИсключенныеИзРасчетаСуммы = Новый Массив;
	
	ВременныеРазницыДляРасчетаСтавки = 0;
	ОтложенныйНалогДляРасчетаСтавки  = 0;
	
	ВыборкаСчетОтложенногоНалога = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетОтложенногоНалога.Следующий() Цикл
		
		ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаВидАктивовОбязательств.ОтложенныйНалог > 0
				И ВыборкаВидАктивовОбязательств.ВременнаяРазница < 0 Тогда
				ОтложенныйНалогБезЗнака  = ВыборкаВидАктивовОбязательств.ОтложенныйНалог;
				ВременнаяРазницаБезЗнака = - ВыборкаВидАктивовОбязательств.ВременнаяРазница;
			ИначеЕсли ВыборкаВидАктивовОбязательств.ОтложенныйНалог < 0
				И ВыборкаВидАктивовОбязательств.ВременнаяРазница > 0 Тогда
				ОтложенныйНалогБезЗнака  = - ВыборкаВидАктивовОбязательств.ОтложенныйНалог;
				ВременнаяРазницаБезЗнака = ВыборкаВидАктивовОбязательств.ВременнаяРазница;
			Иначе
				ИсключенныеИзРасчетаСуммы.Добавить(ВыборкаВидАктивовОбязательств.ОтложенныйНалог);
				Продолжить;
			КонецЕсли;
			
			ВременныеРазницыДляРасчетаСтавки = ВременныеРазницыДляРасчетаСтавки + ВременнаяРазницаБезЗнака;
			ОтложенныйНалогДляРасчетаСтавки  = ОтложенныйНалогДляРасчетаСтавки  + ОтложенныйНалогБезЗнака;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПротоколРасчетаСтавки = НовыйПротоколРасчетаСтавкиНалога();
	
	// Пробуем использовать установленную ставку, но позже можем установить, что фактически использовалась другая.
	ПротоколРасчетаСтавки.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
	ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ДатаРасчетаСтавки", НачальныеДанныеОтчетнаяДата);
	СтавкаНалога = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		ПротоколРасчетаСтавки.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	// Убедимся, что подходит
	СуммаОтложенногоНалогаПоСтавке = ВременныеРазницыДляРасчетаСтавки * СтавкаНалога;
	СуммаОтложенногоНалогаПоСтавке = ТипСумма.ПривестиЗначение(СуммаОтложенногоНалогаПоСтавке);
	
	Погрешность = СуммаОтложенногоНалогаПоСтавке - ОтложенныйНалогДляРасчетаСтавки;
	Если ОтложенныйНалогДляРасчетаСтавки = 0 Тогда
		ОтносительнаяПогрешностьСтавки = 0;
	Иначе
		ОтносительнаяПогрешностьСтавки = Погрешность / ОтложенныйНалогДляРасчетаСтавки;
		Если ОтносительнаяПогрешностьСтавки < 0 Тогда
			ОтносительнаяПогрешностьСтавки = - ОтносительнаяПогрешностьСтавки;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтносительнаяПогрешностьСтавки > ЭмпирическоеЗначениеПогрешностиСтавки() Тогда
		// Установленная ставка не подходит
		ПротоколРасчетаСтавки.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПоСуммеОтложенногоНалога;
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ВременныеРазницы",          ВременныеРазницыДляРасчетаСтавки);
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ОтложенныйНалог",           ОтложенныйНалогДляРасчетаСтавки);
		ПротоколРасчетаСтавки.ДанныеАлгоритма.Вставить("ИсключенныеИзРасчетаСуммы", ИсключенныеИзРасчетаСуммы);
		Если ПротоколРасчетаСтавки.ДанныеАлгоритма.ВременныеРазницы <> 0 Тогда
			РасчетнаяСтавкаНалога = ОкруглитьСтавкуНалога(
				ПротоколРасчетаСтавки.ДанныеАлгоритма.ОтложенныйНалог
				/ ПротоколРасчетаСтавки.ДанныеАлгоритма.ВременныеРазницы);
			Если РасчетнаяСтавкаНалога >= 0 И РасчетнаяСтавкаНалога < 1 Тогда
				СтавкаНалога = РасчетнаяСтавкаНалога;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Записи = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетОтложенногоНалога);
	
	// Запишем детальные данные расчета - исходя из ставки
	ВыборкаСчетОтложенногоНалога.Сбросить();
	Пока ВыборкаСчетОтложенногоНалога.Следующий() Цикл
		
		ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств) Тогда
				Продолжить;
			КонецЕсли;
			
			Отклонение       = ВыборкаВидАктивовОбязательств.ОтложенныйНалог; // погрешность округления, ранее допущенные ошибки
			ЗаписьОтклонение = Неопределено;
			
			Выборка = ВыборкаВидАктивовОбязательств.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(Выборка.ВременнаяРазница) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьВременныеРазницы = Записи.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьВременныеРазницы, Выборка);
				
				ЗаписьВременныеРазницы.ОтложенныйНалог = - ЗаписьВременныеРазницы.ВременнаяРазница * СтавкаНалога;
				
				Отклонение       = Отклонение - ЗаписьВременныеРазницы.ОтложенныйНалог;
				ЗаписьОтклонение = ЗаписьВременныеРазницы;
				
			КонецЦикла;
			
			Если Отклонение <> 0 Тогда
				
				Если ЗаписьОтклонение = Неопределено Тогда
					ЗаписьОтклонение = Записи.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьОтклонение, ВыборкаВидАктивовОбязательств, , "ОтложенныйНалог");
				КонецЕсли;
				
				ЗаписьОтклонение.ОтложенныйНалог = ЗаписьОтклонение.ОтложенныйНалог + Отклонение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Записи.ЗаполнитьЗначения(НачальныеДанныеОтчетнаяДата, "ОтчетнаяДата");
	
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(ПериодРасчета, КонтекстРасчета.Организация);
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Записи,
		РеквизитыЗаписи,
		"РасчетОтложенногоНалога");
		
	СтавкиНалога = Новый Соответствие;
	СтавкиНалога.Вставить(Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог, СтавкаНалога);
	
	ПротоколРасчетаСтавокНалога = Новый Соответствие;
	ПротоколРасчетаСтавокНалога.Вставить(Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог, ПротоколРасчетаСтавки);
	
	РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ЗаписатьРасчетСтавокНалога(
		Движения,
		СтавкиНалога,
		ПротоколРасчетаСтавокНалога,
		ПериодРасчета,
		КонтекстРасчета.Организация,
		НачальныеДанныеОтчетнаяДата);
		
КонецПроцедуры

Функция ЭмпирическоеЗначениеПогрешностиСтавки()
	
	Возврат 0.002;
	
КонецФункции

Процедура ОбновитьКонстантыГлобальногоИнтерфейса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГраницаДавно", НачалоГода(ДобавитьМесяц(ТекущаяДата(), -6)));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ ПлательщикиНалогаНаПрибыль
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&ГраницаДавно, ) КАК Настройки
	|ГДЕ
	|	Настройки.ПлательщикНалогаНаПрибыль
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК Настройки
	|ГДЕ
	|	Настройки.ПлательщикНалогаНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(УчетнаяПолитика.БалансовыйМетод) КАК БалансовыйМетод,
	|	МАКСИМУМ(УчетнаяПолитика.ЗатратныйМетод) КАК ЗатратныйМетод
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетод) КАК БалансовыйМетод,
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод) КАК ЗатратныйМетод
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитика.СрезПоследних(
	|				&ГраницаДавно,
	|				Организация В
	|					(ВЫБРАТЬ
	|						ПлательщикиНалогаНаПрибыль.Организация
	|					ИЗ
	|						ПлательщикиНалогаНаПрибыль)) КАК УчетнаяПолитика
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.БалансовыйМетод),
	|		УчетнаяПолитика.ВариантУчетаОтложенногоНалога = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаОтложенногоНалога.ЗатратныйМетод)
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПлательщикиНалогаНаПрибыль КАК ПлательщикиНалогаНаПрибыль
	|			ПО УчетнаяПолитика.Организация = ПлательщикиНалогаНаПрибыль.Организация
	|	ГДЕ
	|		УчетнаяПолитика.Период > &ГраницаДавно) КАК УчетнаяПолитика";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Константы.ОтложенныйНалогЗатратныйМетод.Установить(Выборка.ЗатратныйМетод = Истина);
		Константы.ОтложенныйНалогБалансовыйМетод.Установить(Выборка.БалансовыйМетод = Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентнаяОперация

Процедура ОтразитьПоследствияНачисленияНалога(Движения, Период, Организация, Ссылка) Экспорт
	
	КонтекстРасчета = РасчетНалогаНаПрибыль.НовыйКонтекстРасчета(Организация, Период);
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтекстРасчета.ВариантУчетаОтложенногоНалога <> Перечисления.ВариантыУчетаОтложенногоНалога.БалансовыйМетод Тогда
		// Для затратного метода см. РасчетНалогаНаПрибыль.РассчитатьОтложенныйНалог
		Возврат;
	КонецЕсли;
	
	НачисленныйНалог = НачисленныйНалог(КонтекстРасчета);
	
	// ПБУ18.20
	// Расход (доход) по налогу на прибыль определяется как сумма текущего налога на прибыль и отложенного налога на прибыль.
	
	// Рассчитываем
	РасчетОтложенногоНалога = РассчитатьОтложенныйНалог(КонтекстРасчета, НачисленныйНалог);
	
	РасчетТекущегоНалога    = РассчитатьТекущийНалог(КонтекстРасчета, РасчетОтложенногоНалога);
	
	// Формируем проводки
	ЗаписатьИзменениеОтложенногоНалога(Движения.Хозрасчетный, РасчетОтложенногоНалога, КонтекстРасчета);
	
	ЗаписатьРасчетНалога(
		Движения.Хозрасчетный,
		РасчетТекущегоНалога,
		НачисленныйНалог,
		КонтекстРасчета);
		
	ЗаписатьВлияниеУбыткаТекущегоПериода(
		Движения.Хозрасчетный,
		РасчетТекущегоНалога.ВлияниеУбыткаТекущегоПериода,
		КонтекстРасчета);
		
	ЗакрытьСчетРасчетаНалога(Движения.Хозрасчетный, КонтекстРасчета);
		
	// Записываем протокол
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетОтложенногоНалога.ВременныеРазницы,
		РеквизитыЗаписи,
		"РасчетОтложенногоНалога");
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетОтложенногоНалога.ЭффектИзмененияСтавокНалогаНаПрибыль,
		РеквизитыЗаписи,
		"РасчетЭффектаИзмененияСтавокНалогаНаПрибыль");
		
	РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ЗаписатьРасчетСтавокНалога(
		Движения,
		РасчетОтложенногоНалога.СтавкиНалога,
		РасчетОтложенногоНалога.ПротоколРасчетаСтавокНалога,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
		
	ЗаписатьОтладочнуюИнформацию(РасчетТекущегоНалога, Ссылка);
	
КонецПроцедуры

Процедура ЗаписатьОтладочнуюИнформацию(ДанныеДляСериализации, Ссылка)
	
	// Записывает сериализованное представление протоколов расчета, которые не выводятся в справки-расчеты.
	
	Если Не ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		Возврат;
	КонецЕсли;
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб));
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляСериализации);
	
	ИмяСобытия = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(
		Строка(Перечисления.ВидыРегламентныхОпераций.РасчетОтложенногоНалога)); // нет возможности привести к языку конфигурации
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Ссылка,
		ЗаписьJSON.Закрыть());
		
КонецПроцедуры

#Область Коллекции

// В роли КонтекстРасчета используется РасчетНалогаНаПрибыль.НовыйКонтекстРасчета

Функция НовыйРасчетОтложенногоНалога()
	
	Расчет = Новый Структура;
	
	// Все сведения о расчете отложенного налога с детализацией, как на счетах 09 и 77
	Расчет.Вставить("ОтложенныйНалог", НовыйИзменениеОтложенногоНалога()); 
	
	// Часть сведений о расчете отложенного налога, определяемая с большей детализацией, чем на счетах 09 и 77:
	// - величина отложенных налоговых активов и обязательств на отчетную дату
	// - эффект изменения временных разниц
	Расчет.Вставить(
		"ВременныеРазницы",
		ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетОтложенногоНалога));
		
	// Часть сведений, раскрывающая эффект изменения ставок налога - с детализацией, как на счетах 09 и 77
	Расчет.Вставить(
		"ЭффектИзмененияСтавокНалогаНаПрибыль",
		ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль));
	
	// IAS12.46 "Обязательства (активы) по текущему налогу за текущий и предыдущие периоды оцениваются в сумме,
	//           которую ожидается уплатить налоговым органам (истребовать к возмещению налоговыми органами),
	//           рассчитанной с использованием ставок налога (и налогового законодательства),
	//           действующих или по существу принятых по состоянию на конец отчетного периода."
	//
	// ПБУ18.14 "ставку налога на прибыль, установленную законодательством Российской Федерации о налогах и сборах и действующую на отчетную дату"
	Расчет.Вставить("СтавкиНалога",                Новый Соответствие);
	Расчет.Вставить("ПротоколРасчетаСтавокНалога", Новый Соответствие);
	Для Каждого МетаданныеВидСтавки Из Метаданные.Перечисления.ВидыСтавокОтложенногоНалога.ЗначенияПеречисления Цикл
		ВидСтавки = Перечисления.ВидыСтавокОтложенногоНалога[МетаданныеВидСтавки.Имя];
		Расчет.СтавкиНалога.Вставить(ВидСтавки, 0);
		Расчет.ПротоколРасчетаСтавокНалога.Вставить(ВидСтавки, НовыйПротоколРасчетаСтавкиНалога());
	КонецЦикла;
	
	// Данные о начале отчетного периода, приведенные в соответствии с соглашениями регистра РасчетОтложенногоНалога
	Расчет.Вставить("НачальныеДанныеОтчетнаяДата",  '0001-01-01'); // соответствует измерению ОтчетнаяДата
	Расчет.Вставить("НачальныеДанныеПериодРасчета", '0001-01-01'); // соответствует измерению ПериодРасчета
	
	Возврат Расчет;
	
КонецФункции

Функция НовыйИзменениеОтложенногоНалога()
	
	Изменение = Новый ТаблицаЗначений;
	
	// Изменение
	Измерения     = Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль.Измерения;
	РесурсыРазниц = Метаданные.РегистрыСведений.РасчетОтложенногоНалога.Ресурсы;
	РесурсыСтавок = Метаданные.РегистрыСведений.РасчетЭффектаИзмененияСтавокНалогаНаПрибыль.Ресурсы;
	
	Изменение.Колонки.Добавить("Счет",                                Измерения.Счет.Тип);
	Изменение.Колонки.Добавить("ВидАктивовИОбязательств",             Измерения.ВидАктивовИОбязательств.Тип);
	// на отчетную дату
	Изменение.Колонки.Добавить("ОтложенныйНалог",                     РесурсыРазниц.ОтложенныйНалог.Тип); 
	// за налоговый период
	Изменение.Колонки.Добавить("ЭффектУвеличенияВременныхРазниц",     РесурсыРазниц.ЭффектУвеличенияВременныхРазниц.Тип); 
	Изменение.Колонки.Добавить("ЭффектУменьшенияВременныхРазниц",     РесурсыРазниц.ЭффектУменьшенияВременныхРазниц.Тип);
	Изменение.Колонки.Добавить("ЭффектИзмененияСтавкиБудущегоНалога", РесурсыСтавок.ЭффектИзмененияСтавкиБудущегоНалога.Тип);
	Изменение.Колонки.Добавить("ЭффектИзмененияСтавкиТекущегоНалога", РесурсыСтавок.ЭффектИзмененияСтавкиТекущегоНалога.Тип);
	Изменение.Колонки.Добавить("ПогрешностьОкругления",               РесурсыРазниц.ПогрешностьОкругления.Тип);
	
	Возврат Изменение;
	
КонецФункции

#КонецОбласти

#Область НалоговыеСтавки

Процедура ОпределитьСтавкиНалога(Расчет, ОбщаяСуммаНалога, КонтекстРасчета)
	
	РасчетРаспределенияНалоговойБазы = Неопределено;
	НалоговыйУчетОбособленныхПодразделений.ПрочитатьРасчетРаспределенияНалоговойБазы(
		РасчетРаспределенияНалоговойБазы,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
	
	// ТекущийНалог
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог] = СтавкаТекущегоНалога(
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазы,
		ОбщаяСуммаНалога,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог]);
		
	// БудущийНалог
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог] =
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
		
	УточнитьСтавкуБудущегоНалога(
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог],
		КонтекстРасчета,
		РасчетРаспределенияНалоговойБазы,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог]);
		
	// ПредыдущаяОценка
	Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка] =
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
		
	УточнитьСтавкуНачалоПериода(
		Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка],
		КонтекстРасчета,
		Расчет.НачальныеДанныеОтчетнаяДата,
		Расчет.НачальныеДанныеПериодРасчета,
		Расчет.ПротоколРасчетаСтавокНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка]);
		
КонецПроцедуры

// IAS12.46 "Обязательства (активы) по текущему налогу за текущий и предыдущие периоды оцениваются в сумме,
//           которую ожидается уплатить налоговым органам (истребовать к возмещению налоговыми органами),
//           рассчитанной с использованием ставок налога (и налогового законодательства),
//           действующих или по существу принятых по состоянию на конец отчетного периода."
//
// ПБУ18.14 "ставку налога на прибыль, установленную законодательством Российской Федерации о налогах и сборах
//          и действующую на отчетную дату"
//
Функция СтавкаТекущегоНалога(КонтекстРасчета, РасчетРаспределенияНалоговойБазы, ОбщаяСуммаНалога, Протокол)
	
	Протокол.ДанныеАлгоритма.Вставить(
		"ДатаРасчетаСтавки",
		Макс(КонтекстРасчета.КонецПериода, КонтекстРасчета.НалоговыйПериод));
	
	СтавкаНалога = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
	
	Если РасчетРаспределенияНалоговойБазы = Неопределено Тогда
		
		Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
		
	Иначе
		
		// Для разных регионов могут быть установлены разные ставки.
		// Следует учесть эти различия (предварительно проверив, что они фактически есть).
		
		СтавкиРегиональныйБюджет = Новый Соответствие;
		НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
			СтавкиРегиональныйБюджет,
			Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
			КонтекстРасчета.Организация,
			РасчетРаспределенияНалоговойБазы.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"));
			
		ФактическиИспользуетсяЕдинаяСтавка = Ложь;	
		СтавкаРегиональныйБюджет           = Неопределено;
		Для Каждого ОписаниеСтавки Из СтавкиРегиональныйБюджет Цикл
			Если СтавкаРегиональныйБюджет = Неопределено Тогда
				СтавкаРегиональныйБюджет           = ОписаниеСтавки.Значение;
				ФактическиИспользуетсяЕдинаяСтавка = Истина;
			ИначеЕсли СтавкаРегиональныйБюджет <> ОписаниеСтавки.Значение Тогда
				ФактическиИспользуетсяЕдинаяСтавка = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ФактическиИспользуетсяЕдинаяСтавка Тогда
			
			Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
			
			Если СтавкаРегиональныйБюджет <> Неопределено Тогда
				
				// Региональная ставка в единственном регионе фактической деятельности организации
				// может быть иной, чем установлена для организации в целом.
				// Рассчитаем суммарную ставку исходя из региональной ставки.
				
				Протокол.ДанныеАлгоритма.Вставить("СтавкаРегиональныйБюджет", СтавкаРегиональныйБюджет);
				Протокол.ДанныеАлгоритма.Вставить("СтавкаФедеральныйБюджет",  0);
				
				Протокол.ДанныеАлгоритма.СтавкаФедеральныйБюджет = НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(
					Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
					КонтекстРасчета.Организация);
					
				СтавкаНалога = Протокол.ДанныеАлгоритма.СтавкаФедеральныйБюджет + Протокол.ДанныеАлгоритма.СтавкаРегиональныйБюджет;
					
			КонецЕсли;
			
		Иначе
			
			// В территориально-распределенной организации при наличии разных ставок налога в разных регионах 
			// определить ставку "установленную законодательством Российской Федерации о налогах и сборах"
			// опираясь непосредственно на законодательство непросто,
			// так как следует учесть
			// - влияние подразделений, закрытых в течение периода
			// - влияние округления суммы налоговой базы и налога. 
			// Поэтому, когда это возможно, для определения фактически действующей ставки за отчетный период
			// рассчитаем ее как отношение суммы налога к налоговой базе.
			
			Протокол.ДанныеАлгоритма.Вставить(
				"НалоговаяБаза",
				РасчетРаспределенияНалоговойБазы.Итог("НалоговаяБаза"));
				
			Протокол.ДанныеАлгоритма.Вставить(
				"ОбщаяСуммаНалога",
				ОбщаяСуммаНалога);
				
			Если Протокол.ДанныеАлгоритма.НалоговаяБаза > 0 И Протокол.ДанныеАлгоритма.ОбщаяСуммаНалога > 0 Тогда
				// Рассчитываем через фактические показатели налоговой базы и начисленного налога
				Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПоНалоговойБазе;
				СтавкаНалога = ОкруглитьСтавкуНалога(
					Протокол.ДанныеАлгоритма.ОбщаяСуммаНалога
					/ Протокол.ДанныеАлгоритма.НалоговаяБаза);
			Иначе
				// Применяем ставки, установленные в отчетном периоде
				СкорректироватьСтавкуПоДолямНалоговойБазы(
					СтавкаНалога,
					Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
					КонтекстРасчета.Организация,
					РасчетРаспределенияНалоговойБазы,
					Протокол);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтавкаНалога;
		
КонецФункции

// В общем случае, отложенный налог должен быть оценен по ставке,
// которая будет действовать при погашении отложенных налоговых активов и обязательств.
//
// Как правило, сложно определить, когда именно они будут погашены и какая будет ставка.
// Поэтому, в типовом решении используем ставку, установленную на следующий отчетный период.
// Если в разных регионах деятельности предприятия отличаются ставки, то корректируем ставку 
// в соответствии с правилами распределения налоговой базы, установленными НК.
// При этом
// - используем те показатели, что сложились на отчетную дату
// - исключаем из них показатели закрытых подразделений -
//   очевидно, они не повлияют на распределение прибыли в будущем.
// 
// При необходимости учитывать другие параметры, эту процедуру рекомендуется переопределить.
//
Процедура УточнитьСтавкуБудущегоНалога(Ставка, КонтекстРасчета, РасчетРаспределенияНалоговойБазы, Протокол)
	
	СледующийГод = КонецГода(КонтекстРасчета.КонецПериода) + 1;
	
	Протокол.ДанныеАлгоритма.Вставить("ДатаРасчетаСтавки", СледующийГод);
	
	Ставка = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(
		Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
		КонтекстРасчета.Организация);
	
	Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.Установленная;
	Если РасчетРаспределенияНалоговойБазы <> Неопределено Тогда
		СкорректироватьСтавкуПоДолямНалоговойБазы(
			Ставка,
			Протокол.ДанныеАлгоритма.ДатаРасчетаСтавки,
			КонтекстРасчета.Организация,
			РасчетРаспределенияНалоговойБазы,
			Протокол);
	КонецЕсли;
		
КонецПроцедуры

Процедура УточнитьСтавкуНачалоПериода(Ставка, КонтекстРасчета, НачальныеДанныеОтчетнаяДата, НачальныеДанныеПериодРасчета, Протокол)
	
	Если Не ЗначениеЗаполнено(НачальныеДанныеПериодРасчета) Тогда
		// Ранее установили, что данных нет.
		Возврат;
	КонецЕсли;
	
	ОписаниеПериода = Новый Структура;
	ОписаниеПериода.Вставить("ОтчетнаяДата",  НачальныеДанныеОтчетнаяДата);
	ОписаниеПериода.Вставить("ПериодРасчета", НачальныеДанныеПериодРасчета);
	
	ПрочитаннаяСтавка = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПрочитатьСтавки(
		ОписаниеПериода,
		КонтекстРасчета.Организация,
		"Доля",
		Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог);
		
	Если ПрочитаннаяСтавка <> Неопределено Тогда
		Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПредыдущийРасчет;
		Протокол.ДанныеАлгоритма.Вставить("ОтчетнаяДата",  НачальныеДанныеОтчетнаяДата);
		Протокол.ДанныеАлгоритма.Вставить("ПериодРасчета", НачальныеДанныеПериодРасчета);
		Ставка = ПрочитаннаяСтавка;
	КонецЕсли;
		
КонецПроцедуры

Функция НовыйПротоколРасчетаСтавкиНалога()
	
	Протокол = Новый Структура;
	Протокол.Вставить("АлгоритмРасчета",  Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.ПустаяСсылка());
	Протокол.Вставить("ДанныеАлгоритма",  Новый Структура);
	
	Возврат Протокол;
	
КонецФункции

// Закрытые подразделения не учитываем, так как в будущих периодах они уже не повлияют на распределение прибыли.
Процедура СкорректироватьСтавкуПоДолямНалоговойБазы(Ставка, Период, Организация, РасчетРаспределенияНалоговойБазы, Протокол)
	
	Протокол.АлгоритмРасчета = Перечисления.АлгоритмыРасчетаСтавкиОтложенногоНалога.УстановленнаяПоДолямНалоговойБазы;
	Протокол.ДанныеАлгоритма.Вставить("ОбщаяСтавка", Ставка);
	
	// В отдельных подразделениях региональная ставка может отличаться от общеустановленной
	ОбщаяСтавкаРегиональныйБюджет = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(Период, Организация);
	СтавкиРегиональныйБюджет = Новый Соответствие;
	НалоговыйУчетОбособленныхПодразделений.ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
		СтавкиРегиональныйБюджет,
		Период,
		Организация,
		РасчетРаспределенияНалоговойБазы.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"));
		
	// Чтобы сократить ошибки округления, среднюю ставку рассчитываем как разницу между
	// - общеустановленной ставкой
	// - отклонением региональных ставок от общеустановленной.
	// Рассчитаем отклонение региональных ставок от общеустановленных, взвешенное с учетом доли налоговой базы подразделений.
	// Закрытые подразделения не учитываем, так как в будущих периодах они уже не повлияют на распределение прибыли.
	
	ВзвешеннаяСуммаОтклоненийСтавки = 0;
	СуммаДолейНалоговойБазы         = 0;
	
	Протокол.ДанныеАлгоритма.Вставить("ОтклоненияСтавки",  Новый Соответствие);
	Протокол.ДанныеАлгоритма.Вставить("ДолиНалоговойБазы", Новый Соответствие);
		
	Для Каждого ЗаписьРаспределенияНалоговойБазы Из РасчетРаспределенияНалоговойБазы Цикл
		
		Если ЗаписьРаспределенияНалоговойБазы.Закрыто Тогда
			// не учитываем показатели вовсе
			Продолжить;
		КонецЕсли;
		
		Протокол.ДанныеАлгоритма.ДолиНалоговойБазы.Вставить(
			ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане,
			ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы);
		
		СуммаДолейНалоговойБазы = СуммаДолейНалоговойБазы + ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы;
		
		СтавкаРегиональныйБюджет = СтавкиРегиональныйБюджет[ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане];
		Если Не ЗначениеЗаполнено(СтавкаРегиональныйБюджет) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтклонениеСтавки = СтавкаРегиональныйБюджет - ОбщаяСтавкаРегиональныйБюджет;
		Если ОтклонениеСтавки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Протокол.ДанныеАлгоритма.ОтклоненияСтавки.Вставить(
			ЗаписьРаспределенияНалоговойБазы.РегистрацияВНалоговомОргане,
			ОтклонениеСтавки);
		
		ВзвешеннаяСуммаОтклоненийСтавки = ОтклонениеСтавки * ЗаписьРаспределенияНалоговойБазы.ДоляНалоговойБазы
			+ ВзвешеннаяСуммаОтклоненийСтавки;
		
	КонецЦикла;
	
	Если СуммаДолейНалоговойБазы <> 0 Тогда
		ОтклонениеСтавки = ОкруглитьСтавкуНалога(ВзвешеннаяСуммаОтклоненийСтавки / СуммаДолейНалоговойБазы);
		Ставка = Ставка + ОтклонениеСтавки;
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаПоСтавкеНалога(База, Ставка)
	
	Возврат Окр(База * Ставка, 2);
	
КонецФункции

Функция ОкруглитьСтавкуНалога(ТочноеЗначение)
	
	ТипСтавкиНалога = Метаданные.РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.Ресурсы.СтавкаНалога.Тип;
	
	КвалификаторыЧислаЛюбойЗнак = Новый КвалификаторыЧисла(
		ТипСтавкиНалога.КвалификаторыЧисла.Разрядность,
		ТипСтавкиНалога.КвалификаторыЧисла.РазрядностьДробнойЧасти,
		ДопустимыйЗнак.Любой);
	ТипДляОкругления = Новый ОписаниеТипов(ТипСтавкиНалога,,,КвалификаторыЧислаЛюбойЗнак);
	
	Возврат ТипДляОкругления.ПривестиЗначение(ТочноеЗначение);
	
КонецФункции

#КонецОбласти

#Область ОтложенныйНалог // Оценка отложенных налоговых активов и обязательств

#Область Правила

Функция СчетаОтложенныйНалог()
	
	// Счета, подлежащие автоматической корректировке
	
	СчетаОтложенныйНалог = Новый Массив;
	СчетаОтложенныйНалог.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СчетаОтложенныйНалог.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаОтложенныйНалог);

КонецФункции

Функция СчетаДоходовРасходов()
	
	// Временные разницы определяются на балансовых счетах, а не на счетах формирования прибыли.
	
	СчетаДоходовРасходов = Новый Массив;
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	СчетаДоходовРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки);
	
	Возврат СчетаДоходовРасходов;

КонецФункции

Функция НовыйПравилаГруппировкиАктивовОбязательств() Экспорт

	Правила = Новый ТаблицаЗначений;
	Правила.Колонки.Добавить("ОсновнойСчет",              Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Правила.Колонки.Добавить("ВидАктивовОбязательств",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	Правила.Колонки.Добавить("ДополнительныеСчета",       Новый ОписаниеТипов("Массив"));
	Правила.Колонки.Добавить("ИсключенныеСубконто",       Новый ОписаниеТипов("Массив"));
	
	Возврат Правила;
	
КонецФункции

Процедура ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств(Правила) Экспорт
	
	// В режиме совместимости с редакцией ПБУ 18 2015 года - 
	// см. НалоговыйУчет.ПолучитьТаблицуВидовАктивовИОбязательств()
	
	// Общее правило в отношении субконто:
	// активы и обязательства детализируются до всех разрезов необоротной аналитики (по которым ведется учет разниц).
	
	// Могут быть исключения, распространяющиеся как на все счета, так и на отдельные счета.
	// Общие для всех счетов перечислены в ГлобальныеИсключенияДетализацииАктивовОбязательств, частные - ниже.
	
	// Правила, заданные в коллекции позже, имеют больший приоритет, чем заданные раньше.
	// С учетом этого, сначала следует установить правило для счета более высокого уровня, а потом - исключения для подчиненных.
	
	// Раздел I. ВНЕОБОРОТНЫЕ АКТИВЫ
	
	// ОсновныеСредства
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОсновныеСредства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОсновныеСредства;
		
	// Стоимость основного средства в общем случае "размазана" по двум счетам - стоимости ОС и "накопленной" амортизации,
	// поэтому стоимость такого актива собирается в целом по основному и дополнительным счетам.
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_01);
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияАрендованногоИмущества);
	
	// ДоходныеВложенияВ_МЦ
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходныеВложенияВ_МЦ;
		
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОС_03);
	
	Правило.ИсключенныеСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		
	// НематериальныеАктивы
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.НематериальныеАктивы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НематериальныеАктивы;
		
	Правило.ДополнительныеСчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	
	// Оборудование 
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Оборудование;
		
	// ВложенияВоВнеоборотныеАктивы
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВнеоборотныеАктивы;
	
	// Раздел II. ПРОИЗВОДСТВЕННЫЕ ЗАПАСЫ
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Материалы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Материалы;
	
	// Раздел III. ЗАТРАТЫ НА ПРОИЗВОДСТВО
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.БракВПроизводстве;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НезавершенноеПроизводство;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КосвенныеПроизводственныеРасходы;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Полуфабрикаты;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Полуфабрикаты;
	
	// Раздел IV. ГОТОВАЯ ПРОДУКЦИЯ И ТОВАРЫ
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ГотоваяПродукция;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.Товары;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.Товары;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасходыНаПродажу;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ИздержкиОбращения;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ТоварыОтгруженные;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ТоварыОтгруженные;
	
	// Раздел V. ДЕНЕЖНЫЕ СРЕДСТВА
	
	// Финансовые вложения
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ФинансовыеВложения;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
		
	// Оценки по обесценению учитываем обособленно от первоначальной оценки актива;
	// так как детализация на счете 59 не позволяет однозначно идентифицировать актив:
	// на счете 58 есть субсчета; отличающиеся аналитикой; а на счете 59 нет субсчетов и аналитика беднее.
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПодОбесценениеФинансовыхВложений;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ФинансовыеВложения;
		
	// Раздел VI. РАСЧЕТЫ
		
	// Общие правила по счетам расчетов
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КредиторскаяЗадолженность;
	
	// Исключения по счетам расчетов
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДебиторскаяЗадолженность;
	
	// Курсовые разницы
	СчетаРасчетов = УчетВзаиморасчетов.ОсновныеСчетаРасчетов();
	
	Для Каждого ОписаниеСчета Из СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах] Цикл
		Правило = Правила.Добавить();
		Правило.ОсновнойСчет           = ОписаниеСчета.Значение;
		Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВУЕ;
	КонецЦикла;
		
	Для Каждого ОписаниеСчета Из СчетаРасчетов[Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте] Цикл
		Правило = Правила.Добавить();
		Правило.ОсновнойСчет           = ОписаниеСчета.Значение;
		Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.КурсовыеРазницыПоРасчетамВВалюте;
	КонецЦикла;
	
	// Резервы по сомнительным долгам
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РезервыСомнительныхДолгов;
	
	// Раздел VIII. ФИНАНСОВЫЕ РЕЗУЛЬТАТЫ
	
	// Недостачи и потери от порчи ценностей
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.НедостачиПотери;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ОценочныеОбязательства;
	
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.РасходыБудущихПериодов;
		
	Правило = Правила.Добавить();
	Правило.ОсновнойСчет           = ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов;
	Правило.ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ДоходыБудущихПериодов;
	
КонецПроцедуры

// Виды субконто, в разрезе которых никакие данные о временных разницах не учитываются
// при оценке отложенных налоговых активов и обязательств.
//
Функция ГлобальныеИсключенияДетализацииАктивовОбязательств()
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации);
	Исключения.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	
	Возврат Исключения;
		
КонецФункции

#КонецОбласти

#Область Расчет

Функция РассчитатьОтложенныйНалог(КонтекстРасчета, ОбщаяСуммаНалога)
	
	// ПБУ18.14
	// Изменение величины отложенных налоговых активов в отчетном периоде равняется произведению вычитаемых временных разниц,
	// возникших (погашенных) в отчетном периоде, на ставку налога на прибыль,
	// установленную законодательством Российской Федерации о налогах и сборах и действующую на отчетную дату. 
	//
 	// В случае изменения ставок налога на прибыль в соответствии с законодательством
	// Российской Федерации о налогах и сборах величина отложенных налоговых активов подлежит пересчету на дату,
	// предшествующую дате начала применения измененных ставок
	// с отнесением возникшей в результате пересчета разницы на счет учета прибылей и убытков.
	
	// IAS12.60(a) Балансовая стоимость отложенных налоговых активов и обязательств может меняться
	// даже при отсутствии изменений в сумме соответствующих временных разниц ... 
	// в результате изменения в ставках налога или налоговом законодательстве
	
	// IAS12.80(d) Компоненты расхода (дохода) по налогу могут включать сумму расхода (дохода) 
	// по отложенному налогу, относящегося к изменениям в ставках налога или введению новых налогов
	// (c) сумму расхода (дохода) по отложенному налогу, относящегося к возникновению и восстановлению временных разниц;
	// (d) сумму расхода (дохода) по отложенному налогу, относящегося к изменениям в ставках налога или введению новых налогов;
	// (g) расход по отложенному налогу, возникающий в результате списания
	//     или восстановления предыдущего списания отложенного налогового актива в соответствии с пунктом 56
	//     (Балансовая стоимость отложенного налогового актива подлежит повторной оценке по состоянию на конец
	//      каждого отчетного периода...
	//      Любое такое уменьшение должно быть восстановлено в той мере, в которой станет вероятным получение достаточной
	//      налогооблагаемой прибыли.)
	
	// Исходя из этих требований, в программе порядок расчета следующий:
	// 1. Отложенные налоги оцениваем по ставке будущего налога,
	//    которая в частном (и частом) случае равна ставке текущего налога в силу ПБУ 18.
	//    Организация может отклониться от этого требования IAS12.46 и применять другую ставку.
	// 2. В сумме изменения отложенного налога за отчетный период выделяем компоненты
	//    - эффект изменения временных разниц
	//    - эффект изменения ставки налога.
	// 3. Эффект изменения временных разниц оцениваем по ставке текущего налога для выполнения требований ПБУ18.14.
	//    Также это упрощает численную сверку суммы начисленного налога и показателей отложенного налога,
	//    выполняемую на счете 68.04.2.
	//    Ниже эта ставка обозначена как Rc.
	// 4. Эффект изменения ставки налога численно равен сумме
	//    - произведения временных разниц на начало отчетного периода на разницу между ставками
	//      текущего налога и налога, по которым отложенные налоги оценены в предыдущем отчетном периоде
	//    - произведения временных разниц на конец отчетного периода на разницу между ставками
	//      будущего налога и текущего налога, по которым отложенные налоги оценены в предыдущем отчетном периоде.
	// 5. Эффект изменения временных разниц оцениваем раздельно по увеличению и уменьшению разниц с тем,
	//    чтобы показать в финансовой отчетности раздельно признание и погашение налоговых активов (обязательств).
	// 
	// Корректность расчета в пунктах 3 и 4 обеспечивается следующими равенствами:
	// T1 - T0 = D1*R1 - D0*R0 = (D1-D0)*Rc + D1*(R1-Rc) + D0*(Rc-R0) = 
	//         = {D1*Rc} - {{D0*Rc}} + D1R1 - {D1*Rc} + {{D0*Rc}} - D0R0
	// где
	//   T1 - отложенный налог на отчетную дату
	//   T0 - отложенный налог на начало отчетного периода
	//   D1 - временные разницы на отчетную дату 
	//   D0 - временные разницы на начало периода
	//   R1 - ставка налога на отчетную дату
	//   R0 - ставка налога на начало периода
	//   Rc - ставка текущего налога
	//
	// В частном случае, когда все ставки равны, расчет простой: 
	// - T1 = D1 * R1;
	// - эффект изменения разниц определяется как T1 - T0.
	
	Расчет = НовыйРасчетОтложенногоНалога();
	Расчет.НачальныеДанныеОтчетнаяДата = КонтекстРасчета.НачалоНалоговогоПериода;
	РегистрыСведений.РасчетОтложенногоНалога.ПривестиПериодРасчета(Расчет.НачальныеДанныеОтчетнаяДата);
	
	// При выполнении регламентной операции или при инициализации сведения о примененных ставках записываются всегда,
	// а сведения о суммах отложенного налога - только при наличии временных разниц.
	// Поэтому проверка записей о ставках эффективнее.
	Расчет.НачальныеДанныеПериодРасчета = РегистрыСведений.ПримененныеСтавкиОтложенногоНалога.ПериодРасчета(
		Расчет.НачальныеДанныеОтчетнаяДата,
		КонтекстРасчета.Организация,
		КонтекстРасчета.КонецПериода);
	
	ОтчетнаяДата = КонтекстРасчета.КонецПериода + 1;
	
	// Получим данные о временных разницах
	// См. также ИнициализироватьРасчетОтложенногоНалога
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьСальдоВременныхРазниц(МенеджерВременныхТаблиц, ОтчетнаяДата, КонтекстРасчета.Организации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачальныеДанныеОтчетнаяДата",  Расчет.НачальныеДанныеОтчетнаяДата);
	Запрос.УстановитьПараметр("НачальныеДанныеПериодРасчета", Расчет.НачальныеДанныеПериодРасчета);
	Запрос.УстановитьПараметр("ОтчетнаяДата",                 ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организация",                  КонтекстРасчета.Организация);
	
	// Вычитаемые (deductible) разницы на счетах учета активов имеют отрицательный знак,
	// облагаемые (taxable) - положительный.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Изменения.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|	Изменения.ВидАктивовИОбязательств КАК ВидАктивовИОбязательств,
	|	Изменения.Счет КАК Счет,
	|	Изменения.Филиал КАК Филиал,
	|	Изменения.Подразделение КАК Подразделение,
	|	Изменения.Субконто1 КАК Субконто1,
	|	Изменения.Субконто2 КАК Субконто2,
	|	Изменения.Субконто3 КАК Субконто3,
	|	СУММА(Изменения.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(Изменения.ВременнаяРазницаПредыдущая) КАК ВременнаяРазницаПредыдущая,
	|	СУММА(Изменения.ОтложенныйНалогПредыдущий) КАК ОтложенныйНалогПредыдущий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТекущиеДанные.СчетОтложенногоНалога КАК СчетОтложенногоНалога,
	|		ТекущиеДанные.ВидАктивовОбязательств КАК ВидАктивовИОбязательств,
	|		ТекущиеДанные.Счет КАК Счет,
	|		ТекущиеДанные.Филиал КАК Филиал,
	|		ТекущиеДанные.Подразделение КАК Подразделение,
	|		ТекущиеДанные.Субконто1 КАК Субконто1,
	|		ТекущиеДанные.Субконто2 КАК Субконто2,
	|		ТекущиеДанные.Субконто3 КАК Субконто3,
	|		ТекущиеДанные.ВременнаяРазница КАК ВременнаяРазница,
	|		0 КАК ВременнаяРазницаПредыдущая,
	|		0 КАК ОтложенныйНалогПредыдущий
	|	ИЗ
	|		СальдоВременныхРазниц КАК ТекущиеДанные
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачальныеДанные.СчетОтложенногоНалога,
	|		НачальныеДанные.ВидАктивовИОбязательств,
	|		НачальныеДанные.Счет,
	|		НачальныеДанные.Филиал,
	|		НачальныеДанные.Подразделение,
	|		НачальныеДанные.Субконто1,
	|		НачальныеДанные.Субконто2,
	|		НачальныеДанные.Субконто3,
	|		0,
	|		НачальныеДанные.ВременнаяРазница,
	|		НачальныеДанные.ОтложенныйНалог
	|	ИЗ
	|		РегистрСведений.РасчетОтложенногоНалога КАК НачальныеДанные
	|	ГДЕ
	|		НачальныеДанные.ОтчетнаяДата = &НачальныеДанныеОтчетнаяДата
	|		И НачальныеДанные.Организация = &Организация
	|		И НачальныеДанные.ПериодРасчета = &НачальныеДанныеПериодРасчета
	|		И (НачальныеДанные.ВременнаяРазница <> 0
	|				ИЛИ НачальныеДанные.ОтложенныйНалог <> 0)) КАК Изменения
	|
	|СГРУППИРОВАТЬ ПО
	|	Изменения.СчетОтложенногоНалога,
	|	Изменения.ВидАктивовИОбязательств,
	|	Изменения.Счет,
	|	Изменения.Филиал,
	|	Изменения.Подразделение,
	|	Изменения.Субконто1,
	|	Изменения.Субконто2,
	|	Изменения.Субконто3
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств,
	|	Счет,
	|	Филиал,
	|	Подразделение,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИТОГИ
	|	СУММА(ВременнаяРазница),
	|	СУММА(ВременнаяРазницаПредыдущая),
	|	СУММА(ОтложенныйНалогПредыдущий)
	|ПО
	|	СчетОтложенногоНалога,
	|	ВидАктивовИОбязательств";
	
	// Обработаем полученные данные
	ОпределитьСтавкиНалога(Расчет, ОбщаяСуммаНалога, КонтекстРасчета);
	
	СтавкаТекущегоНалога     = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
	СтавкаПредыдущегоРасчета = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ПредыдущаяОценка];
	СтавкаБудущегоНалога     = Расчет.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог];
	
	Если СтавкаПредыдущегоРасчета = 0 Тогда
		КоэффициентСтавкиТекущегоНалога = Неопределено;
	Иначе
		// Применяется к оценке на начало периода (по ставке предыдущего расчета)
		// Эффект изменения ставки = D0 * (Rc-R0) = T0/R0 * (Rc-R0) = T0 * (Rc-R0)/R0 = T0 * k
		КоэффициентСтавкиТекущегоНалога = (СтавкаТекущегоНалога - СтавкаПредыдущегоРасчета) / СтавкаПредыдущегоРасчета; 
	КонецЕсли;
	
	Если СтавкаБудущегоНалога = 0 Тогда
		КоэффицентСтавкиБудущегоНалога = Неопределено;
	Иначе
		// Применяется к оценке на конец периода (по ставке будущего налога)
		// Эффект изменения ставки = D1*(R1-Rc) = T1/R1 * (R1-Rc) = T1 * (R1-Rc)/R1 = T1 * k
		КоэффицентСтавкиБудущегоНалога  = (СтавкаБудущегоНалога - СтавкаТекущегоНалога) / СтавкаБудущегоНалога;
	КонецЕсли;
	
	ВозможенЭффектИзмененияСтавки = ЗначениеЗаполнено(КоэффициентСтавкиТекущегоНалога)
		Или ЗначениеЗаполнено(КоэффицентСтавкиБудущегоНалога);
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	ВыборкаСчетОтложенногоНалога = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчетОтложенногоНалога.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаСчетОтложенногоНалога.СчетОтложенногоНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаВидАктивовОбязательств = ВыборкаСчетОтложенногоНалога.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидАктивовОбязательств.Следующий() Цикл
			
			ЗаписьОтложенныйНалог = Расчет.ОтложенныйНалог.Добавить();
			ЗаписьОтложенныйНалог.Счет                    = ВыборкаСчетОтложенногоНалога.СчетОтложенногоНалога;
			ЗаписьОтложенныйНалог.ВидАктивовИОбязательств = ВыборкаВидАктивовОбязательств.ВидАктивовИОбязательств;
			
			// Погрешности округления могут
			// 1. быть в исходных данных - сумме предыдущей оценки отложенного налога
			// 2. образовываться в ходе расчета.
			// При этом в ходе расчета погрешности могут быть двух видов:
			// a. "по горизонтали" - начальное сальдо разниц * ставку + изменения разниц * ставку <> конечное сальдо разниц * ставку
			//    (ПогрешностьОкругленияСальдо)
			// b. "по вертикали"   - суммарное значение разниц по виду умноженное на ставку <> сумме произведений каждой разницы на ставку
			//    (ПогрешностьОкругленияСуммарногоЗначенияНакопленная).
			// Устранение погрешностей одного вида может приводить к появлению погрешностей другого вида.
			// Учитываем все их при расчете.
			//
			// Суть расчета - определение суммы отложенного налогового актива (обязательства) - ранее обозначен T1.
			// Поэтому погрешности в его расчете
			// - учитываем с отрицательным знаком - см. формулу T1 - T0 = eD + eR; T0 - T1 + eD + eR = 0
			// - регистрируем, записываем в ЗаписьОтложенныйНалог.ПогрешностьОкругления
			
			Если Не ВозможенЭффектИзмененияСтавки Тогда
				// В ходе расчета погрешность округления не накапливается, потому что изменения отложенного налога рассчитываются прямым счетом,
				// без умножения на ставку налога.
				ПогрешностьОкругленияСальдо = 0;
			Иначе
				// Вычитаемые (deductible) разницы на счетах учета активов имеют отрицательный знак,
				// облагаемые (taxable) - положительный.
				ОтложенныйНалогПредыдущий   = - ВыборкаВидАктивовОбязательств.ВременнаяРазницаПредыдущая * СтавкаПредыдущегоРасчета;
				ПогрешностьОкругленияСальдо = ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий - ОтложенныйНалогПредыдущий;
				Если ТипСумма.ПривестиЗначение(ПогрешностьОкругленияСальдо) <> 0 Тогда
					// Слишком большая для погрешности округления
					ПогрешностьОкругленияСальдо = 0;
				КонецЕсли;
			КонецЕсли;
			
			ПогрешностьОкругленияСуммарногоЗначенияНакопленная = 0;// см. выше "погрешность по вертикали"
			
			Выборка = ВыборкаВидАктивовОбязательств.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				// Детальные данные о разницах
				Если Не ЗначениеЗаполнено(Выборка.ВременнаяРазница)
					И Не ЗначениеЗаполнено(Выборка.ВременнаяРазницаПредыдущая) Тогда
					Продолжить;
				КонецЕсли;
					
				ЗаписьВременныеРазницы = Расчет.ВременныеРазницы.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьВременныеРазницы, Выборка);
				ЗаписьВременныеРазницы.ОтчетнаяДата = ОтчетнаяДата;
				
				// Сальдо отложенного налога на отчетную дату
				ОтложенныйНалог = - ЗаписьВременныеРазницы.ВременнаяРазница * СтавкаБудущегоНалога;
				
				// Заботимся, чтобы не накапливалась погрешность округления
				// - "по вертикали"
				ПогрешностьОкругленияСуммарногоЗначения = 0;
				ДополнитьОкругленнымЗначением(
					ЗаписьВременныеРазницы.ОтложенныйНалог,
					ОтложенныйНалог,
					ПогрешностьОкругленияСуммарногоЗначения,
					Ложь);
				ПогрешностьОкругленияСуммарногоЗначенияНакопленная = ПогрешностьОкругленияСуммарногоЗначения
					+ ПогрешностьОкругленияСуммарногоЗначенияНакопленная;
					
				УстранениеПогрешностиСуммарногоЗначения = УстранитьПогрешностьОкругления(
					ЗаписьВременныеРазницы.ОтложенныйНалог,
					ПогрешностьОкругленияСуммарногоЗначенияНакопленная);
					
				ЗаписьОтложенныйНалог.ПогрешностьОкругления = ЗаписьОтложенныйНалог.ПогрешностьОкругления + УстранениеПогрешностиСуммарногоЗначения;
				
				// - "по горизонтали"
				Если ВозможенЭффектИзмененияСтавки Тогда
					ПогрешностьОкругленияСальдо = - ПогрешностьОкругленияСуммарногоЗначения
						+ ПогрешностьОкругленияСальдо;
				КонецЕсли;
					
				ЗаписьОтложенныйНалог.ОтложенныйНалог = ЗаписьОтложенныйНалог.ОтложенныйНалог + ЗаписьВременныеРазницы.ОтложенныйНалог;
				
				Если Не ВозможенЭффектИзмененияСтавки Тогда
					
					// Все изменения отложенного налога объясняем изменением разниц.
					// Поскольку при вычитании погрешность округления не может измениться, ранее накопленные погрешности не учитываем.
					ЭффектИзмененияВременныхРазниц = ЗаписьВременныеРазницы.ОтложенныйНалог - Выборка.ОтложенныйНалогПредыдущий;
					
				Иначе
					
					ИзменениеВременнойРазницы = Выборка.ВременнаяРазница - Выборка.ВременнаяРазницаПредыдущая;
					
					ЭффектИзмененияВременныхРазниц = - ИзменениеВременнойРазницы * СтавкаТекущегоНалога; // не округлена
					
					Если ЭффектИзмененияВременныхРазниц <> 0 Тогда
						// При округлении произведения возможна погрешность округления.
						// Поэтому учтем ранее накопленную погрешность.
						ЭффектИзмененияВременныхРазниц = ЭффектИзмененияВременныхРазниц + УстранениеПогрешностиСуммарногоЗначения;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЭффектИзмененияВременныхРазниц > 0 Тогда
					
					ДополнитьОкругленнымЗначением(
						ЗаписьВременныеРазницы.ЭффектУвеличенияВременныхРазниц,
						ЭффектИзмененияВременныхРазниц,
						ПогрешностьОкругленияСальдо);
						
					ЗаписьОтложенныйНалог.ЭффектУвеличенияВременныхРазниц = ЗаписьВременныеРазницы.ЭффектУвеличенияВременныхРазниц
						+ ЗаписьОтложенныйНалог.ЭффектУвеличенияВременныхРазниц;
						
				ИначеЕсли ЭффектИзмененияВременныхРазниц < 0 Тогда
						
					ДополнитьОкругленнымЗначением(
						ЗаписьВременныеРазницы.ЭффектУменьшенияВременныхРазниц,
						ЭффектИзмененияВременныхРазниц,
						ПогрешностьОкругленияСальдо);
						
					ЗаписьОтложенныйНалог.ЭффектУменьшенияВременныхРазниц = ЗаписьВременныеРазницы.ЭффектУменьшенияВременныхРазниц
						+ ЗаписьОтложенныйНалог.ЭффектУменьшенияВременныхРазниц;
						
				КонецЕсли;
						
			КонецЦикла;
			
			Если ВозможенЭффектИзмененияСтавки Тогда
				
				ПогрешностьОкругленияСальдо = - ЗаписьОтложенныйНалог.ПогрешностьОкругления
					+ ПогрешностьОкругленияСальдо;
				
				Если ЗначениеЗаполнено(КоэффицентСтавкиБудущегоНалога) Тогда
					
					ЭффектИзмененияСтавкиБудущегоНалога = ЗаписьОтложенныйНалог.ОтложенныйНалог
						* КоэффицентСтавкиБудущегоНалога;
						
					ДополнитьОкругленнымЗначением(
						ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиБудущегоНалога,
						ЭффектИзмененияСтавкиБудущегоНалога,
						ПогрешностьОкругленияСальдо);
						
				КонецЕсли;
				
				Если ЗначениеЗаполнено(КоэффициентСтавкиТекущегоНалога) Тогда
			
					ЭффектИзмененияСтавкиТекущегоНалога = ВыборкаВидАктивовОбязательств.ОтложенныйНалогПредыдущий
						* КоэффициентСтавкиТекущегоНалога;
						
					ДополнитьОкругленнымЗначением(
						ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиТекущегоНалога,
						ЭффектИзмененияСтавкиТекущегоНалога,
						ПогрешностьОкругленияСальдо);
						
				КонецЕсли;
					
				Если ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиТекущегоНалога <> 0
					Или ЗаписьОтложенныйНалог.ЭффектИзмененияСтавкиБудущегоНалога <> 0 Тогда
					
					ЗаполнитьЗначенияСвойств(Расчет.ЭффектИзмененияСтавокНалогаНаПрибыль.Добавить(), ЗаписьОтложенныйНалог);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Расчет;
	
КонецФункции

Процедура СоздатьСальдоВременныхРазниц(МенеджерВременныхТаблиц, ОтчетнаяДата, Организации)
	
	ПравилаГруппировки = НовыйПравилаГруппировкиАктивовОбязательств();
	ЗаполнитьПравилаГруппировкиВидовАктивовИОбязательств(ПравилаГруппировки);
	
	ПланГруппировки = ПланГруппировкиАктивовОбязательств(ПравилаГруппировки);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПланГруппировки", ПланГруппировки);
	Запрос.Текст = // Текст может быть модифицирован - см. УдалитьНеиспользуемыеСубконто()
	"ВЫБРАТЬ
	|	ПланГруппировки.Счет КАК Счет,
	|	ПланГруппировки.СчетГруппировки КАК СчетГруппировки,
	|	ПланГруппировки.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	ПланГруппировки.ИсключитьСубконто1,
	|	ПланГруппировки.ИсключитьСубконто2,
	|	ПланГруппировки.ИсключитьСубконто3,
	|	ПланГруппировки.НомерВариантаИсключения
	|ПОМЕСТИТЬ ВТ_ПравилаГруппировки
	|ИЗ
	|	&ПланГруппировки КАК ПланГруппировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	Запрос.Выполнить();
	
	// Получаем данные о временных разницах
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетнаяДата", ОтчетнаяДата);
	Запрос.УстановитьПараметр("Организации",  Организации);
	
	// Временную таблицу ВТ_БалансовыеДанные не индексируем, потому что она далее используется в качестве ЛЕВОЙ в соединении,
	// и из нее выбираются все данные.
	// Возможные значения NULL в субконто приводим к Неопределено для правильной группировки строк с одинаковыми по сути значениями. 
	
	Запрос.Текст = // Текст будет модифицирован - см. ОптимизироватьЗапросСальдоДляГруппировки()
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Организация КАК Филиал,
	|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(Остатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	ЕСТЬNULL(Остатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	ЕСТЬNULL(Остатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК Субконто3,
	|	Остатки.СуммаВРОстаток КАК ВременнаяРазница
	|ПОМЕСТИТЬ ВТ_БалансовыеДанные
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ПланГруппировки.Счет
	|				ИЗ
	|					ВТ_ПравилаГруппировки КАК ПланГруппировки),
	|			,
	|			Организация В (&Организации)) КАК Остатки";
	ОптимизироватьЗапросСальдоДляГруппировки(Запрос.Текст, ПланГруппировки);
	Запрос.Выполнить();
	
	// Дополняем данными о виде активов и обязательств, группируем по счету.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(БалансовыеДанные.ВременнаяРазница) < 0
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства)
	|	КОНЕЦ КАК СчетОтложенногоНалога,
	|	Правила.ВидАктивовОбязательств КАК ВидАктивовОбязательств,
	|	Правила.СчетГруппировки КАК Счет,
	|	БалансовыеДанные.Филиал КАК Филиал,
	|	БалансовыеДанные.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто2
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто3
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	СУММА(БалансовыеДанные.ВременнаяРазница) КАК ВременнаяРазница
	|ПОМЕСТИТЬ СальдоВременныхРазниц
	|ИЗ
	|	ВТ_БалансовыеДанные КАК БалансовыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПравилаГруппировки КАК Правила
	|		ПО БалансовыеДанные.Счет = Правила.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	Правила.ВидАктивовОбязательств,
	|	Правила.СчетГруппировки,
	|	БалансовыеДанные.Филиал,
	|	БалансовыеДанные.Подразделение,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто2
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Правила.ИсключитьСубконто3
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ БалансовыеДанные.Субконто3
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(БалансовыеДанные.ВременнаяРазница) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_БалансовыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПравилаГруппировки";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Корректирует рассчитываемое значение на округленную величину.
// При этом погрешность округления регистрируется (при последовательных вызовах - суммируется)
// и при превышении порога значимости может быть устранена.
//
// Параметры:
//  Хранилище				 - Число - округленное значение, которое может быть модифицировано.
//                             Должно иметь тип значения с явным ограничением числа знаков в дробной части.
//  ТочноеЗначение			 - Число - слагаемое, которое может иметь точность большую, чем Хранилище.
//  ПогрешностьОкругления	 - Число - накопленная погрешность округления.
//  Устранить				 - Булево - Истина - при превышении накопленной погрешностью округления порога значимости,
//                             значение в Хранилище будет скорректировано так,
//                             чтобы накопленная погрешность округления стала меньше порога значимости.
//
Процедура ДополнитьОкругленнымЗначением(Хранилище, ТочноеЗначение, ПогрешностьОкругления, Устранить = Истина)
	
	ПредыдущееЗначение = Хранилище; // поскольку значение имеет примитивный тип, оно будет скопировано в новую переменную
	
	Хранилище = Хранилище + ТочноеЗначение; // неявное округление
	
	ПогрешностьНовогоОкругления = (Хранилище - ТочноеЗначение - ПредыдущееЗначение);
	
	ПогрешностьОкругления = ПогрешностьОкругления + ПогрешностьНовогоОкругления;
	
	Если Устранить Тогда
		УстранитьПогрешностьОкругления(Хранилище, ПогрешностьОкругления);
	КонецЕсли;
	
КонецПроцедуры

// Применяет накопленную погрешность округления к ранее округленному значению:
// если накопленная погрешность заметна для типа значения округленного значения,
// то это округленное значение будет скорректировано, а абсолютное значение погрешности уменьшится - станет менее порога значимости.
//
// Например, если значение округляется до 2 знаков после запятой, то накопленная погрешность -0.006 - значима (округляется до -0.01).
// Поэтому значение должно быть скорректировано на 0.01, а накопленная погрешность уменьшится - составит 0.004.
//
// Параметры:
//  Хранилище				 - Число - ранее округленное значение, которое может быть модифицировано.
//                             Должно иметь тип значения с явным ограничением числа знаков в дробной части.
//  ПогрешностьОкругления	 - Число - накопленная погрешность округления
// 
// Возвращаемое значение:
//  Число - примененная погрешность.
//
Функция УстранитьПогрешностьОкругления(Хранилище, ПогрешностьОкругления)
	
	ДоПримененияПогрешности = Хранилище; // поскольку значение имеет примитивный тип, оно будет скопировано в новую переменную
	
	Хранилище = Хранилище - ПогрешностьОкругления; // неявное округление
	
	ПримененнаяПогрешность = Хранилище - ДоПримененияПогрешности;
	ПогрешностьОкругления  = ПогрешностьОкругления + ПримененнаяПогрешность;
	
	Возврат ПримененнаяПогрешность;
	
КонецФункции

#КонецОбласти

#Область Запись

Процедура ЗаписатьИзменениеОтложенногоНалога(Проводки, РасчетОтложенногоНалога, КонтекстРасчета)
	
	// Эффект изменения разниц - в корреспонденции со счетом 68.04.2
	// Дт 09      Кт 68.04.2
	// Дт 68.04.2 Кт 09
	// Дт 68.04.2 Кт 77
	// Дт 77      Кт 68.04.2
	СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	
	// Остальные эффекты - в корреспонденции со счетом 99.02.4
	// Дт 09      Кт 99.02.4
	// Дт 99.02.4 Кт 09
	// Дт 99.02.4 Кт 77
	// Дт 77      Кт 99.02.4
	СчетПересчетаОтложенногоНалога = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО;
	
	// Учтем ранее сформированные проводки
	Корректировки = КорректировкиОтложенногоНалога(РасчетОтложенногоНалога.ОтложенныйНалог, КонтекстРасчета);
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	
	Представления = Новый Структура;
	Представления.Вставить("Увеличение", Новый Соответствие);
	Представления.Вставить("Уменьшение", Новый Соответствие);
	Представления.Вставить("Пересчет",   Новый Соответствие);
	
	СтавкаБудущегоНалога = РасчетОтложенногоНалога.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.БудущийНалог];
	
	Представления.Увеличение.Вставить(
		ВидСчета.Активный,
		НСтр("ru = 'Признание отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Уменьшение.Вставить(
		ВидСчета.Активный,
		НСтр("ru = 'Погашение отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Уменьшение.Вставить(
		ВидСчета.Пассивный,
		НСтр("ru = 'Признание отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	Представления.Увеличение.Вставить(
		ВидСчета.Пассивный,
		НСтр("ru = 'Погашение отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка));
		
	ШаблонПредставленияПересчетПоСтавке = НСтр(
		"ru = 'Пересчет %1 по ставке %2%%'",
		Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ПредставлениеПересчетПоставке = СтрШаблон(
		ШаблонПредставленияПересчетПоСтавке,
		НСтр("ru = 'отложенного налогового актива'", Метаданные.ОсновнойЯзык.КодЯзыка),
		СтавкаБудущегоНалога * 100);
		
	Представления.Пересчет.Вставить(ВидСчета.Активный, ПредставлениеПересчетПоставке);
		
	ПредставлениеПересчетПоставке = СтрШаблон(
		ШаблонПредставленияПересчетПоСтавке,
		НСтр("ru = 'отложенного налогового обязательства'", Метаданные.ОсновнойЯзык.КодЯзыка),
		СтавкаБудущегоНалога * 100);
		
	Представления.Пересчет.Вставить(ВидСчета.Пассивный, ПредставлениеПересчетПоставке);
	
	// Сформируем проводки на разницу
	СчетаОтложенногоНалога = Новый Соответствие; // Кеш
	
	Для Каждого Корректировка Из Корректировки Цикл
		
		ВидСчетаОтложенногоНалога = СчетаОтложенногоНалога[Корректировка.Счет];
		Если ВидСчетаОтложенногоНалога = Неопределено Тогда
			ВидСчетаОтложенногоНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корректировка.Счет, "Вид");
			СчетаОтложенногоНалога.Вставить(Корректировка.Счет, ВидСчетаОтложенногоНалога);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВидСчетаОтложенногоНалога) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПроводкуОтложенныйНалог(
			Проводки,
			Корректировка.ЭффектУвеличенияВременныхРазниц,
			Представления.Увеличение[ВидСчетаОтложенногоНалога],
			ВидДвиженияБухгалтерии.Дебет,
			Корректировка.Счет,
			Корректировка.ВидАктивовИОбязательств,
			СчетРасчетаНалога,
			КонтекстРасчета);
			
		ДобавитьПроводкуОтложенныйНалог(
			Проводки,
			-Корректировка.ЭффектУменьшенияВременныхРазниц,
			Представления.Уменьшение[ВидСчетаОтложенногоНалога],
			ВидДвиженияБухгалтерии.Кредит,
			Корректировка.Счет,
			Корректировка.ВидАктивовИОбязательств,
			СчетРасчетаНалога,
			КонтекстРасчета);
			
		Пересчет = Корректировка.ОтложенныйНалог
			- Корректировка.ЭффектУвеличенияВременныхРазниц
			- Корректировка.ЭффектУменьшенияВременныхРазниц;
			
		Если Пересчет > 0 Тогда
				
			ДобавитьПроводкуОтложенныйНалог(
				Проводки,
				Пересчет,
				Представления.Пересчет[ВидСчетаОтложенногоНалога],
				ВидДвиженияБухгалтерии.Дебет,
				Корректировка.Счет,
				Корректировка.ВидАктивовИОбязательств,
				СчетПересчетаОтложенногоНалога,
				КонтекстРасчета);
				
		ИначеЕсли Пересчет < 0 Тогда
				
			ДобавитьПроводкуОтложенныйНалог(
				Проводки,
				-Пересчет,
				Представления.Пересчет[ВидСчетаОтложенногоНалога],
				ВидДвиженияБухгалтерии.Кредит,
				Корректировка.Счет,
				Корректировка.ВидАктивовИОбязательств,
				СчетПересчетаОтложенногоНалога,
				КонтекстРасчета);
				
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция КорректировкиОтложенногоНалога(ИзменениеОтложенногоНалога, КонтекстРасчета)
	
	Корректировки = ИзменениеОтложенногоНалога.Скопировать(); // См. НовыйИзменениеОтложенногоНалога()
	
	// Проводки текущего периода - в корреспонденции со счетом 68.04.2
	// Дт 09 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 77
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетРасчетаНалога",      ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	Запрос.УстановитьПараметр("СчетаОтложенныйНалог",   СчетаОтложенныйНалог());
	Запрос.УстановитьПараметр("НеиспользованныеАктивы", Перечисления.ВидыАктивовИОбязательств.НеиспользованныеНалоговыеУбыткиВычеты());
	Запрос.УстановитьПараметр("ОтчетнаяДата",           КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("НачалоПериода",          КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",           КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организации",            КонтекстРасчета.Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтраженныеДанные.СчетОтложенногоНалога КАК Счет,
	|	ОтраженныеДанные.ВидАктивовИОбязательств КАК ВидАктивовИОбязательств,
	|	СУММА(ОтраженныеДанные.ОтложенныйНалог) КАК ОтложенныйНалог,
	|	СУММА(ОтраженныеДанные.ЭффектУвеличенияВременныхРазниц) КАК ЭффектУвеличенияВременныхРазниц,
	|	СУММА(ОтраженныеДанные.ЭффектУменьшенияВременныхРазниц) КАК ЭффектУменьшенияВременныхРазниц
	|ИЗ
	|	(ВЫБРАТЬ
	|		Сальдо.Счет КАК СчетОтложенногоНалога,
	|		Сальдо.Субконто1 КАК ВидАктивовИОбязательств,
	|		Сальдо.СуммаОстаток КАК ОтложенныйНалог,
	|		0 КАК ЭффектУвеличенияВременныхРазниц,
	|		0 КАК ЭффектУменьшенияВременныхРазниц
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ОтчетнаяДата,
	|				Счет В (&СчетаОтложенныйНалог),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|				Организация В (&Организации)
	|					И НЕ Субконто1 В (&НеиспользованныеАктивы)) КАК Сальдо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Обороты.Счет,
	|		Обороты.Субконто1,
	|		0,
	|		ВЫБОР
	|			КОГДА Обороты.КорСчет = &СчетРасчетаНалога
	|					И Обороты.СуммаОборот > 0
	|				ТОГДА Обороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА Обороты.КорСчет = &СчетРасчетаНалога
	|					И Обороты.СуммаОборот < 0
	|				ТОГДА Обороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаОтложенныйНалог),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|				Организация В (&Организации)
	|					И НЕ Субконто1 В (&НеиспользованныеАктивы),
	|				,
	|				) КАК Обороты) КАК ОтраженныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтраженныеДанные.СчетОтложенногоНалога,
	|	ОтраженныеДанные.ВидАктивовИОбязательств
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	ВидАктивовИОбязательств";
	
	КлючевыеПоля = "Счет, ВидАктивовИОбязательств";
	
	Корректировки.Индексы.Добавить(КлючевыеПоля);
	Отбор = Новый Структура(КлючевыеПоля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		
		ЗаписиКорректировка = Корректировки.НайтиСтроки(Отбор);
		
		Если ЗначениеЗаполнено(ЗаписиКорректировка) Тогда
			Корректировка = ЗаписиКорректировка[0];
		Иначе
			Корректировка = Корректировки.Добавить();
			ЗаполнитьЗначенияСвойств(Корректировка, Отбор);
		КонецЕсли;
		
		Корректировка.ОтложенныйНалог = Корректировка.ОтложенныйНалог - Выборка.ОтложенныйНалог;
		
		Корректировка.ЭффектУвеличенияВременныхРазниц = Корректировка.ЭффектУвеличенияВременныхРазниц
			- Выборка.ЭффектУвеличенияВременныхРазниц;
		
		Корректировка.ЭффектУменьшенияВременныхРазниц = Корректировка.ЭффектУменьшенияВременныхРазниц
			- Выборка.ЭффектУменьшенияВременныхРазниц;
		
	КонецЦикла;
	
	Возврат Корректировки;
	
КонецФункции

Процедура ДобавитьПроводкуОтложенныйНалог(Проводки, Сумма, Содержание, ВидДвижения, Счет, ВидАктивовИОбязательств, КорСчет, КонтекстРасчета)
				
	Если Сумма = 0 Тогда
		Возврат;
	КонецЕсли;
			
	Проводки.Записывать = Истина;
			
	Проводка = Проводки.Добавить();
	Проводка.Период      = КонтекстРасчета.КонецПериода;
	Проводка.Организация = КонтекстРасчета.Организация;
	Проводка.Сумма       = Сумма;
	Проводка.Содержание  = Содержание;
	
	Если ВидДвижения = ВидДвиженияБухгалтерии.Дебет Тогда
		
		Проводка.СчетДт = Счет;
		Проводка.СчетКт = КорСчет;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктивовИОбязательств);
			
	Иначе
		
		Проводка.СчетДт = КорСчет;
		Проводка.СчетКт = Счет;
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств,
			ВидАктивовИОбязательств);
			
	КонецЕсли;
				
КонецПроцедуры

#КонецОбласти

#Область ВыборкаГруппировкаВременныхРазниц

// Технологические процедуры выборки и группировки сальдо временных разниц

Функция БалансовыеСчетаВременныхРазниц()
	
	ОписаниеСчетов = Новый Структура;
	ОписаниеСчетов.Вставить("ГлобальныеИсключения", ГлобальныеИсключенияДетализацииАктивовОбязательств());
	ОписаниеСчетов.Вставить("ПланСчетов",           Новый ТаблицаЗначений);
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Счет",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Родитель",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто1", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто2", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	ОписаниеСчетов.ПланСчетов.Колонки.Добавить("Субконто3", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	// После заполнения будут добавлены индексы
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаДоходовРасходов", СчетаДоходовРасходов());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Счета.Ссылка КАК Счет,
	|	Счета.Родитель КАК Родитель,
	|	ВидыСубконто1.ВидСубконто КАК Субконто1,
	|	ВидыСубконто2.ВидСубконто КАК Субконто2,
	|	ВидыСубконто3.ВидСубконто КАК Субконто3
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Счета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО Счета.Ссылка = ВидыСубконто1.Ссылка
	|			И (ВидыСубконто1.НомерСтроки = 1)
	|			И (НЕ ВидыСубконто1.ТолькоОбороты)
	|			И (ВидыСубконто1.Суммовой)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО Счета.Ссылка = ВидыСубконто2.Ссылка
	|			И (ВидыСубконто2.НомерСтроки = 2)
	|			И (НЕ ВидыСубконто2.ТолькоОбороты)
	|			И (ВидыСубконто2.Суммовой)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО Счета.Ссылка = ВидыСубконто3.Ссылка
	|			И (ВидыСубконто3.НомерСтроки = 3)
	|			И (НЕ ВидыСубконто3.ТолькоОбороты)
	|			И (ВидыСубконто3.Суммовой)
	|ГДЕ
	|	НЕ Счета.Ссылка В ИЕРАРХИИ (&СчетаДоходовРасходов)
	|	И НЕ Счета.Забалансовый
	|	И Счета.НалоговыйУчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ОписаниеСчетов.ПланСчетов.Добавить(), Выборка);
	КонецЦикла;
	
	ОписаниеСчетов.ПланСчетов.Индексы.Добавить("Счет");
	ОписаниеСчетов.ПланСчетов.Индексы.Добавить("Родитель");
	
	Возврат ОписаниеСчетов;
	
КонецФункции

Функция ПланГруппировкиАктивовОбязательств(ПравилаГруппировки)
	
	ПланГруппировки = Новый ТаблицаЗначений;
	ПланГруппировки.Колонки.Добавить("Счет",                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПланГруппировки.Колонки.Добавить("СчетГруппировки",        Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПланГруппировки.Колонки.Добавить("ВидАктивовОбязательств", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыАктивовИОбязательств"));
	ПланГруппировки.Колонки.Добавить("ИсключитьСубконто1",      Новый ОписаниеТипов("Булево"));
	ПланГруппировки.Колонки.Добавить("ИсключитьСубконто2",      Новый ОписаниеТипов("Булево"));
	ПланГруппировки.Колонки.Добавить("ИсключитьСубконто3",      Новый ОписаниеТипов("Булево"));
	ПланГруппировки.Колонки.Добавить("НомерВариантаИсключения", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	
	ПланГруппировки.Индексы.Добавить("Счет");// для каждого счета должна быть ровно одна запись
	
	ОписаниеСчетов = БалансовыеСчетаВременныхРазниц();
	
	// Включим в план счета, для которых установлены правила.
	
	// Правила, заданные в коллекции правил позже, должны вытеснять более ранние.
	// Не должно быть несколько правил для одного и того же счета.
	
	КоличествоПравил = ПравилаГруппировки.Количество();
	Для НомерСКонца = 1 По КоличествоПравил Цикл
		
		Правило = ПравилаГруппировки[КоличествоПравил - НомерСКонца];
		
		Если ЗначениеЗаполнено(Правило.ДополнительныеСчета) Тогда
			// сгруппируем по единому счету
			ОписаниеСчетаГруппировки = ОписаниеСчетов.ПланСчетов.Найти(Правило.ОсновнойСчет, "Счет");
		Иначе
			ОписаниеСчетаГруппировки = Неопределено;
		КонецЕсли;
		
		СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, Правило.ОсновнойСчет, ОписаниеСчетаГруппировки);
		
		Для Каждого ДополнительныйСчет Из Правило.ДополнительныеСчета Цикл
			СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ДополнительныйСчет, ОписаниеСчетаГруппировки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Включим счета, для которых правил нет.
	Для Каждого ОписаниеСчета Из ОписаниеСчетов.ПланСчетов Цикл
		ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Неопределено, ОписаниеСчетов, ОписаниеСчета, Неопределено);
	КонецЦикла;
	
	Возврат ПланГруппировки;
	
КонецФункции

Процедура СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, Знач ОписаниеСчета, ОписаниеОсновногоСчета)
	
	Если ТипЗнч(ОписаниеСчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		ОписаниеСчета = ОписаниеСчетов.ПланСчетов.Найти(ОписаниеСчета, "Счет");
		Если ОписаниеСчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, ОписаниеОсновногоСчета);
	
	ПодчиненныеСчета = ОписаниеСчетов.ПланСчетов.НайтиСтроки(Новый Структура("Родитель", ОписаниеСчета.Счет));
	
	Если Не ЗначениеЗаполнено(ПодчиненныеСчета) Тогда
		ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, ОписаниеОсновногоСчета);
	Иначе
		Для Каждого ОписаниеПодчиненногоСчета Из ПодчиненныеСчета Цикл
			СоставитьПланВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеПодчиненногоСчета, ОписаниеОсновногоСчета);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры		

Процедура ДобавитьЗаписьПланаВыполненияПравила(ПланГруппировки, Правило, ОписаниеСчетов, ОписаниеСчета, ОписаниеОсновногоСчета)
	
	Запись = ПланГруппировки.Найти(ОписаниеСчета.Счет, "Счет");
	Если Запись <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Правило = Неопределено Тогда
		ВидАктивовОбязательств = Перечисления.ВидыАктивовИОбязательств.ВидПрочие();
		СчетГруппировки        = ОписаниеСчета.Счет;
		ИсключенныеСубконто    = Новый Массив;
	Иначе
		ВидАктивовОбязательств = Правило.ВидАктивовОбязательств;
		СчетГруппировки        = Правило.ОсновнойСчет;
		ИсключенныеСубконто    = Правило.ИсключенныеСубконто
	КонецЕсли;
		
	Запись = ПланГруппировки.Добавить();
	Запись.Счет = ОписаниеСчета.Счет;
	Запись.ВидАктивовОбязательств = ВидАктивовОбязательств;
	
	Если ОписаниеОсновногоСчета = Неопределено Тогда
		
		Запись.СчетГруппировки = ОписаниеСчета.Счет;
		ОграничениеСубконтоОсновногоСчета = Неопределено;
		
	Иначе
		
		Запись.СчетГруппировки = СчетГруппировки;
		
		// Если состав аналитики на группируемых счетах будет отличаться, то группировка будет бессмысленной.
		// Поэтому при группировке следует дополнительно исключить значения субконто, которых нет на счете, используемом для группировки.
		ОграничениеСубконтоОсновногоСчета = Новый Соответствие;
		Для НомерСубконто = 1 По 3 Цикл
			ОграничениеСубконтоОсновногоСчета.Вставить(ОписаниеОсновногоСчета["Субконто" + НомерСубконто], Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Запись.НомерВариантаИсключения = 0;
	Для НомерСубконто = 1 По 3 Цикл
		
		ВидСубконто = ОписаниеСчета["Субконто" + НомерСубконто];
		
		ИсключитьСубконто = 
			ОписаниеСчетов.ГлобальныеИсключения.Найти(ВидСубконто) <> Неопределено
			Или ИсключенныеСубконто.Найти(ВидСубконто) <> Неопределено
			Или (ОграничениеСубконтоОсновногоСчета <> Неопределено И ОграничениеСубконтоОсновногоСчета[ВидСубконто] = Неопределено);
		
		Запись["ИсключитьСубконто" + НомерСубконто] = ИсключитьСубконто;
		
		Если ИсключитьСубконто Тогда
			Запись.НомерВариантаИсключения = Запись.НомерВариантаИсключения + Pow(2, НомерСубконто - 1);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОптимизироватьЗапросСальдоДляГруппировки(ТекстЗапроса, ПланГруппировки)
	
	// Выделим в отдельные запросы получение данных по счетам, где требуется исключить какие-либо субконто.
	// Это позволит сократить выборку детальных данных, которые впоследствии все равно будут сгруппированы.
	
	// На каждую комбинацию исключаемых полей делаем свой запрос, ограниченный счетами, где необходима такая комбинация.
	// Каждый из таких запросов получит указание, какие субконто заведомо не нужны.
	
	// Исходный запрос ограничим счетами, по которым исключения не требуются.
	// В таком запросе будет описано получение всех трех субконто.
	// Исходный запрос важно оставить, даже если окажется, что фактически счетов без исключений нет.
	// Потому что по наличию субконто в пути к полю платформа определяет тип поля запроса.
	// Если ни в одном не будет, то колонка запроса получит тип Неопределено, который не может быть выбран в запросе.
	
	// Комбинации заранее получили номера.
	// Конкретное значение (семантика) номера в этой процедуре не важно: главное, чтобы 
	// - номер однозначно идентифицировал набор исключаемых полей
	// - при последовательных выполнениях одна и так же комбинация получала один и тот же номер
	//   (это важно для кеширования платформой текстов запросов).
	
	КомбинацииИсключаемыхПолей = ПланГруппировки.Скопировать();
	КомбинацииИсключаемыхПолей.Свернуть("ИсключитьСубконто1, ИсключитьСубконто2, ИсключитьСубконто3, НомерВариантаИсключения");
	
	Если КомбинацииИсключаемыхПолей.Количество() = 1 
		И ТривиальнаяКомбинацияИсключаемыхПолей(КомбинацииИсключаемыхПолей[0]) Тогда
		// Оптимизация невозможна.
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ОписаниеЗапроса  = СхемаЗапроса.ПакетЗапросов[0];
	ОператорыЗапроса = ОписаниеЗапроса.Операторы;
	
	ПоляЗапросаСубконто = Новый Соответствие; // Ключ - номер субконто; значение - индекс поля.
	Для НомерСубконто = 1 По 3 Цикл
		Колонка = ОписаниеЗапроса.Колонки.Найти("Субконто" + НомерСубконто);
		Если Колонка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПоляЗапросаСубконто.Вставить(НомерСубконто, ОписаниеЗапроса.Колонки.Индекс(Колонка));
	КонецЦикла;
	
	// Работаем с первым запросом в пакете. Исходный запрос содержит один оператор с обращением к виртуальной таблице Остатки.
	
	ШаблонУсловиеСчета = "Счет В(%1)";
	ШаблонЗапросаУсловиеСчета = 
	"ВЫБРАТЬ
	|	ПланГруппировки.Счет КАК Счет
	|ИЗ
	|	ВТ_ПравилаГруппировки КАК ПланГруппировки
	|ГДЕ
	|	ПланГруппировки.НомерВариантаИсключения = &НомерВариантаИсключения";
	// Конкретный номер будет позже заменен на константу
	ШаблонУсловиеСчета = СтрШаблон(ШаблонУсловиеСчета, ШаблонЗапросаУсловиеСчета);
	ШаблонУсловиеСчета = СтрЗаменить(ШаблонУсловиеСчета, "&НомерВариантаИсключения", "%1");
	
	Для Каждого Комбинация Из КомбинацииИсключаемыхПолей Цикл
		
		Если ТривиальнаяКомбинацияИсключаемыхПолей(Комбинация) Тогда
			Оператор = ОператорыЗапроса[0];
		Иначе
			Оператор = ОператорыЗапроса.Добавить(ОператорыЗапроса[0]);
			// Исключим субконто
			Для НомерСубконто = 1 По 3 Цикл
				Если Не Комбинация["ИсключитьСубконто" + НомерСубконто] Тогда
					Продолжить;
				КонецЕсли;
				ИндексПоля = ПоляЗапросаСубконто[НомерСубконто];
				Оператор.ВыбираемыеПоля[ИндексПоля] = Новый ВыражениеСхемыЗапроса("Неопределено");
			КонецЦикла;
		КонецЕсли;
		
		// Укажем отбор по счетам, соответствующим комбинации.
		Источник = Оператор.Источники.НайтиПоИмени("РегистрБухгалтерии.Хозрасчетный.Остатки");
		Если Источник = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекстУсловиеСчета = СтрШаблон(ШаблонУсловиеСчета, Комбинация.НомерВариантаИсключения);
		
		ПараметрУсловиеСчета = Источник.Источник.Параметры[ИндексПараметраУсловиеСчета()];
		ПараметрУсловиеСчета.Выражение = Новый ВыражениеСхемыЗапроса(ТекстУсловиеСчета);
		
	КонецЦикла;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
			
КонецПроцедуры

Функция	ИндексПараметраУсловиеСчета()
	Возврат 1; // В виртуальной таблице Остатки регистра бухгалтерии: Остатки(Период, УсловиеСчета, Субконто, Условие)
КонецФункции

Функция ТривиальнаяКомбинацияИсключаемыхПолей(Комбинация)
	
	Для НомерСубконто = 1 По 3 Цикл
		Если Комбинация["ИсключитьСубконто" + НомерСубконто] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТекущийНалог

Функция НовыйРасчетТекущегоНалога()
	
	Расчет = Новый Структура;
	Расчет.Вставить("Ставка",                              0);
	Расчет.Вставить("ТекущийНалог",                        0);
	Расчет.Вставить("УсловныйРасход",                      0);
	Расчет.Вставить("ОтложенныйНалог",                     0);
	Расчет.Вставить("ПостоянныйНалоговыйРасход",           0);
	Расчет.Вставить("ВлияниеУбыткаТекущегоПериода",        0);
	Расчет.Вставить("ВыбытиеПоСпециальнымРежимам",         0);
	Расчет.Вставить("ВлияниеОшибокУчетаРазниц",            0);
	Расчет.Вставить("ВлияниеОшибокУчетаОтложенногоНалога", 0);
	
	Возврат Расчет;
	
КонецФункции

Функция РассчитатьТекущийНалог(КонтекстРасчета, РасчетОтложенногоНалога)
	
	// Текущий налог на прибыль рассчитывается по данным бухгалтерского учета в соответствии с ПБУ18.22.
	// Его сумма может расходиться от начисленного налога за счет разницы в округлении.
	
	// ПБУ18.22
	
	// 22. ... определения величины текущего налога на прибыль ... на основе данных, сформированных в бухгалтерском учете
	//     в соответствии с пунктами 20 и 21 Положения.
	//     При этом величина текущего налога на прибыль должна соответствовать сумме исчисленного налога на прибыль,
	//     отраженного в налоговой декларации по налогу на прибыль;
	
	Расчет = НовыйРасчетТекущегоНалога();
	Расчет.Ставка          = РасчетОтложенногоНалога.СтавкиНалога[Перечисления.ВидыСтавокОтложенногоНалога.ТекущийНалог];
	Расчет.ОтложенныйНалог = РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектУвеличенияВременныхРазниц")
		                   + РасчетОтложенногоНалога.ОтложенныйНалог.Итог("ЭффектУменьшенияВременныхРазниц");
	
	Если КонтекстРасчета.ПрименяютсяСпециальныеРежимы Тогда
		
		// Величину отложенного налога может потребоваться скорректировать,
		// когда не выполняется требование ПБУ18.16:
		//   В случае, если законодательством ... предусмотрены разные ставки налога на прибыль по отдельным видам доходов,
		//   то при оценке отложенного налогового актива или отложенного налогового обязательства
		//   ставка налога на прибыль должна соответствовать тому виду дохода,
		//   который ведет к уменьшению ... временной разницы в ... последующих отчетных периодах.
		
		// В программе принято, что на балансовых счетах отражаются разницы, которые относятся к видам деятельности,
		// облагаемым налогом на прибыль.
		
		// Если соответствующие активы и обязательства повлияли на финансовый результат по видам деятельности,
		// облагаемым в рамках специальных режимов, то это повлияет на сумму текущего и отложенного налога.
		
		// Такое влияние описано в ПБУ18.17, ПБУ18.18 отдельно, поэтому и в расчете покажем его обособленно.
		
		НеОблагаемыйФинансовыйРезультат = РасчетНалогаНаПрибыль.СуммыНалоговойБазы(
			КонтекстРасчета.НачалоНалоговогоПериода,
			КонтекстРасчета.КонецПериода,
			КонтекстРасчета.Организация,
			ОписаниеКоллекцииСумм(),
			ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД);
			
		Расчет.ВыбытиеПоСпециальнымРежимам = СуммаПоСтавкеНалога(
			НеОблагаемыйФинансовыйРезультат.СуммаВР, // это временные разницы не относящиеся к налогу, поэтому знак обратный
			Расчет.Ставка);
			
		Расчет.ОтложенныйНалог = Расчет.ОтложенныйНалог + Расчет.ВыбытиеПоСпециальнымРежимам;
			
	КонецЕсли;
	
	// 20. Условный расход (условный доход) по налогу на прибыль равняется величине,
	//     определяемой как произведение бухгалтерской прибыли,
	//     сформированной в отчетном периоде, на ставку налога на прибыль
	
	ОблагаемыйФинансовыйРезультат = РасчетНалогаНаПрибыль.СуммыНалоговойБазы(
		КонтекстРасчета.НачалоНалоговогоПериода,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		ОписаниеКоллекцииСумм());
	
	Расчет.УсловныйРасход = СуммаПоСтавкеНалога(ОблагаемыйФинансовыйРезультат.Сумма, Расчет.Ставка);
	
	// 34 Отложенный налоговый актив должен признаваться в отношении перенесенных на будущие периоды
	//    неиспользованных налоговых убытков
	
	// В течение налогового периода признаем сумму такого отложенного актива условно -
	// только для выполнения технологических равенств на счетах учета
	
	Если ОблагаемыйФинансовыйРезультат.СуммаНУ < 0 Тогда
		Расчет.ВлияниеУбыткаТекущегоПериода = СуммаПоСтавкеНалога(-ОблагаемыйФинансовыйРезультат.СуммаНУ, Расчет.Ставка);
	КонецЕсли;
	
	// 7. Постоянный налоговый расход (доход) равняется величине, определяемой как произведение постоянной разницы,
	//    возникшей в отчетном периоде, на ставку налога на прибыль

	Расчет.ПостоянныйНалоговыйРасход = СуммаПоСтавкеНалога(-ОблагаемыйФинансовыйРезультат.СуммаПР, Расчет.Ставка);
	
	Расчет.ТекущийНалог =
		  Расчет.УсловныйРасход
		+ Расчет.ОтложенныйНалог
		+ Расчет.ПостоянныйНалоговыйРасход
		+ Расчет.ВлияниеУбыткаТекущегоПериода;
	
	// На практике могут быть допущены разного рода ошибки, неточности в учете.
	// Покажем влияние этих ошибок.
	
	// Ошибка учета разниц заключается в том, что не выполняется равенство БУ=НУ+ПР+ВР.
	// Т.е. какие-то расхождения между налоговой и бухгалтерской прибылью оказались "незамеченными"
	// для целей ПБУ 18.
	ОшибкаУчетаРазниц = ОблагаемыйФинансовыйРезультат.Сумма 
		- ОблагаемыйФинансовыйРезультат.СуммаНУ
		- ОблагаемыйФинансовыйРезультат.СуммаВР
		- ОблагаемыйФинансовыйРезультат.СуммаПР;
	Расчет.ВлияниеОшибокУчетаРазниц = СуммаПоСтавкеНалога(ОшибкаУчетаРазниц, Расчет.Ставка);
	
	// Ошибка учета отложенного налога показывает разницу между разными методами определением суммы изменения отложенного налога.
	// Если учет построен верно, то разницы не должно быть.
	// Как правило, разница вызвана отражением временных разниц на балансовых счетах
	// без отражения их совокупного влияния на счетах доходов и расходов.
	// Корректный порядок учета предполагает, что возникновение и погашение разниц может быть при корреспонденции
	// - либо двух балансовых счетов, при этом суммарный баланс разниц не меняется;
	// - либо балансового и счета доходов (расходов).
	Расчет.ВлияниеОшибокУчетаОтложенногоНалога = 
		Расчет.ОтложенныйНалог
		- СуммаПоСтавкеНалога(-ОблагаемыйФинансовыйРезультат.СуммаВР, Расчет.Ставка);
		
	// Если все учтено верно, то эта сумма будет равна сумме начисленного налога на прибыль, указанного в декларации
	// (расхождение допускается на погрешность округления сумм налога в декларации).
	Расчет.ТекущийНалог = Расчет.ТекущийНалог
		- Расчет.ВлияниеОшибокУчетаОтложенногоНалога 
		- Расчет.ВлияниеОшибокУчетаРазниц;
	
	Возврат Расчет;
	
КонецФункции

Процедура ЗаписатьРасчетНалога(Проводки, РасчетТекущегоНалога, СуммаНачисленногоНалога, КонтекстРасчета)
	
	// Все проводки - в корреспонденции со счетом 68.04.2
	СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	СхемаРасчета = Новый ТаблицаЗначений;
	СхемаРасчета.Колонки.Добавить("Имя",             Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("ПредставлениеКт", Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("КорСчетКт",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")); // По Кт счета 68.04.2
	СхемаРасчета.Колонки.Добавить("ПредставлениеДт", Новый ОписаниеТипов("Строка"));
	СхемаРасчета.Колонки.Добавить("КорСчетДт",       Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный")); // По Дт счета 68.04.2
	СхемаРасчета.Колонки.Добавить("КорСубконто",     Новый ОписаниеТипов("Соответствие"));
	
	// Начисление условного расхода (дохода)
	// Дт 99.02.1 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.02.2
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "УсловныйРасход";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Условный расход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.УсловныйРасходПоНалогуНаПрибыль;
	ВариантПроводки.ПредставлениеДт = НСтр("ru = 'Условный доход по налогу на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.УсловныйДоходПоНалогуНаПрибыль;
	
	// Начисление постоянного расхода (дохода)
	// Дт 99.02.3 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.02.3 
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "ПостоянныйНалоговыйРасход";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Постоянный налоговый расход'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
	ВариантПроводки.ПредставлениеДт = НСтр("ru = 'Постоянный налоговый доход'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.ПостоянноеНалоговоеОбязательство;
		
	// Списание сумм отложенных налоговых активов и обязательств при выбытии активов, по которым они начислены,
	// в ходе деятельности, не облагаемой налогом на прибыль.
	// Дт 99.01.2 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 99.01.2 
	ВариантПроводки = СхемаРасчета.Добавить();
	ВариантПроводки.Имя             = "ВыбытиеПоСпециальнымРежимам";
	ВариантПроводки.ПредставлениеКт = НСтр("ru = 'Корректировка отложенного налога в связи с выбытием активов и обязательств по деятельности, не облагаемой налогом на прибыль'", Метаданные.ОсновнойЯзык.КодЯзыка);
	ВариантПроводки.КорСчетКт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	ВариантПроводки.ПредставлениеДт = ВариантПроводки.ПредставлениеКт;
	ВариантПроводки.КорСчетДт       = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	ВариантПроводки.КорСубконто.Вставить(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрибылиИУбытки,
		Перечисления.ПрибылиИУбытки.НалогНаПрибыль);
		
	// Определим суммы проводок
	СуммыПроводок = Новый Структура; // Ключ - имя варианта, Значение - сумма
	СуммыПроводок.Вставить("УсловныйРасход",              РасчетТекущегоНалога.УсловныйРасход);
	СуммыПроводок.Вставить("ОтложенныйНалог",             РасчетТекущегоНалога.ОтложенныйНалог);
	СуммыПроводок.Вставить("ПостоянныйНалоговыйРасход",   РасчетТекущегоНалога.ПостоянныйНалоговыйРасход);
	СуммыПроводок.Вставить("ВыбытиеПоСпециальнымРежимам", РасчетТекущегоНалога.ВыбытиеПоСпециальнымРежимам);
		
	// Скорректируем на суммы ранее сформированных проводок.
	
	КорСчетаВариантов = Новый Соответствие; // Ключ - счет, Значение - имя варианта
	КорСчета          = Новый Массив;
	Для Каждого ВариантПроводки Из СхемаРасчета Цикл
		
		КорСчетаВарианта = Новый Массив;
		
		Если ЗначениеЗаполнено(ВариантПроводки.КорСчетКт) Тогда
			КорСчетаВарианта.Добавить(ВариантПроводки.КорСчетКт);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВариантПроводки.КорСчетДт) Тогда
			КорСчетаВарианта.Добавить(ВариантПроводки.КорСчетДт);
		КонецЕсли;
		
		КорСчетаВарианта = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(КорСчетаВарианта);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчета, КорСчетаВарианта);
		
		Для Каждого Счет Из КорСчетаВарианта Цикл
			КорСчетаВариантов.Вставить(Счет, ВариантПроводки.Имя);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",       КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СчетРасчетаНалога", СчетРасчетаНалога);
	Запрос.УстановитьПараметр("КорСчета",          КорСчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
	|	-ХозрасчетныйОбороты.СуммаОборот КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет = &СчетРасчетаНалога, , Организация = &Организация, КорСчет В (&КорСчета), ) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяВарианта = КорСчетаВариантов[Выборка.КорСчет];
		
		Если ИмяВарианта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СуммыПроводок.Свойство(ИмяВарианта) Тогда
			СуммыПроводок[ИмяВарианта] = СуммыПроводок[ИмяВарианта] - Выборка.Сумма;
		Иначе
			СуммыПроводок.Вставить(ИмяВарианта, - Выборка.Сумма);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем проводки на суммы корректировки
	
	Для Каждого ВариантПроводки Из СхемаРасчета Цикл
		
		Если Не СуммыПроводок.Свойство(ВариантПроводки.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Сумма = СуммыПроводок[ВариантПроводки.Имя];
		
		Если Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводки.Записывать = Истина;
		
		Проводка = Проводки.Добавить();
		Проводка.Период      = КонтекстРасчета.КонецПериода;
		Проводка.Организация = КонтекстРасчета.Организация;
		
		Если Сумма > 0 Тогда
			
			// По Кт счета расчета налога
			
			Проводка.Сумма       = Сумма;
			Проводка.Содержание  = ВариантПроводки.ПредставлениеКт; 
			
			Проводка.СчетДт = ВариантПроводки.КорСчетКт;
			Проводка.СчетКт = СчетРасчетаНалога;
			Для Каждого ЗначениеСубконто Из ВариантПроводки.КорСубконто Цикл
				Проводка.СубконтоДт.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
			КонецЦикла;
			
		Иначе
			
			// По Дт счета расчета налога
			
			Проводка.Сумма       = - Сумма;
			Проводка.Содержание  = ВариантПроводки.ПредставлениеДт;
			
			Проводка.СчетДт = СчетРасчетаНалога;
			Проводка.СчетКт = ВариантПроводки.КорСчетДт;
			
			Для Каждого ЗначениеСубконто Из ВариантПроводки.КорСубконто Цикл
				Проводка.СубконтоКт.Вставить(ЗначениеСубконто.Ключ, ЗначениеСубконто.Значение);
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьВлияниеУбыткаТекущегоПериода(Проводки, ВлияниеУбыткаТекущегоПериода, КонтекстРасчета)
	
	// Начисление (погашение) специального отложенного налогового актива 
	// Дт 09 Кт 68.04.2
	// или
	// Дт 68.04.2 Кт 09
	// на разницу между переданной суммой влияния убытка и ранее отраженной на счете 09.
	
	СчетРасчетаНалога     = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	СчетОтложенногоНалога = ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетРасчетаНалога",     СчетРасчетаНалога);
	Запрос.УстановитьПараметр("СчетОтложенногоНалога", СчетОтложенногоНалога);
	Запрос.УстановитьПараметр("ОтчетнаяДата",          КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организации",           КонтекстРасчета.Организации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(Сальдо.СуммаОстаток) КАК ОтложенныйНалог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ОтчетнаяДата,
	|			Счет = &СчетОтложенногоНалога,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыАктивовИОбязательств),
	|			Организация В (&Организации)
	|				И Субконто1 = Значение(Перечисление.ВидыАктивовИОбязательств.УбытокТекущегоПериода)) КАК Сальдо";
	
	РанееОтраженныйОтложенныйНалог = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ОтложенныйНалог) Тогда
		РанееОтраженныйОтложенныйНалог = Выборка.ОтложенныйНалог;
	КонецЕсли;
	
	Корректировка = ВлияниеУбыткаТекущегоПериода - РанееОтраженныйОтложенныйНалог;
	Если Корректировка = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидДвижения = ВидДвиженияБухгалтерии.Дебет;
	Если Корректировка < 0 Тогда
		ВидДвижения = ВидДвиженияБухгалтерии.Кредит;
		Корректировка = -Корректировка; 
	КонецЕсли;
		
	// Представление записывается в ИБ, поэтому локализуются основным языком конфигурации.
	Представление = НСтр("ru = 'Убыток текущего периода'", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	ДобавитьПроводкуОтложенныйНалог(
		Проводки,
		Корректировка,
		Представление,
		ВидДвижения,
		СчетОтложенногоНалога,
		Перечисления.ВидыАктивовИОбязательств.УбытокТекущегоПериода,
		СчетРасчетаНалога,
		КонтекстРасчета);
			
КонецПроцедуры

Функция НачисленныйНалог(КонтекстРасчета)
	
	// При применении ПБУ 18 налог начисляется проводкой Дт 68.04.2 Кт 68.04.1
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот), 0) КАК НачисленныйНалог
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетНалогаНаПрибыль), , СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСБюджетом), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НачисленныйНалог;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Процедура ЗакрытьСчетРасчетаНалога(Проводки, КонтекстРасчета)
	
	// Все проводки - в корреспонденции со счетом 68.04.2
	СчетРасчетаНалога = ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль;
	КорСчет           = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
	
	// Представления записываются в ИБ, поэтому локализуются основным языком конфигурации.
	ПредставлениеПроводки = НСтр("ru = 'Перенос сальдо счета 68.04.2'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
	// Определим сумму проводки как сальдо на счете скорректированное на подготовленные проводки
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("ОтчетнаяДата",      КонтекстРасчета.КонецПериода + 1);
	Запрос.УстановитьПараметр("Организация",       КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("СчетРасчетаНалога", СчетРасчетаНалога);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сальдо
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет = &СчетРасчетаНалога, , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Сальдо = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Сальдо = Сальдо + Выборка.Сальдо;
	КонецЦикла;
	
	Для Каждого Проводка Из Проводки Цикл
		Если Проводка.СчетДт = СчетРасчетаНалога Тогда
			Сальдо = Сальдо + Проводка.Сумма;
		КонецЕсли;	
		Если Проводка.СчетКт = СчетРасчетаНалога Тогда
			Сальдо = Сальдо - Проводка.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	Если Сальдо = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводки.Записывать = Истина;
	
	Проводка = Проводки.Добавить();
	Проводка.Период      = КонтекстРасчета.КонецПериода;
	Проводка.Организация = КонтекстРасчета.Организация;
	
	Если Сальдо > 0 Тогда
		
		// По Кт счета расчета налога
		
		Проводка.Сумма       = Сальдо;
		Проводка.Содержание  = ПредставлениеПроводки; 
		
		Проводка.СчетДт = КорСчет;
		Проводка.СчетКт = СчетРасчетаНалога;
		
	Иначе
		
		// По Дт счета расчета налога
		
		Проводка.Сумма       = - Сальдо;
		Проводка.Содержание  = ПредставлениеПроводки;
		
		Проводка.СчетДт = СчетРасчетаНалога;
		Проводка.СчетКт = КорСчет;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти	

#Область СправкиРасчеты

Функция СправкиРасчеты() Экспорт
	
	ИменаОтчетов = Новый Массив;
	ИменаОтчетов.Добавить("СправкаРасчетОтложенногоНалога");
	ИменаОтчетов.Добавить("СправкаРасчетЭффектаИзмененияСтавокНалогаНаПрибыль");
	
	Возврат Новый ФиксированныйМассив(ИменаОтчетов);
	
КонецФункции

Процедура ДобавитьСправкиРасчеты(СписокВыбора) Экспорт
	
	Для Каждого ИмяОтчета Из СправкиРасчеты() Цикл
		
		Схема = Отчеты[ИмяОтчета].ПолучитьМакет(Метаданные.Отчеты[ИмяОтчета].ОсновнаяСхемаКомпоновкиДанных);
		Варианты = Схема.ВариантыНастроек;
		Если ЗначениеЗаполнено(Варианты) Тогда
			Представление = Варианты[0].Представление;
			СписокВыбора.Добавить(ИмяОтчета, Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

