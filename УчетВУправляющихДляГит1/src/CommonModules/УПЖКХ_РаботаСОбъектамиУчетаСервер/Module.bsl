#Область СлужебныеПроцедурыИФункции

// Процедура выполняет переименование выбранных зданий по настроенному шаблону.
//
// Параметры:
//  Здание                    - Таблица значений - список зданий для переименования.
//  СоставПредставленияАдреса - Строка - шаблон представления адреса.
//
Процедура ПереименоватьЗдания(Здания, СоставПредставленияАдреса) Экспорт
	
	Для Каждого ТекЗдание ИЗ Здания Цикл
		
		ЗданиеСсылка = ТекЗдание.Объект;
		
		СтруктураАдреса           = ПолучитьАдрес(ЗданиеСсылка, Перечисления.КВП_ВидыАдресов.Здание);
		ПредставлениеНаименования = Справочники.КВП_Здания.ПолучитьПредставлениеАдресаЗданияПоСтруктуре(СтруктураАдреса, 
																								СоставПредставленияАдреса);
		Если НЕ ПредставлениеНаименования = "" Тогда 
			ЗданиеОбъект = ЗданиеСсылка.ПолучитьОбъект();
			
			ЗданиеОбъект.Наименование = ПредставлениеНаименования;
			Записан = КВП_ЗаписатьОбъект(ЗданиеОбъект);
			Если НЕ Записан Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить наименование для здания: " + ЗданиеСсылка +
																 " по причине: " + ОписаниеОшибки());
			КонецЕсли;
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить наименование для здания: " + ЗданиеСсылка + 
															 " по причине: не заполнен адрес здания!");
		КонецЕсли;
		
		// Для передачи на клиент информации о ходе выполнения процесса.
		ПроцентВыполнения = Окр(100 * (Здания.Индекс(ТекЗдание)+1)/ Здания.Количество());
		УПЖКХ_ТиповыеМетодыСервер.СообщитьПрогресс(ПроцентВыполнения);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет переменную мАктуаленСтроительныйАдрес.
//
// Параметры:
//  Здание - Ссылка на справочник "Здания".
//
Функция УстановитьАктуальностьСтроительногоАдреса(Здание) Экспорт
	
	Если ЗначениеЗаполнено(Здание) Тогда
		СтрукАдресаВладельца = ПолучитьАдрес(Здание, 
											 Перечисления.КВП_ВидыАдресов.Здание);
		Возврат СтрукАдресаВладельца.Строительный;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции //УстановитьАктуальностьСтроительногоАдреса

// Функция автоматического подбора номера подъезда для текущего владельца.
//
// Параметры:
//  Здание - Ссылка на справочник "Здания".
//  мАктуаленСтроительныйАдрес - Булево - признак актуален ли для здания строительный адрес.
//
Функция УстановитьНомерПодъезда(Здание, мАктуаленСтроительныйАдрес) Экспорт
	
	// получение списка номеров подъездов по зданию
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Владелец", Здание);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.НомерПодъезда КАК НомерПодъезда
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерПодъезда";
	
	СписокНомеров = Запрос.Выполнить().Выгрузить();
	
	// Нахождение минимального номера из подъездов данного типа,
	// не числящихся в данном здании.
	Если мАктуаленСтроительныйАдрес Тогда
		НовыйНомер = 100000;
	Иначе
		НовыйНомер = 1;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СписокНомеров Цикл
		Если ТекСтрока.НомерПодъезда > НовыйНомер Тогда
			Прервать;
		КонецЕсли;
		НовыйНомер = НовыйНомер + 1;
	КонецЦикла;
	
	Возврат НовыйНомер;
	
КонецФункции // УстановитьНомерПодъезда()

// Функция возвращает размер для текущий строки в таблицу "Услуги".
//
// Параметры:
//  ТекущийЭлемент - Текущие данные строки.
//
// Возвращаемое значение:
//  Возвращается строка с размером.
Функция УстановитьРазмерНормы(НормаПотребления) Экспорт 
	
	Если ЗначениеЗаполнено(НормаПотребления) Тогда 
		
		Если НормаПотребления.ВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный Тогда
			Размер = "Рассчитывается автоматически";
		ИначеЕсли НормаПотребления.ВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула Тогда
			Размер = "Рассчитывается по формуле";
		Иначе
			Размер = НормаПотребления.Размер;
		КонецЕсли;
		
		Возврат Размер;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // УстановитьРазмерНормы()

// Процедура заполняет таблицу значений «Нормы потребления услуг»
// в формах элементов справочников «Здания» и «Лицевые счета».
//
// Параметры:
//  Объект - <Ссылка> - Ссылка на лицевой счет или здание.
//
Функция ЗаполнитьТаблицуНормативовУслуг(Объект) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛС.Период КАК Период,
	|	КВП_НормыПотребленияУслугЛС.Услуга КАК Услуга,
	|	КВП_НормыПотребленияУслугЛС.ЛицевойСчет КАК Объект,
	|	КВП_НормыПотребленияУслугЛС.НормаПотребления КАК НормаПотребления
	|ПОМЕСТИТЬ ВрТаблицаНорм
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС КАК КВП_НормыПотребленияУслугЛС
	|ГДЕ
	|	КВП_НормыПотребленияУслугЛС.ЛицевойСчет = &Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаНорм.Период КАК Период,
	|	ТаблицаНорм.Услуга КАК Услуга,
	|	ТаблицаНорм.НормаПотребления КАК НормаПотребления,
	|	ТаблицаНорм.Объект КАК Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаНорм.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный)
	|			ТОГДА ""Рассчитывается автоматически""
	|		КОГДА ТаблицаНорм.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула)
	|			ТОГДА ""Рассчитывается по формуле""
	|		ИНАЧЕ ТаблицаНорм.НормаПотребления.Размер
	|	КОНЕЦ КАК Размер,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления, 0) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Актуальность
	|ИЗ
	|	ВрТаблицаНорм КАК ТаблицаНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&Дата, ЛицевойСчет = &Объект) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО ТаблицаНорм.Период = КВП_НормыПотребленияУслугЛССрезПоследних.Период
	|			И ТаблицаНорм.Объект = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			И ТаблицаНорм.Услуга = КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|			И ТаблицаНорм.НормаПотребления = КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Дата",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("Объект", Объект);
	
	ТаблицаНормативов = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаНормативов;	
КонецФункции // ЗаполнитьТаблицуНормативовУслуг()

// Удаляет запись регистра "КВП_НормыПотребленияУслугЛС".
Процедура УдалитьНормуИзРегистраСведений(Период, Объект, Услуга)Экспорт 
	
	МенеджерЗаписи = РегистрыСведений.КВП_НормыПотребленияУслугЛС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = Период;
	МенеджерЗаписи.ЛицевойСчет = Объект;
	МенеджерЗаписи.Услуга = Услуга;
	
	Попытка
		МенеджерЗаписи.Удалить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Норма потребления не удалена: " + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Возвращает ключ записи регистра "КВП_НормыПотребленияУслуг" по переданному периоду, объекту и услуге.
Функция ПолучитьКлючЗаписиРегистраНормыПотребленияЛС(Период, Объект, Услуга) Экспорт 
	
	Возврат РегистрыСведений.КВП_НормыПотребленияУслугЛС.СоздатьКлючЗаписи(Новый Структура("Период, ЛицевойСчет, Услуга ", Период, Объект, Услуга));
	
КонецФункции

// Функция возвращает укороченный адрес для объекта Здание: Улица + Дом + Корпус.
//
Функция УкороченныйАдресЗдания(Здание) Экспорт
	
	Если ТипЗнч(Здание) = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		ВидАдреса = Перечисления.КВП_ВидыАдресов.Здание;
		
		СтруктураАдреса = ПолучитьАдрес(Здание, ВидАдреса);
		КраткийАдрес = "";
		
		Если СтруктураАдреса.Улица = "" Тогда
			Возврат КраткийАдрес;
		КонецЕсли;
		
		КраткийАдрес = СтруктураАдреса.Улица + ?(Не СтруктураАдреса.Дом = "", ", дом № "+ СтруктураАдреса.Дом, ", ") +
											   ?(Не СтруктураАдреса.Корпус = "", ", корпус " + СтруктураАдреса.Корпус, "");
		Возврат КраткийАдрес;
		
	Иначе
		Возврат Здание;
	КонецЕсли;
	
КонецФункции // УкороченныйАдресЗдания()

#КонецОбласти