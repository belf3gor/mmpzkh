#Область ПрограммныйИнтерфейс

// Устанавливает договор контрагента по умолчанию с учетом условий отбора. 
// Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента, ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ВестиУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам");
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	НЕ ОсновныеДоговорыКонтрагента.Договор ЕСТЬ NULL КАК Основной,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА 1
	|		КОГДА ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|		ПО (ОсновныеДоговорыКонтрагента.Договор = ДоговорыКонтрагентов.Ссылка)
	|			И ДоговорыКонтрагентов.Организация = ОсновныеДоговорыКонтрагента.Организация
	|			И ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагента.Контрагент
	|			И ДоговорыКонтрагентов.ВидДоговора = ОсновныеДоговорыКонтрагента.ВидДоговора
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной УБЫВ,
	|	Приоритет УБЫВ";
	
	ГоловнаяОрганизацияДоговора = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ТекстФильтра = "ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
		|	И ДоговорыКонтрагентов.Владелец = &ВладелецДоговора";
	
	Если ВестиУчетПоДоговорам Тогда
		ТекстФильтра = ТекстФильтра + "
		| И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	
	Если СписокВидовДоговора <> Неопределено Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
		Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныеПараметры Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
				| И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		НайденОдинДоговор = Выборка.Количество() = 1;
		// Если ведется учет по договорам, то выбираем либо основной, либо единственный договор
		Если ВестиУчетПоДоговорам Тогда
			Если Выборка.Основной Или НайденОдинДоговор Тогда
				НовыйДоговор = Выборка.Ссылка;
			КонецЕсли;
		// Если учет по договорам не ведется, то выбираем только основной договор
		ИначеЕсли Выборка.Основной Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(НовыйДоговор)
		И (Не ЗначениеЗаполнено(ДоговорКонтрагента)
			Или РеквизитыДоговора.Владелец <> ВладелецДоговора
			Или РеквизитыДоговора.Организация <> ГоловнаяОрганизацияДоговора) Тогда
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Заполняет договор в объекте, в случае если не ведется учет по договорам
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, в котором необходимо заполнить договор
//
Процедура ЗаполнитьДоговорПередЗаписью(Объект) Экспорт

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДоговорКонтрагента = ДоговорКонтрагентаИзОбъекта(Объект)
	
КонецПроцедуры

// Заполняет договор в табличной части, в случае если не ведется учет по договорам
//
// Параметры:
// ТабличнаяЧасть - Табличная часть документа, в которой необходимо заполнить договор 
// Объект - ДокументОбъект.ЛюбаяСсылка - Документ, из которого берутся данные для заполнения договора
// 
Процедура ЗаполнитьДоговорВТабличнойЧастиПередЗаписью(ТабличнаяЧасть, Объект) Экспорт

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Владелец");
	
	ЕстьКонтрагентВСтроке = ЕстьКонтрагентВСтроке(Объект);
	Если НЕ ЕстьКонтрагентВСтроке Тогда;
		ПараметрыДоговора.Владелец = Объект.Контрагент;
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		Если ЕстьКонтрагентВСтроке Тогда
			ПараметрыДоговора.Владелец = Строка.Контрагент;
		КонецЕсли;
		
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		Если МожноСоздатьДоговор(ПараметрыДоговора) И 
			НЕ УстановитьДоговорКонтрагента(
				ДоговорКонтрагента,
				ПараметрыДоговора.Владелец, 
				ПараметрыДоговора.Организация, 
				ПараметрыДоговора.ВидДоговора) Тогда
			
			ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
			ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
			
		КонецЕсли;
		Строка.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает договор в качестве основного в регистре сведений "Основные договора контрагента"
// 
// Параметры:
// Договор - Договор, который необходимо установить как основной
//
Процедура УстановитьОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Договор     = Договор;
	НоваяЗапись.Записать(Истина);
	
КонецПроцедуры

// Проверяет, что договор установлен в качестве основного в регистре сведений "Основные договора контрагента"
//
// Параметры:
// Договор - Договор, который необходимо проверить
//
Функция ЭтоОсновнойДоговорКонтрагента(Договор) Экспорт
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Организация, Владелец, ВидДоговора");
	
	НоваяЗапись = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьМенеджерЗаписи();
	НоваяЗапись.Организация = ПараметрыДоговора.Организация;
	НоваяЗапись.Контрагент  = ПараметрыДоговора.Владелец;
	НоваяЗапись.ВидДоговора = ПараметрыДоговора.ВидДоговора;
	НоваяЗапись.Прочитать();
	
	Возврат НоваяЗапись.Выбран() И НоваяЗапись.Договор = Договор;
	
КонецФункции

Функция ЕстьОсновнойДоговорКонтрагента(ВидыДоговоров, Организация, Контрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Контрагент",    Контрагент);
	Запрос.УстановитьПараметр("ВидыДоговоров", ВидыДоговоров);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеДоговорыКонтрагента.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора В(&ВидыДоговоров)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция МожноСоздатьДоговор(ПараметрыДоговора)

	Возврат ЗначениеЗаполнено(ПараметрыДоговора.Владелец) И
		ЗначениеЗаполнено(ПараметрыДоговора.Организация) И 
		ТипЗнч(ПараметрыДоговора.Владелец) = Тип("СправочникСсылка.Контрагенты");

КонецФункции

// Возвращает договор, который найден или создан как основной
//
// Параметры:
// Объект - ДокументОбъект.ЛюбаяСсылка или Структура - Документ или структура - источник данных для договора
//			Структура должна содержать свойства:
//				- Контрагент - <СправочникСсылка.ДоговорыКонтрагентов>
//				- Организация - <СправочникСсылка.Организации>
// В случае передачи структуры вид созданного/найденного договора будет Прочее
//
Функция ДоговорКонтрагентаИзОбъекта(Объект) Экспорт

	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("ВидДоговора", ВидДоговораПоОбъекту(Объект));
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец",    Объект.Контрагент);
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если МожноСоздатьДоговор(ПараметрыДоговора) И 
		НЕ УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, 
			ПараметрыДоговора.Владелец, 
			ПараметрыДоговора.Организация, 
			ПараметрыДоговора.ВидДоговора) Тогда
			
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		ДоговорКонтрагента = РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции

// Определяет вид договора по объекту
//
Функция ВидДоговораПоОбъекту(Объект) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	// Типы документов, использующие вид договора - с покупателем
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РеализацияОтгруженныхТоваров"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АктОбОказанииПроизводственныхУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВозвратТоваровОтПокупателя"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОказаниеУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетНаОплатуПокупателю"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаНМА"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаОС"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОплатаПлатежнойКартой"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.НачислениеПеней"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаОСВАренду"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВозвратОСОтАрендатора"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - с поставщиком
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеДопРасходов"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВыкупПредметовЛизинга"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.Доверенность"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ЗаявлениеОВвозеТоваров"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеИзПереработки"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПринятиеКУчетуОС"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеВЛизинг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РеализацияУслугПоПереработке"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СчетНаОплатуПоставщика"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ИзменениеОтраженияРасходовПоЛизинговымПлатежамОС"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - прочее
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеДенежныхДокументов"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВыдачаДенежныхДокументов"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ГТДИмпорт"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОтчетОператораСистемыПлатон"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	КонецЕсли;
	
	// Типы документов, использующие вид договора - с факторинговой компанией
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаЗадолженностиНаФакторинг"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		Возврат Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;
	КонецЕсли;

	
	// Типы документов, вид договора в которых можно следует определять по виду операции
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПоступлениеТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.СписаниеСРасчетногоСчета"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ВозвратТоваровПоставщику"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПередачаТоваров"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПлатежноеПоручение"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ПриходныйКассовыйОрдер"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.РасходныйКассовыйОрдер"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Если ОписаниеТиповДокументов.СодержитТип(ТипОбъекта) Тогда
		
		ВидОперации = Объект.ВидОперации;
		
		// Виды операций, в которых используется вид договора - с покупателем
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки);
		// Передача товара
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с поставщиком
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
		// Возврат товаров поставщику
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование);
		// Передача товара
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
		// Поступление товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПриобретениеЗемельныхУчастков);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга);
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - прочее
		
		МассивВидовОпераций = Новый Массив;
		// Списание с расчетного счета
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВыдачаЗаймаКонтрагенту);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалогаЗаТретьихЛиц);
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		
		// Приходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.ВозвратЗаймаКонтрагентом);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам);
		// Расходный кассовый ордер
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратЗайма);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.ВозвратКредита);
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
		
		// Виды операций, в которых используется вид договора - с факторинговой компанией
		
		МассивВидовОпераций = Новый Массив;
		// Поступление на расчетный счет
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании);
		// Поступление товаров услуг
		МассивВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиФакторинга);
		
		Если МассивВидовОпераций.Найти(ВидОперации) <> Неопределено Тогда
			Возврат Перечисления.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией;
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавим вид операции по умолчанию. Выше описаны все типовые случаи, в случае если они не подходят используем прочий вид договора.
	Возврат Перечисления.ВидыДоговоровКонтрагентов.Прочее;

КонецФункции

// Проверяет наличие у контрагента хотя бы одного договора по данной организации
//
// Параметры:
// Организация - СправочникСсылка.Организации 
// Контрагент - СправочникСсылка.Контрагенты 
//
// Возвращаемое значение:
// Булево - Истина, если для переданных Контрагента и Организации нет ни одного договора
Функция КонтрагентБезДоговоров(Организация, Контрагент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация";
	
	ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой()
	
КонецФункции

// Проверяет возможность, уместность предложить в списке выбора создать договор.
// Создавать новый (первый) договор в этот момент уместно, если еще ни одного договора с этим контрагентом в программе не отражено.
//
// Параметры:
// 	Организация - СправочникСсылка.Организации 
// 	Контрагент - СправочникСсылка.Контрагенты 
//
// Возвращаемое значение:
// 	Булево - Истина - можно предложить новый договор
//
Функция ПредлагатьНовыйДоговор(Организация, Контрагент) Экспорт
	
	Возврат ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.ДоговорыКонтрагентов)
		И КонтрагентБезДоговоров(Организация, Контрагент);
	
КонецФункции

// Записывает в регистр СтавкиНДСПоДокументу значение СпособаЗаполненияСтавкиНДС по документу.
// Определяет СпособЗаполненияСтавкиНДС по СуммеНДС в документе.
//
// Параметры:
// ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор по которому надо записать значение.
// ТекущийДокумент - документ, из которого происходит вызов процедуры.
// ЕстьСуммаНДС - булево- наличие НДС, необязательный параметр.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(ДоговорКонтрагента,
	 ТекущийДокумент, ЕстьСуммаНДС = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента)Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "СпособЗаполненияСтавкиНДС, Организация, Владелец");
	
	Если ПараметрыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
		Возврат;
	КонецЕсли;

	ЕстьНДС = ?(ЗначениеЗаполнено(ЕстьСуммаНДС), ЕстьСуммаНДС, ДокументСНДС(ТекущийДокумент));

	Если ЕстьНДС Тогда
		ТекущийСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	Иначе
		ТекущийСпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.БезНДС;
	КонецЕсли;

	// Проверяем, что сейчас записано в регистре
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыДоговора.Владелец);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоДоговорам КАК СтавкиНДСПоДоговорам
	|ГДЕ
	|	СтавкиНДСПоДоговорам.Организация = &Организация
	|	И СтавкиНДСПоДоговорам.Контрагент = &Контрагент
	|	И СтавкиНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	ТаблицаСпособыЗаполненияСтавкиНДС = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСпособыЗаполненияСтавкиНДС.Количество() > 0 Тогда
		ЗаписанныйСпособСтавкиНДС = ТаблицаСпособыЗаполненияСтавкиНДС[0];
		Если ЗаписанныйСпособСтавкиНДС.СпособЗаполненияСтавкиНДС = ТекущийСпособЗаполненияСтавкиНДС Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтавкиНДСПоДоговорам");
	ЭлементБлокировки.УстановитьЗначение("ДоговорКонтрагента", ДоговорКонтрагента);
	Блокировка.Заблокировать();

	Попытка

		МенеджерЗаписиСтавкиНДСПоДоговорам = РегистрыСведений.СтавкиНДСПоДоговорам.СоздатьМенеджерЗаписи();
		МенеджерЗаписиСтавкиНДСПоДоговорам.ДоговорКонтрагента = ДоговорКонтрагента;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Контрагент = ПараметрыДоговора.Владелец;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Организация = ПараметрыДоговора.Организация;
		МенеджерЗаписиСтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС = ТекущийСпособЗаполненияСтавкиНДС;
		МенеджерЗаписиСтавкиНДСПоДоговорам.Записать(Истина);

		ЗафиксироватьТранзакцию();
		
	Исключение
		//Обновленные данные по договору записываются или не записываются .
		ОтменитьТранзакцию();
	КонецПопытки;

КонецПроцедуры

// Записывает значение СпособЗаполненияСтавкиНДС по документам оплаты.
//
// Параметры:
// РасшифровкаПлатежа - таблица РасшифровкаПлатежа из документа оплаты
// ДокументСсылка - документ, из которого вызывается процедура.
Процедура ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(РасшифровкаПлатежа, ДокументСсылка) Экспорт
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
		ТаблицаДоговоров = ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа);
		Для каждого ТекСтрока Из ТаблицаДоговоров Цикл
		
			ЗаписатьСпособЗаполненияСтавкиНДСПоДокументу(
				ТекСтрока.ДоговорКонтрагента, Неопределено, ТекСтрока.СуммаНДС > 0);
		КонецЦикла;

КонецПроцедуры

// Проверяет есть в табличных частях сумма НДС или нет.
//
// Параметры:
// ТекущийДокумент - документы, , которых, нужно проверить НДС
//
// Возвращаемое значение:
// Булево - показывает наличие НДС в документе.
Функция ДокументСНДС(ТекущийДокумент) Экспорт

	Если НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Документы[ТекущийДокумент.Метаданные().Имя].НаличиеСуммыНДС(ТекущийДокумент);
	
КонецФункции

// Возвращает СпособЗаполненияСтавкиНДС из регистра СтавкиНДСПоДоговору или договору.
//
// Параметры 
// ДоговорКонтрагента - Справочник.ДоговорыКонтрагентов - Договор, по которому нужно 
// прочитать СпособЗаполненияСтавкиНДС.
//
// Возвращаемое значение:
// значение Перечисления.СпособыЗаполненияСтавкиНДС
Функция СпособЗаполненияСтавкиНДСПоДоговору(ДоговорКонтрагента) Экспорт
	
	Если ДоговорКонтрагента.Пустая() Тогда
		Возврат Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	КонецЕсли;

	ПараметрыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		 "СпособЗаполненияСтавкиНДС, Организация, Владелец");

	Если ПараметрыДоговора.СпособЗаполненияСтавкиНДС <> Перечисления.СпособыЗаполненияСтавкиНДС.Автоматически Тогда
	
		Возврат ПараметрыДоговора.СпособЗаполненияСтавкиНДС;
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Организация", ПараметрыДоговора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ПараметрыДоговора.Владелец);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МенеджерЗаписиСтавкиНДСПоДоговорам.СпособЗаполненияСтавкиНДС КАК СпособЗаполненияСтавкиНДС
	|ИЗ
	|	РегистрСведений.СтавкиНДСПоДоговорам КАК МенеджерЗаписиСтавкиНДСПоДоговорам
	|ГДЕ
	|	МенеджерЗаписиСтавкиНДСПоДоговорам.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И МенеджерЗаписиСтавкиНДСПоДоговорам.Организация = &Организация
	|	И МенеджерЗаписиСтавкиНДСПоДоговорам.Контрагент = &Контрагент";

	Выборка = Запрос.Выполнить().Выбрать();

	СпособЗаполненияСтавкиНДС = Перечисления.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры;
	
	Если Выборка.Следующий() Тогда
	
		СпособЗаполненияСтавкиНДС = Выборка.СпособЗаполненияСтавкиНДС;
		
	КонецЕсли;
	
	Возврат СпособЗаполненияСтавкиНДС;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьКонтрагентВСтроке(Объект)

	// Перечислим типы документов, в которых контрагент указывается в строке
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.АвансовыйОтчет"));
	МассивТиповДокументов.Добавить(Тип("ДокументОбъект.ОказаниеУслуг"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТиповДокументов);
	
	Возврат ОписаниеТипов.СодержитТип(ТипЗнч(Объект));

КонецФункции

// Возвращает свернутую таблицу по двум параметрам: ДоговорКонтрагента и СуммаНДС.
//
// Параметры
// РасшифровкаПлатежа - РасшифровкаПлатежа документа.
//
// Возвращаемое значение:
// ТаблицаЗначений - свернутая таблица по договору.
Функция ОбработатьРасшифровкуПлатежа(РасшифровкаПлатежа)

	СводнаяРасшифровкаПлатежа = РасшифровкаПлатежа.Выгрузить(,"ДоговорКонтрагента,СуммаНДС");
	СводнаяРасшифровкаПлатежа.Свернуть("ДоговорКонтрагента", "СуммаНДС");
	
	Возврат СводнаяРасшифровкаПлатежа;
	
КонецФункции

#КонецОбласти
