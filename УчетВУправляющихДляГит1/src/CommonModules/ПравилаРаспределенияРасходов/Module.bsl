#Область ПрограммныйИнтерфейс

// Создает структуру таблицы правил распределения
//
Функция НовыеПравилаРаспределения() Экспорт
	
	ПравилаРаспределения = Новый ТаблицаЗначений();
	// Порядок правил важен: каждое следующее правило распределяет то, что не распределили предыдущие.
	
	// Соглашения по именам:
	// - должно быть уникальным в рамках коллекции. См. ОбеспечитьУникальныеИменаПравил()
	// - может содержать несколько элементов с разделителями
	// - рекомендуемый разделитель - "."
	// - первый элемент имени содержит основную смысловую нагрузку
	//   Его можно использовать для идентификации правил, выполняющих те или иные функции.
	//   Остальные элементы не следует использовать для этой цели - они обеспечивают уникальность имен правил
	//   и могут использоваться для отладки
	// - символ "#" может использоваться только для обеспечения уникальности имен правил в коллекции
	ПравилаРаспределения.Колонки.Добавить("Имя",          ТипИмени());
	ПравилаРаспределения.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	// Описания позволяют подготовить раздел текста учетной политики.
	// Некоторые правила (служебные, "налоговые") могут не иметь описаний.
	// Соглашения по описаниям:
	// - описание - это одно или несколько повествовательных предложений
	// - перед выводом пользователю они обрабатываются
	// - в коллекции правил предложения должны быть в виде "полуфабрикатов"
	// -- каждое отдельное предложение - в отдельной подстроке (отделено символом ПС)
	// -- заглавные буквы не должны использоваться в значении признака начала предложения
	// -- точки не не должны использоваться в значении признака конца предложения
	// - описания выводятся в контексте закрываемого счета, поэтому,
	//   в тексте описания упоминать счет, как правило, не следует
	ПравилаРаспределения.Колонки.Добавить("Описание",     Новый ОписаниеТипов("Строка"));
	
	// Содержание проводки следует задать только для тех правил распределения, 
	// которым не могут соответствовать предварительные проводки.
	// Например:
	// - проводка по списанию косвенных расходов НУ (Дт 90.08 Кт 20.01) не формируется до выполнения регламентной операции.
	//   Поэтому в ней можно указать содержание, соответствующее правилу распределения.
	// - проводка по выпуск продукции (Дт 43 Кт 20.01) формируется по правилу распределения. 
	//   В результате регламентной операции должны быть сформированы проводки по _корректировке_ предварительных сумм 
	//   (с соответствующим содержанием)
	// Принято допущение, что предварительные проводки могут соответствовать любому выпуску (про "Выпуск" см. ниже).
	// Поэтому содержание всех проводок по выпуску - стандартное, его не следует задавать.
	ПравилаРаспределения.Колонки.Добавить("СодержаниеПроводки", Новый ОписаниеТипов(Метаданные.РегистрыБухгалтерии.Хозрасчетный.Реквизиты.Содержание.Тип));
	
	// Следует отметить правила, которые приводят к появлению особых проводок и отражению в справках-расчетах
	ПравилаРаспределения.Колонки.Добавить("Выпуск",             Новый ОписаниеТипов("Булево"));
	
	// Ссылка на настройку, выполненную пользователем
	ПравилаРаспределения.Колонки.Добавить("Настройка",          Новый ОписаниеТипов("РегистрСведенийКлючЗаписи.МетодыРаспределенияКосвенныхРасходовОрганизаций"));
	
	// Используются для отображения в справках-расчетах.
	ПравилаРаспределения.Колонки.Добавить("МетодРасчета",       Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	// Отбор расходов, для которых следует применить это правило
	// Ключ - имя поля, Значение - отбираемое значение или массив значений.
	// Для счетов учета
	// - рекомендуется использовать значения, а не массивы значений - см. УстановленОтборРавенствоСчета(), ОтобранныеСчетаРасходов()
	// - допускается передавать счета-группы: правило распространяется на все подчиненные счета
	ПравилаРаспределения.Колонки.Добавить("ОтборРасходов",      Новый ОписаниеТипов("Структура"));
	// Перечень полей запроса - разрезов аналитики _источника_, важных для распределения
	ПравилаРаспределения.Колонки.Добавить("ПоляИсточника",     Новый ОписаниеТипов("Структура")); // Ключ - имя поля, Значение - путь к данным поля в базе распределения
	// Правило предусматривает выполнение одного из четырех действий:
	// - РаспределитьНаРасходы -  распределение сумм в соответствии с коэффициентами базы.
	//                            Аналитика приемника задана в виде полей, перечисленных в РазрезыРаспределения()
	//                            (НоменклатурнаяГруппа, СтатьяЗатрат и т.п.)
	//                            Аналитика приемника может определяться полями источника и полями базы (см. ПоляПриемника)
	// - РаспределитьНаСубконто - распределение сумм в соответствии с коэффициентами базы.
	//                            Аналитика приемника задана в виде полей, перечисленных в РазрезыУчета() + поле Номенклатура.
	//                            В частном случае приемник может быть Расходами, причем аналитика расходов явно задана в базе распределения.
	//                            В этом действие но в отличие от действия РаспределитьНаРасходы,
	// - ВыделитьНалоговыйУчет  - перенос сумм налогового учета с образованием разниц.
	//                            Тип разниц (ВР, ПР) определяется базой распределения.
	//                            Аналитика приемника задана так же, как и в правиле РаспределитьНаРасходы.
	//                            Коэффициенты базы не используются.
	// - Зафиксировать          - ограничение распределения расходов.
	//                            Расходы, к которым применено это правило, не участвуют в обработке следующими правилами.
	//                            База распределения не используется.
	//
	// В общем случае, расходы, к которым применено любое из правил, не участвуют в обработке другими правилами.
	// Исключение: расходы, к которым применено правило ВыделитьНалоговыйУчет могут быть в последствии обработаны другими правилами 
	// (с другими действиями). 
	// Обратное - неверно: после выполнения над расходами любого правила не имеет смысла выполнять над ними действие ВыделитьНалоговыйУчет.
	// Это нужно учитывать при определении порядка правил.
	// 
	// Такой подход позволяет сократит число ребер, по которым заведомо не будут двигаться суммы
	// (при оценке расходов для конкретной вершины сначала выделяется НУ, а потом выполняется распределение).
	
	ПравилаРаспределения.Колонки.Добавить("Действие",          Новый ОписаниеТипов("Строка"));
	// Перечень полей аналитики приемника, которые присутствуют в базе
	ПравилаРаспределения.Колонки.Добавить("ПоляПриемника",     Новый ОписаниеТипов("Структура"));
	// Несколько правил могут использовать одинаковую базу распределения - "таблицу с коэффициентами".
	// Если у нескольких правил указана одинаковая база распределения, 
	// то она будет рассчитана в соответствии с первым из этих правил.
	// "БазаРаспределения" описывает запрос, который помещает базу во временную таблицу.
	//
	// Своства структуры:
	// 1. Имя - имя временной таблицы, в которую будет помещен результат
	// 2. ТекстЗапроса - текст запроса, создающий временную таблицу.
	//    Может использовать временные таблицы, созданные следующими процедурами:
	//    РасчетСебестоимости.СоздатьСчетаЗатрат()
	//    РасчетСебестоимости.СоздатьПоступления()
	//    Результат запроса должен содержать поля источника и приемника (описанные выше),
	//    а также поле База с числовым неотрицательным значением коэффициентов базы распределения.
	// 3. ПараметрыЗапроса - (опционально) - Структура, параметры запроса 
	//    Также можно использовать параметры, описанные в ОбщиеПараметрыБазРаспределения
	// 4. ПакетВременныхТаблиц - (опционально) - Имя пакета временных таблиц,
	//    которые используются для получения данных базы распределения.
	//    Несколько правил могут использовать одни и те же временные таблицы.
	//    Пакет с одинаковым именем будет создан один раз.
	// 5. СоздатьВременныеТаблицы - (если есть ПакетВременныхТаблиц) - 
	//    текст запроса, который создает временные таблицы.
	//    Таблицы будут уничтожены автоматически по окончании их использования.
	// 6. ПараметрыВременныхТаблиц - (если есть ПакетВременныхТаблиц) - Структура, 
	//    параметры запроса, который создает временные таблицы
	//
	// Если в запросе, формирующем базу распределения, требуется получить "пустые" ссылки,
	// то 
	// - в полях составного типа должно быть Неопределено
	// - в остальных - типизированное значение.
	// Например, в поле базы распределения СтатьяЗатрат недопустимо помещать Неопределено,
	// а в поле Субконто1 недопустимо помещать ссылку на пустую статью затрат.
	ПравилаРаспределения.Колонки.Добавить("БазаРаспределения", Новый ОписаниеТипов("Структура"));
	
	ПравилаРаспределения.Индексы.Добавить("Имя");
	
	Возврат ПравилаРаспределения;
	
КонецФункции

Функция ТипИмени() Экспорт
	
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	
КонецФункции

Процедура Заполнить(ПравилаРаспределения, РазрезыРаспределения, Период, Организация, РегламентнаяОперация) Экспорт
	
	ПрименятьПредопределенныеПравила = Истина;
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилРаспределенияРасходовНаПроизводство(
			ПравилаРаспределения,
			Период,
			Организация,
			ПрименятьПредопределенныеПравила);
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилРаспределенияРасходовНаПродажу(
			ПравилаРаспределения,
			Период,
			Организация,
			ПрименятьПредопределенныеПравила);
	КонецЕсли;
		
	Если ПрименятьПредопределенныеПравила Тогда
		
		Настройки = НовыйНастройкиУчетаЗатрат();
		ЗаполнитьНастройкиУчетаЗатрат(Настройки, Период, Организация, РегламентнаяОперация);
		
		Процессор = НовыйПроцессорЗаполненияПравилРаспределения(ПравилаРаспределения, Настройки, РазрезыРаспределения);
		
		ЗаполнитьПравилаРаспределенияПоНастройкамУчетаЗатрат(Процессор);
		
		ДобавитьПравилаНалоговогоУчета(Процессор.Правила, Процессор.ПравилаПоСчетам, Настройки.СчетаУчета, Период, Организация);
		
	КонецЕсли;
	
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавлениПравилРаспределенияРасходовНаПроизводство(
			ПравилаРаспределения,
			Период,
			Организация);
	ИначеЕсли РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44 Тогда
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавленииПравилРаспределенияРасходовНаПродажу(
			ПравилаРаспределения,
			Период,
			Организация);
	КонецЕсли;
	
	ОбеспечитьУникальныеИменаПравил(ПравилаРаспределения);
	
КонецПроцедуры

// Добавляет правило распределения по счету.
//
// Параметры:
//  Процессор - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  Имя       - Строка - Смысловое имя правила (без ".", без требований к уникальности)
//  Действие  - Строка - "РаспределитьНаРасходы", "РаспределитьНаСубконто", "ВыделитьНалоговыйУчет", "Зафиксировать"
//                     - см. комментарий в НовыеПравилаРаспределения()
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - добавленное правило.
//
Функция ДобавитьПравилоРаспределения(Процессор, Имя, Действие) Экспорт
	
	Правило = Процессор.Правила.Добавить();
	
	Процессор.ПравилаПоСчету.Добавить(Правило);
	
	УстановитьПравилоРаспределения(Правило, Имя, Действие);
	
	Правило.ОтборРасходов.Вставить("Счет", Процессор.Счет);
	
	Возврат Правило;
	
КонецФункции

// Параметры:
//  Правило   - СтрокаТаблицыЗначений - см. НовыеПравилаРаспределения
//  Имя       - Строка - Смысловое имя правила (без ".", без требований к уникальности)
//  Действие  - Строка - "РаспределитьНаРасходы", "РаспределитьНаСубконто", "ВыделитьНалоговыйУчет", "Зафиксировать"
//                     - см. комментарий в НовыеПравилаРаспределения()
// 
Процедура УстановитьПравилоРаспределения(Правило, Имя, Действие) Экспорт
	
	Правило.Имя      = Имя;
	Правило.Действие = Действие;
	
	Если Правило.Действие <> "Зафиксировать" Тогда
		Правило.БазаРаспределения.Вставить("Имя",              "");
		Правило.БазаРаспределения.Вставить("ТекстЗапроса",     "");
		Правило.БазаРаспределения.Вставить("ПараметрыЗапроса", Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНастройку(Ошибки, Период, Организация, ЗаполненаАналитикаРасходов = Истина) Экспорт
	
	Если Не УчетнаяПолитика.ВедетсяПроизводственнаяДеятельность(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьМетодыРаспределенияКосвенныхРасходов(МенеджерВременныхТаблиц, Период, Организация);
	
	ПроверитьЗаданыМетодыРаспределенияКосвенныхРасходов(Ошибки, МенеджерВременныхТаблиц);
	ПроверитьУказанСписокСтатейЗатрат(Ошибки, МенеджерВременныхТаблиц);
	ПроверитьЗаполненСписокСтатейЗатрат(Ошибки, МенеджерВременныхТаблиц);
	ПроверитьМетодРаспределенияВыручка_ЕстьВыручка(Ошибки, МенеджерВременныхТаблиц, Период, Организация);
	ПроверитьМетодРаспределенияВыручка_ЕстьЗатраты(Ошибки, МенеджерВременныхТаблиц, Период, Организация);
	
КонецПроцедуры

// Готовит описание правил распределения расходов на естественном языке - как элемент текста учетной политики.
//
// Параметры:
//  Период      - Дата                         - период настроек
//  Организация - СправочникСсылка.Организации - организация, чьи настройки исследуются
// 
// Возвращаемое значение:
//  ТаблицаЗначений - строки описания в разрезе счетов, см. НовыйОписаниеРаспределения
//
Функция ОписаниеРаспределения(Период, Организация) Экспорт
	
	ОписаниеРаспределения = НовыйОписаниеРаспределения();
	
	ПравилаРаспределения = НовыеПравилаРаспределения();
	
	Настройки = НовыйНастройкиУчетаЗатрат();
	ЗаполнитьНастройкиУчетаЗатрат(Настройки, Период, Организация);
	
	РазрезыРаспределения = РазрезыРаспределенияРасходов(Настройки.СчетаУчета);
	
	Процессор = НовыйПроцессорЗаполненияПравилРаспределения(ПравилаРаспределения, Настройки, РазрезыРаспределения);
	
	ЗаполнитьПравилаРаспределенияПоНастройкамУчетаЗатрат(Процессор);
	
	Для Каждого Счет Из Процессор.Настройки.СчетаУчета Цикл
		
		ПравилаПоСчету = Процессор.ПравилаПоСчетам[Счет];
		Если Не ЗначениеЗаполнено(ПравилаПоСчету) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписанияПоСчету = Новый Массив;
		
		Для Каждого Правило Из ПравилаПоСчету Цикл
			
			Если ПустаяСтрока(Правило.Описание) Тогда
				Продолжить;
			КонецЕсли;
			
			Описания = Новый Массив;
			
			КоличествоСтрок = СтрЧислоСтрок(Правило.Описание);
			Для НомерСтроки = 1 По КоличествоСтрок Цикл
				Строка = СтрПолучитьСтроку(Правило.Описание, НомерСтроки);
				Описания.Добавить(ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(Строка));
			КонецЦикла;
			
			ОписанияПоСчету.Добавить(СтрСоединить(Описания, "."+Символы.ПС));
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ОписанияПоСчету) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПоСчету = ОписаниеРаспределения.Добавить();
		ОписаниеПоСчету.Счет     = Счет;
		ОписаниеПоСчету.Описание = ОписанияПоСчету;
		
	КонецЦикла;
	
	Возврат ОписаниеРаспределения;
	
КонецФункции

Функция ОбщиеПараметрыБазРаспределения(Период, Организация) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("НачалоПериода",       НачалоМесяца(Период));
	ПараметрыЗапроса.Вставить("КонецПериода",        КонецМесяца(Период));
	ПараметрыЗапроса.Вставить("Организация",         Организация);
	ПараметрыЗапроса.Вставить("ГоловнаяОрганизация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
	ПараметрыЗапроса.Вставить("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	ПараметрыЗапроса.Вставить(
		"ТолькоОсновнаяСистемаНалогообложения",
		УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период));
	ПараметрыЗапроса.Вставить(
		"ТолькоОсобыйПорядокНалогообложения",
		УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период));
		
	Возврат ПараметрыЗапроса;
	
КонецФункции

Процедура СоздатьКлассификаторыПравилРаспределения(МенеджерВременныхТаблиц, Правила) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Правила", Правила);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	Правила.СодержаниеПроводки КАК СодержаниеПроводки
	|ПОМЕСТИТЬ СодержаниеПроводокРаспределенияРасходов
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.СодержаниеПроводки <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	ИСТИНА КАК Выпуск
	|ПОМЕСТИТЬ ПравилаРаспределенияРасходовВыпуск
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.Выпуск
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Правила.Имя КАК Правило,
	|	Правила.МетодРасчета КАК МетодРасчета
	|ПОМЕСТИТЬ МетодыРаспределенияРасходов
	|ИЗ
	|	&Правила КАК Правила
	|ГДЕ
	|	Правила.МетодРасчета <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило";

	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДобавлениеПравилРаспределения

#Область КалькуляционныеСчета // 20, 23

Функция РазрезыКалькуляции()
	
	РазрезыКалькуляции = Новый Массив;
	
	РазрезыКалькуляции.Добавить("ВидДеятельности");
	РазрезыКалькуляции.Добавить("Счет");
	РазрезыКалькуляции.Добавить("Подразделение");
	РазрезыКалькуляции.Добавить("НоменклатурнаяГруппа");
	РазрезыКалькуляции.Добавить("Продукция");
	
	Возврат РазрезыКалькуляции;
	
КонецФункции

Функция РазрезыНезавершенноеПроизводство()
	
	РазрезыНезавершенноеПроизводство = Новый Массив;
	
	РазрезыНезавершенноеПроизводство.Добавить("ВидДеятельности");
	РазрезыНезавершенноеПроизводство.Добавить("Счет");
	РазрезыНезавершенноеПроизводство.Добавить("Подразделение");
	РазрезыНезавершенноеПроизводство.Добавить("НоменклатурнаяГруппа");
	
	Возврат РазрезыНезавершенноеПроизводство;
	
КонецФункции

Процедура ДобавитьПравилоСгруппироватьПрямыеРасходы(Процессор)
	
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	// Собираем все расходы по аналитике выпуска
	РазрезыКалькуляции = РазрезыКалькуляции(); // Представленные строками
	АналитикаКалькуляции = Новый Соответствие; // Представленные ссылками
	Для Каждого ИмяРазреза Из РазрезыКалькуляции Цикл
		ВидАналитики = РазрезАналитикиПоИмениПоля(ИмяРазреза);
		Если Не ЗначениеЗаполнено(ВидАналитики) Тогда
			Продолжить;
		КонецЕсли;
		АналитикаКалькуляции.Вставить(ВидАналитики, ИмяРазреза);
	КонецЦикла;
	
	Правило = ДобавитьПравилоСгруппироватьРасходы(Процессор, "СгруппироватьПрямыеРасходы", РазрезыКалькуляции);
	
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило.Наименование = НСтр("ru = 'Сгруппировать прямые расходы, очистив статьи затрат'");
	
	// в описание включим только те группировки, которые доступны пользователю в интерфейсе
	ШаблонОписания = НСтр("ru = 'перед распределением затраты группируются%1'");
	Группировки = Новый Массив;
	Для Каждого ВидАналитики Из Процессор.Аналитика Цикл
		
		Если АналитикаКалькуляции[ВидАналитики] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Группировки.Добавить(РазрезАналитикиДательныйПадеж(ВидАналитики));
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Группировки) Тогда
		Группировки = "";
	Иначе
		Группировки = СтрШаблон(НСтр("ru = ' по %1'"), ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(Группировки));
	КонецЕсли;
	
	Правило.Описание = СтрШаблон(ШаблонОписания, Группировки);
	
КонецПроцедуры

// Добавляет правило распределения, группирующее расходы по заданным полям.
//
// Параметры:
//  Процессор       - Структура - см. НовыйПроцессорЗаполненияПравилРаспределения; Должен быть инициализирован.
//  Имя             - Строка    - Смысловое имя правила (без ".", без требований к уникальности).
//                                Должно соответствовать требованиям к именам временных таблиц:
//                                имя таблицы с базой распределения будет включать переданное имя правила.
//  ПоляГруппировки - Массив    - перечень имен полей из РаспределениеРасходов.РазрезыРаспределения(),
//                                по которым нужно сгруппировать расходы
// Возвращаемое значение:
//  Неопределено          - правило с такой группировкой бессмысленно выполнять
//  СтрокаТаблицыЗначений - добавленное правило.
//                          После добавления правила следует установить наименование и описание правила.
//
Функция ДобавитьПравилоСгруппироватьРасходы(Процессор, Имя, ПоляГруппировки)
	
	// Суть базы распределения - очистить все поля, кроме полей группировки
	ЛишняяАналитика = Новый Структура;
	
	Для Каждого ОписаниеРазреза Из Процессор.РазрезыРаспределения Цикл
		
		Если ПоляГруппировки.Найти(ОписаниеРазреза.Имя) <> Неопределено Тогда
			// Не лишняя
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеРазреза.Имя = "ЗавершенаОбработкаНУ" Тогда
			// Для отметки, что обработка завершена, следует установить флаг
			ЗначениеПоУмолчанию = Истина;
		Иначе
			ЗначениеПоУмолчанию = ОписаниеРазреза.ЗначениеПоУмолчанию;
		КонецЕсли;
		
		ЛишняяАналитика.Вставить(ОписаниеРазреза.Имя, ЗначениеПоУмолчанию);
		
	КонецЦикла;
	
	ПоляПриемника = Новый Структура; // как в Правиле
	
	Для Каждого ОписаниеРазреза Из ЛишняяАналитика Цикл
		ПоляПриемника.Вставить(ОписаниеРазреза.Ключ);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПоляПриемника) Тогда
		// Такое правило бессмысленно
		Возврат Неопределено;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, Имя, "РаспределитьНаРасходы");
	
	Правило.ПоляПриемника = ПоляПриемника;
	
	// База распределения - частный случай распределения - "Перенос".
	// При этом механика распределения не переносит затраты "само-в-себя",
	// поэтому фактически правило подействует только на расходы,
	// в которых заполнены очищаемые поля.
	Правило.БазаРаспределения.Имя = СтрШаблон("БазаРаспределения_%1", Имя);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеЗапроса.ТаблицаДляПомещения = Правило.БазаРаспределения.Имя;
	
	ОператорЗапроса.ВыбираемыеПоля.Добавить("1"); // Число 1
	ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = "База";
	
	Для Каждого ОписаниеРазреза Из ЛишняяАналитика Цикл
		ОператорЗапроса.ВыбираемыеПоля.Добавить("&" + ОписаниеРазреза.Ключ);
		ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = ОписаниеРазреза.Ключ;
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить(ОписаниеРазреза.Ключ, ОписаниеРазреза.Значение);
	КонецЦикла;
	
	Правило.БазаРаспределения.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Правило;
	
КонецФункции

// Процедура используется для создания нескольких правил распределения
//
// Параметры:
//  ПравилаРаспределения	 - ТаблицаЗначений - см. НовыеПравилаРаспределения()
//  Период					 - Дата - конец месяца, за который выполянется расчет
//  Организация				 - Справочник.Организации - организация, по которой выполняется расчет
//  ДетализацияРасходов		 - ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные - определяет расходы, к которым будет применено правило:
//       - Продукция - расходы, отраженные с детализацией до продукции
//                 распределяются на выпуск между различными складами, документами выпуска
//       - НоменклатурныеГруппы - расходы, отраженные с детализацией до номенклатурных групп,
//                 распределяются на выпуск между различными наименованиями продукции, а также - складами, документами выпуска
//  МетодРасчета             - ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов - метод расчета коэффициентов базы распределения:
//       - ОбъемВыпуска          - объем выпуска в количественных показателях
//       - ПлановаяСебестоимость - объем выпуска в стоимостных показателях (при наличии)
//
Процедура ДобавитьПравилоПрямыеРасходыНаВыпуск(Процессор, ДетализацияРасходов, МетодРасчета)
	
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		// Проверим, что такой разрез аналитики используется
		Если Процессор.Аналитика.Найти(ДетализацияРасходов) = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		// Проверим, что настройки предполагают наличие данных для расчета.
		Если Не Процессор.Настройки.ИспользоватьПлановуюСебестоимость Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		
		ИмяДетализацияРасходов = "ПоПродукции";
		Наименование           = НСтр("ru = 'Отнести расходы на выпуск продукции, услуг, работ'");
		
	Иначе
		
		ИмяДетализацияРасходов = "ПоНоменклатурнымГруппам";
		Наименование           = НСтр("ru = 'Распределить расходы на выпуск продукции, услуг, работ'");
		
	КонецЕсли;
	
	Имя = "Выпуск" + ИмяДетализацияРасходов + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета);
	// Например, ВыпускПоПродукцииОбъемВыпуска.
	
	Правило = ДобавитьПравилоРаспределения(Процессор, Имя, "РаспределитьНаСубконто");
	
	Правило.Наименование = Наименование;
	Правило.Описание     = ОписаниеПравилаПрямыеРасходыНаВыпуск(Процессор, ДетализацияРасходов, МетодРасчета);
	
	Правило.Выпуск       = Истина;
	Правило.МетодРасчета = МетодРасчета;
	
	// Правила этого вида используют одни и те же данные - о выпуске продукции и услуг
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения); 
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("Счет",                 "СчетИсточник");
	Правило.ПоляИсточника.Вставить("Подразделение",        "ПодразделениеИсточник");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппаИсточник");
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Правило.ПоляИсточника.Вставить("Продукция",         "ПродукцияИсточник");
	КонецЕсли;
	
	// Шаблон запроса собран из частей так, чтобы был удобен для модификации,
	// но никогда не выполняется в неизменном виде - всегда модифицируется.
	// Не все эти модификации удобны для примерения СхемыЗапроса, поэтому текст модифицируется комбинацией методов.
	// А именно:
	// - имя таблицы условное; ниже устанавливается имя таблицы, в которую помещаются данные
	// - параметр &ИмяПоля не используется; вместо него в поле База устанавливается источник данных в зависимости от МетодРасчета
	// - отбор применяется для МетодРасчета == ПлановаяСебестоимость (потому что он имеет ограничение в таблице ВыпускПродукцииУслуг),
	//   для другого метода отбор удаляется
	// - поле ПродукцияИсточник применяется для ДетализацияРасходов == Продукция;
	//   для другого метода поле удаляется.
	// Поля приемника представлены в виде полного набора субконто
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	Выпуск.ВидДеятельности КАК ВидДеятельности,
	|	Выпуск.СчетИсточник КАК СчетИсточник,
	|	Выпуск.ПодразделениеИсточник КАК ПодразделениеИсточник,
	|	Выпуск.НоменклатурнаяГруппаИсточник КАК НоменклатурнаяГруппаИсточник,
	|	Выпуск.ПродукцияИсточник КАК ПродукцияИсточник,
	|	Выпуск.Счет КАК Счет,
	|	Выпуск.Подразделение КАК Подразделение,
	|	Выпуск.Субконто1 КАК Субконто1,
	|	Выпуск.Субконто2 КАК Субконто2,
	|	Выпуск.Субконто3 КАК Субконто3,
	|	Выпуск.Номенклатура КАК Номенклатура,
	|	&ИмяПоля КАК База
	|ПОМЕСТИТЬ БазаРаспределения
	|ИЗ
	|	ВыпускПродукцииУслуг КАК Выпуск
	|ГДЕ
	|	Выпуск.РазрешеноИспользоватьПлановуюСтоимость";
	
	// Имя поля устанавливаем через замену, остальные модификации - схемой запроса.
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоля", "Выпуск.ПлановаяСтоимость");
	Иначе
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "&ИмяПоля", "Выпуск.Количество");
	КонецЕсли;
		
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ШаблонЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0]; // пакет из одного запроса
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0]; // запрос без объединений
	
	ОписаниеЗапроса.ТаблицаДляПомещения = Правило.БазаРаспределения.Имя;
		
	Если МетодРасчета <> Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		ОператорЗапроса.Отбор.Очистить();
	КонецЕсли;
		
	Если ДетализацияРасходов <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		// без ПродукцияИсточник
		КолонкаПродукция = ОписаниеЗапроса.Колонки.Найти("ПродукцияИсточник");
		ИндексКолонкиПродукция = ОписаниеЗапроса.Колонки.Индекс(КолонкаПродукция);
		ОписаниеЗапроса.Колонки.Удалить(ИндексКолонкиПродукция);
	КонецЕсли;
	
	Правило.БазаРаспределения.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ОписаниеПравилаПрямыеРасходыНаВыпуск(Процессор, ДетализацияРасходов, МетодРасчета)
	
	Если ДетализацияРасходов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		
		// простое описание
		Если Процессор.СвязьПредложенийОписания.Свойство("ЕстьПравилоПрямыеЗатраты") Тогда
			// нюансы не важны - только одно из однотипных правил получит описание
			Возврат "";
		КонецЕсли;
		
		Процессор.СвязьПредложенийОписания.Вставить("ЕстьПравилоПрямыеЗатраты", Истина);// учтем это для правила косвенных
		
		ШаблонОписания = НСтр("ru = 'прямые затраты, отнесенные непосредственно к наименованиям выпущенной продукции, включаются в себестоимость продукции: списываются на %1'");
		
		ПредставлениеСчета = ПредставлениеОткрытогоСпискаСчетов(
			ПланыСчетов.Хозрасчетный.ГотоваяПродукция,
			НСтр("ru = 'счет'"),
			, // форма мн.ч. не нужна
			Процессор.КешПредставленийСчетов);
		
		Описание = СтрШаблон(ШаблонОписания, ПредставлениеСчета);
		
		Возврат Описание;
		
	КонецЕсли;
	
	// при детализации по номенклатурным группам описать может оказаться сложнее
	
	// %1 - может быть уточнено "косвенные"
	// %2 - например, ", отнесенные к подразделениям, по которым отражен выпуск продукции",
	//      см. ТекстУточненияЗатратАналитикойВыпуска и комментарий ниже.
	// %3 - направление списания, счет
	// %4 - база распределения
	ШаблонОписания = НСтр("ru = '%1затраты%2 включаются в себестоимость выпущенной продукции: списываются на %3
                           |такие затраты распределяются между наименованиями выпущенной продукции пропорционально %4
                           |аналогичный порядок применяется для услуг собственным подразделениям'");
	
	// Может быть несколько правил, описываемых этой процедурой. Описания разных таких правил могут отличаться уточнением затрат.
	// Уточнение затрат зависит от того, какие правила этого вида были добавлены по данному счету перед текущим правилом.
	// Для обеспечения этого используются свойства Процессор.СвязьПредложенийОписания.
	//
	// В частности, могут использоваться слова вида:
	//  - "косвенные затраты"                                           - если есть правило списания прямых расходов на выпуск
	//  - "отнесенные к подразделениям, номенклатурным группам..."      - зависит от видов субконто счета и параметра АналитикаИсточника
	//  - "по которым отражен выпуск продукции"                         - см. текст ВидВыпуска
	//  - "...но не указана плановая себестоимость и нет прямых затрат" - например, если одновременно используются правила распределения по плановой себестоимости 
	//    и по прямым затратам
	
	ВидВыпуска     = НСтр("ru = 'отражен выпуск продукции'");
	СчетаСписания = ПланыСчетов.Хозрасчетный.ГотоваяПродукция;
		
	// для частного случая с услугами собственным подразделениям может быть использован дополнительный текст
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		// Предполагается, что правило по плановой себестоимости предшествует правилу без указания плановой себестоимости.
		Процессор.СвязьПредложенийОписания.Вставить("ОбъявленоПравилоДляВыпускаПродукции", Истина);
	ИначеЕсли Процессор.СвязьПредложенийОписания.Свойство("ОбъявленоПравилоДляВыпускаПродукции") Тогда
		
		ШаблонОписания = НСтр("ru = '%1затраты%2 включаются в себестоимость услуг собственным подразделениям: списываются на %3
                               |такие затраты распределяются между потребителями пропорционально %4'");
		ВидВыпуска     = НСтр("ru = 'отражено оказание услуг собственным подразделениям'");
		СчетаСписания  = Процессор.Настройки.СчетаУчета; // Здесь все счета расходов, поскольку речь идет об услугах собственным подразделениям
		
	КонецЕсли;
	
	Если Процессор.СвязьПредложенийОписания.Свойство("ЕстьПравилоПрямыеЗатраты") Тогда
		СловоКосвенные = НСтр("ru = 'косвенные '");
	Иначе
		СловоКосвенные = "";
	КонецЕсли;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		
		ПредставлениеБазыРаспределения = НСтр("ru = 'плановой себестоимости выпуска'");
		
		МодификаторДанныхВыпуска        = НСтр("ru = 'с указанием плановых цен'");
		ПротивопоставлениеДанныхВыпуска = Ложь;
		
		Если Не Процессор.СвязьПредложенийОписания.Свойство("ОстальныеКосвенныеРасходыСДаннымиВыпуска") Тогда
			Процессор.СвязьПредложенийОписания.Вставить("ОстальныеКосвенныеРасходыСДаннымиВыпуска", Новый Массив);
		КонецЕсли;
		Процессор.СвязьПредложенийОписания.ОстальныеКосвенныеРасходыСДаннымиВыпуска.Добавить(
			НСтр("ru = 'не указана плановая себестоимость'"));
			
	Иначе
		
		ПредставлениеБазыРаспределения = НСтр("ru = 'объему выпуска'");
		
		Если Не Процессор.СвязьПредложенийОписания.Свойство("ОстальныеКосвенныеРасходыСДаннымиВыпуска") Тогда
			МодификаторДанныхВыпуска        = "";
			ПротивопоставлениеДанныхВыпуска = Ложь;
		Иначе
			ПротивопоставлениеДанныхВыпуска = Истина; // ", но ..."
			МодификаторДанныхВыпуска        = СтрСоединить(
				Процессор.СвязьПредложенийОписания.ОстальныеКосвенныеРасходыСДаннымиВыпуска,
				НСтр("ru = ' и '"));
		КонецЕсли;
		
	КонецЕсли;
	
	АналитикаИсточника = Новый Массив;
	АналитикаИсточника.Добавить("Подразделение");
	АналитикаИсточника.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	УточнениеЗатрат = ТекстУточненияЗатратАналитикойВыпуска(
		Процессор.Аналитика,
		АналитикаИсточника,
		ВидВыпуска,
		МодификаторДанныхВыпуска,
		ПротивопоставлениеДанныхВыпуска);
	
	ПредставлениеСчетовСписания = ПредставлениеОткрытогоСпискаСчетов(
		СчетаСписания,
		НСтр("ru = 'счет'"),
		НСтр("ru = 'счета'"),
		Процессор.КешПредставленийСчетов);
		
	Возврат СтрШаблон(
		ШаблонОписания,
		СловоКосвенные,
		УточнениеЗатрат,
		ПредставлениеСчетовСписания,
		ПредставлениеБазыРаспределения);

КонецФункции

Процедура ДобавитьПравилоНезавершенноеПроизводство(Процессор)
	
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		// Организация не использует счет 20
		Возврат;
	КонецЕсли;
	
	// Собираем все расходы по номенклатурной группе
	Правило = ДобавитьПравилоСгруппироватьРасходы(
		Процессор,
		"НезавершенноеПроизводство",
		РазрезыНезавершенноеПроизводство());
		
	Если Правило = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило.Наименование = НСтр("ru = 'Сгруппировать расходы на производство'");
	
	Если Не ПустаяСтрока(Процессор.Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска) Тогда
		Правило.Описание = ""; // См. ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризации
	Иначе
		Правило.Описание = НСтр("ru = 'суммы, определенные по результатам инвентаризации незавершенного производства и указанные в документе ""Инвентаризация НЗП"", остаются на счете, не участвуют в дальнейшем распределении'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилоКосвенныеРасходыПоПрямымРасходам(Процессор)
	
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		// Организация не использует счет 20
		Возврат;
	КонецЕсли;
	
	// Распределение выполняется только на ту аналитику, по которой выпущена продукция
	Если Не Процессор.Настройки.ВыпускПродукции Тогда
		Возврат;
	КонецЕсли;
	
	// В случае использования плановой себестоимости см. ДобавитьПравилоПрямыеРасходыНаВыпуск()
	Если Процессор.Настройки.ИспользоватьПлановуюСебестоимость Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим, что данные о прямых расходах на продукцию в принципе могут быть отражены - 
	// такой разрез аналитики используется
	Если Процессор.Аналитика.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "КосвенныеРасходыПоПрямымРасходам", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Распределить расходы, отнесенные на номенклатурные группы без указания продукции, пропорционально прямым расходам'");
	
	Правило.МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты;
	
	ШаблонОписания  = НСтр("ru = 'косвенные затраты%1 распределяются между наименованиями выпущенной продукции пропорционально стоимости прямых затрат'");
	
	АналитикаИсточника = Новый Массив; // см. также ПоляИсточника
	АналитикаИсточника.Добавить("Подразделение");
	АналитикаИсточника.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	
	УточнениеЗатрат = ТекстУточненияЗатратАналитикойВыпуска(Процессор.Аналитика, АналитикаИсточника);
	
	Правило.Описание = СтрШаблон(ШаблонОписания, УточнениеЗатрат);
	
	Если Не Процессор.СвязьПредложенийОписания.Свойство("ОстальныеКосвенныеРасходыСДаннымиВыпуска") Тогда
		Процессор.СвязьПредложенийОписания.Вставить("ОстальныеКосвенныеРасходыСДаннымиВыпуска", Новый Массив);
	КонецЕсли;
	Процессор.СвязьПредложенийОписания.ОстальныеКосвенныеРасходыСДаннымиВыпуска.Добавить(НСтр("ru = 'нет прямых затрат'"));
	
	// Отбор источника
	Правило.ОтборРасходов.Вставить("Продукция", Справочники.Номенклатура.ПустаяСсылка());
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("Счет",                 "Счет");
	Правило.ПоляИсточника.Вставить("Подразделение",        "Подразделение");        // выше упомянуто в описании настройки
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа"); // выше упомянуто в описании настройки
		
	// Поля приемника - представлены в виде аналитики распределения
	Правило.ПоляПриемника.Вставить("Продукция");
	
	// База распределения
	
	// Распределяем только на ту продукцию, что была выпущена.
	// Для этого используем таблицу ВыпускПродукцииУслуг, которая может применяться и в других правилах.
	ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(Правило.БазаРаспределения); 
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_КосвенныеРасходыПоПрямымРасходам" 
		+ УникальноеПредставлениеСсылки(Процессор.Счет);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетПрямыхРасходов", Процессор.Счет);
	
	// Имя таблицы для помещения будет уточнено
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Продукция,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			КОГДА &ТолькоОсобыйПорядокНалогообложения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|			КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|			КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|			КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)) КАК ВидДеятельности,
	|	СУММА(Расходы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПрямыеРасходы
	|ИЗ
	|	Поступления КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Расходы.Счет = СубконтоЗатрат.Счет
	|ГДЕ
	|	Расходы.Счет = &СчетПрямыхРасходов
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|						ТОГДА Расходы.Субконто1
	|					КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|						ТОГДА Расходы.Субконто2
	|					КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|						ТОГДА Расходы.Субконто3
	|				КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расходы.Счет,
	|	Расходы.Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.Номенклатура), ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|			КОГДА &ТолькоОсобыйПорядокНалогообложения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|			КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто1 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|			КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто2 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|			КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ВЫРАЗИТЬ(Расходы.Субконто3 КАК Справочник.СтатьиЗатрат).ВидДеятельностиДляНалоговогоУчетаЗатрат
	|		КОНЕЦ, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|
	|ИМЕЮЩИЕ
	|	СУММА(Расходы.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	НоменклатурнаяГруппа,
	|	Продукция,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.Продукция КАК Продукция,
	|	ПрямыеРасходы.ВидДеятельности КАК ВидДеятельности,
	|	ПрямыеРасходы.Сумма КАК База
	|ПОМЕСТИТЬ БазаРаспределения_КосвенныеРасходыПоПрямымРасходам
	|ИЗ
	|	ВТ_ПрямыеРасходы КАК ПрямыеРасходы
	|ГДЕ
	|	(ПрямыеРасходы.Счет, ПрямыеРасходы.Подразделение, ПрямыеРасходы.НоменклатурнаяГруппа, ПрямыеРасходы.Продукция, ПрямыеРасходы.ВидДеятельности) В
	|			(ВЫБРАТЬ
	|				Выпуск.СчетИсточник,
	|				Выпуск.ПодразделениеИсточник,
	|				Выпуск.НоменклатурнаяГруппаИсточник,
	|				Выпуск.ПродукцияИсточник,
	|				Выпуск.ВидДеятельности
	|			ИЗ
	|				ВыпускПродукцииУслуг КАК Выпуск)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПрямыеРасходы";
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"БазаРаспределения_КосвенныеРасходыПоПрямымРасходам",
		Правило.БазаРаспределения.Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоПрямыеРасходыПоВыручкеОтРеализацииУслуг(Процессор)
	
	// Прямые расходы, связанные с оказанием услуг, отнести на результат с учетом номенклатурных групп
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		// Организация не использует счет 20
		Возврат;
	КонецЕсли;
	
	Если Процессор.Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска <> "ВыпускПродукцииОказаниеУслуг" Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Настройки.ОграничитьРасчетСебестоимостиУслугПлановымиЦенами Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "ВыпускУслуг", "РаспределитьНаСубконто");
	Правило.Наименование = НСтр("ru = 'Списать расходы на производство на результат текущего периода по данным о выручке от реализации услуг'");
	Правило.Выпуск       = Истина;
	
	// Фактическую аналитику не учитываем, так как правило имеет смысл только при использовании номенклатурных групп
	ШаблонОписания = НСтр("ru = 'затраты, отнесенные к номенклатурным группам, по которым отражена выручка от реализации услуг, включаются в себестоимость услуг: списываются на %1'");
	ПредставлениеСчета = ПредставлениеОткрытогоСпискаСчетов(
		ПланыСчетов.Хозрасчетный.СебестоимостьПродаж,
		НСтр("ru = 'счет'"),
		, // форма мн.ч. не нужна
		Процессор.КешПредставленийСчетов);
	Правило.Описание = СтрШаблон(ШаблонОписания, ПредставлениеСчета);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности");
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	
	// База распределения. Поля приемника представлены в виде субконто
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыручкаОтРеализацииУслуг";
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РеализацияУслуг.СчетРасходов КАК Счет,
	|	РеализацияУслуг.Подразделение КАК Подразделение,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РеализацияУслуг.СуммаОборот КАК Сумма
	|ПОМЕСТИТЬ ВТ_ВыручкаОтРеализацииУслуг
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетРасходов <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК РеализацияУслуг
	|ГДЕ
	|	РеализацияУслуг.СуммаОборот > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТ_СубконтоНоменклатурныеГруппыФинансовогоРезультата
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|	И ХозрасчетныйВидыСубконто.Ссылка В
	|			(ВЫБРАТЬ
	|				СчетаРезультата.Счет
	|			ИЗ
	|				ВТ_ВыручкаОтРеализацииУслуг КАК СчетаРезультата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РеализацияУслуг.Счет КАК Счет,
	|	РеализацияУслуг.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 1
	|			ТОГДА РеализацияУслуг.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 2
	|			ТОГДА РеализацияУслуг.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоНоменклатурныеГруппы.НомерСубконто = 3
	|			ТОГДА РеализацияУслуг.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	РеализацияУслуг.Сумма КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ВыручкаОтРеализацииУслуг
	|ИЗ
	|	ВТ_ВыручкаОтРеализацииУслуг КАК РеализацияУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СубконтоНоменклатурныеГруппыФинансовогоРезультата КАК СубконтоНоменклатурныеГруппы
	|		ПО РеализацияУслуг.Счет = СубконтоНоменклатурныеГруппы.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО РеализацияУслуг.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыручкаОтРеализацииУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СубконтоНоменклатурныеГруппыФинансовогоРезультата";
	
КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризации(Процессор)
	
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Процессор.Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(
		Процессор,
		"НезавершенноеПроизводствоБезИнвентаризации",
		"Зафиксировать");
	Правило.Наименование = НСтр("ru = 'При отсутствии данных о выпуске продукции, оказании услуг оставлять затраты в НЗП'");
	
	Правило.Описание     = СтрШаблон(
		НСтр("ru = '%1затраты включаются в стоимость незавершенного производства'"),
		СловоОстальныеЗатратыПоСчету(Процессор));
	
КонецПроцедуры

Процедура ДобавитьПравилоСписатьВсеПрямыеРасходыНаСебестоимостьОказанныхУслуг(Процессор)
	
	// Отнесем прямые расходы на результат.
	Если Процессор.КлассСчетов <> "ПрямыеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Процессор.Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска) Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "СписаниеРасходовНаУслуги", "РаспределитьНаСубконто");
	Правило.Наименование = НСтр("ru = 'Списать затраты, связанные с оказанием услуг, на результат текущего периода'");
	Правило.Выпуск       = Истина;
	
	ПредставлениеСчета = ПредставлениеОткрытогоСпискаСчетов(
		ПланыСчетов.Хозрасчетный.СебестоимостьПродаж,
		НСтр("ru = 'счет'"),
		, // форма мн.ч. не нужна
		Процессор.КешПредставленийСчетов);
		
	Правило.Описание = СтрШаблон(
		НСтр("ru = '%1затраты включаются в себестоимость продаж: ежемесячно списываются на %2'"),
		СловоОстальныеЗатратыПоСчету(Процессор),
		ПредставлениеСчета);
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидДеятельности",      "ВидДеятельности");
	// Нам нужно списать на субконто, взяв номенклатурную группу из аналитики источника.
	// Но способ "РаспределитьНаСубконто" не умеет брать аналитику из источника.
	// Поэтому мы добъемся нужного результата так:
	// включим в базу _все_ номенклатурные группы и свяжем базу с источником по НГ.
	Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
	
	// База распределения
	// Поля приемника представлены в виде субконто
	// Поле Подразделение приемника не заполняем - это сделает логика формирования проводок.
	Правило.БазаРаспределения.Имя = "БазаРаспределения_СписатьНаРезультатОтОказанияУслуг";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД) КАК Счет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности
	|ПОМЕСТИТЬ ВТ_СчетаРезультата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СебестоимостьПродажЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	СчетаСебестоимостьПродаж.ВидДеятельности КАК ВидДеятельности,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК НомерСубконто
	|ПОМЕСТИТЬ ВТ_СчетаРезультатаНомерСубконто
	|ИЗ
	|	ВТ_СчетаРезультата КАК СчетаСебестоимостьПродаж
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО СчетаСебестоимостьПродаж.Счет = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатурныеГруппы.Ссылка КАК НоменклатурнаяГруппа
	|ПОМЕСТИТЬ ВТ_НоменклатурныеГруппы
	|ИЗ
	|	Справочник.НоменклатурныеГруппы КАК НоменклатурныеГруппы
	|ГДЕ
	|	НЕ НоменклатурныеГруппы.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаРезультата.ВидДеятельности КАК ВидДеятельности,
	|	НоменклатурныеГруппы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	СчетаРезультата.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА СчетаРезультата.НомерСубконто = 1
	|			ТОГДА НоменклатурныеГруппы.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СчетаРезультата.НомерСубконто = 2
	|			ТОГДА НоменклатурныеГруппы.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СчетаРезультата.НомерСубконто = 3
	|			ТОГДА НоменклатурныеГруппы.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СписатьНаРезультатОтОказанияУслуг
	|ИЗ
	|	ВТ_НоменклатурныеГруппы КАК НоменклатурныеГруппы,
	|	ВТ_СчетаРезультатаНомерСубконто КАК СчетаРезультата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_НоменклатурныеГруппы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаРезультатаНомерСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаРезультата";
	
КонецПроцедуры

#КонецОбласти

#Область СчетаКосвенныхРасходов // 25, 26

Процедура ДобавитьПравилоДиректКостинг(Процессор)
	
	Если Процессор.КлассСчетов <> "КосвенныеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.Направление <> "СебестоимостьПродаж" Тогда
		Возврат;
	КонецЕсли;
		
	Правило = ДобавитьПравилоРаспределения(Процессор, "ДиректКостинг", "РаспределитьНаСубконто");
	Правило.Наименование       = НСтр("ru = 'Списать расходы на результат текущего периода методом ""Директ-костинг""'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'", Процессор.КодЯзыка);
	
	ПредставлениеСчета = ПредставлениеОткрытогоСпискаСчетов(
		ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы,
		НСтр("ru = 'счет'"),
		, // форма мн.ч. не нужна
		Процессор.КешПредставленийСчетов);
	Правило.Описание = СтрШаблон(
		НСтр("ru = '%1затраты включаются в себестоимость продаж: ежемесячно списываются на %2'"),
		СловоОстальныеЗатратыПоСчету(Процессор),
		ПредставлениеСчета);
	
	УстановитьПравилоСписатьРасходыТекущегоПериода(Правило);
	
КонецПроцедуры

Процедура ДобавитьПравилаКосвенныеРасходыПоНастройке(Процессор)
	
	Если Процессор.КлассСчетов <> "КосвенныеРасходы" Тогда
		Возврат;
	КонецЕсли;
	
	Если Процессор.Закрытие.Направление <> "КалькуляционныйСчет" Тогда
		Возврат;
	КонецЕсли;
	
	ВРазрезеПодразделений = РаспределятьКосвенныеРасходыВРазрезеПодразделений(Процессор);
	
	// Правила добавляем от наиболее частного к общему
	
	// Для детальных правил отбор источника зависит от того, какие поля заполнены в настройке
	ПоляОтбора = СтрРазделить("Подразделение,СтатьяЗатрат", ",");// Заданы в настройке
	
	ПоляОтбораДетальныхНастроек        = Новый Массив;
	БазыРаспределенияДетальныхНастроек = Новый Массив;
	
	КоличествоДетальныхНастроек = Процессор.Закрытие.ДетальнаяНастройка.Количество();
	Для НомерСКонца = 1 По КоличествоДетальныхНастроек Цикл
		
		ДетальнаяНастройка = Процессор.Закрытие.ДетальнаяНастройка[КоличествоДетальныхНастроек - НомерСКонца];
		
		ОтборНастройки = Новый Структура;
		Для Каждого ПолеОтбора Из ПоляОтбора Цикл
			ЗначениеОтбора = ДетальнаяНастройка[ПолеОтбора];
			Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
				ОтборНастройки.Вставить(ПолеОтбора, ЗначениеОтбора);
				Если ПолеОтбора = "СтатьяЗатрат" Тогда
					ПоляОтбораДетальныхНастроек.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
				Иначе
					ПоляОтбораДетальныхНастроек.Добавить(ПолеОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьПравилоКосвенныеРасходыПоНастройке(
			Процессор,
			ДетальнаяНастройка.БазаРаспределения,
			ДетальнаяНастройка.Модификатор,
			ВРазрезеПодразделений,
			ДетальнаяНастройка.Ссылка,
			ОтборНастройки);
			
		Если ДетальнаяНастройка.БазаРаспределения <> Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
			БазыРаспределенияДетальныхНастроек.Добавить(ДетальнаяНастройка.БазаРаспределения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Общее правило
	ДобавитьПравилоКосвенныеРасходыПоНастройке(
		Процессор,
		Процессор.Закрытие.БазаРаспределения,
		Процессор.Закрытие.Модификатор,
		ВРазрезеПодразделений,
		Процессор.Закрытие.Ссылка);
		
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
		БазыРаспределенияДетальныхНастроек,
		Процессор.Закрытие.БазаРаспределения);
		
	ДобавитьОписаниеПравилаКосвенныеРасходыПоНастройке(
		Процессор,
		ПоляОтбораДетальныхНастроек,
		БазыРаспределенияДетальныхНастроек);
	
КонецПроцедуры

Функция РаспределятьКосвенныеРасходыВРазрезеПодразделений(Процессор)
	
	Возврат БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Процессор.Счет,
		ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		
КонецФункции

Процедура ДобавитьПравилоКосвенныеРасходыПоНастройке(Процессор, БазаРаспределения, Модификатор, ВРазрезеПодразделений, Ссылка, Знач ОтборНастройки = Неопределено)
	
	Если БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска 
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость Тогда
		
		ДобавитьПравилоМетодОбъемВыпуска(
			Процессор,
			ОтборНастройки,
			БазаРаспределения,
			ВРазрезеПодразделений,
			Ссылка);
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты 
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты
		Или БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		ДобавитьПравилоМетодСтоимостьРасходов(
			Процессор, 
			ОтборНастройки,
			БазаРаспределения,
			ВРазрезеПодразделений,
			Модификатор,
			Ссылка);
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
		
		Если Модификатор.УчитыватьЗатраты Тогда
			
			ДобавитьПравилоМетодВыручка(
				Процессор,
				ОтборНастройки,
				ВРазрезеПодразделений,
				Модификатор.Счет, 
				Модификатор.Подразделение,
				Ссылка);
			
		КонецЕсли;
		
		Если Не Модификатор.УчитыватьЗатраты 
			Или ЗначениеЗаполнено(Модификатор.Счет) Тогда // Если не удастся распределить по данным о затратах, то попробуем отнести все на услуги
			
			ДобавитьПравилоМетодВыручкаТолькоУслуги(
				Процессор,
				ОтборНастройки,
				Модификатор.Счет, 
				Модификатор.Подразделение,
				Ссылка);
			
		КонецЕсли;
		
	ИначеЕсли БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется Тогда
		
		ДобавитьПравилоНеРаспределять(Процессор, ОтборНастройки, Ссылка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОписаниеПравилаКосвенныеРасходыПоНастройке(Процессор, Знач ПоляОтбораДетальныхНастроек, Знач БазыРаспределенияДетальныхНастроек)
	
	// Описание добавляем только к последнему (общему) правилу.
	// Описание будет содержать краткую сводку о детальных правилах.
	
	Если Не Процессор.СвязьПредложенийОписания.Свойство("ПравилаМетодРасчета") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Процессор.СвязьПредложенийОписания.ПравилаМетодРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексОбщегоПравила = Процессор.СвязьПредложенийОписания.ПравилаМетодРасчета.ВГраница();
	Правило = Процессор.СвязьПредложенийОписания.ПравилаМетодРасчета[ИндексОбщегоПравила];
	
	Если Не ЗначениеЗаполнено(Правило.МетодРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОписания = НСтр("ru = 'затраты включаются в себестоимость %1: %2'"); // ВидРезультата, Направление
	
	Если Не ЗначениеЗаполнено(БазыРаспределенияДетальныхНастроек)
		Или Не ЗначениеЗаполнено(ПоляОтбораДетальныхНастроек) Тогда
		КороткийШаблон = Истина;
		ШаблонОписания = ШаблонОписания + Символы.ПС + НСтр("ru = 'база распределения - %3'"); // МетодРасчета
	Иначе
		КороткийШаблон = Ложь;
		ШаблонОписания = ШаблонОписания + Символы.ПС + 
			НСтр("ru = 'основная база распределения - %3, для отдельных %4 - %5'");// ПоляОтбораДетальныхНастроек, БазыРаспределенияДетальныхНастроек
	КонецЕсли;
	
	ВидРезультата = ?(Процессор.Настройки.ВыпускПродукции, НСтр("ru = 'продукции, услуг'"), НСтр("услуг"));
	
	// Направление
	КалькуляционныеСчета = Новый Массив;
	
	Если Правило.МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
		
		Если Правило.БазаРаспределения.ПараметрыЗапроса.Свойство("Счет")
			И ЗначениеЗаполнено(Правило.БазаРаспределения.ПараметрыЗапроса.Счет) Тогда
			КалькуляционныеСчета.Добавить(Правило.БазаРаспределения.ПараметрыЗапроса.Счет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КалькуляционныеСчета) Тогда
		СчетаПрямыхРасходов = УчетЗатрат.СчетаРасходов(УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
		Для Каждого Счет Из Процессор.Настройки.СчетаУчета Цикл
			Если СчетаПрямыхРасходов.Найти(Счет) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КалькуляционныеСчета.Добавить(Счет);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КалькуляционныеСчета) Тогда
		КалькуляционныеСчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	КонецЕсли;
	
	АналитикаКалькуляционныхСчетов = Новый Соответствие;
	Для Каждого Счет Из КалькуляционныеСчета Цикл
		АналитикаСчета = Процессор.Настройки.Аналитика[Счет];
		Если Не ЗначениеЗаполнено(АналитикаСчета) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого РазрезАналитики Из АналитикаСчета Цикл
			АналитикаКалькуляционныхСчетов.Вставить(РазрезАналитики, Истина);
		КонецЦикла;
	КонецЦикла;
	
	АналитикаРаспределения = Новый Массив;
	Для Каждого ОписаниеПоля Из Правило.ПоляПриемника Цикл
		РазрезАналитики = РазрезАналитикиПоИмениПоля(ОписаниеПоля.Ключ);
		Если Не ЗначениеЗаполнено(РазрезАналитики) Тогда
			Продолжить;
		КонецЕсли;
		Если АналитикаКалькуляционныхСчетов[РазрезАналитики] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		АналитикаРаспределения.Добавить(РазрезАналитикиТворительныйПадеж(РазрезАналитики));
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АналитикаРаспределения) Тогда
		
		ПредставлениеСпискаСчетов = ПредставлениеОткрытогоСпискаСчетов(
			КалькуляционныеСчета,
			НСтр("ru = 'счета'"),// родительный падеж
			НСтр("ru = 'счетов'"),
			Процессор.КешПредставленийСчетов);
			
		Направление = СтрШаблон(
			НСтр("ru = 'распределяются между %1 %2'"),
			ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(АналитикаРаспределения),
			ПредставлениеСпискаСчетов);
	Иначе
			
		ПредставлениеСпискаСчетов = ПредставлениеОткрытогоСпискаСчетов(
			КалькуляционныеСчета,
			НСтр("ru = 'счет'"),
			НСтр("ru = 'счета'"),
			Процессор.КешПредставленийСчетов);// винительный падеж
			
		Если КалькуляционныеСчета.Количество() = 1 Тогда
			Направление = СтрШаблон(НСтр("ru = 'списываются на %1'"), ПредставлениеСпискаСчетов);
		Иначе
			Направление = СтрШаблон(НСтр("ru = 'распределяются на %1'"), ПредставлениеСпискаСчетов);
		КонецЕсли;
		
	КонецЕсли;

	Если КороткийШаблон Тогда
		Правило.Описание = СтрШаблон(ШаблонОписания, ВидРезультата, Направление, Правило.МетодРасчета);
		Возврат;
	КонецЕсли;
		
	// ПоляОтбораДетальныхНастроек, БазыРаспределенияДетальныхНастроек
	ПоляОтбораДетальныхНастроек = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПоляОтбораДетальныхНастроек);
	ПредставлениеПолейОтбораДетальныхНастроек = Новый Массив;
	Для Каждого РазрезАналитики Из ПоляОтбораДетальныхНастроек Цикл
		ПредставлениеПолейОтбораДетальныхНастроек.Добавить(РазрезАналитикиРодительныйПадеж(РазрезАналитики));
	КонецЦикла;
	ПредставлениеПолейОтбораДетальныхНастроек = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставлениеПолейОтбораДетальныхНастроек);
	
	БазыРаспределенияДетальныхНастроек = ОбщегоНазначенияКлиентСервер.СвернутьМассив(БазыРаспределенияДетальныхНастроек);
	ПредставлениеБазРаспределенияДетальныхНастроек = ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(БазыРаспределенияДетальныхНастроек);
	
	Правило.Описание = СтрШаблон(
		ШаблонОписания,
		ВидРезультата,
		Направление,
		Правило.МетодРасчета,
		ПредставлениеПолейОтбораДетальныхНастроек,
		ПредставлениеБазРаспределенияДетальныхНастроек);
	
КонецПроцедуры

#Область ПредопределенныеМетодыРасчетаБазыРаспределения // Предопределенные методы расчета базы распределения косвенных расходов

Функция РазрезыРаспределенияКосвенныхРасходов(ВРазрезеПодразделений)
	
	РазрезыРаспределения = Новый Структура;
	РазрезыРаспределения.Вставить("ВидДеятельности", "ВидДеятельности");
	Если ВРазрезеПодразделений Тогда
		РазрезыРаспределения.Вставить("Подразделение", "Подразделение");
	КонецЕсли;
	
	Возврат РазрезыРаспределения;
	
КонецФункции

Функция ПоляБазыКосвенныхРасходов()
	
	ПоляПриемника = Новый Структура;
	ПоляПриемника.Вставить("Счет");
	ПоляПриемника.Вставить("Подразделение");
	ПоляПриемника.Вставить("НоменклатурнаяГруппа");
	
	Возврат ПоляПриемника;
	
КонецФункции

Функция ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка)
	
	// См. ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()
	
	Правило = ДобавитьПравилоРаспределения(
		Процессор,
		"Метод" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета),
		"РаспределитьНаРасходы");
		
	Правило.СодержаниеПроводки = НСтр("ru = 'Распределение ОПР и ОХР'", Процессор.КодЯзыка);
	
	Правило.Настройка     = Ссылка;
	Правило.МетодРасчета  = МетодРасчета;
	Если ЗначениеЗаполнено(ОтборРасходов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	КонецЕсли;
	
	Правило.ПоляИсточника = РазрезыРаспределенияКосвенныхРасходов(ВРазрезеПодразделений);
	Правило.ПоляПриемника = ПоляБазыКосвенныхРасходов();
	
	Если Не Процессор.СвязьПредложенийОписания.Свойство("ПравилаМетодРасчета") Тогда
		Процессор.СвязьПредложенийОписания.Вставить("ПравилаМетодРасчета", Новый Массив);
	КонецЕсли;
	Процессор.СвязьПредложенийОписания.ПравилаМетодРасчета.Добавить(Правило);
	
	Возврат Правило;
	
КонецФункции

Процедура ДобавитьПравилоМетодОбъемВыпуска(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка)
	
	Правило = ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по базе, основанной на объеме выпуска'");
	
	// Используется одинаковый запрос,
	// в качестве параметра передается метод расчета
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("МетодРасчета", МетодРасчета);
	Правило.БазаРаспределения.Имя = "БазаРаспределения_" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета);
	
	// Выпуск продукции - это всегда ОсновнаяСистемаНалогообложения
	// "ИмяБазыРаспределения" будет заменено на фактическое имя
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	Выпуск.СчетЗатрат КАК Счет,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА Выпуск.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ВЫБОР
	|			КОГДА &МетодРасчета = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска)
	|				ТОГДА Выпуск.КоличествоОборот
	|			ИНАЧЕ Выпуск.ПлановаяСтоимостьОборот
	|		КОНЕЦ) КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК Выпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Выпуск.СчетСписания = СчетаДоходовИРасходовЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО Выпуск.СчетЗатрат = Хозрасчетный.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	Выпуск.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА Выпуск.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ,
	|	Выпуск.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"ИмяБазыРаспределения",
		Правило.БазаРаспределения.Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоМетодСтоимостьРасходов(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, ОтборБазы, Ссылка)
	
	// Используется одинаковый запрос (см. ниже)
	// Особенности каждого метода:
	ВидРасходов        = Неопределено;
	СтатьиЗатрат       = Неопределено;
	ВсеСтатьиЗатрат    = Ложь;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.МатериальныеЗатраты Тогда
		ВидРасходов        = Перечисления.ВидыРасходовНУ.МатериальныеРасходы;
	ИначеЕсли МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ОплатаТруда Тогда
		ВидРасходов        = Перечисления.ВидыРасходовНУ.ОплатаТруда;
	ИначеЕсли МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		СтатьиЗатрат       = ОтборБазы;
	Иначе // Все прямые расходы
		ВсеСтатьиЗатрат    = Истина;
	КонецЕсли;
	
	Если МетодРасчета = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		// База определяется списком статей затрат
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		Для Каждого СтатьяЗатрат Из ОтборБазы Цикл
			ХешированиеДанных.Добавить(XMLСтрока(СтатьяЗатрат));
		КонецЦикла;
		Имя = "БазаРаспределения_" + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	Иначе
		Имя = "БазаРаспределения_" + ОбщегоНазначения.ИмяЗначенияПеречисления(МетодРасчета);
	КонецЕсли;
	
	// Общее для всех методов
	ПараметрыВременныхТаблиц = Новый Структура;
	ПараметрыВременныхТаблиц.Вставить("ВидРасходов",     ВидРасходов);
	ПараметрыВременныхТаблиц.Вставить("СтатьиЗатрат",    СтатьиЗатрат);
	ПараметрыВременныхТаблиц.Вставить("ВсеСтатьиЗатрат", ВсеСтатьиЗатрат);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ПараметрыВременныхТаблиц.Вставить("ВидыСубконто", ВидыСубконто);
	
	// В отличие от большинства других правил, это правило для расчета базы использует "внешние данные" - 
	// временную таблицу Поступления, которая записана в менеджер временных таблиц 
	// до создания схемы распределения.
	// Потому что для этой базы нужны данные о расходах "извне" с детализацией до корсчета,
	// получать их ресурсоемко и мы их уже получили.
	//
	// Это правило предполагает, что в бухгалтерском и налоговом учете может использоваться разные базы распределения.
	// Поэтому поместим сразу во временные таблицы и данные налогового учета.
	// Таблица ИмяБазыРаспределения_ПрямыеРасходы используется в ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ()
	СоздатьВременныеТаблицы = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_СтатьиЗатрат
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.Ссылка В(&СтатьиЗатрат)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатьиЗатрат.Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = &ВидРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расходы.Счет КАК Счет,
	|	Расходы.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто1
	|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто2
	|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|					ТОГДА Расходы.Субконто3
	|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат,
	|	Расходы.КорСчет КАК КорСчет,
	|	Расходы.Сумма КАК База,
	|	Расходы.СуммаНУ КАК БазаНУ
	|ПОМЕСТИТЬ ВТ_ПрямыеРасходы
	|ИЗ
	|	Поступления КАК Расходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалькуляционныеСчета КАК КалькуляционныеСчета
	|		ПО Расходы.Счет = КалькуляционныеСчета.Счет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Расходы.Счет = СубконтоЗатрат.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ПрямыеРасходы.КорСчет КАК КорСчет,
	|	ПрямыеРасходы.СтатьяЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		ИНАЧЕ ЕСТЬNULL(ПрямыеРасходы.СтатьяЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|	КОНЕЦ КАК ВидДеятельности,
	|	ПрямыеРасходы.База КАК База,
	|	ПрямыеРасходы.БазаНУ КАК БазаНУ
	|ПОМЕСТИТЬ ИмяБазыРаспределения_ПрямыеРасходы
	|ИЗ
	|	ВТ_ПрямыеРасходы КАК ПрямыеРасходы
	|ГДЕ
	|	(&ВсеСтатьиЗатрат
	|			ИЛИ ПрямыеРасходы.СтатьяЗатрат В
	|				(ВЫБРАТЬ
	|					СтатьиЗатрат.СтатьяЗатрат
	|				ИЗ
	|					ВТ_СтатьиЗатрат КАК СтатьиЗатрат))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	Подразделение,
	|	ВидДеятельности,
	|	НоменклатурнаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПрямыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтатьиЗатрат";
	
	СоздатьВременныеТаблицы = СтрЗаменить(СоздатьВременныеТаблицы,    "ИмяБазыРаспределения", Имя);
	
	
	Правило = ДобавитьПравилоМетодРасчета(Процессор, ОтборРасходов, МетодРасчета, ВРазрезеПодразделений, Ссылка);
	// См. ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()

	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по базе, основанной на величине прямых расходов'");
	
	Правило.БазаРаспределения.Вставить("ПакетВременныхТаблиц",       Имя);
	Правило.БазаРаспределения.Вставить("СоздатьВременныеТаблицы",    СоздатьВременныеТаблицы);
	Правило.БазаРаспределения.Вставить("ПараметрыВременныхТаблиц",   ПараметрыВременныхТаблиц);
	
	Правило.БазаРаспределения.Имя = Имя;
	// Имя таблицы в тексте запроса далее будет заменено
	// Текст запроса также используется в ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ()
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрямыеРасходы.ВидДеятельности КАК ВидДеятельности,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ПрямыеРасходы.База) КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	ИмяБазыРаспределения_ПрямыеРасходы КАК ПрямыеРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрямыеРасходы.Счет,
	|	ПрямыеРасходы.Подразделение,
	|	ПрямыеРасходы.ВидДеятельности,
	|	ПрямыеРасходы.НоменклатурнаяГруппа
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПрямыеРасходы.База) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"ИмяБазыРаспределения",
		Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоМетодВыручка(Процессор, ОтборРасходов, ВРазрезеПодразделений, СчетПрямыхЗатрат, ПодразделениеЗатрат, Ссылка)
	
	// Цитата из методических материалов:
	// Выручка - распределение по номенклатурным группам, которые: 
	// - одновременно указаны в оборотах счетов 20,23 и в документах Реализация (акт, накладная) на закладке "Услуги" 
	//   (при условии, что в учетной политике на закладке "Производство" для услуг сторонним организациям выбран метод "По выручке"),
	// - одновременно указаны в оборотах счетов 20,23 и в оборотах счета 90.02 в корреспонденции со счетом 43 (реализация продукции), 
	//    указаны в документах Реализация (акт, накладная) на закладке "Услуги" при условии, что: 
	//     в учетной политике на закладке "Производство" для услуг сторонним организациям выбран метод "По выручке", 
	//     в регистре заполнены колонки "Счет прямых затрат", "Подразделение затрат".
	
	// Эта база уникальная для каждого правила, однако для ее создания используются одни и те же данные.
	// Для того, чтобы эти данные не получать многократно, сначала создается временная таблица ВыручкаПоАналитикеВыпуска, 
	// которая используется для всех правил с таким методом расчета
	
	ПараметрыВременныхТаблиц = Новый Структура;
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	ПараметрыВременныхТаблиц.Вставить("ВидыСубконто", ВидыСубконто);
	
	СоздатьВременныеТаблицы = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаВыручки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|			ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_НДС)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетВыручки,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) - ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТ_ВыручкаПродукцииБезНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВыручки.Счет
	|				ИЗ
	|					ВТ_СчетаВыручки),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	ВыручкаПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(ВыручкаПродукции.СуммаБезНДС) КАК Сумма
	|ПОМЕСТИТЬ ВТ_Выручка
	|ИЗ
	|	ВТ_ВыручкаПродукцииБезНДС КАК ВыручкаПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВыручкаПродукции.СчетВыручки = СчетаДоходовИРасходовЕНВД.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	ВыручкаПродукции.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Подразделение, &ПустоеПодразделение) КАК Подразделение,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	ХозрасчетныйОбороты.Субконто2 КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ВТ_ПрямыеРасходы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					КалькуляционныеСчета.Счет
	|				ИЗ
	|					КалькуляционныеСчета),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, &ПустоеПодразделение),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					КалькуляционныеСчета.Счет
	|				ИЗ
	|					КалькуляционныеСчета),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтатьяЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.СчетЗатрат КАК Счет,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА ВыпускПродукции.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыпускПродукции.СчетСписания КАК СчетСписания
	|ПОМЕСТИТЬ ВТ_ВыпускПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И НоменклатурнаяГруппа В
	|					(ВЫБРАТЬ
	|						ВТ_Выручка.НоменклатурнаяГруппа
	|					ИЗ
	|						ВТ_Выручка)) КАК ВыпускПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВыпускПродукции.СчетЗатрат = Хозрасчетный.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	ПрямыеРасходы.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		ИНАЧЕ ЕСТЬNULL(СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат, ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения))
	|	КОНЕЦ КАК ВидДеятельности
	|ПОМЕСТИТЬ ВТ_АналитикаПрямыхРасходов
	|ИЗ
	|	ВТ_ПрямыеРасходы КАК ПрямыеРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|		ПО ПрямыеРасходы.СтатьяЗатрат = СтатьиЗатрат.Ссылка
	|ГДЕ
	|	(СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты)
	|			ИЛИ &ТолькоОсновнаяСистемаНалогообложения
	|			ИЛИ &ТолькоОсобыйПорядокНалогообложения)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.Счет,
	|	ВыпускПродукции.Подразделение,
	|	ВыпускПродукции.НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ВыпускПродукции КАК ВыпускПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО ВыпускПродукции.СчетСписания = СчетаДоходовИРасходовЕНВД.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НоменклатурнаяГруппа,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выручка.ВидДеятельности КАК ВидДеятельности,
	|	Выручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ПрямыеРасходы.Счет КАК Счет,
	|	ПрямыеРасходы.Подразделение КАК Подразделение,
	|	Выручка.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВыручкаПоАналитикеВыпуска
	|ИЗ
	|	ВТ_Выручка КАК Выручка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикаПрямыхРасходов КАК ПрямыеРасходы
	|		ПО Выручка.ВидДеятельности = ПрямыеРасходы.ВидДеятельности
	|			И Выручка.НоменклатурнаяГруппа = ПрямыеРасходы.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаВыручки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыручкаПродукцииБезНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Выручка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПрямыеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыпускПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АналитикаПрямыхРасходов";
	
	Правило = ДобавитьПравилоМетодРасчета(
		Процессор,
		ОтборРасходов,
		Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка,
		ВРазрезеПодразделений,
		Ссылка);
	
	Правило.БазаРаспределения.Вставить("ПакетВременныхТаблиц",       "Выручка");
	Правило.БазаРаспределения.Вставить("СоздатьВременныеТаблицы",    СоздатьВременныеТаблицы);
	Правило.БазаРаспределения.Вставить("ПараметрыВременныхТаблиц",   ПараметрыВременныхТаблиц);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по данным о выручке'");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		АналитикаЗаданаНастройкой = ЗначениеЗаполнено(СчетПрямыхЗатрат) И ЗначениеЗаполнено(ПодразделениеЗатрат);// Не допускаем пустое подразделение затрат для 25 счета
	Иначе
		АналитикаЗаданаНастройкой = ЗначениеЗаполнено(СчетПрямыхЗатрат);
	КонецЕсли;
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("АналитикаЗаданаНастройкой", АналитикаЗаданаНастройкой);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетНастройки",             СчетПрямыхЗатрат);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ПодразделениеНастройки",    ПодразделениеЗатрат);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыручкаПоАналитикеВыпуска.ВидДеятельности КАК ВидДеятельности,
	|	ВыручкаПоАналитикеВыпуска.Подразделение КАК Подразделение,
	|	ВыручкаПоАналитикеВыпуска.Счет КАК Счет,
	|	ВыручкаПоАналитикеВыпуска.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	ВыручкаПоАналитикеВыпуска.Сумма КАК База
	|ПОМЕСТИТЬ %ИмяБазыРаспределения%
	|ИЗ
	|	ВыручкаПоАналитикеВыпуска КАК ВыручкаПоАналитикеВыпуска
	|%ГДЕ%
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
		
	Если Не АналитикаЗаданаНастройкой Тогда
		Условие = "";
		Правило.БазаРаспределения.Имя = "БазаРаспределения_Выручка";
	Иначе
		
		// База уникальна для каждого сочетания счета и подразделения в настройке
		Правило.БазаРаспределения.Имя = "БазаРаспределения_Выручка_" 
			+ УникальноеПредставлениеСсылки(СчетПрямыхЗатрат)
			+ УникальноеПредставлениеСсылки(ПодразделениеЗатрат);
		
		Если ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
			// Настройка выполнена для счета и подразделения
			Условие =
			"ГДЕ
			|	ВыручкаПоАналитикеВыпуска.Счет = &СчетНастройки
			|	И ВыручкаПоАналитикеВыпуска.Подразделение = &ПодразделениеНастройки";
		Иначе 
			// Настройка выполнена только для счета
			Условие =
			"ГДЕ
			|	ВыручкаПоАналитикеВыпуска.Счет = &СчетНастройки";
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ГДЕ%", Условие);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяБазыРаспределения%", Правило.БазаРаспределения.Имя);
	Правило.БазаРаспределения.ТекстЗапроса = ТекстЗапроса;

КонецПроцедуры

Процедура ДобавитьПравилоМетодВыручкаТолькоУслуги(Процессор, ОтборРасходов, Знач СчетПрямыхЗатрат, Знач ПодразделениеЗатрат, Ссылка)
	
	// Косвенные расходы распределяются на счет 20 между номенклатурными группами пропорционально выручке от реализации услуг.
	
	// Эта база уникальная для каждого правила, однако для ее создания используются одни и те же данные.
	// Для того, чтобы эти данные не получать многократно, сначала создается временная таблица Выручка,
	// которая используется для всех правил с таким методом расчета
	
	СоздатьВременныеТаблицы =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаВыручки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаНДС
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_НДС))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетКт КАК Счет,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_СуммыВыручки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаВыручки.Счет
	|			ИЗ
	|				ВТ_СчетаВыручки)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.НомерСтроки,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаВыручки.Счет
	|			ИЗ
	|				ВТ_СчетаВыручки)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетДт КАК Счет,
	|	Хозрасчетный.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_СуммыНДС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНДС.Счет
	|			ИЗ
	|				ВТ_СчетаНДС)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.НомерСтроки,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт В
	|			(ВЫБРАТЬ
	|				ВТ_СчетаНДС.Счет
	|			ИЗ
	|				ВТ_СчетаНДС)
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Регистратор ССЫЛКА Документ.РеализацияУслугПоПереработке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияУслуг.СчетРасходов КАК Счет,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	РеализацияУслуг.СуммаОборот КАК СуммаБезНДС
	|ПОМЕСТИТЬ ВТ_ВыручкаОтРеализацииУслуг
	|ИЗ
	|	РегистрНакопления.РеализацияУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК РеализацияУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыВыручки.Счет,
	|	ХозрасчетныйСубконто.Значение,
	|	СУММА(СуммыВыручки.Сумма)
	|ИЗ
	|	ВТ_СуммыВыручки КАК СуммыВыручки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО СуммыВыручки.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И СуммыВыручки.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|ГДЕ
	|	ХозрасчетныйСубконто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыВыручки.Счет,
	|	ХозрасчетныйСубконто.Значение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыНДС.Счет,
	|	ХозрасчетныйСубконто.Значение,
	|	СУММА(-СуммыНДС.Сумма)
	|ИЗ
	|	ВТ_СуммыНДС КАК СуммыНДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО СуммыНДС.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И СуммыНДС.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|ГДЕ
	|	ХозрасчетныйСубконто.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет)
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыНДС.Счет,
	|	ХозрасчетныйСубконто.Значение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	РеализацияУслуг.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	СУММА(РеализацияУслуг.СуммаБезНДС) КАК Сумма
	|ПОМЕСТИТЬ ВыручкаОтРеализацииУслуг
	|ИЗ
	|	ВТ_ВыручкаОтРеализацииУслуг КАК РеализацияУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО РеализацияУслуг.Счет = СчетаДоходовИРасходовЕНВД.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	РеализацияУслуг.НоменклатурнаяГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВыручкаОтРеализацииУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаВыручки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СуммыВыручки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СуммыНДС";
	
	Правило = ДобавитьПравилоМетодРасчета(
		Процессор,
		ОтборРасходов,
		Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка, // Не в разрезе подразделений
		Ложь,
		Ссылка); 
	
	Правило.БазаРаспределения.Вставить("ПакетВременныхТаблиц",       "ВыручкаТолькоУслуги");
	Правило.БазаРаспределения.Вставить("СоздатьВременныеТаблицы",    СоздатьВременныеТаблицы);
	Правило.БазаРаспределения.Вставить("ПараметрыВременныхТаблиц",   Новый Структура);
	
	Правило.Наименование = НСтр("ru = 'Распределить косвенные расходы по данным о выручке'");
	
	Если Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
		// Подразделение возьмем из источника, а не из базы
		Правило.ПоляПриемника.Удалить("Подразделение");
	КонецЕсли;
	
	// Если в "методах распределения косвенных расходов" задан счет затрат, то затраты будут отнесены на заданный счет.
	// Если не задан - то на предопределенный счет 20.01
	Если Не ЗначениеЗаполнено(СчетПрямыхЗатрат) Тогда
		СчетПрямыхЗатрат = ПланыСчетов.Хозрасчетный.ОсновноеПроизводство;
	КонецЕсли;
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Счет",          СчетПрямыхЗатрат);
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("Подразделение", ПодразделениеЗатрат);
	
	// База уникальна для каждого сочетания аналитики приемника в настройке
	Если Не ЗначениеЗаполнено(СчетПрямыхЗатрат) И Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыручкаТолькоУслуги";
	Иначе
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВыручкаТолькоУслуги_"
			+ УникальноеПредставлениеСсылки(СчетПрямыхЗатрат)
			+ УникальноеПредставлениеСсылки(ПодразделениеЗатрат);
	КонецЕсли;
	
	// Имя базы может быть уточнено
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Выручка.ВидДеятельности КАК ВидДеятельности,
	|	&Подразделение КАК Подразделение,
	|	&Счет КАК Счет,
	|	Выручка.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	Выручка.Сумма КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	ВыручкаОтРеализацииУслуг КАК Выручка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДеятельности,
	|	Подразделение";
	// Индекс определяется, чтобы был универсальным для РазрезыРаспределенияКосвенныхРасходов()
	
	Правило.БазаРаспределения.ТекстЗапроса = СтрЗаменить(
		Правило.БазаРаспределения.ТекстЗапроса,
		"ИмяБазыРаспределения",
		Правило.БазаРаспределения.Имя);
	
КонецПроцедуры

Процедура ДобавитьПравилоНеРаспределять(Процессор, ОтборРасходов, Ссылка)
	
	Правило = ДобавитьПравилоРаспределения(Процессор, "НеРаспределять", "Зафиксировать");
	Правило.Наименование = НСтр("ru = 'Не распределять расходы: следует распределить вручную'");
	
	Правило.Настройка     = Ссылка;
	Правило.МетодРасчета  = Перечисления.БазыРаспределенияКосвенныхРасходов.НеРаспределяется;
	Если ЗначениеЗаполнено(ОтборРасходов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РасходыНаПродажу // 44

Процедура ДобавитьПравилаТранспортныеРасходы(Процессор)
	
	Если Процессор.КлассСчетов <> "РасходыНаПродажу" Тогда
		Возврат;
	КонецЕсли;
	
	// Зафиксируем часть транспортных расходов (пропорционально остатку товара на складе):
	// - сначала разделим сумму расходов на относящиеся к остаткам реализованных и нереализованных товаров
	// - затем оградим их от списания
	
	// 1. Применим пропорцию
	Правило = ДобавитьПравилоРаспределения(Процессор, "РаспределитьТранспортныеРасходы", "РаспределитьНаРасходы");
	Правило.Наименование = НСтр("ru = 'Распределить транспортные расходы'");
	
	Правило.Описание = НСтр("ru = 'стоимость доставки приобретенных товаров остается на счете в доле, соответствующей остатку нереализованных товаров'");
	
	// Отбор источника
	Правило.ОтборРасходов.Вставить("Счет",          Процессор.Счет);
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	
	// Поля приемника - представлены в виде аналитики распределения
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	
	// База распределения
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ТранспортныеРасходы";
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДолиСписанияКосвенныхРасходов.ДоляТранспортныхРасходов КАК Доля
	|ПОМЕСТИТЬ ДоляТранспортныхРасходовТекущегоПериода
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
	|ГДЕ
	|	ДолиСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
	|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ДоляТранспортныхРасходовТекущегоПериода.Доля КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ТранспортныеРасходы
	|ИЗ
	|	ДоляТранспортныхРасходовТекущегоПериода КАК ДоляТранспортныхРасходовТекущегоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ТранспортныеРасходы),
	|	1 - ДоляТранспортныхРасходовТекущегоПериода.Доля
	|ИЗ
	|	ДоляТранспортныхРасходовТекущегоПериода КАК ДоляТранспортныхРасходовТекущегоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоляТранспортныхРасходовТекущегоПериода";
	
	// 2. Оградим от списания транспортные расходы, относящиеся к остаткам нереализованных товаров
	Правило = ДобавитьПравилоРаспределения(Процессор, "ТранспортныеРасходыБудущихПериодов", "Зафиксировать");
	Правило.Наименование = НСтр("ru = 'Не списывать транспортные расходы, относящиеся к остаткам нереализованных товаров'");
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ", Перечисления.ВидыРасходовНУ.ТранспортныеРасходы);
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
	
КонецПроцедуры

Процедура ДобавитьПравилоРасходыНаПродажу(Процессор)
	
	Если Процессор.КлассСчетов <> "РасходыНаПродажу" Тогда
		Возврат;
	КонецЕсли;
	
	// Списываем расходы на продажу (на финансовый результат)
	Правило = ДобавитьПравилоРаспределения(Процессор, "РасходыНаПродажу", "РаспределитьНаСубконто");
	Правило.Наименование       = НСтр("ru = 'Списать расходы на продажу на результат текущего периода'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'");
	
	ПредставлениеСчета = ПредставлениеОткрытогоСпискаСчетов(
		ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу,
		НСтр("ru = 'счет'"),
		, // форма мн.ч. не нужна
		Процессор.КешПредставленийСчетов);
	Правило.Описание = СтрШаблон(
		НСтр("ru = '%1затраты включаются в себестоимость продаж: ежемесячно списываются на %2'"),
		СловоОстальныеЗатратыПоСчету(Процессор),
		ПредставлениеСчета);
	
	// Для разных видов деятельности разные счета приемника
	Правило.ПоляИсточника.Вставить("ВидДеятельности", "ВидДеятельности");
	
	// Поля приемника представлены в виде субконто. В такой базе должны присутствовать все поля
	Правило.БазаРаспределения.Имя = "БазаРаспределения_СписатьРасходыНаПродажу";
	Правило.БазаРаспределения.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|	&ПустоеПодразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД) КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СписатьРасходыНаПродажу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|	&ПустоеПодразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	1";
	
КонецПроцедуры

#КонецОбласти

#Область НалоговыйУчет

Процедура ДобавитьПравилаНалоговогоУчета(ПравилаРаспределения, ГруппыОсновныхПравил, СчетаРасходов, Период, Организация)
	
	ДобавитьПравилаНалоговогоУчетаПоНалогуНаПрибыль(ПравилаРаспределения, ГруппыОсновныхПравил, СчетаРасходов, Период, Организация);
	
	ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения(ПравилаРаспределения, Период, Организация);
	
	ДобавитьПравилоОпределитьВидРасходовНУ(ПравилаРаспределения, Период, Организация);
	
	ДобавитьПравилаУдалитьАналитикуНалоговогоУчета(ПравилаРаспределения, СчетаРасходов);
	
КонецПроцедуры

Процедура ДобавитьПравилоОпределитьВидРасходовНУ(ПравилаРаспределения, Период, Организация)
	
	// Для оптимизации производительности также может устанавливать свойство ВидДеятельности - 
	// в случаях, когда он один.
	//
	// Использование такой комбинации эффективно, поскольку правила определения вида расходов и вида деятельности
	// - выполняются в начале расчета
	// - затрагивают все или почти все комбинации расходов 
	// - каждое создает очередное поколение комбинаций расходов.
	// 
	// Таким образом, объединение в одном правиле позволяет существенно (до 1/3) сократить количество комбинаций расходов,
	// обрабатываемых всеми последующими правилами.
	//
	// См. также ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения
	
	// Применяется перед применением аналитики ВидРасходовНУ
	ПервоеПравилоВидРасходовНУ = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидРасходовНУ");
	
	Если ПервоеПравилоВидРасходовНУ = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	ПозицияПравила = ПравилаРаспределения.Индекс(ПервоеПравилоВидРасходовНУ);
	УстанавливатьВидДеятельности = Ложь;
	
	ТолькоОсновная = УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период);
	ТолькоОсобый   = УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период);
	Если ТолькоОсновная Или ТолькоОсобый Тогда
		
		// Для оптимизации целесообразно выполнить до правила, штатно устанавливающего ВидДеятельности
		ПервоеПравилоВидДеятельности = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидДеятельности");
		Если ПервоеПравилоВидДеятельности <> Неопределено Тогда
			
			УстанавливатьВидДеятельности = Истина;
			
			ПозицияВидДеятельности = ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности);
			ПозицияПравила = Мин(ПозицияПравила, ПозицияВидДеятельности);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Правило = ПравилаРаспределения.Вставить(ПозицияПравила);
	
	УстановитьПравилоРаспределения(Правило, "ОпределитьВидРасходовНУ", "РаспределитьНаРасходы");
	
	Правило.ОтборРасходов.Вставить("ЗавершенаОбработкаНУ", Ложь);
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ",        Перечисления.ВидыРасходовНУ.ПустаяСсылка());
	
	Правило.ПоляИсточника.Вставить("СтатьяЗатрат",         "СтатьяЗатрат");
	
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("ЗавершенаОбработкаНУ");
	Если УстанавливатьВидДеятельности Тогда
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
	КонецЕсли;
	
	Если ТолькоОсобый Тогда
		ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
	Иначе
		ВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения; 
		// Фактически, значение параметра может не использоваться - см. УстанавливатьВидДеятельности
		// Однако, в запросе оно присутствует всегда, чтобы избежать модификации его текста
	КонецЕсли;
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_ОпределитьВидРасходовНУ";
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ВидДеятельности", ВидДеятельности);
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ВидДеятельности КАК ВидДеятельности,
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	СтатьиЗатрат.ВидРасходовНУ КАК ВидРасходовНУ,
	|	ИСТИНА КАК ЗавершенаОбработкаНУ,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_ОпределитьВидРасходовНУ
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ ЕСТЬ НЕ NULL ";
	
КонецПроцедуры

Процедура ДобавитьПравилаНалоговогоУчетаПоНалогуНаПрибыль(ПравилаРаспределения, ГруппыОсновныхПравил, СчетаРасходов, Период, Организация)
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		// Правила применяем только на основной системе налогообложения
		Возврат;
	КонецЕсли;
	
	// 1. Правила непринимаемых и нормируемых - самые первые
	// (перед настраиваемыми в учетной политике правилами закрытия счетов)
	НачалоНабораПравил = ПравилаРаспределения.Количество();
	
	// Очистим сумму НУ, если расходы не учитываются в целях налогообложения
	ДобавитьПравилаРасходыНеУчитываемыеВЦеляхНалогообложения(ПравилаРаспределения);
	
	// Разберемся со сверхнормативными расходами
	ДобавитьПравилаНормируемыеРасходыНалоговогоУчета(ПравилаРаспределения, Период, Организация);
	
	// Сдвинем добавленные правила на первую позицию
	ПозицияНабораПравил = 0;
	Для Индекс = НачалоНабораПравил По ПравилаРаспределения.Количество() - 1 Цикл
		ПравилаРаспределения.Сдвинуть(Индекс, ПозицияНабораПравил - НачалоНабораПравил);
	КонецЦикла;
	
	// 2. Некоторые основные правила могут по-разному применяться в бухгалтерском и налоговом учете,
	//    если для целей бухгалтерского учета расходы включаются в стоимость, а для целей налогового - нет.
	//    Поэтому перед первым таким правилом, действующим на определенный счет, добавим набор правил,
	//    разделяющих прямые и косвенные расходы в соответствии с настройками пользователя.
	
	ЕдиныеПравилаНалоговогоУчета  = ЕдиныеПравилаНалоговогоУчета();
	ОписаниеПравилНалоговогоУчета = НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета();
	
	Для Каждого ГруппаПравил Из ГруппыОсновныхПравил Цикл
		
		Счет = ГруппаПравил.Ключ;
		
		Для Каждого ОсновноеПравило Из ГруппаПравил.Значение Цикл
			
			ЭлементыИмени = СтрРазделить(ОсновноеПравило.Имя, ".");
			Если ЗначениеЗаполнено(ЭлементыИмени) И ЕдиныеПравилаНалоговогоУчета.Найти(ЭлементыИмени[0]) <> Неопределено Тогда
				// разделение на прямые и косвенные по настройкам не требуется
				Продолжить;
			КонецЕсли;
			
			ПрочитатьПравилаОпределенияПрямыхРасходовНалоговогоУчета(ОписаниеПравилНалоговогоУчета, СчетаРасходов, Период, Организация);
			
			// Добавим правила разделения расходов на прямые и косвенные
			НачалоНабораПравил = ПравилаРаспределения.Количество();
			
			// Разделим расходы на прямые и косвенные в налоговом учете
			ДобавитьПравилаПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, ОписаниеПравилНалоговогоУчета, Счет);
			
			// Спишем расходы, которые относятся на расходы текущего периода только в НУ
			ДобавитьПравилоКосвенныеРасходыНалоговогоУчета(ПравилаРаспределения, Счет);
			
			// Сдвинем добавленные правила - поместим их перед основным правилом, потребовавшим выделения косвенных расходов
			ПозицияНабораПравил = ПравилаРаспределения.Индекс(ОсновноеПравило);
			Для Индекс = НачалоНабораПравил По ПравилаРаспределения.Количество() - 1 Цикл
				ПравилаРаспределения.Сдвинуть(Индекс, ПозицияНабораПравил - НачалоНабораПравил);
			КонецЦикла;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// 3. Применение базы, основанной на стоимости прямых расходов, может потребовать раздельного расчета базы
	//    для налогового учета, потому что понятие и оценка прямых расходов в бухгалтерском и налоговом учете могут отличаться
	ПериодНастройкиПрямыхРасходов = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействующейНастройки(
		Период,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
		
	Если ПериодНастройкиПрямыхРасходов <> Неопределено Тогда
		ОсновнойВидНалоговыхРазниц = НалогНаПрибыльБухгалтерскийУчет.ОсновнойВидРазниц(Период, Организация);
		ДобавитьПравилаМетодСтоимостьРасходовНУ(ПравилаРаспределения, ПериодНастройкиПрямыхРасходов, ОсновнойВидНалоговыхРазниц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПравилаНалоговогоУчетаОсобыйПорядокНалогообложения(ПравилаРаспределения, Период, Организация)
	
	// Применяется перед применением аналитики ВидДеятельности
	// Поскольку в процедуре добавляется несколько правил в эту позицию,
	// индекс требуется вычислять каждый раз перед добавлением правила
	ПервоеПравилоВидДеятельности = ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, "ВидДеятельности");
	
	Если ПервоеПравилоВидДеятельности = Неопределено Тогда
		// Не важно
		Возврат;
	КонецЕсли;
	
	ТолькоОсновная = УчетнаяПолитика.ТолькоОсновнаяСистемаНалогообложения(Организация, Период);
	ТолькоОсобый   = УчетнаяПолитика.ТолькоОсобыйПорядокНалогообложения(Организация, Период);
	
	Если ТолькоОсновная Или ТолькоОсобый Тогда
		
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельности", "РаспределитьНаРасходы");
		
		// Исключаем ситуации, когда расходы ошибочно отнесены к заведомо неверному "налоговому виду деятельности"
		// (системе налогообложения).
		// Также отмечаем, что распределение не нужно.
		// Все расходы относим к одному виду деятельности.
		// См. также ДобавитьПравилоОпределитьВидРасходовНУ
		Правило.Наименование = НСтр("ru = 'Отнести к единственному виду деятельности'");
		
		НеправильныеВидыДеятельности = Новый Массив;
		НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		Если ТолькоОсновная Тогда
			НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения);
			ПравильныйВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения;
		Иначе
			НеправильныеВидыДеятельности.Добавить(Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
			ПравильныйВидДеятельности = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения;
		КонецЕсли;
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", НеправильныеВидыДеятельности);
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельности";
		Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ВидДеятельности", ПравильныйВидДеятельности);
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ВидДеятельности КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельности";
		
	Иначе
		
		// 1. Определим виды деятельности косвенным способом.
		//
		// В системе нет четкого признака, по которым расходы можно отнести к тому или иному виду деятельности.
		// Для расходов текущего периода вид деятельности можно определить по статье расходов.
		//
		// Для расходов без указания статьи затрат (в НЗП) вид деятельности можно попробовать угадать:
		// - если по НГ есть расходы в текущем периоде и все эти расходы относятся к ЕНВД, то НЗП по этой НГ тоже относится к ЕНВД
		// - в остальных случаях НЗП относится к деятельности, не облагаемой ЕНВД
		
		// 1.1 Выделим связанные с особым порядком налогообложения (по статье затрат)
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиОсобыйПорядокНалогообложения", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - особый порядок налогообложения'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		Правило.ПоляИсточника.Вставить("СтатьяЗатрат", "СтатьяЗатрат");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиОсобыйПорядокНалогообложения";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиОсобыйПорядокНалогообложения
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат В (ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения), ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты))";
		
		// 1.2 Выделим связанные с особым порядком налогообложения (по расходам периода)
		
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиБезСтатьиЗатрат", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - без статьи затрат'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		Правило.ОтборРасходов.Вставить("СтатьяЗатрат",    Справочники.СтатьиЗатрат.ПустаяСсылка());
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляИсточника.Вставить("Счет",                 "Счет");
		Правило.ПоляИсточника.Вставить("Подразделение",        "Подразделение");
		Правило.ПоляИсточника.Вставить("НоменклатурнаяГруппа", "НоменклатурнаяГруппа");
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиБезСтатьиЗатрат";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расходы.Счет КАК Счет,
		|	Расходы.Подразделение КАК Подразделение,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто1
		|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто2
		|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы)
		|					ТОГДА Расходы.Субконто3
		|			КОНЕЦ КАК Справочник.НоменклатурныеГруппы), ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)) КАК НоменклатурнаяГруппа,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ВЫБОР
		|				КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто1
		|				КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто2
		|				КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
		|					ТОГДА Расходы.Субконто3
		|			КОНЕЦ КАК Справочник.СтатьиЗатрат), ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)) КАК СтатьяЗатрат
		|ПОМЕСТИТЬ ВТ_АналитикаПоступлений
		|ИЗ
		|	Поступления КАК Расходы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
		|		ПО Расходы.Счет = СубконтоЗатрат.Счет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатьяЗатрат
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АналитикаПоступлений.Счет КАК Счет,
		|	АналитикаПоступлений.Подразделение КАК Подразделение,
		|	АналитикаПоступлений.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		|	СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиБезСтатьиЗатрат
		|ИЗ
		|	ВТ_АналитикаПоступлений КАК АналитикаПоступлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|		ПО АналитикаПоступлений.СтатьяЗатрат = СтатьиЗатрат.Ссылка
		|			И (СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_АналитикаПоступлений";
		
		// 1.3 Все остальные отнесем к основной системе
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельностиОсновнаяСистемаНалогообложения", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Определить вид деятельности - основная система налогообложения'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка());
		
		Правило.Действие = "РаспределитьНаРасходы";
		
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельностиОсновнаяСистемаНалогообложения";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельностиОсновнаяСистемаНалогообложения";
		
		// 2. Внесем ясность в отношении распределяемых расходов - каждый расход отнесем к одному из двух видов деятельности
		// Распределяем расходы между видами деятельности пропорционально выручке
		Правило = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПервоеПравилоВидДеятельности));
		УстановитьПравилоРаспределения(Правило, "ВидыДеятельности", "РаспределитьНаРасходы");
		
		Правило.Наименование = НСтр("ru = 'Распределить между видами деятельности'");
		
		Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты);
		
		Правило.Действие = "РаспределитьНаРасходы"; // Поля приемника представлены в виде аналитики распределения
		Правило.ПоляПриемника.Вставить("ВидДеятельности");
		
		Правило.БазаРаспределения.Имя = "БазаРаспределения_ВидыДеятельности";
		Правило.БазаРаспределения.ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДолиСписанияКосвенныхРасходов.ДоляЕНВД КАК Доля
		|ПОМЕСТИТЬ ВТ_ДоляЕНВД
		|ИЗ
		|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиСписанияКосвенныхРасходов
		|ГДЕ
		|	ДолиСписанияКосвенныхРасходов.Организация = &ГоловнаяОрганизация
		|	И ДолиСписанияКосвенныхРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения) КАК ВидДеятельности,
		|	ДоляЕНВД.Доля КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ВидыДеятельности
		|ИЗ
		|	ВТ_ДоляЕНВД КАК ДоляЕНВД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения),
		|	1 - ДоляЕНВД.Доля
		|ИЗ
		|	ВТ_ДоляЕНВД КАК ДоляЕНВД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_ДоляЕНВД";
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет коллекцию правил распределения правилами, устраняющими детализацию,
// используемую преимущественно для задач налогового учета по налогу на прибыль - 
// ВидРасходовНУ, НалоговыйУчет, КорСчет, ЗавершенаОбработкаНУ.
//
// Эти разрезы могут использоваться и для других задач, поэтому ориентируемся не на настройки налогов,
// а на фактическое использование полей в правилах распределения:
// устанавливаем правила удаления аналитики сразу после тех правил, где эти поля используются в последний раз.
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - анализируемая и дополняемая коллекция, см. НовыеПравилаРаспределения
//  СчетаРасходов        - ФиксированныйМассив - счета, данные по которым должны обрабатываться правилами коллекции,
//                         см. УчетЗатрат.СчетаРасходов
//
Процедура ДобавитьПравилаУдалитьАналитикуНалоговогоУчета(ПравилаРаспределения, СчетаРасходов)
	
	КоллекцияПоследнееИспользование = ПоследнееИспользованиеАналитикиНалоговогоУчета(ПравилаРаспределения, СчетаРасходов);
	// Коллекция упорядочена по убыванию индексов правил последнего использования, поэтому правила удаления безопасно добавлять,
	// ориентируясь на этот индекс.
	
	Для Каждого ПоследнееИспользование Из КоллекцияПоследнееИспользование Цикл
		
		Если Не ЗначениеЗаполнено(ПоследнееИспользование.ИспользуемыеПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Правило = ПравилаРаспределения.Вставить(ПоследнееИспользование.ПоследнееИспользование + 1); // За правилом с последним использованием
		Правило.Имя = "УдалитьАналитикуНалоговогоУчета." + СтрСоединить(ПоследнееИспользование.ИспользуемыеПоля, "");
		Правило.Наименование = НСтр("ru = 'Удалить (очистить) аналитику налогового учета по налогу на прибыль'");
		
		Правило.ОтборРасходов.Вставить("Счет", ПоследнееИспользование.Счет);
		
		// Поля приемника
		Правило.Действие = "РаспределитьНаРасходы"; // Поля приемника представлены в виде аналитики распределения
		Для Каждого ИмяПоля Из ПоследнееИспользование.ИспользуемыеПоля Цикл
			Правило.ПоляПриемника.Вставить(ИмяПоля);
		КонецЦикла;
		
		// База распределения - частный случай распределения - "Перенос".
		// При этом механика распределения не переносит затраты "само-в-себя",
		// поэтому фактически правило подействует только на расходы,
		// в которых заполнено любое из полей приемника.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
		|	ИСТИНА КАК ЗавершенаОбработкаНУ,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_УдалитьАналитикуНалоговогоУчета";
		
		Правило.БазаРаспределения  = Новый Структура;
		Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_УдалитьАналитикуНалоговогоУчета");
		Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет последнее в коллекции правил распределения использование каждого разреза аналитики налогового учета по каждому счету (субсчету)
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - анализируемая коллекция, см. НовыеПравилаРаспределения
//  СчетаРасходов        - ФиксированныйМассив - счета, данные по которым должны обрабатываться правилами коллекции,
//                         см. УчетЗатрат.СчетаРасходов
// 
// Возвращаемое значение:
//  ТаблицаЗначений - информация о последнем использовании
// * ПоследнееИспользование - Число - индекс правила, которое для конкретного счета использует разрез (разрезы) аналитики последним
// * ИспользуемыеПоля       - Массив - содержит имена разрезов аналитики
// * Счет                   - ПланСчетовСсылка.Хозрасчетный - счет расходов
//
Функция ПоследнееИспользованиеАналитикиНалоговогоУчета(ПравилаРаспределения, СчетаРасходов)
	
	// Определим, в какой момент нужно удалить каждое из полей.
	// Делаем это независимо для каждого счета.
	
	// При этом считаем использованием аналитики налогового учета любые движения с действием ВыделитьНалоговыйУчет,
	// даже если такая аналитика в них не упоминается явно,
	// поскольку для сокращения распределения с заведомо нулевыми суммами важно избежать распределений с иными действиями
	// между различными правилами с действием ВыделитьНалоговыйУчет (см. комментарий о порядке правил в НовыеПравилаРаспределения)
	
	ГруппыПравил = Новый Соответствие; // Ключ - счет или пустая ссылка; Значение - см. ШаблонАналитикаНалоговогоУчета
	
	ШаблонПоляНалоговогоУчета = Новый Структура; // Ключ - имя поля, Значение - индекс правила, в котором это поле используется последний раз
	ШаблонПоляНалоговогоУчета.Вставить("ВидРасходовНУ",        -1);
	ШаблонПоляНалоговогоУчета.Вставить("НалоговыйУчет",        -1);
	ШаблонПоляНалоговогоУчета.Вставить("КорСчет",              -1);
	ШаблонПоляНалоговогоУчета.Вставить("ЗавершенаОбработкаНУ", -1);
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Счета = ОтобранныеСчетаРасходов(Правило, СчетаРасходов);
		
		Для Каждого Счет Из Счета Цикл
			
			ИспользуемыеПоля = ГруппыПравил[Счет];
			Если ИспользуемыеПоля = Неопределено Тогда
				ИспользуемыеПоля = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ШаблонПоляНалоговогоУчета);
				ГруппыПравил.Вставить(Счет, ИспользуемыеПоля);
			КонецЕсли;
			
			ИндексПравила = ПравилаРаспределения.Индекс(Правило);
			
			Если Правило.Действие = "ВыделитьНалоговыйУчет" Тогда
				Для Каждого ИспользованиеПоля Из ИспользуемыеПоля Цикл
					ИспользуемыеПоля[ИспользованиеПоля.Ключ] = ИндексПравила;
				КонецЦикла;
			Иначе
				Для Каждого ИспользованиеПоля Из ИспользуемыеПоля Цикл
					Если Не ИспользуетсяРазрезАналитики(Правило, ИспользованиеПоля.Ключ) Тогда
						Продолжить;
					КонецЕсли;
					ИспользуемыеПоля[ИспользованиеПоля.Ключ] = ИндексПравила;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сгруппируем потребные правила удаления: если несколько полей нужно удалить одновременно, то это будет одно правило.
	ПоследнееИспользование = Новый ТаблицаЗначений;
	ПоследнееИспользование.Колонки.Добавить("ПоследнееИспользование", Новый ОписаниеТипов("Число"));
	ПоследнееИспользование.Колонки.Добавить("ИспользуемыеПоля",       Новый ОписаниеТипов("Массив"));
	ПоследнееИспользование.Колонки.Добавить("Счет",                   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ПоследнееИспользование.Индексы.Добавить("ПоследнееИспользование,Счет");
	
	Для Каждого ОписаниеГруппыСчетов Из ГруппыПравил Цикл
		
		Отбор = Новый Структура("ПоследнееИспользование,Счет");
		Отбор.Счет = ОписаниеГруппыСчетов.Ключ;
			
		Для Каждого ИспользованиеПоля Из ОписаниеГруппыСчетов.Значение Цикл
			
			Отбор.ПоследнееИспользование = ИспользованиеПоля.Значение;
			ПравилоУдаления = ПоследнееИспользование.НайтиСтроки(Отбор);
			Если ЗначениеЗаполнено(ПравилоУдаления) Тогда
				ПравилоУдаления = ПравилоУдаления[0];
			Иначе
				ПравилоУдаления = ПоследнееИспользование.Добавить();
				ЗаполнитьЗначенияСвойств(ПравилоУдаления, Отбор);
			КонецЕсли;
			
			Если ПравилоУдаления.ИспользуемыеПоля.Найти(ИспользованиеПоля.Ключ) = Неопределено Тогда
				ПравилоУдаления.ИспользуемыеПоля.Добавить(ИспользованиеПоля.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоследнееИспользование.Сортировать("ПоследнееИспользование УБЫВ, Счет УБЫВ");
	
	Возврат ПоследнееИспользование;
	
КонецФункции

Функция ОтобранныеСчетаРасходов(Правило, СчетаРасходов)
	
	Если Не Правило.ОтборРасходов.Свойство("Счет") Тогда
		Возврат СчетаРасходов;
	КонецЕсли;
		
	Счета = Новый Массив;
	Если ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Счета.Добавить(Правило.ОтборРасходов.Счет);
	ИначеЕсли ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("Массив")
		Или ТипЗнч(Правило.ОтборРасходов.Счет) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Счет Из Правило.ОтборРасходов.Счет Цикл
			Если Не ЗначениеЗаполнено(Счет) Тогда
				Продолжить;
			КонецЕсли;
			Счета.Добавить(Счет);
		КонецЦикла;
	КонецЕсли;
	Субсчета = БухгалтерскийУчет.СформироватьМассивСубсчетов(Счета);
	
	// отфильтруем и упорядочим по СчетаРасходов
	Счета = Новый Массив;
	Для Каждого Счет Из СчетаРасходов Цикл
		Если Субсчета.Найти(Счет) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Счета.Добавить(Счет);
	КонецЦикла;
		
	Возврат Счета;

КонецФункции

#Область НалогНаПрибыль

Функция ЕдиныеПравилаНалоговогоУчета()
	
	ЕдиныеПравила = Новый Массив;
	// Всегда прямые
	ЕдиныеПравила.Добавить("РаспределитьТранспортныеРасходы");
	ЕдиныеПравила.Добавить("ТранспортныеРасходыБудущихПериодов");
	// Всегда косвенные
	ЕдиныеПравила.Добавить("ДиректКостинг");
	ЕдиныеПравила.Добавить("РасходыНаПродажу");
	
	РасходыОбслуживающихПроизводств.ДополнитьЕдиныеПравилаНалоговогоУчета(ЕдиныеПравила);
	Возврат ЕдиныеПравила;
	
КонецФункции

Процедура ДобавитьПравилаРасходыНеУчитываемыеВЦеляхНалогообложения(ПравилаРаспределения)
	
	// Суммы не учитываемых расходов отложим отдельно и затем исключим из распределения.
	// В расходах, которые будут распределены, появятся постоянные разницы.
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "РасходыНеУчитываемыеВЦеляхНалогообложенияВыделить";
	Правило.Наименование = НСтр("ru = 'Отразить постоянные разницы, вызванные тем, что часть расходов не учитывается в целях налогообложения'");
	
	Правило.ОтборРасходов = Новый Структура;
	Правило.ОтборРасходов.Вставить("ВидРасходовНУ",   Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения);
	Правило.ОтборРасходов.Вставить("ВидДеятельности", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения);
	
	Правило.Действие = "ВыделитьНалоговыйУчет";
	
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.НеУчитываемыеВЦеляхНалогообложения) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_НеУчитываемыеВЦеляхНалогообложения";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_НеУчитываемыеВЦеляхНалогообложения");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	// Исключим суммы НУ из дальнейшего распределения
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "РасходыНеУчитываемыеВЦеляхНалогообложенияЗафиксировать";
	Правило.Наименование = НСтр("ru = 'Исключить из распределения суммы расходов, не учитываемых в целях налогообложения'");
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.НеУчитываемыеВЦеляхНалогообложения);
	Правило.Действие     = "Зафиксировать";
	
КонецПроцедуры

Процедура ДобавитьПравилаНормируемыеРасходыНалоговогоУчета(ПравилаРаспределения, Период, Организация)
	
	// Выполним нормирование расходов
	
	// Нормирование описано четырьмя правилами:
	// 1. нормируемые расходы распределим между нормативными и сверхнормативными
	//    Нормативные расходы обработаем на общем основании (например, в ДобавитьПравилаПрямыеРасходыНалоговогоУчета()).
	//    Сверхнормативные расходы обработаем правилами 2 - 4
	// 2. выделим сверхнормативные расходы налогового учета: 
	//    у них отличается порядок отражения в учете, они относятся к расходам будущих периодов.
	//    В результате получатся постоянные разницы
	// 3. зафиксируем сверхнормативные расходы, чтобы они никуда не распределились
	//    (а в последнем месяце налогового периода - спишем со счетов затрат, потому что шансов включить их в будущем уже нет)
	// 4. избавимся от аналитики НалоговыйУчет, которая более не нужна
	
	// Схематически можно изобразить так
	//
	//	                                                                            X        Счет 84
	//	                                                                           /   или  /
	//	                                                     [БудущихПериодов] (3) 
	//	                                                   / 
	//	                                                  /ПР
	//	                                                 /
	//	                            [Сверхнормативные] (2)   (4)   
	//	                          /                             \
	//	                         /k=1-норма                      \k=1
	//                          /                                 \
	// [Указан ВидРасходовНУ](1)                                    [Не указан ВидРасходовНУ, НалоговыйУчет, КорСчет]
	//                          \                      
	//                           \k=норма         
	//                            \                 
	//                                 [Нормативные]
	//                                              
	//                                                            
	// Легенда:
	//  []    - расходы, их критерии
	//  (1)   - номер правила, см. выше
	//  / и \ - стрелки слева направо, результат применения правила
	//  k     - коэффициент базы распределения
	//  ПР    - правило с действием "ВыделитьНалоговыйУчет"
	//  X     - правило с действием "Зафиксировать"
	
	// (1) Разделим нормируемые расходы на расходы в пределах норм (нормативные) и сверх норм (сверхнормативные)
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "НормированиеРасходовНалоговогоУчета";
	Правило.Наименование = НСтр("ru = 'Нормировать расходы в налоговом учете'");
	
	// ВидРасходовНУ определяет, относятся расходы к нормируемым или нет.
	// Кроме того, для разных видов расходов - разные нормы.
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	
	Правило.Действие = "РаспределитьНаРасходы";
	Правило.ПоляПриемника.Вставить("НалоговыйУчет"); // В результате распределения расходы делятся на Нормативные и Сверхнормативные
	
	// Из-за особенностей хранения данных в регистре ДолиСписанияКосвенныхРасходов текст запроса конструируется кодом
	ПоляРегистраДолиРасходов = Новый Массив;
	ЗапросыДляОбъединения    = Новый Массив;
	Для Каждого ОписаниеПоля Из РегистрыСведений.ДолиСписанияКосвенныхРасходов.ИменаВидовНормируемыхРасходов() Цикл
		
		ПоляРегистраДолиРасходов.Добавить("ДолиРасходов." + ОписаниеПоля.Ключ);
		
		ТекстЗапроса = 
		"
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ."+ ОписаниеПоля.Значение +") КАК ВидРасходовНУ,
		|	ДолиРасходов."+ ОписаниеПоля.Ключ +" КАК Доля
		|ИЗ
		|	ДанныеРегистраДолиРасходов КАК ДолиРасходов
		|
		|";
		
		ЗапросыДляОбъединения.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = // Содержит заменяемые конструкции "// ПоляРегистраДолиРасходов" и "// ОБЪЕДИНИТЬ"
	"ВЫБРАТЬ
	|	// ПоляРегистраДолиРасходов
	|ПОМЕСТИТЬ ДанныеРегистраДолиРасходов
	|ИЗ
	|	РегистрСведений.ДолиСписанияКосвенныхРасходов КАК ДолиРасходов
	|ГДЕ
	|	ДолиРасходов.Организация = &ГоловнаяОрганизация
	|	И ДолиРасходов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	0 КАК Доля
	|ПОМЕСТИТЬ НормыРасходов
	|ИЗ
	|	ДанныеРегистраДолиРасходов КАК ДолиРасходов
	|ГДЕ ЛОЖЬ
	|
	|// ОБЪЕДИНИТЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасходовНУ
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"// ПоляРегистраДолиРасходов", 
		СтрСоединить(ПоляРегистраДолиРасходов, "," + Символы.ПС));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"// ОБЪЕДИНИТЬ", 
		СтрСоединить(ЗапросыДляОбъединения, Символы.ПС));
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	НормыРасходов.ВидРасходовНУ КАК ВидРасходовНУОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.Нормативные) КАК НалоговыйУчет,
	|	НормыРасходов.Доля КАК База
	|ПОМЕСТИТЬ БазаРаспределения_НормированиеРасходовНалоговогоУчета
	|ИЗ
	|	НормыРасходов КАК НормыРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НормыРасходов.ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные),
	|	1 - НормыРасходов.Доля
	|ИЗ
	|	НормыРасходов КАК НормыРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеРегистраДолиРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НормыРасходов";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_НормированиеРасходовНалоговогоУчета");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	// (2) Выделим сверхнормативные расходы - образуются постоянные разницы
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "ВыделитьСверхнормативныеРасходы";
	Правило.Наименование = НСтр("ru = 'Отразить постоянные разницы, вызванные сверхнормативными расходами в налоговом учете'");
	
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные);
	Правило.Действие      = "ВыделитьНалоговыйУчет";
	Правило.ПоляПриемника.Вставить("НалоговыйУчет"); // Назовем их "БудущихПериодов", см. правило (4)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_ВыделитьСверхнормативныеРасходы";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_ВыделитьСверхнормативныеРасходы");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
		
	// (3) Оградим расходы будущих периодов от дальнейшего распределения
	НалоговыйПериод = НалоговыйУчет.БлижайшийНалоговыйПериод(Период, Организация);
	ЕстьВозможностьПризнатьРасходыВБудущем = (КонецМесяца(Период) <> НалоговыйПериод.Конец);
	Если ЕстьВозможностьПризнатьРасходыВБудущем Тогда
		
		Правило = ПравилаРаспределения.Добавить();
		Правило.Имя          = "СверхнормативныеРасходыНалоговогоУчета";
		Правило.Наименование = НСтр("ru = 'Не распределять сверхнормативные расходы налогового учета'");
		Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
		Правило.Действие = "Зафиксировать";
		
	Иначе
		
		Правило = ПравилаРаспределения.Добавить();
		Правило.Имя          = "СверхнормативныеРасходыНалоговогоУчетаЗаНалоговыйПериод";
		Правило.Наименование = НСтр("ru = 'Не распределять сверхнормативные расходы налогового учета'");
		Правило.СодержаниеПроводки = НСтр(
			"ru = 'Списаны расходы сверх ограничений, установленных главой 25 НК РФ'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.БудущихПериодов);
		Правило.Действие = "РаспределитьНаСубконто";
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УбытокПодлежащийПокрытию) КАК Счет,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК Субконто1,
		|	НЕОПРЕДЕЛЕНО КАК Субконто2,
		|	НЕОПРЕДЕЛЕНО КАК Субконто3,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
		|	1 КАК База
		|ПОМЕСТИТЬ БазаРаспределения_ЗафиксироватьСверхнормативныеРасходы";
		
		Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_ЗафиксироватьСверхнормативныеРасходы");
		Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
		
	КонецЕсли;
	
	// (4) Избавимся от аналитики, которая стала ненужной
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "СгруппироватьНормируемыеРасходы";
	Правило.Наименование = НСтр("ru = 'Сгруппировать расходы, избавившись от аналитики, которая больше не нужна'");
	
	ОтборНалоговыйУчет = Новый Массив;
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.Сверхнормативные);
	
	Правило.Действие = "РаспределитьНаРасходы";
	
	// После выполнения правила значения не нужны
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("КорСчет");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СгруппироватьНормируемыеРасходы";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_СгруппироватьНормируемыеРасходы");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
КонецПроцедуры

// Конструктор коллекции, обеспечивающей чтение правил определения прямых расходов налогового учета.
// Описывает состояние (пытались читать или нет, прочитаны или нет, куда прочитаны)
// и предоставляет тексты, параметры запросов для использования в правилах распределения.
//
// Сами детальные правила помещаются в менеджер временных таблиц, используемый только для хранения настроек.
// Имя таблицы: ПравилаОпределенияПрямыхРасходовНалоговогоУчета.
//
// В общем случае в алгоритме правила читаются дважды: при подготовке правил распределения и при их выполнении,
// поскольку код создания правил распределения и их выполнения изолирован - не имеет разделяемых временных таблиц.
//
Функция НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета()
	
	Описание = Новый Структура;
	Описание.Вставить("ПравилаПрочитаны",        Ложь);
	Описание.Вставить("ЕстьПрямыеРасходы",       Ложь);
	Описание.Вставить("МенеджерВременныхТаблиц"); // инициализируется при наличии прямых расходов, хранит таблицу ПравилаОпределенияПрямыхРасходовНалоговогоУчета
	
	// следующие свойства инициализируется при чтении правил (при их наличии)
	Описание.Вставить("СоздатьВременныеТаблицы",    ""); // текст создания временной таблицы
	Описание.Вставить("ПараметрыВременныхТаблиц",   Новый Структура);
	
	Возврат Описание;
	
КонецФункции

// Читает во временную таблицу настройки, если они не были прочитаны ранее.
// Дополнительно поставляет тексты запросов для чтения правил.
//
// Имя таблицы: ПравилаОпределенияПрямыхРасходовНалоговогоУчета.
//
// Параметры:
//  ОписаниеПравил - Структура - см. НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета; 
//                   объект, через который происходит чтение (Reader)
//  СчетаРасходов  - Массив - счета расходов, по которым нужно составить правила
//  Период         - Дата - период, за который должны действовать правила
//  Организация    - СправочникСсылка.Организации - организация (филиал), к которой применяются правила
//
Процедура ПрочитатьПравилаОпределенияПрямыхРасходовНалоговогоУчета(ОписаниеПравил, СчетаРасходов, Знач Период, Знач Организация)
	
	Если ОписаниеПравил.ПравилаПрочитаны Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПравил.ПравилаПрочитаны = Истина;
	
	// Настройки единые для организации в целом, включая филиалы
	Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация);
	
	Период = РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.ПериодДействующейНастройки(Период, Организация);
		
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеПравил.ЕстьПрямыеРасходы       = Истина;
	ОписаниеПравил.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Настройка может содержать счета-группы. Детализируем их до счетов, на которых ведется учет.
	// Счета учета расходов могут быть не заполнены. Детализируем их до всех счетов расходов.
	
	ИерархияСчетов = Новый ТаблицаЗначений;// Для помещения во временную таблицу
	ИерархияСчетов.Колонки.Добавить("СчетНастройки", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ИерархияСчетов.Колонки.Добавить("СчетРасходов",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройка.Счет КАК Счет
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Настройка
	|ГДЕ
	|	Настройка.Организация = &Организация
	|	И Настройка.ПериодДействия = &Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Счет) Тогда
			ПодчиненныеСчетаРасходов = СчетаРасходов;
		Иначе
			ПодчиненныеСчетаРасходов = Новый Массив;
			Для Каждого Счет Из БухгалтерскийУчетПовтИсп.СчетаВИерархии(Выборка.Счет) Цикл
				Если СчетаРасходов.Найти(Счет) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ПодчиненныеСчетаРасходов.Добавить(Счет);
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого Счет Из ПодчиненныеСчетаРасходов Цикл
			Запись = ИерархияСчетов.Добавить();
			Запись.СчетНастройки = Выборка.Счет;
			Запись.СчетРасходов  = Счет;
		КонецЦикла;
		
	КонецЦикла;
	
	// Прочитаем полные данные настроек, дополненные счетами учета расходов.
	// Настройки сгруппируем так, чтобы в группе не содержалось столбцов,
	// в которых часть полей будет заполнена, а часть нет.
	
	// Текст и параметры запроса переиспользуются при создании баз распределения
	ОписаниеПравил.ПараметрыВременныхТаблиц.Вставить("ИерархияСчетов",             ИерархияСчетов);
	ОписаниеПравил.ПараметрыВременныхТаблиц.Вставить("ПериодДействующейНастройки", Период);
	// также используются параметры ГоловнаяОрганизация и ПустоеПодразделение,
	// определяемые одинаково для всех запросов временных таблиц баз распределения
	
	ОписаниеПравил.СоздатьВременныеТаблицы =
	"ВЫБРАТЬ
	|	ИерархияСчетов.СчетНастройки КАК СчетНастройки,
	|	ИерархияСчетов.СчетРасходов КАК СчетРасходов
	|ПОМЕСТИТЬ ВТ_ИерархияСчетов
	|ИЗ
	|	&ИерархияСчетов КАК ИерархияСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Настройка.Подразделение = &ПустоеПодразделение
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Настройка.КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА Настройка.СтатьяЗатрат = ЗНАЧЕНИЕ(Справочник.СтатьиЗатрат.ПустаяСсылка)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Группа,
	|	ИерархияСчетов.СчетРасходов КАК Счет,
	|	Настройка.ВидРасходовНУ КАК ВидРасходовНУ,
	|	Настройка.Подразделение КАК Подразделение,
	|	Настройка.КорСчет КАК КорСчет,
	|	Настройка.СтатьяЗатрат КАК СтатьяЗатрат
	|ПОМЕСТИТЬ ПравилаОпределенияПрямыхРасходовНалоговогоУчета
	|ИЗ
	|	РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ КАК Настройка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ИерархияСчетов КАК ИерархияСчетов
	|		ПО Настройка.Счет = ИерархияСчетов.СчетНастройки
	|ГДЕ
	|	Настройка.Организация = &ГоловнаяОрганизация
	|	И Настройка.ПериодДействия = &ПериодДействующейНастройки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Группа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИерархияСчетов";
	
	Запрос = Новый Запрос(ОписаниеПравил.СоздатьВременныеТаблицы);
	Запрос.МенеджерВременныхТаблиц = ОписаниеПравил.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИерархияСчетов",             ИерархияСчетов);
	Запрос.УстановитьПараметр("ПериодДействующейНастройки", Период);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",        Организация);
	Запрос.УстановитьПараметр("ПустоеПодразделение",        БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Добавляет набор правил распределения, обеспечивающих обработку прямых расходов налогового учета для конкретного счета расходов.
//
// Параметры:
//  ПравилаРаспределения    - ТаблицаЗначений - заполняемая коллекция, см. НовыеПравилаРаспределения()
//  НастройкиПрямыхРасходов - Структура - см. НовыйОписаниеПравилОпределенияПрямыхРасходовНалоговогоУчета
//  Счет                    - ПланСчетовСсылка.Хозрасчетный - счет расходов
//
Процедура ДобавитьПравилаПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Счет)
	
	// Расходы, у которых неизвестен ВидУчетаНУ - заведомо прямые.
	// Расходы, у которых известен ВидУчетаНУ относим к прямым, если это предусмотрено настройкой.
	
	Если НастройкиПрямыхРасходов.ЕстьПрямыеРасходы Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = НастройкиПрямыхРасходов.МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Счет", Счет);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Правила.Группа КАК Группа
		|ИЗ
		|	ПравилаОпределенияПрямыхРасходовНалоговогоУчета КАК Правила
		|ГДЕ
		|	Правила.Счет = &Счет";
		
		// Для каждой группы создадим правило, которое отнесет расходы к прямым расходам налогового учета
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДобавитьПравилоПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Выборка.Группа, Счет);
		КонецЦикла;
		
	КонецЕсли;
	
	// Все остальные расходы, у которых заполнен ВидУчетаНУ, для целей налогового учета назовем косвенными
	
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "ВременныеРазницыКосвенныеРасходы";
	Правило.Наименование = НСтр("ru = 'Отразить временные разницы, вызванные разным моментом признания косвенных расходов налогового учета'");
	Правило.Действие     = "ВыделитьНалоговыйУчет";
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	
	// Покажем, что расходы относятся в налоговом учете к косвенным
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	// После выполнения правила значения не нужны
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ");
	Правило.ПоляПриемника.Вставить("КорСчет");
	
	// Механика задания правил не позволяет задать условие вида "Заполнено".
	// Поэтому перечислим в базе все возможные значения перечисления
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРасходовНУ.Ссылка КАК ВидРасходовНУОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_ВыделитьКосвенныеРасходыНалоговогоУчета
	|ИЗ
	|	Перечисление.ВидыРасходовНУ КАК ВидыРасходовНУ";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_ВыделитьКосвенныеРасходыНалоговогоУчета");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	// Нормирование косвенных расходов выполняется в ДобавитьПравилаНормируемыеРасходыНалоговогоУчета()
	// Списание косвенных расходов выполняется в ДобавитьПравилоКосвенныеРасходыНалоговогоУчета()
	
КонецПроцедуры

Процедура ДобавитьПравилоПрямыеРасходыНалоговогоУчета(ПравилаРаспределения, НастройкиПрямыхРасходов, Группа, Счет)
	
	// Для каждой группы создадим правило, которое отнесет расходы к прямым расходам налогового учета
	
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя          = "ПрямыеРасходыНалоговогоУчетаПоНастройке" + "." + XMLСтрока(Группа);
	Правило.Наименование = НСтр("ru = 'Идентифицировать прямые расходы налогового учета (согласно учетной политике налогового учета)'");
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	
	// Все правила такого вида используют один пакет временных таблиц
	Правило.БазаРаспределения.Вставить("ПакетВременныхТаблиц", "ПрямыеРасходыНалоговогоУчета");
	
	Правило.БазаРаспределения.Вставить("СоздатьВременныеТаблицы",    НастройкиПрямыхРасходов.СоздатьВременныеТаблицы);
	Правило.БазаРаспределения.Вставить("ПараметрыВременныхТаблиц",   НастройкиПрямыхРасходов.ПараметрыВременныхТаблиц);
	
	// Отнесем расходы к прямым расходам налогового учета.
	// Для этого достаточно очистить ВидРасходовНУ, так как 
	// - все расходы с пустым видом считаются прямыми
	// - вид расходов НУ не используется после того, как установлено, что расходы - прямые.
	// Переносим и сумму БУ и сумму НУ, 
	// чтобы избавиться от ненужной после выполнения этого правила аналитики - ВидРасходовНУ и КорСчет
	Правило.Действие      = "РаспределитьНаРасходы";
	Правило.ПоляПриемника.Вставить("ВидРасходовНУ"); // Покажем, что эти расходы относятся к прямым
	Правило.ПоляПриемника.Вставить("КорСчет");       // После выполнения правила значения не нужны
	
	// Чтобы не делать много правил, отбор расходов зададим самой базой (см. текст запроса)
	// Связь с базой - по ВидРасходовНУ и по тем полям, которые заполнены.
	Правило.ПоляИсточника.Вставить("ВидРасходовНУ", "ВидРасходовНУОтбор");
	// Счет заполнен всегда
	Правило.ПоляИсточника.Вставить("Счет", "СчетОтбор");
	// Пустые поля означают "все". Чтобы это поддержать, связь по этим полям не выполняем.
	// Заполненность полей определим по номеру группы - разложим его на степени двойки.
	ВсеПоля = Новый Массив; // Порядок - как в запросе временной таблицы
	ВсеПоля.Добавить("Подразделение"); // 2^0 = 1
	ВсеПоля.Добавить("КорСчет");       // 2^1 = 2
	ВсеПоля.Добавить("СтатьяЗатрат");  // 2^2 = 4
	
	// Из цикла по группам правил известна группа
	// ВидРасходов заполнен всегда
	КоличествоПолей = ВсеПоля.Количество();
	ПустыеПоля = РазложитьПоСтепенямДвойки(Группа, КоличествоПолей);
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		
		Если ПустыеПоля[Индекс] Тогда
			Продолжить;
		КонецЕсли;
		
		// Это поле используется, по нему нужна связь
		Поле       = ВсеПоля[Индекс];
		Правило.ПоляИсточника.Вставить(Поле, Поле + "Отбор");
		
	КонецЦикла;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Группа", Группа);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Правила.Счет КАК СчетОтбор,
	|	Правила.Подразделение КАК ПодразделениеОтбор,
	|	Правила.ВидРасходовНУ КАК ВидРасходовНУОтбор,
	|	Правила.СтатьяЗатрат КАК СтатьяЗатратОтбор,
	|	Правила.КорСчет КАК КорСчетОтбор,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыРасходовНУ.ПустаяСсылка) КАК ВидРасходовНУ,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	1 КАК База
	|ПОМЕСТИТЬ ИмяБазыРаспределения
	|ИЗ
	|	ПравилаОпределенияПрямыхРасходовНалоговогоУчета КАК Правила
	|ГДЕ
	|	Правила.Группа = &Группа";
	
	ИмяБазы = "БазаРаспределения_ПрямыеРасходыНалоговогоУчета_" + Группа;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяБазыРаспределения", ИмяБазы);
	Правило.БазаРаспределения.Вставить("Имя",              ИмяБазы);
	Правило.БазаРаспределения.Вставить("ТекстЗапроса",     ТекстЗапроса);
	Правило.БазаРаспределения.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
КонецПроцедуры

Процедура ДобавитьПравилоКосвенныеРасходыНалоговогоУчета(ПравилаРаспределения, Счет)
	
	// Спишем косвенные расходы налогового учета на счет расходов текущего периода
	
	Правило = ПравилаРаспределения.Добавить();
	Правило.Имя                = "СписатьКосвенныеРасходы";
	Правило.Наименование       = НСтр("ru = 'Списать косвенные расходы налогового учета на результат текущего периода'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Закрытие счетов косвенных расходов'");
	
	Правило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода);
	Если ЗначениеЗаполнено(Счет) Тогда
		Правило.ОтборРасходов.Вставить("Счет", Счет);
	КонецЕсли;
	
	УстановитьПравилоСписатьРасходыТекущегоПериода(Правило);
	
КонецПроцедуры

Функция ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет()
	
	ИменаПравил = Новый Массив;
	
	ИменаПравил.Добавить("МетодМатериальныеЗатраты");
	ИменаПравил.Добавить("МетодОплатаТруда");
	ИменаПравил.Добавить("МетодПрямыеЗатраты");
	ИменаПравил.Добавить("МетодОтдельныеСтатьиПрямыхЗатрат");
	
	Возврат ИменаПравил;
	
КонецФункции

Процедура ДобавитьПравилаМетодСтоимостьРасходовНУ(ПравилаРаспределения, ПериодНастройкиПрямыхРасходов, ОсновнойВидНалоговыхРазниц)
	
	ОтличияБазыРаспределения = ИменаПравилМетодСтоимостьРасходовОтличияБазыРаспределенияНалоговыйУчет();
	
	ОсновныеПравила = Новый Массив;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		ЭлементыИмени = СтрРазделить(Правило.Имя, ".");
		Если Не ЗначениеЗаполнено(ЭлементыИмени) Или ОтличияБазыРаспределения.Найти(ЭлементыИмени[0]) = Неопределено Тогда
			// разделение на прямые и косвенные по настройкам не требуется
			Продолжить;
		КонецЕсли;
		
		ОсновныеПравила.Добавить(Правило);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОсновныеПравила) Тогда
		Возврат;
	КонецЕсли;
	
	// Общие свойства правил, разделяющих бухгалтерский и налоговый учет
	ШаблонПредставления = НСтр("ru = 'Отразить %1 разницы, вызванные отличием базы распределения в бухгалтерском и налоговом учете'");
	Если ОсновнойВидНалоговыхРазниц = Перечисления.ВидыРазницПБУ18.ПР Тогда
		ВидДвиженияРазделения = Перечисления.ВидыДвиженийРасчетСебестоимости.ПостоянныеРазницы;
		ПредставлениеРазниц   = НСтр("ru = 'постоянные'");
	Иначе
		ВидДвиженияРазделения = Перечисления.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы;
		ПредставлениеРазниц   = НСтр("ru = 'временные'");
	КонецЕсли;
	ПредставленияПравилаРазделения = СтрШаблон(ШаблонПредставления, ПредставлениеРазниц);
		
	СкорректированныеОписанияБазРаспределения = Новый Соответствие;
	
	Для Каждого ОсновноеПравило Из ОсновныеПравила Цикл
		
		// Скорректируем данные базы распределения.
		// В базу распределения следует включать только расходы, прямые в соответствии со ст. 318 НК.
		
		ИмяОсновнойБазыРаспределения = ОсновноеПравило.БазаРаспределения.Имя;
		
		ОписаниеБазыРаспределения = СкорректированныеОписанияБазРаспределения[ИмяОсновнойБазыРаспределения];
		Если ОписаниеБазыРаспределения = Ложь Тогда
			Продолжить;
		ИначеЕсли ОписаниеБазыРаспределения = Неопределено Тогда
			ОписаниеБазыРаспределения = ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ(ОсновноеПравило, ПериодНастройкиПрямыхРасходов);
			Если ОписаниеБазыРаспределения = Неопределено Тогда
				СкорректированныеОписанияБазРаспределения.Вставить(ИмяОсновнойБазыРаспределения, Ложь);
				Продолжить;
			КонецЕсли;
			СкорректированныеОписанияБазРаспределения.Вставить(ИмяОсновнойБазыРаспределения, ОписаниеБазыРаспределения);
		КонецЕсли;
		
		// Правило налогового учета
		ПравилоНУ = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ОсновноеПравило));
		ЗаполнитьЗначенияСвойств(ПравилоНУ, ОсновноеПравило);
		ПравилоНУ.Имя           = ПравилоНУ.Имя + "НУ";
		ПравилоНУ.Наименование  = НСтр("ru = 'Распределить косвенные расходы по базе, основанной на величине прямых расходов в налоговом учете'");
		ПравилоНУ.ОтборРасходов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПравилоНУ.ОтборРасходов);
		ПравилоНУ.ОтборРасходов.Вставить(
			"НалоговыйУчет",
			Перечисления.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения);
		ПравилоНУ.ПоляПриемника = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПравилоНУ.ПоляПриемника);
		ПравилоНУ.ПоляПриемника.Вставить("НалоговыйУчет"); // Использован
		
		ПравилоНУ.БазаРаспределения = ОписаниеБазыРаспределения;
		
		// Правило, выделяющее налоговый учет
		ПравилоВыделитьНалоговыйУчет = ПравилаРаспределения.Вставить(ПравилаРаспределения.Индекс(ПравилоНУ));
		ЗаполнитьЗначенияСвойств(ПравилоВыделитьНалоговыйУчет, ОсновноеПравило, "СодержаниеПроводки, МетодРасчета, ОтборРасходов");
		ПравилоВыделитьНалоговыйУчет.Имя           = "ОтличаетсяБазаРаспределения";
		ПравилоВыделитьНалоговыйУчет.Наименование  = ПредставленияПравилаРазделения;
		ПравилоВыделитьНалоговыйУчет.Действие      = "ВыделитьНалоговыйУчет";
		ПравилоВыделитьНалоговыйУчет.ПоляПриемника.Вставить("НалоговыйУчет");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ОтличаетсяБазаРаспределения) КАК НалоговыйУчет,
		|	&ВидДвижения КАК ТипРазниц
		|ПОМЕСТИТЬ БазаРаспределения_ОтличаетсяБазаРаспределения";
		
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("Имя",              "БазаРаспределения_ОтличаетсяБазаРаспределения");
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("ТекстЗапроса",     ТекстЗапроса);
		ПравилоВыделитьНалоговыйУчет.БазаРаспределения.Вставить("ПараметрыЗапроса", Новый Структура("ВидДвижения", ВидДвиженияРазделения));
		
		// Модифицируем правило бухгалтерского учета - исключим его применение для налогового учета
		ОсновноеПравило.ОтборРасходов = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОсновноеПравило.ОтборРасходов);
		ОсновноеПравило.ОтборРасходов.Вставить("НалоговыйУчет", Перечисления.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка());
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеБазыРаспределенияМетодСтоимостьРасходовНУ(ОсновноеПравило, ПериодНастройкиПрямыхРасходов)
	
	ИмяОсновнойБазыРаспределения = ОсновноеПравило.БазаРаспределения.Имя;
	
	БазаРаспределения = Новый Структура;
	БазаРаспределения.Вставить("Имя",                        ИмяОсновнойБазыРаспределения + "НУ");
	БазаРаспределения.Вставить("ТекстЗапроса",               "");
	БазаРаспределения.Вставить("ПараметрыЗапроса",           Новый Структура);
	БазаРаспределения.Вставить("ПакетВременныхТаблиц",       ОсновноеПравило.БазаРаспределения.ПакетВременныхТаблиц);
	БазаРаспределения.Вставить("СоздатьВременныеТаблицы",    ОсновноеПравило.БазаРаспределения.СоздатьВременныеТаблицы);
	БазаРаспределения.Вставить("ПараметрыВременныхТаблиц",   ОсновноеПравило.БазаРаспределения.ПараметрыВременныхТаблиц);
	
	// В налоговом учете используем скорректированную базу распределения.
	// При этом потребуется обращаться к временным таблицам основного правила.
	// Поэтому схему запроса инициализируем полным комплектом запросов основного правила,
	// затем модифицируем запросы базы распределения и удалим запросы основного правила.
	
	ВсеТекстыЗапросов = Новый Массив;
	ВсеТекстыЗапросов.Добавить(ОсновноеПравило.БазаРаспределения.СоздатьВременныеТаблицы);
	ВсеТекстыЗапросов.Добавить(ОсновноеПравило.БазаРаспределения.ТекстЗапроса);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(СтрСоединить(ВсеТекстыЗапросов, ";"));
	РазмерОсновногоПакетаЗапросов = СхемаЗапроса.ПакетЗапросов.Количество();
	
	// Проверим выполнение соглашений об основном правиле
	// - исходные должны быть подготовлены в таблице "_ПрямыеРасходы"
	// - запрос базы должен быть простой выборкой из "_ПрямыеРасходы"
	
	ИмяВременнойТаблицыПрямыеРасходы = ИмяОсновнойБазыРаспределения + "_ПрямыеРасходы";
	
	НайденаТаблицаПрямыеРасходы             = Ложь;
	ЗапросБазыРаспределенияОсновногоПравила = Неопределено;
	Для Каждого ОписаниеЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		
		Если ТипЗнч(ОписаниеЗапроса) <> Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОписаниеЗапроса.ТаблицаДляПомещения = ИмяВременнойТаблицыПрямыеРасходы Тогда
			НайденаТаблицаПрямыеРасходы = Истина;
		ИначеЕсли ОписаниеЗапроса.ТаблицаДляПомещения = ИмяОсновнойБазыРаспределения Тогда
			
			Если ОписаниеЗапроса.Операторы.Количество() <> 1 Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ОписаниеЗапроса.Операторы[0].Источники.НайтиПоИмени(ИмяВременнойТаблицыПрямыеРасходы) = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ОписаниеЗапроса.Колонки.Найти("База") = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			ЗапросБазыРаспределенияОсновногоПравила = ОписаниеЗапроса;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если НайденаТаблицаПрямыеРасходы И ЗапросБазыРаспределенияОсновногоПравила <> Неопределено Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Не НайденаТаблицаПрямыеРасходы Или ЗапросБазыРаспределенияОсновногоПравила = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подготовим внутренние таблицы и основную таблицу базы
	
	ВнутренниеТаблицы = Новый Массив;
	
	// ВТ_АналитикаРасходовНУ хранит наборы полей,
	// которые далее будут протестированы на вхождение в перечень прямых расходов
	
	ПоляОграниченияПрямыхРасходов = Новый Массив;
	ПоляОграниченияПрямыхРасходов.Добавить("ВидРасходовНУ");
	ПоляОграниченияПрямыхРасходов.Добавить("Подразделение");
	ПоляОграниченияПрямыхРасходов.Добавить("Счет");
	ПоляОграниченияПрямыхРасходов.Добавить("КорСчет");
	ПоляОграниченияПрямыхРасходов.Добавить("СтатьяЗатрат");
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_АналитикаРасходовНУ";
	ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
	
	Оператор = ОписаниеЗапроса.Операторы[0];
	Оператор.Источники.Добавить(ИмяВременнойТаблицыПрямыеРасходы, "Расходы");
	Оператор.ВыбиратьРазличные = Истина;
	Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
		Оператор.ВыбираемыеПоля.Добавить(ИмяПоля);
		ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
	КонецЦикла;
	
	// ВТ_ПравилаОпределенияПрямыхРасходовНУ хранит настройку списка прямых расходов
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_ПравилаОпределенияПрямыхРасходовНУ";
	ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
	
	Оператор = ОписаниеЗапроса.Операторы[0];
	Оператор.Источники.Добавить("РегистрСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ", "Настройка");
	Оператор.ВыбиратьРазличные = Истина;
	Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
		Оператор.ВыбираемыеПоля.Добавить(ИмяПоля);
		ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
	КонецЦикла;
	
	Оператор.Отбор.Добавить("Настройка.Организация = &ГоловнаяОрганизация");
	Оператор.Отбор.Добавить("Настройка.ПериодДействия = &ПериодНастройкиПрямыхРасходов");
	
	БазаРаспределения.ПараметрыЗапроса.Вставить("ПериодНастройкиПрямыхРасходов", ПериодНастройкиПрямыхРасходов);
	
	// ВТ_ПрямыеРасходыНУ хранит наборы полей, соответствующие списку прямых расходов
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОписаниеЗапроса.ТаблицаДляПомещения = "ВТ_ПрямыеРасходыНУ";
	ВнутренниеТаблицы.Добавить(ОписаниеЗапроса.ТаблицаДляПомещения);
	
	// В таблице ВТ_ПравилаОпределенияПрямыхРасходовНУ используется подход
	// "незаполненное поле означает <все возможные значения>".
	// Для того, чтобы применить такие правила, в общем случае следует выполнить 2^N запросов,
	// где N - это число таких полей (колонок, которые могут быть не заполнены).
	// В данном случае - 16 запросов (поле ВидРасходовНУ обязательное, не может быть незаполненным).
	
	ПоляВсеЗначения = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПоляОграниченияПрямыхРасходов);
	ПоляВсеЗначения.Удалить(ПоляВсеЗначения.Найти("ВидРасходовНУ"));
	
	ПараметрыПустыеЗначения = Новый Структура;
	ИзмеренияРегистра = Метаданные.РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Измерения;
	Для Каждого ИмяПоля Из ПоляВсеЗначения Цикл
		ИмяПараметра = "ПустоеЗначение" + ИмяПоля;
		ПараметрыПустыеЗначения.Вставить(ИмяПоля, ИмяПараметра);
		БазаРаспределения.ПараметрыЗапроса.Вставить(
			ИмяПараметра,
			ИзмеренияРегистра[ИмяПоля].Тип.ПривестиЗначение(Неопределено));
	КонецЦикла;
	
	КоличествоПолей = ПоляВсеЗначения.Количество();
	Для Комбинация = 0 По Pow(2, КоличествоПолей) - 1 Цикл
		
		Для НомерДополнительногоЗапроса = ОписаниеЗапроса.Операторы.Количество() По Комбинация Цикл
			ОписаниеЗапроса.Операторы.Добавить();
		КонецЦикла;
		
		Оператор = ОписаниеЗапроса.Операторы[Комбинация];
		Оператор.ВыбиратьРазличные = Истина;
		Оператор.ТипОбъединения    = ТипОбъединенияСхемыЗапроса.Объединить;
		
		ИсточникРасходы   = Оператор.Источники.Добавить("ВТ_АналитикаРасходовНУ",                "Расходы");
		ИсточникНастройка = Оператор.Источники.Добавить("ВТ_ПравилаОпределенияПрямыхРасходовНУ", "Настройка");
		
		Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
			Оператор.ВыбираемыеПоля.Добавить("Расходы." + ИмяПоля);
			ОписаниеЗапроса.Индекс.Добавить(ИмяПоля);
		КонецЦикла;
		
		// Условия соединения
		УсловияСоединения = Новый Массив;
		УсловияСоединения.Добавить("Расходы.ВидРасходовНУ = Настройка.ВидРасходовНУ");
		
		ЗначенияПолей = РазложитьПоСтепенямДвойки(Комбинация, КоличествоПолей);
		Для ИндексПоля = 0 По КоличествоПолей - 1 Цикл
			ИмяПоля = ПоляВсеЗначения[ИндексПоля];
			Если ЗначенияПолей[ИндексПоля] Тогда
				УсловиеСоединения = СтрШаблон("Расходы.%1 = Настройка.%1", ИмяПоля);
			Иначе
				УсловиеСоединения = СтрШаблон("Настройка.%1 = &%2", ИмяПоля, ПараметрыПустыеЗначения[ИмяПоля]);
			КонецЕсли;
			УсловияСоединения.Добавить(УсловиеСоединения);
		КонецЦикла;
		
		ИсточникРасходы.Соединения.Добавить(ИсточникНастройка, СтрСоединить(УсловияСоединения, " И "));
		ИсточникРасходы.Соединения[ИсточникРасходы.Соединения.Количество()-1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		
	КонецЦикла;
	
	// База распределения в НУ подобна основной базе
	// Получаем ее запрос модификацией запроса базы основного правила.
	ИндексОригинала = СхемаЗапроса.ПакетЗапросов.Индекс(ЗапросБазыРаспределенияОсновногоПравила);
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.ДобавитьКопию(ИндексОригинала);
	
	// Добавленный запрос следует поместить в конец пакета.
	СхемаЗапроса.ПакетЗапросов.Переместить(ОписаниеЗапроса, СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	
	ОписаниеЗапроса.ТаблицаДляПомещения = БазаРаспределения.Имя;
	Оператор = ОписаниеЗапроса.Операторы[0];
	
	ИсточникРасходы    = Оператор.Источники.НайтиПоИмени(ИмяВременнойТаблицыПрямыеРасходы);
	ПсевдонимИсточника = ИсточникРасходы.Источник.Псевдоним;
	
	// ... заменим поле базы
	ТекстВыраженияПоляБазы = СтрШаблон("СУММА(%1.БазаНУ)", ПсевдонимИсточника);
	
	// .... в выбранных полях
	КолонкаБаза = ОписаниеЗапроса.Колонки.Найти("База");
	ПолеБазаСтрокой = Строка(КолонкаБаза.Поля[0]);
	Оператор.ВыбираемыеПоля[ОписаниеЗапроса.Колонки.Индекс(КолонкаБаза)] = Новый ВыражениеСхемыЗапроса(ТекстВыраженияПоляБазы);
	
	// .... в отборе
	КоличествоЭлементовОтбора = Оператор.Отбор.Количество();
	Для НомерСКонца = 1 По КоличествоЭлементовОтбора Цикл
		Индекс = КоличествоЭлементовОтбора - НомерСКонца;
		Если СтрНайти(Оператор.Отбор[Индекс], ПолеБазаСтрокой) <> 0 Тогда
			Оператор.Отбор.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Оператор.Отбор.Добавить(СтрШаблон("%1 > 0", ТекстВыраженияПоляБазы));
	
	// ... ограничим аналитикой прямых расходов налогового учета
	ИсточникОтбор = Оператор.Источники.Добавить("ВТ_ПрямыеРасходыНУ", "ПрямыеРасходыНУ");
	Условия = Новый Массив;
	Для Каждого ИмяПоля Из ПоляОграниченияПрямыхРасходов Цикл
		Условия.Добавить(СтрШаблон("%1.%2 = ПрямыеРасходыНУ.%2", ИсточникРасходы.Источник.Псевдоним, ИмяПоля));
	КонецЦикла;
	ИсточникРасходы.Соединения.Добавить(ИсточникОтбор, СтрСоединить(Условия, " И "));
	ИсточникРасходы.Соединения[ИсточникРасходы.Соединения.Количество()-1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
	// ... добавим очистку поля НалоговыйУчет
	
	Оператор.ВыбираемыеПоля.Добавить("ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ПустаяСсылка)");
	ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = "НалоговыйУчет";
	
	// Удалим запросы основного пакета
	// Делаем это с конца, чтобы избежать автоматического удаления запросов
	Для НомерСКонца = 1 По РазмерОсновногоПакетаЗапросов Цикл
		СхемаЗапроса.ПакетЗапросов.Удалить(РазмерОсновногоПакетаЗапросов - НомерСКонца);
	КонецЦикла;
	
	// Уничтожим внутренние таблицы
	Для Каждого ИмяТаблицы Из ВнутренниеТаблицы Цикл
		ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ОписаниеЗапроса.ИмяТаблицы = ИмяТаблицы;
	КонецЦикла;
	
	БазаРаспределения.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат БазаРаспределения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеМетоды

Процедура УстановитьПравилоСписатьРасходыТекущегоПериода(Правило)
	
	// Поля приемника представлены в виде субконто. В такой базе должны присутствовать все поля
	Правило.Действие = "РаспределитьНаСубконто"; 
	
	// Для разных видов деятельности разные счета приемника
	Правило.ПоляИсточника.Вставить("ВидДеятельности", "ВидДеятельности");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения) КАК ВидДеятельности,
	|	&ПустоеПодразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД) КАК Счет,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1,
	|	НЕОПРЕДЕЛЕНО КАК Субконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ПОМЕСТИТЬ БазаРаспределения_СписатьРасходыТекущегоПериода
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения),
	|	&ПустоеПодразделение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	|	1";
	
	Правило.БазаРаспределения.Вставить("Имя",          "БазаРаспределения_СписатьРасходыТекущегоПериода");
	Правило.БазаРаспределения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
КонецПроцедуры

Функция УникальноеПредставлениеСсылки(Ссылка)
	Возврат СтрЗаменить(XMLСтрока(Ссылка.УникальныйИдентификатор()), "-", "");
КонецФункции

Функция РазложитьПоСтепенямДвойки(Знач Число, Размер)
	
	Результат = Новый Массив(Размер);
	
	Для НомерПоля = 1 По Размер Цикл
		
		// Обходим с конца
		Индекс     = Размер - НомерПоля;
		Множитель  = Pow(2, Индекс);
		
		Результат[Индекс] = (Число >= Множитель);
		
		Число = Число % Множитель;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИспользуетсяРазрезАналитики(Правило, ИмяПоля)
	
	Возврат Правило.ОтборРасходов.Свойство(ИмяПоля) Или Правило.ПоляИсточника.Свойство(ИмяПоля);
	
КонецФункции

Функция ПервоеПравилоИспользуетсяРазрезРаспределения(ПравилаРаспределения, ИмяРазрезаРаспределения)
	
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не ИспользуетсяРазрезАналитики(Правило, ИмяРазрезаРаспределения) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Правило;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеДействияНадПравиламиРаспределения

Функция РазрезыРаспределенияРасходов(СчетаРасходов)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаРасходов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Запрос.Выполнить();
	
	Возврат РаспределениеРасходов.РазрезыРаспределения(МенеджерВременныхТаблиц);
	
КонецФункции

Процедура ОбеспечитьУникальныеИменаПравил(ПравилаРаспределения)
	
	// Удалим служебный символ #
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если СтрНайти(Правило.Имя, "#") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Правило.Имя = СтрЗаменить(Правило.Имя, "#", "");
		
	КонецЦикла;
	
	// Сначала к имени правила с отбором по счету добавим номер (код) счета
	ИспользуемыеСчетаУчета               = Новый Массив;
	ПравилаУстановленОтборРавенствоСчета = Новый Массив;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если Не УстановленОтборРавенствоСчета(Правило.ОтборРасходов) Тогда
			Продолжить;
		КонецЕсли;
		
		ПравилаУстановленОтборРавенствоСчета.Добавить(Правило);
		ИспользуемыеСчетаУчета.Добавить(Правило.ОтборРасходов.Счет);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПравилаУстановленОтборРавенствоСчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИспользуемыеСчетаУчета", ИспользуемыеСчетаУчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Код КАК Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&ИспользуемыеСчетаУчета)";
		
		ИспользуемыеСчетаУчета = Новый Соответствие;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ИспользуемыеСчетаУчета.Вставить(Выборка.Ссылка, Выборка.Код);
		КонецЦикла;
		
		Для Каждого Правило Из ПравилаУстановленОтборРавенствоСчета Цикл
			КодСчета = ИспользуемыеСчетаУчета[Правило.ОтборРасходов.Счет];
			Если КодСчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Правило.Имя = Правило.Имя + "." + КодСчета;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если в результате остались правила с одинаковым именем, то устраним этот недостаток.
	ИндексИмен = Новый Соответствие;
	Для Каждого Правило Из ПравилаРаспределения Цикл
		
		Если ИндексИмен[Правило.Имя] = Неопределено Тогда
			ИндексИмен.Вставить(Правило.Имя, Истина);
			Продолжить;
		КонецЕсли;
		
		// Дублирующееся имя. Дополним его индексом строки с разделителем "#"
		НовоеИмяПравила = Правило.Имя + "#" + XMLСтрока(ПравилаРаспределения.Индекс(Правило));
		
		Правило.Имя = НовоеИмяПравила;
		Если Правило.Имя <> НовоеИмяПравила Тогда
			
			// Имя получилось слишком длинным. Сократим
			КоличествоЛишнихСимволов = СтрДлина(НовоеИмяПравила) - СтрДлина(Правило.Имя);
			ПозицияКлючаУникальности = СтрНайти(НовоеИмяПравила, "#");
			Правило.Имя = Лев(НовоеИмяПравила, ПозицияКлючаУникальности - КоличествоЛишнихСимволов - 1)
				+ Сред(НовоеИмяПравила, ПозицияКлючаУникальности);
			
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Функция УстановленОтборРавенствоСчета(ОтборРасходов)
	
	Если Не ОтборРасходов.Свойство("Счет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТипЗнч(ОтборРасходов.Счет) = Тип("ПланСчетовСсылка.Хозрасчетный");

КонецФункции

#КонецОбласти

#Область НастройкиУчетаЗатрат

// Конструктор объекта, позволяющего работать с настройками: просматривать, редактировать, применять.
//
// Полное имя НастройкиУчетаЗатрат можно сокращать до Настройки, когда из контекста ясно, что речь идет о НастройкиУчетаЗатрат.
//
// Для валидации, исполнения и описания используются правила распределения.
//
Функция НовыйНастройкиУчетаЗатрат()
	
	Настройки = Новый Структура;
	Настройки.Вставить("Контекст",    НовыйКонтекстНастроекУчетаЗатрат()); // откуда получены настройки
	Настройки.Вставить("СчетаУчета", Новый Массив);       // элементы - ПланСчетовСсылка.Хозрасчетный
	Настройки.Вставить("Закрытие",   Новый Соответствие); // Ключ - Счет, Значение - НовыйНастройкиЗакрытияСчета. Должны быть все СчетаУчета
	Настройки.Вставить("Аналитика",  Новый Соответствие); // Ключ - Счет, Значение - Массив видов субконто, имен измерений регистра бухгалтерии
	
	Настройки.Вставить("ВыпускПродукции",                                       Ложь);
	Настройки.Вставить("ИспользоватьПлановуюСебестоимость",                     Ложь);
	// По общему правилу себестоимость оказанных заказчикам услуг рассчитывается, когда признана выручка по ним.
	// Некоторые услуги могут отражаться с указанием плановых цен.
	// В программе есть возможность ограничить расчет себестоимости: рассчитывать себестоимость только тех услуг,
	// которые отражены с указанием плановых цен.
	// Эта возможность используется для совместимости с предыдущими версиями (ред. 2) и в будущих версиях может быть удалена.
	Настройки.Вставить("ОграничитьРасчетСебестоимостиУслугПлановымиЦенами",     Ложь);
	// Оценка по данным ИнвентаризацияНЗП выполняется всегда.
	// Дополнительно НЗП может быть оценено по данным выпуска:
	// - нет выпуска - будет НЗП, вне зависимости от того, что указано в ИнвентаризацияНЗП;
	// - есть любой объем выпуска по конкретной аналитике - НЗП будет только, если это указано в ИнвентаризацияНЗП.
	// При этом под "выпуском" может пониматься
	// - выпуск продукции
	// - оказание услуг заказчикам.
	// Оказание услуг собственным подразделениям приравнивается к выпуску продукции.
	// Поэтому свойство ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска хранит один из вариантов:
	// - "ВыпускПродукции"              - НЗП будет, если нет ни выпуска продукции ни услуг собственным подразделениям
	// - "ВыпускПродукцииОказаниеУслуг" - НЗП будет, если нет ни выпуска продукции ни каких-либо услуг
	// - "" (пустая строка)             - НЗП будет только при наличии ИнвентаризацияНЗП
	Настройки.Вставить("ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска",     "");
	// Определяет порядок закрытия счета 29 "Обслуживающие производства и хозяйства"
	Настройки.Вставить("РасходыОбслуживающихПроизводствВключатьВПрочиеРасходы", Ложь);
	
	Возврат Настройки;
	
КонецФункции

Функция НовыйКонтекстНастроекУчетаЗатрат()
	
	Контекст = Новый Структура;
	Контекст.Вставить("Период",      '0001-01-01');
	Контекст.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Возврат Контекст;
	
КонецФункции

Функция НовыйНастройкиЗакрытияСчета()
	
	Настройки = Новый Структура;
	Настройки.Вставить("Направление",       "СебестоимостьПродаж"); // КалькуляционныйСчет, СебестоимостьВыпуска, СебестоимостьПродаж
	Настройки.Вставить("БазаРаспределения", Перечисления.БазыРаспределенияКосвенныхРасходов.ПрямыеЗатраты);
	Настройки.Вставить("Модификатор");      // Тип определяется базой распределения, см. УстановитьМодификаторБазыРаспределения
	Настройки.Вставить("Ссылка");           // РегистрСведенийКлючЗаписи.МетодыРаспределенияКосвенныхРасходовОрганизаций
	
	Настройки.Вставить("ДетальнаяНастройка", Новый ТаблицаЗначений);
	Настройки.ДетальнаяНастройка.Колонки.Добавить(
		"СтатьяЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	Настройки.ДетальнаяНастройка.Колонки.Добавить(
		"Подразделение",
		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Настройки.ДетальнаяНастройка.Колонки.Добавить(
		"БазаРаспределения",
		Новый ОписаниеТипов("ПеречислениеСсылка.БазыРаспределенияКосвенныхРасходов"));
	Настройки.ДетальнаяНастройка.Колонки.Добавить("Модификатор");
	Настройки.ДетальнаяНастройка.Колонки.Добавить(
		"Ссылка",
		Новый ОписаниеТипов("РегистрСведенийКлючЗаписи.МетодыРаспределенияКосвенныхРасходовОрганизаций"));
	
	Возврат Настройки;
	
КонецФункции

Процедура ЗаполнитьНастройкиУчетаЗатрат(Настройки, Период, Организация, РегламентнаяОперация = Неопределено)
	
	Настройки.Контекст.Период      = Период;
	Настройки.Контекст.Организация = Организация;
	
	ИспользуютсяСчетаРасходовНаПроизводство = Ложь;
	
	СчетаРасходов = Новый Массив;
	
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчетов20_23_25_26 
		Или Не ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Если УчетнаяПолитика.ВедетсяПроизводственнаяДеятельность(Организация, Период) Тогда
			ИспользуютсяСчетаРасходовНаПроизводство = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				СчетаРасходов,
				УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаОбслуживающиеПроизводства());
	
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаКосвенныхРасходов());
	КонецЕсли;
		
	Если РегламентнаяОперация = Перечисления.ВидыРегламентныхОпераций.ЗакрытиеСчета44
		Или Не ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СчетаРасходов,
			УчетЗатрат.ПредопределенныеСчетаРасходовНаПродажу());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СчетаРасходов) Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.СчетаУчета = УчетЗатрат.СчетаРасходов(СчетаРасходов);
	
	Для Каждого Счет Из Настройки.СчетаУчета Цикл
		Настройки.Закрытие.Вставить(Счет, НовыйНастройкиЗакрытияСчета());
		Настройки.Аналитика.Вставить(Счет, Новый Массив);
	КонецЦикла;
	
	ПрименитьНастройкиПланаСчетов(Настройки.Аналитика);
	
	Настройки.РасходыОбслуживающихПроизводствВключатьВПрочиеРасходы = УчетнаяПолитика.РасходыОбслуживающихПроизводствВключатьВПрочиеРасходы(Организация, Период);
	
	Если Не ИспользуютсяСчетаРасходовНаПроизводство Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.ВыпускПродукции = ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность");
	
	Если УчетнаяПолитика.ОказаниеУслуг(Организация, Период) Тогда
		ПорядокСписанияРасходовНаСебестоимостьУслуг = УчетнаяПолитика.ПорядокСписанияРасходовНаСебестоимостьУслуг(Организация, Период);
		Если ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки Тогда
			// Вариант БезУчетаВыручки предполагает подчеркнуто простую схему, в которой все расходы,
			// которые не удалось связать ни с выпуском, ни с выручкой от реализации услуг,
			// включаются в себестоимость услуг.
			// В этом случае НЗП возможно только, если данные о нем введены документом ИнвентаризацияНЗП
			Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска = "";
		Иначе
			// Остальные варианты предполагают, что при отсутствии и выпуска и выручки от реализации услуг будет отражено НЗП
			// (эти остальные варианты отличаются между собой тем, что именно считать "выручкой" от реализации услуг - 
			// см. ОграничитьРасчетСебестоимостиУслугПлановымиЦенами).
			Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска = "ВыпускПродукцииОказаниеУслуг";
		КонецЕсли;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность")
		И УчетнаяПолитика.ВыпускПродукции(Организация, Период) Тогда
		// Без выпуска неясно, куда закрывать счет, поэтому все останется в НЗП до тех пор, пока не будет отражен выпуск продукции.
		// При этом наличие или отсутствие выручки от реализации услуг не должно влиять на наличие или отсутствие НЗП.
		Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска = "ВыпускПродукции";
	Иначе
		// НЗП не оценивается вовсе - все расходы считаются себестоимостью услуг
		Настройки.ОцениватьНезавершенноеПроизводствоПоДаннымВыпуска = "";
	КонецЕсли;
	
	Если УчетнаяПолитика.ПлановаяСебестоимость(Организация, Период) Тогда
		
		Настройки.ИспользоватьПлановуюСебестоимость = Истина;
		
		Если УчетнаяПолитика.ОказаниеУслуг(Организация, Период) Тогда
		
			ПорядокСписанияРасходовНаСебестоимостьУслуг = УчетнаяПолитика.ПорядокСписанияРасходовНаСебестоимостьУслуг(
				Организация,
				Период);
			
			Если ПорядокСписанияРасходовНаСебестоимостьУслуг = Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.ТолькоПоПлановымЦенам Тогда
				// Правило применяем, если это предусмотрено учетной политикой
				Настройки.ОграничитьРасчетСебестоимостиУслугПлановымиЦенами = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВключитьВСебестоимостьПродукции = Новый Массив;
	ВключитьВСебестоимостьПродукции.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
	ВключитьВСебестоимостьПродукции.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	Для Каждого Счет Из БухгалтерскийУчет.СформироватьМассивСубсчетов(ВключитьВСебестоимостьПродукции) Цикл
		НастройкиЗакрытияСчета = Настройки.Закрытие[Счет];
		Если НастройкиЗакрытияСчета <> Неопределено Тогда
			НастройкиЗакрытияСчета.Направление = "СебестоимостьВыпуска";
		КонецЕсли;
	КонецЦикла;
	
	ОтнестиНаКалькуляционныйСчет = Новый Массив;
	ОтнестиНаКалькуляционныйСчет.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	Если Не УчетнаяПолитика.ДиректКостинг(Организация, Период) Тогда
		ОтнестиНаКалькуляционныйСчет.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	КонецЕсли;
	
	Для Каждого Счет Из БухгалтерскийУчет.СформироватьМассивСубсчетов(ОтнестиНаКалькуляционныйСчет) Цикл
		НастройкиЗакрытияСчета = Настройки.Закрытие[Счет];
		Если НастройкиЗакрытияСчета <> Неопределено Тогда
			НастройкиЗакрытияСчета.Направление = "КалькуляционныйСчет";
		КонецЕсли;
	КонецЦикла;
	
	ПрименитьМетодыРаспределенияКосвенныхРасходовОрганизаций(Настройки.Закрытие, Период, Организация);
		
КонецПроцедуры

Процедура ПрименитьНастройкиПланаСчетов(АналитикаСчетов)
	
	СчетаУчета = Новый Массив;
	Для Каждого КлючИЗначение Из АналитикаСчетов Цикл
		СчетаУчета.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	НеиспользуемаяАналитика = Новый Массив;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоНоменклатурныхГрупп") Тогда
		НеиспользуемаяАналитика.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаУчета",              СчетаУчета);
	Запрос.УстановитьПараметр("НеиспользуемаяАналитика", НеиспользуемаяАналитика);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	ХозрасчетныйВидыСубконто.ВидСубконто КАК ВидАналитикиЗатрат,
	|	ХозрасчетныйВидыСубконто.НомерСтроки КАК Порядок
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В(&СчетаУчета)
	|	И НЕ ХозрасчетныйВидыСубконто.ВидСубконто В (&НеиспользуемаяАналитика)
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка,
	|	""Подразделение"",
	|	0
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В(&СчетаУчета)
	|	И Хозрасчетный.УчетПоПодразделениям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		АналитикаСчета = АналитикаСчетов[Выборка.Счет];
		Если АналитикаСчета <> Неопределено Тогда
			АналитикаСчета.Добавить(Выборка.ВидАналитикиЗатрат);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьМетодыРаспределенияКосвенныхРасходовОрганизаций(НастройкиЗакрытияСчетов, Период, Организация)
	
	ЗакрываемыеСчета = Новый Массив;
	Для Каждого НастройкиСчета Из НастройкиЗакрытияСчетов Цикл
		Если НастройкиСчета.Значение.Направление = "КалькуляционныйСчет" Тогда
			ЗакрываемыеСчета.Добавить(НастройкиСчета.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗакрываемыеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.БазаРаспределения КАК БазаРаспределения,
	|	ВЫБОР
	|		КОГДА Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат)
	|			ТОГДА Настройки.СписокСтатейЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|	КОНЕЦ КАК СписокСтатейЗатрат,
	|	ВЫБОР
	|		КОГДА Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Выручка)
	|			ТОГДА Настройки.СчетПрямыхЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	КОНЕЦ КАК СчетПрямыхЗатрат,
	|	ВЫБОР
	|		КОГДА Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Выручка)
	|			ТОГДА Настройки.ПодразделениеЗатрат
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеЗатрат,
	|	Настройки.Период КАК ПериодНастройки,
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения <> ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.СчетЗатрат КАК СчетНастройки
	|ИЗ
	|	ДанныеРегистра КАК Настройки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Учтем иерархию счетов в настройках: может быть указан пустой счет в значении "все счета", счет-группа в значении "все субсчета"
	СчетаНастройки = Новый ТаблицаЗначений;
	СчетаНастройки.Колонки.Добавить("СчетНастройки", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СчетаНастройки.Колонки.Добавить("СчетРасходов",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.СчетНастройки) Тогда
			Для Каждого СчетРасходов Из ЗакрываемыеСчета Цикл
				Запись = СчетаНастройки.Добавить();
				Запись.СчетНастройки = Выборка.СчетНастройки;
				Запись.СчетРасходов  = СчетРасходов;
			КонецЦикла;
		ИначеЕсли ЗакрываемыеСчета.Найти(Выборка.СчетНастройки) <> Неопределено Тогда
			Запись = СчетаНастройки.Добавить();
			Запись.СчетНастройки = Выборка.СчетНастройки;
			Запись.СчетРасходов  = Выборка.СчетНастройки;
		Иначе
			// может быть счетом-группой
			Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(Выборка.СчетНастройки);
			Для Каждого СчетРасходов Из Субсчета Цикл
				Если ЗакрываемыеСчета.Найти(СчетРасходов) <> Неопределено Тогда
					Запись = СчетаНастройки.Добавить();
					Запись.СчетНастройки = Выборка.СчетНастройки;
					Запись.СчетРасходов  = СчетРасходов;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаНастройки", СчетаНастройки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаНастройки.СчетНастройки КАК СчетНастройки,
	|	СчетаНастройки.СчетРасходов КАК СчетРасходов
	|ПОМЕСТИТЬ СчетаНастройки
	|ИЗ
	|	&СчетаНастройки КАК СчетаНастройки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетНастройки";
	Запрос.Выполнить();
	
	// НастройкаРаспределенияКосвенныхРасходов в отличие от МетодыРаспределенияКосвенныхРасходов 
	// содержит отдельные записи по каждому субсчету.
	//
	// В настройке используется подход "незаполненное поле означает <все, для которых не указано явно>".
	// Кроме того, разные настройки могут быть выполнены как для счета-группы, так и для субсчета.
	// Поэтому одни и те же расходы могут попасть под две настройки и применяется приоритезация настроек.
	//
	// Для приоритезации условия, при которых настройка подходит в конкретном случае, отранжированы:
	// 0. "Для всех статей затрат" - меньше всего влияет на авторитет правила
	// 1. "Для всех подразделений" - сильнее всего подрывает авторитет правила
	//
	// Таким образом, если есть две подходящие настройки, в одной из которых заполнено только подразделение, а в другой - только статья, 
	// то применять следует первую.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.СчетЗатрат КАК СчетНастройки,
	|	ЕСТЬNULL(Настройки.СчетЗатрат.Код, """") КАК СчетНастройкиКод,
	|	СчетаНастройки.СчетРасходов КАК СчетРасходов,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.БазаРаспределения КАК БазаРаспределения,
	|	Настройки.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|	Настройки.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|	Настройки.ПодразделениеЗатрат КАК ПодразделениеЗатрат,
	|	Настройки.ПериодНастройки КАК ПериодНастройки,
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ НастройкаРаспределения
	|ИЗ
	|	ДанныеРегистра КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаНастройки КАК СчетаНастройки
	|		ПО Настройки.СчетЗатрат = СчетаНастройки.СчетНастройки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетРасходов";
	
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Настройка.БазаРаспределения КАК БазаРаспределения,
	|	Настройка.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|	Настройка.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|	Настройка.ПодразделениеЗатрат КАК ПодразделениеЗатрат
	|ИЗ
	|	НастройкаРаспределения КАК Настройка
	|ГДЕ
	|	Настройка.СчетРасходов = &Счет";
	
	СчетаДетальнаяНастройка = Новый Массив;
	
	Для Каждого Счет Из ЗакрываемыеСчета Цикл
		
		Запрос.УстановитьПараметр("Счет", Счет);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоЗаписей = Выборка.Количество();
		Если КоличествоЗаписей > 1 Тогда
			СчетаДетальнаяНастройка.Добавить(Счет);
		ИначеЕсли КоличествоЗаписей = 1 Тогда
			Выборка.Следующий();
			НастройкаЗакрытияСчета = НастройкиЗакрытияСчетов[Счет];
			НастройкаЗакрытияСчета.БазаРаспределения = Выборка.БазаРаспределения;
			УстановитьМодификаторБазыРаспределения(
				НастройкаЗакрытияСчета,
				Выборка,
				Период,
				Организация);
			НастройкаЗакрытияСчета.Ссылка = КлючОсновнойНастройки(МенеджерВременныхТаблиц, Счет);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СчетаДетальнаяНастройка) Тогда
		Возврат;
	КонецЕсли;
	
	// Детальные настройки упорядочиваем "от общего к частному", так как именно такой порядок естественнен для пользователя.
	// Фактически правила выполняются в обратном порядке - от частного к общему с тем, чтобы общие правила применялись только тогда,
	// когда не применяются частные.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СчетаДетальнаяНастройка", СчетаДетальнаяНастройка);
	Запрос.Текст =
	// имена полей - как в регистре, для конструктора ссылки
	"ВЫБРАТЬ
	|	Настройки.ПериодНастройки КАК Период,
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетНастройки КАК СчетЗатрат,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.СчетРасходов КАК СчетРасходов,
	|	Настройки.СчетНастройки КАК СчетНастройки,
	|	Настройки.СчетНастройкиКод КАК СчетНастройкиКод,
	|	Настройки.БазаРаспределения КАК БазаРаспределения,
	|	Настройки.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|	Настройки.СчетПрямыхЗатрат КАК СчетПрямыхЗатрат,
	|	Настройки.ПодразделениеЗатрат КАК ПодразделениеЗатрат
	|ИЗ
	|	НастройкаРаспределения КАК Настройки
	|ГДЕ
	|	Настройки.СчетРасходов В(&СчетаДетальнаяНастройка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетНастройкиКод,
	|	СчетНастройки,
	|	Подразделение,
	|	СтатьяЗатрат
	|ИТОГИ ПО
	|	СчетРасходов";
	ВыборкаСчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчета.Следующий() Цикл
		
		НастройкаЗакрытияСчета = НастройкиЗакрытияСчетов[ВыборкаСчета.СчетРасходов];
		
		Выборка = ВыборкаСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Запись = НастройкаЗакрытияСчета.ДетальнаяНастройка.Добавить();
			Запись.Подразделение     = Выборка.Подразделение;
			Запись.СтатьяЗатрат      = Выборка.СтатьяЗатрат;
			Запись.БазаРаспределения = Выборка.БазаРаспределения;
			УстановитьМодификаторБазыРаспределения(
				Запись,
				Выборка,
				Период,
				Организация);
			Запись.Ссылка = НастройкаРаспределенияКосвенныхРасходовСсылка(Выборка);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НастройкаЗакрытияСчета.ДетальнаяНастройка) Тогда
			ЗаполнитьЗначенияСвойств(
				НастройкаЗакрытияСчета,
				НастройкаЗакрытияСчета.ДетальнаяНастройка[0],
				"БазаРаспределения,Модификатор");
			НастройкаЗакрытияСчета.ДетальнаяНастройка.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючОсновнойНастройки(МенеджерВременныхТаблиц, Счет)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Счет", Счет);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Настройка.ПериодНастройки КАК Период,
	|	Настройка.Организация КАК Организация,
	|	Настройка.СчетНастройки КАК СчетЗатрат,
	|	Настройка.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройка.Подразделение КАК Подразделение
	|ИЗ
	|	НастройкаРаспределения КАК Настройка
	|ГДЕ
	|	Настройка.СчетРасходов = &Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Подразделение,
	|	СтатьяЗатрат";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат НастройкаРаспределенияКосвенныхРасходовСсылка(Неопределено);
	Иначе
		Возврат НастройкаРаспределенияКосвенныхРасходовСсылка(Выборка);
	КонецЕсли;
	
КонецФункции

Функция НастройкаРаспределенияКосвенныхРасходовСсылка(ДанныеКлюча)
	
	Если ДанныеКлюча = Неопределено Тогда
		КлючНастройки = Неопределено;
	Иначе
		// Имена свойств совпадают с измерениями регистра сведений
		КлючНастройки = Новый Структура("Период,Организация,СчетЗатрат,СтатьяЗатрат,Подразделение");
		ЗаполнитьЗначенияСвойств(КлючНастройки, ДанныеКлюча);
	КонецЕсли;
		
	Возврат РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СоздатьКлючЗаписи(КлючНастройки);
	
КонецФункции

Процедура УстановитьМодификаторБазыРаспределения(НастройкаЗакрытияСчета, НастройкаМетоды, Период, Организация)
	
	Если НастройкаЗакрытияСчета.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
		
		НастройкаЗакрытияСчета.Модификатор = Новый Массив;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", НастройкаМетоды.СписокСтатейЗатрат);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Список.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.СтатьиЗатрат КАК Список
		|ГДЕ
		|	Список.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НастройкаЗакрытияСчета.Модификатор.Добавить(Выборка.СтатьяЗатрат);
		КонецЦикла;
		
	ИначеЕсли НастройкаЗакрытияСчета.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
		
		НастройкаЗакрытияСчета.Модификатор = Новый Структура;
		НастройкаЗакрытияСчета.Модификатор.Вставить("Счет",             НастройкаМетоды.СчетПрямыхЗатрат); // Счет, на который относятся расходы в результате распределения
		НастройкаЗакрытияСчета.Модификатор.Вставить("Подразделение",    НастройкаМетоды.ПодразделениеЗатрат);
		НастройкаЗакрытияСчета.Модификатор.Вставить("УчитыватьЗатраты", Не ЗначениеЗаполнено(НастройкаМетоды.СчетПрямыхЗатрат)); // Для определения счета можем обратиться к затратам
		
		Если Не ТолькоУслугиЗаказчикам(Организация, Период) Тогда
			
			// Расходы могут быть не связаны с оказанием услуг
			// Поэтому учтем при распределении не только выручку, но и затраты
			НастройкаЗакрытияСчета.Модификатор.УчитыватьЗатраты = Истина;
			
		ИначеЕсли УчетнаяПолитика.ПорядокСписанияРасходовНаСебестоимостьУслуг(Организация, Период) = 
				Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки Тогда
				
			НастройкаЗакрытияСчета.Модификатор.УчитыватьЗатраты = Ложь; // Подчеркнуто простая схема закрытия счетов
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТолькоУслугиЗаказчикам(Организация, Период)
	
	Возврат Не УчетнаяПолитика.ВыпускПродукции(Организация, Период)
		И Не УчетнаяПолитика.РассчитыватьСебестоимостьПолуфабрикатов(Организация, Период)
		И Не УчетнаяПолитика.РассчитыватьСебестоимостьУслугСобственнымПодразделениям(Организация, Период);
			
КонецФункции

// Конструктор коллекции, используемой в ходе заполнения правил распределения.
// Используется для хранения состояния, кеширования, "упаковки" параметров.
//
// Параметры:
//  ПравилаРаспределения - ТаблицаЗначений - заполняемая коллекция, см. НовыеПравилаРаспределения
//  НастройкиУчетаЗатрат - Структура - источник данных, см. НовыйНастройкиУчетаЗатрат
// 
// Возвращаемое значение:
//  Структура - см. содержимое функции
//
Функция НовыйПроцессорЗаполненияПравилРаспределения(ПравилаРаспределения, НастройкиУчетаЗатрат, РазрезыРаспределения)
	
	Процессор = Новый Структура;
	
	Процессор.Вставить("Правила",              ПравилаРаспределения);
	Процессор.Вставить("Настройки",            НастройкиУчетаЗатрат);
	Процессор.Вставить("РазрезыРаспределения", РазрезыРаспределения);
	Процессор.Вставить("КодЯзыка",             Метаданные.ОсновнойЯзык.КодЯзыка); // Для строк, записываемых в информационную базу
	Процессор.Вставить("ПравилаПоСчетам",      Новый Соответствие); // Ключ - счет, Значение - массив правил
	Процессор.Вставить("КешПредставленийСчетов");
	
	// Устанавливаются в ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения
	Процессор.Вставить("Счет",           ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Процессор.Вставить("ПравилаПоСчету", Новый Массив);
	Процессор.Вставить("КлассСчетов",    "");
	Процессор.Вставить("Закрытие");
	Процессор.Вставить("Аналитика"); // В актуальной версии используется только для отображения настроек пользователю. Не содержит аналитику, фактически используемую, но не отображаемую.
	
	// Инициализируются в ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения,
	// устанавливаются по мере добавления правил
	Процессор.Вставить("СвязьПредложенийОписания", Новый Структура);
	
	Возврат Процессор;
	
КонецФункции

Функция ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения(Процессор, Счет)
	
	Процессор.Счет = Счет;
	
	Процессор.ПравилаПоСчету = Новый Массив;
	Процессор.ПравилаПоСчетам.Вставить(Счет, Процессор.ПравилаПоСчету);
	
	Процессор.Закрытие  = Процессор.Настройки.Закрытие[Счет];
	Процессор.Аналитика = Процессор.Настройки.Аналитика[Счет];
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства) Тогда
		Процессор.КлассСчетов = "ПрямыеРасходы";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
		Процессор.КлассСчетов = "КосвенныеРасходы";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
		Процессор.КлассСчетов = "РасходыНаПродажу";
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства) Тогда
		Процессор.КлассСчетов = "РасходыОбслуживающихПроизводств";
	КонецЕсли;
	
	Процессор.СвязьПредложенийОписания.Очистить();
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьПравилаРаспределенияПоНастройкамУчетаЗатрат(Процессор)
	
	Для Каждого СчетУчета Из Процессор.Настройки.СчетаУчета Цикл
		
		Если Не ИнициализироватьСчетомПроцессорЗаполненияПравилРаспределения(Процессор, СчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтандартнаяОбработка = Истина;
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПередДобавлениемПравилПоСчету(Процессор, СтандартнаяОбработка);
		Если Не СтандартнаяОбработка Тогда
			Продолжить;
		КонецЕсли;
		
		// ПРЯМЫЕ РАСХОДЫ, СЧЕТА 20, 23
		
		// Сгруппируем прямые расходы так, чтобы избавиться от неиспользуемой аналитики перед распределением на выпуск
		ДобавитьПравилоСгруппироватьПрямыеРасходы(Процессор);
	
		// Перенесем на продукцию прямые расходы, учитываемые с детализацией до продукции.
		ДобавитьПравилоПрямыеРасходыНаВыпуск(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
			Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
		
		ДобавитьПравилоПрямыеРасходыНаВыпуск(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция,
			Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска);
		
		// Сгруппируем остальные прямые расходы 
		// так, чтобы можно было учесть данные документов ИнвентаризацияНезавершенногоПроизводства
		ДобавитьПравилоНезавершенноеПроизводство(Процессор);
		
		// Распределим расходы, оставшиеся на номенклатурных группах без указания продукции:
		
		// - внутри счетов затрат
		ДобавитьПравилоКосвенныеРасходыПоПрямымРасходам(Процессор);
		
		// - на выпуск
		ДобавитьПравилоПрямыеРасходыНаВыпуск(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,
			Перечисления.БазыРаспределенияКосвенныхРасходов.ПлановаяСебестоимость);
		
		ДобавитьПравилоПрямыеРасходыНаВыпуск(
			Процессор,
			ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,
			Перечисления.БазыРаспределенияКосвенныхРасходов.ОбъемВыпуска);
	
		ДобавитьПравилоПрямыеРасходыПоВыручкеОтРеализацииУслуг(Процессор);
	
		// Остальные расходы могут остаться в незавершенном производстве ...
		ДобавитьПравилоНезавершенноеПроизводствоБезИнвентаризации(Процессор);
		// ... или в полном объеме быть списаны в себестоимость оказанных услуг.
		ДобавитьПравилоСписатьВсеПрямыеРасходыНаСебестоимостьОказанныхУслуг(Процессор);
		
		// КОСВЕННЫЕ РАСХОДЫ, СЧЕТА 25, 26
		
		ДобавитьПравилоДиректКостинг(Процессор);
	
		ДобавитьПравилаКосвенныеРасходыПоНастройке(Процессор);
		
		// РАСХОДЫ ОБСЛУЖИВАЮЩИХ ПРОИЗВОДСТВ И ХОЗЯЙСТВ, СЧЕТ 29
		
		РасходыОбслуживающихПроизводств.ДобавитьПравилоОбслуживающиеПроизводства(Процессор);
		
		// РАСХОДЫ НА ПРОДАЖУ, СЧЕТ 44
		
		// Распределим транспортные расходы
		ДобавитьПравилаТранспортныеРасходы(Процессор);
		
		// Спишем все остальные расходы на продажу
		ДобавитьПравилоРасходыНаПродажу(Процессор);
		
		ПравилаРаспределенияРасходовМодификацияКонфигурации.ПриДобавленииПравилПоСчету(Процессор);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ОписаниеРаспределения

Функция НовыйОписаниеРаспределения()
	
	ОписаниеРаспределения = Новый ТаблицаЗначений;
	ОписаниеРаспределения.Колонки.Добавить("Счет",     Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ОписаниеРаспределения.Колонки.Добавить("Описание", Новый ОписаниеТипов("Массив"));//Строки - "абзацы", соответствующие отдельным правилам
	
	Возврат ОписаниеРаспределения;
	
КонецФункции

Функция ПредставлениеОткрытогоСпискаСчетов(Ссылки, ОбобщающееСловоЕдЧ = "", ОбобщающееСловоМнЧ = "", КешПредставлений = Неопределено)
	
	Если Не ЗначениеЗаполнено(Ссылки) Тогда
		Возврат "";
	КонецЕсли;
	
	Ссылка = Неопределено;
	
	Если ТипЗнч(Ссылки) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Ссылка = Ссылки;
	ИначеЕсли Ссылки.Количество() = 1 Тогда
		Ссылка = Ссылки[0];
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		
		// Список основных представлений
		
		Перечень = СтрСоединить(Ссылки, НСтр("ru = ', '"));
		Если ПустаяСтрока(ОбобщающееСловоМнЧ) Тогда
			Возврат Перечень;
		Иначе
			Возврат СтрШаблон(НСтр("ru = '%1 %2'"), ОбобщающееСловоМнЧ, Перечень);
		КонецЕсли;
		
	Иначе
		
		Шаблон = НСтр("ru = '%1 ""%2""'");
		
		Представление = Неопределено;
		Если КешПредставлений <> Неопределено Тогда
			Представление = КешПредставлений[Ссылка];
		КонецЕсли;
		
		Если Представление = Неопределено Тогда
			Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Наименование");
			Если КешПредставлений <> Неопределено Тогда
				КешПредставлений.Вставить(Ссылка, Представление);
			КонецЕсли;
		КонецЕсли;
		
		ПолноеОписаниеСчета = СтрШаблон(Шаблон, Ссылка, Представление);
		
		Если ПустаяСтрока(ОбобщающееСловоЕдЧ) Тогда
			Возврат ПолноеОписаниеСчета;
		Иначе
			Возврат СтрШаблон(НСтр("ru = '%1 %2'"), ОбобщающееСловоЕдЧ, ПолноеОписаниеСчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеВидовАналитикиКосвенныхРасходов(ВидыАналитикиСчета, ВидыАналитикиИсточника)
	
	ПредставленияВидовАналитики = Новый Массив;
	
	Для Каждого ВидАналитики Из ВидыАналитикиСчета Цикл
		
		Если ВидыАналитикиИсточника.Найти(ВидАналитики) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставленияВидовАналитики.Добавить(РазрезАналитикиДательныйПадеж(ВидАналитики));
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ПредставленияВидовАналитики) Тогда
		Возврат "";
	Иначе
		Возврат ОбщегоНазначенияБПКлиентСервер.ПредставлениеСписка(ПредставленияВидовАналитики);
	КонецЕсли;
	
КонецФункции

Функция РазрезАналитикиПоИмениПоля(ИмяПоля)
	
	Если ИмяПоля = "Подразделение" Тогда
		Возврат "Подразделение";
	ИначеЕсли ИмяПоля = "НоменклатурнаяГруппа" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы;
	ИначеЕсли ИмяПоля = "СтатьяЗатрат" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	ИначеЕсли ИмяПоля = "Продукция" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция РазрезАналитикиРодительныйПадеж(РазрезАналитики)
	
	Если РазрезАналитики = "Подразделение" Тогда
		Возврат НСтр("ru = 'подразделений'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
		Возврат НСтр("ru = 'номенклатурных групп'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
		Возврат НСтр("ru = 'статей затрат'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Возврат НСтр("ru = 'наименований продукции'");
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'элементов %1'"), РазрезАналитики);
	КонецЕсли;
	
КонецФункции

Функция РазрезАналитикиДательныйПадеж(РазрезАналитики)
	
	Если РазрезАналитики = "Подразделение" Тогда
		Возврат НСтр("ru = 'подразделениям'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
		Возврат НСтр("ru = 'номенклатурным группам'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
		Возврат НСтр("ru = 'статьям затрат'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Возврат НСтр("ru = 'наименованиям продукции'");
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'элементам %1'"), РазрезАналитики);
	КонецЕсли;
	
КонецФункции

Функция РазрезАналитикиТворительныйПадеж(РазрезАналитики)
	
	Если РазрезАналитики = "Подразделение" Тогда
		Возврат НСтр("ru = 'подразделениями'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
		Возврат НСтр("ru = 'номенклатурными группами'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
		Возврат НСтр("ru = 'статьями затрат'");
	ИначеЕсли РазрезАналитики = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция Тогда
		Возврат НСтр("ru = 'наименованиями продукции'");
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'элементами %1'"), РазрезАналитики);
	КонецЕсли;
	
КонецФункции

Функция ТекстУточненияЗатратАналитикойВыпуска(ВидыАналитикиСчета, ВидыАналитикиИсточника, Знач ВидВыпуска = "", Знач МодификаторДанныхВыпуска = "", ПротивопоставлениеДанныхВыпуска = Ложь)
	
	// См. комментарий в ОписаниеПравилаПрямыеРасходыНаВыпуск
	
	ПредставлениеВидовАналитики = ПредставлениеВидовАналитикиКосвенныхРасходов(ВидыАналитикиСчета, ВидыАналитикиИсточника);
	
	Если ПустаяСтрока(ПредставлениеВидовАналитики) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(ВидВыпуска) Тогда
		ВидВыпуска = НСтр("ru = 'отражен выпуск продукции'");
	КонецЕсли;
	
	РазделительДанныхВыпуска = "";
	Если Не ПустаяСтрока(МодификаторДанныхВыпуска) Тогда
		Если ПротивопоставлениеДанныхВыпуска Тогда
			РазделительДанныхВыпуска = НСтр("ru = ', но '");
		Иначе
			РазделительДанныхВыпуска = " ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru = ', отнесенные к %1, по которым %2%3%4,'"),
		ПредставлениеВидовАналитики,
		ВидВыпуска,
		РазделительДанныхВыпуска,
		МодификаторДанныхВыпуска);

КонецФункции

Функция СловоОстальныеЗатратыПоСчету(Процессор)
	
	Если Процессор.ПравилаПоСчету.Количество() > 1 Тогда
		Возврат НСтр("ru = 'остальные'") + Символы.НПП;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроверкаКорректностиНастройки

Процедура СоздатьМетодыРаспределенияКосвенныхРасходов(МенеджерВременныхТаблиц, Период, Организация)
	
	// Если применяется директ-костинг, то настройки для счета 26 игнорируются.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("Период",                 КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДиректКостинг",          УчетнаяПолитика.ДиректКостинг(Организация, Период));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ВТ_СчетаНеПрименяетсяНастройка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	&ДиректКостинг
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбщехозяйственныеРасходы))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.БазаРаспределения,
	|	Настройки.СписокСтатейЗатрат,
	|	Настройки.СчетПрямыхЗатрат,
	|	Настройки.ПодразделениеЗатрат,
	|	Настройки.Период
	|ПОМЕСТИТЬ МетодыРаспределенияКосвенныхРасходов
	|ИЗ
	|	РегистрСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.СрезПоследних(&Период, Организация = &Организация) КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетаНеПрименяетсяНастройка КАК СчетаНеПрименяетсяНастройка
	|		ПО Настройки.СчетЗатрат = СчетаНеПрименяетсяНастройка.Счет
	|ГДЕ
	|	СчетаНеПрименяетсяНастройка.Счет ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СчетаНеПрименяетсяНастройка";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьЗаданыМетодыРаспределенияКосвенныхРасходов(Ошибки, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Настройки.Организация),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.СчетЗатрат),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.СтатьяЗатрат),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.Подразделение)
	|ИЗ
	|	МетодыРаспределенияКосвенныхРасходов КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	СчетЗатрат,
	|	СтатьяЗатрат,
	|	Подразделение";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание = НСтр("ru = 'Не задана база распределения при настройке методов распределения косвенных расходов.'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Ссылка = СсылкаМетодыРаспределенияКосвенныхРасходовОрганизаций(Выборка);
		
	КонецЦикла;
		
	Если Ошибка.ЛокализацияДетально.Количество() = 1 Тогда
		Ошибка.Локализация = НСтр("ru = 'Проверьте запись:'");
	Иначе
		Ошибка.Локализация = НСтр("ru = 'Проверьте записи:'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУказанСписокСтатейЗатрат(Ошибки, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Проверим, что заполнен список статей затрат для метода распределения косвенных расходов "Отдельные статьи прямых затрат"
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Настройки.Организация),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.СчетЗатрат),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.СтатьяЗатрат),
	|	ПРЕДСТАВЛЕНИЕ(Настройки.Подразделение)
	|ИЗ
	|	МетодыРаспределенияКосвенныхРасходов КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат)
	|	И Настройки.СписокСтатейЗатрат = ЗНАЧЕНИЕ(Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	СчетЗатрат,
	|	СтатьяЗатрат,
	|	Подразделение";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка          = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание = НСтр("ru = 'Не указан список статей затрат базы распределения ""Отдельные статьи прямых затрат"".'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
		МестоОшибки.Ссылка = СсылкаМетодыРаспределенияКосвенныхРасходовОрганизаций(Выборка);
		
	КонецЦикла;
		
	Если Ошибка.ЛокализацияДетально.Количество() = 1 Тогда
		Ошибка.Локализация = НСтр("ru = 'Проверьте запись:'");
	Иначе
		Ошибка.Локализация = НСтр("ru = 'Проверьте записи:'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполненСписокСтатейЗатрат(Ошибки, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.СписокСтатейЗатрат
	|ПОМЕСТИТЬ ВТ_Списки
	|ИЗ
	|	МетодыРаспределенияКосвенныхРасходов КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат)
	|	И Настройки.СписокСтатейЗатрат <> ЗНАЧЕНИЕ(Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Списки.СписокСтатейЗатрат = ЗНАЧЕНИЕ(Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСписокСтатейЗатрат,
	|	Списки.СписокСтатейЗатрат КАК СписокСтатейЗатрат,
	|	ПРЕДСТАВЛЕНИЕ(Списки.СписокСтатейЗатрат)
	|ИЗ
	|	ВТ_Списки КАК Списки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.СтатьиЗатрат КАК СодержаниеСписка
	|		ПО Списки.СписокСтатейЗатрат = СодержаниеСписка.Ссылка
	|ГДЕ
	|	СодержаниеСписка.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокСтатейЗатрат";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ошибка          = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		Ошибка.Описание = НСтр("ru = 'Не заполнен список статей затрат базы распределения ""Отдельные статьи прямых затрат"".'");
		
		ШаблонРекомендации = НСтр("ru = 'Заполните список статей затрат %1'");
		Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРекомендации, Выборка.СписокСтатейЗатрат);
		
		Ошибка.Ссылка = ПолучитьНавигационнуюСсылку(Выборка.СписокСтатейЗатрат);
		
	КонецЦикла;
	
	// Уберем за собой
	Запрос.Текст = "УНИЧТОЖИТЬ ВТ_Списки";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПроверитьМетодРаспределенияВыручка_ЕстьВыручка(Ошибки, МенеджерВременныхТаблиц, Период, Организация)
	
	// Проверим, что для настроек с методом распределения косвенных расходов "Выручка" есть выручка
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеПодразделение", БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.Организация.Представление,
	|	Настройки.СчетЗатрат.Представление,
	|	Настройки.СтатьяЗатрат.Представление,
	|	Настройки.Подразделение.Представление
	|ИЗ
	|	МетодыРаспределенияКосвенныхРасходов КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Выручка)";
	
	ПодозрительныеНастройки = Запрос.Выполнить();
	Если ПодозрительныеНастройки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	// Результат запроса обработаем позже
	
	// Убедимся, что такое заполнение настройки действительно является ошибкой
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СчетаВыручки",        БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.СчетКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетКт В(&СчетаВыручки)
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Активность
	|	И Хозрасчетный.Сумма > 0";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Установили, что есть ошибка и знаем, где она.
	// Сообщим об этом
	
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	
	ДокументыОтраженияВыручки = Новый Массив;
	ДокументыОтраженияВыручки.Добавить(" - " + Метаданные.Документы.РеализацияТоваровУслуг.Синоним);
	ДокументыОтраженияВыручки.Добавить(" - " + Метаданные.Документы.ОказаниеУслуг.Синоним);
	ДокументыОтраженияВыручки.Добавить(" - " + Метаданные.Документы.АктОбОказанииПроизводственныхУслуг.Синоним);
	
	ДокументыОтраженияВыручки = СтрСоединить(ДокументыОтраженияВыручки, Символы.ПС);
	
	Ошибка.Описание     = НСтр("ru = 'Для распределения косвенных расходов используется база ""Выручка"", но выручка не отражена.'");
	Рекомендация        = НСтр("ru = 'Отразите реализацию услуг документами
                                |%1'");
	Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Рекомендация, ДокументыОтраженияВыручки);
	
КонецПроцедуры

Процедура ПроверитьМетодРаспределенияВыручка_ЕстьЗатраты(Ошибки, МенеджерВременныхТаблиц, Период, Организация)
	
	ТолькоУслугиЗаказчикам = ТолькоУслугиЗаказчикам(Организация, Период);
	
	Если ТолькоУслугиЗаказчикам
		И УчетнаяПолитика.ПорядокСписанияРасходовНаСебестоимостьУслуг(Организация, Период) = 
		Перечисления.ПорядокСписанияРасходовНаСебестоимостьУслуг.БезУчетаВыручки Тогда
		Возврат;
	КонецЕсли;
		
	Если ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям") Тогда
		ПоЗатратамОпределяетсяПодразделение = Не ТолькоУслугиЗаказчикам;
	Иначе
		ПоЗатратамОпределяетсяПодразделение = Ложь;
	КонецЕсли;
	
	// Проверим, что для настроек с методом распределения косвенных расходов "Выручка"
	// можно определить счет и подразделение, на которые списать затраты
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустоеПодразделение",                 БухгалтерскийУчетПереопределяемый.ПустоеПодразделение());
	Запрос.УстановитьПараметр("ПоЗатратамОпределяетсяПодразделение", ПоЗатратамОпределяетсяПодразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Настройки.Период КАК Период,
	|	Настройки.Организация КАК Организация,
	|	Настройки.СчетЗатрат КАК СчетЗатрат,
	|	Настройки.СтатьяЗатрат КАК СтатьяЗатрат,
	|	Настройки.Подразделение КАК Подразделение,
	|	Настройки.Организация.Представление,
	|	Настройки.СчетЗатрат.Представление,
	|	Настройки.СтатьяЗатрат.Представление,
	|	Настройки.Подразделение.Представление,
	|	ВЫБОР
	|		КОГДА Настройки.СчетПрямыхЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаполненСчет
	|ИЗ
	|	МетодыРаспределенияКосвенныхРасходов КАК Настройки
	|ГДЕ
	|	Настройки.БазаРаспределения = ЗНАЧЕНИЕ(Перечисление.БазыРаспределенияКосвенныхРасходов.Выручка)
	|	И (Настройки.СчетПрямыхЗатрат = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ &ПоЗатратамОпределяетсяПодразделение = ИСТИНА
	|				И Настройки.ПодразделениеЗатрат = &ПустоеПодразделение)
	|ИТОГИ ПО
	|	ЗаполненСчет";
	ПодозрительныеНастройки = Запрос.Выполнить();
	Если ПодозрительныеНастройки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	// Результат запроса обработаем позже
	
	// Убедимся, что такое заполнение настройки действительно является ошибкой
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",       НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",        КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("СчетаПрямыхРасходов", УчетЗатрат.ПредопределенныеКалькуляционныеСчета());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаПрямыхРасходов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаПрямыхРасходов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаПрямыхРасходов.Счет
	|				ИЗ
	|					СчетаПрямыхРасходов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы),
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотДт <> 0";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Установили, что есть ошибка и знаем, где она.
	// Сообщим об этом
	
	ВыборкаОшибок = ПодозрительныеНастройки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОшибок.Следующий() Цикл
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
		
		Если ВыборкаОшибок.ЗаполненСчет Тогда
			Описание     = НСтр("ru = 'Для распределения косвенных расходов используется база ""Выручка"", но подразделение прямых расходов не указано.'");
			Рекомендация = НСтр("ru = 'Укажите подразделение прямых расходов.'");
		ИначеЕсли ПоЗатратамОпределяетсяПодразделение Тогда 
			// Не заполнени ни счет ни подразделение и оба они нужны
			Описание     = НСтр("ru = 'Для распределения косвенных расходов используется база ""Выручка"", но ни счет ни подразделение прямых расходов не указаны.'");
			Рекомендация = НСтр("ru = 'Укажите счет и подразделение прямых расходов.'");
		Иначе
			// Важен только счет
			Описание     = НСтр("ru = 'Для распределения косвенных расходов используется база ""Выручка"", но счет прямых расходов не указан.'");
			Рекомендация = НСтр("ru = 'Укажите счет прямых расходов.'");
		КонецЕсли;
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", Описание);
		
		Если Не ЗначениеЗаполнено(ВыборкаОшибок.СчетЗатрат)
			Или БухгалтерскийУчетПовтИсп.СчетВИерархии(ВыборкаОшибок.СчетЗатрат, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
			
			РекомендацияОХР = НСтр("ru = 'Проверьте, что общехозяйственные расходы требуется включать в себестоимость продукции. 
                                    |Если не требуется, то в учетной политике укажите, что общехозяйственные расходы включаются в себестоимость продаж (методом директ-костинг).'");
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст",  РекомендацияОХР);
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Ссылка", БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаУчетнуюПолитику());
			
		КонецЕсли;
		
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", Рекомендация);
		
		ВыборкаНастроек = ВыборкаОшибок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаНастроек.Количество() = 1 Тогда
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", НСтр("ru = 'Проверьте запись:'"));
			ДетальныеЗаписи = Ошибка;
		Иначе
			ДетальныеЗаписи = ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", НСтр("ru = 'Проверьте записи:'"));
		КонецЕсли;
		
		Пока ВыборкаНастроек.Следующий() Цикл
			ВыводСообщенийОбОшибках.ДобавитьСекцию(
				ДетальныеЗаписи, 
				"Ссылка", 
				СсылкаМетодыРаспределенияКосвенныхРасходовОрганизаций(ВыборкаНастроек));
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаМетодыРаспределенияКосвенныхРасходовОрганизаций(Источник)
	
	Ключ = Новый Структура();
	
	Ключ.Вставить("Период", Источник.Период);
	Для Каждого Измерение Из Метаданные.РегистрыСведений.МетодыРаспределенияКосвенныхРасходовОрганизаций.Измерения Цикл
		Значение = Источник[Измерение.Имя];
		Ключ.Вставить(Измерение.Имя, Значение);
	КонецЦикла;
	
	// Получим навигационную ссылку
	ПараметрыКонструктора = Новый Массив;
	ПараметрыКонструктора.Добавить(Ключ);
	КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.МетодыРаспределенияКосвенныхРасходовОрганизаций"), ПараметрыКонструктора);
	Возврат ПолучитьНавигационнуюСсылку(КлючЗаписи);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщиеВременныеТаблицы

Процедура ДобавитьОписаниеВременнойТаблицыВыпускПродукцииУслуг(ОписаниеБазы)
	
	// Выпуск продукции - это всегда ОсновнаяСистемаНалогообложения

	ТекстСоздатьВременныеТаблицы = 
	"ВЫБРАТЬ
	|	Выпуск.СчетЗатрат КАК СчетИсточник,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА Выпуск.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК ПодразделениеИсточник,
	|	Выпуск.НоменклатурнаяГруппа КАК НоменклатурнаяГруппаИсточник,
	|	Выпуск.Продукция КАК ПродукцияИсточник,
	|	Выпуск.СчетСписания КАК Счет,
	|	Выпуск.ПодразделениеСписания КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ КАК ВидДеятельности,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания1
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания2
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания3
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Выпуск.Продукция
	|	КОНЕЦ КАК Номенклатура,
	|	СУММА(Выпуск.ПлановаяСтоимостьОборот) КАК ПлановаяСтоимость,
	|	СУММА(Выпуск.КоличествоОборот) КАК Количество,
	|	НЕ Выпуск.ПрямыеРасходыРаспределятьПоКоличеству КАК РазрешеноИспользоватьПлановуюСтоимость
	|ПОМЕСТИТЬ ВыпускПродукцииУслуг
	|ИЗ
	|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК Выпуск
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗатрат КАК СчетаЗатрат
	|		ПО Выпуск.СчетСписания = СчетаЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО Выпуск.СчетСписания = СчетаЗапасов.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ПО Выпуск.СчетСписания = СчетаДоходовИРасходовЕНВД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО Выпуск.СчетСписания = СубконтоЗатрат.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО Выпуск.СчетЗатрат = Хозрасчетный.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.СчетЗатрат,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.УчетПоПодразделениям
	|			ТОГДА Выпуск.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	КОНЕЦ,
	|	Выпуск.НоменклатурнаяГруппа,
	|	Выпуск.Продукция,
	|	Выпуск.СчетСписания,
	|	Выпуск.ПодразделениеСписания,
	|	ВЫБОР
	|		КОГДА &ТолькоОсновнаяСистемаНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		КОГДА &ТолькоОсобыйПорядокНалогообложения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|		КОГДА СчетаДоходовИРасходовЕНВД.Счет ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания1
	|		КОГДА СубконтоЗатрат.ВидСубконто1 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания2
	|		КОГДА СубконтоЗатрат.ВидСубконто2 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания2
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗатрат.Счет ЕСТЬ NULL
	|			ТОГДА Выпуск.СубконтоСписания3
	|		КОГДА СубконтоЗатрат.ВидСубконто3 ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Выпуск.СубконтоСписания3
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(Выпуск.СубконтоСписания3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ Выпуск.Продукция
	|	КОНЕЦ,
	|	НЕ Выпуск.ПрямыеРасходыРаспределятьПоКоличеству
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник,
	|	ПодразделениеИсточник,
	|	НоменклатурнаяГруппаИсточник,
	|	ПродукцияИсточник,
	|	ВидДеятельности";
	
	ОписаниеБазы.Вставить("ПакетВременныхТаблиц",       "ВыпускПродукцииУслуг");
	ОписаниеБазы.Вставить("СоздатьВременныеТаблицы",    ТекстСоздатьВременныеТаблицы);
	ОписаниеБазы.Вставить("ПараметрыВременныхТаблиц",   Новый Структура);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
