
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ НАСТРОЙКАМИ

#Область ПроцедурыИФункцииУправленияНастройками

// Получает структуру с настройками обмена с голосовыми сервисами, сохраненными в константе "УПЖКХ_НастройкиИнтеграцииСГолосовымиСервисами".
//
Функция ПолучитьНастройкиИнтеграцииСГолосовымиСервисами() Экспорт
	
	СтруктураНастроек = Константы.УПЖКХ_НастройкиИнтеграцииСГолосовымиСервисами.Получить().Получить();
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если НЕ СтруктураНастроек.Свойство("ПерсональныйURL") Тогда
			СтруктураНастроек.Вставить("ПерсональныйURL", "");
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("Логин") Тогда
			СтруктураНастроек.Вставить("Логин", "");
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("Пароль") Тогда
			СтруктураНастроек.Вставить("Пароль", "");
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ТекущаяСтраницаИнтеграции") Тогда
			СтруктураНастроек.Вставить("ТекущаяСтраницаИнтеграции", Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ГлавнаяСтраница);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеВыгрузок") Тогда
			СтруктураНастроек.Вставить("РегламентноеЗаданиеВыгрузок", Неопределено);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("РегламентноеЗаданиеЗагрузок") Тогда
			СтруктураНастроек.Вставить("РегламентноеЗаданиеЗагрузок", Неопределено);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ДатаПоследнегоЗагруженногоПоказания") Тогда
			СтруктураНастроек.Вставить("ДатаПоследнегоЗагруженногоПоказания", Дата("00010101"));
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("МинимальнаяСуммаДолгаДляАвтообзвона") Тогда
			СтруктураНастроек.Вставить("МинимальнаяСуммаДолгаДляАвтообзвона", 0);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона") Тогда
			СтруктураНастроек.Вставить("МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона", 1);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("Подписка_ВидПодписки") Тогда
			СтруктураНастроек.Вставить("Подписка_ВидПодписки", Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("Подписка_Оплачена") Тогда
			СтруктураНастроек.Вставить("Подписка_Оплачена", Ложь);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("АвтономныйРежимРаботы") Тогда
			СтруктураНастроек.Вставить("АвтономныйРежимРаботы", Ложь);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("КаталогСохраненияФайловВыгрузки") Тогда
			СтруктураНастроек.Вставить("КаталогСохраненияФайловВыгрузки", "");
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ИсточникНомераЛицевогоСчета") Тогда
			СтруктураНастроек.Вставить("ИсточникНомераЛицевогоСчета", "Наименование");
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ОсталосьСекундДляАвтообзвона") Тогда
			СтруктураНастроек.Вставить("ОсталосьСекундДляАвтообзвона", 0);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ОсталосьСекундДляПриемаПоказаний") Тогда
			СтруктураНастроек.Вставить("ОсталосьСекундДляПриемаПоказаний", 0);
		КонецЕсли;
		Если НЕ СтруктураНастроек.Свойство("ПорогПредупрежденияОМаломКоличествеОставшегосяВремени") Тогда
			СтруктураНастроек.Вставить("ПорогПредупрежденияОМаломКоличествеОставшегосяВремени", 30000);
		КонецЕсли;
		
	Иначе
		
		СтруктураНастроек = Новый Структура("ПерсональныйURL, Логин, Пароль, ТекущаяСтраницаИнтеграции, РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, ДатаПоследнегоЗагруженногоПоказания, МинимальнаяСуммаДолгаДляАвтообзвона, МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона, Подписка_ВидПодписки, Подписка_Оплачена, ОсталосьСекундДляАвтообзвона, ОсталосьСекундДляПриемаПоказаний, ПорогПредупрежденияОМаломКоличествеОставшегосяВремени, АвтономныйРежимРаботы, КаталогСохраненияФайловВыгрузки, ИсточникНомераЛицевогоСчета",
											"", "", "", Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ГлавнаяСтраница, Неопределено, Неопределено, Дата("00010101"), 0, 1, Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует, Ложь, 0, 0, 30000, Ложь, "", "Наименование");
		
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Сохраняет структуру с настройками обмена с голосовыми сервисами в константе "УПЖКХ_НастройкиИнтеграцииСГолосовымиСервисами".
//
Процедура УстановитьНастройкиИнтеграцииCГолосовымиСервисами(НастройкиДляСохранения) Экспорт
	
	// Важно учесть, что набор настроек динамичен, т.е. для корректной работы не обязательно передавать весь набор настроек.
	// Отсутствующие ранее настройки добавляются в сохраняемые настройки.
	// Состав настроек, кроме основных настроек, может включать любой набор настроек.
	
	Если ТипЗнч(НастройкиДляСохранения) = Тип("Структура") Тогда
		
		// Получаем сохраненные ранее настройки и меняем данные выборочно.
		СохраненныеНастройки = ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
		
		// Заполняем.
		ЗаполнитьЗначенияСвойств(СохраненныеНастройки, НастройкиДляСохранения);
		
		// Сохраняем.
		ПараметрыДляСохранения = Новый ХранилищеЗначения(СохраненныеНастройки);
		
		Константы.УПЖКХ_НастройкиИнтеграцииСГолосовымиСервисами.Установить(ПараметрыДляСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает дату последнего загруженного с сервиса показания.
//
Функция ПолучитьДатуПоследнегоЗагруженногоПоказания() Экспорт
	
	СохраненныеНастройки = ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	Возврат СохраненныеНастройки.ДатаПоследнегоЗагруженногоПоказания;
	
КонецФункции

// Сохраняет дату последнего загруженного с сервиса показания.
//
Процедура УстановитьДатуПоследнегоЗагруженногоПоказания(ДатаПоказания) Экспорт
	
	СтруктураДляСохранения = Новый Структура("ДатаПоследнегоЗагруженногоПоказания", ДатаПоказания);
	
	УстановитьНастройкиИнтеграцииCГолосовымиСервисами(СтруктураДляСохранения);
	
КонецПроцедуры

// Получает настройки формирования листовок: номер телефона и текст подвала.
//
Функция ПолучитьНастройкиПечатиЛистовок() Экспорт
	
	СохраненныеНастройки = ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	Возврат СохраненныеНастройки;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ СБОРА ДАННЫХ

#Область ФункцииСбораИОбработкиДанныхДляОбмена

// Формирует структуру с данными для выгрузки на голосовой сервис.
//
Функция ПодготовитьОбщуюСтруктуруДанныхДляВыгрузки(СведенияОПодписке, МассивЛС = Неопределено, ДатаВыгрузки = Неопределено) Экспорт
	
	// Настройки обмена с голосовыми сервисами.
	НастройкиОбменаСГолосовымиСервисами = ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	ВыгружатьСведенияОСчетчиках      = СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
	ВыгружатьСведенияОЗадолженностях = СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжников;
	
	Если ДатаВыгрузки = Неопределено Тогда
		ДатаВыгрузки = ТекущаяДата();
	КонецЕсли;
	
	////////////////////////////////////////////////
	// 1. Сбор базовых сведений по л/с.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Телефон КАК Телефон,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК НомерПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК СуффиксПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец.ТипСооружения КАК ТипСооружения
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Дата,
	|			&УсловиеНаЛС
	|				И НЕ ЛицевойСчет.ПометкаУдаления
	|				И НЕ ЛицевойСчет.Идентификатор = """") КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Код КАК КодВладельца,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = ТИП(Справочник.УПЖКХ_Жильцы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВладелецЖилец
	|ПОМЕСТИТЬ втОтветственныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Идентификатор КАК Идентификатор,
	|	втЛицевыеСчета.Телефон КАК Телефон,
	|	втЛицевыеСчета.НомерПомещения КАК НомерПомещения,
	|	втЛицевыеСчета.СуффиксПомещения КАК СуффиксПомещения,
	|	втЛицевыеСчета.Помещение КАК Помещение,
	|	втЛицевыеСчета.Здание КАК Здание,
	|	втЛицевыеСчета.ТипПомещения КАК ТипПомещения,
	|	втЛицевыеСчета.ТипСооружения КАК ТипСооружения,
	|	втОтветственныеСобственники.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втОтветственныеСобственники.КодВладельца КАК КодВладельца,
	|	втОтветственныеСобственники.ВладелецЖилец КАК ВладелецЖилец
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтветственныеСобственники КАК втОтветственныеСобственники
	|		ПО втЛицевыеСчета.ЛицевойСчет = втОтветственныеСобственники.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчета.Здание КАК Здание
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета";
	
	УсловиеНаЛС = "ИСТИНА";
	
	Если НЕ МассивЛС = Неопределено Тогда
		УсловиеНаЛС = "ЛицевойСчет В (&МассивЛС)";
		Запрос.УстановитьПараметр("МассивЛС", МассивЛС);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаЛС", УсловиеНаЛС);
	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(ДатаВыгрузки));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаЛицевыхСчетов = Результат[2].Выгрузить();
	ТаблицаЗданий        = Результат[3].Выгрузить();
	
	////////////////////////////////////////////////
	// 2. Сбор контактной информации л/с.
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, ТаблицаЗданий.ВыгрузитьКолонку("Здание"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛицевыхСчетов.Идентификатор КАК Идентификатор,
	|	ТаблицаЛицевыхСчетов.Телефон КАК Телефон,
	|	ТаблицаЛицевыхСчетов.НомерПомещения КАК НомерПомещения,
	|	ТаблицаЛицевыхСчетов.СуффиксПомещения КАК СуффиксПомещения,
	|	ТаблицаЛицевыхСчетов.Помещение КАК Помещение,
	|	ТаблицаЛицевыхСчетов.Здание КАК Здание,
	|	ТаблицаЛицевыхСчетов.ТипПомещения КАК ТипПомещения,
	|	ТаблицаЛицевыхСчетов.ТипСооружения КАК ТипСооружения,
	|	ТаблицаЛицевыхСчетов.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ТаблицаЛицевыхСчетов.КодВладельца КАК КодВладельца,
	|	ТаблицаЛицевыхСчетов.ВладелецЖилец КАК ВладелецЖилец
	|ПОМЕСТИТЬ втТаблицаЛицевыхСчетов
	|ИЗ
	|	&ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаЛицевыхСчетов.Идентификатор КАК Идентификатор,
	|	втТаблицаЛицевыхСчетов.Телефон КАК Телефон,
	|	ВЫБОР
	|		КОГДА КонтактнаяИнформация.Город ЕСТЬ NULL
	|				ИЛИ КонтактнаяИнформация.Город = """"
	|			ТОГДА ВЫБОР
	|					КОГДА КонтактнаяИнформация.НаселенныйПункт ЕСТЬ NULL
	|							ИЛИ КонтактнаяИнформация.НаселенныйПункт = """"
	|						ТОГДА ЕСТЬNULL(КонтактнаяИнформация.Регион, """")
	|					ИНАЧЕ КонтактнаяИнформация.НаселенныйПункт
	|				КОНЕЦ
	|		ИНАЧЕ КонтактнаяИнформация.Город
	|	КОНЕЦ КАК Город,
	|	ЕСТЬNULL(КонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(КонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(КонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(КонтактнаяИнформация.ТипКорпуса, ""Корпус"") КАК ТипКорпуса,
	|	втТаблицаЛицевыхСчетов.НомерПомещения КАК НомерПомещения,
	|	втТаблицаЛицевыхСчетов.СуффиксПомещения КАК СуффиксПомещения,
	|	втТаблицаЛицевыхСчетов.Помещение КАК Помещение,
	|	втТаблицаЛицевыхСчетов.ТипПомещения КАК ТипПомещения,
	|	втТаблицаЛицевыхСчетов.ТипСооружения КАК ТипСооружения,
	|	втТаблицаЛицевыхСчетов.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втТаблицаЛицевыхСчетов.КодВладельца КАК КодВладельца,
	|	втТаблицаЛицевыхСчетов.ВладелецЖилец КАК ВладелецЖилец
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втТаблицаЛицевыхСчетов КАК втТаблицаЛицевыхСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО втТаблицаЛицевыхСчетов.Здание = КонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Идентификатор КАК Идентификатор,
	|	втЛицевыеСчета.Телефон КАК Телефон,
	|	втЛицевыеСчета.Город КАК Город,
	|	втЛицевыеСчета.Улица КАК Улица,
	|	втЛицевыеСчета.Дом КАК Дом,
	|	втЛицевыеСчета.Корпус КАК Корпус,
	|	втЛицевыеСчета.ТипКорпуса КАК ТипКорпуса,
	|	втЛицевыеСчета.НомерПомещения КАК НомерПомещения,
	|	втЛицевыеСчета.СуффиксПомещения КАК СуффиксПомещения,
	|	втЛицевыеСчета.Помещение КАК Помещение,
	|	втЛицевыеСчета.ТипПомещения КАК ТипПомещения,
	|	втЛицевыеСчета.ТипСооружения КАК ТипСооружения,
	|	втЛицевыеСчета.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втЛицевыеСчета.КодВладельца КАК КодВладельца,
	|	втЛицевыеСчета.ВладелецЖилец КАК ВладелецЖилец
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета";
	
	Запрос.УстановитьПараметр("Дата",                 КонецМесяца(ДатаВыгрузки));
	Запрос.УстановитьПараметр("ДатаНачала",           НачалоМесяца(ДатаВыгрузки));
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетов", ТаблицаЛицевыхСчетов);
	Запрос.УстановитьПараметр("ДатаКонецПредПериода", НачалоМесяца(ДатаВыгрузки) - 1);
	Запрос.УстановитьПараметр("ДатаНулевая",          Дата("00010101"));
	
	ТаблицаЛицевыхСчетовСКонтактнойИнформацией = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетовСКонтактнойИнформацией", ТаблицаЛицевыхСчетовСКонтактнойИнформацией);
	
	////////////////////////////////////////////////
	// 3. Сбор сведений о счетчиках.
	
	Если ВыгружатьСведенияОСчетчиках Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект
		|ПОМЕСТИТЬ втСчетчики
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&Дата,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета
		|			
		|					ОБЪЕДИНИТЬ
		|			
		|					ВЫБРАТЬ
		|						втЛицевыеСчета.Помещение
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)
		|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик КАК Счетчик,
		|	КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание КАК ДневноеПоказание,
		|	КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание КАК НочноеПоказание,
		|	КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание КАК ПиковоеПоказание,
		|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК Период
		|ПОМЕСТИТЬ втПоказанияСчетчиков
		|ИЗ
		|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
		|			&Дата,
		|			Счетчик В
		|				(ВЫБРАТЬ
		|					втСчетчики.Счетчик
		|				ИЗ
		|					втСчетчики КАК втСчетчики)) КАК КВП_ПоказанияСчетчиковСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСчетчики.Счетчик КАК Счетчик,
		|	втСчетчики.Счетчик.Код КАК КодСчетчика,
		|	втСчетчики.Счетчик.Наименование КАК НаименованиеСчетчика,
		|	втСчетчики.Счетчик.ВидУслуги КАК Услуга,
		|	втСчетчики.Счетчик.ВидУслуги.ВидУслуги.Наименование КАК НаименованиеУслуги,
		|	втСчетчики.Счетчик.Тарифность КАК Тарифность,
		|	втСчетчики.Счетчик.Разрядность КАК Разрядность,
		|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(втПоказанияСчетчиков.ДневноеПоказание, 0) КАК ДневноеПоказание,
		|	ЕСТЬNULL(втПоказанияСчетчиков.НочноеПоказание, 0) КАК НочноеПоказание,
		|	ЕСТЬNULL(втПоказанияСчетчиков.ПиковоеПоказание, 0) КАК ПиковоеПоказание,
		|	ЕСТЬNULL(втПоказанияСчетчиков.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказания
		|ИЗ
		|	втСчетчики КАК втСчетчики
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияСчетчиков КАК втПоказанияСчетчиков
		|		ПО втСчетчики.Счетчик = втПоказанияСчетчиков.Счетчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втСчетчики.Объект = втЛицевыеСчета.ЛицевойСчет
		|ГДЕ
		|	НЕ втЛицевыеСчета.ЛицевойСчет ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втСчетчики.Счетчик,
		|	втСчетчики.Счетчик.Код,
		|	втСчетчики.Счетчик.Наименование,
		|	втСчетчики.Счетчик.ВидУслуги,
		|	втСчетчики.Счетчик.ВидУслуги.ВидУслуги.Наименование,
		|	втСчетчики.Счетчик.Тарифность,
		|	втСчетчики.Счетчик.Разрядность,
		|	втЛицевыеСчета.ЛицевойСчет,
		|	ЕСТЬNULL(втПоказанияСчетчиков.ДневноеПоказание, 0),
		|	ЕСТЬNULL(втПоказанияСчетчиков.НочноеПоказание, 0),
		|	ЕСТЬNULL(втПоказанияСчетчиков.ПиковоеПоказание, 0),
		|	ЕСТЬNULL(втПоказанияСчетчиков.Период, ДАТАВРЕМЯ(1, 1, 1))
		|ИЗ
		|	втСчетчики КАК втСчетчики
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияСчетчиков КАК втПоказанияСчетчиков
		|		ПО втСчетчики.Счетчик = втПоказанияСчетчиков.Счетчик
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втСчетчики.Объект = втЛицевыеСчета.Помещение
		|ГДЕ
		|	НЕ втЛицевыеСчета.ЛицевойСчет ЕСТЬ NULL";
		
		ТаблицаСчетчиков = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	////////////////////////////////////////////////
	// 4. Сбор сведений о задолженностях.
	
	Если ВыгружатьСведенияОЗадолженностях Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК Сальдо
		|ПОМЕСТИТЬ втЗадолженности
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&Дата,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК ПериодВозникновенияЗадолженности
		|ПОМЕСТИТЬ втПериодыВозникновенияЗадолженности
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКонецПредПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЗадолженности.ЛицевойСчет
		|				ИЗ
		|					втЗадолженности КАК втЗадолженности
		|				ГДЕ
		|					втЗадолженности.Сальдо > 0)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК ДатаПоследнейОплаты
		|ПОМЕСТИТЬ втДатыПоследнихОплат
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			,
		|			&ДатаНачала,
		|			Регистратор,
		|			,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(втДатыПоследнихОплат.ДатаПоследнейОплаты, """") КАК ДатаПоследнейОплаты,
		|	ВЫБОР
		|		КОГДА втПериодыВозникновенияЗадолженности.ПериодВозникновенияЗадолженности ЕСТЬ NULL
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(втПериодыВозникновенияЗадолженности.ПериодВозникновенияЗадолженности, &ДатаНачала, МЕСЯЦ)
		|	КОНЕЦ КАК КоличествоМесяцевЗадолженности,
		|	ЕСТЬNULL(втЗадолженности.Сальдо, 0) КАК Сальдо
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыВозникновенияЗадолженности КАК втПериодыВозникновенияЗадолженности
		|		ПО втЛицевыеСчета.ЛицевойСчет = втПериодыВозникновенияЗадолженности.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадолженности КАК втЗадолженности
		|		ПО втЛицевыеСчета.ЛицевойСчет = втЗадолженности.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПоследнихОплат КАК втДатыПоследнихОплат
		|		ПО втЛицевыеСчета.ЛицевойСчет = втДатыПоследнихОплат.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	втЛицевыеСчета.ЛицевойСчет";
		
		ТаблицаЗадолженностей = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	////////////////////////////////////////////////
	// 5. Подготовка структуры данных для выгрузки.
	
	СтруктураДанныхПоЛС = Новый Структура("ТаблицаЛицевыхСчетовСКонтактнойИнформацией, ТаблицаСчетчиков, ТаблицаЗадолженностей",
										   ТаблицаЛицевыхСчетовСКонтактнойИнформацией, ТаблицаСчетчиков, ТаблицаЗадолженностей);
	
	Возврат СтруктураДанныхПоЛС;
	
КонецФункции

// Формирует текущую структуру с данными для выгрузки на голосовой сервис.
//
Функция ПодготовитьТекущуюСтруктуруДанныхДляВыгрузки(СведенияОПодписке, СтруктураДанныхДляВыгрузкиОбщая, КоличествоОтбираемыхЗаИтерациюЛС = 100, ВыгрузкаЗавершена = Ложь) Экспорт
	
	ТаблицаЛицевыхСчетовСКонтактнойИнформацией = СтруктураДанныхДляВыгрузкиОбщая.ТаблицаЛицевыхСчетовСКонтактнойИнформацией;
	ТаблицаСчетчиков                           = СтруктураДанныхДляВыгрузкиОбщая.ТаблицаСчетчиков;
	ТаблицаЗадолженностей                      = СтруктураДанныхДляВыгрузкиОбщая.ТаблицаЗадолженностей;
	
	НастройкиОбменаСГолосовымиСервисами = ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	ИсточникНомераЛицевогоСчета         = НастройкиОбменаСГолосовымиСервисами.ИсточникНомераЛицевогоСчета;
	
	ВыгружатьСведенияОСчетчиках      = СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
	ВыгружатьСведенияОЗадолженностях = СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ СведенияОПодписке.Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжников;
	
	СтруктураДанныхДляВыгрузки = Новый Структура("accs, sum_of_debt, count_months", Новый Массив, "", "");
	
	Если ВыгружатьСведенияОЗадолженностях Тогда
		СтруктураДанныхДляВыгрузки.sum_of_debt  = НастройкиОбменаСГолосовымиСервисами.МинимальнаяСуммаДолгаДляАвтообзвона;
		СтруктураДанныхДляВыгрузки.count_months = НастройкиОбменаСГолосовымиСервисами.МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона;
	КонецЕсли;
	
	КоличествоНеобработанныхЛСОсталось = ТаблицаЛицевыхСчетовСКонтактнойИнформацией.Количество();
	
	Если КоличествоОтбираемыхЗаИтерациюЛС >= КоличествоНеобработанныхЛСОсталось Тогда
		ВыгрузкаЗавершена = Истина;
		КоличествоОтбираемыхЗаИтерациюЛС = КоличествоНеобработанныхЛСОсталось;
	КонецЕсли;
	
	МассивСтрокНаУдаление = Новый Массив;
	
	// Отбираем порцию л/с для выгрузки.
	Сч = 0;
	
	Для Сч = 0 по КоличествоОтбираемыхЗаИтерациюЛС - 1 Цикл
		
		ТекЛС = ТаблицаЛицевыхСчетовСКонтактнойИнформацией[Сч];
		
		МассивСтрокНаУдаление.Добавить(ТекЛС);
		
		// Структура лицевого счета.
		ТекОбъектЛС = Новый Структура("id, number, owner, phone, address, debt, meters");
		
		ТекОбъектЛС.id     = ТекЛС.Идентификатор;
		ТекОбъектЛС.number = ?(ИсточникНомераЛицевогоСчета = "Наименование", НомерЛицевогоСчета(ТекЛС.ЛицевойСчет), ТекЛС.Идентификатор);
		ТекОбъектЛС.owner  = ?(ТекЛС.ВладелецЖилец, "pers", "cont") + ТекЛС.КодВладельца;
		ТекОбъектЛС.phone  = ПодготовитьНомерТелефона(ТекЛС.Телефон);
		
		// Значения по умолчанию.
		ТекОбъектЛС.debt = "";
		ТекОбъектЛС.meters = Новый Массив;
		
		// Структура адреса.
		ТекОбъектЛС.address = Новый Структура("city, street, house, house_type, apartment, apartment_type");
		ТекОбъектЛС.address.city       = ТекЛС.Город;
		ТекОбъектЛС.address.street     = ТекЛС.Улица;
		ТекОбъектЛС.address.house      = ТекЛС.Дом + ?(ПустаяСтрока(ТекЛС.Корпус), "", СтрШаблон(" %1 %2", ТекЛС.ТипКорпуса, ТекЛС.Корпус));
		ТекОбъектЛС.address.house_type = ?(ТекЛС.ТипСооружения = Перечисления.УПЖКХ_ТипСооружения.Паркинг, "паркинг", "дом");
		ТекОбъектЛС.address.apartment  = СокрЛП(Формат(ТекЛС.НомерПомещения, "ЧГ=0") + ТекЛС.СуффиксПомещения);
		
		ТипПомещения = "квартира";
		
		Если ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Автоместо Тогда
			
			ТипПомещения = "автоместо";
			
		ИначеЕсли ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Кабинет Тогда
			
			ТипПомещения = "кабинет";
			
		ИначеЕсли ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Дом Тогда
			
			ТипПомещения = "дом";
			
		ИначеЕсли ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Офис Тогда
			
			ТипПомещения = "офис";
			
		ИначеЕсли ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.ПодсобноеПомещение
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Коридор
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Кухня
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.МестоОбщегоПользования
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Подвал
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Санузел
			ИЛИ ТекЛС.ТипПомещения = Перечисления.КВП_ТипыПомещений.Чердак Тогда
			
			ТипПомещения = "помещение";
			
		КонецЕсли;
		
		ТекОбъектЛС.address.apartment_type = ТипПомещения;
		
		// Долги.
		Если ВыгружатьСведенияОЗадолженностях Тогда
			
			ТекОбъектЛС.Вставить("debt", Новый Структура("sum_of_debt, months_of_debt_count, last_payment_date"));
			
			СтрокаЗадолженности = ТаблицаЗадолженностей.Найти(ТекЛС.ЛицевойСчет, "ЛицевойСчет");
			
			// Структура задолженности.
			ТекОбъектЛС.debt.sum_of_debt          = ?(СтрокаЗадолженности.Сальдо > 0, СтрокаЗадолженности.Сальдо, 0);
			ТекОбъектЛС.debt.months_of_debt_count = СтрокаЗадолженности.КоличествоМесяцевЗадолженности;
			ТекОбъектЛС.debt.last_payment_date    = ?(ЗначениеЗаполнено(СтрокаЗадолженности.ДатаПоследнейОплаты), ПолучитьУниверсальнуюДатуXML(СтрокаЗадолженности.ДатаПоследнейОплаты), "");
			
		КонецЕсли;
		
		// Счетчики.
		Если ВыгружатьСведенияОСчетчиках Тогда
			
			СтрокиСчетчиковЛС = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекЛС.ЛицевойСчет));
			
			Для каждого ТекСтрокаСчетчика из СтрокиСчетчиковЛС Цикл
				
				ТекСчетчик = Новый Структура("id, name, values, capacity, service, date, val1, val2, val3");
				ТекСчетчик.id       = ТекСтрокаСчетчика.КодСчетчика;
				ТекСчетчик.name     = ТекСтрокаСчетчика.НаименованиеСчетчика;
				ТекСчетчик.service  = ТекСтрокаСчетчика.НаименованиеУслуги;
				ТекСчетчик.capacity = ТекСтрокаСчетчика.Разрядность;
				ТекСчетчик.values   = ?(ТекСтрокаСчетчика.Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Однотарифный, 1, ?(ТекСтрокаСчетчика.Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Двухтарифный, 2, ?(ТекСтрокаСчетчика.Тарифность = Перечисления.КВП_ТарифностьСчетчиков.Трехтарифный, 3, 1)));
				ТекСчетчик.date     = ПолучитьУниверсальнуюДатуXML(ТекСтрокаСчетчика.ДатаПоказания);
				ТекСчетчик.val1     = ТекСтрокаСчетчика.ДневноеПоказание;
				ТекСчетчик.val2     = ТекСтрокаСчетчика.НочноеПоказание;
				ТекСчетчик.val3     = ТекСтрокаСчетчика.ПиковоеПоказание;
				
				ТекОбъектЛС.meters.Добавить(ТекСчетчик);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СтруктураДанныхДляВыгрузки.accs.Добавить(ТекОбъектЛС);
		
	КонецЦикла;
	
	// Удаляем строки, по которым данные уже подготовлены.
	Для каждого ТекЛСНаУдаление из МассивСтрокНаУдаление Цикл
		
		ТаблицаЛицевыхСчетовСКонтактнойИнформацией.Удалить(ТекЛСНаУдаление);
		
	КонецЦикла;
	
	Возврат СтруктураДанныхДляВыгрузки;
	
КонецФункции

// Обработка номера телефона для приведения его к виду, который может использовать сервис.
//
Функция ПодготовитьНомерТелефона(НомерТелефона)
	
	ТекНомерСимвола = 0;
	ВсегоСимволов   = СтрДлина(НомерТелефона);
	ИтоговаяСтрока  = "";
	
	// Отбираем только числа.
	Пока ТекНомерСимвола < ВсегоСимволов Цикл
		
		ТекНомерСимвола = ТекНомерСимвола + 1;
		ТекСимвол       = Сред(НомерТелефона, ТекНомерСимвола, 1);
		КодТекСимвола   = КодСимвола(ТекСимвол);
		
		Если КодТекСимвола > 47 И КодТекСимвола < 58 Тогда
			ИтоговаяСтрока = ИтоговаяСтрока + ТекСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(ИтоговаяСтрока) = 11 Тогда
		
		ИтоговаяСтрока = "8" + Прав(ИтоговаяСтрока, 10);
		
	КонецЕсли;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции

// Определяем, какие из л/с, имеющихся на сервисе, закрыты.
// Параметры:
//   - МассивЛСНаСервисе - массив идентификаторов лицевых счетов, имеющихся на сервисе.
//   - ВыбранныеЛицевыеСчета - массив ссылок на лицевые счета, для которых нужно проверить факт их закрытия.
//      Если нужно определить все закрытые лицевые счета, то нужно передавать Неопределено.
//
Функция ПолучитьЗакрытыеЛС(МассивЛСНаСервисе, ВыбранныеЛицевыеСчета = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК ЛицевойСчетИдентификатор
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет.Идентификатор В (&МассивЛСНаСервисе)
	|				И (&ОтбиратьСредиВыбранных
	|						И ЛицевойСчет В (&ВыбранныеЛС)
	|					ИЛИ НЕ &ОтбиратьСредиВыбранных)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("ДатаКон",                КонецМесяца(ТекущаяДата()));
	Запрос.УстановитьПараметр("МассивЛСНаСервисе",      МассивЛСНаСервисе);
	Запрос.УстановитьПараметр("ВыбранныеЛС",            ВыбранныеЛицевыеСчета);
	Запрос.УстановитьПараметр("ОтбиратьСредиВыбранных", НЕ ВыбранныеЛицевыеСчета = Неопределено);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат.ВыгрузитьКолонку("ЛицевойСчетИдентификатор");
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ДОКУМЕНТОВ ВВОДА ПОКАЗАНИЙ

#Область ФормированиеДокументовВводПоказаний

// Подготавливает пустую таблицу показаний счетчиков для дальнейшей обработки.
//
Функция ПодготовитьПустуюВходящуюТаблицуСчетчиков()
	
	ТаблицаСчетчиковВходящая = Новый ТаблицаЗначений;
	ТаблицаСчетчиковВходящая.Колонки.Добавить("id",   Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9)));
	ТаблицаСчетчиковВходящая.Колонки.Добавить("date", Новый ОписаниеТипов("Дата", , ,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаСчетчиковВходящая.Колонки.Добавить("val1", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 6, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСчетчиковВходящая.Колонки.Добавить("val2", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 6, ДопустимыйЗнак.Неотрицательный)));
	ТаблицаСчетчиковВходящая.Колонки.Добавить("val3", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 6, ДопустимыйЗнак.Неотрицательный)));
	
	Возврат ТаблицаСчетчиковВходящая;
	
КонецФункции

// Подготавливает и заполняет таблицу показаний счетчиков для дальнейшей обработки.
//
Функция ПодготовитьВходящуюТаблицуСчетчиков(МассивПоказаний)
	
	ТаблицаДляОбработки = ПодготовитьПустуюВходящуюТаблицуСчетчиков();
	
	Для каждого ТекЭлемент из МассивПоказаний Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);
		
		Попытка
			НоваяСтрока.date = ПолучитьМестнуюДатуИзДатыXML(ТекЭлемент.date);
		Исключение
			НоваяСтрока.date = Дата(1, 1, 1);
		КонецПопытки;
		
	КонецЦикла;
	
	// Удалим лишние строки счетчиков.
	// Это нужно для того случая, когда счетчик установлен на несколько л/с.
	// В результате останется только самое позднее показание счетчика.
	ТаблицаДляОбработки.Сортировать("id Возр, date Убыв");
	
	ТекущийСчетчик         = Неопределено;
	МассивСтрокДляУдаления = Новый Массив;
	
	Для каждого ТекСтрока из ТаблицаДляОбработки Цикл
		
		Если ТекущийСчетчик = ТекСтрока.id Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
		Иначе
			ТекущийСчетчик = ТекСтрока.id;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ТекСтрокаДляУдаления из МассивСтрокДляУдаления Цикл
		ТаблицаДляОбработки.Удалить(ТекСтрокаДляУдаления);
	КонецЦикла;
	
	Возврат ТаблицаДляОбработки;
	
КонецФункции

// Обрабатывает полученные с голосового сервиса сведения о показаниях счетчиков.
//
Функция ОбработатьСведенияОПоказанияхСчетчиков(МассивПоказаний) Экспорт
	
	ТаблицаСчетчиковВходящая = ПодготовитьВходящуюТаблицуСчетчиков(МассивПоказаний);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСчетчиковВходящая.id КАК КодСчетчика,
	|	ТаблицаСчетчиковВходящая.date КАК ДатаПоказания,
	|	ТаблицаСчетчиковВходящая.val1 КАК ПоказаниеДн,
	|	ТаблицаСчетчиковВходящая.val2 КАК ПоказаниеНч,
	|	ТаблицаСчетчиковВходящая.val3 КАК ПоказаниеПк
	|ПОМЕСТИТЬ втТаблицаСчетчиковВходящая
	|ИЗ
	|	&ТаблицаСчетчиковВходящая КАК ТаблицаСчетчиковВходящая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Счетчики.Ссылка КАК Счетчик,
	|	втТаблицаСчетчиковВходящая.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаСчетчиковВходящая.ПоказаниеДн КАК ДневноеПоказание,
	|	втТаблицаСчетчиковВходящая.ПоказаниеНч КАК НочноеПоказание,
	|	втТаблицаСчетчиковВходящая.ПоказаниеПк КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	втТаблицаСчетчиковВходящая КАК втТаблицаСчетчиковВходящая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК КВП_Счетчики
	|		ПО втТаблицаСчетчиковВходящая.КодСчетчика = КВП_Счетчики.Код
	|ГДЕ
	|	НЕ КВП_Счетчики.ПометкаУдаления
	|	И НЕ КВП_Счетчики.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
	|	КОНЕЦ КАК ВидОперации
	|ПОМЕСТИТЬ втОбъектыСчетчиков
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Счетчик В
	|					(ВЫБРАТЬ
	|						втТаблицаСчетчиков.Счетчик
	|					ИЗ
	|						втТаблицаСчетчиков КАК втТаблицаСчетчиков)
	|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСчетчиков.Объект КАК Объект,
	|	втОбъектыСчетчиков.Счетчик КАК Счетчик,
	|	втОбъектыСчетчиков.ВидОперации КАК ВидОперации,
	|	втТаблицаСчетчиков.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаСчетчиков.ДневноеПоказание КАК ДневноеПоказание,
	|	втТаблицаСчетчиков.НочноеПоказание КАК НочноеПоказание,
	|	втТаблицаСчетчиков.ПиковоеПоказание КАК ПиковоеПоказание
	|ИЗ
	|	втОбъектыСчетчиков КАК втОбъектыСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчиков КАК втТаблицаСчетчиков
	|		ПО втОбъектыСчетчиков.Счетчик = втТаблицаСчетчиков.Счетчик
	|ИТОГИ ПО
	|	ВидОперации";
	
	Запрос.УстановитьПараметр("Дата",                     ТекущаяДата());
	Запрос.УстановитьПараметр("ТаблицаСчетчиковВходящая", ТаблицаСчетчиковВходящая);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат Результат;
	
КонецФункции

// Выполняет формирование документов "Ввод показаний счетчика" на основании обработанных данных.
//
Процедура СформироватьДокументыВводаПоказанийСчетчиков(ДеревоСчетчиков, ДатаПоследнегоЗагруженногоПоказания, ПроводитьДокументы = Истина) Экспорт
	
	МаксимальнаяДатаЗагруженногоПоказания = ДатаПоследнегоЗагруженногоПоказания;
	
	Для Каждого ВидОперации Из ДеревоСчетчиков.Строки Цикл
		СоздатьДокументыВводаПоказаний(ВидОперации, МаксимальнаяДатаЗагруженногоПоказания, ПроводитьДокументы);
	КонецЦикла;
	
	ДатаПоследнегоЗагруженногоПоказания = МаксимальнаяДатаЗагруженногоПоказания;
	
КонецПроцедуры

// Формирует документы "Ввод показаний счетчика" в рамках указанного вида операции.
//
Процедура СоздатьДокументыВводаПоказаний(ВидОперации, МаксимальнаяДатаЗагруженногоПоказания, ПроводитьДокументы)
	
	ТекущаяМаксимальнаяДатаЗагруженногоПоказания = МаксимальнаяДатаЗагруженногоПоказания;
	
	// Структура документа ввода показаний.
	СтруктураДокумента = Новый Структура("ВидОперации, Комментарий, ТаблицаПоказаний, ЗагружатьНулевыеПоказания");
	
	СтруктураДокумента.ВидОперации = ВидОперации.ВидОперации;
	СтруктураДокумента.Комментарий = "#Создан автоматически при загрузке данных с голосового сервиса.";
	СтруктураДокумента.ЗагружатьНулевыеПоказания = Истина;
	
	СтруктураДокумента.ТаблицаПоказаний = Новый ТаблицаЗначений;
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Счетчик");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Объект");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДатаПоказания");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказание");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказание");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказание");
	
	Для Каждого ЛС Из ВидОперации.Строки Цикл
		
		// заполнение ТЧ.
		СтрокаТЧ = СтруктураДокумента.ТаблицаПоказаний.Добавить();
		
		СтрокаТЧ.Объект           = ЛС.Объект;
		СтрокаТЧ.Счетчик          = ЛС.Счетчик;
		СтрокаТЧ.ДатаПоказания    = ЛС.ДатаПоказания;
		СтрокаТЧ.ДневноеПоказание = ЛС.ДневноеПоказание;
		СтрокаТЧ.НочноеПоказание  = ЛС.НочноеПоказание;
		СтрокаТЧ.ПиковоеПоказание = ЛС.ПиковоеПоказание;
		
		Если ЛС.ДатаПоказания > ТекущаяМаксимальнаяДатаЗагруженногоПоказания Тогда
			ТекущаяМаксимальнаяДатаЗагруженногоПоказания = ЛС.ДатаПоказания;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проведение.
	ДокументПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	ДокументПоказаний.Заполнить(СтруктураДокумента);
	
	Если ДокументПоказаний.Главная.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если НЕ ПроводитьДокументы ИЛИ НЕ КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		МаксимальнаяДатаЗагруженногоПоказания = ТекущаяМаксимальнаяДатаЗагруженногоПоказания;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрШаблон("Сформирован документ: %1.", Строка(ДокументПоказаний)));
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать документ ввода показаний.");
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЖУРНАЛОМ ОБМЕНА

#Область ЖурналОбмена

// Создает запись в журнале регистрации.
//
Функция СоздатьЗаписьЖурналаРегистрации(ФайлДляСохранения, СообщениеОРезультате, ВидОбмена, ВыполненоУспешно, ПолныйОтветССервиса, ДатаОбмена = Неопределено, ВыполняетсяВАвтоматическомРежиме = Ложь) Экспорт
	
	ДатаДляЗаписи = ?(ДатаОбмена = Неопределено, ТекущаяДата(), ДатаОбмена);
	
	// Проверяем, нет ли уже записи с такими же полями.
	// Если такие найдены, то сдвигаем дату вперед на одну секунду.
	Пока Истина Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ЖурналОбменаСГолосовымиСервисами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДатаОбмена.Установить(ДатаДляЗаписи);
		НаборЗаписей.Отбор.ВидОбмена.Установить(ВидОбмена);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ДатаДляЗаписи = ДатаДляЗаписи + 1;
		
	КонецЦикла;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВидОбмена             = ВидОбмена;
	НоваяЗапись.ДатаОбмена            = ДатаДляЗаписи;
	НоваяЗапись.Статус                = ВыполненоУспешно;
	НоваяЗапись.Ошибка                = СообщениеОРезультате;
	НоваяЗапись.ЗапущеноАвтоматически = ВыполняетсяВАвтоматическомРежиме;
	НоваяЗапись.ПолныйОтветССервиса   = ПолныйОтветССервиса;
	
	Если ФайлДляСохранения = Неопределено Тогда
		НоваяЗапись.ЕстьФайлОбмена = Ложь;
	Иначе
		НоваяЗапись.ФайлОбмена     = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлДляСохранения));
		НоваяЗапись.ЕстьФайлОбмена = Истина;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Возврат Новый Структура("ДатаОбмена, ВидОбмена", ДатаДляЗаписи, ВидОбмена);
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ

#Область РаботаСФайлами

// Формирует текстовый файл и записывает в него строковое представление объекта json.
//
// Параметры:
//  СтроковоеПредставление - Строка - строковое представление объекта json.
//
// Возвращаемое значение:
//  Строка.
//
Функция СформироватьТекстовыйФайл(СтроковоеПредставление) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.ДобавитьСтроку(СтроковоеПредставление);
	ТекстовыйФайл.Записать(ИмяФайла, "UTF-8");
	
	Возврат ИмяФайла;
	
КонецФункции // СформироватьТекстовыйФайл()

// Выполняет загрузку показаний из данных файла в виде двоичных данных.
//
Процедура ЗагрузитьПоказанияСчетчиковИзФайлаОбмена(ДвоичныеДанныеФайла, РасширениеФайла, ТаблицаСообщений, ВидОбмена, ПроводитьДокументы) Экспорт
	
	Если НЕ ДвоичныеДанныеФайла = Неопределено Тогда
		
		// Сохраняем файл.
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		ДвоичныеДанныеФайла.Записать(ИмяФайла);
		
		// ZIP.
		Если РасширениеФайла = "zip" Тогда
			
			Архив = Новый ЧтениеZipФайла(ИмяФайла);
			
			Для Каждого Элемент Из Архив.Элементы Цикл
				
				Архив.Извлечь(Элемент, КаталогВременныхФайлов());
				
				ЗагрузитьПоказанияИзТекущегоФайлаОбмена(КаталогВременныхФайлов() + "\" + Элемент.Имя, ТаблицаСообщений, ВидОбмена, ПроводитьДокументы);
				
			КонецЦикла;
			
		// Не ZIP.
		Иначе
			
			ЗагрузитьПоказанияИзТекущегоФайлаОбмена(ИмяФайла, ТаблицаСообщений, ВидОбмена, ПроводитьДокументы);
			
		КонецЕсли;
		
		СообщениеОРезультате = "Загрузка показаний счетчиков завершена.";
		
	Иначе
		
		ОбъектОтвета         = Неопределено;
		СообщениеОРезультате = "Не удалось загрузить показания счетчиков с сервиса: содержимое файла обмена не соответствует ожидаемому.";
		
		// Создаем запись в журнале регистрации.
		УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(ИмяФайла, СообщениеОРезультате, ВидОбмена, Ложь, "",, Ложь);
		
	КонецЕсли;
	
	УПЖКХ_РаботаССообщениямиСервер.ДобавитьСообщение(ТаблицаСообщений, СообщениеОРезультате);
	
КонецПроцедуры

// Выполняет загрузку показаний из текущего текстового файла.
//
Процедура ЗагрузитьПоказанияИзТекущегоФайлаОбмена(ИмяФайла, ТаблицаСообщений, ВидОбмена, ПроводитьДокументы)
	
	СообщениеОРезультате = "";
	СтрокаОтветов        = "";
	МассивПоказаний      = Новый Массив;
	ВыполненоУспешно     = Истина;
	ЗагрузкаЗавершена    = Ложь;
	
	ЧтениеФайла   = Новый ЧтениеТекста(ИмяФайла);
	СтрокаОтветов = ЧтениеФайла.Прочитать();
	ЧтениеФайла.Закрыть();
	
	ОбъектОтвета = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьСтруктуруОбъектаJSON(СтрокаОтветов);
	
	// Заполняем массив показаний рекурсивно. Это нужно из-за того, что загрузка при
	// прямом обмене выполняется пачками по 1000 счетчиков. Все загруженные пачки в итоге 
	// компонуются в массив json, содержащий массивы счетчиков каждой пачки.
	// Соответственно, при повторной загрузке загруженных ранее данных нам нужно обойти
	// каждую пачку, что проще выполнить с помощью рекурсии.
	ЗагрузитьПоказанияРекурсивно(ОбъектОтвета, МассивПоказаний, СообщениеОРезультате, ВыполненоУспешно, ЗагрузкаЗавершена);
	
	Если НЕ ПустаяСтрока(СообщениеОРезультате) Тогда
		УПЖКХ_РаботаССообщениямиСервер.ДобавитьСообщение(ТаблицаСообщений, СообщениеОРезультате);
	КонецЕсли;
	
	Если НЕ ЗагрузкаЗавершена Тогда
		ОбработанныеПоказанияССервиса = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ОбработатьСведенияОПоказанияхСчетчиков(МассивПоказаний);
		УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.СформироватьДокументыВводаПоказанийСчетчиков(ОбработанныеПоказанияССервиса, ТекущаяДата(), ПроводитьДокументы);
	КонецЕсли;
	
	Если ВыполненоУспешно Тогда
		СообщениеОРезультате = "Загрузка показаний счетчиков завершена.";
	КонецЕсли;
	
	// Создаем запись в журнале регистрации.
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(ИмяФайла, СообщениеОРезультате, ВидОбмена, ВыполненоУспешно, ?(ВыполненоУспешно, "", СтрокаОтветов),, Ложь);
	
КонецПроцедуры

// Выполняет рекурсивное заполнение массива счетчиков всеми счетчиками прочитанного объекта json.
//
Процедура ЗагрузитьПоказанияРекурсивно(ТекОбъект, МассивПоказаний, СообщениеОРезультате, ВыполненоУспешно, ЗагрузкаЗавершена)
	
	Если ТипЗнч(ТекОбъект) = Тип("Массив") Тогда
		
		Для каждого ДочернийЭлемент из ТекОбъект Цикл
			
			ДочернийЭлементЯвляетсяМассивом = ТипЗнч(ДочернийЭлемент) = Тип("Массив");
			
			Если ДочернийЭлементЯвляетсяМассивом Тогда
				ЗагрузитьПоказанияРекурсивно(ДочернийЭлемент, МассивПоказаний, СообщениеОРезультате, ВыполненоУспешно, ЗагрузкаЗавершена);
			Иначе
				МассивПоказаний.Добавить(ДочернийЭлемент);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ВыполненоУспешно = Ложь;
		
		Если ТипЗнч(ТекОбъект) = Тип("Структура") И ТекОбъект.Свойство("msg") Тогда
			СообщениеОРезультате = СтрШаблон("Не удалось загрузить показания счетчиков с сервиса: %1.", ТекОбъект.msg);
		Иначе
			СообщениеОРезультате = "Не удалось загрузить показания счетчиков с сервиса.";
		КонецЕсли;
		
		ОбъектОтвета = Неопределено;
		
		// Так как есть ошибки - завершаем загрузку.
		ЗагрузкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ СЕРВИСОВ

#Область ПроверкаВозможностиИспользованияСервисов

// Формирует информацию о возможности использования сервисов и о возможных проблемах.
//
Функция ПолучитьИнформациюОВозможностиИспользованияСервисов(ПроверятьНаименованияЛС = Ложь, ПроверятьИдентификаторыЛС = Ложь) Экспорт
	
	СтруктураИнформацииОВозможностиИспользованияСервисов = ПодготовитьСтруктуруИнформацииОВозможностиИспользованияСервисовПоУмолчанию();
	
	ПроверитьНаличиеПроблемСПриемомПоказаний(СтруктураИнформацииОВозможностиИспользованияСервисов, ПроверятьНаименованияЛС, ПроверятьИдентификаторыЛС);
	
	Возврат СтруктураИнформацииОВозможностиИспользованияСервисов;
	
КонецФункции

// Подготавливает структуру информации о возможности использования сервисов по умолчанию.
//
Функция ПодготовитьСтруктуруИнформацииОВозможностиИспользованияСервисовПоУмолчанию()
	
	СтруктураИнформацииОВозможностиИспользованияСервисов = Новый Структура;
	
	// Значения по умолчанию.
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("ЕстьПроблемыСПриемомПоказанийНаименованиеЛС",         Ложь);
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("ОписаниеПроблемСПриемомПоказанийНаименованиеЛС",      "");
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("МассивПроблемныхЛСДляПриемаПоказанийНаименованиеЛС",  Новый Массив);
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("ЕстьПроблемыСПриемомПоказанийИдентификаторЛС",        Ложь);
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("ОписаниеПроблемСПриемомПоказанийИдентификаторЛС",     "");
	СтруктураИнформацииОВозможностиИспользованияСервисов.Вставить("МассивПроблемныхЛСДляПриемаПоказанийИдентификаторЛС", Новый Массив);
	
	Возврат СтруктураИнформацииОВозможностиИспользованияСервисов;
	
КонецФункции

// Проверяет наличие проблем с приемом показаний.
//
Процедура ПроверитьНаличиеПроблемСПриемомПоказаний(СтруктураИнформацииОВозможностиИспользованияСервисов, ПроверятьНаименованияЛС, ПроверятьИдентификаторыЛС)
	
	// Проверяем на наличие л/с с буквами в номере. Номера таких л/с невозможно ввести при звонке.
	СведенияОНечисловыхСимволахВНомерахЛС = НайтиЛССНечисловымиСимволамиВНомере(ПроверятьНаименованияЛС, ПроверятьИдентификаторыЛС);
	
	МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС  = СведенияОНечисловыхСимволахВНомерахЛС.МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС;
	МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС = СведенияОНечисловыхСимволахВНомерахЛС.МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС;
	
	Если НЕ МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС.Количество() = 0 Тогда
		СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийНаименованиеЛС        = Истина;
		СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийНаименованиеЛС = МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС;
		СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийНаименованиеЛС     = "В базе имеются лицевые счета с нечисловыми номерами в наименованиях. Это может привести к проблемам при приеме показаний, так как при тоновом наборе невозможно ввести значения, отличные от цифр.";
	КонецЕсли;
	
	Если НЕ МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС.Количество() = 0 Тогда
		СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийИдентификаторЛС        = Истина;
		СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийИдентификаторЛС = МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС;
		СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийИдентификаторЛС     = "В базе имеются лицевые счета с нечисловыми идентификаторами. Это может привести к проблемам при приеме показаний, так как при тоновом наборе невозможно ввести значения, отличные от цифр.";
	КонецЕсли;
	
КонецПроцедуры

// Определяет л/с с нечисловыми символами в номере.
//
Функция НайтиЛССНечисловымиСимволамиВНомере(ПроверятьНаименованияЛС, ПроверятьИдентификаторыЛС)
	
	СтруктураРезультата = Новый Структура("МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС, МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС", Новый Массив, Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка,
	|	КВП_ЛицевыеСчета.Наименование КАК Наименование,
	|	КВП_ЛицевыеСчета.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.ЭтоГруппа";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекЛС = Результат.Ссылка;
		
		Если ПроверятьНаименованияЛС Тогда
			
			НомерЛС = НомерЛицевогоСчета(Результат.Наименование, Истина);
			
			Если ОпределитьНаличиеНечисловыхСимволовВНомереЛС(НомерЛС) Тогда
				СтруктураРезультата.МассивЛССНечисловымиСимволамиВНомереНаименованиеЛС.Добавить(ТекЛС);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроверятьИдентификаторыЛС Тогда
			
			НомерЛС = Результат.Идентификатор;
			
			Если ОпределитьНаличиеНечисловыхСимволовВНомереЛС(НомерЛС) Тогда
				СтруктураРезультата.МассивЛССНечисловымиСимволамиВНомереИдентификаторЛС.Добавить(ТекЛС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Определяет наличие несичловых символов в номере л/с.
//
Функция ОпределитьНаличиеНечисловыхСимволовВНомереЛС(НомерЛС) Экспорт
	
	НомерНеПодходитДляОбмена = Ложь;
	
	ДлинаНомера = СтрДлина(НомерЛС);
	
	Если ДлинаНомера = 0 Тогда
		
		НомерНеПодходитДляОбмена = Истина;
		
	Иначе
		
		Для ТекНомерСимвола = 1 по ДлинаНомера Цикл
			
			КодСимвола = КодСимвола(НомерЛС, ТекНомерСимвола);
			
			Если КодСимвола < 48 ИЛИ КодСимвола > 57 Тогда
				НомерНеПодходитДляОбмена = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НомерНеПодходитДляОбмена;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ДАТАМИ

#Область ФункцииРаботыСДатами

// Преобразовыват местную дату в универсальную в формате XML.
// Пример результата: 2018-04-12T21:00:00Z
//
Функция ПолучитьУниверсальнуюДатуXML(Дата)
	
	Возврат XMLСтрока(УниверсальноеВремя(Дата, ПолучитьЧасовойПоясИнформационнойБазы())) + "Z";
	
КонецФункции

// Преобразует универсальную дату в формате XML в дату по местному времени.
//
Функция ПолучитьМестнуюДатуИзДатыXML(ДатаXML)
	
	Возврат МестноеВремя(УниверсальноеВремя(XMLЗначение(Тип("Дата"), ДатаXML)), ПолучитьЧасовойПоясИнформационнойБазы());
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРЕОБРАЗОВАНИЯ ЧИСЕЛ В СТРОКИ

#Область ПреобразованияЧиселВСтроки

// Преобразовывает количество оставшихся секунд в строку.
//
Функция ПреобразоватьКоличествоОставшихсяСекундВСтроку(КоличествоСекундВсего) Экспорт
	
	ИтоговыйТекст = "0 секунд";
	
	Если Не КоличествоСекундВсего = 0 Тогда
		
		ИтоговыйТекст = "";
		
		// Секунды.
		КоличествоСекунд = КоличествоСекундВсего % 60;
		
		Если Не КоличествоСекунд = 0 Тогда
			
			ИтоговыйТекст = Строка(КоличествоСекунд) + " секунд" + ПолучитьОкончаниеСекундИлиМинутПриСклонении(КоличествоСекунд);
			
		КонецЕсли;
		
		// Минуты.
		КоличествоМинут = Цел(КоличествоСекундВсего / 60) % 60;
		
		Если Не КоличествоМинут = 0 Тогда
			
			ИтоговыйТекст = Строка(КоличествоМинут) + " минут" + ПолучитьОкончаниеСекундИлиМинутПриСклонении(КоличествоМинут) + " " + ИтоговыйТекст;
			
		КонецЕсли;
		
		// Часы.
		КоличествоЧасов = Цел(КоличествоСекундВсего / 3600);
		
		Если Не КоличествоЧасов = 0 Тогда
			
			ИтоговыйТекст = Строка(КоличествоЧасов) + " час" + ПолучитьОкончаниеЧасовПриСклонении(КоличествоЧасов) + " " + ИтоговыйТекст;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СокрЛП(ИтоговыйТекст);
	
КонецФункции

// Формирует окончание для секунд и минут в родительном падеже.
//
Функция ПолучитьОкончаниеСекундИлиМинутПриСклонении(КоличествоМинутИлиСекунд)
	
	Окончание = "";
	
	Если КоличествоМинутИлиСекунд < 5 ИЛИ КоличествоМинутИлиСекунд > 20 Тогда
		
		ПоследнееЧисло = КоличествоМинутИлиСекунд % 10;
		
		Если ПоследнееЧисло = 1 Тогда
			Окончание = "а";
		ИначеЕсли ПоследнееЧисло < 5 И ПоследнееЧисло > 1 Тогда
			Окончание = "ы";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Окончание;
	
КонецФункции

// Формирует окончание для часов в родительном падеже.
//
Функция ПолучитьОкончаниеЧасовПриСклонении(КоличествоЧасов)
	
	Окончание = "ов";
	
	Если КоличествоЧасов < 5 ИЛИ КоличествоЧасов > 20 Тогда
		
		ПоследнееЧисло = КоличествоЧасов % 10;
		
		Если ПоследнееЧисло = 1 Тогда
			Окончание = "";
		ИначеЕсли ПоследнееЧисло < 5 И ПоследнееЧисло > 1 Тогда
			Окончание = "а";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Окончание;
	
КонецФункции

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////////
// РАБОТА С УВЕДОМЛЕНИЯМИ ПОЛЬЗОВАТЕЛЕЙ О ВАЖНЫХ МЕХАНИЗМАХ

#Область РаботаСУведомлениямиПользователейОВажныхМеханизмах

// Проверяет, используется ли уведомление о важных событиях для текущего пользователя.
//
Функция ПроверитьИспользованиеУведомленийДляПользователя() Экспорт
	
	Возврат УПЖКХ_РаботаССообщениямиСервер.ПроверитьИспользованиеУведомленийДляПользователя(ПолучитьТекущийМеханизмДляУведомленийПользователям());
	
КонецФункции

// Включает уведомления о важных событиях для текущего пользователя.
//
Процедура ВключитьПолучениеУведомленийДляТекущегоПользователя() Экспорт
	
	УПЖКХ_РаботаССообщениямиСервер.ВключитьУведомлениеДляПользователя(ПолучитьТекущийМеханизмДляУведомленийПользователям());
	
КонецПроцедуры

// Отключает уведомления о важных событиях для текущего пользователя.
//
Процедура ОтключитьПолучениеУведомленийДляТекущегоПользователя() Экспорт
	
	УПЖКХ_РаботаССообщениямиСервер.ОтключитьУведомлениеДляПользователя(ПолучитьТекущийМеханизмДляУведомленийПользователям());
	
КонецПроцедуры

// Возвращает имя механизма уведомлений пользователя для голосовых сервисов.
//
Функция ПолучитьТекущийМеханизмДляУведомленийПользователям()
	
	Возврат Справочники.УПЖКХ_МеханизмыИспользующиеНапоминанияПользователей.ОбменСГолосовымиСервисами;
	
КонецФункции

#КонецОбласти

