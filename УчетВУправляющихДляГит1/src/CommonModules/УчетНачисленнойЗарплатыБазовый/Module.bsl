
#Область СлужебныйПрограммныйИнтерфейс

// См. УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛИКорректировкиВыплаты
//
Процедура ЗарегистрироватьНДФЛИКорректировкиВыплаты(ДанныеДляПроведения, Отказ, НДФЛПоСотрудникам, КорректировкиВыплатыПоСотрудникам, ЗаписыватьДвижения = Ложь) Экспорт
	
	Если НДФЛПоСотрудникам <> Неопределено И НДФЛПоСотрудникам.Количество() > 0 Тогда
		РезультатРасчетаНДФЛ = РезультатыРаспределенияНДФЛ(ДанныеДляПроведения, НДФЛПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьНДФЛ(ДанныеДляПроведения, Отказ, РезультатРасчетаНДФЛ, ЗаписыватьДвижения);
	КонецЕсли;
	
	Если КорректировкиВыплатыПоСотрудникам <> Неопределено И  КорректировкиВыплатыПоСотрудникам.Количество() > 0 Тогда
		КорректировкиВыплаты = РезультатыРаспределенияКорректировокВыплаты(ДанныеДляПроведения, КорректировкиВыплатыПоСотрудникам);
		УчетНачисленнойЗарплаты.ЗарегистрироватьКорректировкиВыплаты(ДанныеДляПроведения, Отказ, КорректировкиВыплаты, ЗаписыватьДвижения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет регистрацию в учете начисленной зарплаты удержаний.
// 	Параметры:
// 		ДанныеДляПроведения - Структура - см. ОтражениеЗарплатыВУчете.ОписаниеДанныеДляПроведения.
// 		Удержания           - ТаблицаЗначений.
// 		ЗаписыватьДвижения  - Булево.
//
Процедура СформироватьДвиженияУдержаний(ДанныеДляПроведения, Отказ, Удержания, ЗаписыватьДвижения = Ложь) Экспорт

	Если Удержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения 			= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 		= ДанныеДляПроведения.ПорядокВыплаты;
	Авансом 			= ДанныеДляПроведения.Авансом;
	Организация 		= ДанныеДляПроведения.Организация;
	ПериодРегистрации 	= ДанныеДляПроведения.ПериодРегистрации;
	ОкончательныйРасчет = ДанныеДляПроведения.ОкончательныйРасчет;
		
	// Получить данные для распределения удержаний по текущим начислениям.
	МассивФизическихЛиц = ОбщегоНазначения.ВыгрузитьКолонку(Удержания, "ФизическоеЛицо", Истина);
	ДанныеДляУчетаУдержаний = ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация, ОкончательныйРасчет, Авансом);
	УдержанияКРаспределению = УчетНачисленнойЗарплаты.КоллекцияРаспределяемыхУдержаний();
	
	Для Каждого СтрокаУдержания Из Удержания Цикл
		НоваяСтрока = УдержанияКРаспределению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
		НоваяСтрока.НачислениеУдержание = СтрокаУдержания.Удержание;
	КонецЦикла;
	УдержанияПоРабочимМестам = РаспределениеУдержанийПоРабочимМестам(УдержанияКРаспределению, ПериодРегистрации, Организация, ДанныеДляУчетаУдержаний.БазовыеНачисления, ДанныеДляУчетаУдержаний.УжеУдержано);
	УдержанияПоРабочимМестам.Колонки.НачислениеУдержание.Имя = "Удержание";
	
	УчетНачисленнойЗарплаты.ЗарегистрироватьУдержания(ДанныеДляПроведения, Отказ, УдержанияПоРабочимМестам, ЗаписыватьДвижения);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПравилаУчетаНачисленийСотрудников() Экспорт

	ПравилаУчетаНачислений = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.ЯвляетсяДоходомВНатуральнойФорме
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Справочно)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
	|	КОНЕЦ КАК ГруппаНачисленияУдержанияВыплаты,
	|	НЕ Начисления.ЯвляетсяДоходомВНатуральнойФорме КАК УчитыватьВоВзаиморасчетах
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПравилаУчетаНачисления = Новый Структура;
		ПравилаУчетаНачисления.Вставить("ГруппаНачисленияУдержанияВыплаты", Выборка.ГруппаНачисленияУдержанияВыплаты);
		ПравилаУчетаНачисления.Вставить("УчитыватьВоВзаиморасчетах", Выборка.УчитыватьВоВзаиморасчетах);
		
		ПравилаУчетаНачислений.Вставить(Выборка.Ссылка, ПравилаУчетаНачисления);
		
	КонецЦикла;
	
	Возврат ПравилаУчетаНачислений;

КонецФункции 

#Область ПроцедурыИФункцииРаботыСОтчетами

// Формирование отчета Анализ начислений и удержаний.
//
Процедура ПриКомпоновкеОтчетаАнализНачисленийИУдержаний(Отчет, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка, НаАванс = Ложь) Экспорт
КонецПроцедуры

// Возвращает начисления в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхНачислений(Начисления, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаНачисления Из Начисления Цикл
		СтрокаНачисления.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат Начисления;
	
КонецФункции

// Возвращает удержания в том порядке, в котором они должны быть выведены в отчете.
//
Функция ПорядокДополнительныхУдержаний(Удержания, ДанныеОтчета, СоответствиеПользовательскихПолей, НачальныйНомерКолонки) Экспорт
	
	НомерКолонки = НачальныйНомерКолонки;
	Для каждого СтрокаУдержания Из Удержания Цикл
		СтрокаУдержания.НомерКолонки = НомерКолонки;
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	Возврат Удержания;
	
КонецФункции

Функция ДополнительныеНачисленияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеНачисления = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НачисленоПовременно
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда);
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "НачисленоПовременно";
	НоваяСтрока.Заголовок = НСтр("ru='Повременно'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// ПрочиеНачисления
	НоваяСтрока = ДополнительныеНачисления.Добавить();
	НоваяСтрока.Имя = "ПрочиеНачисления";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие начисления'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Истина;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 96;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	Возврат ДополнительныеНачисления;
	
КонецФункции

Функция ДополнительныеУдержанияОтчетаАнализНачисленийИУдержанийТ49() Экспорт
	
	ДополнительныеУдержания = УчетНачисленнойЗарплаты.ПорядокДополнительныхНачисленийИУдержаний();
	
	// НДФЛ
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "НДФЛ";
	НоваяСтрока.Заголовок = НСтр("ru = 'Налог на доходы'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПользовательскоеУсловие = "ВидРасчета = Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "ВидРасчета <> Значение(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)";
	НоваяСтрока.ПорядокКолонки = 1;
	НоваяСтрока.ПриоритетКолонки = 1;
	
	// Аванс
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "Аванс";
	НоваяСтрока.Заголовок = НСтр("ru = 'Выдано за первую половину месяца (аванс)'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПользовательскоеУсловие = "ВидРасчета = Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)";
	НоваяСтрока.УсловиеИсключенияИзПрочих = "ВидРасчета <> Значение(Перечисление.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса)";
	НоваяСтрока.ПорядокКолонки = 2;
	НоваяСтрока.ПриоритетКолонки = 2;
	
	// ИсполнительныйЛист
	МассивКатегорий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.КатегорииУдержаний.ИсполнительныйЛист);
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ИсполнительныйЛист";
	НоваяСтрока.Заголовок = НСтр("ru='Удержания по исполнительному листу'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.КатегорииКолонки = МассивКатегорий;
	НоваяСтрока.ПорядокКолонки = 3;
	НоваяСтрока.ПриоритетКолонки = 3;
	
	// ПрочиеУдержания
	НоваяСтрока = ДополнительныеУдержания.Добавить();
	НоваяСтрока.Имя = "ПрочиеУдержания";
	НоваяСтрока.Заголовок = НСтр("ru = 'Прочие удержания'");
	НоваяСтрока.ДобавитьПользовательскоеПоле = Ложь;
	НоваяСтрока.ВыводитьНулевыеЗначения = Истина;
	НоваяСтрока.ВыводитьКолонку = Истина;
	НоваяСтрока.ПорядокКолонки = 99;
	НоваяСтрока.ПриоритетКолонки = 4;
	
	Возврат ДополнительныеУдержания;
	
КонецФункции

#КонецОбласти


Функция РезультатыРаспределенияНДФЛ(ДанныеДляПроведения, РезультатыРасчетаНДФЛ)

	Авансом 		= ДанныеДляПроведения.Авансом;
	Движения 		= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 	= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 	= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	ОкончательныйРасчет 	= ДанныеДляПроведения.ОкончательныйРасчет;
	
	ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам;
	ДанныеМежрасчетногоПериода = УчетНачисленнойЗарплаты.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	Регистратор = ДвиженияНачисленийУдержаний.Отбор.Регистратор.Значение;
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(РезультатыРасчетаНДФЛ, "ФизическоеЛицо", Истина);
	УжеУчтеноУдержаний = НеОпределено;
	Если Не ОкончательныйРасчет Тогда
		// Межрасчетное регистрация НДФЛ - не учитываем ранее удержанные суммы, т.к. расчет 
		// выполнялся исходя из данных одного документа.
		РегистраторОграниченияБазы = Регистратор;
	Иначе
		РегистраторОграниченияБазы = НеОпределено;
		Удержания = Новый Массив;
		Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ);
		УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
	КонецЕсли;
	// Если характер выплаты документа задан и при этом начисления по документу не будут выплачиваться 
	// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
	БазаРасчетаНДФЛ = УчетНДФЛ.БазаРасчетаНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
	УдержанияКРаспределению = УчетНачисленнойЗарплаты.КоллекцияРаспределяемыхУдержаний();
	
	Если УдержанияКРаспределению.Колонки.Найти("ДатаПолученияДохода") <> Неопределено Тогда
		УдержанияКРаспределению.Колонки.Удалить("ДатаПолученияДохода");
	КонецЕсли;
	
	Если УдержанияКРаспределению.Колонки.Найти("КатегорияДохода") <> Неопределено Тогда
		УдержанияКРаспределению.Колонки.Удалить("КатегорияДохода");
	КонецЕсли;
	
	Для Каждого СтрокаУдержания Из РезультатыРасчетаНДФЛ Цикл
		НоваяСтрока = УдержанияКРаспределению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержания);
		НоваяСтрока.ТерриторияВыполненияРаботВОрганизации = СтрокаУдержания.Подразделение;
		НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ;
		НоваяСтрока.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано;
	КонецЦикла;
	
	Возврат УчетНачисленнойЗарплаты.РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределению, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛ, 0, Авансом, Истина);

КонецФункции

Функция РезультатыРаспределенияКорректировокВыплаты(ДанныеДляПроведения, КорректировкиВыплаты)

	Авансом 		= ДанныеДляПроведения.Авансом;
	Движения 		= ДанныеДляПроведения.Движения;
	ПорядокВыплаты 	= ДанныеДляПроведения.ПорядокВыплаты;
	Организация 	= ДанныеДляПроведения.Организация;
	ПериодРегистрации 		= ДанныеДляПроведения.ПериодРегистрации;
	МенеджерВременныхТаблиц = ДанныеДляПроведения.МенеджерВременныхТаблиц;
	
	ДанныеМежрасчетногоПериода = УчетНачисленнойЗарплаты.ЭтоМежрасчетнаяВыплата(ПорядокВыплаты);
	
	// При отсутствии учета по источникам корректировки нужно распределить
	Регистратор = Движения.НачисленияУдержанияПоСотрудникам.Отбор.Регистратор.Значение;
	
	// 1. Распределяем первичные корректировки
	УдержанияКРаспределениюПервичные = УчетНачисленнойЗарплаты.КоллекцияРаспределяемыхУдержаний();
	Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
		// считаем, что первичные корректировки, это отрицательные корректировки
		Если СтрокаКорректировки.КорректировкаВыплаты < 0 Тогда
			НоваяСтрока = УдержанияКРаспределениюПервичные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету;
			НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
		КонецЕсли;
	КонецЦикла;
	ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияКРаспределениюПервичные, "ФизическоеЛицо", Истина);
	УжеУчтеноУдержаний = НеОпределено;
	Если ПорядокВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.Зарплата И ПорядокВыплаты <> Неопределено Тогда
		РегистраторОграниченияБазы = Регистратор;
	Иначе
		РегистраторОграниченияБазы = НеОпределено;
		Удержания = Новый Массив;
		Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету);
		УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
	КонецЕсли;
	// Если характер выплаты документа задан и при этом начисления по документу не будут выплачиваться 
	// после расчета зарплаты или аванса, то нужно ограничить базу расчета НДФЛ движениями самого регистратора.
	БазаРасчетаНДФЛ = УчетНДФЛ.БазаРасчетаНДФЛ(МенеджерВременныхТаблиц, Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы);
	КорректировкиПоРабочимМестам = УчетНачисленнойЗарплаты.РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределениюПервичные, ПериодРегистрации, Организация, БазаРасчетаНДФЛ, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛКЗачету, 0);
	
	// 2. Распределяем вторичные корректировки
	УдержанияКРаспределениюВторичные = УчетНачисленнойЗарплаты.КоллекцияРаспределяемыхУдержаний();
	Для Каждого СтрокаКорректировки Из КорректировкиВыплаты Цикл
		// считаем, что вторичные корректировки, это положительные корректировки
		Если СтрокаКорректировки.КорректировкаВыплаты > 0 Тогда
			НоваяСтрока = УдержанияКРаспределениюВторичные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКорректировки);
			НоваяСтрока.НачислениеУдержание = Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено;
			НоваяСтрока.Сумма = СтрокаКорректировки.КорректировкаВыплаты;
		КонецЕсли;
	КонецЦикла;
	
	Если УдержанияКРаспределениюВторичные.Количество() > 0 Тогда
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияКРаспределениюВторичные, "ФизическоеЛицо", Истина);
		// КорректировкиВыплаты могут служить базой для распределения, нужно лишь переименовать колонку "КорректировкаВыплаты".
		ИменаКолонокКорректировкиВыплаты = ВзаиморасчетыССотрудниками.ИменаКолонокКорректировкиВыплаты();
		ИменаКолонокКорректировкиВыплаты.СуммаКорректировки = "Сумма"; 
		ТекущиеКорректировкиВыплаты = ВзаиморасчетыССотрудниками.КорректировкиВыплаты(
		Организация, ПериодРегистрации, ФизическиеЛицаМассив, РегистраторОграниченияБазы, 
		ИменаКолонокКорректировкиВыплаты);
		
		Удержания = Новый Массив;
		Удержания.Добавить(Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено);
		УжеУчтеноУдержаний = УжеУчтеноУдержаний(Регистратор, ФизическиеЛицаМассив, ПериодРегистрации, Организация, Удержания);
		КорректировкиПоРабочимМестамВторичные = УчетНачисленнойЗарплаты.РаспределениеПрочихУдержанийПоРабочимМестам(УдержанияКРаспределениюВторичные, ПериодРегистрации, Организация, ТекущиеКорректировкиВыплаты, УжеУчтеноУдержаний, Перечисления.ВидыОсобыхНачисленийИУдержаний.НДФЛЗачтено, 0);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(КорректировкиПоРабочимМестамВторичные, КорректировкиПоРабочимМестам);
	КонецЕсли;
	
	КорректировкиПоРабочимМестам.Колонки.Сумма.Имя = "КорректировкаВыплаты";
	
	Возврат КорректировкиПоРабочимМестам;

КонецФункции

// Выполняет распределение сумм удержаний с физических лиц по рабочим местам.
//
// Параметры:
//	Удержания - исходная таблица удержаний, суммы из которой нужно распределить.
//      Должна содержать колонку Сотрудник 
//      Должна содержать колонку ФизическоеЛицо 
//  	Должна содержать колонку Сумма
//	ПериодРегистрации
//	Организация
//	БазаРаспределения - таблица значений с колонками
//		- ФизическоеЛицо
//		- Подразделение
//		- Сотрудник
//  	- ГоловнойСотрудник
//		- Сумма
//	УжеУдержано - таблица значений с уже удержанными суммами
//  Авансом - Истина, если распределение выполняется для первой половины месяца.
//
Функция РаспределениеУдержанийПоРабочимМестам(Удержания, ПериодРегистрации, Организация, БазаРаспределения = НеОпределено, УжеУдержано = НеОпределено, Авансом = Ложь)
	
	УдержанияПоРабочимМестам = УчетНачисленнойЗарплаты.ТаблицаРаспределенияПоРабочимМестам(Авансом);
	ВспомогательнаяТаблица = УдержанияПоРабочимМестам.СкопироватьКолонки();
	
	// Раскладываем строки базы по физическим лицам.
	СтрокиБазыПоФизическимЛицам = Новый Соответствие;
	// Раскладываем строки базы по рабочим местам.
	СтрокиБазыПоСотрудникам = Новый Соответствие;
	// Откладываем строки, для которых не удалось найти строки базы распределения.
	СтрокиБазаНеопределена = Новый Массив;
	
	ЗаполнитьСоответствияСтрокБазыПоУдержаниям(Удержания, БазаРаспределения, СтрокиБазыПоФизическимЛицам, СтрокиБазыПоСотрудникам, СтрокиБазаНеопределена);
	
	// Раскладываем строки выполненных удержаний по физическим лицам.
	СтрокиУжеУдержаноПоФизическимЛицам = Новый Соответствие;
	Если УжеУдержано <> НеОпределено Тогда
		Для Каждого Строка Из УжеУдержано Цикл
			СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[Строка.ФизическоеЛицо];
			Если СтрокиУжеУдержаноПоФизическомуЛицу = НеОпределено Тогда
				СтрокиУжеУдержаноПоФизическомуЛицу = Новый Массив;
			КонецЕсли;
			СтрокиУжеУдержаноПоФизическомуЛицу.Добавить(Строка);
			СтрокиУжеУдержаноПоФизическимЛицам.Вставить(Строка.ФизическоеЛицо, СтрокиУжеУдержаноПоФизическомуЛицу);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиБазаНеопределена.Количество() > 0 Тогда
		
		УдержанияБезБазы = Удержания.Скопировать(СтрокиБазаНеопределена);
		СтрокиБазаНеопределена.Очистить();
		
		ФизическиеЛицаМассив = ОбщегоНазначения.ВыгрузитьКолонку(УдержанияБезБазы, "ФизическоеЛицо", Истина);
		
		БазаРаспределенияПоУмолчанию = РасчетЗарплаты.ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛицаМассив, ПериодРегистрации, Организация);
		ЗаполнитьСоответствияСтрокБазыПоУдержаниям(УдержанияБезБазы, БазаРаспределенияПоУмолчанию, СтрокиБазыПоФизическимЛицам, СтрокиБазыПоСотрудникам, СтрокиБазаНеопределена);
		
		Если СтрокиБазаНеопределена.Количество() > 0 Тогда
			
			СообщениеОбОшибке = "";
			Для каждого Строка Из СтрокиБазаНеопределена Цикл
				
				ТекстСообщения = НСтр("ru='Для физического лица %1 не найдена база распределения удержания %2 по документу-основанию %3.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ФизическоеЛицо, Строка.НачислениеУдержание, Строка.ДокументОснование);
				СообщениеОбОшибке = СообщениеОбОшибке + ТекстСообщения + Символы.ПС;
				
			КонецЦикла;
			
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаУдержаний Из Удержания Цикл
		
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
						
		ИскатьСтрокиБазыПоФизическомуЛицу = Ложь;
		// Ранее удержано по этому виду удержания
		РанееУдержано = 0;
		
		ВспомогательнаяТаблица.Очистить();
		
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			// Находим строки распределения.
			СтрокиРаспределения = СтрокиБазыПоСотрудникам[СтрокаУдержаний.Сотрудник];
			Если СтрокиРаспределения = НеОпределено Тогда
				ИскатьСтрокиБазыПоФизическомуЛицу = Истина;
			КонецЕсли;
		Иначе
			ИскатьСтрокиБазыПоФизическомуЛицу = Истина;
		КонецЕсли;
		
		СтрокиУжеУдержаноПоФизическомуЛицу = СтрокиУжеУдержаноПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		Если СтрокиУжеУдержаноПоФизическомуЛицу <> НеОпределено Тогда
						
			Для каждого СтрокаУжеУдержаноПоФизическомуЛицу Из СтрокиУжеУдержаноПоФизическомуЛицу Цикл
				
				Если СтрокаУжеУдержаноПоФизическомуЛицу.НачислениеУдержание = СтрокаУдержаний.НачислениеУдержание 
					И Не Авансом И СтрокаУжеУдержаноПоФизическомуЛицу.ДокументОснование = СтрокаУдержаний.ДокументОснование Тогда
					
					// Подготавливаем таблицу уже удержанных сумм.
					НоваяСтрока = ВспомогательнаяТаблица.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУжеУдержаноПоФизическомуЛицу);
					НоваяСтрока.ИдентификаторСтроки = СтрокаУдержаний.ИдентификаторСтроки;
					Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
						НоваяСтрока.ПериодДействия = ПериодРегистрации;
					КонецЕсли;
					НоваяСтрока.Период = ПериодРегистрации;
					НоваяСтрока.Сумма  = - СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					НоваяСтрока.ОграничениеВзыскания = СтрокаУдержаний.ОграничениеВзыскания;
					
					РанееУдержано = РанееУдержано + СтрокаУжеУдержаноПоФизическомуЛицу.Сумма;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;

		Если ИскатьСтрокиБазыПоФизическомуЛицу Тогда
			// Находим строки распределения.
			СтрокиРаспределения = СтрокиБазыПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
		КонецЕсли;
		
		// Распределяем пропорционально суммам в найденных строках.
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиРаспределения, "Сумма");
		// распределяем суммы с учетом ранее удержанного
		РаспределенныеСуммы = ЗарплатаКадры.РаспределитьСуммуПропорциональноБазе(СтрокаУдержаний.Сумма + РанееУдержано, Коэффициенты);
		
		Если РаспределенныеСуммы <> НеОпределено Тогда
			
			// минусуем уже удержанные суммы
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВспомогательнаяТаблица, УдержанияПоРабочимМестам);
			
			// плюсуем распределенные суммы
			Для Индекс = 0 По СтрокиРаспределения.Количество() - 1 Цикл
				Если РаспределенныеСуммы[Индекс] = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = СтрокиРаспределения[Индекс];
				НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[Индекс]);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
				Если Не ЗначениеЗаполнено(НоваяСтрока.ПериодДействия) Тогда
					НоваяСтрока.ПериодДействия = ПериодРегистрации;
				КонецЕсли;
				
				НоваяСтрока.Период			= ПериодРегистрации;
				НоваяСтрока.Организация		= Организация;
				НоваяСтрока.ФизическоеЛицо	= СтрокаРаспределения.ФизическоеЛицо;
				НоваяСтрока.Сотрудник		= СтрокаРаспределения.Сотрудник;
				НоваяСтрока.Подразделение	= СтрокаРаспределения.Подразделение;
				НоваяСтрока.Сумма 			= РаспределенныеСуммы[Индекс];
			КонецЦикла;
		ИначеЕсли РанееУдержано <> 0 И СтрокаУдержаний.Сумма = -РанееУдержано Тогда 
			// минусуем уже удержанные суммы
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ВспомогательнаяТаблица, УдержанияПоРабочимМестам);
		Иначе
			НоваяСтрока = УдержанияПоРабочимМестам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиРаспределения[0]);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУдержаний);
			НоваяСтрока.Период			= ПериодРегистрации;
			НоваяСтрока.ПериодДействия	= ПериодРегистрации;
			НоваяСтрока.Организация		= Организация;
			НоваяСтрока.ФизическоеЛицо	= СтрокиРаспределения[0].ФизическоеЛицо;
			НоваяСтрока.Сотрудник		= СтрокиРаспределения[0].Сотрудник;
			НоваяСтрока.Подразделение	= СтрокиРаспределения[0].Подразделение;
			НоваяСтрока.Сумма = СтрокаУдержаний.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	Колонки = "";
	Для каждого Колонка Из УдержанияПоРабочимМестам.Колонки Цикл
		Если Колонка.Имя = "Сумма" Тогда
			Продолжить;
		КонецЕсли;
		Колонки = Колонки + "," + Колонка.Имя;
	КонецЦикла;
	Колонки = Сред(Колонки, 2);
	УдержанияПоРабочимМестам.Свернуть(Колонки, "Сумма");
		
	Возврат УдержанияПоРабочимМестам;
	
КонецФункции

// Заполняет соответствия со значениями ключа типа СправочникСсылка.ФизическиеЛица, СправочникСсылка.Сотрудники строками 
// таблицы БазаРаспределения.
//
// Параметры:
//	Удержания - таблица, по значениям колонок которой, заполняются соответствия.
//      Должна содержать колонку Сотрудник 
//      Должна содержать колонку ФизическоеЛицо 
//      Должна содержать колонку Сумма 
//	БазаРаспределения - таблица базы распределения.
//  	Должна содержать колонку ФизическоеЛицо
//  	Должна содержать колонку ГоловнойСотрудник
//	СтрокиПоФизическимЛицам - Соответствие, ключ должен содержать значения типа СправочникСсылка.ФизическиеЛица   
//	СтрокиПоСотрудникам - Соответствие, ключ должен содержать значения типа СправочникСсылка.Сотрудники
//	СтрокиБазаНеопределена - Массив
//
Процедура ЗаполнитьСоответствияСтрокБазыПоУдержаниям(Удержания, БазаРаспределения, СтрокиПоФизическимЛицам, СтрокиПоСотрудникам, СтрокиБазаНеопределена)
	
	ПустаяБаза = (БазаРаспределения = НеОпределено ИЛИ БазаРаспределения.Количество() = 0);
	Если Не ПустаяБаза Тогда
		БазаРаспределения.Индексы.Добавить("ФизическоеЛицо"); 
		БазаРаспределения.Индексы.Добавить("ГоловнойСотрудник"); 
	КонецЕсли;
	
	Для Каждого СтрокаУдержаний Из Удержания Цикл
		
		Если СтрокаУдержаний.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяБаза Тогда
			СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
			Продолжить;
		КонецЕсли;
		
		ПолучатьСтрокиПоФизическомуЛицу = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаУдержаний.Сотрудник) Тогда
			
			СтрокиПоСотруднику = СтрокиПоСотрудникам[СтрокаУдержаний.Сотрудник];
			Если СтрокиПоСотруднику = НеОпределено Тогда
				
				СтрокиПоСотруднику = Новый Массив;
				СтрокиРаспределения = БазаРаспределения.НайтиСтроки(Новый Структура("ГоловнойСотрудник", СтрокаУдержаний.Сотрудник));
				
				Если СтрокиРаспределения.Количество() > 0 Тогда
					Для каждого Строка Из СтрокиРаспределения Цикл  
						СтрокиПоСотруднику.Добавить(Строка);
					КонецЦикла;
					СтрокиПоСотрудникам.Вставить(СтрокаУдержаний.Сотрудник, СтрокиПоСотруднику);
				Иначе
					ПолучатьСтрокиПоФизическомуЛицу = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ПолучатьСтрокиПоФизическомуЛицу = Истина;
		КонецЕсли;
		
		Если ПолучатьСтрокиПоФизическомуЛицу Тогда
			
			СтрокиПоФизическомуЛицу = СтрокиПоФизическимЛицам[СтрокаУдержаний.ФизическоеЛицо];
			Если СтрокиПоФизическомуЛицу = НеОпределено Тогда
				
				СтрокиПоФизическомуЛицу = Новый Массив;
				СтрокиРаспределения = БазаРаспределения.НайтиСтроки(Новый Структура("ФизическоеЛицо", СтрокаУдержаний.ФизическоеЛицо));
				
				Если СтрокиРаспределения.Количество() > 0 Тогда
					Для каждого Строка Из СтрокиРаспределения Цикл  
						СтрокиПоФизическомуЛицу.Добавить(Строка);
					КонецЦикла;
					СтрокиПоФизическимЛицам.Вставить(СтрокаУдержаний.ФизическоеЛицо, СтрокиПоФизическомуЛицу);
				Иначе
					СтрокиБазаНеопределена.Добавить(СтрокаУдержаний);
				КонецЕсли;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ПустаяБаза Тогда
		Для каждого Индекс Из БазаРаспределения.Индексы Цикл
			БазаРаспределения.Индексы.Удалить(Индекс);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Возвращает таблицы значений, необходимые для распределения удержаний по рабочим местам
// Данные с базовыми начислениями
//	ФизическоеЛицо
//	Сотрудник
//	Подразделение
//	Сумма
//
// Данные с результатами выполненных ранее удержаний
//
// Параметры:
//	Движения - движения регистратора, которые формируются в СформироватьДвижения
//	МассивФизическихЛиц
//	ПериодРегистрации.
//	Организация
//  Авансом - признак того, что требуется получить данные для первой половины месяца. По умолчанию - Ложь
//  ДанныеМежрасчетногоПериода - признак того, что данные получаются для документа, выплачиваемого в межрасчет
//	ОграничениеВзысканий - если Истина, учитываются также межрасчетные начисления и удержания.
//
// Возвращаемое значение: структура со свойствами
//		БазовыеНачисления
//		УжеУдержано
//
Функция ДанныеДляУчетаУдержаний(Движения, МассивФизическихЛиц, ПериодРегистрации, Организация, ОкончательныйРасчет, Авансом)
	
	Если Авансом Тогда
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникамАвансом
	Иначе
		ДвиженияНачисленийУдержаний = Движения.НачисленияУдержанияПоСотрудникам
	КонецЕсли;
	
	МассивСотрудников = ДвиженияНачисленийУдержаний.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник");
	ОсновныеСотрудники = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивСотрудников, "ГоловнойСотрудник");
	
	ДанныеДляУчетаУдержаний = Новый Структура("БазовыеНачисления,УжеУдержано");
	
	// Чтобы гарантировать одинаковую структуру возвращаемых значений используем 
	// один и тот же набор полей выбора.
	ПоляВыбораБазовыеНачисления = 
		"
		|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	СУММА(НачисленияУдержания.Сумма) КАК Сумма";
		
	Если ОкончательныйРасчет Тогда
		// Если выполнен "окончательный" расчет - учтем данные всех других документов, кроме межрасчетных.
		
		// регистратор движений
		Регистратор = Движения[0].Отбор.Регистратор.Значение;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные 		= "ГоловнойСотрудник";
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
		
		// Получим данные о начислениях из других регистраторов.
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	НачисленияУдержания.НачислениеУдержание,
		|	НачисленияУдержания.Организация,
		|	НачисленияУдержания.СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов,
		|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
		|	НачисленияУдержания.ПериодДействия,
		|	НачисленияУдержания.ДокументОснование,
		|	НачисленияУдержания.Контрагент,
		|	НачисленияУдержания.ДатаНачала,
		|	НачисленияУдержания.ДатаОкончания,
		|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
		|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
		|ГДЕ
		|	НачисленияУдержания.Регистратор <> &Регистратор
		|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И НачисленияУдержания.Организация = &Организация
		|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
		|	И НачисленияУдержания.Период = &ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение,
		|	НачисленияУдержания.НачислениеУдержание,
		|	НачисленияУдержания.Организация,
		|	НачисленияУдержания.СтатьяФинансирования,
		|	НачисленияУдержания.СтатьяРасходов,
		|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
		|	НачисленияУдержания.ПериодДействия,
		|	НачисленияУдержания.ДокументОснование,
		|	НачисленияУдержания.Контрагент,
		|	НачисленияУдержания.ДатаНачала,
		|	НачисленияУдержания.ДатаОкончания,
		|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
		|	НачисленияУдержания.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	""ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
		|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
		|ГДЕ
		|	НачисленияУдержания.Регистратор <> &Регистратор
		|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
		|	И НачисленияУдержания.Организация = &Организация
		|	И НачисленияУдержания.Период = &ПериодРегистрации
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ГоловнойСотрудник,
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение";
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления", ПоляВыбораБазовыеНачисления);
		
		Если Авансом Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам ", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом ");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "
										|	НачисленияУдержания.ДокументОснование,
										|	НачисленияУдержания.Контрагент,
										|	НачисленияУдержания.ДатаНачала,
										|	НачисленияУдержания.ДатаОкончания,
										|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,", "");
		КонецЕсли;
		
		Результаты = Запрос.ВыполнитьПакет();
		
		ДанныеДляУчетаУдержаний.БазовыеНачисления = Результаты[1].Выгрузить();
		ДанныеДляУчетаУдержаний.УжеУдержано = Результаты[0].Выгрузить();
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	Значение(Справочник.Сотрудники.ПустаяСсылка) КАК ГоловнойСотрудник,
		|	""ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержания.ФизическоеЛицо,
		|	НачисленияУдержания.Сотрудник,
		|	НачисленияУдержания.Подразделение");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, """ПоляВыбораБазовыеНачисления"" КАК ПоляВыбораБазовыеНачисления", ПоляВыбораБазовыеНачисления);
		ДанныеДляУчетаУдержаний.БазовыеНачисления = Запрос.Выполнить().Выгрузить();
			
	КонецЕсли;
	
	// Дополним данными из текущих движений.
	Для Каждого Строка Из ДвиженияНачисленийУдержаний Цикл
		Если Строка.ГруппаНачисленияУдержанияВыплаты = Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено Тогда
			Если МассивФизическихЛиц.Найти(Строка.ФизическоеЛицо) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокиБазы = ДанныеДляУчетаУдержаний.БазовыеНачисления.НайтиСтроки(Новый Структура("Сотрудник,Подразделение", Строка.Сотрудник, Строка.Подразделение));
			Если СтрокиБазы.Количество() = 0 Тогда
				СтрокаБазы = ДанныеДляУчетаУдержаний.БазовыеНачисления.Добавить();
				СтрокаБазы.ФизическоеЛицо = Строка.ФизическоеЛицо;
				СтрокаБазы.Сотрудник = Строка.Сотрудник;
				СтрокаБазы.ГоловнойСотрудник = ОсновныеСотрудники.Получить(Строка.Сотрудник);
				СтрокаБазы.Подразделение = Строка.Подразделение;
				СтрокаБазы.Сумма = 0;
			Иначе
				СтрокаБазы = СтрокиБазы[0];
			КонецЕсли;
			СтрокаБазы.Сумма = СтрокаБазы.Сумма + Строка.Сумма;
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ДанныеДляУчетаУдержаний;
	
КонецФункции

// Возвращает таблицу с результатами выполненных ранее удержаний
//
// Параметры:
//	Регистратор - регистратор, которые необходимо исключить
//	МассивФизическихЛиц
//	ПериодРегистрации
//	Организация
//	Удержания - массив значений, которые могут хранится в поле НачислениеУдержание 
//				регистров НачисленияУдержанияПоСотрудникам и НачисленияУдержанияПоСотрудникамАвансом.
//
Функция УжеУчтеноУдержаний(Регистратор, МассивФизическихЛиц, ПериодРегистрации, Организация, Удержания = НеОпределено, Авансом = Ложь)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= МассивФизическихЛиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	// Получим данные о зарегистрированных другими регистраторами удержаниях
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленияУдержания.Сотрудник КАК Сотрудник,
	|	НачисленияУдержания.Подразделение КАК Подразделение,
	|	НачисленияУдержания.НачислениеУдержание КАК НачислениеУдержание,
	|	НачисленияУдержания.Организация КАК Организация,
	|	НачисленияУдержания.СтатьяФинансирования КАК СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов КАК СтатьяРасходов,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты КАК ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ПериодДействия КАК ПериодДействия,
	|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
	|	НачисленияУдержания.Контрагент КАК Контрагент,
	|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(НачисленияУдержания.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК Сотрудники
	|		ПО (Сотрудники.Сотрудник = НачисленияУдержания.Сотрудник)
	|ГДЕ
	|	НачисленияУдержания.Регистратор <> &Регистратор
	|	И НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
	|	И НачисленияУдержания.Организация = &Организация
	|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода
	|	И НачисленияУдержания.Период = &ПериодРегистрации
	|	И НачисленияУдержания.НачислениеУдержание В(&Удержания)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержания.Сотрудник,
	|	НачисленияУдержания.Подразделение,
	|	НачисленияУдержания.НачислениеУдержание,
	|	НачисленияУдержания.Организация,
	|	НачисленияУдержания.СтатьяФинансирования,
	|	НачисленияУдержания.СтатьяРасходов,
	|	НачисленияУдержания.ГруппаНачисленияУдержанияВыплаты,
	|	НачисленияУдержания.ПериодДействия,
	|	НачисленияУдержания.ДокументОснование,
	|	НачисленияУдержания.Контрагент,
	|	НачисленияУдержания.ДатаНачала,
	|	НачисленияУдержания.ДатаОкончания,
	|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации,
	|	НачисленияУдержания.ФизическоеЛицо,
	|	НачисленияУдержания.РегистрацияВНалоговомОргане";
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Если Удержания = НеОпределено Тогда
		// не заданы удержания - удалим условие на виды удержаний
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержания.НачислениеУдержание В(&Удержания)", "");
	Иначе
		Запрос.УстановитьПараметр("Удержания", Удержания);
	КонецЕсли;
	Если Авансом Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.НачисленияУдержанияПоСотрудникам ", "РегистрНакопления.НачисленияУдержанияПоСотрудникамАвансом ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
									|	И НЕ НачисленияУдержания.ДанныеМежрасчетногоПериода","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "
									|	НачисленияУдержания.ДокументОснование КАК ДокументОснование,
									|	НачисленияУдержания.Контрагент КАК Контрагент,
									|	НачисленияУдержания.ДатаНачала КАК ДатаНачала,
									|	НачисленияУдержания.ДатаОкончания КАК ДатаОкончания,
									|	НачисленияУдержания.ТерриторияВыполненияРаботВОрганизации КАК ТерриторияВыполненияРаботВОрганизации,
									|	НачисленияУдержания.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьДополнительныеПоляОтчетаАнализНачисленийИУдержаний(ОтчетОбъект, ДополнительныеПоля) Экспорт
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ДополнительныеПоляКадровыхДанныхСотрудников = КадровыйУчет.ПоляПредставленийКадровыхДанныхСотрудников();
		
		ДополнительныеПоля = Новый Структура;
		ДополнительныеПоля.Вставить("Представления_КадровыеДанныеСотрудниковАнализНачисленийИУдержаний", ДополнительныеПоляКадровыхДанныхСотрудников);
		
		Для Каждого СтрокаДополнительногоПоля Из ДополнительныеПоляКадровыхДанныхСотрудников Цикл
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьПсевдонимПоля(
				СтрокаДополнительногоПоля,
				"КадровыеДанныеСотрудников",
				СтрокаДополнительногоПоля.ИмяПоля,
				СтрокаДополнительногоПоля.ПутьПоляСКД,
				СтрокаДополнительногоПоля.ЗаголовокПоляСКД);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

