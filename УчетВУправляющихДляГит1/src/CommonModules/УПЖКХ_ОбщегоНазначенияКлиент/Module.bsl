
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Устанавливает параметры отбора в отбор динамического списка
//
// Параметры
//  Параметры                - Структура - параметры, переданные форме
//  ОтборДинамическогоСписка - Отбор - Отбор динамического списка,
//                             в который устанавливаются параметры отбора.
Процедура УстановитьПараметрыОтбораФормуВыбора(Параметры,ОтборДинамическогоСписка) Экспорт
	
	Если Параметры.Свойство("МассивОтбора") = Истина Тогда
		
		Для каждого ЭлементМассиваОтбора Из Параметры.МассивОтбора Цикл
			
			ЭлементОтбораДанных = ОтборДинамическогоСписка.Элементы.Добавить(ЭлементМассиваОтбора.ТипОтбора);
			ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ЭлементМассиваОтбора.ЛевоеЗначение);
			ЭлементОтбораДанных.Использование  = Истина;
			ЭлементОтбораДанных.ВидСравнения   = ЭлементМассиваОтбора.ВидСравнения;
			ЭлементОтбораДанных.ПравоеЗначение = ЭлементМассиваОтбора.ПравоеЗначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыОтбораФормуВыбора()

// Открывает форму с наследованием, установленных параметров выбора и связи параметров выбора
//
// Параметры:
//  Форма              - Управляемая форма - Форма, из которой выполняется команда открытия подциненной формы,
//                                           на которой происходит отбор по доступным для выбора значений полей.
//  Элемент            - Элемент формы     - Элемент, который содержит ссылку на объект, для редактирования которого
//                                           открывается форма.
//  Значение           - Ссылка            - Ссылка на объект, для редактирования которого открывается форма.
//  ПутьКФорме         - Строка            - Путь к форме, которая открывается. 
//  ОповещениеЗакрытия - Строка            - Наименование процедуры, которая вызывается при закрытии формы.
//
Процедура ОткрытьФормуСОтбором(Форма, Элемент, Значение, ПутьКФорме, ВыполнитьПослеЗакрытия = Ложь, ОповещениеЗакрытия = "") Экспорт
	
	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	
	Если ТипЗнч(Элемент.СвязиПараметровВыбора) = Тип("ФиксированныйМассив") Тогда
		Для Каждого ЭлементСвязи Из Элемент.СвязиПараметровВыбора Цикл
			Если Найти(ЭлементСвязи.Имя, "Отбор.") > 0 Тогда
				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементСвязи.Имя, "Отбор.", ""), РазобратьПутьКДаннымФормыСОтбором(Форма, ЭлементСвязи.ПутьКДанным));
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда
		Для Каждого ЭлементОтборов Из Элемент.ПараметрыВыбора Цикл
			Если Найти(ЭлементОтборов.Имя, "Отбор.") > 0 Тогда
				ЗначенияЗаполнения.Вставить(СтрЗаменить(ЭлементОтборов.Имя, "Отбор.", ""), ЭлементОтборов.Значение);
			КонецЕсли;
		КонецЦикла
	КонецЕсли;
			
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Значение);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если ВыполнитьПослеЗакрытия Тогда
		ОткрытьФорму(ПутьКФорме, ПараметрыФормы, Форма,,,,Новый ОписаниеОповещения(ОповещениеЗакрытия,Форма));
	Иначе
		ОткрытьФорму(ПутьКФорме, ПараметрыФормы, Форма);
	КонецЕсли;
	
	
КонецПроцедуры

// Разбирает путь к данным элемента формы
//
// Параметры:
//  Источник - Строка - Данные элемента формы 
//  Путь     - Строка - Путь к данным элемента формы.
//
Функция РазобратьПутьКДаннымФормыСОтбором(Источник, Путь)
	
	Если ПустаяСтрока(Путь) Тогда
		Возврат Источник;
	КонецЕсли;
	
	МассивЭлементов = СтрРазделить(Путь, ".");
	Если МассивЭлементов.Количество() = 0 Тогда
		Возврат Источник;
	КонецЕсли;
	
	ТекущийШаг = МассивЭлементов[0];
	МассивЭлементов.Удалить(0);
	НовыйПуть = СтрСоединить(МассивЭлементов, ".");
	
	Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
		Если ТекущийШаг = "Объект" Тогда
			Возврат РазобратьПутьКДаннымФормыСОтбором(Источник.Объект, НовыйПуть);
		ИначеЕсли ТекущийШаг = "Элементы" Тогда
			Возврат РазобратьПутьКДаннымФормыСОтбором(Источник.Элементы, НовыйПуть);
		КонецЕсли;
	ИначеЕсли ТекущийШаг = "ТекущиеДанные" Тогда
		Возврат РазобратьПутьКДаннымФормыСОтбором(Источник.ТекущиеДанные, НовыйПуть);
	Иначе
		Возврат РазобратьПутьКДаннымФормыСОтбором(Источник[ТекущийШаг], НовыйПуть);
	КонецЕсли;
	
	Возврат Источник;
	
КонецФункции

#КонецОбласти

#Область ИсправлениеПроблемРежимаСовместимостиСInternetExplorer7

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИСПРАВЛЕНИЯ ПРОБЛЕМ С РЕЖИМОМ СОВМЕСТИМОСТИ С INTERNET EXPLORER 7

// Определяет, используется ли режим совместимости с Internet Explorer 7.
//
Функция ПроверитьИспользованиеРежимаСовместимостиСIE7(ИнформацияПрограммыПросмотра) Экспорт
	
	ИспользуетсяРежимСовместимостиСIE7 = Ложь;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ИспользуетсяРежимСовместимостиСIE7 = НЕ СтрНайти(ИнформацияПрограммыПросмотра, "MSIE 7.0") = 0;
	КонецЕсли;
	
	Возврат ИспользуетсяРежимСовместимостиСIE7;
	
КонецФункции

// Открывает страницу с описанием решения проблемы совместимости с Internet Explorer 7.
//
Процедура ОткрытьСтраницуРешенияПроблемРежимаСовместимостиСIE7() Экспорт
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьСтраницуРешенияПроблемРежимаСовместимостиСIE7ЗапускПриложения", ЭтотОбъект),
						   ПолучитьАдресСтраницыРешенияПроблемРежимаСовместимостиСIE7());
	
КонецПроцедуры

// Обработчик завершения запуска приложения.
Процедура ОткрытьСтраницуРешенияПроблемРежимаСовместимостиСIE7ЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Возвращает адрес страницы с описанием решения проблем совместимости с Internet Explorer 7.
//
Функция ПолучитьАдресСтраницыРешенияПроблемРежимаСовместимостиСIE7()
	
	Возврат "https://vgkh.ru/faq/faq_tsj_3_0/ispravlenie_oshibki_stsenariya";
	
КонецФункции

#КонецОбласти

#Область ЗапускСтраницВБраузере

////////////////////////////////////////////////////////////////////////////////
// ЗАПУСК СТРАНИЦ В БРАУЗЕРЕ

// Выполняет открытие страницы в браузере.
//
Процедура ОткрытьСтраницуВБраузере(АдресСтраницы) Экспорт
	
	Если НЕ АдресСтраницы = Неопределено Тогда
		ПустоеОповещение = Новый ОписаниеОповещения("ПустоеОповещение", ЭтотОбъект);
		НачатьЗапускПриложения(ПустоеОповещение, АдресСтраницы);
	КонецЕсли;
	
КонецПроцедуры

// Оповещение-заглушка для тех случаев, когда в оповещении нет необходимости логически,
// но есть необходимость в его передаче в качестве параметра.
//
Процедура ПустоеОповещение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти