////////////////////////////////////////////////////////////////////////////////
// Ведомости на выплату зарплаты.
// Процедуры и функции объектов и менеджеров.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Используется в модулях менеджеров ведомостей в процедурах обновления ЗаполнитьПериодВзаиморасчетовЗарплаты(). 
Процедура ЗаполнитьПериодыВзаиморасчетовЗарплатыВедомости(ПолноеИмя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми периодами взаиморасчетов в зарплате
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Ссылка.Проведен КАК Проведен
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ПериодВзаиморасчетов = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Выполнить();
	
	// В проведенных документах переносим движения в табличную часть
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Регистратор КАК Ссылка,
	|	ЗарплатаКВыплате.Сотрудник КАК Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор В
	|			(ВЫБРАТЬ
	|				ОбновляемыеВедомости.Ссылка
	|			ИЗ
	|				ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|			ГДЕ
	|				ОбновляемыеВедомости.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗарплатаКВыплате.Регистратор,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗарплатаДоОбновления = Ведомость.Зарплата.Выгрузить();
		
		Ведомость.Зарплата.Очистить();
		Пока Выборка.Следующий() Цикл
			
			СтрокаЗарплаты = Ведомость.Зарплата.Добавить();
			
			// Перенос специфических для типа данных сотрудника
			СтрокаСотрудника = ЗарплатаДоОбновления.Найти(Выборка.Сотрудник, "Сотрудник");
			Если СтрокаСотрудника <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, СтрокаСотрудника);
			КонецЕсли;	
			
			// Заполняем общие для всех ведомостей данные
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// В непроведенных документах заполняем период взаиморасчетов из шапки документа
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбновляемыеВедомости.Ссылка КАК Ссылка
	|ИЗ
	|	ВТДанныеВедомостей КАК ОбновляемыеВедомости
	|ГДЕ
	|	НЕ ОбновляемыеВедомости.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			СтрокаЗарплаты.ПериодВзаиморасчетов = Ведомость.ПериодРегистрации;
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры	

// Используется в модулях менеджеров ведомостей в процедурах обновления ЗаполнитьФизическиеЛицаЗарплаты(). 
Процедура ЗаполнитьФизическиеЛицаЗарплатыВедомости(ПолноеИмя) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем ведомости с пустыми физическими лицами в зарплате
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	И НЕ ВедомостьЗарплата.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И НЕ ВедомостьЗарплата.Ссылка.Номер ЕСТЬ NULL";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеВедомостей КАК ВедомостьЗарплата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокиСотрудника = Ведомость.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", Выборка.Сотрудник));
			
			Для Каждого СтрокаСотрудника Из СтрокиСотрудника Цикл
				СтрокаСотрудника.ФизическоеЛицо = Выборка.ФизическоеЛицо
			КонецЦикла;
			
		КонецЦикла;
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры	

// Используется в модулях менеджеров ведомостей в процедурах обновления ЗаполнитьСостав(). 
Процедура ЗаполнитьСоставВедомости(ПолноеИмя, КлючевыеПоля) Экспорт
	
	ПараметрыОтбораПоКлючу = Новый Структура(КлючевыеПоля);
	
	// Выбираем ведомости, имеющие заполненную ТЧ Зарплата и пустую ТЧ Строки
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка
	|ИЗ
	|	#ВедомостьДокумент КАК Ведомость
	|ГДЕ
	|	1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1 КАК Поле1
	|			ИЗ
	|				#ВедомостьЗарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = Ведомость.Ссылка)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1 КАК Поле1
	|				ИЗ
	|					#ВедомостьСостав КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = Ведомость.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ведомость.Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ПолноеИмя); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ПолноеИмя + ".Зарплата"); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ПолноеИмя + ".Состав"); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		Ключи = Ведомость.Зарплата.Выгрузить(, КлючевыеПоля);
		Ключи.Свернуть(КлючевыеПоля);
		
		Для Каждого Ключ Из Ключи Цикл
			
			ИдентификаторСтроки = Новый УникальныйИдентификатор;
			
			СтрокаСостава = Ведомость.Состав.Добавить();
			СтрокаСостава.ИдентификаторСтроки = ИдентификаторСтроки;
			ЗаполнитьЗначенияСвойств(СтрокаСостава, Ключ);
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораПоКлючу, Ключ); 
			СтрокиЗарплата = Ведомость.Зарплата.НайтиСтроки(ПараметрыОтбораПоКлючу);
			
			Для Каждого СтрокаЗарплаты Из СтрокиЗарплата Цикл
				СтрокаЗарплаты.ИдентификаторСтроки = ИдентификаторСтроки;
			КонецЦикла
			
		КонецЦикла;
		
		Ведомость.СуммаПоДокументу = Ведомость.Зарплата.Итог("КВыплате");
		
		Ведомость.ОбменДанными.Загрузка = Истина;
		Ведомость.Записать();
		
	КонецЦикла	
	
КонецПроцедуры	

#КонецОбласти

#Область ОплатаВедомостей

// Регистрация оплаты ведомостей.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости (ОпределяемыйТип.ВедомостьЗарплатаКадры)  
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты. Если не указана, используется дата платежного документа.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплату(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица = Неопределено, ДатаОперации = Неопределено, Отказ = Ложь) Экспорт
	
	Если Ведомости.Количество() = 0 Тогда
		Возврат	
	КонецЕсли;
	
	// регистрация в бухгалтерских взаиморасчетах
	ЗарегистрироватьОплатуВВзаиморасчетах(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ);
	
	// регистрация удержания налога
	ЗарегистрироватьОплатуВУчетеНДФЛ(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ДобавитьКомандыПечатиПриВыплатеНаКарточки(КомандыПечати);
КонецПроцедуры

Процедура ПечатьПриВыплатеНаКарточки(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ПечатьПриВыплатеНаКарточки(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
КонецПроцедуры

Процедура ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ДобавитьКомандыПечатиПриВыплатеНаличными(КомандыПечати);
КонецПроцедуры

Процедура ПечатьПриВыплатеНаличными(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ПечатьПриВыплатеНаличными(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
КонецПроцедуры

Функция ВыборкаДляПечатиШапкиПриВыплатеБезналично(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка,
	|	Ведомость.Номер,
	|	Ведомость.Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	Ведомость.Руководитель,
	|	Ведомость.ДолжностьРуководителя.Наименование КАК РуководительДолжность,
	|	Ведомость.ГлавныйБухгалтер,
	|	Ведомость.Бухгалтер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость", ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТДанныеДокументов.Ссылка,
	|	ВТДанныеДокументов.Номер КАК Номер,
	|	ВТДанныеДокументов.НомерРеестра КАК НомерРеестра,
	|	ВТДанныеДокументов.Дата КАК Дата,
	|	ВТДанныеДокументов.ПериодРегистрации,
	|	ВТДанныеДокументов.Организация,
	|	ВТДанныеДокументов.НазваниеОрганизации,
	|	ВТДанныеДокументов.КодПоОКПО,
	|	ВТДанныеДокументов.Подразделение,
	|	ВТДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ВТФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ВТДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ВТФИОГлавБухПоследние.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ВТФИОБухгалтерПоследние.РасшифровкаПодписи, """") КАК Бухгалтер
	|ИЗ
	|	ВТДанныеДокументов КАК ВТДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОРуководителейПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОРуководителейПоследние.Ссылка
	|			И ВТДанныеДокументов.Руководитель = ВТФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОГлавБухПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОГлавБухПоследние.Ссылка
	|			И ВТДанныеДокументов.ГлавныйБухгалтер = ВТФИОГлавБухПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОБухгалтерПоследние
	|		ПО ВТДанныеДокументов.Ссылка = ВТФИОБухгалтерПоследние.Ссылка
	|			И ВТДанныеДокументов.Бухгалтер = ВТФИОБухгалтерПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТДанныеДокументов.Дата,
	|	ВТДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
	
Функция ВыборкаДляПечатиШапкиПриВыплатеНаличными(ИмяТипа, Ведомости) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПорядокЗаполнения = Новый Структура("ЗаполнятьРуководителя, ЗаполнятьГлавногоБухгалтера, ЗаполнятьКассира, ЗаполнятьБухгалтера");
	КадровыйУчетПереопределяемый.СоздатьВТОтветственныхЛиц(Запрос.МенеджерВременныхТаблиц,
															Ведомости,
															ПорядокЗаполнения);
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("ПустоеФизическоеЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДолжность",      Справочники.Должности.ПустаяСсылка());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ведомость.Ссылка КАК Ссылка,
	|	Ведомость.Номер КАК Номер,
	|	Ведомость.Дата КАК Дата,
	|	Ведомость.ПериодРегистрации КАК ПериодРегистрации,
	|	Ведомость.Организация КАК Организация,
	|	ВЫРАЗИТЬ(Ведомость.Организация.НаименованиеПолное КАК СТРОКА(300)) КАК НазваниеОрганизации,
	|	Ведомость.Организация.КодПоОКПО КАК КодПоОКПО,
	|	Ведомость.Подразделение КАК Подразделение,
	|	Ведомость.СуммаПоДокументу КАК СуммаПоДокументу,
	|	ВЫБОР
	|		КОГДА Ведомость.Руководитель ЕСТЬ NULL
	|				ИЛИ Ведомость.Руководитель = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Руководитель, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	Ведомость.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ВЫБОР
	|		КОГДА Ведомость.ДолжностьРуководителя ЕСТЬ NULL
	|				ИЛИ Ведомость.ДолжностьРуководителя = &ПустаяДолжность
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьРуководителя, &ПустаяДолжность)
	|		ИНАЧЕ Ведомость.ДолжностьРуководителя.Наименование
	|	КОНЕЦ КАК РуководительДолжность,
	|	ВЫБОР
	|		КОГДА Ведомость.ГлавныйБухгалтер ЕСТЬ NULL
	|				ИЛИ Ведомость.ГлавныйБухгалтер = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ГлавныйБухгалтер, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.ГлавныйБухгалтер
	|	КОНЕЦ КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Ведомость.Кассир ЕСТЬ NULL
	|				ИЛИ Ведомость.Кассир = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Кассир, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Кассир
	|	КОНЕЦ КАК Кассир,
	|	ВЫБОР
	|		КОГДА Ведомость.ДолжностьКассира ЕСТЬ NULL
	|				ИЛИ Ведомость.ДолжностьКассира = &ПустаяДолжность
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.ДолжностьКассира, &ПустаяДолжность)
	|		ИНАЧЕ Ведомость.ДолжностьКассира
	|	КОНЕЦ КАК КассирДолжность,
	|	ВЫБОР
	|		КОГДА Ведомость.Бухгалтер ЕСТЬ NULL
	|				ИЛИ Ведомость.Бухгалтер = &ПустоеФизическоеЛицо
	|			ТОГДА ЕСТЬNULL(ВТОтветственныеЛица.Бухгалтер, &ПустоеФизическоеЛицо)
	|		ИНАЧЕ Ведомость.Бухгалтер
	|	КОНЕЦ КАК Бухгалтер,
	|	Ведомость.Составил КАК Составил,
	|	Ведомость.ДолжностьСоставившего КАК ДолжностьСоставившего,
	|	Ведомость.Проверил КАК Проверил,
	|	Ведомость.ДолжностьПроверившего КАК ДолжностьПроверившего,
	|	Ведомость.Раздатчик КАК Раздатчик,
	|	Ведомость.ДолжностьРаздатчика КАК ДолжностьРаздатчика
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	#Ведомость КАК Ведомость
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ВТОтветственныеЛица
	|		ПО Ведомость.Ссылка = ВТОтветственныеЛица.Документ
	|ГДЕ
	|	Ведомость.Ссылка В(&Ведомости)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Ведомость", ИмяТипа);
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Кассир");
	ИменаПолейОтветственныхЛиц.Добавить("Бухгалтер");
	ИменаПолейОтветственныхЛиц.Добавить("Составил");
	ИменаПолейОтветственныхЛиц.Добавить("Проверил");
	ИменаПолейОтветственныхЛиц.Добавить("Раздатчик");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.Номер КАК Номер,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.ПериодРегистрации,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.НазваниеОрганизации,
	|	ДанныеДокументов.КодПоОКПО,
	|	ДанныеДокументов.Подразделение,
	|	ДанныеДокументов.СуммаПоДокументу,
	|	ЕСТЬNULL(ФИОРуководителя.РасшифровкаПодписи, """") КАК Руководитель,
	|	ДанныеДокументов.РуководительДолжность,
	|	ЕСТЬNULL(ФИОГлавногоБухгалтера.РасшифровкаПодписи, """") КАК ГлавныйБухгалтер,
	|	ЕСТЬNULL(ФИОКассира.РасшифровкаПодписи, """") КАК Кассир,
	|	ДанныеДокументов.КассирДолжность,
	|	ЕСТЬNULL(ФИОБухгалтера.РасшифровкаПодписи, """") КАК Бухгалтер,
	|	ФИОСоставил.РасшифровкаПодписи КАК СоставилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьСоставившего,
	|	ФИОПроверил.РасшифровкаПодписи КАК ПроверилРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьПроверившего,
	|	ФИОРаздатчик.РасшифровкаПодписи КАК РаздатчикРасшифровкаПодписи,
	|	ДанныеДокументов.ДолжностьРаздатчика
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителя
	|		ПО ДанныеДокументов.Ссылка = ФИОРуководителя.Ссылка
	|			И ДанныеДокументов.Руководитель = ФИОРуководителя.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОГлавногоБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОГлавногоБухгалтера.Ссылка
	|			И ДанныеДокументов.ГлавныйБухгалтер = ФИОГлавногоБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОКассира
	|		ПО ДанныеДокументов.Ссылка = ФИОКассира.Ссылка
	|			И ДанныеДокументов.Кассир = ФИОКассира.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОБухгалтера
	|		ПО ДанныеДокументов.Ссылка = ФИОБухгалтера.Ссылка
	|			И ДанныеДокументов.Бухгалтер = ФИОБухгалтера.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОСоставил
	|		ПО ДанныеДокументов.Ссылка = ФИОСоставил.Ссылка
	|			И ДанныеДокументов.Составил = ФИОСоставил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОПроверил
	|		ПО ДанныеДокументов.Ссылка = ФИОПроверил.Ссылка
	|			И ДанныеДокументов.Проверил = ФИОПроверил.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРаздатчик
	|		ПО ДанныеДокументов.Ссылка = ФИОРаздатчик.Ссылка
	|			И ДанныеДокументов.Раздатчик = ФИОРаздатчик.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата,
	|	ДанныеДокументов.Номер";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаДляПечатиТаблицы(ИмяТипа, Ведомости) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(Запрос.МенеджерВременныхТаблиц, Истина, ИмяТипа, Ведомости);

	Запрос.УстановитьПараметр("Ведомости", Ведомости);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ВедомостьДата КАК Период
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТСотрудники");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ТабельныйНомер, Фамилия, Имя, Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.Ведомость КАК Ведомость,
	|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	Выплаты.Сумма КАК Сумма
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО Выплаты.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|			И Выплаты.ВедомостьДата = КадровыеДанныеСотрудников.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Выплаты.Ведомость,
	|	Выплаты.НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

#КонецОбласти

#Область ОграничениеИспользованияДокументов

Функция ПредставлениеПометкиОграниченияПриВыплатеНаКарточки() Экспорт
	Возврат НСтр("ru = 'Передан для выплаты'");
КонецФункции

Функция ОперацияОграниченияДокументаПриВыплатеНаКарточки() Экспорт
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныйОбменСБанкамиПоЗарплатнымПроектам") Тогда
		Возврат "Выгрузка";     // не локализуется
	Иначе
		Возврат "Отсутствует";  // не локализуется
	КонецЕсли;
КонецФункции

Функция ПредставлениеПометкиОграниченияПриВыплатеНаличными() Экспорт
	Возврат НСтр("ru = 'Передан для выплаты'");
КонецФункции

Функция ОперацияОграниченияДокументаПриВыплатеНаличными() Экспорт
	Возврат "Отсутствует";  // не локализуется;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РеквизитыОтветственныхЛиц() Экспорт
	
	Возврат ВедомостьНаВыплатуЗарплатыБазовый.РеквизитыОтветственныхЛиц();
	
КонецФункции	

#Область ДоступКВедомостям

Функция ТекстЗапросаДанныеДляОплаты(ИмяТипа, ИмяПараметраВедомости = "Ведомости", ИмяПараметраФизическиеЛица = "ФизическиеЛица") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СУММА(ВедомостьЗарплата.КВыплате) КАК КВыплате,
	|	0 КАК КомпенсацияЗаЗадержкуЗарплаты
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьЗарплата.Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВедомостьЗарплата",	ИмяТипа + ".Зарплата");
	
	Схема = Новый СхемаЗапроса();
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Если ЗначениеЗаполнено(ИмяПараметраВедомости) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьЗарплата.Ссылка В(&%1)", ИмяПараметраВедомости));
	КонецЕсли;	
	Если ЗначениеЗаполнено(ИмяПараметраФизическиеЛица) Тогда
		Схема.ПакетЗапросов[0].Операторы[0].Отбор.Добавить(СтрШаблон("ВедомостьЗарплата.ФизическоеЛицо В (&%1)", ИмяПараметраФизическиеЛица));
	КонецЕсли;	
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ДанныеДляПечати(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТВыплатыВедомостей(
		Запрос.МенеджерВременныхТаблиц, Истина, 
		Ведомость.Метаданные().ПолноеИмя(), 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ведомость));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Выплаты.НомерСтроки) КАК НомерСтроки,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	СУММА(Выплаты.Сумма) КАК КВыплате
	|ИЗ
	|	ВТВыплатыВедомостей КАК Выплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	Выплаты.Сотрудник";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьВТВыплатыВедомостей(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТипа, Ведомости)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("Выплаты", Перечисления.ВидыВзаиморасчетовССотрудниками.Выплаты());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Регистратор КАК Ведомость,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК Сумма
	|ПОМЕСТИТЬ ВТВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор В(&Ведомости)
	|	И ВзаиморасчетыССотрудниками.ВидВзаиморасчетов В(&Выплаты)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыССотрудниками.Регистратор,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.Ведомость КАК Ведомость,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ВедомостьСостав.НомерСтроки * 10000 + ВедомостьЗарплата.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНомераСтрок
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьСостав КАК ВедомостьСостав
	|		ПО Взаиморасчеты.Ведомость = ВедомостьСостав.Ссылка
	|			И (ВедомостьСостав.ФизическоеЛицо = Взаиморасчеты.ФизическоеЛицо)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьЗарплата КАК ВедомостьЗарплата
	|		ПО (ВедомостьСостав.Ссылка = ВедомостьЗарплата.Ссылка)
	|			И (ВедомостьСостав.ИдентификаторСтроки = ВедомостьЗарплата.ИдентификаторСтроки)
	|			И Взаиморасчеты.Сотрудник = ВедомостьЗарплата.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.Ведомость,
	|	Взаиморасчеты.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВедомостьДокумент.Ссылка КАК Ведомость,
	|	ВедомостьДокумент.Дата КАК ВедомостьДата,
	|	НомераСтрок.НомерСтроки КАК НомерСтроки,
	|	Взаиморасчеты.Сотрудник КАК Сотрудник,
	|	СУММА(Взаиморасчеты.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТВыплатыВедомостей
	|ИЗ
	|	ВТВзаиморасчеты КАК Взаиморасчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВедомостьДокумент КАК ВедомостьДокумент
	|		ПО Взаиморасчеты.Ведомость = ВедомостьДокумент.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрок КАК НомераСтрок
	|		ПО Взаиморасчеты.Ведомость = НомераСтрок.Ведомость
	|			И Взаиморасчеты.Сотрудник = НомераСтрок.Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьДокумент.Ссылка,
	|	ВедомостьДокумент.Дата,
	|	НомераСтрок.НомерСтроки,
	|	Взаиморасчеты.Сотрудник";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьДокумент",	ИмяТипа);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата",	ИмяТипа + ".Зарплата");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьСостав",	ИмяТипа + ".Состав");
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты)
КонецПроцедуры

Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	ВедомостьНаВыплатуЗарплатыБазовый.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Ведомость, Отказ) Экспорт
	
	Если Ведомость.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Ведомость);
	
	ЗарегистрироватьВыплатуВоВзаиморасчетах(Ведомость, Отказ);
	ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ);
	
	Для Каждого НаборЗаписей Из Ведомость.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область МестаВыплаты

Функция МестоВыплаты() Экспорт
	
	ВедомостьМестоВыплаты = Новый Структура;
	ВедомостьМестоВыплаты.Вставить("Вид",      Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка());
	ВедомостьМестоВыплаты.Вставить("Значение", Неопределено);
	
	Возврат ВедомостьМестоВыплаты
	
КонецФункции	

Функция МестоВыплатыКасса(Ведомость) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.МестоВыплатыКасса(Ведомость);
КонецФункции

Процедура УстановитьМестоВыплатыКасса(Ведомость, Значение) Экспорт
	ВедомостьНаВыплатуЗарплатыВнутренний.УстановитьМестоВыплатыКасса(Ведомость, Значение)
КонецПроцедуры

#КонецОбласти

#Область ДанныеДляЗаполнения

Функция ПараметрыЗаполнения() Экспорт
	ПараметрыЗаполнения = Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ОписаниеОперации", ОписаниеОперацииВыплаты());
	
	ПараметрыЗаполнения.Вставить("ОтборСотрудников", ОтборСотрудниковДляВыплаты());
	
	ПараметрыЗаполнения.Вставить("ПараметрыРасчетаЗарплаты", ПараметрыРасчетаЗарплаты());
	ПараметрыЗаполнения.Вставить("ПараметрыРасчетаНДФЛ",     ПараметрыРасчетаНДФЛ());
	
	ПараметрыЗаполнения.Вставить("Финансирование", ФинансированиеВыплаты());
	
	Возврат ПараметрыЗаполнения
КонецФункции

Функция ПараметрыЗаполненияПоОбъекту(Объект) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.ПараметрыЗаполненияПоОбъекту(Объект)
КонецФункции

Функция ОписаниеОперацииВыплаты() Экспорт
	ОписаниеОперации = Новый Структура;
	
	ОписаниеОперации.Вставить("Организация",        Справочники.Организации.ПустаяСсылка());
	ОписаниеОперации.Вставить("ПериодРегистрации",  Дата(1,1,1));
	ОписаниеОперации.Вставить("Дата",               Дата(1,1,1));
	ОписаниеОперации.Вставить("ПорядокВыплаты",     Перечисления.ХарактерВыплатыЗарплаты.ПустаяСсылка());
	ОписаниеОперации.Вставить("СпособПолучения",    Перечисления.СпособыПолученияЗарплатыКВыплате.ПустаяСсылка());
	ОписаниеОперации.Вставить("ДокументыОснования", Новый Массив);
	
	Возврат ОписаниеОперации
КонецФункции	

Функция ОтборСотрудниковДляВыплаты() Экспорт
	Параметры = Новый Структура;
	
	Параметры.Вставить("ВидыДоговоров",  Неопределено);
	Параметры.Вставить("Подразделение",  Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	Параметры.Вставить("МестоВыплаты",   МестоВыплаты());
	
	Возврат Параметры
КонецФункции

Функция ПараметрыРасчетаЗарплаты() Экспорт
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("Округление",          Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию());
	ПараметрыРасчета.Вставить("ПроцентВыплаты",      100);
	ПараметрыРасчета.Вставить("ТолькоПоложительные", Истина);
	
	ПараметрыРасчета.Вставить("КолонкиГруппировок",  "ФизическоеЛицо");
	
	Возврат ПараметрыРасчета
КонецФункции	

Функция ПараметрыРасчетаНДФЛ() Экспорт
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("ПланируемаяДатаВыплаты", Дата(1,1,1));
	ПараметрыРасчета.Вставить("ОкончательныйРасчет",    Истина);
	
	Возврат ПараметрыРасчета
КонецФункции	

Функция ФинансированиеВыплаты() Экспорт
	Финансирование = Новый Структура;
	
	Финансирование.Вставить("СтатьяФинансирования", Справочники.СтатьиФинансированияЗарплата.ПустаяСсылка());
	Финансирование.Вставить("СтатьяРасходов",       Справочники.СтатьиРасходовЗарплата.ПустаяСсылка());
	
	Возврат Финансирование
КонецФункции

Функция ЗарплатаКВыплате(
		ОписаниеОперации,
		ОтборСотрудников,
		ПараметрыРасчета,
		Финансирование = Неопределено,
		Регистратор = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников в соответствии с реквизитами шапки ведомости.
	СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников);
	
	// Получаем зарплату к выплате для отобранных сотрудников.
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ОписаниеОперации, Финансирование, Регистратор);

	// Формируем отсортированную зарплату сотрудников к выплате.
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиДляВедомости");
	КадровыеДанные = "";
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(КадровыеДанные);
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, КадровыеДанные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.Подразделение КАК Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.КВыплате КАК КВыплате
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО (ЗарплатаКВыплате.Сотрудник = Сотрудники.Сотрудник)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	Сотрудник,
	|	ПериодВзаиморасчетов,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Подразделение,
	|	ДокументОснование";
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "Сотрудники");
	Зарплата = Запрос.Выполнить().Выгрузить();
	Зарплата.Свернуть(
		"ФизическоеЛицо,
		|Сотрудник,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|Подразделение,
		|ДокументОснование",
		"КВыплате"); 
	
	РассчитатьЗарплату(Зарплата, ПараметрыРасчета);
	
	Возврат Зарплата;
	
КонецФункции

Функция ЗарплатаКВыплатеФизическихЛиц(
		ФизическиеЛица,
		ОписаниеОперации,
		ОтборСотрудников,
		ПараметрыРасчетаЗарплаты,
		Финансирование,
		Регистратор) Экспорт

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбираем сотрудников по переданным физическим лицам.
	СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, ФизическиеЛица, ОписаниеОперации, ОтборСотрудников);
	
	// Получаем зарплату к выплате для отобранных сотрудников.
	СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ОписаниеОперации, Финансирование, Регистратор);
	
	// Для сотрудников, которым нет зарплаты к выплате, 
	// создаем нулевую выплату со свойствами из кадровой информации.
	// Упорядочиваем сотрудников в том порядке, в котором идут заказанные физлица.
	
	ПорядокФизлиц = Новый ТаблицаЗначений;
	ПорядокФизлиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ПорядокФизлиц.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(3));
	Для Порядок = 0 По ФизическиеЛица.ВГраница() Цикл
		Строка = ПорядокФизлиц.Добавить();
		Строка.ФизическоеЛицо = ФизическиеЛица[Порядок];
		Строка.Порядок = Порядок;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации", ОписаниеОперации.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПорядокФизлиц",     ПорядокФизлиц);
	Запрос.УстановитьПараметр("ПустойДокумент",    Метаданные.ОпределяемыеТипы.ДокументОснованиеЗарплатыКВыплате.Тип.ПривестиЗначение());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПорядокФизлиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ПорядокФизлиц.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТПорядокФизлиц
	|ИЗ
	|	&ПорядокФизлиц КАК ПорядокФизлиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(ЗарплатаКВыплате.Подразделение, Сотрудники.Подразделение) КАК Подразделение,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ПериодВзаиморасчетов, &ПериодРегистрации) КАК ПериодВзаиморасчетов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СтатьяФинансирования, ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка)) КАК СтатьяФинансирования,
	|	ЕСТЬNULL(ЗарплатаКВыплате.СтатьяРасходов, ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка)) КАК СтатьяРасходов,
	|	ЕСТЬNULL(ЗарплатаКВыплате.ДокументОснование, &ПустойДокумент) КАК ДокументОснование,
	|	ЕСТЬNULL(ЗарплатаКВыплате.КВыплате, 0) КАК КВыплате
	|ИЗ
	|	ВТСотрудникиДляВедомости КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ПО Сотрудники.Сотрудник = ЗарплатаКВыплате.Сотрудник
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПорядокФизлиц КАК ПорядокФизлиц
	|		ПО Сотрудники.ФизическоеЛицо = ПорядокФизлиц.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокФизлиц.Порядок,
	|	Сотрудник,
	|	ПериодВзаиморасчетов,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	Подразделение,
	|	ДокументОснование";
	Зарплата = Запрос.Выполнить().Выгрузить();
	Зарплата.Свернуть(
		"ФизическоеЛицо,
		|Сотрудник,
		|ПериодВзаиморасчетов,
		|СтатьяФинансирования,
		|СтатьяРасходов,
		|Подразделение,
		|ДокументОснование",
		"КВыплате"); 
	
	РассчитатьЗарплату(Зарплата, ПараметрыРасчетаЗарплаты);
	
	Возврат Зарплата;
		
КонецФункции

Функция НалогиКУдержанию(ЗарплатаКВыплате, ОписаниеОперации, ПараметрыРасчета, Финансирование = Неопределено, Регистратор = Неопределено) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.НалогиКУдержанию(ЗарплатаКВыплате, ОписаниеОперации, ПараметрыРасчета, Финансирование, Регистратор)
КонецФункции

Процедура СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников)
	ВедомостьНаВыплатуЗарплатыВнутренний.СоздатьВТСотрудникиДляВедомостиПоШапке(МенеджерВременныхТаблиц, ОписаниеОперации, ОтборСотрудников)
КонецПроцедуры	

Процедура СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, ФизическиеЛица, ОписаниеОперации, ОтборСотрудников) 
	ВедомостьНаВыплатуЗарплатыВнутренний.СоздатьВТСотрудникиДляВедомостиПоФизическимЛицам(МенеджерВременныхТаблиц, ФизическиеЛица, ОписаниеОперации, ОтборСотрудников)
КонецПроцедуры	

Процедура СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, ОписаниеОперации, Финансирование = Неопределено, Регистратор = Неопределено)
	
	// Преобразуем параметры заполнения ведомости в параметры получения зарплаты для взаиморасчетов
	ПараметрыПолученияЗарплатыКВыплате = ВзаиморасчетыССотрудниками.ПараметрыПолученияЗарплатыКВыплате();
	ПараметрыПолученияЗарплатыКВыплате.ПорядокВыплаты       = ОписаниеОперации.ПорядокВыплаты;
	ПараметрыПолученияЗарплатыКВыплате.СпособПолучения      = ОписаниеОперации.СпособПолучения;
	ПараметрыПолученияЗарплатыКВыплате.Организация          = ОписаниеОперации.Организация;
	ПараметрыПолученияЗарплатыКВыплате.ПериодРегистрации    = ОписаниеОперации.ПериодРегистрации;
	ПараметрыПолученияЗарплатыКВыплате.Дата                 = ОписаниеОперации.Дата;
	ПараметрыПолученияЗарплатыКВыплате.ДокументыОснования   = ОписаниеОперации.ДокументыОснования;
	Если Финансирование <> Неопределено Тогда
		ПараметрыПолученияЗарплатыКВыплате.СтатьяФинансирования = Финансирование.СтатьяФинансирования;
		ПараметрыПолученияЗарплатыКВыплате.СтатьяРасходов       = Финансирование.СтатьяРасходов;
	КонецЕсли;	
	Если Регистратор <> Неопределено Тогда
		ПараметрыПолученияЗарплатыКВыплате.ИгнорируемыеРегистраторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор);
	КонецЕсли;	
	
	// Получаем зарплату к выплате для отобранных сотрудников в соответствии с характером выплаты.
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате, "ВТСотрудникиДляВедомости");

	// Ограничиваем зарплату к выплате общей задолженностью перед работником
	ВзаиморасчетыССотрудниками.СоздатьВТЗарплатаКВыплатеОграниченнаяСальдоФизлиц(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияЗарплатыКВыплате);
	
КонецПроцедуры

Процедура РассчитатьЗарплату(Зарплата, ПараметрыРасчета)
	
	// Получаем способ округления
	СпособОкругления = ПараметрыРасчета.Округление.ПолучитьОбъект();
	Если СпособОкругления = Неопределено Тогда
		СпособОкругления = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию().ПолучитьОбъект();
	КонецЕсли;	
	
	КолонкиГруппировок = ПараметрыРасчета.КолонкиГруппировок;
	
	// структура для отбора строк зарплаты, попадающих в группу
	ПараметрыОтбораГруппы = Новый Структура(КолонкиГруппировок);
	
	// Переданная зарплата индексируется по колонкам группировки
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
        ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Зарплата, Свойство.Ключ);
    КонецЦикла;
	
	// выделяем группы таблицы зарплат
	Группы = Зарплата.Скопировать(, СтрШаблон("%1, КВыплате", КолонкиГруппировок));
	Группы.Свернуть(КолонкиГруппировок, "КВыплате");
	
	// Рассчитываем суммы групп с учетом процента выплаты и округления.
	// При необходимости запоминаем строки групп с нулевой или отрицательной суммой для последующего удаления.
	// Вычисленную сумму группы разносим по строкам группы.
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		ЗарплатаГруппы = Зарплата.НайтиСтроки(ПараметрыОтбораГруппы);
		
		СуммаГруппы = Группа.КВыплате * ПараметрыРасчета.ПроцентВыплаты/100;
		СуммаГруппы = СпособОкругления.Округлить(СуммаГруппы);
		
		Если ПараметрыРасчета.ТолькоПоложительные И СуммаГруппы <= 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УдаляемыеСтроки, ЗарплатаГруппы);
			Продолжить;
		КонецЕсли;
		
		// обеспечение обратной совместимости при "долевой" выплате.
		Если ПараметрыРасчета.ПроцентВыплаты <> 100 Тогда
			Для Каждого СтрокаЗарплаты Из ЗарплатаГруппы Цикл
				СтрокаЗарплаты.КВыплате = СтрокаЗарплаты.КВыплате * ПараметрыРасчета.ПроцентВыплаты/100
			КонецЦикла;	
		КонецЕсли;
		
		ЗарплатаКадры.РазнестиСуммуПоБазе(СуммаГруппы, ЗарплатаГруппы, "КВыплате");
		
	КонецЦикла;
	
	Для Каждого Строка Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокумента

Функция МожноЗаполнитьЗарплату(Ведомость) Экспорт
	Возврат ВедомостьНаВыплатуЗарплатыВнутренний.МожноЗаполнитьЗарплату(Ведомость);
КонецФункции

Процедура ОчиститьВыплаты(Ведомость) Экспорт
	Ведомость.Состав.Очистить();
	Ведомость.Зарплата.Очистить();
	Ведомость.НДФЛ.Очистить();
КонецПроцедуры

Процедура ЗагрузитьВыплаты(Ведомость, Зарплата, НДФЛ, КлючевыеПоляСостава = "ФизическоеЛицо") Экспорт
	
	ОчиститьВыплаты(Ведомость);
	
	// Структура для отбора строк зарплаты, попадающих в одну строку состава
	ПараметрыОтбораГруппы = Новый Структура(КлючевыеПоляСостава);
	
	// Переданная зарплата индексируется по полям отбора
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Зарплата, Свойство.Ключ)
	КонецЦикла;
	
	// Группы зарплаты для строк состава 
	Группы = Зарплата.Скопировать(, КлючевыеПоляСостава);
	Группы.Свернуть(КлючевыеПоляСостава);
	
	// Для каждой группы строк зарплаты создаем строку состава.
	// Зарплату группы связываем с этой строкой состава.
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого Группа Из Группы Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, Группа); 
		
		СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораГруппы);

		ЗарплатаГруппы = Зарплата.НайтиСтроки(ПараметрыОтбораГруппы);
		Для Каждого СтрокаЗарплаты Из ЗарплатаГруппы Цикл
			СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
			СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаТЧСостав.ИдентификаторСтроки;
		КонецЦикла;
		
		Если ИдентификаторыСтрокФизлиц.Получить(Группа.ФизическоеЛицо) = Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(Группа.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки); 
		КонецЕсли;	
	КонецЦикла;
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры

Процедура ДобавитьВыплаты(Ведомость, Зарплата, НДФЛ, КлючевыеПоляСостава = "ФизическоеЛицо") Экспорт
	
	// Получаем ключи имеющихся строк состава и их идентификаторы.
	Состав = Ведомость.Состав.Выгрузить(, СтрШаблон("%1, ИдентификаторСтроки", КлючевыеПоляСостава));
	
	// Структура для отбора строк зарплаты, попадающих в одну строку состава
	ПараметрыОтбораГруппы = Новый Структура(КлючевыеПоляСостава);
	
	// Имеющийся состав индексируется по полям отбора
    Для Каждого Свойство Из ПараметрыОтбораГруппы Цикл
		ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(Состав, Свойство.Ключ)
	КонецЦикла;

	// Для каждой строки зарплаты ищем подходящую строку состава,
	// при отсутствии - создаем новую.
	// Строку зарплаты связываем с этой строкой состава.
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораГруппы, СтрокаЗарплаты); 
		
		НайденныеСтроки = Состав.НайтиСтроки(ПараметрыОтбораГруппы);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧСостав = НайденныеСтроки[0]
		Иначе
			СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораГруппы);
			ЗаполнитьЗначенияСвойств(Состав.Добавить(), СтрокаТЧСостав); 
		КонецЕсли;	

		СтрокаТЧЗарплата = Ведомость.Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧЗарплата, СтрокаЗарплаты);
		СтрокаТЧЗарплата.ИдентификаторСтроки = СтрокаТЧСостав.ИдентификаторСтроки;
		
		Если ИдентификаторыСтрокФизлиц.Получить(СтрокаЗарплаты.ФизическоеЛицо) = Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(СтрокаЗарплаты.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки); 
		КонецЕсли;	
	КонецЦикла;
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры

Процедура УстановитьНДФЛ(Ведомость, НДФЛ, Знач ФизическиеЛица = Неопределено) Экспорт
	
	Если ФизическиеЛица = Неопределено Тогда
		ФизическиеЛица = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	КонецЕсли;
	
	// Очищаем старые налоги указанных физлиц
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаНДФЛ Из Ведомость.НДФЛ Цикл
		Если ФизическиеЛица.Найти(СтрокаНДФЛ.ФизическоеЛицо) <> Неопределено Тогда
			УдаляемыеСтроки.Добавить(СтрокаНДФЛ);
		КонецЕсли;
	КонецЦикла;	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Ведомость.НДФЛ.Удалить(УдаляемаяСтрока)
	КонецЦикла;
	
	// Запоминаем идентификаторы строк для обрабатываемых физлиц
	ИдентификаторыСтрокФизлиц = Новый Соответствие;
	Для Каждого СтрокаТЧСостав Из Ведомость.Состав Цикл
		Если ФизическиеЛица.Найти(СтрокаТЧСостав.ФизическоеЛицо) <> Неопределено Тогда
			ИдентификаторыСтрокФизлиц.Вставить(СтрокаТЧСостав.ФизическоеЛицо, СтрокаТЧСостав.ИдентификаторСтроки)
		КонецЕсли;
	КонецЦикла;	
	
	ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц);
	
КонецПроцедуры	

Процедура ДобавитьНДФЛ(Ведомость, НДФЛ, ИдентификаторыСтрокФизлиц)
	
	// Получаем список различных физических лиц в налогах.
	Физлица = ОбщегоНазначения.ВыгрузитьКолонку(НДФЛ, "ФизическоеЛицо", Истина);
	
	ПараметрыОтбораНДФЛ = Новый Структура("ФизическоеЛицо");
	ОбщегоНазначенияБЗК.ДобавитьИндексКоллекции(НДФЛ, "ФизическоеЛицо");
	
	// Помещаем НДФЛ в ТЧ, связывая с первой строкой состава этого физлица.
	// Если строки состава для физлица нет - создаем.
	Для Каждого Физлицо Из Физлица Цикл
		
		ПараметрыОтбораНДФЛ.ФизическоеЛицо = Физлицо; 
		
		Если ИдентификаторыСтрокФизлиц.Получить(Физлицо) = Неопределено Тогда
			СтрокаТЧСостав = НоваяСтрокаСостава(Ведомость, ПараметрыОтбораНДФЛ);
			ИдентификаторыСтрокФизлиц.Вставить(Физлицо, СтрокаТЧСостав.ИдентификаторСтроки)
		КонецЕсли;
		
		НФДЛФизлица = НДФЛ.НайтиСтроки(ПараметрыОтбораНДФЛ);

		Для Каждого СтрокаНДФЛ Из НФДЛФизлица Цикл
			СтрокаТЧНДФЛ = Ведомость.НДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧНДФЛ, СтрокаНДФЛ);
			СтрокаТЧНДФЛ.ИдентификаторСтроки = ИдентификаторыСтрокФизлиц[Физлицо];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НоваяСтрокаСостава(Ведомость, ЗначенияКлючевыхПолей)
	СтрокаТЧСостав = Ведомость.Состав.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТЧСостав, ЗначенияКлючевыхПолей);
	СтрокаТЧСостав.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	Возврат СтрокаТЧСостав
КонецФункции

#КонецОбласти

#Область ПроведениеВедомостей

Процедура ЗарегистрироватьВыплатуВоВзаиморасчетах(Ведомость, Отказ)
	
	ОписаниеКолонокЗарплаты = ВзаиморасчетыССотрудниками.НовоеОписаниеСоответствияКолонокДляТаблицыВыплаченнойЗарплаты();
	ОписаниеКолонокЗарплаты.Сумма = "КВыплате";
	
	Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыплаченнойЗарплатыПоТабличнойЧасти(
		Ведомость.Зарплата,
		ОписаниеКолонокЗарплаты);
	
	ПорядокВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ведомость.СпособВыплаты, "ХарактерВыплаты");
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплаченнуюЗарплату(
		Ведомость.Движения, 
		Отказ, 
		Ведомость.Организация, 
		Ведомость.ПериодРегистрации, 
		Зарплата,
		ПорядокВыплаты)
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ)
	ВедомостьНаВыплатуЗарплатыВнутренний.ЗарегистрироватьВыплатуВУчетеНДФЛ(Ведомость, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОплатаВедомостей

// Процедура регистрирует оплату ведомостей в бухгалтерских взаиморасчетах
//
// Параметры:
//  ПлатежныйДокумент	 - ДокументОбъект - платежный документ, регистрирующий оплату ведомостей.
//  Организация			 - СправочникСсылка.Организации - организация.
//  Ведомости			 - Массив - ведомости, оплату которых требуется зарегистрировать 
//  ФизическиеЛица		 - Массив - физические лица, для которых требуется зарегистрировать оплату. Если не указан - для всех физических лиц.
//  ДатаОперации		 - Дата - дата платежа.
//  Отказ				 - Булево - признак отказа в проведении.
//
Процедура ЗарегистрироватьОплатуВВзаиморасчетах(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ) Экспорт
	
	СпособыВыплатыВедомостей = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(Ведомости, "СпособВыплаты");
	СпособыВыплаты = ОбщегоНазначения.ВыгрузитьКолонку(СпособыВыплатыВедомостей, "Значение", Истина);
	ПорядокВыплатыСпособовВыплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СпособыВыплаты, "ХарактерВыплаты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ведомости",	 Ведомости);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Регистратор КАК Ведомость,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник КАК Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение КАК Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Организация = &Организация
	|	И ВзаиморасчетыССотрудниками.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыССотрудниками.Регистратор,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение,
	|	ВзаиморасчетыССотрудниками.СтатьяФинансирования,
	|	ВзаиморасчетыССотрудниками.СтатьяРасходов";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ведомость") Цикл
		Зарплата = ВзаиморасчетыССотрудниками.НоваяТаблицаВыданнойЗарплаты();
		Пока Выборка.Следующий() Цикл
			СтрокаЗарплаты = Зарплата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗарплаты, Выборка);
		КонецЦикла;	
		ВзаиморасчетыССотрудниками.ЗарегистрироватьВыданнуюЗарплату(
			ПлатежныйДокумент.Движения, 
			Отказ, 
			Организация, 
			ДатаОперации, 
			Зарплата, 
			ПорядокВыплатыСпособовВыплаты[СпособыВыплатыВедомостей[Выборка.Ведомость]])
	КонецЦикла;	

КонецПроцедуры

// Регистрация удержания НДФЛ при оплате ведомостей.
//
// Параметры:
//		ПлатежныйДокумент - ДокументОбъект - платежный документ.
//		Организация       - СправочникСсылка.Организации - организация, выплачивающая зарплату.
//		Ведомости         - Массив - оплачиваемые ведомости на выплату зарплаты
//                          (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу,
//                          ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк и т.д.)
//		ФизическиеЛица    - Массив - физические лица (СправочникСсылка.ФизическиеЛица), получившие выплаты по ведомостям 
//		ДатаОперации      - Дата   - дата фактического выполнения оплаты.
//		Отказ             - Булево - признак отказа от выполнения операции.
//
Процедура ЗарегистрироватьОплатуВУчетеНДФЛ(ПлатежныйДокумент, Организация, Ведомости, ФизическиеЛица, ДатаОперации, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ведомости",		Ведомости);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗарплатаКВыплате.Период) КАК ПериодРегистрации
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица";
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	ВыборкаМаксимальногоПериода = Запрос.Выполнить().Выбрать();
	Если Не ВыборкаМаксимальногоПериода.Следующий() Тогда
		Отказ = Истина;
		Возврат
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарегистрироватьОплатуВУчетеНДФЛСоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица);

	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, "ВТЗарплатаКВыплате");
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Организация, ВыборкаМаксимальногоПериода.ПериодРегистрации, 
		Ведомости, 
		"ВТСписокСотрудников");
	
	ЗарегистрироватьОплатуВУчетеНДФЛСоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица, ДатаОперации);
	
	ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(ПлатежныйДокумент, Отказ, Организация, ДатаОперации, ДатаОперации, МенеджерВременныхТаблиц);
	
	УчетНДФЛ.СторнироватьНДФЛКПеречислениюПоВедомостям(ПлатежныйДокумент.Движения, Отказ, Ведомости, ФизическиеЛица);
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуВУчетеНДФЛСоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица, ДатаОперации)
	
	ЗапросНДФЛ = Новый Запрос;
	ЗапросНДФЛ.УстановитьПараметр("Организация", Организация);
	ЗапросНДФЛ.УстановитьПараметр("Ведомости",   Ведомости);
	
	ШаблонЗапросаНФДЛВедомости = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	#ВедомостьНаВыплатуЗарплатыНДФЛ КАК ВедомостьНаВыплатуЗарплатыНДФЛ
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыНДФЛ.Ссылка.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыНДФЛ.Ссылка В(&Ведомости)
	|	И &ФизическиеЛица";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		ШаблонЗапросаНФДЛВедомости = СтрЗаменить(ШаблонЗапросаНФДЛВедомости, "&ФизическиеЛица", "ВедомостьНаВыплатуЗарплатыНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)");
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		ЗапросНДФЛ.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	
	ТипыВедомостей = Новый Соответствие;
	Для Каждого Ведомость Из Ведомости Цикл
		ТипыВедомостей.Вставить(Ведомость.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	ЗапросыНФДЛВедомостей = Новый Массив;
	Для Каждого ТипВедомости Из ТипыВедомостей Цикл
		ЗапросыНФДЛВедомостей.Добавить(СтрЗаменить(ШаблонЗапросаНФДЛВедомости, "#ВедомостьНаВыплатуЗарплатыНДФЛ", ТипВедомости.Ключ + ".НДФЛ"));
	КонецЦикла;
	
	ЗапросНДФЛ.Текст = 
		СтрСоединить(
			ЗапросыНФДЛВедомостей,
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|");

	
	УчетФактическиПолученныхДоходов.СоздатьВТНалогУдержанный(МенеджерВременныхТаблиц, ЗапросНДФЛ, ДатаОперации); 
	
КонецПроцедуры

Процедура ЗарегистрироватьОплатуВУчетеНДФЛСоздатьВТЗарплатаКВыплате(МенеджерВременныхТаблиц, Организация, Ведомости, ФизическиеЛица)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("Ведомости",		Ведомости);
	
	// Данные ведомостей 	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование КАК ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования КАК СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТЗарплатаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Организация = &Организация
	|	И ЗарплатаКВыплате.Регистратор В(&Ведомости)
	|	И &ФизическиеЛица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.ДокументОснование,
	|	ЗарплатаКВыплате.СтатьяФинансирования,
	|	ЗарплатаКВыплате.СтатьяРасходов";
	
	Если ЗначениеЗаполнено(ФизическиеЛица) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФизическиеЛица", "ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)");
		Запрос.УстановитьПараметр("ФизическиеЛица",	ФизическиеЛица);
	Иначе
		Запрос.УстановитьПараметр("ФизическиеЛица",	Истина);
	КонецЕсли;	
	
	Запрос.Выполнить();
	
КонецПроцедуры
	
Процедура ЗарегистрироватьУдержанныйНалогПоВременнымТаблицам(Регистратор, Отказ, Организация, ДатаОперации, ДатаВыплаты, МенеджерВременныхТаблиц) Экспорт
	
	// Получение базы для распределения НДФЛ к перечислению из временной таблицы ВТНалогУдержанный,
	// всегда выполняется до вызова методов подсистемы НДФЛ.
	ДанныеДляДополнения = ОтражениеЗарплатыВУчете.ДанныеДляДополненияНДФЛУдержанногоСтатьями(МенеджерВременныхТаблиц);
	
	УчетФактическиПолученныхДоходов.ЗарегистрироватьНовуюДатуПолученияДохода(Регистратор.Ссылка, Регистратор.Движения, МенеджерВременныхТаблиц, ДатаВыплаты, ДатаОперации, Отказ, Истина);
	УчетНДФЛ.ВписатьСуммыВыплаченногоДоходаВУдержанныеНалоги(МенеджерВременныхТаблиц, Регистратор.Ссылка, ДатаВыплаты);	
	УчетНДФЛ.СформироватьУдержанныйНалогПоВременнойТаблице(Регистратор.Движения, Отказ, Организация, ДатаВыплаты, МенеджерВременныхТаблиц, , Истина);
	УчетНДФЛ.СформироватьНДФЛКПеречислению(Регистратор.Движения, Отказ);
	ОтражениеЗарплатыВУчете.ДополнитьНДФЛКПеречислениюСведениямиОРаспределенииПоСтатьям(Регистратор.Движения, ДанныеДляДополнения);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетыСБюджетомПоНДФЛ") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("РасчетыСБюджетомПоНДФЛ");
		Модуль.РасчетыСБюджетомПоНДФЛЗарегистрироватьНДФЛКПеречислению(Регистратор.Движения, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТСписокСотрудниковПоТаблицеЗарплат(МенеджерВременныхТаблиц, ТаблицаЗарплат, Организация, ПериодРегистрации, Регистратор = Неопределено) Экспорт

	КолонкиГруппировокСпискаСотрудников = "ФизическоеЛицо, ДокументОснование, СтатьяФинансирования, СтатьяРасходов"; // не локализуется
	КолонкиСпискаСотрудников = СтрШаблон("%1, КВыплате", КолонкиГруппировокСпискаСотрудников); 
	Если ТипЗнч(ТаблицаЗарплат) = Тип("ТаблицаЗначений") Тогда
		СписокСотрудников = ТаблицаЗарплат.Скопировать(, КолонкиСпискаСотрудников);
	Иначе
		СписокСотрудников = ТаблицаЗарплат.Выгрузить(, КолонкиСпискаСотрудников);
	КонецЕсли;	
	СписокСотрудников.Свернуть(КолонкиГруппировокСпискаСотрудников, "КВыплате");
	СписокСотрудников.Колонки.КВыплате.Имя = "СуммаВыплаты";
	
	ОписательВТ = 
		ВзаиморасчетыССотрудниками.ОписательВременныхТаблицДляСоздатьВТСостояниеВыплат(
			МенеджерВременныхТаблиц, СписокСотрудников);
	ВзаиморасчетыССотрудниками.СоздатьВТСостояниеВыплат(
		ОписательВТ, Истина, 
		Организация, ПериодРегистрации, 
		?(Регистратор = Неопределено, Неопределено, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Регистратор)), 
		"ВТСписокСотрудников");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
