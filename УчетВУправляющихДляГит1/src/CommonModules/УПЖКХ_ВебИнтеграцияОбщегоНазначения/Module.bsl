
//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

// Генерирует уникальный идентификатор.
//
// Параметры:
//  ДлинаИдентификатора          – Число – длина идентификатора.
//  СоставУникЧастиИдентификтора - Строка - описание состава уникальной части идентификатора.
//  ДопЧисло                     – Число  – дополнительное число для генерации идентификатора.
//
// Возвращаемое значение:
//  Строка – сформированный уникальный идентификатор.
//
Функция СгенерироватьИдентификатор(ДлинаИдентификатора, Знач СоставУникЧастиИдентификтора, ДопЧисло = 0)
	
	Если ДлинаИдентификатора < 1 ИЛИ СтрДлина(СоставУникЧастиИдентификтора) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекСлЧ  = ТекущаяУниверсальнаяДатаВМиллисекундах() + ДопЧисло;
	ТекстИд = "";
	ГСЧ = Новый ГенераторСлучайныхЧисел(ТекСлЧ);
	
	МассивНаборов = Новый Массив;
	
	СоставУникЧастиИдентификтора = СоставУникЧастиИдентификтора + ",";
	
	СтрокаСимволов = "";
	Если Найти(СоставУникЧастиИдентификтора, "ВР,") > 0 Тогда
		МассивНаборов.Добавить("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
		СоставУникЧастиИдентификтора = СтрЗаменить(СоставУникЧастиИдентификтора, "ВР,", "");
	КонецЕсли;
	Если Найти(СоставУникЧастиИдентификтора, "НР,") > 0 Тогда
		МассивНаборов.Добавить("abcdefghijklmnopqrstuvwxyz");
		СоставУникЧастиИдентификтора = СтрЗаменить(СоставУникЧастиИдентификтора, "НР,", "");
	КонецЕсли;
	Если Найти(СоставУникЧастиИдентификтора, "Цифры,") > 0 Тогда
		МассивНаборов.Добавить("0123456789");
		СоставУникЧастиИдентификтора = СтрЗаменить(СоставУникЧастиИдентификтора, "Цифры,", "");
	КонецЕсли;
	Если Найти(СоставУникЧастиИдентификтора, "ЗП,") > 0 Тогда
		МассивНаборов.Добавить(",.<>/?;:'[]""{}\|`~!@#$%^&*()-_+=");
		СоставУникЧастиИдентификтора = СтрЗаменить(СоставУникЧастиИдентификтора, "ЗП,", "");
	КонецЕсли;
	
	СоставУникЧастиИдентификтора = СтрЗаменить(СоставУникЧастиИдентификтора, ",", "");
	Если НЕ СоставУникЧастиИдентификтора = "" Тогда
		МассивНаборов.Добавить(СоставУникЧастиИдентификтора);
	КонецЕсли;
	
	КолМассивНаборов = МассивНаборов.Количество();
	Если КолМассивНаборов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	УпМассивНаборов = Новый Массив(КолМассивНаборов);
	
	тмМаксИндекс = КолМассивНаборов - 1;
	Для Индекс = 0 По КолМассивНаборов - 1 Цикл
		ТекСлЧ = ГСЧ.СлучайноеЧисло(0, тмМаксИндекс);
		УпМассивНаборов[Индекс] = МассивНаборов[ТекСлЧ];
		МассивНаборов.Удалить(ТекСлЧ);
		тмМаксИндекс = тмМаксИндекс - 1;
	КонецЦикла;
	
	ТекИндекс = 0;
	Для Сч = 1 По ДлинаИдентификатора Цикл
		ТекНабор = УпМассивНаборов[ТекИндекс];
		ТекСлЧ = ГСЧ.СлучайноеЧисло(1, СтрДлина(ТекНабор));
		ТекстИд = ТекстИд + Сред(ТекНабор, ТекСлЧ, 1);
		Если ТекИндекс < КолМассивНаборов - 1 Тогда
			ТекИндекс = ТекИндекс + 1;
		Иначе
			ТекИндекс = 0;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстИд;
	
КонецФункции //СгенерироватьИдентификатор()

// Формирует идентификатор логина по переданным данным согласно настройкам учетной политики.
//
// Параметры
//  СтрокаНастроек  - Строка - строка, содержащая настройки идентификатора.
//  ПараметрЛС      – Строка - Наименование лицевого счета.
//  ДопЧисло        – Число  – дополнительное число для генерации идентификатора.
//
// Возвращаемое значение:
//  Строка – сформированный идентификатор лицевого счета.
//
Функция ПолучитьИдентификаторЛогина(СтрокаНастроек = "", ПараметрЛС = "", ДопЧисло = 0, МассивЛогинов = Неопределено) Экспорт
	
	Если МассивЛогинов = Неопределено Тогда
		МассивЛогинов = Новый Массив;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаНастроек) Тогда
		Если Метаданные.Константы.Найти("УПЖКХ_НастройкиИдентификатораЛогина") = Неопределено Тогда
			// Значение по умолчанию.
			НастройкиИД = ";Да;7;ВР,НР,Цифры";
		Иначе
			НастройкиИД = Константы.УПЖКХ_НастройкиИдентификатораЛогина.Получить();
		КонецЕсли;
	Иначе
		НастройкиИД = СтрокаНастроек;
	КонецЕсли;
	
	ПрефиксИдЛогин = Лев(НастройкиИД, Найти(НастройкиИД, ";") - 1);
	
	мСтрока = Сред(НастройкиИД, Найти(НастройкиИД, ";") + 1);
	Попытка
		ИспользоватьРучнойФорматИдентификатораЛогин = Булево(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ИспользоватьРучнойФорматИдентификатораЛогин = Ложь;
	КонецПопытки;
	
	мСтрока = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	Попытка
		ДлинаУникЧастиИдЛогин = Число(Лев(мСтрока, Найти(мСтрока, ";") - 1));
	Исключение
		ДлинаУникЧастиИдЛогин = 0;
	КонецПопытки;
	
	СоставУникЧастиИдЛогин = Сред(мСтрока, Найти(мСтрока, ";") + 1);
	
	ИдентификаторЛогин = "";
	Если ИспользоватьРучнойФорматИдентификатораЛогин Тогда
		ПрефиксИдЛогин = СокрЛП(ПрефиксИдЛогин);
		УникИдентификатор = СгенерироватьИдентификатор(ДлинаУникЧастиИдЛогин,
													   СоставУникЧастиИдЛогин,
													   ДопЧисло);
		ИдентификаторЛогин = ПрефиксИдЛогин + УникИдентификатор;
		
		// Если сгенерированный логин не уникален, запускаем еще раз механизм генерации уникальной части.
		Если Не МассивЛогинов.Найти(ИдентификаторЛогин) = Неопределено Тогда
			ЛогинНеУникален = Истина;
			Пока ЛогинНеУникален Цикл
				ДопЧисло = ДопЧисло + 1;
				УникИдентификатор = СгенерироватьИдентификатор(ДлинаУникЧастиИдЛогин,
															   СоставУникЧастиИдЛогин,
															   ДопЧисло);
															   
				ИдентификаторЛогин = ПрефиксИдЛогин + УникИдентификатор;
				Если МассивЛогинов.Найти(ИдентификаторЛогин) = Неопределено Тогда
					ЛогинНеУникален = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		СтрокаИд = СокрЛП(ПараметрЛС);
		Для Индекс = 1 По СтрДлина(СтрокаИд) Цикл
			СтрокаСимвол = Сред(СтрокаИд, Индекс, 1);
			Если КодСимвола(СтрокаСимвол) > 47 И КодСимвола(СтрокаСимвол) < 58 Тогда
				ИдентификаторЛогин = ИдентификаторЛогин + СтрокаСимвол;
			КонецЕсли;
		КонецЦикла;
		ПрефиксИдЛогин = СокрЛП(ПрефиксИдЛогин);
		ДлинаПрефиксаИдЛогин = СтрДлина(ПрефиксИдЛогин);
		Пока ДлинаПрефиксаИдЛогин + СтрДлина(ИдентификаторЛогин) < 3 Цикл
			ИдентификаторЛогин = "0" + ИдентификаторЛогин;
		КонецЦикла;
		ИдентификаторЛогин = ПрефиксИдЛогин + ИдентификаторЛогин;
		
		// Если сгенерированный логин не уникален, добавляем к нему произвольное число.
		Если Не МассивЛогинов.Найти(ИдентификаторЛогин) = Неопределено Тогда
			ЛогинНеУникален         = Истина;
			ИдентификаторЛогинБуфер = ИдентификаторЛогин;
			ДопЧислоДляДобавления   = 0;
			Пока ЛогинНеУникален Цикл
				ДопЧислоДляДобавления = ДопЧислоДляДобавления + 1;
				ИдентификаторЛогин = ИдентификаторЛогин + Строка(ДопЧислоДляДобавления);
				Если МассивЛогинов.Найти(ИдентификаторЛогин) = Неопределено Тогда
					ЛогинНеУникален = Ложь;
				Иначе
					ИдентификаторЛогин = ИдентификаторЛогинБуфер;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторЛогин;
	
КонецФункции // ПолучитьИдентификаторЛогина()

// Формирует текстовый файл и записывает в него строковое представление xml-файла.
//
// Параметры:
//  СтроковоеПредставление - Строка - строковое представление xml-файла.
//
// Возвращаемое значение:
//  Строка
//
Функция СформироватьТекстовыйФайл(СтроковоеПредставление) Экспорт
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.ДобавитьСтроку(СтроковоеПредставление);
	ТекстовыйФайл.Записать(ИмяФайла, ОпределитьКодировкуФайла(СтроковоеПредставление));
	
	Возврат ИмяФайла;
	
КонецФункции // СформироватьXMLФайл()

// Определяет кодировку файла, загруженного с сайта.
//
// Параметры:
//  СтроковоеПредставление - строковое представление загруженного файла.
//
// Вовзращаемое значение:
//  Строка
//
Функция ОпределитьКодировкуФайла(СтроковоеПредставление)
	
	ПозицияПервогоСимвола = Найти(СтроковоеПредставление, "encoding");
	
	Если ПозицияПервогоСимвола = 0 Тогда
		Возврат "windows-1251";
	КонецЕсли;
	
	СтрокаПоиска = СРЕД(СтроковоеПредставление, ПозицияПервогоСимвола + 10);
	
	ПозицияПоследнегоСимвола = Найти(СтрокаПоиска, "?");
	
	Если ПозицияПоследнегоСимвола = 0 Тогда
		Возврат "windows-1251";
	КонецЕсли;
	
	Кодировка = ЛЕВ(СтрокаПоиска, ПозицияПоследнегоСимвола - 2);
	
	Возврат Кодировка;
	
КонецФункции // ОпределитьКодировкуФайла()

// Преобразует строку в base64 с содержимым в указанной кодировке.
//
Функция ПреобразоватьСтрокуВBase64(СтрокаДляПреобразования, Кодировка) Экспорт
	
	ИмяФайла     = ПолучитьИмяВременногоФайла();
	ФайлОтправки = Новый ЗаписьТекста(ИмяФайла, Кодировка);
	ФайлОтправки.Записать(СтрокаДляПреобразования);
	ФайлОтправки.Закрыть();
	
	Двоичные = Новый ДвоичныеДанные(ИмяФайла);
	
	// Парсер на сайте может воспринять некоторые комбинации символов, как спецсимволы.
	// Для того, чтобы этого избежать, заменяем управляющие символы на "безопасные".
	СтрокаBase64 = Base64Строка(Двоичные);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "/", "_");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, "+", "-");
	
	Пока Прав(СтрокаBase64, 1) = "=" Цикл
		СтрокаBase64 = Сред(СтрокаBase64, 1, СтрДлина(СтрокаBase64) - 1);
	КонецЦикла;
	
	Возврат СтрокаBase64;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ РЕГЛАМЕНТНЫХ ЗАДАНИЙ

#Область ОбработчикиРегламентныхЗаданий

// Процедура - обработчик регламентного задания "Обмен данными с сайтом".
//
// Параметры:
//  КодОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//
Процедура УПЖКХ_ОбменДаннымиССайтом(КодОбмена) Экспорт
	
	Если КодОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантОбмена = Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.НайтиПоКоду(КодОбмена);
	
	Если ВариантОбмена = Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбменДаннымиССайтом(ВариантОбмена);
	
КонецПроцедуры // УПЖКХ_ОбменДаннымиССайтом()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБМЕНА ДАННЫМИ

#Область ОбработчикиОбменаДанными

// Анализирует вариант обмена данными и выполнять соответствующие ему виды обмена.
//
// Параметры:
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль        - пароль доступа к админской части сайта.
//
Процедура ВыполнитьОбменДаннымиССайтом(ВариантОбмена, Пароль = Неопределено) Экспорт
	
	НастройкаДоступа = ВариантОбмена.НастройкаДоступа;
	
	Если Пароль = Неопределено Тогда
		Пароль = НастройкаДоступа.Пароль;
	КонецЕсли;
	
	// Определение версии обмена и установленных модулей.
	СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(НастройкаДоступа);
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантОбмена.ВыгрузкаДанныхПоЛС ИЛИ ВариантОбмена.ВыгрузкаЭлектронныхПаспортов Тогда
		ВыполнитьВыгрузкуДанныхПоЛС(ВариантОбмена, Пароль,, СтруктураИнформацииОСайте);
	КонецЕсли;
	
	Если ВариантОбмена.ЗагрузкаПоказанийПУ Тогда
		ВыполнитьЗагрузкуПоказанийПоПУ(ВариантОбмена, Пароль, СтруктураИнформацииОСайте);
	КонецЕсли;
	
	Если ВариантОбмена.ЗагрузкаРеестраПлатежей Тогда
		ВыполнитьЗагрузкуРеестраПлатежей(ВариантОбмена, Пароль, СтруктураИнформацииОСайте);
	КонецЕсли;
	
	Если НЕ СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 И ВариантОбмена.ЗагрузкаСведенийОбАккаунтах Тогда
		ВыполнитьЗагрузкуСведенияОбАккаунтах(ВариантОбмена.НастройкаДоступа, Пароль, ВариантОбмена, СтруктураИнформацииОСайте);
	КонецЕсли;
	
	// Заявки АДС (временно закомментировано)
	//Если ВариантОбмена.ЗагрузкаЗаявокАДС Тогда
	//	ВыполнитьЗагрузкуЗаявокАДС(ВариантОбмена, Пароль);
	//КонецЕсли;
	
КонецПроцедуры // ВыполнитьОбменДаннымиССайтом()

// Выполняет выгрузку электронных паспортов домов на основании специальной таблицы настроек.
// Используется при выгрузке паспортов из документа "Электронные паспорта для выгрузки на сайт".
//
Процедура ВыполнитьВыгрузкуЭлектронныхПаспортовПоТаблицеНастроек(ТаблицаНастроек) Экспорт
	
	Для каждого ТекСтрокаНастройки из ТаблицаНастроек Цикл
		
		Если ТекСтрокаНастройки.МожноОтправитьНаСайт Тогда
			
			// Проверка наличия документов для отправки.
			МассивДокументовНаУдаление = Новый Массив;
			
			Для каждого ТекДокумент из ТекСтрокаНастройки.МассивДокументов Цикл
				
				Если НЕ ТекДокумент.ПаспортЗаполнен Тогда
					
					МассивДокументовНаУдаление.Добавить(ТекДокумент);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекДокумент из МассивДокументовНаУдаление Цикл
				
				ИндексЭлемента = ТекСтрокаНастройки.МассивДокументов.Найти(ТекДокумент);
				
				Если НЕ ИндексЭлемента = Неопределено Тогда
					ТекСтрокаНастройки.МассивДокументов.Удалить(ИндексЭлемента);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТекСтрокаНастройки.МассивДокументов.Количество() = 0 Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружено электронных паспортов домов, готовых к отправке");
				
				Продолжить;
			КонецЕсли;
			
			НастройкаДоступа = ТекСтрокаНастройки.НастройкиЭП.НастройкаДоступаКСайту;
			
			СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(НастройкаДоступа);
			
			НастройкиОбмена = Новый Структура("НастройкаДоступа, НастройкаОбмена, ВыгрузкаДанныхПоЛС, ВыгрузкаЭлектронныхПаспортов, НастройкиВыгрузкиЭПД");
			
			НастройкиОбмена.НастройкаДоступа             = НастройкаДоступа;
			НастройкиОбмена.НастройкаОбмена              = Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.ПустаяСсылка();
			НастройкиОбмена.ВыгрузкаДанныхПоЛС           = Ложь;
			НастройкиОбмена.ВыгрузкаЭлектронныхПаспортов = Истина;
			НастройкиОбмена.НастройкиВыгрузкиЭПД         = ТекСтрокаНастройки;
			
			ВыполнитьВыгрузкуДанныхПоЛС(, ТекСтрокаНастройки.Пароль, НастройкиОбмена, СтруктураИнформацииОСайте);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет выгрузку на сайт параметров доступа по л/с.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройка доступа.
//  ТаблицаЛС - ТаблицаЗначений - таблица с параметрами доступа.
//  ВсеПараметрыПереданы - Булево - признак того, что все параметры переданы на сайт.
//  СтруктураИнформацииОСайте - Структура - структура с информацией о сайте.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль - пароль доступа к админской части сайта.
//  ОбновлятьПараметрыДоступа - булево - обновлять ли параметры доступа на сайте.
//
Процедура ВыполнитьВыгрузкуПараметровДоступаПоЛС(НастройкаДоступа, ТаблицаЛС, ВсеПараметрыПереданы, СтруктураИнформацииОСайте,
												 ВариантОбмена = Неопределено, Пароль = Неопределено,
												 ОбновлятьПараметрыДоступа = Ложь, ИспользоватьЛогиныВВерсии4 = Ложь) Экспорт
	
	СведенияОбОшибке = "";
	
	ТипФайла = ?(СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4, "access", "accounts");
	
	// Подготавливаем данные для формирования файла обмена.
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПодготовитьДанныеДляВыгрузкиПинкодов(НастройкаДоступа, ТаблицаЛС);
	Иначе
		НастройкиОбмена = Новый Структура("ТаблицаЛС", ТаблицаЛС);
		// Подготавливаем данные для формирования файла обмена.
		СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеДляВыгрузки("access", НастройкаДоступа, НастройкиОбмена, Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.ПустаяСсылка(), Новый Структура("ПериодПросмотра", ТекущаяДата()));
	КонецЕсли;
	
	Если СтруктураПараметров = Неопределено Тогда
		СведенияОбОшибке = "Неизвестный формат файла обмена";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		
		Возврат;
	КонецЕсли;
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
		
		ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXMLЧетвертыйФормат(СтруктураПараметров, НастройкаДоступа, "access", ИспользоватьЛогиныВВерсии4, ОбновлятьПараметрыДоступа);
		
	Иначе
		
		ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXML(СтруктураПараметров, НастройкаДоступа, ОбновлятьПараметрыДоступа);
		
	КонецЕсли;
	
	Ответ = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПередатьДанныеНаСайт(ФайлВыгрузки,
																		  ТипФайла,
																		  НастройкаДоступа,
																		  ?(Пароль = Неопределено, НастройкаДоступа.Пароль, Пароль),
																		  СведенияОбОшибке,
																		  СтруктураИнформацииОСайте);
	
	ВсеПараметрыПереданы = Ответ.status = "success";
	
	УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа,
																				  ФайлВыгрузки,
																				  СведенияОбОшибке,
																				  Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаПараметровДоступа,
																				  ВариантОбмена,
																				  ,
																				  СтруктураИнформацииОСайте,
																				  Ответ);
	
КонецПроцедуры // ВыполнитьВыгрузкуПараметровДоступаПоЛС()

// Выполняет выгрузку на сайт основных учетных данных (начисления, показания по ПУ и пр.).
//
// Параметры:
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль - пароль доступа к админской части сайта.
//  НастройкиОбмена - текущие настройки доступа.
//  СтруктураИнформацииОСайте - структура с информацией о сайте.
//
Процедура ВыполнитьВыгрузкуДанныхПоЛС(ВариантОбмена = Неопределено, Пароль = Неопределено, НастройкиОбмена = Неопределено, СтруктураИнформацииОСайте) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Если ВариантОбмена = Неопределено Тогда
		ОбменВыполняетсяАвтоматически = Ложь;
		НастройкаДоступа              = НастройкиОбмена.НастройкаДоступа;
		НастройкаОбменаДанными        = НастройкиОбмена.НастройкаОбмена;
		ВыгрузкаДанныхПоЛС            = НастройкиОбмена.ВыгрузкаДанныхПоЛС;
		ВыгрузкаЭлектронныхПаспортов  = НастройкиОбмена.ВыгрузкаЭлектронныхПаспортов;
		
		Если НастройкиОбмена.Свойство("НастройкиВыгрузкиЭПД") Тогда
			МассивДокументов = НастройкиОбмена.НастройкиВыгрузкиЭПД.МассивДокументов;
		КонецЕсли;
	Иначе
		ОбменВыполняетсяАвтоматически = Истина;
		НастройкаДоступа              = ВариантОбмена.НастройкаДоступа;
		НастройкаОбменаДанными        = ВариантОбмена.НастройкаОбмена;
		ВыгрузкаДанныхПоЛС            = ВариантОбмена.ВыгрузкаДанныхПоЛС;
		ВыгрузкаЭлектронныхПаспортов  = ВариантОбмена.ВыгрузкаЭлектронныхПаспортов;
		
		МассивДокументов = Неопределено;
	КонецЕсли;
	
	Если ВыгрузкаЭлектронныхПаспортов И СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляЭПДНаСайте()) = Неопределено Тогда
		ВыгрузкаЭлектронныхПаспортов = Ложь;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Модуль электронных паспортов домов не установлен на сайте. Выгрузка электронных паспортов не будет выполнена.");
	КонецЕсли;
	
	ПериодОбмена = ?(НЕ НастройкиОбмена = Неопределено И НастройкиОбмена.Свойство("МесяцОбмена"), НастройкиОбмена.МесяцОбмена, ?(НастройкаДоступа.МесяцОкончанияПроведенияНачислений = 0, ТекущаяДата(), КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1))));
	
	СведенияОбОшибке = "";
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьСтруктуруНастроекКвитанций(НастройкаДоступа, НастройкиОбмена, НастройкаОбменаДанными, ПериодОбмена);
	
	СтруктураНастроек.Вставить("ВыгрузкаДанныхПоЛС",            ВыгрузкаДанныхПоЛС);
	СтруктураНастроек.Вставить("ВыгрузкаЭлектронныхПаспортов",  ВыгрузкаЭлектронныхПаспортов);
	СтруктураНастроек.Вставить("СтруктураСДаннымиПоЭПД",        ?(ВыгрузкаЭлектронныхПаспортов, УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьСтруктуруСДаннымиПоЭлектроннымПаспортам(МассивДокументов, СтруктураНастроек.Организация), Неопределено));
	СтруктураНастроек.Вставить("ОбменВыполняетсяАвтоматически", ОбменВыполняетсяАвтоматически);
	
	// Определяем, нужно ли на сайте выводить услуги СОИ в отдельной группе.
	СтруктураНастроек.Вставить("ВыгружатьУслугиСОИВОтдельнуюГруппу", СтруктураИнформацииОСайте.НомерБилда > 2);
	
	ТаблицаВсехЛС         = СтруктураНастроек.ТаблицаОбъектов.Скопировать();
	ПоследнийЭтапВыгрузки = Истина;
	СписокФайлов          = Новый Массив;
	
	// Подготавливаем вид обмена исходя из необходимости выгрузки данных по л/с и данных по электронным паспортам домов.
	Если ВыгрузкаДанныхПоЛС Тогда
		ВидОбменаДляЖурналаОбмена = ?(ВыгрузкаЭлектронныхПаспортов И СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4,
									  Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаДанныхЛСИЭлектронныхПаспортов,
									  Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаДанныхЛС);
	Иначе
		ВидОбменаДляЖурналаОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаЭлектронныхПаспортов;
	КонецЕсли;
	
	// Если нужно выгружать данные по л/с, но подходящих л/с не обнаружено, то сообщаем об ошибке.
	Если ВыгрузкаДанныхПоЛС И ТаблицаВсехЛС.Количество() = 0 Тогда
		
		СведенияОбОшибке = "Не удалось сформировать файл обмена: не обнаружено подходящих для выгрузки на сайт лицевых счетов.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		
	Иначе
		
		// Массив предназначен для хранения всех ответов с сайта при выгрузке нескольих файлов обмена.
		МассивОтветов = Новый Массив;
		
		// Если необходимо выгружать данные по л/с:
		Если ВыгрузкаДанныхПоЛС Тогда
			
			Если НЕ СтруктураНастроек.СтруктураСДаннымиПоЭПД = Неопределено Тогда
				ТаблицаВыгруженныхЗданий = Новый ТаблицаЗначений;
				ТаблицаВыгруженныхЗданий.Колонки.Добавить("Здание");
			КонецЕсли;
			
			НастройкиМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
			
			ИспользоватьМногопоточность = НастройкиМногопоточности.ИспользоватьМногопоточность;
			КоличествоПотоков           = НастройкиМногопоточности.КоличествоПотоков;
			
			// Определяем максимальное количество л/с в файле обмена.
			КоличествоЛСВФайле = НастройкаОбменаДанными.КоличествоЛСВФайле;
			
			// Многопоточная выгрузка.
			Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 И ИспользоватьМногопоточность И КоличествоПотоков > 1 Тогда
				
				// Подготавливаем массивы адресов во временных хранилищах,
				// где будут храниться результаты выполнения фоновых заданий.
				МассивАдресовСписковФайлов        = Новый Массив;
				МассивАдресовСтатусовВыполнения   = Новый Массив;
				
				ИмяМетода                         = "УПЖКХ_МногопоточнаяОбработкаДанных.ВыполнитьВыгрузкуДанныхПоЛСВФоновомЗадании";
				НаименованиеЗадания               = "Фоновая подготовка данных по лицевым счетам.";
				МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиВыгрузкаДанныхПоЛС(НастройкаДоступа, СтруктураНастроек, ТаблицаВсехЛС, МассивАдресовСписковФайлов, МассивАдресовСтатусовВыполнения, КоличествоЛСВФайле, КоличествоПотоков);
				
				УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
				
				// После выполнения всех фоновых заданий объединяем все результаты и проверяем на наличие ошибок.
				Для Сч = 1 по МассивАдресовСтатусовВыполнения.Количество() Цикл
					
					ВыполненоБезОшибок = ПолучитьИзВременногоХранилища(МассивАдресовСтатусовВыполнения[Сч - 1]);
					
					// Сравниваем именно с Истина, так как в случае, если в процессе обмена возникла критическая
					// ошибка, то может прийти Неопределено.
					//
					Если ВыполненоБезОшибок = Истина Тогда
						
						ТекущийСписокФайлов = ПолучитьИзВременногоХранилища(МассивАдресовСписковФайлов[Сч - 1]);
						
						Для каждого ТекФайл из ТекущийСписокФайлов Цикл
							
							// Получаем имя временного файла.
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
							ТекФайл.Записать(ИмяВременногоФайла);
							
							СписокФайлов.Добавить(ИмяВременногоФайла);
						КонецЦикла;
						
					Иначе
						
						СведенияОбОшибке = "Не удалось сформировать файл обмена: неизвестный формат обмена.";
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Сравниваем именно с Истина, так как в случае, если в процессе обмена возникла критическая
				// ошибка, то может прийти Неопределено.
				//
				Если ВыполненоБезОшибок = Истина Тогда
					
					// Передаем поочередно все сформированные файлы обмена.
					КоличествоФайловОбмена  = СписокФайлов.Количество();
					НомерПередаваемогоФайла = 1;
					
					Для каждого ФайлВыгрузки из СписокФайлов Цикл
						
						ПоследнийЭтапВыгрузки = (НомерПередаваемогоФайла = КоличествоФайловОбмена);
						
						ВыполнитьПередачуДанныхПоЛСНаСайт(ФайлВыгрузки, НастройкаДоступа, Пароль, СведенияОбОшибке,
														  СтруктураИнформацииОСайте, ПоследнийЭтапВыгрузки,
														  МассивОтветов, ТаблицаВыгруженныхЗданий, СтруктураНастроек);
						
						НомерПередаваемогоФайла = НомерПередаваемогоФайла + 1;
						
					КонецЦикла;
					
				КонецЕсли;
				
			// Однопоточная выгрузка.
			Иначе
				
				Пока НЕ ТаблицаВсехЛС.Количество() = 0 Цикл
					
					Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
						ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле);
						// Проверяем, является ли этап выгрузки последним. Это нужно для информирования о завершении выгрузки.
						ПоследнийЭтапВыгрузки = ТаблицаВсехЛС.Количество() = 0;
						
						СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьСтруктуруСДаннымиДляКвитанции(НастройкаДоступа, СтруктураНастроек);
					Иначе
						СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеДляВыгрузки("calculations", НастройкаДоступа, НастройкиОбмена, НастройкаОбменаДанными, СтруктураНастроек);
					КонецЕсли;
					
					Если СтруктураПараметров = Неопределено Тогда
						СведенияОбОшибке = "Не удалось сформировать файл обмена: неизвестный формат обмена.";
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
						
						Прервать;
					КонецЕсли;
					
					Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
						ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXMLЧетвертыйФормат(СтруктураПараметров, НастройкаДоступа, "calculations");
					Иначе
						ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXML(СтруктураПараметров, НастройкаДоступа);
					КонецЕсли;
					
					Если ФайлВыгрузки = Неопределено Тогда
						СведенияОбОшибке = "Не удалось сформировать файл обмена: неизвестный формат обмена.";
						
						Прервать;
					КонецЕсли;
					
					СписокФайлов.Добавить(ФайлВыгрузки);
					
					ВыполнитьПередачуДанныхПоЛСНаСайт(ФайлВыгрузки, НастройкаДоступа, Пароль, СведенияОбОшибке,
													  СтруктураИнформацииОСайте, ПоследнийЭтапВыгрузки,
													  МассивОтветов, ТаблицаВыгруженныхЗданий, СтруктураНастроек);
					
					// Выгружаем по частям только для 4-й версии обмена.
					Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена < 4 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ СтруктураНастроек.СтруктураСДаннымиПоЭПД = Неопределено Тогда
				
				ТаблицаВыгруженныхЗданий.Свернуть("Здание");
				
				МассивДокументовДляИзмененияСтатуса = Новый Массив;
				
				Для каждого ТекЗданиеДокументаЭПД из СтруктураНастроек.СтруктураСДаннымиПоЭПД.МассивДокументов Цикл
					
					Если НЕ ТаблицаВыгруженныхЗданий.Найти(ТекЗданиеДокументаЭПД.Здание, "Здание") = Неопределено Тогда
						
						МассивДокументовДляИзмененияСтатуса.Добавить(ТекЗданиеДокументаЭПД);
						
					КонецЕсли;
					
				КонецЦикла;
				
				УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ОбработатьОтправкуЭлектронногоПаспортаНаСайт(МассивДокументовДляИзмененияСтатуса);
				
			КонецЕсли;
			
		// Если необходимо выгружать сведения по электронным паспортам домов.
		ИначеЕсли ВыгрузкаЭлектронныхПаспортов И СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 4 Тогда
			
			СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьСтруктуруСДаннымиДляКвитанции(НастройкаДоступа, СтруктураНастроек);
			
			ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXMLЧетвертыйФормат(СтруктураПараметров, НастройкаДоступа, "calculations");
			
			СписокФайлов.Добавить(ФайлВыгрузки);
			
			Ответ = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПередатьДанныеНаСайт(ФайлВыгрузки,
																				  "accounts",
																				  НастройкаДоступа,
																				  Пароль,
																				  СведенияОбОшибке,
																				  СтруктураИнформацииОСайте,
																				  ПоследнийЭтапВыгрузки);
			
			МассивОтветов.Добавить(Ответ);
			
			Если Ответ.details.Свойство("houses") И Ответ.details.houses
			   И Ответ.details.Свойство("houses_additional") И Ответ.details.houses_additional
			   И НЕ СтруктураНастроек.СтруктураСДаннымиПоЭПД = Неопределено Тогда
				УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ОбработатьОтправкуЭлектронногоПаспортаНаСайт(СтруктураНастроек.СтруктураСДаннымиПоЭПД.МассивДокументов);
			КонецЕсли;
		КонецЕсли;
		
		// Создаем запись по результатам обмена.
		УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа,
																					  СписокФайлов,
																					  СведенияОбОшибке,
																					  ВидОбменаДляЖурналаОбмена,
																					  ?(ВариантОбмена = Неопределено, Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(), ВариантОбмена),
																					  ,
																					  СтруктураИнформацииОСайте,
																					  МассивОтветов);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ВыгрузкаДанныхПоЛСНаСайтЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
КонецПроцедуры // ВыполнитьВыгрузкуДанныхПоЛС()

// Подготавливает структуру настроек при выгрузке сведений по л/с по частям.
//
Процедура ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле = 5000)
	
	// Получаем л/с, по которым будем выгружать за итерацию.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	ТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	ТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	ТаблицаВсехЛС.Помещение КАК Помещение,
	|	ТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	ТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	ТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	ТаблицаВсехЛС.Здание КАК Здание,
	|	ТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	ТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	ТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	ТаблицаВсехЛС.Идентификатор КАК Идентификатор,
	|	ТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	ТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	ТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	ТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	ТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	ТаблицаВсехЛС.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	ТаблицаВсехЛС.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	ТаблицаВсехЛС.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ПОМЕСТИТЬ втТаблицаВсехЛС
	|ИЗ
	|	&ТаблицаВсехЛС КАК ТаблицаВсехЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 5000
	|	втТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втТаблицаВсехЛС.Помещение КАК Помещение,
	|	втТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	втТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	втТаблицаВсехЛС.Здание КАК Здание,
	|	втТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	втТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	втТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втТаблицаВсехЛС.Идентификатор КАК Идентификатор,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втТаблицаВсехЛС.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ПОМЕСТИТЬ втЛСДляВыгрузки
	|ИЗ
	|	втТаблицаВсехЛС КАК втТаблицаВсехЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСДляВыгрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСДляВыгрузки.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втЛСДляВыгрузки.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втЛСДляВыгрузки.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втЛСДляВыгрузки.Помещение КАК Помещение,
	|	втЛСДляВыгрузки.КодПомещения КАК КодПомещения,
	|	втЛСДляВыгрузки.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втЛСДляВыгрузки.Подъезд КАК Подъезд,
	|	втЛСДляВыгрузки.Здание КАК Здание,
	|	втЛСДляВыгрузки.КодЗдания КАК КодЗдания,
	|	втЛСДляВыгрузки.ТипПомещения КАК ТипПомещения,
	|	втЛСДляВыгрузки.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втЛСДляВыгрузки.Идентификатор КАК Идентификатор,
	|	втЛСДляВыгрузки.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втЛСДляВыгрузки.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втЛСДляВыгрузки.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втЛСДляВыгрузки.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втЛСДляВыгрузки.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втЛСДляВыгрузки.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втЛСДляВыгрузки.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ИЗ
	|	втЛСДляВыгрузки КАК втЛСДляВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВсехЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаВсехЛС.КодЛицевогоСчета КАК КодЛицевогоСчета,
	|	втТаблицаВсехЛС.АдресЭлектроннойПочты КАК АдресЭлектроннойПочты,
	|	втТаблицаВсехЛС.НаименованиеЛицевогоСчета КАК НаименованиеЛицевогоСчета,
	|	втТаблицаВсехЛС.Помещение КАК Помещение,
	|	втТаблицаВсехЛС.КодПомещения КАК КодПомещения,
	|	втТаблицаВсехЛС.НаименованиеПомещения КАК НаименованиеПомещения,
	|	втТаблицаВсехЛС.Подъезд КАК Подъезд,
	|	втТаблицаВсехЛС.Здание КАК Здание,
	|	втТаблицаВсехЛС.КодЗдания КАК КодЗдания,
	|	втТаблицаВсехЛС.ТипПомещения КАК ТипПомещения,
	|	втТаблицаВсехЛС.ЖилойФондПомещения КАК ЖилойФондПомещения,
	|	втТаблицаВсехЛС.Идентификатор КАК Идентификатор,
	|	втТаблицаВсехЛС.ИдентификаторЖКХЛичныйКабинет КАК ИдентификаторЖКХЛичныйКабинет,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХ КАК ЕЛСвГИСЖКХ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУ КАК ИдентификаторЖКУ,
	|	втТаблицаВсехЛС.ИдентификаторЖКУКапРемонт КАК ИдентификаторЖКУКапРемонт,
	|	втТаблицаВсехЛС.ЕЛСвГИСЖКХКапРемонт КАК ЕЛСвГИСЖКХКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДОсн КАК ИдентификаторПДОсн,
	|	втТаблицаВсехЛС.ИдентификаторПДКапРемонт КАК ИдентификаторПДКапРемонт,
	|	втТаблицаВсехЛС.ИдентификаторПДЕдиный КАК ИдентификаторПДЕдиный
	|ИЗ
	|	втТаблицаВсехЛС КАК втТаблицаВсехЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСДляВыгрузки КАК втЛСДляВыгрузки
	|		ПО втТаблицаВсехЛС.ЛицевойСчет = втЛСДляВыгрузки.ЛицевойСчет
	|ГДЕ
	|	втЛСДляВыгрузки.ЛицевойСчет ЕСТЬ NULL";
	
	КоличествоЛСВФайле = ?(КоличествоЛСВФайле <= 0, 3000, КоличествоЛСВФайле);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "5000", XMLСтрока(Цел(КоличествоЛСВФайле)));
	
	Запрос.УстановитьПараметр("ТаблицаВсехЛС", ТаблицаВсехЛС);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаЛСДляВыгрузки = Результат[2].Выгрузить();
	ТаблицаВсехЛС        = Результат[3].Выгрузить();
	
	// Отбираем данные для текущей структуры настроек.
	СтруктураНастроек.ТаблицаОбъектов = ТаблицаЛСДляВыгрузки;
	СтруктураНастроек.СписокЛицевыхСчетов.ЗагрузитьЗначения(ТаблицаЛСДляВыгрузки.ВыгрузитьКолонку("ЛицевойСчет"));
	
	ТаблицаЗданий    = ТаблицаЛСДляВыгрузки.Скопировать(, "Здание");
	ТаблицаПодъездов = ТаблицаЛСДляВыгрузки.Скопировать(, "Подъезд");
	ТаблицаПомещений = ТаблицаЛСДляВыгрузки.Скопировать(, "Помещение");
	
	ТаблицаЗданий.Свернуть("Здание");
	ТаблицаПодъездов.Свернуть("Подъезд");
	ТаблицаПомещений.Свернуть("Помещение");
	
	СтруктураНастроек.СписокЗданий.ЗагрузитьЗначения(ТаблицаЗданий.ВыгрузитьКолонку("Здание"));
	СтруктураНастроек.СписокПодъездов.ЗагрузитьЗначения(ТаблицаПодъездов.ВыгрузитьКолонку("Подъезд"));
	СтруктураНастроек.СписокПомещений.ЗагрузитьЗначения(ТаблицаПомещений.ВыгрузитьКолонку("Помещение"));
	
КонецПроцедуры

// Выполняет передачу файла обмена с данными по л/с на сайт.
//
Процедура ВыполнитьПередачуДанныхПоЛСНаСайт(ФайлВыгрузки, НастройкаДоступа, Пароль, СведенияОбОшибке,
											СтруктураИнформацииОСайте, ПоследнийЭтапВыгрузки,
											МассивОтветов, ТаблицаВыгруженныхЗданий, СтруктураНастроек);
	
	Ответ = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПередатьДанныеНаСайт(ФайлВыгрузки,
																		  "accounts",
																		  НастройкаДоступа,
																		  Пароль,
																		  СведенияОбОшибке,
																		  СтруктураИнформацииОСайте,
																		  ПоследнийЭтапВыгрузки);
	
	МассивОтветов.Добавить(Ответ);
	
	Если Ответ.details.Свойство("houses") И Ответ.details.houses
	   И Ответ.details.Свойство("houses_additional") И Ответ.details.houses_additional
	   И НЕ СтруктураНастроек.СтруктураСДаннымиПоЭПД = Неопределено Тогда
		
		Для каждого ТекЗдание из СтруктураНастроек.СписокЗданий Цикл
			НоваяСтрокаЗдания = ТаблицаВыгруженныхЗданий.Добавить();
			НоваяСтрокаЗдания.Здание = ТекЗдание.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку с сайта показания по ИПУ.
//
// Параметры:
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль - пароль доступа к админской части сайта.
//  СтруктураИнформацииОСайте - структура с информацией о сайте.
//
Процедура ВыполнитьЗагрузкуПоказанийПоПУ(ВариантОбмена, Пароль, СтруктураИнформацииОСайте) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	ВыполнитьЗагрузкуДанныхССайта("meters", Пароль, СтруктураИнформацииОСайте, ВариантОбмена);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗагрузкаПоказанийПУССайтаЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	
КонецПроцедуры // ВыполнитьЗагрузкуПоказанийПоПУ

// Выполняет загрузку с сайта реестра платежей.
//
// Параметры:
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обмена.
//  Пароль - пароль доступа к админской части сайта.
//  СтруктураИнформацииОСайте - структура с информацией о сайте.
//
Процедура ВыполнитьЗагрузкуРеестраПлатежей(ВариантОбмена, Пароль, СтруктураИнформацииОСайте) Экспорт
	
	Если НЕ СтруктураИнформацииОСайте.НомерБилда = 1 И СтруктураИнформацииОСайте.МассивУстановленныхНаСайтеМодулей.Найти(УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьНаименованиеМодуляОплатНаСайте()) = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Модуль оплат не установлен на сайте. Загрузка реестра платежей не будет выполнена.");
	Иначе
		// СтандартныеПодсистемы.ОценкаПроизводительности(
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		// СтандартныеПодсистемы.ОценкаПроизводительности)
		
		ВыполнитьЗагрузкуДанныхССайта("payments", Пароль, СтруктураИнформацииОСайте, ВариантОбмена);
		
		// СтандартныеПодсистемы.ОценкаПроизводительности(
		ОценкаПроизводительности.ЗакончитьЗамерВремени("ЗагрузкаОплатССайтаЖкх", ВремяНачала);
		// СтандартныеПодсистемы.ОценкаПроизводительности(
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьЗагрузкуРеестраПлатежей

// Выполнить загрузку с сайта сведений об аккаунтах.
//
// Параметры:
//  НастройкаДоступа - СправочникСсылка.УПЖКХ_НастройкиДоступаКСайту - настройка доступа.
//  Пароль - пароль доступа к админской части сайта.
//  ВариантОбмена - СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом - вариант обменам.
//  СтруктураИнформацииОСайте - структура с информацией о сайте.
//
Процедура ВыполнитьЗагрузкуСведенияОбАккаунтах(НастройкаДоступа, Пароль, ВариантОбмена = Неопределено, СтруктураИнформацииОСайте) Экспорт
	
	ВыполнитьЗагрузкуДанныхССайта("accexistence", Пароль, СтруктураИнформацииОСайте, ВариантОбмена, НастройкаДоступа);
	
КонецПроцедуры // ВыполнитьЗагрузкуСведенияОбАккаунтах()

// Выполнить загрузку произвольных данных с сайта на основании переданных параметров.
//
Процедура ВыполнитьЗагрузкуДанныхССайта(ТипЗагрузки, Пароль, СтруктураИнформацииОСайте, ВариантОбмена = Неопределено, НастройкаДоступа = Неопределено)
	
	Если ТипЗагрузки = "meters" Тогда
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаПоказанийПУ;
	ИначеЕсли ТипЗагрузки = "payments" Тогда
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаРеестраПлатежей;
	ИначеЕсли ТипЗагрузки = "accexistence" Тогда
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаСведенийОбАккаунтах;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипНастроекОбмена = ТипЗнч(ВариантОбмена);
	
	Если НастройкаДоступа = Неопределено И (ТипНастроекОбмена = Тип("СправочникСсылка.УПЖКХ_ВариантыОбменаДаннымиССайтом") ИЛИ (ТипНастроекОбмена = Тип("Структура") И ВариантОбмена.Свойство("НастройкаДоступа"))) Тогда
		НастройкаДоступа = ВариантОбмена.НастройкаДоступа;
	КонецЕсли;
	
	СведенияОбОшибке = "";
	СодержимоеФайла  = "";
	ДатаОбмена       = Неопределено;
	
	СтруктураОтвета = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ЗагрузитьДанныеССайта(ТипЗагрузки,
																				  НастройкаДоступа,
																				  Пароль,
																				  СведенияОбОшибке,
																				  СтруктураИнформацииОСайте);
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.status = "success" И СтруктураОтвета.Свойство("details") И СтруктураОтвета.details.Свойство("temporary_file_name") Тогда
		
		ДанныеДляЗагрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеДляЗагрузкиВБазуИзXML(СтруктураОтвета.details.temporary_file_name, НастройкаДоступа, СведенияОбОшибке, СтруктураИнформацииОСайте, ТипЗагрузки);
		
		Если ТипЗнч(ДанныеДляЗагрузки) = Тип("Массив") Тогда
			Для каждого ТекСтруктураЗагрузки из ДанныеДляЗагрузки Цикл
				
				// Если произошла ошибка - прекращаем обработку.
				Если Не ПустаяСтрока(СведенияОбОшибке) Тогда
					Прервать;
				КонецЕсли;
				
				УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗагрузитьДанныеВБазу(ТекСтруктураЗагрузки, НастройкаДоступа, СведенияОбОшибке, ВариантОбмена, СтруктураИнформацииОСайте);
			КонецЦикла;
		Иначе
			УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗагрузитьДанныеВБазу(ДанныеДляЗагрузки, НастройкаДоступа, СведенияОбОшибке, ВариантОбмена, СтруктураИнформацииОСайте);
		КонецЕсли;
		
		СодержимоеФайла = СтруктураОтвета.details.temporary_file_name;
		
		Если ТипЗагрузки = "payments" Тогда
			// При загрузке оплат данные для загрузки всегда являются структурой.
			ДатаОбмена = ДанныеДляЗагрузки.filedate;
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные загружены.");
		
	Иначе
		
		Если ТипЗагрузки = "payments" Тогда
			ДатаОбмена = ТекущаяДата();
		КонецЕсли;
		
		СведенияОбОшибке = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("error") И НЕ ПустаяСтрока(СтруктураОтвета.error),
							 СтруктураОтвета.error,
							 "Не удалось загрузить данные.");
		
	КонецЕсли;
	
	// Записываем сведения о результатах обмена.
	УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа,
																				  СодержимоеФайла,
																				  СведенияОбОшибке,
																				  ВидОбмена,
																				  ?(ВариантОбмена = Неопределено, Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(), ВариантОбмена),
																				  ДатаОбмена,
																				  СтруктураИнформацииОСайте,
																				  СтруктураОтвета);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// МНОГОПОТОЧНАЯ ОБРАБОТКА ДАННЫХ

#Область МногопоточныйОбменДанными

// Подготавливает массив наборов параметров для передачи в потоки.
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиВыгрузкаДанныхПоЛС(НастройкаДоступа, СтруктураНастроек, ТаблицаВсехЛС, МассивАдресовСписковФайлов, МассивАдресовСтатусовВыполнения, КоличествоЛСВФайле, КоличествоПотоков)
	
	// Подготавливаем количество л/с, распределяемое на каждый поток.
	КоличествоЛСОбщее   = ТаблицаВсехЛС.Количество();
	КоличествоЛСНаПоток = Цел(ТаблицаВсехЛС.Количество() / КоличествоПотоков);
	
	// Уже распределенное по потокам количество л/с.
	РаспределенноеКоличествоЛС = 0;
	
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	// Подготавливаем все потоки.
	Для Сч = 1 по КоличествоПотоков Цикл
		
		// В последний поток может быть передано на 1 л/с больше,
		// если общее количество не делится нацело.
		КоличествоЛСДляПотокаТекущее = ?(Сч = КоличествоПотоков, КоличествоЛСОбщее - РаспределенноеКоличествоЛС, КоличествоЛСНаПоток);
		
		Если КоличествоЛСДляПотокаТекущее = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		РаспределенноеКоличествоЛС = РаспределенноеКоличествоЛС + КоличествоЛСНаПоток;
		
		// Подготавливаем структуру настроек для л/с, распределенных на текущий поток.
		ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСДляПотокаТекущее);
		
		// Подготавливаем адреса во временном хранилище, куда будут сохранены результаты выполнения потока.
		АдресСпискаФайлов      = ПоместитьВоВременноеХранилище(Неопределено);
		АдресСтатусаВыполнения = ПоместитьВоВременноеХранилище(Неопределено);
		
		МассивАдресовСписковФайлов.Добавить(АдресСпискаФайлов);
		МассивАдресовСтатусовВыполнения.Добавить(АдресСтатусаВыполнения);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(НастройкаДоступа);
		МассивПараметров.Добавить(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураНастроек));
		МассивПараметров.Добавить(КоличествоЛСВФайле);
		МассивПараметров.Добавить(АдресСпискаФайлов);
		МассивПараметров.Добавить(АдресСтатусаВыполнения);
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции

// Выполняет многопоточную выгрузку на сайт основных учетных данных (начисления, показания по ПУ и пр.).
//
// Параметры:
//  НастройкаДоступа - текущие настройки доступа.
//  СтруктураНастроек - структура настроек сбора данных.
//  КоличествоЛСВФайле - максимальное количество л/с в файле обмена.
//  АдресСпискаФайловОбмена - адрес во временном хранилище, куда будет сохраняться массив сформированных файлов.
//  АдресСтатусаВыполнения - адрес во временном хранилище, куда будут сохраняться информация об успешности 
//                           подготовоки данных (булево).
//
Процедура ВыполнитьВыгрузкуДанныхПоЛСПоЗаданнымПараметрам(НастройкаДоступа, СтруктураНастроек, КоличествоЛСВФайле, АдресСпискаФайловОбмена, АдресСтатусаВыполнения) Экспорт
	
	// Подготавливаем массивы, в которых будут сохранены результаты обмена.
	СписокФайловОбмена = Новый Массив;
	ВыполняетсяУспешно = Истина;
	
	// Таблица всех л/с, которые нужно обработать в фоновом задании.
	ТаблицаВсехЛС = СтруктураНастроек.ТаблицаОбъектов;
	
	// Подготавливаем данные и формируем файлы обмена.
	// При этом подготавливаем данные порциями и для каждой из них
	// формируем отдельный файл.
	Пока НЕ ТаблицаВсехЛС.Количество() = 0 И ВыполняетсяУспешно Цикл
		
		// Подготавливаем структуру настроек для текущей порции л/с.
		ПодготовитьСтруктуруНастроекДляТекущейВыгрузки(СтруктураНастроек, ТаблицаВсехЛС, КоличествоЛСВФайле);
		
		// Подготавливаем данные для выгрузки.
		СтруктураПараметров = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьСтруктуруСДаннымиДляКвитанции(НастройкаДоступа, СтруктураНастроек);
		
		Если СтруктураПараметров = Неопределено Тогда
			ВыполняетсяУспешно = Ложь;
		Иначе
			
			// Формируем файл обмена.
			ФайлВыгрузки = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.СформироватьФайлXMLЧетвертыйФормат(СтруктураПараметров, НастройкаДоступа, "calculations");
			
			Если ФайлВыгрузки = Неопределено Тогда
				ВыполняетсяУспешно = Ложь;
			Иначе
				ФайлВыгрузкиДвоичныеДанные = Новый ДвоичныеДанные(ФайлВыгрузки);
				СписокФайловОбмена.Добавить(ФайлВыгрузкиДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Помещаем во временное хранилище результаты.
	ПоместитьВоВременноеХранилище(СписокФайловОбмена, АдресСпискаФайловОбмена);
	ПоместитьВоВременноеХранилище(ВыполняетсяУспешно, АдресСтатусаВыполнения);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФункционалОтладки

// Выполняет выгрузку на сайт существующего файла журнала обмена данными с сайтом.
//
Процедура ВыполнитьПовторнуюВыгрузкуФайла(СтруктураОтбора, Пароль = Неопределено) Экспорт
	
	// Инициализация переменных.
	СведенияОбОшибке = "";
	ВидОбмена        = СтруктураОтбора.ВидОбмена;
	НастройкаДоступа = СтруктураОтбора.НастройкаДоступа;
	КоличествоУспешноПереданныхФайлов = 0;
	
	// Если пароль не указан, то считаем, что пароль хранится в параметрах доступа.
	Если Пароль = Неопределено Тогда
		Пароль = НастройкаДоступа.Пароль;
	КонецЕсли;
	
	// Создадим массивы для выгрузки файлов.
	МассивФайлов  = Новый Массив;
	МассивОтветов = Новый Массив;
	
	// Определяем вид обмена.
	Если ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ВыгрузкаПараметровДоступа
	 ИЛИ ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяОтправкаПараметровДоступаНаСайт Тогда
		ТипОбмена = "access";
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяОтправкаПараметровДоступаНаСайт;
	Иначе
		ТипОбмена = "accounts";
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяВыгрузкаДанныхНаСайт;
	КонецЕсли;
	
	// Определение версии обмена и установленных модулей.
	СтруктураИнформацииОСайте = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПолучитьИнформациюОСайте(НастройкаДоступа);
	
	Если СтруктураИнформацииОСайте.ВерсияФорматаОбмена = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить сведения о сайте.");
		Возврат;
	КонецЕсли;
	
	// Определение сведений о файле обмена и параметрах обмена, таких как номер версии и т.д.
	СтруктураСведенийОФайле = РегистрыСведений.УПЖКХ_ЖурналОбменаССайтом.ПолучитьСведенияОФайлеОбмена(СтруктураОтбора);
	
	Если НЕ СтруктураСведенийОФайле.СохраненныйФайл = Неопределено Тогда
		
		// Сохраняем файл.
		ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураСведенийОФайле.РасширениеФайла);
		СтруктураСведенийОФайле.СохраненныйФайл.Записать(ИмяФайла);
		
		// Если файл является zip-архивом, то распаковываем его и записываем имена файлов в массив.
		Если СтруктураСведенийОФайле.РасширениеФайла = "zip" Тогда
			
			Попытка
				
				КаталогВременныхФайлов = КаталогВременныхФайлов();
				
				ФайлАрхива = Новый ЧтениеZIPФайла(ИмяФайла);
				
				Для каждого ТекЗапакованныйАрхива из ФайлАрхива Цикл
					МассивФайлов.Добавить(КаталогВременныхФайлов + ТекЗапакованныйАрхива.Имя);
				КонецЦикла;
				
				ФайлАрхива.ИзвлечьВсе(КаталогВременныхФайлов);
				
				Если МассивФайлов.Количество() = 0 Тогда
					ВызватьИсключение "архив не содержит файлов обмена.";
				КонецЕсли;
				
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл: " + ОписаниеОшибки());
			КонецПопытки;
			
		// Если файл не является архивом, добавляем его в массив файлов.
		Иначе
			
			МассивФайлов.Добавить(ИмяФайла);
			
		КонецЕсли;
		
		// Передаем файлы на сайт.
		Для каждого ТекФайл из МассивФайлов Цикл
			
			Ответ = УПЖКХ_ВебИнтеграцияВзаимодействиеССайтом.ПередатьДанныеНаСайт(ТекФайл,
																				  ТипОбмена,
																				  НастройкаДоступа,
																				  Пароль,
																				  СведенияОбОшибке,
																				  СтруктураИнформацииОСайте,
																				  ,
																				  Истина);
			
			МассивОтветов.Добавить(Ответ);
			
			// Формируем сведения для вывода по завершении обмена.
			Если Ответ.status = "success" Тогда
				КоличествоУспешноПереданныхФайлов = КоличествоУспешноПереданныхФайлов + 1;
			Иначе
				СведенияОбОшибке = СведенияОбОшибке + "
				|Не выполнена передача файла:" + ТекФайл + "
				|Описание ошибки:" + Ответ.error;
			КонецЕсли;
			
		КонецЦикла;
		
		// Сообщаем о результатах.
		СообщениеОРезультате = "Количество успешно переданных файлов:" + Строка(КоличествоУспешноПереданныхФайлов) + " из " + Строка(МассивФайлов.Количество());
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СообщениеОРезультате);
		
		// Создаем запись по результатам обмена.
		УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа,
																					  МассивФайлов,
																					  СведенияОбОшибке,
																					  ВидОбмена,
																					  Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(),
																					  ,
																					  СтруктураИнформацииОСайте,
																					  МассивОтветов,
																					  СообщениеОРезультате);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружен файл обмена.");
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку в базу данных из существующего файла журнала обмена данными с сайтом.
//
Процедура ВыполнитьПовторнуюЗагрузкуФайла(СтруктураОтбора) Экспорт
	
	// Инициализация переменных.
	СведенияОбОшибке = "";
	ВидОбмена        = "";
	НастройкаДоступа = СтруктураОтбора.НастройкаДоступа;
	
	// Переопределяем вид обмена на отладочный.
	Если СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаПоказанийПУ
	 ИЛИ СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаПоказанийИзФайла Тогда
		
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаПоказанийИзФайла;
		
	ИначеЕсли СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаРеестраПлатежей
		  ИЛИ СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаОплатИзФайла Тогда
		
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаОплатИзФайла;
		
	ИначеЕсли СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ЗагрузкаСведенийОбАккаунтах
		  ИЛИ СтруктураОтбора.ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаАккаунтовИзФайла Тогда
		
		ВидОбмена = Перечисления.УПЖКХ_ВидыОбменаССайтом.ПовторнаяЗагрузкаАккаунтовИзФайла;
		
	КонецЕсли;
	
	// Определение сведений о файле обмена и параметрах обмена, таких как номер версии и т.д.
	СтруктураСведенийОФайле = РегистрыСведений.УПЖКХ_ЖурналОбменаССайтом.ПолучитьСведенияОФайлеОбмена(СтруктураОтбора);
	
	Если НЕ СтруктураСведенийОФайле.СохраненныйФайл = Неопределено Тогда
		
		// Сохраняем файл.
		ИмяФайла = ПолучитьИмяВременногоФайла(СтруктураСведенийОФайле.РасширениеФайла);
		СтруктураСведенийОФайле.СохраненныйФайл.Записать(ИмяФайла);
		
		// Получаем структуру содержащихся в файле данных и выполняем их загрузку в базу.
		СтруктураДанных = УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ПолучитьДанныеИзXML(ИмяФайла, НастройкаДоступа, СведенияОбОшибке, СтруктураСведенийОФайле);
		
		УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.ЗагрузитьДанныеВБазу(СтруктураДанных, НастройкаДоступа, СведенияОбОшибке, Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(), СтруктураСведенийОФайле, Ложь);
		
		// Сообщаем об ошибках, если таковые есть.
		Если ПустаяСтрока(СведенияОбОшибке) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Ошибок не обнаружено");
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СведенияОбОшибке);
		КонецЕсли;
		
		// Записываем сведения о результатах обмена.
		УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.СоздатьЗаписьЖурналаРегистрации(НастройкаДоступа,
																					  ИмяФайла,
																					  СведенияОбОшибке,
																					  ВидОбмена,
																					  Справочники.УПЖКХ_ВариантыОбменаДаннымиССайтом.ПустаяСсылка(),
																					  ,
																					  СтруктураСведенийОФайле,
																					  Новый Массив);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружен файл обмена.");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
